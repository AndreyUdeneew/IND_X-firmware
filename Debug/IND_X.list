
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd1c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008c40  0800ddd8  0800ddd8  0001ddd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016a18  08016a18  00030044  2**0
                  CONTENTS
  4 .ARM          00000000  08016a18  08016a18  00030044  2**0
                  CONTENTS
  5 .preinit_array 00000000  08016a18  08016a18  00030044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016a18  08016a18  00026a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016a1c  08016a1c  00026a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08016a20  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034e8  20000044  08016a64  00030044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000352c  08016a64  0003352c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030044  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a2ca  00000000  00000000  0003006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034ca  00000000  00000000  0004a336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e0  00000000  00000000  0004d800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001768  00000000  00000000  0004f0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c568  00000000  00000000  00050848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d41e  00000000  00000000  0006cdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae81f  00000000  00000000  0008a1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001389ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ef0  00000000  00000000  00138a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000044 	.word	0x20000044
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800ddc0 	.word	0x0800ddc0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000048 	.word	0x20000048
 8000100:	0800ddc0 	.word	0x0800ddc0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cdrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	1c10      	adds	r0, r2, #0
 80003f4:	4662      	mov	r2, ip
 80003f6:	468c      	mov	ip, r1
 80003f8:	1c19      	adds	r1, r3, #0
 80003fa:	4663      	mov	r3, ip
 80003fc:	e000      	b.n	8000400 <__aeabi_cdcmpeq>
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cdcmpeq>:
 8000400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000402:	f000 ff51 	bl	80012a8 <__ledf2>
 8000406:	2800      	cmp	r0, #0
 8000408:	d401      	bmi.n	800040e <__aeabi_cdcmpeq+0xe>
 800040a:	2100      	movs	r1, #0
 800040c:	42c8      	cmn	r0, r1
 800040e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000410 <__aeabi_dcmpeq>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f000 fe9b 	bl	800114c <__eqdf2>
 8000416:	4240      	negs	r0, r0
 8000418:	3001      	adds	r0, #1
 800041a:	bd10      	pop	{r4, pc}

0800041c <__aeabi_dcmplt>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f000 ff43 	bl	80012a8 <__ledf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	db01      	blt.n	800042a <__aeabi_dcmplt+0xe>
 8000426:	2000      	movs	r0, #0
 8000428:	bd10      	pop	{r4, pc}
 800042a:	2001      	movs	r0, #1
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_dcmple>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 ff39 	bl	80012a8 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	dd01      	ble.n	800043e <__aeabi_dcmple+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmpgt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 febd 	bl	80011c4 <__gedf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dc01      	bgt.n	8000452 <__aeabi_dcmpgt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpge>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 feb3 	bl	80011c4 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	da01      	bge.n	8000466 <__aeabi_dcmpge+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_d2uiz>:
 800046c:	b570      	push	{r4, r5, r6, lr}
 800046e:	2200      	movs	r2, #0
 8000470:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <__aeabi_d2uiz+0x38>)
 8000472:	0004      	movs	r4, r0
 8000474:	000d      	movs	r5, r1
 8000476:	f7ff ffef 	bl	8000458 <__aeabi_dcmpge>
 800047a:	2800      	cmp	r0, #0
 800047c:	d104      	bne.n	8000488 <__aeabi_d2uiz+0x1c>
 800047e:	0020      	movs	r0, r4
 8000480:	0029      	movs	r1, r5
 8000482:	f001 fd7f 	bl	8001f84 <__aeabi_d2iz>
 8000486:	bd70      	pop	{r4, r5, r6, pc}
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <__aeabi_d2uiz+0x38>)
 800048a:	2200      	movs	r2, #0
 800048c:	0020      	movs	r0, r4
 800048e:	0029      	movs	r1, r5
 8000490:	f001 f9e6 	bl	8001860 <__aeabi_dsub>
 8000494:	f001 fd76 	bl	8001f84 <__aeabi_d2iz>
 8000498:	2380      	movs	r3, #128	; 0x80
 800049a:	061b      	lsls	r3, r3, #24
 800049c:	469c      	mov	ip, r3
 800049e:	4460      	add	r0, ip
 80004a0:	e7f1      	b.n	8000486 <__aeabi_d2uiz+0x1a>
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	41e00000 	.word	0x41e00000

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	46d6      	mov	lr, sl
 80004ae:	4646      	mov	r6, r8
 80004b0:	000d      	movs	r5, r1
 80004b2:	0001      	movs	r1, r0
 80004b4:	0018      	movs	r0, r3
 80004b6:	b5c0      	push	{r6, r7, lr}
 80004b8:	0017      	movs	r7, r2
 80004ba:	032b      	lsls	r3, r5, #12
 80004bc:	0a5a      	lsrs	r2, r3, #9
 80004be:	0f4b      	lsrs	r3, r1, #29
 80004c0:	4313      	orrs	r3, r2
 80004c2:	00ca      	lsls	r2, r1, #3
 80004c4:	4691      	mov	r9, r2
 80004c6:	0302      	lsls	r2, r0, #12
 80004c8:	006e      	lsls	r6, r5, #1
 80004ca:	0041      	lsls	r1, r0, #1
 80004cc:	0a52      	lsrs	r2, r2, #9
 80004ce:	0fec      	lsrs	r4, r5, #31
 80004d0:	0f7d      	lsrs	r5, r7, #29
 80004d2:	4315      	orrs	r5, r2
 80004d4:	0d76      	lsrs	r6, r6, #21
 80004d6:	0d49      	lsrs	r1, r1, #21
 80004d8:	0fc0      	lsrs	r0, r0, #31
 80004da:	4682      	mov	sl, r0
 80004dc:	46ac      	mov	ip, r5
 80004de:	00ff      	lsls	r7, r7, #3
 80004e0:	1a72      	subs	r2, r6, r1
 80004e2:	4284      	cmp	r4, r0
 80004e4:	d100      	bne.n	80004e8 <__aeabi_dadd+0x40>
 80004e6:	e098      	b.n	800061a <__aeabi_dadd+0x172>
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	dc00      	bgt.n	80004ee <__aeabi_dadd+0x46>
 80004ec:	e081      	b.n	80005f2 <__aeabi_dadd+0x14a>
 80004ee:	2900      	cmp	r1, #0
 80004f0:	d100      	bne.n	80004f4 <__aeabi_dadd+0x4c>
 80004f2:	e0b6      	b.n	8000662 <__aeabi_dadd+0x1ba>
 80004f4:	49c9      	ldr	r1, [pc, #804]	; (800081c <__aeabi_dadd+0x374>)
 80004f6:	428e      	cmp	r6, r1
 80004f8:	d100      	bne.n	80004fc <__aeabi_dadd+0x54>
 80004fa:	e172      	b.n	80007e2 <__aeabi_dadd+0x33a>
 80004fc:	2180      	movs	r1, #128	; 0x80
 80004fe:	0028      	movs	r0, r5
 8000500:	0409      	lsls	r1, r1, #16
 8000502:	4308      	orrs	r0, r1
 8000504:	4684      	mov	ip, r0
 8000506:	2a38      	cmp	r2, #56	; 0x38
 8000508:	dd00      	ble.n	800050c <__aeabi_dadd+0x64>
 800050a:	e15e      	b.n	80007ca <__aeabi_dadd+0x322>
 800050c:	2a1f      	cmp	r2, #31
 800050e:	dd00      	ble.n	8000512 <__aeabi_dadd+0x6a>
 8000510:	e1ee      	b.n	80008f0 <__aeabi_dadd+0x448>
 8000512:	2020      	movs	r0, #32
 8000514:	0039      	movs	r1, r7
 8000516:	4665      	mov	r5, ip
 8000518:	1a80      	subs	r0, r0, r2
 800051a:	4087      	lsls	r7, r0
 800051c:	40d1      	lsrs	r1, r2
 800051e:	4085      	lsls	r5, r0
 8000520:	430d      	orrs	r5, r1
 8000522:	0039      	movs	r1, r7
 8000524:	1e4f      	subs	r7, r1, #1
 8000526:	41b9      	sbcs	r1, r7
 8000528:	4667      	mov	r7, ip
 800052a:	40d7      	lsrs	r7, r2
 800052c:	4329      	orrs	r1, r5
 800052e:	1bdb      	subs	r3, r3, r7
 8000530:	464a      	mov	r2, r9
 8000532:	1a55      	subs	r5, r2, r1
 8000534:	45a9      	cmp	r9, r5
 8000536:	4189      	sbcs	r1, r1
 8000538:	4249      	negs	r1, r1
 800053a:	1a5b      	subs	r3, r3, r1
 800053c:	4698      	mov	r8, r3
 800053e:	4643      	mov	r3, r8
 8000540:	021b      	lsls	r3, r3, #8
 8000542:	d400      	bmi.n	8000546 <__aeabi_dadd+0x9e>
 8000544:	e0cc      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000546:	4643      	mov	r3, r8
 8000548:	025b      	lsls	r3, r3, #9
 800054a:	0a5b      	lsrs	r3, r3, #9
 800054c:	4698      	mov	r8, r3
 800054e:	4643      	mov	r3, r8
 8000550:	2b00      	cmp	r3, #0
 8000552:	d100      	bne.n	8000556 <__aeabi_dadd+0xae>
 8000554:	e12c      	b.n	80007b0 <__aeabi_dadd+0x308>
 8000556:	4640      	mov	r0, r8
 8000558:	f001 fda0 	bl	800209c <__clzsi2>
 800055c:	0001      	movs	r1, r0
 800055e:	3908      	subs	r1, #8
 8000560:	2220      	movs	r2, #32
 8000562:	0028      	movs	r0, r5
 8000564:	4643      	mov	r3, r8
 8000566:	1a52      	subs	r2, r2, r1
 8000568:	408b      	lsls	r3, r1
 800056a:	40d0      	lsrs	r0, r2
 800056c:	408d      	lsls	r5, r1
 800056e:	4303      	orrs	r3, r0
 8000570:	428e      	cmp	r6, r1
 8000572:	dd00      	ble.n	8000576 <__aeabi_dadd+0xce>
 8000574:	e117      	b.n	80007a6 <__aeabi_dadd+0x2fe>
 8000576:	1b8e      	subs	r6, r1, r6
 8000578:	1c72      	adds	r2, r6, #1
 800057a:	2a1f      	cmp	r2, #31
 800057c:	dd00      	ble.n	8000580 <__aeabi_dadd+0xd8>
 800057e:	e1a7      	b.n	80008d0 <__aeabi_dadd+0x428>
 8000580:	2120      	movs	r1, #32
 8000582:	0018      	movs	r0, r3
 8000584:	002e      	movs	r6, r5
 8000586:	1a89      	subs	r1, r1, r2
 8000588:	408d      	lsls	r5, r1
 800058a:	4088      	lsls	r0, r1
 800058c:	40d6      	lsrs	r6, r2
 800058e:	40d3      	lsrs	r3, r2
 8000590:	1e69      	subs	r1, r5, #1
 8000592:	418d      	sbcs	r5, r1
 8000594:	4330      	orrs	r0, r6
 8000596:	4698      	mov	r8, r3
 8000598:	2600      	movs	r6, #0
 800059a:	4305      	orrs	r5, r0
 800059c:	076b      	lsls	r3, r5, #29
 800059e:	d009      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a0:	230f      	movs	r3, #15
 80005a2:	402b      	ands	r3, r5
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	d005      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a8:	1d2b      	adds	r3, r5, #4
 80005aa:	42ab      	cmp	r3, r5
 80005ac:	41ad      	sbcs	r5, r5
 80005ae:	426d      	negs	r5, r5
 80005b0:	44a8      	add	r8, r5
 80005b2:	001d      	movs	r5, r3
 80005b4:	4643      	mov	r3, r8
 80005b6:	021b      	lsls	r3, r3, #8
 80005b8:	d400      	bmi.n	80005bc <__aeabi_dadd+0x114>
 80005ba:	e094      	b.n	80006e6 <__aeabi_dadd+0x23e>
 80005bc:	4b97      	ldr	r3, [pc, #604]	; (800081c <__aeabi_dadd+0x374>)
 80005be:	1c72      	adds	r2, r6, #1
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d100      	bne.n	80005c6 <__aeabi_dadd+0x11e>
 80005c4:	e09d      	b.n	8000702 <__aeabi_dadd+0x25a>
 80005c6:	4641      	mov	r1, r8
 80005c8:	4b95      	ldr	r3, [pc, #596]	; (8000820 <__aeabi_dadd+0x378>)
 80005ca:	08ed      	lsrs	r5, r5, #3
 80005cc:	4019      	ands	r1, r3
 80005ce:	000b      	movs	r3, r1
 80005d0:	0552      	lsls	r2, r2, #21
 80005d2:	0749      	lsls	r1, r1, #29
 80005d4:	025b      	lsls	r3, r3, #9
 80005d6:	4329      	orrs	r1, r5
 80005d8:	0b1b      	lsrs	r3, r3, #12
 80005da:	0d52      	lsrs	r2, r2, #21
 80005dc:	0512      	lsls	r2, r2, #20
 80005de:	4313      	orrs	r3, r2
 80005e0:	07e4      	lsls	r4, r4, #31
 80005e2:	4323      	orrs	r3, r4
 80005e4:	0008      	movs	r0, r1
 80005e6:	0019      	movs	r1, r3
 80005e8:	bce0      	pop	{r5, r6, r7}
 80005ea:	46ba      	mov	sl, r7
 80005ec:	46b1      	mov	r9, r6
 80005ee:	46a8      	mov	r8, r5
 80005f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f2:	2a00      	cmp	r2, #0
 80005f4:	d043      	beq.n	800067e <__aeabi_dadd+0x1d6>
 80005f6:	1b8a      	subs	r2, r1, r6
 80005f8:	2e00      	cmp	r6, #0
 80005fa:	d000      	beq.n	80005fe <__aeabi_dadd+0x156>
 80005fc:	e12a      	b.n	8000854 <__aeabi_dadd+0x3ac>
 80005fe:	464c      	mov	r4, r9
 8000600:	431c      	orrs	r4, r3
 8000602:	d100      	bne.n	8000606 <__aeabi_dadd+0x15e>
 8000604:	e1d1      	b.n	80009aa <__aeabi_dadd+0x502>
 8000606:	1e54      	subs	r4, r2, #1
 8000608:	2a01      	cmp	r2, #1
 800060a:	d100      	bne.n	800060e <__aeabi_dadd+0x166>
 800060c:	e21f      	b.n	8000a4e <__aeabi_dadd+0x5a6>
 800060e:	4d83      	ldr	r5, [pc, #524]	; (800081c <__aeabi_dadd+0x374>)
 8000610:	42aa      	cmp	r2, r5
 8000612:	d100      	bne.n	8000616 <__aeabi_dadd+0x16e>
 8000614:	e272      	b.n	8000afc <__aeabi_dadd+0x654>
 8000616:	0022      	movs	r2, r4
 8000618:	e123      	b.n	8000862 <__aeabi_dadd+0x3ba>
 800061a:	2a00      	cmp	r2, #0
 800061c:	dc00      	bgt.n	8000620 <__aeabi_dadd+0x178>
 800061e:	e098      	b.n	8000752 <__aeabi_dadd+0x2aa>
 8000620:	2900      	cmp	r1, #0
 8000622:	d042      	beq.n	80006aa <__aeabi_dadd+0x202>
 8000624:	497d      	ldr	r1, [pc, #500]	; (800081c <__aeabi_dadd+0x374>)
 8000626:	428e      	cmp	r6, r1
 8000628:	d100      	bne.n	800062c <__aeabi_dadd+0x184>
 800062a:	e0da      	b.n	80007e2 <__aeabi_dadd+0x33a>
 800062c:	2180      	movs	r1, #128	; 0x80
 800062e:	0028      	movs	r0, r5
 8000630:	0409      	lsls	r1, r1, #16
 8000632:	4308      	orrs	r0, r1
 8000634:	4684      	mov	ip, r0
 8000636:	2a38      	cmp	r2, #56	; 0x38
 8000638:	dd00      	ble.n	800063c <__aeabi_dadd+0x194>
 800063a:	e129      	b.n	8000890 <__aeabi_dadd+0x3e8>
 800063c:	2a1f      	cmp	r2, #31
 800063e:	dc00      	bgt.n	8000642 <__aeabi_dadd+0x19a>
 8000640:	e187      	b.n	8000952 <__aeabi_dadd+0x4aa>
 8000642:	0011      	movs	r1, r2
 8000644:	4665      	mov	r5, ip
 8000646:	3920      	subs	r1, #32
 8000648:	40cd      	lsrs	r5, r1
 800064a:	2a20      	cmp	r2, #32
 800064c:	d004      	beq.n	8000658 <__aeabi_dadd+0x1b0>
 800064e:	2040      	movs	r0, #64	; 0x40
 8000650:	4661      	mov	r1, ip
 8000652:	1a82      	subs	r2, r0, r2
 8000654:	4091      	lsls	r1, r2
 8000656:	430f      	orrs	r7, r1
 8000658:	0039      	movs	r1, r7
 800065a:	1e4f      	subs	r7, r1, #1
 800065c:	41b9      	sbcs	r1, r7
 800065e:	430d      	orrs	r5, r1
 8000660:	e11b      	b.n	800089a <__aeabi_dadd+0x3f2>
 8000662:	0029      	movs	r1, r5
 8000664:	4339      	orrs	r1, r7
 8000666:	d100      	bne.n	800066a <__aeabi_dadd+0x1c2>
 8000668:	e0b5      	b.n	80007d6 <__aeabi_dadd+0x32e>
 800066a:	1e51      	subs	r1, r2, #1
 800066c:	2a01      	cmp	r2, #1
 800066e:	d100      	bne.n	8000672 <__aeabi_dadd+0x1ca>
 8000670:	e1ab      	b.n	80009ca <__aeabi_dadd+0x522>
 8000672:	486a      	ldr	r0, [pc, #424]	; (800081c <__aeabi_dadd+0x374>)
 8000674:	4282      	cmp	r2, r0
 8000676:	d100      	bne.n	800067a <__aeabi_dadd+0x1d2>
 8000678:	e1b2      	b.n	80009e0 <__aeabi_dadd+0x538>
 800067a:	000a      	movs	r2, r1
 800067c:	e743      	b.n	8000506 <__aeabi_dadd+0x5e>
 800067e:	4969      	ldr	r1, [pc, #420]	; (8000824 <__aeabi_dadd+0x37c>)
 8000680:	1c75      	adds	r5, r6, #1
 8000682:	420d      	tst	r5, r1
 8000684:	d000      	beq.n	8000688 <__aeabi_dadd+0x1e0>
 8000686:	e0cf      	b.n	8000828 <__aeabi_dadd+0x380>
 8000688:	2e00      	cmp	r6, #0
 800068a:	d000      	beq.n	800068e <__aeabi_dadd+0x1e6>
 800068c:	e193      	b.n	80009b6 <__aeabi_dadd+0x50e>
 800068e:	4649      	mov	r1, r9
 8000690:	4319      	orrs	r1, r3
 8000692:	d100      	bne.n	8000696 <__aeabi_dadd+0x1ee>
 8000694:	e1d1      	b.n	8000a3a <__aeabi_dadd+0x592>
 8000696:	4661      	mov	r1, ip
 8000698:	4339      	orrs	r1, r7
 800069a:	d000      	beq.n	800069e <__aeabi_dadd+0x1f6>
 800069c:	e1e3      	b.n	8000a66 <__aeabi_dadd+0x5be>
 800069e:	4649      	mov	r1, r9
 80006a0:	0758      	lsls	r0, r3, #29
 80006a2:	08c9      	lsrs	r1, r1, #3
 80006a4:	4301      	orrs	r1, r0
 80006a6:	08db      	lsrs	r3, r3, #3
 80006a8:	e026      	b.n	80006f8 <__aeabi_dadd+0x250>
 80006aa:	0029      	movs	r1, r5
 80006ac:	4339      	orrs	r1, r7
 80006ae:	d100      	bne.n	80006b2 <__aeabi_dadd+0x20a>
 80006b0:	e091      	b.n	80007d6 <__aeabi_dadd+0x32e>
 80006b2:	1e51      	subs	r1, r2, #1
 80006b4:	2a01      	cmp	r2, #1
 80006b6:	d005      	beq.n	80006c4 <__aeabi_dadd+0x21c>
 80006b8:	4858      	ldr	r0, [pc, #352]	; (800081c <__aeabi_dadd+0x374>)
 80006ba:	4282      	cmp	r2, r0
 80006bc:	d100      	bne.n	80006c0 <__aeabi_dadd+0x218>
 80006be:	e18f      	b.n	80009e0 <__aeabi_dadd+0x538>
 80006c0:	000a      	movs	r2, r1
 80006c2:	e7b8      	b.n	8000636 <__aeabi_dadd+0x18e>
 80006c4:	003d      	movs	r5, r7
 80006c6:	444d      	add	r5, r9
 80006c8:	454d      	cmp	r5, r9
 80006ca:	4189      	sbcs	r1, r1
 80006cc:	4463      	add	r3, ip
 80006ce:	4698      	mov	r8, r3
 80006d0:	4249      	negs	r1, r1
 80006d2:	4488      	add	r8, r1
 80006d4:	4643      	mov	r3, r8
 80006d6:	2602      	movs	r6, #2
 80006d8:	021b      	lsls	r3, r3, #8
 80006da:	d500      	bpl.n	80006de <__aeabi_dadd+0x236>
 80006dc:	e0eb      	b.n	80008b6 <__aeabi_dadd+0x40e>
 80006de:	3e01      	subs	r6, #1
 80006e0:	076b      	lsls	r3, r5, #29
 80006e2:	d000      	beq.n	80006e6 <__aeabi_dadd+0x23e>
 80006e4:	e75c      	b.n	80005a0 <__aeabi_dadd+0xf8>
 80006e6:	4643      	mov	r3, r8
 80006e8:	08e9      	lsrs	r1, r5, #3
 80006ea:	075a      	lsls	r2, r3, #29
 80006ec:	4311      	orrs	r1, r2
 80006ee:	0032      	movs	r2, r6
 80006f0:	08db      	lsrs	r3, r3, #3
 80006f2:	484a      	ldr	r0, [pc, #296]	; (800081c <__aeabi_dadd+0x374>)
 80006f4:	4282      	cmp	r2, r0
 80006f6:	d021      	beq.n	800073c <__aeabi_dadd+0x294>
 80006f8:	031b      	lsls	r3, r3, #12
 80006fa:	0552      	lsls	r2, r2, #21
 80006fc:	0b1b      	lsrs	r3, r3, #12
 80006fe:	0d52      	lsrs	r2, r2, #21
 8000700:	e76c      	b.n	80005dc <__aeabi_dadd+0x134>
 8000702:	2300      	movs	r3, #0
 8000704:	2100      	movs	r1, #0
 8000706:	e769      	b.n	80005dc <__aeabi_dadd+0x134>
 8000708:	002a      	movs	r2, r5
 800070a:	433a      	orrs	r2, r7
 800070c:	d069      	beq.n	80007e2 <__aeabi_dadd+0x33a>
 800070e:	464a      	mov	r2, r9
 8000710:	0758      	lsls	r0, r3, #29
 8000712:	08d1      	lsrs	r1, r2, #3
 8000714:	08da      	lsrs	r2, r3, #3
 8000716:	2380      	movs	r3, #128	; 0x80
 8000718:	031b      	lsls	r3, r3, #12
 800071a:	4308      	orrs	r0, r1
 800071c:	421a      	tst	r2, r3
 800071e:	d007      	beq.n	8000730 <__aeabi_dadd+0x288>
 8000720:	0029      	movs	r1, r5
 8000722:	08ed      	lsrs	r5, r5, #3
 8000724:	421d      	tst	r5, r3
 8000726:	d103      	bne.n	8000730 <__aeabi_dadd+0x288>
 8000728:	002a      	movs	r2, r5
 800072a:	08ff      	lsrs	r7, r7, #3
 800072c:	0748      	lsls	r0, r1, #29
 800072e:	4338      	orrs	r0, r7
 8000730:	0f43      	lsrs	r3, r0, #29
 8000732:	00c1      	lsls	r1, r0, #3
 8000734:	075b      	lsls	r3, r3, #29
 8000736:	08c9      	lsrs	r1, r1, #3
 8000738:	4319      	orrs	r1, r3
 800073a:	0013      	movs	r3, r2
 800073c:	000a      	movs	r2, r1
 800073e:	431a      	orrs	r2, r3
 8000740:	d100      	bne.n	8000744 <__aeabi_dadd+0x29c>
 8000742:	e213      	b.n	8000b6c <__aeabi_dadd+0x6c4>
 8000744:	2280      	movs	r2, #128	; 0x80
 8000746:	0312      	lsls	r2, r2, #12
 8000748:	4313      	orrs	r3, r2
 800074a:	031b      	lsls	r3, r3, #12
 800074c:	4a33      	ldr	r2, [pc, #204]	; (800081c <__aeabi_dadd+0x374>)
 800074e:	0b1b      	lsrs	r3, r3, #12
 8000750:	e744      	b.n	80005dc <__aeabi_dadd+0x134>
 8000752:	2a00      	cmp	r2, #0
 8000754:	d04b      	beq.n	80007ee <__aeabi_dadd+0x346>
 8000756:	1b8a      	subs	r2, r1, r6
 8000758:	2e00      	cmp	r6, #0
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x2b6>
 800075c:	e0e7      	b.n	800092e <__aeabi_dadd+0x486>
 800075e:	482f      	ldr	r0, [pc, #188]	; (800081c <__aeabi_dadd+0x374>)
 8000760:	4281      	cmp	r1, r0
 8000762:	d100      	bne.n	8000766 <__aeabi_dadd+0x2be>
 8000764:	e195      	b.n	8000a92 <__aeabi_dadd+0x5ea>
 8000766:	2080      	movs	r0, #128	; 0x80
 8000768:	0400      	lsls	r0, r0, #16
 800076a:	4303      	orrs	r3, r0
 800076c:	2a38      	cmp	r2, #56	; 0x38
 800076e:	dd00      	ble.n	8000772 <__aeabi_dadd+0x2ca>
 8000770:	e143      	b.n	80009fa <__aeabi_dadd+0x552>
 8000772:	2a1f      	cmp	r2, #31
 8000774:	dd00      	ble.n	8000778 <__aeabi_dadd+0x2d0>
 8000776:	e1db      	b.n	8000b30 <__aeabi_dadd+0x688>
 8000778:	2020      	movs	r0, #32
 800077a:	001d      	movs	r5, r3
 800077c:	464e      	mov	r6, r9
 800077e:	1a80      	subs	r0, r0, r2
 8000780:	4085      	lsls	r5, r0
 8000782:	40d6      	lsrs	r6, r2
 8000784:	4335      	orrs	r5, r6
 8000786:	464e      	mov	r6, r9
 8000788:	4086      	lsls	r6, r0
 800078a:	0030      	movs	r0, r6
 800078c:	40d3      	lsrs	r3, r2
 800078e:	1e46      	subs	r6, r0, #1
 8000790:	41b0      	sbcs	r0, r6
 8000792:	449c      	add	ip, r3
 8000794:	4305      	orrs	r5, r0
 8000796:	19ed      	adds	r5, r5, r7
 8000798:	42bd      	cmp	r5, r7
 800079a:	419b      	sbcs	r3, r3
 800079c:	425b      	negs	r3, r3
 800079e:	4463      	add	r3, ip
 80007a0:	4698      	mov	r8, r3
 80007a2:	000e      	movs	r6, r1
 80007a4:	e07f      	b.n	80008a6 <__aeabi_dadd+0x3fe>
 80007a6:	4a1e      	ldr	r2, [pc, #120]	; (8000820 <__aeabi_dadd+0x378>)
 80007a8:	1a76      	subs	r6, r6, r1
 80007aa:	4013      	ands	r3, r2
 80007ac:	4698      	mov	r8, r3
 80007ae:	e6f5      	b.n	800059c <__aeabi_dadd+0xf4>
 80007b0:	0028      	movs	r0, r5
 80007b2:	f001 fc73 	bl	800209c <__clzsi2>
 80007b6:	0001      	movs	r1, r0
 80007b8:	3118      	adds	r1, #24
 80007ba:	291f      	cmp	r1, #31
 80007bc:	dc00      	bgt.n	80007c0 <__aeabi_dadd+0x318>
 80007be:	e6cf      	b.n	8000560 <__aeabi_dadd+0xb8>
 80007c0:	002b      	movs	r3, r5
 80007c2:	3808      	subs	r0, #8
 80007c4:	4083      	lsls	r3, r0
 80007c6:	2500      	movs	r5, #0
 80007c8:	e6d2      	b.n	8000570 <__aeabi_dadd+0xc8>
 80007ca:	4662      	mov	r2, ip
 80007cc:	433a      	orrs	r2, r7
 80007ce:	0011      	movs	r1, r2
 80007d0:	1e4f      	subs	r7, r1, #1
 80007d2:	41b9      	sbcs	r1, r7
 80007d4:	e6ac      	b.n	8000530 <__aeabi_dadd+0x88>
 80007d6:	4649      	mov	r1, r9
 80007d8:	0758      	lsls	r0, r3, #29
 80007da:	08c9      	lsrs	r1, r1, #3
 80007dc:	4301      	orrs	r1, r0
 80007de:	08db      	lsrs	r3, r3, #3
 80007e0:	e787      	b.n	80006f2 <__aeabi_dadd+0x24a>
 80007e2:	4649      	mov	r1, r9
 80007e4:	075a      	lsls	r2, r3, #29
 80007e6:	08c9      	lsrs	r1, r1, #3
 80007e8:	4311      	orrs	r1, r2
 80007ea:	08db      	lsrs	r3, r3, #3
 80007ec:	e7a6      	b.n	800073c <__aeabi_dadd+0x294>
 80007ee:	490d      	ldr	r1, [pc, #52]	; (8000824 <__aeabi_dadd+0x37c>)
 80007f0:	1c70      	adds	r0, r6, #1
 80007f2:	4208      	tst	r0, r1
 80007f4:	d000      	beq.n	80007f8 <__aeabi_dadd+0x350>
 80007f6:	e0bb      	b.n	8000970 <__aeabi_dadd+0x4c8>
 80007f8:	2e00      	cmp	r6, #0
 80007fa:	d000      	beq.n	80007fe <__aeabi_dadd+0x356>
 80007fc:	e114      	b.n	8000a28 <__aeabi_dadd+0x580>
 80007fe:	4649      	mov	r1, r9
 8000800:	4319      	orrs	r1, r3
 8000802:	d100      	bne.n	8000806 <__aeabi_dadd+0x35e>
 8000804:	e175      	b.n	8000af2 <__aeabi_dadd+0x64a>
 8000806:	0029      	movs	r1, r5
 8000808:	4339      	orrs	r1, r7
 800080a:	d000      	beq.n	800080e <__aeabi_dadd+0x366>
 800080c:	e17e      	b.n	8000b0c <__aeabi_dadd+0x664>
 800080e:	4649      	mov	r1, r9
 8000810:	0758      	lsls	r0, r3, #29
 8000812:	08c9      	lsrs	r1, r1, #3
 8000814:	4301      	orrs	r1, r0
 8000816:	08db      	lsrs	r3, r3, #3
 8000818:	e76e      	b.n	80006f8 <__aeabi_dadd+0x250>
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	000007ff 	.word	0x000007ff
 8000820:	ff7fffff 	.word	0xff7fffff
 8000824:	000007fe 	.word	0x000007fe
 8000828:	4649      	mov	r1, r9
 800082a:	1bcd      	subs	r5, r1, r7
 800082c:	4661      	mov	r1, ip
 800082e:	1a58      	subs	r0, r3, r1
 8000830:	45a9      	cmp	r9, r5
 8000832:	4189      	sbcs	r1, r1
 8000834:	4249      	negs	r1, r1
 8000836:	4688      	mov	r8, r1
 8000838:	0001      	movs	r1, r0
 800083a:	4640      	mov	r0, r8
 800083c:	1a09      	subs	r1, r1, r0
 800083e:	4688      	mov	r8, r1
 8000840:	0209      	lsls	r1, r1, #8
 8000842:	d500      	bpl.n	8000846 <__aeabi_dadd+0x39e>
 8000844:	e0a6      	b.n	8000994 <__aeabi_dadd+0x4ec>
 8000846:	4641      	mov	r1, r8
 8000848:	4329      	orrs	r1, r5
 800084a:	d000      	beq.n	800084e <__aeabi_dadd+0x3a6>
 800084c:	e67f      	b.n	800054e <__aeabi_dadd+0xa6>
 800084e:	2300      	movs	r3, #0
 8000850:	2400      	movs	r4, #0
 8000852:	e751      	b.n	80006f8 <__aeabi_dadd+0x250>
 8000854:	4cc7      	ldr	r4, [pc, #796]	; (8000b74 <__aeabi_dadd+0x6cc>)
 8000856:	42a1      	cmp	r1, r4
 8000858:	d100      	bne.n	800085c <__aeabi_dadd+0x3b4>
 800085a:	e0c7      	b.n	80009ec <__aeabi_dadd+0x544>
 800085c:	2480      	movs	r4, #128	; 0x80
 800085e:	0424      	lsls	r4, r4, #16
 8000860:	4323      	orrs	r3, r4
 8000862:	2a38      	cmp	r2, #56	; 0x38
 8000864:	dc54      	bgt.n	8000910 <__aeabi_dadd+0x468>
 8000866:	2a1f      	cmp	r2, #31
 8000868:	dd00      	ble.n	800086c <__aeabi_dadd+0x3c4>
 800086a:	e0cc      	b.n	8000a06 <__aeabi_dadd+0x55e>
 800086c:	2420      	movs	r4, #32
 800086e:	4648      	mov	r0, r9
 8000870:	1aa4      	subs	r4, r4, r2
 8000872:	001d      	movs	r5, r3
 8000874:	464e      	mov	r6, r9
 8000876:	40a0      	lsls	r0, r4
 8000878:	40d6      	lsrs	r6, r2
 800087a:	40a5      	lsls	r5, r4
 800087c:	0004      	movs	r4, r0
 800087e:	40d3      	lsrs	r3, r2
 8000880:	4662      	mov	r2, ip
 8000882:	4335      	orrs	r5, r6
 8000884:	1e66      	subs	r6, r4, #1
 8000886:	41b4      	sbcs	r4, r6
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	469c      	mov	ip, r3
 800088c:	4325      	orrs	r5, r4
 800088e:	e044      	b.n	800091a <__aeabi_dadd+0x472>
 8000890:	4662      	mov	r2, ip
 8000892:	433a      	orrs	r2, r7
 8000894:	0015      	movs	r5, r2
 8000896:	1e6f      	subs	r7, r5, #1
 8000898:	41bd      	sbcs	r5, r7
 800089a:	444d      	add	r5, r9
 800089c:	454d      	cmp	r5, r9
 800089e:	4189      	sbcs	r1, r1
 80008a0:	4249      	negs	r1, r1
 80008a2:	4688      	mov	r8, r1
 80008a4:	4498      	add	r8, r3
 80008a6:	4643      	mov	r3, r8
 80008a8:	021b      	lsls	r3, r3, #8
 80008aa:	d400      	bmi.n	80008ae <__aeabi_dadd+0x406>
 80008ac:	e718      	b.n	80006e0 <__aeabi_dadd+0x238>
 80008ae:	4bb1      	ldr	r3, [pc, #708]	; (8000b74 <__aeabi_dadd+0x6cc>)
 80008b0:	3601      	adds	r6, #1
 80008b2:	429e      	cmp	r6, r3
 80008b4:	d049      	beq.n	800094a <__aeabi_dadd+0x4a2>
 80008b6:	4642      	mov	r2, r8
 80008b8:	4baf      	ldr	r3, [pc, #700]	; (8000b78 <__aeabi_dadd+0x6d0>)
 80008ba:	2101      	movs	r1, #1
 80008bc:	401a      	ands	r2, r3
 80008be:	0013      	movs	r3, r2
 80008c0:	086a      	lsrs	r2, r5, #1
 80008c2:	400d      	ands	r5, r1
 80008c4:	4315      	orrs	r5, r2
 80008c6:	07d9      	lsls	r1, r3, #31
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	4698      	mov	r8, r3
 80008cc:	430d      	orrs	r5, r1
 80008ce:	e665      	b.n	800059c <__aeabi_dadd+0xf4>
 80008d0:	0018      	movs	r0, r3
 80008d2:	3e1f      	subs	r6, #31
 80008d4:	40f0      	lsrs	r0, r6
 80008d6:	2a20      	cmp	r2, #32
 80008d8:	d003      	beq.n	80008e2 <__aeabi_dadd+0x43a>
 80008da:	2140      	movs	r1, #64	; 0x40
 80008dc:	1a8a      	subs	r2, r1, r2
 80008de:	4093      	lsls	r3, r2
 80008e0:	431d      	orrs	r5, r3
 80008e2:	1e69      	subs	r1, r5, #1
 80008e4:	418d      	sbcs	r5, r1
 80008e6:	2300      	movs	r3, #0
 80008e8:	2600      	movs	r6, #0
 80008ea:	4698      	mov	r8, r3
 80008ec:	4305      	orrs	r5, r0
 80008ee:	e6f7      	b.n	80006e0 <__aeabi_dadd+0x238>
 80008f0:	0011      	movs	r1, r2
 80008f2:	4665      	mov	r5, ip
 80008f4:	3920      	subs	r1, #32
 80008f6:	40cd      	lsrs	r5, r1
 80008f8:	2a20      	cmp	r2, #32
 80008fa:	d004      	beq.n	8000906 <__aeabi_dadd+0x45e>
 80008fc:	2040      	movs	r0, #64	; 0x40
 80008fe:	4661      	mov	r1, ip
 8000900:	1a82      	subs	r2, r0, r2
 8000902:	4091      	lsls	r1, r2
 8000904:	430f      	orrs	r7, r1
 8000906:	0039      	movs	r1, r7
 8000908:	1e4f      	subs	r7, r1, #1
 800090a:	41b9      	sbcs	r1, r7
 800090c:	4329      	orrs	r1, r5
 800090e:	e60f      	b.n	8000530 <__aeabi_dadd+0x88>
 8000910:	464a      	mov	r2, r9
 8000912:	4313      	orrs	r3, r2
 8000914:	001d      	movs	r5, r3
 8000916:	1e6b      	subs	r3, r5, #1
 8000918:	419d      	sbcs	r5, r3
 800091a:	1b7d      	subs	r5, r7, r5
 800091c:	42af      	cmp	r7, r5
 800091e:	419b      	sbcs	r3, r3
 8000920:	4662      	mov	r2, ip
 8000922:	425b      	negs	r3, r3
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	4698      	mov	r8, r3
 8000928:	4654      	mov	r4, sl
 800092a:	000e      	movs	r6, r1
 800092c:	e607      	b.n	800053e <__aeabi_dadd+0x96>
 800092e:	4648      	mov	r0, r9
 8000930:	4318      	orrs	r0, r3
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x48e>
 8000934:	e0b3      	b.n	8000a9e <__aeabi_dadd+0x5f6>
 8000936:	1e50      	subs	r0, r2, #1
 8000938:	2a01      	cmp	r2, #1
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x496>
 800093c:	e10d      	b.n	8000b5a <__aeabi_dadd+0x6b2>
 800093e:	4d8d      	ldr	r5, [pc, #564]	; (8000b74 <__aeabi_dadd+0x6cc>)
 8000940:	42aa      	cmp	r2, r5
 8000942:	d100      	bne.n	8000946 <__aeabi_dadd+0x49e>
 8000944:	e0a5      	b.n	8000a92 <__aeabi_dadd+0x5ea>
 8000946:	0002      	movs	r2, r0
 8000948:	e710      	b.n	800076c <__aeabi_dadd+0x2c4>
 800094a:	0032      	movs	r2, r6
 800094c:	2300      	movs	r3, #0
 800094e:	2100      	movs	r1, #0
 8000950:	e644      	b.n	80005dc <__aeabi_dadd+0x134>
 8000952:	2120      	movs	r1, #32
 8000954:	0038      	movs	r0, r7
 8000956:	1a89      	subs	r1, r1, r2
 8000958:	4665      	mov	r5, ip
 800095a:	408f      	lsls	r7, r1
 800095c:	408d      	lsls	r5, r1
 800095e:	40d0      	lsrs	r0, r2
 8000960:	1e79      	subs	r1, r7, #1
 8000962:	418f      	sbcs	r7, r1
 8000964:	4305      	orrs	r5, r0
 8000966:	433d      	orrs	r5, r7
 8000968:	4667      	mov	r7, ip
 800096a:	40d7      	lsrs	r7, r2
 800096c:	19db      	adds	r3, r3, r7
 800096e:	e794      	b.n	800089a <__aeabi_dadd+0x3f2>
 8000970:	4a80      	ldr	r2, [pc, #512]	; (8000b74 <__aeabi_dadd+0x6cc>)
 8000972:	4290      	cmp	r0, r2
 8000974:	d100      	bne.n	8000978 <__aeabi_dadd+0x4d0>
 8000976:	e0ec      	b.n	8000b52 <__aeabi_dadd+0x6aa>
 8000978:	0039      	movs	r1, r7
 800097a:	4449      	add	r1, r9
 800097c:	4549      	cmp	r1, r9
 800097e:	4192      	sbcs	r2, r2
 8000980:	4463      	add	r3, ip
 8000982:	4252      	negs	r2, r2
 8000984:	189b      	adds	r3, r3, r2
 8000986:	07dd      	lsls	r5, r3, #31
 8000988:	0849      	lsrs	r1, r1, #1
 800098a:	085b      	lsrs	r3, r3, #1
 800098c:	4698      	mov	r8, r3
 800098e:	0006      	movs	r6, r0
 8000990:	430d      	orrs	r5, r1
 8000992:	e6a5      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000994:	464a      	mov	r2, r9
 8000996:	1abd      	subs	r5, r7, r2
 8000998:	42af      	cmp	r7, r5
 800099a:	4189      	sbcs	r1, r1
 800099c:	4662      	mov	r2, ip
 800099e:	4249      	negs	r1, r1
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	1a5b      	subs	r3, r3, r1
 80009a4:	4698      	mov	r8, r3
 80009a6:	4654      	mov	r4, sl
 80009a8:	e5d1      	b.n	800054e <__aeabi_dadd+0xa6>
 80009aa:	076c      	lsls	r4, r5, #29
 80009ac:	08f9      	lsrs	r1, r7, #3
 80009ae:	4321      	orrs	r1, r4
 80009b0:	08eb      	lsrs	r3, r5, #3
 80009b2:	0004      	movs	r4, r0
 80009b4:	e69d      	b.n	80006f2 <__aeabi_dadd+0x24a>
 80009b6:	464a      	mov	r2, r9
 80009b8:	431a      	orrs	r2, r3
 80009ba:	d175      	bne.n	8000aa8 <__aeabi_dadd+0x600>
 80009bc:	4661      	mov	r1, ip
 80009be:	4339      	orrs	r1, r7
 80009c0:	d114      	bne.n	80009ec <__aeabi_dadd+0x544>
 80009c2:	2380      	movs	r3, #128	; 0x80
 80009c4:	2400      	movs	r4, #0
 80009c6:	031b      	lsls	r3, r3, #12
 80009c8:	e6bc      	b.n	8000744 <__aeabi_dadd+0x29c>
 80009ca:	464a      	mov	r2, r9
 80009cc:	1bd5      	subs	r5, r2, r7
 80009ce:	45a9      	cmp	r9, r5
 80009d0:	4189      	sbcs	r1, r1
 80009d2:	4662      	mov	r2, ip
 80009d4:	4249      	negs	r1, r1
 80009d6:	1a9b      	subs	r3, r3, r2
 80009d8:	1a5b      	subs	r3, r3, r1
 80009da:	4698      	mov	r8, r3
 80009dc:	2601      	movs	r6, #1
 80009de:	e5ae      	b.n	800053e <__aeabi_dadd+0x96>
 80009e0:	464a      	mov	r2, r9
 80009e2:	08d1      	lsrs	r1, r2, #3
 80009e4:	075a      	lsls	r2, r3, #29
 80009e6:	4311      	orrs	r1, r2
 80009e8:	08db      	lsrs	r3, r3, #3
 80009ea:	e6a7      	b.n	800073c <__aeabi_dadd+0x294>
 80009ec:	4663      	mov	r3, ip
 80009ee:	08f9      	lsrs	r1, r7, #3
 80009f0:	075a      	lsls	r2, r3, #29
 80009f2:	4654      	mov	r4, sl
 80009f4:	4311      	orrs	r1, r2
 80009f6:	08db      	lsrs	r3, r3, #3
 80009f8:	e6a0      	b.n	800073c <__aeabi_dadd+0x294>
 80009fa:	464a      	mov	r2, r9
 80009fc:	4313      	orrs	r3, r2
 80009fe:	001d      	movs	r5, r3
 8000a00:	1e6b      	subs	r3, r5, #1
 8000a02:	419d      	sbcs	r5, r3
 8000a04:	e6c7      	b.n	8000796 <__aeabi_dadd+0x2ee>
 8000a06:	0014      	movs	r4, r2
 8000a08:	001e      	movs	r6, r3
 8000a0a:	3c20      	subs	r4, #32
 8000a0c:	40e6      	lsrs	r6, r4
 8000a0e:	2a20      	cmp	r2, #32
 8000a10:	d005      	beq.n	8000a1e <__aeabi_dadd+0x576>
 8000a12:	2440      	movs	r4, #64	; 0x40
 8000a14:	1aa2      	subs	r2, r4, r2
 8000a16:	4093      	lsls	r3, r2
 8000a18:	464a      	mov	r2, r9
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	4691      	mov	r9, r2
 8000a1e:	464d      	mov	r5, r9
 8000a20:	1e6b      	subs	r3, r5, #1
 8000a22:	419d      	sbcs	r5, r3
 8000a24:	4335      	orrs	r5, r6
 8000a26:	e778      	b.n	800091a <__aeabi_dadd+0x472>
 8000a28:	464a      	mov	r2, r9
 8000a2a:	431a      	orrs	r2, r3
 8000a2c:	d000      	beq.n	8000a30 <__aeabi_dadd+0x588>
 8000a2e:	e66b      	b.n	8000708 <__aeabi_dadd+0x260>
 8000a30:	076b      	lsls	r3, r5, #29
 8000a32:	08f9      	lsrs	r1, r7, #3
 8000a34:	4319      	orrs	r1, r3
 8000a36:	08eb      	lsrs	r3, r5, #3
 8000a38:	e680      	b.n	800073c <__aeabi_dadd+0x294>
 8000a3a:	4661      	mov	r1, ip
 8000a3c:	4339      	orrs	r1, r7
 8000a3e:	d054      	beq.n	8000aea <__aeabi_dadd+0x642>
 8000a40:	4663      	mov	r3, ip
 8000a42:	08f9      	lsrs	r1, r7, #3
 8000a44:	075c      	lsls	r4, r3, #29
 8000a46:	4321      	orrs	r1, r4
 8000a48:	08db      	lsrs	r3, r3, #3
 8000a4a:	0004      	movs	r4, r0
 8000a4c:	e654      	b.n	80006f8 <__aeabi_dadd+0x250>
 8000a4e:	464a      	mov	r2, r9
 8000a50:	1abd      	subs	r5, r7, r2
 8000a52:	42af      	cmp	r7, r5
 8000a54:	4189      	sbcs	r1, r1
 8000a56:	4662      	mov	r2, ip
 8000a58:	4249      	negs	r1, r1
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	1a5b      	subs	r3, r3, r1
 8000a5e:	4698      	mov	r8, r3
 8000a60:	0004      	movs	r4, r0
 8000a62:	2601      	movs	r6, #1
 8000a64:	e56b      	b.n	800053e <__aeabi_dadd+0x96>
 8000a66:	464a      	mov	r2, r9
 8000a68:	1bd5      	subs	r5, r2, r7
 8000a6a:	45a9      	cmp	r9, r5
 8000a6c:	4189      	sbcs	r1, r1
 8000a6e:	4662      	mov	r2, ip
 8000a70:	4249      	negs	r1, r1
 8000a72:	1a9a      	subs	r2, r3, r2
 8000a74:	1a52      	subs	r2, r2, r1
 8000a76:	4690      	mov	r8, r2
 8000a78:	0212      	lsls	r2, r2, #8
 8000a7a:	d532      	bpl.n	8000ae2 <__aeabi_dadd+0x63a>
 8000a7c:	464a      	mov	r2, r9
 8000a7e:	1abd      	subs	r5, r7, r2
 8000a80:	42af      	cmp	r7, r5
 8000a82:	4189      	sbcs	r1, r1
 8000a84:	4662      	mov	r2, ip
 8000a86:	4249      	negs	r1, r1
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	1a5b      	subs	r3, r3, r1
 8000a8c:	4698      	mov	r8, r3
 8000a8e:	0004      	movs	r4, r0
 8000a90:	e584      	b.n	800059c <__aeabi_dadd+0xf4>
 8000a92:	4663      	mov	r3, ip
 8000a94:	08f9      	lsrs	r1, r7, #3
 8000a96:	075a      	lsls	r2, r3, #29
 8000a98:	4311      	orrs	r1, r2
 8000a9a:	08db      	lsrs	r3, r3, #3
 8000a9c:	e64e      	b.n	800073c <__aeabi_dadd+0x294>
 8000a9e:	08f9      	lsrs	r1, r7, #3
 8000aa0:	0768      	lsls	r0, r5, #29
 8000aa2:	4301      	orrs	r1, r0
 8000aa4:	08eb      	lsrs	r3, r5, #3
 8000aa6:	e624      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000aa8:	4662      	mov	r2, ip
 8000aaa:	433a      	orrs	r2, r7
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_dadd+0x608>
 8000aae:	e698      	b.n	80007e2 <__aeabi_dadd+0x33a>
 8000ab0:	464a      	mov	r2, r9
 8000ab2:	08d1      	lsrs	r1, r2, #3
 8000ab4:	075a      	lsls	r2, r3, #29
 8000ab6:	4311      	orrs	r1, r2
 8000ab8:	08da      	lsrs	r2, r3, #3
 8000aba:	2380      	movs	r3, #128	; 0x80
 8000abc:	031b      	lsls	r3, r3, #12
 8000abe:	421a      	tst	r2, r3
 8000ac0:	d008      	beq.n	8000ad4 <__aeabi_dadd+0x62c>
 8000ac2:	4660      	mov	r0, ip
 8000ac4:	08c5      	lsrs	r5, r0, #3
 8000ac6:	421d      	tst	r5, r3
 8000ac8:	d104      	bne.n	8000ad4 <__aeabi_dadd+0x62c>
 8000aca:	4654      	mov	r4, sl
 8000acc:	002a      	movs	r2, r5
 8000ace:	08f9      	lsrs	r1, r7, #3
 8000ad0:	0743      	lsls	r3, r0, #29
 8000ad2:	4319      	orrs	r1, r3
 8000ad4:	0f4b      	lsrs	r3, r1, #29
 8000ad6:	00c9      	lsls	r1, r1, #3
 8000ad8:	075b      	lsls	r3, r3, #29
 8000ada:	08c9      	lsrs	r1, r1, #3
 8000adc:	4319      	orrs	r1, r3
 8000ade:	0013      	movs	r3, r2
 8000ae0:	e62c      	b.n	800073c <__aeabi_dadd+0x294>
 8000ae2:	4641      	mov	r1, r8
 8000ae4:	4329      	orrs	r1, r5
 8000ae6:	d000      	beq.n	8000aea <__aeabi_dadd+0x642>
 8000ae8:	e5fa      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000aea:	2300      	movs	r3, #0
 8000aec:	000a      	movs	r2, r1
 8000aee:	2400      	movs	r4, #0
 8000af0:	e602      	b.n	80006f8 <__aeabi_dadd+0x250>
 8000af2:	076b      	lsls	r3, r5, #29
 8000af4:	08f9      	lsrs	r1, r7, #3
 8000af6:	4319      	orrs	r1, r3
 8000af8:	08eb      	lsrs	r3, r5, #3
 8000afa:	e5fd      	b.n	80006f8 <__aeabi_dadd+0x250>
 8000afc:	4663      	mov	r3, ip
 8000afe:	08f9      	lsrs	r1, r7, #3
 8000b00:	075b      	lsls	r3, r3, #29
 8000b02:	4319      	orrs	r1, r3
 8000b04:	4663      	mov	r3, ip
 8000b06:	0004      	movs	r4, r0
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	e617      	b.n	800073c <__aeabi_dadd+0x294>
 8000b0c:	003d      	movs	r5, r7
 8000b0e:	444d      	add	r5, r9
 8000b10:	4463      	add	r3, ip
 8000b12:	454d      	cmp	r5, r9
 8000b14:	4189      	sbcs	r1, r1
 8000b16:	4698      	mov	r8, r3
 8000b18:	4249      	negs	r1, r1
 8000b1a:	4488      	add	r8, r1
 8000b1c:	4643      	mov	r3, r8
 8000b1e:	021b      	lsls	r3, r3, #8
 8000b20:	d400      	bmi.n	8000b24 <__aeabi_dadd+0x67c>
 8000b22:	e5dd      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000b24:	4642      	mov	r2, r8
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <__aeabi_dadd+0x6d0>)
 8000b28:	2601      	movs	r6, #1
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	4690      	mov	r8, r2
 8000b2e:	e5d7      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000b30:	0010      	movs	r0, r2
 8000b32:	001e      	movs	r6, r3
 8000b34:	3820      	subs	r0, #32
 8000b36:	40c6      	lsrs	r6, r0
 8000b38:	2a20      	cmp	r2, #32
 8000b3a:	d005      	beq.n	8000b48 <__aeabi_dadd+0x6a0>
 8000b3c:	2040      	movs	r0, #64	; 0x40
 8000b3e:	1a82      	subs	r2, r0, r2
 8000b40:	4093      	lsls	r3, r2
 8000b42:	464a      	mov	r2, r9
 8000b44:	431a      	orrs	r2, r3
 8000b46:	4691      	mov	r9, r2
 8000b48:	464d      	mov	r5, r9
 8000b4a:	1e6b      	subs	r3, r5, #1
 8000b4c:	419d      	sbcs	r5, r3
 8000b4e:	4335      	orrs	r5, r6
 8000b50:	e621      	b.n	8000796 <__aeabi_dadd+0x2ee>
 8000b52:	0002      	movs	r2, r0
 8000b54:	2300      	movs	r3, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	e540      	b.n	80005dc <__aeabi_dadd+0x134>
 8000b5a:	464a      	mov	r2, r9
 8000b5c:	19d5      	adds	r5, r2, r7
 8000b5e:	42bd      	cmp	r5, r7
 8000b60:	4189      	sbcs	r1, r1
 8000b62:	4463      	add	r3, ip
 8000b64:	4698      	mov	r8, r3
 8000b66:	4249      	negs	r1, r1
 8000b68:	4488      	add	r8, r1
 8000b6a:	e5b3      	b.n	80006d4 <__aeabi_dadd+0x22c>
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4a01      	ldr	r2, [pc, #4]	; (8000b74 <__aeabi_dadd+0x6cc>)
 8000b70:	000b      	movs	r3, r1
 8000b72:	e533      	b.n	80005dc <__aeabi_dadd+0x134>
 8000b74:	000007ff 	.word	0x000007ff
 8000b78:	ff7fffff 	.word	0xff7fffff

08000b7c <__aeabi_ddiv>:
 8000b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7e:	4657      	mov	r7, sl
 8000b80:	464e      	mov	r6, r9
 8000b82:	4645      	mov	r5, r8
 8000b84:	46de      	mov	lr, fp
 8000b86:	b5e0      	push	{r5, r6, r7, lr}
 8000b88:	4681      	mov	r9, r0
 8000b8a:	0005      	movs	r5, r0
 8000b8c:	030c      	lsls	r4, r1, #12
 8000b8e:	0048      	lsls	r0, r1, #1
 8000b90:	4692      	mov	sl, r2
 8000b92:	001f      	movs	r7, r3
 8000b94:	b085      	sub	sp, #20
 8000b96:	0b24      	lsrs	r4, r4, #12
 8000b98:	0d40      	lsrs	r0, r0, #21
 8000b9a:	0fce      	lsrs	r6, r1, #31
 8000b9c:	2800      	cmp	r0, #0
 8000b9e:	d059      	beq.n	8000c54 <__aeabi_ddiv+0xd8>
 8000ba0:	4b87      	ldr	r3, [pc, #540]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_ddiv+0x2c>
 8000ba6:	e098      	b.n	8000cda <__aeabi_ddiv+0x15e>
 8000ba8:	0f6b      	lsrs	r3, r5, #29
 8000baa:	00e4      	lsls	r4, r4, #3
 8000bac:	431c      	orrs	r4, r3
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	041b      	lsls	r3, r3, #16
 8000bb2:	4323      	orrs	r3, r4
 8000bb4:	4698      	mov	r8, r3
 8000bb6:	4b83      	ldr	r3, [pc, #524]	; (8000dc4 <__aeabi_ddiv+0x248>)
 8000bb8:	00ed      	lsls	r5, r5, #3
 8000bba:	469b      	mov	fp, r3
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	4699      	mov	r9, r3
 8000bc0:	4483      	add	fp, r0
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	033c      	lsls	r4, r7, #12
 8000bc6:	007b      	lsls	r3, r7, #1
 8000bc8:	4650      	mov	r0, sl
 8000bca:	0b24      	lsrs	r4, r4, #12
 8000bcc:	0d5b      	lsrs	r3, r3, #21
 8000bce:	0fff      	lsrs	r7, r7, #31
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d067      	beq.n	8000ca4 <__aeabi_ddiv+0x128>
 8000bd4:	4a7a      	ldr	r2, [pc, #488]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d018      	beq.n	8000c0c <__aeabi_ddiv+0x90>
 8000bda:	497a      	ldr	r1, [pc, #488]	; (8000dc4 <__aeabi_ddiv+0x248>)
 8000bdc:	0f42      	lsrs	r2, r0, #29
 8000bde:	468c      	mov	ip, r1
 8000be0:	00e4      	lsls	r4, r4, #3
 8000be2:	4659      	mov	r1, fp
 8000be4:	4314      	orrs	r4, r2
 8000be6:	2280      	movs	r2, #128	; 0x80
 8000be8:	4463      	add	r3, ip
 8000bea:	0412      	lsls	r2, r2, #16
 8000bec:	1acb      	subs	r3, r1, r3
 8000bee:	4314      	orrs	r4, r2
 8000bf0:	469b      	mov	fp, r3
 8000bf2:	00c2      	lsls	r2, r0, #3
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	0033      	movs	r3, r6
 8000bf8:	407b      	eors	r3, r7
 8000bfa:	469a      	mov	sl, r3
 8000bfc:	464b      	mov	r3, r9
 8000bfe:	2b0f      	cmp	r3, #15
 8000c00:	d900      	bls.n	8000c04 <__aeabi_ddiv+0x88>
 8000c02:	e0ef      	b.n	8000de4 <__aeabi_ddiv+0x268>
 8000c04:	4970      	ldr	r1, [pc, #448]	; (8000dc8 <__aeabi_ddiv+0x24c>)
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	58cb      	ldr	r3, [r1, r3]
 8000c0a:	469f      	mov	pc, r3
 8000c0c:	4b6f      	ldr	r3, [pc, #444]	; (8000dcc <__aeabi_ddiv+0x250>)
 8000c0e:	4652      	mov	r2, sl
 8000c10:	469c      	mov	ip, r3
 8000c12:	4322      	orrs	r2, r4
 8000c14:	44e3      	add	fp, ip
 8000c16:	2a00      	cmp	r2, #0
 8000c18:	d000      	beq.n	8000c1c <__aeabi_ddiv+0xa0>
 8000c1a:	e095      	b.n	8000d48 <__aeabi_ddiv+0x1cc>
 8000c1c:	4649      	mov	r1, r9
 8000c1e:	2302      	movs	r3, #2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	4689      	mov	r9, r1
 8000c24:	2400      	movs	r4, #0
 8000c26:	2002      	movs	r0, #2
 8000c28:	e7e5      	b.n	8000bf6 <__aeabi_ddiv+0x7a>
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2400      	movs	r4, #0
 8000c2e:	2500      	movs	r5, #0
 8000c30:	4652      	mov	r2, sl
 8000c32:	051b      	lsls	r3, r3, #20
 8000c34:	4323      	orrs	r3, r4
 8000c36:	07d2      	lsls	r2, r2, #31
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	0028      	movs	r0, r5
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	b005      	add	sp, #20
 8000c40:	bcf0      	pop	{r4, r5, r6, r7}
 8000c42:	46bb      	mov	fp, r7
 8000c44:	46b2      	mov	sl, r6
 8000c46:	46a9      	mov	r9, r5
 8000c48:	46a0      	mov	r8, r4
 8000c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4c:	2400      	movs	r4, #0
 8000c4e:	2500      	movs	r5, #0
 8000c50:	4b5b      	ldr	r3, [pc, #364]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000c52:	e7ed      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000c54:	464b      	mov	r3, r9
 8000c56:	4323      	orrs	r3, r4
 8000c58:	4698      	mov	r8, r3
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_ddiv+0xe2>
 8000c5c:	e089      	b.n	8000d72 <__aeabi_ddiv+0x1f6>
 8000c5e:	2c00      	cmp	r4, #0
 8000c60:	d100      	bne.n	8000c64 <__aeabi_ddiv+0xe8>
 8000c62:	e1e0      	b.n	8001026 <__aeabi_ddiv+0x4aa>
 8000c64:	0020      	movs	r0, r4
 8000c66:	f001 fa19 	bl	800209c <__clzsi2>
 8000c6a:	0001      	movs	r1, r0
 8000c6c:	0002      	movs	r2, r0
 8000c6e:	390b      	subs	r1, #11
 8000c70:	231d      	movs	r3, #29
 8000c72:	1a5b      	subs	r3, r3, r1
 8000c74:	4649      	mov	r1, r9
 8000c76:	0010      	movs	r0, r2
 8000c78:	40d9      	lsrs	r1, r3
 8000c7a:	3808      	subs	r0, #8
 8000c7c:	4084      	lsls	r4, r0
 8000c7e:	000b      	movs	r3, r1
 8000c80:	464d      	mov	r5, r9
 8000c82:	4323      	orrs	r3, r4
 8000c84:	4698      	mov	r8, r3
 8000c86:	4085      	lsls	r5, r0
 8000c88:	4851      	ldr	r0, [pc, #324]	; (8000dd0 <__aeabi_ddiv+0x254>)
 8000c8a:	033c      	lsls	r4, r7, #12
 8000c8c:	1a83      	subs	r3, r0, r2
 8000c8e:	469b      	mov	fp, r3
 8000c90:	2300      	movs	r3, #0
 8000c92:	4699      	mov	r9, r3
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	007b      	lsls	r3, r7, #1
 8000c98:	4650      	mov	r0, sl
 8000c9a:	0b24      	lsrs	r4, r4, #12
 8000c9c:	0d5b      	lsrs	r3, r3, #21
 8000c9e:	0fff      	lsrs	r7, r7, #31
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d197      	bne.n	8000bd4 <__aeabi_ddiv+0x58>
 8000ca4:	4652      	mov	r2, sl
 8000ca6:	4322      	orrs	r2, r4
 8000ca8:	d055      	beq.n	8000d56 <__aeabi_ddiv+0x1da>
 8000caa:	2c00      	cmp	r4, #0
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_ddiv+0x134>
 8000cae:	e1ca      	b.n	8001046 <__aeabi_ddiv+0x4ca>
 8000cb0:	0020      	movs	r0, r4
 8000cb2:	f001 f9f3 	bl	800209c <__clzsi2>
 8000cb6:	0002      	movs	r2, r0
 8000cb8:	3a0b      	subs	r2, #11
 8000cba:	231d      	movs	r3, #29
 8000cbc:	0001      	movs	r1, r0
 8000cbe:	1a9b      	subs	r3, r3, r2
 8000cc0:	4652      	mov	r2, sl
 8000cc2:	3908      	subs	r1, #8
 8000cc4:	40da      	lsrs	r2, r3
 8000cc6:	408c      	lsls	r4, r1
 8000cc8:	4314      	orrs	r4, r2
 8000cca:	4652      	mov	r2, sl
 8000ccc:	408a      	lsls	r2, r1
 8000cce:	4b41      	ldr	r3, [pc, #260]	; (8000dd4 <__aeabi_ddiv+0x258>)
 8000cd0:	4458      	add	r0, fp
 8000cd2:	469b      	mov	fp, r3
 8000cd4:	4483      	add	fp, r0
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	e78d      	b.n	8000bf6 <__aeabi_ddiv+0x7a>
 8000cda:	464b      	mov	r3, r9
 8000cdc:	4323      	orrs	r3, r4
 8000cde:	4698      	mov	r8, r3
 8000ce0:	d140      	bne.n	8000d64 <__aeabi_ddiv+0x1e8>
 8000ce2:	2308      	movs	r3, #8
 8000ce4:	4699      	mov	r9, r3
 8000ce6:	3b06      	subs	r3, #6
 8000ce8:	2500      	movs	r5, #0
 8000cea:	4683      	mov	fp, r0
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	e769      	b.n	8000bc4 <__aeabi_ddiv+0x48>
 8000cf0:	46b2      	mov	sl, r6
 8000cf2:	9b00      	ldr	r3, [sp, #0]
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0a9      	beq.n	8000c4c <__aeabi_ddiv+0xd0>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d100      	bne.n	8000cfe <__aeabi_ddiv+0x182>
 8000cfc:	e211      	b.n	8001122 <__aeabi_ddiv+0x5a6>
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d093      	beq.n	8000c2a <__aeabi_ddiv+0xae>
 8000d02:	4a35      	ldr	r2, [pc, #212]	; (8000dd8 <__aeabi_ddiv+0x25c>)
 8000d04:	445a      	add	r2, fp
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	dc00      	bgt.n	8000d0c <__aeabi_ddiv+0x190>
 8000d0a:	e13c      	b.n	8000f86 <__aeabi_ddiv+0x40a>
 8000d0c:	076b      	lsls	r3, r5, #29
 8000d0e:	d000      	beq.n	8000d12 <__aeabi_ddiv+0x196>
 8000d10:	e1a7      	b.n	8001062 <__aeabi_ddiv+0x4e6>
 8000d12:	08ed      	lsrs	r5, r5, #3
 8000d14:	4643      	mov	r3, r8
 8000d16:	01db      	lsls	r3, r3, #7
 8000d18:	d506      	bpl.n	8000d28 <__aeabi_ddiv+0x1ac>
 8000d1a:	4642      	mov	r2, r8
 8000d1c:	4b2f      	ldr	r3, [pc, #188]	; (8000ddc <__aeabi_ddiv+0x260>)
 8000d1e:	401a      	ands	r2, r3
 8000d20:	4690      	mov	r8, r2
 8000d22:	2280      	movs	r2, #128	; 0x80
 8000d24:	00d2      	lsls	r2, r2, #3
 8000d26:	445a      	add	r2, fp
 8000d28:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <__aeabi_ddiv+0x264>)
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	dc8e      	bgt.n	8000c4c <__aeabi_ddiv+0xd0>
 8000d2e:	4643      	mov	r3, r8
 8000d30:	0552      	lsls	r2, r2, #21
 8000d32:	0758      	lsls	r0, r3, #29
 8000d34:	025c      	lsls	r4, r3, #9
 8000d36:	4305      	orrs	r5, r0
 8000d38:	0b24      	lsrs	r4, r4, #12
 8000d3a:	0d53      	lsrs	r3, r2, #21
 8000d3c:	e778      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000d3e:	46ba      	mov	sl, r7
 8000d40:	46a0      	mov	r8, r4
 8000d42:	0015      	movs	r5, r2
 8000d44:	9000      	str	r0, [sp, #0]
 8000d46:	e7d4      	b.n	8000cf2 <__aeabi_ddiv+0x176>
 8000d48:	464a      	mov	r2, r9
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	4691      	mov	r9, r2
 8000d50:	2003      	movs	r0, #3
 8000d52:	4652      	mov	r2, sl
 8000d54:	e74f      	b.n	8000bf6 <__aeabi_ddiv+0x7a>
 8000d56:	4649      	mov	r1, r9
 8000d58:	2301      	movs	r3, #1
 8000d5a:	4319      	orrs	r1, r3
 8000d5c:	4689      	mov	r9, r1
 8000d5e:	2400      	movs	r4, #0
 8000d60:	2001      	movs	r0, #1
 8000d62:	e748      	b.n	8000bf6 <__aeabi_ddiv+0x7a>
 8000d64:	230c      	movs	r3, #12
 8000d66:	4699      	mov	r9, r3
 8000d68:	3b09      	subs	r3, #9
 8000d6a:	46a0      	mov	r8, r4
 8000d6c:	4683      	mov	fp, r0
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	e728      	b.n	8000bc4 <__aeabi_ddiv+0x48>
 8000d72:	2304      	movs	r3, #4
 8000d74:	4699      	mov	r9, r3
 8000d76:	2300      	movs	r3, #0
 8000d78:	469b      	mov	fp, r3
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	2500      	movs	r5, #0
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	e720      	b.n	8000bc4 <__aeabi_ddiv+0x48>
 8000d82:	2300      	movs	r3, #0
 8000d84:	2480      	movs	r4, #128	; 0x80
 8000d86:	469a      	mov	sl, r3
 8000d88:	2500      	movs	r5, #0
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000d8c:	0324      	lsls	r4, r4, #12
 8000d8e:	e74f      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	4641      	mov	r1, r8
 8000d94:	031b      	lsls	r3, r3, #12
 8000d96:	4219      	tst	r1, r3
 8000d98:	d008      	beq.n	8000dac <__aeabi_ddiv+0x230>
 8000d9a:	421c      	tst	r4, r3
 8000d9c:	d106      	bne.n	8000dac <__aeabi_ddiv+0x230>
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	0324      	lsls	r4, r4, #12
 8000da2:	46ba      	mov	sl, r7
 8000da4:	0015      	movs	r5, r2
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000da8:	0b24      	lsrs	r4, r4, #12
 8000daa:	e741      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000dac:	2480      	movs	r4, #128	; 0x80
 8000dae:	4643      	mov	r3, r8
 8000db0:	0324      	lsls	r4, r4, #12
 8000db2:	431c      	orrs	r4, r3
 8000db4:	0324      	lsls	r4, r4, #12
 8000db6:	46b2      	mov	sl, r6
 8000db8:	4b01      	ldr	r3, [pc, #4]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000dba:	0b24      	lsrs	r4, r4, #12
 8000dbc:	e738      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	000007ff 	.word	0x000007ff
 8000dc4:	fffffc01 	.word	0xfffffc01
 8000dc8:	0800dddc 	.word	0x0800dddc
 8000dcc:	fffff801 	.word	0xfffff801
 8000dd0:	fffffc0d 	.word	0xfffffc0d
 8000dd4:	000003f3 	.word	0x000003f3
 8000dd8:	000003ff 	.word	0x000003ff
 8000ddc:	feffffff 	.word	0xfeffffff
 8000de0:	000007fe 	.word	0x000007fe
 8000de4:	4544      	cmp	r4, r8
 8000de6:	d200      	bcs.n	8000dea <__aeabi_ddiv+0x26e>
 8000de8:	e116      	b.n	8001018 <__aeabi_ddiv+0x49c>
 8000dea:	d100      	bne.n	8000dee <__aeabi_ddiv+0x272>
 8000dec:	e111      	b.n	8001012 <__aeabi_ddiv+0x496>
 8000dee:	2301      	movs	r3, #1
 8000df0:	425b      	negs	r3, r3
 8000df2:	469c      	mov	ip, r3
 8000df4:	002e      	movs	r6, r5
 8000df6:	4640      	mov	r0, r8
 8000df8:	2500      	movs	r5, #0
 8000dfa:	44e3      	add	fp, ip
 8000dfc:	0223      	lsls	r3, r4, #8
 8000dfe:	0e14      	lsrs	r4, r2, #24
 8000e00:	431c      	orrs	r4, r3
 8000e02:	0c1b      	lsrs	r3, r3, #16
 8000e04:	4699      	mov	r9, r3
 8000e06:	0423      	lsls	r3, r4, #16
 8000e08:	0c1f      	lsrs	r7, r3, #16
 8000e0a:	0212      	lsls	r2, r2, #8
 8000e0c:	4649      	mov	r1, r9
 8000e0e:	9200      	str	r2, [sp, #0]
 8000e10:	9701      	str	r7, [sp, #4]
 8000e12:	f7ff f9fd 	bl	8000210 <__aeabi_uidivmod>
 8000e16:	0002      	movs	r2, r0
 8000e18:	437a      	muls	r2, r7
 8000e1a:	040b      	lsls	r3, r1, #16
 8000e1c:	0c31      	lsrs	r1, r6, #16
 8000e1e:	4680      	mov	r8, r0
 8000e20:	4319      	orrs	r1, r3
 8000e22:	428a      	cmp	r2, r1
 8000e24:	d90b      	bls.n	8000e3e <__aeabi_ddiv+0x2c2>
 8000e26:	2301      	movs	r3, #1
 8000e28:	425b      	negs	r3, r3
 8000e2a:	469c      	mov	ip, r3
 8000e2c:	1909      	adds	r1, r1, r4
 8000e2e:	44e0      	add	r8, ip
 8000e30:	428c      	cmp	r4, r1
 8000e32:	d804      	bhi.n	8000e3e <__aeabi_ddiv+0x2c2>
 8000e34:	428a      	cmp	r2, r1
 8000e36:	d902      	bls.n	8000e3e <__aeabi_ddiv+0x2c2>
 8000e38:	1e83      	subs	r3, r0, #2
 8000e3a:	4698      	mov	r8, r3
 8000e3c:	1909      	adds	r1, r1, r4
 8000e3e:	1a88      	subs	r0, r1, r2
 8000e40:	4649      	mov	r1, r9
 8000e42:	f7ff f9e5 	bl	8000210 <__aeabi_uidivmod>
 8000e46:	0409      	lsls	r1, r1, #16
 8000e48:	468c      	mov	ip, r1
 8000e4a:	0431      	lsls	r1, r6, #16
 8000e4c:	4666      	mov	r6, ip
 8000e4e:	9a01      	ldr	r2, [sp, #4]
 8000e50:	0c09      	lsrs	r1, r1, #16
 8000e52:	4342      	muls	r2, r0
 8000e54:	0003      	movs	r3, r0
 8000e56:	4331      	orrs	r1, r6
 8000e58:	428a      	cmp	r2, r1
 8000e5a:	d904      	bls.n	8000e66 <__aeabi_ddiv+0x2ea>
 8000e5c:	1909      	adds	r1, r1, r4
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	428c      	cmp	r4, r1
 8000e62:	d800      	bhi.n	8000e66 <__aeabi_ddiv+0x2ea>
 8000e64:	e111      	b.n	800108a <__aeabi_ddiv+0x50e>
 8000e66:	1a89      	subs	r1, r1, r2
 8000e68:	4642      	mov	r2, r8
 8000e6a:	9e00      	ldr	r6, [sp, #0]
 8000e6c:	0412      	lsls	r2, r2, #16
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	0c33      	lsrs	r3, r6, #16
 8000e72:	001f      	movs	r7, r3
 8000e74:	0c10      	lsrs	r0, r2, #16
 8000e76:	4690      	mov	r8, r2
 8000e78:	9302      	str	r3, [sp, #8]
 8000e7a:	0413      	lsls	r3, r2, #16
 8000e7c:	0432      	lsls	r2, r6, #16
 8000e7e:	0c16      	lsrs	r6, r2, #16
 8000e80:	0032      	movs	r2, r6
 8000e82:	0c1b      	lsrs	r3, r3, #16
 8000e84:	435a      	muls	r2, r3
 8000e86:	9603      	str	r6, [sp, #12]
 8000e88:	437b      	muls	r3, r7
 8000e8a:	4346      	muls	r6, r0
 8000e8c:	4378      	muls	r0, r7
 8000e8e:	0c17      	lsrs	r7, r2, #16
 8000e90:	46bc      	mov	ip, r7
 8000e92:	199b      	adds	r3, r3, r6
 8000e94:	4463      	add	r3, ip
 8000e96:	429e      	cmp	r6, r3
 8000e98:	d903      	bls.n	8000ea2 <__aeabi_ddiv+0x326>
 8000e9a:	2680      	movs	r6, #128	; 0x80
 8000e9c:	0276      	lsls	r6, r6, #9
 8000e9e:	46b4      	mov	ip, r6
 8000ea0:	4460      	add	r0, ip
 8000ea2:	0c1e      	lsrs	r6, r3, #16
 8000ea4:	1830      	adds	r0, r6, r0
 8000ea6:	0416      	lsls	r6, r2, #16
 8000ea8:	041b      	lsls	r3, r3, #16
 8000eaa:	0c36      	lsrs	r6, r6, #16
 8000eac:	199e      	adds	r6, r3, r6
 8000eae:	4281      	cmp	r1, r0
 8000eb0:	d200      	bcs.n	8000eb4 <__aeabi_ddiv+0x338>
 8000eb2:	e09c      	b.n	8000fee <__aeabi_ddiv+0x472>
 8000eb4:	d100      	bne.n	8000eb8 <__aeabi_ddiv+0x33c>
 8000eb6:	e097      	b.n	8000fe8 <__aeabi_ddiv+0x46c>
 8000eb8:	1bae      	subs	r6, r5, r6
 8000eba:	1a09      	subs	r1, r1, r0
 8000ebc:	42b5      	cmp	r5, r6
 8000ebe:	4180      	sbcs	r0, r0
 8000ec0:	4240      	negs	r0, r0
 8000ec2:	1a08      	subs	r0, r1, r0
 8000ec4:	4284      	cmp	r4, r0
 8000ec6:	d100      	bne.n	8000eca <__aeabi_ddiv+0x34e>
 8000ec8:	e111      	b.n	80010ee <__aeabi_ddiv+0x572>
 8000eca:	4649      	mov	r1, r9
 8000ecc:	f7ff f9a0 	bl	8000210 <__aeabi_uidivmod>
 8000ed0:	9a01      	ldr	r2, [sp, #4]
 8000ed2:	040b      	lsls	r3, r1, #16
 8000ed4:	4342      	muls	r2, r0
 8000ed6:	0c31      	lsrs	r1, r6, #16
 8000ed8:	0005      	movs	r5, r0
 8000eda:	4319      	orrs	r1, r3
 8000edc:	428a      	cmp	r2, r1
 8000ede:	d907      	bls.n	8000ef0 <__aeabi_ddiv+0x374>
 8000ee0:	1909      	adds	r1, r1, r4
 8000ee2:	3d01      	subs	r5, #1
 8000ee4:	428c      	cmp	r4, r1
 8000ee6:	d803      	bhi.n	8000ef0 <__aeabi_ddiv+0x374>
 8000ee8:	428a      	cmp	r2, r1
 8000eea:	d901      	bls.n	8000ef0 <__aeabi_ddiv+0x374>
 8000eec:	1e85      	subs	r5, r0, #2
 8000eee:	1909      	adds	r1, r1, r4
 8000ef0:	1a88      	subs	r0, r1, r2
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	f7ff f98c 	bl	8000210 <__aeabi_uidivmod>
 8000ef8:	0409      	lsls	r1, r1, #16
 8000efa:	468c      	mov	ip, r1
 8000efc:	0431      	lsls	r1, r6, #16
 8000efe:	4666      	mov	r6, ip
 8000f00:	9a01      	ldr	r2, [sp, #4]
 8000f02:	0c09      	lsrs	r1, r1, #16
 8000f04:	4342      	muls	r2, r0
 8000f06:	0003      	movs	r3, r0
 8000f08:	4331      	orrs	r1, r6
 8000f0a:	428a      	cmp	r2, r1
 8000f0c:	d907      	bls.n	8000f1e <__aeabi_ddiv+0x3a2>
 8000f0e:	1909      	adds	r1, r1, r4
 8000f10:	3b01      	subs	r3, #1
 8000f12:	428c      	cmp	r4, r1
 8000f14:	d803      	bhi.n	8000f1e <__aeabi_ddiv+0x3a2>
 8000f16:	428a      	cmp	r2, r1
 8000f18:	d901      	bls.n	8000f1e <__aeabi_ddiv+0x3a2>
 8000f1a:	1e83      	subs	r3, r0, #2
 8000f1c:	1909      	adds	r1, r1, r4
 8000f1e:	9e03      	ldr	r6, [sp, #12]
 8000f20:	1a89      	subs	r1, r1, r2
 8000f22:	0032      	movs	r2, r6
 8000f24:	042d      	lsls	r5, r5, #16
 8000f26:	431d      	orrs	r5, r3
 8000f28:	9f02      	ldr	r7, [sp, #8]
 8000f2a:	042b      	lsls	r3, r5, #16
 8000f2c:	0c1b      	lsrs	r3, r3, #16
 8000f2e:	435a      	muls	r2, r3
 8000f30:	437b      	muls	r3, r7
 8000f32:	469c      	mov	ip, r3
 8000f34:	0c28      	lsrs	r0, r5, #16
 8000f36:	4346      	muls	r6, r0
 8000f38:	0c13      	lsrs	r3, r2, #16
 8000f3a:	44b4      	add	ip, r6
 8000f3c:	4463      	add	r3, ip
 8000f3e:	4378      	muls	r0, r7
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d903      	bls.n	8000f4c <__aeabi_ddiv+0x3d0>
 8000f44:	2680      	movs	r6, #128	; 0x80
 8000f46:	0276      	lsls	r6, r6, #9
 8000f48:	46b4      	mov	ip, r6
 8000f4a:	4460      	add	r0, ip
 8000f4c:	0c1e      	lsrs	r6, r3, #16
 8000f4e:	0412      	lsls	r2, r2, #16
 8000f50:	041b      	lsls	r3, r3, #16
 8000f52:	0c12      	lsrs	r2, r2, #16
 8000f54:	1830      	adds	r0, r6, r0
 8000f56:	189b      	adds	r3, r3, r2
 8000f58:	4281      	cmp	r1, r0
 8000f5a:	d306      	bcc.n	8000f6a <__aeabi_ddiv+0x3ee>
 8000f5c:	d002      	beq.n	8000f64 <__aeabi_ddiv+0x3e8>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	431d      	orrs	r5, r3
 8000f62:	e6ce      	b.n	8000d02 <__aeabi_ddiv+0x186>
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d100      	bne.n	8000f6a <__aeabi_ddiv+0x3ee>
 8000f68:	e6cb      	b.n	8000d02 <__aeabi_ddiv+0x186>
 8000f6a:	1861      	adds	r1, r4, r1
 8000f6c:	1e6e      	subs	r6, r5, #1
 8000f6e:	42a1      	cmp	r1, r4
 8000f70:	d200      	bcs.n	8000f74 <__aeabi_ddiv+0x3f8>
 8000f72:	e0a4      	b.n	80010be <__aeabi_ddiv+0x542>
 8000f74:	4281      	cmp	r1, r0
 8000f76:	d200      	bcs.n	8000f7a <__aeabi_ddiv+0x3fe>
 8000f78:	e0c9      	b.n	800110e <__aeabi_ddiv+0x592>
 8000f7a:	d100      	bne.n	8000f7e <__aeabi_ddiv+0x402>
 8000f7c:	e0d9      	b.n	8001132 <__aeabi_ddiv+0x5b6>
 8000f7e:	0035      	movs	r5, r6
 8000f80:	e7ed      	b.n	8000f5e <__aeabi_ddiv+0x3e2>
 8000f82:	2501      	movs	r5, #1
 8000f84:	426d      	negs	r5, r5
 8000f86:	2101      	movs	r1, #1
 8000f88:	1a89      	subs	r1, r1, r2
 8000f8a:	2938      	cmp	r1, #56	; 0x38
 8000f8c:	dd00      	ble.n	8000f90 <__aeabi_ddiv+0x414>
 8000f8e:	e64c      	b.n	8000c2a <__aeabi_ddiv+0xae>
 8000f90:	291f      	cmp	r1, #31
 8000f92:	dc00      	bgt.n	8000f96 <__aeabi_ddiv+0x41a>
 8000f94:	e07f      	b.n	8001096 <__aeabi_ddiv+0x51a>
 8000f96:	231f      	movs	r3, #31
 8000f98:	425b      	negs	r3, r3
 8000f9a:	1a9a      	subs	r2, r3, r2
 8000f9c:	4643      	mov	r3, r8
 8000f9e:	40d3      	lsrs	r3, r2
 8000fa0:	2920      	cmp	r1, #32
 8000fa2:	d004      	beq.n	8000fae <__aeabi_ddiv+0x432>
 8000fa4:	4644      	mov	r4, r8
 8000fa6:	4a65      	ldr	r2, [pc, #404]	; (800113c <__aeabi_ddiv+0x5c0>)
 8000fa8:	445a      	add	r2, fp
 8000faa:	4094      	lsls	r4, r2
 8000fac:	4325      	orrs	r5, r4
 8000fae:	1e6a      	subs	r2, r5, #1
 8000fb0:	4195      	sbcs	r5, r2
 8000fb2:	2207      	movs	r2, #7
 8000fb4:	432b      	orrs	r3, r5
 8000fb6:	0015      	movs	r5, r2
 8000fb8:	2400      	movs	r4, #0
 8000fba:	401d      	ands	r5, r3
 8000fbc:	421a      	tst	r2, r3
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_ddiv+0x446>
 8000fc0:	e0a1      	b.n	8001106 <__aeabi_ddiv+0x58a>
 8000fc2:	220f      	movs	r2, #15
 8000fc4:	2400      	movs	r4, #0
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	2a04      	cmp	r2, #4
 8000fca:	d100      	bne.n	8000fce <__aeabi_ddiv+0x452>
 8000fcc:	e098      	b.n	8001100 <__aeabi_ddiv+0x584>
 8000fce:	1d1a      	adds	r2, r3, #4
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	419b      	sbcs	r3, r3
 8000fd4:	425b      	negs	r3, r3
 8000fd6:	18e4      	adds	r4, r4, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	0222      	lsls	r2, r4, #8
 8000fdc:	d400      	bmi.n	8000fe0 <__aeabi_ddiv+0x464>
 8000fde:	e08f      	b.n	8001100 <__aeabi_ddiv+0x584>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	2400      	movs	r4, #0
 8000fe4:	2500      	movs	r5, #0
 8000fe6:	e623      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000fe8:	42b5      	cmp	r5, r6
 8000fea:	d300      	bcc.n	8000fee <__aeabi_ddiv+0x472>
 8000fec:	e764      	b.n	8000eb8 <__aeabi_ddiv+0x33c>
 8000fee:	4643      	mov	r3, r8
 8000ff0:	1e5a      	subs	r2, r3, #1
 8000ff2:	9b00      	ldr	r3, [sp, #0]
 8000ff4:	469c      	mov	ip, r3
 8000ff6:	4465      	add	r5, ip
 8000ff8:	001f      	movs	r7, r3
 8000ffa:	429d      	cmp	r5, r3
 8000ffc:	419b      	sbcs	r3, r3
 8000ffe:	425b      	negs	r3, r3
 8001000:	191b      	adds	r3, r3, r4
 8001002:	18c9      	adds	r1, r1, r3
 8001004:	428c      	cmp	r4, r1
 8001006:	d23a      	bcs.n	800107e <__aeabi_ddiv+0x502>
 8001008:	4288      	cmp	r0, r1
 800100a:	d863      	bhi.n	80010d4 <__aeabi_ddiv+0x558>
 800100c:	d060      	beq.n	80010d0 <__aeabi_ddiv+0x554>
 800100e:	4690      	mov	r8, r2
 8001010:	e752      	b.n	8000eb8 <__aeabi_ddiv+0x33c>
 8001012:	42aa      	cmp	r2, r5
 8001014:	d900      	bls.n	8001018 <__aeabi_ddiv+0x49c>
 8001016:	e6ea      	b.n	8000dee <__aeabi_ddiv+0x272>
 8001018:	4643      	mov	r3, r8
 800101a:	07de      	lsls	r6, r3, #31
 800101c:	0858      	lsrs	r0, r3, #1
 800101e:	086b      	lsrs	r3, r5, #1
 8001020:	431e      	orrs	r6, r3
 8001022:	07ed      	lsls	r5, r5, #31
 8001024:	e6ea      	b.n	8000dfc <__aeabi_ddiv+0x280>
 8001026:	4648      	mov	r0, r9
 8001028:	f001 f838 	bl	800209c <__clzsi2>
 800102c:	0001      	movs	r1, r0
 800102e:	0002      	movs	r2, r0
 8001030:	3115      	adds	r1, #21
 8001032:	3220      	adds	r2, #32
 8001034:	291c      	cmp	r1, #28
 8001036:	dc00      	bgt.n	800103a <__aeabi_ddiv+0x4be>
 8001038:	e61a      	b.n	8000c70 <__aeabi_ddiv+0xf4>
 800103a:	464b      	mov	r3, r9
 800103c:	3808      	subs	r0, #8
 800103e:	4083      	lsls	r3, r0
 8001040:	2500      	movs	r5, #0
 8001042:	4698      	mov	r8, r3
 8001044:	e620      	b.n	8000c88 <__aeabi_ddiv+0x10c>
 8001046:	f001 f829 	bl	800209c <__clzsi2>
 800104a:	0003      	movs	r3, r0
 800104c:	001a      	movs	r2, r3
 800104e:	3215      	adds	r2, #21
 8001050:	3020      	adds	r0, #32
 8001052:	2a1c      	cmp	r2, #28
 8001054:	dc00      	bgt.n	8001058 <__aeabi_ddiv+0x4dc>
 8001056:	e630      	b.n	8000cba <__aeabi_ddiv+0x13e>
 8001058:	4654      	mov	r4, sl
 800105a:	3b08      	subs	r3, #8
 800105c:	2200      	movs	r2, #0
 800105e:	409c      	lsls	r4, r3
 8001060:	e635      	b.n	8000cce <__aeabi_ddiv+0x152>
 8001062:	230f      	movs	r3, #15
 8001064:	402b      	ands	r3, r5
 8001066:	2b04      	cmp	r3, #4
 8001068:	d100      	bne.n	800106c <__aeabi_ddiv+0x4f0>
 800106a:	e652      	b.n	8000d12 <__aeabi_ddiv+0x196>
 800106c:	2305      	movs	r3, #5
 800106e:	425b      	negs	r3, r3
 8001070:	42ab      	cmp	r3, r5
 8001072:	419b      	sbcs	r3, r3
 8001074:	3504      	adds	r5, #4
 8001076:	425b      	negs	r3, r3
 8001078:	08ed      	lsrs	r5, r5, #3
 800107a:	4498      	add	r8, r3
 800107c:	e64a      	b.n	8000d14 <__aeabi_ddiv+0x198>
 800107e:	428c      	cmp	r4, r1
 8001080:	d1c5      	bne.n	800100e <__aeabi_ddiv+0x492>
 8001082:	42af      	cmp	r7, r5
 8001084:	d9c0      	bls.n	8001008 <__aeabi_ddiv+0x48c>
 8001086:	4690      	mov	r8, r2
 8001088:	e716      	b.n	8000eb8 <__aeabi_ddiv+0x33c>
 800108a:	428a      	cmp	r2, r1
 800108c:	d800      	bhi.n	8001090 <__aeabi_ddiv+0x514>
 800108e:	e6ea      	b.n	8000e66 <__aeabi_ddiv+0x2ea>
 8001090:	1e83      	subs	r3, r0, #2
 8001092:	1909      	adds	r1, r1, r4
 8001094:	e6e7      	b.n	8000e66 <__aeabi_ddiv+0x2ea>
 8001096:	4a2a      	ldr	r2, [pc, #168]	; (8001140 <__aeabi_ddiv+0x5c4>)
 8001098:	0028      	movs	r0, r5
 800109a:	445a      	add	r2, fp
 800109c:	4643      	mov	r3, r8
 800109e:	4095      	lsls	r5, r2
 80010a0:	4093      	lsls	r3, r2
 80010a2:	40c8      	lsrs	r0, r1
 80010a4:	1e6a      	subs	r2, r5, #1
 80010a6:	4195      	sbcs	r5, r2
 80010a8:	4644      	mov	r4, r8
 80010aa:	4303      	orrs	r3, r0
 80010ac:	432b      	orrs	r3, r5
 80010ae:	40cc      	lsrs	r4, r1
 80010b0:	075a      	lsls	r2, r3, #29
 80010b2:	d092      	beq.n	8000fda <__aeabi_ddiv+0x45e>
 80010b4:	220f      	movs	r2, #15
 80010b6:	401a      	ands	r2, r3
 80010b8:	2a04      	cmp	r2, #4
 80010ba:	d188      	bne.n	8000fce <__aeabi_ddiv+0x452>
 80010bc:	e78d      	b.n	8000fda <__aeabi_ddiv+0x45e>
 80010be:	0035      	movs	r5, r6
 80010c0:	4281      	cmp	r1, r0
 80010c2:	d000      	beq.n	80010c6 <__aeabi_ddiv+0x54a>
 80010c4:	e74b      	b.n	8000f5e <__aeabi_ddiv+0x3e2>
 80010c6:	9a00      	ldr	r2, [sp, #0]
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d000      	beq.n	80010ce <__aeabi_ddiv+0x552>
 80010cc:	e747      	b.n	8000f5e <__aeabi_ddiv+0x3e2>
 80010ce:	e618      	b.n	8000d02 <__aeabi_ddiv+0x186>
 80010d0:	42ae      	cmp	r6, r5
 80010d2:	d99c      	bls.n	800100e <__aeabi_ddiv+0x492>
 80010d4:	2302      	movs	r3, #2
 80010d6:	425b      	negs	r3, r3
 80010d8:	469c      	mov	ip, r3
 80010da:	9b00      	ldr	r3, [sp, #0]
 80010dc:	44e0      	add	r8, ip
 80010de:	469c      	mov	ip, r3
 80010e0:	4465      	add	r5, ip
 80010e2:	429d      	cmp	r5, r3
 80010e4:	419b      	sbcs	r3, r3
 80010e6:	425b      	negs	r3, r3
 80010e8:	191b      	adds	r3, r3, r4
 80010ea:	18c9      	adds	r1, r1, r3
 80010ec:	e6e4      	b.n	8000eb8 <__aeabi_ddiv+0x33c>
 80010ee:	4a15      	ldr	r2, [pc, #84]	; (8001144 <__aeabi_ddiv+0x5c8>)
 80010f0:	445a      	add	r2, fp
 80010f2:	2a00      	cmp	r2, #0
 80010f4:	dc00      	bgt.n	80010f8 <__aeabi_ddiv+0x57c>
 80010f6:	e744      	b.n	8000f82 <__aeabi_ddiv+0x406>
 80010f8:	2301      	movs	r3, #1
 80010fa:	2500      	movs	r5, #0
 80010fc:	4498      	add	r8, r3
 80010fe:	e609      	b.n	8000d14 <__aeabi_ddiv+0x198>
 8001100:	0765      	lsls	r5, r4, #29
 8001102:	0264      	lsls	r4, r4, #9
 8001104:	0b24      	lsrs	r4, r4, #12
 8001106:	08db      	lsrs	r3, r3, #3
 8001108:	431d      	orrs	r5, r3
 800110a:	2300      	movs	r3, #0
 800110c:	e590      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 800110e:	9e00      	ldr	r6, [sp, #0]
 8001110:	3d02      	subs	r5, #2
 8001112:	0072      	lsls	r2, r6, #1
 8001114:	42b2      	cmp	r2, r6
 8001116:	41bf      	sbcs	r7, r7
 8001118:	427f      	negs	r7, r7
 800111a:	193c      	adds	r4, r7, r4
 800111c:	1909      	adds	r1, r1, r4
 800111e:	9200      	str	r2, [sp, #0]
 8001120:	e7ce      	b.n	80010c0 <__aeabi_ddiv+0x544>
 8001122:	2480      	movs	r4, #128	; 0x80
 8001124:	4643      	mov	r3, r8
 8001126:	0324      	lsls	r4, r4, #12
 8001128:	431c      	orrs	r4, r3
 800112a:	0324      	lsls	r4, r4, #12
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <__aeabi_ddiv+0x5cc>)
 800112e:	0b24      	lsrs	r4, r4, #12
 8001130:	e57e      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8001132:	9a00      	ldr	r2, [sp, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	d3ea      	bcc.n	800110e <__aeabi_ddiv+0x592>
 8001138:	0035      	movs	r5, r6
 800113a:	e7c4      	b.n	80010c6 <__aeabi_ddiv+0x54a>
 800113c:	0000043e 	.word	0x0000043e
 8001140:	0000041e 	.word	0x0000041e
 8001144:	000003ff 	.word	0x000003ff
 8001148:	000007ff 	.word	0x000007ff

0800114c <__eqdf2>:
 800114c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114e:	464f      	mov	r7, r9
 8001150:	4646      	mov	r6, r8
 8001152:	46d6      	mov	lr, sl
 8001154:	4694      	mov	ip, r2
 8001156:	4691      	mov	r9, r2
 8001158:	031a      	lsls	r2, r3, #12
 800115a:	0b12      	lsrs	r2, r2, #12
 800115c:	4d18      	ldr	r5, [pc, #96]	; (80011c0 <__eqdf2+0x74>)
 800115e:	b5c0      	push	{r6, r7, lr}
 8001160:	004c      	lsls	r4, r1, #1
 8001162:	030f      	lsls	r7, r1, #12
 8001164:	4692      	mov	sl, r2
 8001166:	005a      	lsls	r2, r3, #1
 8001168:	0006      	movs	r6, r0
 800116a:	4680      	mov	r8, r0
 800116c:	0b3f      	lsrs	r7, r7, #12
 800116e:	2001      	movs	r0, #1
 8001170:	0d64      	lsrs	r4, r4, #21
 8001172:	0fc9      	lsrs	r1, r1, #31
 8001174:	0d52      	lsrs	r2, r2, #21
 8001176:	0fdb      	lsrs	r3, r3, #31
 8001178:	42ac      	cmp	r4, r5
 800117a:	d00a      	beq.n	8001192 <__eqdf2+0x46>
 800117c:	42aa      	cmp	r2, r5
 800117e:	d003      	beq.n	8001188 <__eqdf2+0x3c>
 8001180:	4294      	cmp	r4, r2
 8001182:	d101      	bne.n	8001188 <__eqdf2+0x3c>
 8001184:	4557      	cmp	r7, sl
 8001186:	d00d      	beq.n	80011a4 <__eqdf2+0x58>
 8001188:	bce0      	pop	{r5, r6, r7}
 800118a:	46ba      	mov	sl, r7
 800118c:	46b1      	mov	r9, r6
 800118e:	46a8      	mov	r8, r5
 8001190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001192:	003d      	movs	r5, r7
 8001194:	4335      	orrs	r5, r6
 8001196:	d1f7      	bne.n	8001188 <__eqdf2+0x3c>
 8001198:	42a2      	cmp	r2, r4
 800119a:	d1f5      	bne.n	8001188 <__eqdf2+0x3c>
 800119c:	4652      	mov	r2, sl
 800119e:	4665      	mov	r5, ip
 80011a0:	432a      	orrs	r2, r5
 80011a2:	d1f1      	bne.n	8001188 <__eqdf2+0x3c>
 80011a4:	2001      	movs	r0, #1
 80011a6:	45c8      	cmp	r8, r9
 80011a8:	d1ee      	bne.n	8001188 <__eqdf2+0x3c>
 80011aa:	4299      	cmp	r1, r3
 80011ac:	d006      	beq.n	80011bc <__eqdf2+0x70>
 80011ae:	2c00      	cmp	r4, #0
 80011b0:	d1ea      	bne.n	8001188 <__eqdf2+0x3c>
 80011b2:	433e      	orrs	r6, r7
 80011b4:	0030      	movs	r0, r6
 80011b6:	1e46      	subs	r6, r0, #1
 80011b8:	41b0      	sbcs	r0, r6
 80011ba:	e7e5      	b.n	8001188 <__eqdf2+0x3c>
 80011bc:	2000      	movs	r0, #0
 80011be:	e7e3      	b.n	8001188 <__eqdf2+0x3c>
 80011c0:	000007ff 	.word	0x000007ff

080011c4 <__gedf2>:
 80011c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c6:	464e      	mov	r6, r9
 80011c8:	4645      	mov	r5, r8
 80011ca:	4657      	mov	r7, sl
 80011cc:	46de      	mov	lr, fp
 80011ce:	0004      	movs	r4, r0
 80011d0:	0018      	movs	r0, r3
 80011d2:	b5e0      	push	{r5, r6, r7, lr}
 80011d4:	0016      	movs	r6, r2
 80011d6:	031b      	lsls	r3, r3, #12
 80011d8:	0b1b      	lsrs	r3, r3, #12
 80011da:	4d32      	ldr	r5, [pc, #200]	; (80012a4 <__gedf2+0xe0>)
 80011dc:	030f      	lsls	r7, r1, #12
 80011de:	004a      	lsls	r2, r1, #1
 80011e0:	4699      	mov	r9, r3
 80011e2:	0043      	lsls	r3, r0, #1
 80011e4:	46a4      	mov	ip, r4
 80011e6:	46b0      	mov	r8, r6
 80011e8:	0b3f      	lsrs	r7, r7, #12
 80011ea:	0d52      	lsrs	r2, r2, #21
 80011ec:	0fc9      	lsrs	r1, r1, #31
 80011ee:	0d5b      	lsrs	r3, r3, #21
 80011f0:	0fc0      	lsrs	r0, r0, #31
 80011f2:	42aa      	cmp	r2, r5
 80011f4:	d029      	beq.n	800124a <__gedf2+0x86>
 80011f6:	42ab      	cmp	r3, r5
 80011f8:	d018      	beq.n	800122c <__gedf2+0x68>
 80011fa:	2a00      	cmp	r2, #0
 80011fc:	d12a      	bne.n	8001254 <__gedf2+0x90>
 80011fe:	433c      	orrs	r4, r7
 8001200:	46a3      	mov	fp, r4
 8001202:	4265      	negs	r5, r4
 8001204:	4165      	adcs	r5, r4
 8001206:	2b00      	cmp	r3, #0
 8001208:	d102      	bne.n	8001210 <__gedf2+0x4c>
 800120a:	464c      	mov	r4, r9
 800120c:	4326      	orrs	r6, r4
 800120e:	d027      	beq.n	8001260 <__gedf2+0x9c>
 8001210:	2d00      	cmp	r5, #0
 8001212:	d115      	bne.n	8001240 <__gedf2+0x7c>
 8001214:	4281      	cmp	r1, r0
 8001216:	d028      	beq.n	800126a <__gedf2+0xa6>
 8001218:	2002      	movs	r0, #2
 800121a:	3901      	subs	r1, #1
 800121c:	4008      	ands	r0, r1
 800121e:	3801      	subs	r0, #1
 8001220:	bcf0      	pop	{r4, r5, r6, r7}
 8001222:	46bb      	mov	fp, r7
 8001224:	46b2      	mov	sl, r6
 8001226:	46a9      	mov	r9, r5
 8001228:	46a0      	mov	r8, r4
 800122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122c:	464d      	mov	r5, r9
 800122e:	432e      	orrs	r6, r5
 8001230:	d12f      	bne.n	8001292 <__gedf2+0xce>
 8001232:	2a00      	cmp	r2, #0
 8001234:	d1ee      	bne.n	8001214 <__gedf2+0x50>
 8001236:	433c      	orrs	r4, r7
 8001238:	4265      	negs	r5, r4
 800123a:	4165      	adcs	r5, r4
 800123c:	2d00      	cmp	r5, #0
 800123e:	d0e9      	beq.n	8001214 <__gedf2+0x50>
 8001240:	2800      	cmp	r0, #0
 8001242:	d1ed      	bne.n	8001220 <__gedf2+0x5c>
 8001244:	2001      	movs	r0, #1
 8001246:	4240      	negs	r0, r0
 8001248:	e7ea      	b.n	8001220 <__gedf2+0x5c>
 800124a:	003d      	movs	r5, r7
 800124c:	4325      	orrs	r5, r4
 800124e:	d120      	bne.n	8001292 <__gedf2+0xce>
 8001250:	4293      	cmp	r3, r2
 8001252:	d0eb      	beq.n	800122c <__gedf2+0x68>
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1dd      	bne.n	8001214 <__gedf2+0x50>
 8001258:	464c      	mov	r4, r9
 800125a:	4326      	orrs	r6, r4
 800125c:	d1da      	bne.n	8001214 <__gedf2+0x50>
 800125e:	e7db      	b.n	8001218 <__gedf2+0x54>
 8001260:	465b      	mov	r3, fp
 8001262:	2000      	movs	r0, #0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0db      	beq.n	8001220 <__gedf2+0x5c>
 8001268:	e7d6      	b.n	8001218 <__gedf2+0x54>
 800126a:	429a      	cmp	r2, r3
 800126c:	dc0a      	bgt.n	8001284 <__gedf2+0xc0>
 800126e:	dbe7      	blt.n	8001240 <__gedf2+0x7c>
 8001270:	454f      	cmp	r7, r9
 8001272:	d8d1      	bhi.n	8001218 <__gedf2+0x54>
 8001274:	d010      	beq.n	8001298 <__gedf2+0xd4>
 8001276:	2000      	movs	r0, #0
 8001278:	454f      	cmp	r7, r9
 800127a:	d2d1      	bcs.n	8001220 <__gedf2+0x5c>
 800127c:	2900      	cmp	r1, #0
 800127e:	d0e1      	beq.n	8001244 <__gedf2+0x80>
 8001280:	0008      	movs	r0, r1
 8001282:	e7cd      	b.n	8001220 <__gedf2+0x5c>
 8001284:	4243      	negs	r3, r0
 8001286:	4158      	adcs	r0, r3
 8001288:	2302      	movs	r3, #2
 800128a:	4240      	negs	r0, r0
 800128c:	4018      	ands	r0, r3
 800128e:	3801      	subs	r0, #1
 8001290:	e7c6      	b.n	8001220 <__gedf2+0x5c>
 8001292:	2002      	movs	r0, #2
 8001294:	4240      	negs	r0, r0
 8001296:	e7c3      	b.n	8001220 <__gedf2+0x5c>
 8001298:	45c4      	cmp	ip, r8
 800129a:	d8bd      	bhi.n	8001218 <__gedf2+0x54>
 800129c:	2000      	movs	r0, #0
 800129e:	45c4      	cmp	ip, r8
 80012a0:	d2be      	bcs.n	8001220 <__gedf2+0x5c>
 80012a2:	e7eb      	b.n	800127c <__gedf2+0xb8>
 80012a4:	000007ff 	.word	0x000007ff

080012a8 <__ledf2>:
 80012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012aa:	464e      	mov	r6, r9
 80012ac:	4645      	mov	r5, r8
 80012ae:	4657      	mov	r7, sl
 80012b0:	46de      	mov	lr, fp
 80012b2:	0004      	movs	r4, r0
 80012b4:	0018      	movs	r0, r3
 80012b6:	b5e0      	push	{r5, r6, r7, lr}
 80012b8:	0016      	movs	r6, r2
 80012ba:	031b      	lsls	r3, r3, #12
 80012bc:	0b1b      	lsrs	r3, r3, #12
 80012be:	4d31      	ldr	r5, [pc, #196]	; (8001384 <__ledf2+0xdc>)
 80012c0:	030f      	lsls	r7, r1, #12
 80012c2:	004a      	lsls	r2, r1, #1
 80012c4:	4699      	mov	r9, r3
 80012c6:	0043      	lsls	r3, r0, #1
 80012c8:	46a4      	mov	ip, r4
 80012ca:	46b0      	mov	r8, r6
 80012cc:	0b3f      	lsrs	r7, r7, #12
 80012ce:	0d52      	lsrs	r2, r2, #21
 80012d0:	0fc9      	lsrs	r1, r1, #31
 80012d2:	0d5b      	lsrs	r3, r3, #21
 80012d4:	0fc0      	lsrs	r0, r0, #31
 80012d6:	42aa      	cmp	r2, r5
 80012d8:	d011      	beq.n	80012fe <__ledf2+0x56>
 80012da:	42ab      	cmp	r3, r5
 80012dc:	d014      	beq.n	8001308 <__ledf2+0x60>
 80012de:	2a00      	cmp	r2, #0
 80012e0:	d12f      	bne.n	8001342 <__ledf2+0x9a>
 80012e2:	433c      	orrs	r4, r7
 80012e4:	46a3      	mov	fp, r4
 80012e6:	4265      	negs	r5, r4
 80012e8:	4165      	adcs	r5, r4
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d114      	bne.n	8001318 <__ledf2+0x70>
 80012ee:	464c      	mov	r4, r9
 80012f0:	4326      	orrs	r6, r4
 80012f2:	d111      	bne.n	8001318 <__ledf2+0x70>
 80012f4:	465b      	mov	r3, fp
 80012f6:	2000      	movs	r0, #0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d017      	beq.n	800132c <__ledf2+0x84>
 80012fc:	e010      	b.n	8001320 <__ledf2+0x78>
 80012fe:	003d      	movs	r5, r7
 8001300:	4325      	orrs	r5, r4
 8001302:	d112      	bne.n	800132a <__ledf2+0x82>
 8001304:	4293      	cmp	r3, r2
 8001306:	d11c      	bne.n	8001342 <__ledf2+0x9a>
 8001308:	464d      	mov	r5, r9
 800130a:	432e      	orrs	r6, r5
 800130c:	d10d      	bne.n	800132a <__ledf2+0x82>
 800130e:	2a00      	cmp	r2, #0
 8001310:	d104      	bne.n	800131c <__ledf2+0x74>
 8001312:	433c      	orrs	r4, r7
 8001314:	4265      	negs	r5, r4
 8001316:	4165      	adcs	r5, r4
 8001318:	2d00      	cmp	r5, #0
 800131a:	d10d      	bne.n	8001338 <__ledf2+0x90>
 800131c:	4281      	cmp	r1, r0
 800131e:	d016      	beq.n	800134e <__ledf2+0xa6>
 8001320:	2002      	movs	r0, #2
 8001322:	3901      	subs	r1, #1
 8001324:	4008      	ands	r0, r1
 8001326:	3801      	subs	r0, #1
 8001328:	e000      	b.n	800132c <__ledf2+0x84>
 800132a:	2002      	movs	r0, #2
 800132c:	bcf0      	pop	{r4, r5, r6, r7}
 800132e:	46bb      	mov	fp, r7
 8001330:	46b2      	mov	sl, r6
 8001332:	46a9      	mov	r9, r5
 8001334:	46a0      	mov	r8, r4
 8001336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001338:	2800      	cmp	r0, #0
 800133a:	d1f7      	bne.n	800132c <__ledf2+0x84>
 800133c:	2001      	movs	r0, #1
 800133e:	4240      	negs	r0, r0
 8001340:	e7f4      	b.n	800132c <__ledf2+0x84>
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1ea      	bne.n	800131c <__ledf2+0x74>
 8001346:	464c      	mov	r4, r9
 8001348:	4326      	orrs	r6, r4
 800134a:	d1e7      	bne.n	800131c <__ledf2+0x74>
 800134c:	e7e8      	b.n	8001320 <__ledf2+0x78>
 800134e:	429a      	cmp	r2, r3
 8001350:	dd06      	ble.n	8001360 <__ledf2+0xb8>
 8001352:	4243      	negs	r3, r0
 8001354:	4158      	adcs	r0, r3
 8001356:	2302      	movs	r3, #2
 8001358:	4240      	negs	r0, r0
 800135a:	4018      	ands	r0, r3
 800135c:	3801      	subs	r0, #1
 800135e:	e7e5      	b.n	800132c <__ledf2+0x84>
 8001360:	429a      	cmp	r2, r3
 8001362:	dbe9      	blt.n	8001338 <__ledf2+0x90>
 8001364:	454f      	cmp	r7, r9
 8001366:	d8db      	bhi.n	8001320 <__ledf2+0x78>
 8001368:	d006      	beq.n	8001378 <__ledf2+0xd0>
 800136a:	2000      	movs	r0, #0
 800136c:	454f      	cmp	r7, r9
 800136e:	d2dd      	bcs.n	800132c <__ledf2+0x84>
 8001370:	2900      	cmp	r1, #0
 8001372:	d0e3      	beq.n	800133c <__ledf2+0x94>
 8001374:	0008      	movs	r0, r1
 8001376:	e7d9      	b.n	800132c <__ledf2+0x84>
 8001378:	45c4      	cmp	ip, r8
 800137a:	d8d1      	bhi.n	8001320 <__ledf2+0x78>
 800137c:	2000      	movs	r0, #0
 800137e:	45c4      	cmp	ip, r8
 8001380:	d2d4      	bcs.n	800132c <__ledf2+0x84>
 8001382:	e7f5      	b.n	8001370 <__ledf2+0xc8>
 8001384:	000007ff 	.word	0x000007ff

08001388 <__aeabi_dmul>:
 8001388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138a:	4657      	mov	r7, sl
 800138c:	464e      	mov	r6, r9
 800138e:	4645      	mov	r5, r8
 8001390:	46de      	mov	lr, fp
 8001392:	b5e0      	push	{r5, r6, r7, lr}
 8001394:	4698      	mov	r8, r3
 8001396:	030c      	lsls	r4, r1, #12
 8001398:	004b      	lsls	r3, r1, #1
 800139a:	0006      	movs	r6, r0
 800139c:	4692      	mov	sl, r2
 800139e:	b087      	sub	sp, #28
 80013a0:	0b24      	lsrs	r4, r4, #12
 80013a2:	0d5b      	lsrs	r3, r3, #21
 80013a4:	0fcf      	lsrs	r7, r1, #31
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d06c      	beq.n	8001484 <__aeabi_dmul+0xfc>
 80013aa:	4add      	ldr	r2, [pc, #884]	; (8001720 <__aeabi_dmul+0x398>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d100      	bne.n	80013b2 <__aeabi_dmul+0x2a>
 80013b0:	e086      	b.n	80014c0 <__aeabi_dmul+0x138>
 80013b2:	0f42      	lsrs	r2, r0, #29
 80013b4:	00e4      	lsls	r4, r4, #3
 80013b6:	4314      	orrs	r4, r2
 80013b8:	2280      	movs	r2, #128	; 0x80
 80013ba:	0412      	lsls	r2, r2, #16
 80013bc:	4314      	orrs	r4, r2
 80013be:	4ad9      	ldr	r2, [pc, #868]	; (8001724 <__aeabi_dmul+0x39c>)
 80013c0:	00c5      	lsls	r5, r0, #3
 80013c2:	4694      	mov	ip, r2
 80013c4:	4463      	add	r3, ip
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2300      	movs	r3, #0
 80013ca:	4699      	mov	r9, r3
 80013cc:	469b      	mov	fp, r3
 80013ce:	4643      	mov	r3, r8
 80013d0:	4642      	mov	r2, r8
 80013d2:	031e      	lsls	r6, r3, #12
 80013d4:	0fd2      	lsrs	r2, r2, #31
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4650      	mov	r0, sl
 80013da:	4690      	mov	r8, r2
 80013dc:	0b36      	lsrs	r6, r6, #12
 80013de:	0d5b      	lsrs	r3, r3, #21
 80013e0:	d100      	bne.n	80013e4 <__aeabi_dmul+0x5c>
 80013e2:	e078      	b.n	80014d6 <__aeabi_dmul+0x14e>
 80013e4:	4ace      	ldr	r2, [pc, #824]	; (8001720 <__aeabi_dmul+0x398>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d01d      	beq.n	8001426 <__aeabi_dmul+0x9e>
 80013ea:	49ce      	ldr	r1, [pc, #824]	; (8001724 <__aeabi_dmul+0x39c>)
 80013ec:	0f42      	lsrs	r2, r0, #29
 80013ee:	468c      	mov	ip, r1
 80013f0:	9900      	ldr	r1, [sp, #0]
 80013f2:	4463      	add	r3, ip
 80013f4:	00f6      	lsls	r6, r6, #3
 80013f6:	468c      	mov	ip, r1
 80013f8:	4316      	orrs	r6, r2
 80013fa:	2280      	movs	r2, #128	; 0x80
 80013fc:	449c      	add	ip, r3
 80013fe:	0412      	lsls	r2, r2, #16
 8001400:	4663      	mov	r3, ip
 8001402:	4316      	orrs	r6, r2
 8001404:	00c2      	lsls	r2, r0, #3
 8001406:	2000      	movs	r0, #0
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	9900      	ldr	r1, [sp, #0]
 800140c:	4643      	mov	r3, r8
 800140e:	3101      	adds	r1, #1
 8001410:	468c      	mov	ip, r1
 8001412:	4649      	mov	r1, r9
 8001414:	407b      	eors	r3, r7
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	290f      	cmp	r1, #15
 800141a:	d900      	bls.n	800141e <__aeabi_dmul+0x96>
 800141c:	e07e      	b.n	800151c <__aeabi_dmul+0x194>
 800141e:	4bc2      	ldr	r3, [pc, #776]	; (8001728 <__aeabi_dmul+0x3a0>)
 8001420:	0089      	lsls	r1, r1, #2
 8001422:	5859      	ldr	r1, [r3, r1]
 8001424:	468f      	mov	pc, r1
 8001426:	4652      	mov	r2, sl
 8001428:	9b00      	ldr	r3, [sp, #0]
 800142a:	4332      	orrs	r2, r6
 800142c:	d000      	beq.n	8001430 <__aeabi_dmul+0xa8>
 800142e:	e156      	b.n	80016de <__aeabi_dmul+0x356>
 8001430:	49bb      	ldr	r1, [pc, #748]	; (8001720 <__aeabi_dmul+0x398>)
 8001432:	2600      	movs	r6, #0
 8001434:	468c      	mov	ip, r1
 8001436:	4463      	add	r3, ip
 8001438:	4649      	mov	r1, r9
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	2302      	movs	r3, #2
 800143e:	4319      	orrs	r1, r3
 8001440:	4689      	mov	r9, r1
 8001442:	2002      	movs	r0, #2
 8001444:	e7e1      	b.n	800140a <__aeabi_dmul+0x82>
 8001446:	4643      	mov	r3, r8
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	0034      	movs	r4, r6
 800144c:	0015      	movs	r5, r2
 800144e:	4683      	mov	fp, r0
 8001450:	465b      	mov	r3, fp
 8001452:	2b02      	cmp	r3, #2
 8001454:	d05e      	beq.n	8001514 <__aeabi_dmul+0x18c>
 8001456:	2b03      	cmp	r3, #3
 8001458:	d100      	bne.n	800145c <__aeabi_dmul+0xd4>
 800145a:	e1f3      	b.n	8001844 <__aeabi_dmul+0x4bc>
 800145c:	2b01      	cmp	r3, #1
 800145e:	d000      	beq.n	8001462 <__aeabi_dmul+0xda>
 8001460:	e118      	b.n	8001694 <__aeabi_dmul+0x30c>
 8001462:	2200      	movs	r2, #0
 8001464:	2400      	movs	r4, #0
 8001466:	2500      	movs	r5, #0
 8001468:	9b01      	ldr	r3, [sp, #4]
 800146a:	0512      	lsls	r2, r2, #20
 800146c:	4322      	orrs	r2, r4
 800146e:	07db      	lsls	r3, r3, #31
 8001470:	431a      	orrs	r2, r3
 8001472:	0028      	movs	r0, r5
 8001474:	0011      	movs	r1, r2
 8001476:	b007      	add	sp, #28
 8001478:	bcf0      	pop	{r4, r5, r6, r7}
 800147a:	46bb      	mov	fp, r7
 800147c:	46b2      	mov	sl, r6
 800147e:	46a9      	mov	r9, r5
 8001480:	46a0      	mov	r8, r4
 8001482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001484:	0025      	movs	r5, r4
 8001486:	4305      	orrs	r5, r0
 8001488:	d100      	bne.n	800148c <__aeabi_dmul+0x104>
 800148a:	e141      	b.n	8001710 <__aeabi_dmul+0x388>
 800148c:	2c00      	cmp	r4, #0
 800148e:	d100      	bne.n	8001492 <__aeabi_dmul+0x10a>
 8001490:	e1ad      	b.n	80017ee <__aeabi_dmul+0x466>
 8001492:	0020      	movs	r0, r4
 8001494:	f000 fe02 	bl	800209c <__clzsi2>
 8001498:	0001      	movs	r1, r0
 800149a:	0002      	movs	r2, r0
 800149c:	390b      	subs	r1, #11
 800149e:	231d      	movs	r3, #29
 80014a0:	0010      	movs	r0, r2
 80014a2:	1a5b      	subs	r3, r3, r1
 80014a4:	0031      	movs	r1, r6
 80014a6:	0035      	movs	r5, r6
 80014a8:	3808      	subs	r0, #8
 80014aa:	4084      	lsls	r4, r0
 80014ac:	40d9      	lsrs	r1, r3
 80014ae:	4085      	lsls	r5, r0
 80014b0:	430c      	orrs	r4, r1
 80014b2:	489e      	ldr	r0, [pc, #632]	; (800172c <__aeabi_dmul+0x3a4>)
 80014b4:	1a83      	subs	r3, r0, r2
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2300      	movs	r3, #0
 80014ba:	4699      	mov	r9, r3
 80014bc:	469b      	mov	fp, r3
 80014be:	e786      	b.n	80013ce <__aeabi_dmul+0x46>
 80014c0:	0005      	movs	r5, r0
 80014c2:	4325      	orrs	r5, r4
 80014c4:	d000      	beq.n	80014c8 <__aeabi_dmul+0x140>
 80014c6:	e11c      	b.n	8001702 <__aeabi_dmul+0x37a>
 80014c8:	2208      	movs	r2, #8
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2302      	movs	r3, #2
 80014ce:	2400      	movs	r4, #0
 80014d0:	4691      	mov	r9, r2
 80014d2:	469b      	mov	fp, r3
 80014d4:	e77b      	b.n	80013ce <__aeabi_dmul+0x46>
 80014d6:	4652      	mov	r2, sl
 80014d8:	4332      	orrs	r2, r6
 80014da:	d100      	bne.n	80014de <__aeabi_dmul+0x156>
 80014dc:	e10a      	b.n	80016f4 <__aeabi_dmul+0x36c>
 80014de:	2e00      	cmp	r6, #0
 80014e0:	d100      	bne.n	80014e4 <__aeabi_dmul+0x15c>
 80014e2:	e176      	b.n	80017d2 <__aeabi_dmul+0x44a>
 80014e4:	0030      	movs	r0, r6
 80014e6:	f000 fdd9 	bl	800209c <__clzsi2>
 80014ea:	0002      	movs	r2, r0
 80014ec:	3a0b      	subs	r2, #11
 80014ee:	231d      	movs	r3, #29
 80014f0:	0001      	movs	r1, r0
 80014f2:	1a9b      	subs	r3, r3, r2
 80014f4:	4652      	mov	r2, sl
 80014f6:	3908      	subs	r1, #8
 80014f8:	40da      	lsrs	r2, r3
 80014fa:	408e      	lsls	r6, r1
 80014fc:	4316      	orrs	r6, r2
 80014fe:	4652      	mov	r2, sl
 8001500:	408a      	lsls	r2, r1
 8001502:	9b00      	ldr	r3, [sp, #0]
 8001504:	4989      	ldr	r1, [pc, #548]	; (800172c <__aeabi_dmul+0x3a4>)
 8001506:	1a18      	subs	r0, r3, r0
 8001508:	0003      	movs	r3, r0
 800150a:	468c      	mov	ip, r1
 800150c:	4463      	add	r3, ip
 800150e:	2000      	movs	r0, #0
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	e77a      	b.n	800140a <__aeabi_dmul+0x82>
 8001514:	2400      	movs	r4, #0
 8001516:	2500      	movs	r5, #0
 8001518:	4a81      	ldr	r2, [pc, #516]	; (8001720 <__aeabi_dmul+0x398>)
 800151a:	e7a5      	b.n	8001468 <__aeabi_dmul+0xe0>
 800151c:	0c2f      	lsrs	r7, r5, #16
 800151e:	042d      	lsls	r5, r5, #16
 8001520:	0c2d      	lsrs	r5, r5, #16
 8001522:	002b      	movs	r3, r5
 8001524:	0c11      	lsrs	r1, r2, #16
 8001526:	0412      	lsls	r2, r2, #16
 8001528:	0c12      	lsrs	r2, r2, #16
 800152a:	4353      	muls	r3, r2
 800152c:	4698      	mov	r8, r3
 800152e:	0013      	movs	r3, r2
 8001530:	0028      	movs	r0, r5
 8001532:	437b      	muls	r3, r7
 8001534:	4699      	mov	r9, r3
 8001536:	4348      	muls	r0, r1
 8001538:	4448      	add	r0, r9
 800153a:	4683      	mov	fp, r0
 800153c:	4640      	mov	r0, r8
 800153e:	000b      	movs	r3, r1
 8001540:	0c00      	lsrs	r0, r0, #16
 8001542:	4682      	mov	sl, r0
 8001544:	4658      	mov	r0, fp
 8001546:	437b      	muls	r3, r7
 8001548:	4450      	add	r0, sl
 800154a:	9302      	str	r3, [sp, #8]
 800154c:	4581      	cmp	r9, r0
 800154e:	d906      	bls.n	800155e <__aeabi_dmul+0x1d6>
 8001550:	469a      	mov	sl, r3
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	025b      	lsls	r3, r3, #9
 8001556:	4699      	mov	r9, r3
 8001558:	44ca      	add	sl, r9
 800155a:	4653      	mov	r3, sl
 800155c:	9302      	str	r3, [sp, #8]
 800155e:	0c03      	lsrs	r3, r0, #16
 8001560:	469b      	mov	fp, r3
 8001562:	4643      	mov	r3, r8
 8001564:	041b      	lsls	r3, r3, #16
 8001566:	0400      	lsls	r0, r0, #16
 8001568:	0c1b      	lsrs	r3, r3, #16
 800156a:	4698      	mov	r8, r3
 800156c:	0003      	movs	r3, r0
 800156e:	4443      	add	r3, r8
 8001570:	9304      	str	r3, [sp, #16]
 8001572:	0c33      	lsrs	r3, r6, #16
 8001574:	4699      	mov	r9, r3
 8001576:	002b      	movs	r3, r5
 8001578:	0436      	lsls	r6, r6, #16
 800157a:	0c36      	lsrs	r6, r6, #16
 800157c:	4373      	muls	r3, r6
 800157e:	4698      	mov	r8, r3
 8001580:	0033      	movs	r3, r6
 8001582:	437b      	muls	r3, r7
 8001584:	469a      	mov	sl, r3
 8001586:	464b      	mov	r3, r9
 8001588:	435d      	muls	r5, r3
 800158a:	435f      	muls	r7, r3
 800158c:	4643      	mov	r3, r8
 800158e:	4455      	add	r5, sl
 8001590:	0c18      	lsrs	r0, r3, #16
 8001592:	1940      	adds	r0, r0, r5
 8001594:	4582      	cmp	sl, r0
 8001596:	d903      	bls.n	80015a0 <__aeabi_dmul+0x218>
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	025b      	lsls	r3, r3, #9
 800159c:	469a      	mov	sl, r3
 800159e:	4457      	add	r7, sl
 80015a0:	0c05      	lsrs	r5, r0, #16
 80015a2:	19eb      	adds	r3, r5, r7
 80015a4:	9305      	str	r3, [sp, #20]
 80015a6:	4643      	mov	r3, r8
 80015a8:	041d      	lsls	r5, r3, #16
 80015aa:	0c2d      	lsrs	r5, r5, #16
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	1940      	adds	r0, r0, r5
 80015b0:	0c25      	lsrs	r5, r4, #16
 80015b2:	0424      	lsls	r4, r4, #16
 80015b4:	0c24      	lsrs	r4, r4, #16
 80015b6:	0027      	movs	r7, r4
 80015b8:	4357      	muls	r7, r2
 80015ba:	436a      	muls	r2, r5
 80015bc:	4690      	mov	r8, r2
 80015be:	002a      	movs	r2, r5
 80015c0:	0c3b      	lsrs	r3, r7, #16
 80015c2:	469a      	mov	sl, r3
 80015c4:	434a      	muls	r2, r1
 80015c6:	4361      	muls	r1, r4
 80015c8:	4441      	add	r1, r8
 80015ca:	4451      	add	r1, sl
 80015cc:	4483      	add	fp, r0
 80015ce:	4588      	cmp	r8, r1
 80015d0:	d903      	bls.n	80015da <__aeabi_dmul+0x252>
 80015d2:	2380      	movs	r3, #128	; 0x80
 80015d4:	025b      	lsls	r3, r3, #9
 80015d6:	4698      	mov	r8, r3
 80015d8:	4442      	add	r2, r8
 80015da:	043f      	lsls	r7, r7, #16
 80015dc:	0c0b      	lsrs	r3, r1, #16
 80015de:	0c3f      	lsrs	r7, r7, #16
 80015e0:	0409      	lsls	r1, r1, #16
 80015e2:	19c9      	adds	r1, r1, r7
 80015e4:	0027      	movs	r7, r4
 80015e6:	4698      	mov	r8, r3
 80015e8:	464b      	mov	r3, r9
 80015ea:	4377      	muls	r7, r6
 80015ec:	435c      	muls	r4, r3
 80015ee:	436e      	muls	r6, r5
 80015f0:	435d      	muls	r5, r3
 80015f2:	0c3b      	lsrs	r3, r7, #16
 80015f4:	4699      	mov	r9, r3
 80015f6:	19a4      	adds	r4, r4, r6
 80015f8:	444c      	add	r4, r9
 80015fa:	4442      	add	r2, r8
 80015fc:	9503      	str	r5, [sp, #12]
 80015fe:	42a6      	cmp	r6, r4
 8001600:	d904      	bls.n	800160c <__aeabi_dmul+0x284>
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	025b      	lsls	r3, r3, #9
 8001606:	4698      	mov	r8, r3
 8001608:	4445      	add	r5, r8
 800160a:	9503      	str	r5, [sp, #12]
 800160c:	9b02      	ldr	r3, [sp, #8]
 800160e:	043f      	lsls	r7, r7, #16
 8001610:	445b      	add	r3, fp
 8001612:	001e      	movs	r6, r3
 8001614:	4283      	cmp	r3, r0
 8001616:	4180      	sbcs	r0, r0
 8001618:	0423      	lsls	r3, r4, #16
 800161a:	4698      	mov	r8, r3
 800161c:	9b05      	ldr	r3, [sp, #20]
 800161e:	0c3f      	lsrs	r7, r7, #16
 8001620:	4447      	add	r7, r8
 8001622:	4698      	mov	r8, r3
 8001624:	1876      	adds	r6, r6, r1
 8001626:	428e      	cmp	r6, r1
 8001628:	4189      	sbcs	r1, r1
 800162a:	4447      	add	r7, r8
 800162c:	4240      	negs	r0, r0
 800162e:	183d      	adds	r5, r7, r0
 8001630:	46a8      	mov	r8, r5
 8001632:	4693      	mov	fp, r2
 8001634:	4249      	negs	r1, r1
 8001636:	468a      	mov	sl, r1
 8001638:	44c3      	add	fp, r8
 800163a:	429f      	cmp	r7, r3
 800163c:	41bf      	sbcs	r7, r7
 800163e:	4580      	cmp	r8, r0
 8001640:	4180      	sbcs	r0, r0
 8001642:	9b03      	ldr	r3, [sp, #12]
 8001644:	44da      	add	sl, fp
 8001646:	4698      	mov	r8, r3
 8001648:	4653      	mov	r3, sl
 800164a:	4240      	negs	r0, r0
 800164c:	427f      	negs	r7, r7
 800164e:	4307      	orrs	r7, r0
 8001650:	0c24      	lsrs	r4, r4, #16
 8001652:	4593      	cmp	fp, r2
 8001654:	4192      	sbcs	r2, r2
 8001656:	458a      	cmp	sl, r1
 8001658:	4189      	sbcs	r1, r1
 800165a:	193f      	adds	r7, r7, r4
 800165c:	0ddc      	lsrs	r4, r3, #23
 800165e:	9b04      	ldr	r3, [sp, #16]
 8001660:	0275      	lsls	r5, r6, #9
 8001662:	431d      	orrs	r5, r3
 8001664:	1e68      	subs	r0, r5, #1
 8001666:	4185      	sbcs	r5, r0
 8001668:	4653      	mov	r3, sl
 800166a:	4252      	negs	r2, r2
 800166c:	4249      	negs	r1, r1
 800166e:	430a      	orrs	r2, r1
 8001670:	18bf      	adds	r7, r7, r2
 8001672:	4447      	add	r7, r8
 8001674:	0df6      	lsrs	r6, r6, #23
 8001676:	027f      	lsls	r7, r7, #9
 8001678:	4335      	orrs	r5, r6
 800167a:	025a      	lsls	r2, r3, #9
 800167c:	433c      	orrs	r4, r7
 800167e:	4315      	orrs	r5, r2
 8001680:	01fb      	lsls	r3, r7, #7
 8001682:	d400      	bmi.n	8001686 <__aeabi_dmul+0x2fe>
 8001684:	e0c1      	b.n	800180a <__aeabi_dmul+0x482>
 8001686:	2101      	movs	r1, #1
 8001688:	086a      	lsrs	r2, r5, #1
 800168a:	400d      	ands	r5, r1
 800168c:	4315      	orrs	r5, r2
 800168e:	07e2      	lsls	r2, r4, #31
 8001690:	4315      	orrs	r5, r2
 8001692:	0864      	lsrs	r4, r4, #1
 8001694:	4926      	ldr	r1, [pc, #152]	; (8001730 <__aeabi_dmul+0x3a8>)
 8001696:	4461      	add	r1, ip
 8001698:	2900      	cmp	r1, #0
 800169a:	dd56      	ble.n	800174a <__aeabi_dmul+0x3c2>
 800169c:	076b      	lsls	r3, r5, #29
 800169e:	d009      	beq.n	80016b4 <__aeabi_dmul+0x32c>
 80016a0:	220f      	movs	r2, #15
 80016a2:	402a      	ands	r2, r5
 80016a4:	2a04      	cmp	r2, #4
 80016a6:	d005      	beq.n	80016b4 <__aeabi_dmul+0x32c>
 80016a8:	1d2a      	adds	r2, r5, #4
 80016aa:	42aa      	cmp	r2, r5
 80016ac:	41ad      	sbcs	r5, r5
 80016ae:	426d      	negs	r5, r5
 80016b0:	1964      	adds	r4, r4, r5
 80016b2:	0015      	movs	r5, r2
 80016b4:	01e3      	lsls	r3, r4, #7
 80016b6:	d504      	bpl.n	80016c2 <__aeabi_dmul+0x33a>
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	4a1e      	ldr	r2, [pc, #120]	; (8001734 <__aeabi_dmul+0x3ac>)
 80016bc:	00c9      	lsls	r1, r1, #3
 80016be:	4014      	ands	r4, r2
 80016c0:	4461      	add	r1, ip
 80016c2:	4a1d      	ldr	r2, [pc, #116]	; (8001738 <__aeabi_dmul+0x3b0>)
 80016c4:	4291      	cmp	r1, r2
 80016c6:	dd00      	ble.n	80016ca <__aeabi_dmul+0x342>
 80016c8:	e724      	b.n	8001514 <__aeabi_dmul+0x18c>
 80016ca:	0762      	lsls	r2, r4, #29
 80016cc:	08ed      	lsrs	r5, r5, #3
 80016ce:	0264      	lsls	r4, r4, #9
 80016d0:	0549      	lsls	r1, r1, #21
 80016d2:	4315      	orrs	r5, r2
 80016d4:	0b24      	lsrs	r4, r4, #12
 80016d6:	0d4a      	lsrs	r2, r1, #21
 80016d8:	e6c6      	b.n	8001468 <__aeabi_dmul+0xe0>
 80016da:	9701      	str	r7, [sp, #4]
 80016dc:	e6b8      	b.n	8001450 <__aeabi_dmul+0xc8>
 80016de:	4a10      	ldr	r2, [pc, #64]	; (8001720 <__aeabi_dmul+0x398>)
 80016e0:	2003      	movs	r0, #3
 80016e2:	4694      	mov	ip, r2
 80016e4:	4463      	add	r3, ip
 80016e6:	464a      	mov	r2, r9
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2303      	movs	r3, #3
 80016ec:	431a      	orrs	r2, r3
 80016ee:	4691      	mov	r9, r2
 80016f0:	4652      	mov	r2, sl
 80016f2:	e68a      	b.n	800140a <__aeabi_dmul+0x82>
 80016f4:	4649      	mov	r1, r9
 80016f6:	2301      	movs	r3, #1
 80016f8:	4319      	orrs	r1, r3
 80016fa:	4689      	mov	r9, r1
 80016fc:	2600      	movs	r6, #0
 80016fe:	2001      	movs	r0, #1
 8001700:	e683      	b.n	800140a <__aeabi_dmul+0x82>
 8001702:	220c      	movs	r2, #12
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	2303      	movs	r3, #3
 8001708:	0005      	movs	r5, r0
 800170a:	4691      	mov	r9, r2
 800170c:	469b      	mov	fp, r3
 800170e:	e65e      	b.n	80013ce <__aeabi_dmul+0x46>
 8001710:	2304      	movs	r3, #4
 8001712:	4699      	mov	r9, r3
 8001714:	2300      	movs	r3, #0
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	3301      	adds	r3, #1
 800171a:	2400      	movs	r4, #0
 800171c:	469b      	mov	fp, r3
 800171e:	e656      	b.n	80013ce <__aeabi_dmul+0x46>
 8001720:	000007ff 	.word	0x000007ff
 8001724:	fffffc01 	.word	0xfffffc01
 8001728:	0800de1c 	.word	0x0800de1c
 800172c:	fffffc0d 	.word	0xfffffc0d
 8001730:	000003ff 	.word	0x000003ff
 8001734:	feffffff 	.word	0xfeffffff
 8001738:	000007fe 	.word	0x000007fe
 800173c:	2300      	movs	r3, #0
 800173e:	2480      	movs	r4, #128	; 0x80
 8001740:	2500      	movs	r5, #0
 8001742:	4a44      	ldr	r2, [pc, #272]	; (8001854 <__aeabi_dmul+0x4cc>)
 8001744:	9301      	str	r3, [sp, #4]
 8001746:	0324      	lsls	r4, r4, #12
 8001748:	e68e      	b.n	8001468 <__aeabi_dmul+0xe0>
 800174a:	2001      	movs	r0, #1
 800174c:	1a40      	subs	r0, r0, r1
 800174e:	2838      	cmp	r0, #56	; 0x38
 8001750:	dd00      	ble.n	8001754 <__aeabi_dmul+0x3cc>
 8001752:	e686      	b.n	8001462 <__aeabi_dmul+0xda>
 8001754:	281f      	cmp	r0, #31
 8001756:	dd5b      	ble.n	8001810 <__aeabi_dmul+0x488>
 8001758:	221f      	movs	r2, #31
 800175a:	0023      	movs	r3, r4
 800175c:	4252      	negs	r2, r2
 800175e:	1a51      	subs	r1, r2, r1
 8001760:	40cb      	lsrs	r3, r1
 8001762:	0019      	movs	r1, r3
 8001764:	2820      	cmp	r0, #32
 8001766:	d003      	beq.n	8001770 <__aeabi_dmul+0x3e8>
 8001768:	4a3b      	ldr	r2, [pc, #236]	; (8001858 <__aeabi_dmul+0x4d0>)
 800176a:	4462      	add	r2, ip
 800176c:	4094      	lsls	r4, r2
 800176e:	4325      	orrs	r5, r4
 8001770:	1e6a      	subs	r2, r5, #1
 8001772:	4195      	sbcs	r5, r2
 8001774:	002a      	movs	r2, r5
 8001776:	430a      	orrs	r2, r1
 8001778:	2107      	movs	r1, #7
 800177a:	000d      	movs	r5, r1
 800177c:	2400      	movs	r4, #0
 800177e:	4015      	ands	r5, r2
 8001780:	4211      	tst	r1, r2
 8001782:	d05b      	beq.n	800183c <__aeabi_dmul+0x4b4>
 8001784:	210f      	movs	r1, #15
 8001786:	2400      	movs	r4, #0
 8001788:	4011      	ands	r1, r2
 800178a:	2904      	cmp	r1, #4
 800178c:	d053      	beq.n	8001836 <__aeabi_dmul+0x4ae>
 800178e:	1d11      	adds	r1, r2, #4
 8001790:	4291      	cmp	r1, r2
 8001792:	4192      	sbcs	r2, r2
 8001794:	4252      	negs	r2, r2
 8001796:	18a4      	adds	r4, r4, r2
 8001798:	000a      	movs	r2, r1
 800179a:	0223      	lsls	r3, r4, #8
 800179c:	d54b      	bpl.n	8001836 <__aeabi_dmul+0x4ae>
 800179e:	2201      	movs	r2, #1
 80017a0:	2400      	movs	r4, #0
 80017a2:	2500      	movs	r5, #0
 80017a4:	e660      	b.n	8001468 <__aeabi_dmul+0xe0>
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	031b      	lsls	r3, r3, #12
 80017aa:	421c      	tst	r4, r3
 80017ac:	d009      	beq.n	80017c2 <__aeabi_dmul+0x43a>
 80017ae:	421e      	tst	r6, r3
 80017b0:	d107      	bne.n	80017c2 <__aeabi_dmul+0x43a>
 80017b2:	4333      	orrs	r3, r6
 80017b4:	031c      	lsls	r4, r3, #12
 80017b6:	4643      	mov	r3, r8
 80017b8:	0015      	movs	r5, r2
 80017ba:	0b24      	lsrs	r4, r4, #12
 80017bc:	4a25      	ldr	r2, [pc, #148]	; (8001854 <__aeabi_dmul+0x4cc>)
 80017be:	9301      	str	r3, [sp, #4]
 80017c0:	e652      	b.n	8001468 <__aeabi_dmul+0xe0>
 80017c2:	2280      	movs	r2, #128	; 0x80
 80017c4:	0312      	lsls	r2, r2, #12
 80017c6:	4314      	orrs	r4, r2
 80017c8:	0324      	lsls	r4, r4, #12
 80017ca:	4a22      	ldr	r2, [pc, #136]	; (8001854 <__aeabi_dmul+0x4cc>)
 80017cc:	0b24      	lsrs	r4, r4, #12
 80017ce:	9701      	str	r7, [sp, #4]
 80017d0:	e64a      	b.n	8001468 <__aeabi_dmul+0xe0>
 80017d2:	f000 fc63 	bl	800209c <__clzsi2>
 80017d6:	0003      	movs	r3, r0
 80017d8:	001a      	movs	r2, r3
 80017da:	3215      	adds	r2, #21
 80017dc:	3020      	adds	r0, #32
 80017de:	2a1c      	cmp	r2, #28
 80017e0:	dc00      	bgt.n	80017e4 <__aeabi_dmul+0x45c>
 80017e2:	e684      	b.n	80014ee <__aeabi_dmul+0x166>
 80017e4:	4656      	mov	r6, sl
 80017e6:	3b08      	subs	r3, #8
 80017e8:	2200      	movs	r2, #0
 80017ea:	409e      	lsls	r6, r3
 80017ec:	e689      	b.n	8001502 <__aeabi_dmul+0x17a>
 80017ee:	f000 fc55 	bl	800209c <__clzsi2>
 80017f2:	0001      	movs	r1, r0
 80017f4:	0002      	movs	r2, r0
 80017f6:	3115      	adds	r1, #21
 80017f8:	3220      	adds	r2, #32
 80017fa:	291c      	cmp	r1, #28
 80017fc:	dc00      	bgt.n	8001800 <__aeabi_dmul+0x478>
 80017fe:	e64e      	b.n	800149e <__aeabi_dmul+0x116>
 8001800:	0034      	movs	r4, r6
 8001802:	3808      	subs	r0, #8
 8001804:	2500      	movs	r5, #0
 8001806:	4084      	lsls	r4, r0
 8001808:	e653      	b.n	80014b2 <__aeabi_dmul+0x12a>
 800180a:	9b00      	ldr	r3, [sp, #0]
 800180c:	469c      	mov	ip, r3
 800180e:	e741      	b.n	8001694 <__aeabi_dmul+0x30c>
 8001810:	4912      	ldr	r1, [pc, #72]	; (800185c <__aeabi_dmul+0x4d4>)
 8001812:	0022      	movs	r2, r4
 8001814:	4461      	add	r1, ip
 8001816:	002e      	movs	r6, r5
 8001818:	408d      	lsls	r5, r1
 800181a:	408a      	lsls	r2, r1
 800181c:	40c6      	lsrs	r6, r0
 800181e:	1e69      	subs	r1, r5, #1
 8001820:	418d      	sbcs	r5, r1
 8001822:	4332      	orrs	r2, r6
 8001824:	432a      	orrs	r2, r5
 8001826:	40c4      	lsrs	r4, r0
 8001828:	0753      	lsls	r3, r2, #29
 800182a:	d0b6      	beq.n	800179a <__aeabi_dmul+0x412>
 800182c:	210f      	movs	r1, #15
 800182e:	4011      	ands	r1, r2
 8001830:	2904      	cmp	r1, #4
 8001832:	d1ac      	bne.n	800178e <__aeabi_dmul+0x406>
 8001834:	e7b1      	b.n	800179a <__aeabi_dmul+0x412>
 8001836:	0765      	lsls	r5, r4, #29
 8001838:	0264      	lsls	r4, r4, #9
 800183a:	0b24      	lsrs	r4, r4, #12
 800183c:	08d2      	lsrs	r2, r2, #3
 800183e:	4315      	orrs	r5, r2
 8001840:	2200      	movs	r2, #0
 8001842:	e611      	b.n	8001468 <__aeabi_dmul+0xe0>
 8001844:	2280      	movs	r2, #128	; 0x80
 8001846:	0312      	lsls	r2, r2, #12
 8001848:	4314      	orrs	r4, r2
 800184a:	0324      	lsls	r4, r4, #12
 800184c:	4a01      	ldr	r2, [pc, #4]	; (8001854 <__aeabi_dmul+0x4cc>)
 800184e:	0b24      	lsrs	r4, r4, #12
 8001850:	e60a      	b.n	8001468 <__aeabi_dmul+0xe0>
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	000007ff 	.word	0x000007ff
 8001858:	0000043e 	.word	0x0000043e
 800185c:	0000041e 	.word	0x0000041e

08001860 <__aeabi_dsub>:
 8001860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001862:	4657      	mov	r7, sl
 8001864:	464e      	mov	r6, r9
 8001866:	4645      	mov	r5, r8
 8001868:	46de      	mov	lr, fp
 800186a:	0004      	movs	r4, r0
 800186c:	b5e0      	push	{r5, r6, r7, lr}
 800186e:	001f      	movs	r7, r3
 8001870:	0010      	movs	r0, r2
 8001872:	030b      	lsls	r3, r1, #12
 8001874:	0f62      	lsrs	r2, r4, #29
 8001876:	004e      	lsls	r6, r1, #1
 8001878:	0fcd      	lsrs	r5, r1, #31
 800187a:	0a5b      	lsrs	r3, r3, #9
 800187c:	0339      	lsls	r1, r7, #12
 800187e:	4313      	orrs	r3, r2
 8001880:	0a49      	lsrs	r1, r1, #9
 8001882:	00e2      	lsls	r2, r4, #3
 8001884:	0f44      	lsrs	r4, r0, #29
 8001886:	4321      	orrs	r1, r4
 8001888:	4cc2      	ldr	r4, [pc, #776]	; (8001b94 <__aeabi_dsub+0x334>)
 800188a:	4691      	mov	r9, r2
 800188c:	4692      	mov	sl, r2
 800188e:	00c0      	lsls	r0, r0, #3
 8001890:	007a      	lsls	r2, r7, #1
 8001892:	4680      	mov	r8, r0
 8001894:	0d76      	lsrs	r6, r6, #21
 8001896:	0d52      	lsrs	r2, r2, #21
 8001898:	0fff      	lsrs	r7, r7, #31
 800189a:	42a2      	cmp	r2, r4
 800189c:	d100      	bne.n	80018a0 <__aeabi_dsub+0x40>
 800189e:	e0b4      	b.n	8001a0a <__aeabi_dsub+0x1aa>
 80018a0:	2401      	movs	r4, #1
 80018a2:	4067      	eors	r7, r4
 80018a4:	46bb      	mov	fp, r7
 80018a6:	42bd      	cmp	r5, r7
 80018a8:	d100      	bne.n	80018ac <__aeabi_dsub+0x4c>
 80018aa:	e088      	b.n	80019be <__aeabi_dsub+0x15e>
 80018ac:	1ab4      	subs	r4, r6, r2
 80018ae:	46a4      	mov	ip, r4
 80018b0:	2c00      	cmp	r4, #0
 80018b2:	dc00      	bgt.n	80018b6 <__aeabi_dsub+0x56>
 80018b4:	e0b2      	b.n	8001a1c <__aeabi_dsub+0x1bc>
 80018b6:	2a00      	cmp	r2, #0
 80018b8:	d100      	bne.n	80018bc <__aeabi_dsub+0x5c>
 80018ba:	e0c5      	b.n	8001a48 <__aeabi_dsub+0x1e8>
 80018bc:	4ab5      	ldr	r2, [pc, #724]	; (8001b94 <__aeabi_dsub+0x334>)
 80018be:	4296      	cmp	r6, r2
 80018c0:	d100      	bne.n	80018c4 <__aeabi_dsub+0x64>
 80018c2:	e28b      	b.n	8001ddc <__aeabi_dsub+0x57c>
 80018c4:	2280      	movs	r2, #128	; 0x80
 80018c6:	0412      	lsls	r2, r2, #16
 80018c8:	4311      	orrs	r1, r2
 80018ca:	4662      	mov	r2, ip
 80018cc:	2a38      	cmp	r2, #56	; 0x38
 80018ce:	dd00      	ble.n	80018d2 <__aeabi_dsub+0x72>
 80018d0:	e1a1      	b.n	8001c16 <__aeabi_dsub+0x3b6>
 80018d2:	2a1f      	cmp	r2, #31
 80018d4:	dd00      	ble.n	80018d8 <__aeabi_dsub+0x78>
 80018d6:	e216      	b.n	8001d06 <__aeabi_dsub+0x4a6>
 80018d8:	2720      	movs	r7, #32
 80018da:	000c      	movs	r4, r1
 80018dc:	1abf      	subs	r7, r7, r2
 80018de:	40bc      	lsls	r4, r7
 80018e0:	0002      	movs	r2, r0
 80018e2:	46a0      	mov	r8, r4
 80018e4:	4664      	mov	r4, ip
 80018e6:	40b8      	lsls	r0, r7
 80018e8:	40e2      	lsrs	r2, r4
 80018ea:	4644      	mov	r4, r8
 80018ec:	4314      	orrs	r4, r2
 80018ee:	0002      	movs	r2, r0
 80018f0:	1e50      	subs	r0, r2, #1
 80018f2:	4182      	sbcs	r2, r0
 80018f4:	4660      	mov	r0, ip
 80018f6:	40c1      	lsrs	r1, r0
 80018f8:	4322      	orrs	r2, r4
 80018fa:	1a5b      	subs	r3, r3, r1
 80018fc:	4649      	mov	r1, r9
 80018fe:	1a8c      	subs	r4, r1, r2
 8001900:	45a1      	cmp	r9, r4
 8001902:	4192      	sbcs	r2, r2
 8001904:	4252      	negs	r2, r2
 8001906:	1a9b      	subs	r3, r3, r2
 8001908:	4698      	mov	r8, r3
 800190a:	4643      	mov	r3, r8
 800190c:	021b      	lsls	r3, r3, #8
 800190e:	d400      	bmi.n	8001912 <__aeabi_dsub+0xb2>
 8001910:	e117      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001912:	4643      	mov	r3, r8
 8001914:	025b      	lsls	r3, r3, #9
 8001916:	0a5b      	lsrs	r3, r3, #9
 8001918:	4698      	mov	r8, r3
 800191a:	4643      	mov	r3, r8
 800191c:	2b00      	cmp	r3, #0
 800191e:	d100      	bne.n	8001922 <__aeabi_dsub+0xc2>
 8001920:	e16c      	b.n	8001bfc <__aeabi_dsub+0x39c>
 8001922:	4640      	mov	r0, r8
 8001924:	f000 fbba 	bl	800209c <__clzsi2>
 8001928:	0002      	movs	r2, r0
 800192a:	3a08      	subs	r2, #8
 800192c:	2120      	movs	r1, #32
 800192e:	0020      	movs	r0, r4
 8001930:	4643      	mov	r3, r8
 8001932:	1a89      	subs	r1, r1, r2
 8001934:	4093      	lsls	r3, r2
 8001936:	40c8      	lsrs	r0, r1
 8001938:	4094      	lsls	r4, r2
 800193a:	4303      	orrs	r3, r0
 800193c:	4296      	cmp	r6, r2
 800193e:	dd00      	ble.n	8001942 <__aeabi_dsub+0xe2>
 8001940:	e157      	b.n	8001bf2 <__aeabi_dsub+0x392>
 8001942:	1b96      	subs	r6, r2, r6
 8001944:	1c71      	adds	r1, r6, #1
 8001946:	291f      	cmp	r1, #31
 8001948:	dd00      	ble.n	800194c <__aeabi_dsub+0xec>
 800194a:	e1cb      	b.n	8001ce4 <__aeabi_dsub+0x484>
 800194c:	2220      	movs	r2, #32
 800194e:	0018      	movs	r0, r3
 8001950:	0026      	movs	r6, r4
 8001952:	1a52      	subs	r2, r2, r1
 8001954:	4094      	lsls	r4, r2
 8001956:	4090      	lsls	r0, r2
 8001958:	40ce      	lsrs	r6, r1
 800195a:	40cb      	lsrs	r3, r1
 800195c:	1e62      	subs	r2, r4, #1
 800195e:	4194      	sbcs	r4, r2
 8001960:	4330      	orrs	r0, r6
 8001962:	4698      	mov	r8, r3
 8001964:	2600      	movs	r6, #0
 8001966:	4304      	orrs	r4, r0
 8001968:	0763      	lsls	r3, r4, #29
 800196a:	d009      	beq.n	8001980 <__aeabi_dsub+0x120>
 800196c:	230f      	movs	r3, #15
 800196e:	4023      	ands	r3, r4
 8001970:	2b04      	cmp	r3, #4
 8001972:	d005      	beq.n	8001980 <__aeabi_dsub+0x120>
 8001974:	1d23      	adds	r3, r4, #4
 8001976:	42a3      	cmp	r3, r4
 8001978:	41a4      	sbcs	r4, r4
 800197a:	4264      	negs	r4, r4
 800197c:	44a0      	add	r8, r4
 800197e:	001c      	movs	r4, r3
 8001980:	4643      	mov	r3, r8
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	d400      	bmi.n	8001988 <__aeabi_dsub+0x128>
 8001986:	e0df      	b.n	8001b48 <__aeabi_dsub+0x2e8>
 8001988:	4b82      	ldr	r3, [pc, #520]	; (8001b94 <__aeabi_dsub+0x334>)
 800198a:	3601      	adds	r6, #1
 800198c:	429e      	cmp	r6, r3
 800198e:	d100      	bne.n	8001992 <__aeabi_dsub+0x132>
 8001990:	e0fb      	b.n	8001b8a <__aeabi_dsub+0x32a>
 8001992:	4642      	mov	r2, r8
 8001994:	4b80      	ldr	r3, [pc, #512]	; (8001b98 <__aeabi_dsub+0x338>)
 8001996:	08e4      	lsrs	r4, r4, #3
 8001998:	401a      	ands	r2, r3
 800199a:	0013      	movs	r3, r2
 800199c:	0571      	lsls	r1, r6, #21
 800199e:	0752      	lsls	r2, r2, #29
 80019a0:	025b      	lsls	r3, r3, #9
 80019a2:	4322      	orrs	r2, r4
 80019a4:	0b1b      	lsrs	r3, r3, #12
 80019a6:	0d49      	lsrs	r1, r1, #21
 80019a8:	0509      	lsls	r1, r1, #20
 80019aa:	07ed      	lsls	r5, r5, #31
 80019ac:	4319      	orrs	r1, r3
 80019ae:	4329      	orrs	r1, r5
 80019b0:	0010      	movs	r0, r2
 80019b2:	bcf0      	pop	{r4, r5, r6, r7}
 80019b4:	46bb      	mov	fp, r7
 80019b6:	46b2      	mov	sl, r6
 80019b8:	46a9      	mov	r9, r5
 80019ba:	46a0      	mov	r8, r4
 80019bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019be:	1ab4      	subs	r4, r6, r2
 80019c0:	46a4      	mov	ip, r4
 80019c2:	2c00      	cmp	r4, #0
 80019c4:	dd58      	ble.n	8001a78 <__aeabi_dsub+0x218>
 80019c6:	2a00      	cmp	r2, #0
 80019c8:	d100      	bne.n	80019cc <__aeabi_dsub+0x16c>
 80019ca:	e09e      	b.n	8001b0a <__aeabi_dsub+0x2aa>
 80019cc:	4a71      	ldr	r2, [pc, #452]	; (8001b94 <__aeabi_dsub+0x334>)
 80019ce:	4296      	cmp	r6, r2
 80019d0:	d100      	bne.n	80019d4 <__aeabi_dsub+0x174>
 80019d2:	e13b      	b.n	8001c4c <__aeabi_dsub+0x3ec>
 80019d4:	2280      	movs	r2, #128	; 0x80
 80019d6:	0412      	lsls	r2, r2, #16
 80019d8:	4311      	orrs	r1, r2
 80019da:	4662      	mov	r2, ip
 80019dc:	2a38      	cmp	r2, #56	; 0x38
 80019de:	dd00      	ble.n	80019e2 <__aeabi_dsub+0x182>
 80019e0:	e0c1      	b.n	8001b66 <__aeabi_dsub+0x306>
 80019e2:	2a1f      	cmp	r2, #31
 80019e4:	dc00      	bgt.n	80019e8 <__aeabi_dsub+0x188>
 80019e6:	e1bb      	b.n	8001d60 <__aeabi_dsub+0x500>
 80019e8:	000c      	movs	r4, r1
 80019ea:	3a20      	subs	r2, #32
 80019ec:	40d4      	lsrs	r4, r2
 80019ee:	0022      	movs	r2, r4
 80019f0:	4664      	mov	r4, ip
 80019f2:	2c20      	cmp	r4, #32
 80019f4:	d004      	beq.n	8001a00 <__aeabi_dsub+0x1a0>
 80019f6:	2740      	movs	r7, #64	; 0x40
 80019f8:	1b3f      	subs	r7, r7, r4
 80019fa:	40b9      	lsls	r1, r7
 80019fc:	4308      	orrs	r0, r1
 80019fe:	4680      	mov	r8, r0
 8001a00:	4644      	mov	r4, r8
 8001a02:	1e61      	subs	r1, r4, #1
 8001a04:	418c      	sbcs	r4, r1
 8001a06:	4314      	orrs	r4, r2
 8001a08:	e0b1      	b.n	8001b6e <__aeabi_dsub+0x30e>
 8001a0a:	000c      	movs	r4, r1
 8001a0c:	4304      	orrs	r4, r0
 8001a0e:	d02a      	beq.n	8001a66 <__aeabi_dsub+0x206>
 8001a10:	46bb      	mov	fp, r7
 8001a12:	42bd      	cmp	r5, r7
 8001a14:	d02d      	beq.n	8001a72 <__aeabi_dsub+0x212>
 8001a16:	4c61      	ldr	r4, [pc, #388]	; (8001b9c <__aeabi_dsub+0x33c>)
 8001a18:	46a4      	mov	ip, r4
 8001a1a:	44b4      	add	ip, r6
 8001a1c:	4664      	mov	r4, ip
 8001a1e:	2c00      	cmp	r4, #0
 8001a20:	d05c      	beq.n	8001adc <__aeabi_dsub+0x27c>
 8001a22:	1b94      	subs	r4, r2, r6
 8001a24:	46a4      	mov	ip, r4
 8001a26:	2e00      	cmp	r6, #0
 8001a28:	d000      	beq.n	8001a2c <__aeabi_dsub+0x1cc>
 8001a2a:	e115      	b.n	8001c58 <__aeabi_dsub+0x3f8>
 8001a2c:	464d      	mov	r5, r9
 8001a2e:	431d      	orrs	r5, r3
 8001a30:	d100      	bne.n	8001a34 <__aeabi_dsub+0x1d4>
 8001a32:	e1c3      	b.n	8001dbc <__aeabi_dsub+0x55c>
 8001a34:	1e65      	subs	r5, r4, #1
 8001a36:	2c01      	cmp	r4, #1
 8001a38:	d100      	bne.n	8001a3c <__aeabi_dsub+0x1dc>
 8001a3a:	e20c      	b.n	8001e56 <__aeabi_dsub+0x5f6>
 8001a3c:	4e55      	ldr	r6, [pc, #340]	; (8001b94 <__aeabi_dsub+0x334>)
 8001a3e:	42b4      	cmp	r4, r6
 8001a40:	d100      	bne.n	8001a44 <__aeabi_dsub+0x1e4>
 8001a42:	e1f8      	b.n	8001e36 <__aeabi_dsub+0x5d6>
 8001a44:	46ac      	mov	ip, r5
 8001a46:	e10e      	b.n	8001c66 <__aeabi_dsub+0x406>
 8001a48:	000a      	movs	r2, r1
 8001a4a:	4302      	orrs	r2, r0
 8001a4c:	d100      	bne.n	8001a50 <__aeabi_dsub+0x1f0>
 8001a4e:	e136      	b.n	8001cbe <__aeabi_dsub+0x45e>
 8001a50:	0022      	movs	r2, r4
 8001a52:	3a01      	subs	r2, #1
 8001a54:	2c01      	cmp	r4, #1
 8001a56:	d100      	bne.n	8001a5a <__aeabi_dsub+0x1fa>
 8001a58:	e1c6      	b.n	8001de8 <__aeabi_dsub+0x588>
 8001a5a:	4c4e      	ldr	r4, [pc, #312]	; (8001b94 <__aeabi_dsub+0x334>)
 8001a5c:	45a4      	cmp	ip, r4
 8001a5e:	d100      	bne.n	8001a62 <__aeabi_dsub+0x202>
 8001a60:	e0f4      	b.n	8001c4c <__aeabi_dsub+0x3ec>
 8001a62:	4694      	mov	ip, r2
 8001a64:	e731      	b.n	80018ca <__aeabi_dsub+0x6a>
 8001a66:	2401      	movs	r4, #1
 8001a68:	4067      	eors	r7, r4
 8001a6a:	46bb      	mov	fp, r7
 8001a6c:	42bd      	cmp	r5, r7
 8001a6e:	d000      	beq.n	8001a72 <__aeabi_dsub+0x212>
 8001a70:	e71c      	b.n	80018ac <__aeabi_dsub+0x4c>
 8001a72:	4c4a      	ldr	r4, [pc, #296]	; (8001b9c <__aeabi_dsub+0x33c>)
 8001a74:	46a4      	mov	ip, r4
 8001a76:	44b4      	add	ip, r6
 8001a78:	4664      	mov	r4, ip
 8001a7a:	2c00      	cmp	r4, #0
 8001a7c:	d100      	bne.n	8001a80 <__aeabi_dsub+0x220>
 8001a7e:	e0cf      	b.n	8001c20 <__aeabi_dsub+0x3c0>
 8001a80:	1b94      	subs	r4, r2, r6
 8001a82:	46a4      	mov	ip, r4
 8001a84:	2e00      	cmp	r6, #0
 8001a86:	d100      	bne.n	8001a8a <__aeabi_dsub+0x22a>
 8001a88:	e15c      	b.n	8001d44 <__aeabi_dsub+0x4e4>
 8001a8a:	4e42      	ldr	r6, [pc, #264]	; (8001b94 <__aeabi_dsub+0x334>)
 8001a8c:	42b2      	cmp	r2, r6
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dsub+0x232>
 8001a90:	e1ec      	b.n	8001e6c <__aeabi_dsub+0x60c>
 8001a92:	2680      	movs	r6, #128	; 0x80
 8001a94:	0436      	lsls	r6, r6, #16
 8001a96:	4333      	orrs	r3, r6
 8001a98:	4664      	mov	r4, ip
 8001a9a:	2c38      	cmp	r4, #56	; 0x38
 8001a9c:	dd00      	ble.n	8001aa0 <__aeabi_dsub+0x240>
 8001a9e:	e1b3      	b.n	8001e08 <__aeabi_dsub+0x5a8>
 8001aa0:	2c1f      	cmp	r4, #31
 8001aa2:	dd00      	ble.n	8001aa6 <__aeabi_dsub+0x246>
 8001aa4:	e238      	b.n	8001f18 <__aeabi_dsub+0x6b8>
 8001aa6:	2620      	movs	r6, #32
 8001aa8:	1b36      	subs	r6, r6, r4
 8001aaa:	001c      	movs	r4, r3
 8001aac:	40b4      	lsls	r4, r6
 8001aae:	464f      	mov	r7, r9
 8001ab0:	46a0      	mov	r8, r4
 8001ab2:	4664      	mov	r4, ip
 8001ab4:	40e7      	lsrs	r7, r4
 8001ab6:	4644      	mov	r4, r8
 8001ab8:	433c      	orrs	r4, r7
 8001aba:	464f      	mov	r7, r9
 8001abc:	40b7      	lsls	r7, r6
 8001abe:	003e      	movs	r6, r7
 8001ac0:	1e77      	subs	r7, r6, #1
 8001ac2:	41be      	sbcs	r6, r7
 8001ac4:	4334      	orrs	r4, r6
 8001ac6:	4666      	mov	r6, ip
 8001ac8:	40f3      	lsrs	r3, r6
 8001aca:	18c9      	adds	r1, r1, r3
 8001acc:	1824      	adds	r4, r4, r0
 8001ace:	4284      	cmp	r4, r0
 8001ad0:	419b      	sbcs	r3, r3
 8001ad2:	425b      	negs	r3, r3
 8001ad4:	4698      	mov	r8, r3
 8001ad6:	0016      	movs	r6, r2
 8001ad8:	4488      	add	r8, r1
 8001ada:	e04e      	b.n	8001b7a <__aeabi_dsub+0x31a>
 8001adc:	4a30      	ldr	r2, [pc, #192]	; (8001ba0 <__aeabi_dsub+0x340>)
 8001ade:	1c74      	adds	r4, r6, #1
 8001ae0:	4214      	tst	r4, r2
 8001ae2:	d000      	beq.n	8001ae6 <__aeabi_dsub+0x286>
 8001ae4:	e0d6      	b.n	8001c94 <__aeabi_dsub+0x434>
 8001ae6:	464a      	mov	r2, r9
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	2e00      	cmp	r6, #0
 8001aec:	d000      	beq.n	8001af0 <__aeabi_dsub+0x290>
 8001aee:	e15b      	b.n	8001da8 <__aeabi_dsub+0x548>
 8001af0:	2a00      	cmp	r2, #0
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dsub+0x296>
 8001af4:	e1a5      	b.n	8001e42 <__aeabi_dsub+0x5e2>
 8001af6:	000a      	movs	r2, r1
 8001af8:	4302      	orrs	r2, r0
 8001afa:	d000      	beq.n	8001afe <__aeabi_dsub+0x29e>
 8001afc:	e1bb      	b.n	8001e76 <__aeabi_dsub+0x616>
 8001afe:	464a      	mov	r2, r9
 8001b00:	0759      	lsls	r1, r3, #29
 8001b02:	08d2      	lsrs	r2, r2, #3
 8001b04:	430a      	orrs	r2, r1
 8001b06:	08db      	lsrs	r3, r3, #3
 8001b08:	e027      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001b0a:	000a      	movs	r2, r1
 8001b0c:	4302      	orrs	r2, r0
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_dsub+0x2b2>
 8001b10:	e174      	b.n	8001dfc <__aeabi_dsub+0x59c>
 8001b12:	0022      	movs	r2, r4
 8001b14:	3a01      	subs	r2, #1
 8001b16:	2c01      	cmp	r4, #1
 8001b18:	d005      	beq.n	8001b26 <__aeabi_dsub+0x2c6>
 8001b1a:	4c1e      	ldr	r4, [pc, #120]	; (8001b94 <__aeabi_dsub+0x334>)
 8001b1c:	45a4      	cmp	ip, r4
 8001b1e:	d100      	bne.n	8001b22 <__aeabi_dsub+0x2c2>
 8001b20:	e094      	b.n	8001c4c <__aeabi_dsub+0x3ec>
 8001b22:	4694      	mov	ip, r2
 8001b24:	e759      	b.n	80019da <__aeabi_dsub+0x17a>
 8001b26:	4448      	add	r0, r9
 8001b28:	4548      	cmp	r0, r9
 8001b2a:	4192      	sbcs	r2, r2
 8001b2c:	185b      	adds	r3, r3, r1
 8001b2e:	4698      	mov	r8, r3
 8001b30:	0004      	movs	r4, r0
 8001b32:	4252      	negs	r2, r2
 8001b34:	4490      	add	r8, r2
 8001b36:	4643      	mov	r3, r8
 8001b38:	2602      	movs	r6, #2
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	d500      	bpl.n	8001b40 <__aeabi_dsub+0x2e0>
 8001b3e:	e0c4      	b.n	8001cca <__aeabi_dsub+0x46a>
 8001b40:	3e01      	subs	r6, #1
 8001b42:	0763      	lsls	r3, r4, #29
 8001b44:	d000      	beq.n	8001b48 <__aeabi_dsub+0x2e8>
 8001b46:	e711      	b.n	800196c <__aeabi_dsub+0x10c>
 8001b48:	4643      	mov	r3, r8
 8001b4a:	46b4      	mov	ip, r6
 8001b4c:	0759      	lsls	r1, r3, #29
 8001b4e:	08e2      	lsrs	r2, r4, #3
 8001b50:	430a      	orrs	r2, r1
 8001b52:	08db      	lsrs	r3, r3, #3
 8001b54:	490f      	ldr	r1, [pc, #60]	; (8001b94 <__aeabi_dsub+0x334>)
 8001b56:	458c      	cmp	ip, r1
 8001b58:	d040      	beq.n	8001bdc <__aeabi_dsub+0x37c>
 8001b5a:	4661      	mov	r1, ip
 8001b5c:	031b      	lsls	r3, r3, #12
 8001b5e:	0549      	lsls	r1, r1, #21
 8001b60:	0b1b      	lsrs	r3, r3, #12
 8001b62:	0d49      	lsrs	r1, r1, #21
 8001b64:	e720      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001b66:	4301      	orrs	r1, r0
 8001b68:	000c      	movs	r4, r1
 8001b6a:	1e61      	subs	r1, r4, #1
 8001b6c:	418c      	sbcs	r4, r1
 8001b6e:	444c      	add	r4, r9
 8001b70:	454c      	cmp	r4, r9
 8001b72:	4192      	sbcs	r2, r2
 8001b74:	4252      	negs	r2, r2
 8001b76:	4690      	mov	r8, r2
 8001b78:	4498      	add	r8, r3
 8001b7a:	4643      	mov	r3, r8
 8001b7c:	021b      	lsls	r3, r3, #8
 8001b7e:	d5e0      	bpl.n	8001b42 <__aeabi_dsub+0x2e2>
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <__aeabi_dsub+0x334>)
 8001b82:	3601      	adds	r6, #1
 8001b84:	429e      	cmp	r6, r3
 8001b86:	d000      	beq.n	8001b8a <__aeabi_dsub+0x32a>
 8001b88:	e09f      	b.n	8001cca <__aeabi_dsub+0x46a>
 8001b8a:	0031      	movs	r1, r6
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	2200      	movs	r2, #0
 8001b90:	e70a      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	000007ff 	.word	0x000007ff
 8001b98:	ff7fffff 	.word	0xff7fffff
 8001b9c:	fffff801 	.word	0xfffff801
 8001ba0:	000007fe 	.word	0x000007fe
 8001ba4:	2a00      	cmp	r2, #0
 8001ba6:	d100      	bne.n	8001baa <__aeabi_dsub+0x34a>
 8001ba8:	e160      	b.n	8001e6c <__aeabi_dsub+0x60c>
 8001baa:	000a      	movs	r2, r1
 8001bac:	4302      	orrs	r2, r0
 8001bae:	d04d      	beq.n	8001c4c <__aeabi_dsub+0x3ec>
 8001bb0:	464a      	mov	r2, r9
 8001bb2:	075c      	lsls	r4, r3, #29
 8001bb4:	08d2      	lsrs	r2, r2, #3
 8001bb6:	4322      	orrs	r2, r4
 8001bb8:	2480      	movs	r4, #128	; 0x80
 8001bba:	08db      	lsrs	r3, r3, #3
 8001bbc:	0324      	lsls	r4, r4, #12
 8001bbe:	4223      	tst	r3, r4
 8001bc0:	d007      	beq.n	8001bd2 <__aeabi_dsub+0x372>
 8001bc2:	08ce      	lsrs	r6, r1, #3
 8001bc4:	4226      	tst	r6, r4
 8001bc6:	d104      	bne.n	8001bd2 <__aeabi_dsub+0x372>
 8001bc8:	465d      	mov	r5, fp
 8001bca:	0033      	movs	r3, r6
 8001bcc:	08c2      	lsrs	r2, r0, #3
 8001bce:	0749      	lsls	r1, r1, #29
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	0f51      	lsrs	r1, r2, #29
 8001bd4:	00d2      	lsls	r2, r2, #3
 8001bd6:	08d2      	lsrs	r2, r2, #3
 8001bd8:	0749      	lsls	r1, r1, #29
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	0011      	movs	r1, r2
 8001bde:	4319      	orrs	r1, r3
 8001be0:	d100      	bne.n	8001be4 <__aeabi_dsub+0x384>
 8001be2:	e1c8      	b.n	8001f76 <__aeabi_dsub+0x716>
 8001be4:	2180      	movs	r1, #128	; 0x80
 8001be6:	0309      	lsls	r1, r1, #12
 8001be8:	430b      	orrs	r3, r1
 8001bea:	031b      	lsls	r3, r3, #12
 8001bec:	49d5      	ldr	r1, [pc, #852]	; (8001f44 <__aeabi_dsub+0x6e4>)
 8001bee:	0b1b      	lsrs	r3, r3, #12
 8001bf0:	e6da      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001bf2:	49d5      	ldr	r1, [pc, #852]	; (8001f48 <__aeabi_dsub+0x6e8>)
 8001bf4:	1ab6      	subs	r6, r6, r2
 8001bf6:	400b      	ands	r3, r1
 8001bf8:	4698      	mov	r8, r3
 8001bfa:	e6b5      	b.n	8001968 <__aeabi_dsub+0x108>
 8001bfc:	0020      	movs	r0, r4
 8001bfe:	f000 fa4d 	bl	800209c <__clzsi2>
 8001c02:	0002      	movs	r2, r0
 8001c04:	3218      	adds	r2, #24
 8001c06:	2a1f      	cmp	r2, #31
 8001c08:	dc00      	bgt.n	8001c0c <__aeabi_dsub+0x3ac>
 8001c0a:	e68f      	b.n	800192c <__aeabi_dsub+0xcc>
 8001c0c:	0023      	movs	r3, r4
 8001c0e:	3808      	subs	r0, #8
 8001c10:	4083      	lsls	r3, r0
 8001c12:	2400      	movs	r4, #0
 8001c14:	e692      	b.n	800193c <__aeabi_dsub+0xdc>
 8001c16:	4308      	orrs	r0, r1
 8001c18:	0002      	movs	r2, r0
 8001c1a:	1e50      	subs	r0, r2, #1
 8001c1c:	4182      	sbcs	r2, r0
 8001c1e:	e66d      	b.n	80018fc <__aeabi_dsub+0x9c>
 8001c20:	4cca      	ldr	r4, [pc, #808]	; (8001f4c <__aeabi_dsub+0x6ec>)
 8001c22:	1c72      	adds	r2, r6, #1
 8001c24:	4222      	tst	r2, r4
 8001c26:	d000      	beq.n	8001c2a <__aeabi_dsub+0x3ca>
 8001c28:	e0ad      	b.n	8001d86 <__aeabi_dsub+0x526>
 8001c2a:	464a      	mov	r2, r9
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	2e00      	cmp	r6, #0
 8001c30:	d1b8      	bne.n	8001ba4 <__aeabi_dsub+0x344>
 8001c32:	2a00      	cmp	r2, #0
 8001c34:	d100      	bne.n	8001c38 <__aeabi_dsub+0x3d8>
 8001c36:	e158      	b.n	8001eea <__aeabi_dsub+0x68a>
 8001c38:	000a      	movs	r2, r1
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	d000      	beq.n	8001c40 <__aeabi_dsub+0x3e0>
 8001c3e:	e159      	b.n	8001ef4 <__aeabi_dsub+0x694>
 8001c40:	464a      	mov	r2, r9
 8001c42:	0759      	lsls	r1, r3, #29
 8001c44:	08d2      	lsrs	r2, r2, #3
 8001c46:	430a      	orrs	r2, r1
 8001c48:	08db      	lsrs	r3, r3, #3
 8001c4a:	e786      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001c4c:	464a      	mov	r2, r9
 8001c4e:	0759      	lsls	r1, r3, #29
 8001c50:	08d2      	lsrs	r2, r2, #3
 8001c52:	430a      	orrs	r2, r1
 8001c54:	08db      	lsrs	r3, r3, #3
 8001c56:	e7c1      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001c58:	4dba      	ldr	r5, [pc, #744]	; (8001f44 <__aeabi_dsub+0x6e4>)
 8001c5a:	42aa      	cmp	r2, r5
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0x400>
 8001c5e:	e11e      	b.n	8001e9e <__aeabi_dsub+0x63e>
 8001c60:	2580      	movs	r5, #128	; 0x80
 8001c62:	042d      	lsls	r5, r5, #16
 8001c64:	432b      	orrs	r3, r5
 8001c66:	4664      	mov	r4, ip
 8001c68:	2c38      	cmp	r4, #56	; 0x38
 8001c6a:	dc5d      	bgt.n	8001d28 <__aeabi_dsub+0x4c8>
 8001c6c:	2c1f      	cmp	r4, #31
 8001c6e:	dd00      	ble.n	8001c72 <__aeabi_dsub+0x412>
 8001c70:	e0d0      	b.n	8001e14 <__aeabi_dsub+0x5b4>
 8001c72:	2520      	movs	r5, #32
 8001c74:	4667      	mov	r7, ip
 8001c76:	1b2d      	subs	r5, r5, r4
 8001c78:	464e      	mov	r6, r9
 8001c7a:	001c      	movs	r4, r3
 8001c7c:	40fe      	lsrs	r6, r7
 8001c7e:	40ac      	lsls	r4, r5
 8001c80:	4334      	orrs	r4, r6
 8001c82:	464e      	mov	r6, r9
 8001c84:	40ae      	lsls	r6, r5
 8001c86:	0035      	movs	r5, r6
 8001c88:	40fb      	lsrs	r3, r7
 8001c8a:	1e6e      	subs	r6, r5, #1
 8001c8c:	41b5      	sbcs	r5, r6
 8001c8e:	1ac9      	subs	r1, r1, r3
 8001c90:	432c      	orrs	r4, r5
 8001c92:	e04e      	b.n	8001d32 <__aeabi_dsub+0x4d2>
 8001c94:	464a      	mov	r2, r9
 8001c96:	1a14      	subs	r4, r2, r0
 8001c98:	45a1      	cmp	r9, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	4252      	negs	r2, r2
 8001c9e:	4690      	mov	r8, r2
 8001ca0:	1a5f      	subs	r7, r3, r1
 8001ca2:	003a      	movs	r2, r7
 8001ca4:	4647      	mov	r7, r8
 8001ca6:	1bd2      	subs	r2, r2, r7
 8001ca8:	4690      	mov	r8, r2
 8001caa:	0212      	lsls	r2, r2, #8
 8001cac:	d500      	bpl.n	8001cb0 <__aeabi_dsub+0x450>
 8001cae:	e08b      	b.n	8001dc8 <__aeabi_dsub+0x568>
 8001cb0:	4642      	mov	r2, r8
 8001cb2:	4322      	orrs	r2, r4
 8001cb4:	d000      	beq.n	8001cb8 <__aeabi_dsub+0x458>
 8001cb6:	e630      	b.n	800191a <__aeabi_dsub+0xba>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	2500      	movs	r5, #0
 8001cbc:	e74d      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001cbe:	464a      	mov	r2, r9
 8001cc0:	0759      	lsls	r1, r3, #29
 8001cc2:	08d2      	lsrs	r2, r2, #3
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	08db      	lsrs	r3, r3, #3
 8001cc8:	e744      	b.n	8001b54 <__aeabi_dsub+0x2f4>
 8001cca:	4642      	mov	r2, r8
 8001ccc:	4b9e      	ldr	r3, [pc, #632]	; (8001f48 <__aeabi_dsub+0x6e8>)
 8001cce:	0861      	lsrs	r1, r4, #1
 8001cd0:	401a      	ands	r2, r3
 8001cd2:	0013      	movs	r3, r2
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	4014      	ands	r4, r2
 8001cd8:	430c      	orrs	r4, r1
 8001cda:	07da      	lsls	r2, r3, #31
 8001cdc:	085b      	lsrs	r3, r3, #1
 8001cde:	4698      	mov	r8, r3
 8001ce0:	4314      	orrs	r4, r2
 8001ce2:	e641      	b.n	8001968 <__aeabi_dsub+0x108>
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	3e1f      	subs	r6, #31
 8001ce8:	40f2      	lsrs	r2, r6
 8001cea:	0016      	movs	r6, r2
 8001cec:	2920      	cmp	r1, #32
 8001cee:	d003      	beq.n	8001cf8 <__aeabi_dsub+0x498>
 8001cf0:	2240      	movs	r2, #64	; 0x40
 8001cf2:	1a51      	subs	r1, r2, r1
 8001cf4:	408b      	lsls	r3, r1
 8001cf6:	431c      	orrs	r4, r3
 8001cf8:	1e62      	subs	r2, r4, #1
 8001cfa:	4194      	sbcs	r4, r2
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	4334      	orrs	r4, r6
 8001d00:	4698      	mov	r8, r3
 8001d02:	2600      	movs	r6, #0
 8001d04:	e71d      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001d06:	000c      	movs	r4, r1
 8001d08:	3a20      	subs	r2, #32
 8001d0a:	40d4      	lsrs	r4, r2
 8001d0c:	0022      	movs	r2, r4
 8001d0e:	4664      	mov	r4, ip
 8001d10:	2c20      	cmp	r4, #32
 8001d12:	d004      	beq.n	8001d1e <__aeabi_dsub+0x4be>
 8001d14:	2740      	movs	r7, #64	; 0x40
 8001d16:	1b3f      	subs	r7, r7, r4
 8001d18:	40b9      	lsls	r1, r7
 8001d1a:	4308      	orrs	r0, r1
 8001d1c:	4680      	mov	r8, r0
 8001d1e:	4644      	mov	r4, r8
 8001d20:	1e61      	subs	r1, r4, #1
 8001d22:	418c      	sbcs	r4, r1
 8001d24:	4322      	orrs	r2, r4
 8001d26:	e5e9      	b.n	80018fc <__aeabi_dsub+0x9c>
 8001d28:	464c      	mov	r4, r9
 8001d2a:	4323      	orrs	r3, r4
 8001d2c:	001c      	movs	r4, r3
 8001d2e:	1e63      	subs	r3, r4, #1
 8001d30:	419c      	sbcs	r4, r3
 8001d32:	1b04      	subs	r4, r0, r4
 8001d34:	42a0      	cmp	r0, r4
 8001d36:	419b      	sbcs	r3, r3
 8001d38:	425b      	negs	r3, r3
 8001d3a:	1acb      	subs	r3, r1, r3
 8001d3c:	4698      	mov	r8, r3
 8001d3e:	465d      	mov	r5, fp
 8001d40:	0016      	movs	r6, r2
 8001d42:	e5e2      	b.n	800190a <__aeabi_dsub+0xaa>
 8001d44:	464e      	mov	r6, r9
 8001d46:	431e      	orrs	r6, r3
 8001d48:	d100      	bne.n	8001d4c <__aeabi_dsub+0x4ec>
 8001d4a:	e0ae      	b.n	8001eaa <__aeabi_dsub+0x64a>
 8001d4c:	1e66      	subs	r6, r4, #1
 8001d4e:	2c01      	cmp	r4, #1
 8001d50:	d100      	bne.n	8001d54 <__aeabi_dsub+0x4f4>
 8001d52:	e0fd      	b.n	8001f50 <__aeabi_dsub+0x6f0>
 8001d54:	4f7b      	ldr	r7, [pc, #492]	; (8001f44 <__aeabi_dsub+0x6e4>)
 8001d56:	42bc      	cmp	r4, r7
 8001d58:	d100      	bne.n	8001d5c <__aeabi_dsub+0x4fc>
 8001d5a:	e107      	b.n	8001f6c <__aeabi_dsub+0x70c>
 8001d5c:	46b4      	mov	ip, r6
 8001d5e:	e69b      	b.n	8001a98 <__aeabi_dsub+0x238>
 8001d60:	4664      	mov	r4, ip
 8001d62:	2220      	movs	r2, #32
 8001d64:	1b12      	subs	r2, r2, r4
 8001d66:	000c      	movs	r4, r1
 8001d68:	4094      	lsls	r4, r2
 8001d6a:	0007      	movs	r7, r0
 8001d6c:	4090      	lsls	r0, r2
 8001d6e:	46a0      	mov	r8, r4
 8001d70:	4664      	mov	r4, ip
 8001d72:	1e42      	subs	r2, r0, #1
 8001d74:	4190      	sbcs	r0, r2
 8001d76:	4662      	mov	r2, ip
 8001d78:	40e7      	lsrs	r7, r4
 8001d7a:	4644      	mov	r4, r8
 8001d7c:	40d1      	lsrs	r1, r2
 8001d7e:	433c      	orrs	r4, r7
 8001d80:	4304      	orrs	r4, r0
 8001d82:	185b      	adds	r3, r3, r1
 8001d84:	e6f3      	b.n	8001b6e <__aeabi_dsub+0x30e>
 8001d86:	4c6f      	ldr	r4, [pc, #444]	; (8001f44 <__aeabi_dsub+0x6e4>)
 8001d88:	42a2      	cmp	r2, r4
 8001d8a:	d100      	bne.n	8001d8e <__aeabi_dsub+0x52e>
 8001d8c:	e0d5      	b.n	8001f3a <__aeabi_dsub+0x6da>
 8001d8e:	4448      	add	r0, r9
 8001d90:	185b      	adds	r3, r3, r1
 8001d92:	4548      	cmp	r0, r9
 8001d94:	4189      	sbcs	r1, r1
 8001d96:	4249      	negs	r1, r1
 8001d98:	185b      	adds	r3, r3, r1
 8001d9a:	07dc      	lsls	r4, r3, #31
 8001d9c:	0840      	lsrs	r0, r0, #1
 8001d9e:	085b      	lsrs	r3, r3, #1
 8001da0:	4698      	mov	r8, r3
 8001da2:	0016      	movs	r6, r2
 8001da4:	4304      	orrs	r4, r0
 8001da6:	e6cc      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001da8:	2a00      	cmp	r2, #0
 8001daa:	d000      	beq.n	8001dae <__aeabi_dsub+0x54e>
 8001dac:	e082      	b.n	8001eb4 <__aeabi_dsub+0x654>
 8001dae:	000a      	movs	r2, r1
 8001db0:	4302      	orrs	r2, r0
 8001db2:	d140      	bne.n	8001e36 <__aeabi_dsub+0x5d6>
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	2500      	movs	r5, #0
 8001db8:	031b      	lsls	r3, r3, #12
 8001dba:	e713      	b.n	8001be4 <__aeabi_dsub+0x384>
 8001dbc:	074b      	lsls	r3, r1, #29
 8001dbe:	08c2      	lsrs	r2, r0, #3
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	465d      	mov	r5, fp
 8001dc4:	08cb      	lsrs	r3, r1, #3
 8001dc6:	e6c5      	b.n	8001b54 <__aeabi_dsub+0x2f4>
 8001dc8:	464a      	mov	r2, r9
 8001dca:	1a84      	subs	r4, r0, r2
 8001dcc:	42a0      	cmp	r0, r4
 8001dce:	4192      	sbcs	r2, r2
 8001dd0:	1acb      	subs	r3, r1, r3
 8001dd2:	4252      	negs	r2, r2
 8001dd4:	1a9b      	subs	r3, r3, r2
 8001dd6:	4698      	mov	r8, r3
 8001dd8:	465d      	mov	r5, fp
 8001dda:	e59e      	b.n	800191a <__aeabi_dsub+0xba>
 8001ddc:	464a      	mov	r2, r9
 8001dde:	0759      	lsls	r1, r3, #29
 8001de0:	08d2      	lsrs	r2, r2, #3
 8001de2:	430a      	orrs	r2, r1
 8001de4:	08db      	lsrs	r3, r3, #3
 8001de6:	e6f9      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001de8:	464a      	mov	r2, r9
 8001dea:	1a14      	subs	r4, r2, r0
 8001dec:	45a1      	cmp	r9, r4
 8001dee:	4192      	sbcs	r2, r2
 8001df0:	1a5b      	subs	r3, r3, r1
 8001df2:	4252      	negs	r2, r2
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	4698      	mov	r8, r3
 8001df8:	2601      	movs	r6, #1
 8001dfa:	e586      	b.n	800190a <__aeabi_dsub+0xaa>
 8001dfc:	464a      	mov	r2, r9
 8001dfe:	0759      	lsls	r1, r3, #29
 8001e00:	08d2      	lsrs	r2, r2, #3
 8001e02:	430a      	orrs	r2, r1
 8001e04:	08db      	lsrs	r3, r3, #3
 8001e06:	e6a5      	b.n	8001b54 <__aeabi_dsub+0x2f4>
 8001e08:	464c      	mov	r4, r9
 8001e0a:	4323      	orrs	r3, r4
 8001e0c:	001c      	movs	r4, r3
 8001e0e:	1e63      	subs	r3, r4, #1
 8001e10:	419c      	sbcs	r4, r3
 8001e12:	e65b      	b.n	8001acc <__aeabi_dsub+0x26c>
 8001e14:	4665      	mov	r5, ip
 8001e16:	001e      	movs	r6, r3
 8001e18:	3d20      	subs	r5, #32
 8001e1a:	40ee      	lsrs	r6, r5
 8001e1c:	2c20      	cmp	r4, #32
 8001e1e:	d005      	beq.n	8001e2c <__aeabi_dsub+0x5cc>
 8001e20:	2540      	movs	r5, #64	; 0x40
 8001e22:	1b2d      	subs	r5, r5, r4
 8001e24:	40ab      	lsls	r3, r5
 8001e26:	464c      	mov	r4, r9
 8001e28:	431c      	orrs	r4, r3
 8001e2a:	46a2      	mov	sl, r4
 8001e2c:	4654      	mov	r4, sl
 8001e2e:	1e63      	subs	r3, r4, #1
 8001e30:	419c      	sbcs	r4, r3
 8001e32:	4334      	orrs	r4, r6
 8001e34:	e77d      	b.n	8001d32 <__aeabi_dsub+0x4d2>
 8001e36:	074b      	lsls	r3, r1, #29
 8001e38:	08c2      	lsrs	r2, r0, #3
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	465d      	mov	r5, fp
 8001e3e:	08cb      	lsrs	r3, r1, #3
 8001e40:	e6cc      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001e42:	000a      	movs	r2, r1
 8001e44:	4302      	orrs	r2, r0
 8001e46:	d100      	bne.n	8001e4a <__aeabi_dsub+0x5ea>
 8001e48:	e736      	b.n	8001cb8 <__aeabi_dsub+0x458>
 8001e4a:	074b      	lsls	r3, r1, #29
 8001e4c:	08c2      	lsrs	r2, r0, #3
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	465d      	mov	r5, fp
 8001e52:	08cb      	lsrs	r3, r1, #3
 8001e54:	e681      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001e56:	464a      	mov	r2, r9
 8001e58:	1a84      	subs	r4, r0, r2
 8001e5a:	42a0      	cmp	r0, r4
 8001e5c:	4192      	sbcs	r2, r2
 8001e5e:	1acb      	subs	r3, r1, r3
 8001e60:	4252      	negs	r2, r2
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	4698      	mov	r8, r3
 8001e66:	465d      	mov	r5, fp
 8001e68:	2601      	movs	r6, #1
 8001e6a:	e54e      	b.n	800190a <__aeabi_dsub+0xaa>
 8001e6c:	074b      	lsls	r3, r1, #29
 8001e6e:	08c2      	lsrs	r2, r0, #3
 8001e70:	431a      	orrs	r2, r3
 8001e72:	08cb      	lsrs	r3, r1, #3
 8001e74:	e6b2      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001e76:	464a      	mov	r2, r9
 8001e78:	1a14      	subs	r4, r2, r0
 8001e7a:	45a1      	cmp	r9, r4
 8001e7c:	4192      	sbcs	r2, r2
 8001e7e:	1a5f      	subs	r7, r3, r1
 8001e80:	4252      	negs	r2, r2
 8001e82:	1aba      	subs	r2, r7, r2
 8001e84:	4690      	mov	r8, r2
 8001e86:	0212      	lsls	r2, r2, #8
 8001e88:	d56b      	bpl.n	8001f62 <__aeabi_dsub+0x702>
 8001e8a:	464a      	mov	r2, r9
 8001e8c:	1a84      	subs	r4, r0, r2
 8001e8e:	42a0      	cmp	r0, r4
 8001e90:	4192      	sbcs	r2, r2
 8001e92:	1acb      	subs	r3, r1, r3
 8001e94:	4252      	negs	r2, r2
 8001e96:	1a9b      	subs	r3, r3, r2
 8001e98:	4698      	mov	r8, r3
 8001e9a:	465d      	mov	r5, fp
 8001e9c:	e564      	b.n	8001968 <__aeabi_dsub+0x108>
 8001e9e:	074b      	lsls	r3, r1, #29
 8001ea0:	08c2      	lsrs	r2, r0, #3
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	465d      	mov	r5, fp
 8001ea6:	08cb      	lsrs	r3, r1, #3
 8001ea8:	e698      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001eaa:	074b      	lsls	r3, r1, #29
 8001eac:	08c2      	lsrs	r2, r0, #3
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	08cb      	lsrs	r3, r1, #3
 8001eb2:	e64f      	b.n	8001b54 <__aeabi_dsub+0x2f4>
 8001eb4:	000a      	movs	r2, r1
 8001eb6:	4302      	orrs	r2, r0
 8001eb8:	d090      	beq.n	8001ddc <__aeabi_dsub+0x57c>
 8001eba:	464a      	mov	r2, r9
 8001ebc:	075c      	lsls	r4, r3, #29
 8001ebe:	08d2      	lsrs	r2, r2, #3
 8001ec0:	4314      	orrs	r4, r2
 8001ec2:	2280      	movs	r2, #128	; 0x80
 8001ec4:	08db      	lsrs	r3, r3, #3
 8001ec6:	0312      	lsls	r2, r2, #12
 8001ec8:	4213      	tst	r3, r2
 8001eca:	d008      	beq.n	8001ede <__aeabi_dsub+0x67e>
 8001ecc:	08ce      	lsrs	r6, r1, #3
 8001ece:	4216      	tst	r6, r2
 8001ed0:	d105      	bne.n	8001ede <__aeabi_dsub+0x67e>
 8001ed2:	08c0      	lsrs	r0, r0, #3
 8001ed4:	0749      	lsls	r1, r1, #29
 8001ed6:	4308      	orrs	r0, r1
 8001ed8:	0004      	movs	r4, r0
 8001eda:	465d      	mov	r5, fp
 8001edc:	0033      	movs	r3, r6
 8001ede:	0f61      	lsrs	r1, r4, #29
 8001ee0:	00e2      	lsls	r2, r4, #3
 8001ee2:	0749      	lsls	r1, r1, #29
 8001ee4:	08d2      	lsrs	r2, r2, #3
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	e678      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001eea:	074b      	lsls	r3, r1, #29
 8001eec:	08c2      	lsrs	r2, r0, #3
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	08cb      	lsrs	r3, r1, #3
 8001ef2:	e632      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001ef4:	4448      	add	r0, r9
 8001ef6:	185b      	adds	r3, r3, r1
 8001ef8:	4548      	cmp	r0, r9
 8001efa:	4192      	sbcs	r2, r2
 8001efc:	4698      	mov	r8, r3
 8001efe:	4252      	negs	r2, r2
 8001f00:	4490      	add	r8, r2
 8001f02:	4643      	mov	r3, r8
 8001f04:	0004      	movs	r4, r0
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	d400      	bmi.n	8001f0c <__aeabi_dsub+0x6ac>
 8001f0a:	e61a      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001f0c:	4642      	mov	r2, r8
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <__aeabi_dsub+0x6e8>)
 8001f10:	2601      	movs	r6, #1
 8001f12:	401a      	ands	r2, r3
 8001f14:	4690      	mov	r8, r2
 8001f16:	e614      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001f18:	4666      	mov	r6, ip
 8001f1a:	001f      	movs	r7, r3
 8001f1c:	3e20      	subs	r6, #32
 8001f1e:	40f7      	lsrs	r7, r6
 8001f20:	2c20      	cmp	r4, #32
 8001f22:	d005      	beq.n	8001f30 <__aeabi_dsub+0x6d0>
 8001f24:	2640      	movs	r6, #64	; 0x40
 8001f26:	1b36      	subs	r6, r6, r4
 8001f28:	40b3      	lsls	r3, r6
 8001f2a:	464c      	mov	r4, r9
 8001f2c:	431c      	orrs	r4, r3
 8001f2e:	46a2      	mov	sl, r4
 8001f30:	4654      	mov	r4, sl
 8001f32:	1e63      	subs	r3, r4, #1
 8001f34:	419c      	sbcs	r4, r3
 8001f36:	433c      	orrs	r4, r7
 8001f38:	e5c8      	b.n	8001acc <__aeabi_dsub+0x26c>
 8001f3a:	0011      	movs	r1, r2
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	2200      	movs	r2, #0
 8001f40:	e532      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	000007ff 	.word	0x000007ff
 8001f48:	ff7fffff 	.word	0xff7fffff
 8001f4c:	000007fe 	.word	0x000007fe
 8001f50:	464a      	mov	r2, r9
 8001f52:	1814      	adds	r4, r2, r0
 8001f54:	4284      	cmp	r4, r0
 8001f56:	4192      	sbcs	r2, r2
 8001f58:	185b      	adds	r3, r3, r1
 8001f5a:	4698      	mov	r8, r3
 8001f5c:	4252      	negs	r2, r2
 8001f5e:	4490      	add	r8, r2
 8001f60:	e5e9      	b.n	8001b36 <__aeabi_dsub+0x2d6>
 8001f62:	4642      	mov	r2, r8
 8001f64:	4322      	orrs	r2, r4
 8001f66:	d100      	bne.n	8001f6a <__aeabi_dsub+0x70a>
 8001f68:	e6a6      	b.n	8001cb8 <__aeabi_dsub+0x458>
 8001f6a:	e5ea      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001f6c:	074b      	lsls	r3, r1, #29
 8001f6e:	08c2      	lsrs	r2, r0, #3
 8001f70:	431a      	orrs	r2, r3
 8001f72:	08cb      	lsrs	r3, r1, #3
 8001f74:	e632      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001f76:	2200      	movs	r2, #0
 8001f78:	4901      	ldr	r1, [pc, #4]	; (8001f80 <__aeabi_dsub+0x720>)
 8001f7a:	0013      	movs	r3, r2
 8001f7c:	e514      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	000007ff 	.word	0x000007ff

08001f84 <__aeabi_d2iz>:
 8001f84:	000a      	movs	r2, r1
 8001f86:	b530      	push	{r4, r5, lr}
 8001f88:	4c13      	ldr	r4, [pc, #76]	; (8001fd8 <__aeabi_d2iz+0x54>)
 8001f8a:	0053      	lsls	r3, r2, #1
 8001f8c:	0309      	lsls	r1, r1, #12
 8001f8e:	0005      	movs	r5, r0
 8001f90:	0b09      	lsrs	r1, r1, #12
 8001f92:	2000      	movs	r0, #0
 8001f94:	0d5b      	lsrs	r3, r3, #21
 8001f96:	0fd2      	lsrs	r2, r2, #31
 8001f98:	42a3      	cmp	r3, r4
 8001f9a:	dd04      	ble.n	8001fa6 <__aeabi_d2iz+0x22>
 8001f9c:	480f      	ldr	r0, [pc, #60]	; (8001fdc <__aeabi_d2iz+0x58>)
 8001f9e:	4283      	cmp	r3, r0
 8001fa0:	dd02      	ble.n	8001fa8 <__aeabi_d2iz+0x24>
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <__aeabi_d2iz+0x5c>)
 8001fa4:	18d0      	adds	r0, r2, r3
 8001fa6:	bd30      	pop	{r4, r5, pc}
 8001fa8:	2080      	movs	r0, #128	; 0x80
 8001faa:	0340      	lsls	r0, r0, #13
 8001fac:	4301      	orrs	r1, r0
 8001fae:	480d      	ldr	r0, [pc, #52]	; (8001fe4 <__aeabi_d2iz+0x60>)
 8001fb0:	1ac0      	subs	r0, r0, r3
 8001fb2:	281f      	cmp	r0, #31
 8001fb4:	dd08      	ble.n	8001fc8 <__aeabi_d2iz+0x44>
 8001fb6:	480c      	ldr	r0, [pc, #48]	; (8001fe8 <__aeabi_d2iz+0x64>)
 8001fb8:	1ac3      	subs	r3, r0, r3
 8001fba:	40d9      	lsrs	r1, r3
 8001fbc:	000b      	movs	r3, r1
 8001fbe:	4258      	negs	r0, r3
 8001fc0:	2a00      	cmp	r2, #0
 8001fc2:	d1f0      	bne.n	8001fa6 <__aeabi_d2iz+0x22>
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	e7ee      	b.n	8001fa6 <__aeabi_d2iz+0x22>
 8001fc8:	4c08      	ldr	r4, [pc, #32]	; (8001fec <__aeabi_d2iz+0x68>)
 8001fca:	40c5      	lsrs	r5, r0
 8001fcc:	46a4      	mov	ip, r4
 8001fce:	4463      	add	r3, ip
 8001fd0:	4099      	lsls	r1, r3
 8001fd2:	000b      	movs	r3, r1
 8001fd4:	432b      	orrs	r3, r5
 8001fd6:	e7f2      	b.n	8001fbe <__aeabi_d2iz+0x3a>
 8001fd8:	000003fe 	.word	0x000003fe
 8001fdc:	0000041d 	.word	0x0000041d
 8001fe0:	7fffffff 	.word	0x7fffffff
 8001fe4:	00000433 	.word	0x00000433
 8001fe8:	00000413 	.word	0x00000413
 8001fec:	fffffbed 	.word	0xfffffbed

08001ff0 <__aeabi_i2d>:
 8001ff0:	b570      	push	{r4, r5, r6, lr}
 8001ff2:	2800      	cmp	r0, #0
 8001ff4:	d016      	beq.n	8002024 <__aeabi_i2d+0x34>
 8001ff6:	17c3      	asrs	r3, r0, #31
 8001ff8:	18c5      	adds	r5, r0, r3
 8001ffa:	405d      	eors	r5, r3
 8001ffc:	0fc4      	lsrs	r4, r0, #31
 8001ffe:	0028      	movs	r0, r5
 8002000:	f000 f84c 	bl	800209c <__clzsi2>
 8002004:	4a11      	ldr	r2, [pc, #68]	; (800204c <__aeabi_i2d+0x5c>)
 8002006:	1a12      	subs	r2, r2, r0
 8002008:	280a      	cmp	r0, #10
 800200a:	dc16      	bgt.n	800203a <__aeabi_i2d+0x4a>
 800200c:	0003      	movs	r3, r0
 800200e:	002e      	movs	r6, r5
 8002010:	3315      	adds	r3, #21
 8002012:	409e      	lsls	r6, r3
 8002014:	230b      	movs	r3, #11
 8002016:	1a18      	subs	r0, r3, r0
 8002018:	40c5      	lsrs	r5, r0
 800201a:	0553      	lsls	r3, r2, #21
 800201c:	032d      	lsls	r5, r5, #12
 800201e:	0b2d      	lsrs	r5, r5, #12
 8002020:	0d5b      	lsrs	r3, r3, #21
 8002022:	e003      	b.n	800202c <__aeabi_i2d+0x3c>
 8002024:	2400      	movs	r4, #0
 8002026:	2300      	movs	r3, #0
 8002028:	2500      	movs	r5, #0
 800202a:	2600      	movs	r6, #0
 800202c:	051b      	lsls	r3, r3, #20
 800202e:	432b      	orrs	r3, r5
 8002030:	07e4      	lsls	r4, r4, #31
 8002032:	4323      	orrs	r3, r4
 8002034:	0030      	movs	r0, r6
 8002036:	0019      	movs	r1, r3
 8002038:	bd70      	pop	{r4, r5, r6, pc}
 800203a:	380b      	subs	r0, #11
 800203c:	4085      	lsls	r5, r0
 800203e:	0553      	lsls	r3, r2, #21
 8002040:	032d      	lsls	r5, r5, #12
 8002042:	2600      	movs	r6, #0
 8002044:	0b2d      	lsrs	r5, r5, #12
 8002046:	0d5b      	lsrs	r3, r3, #21
 8002048:	e7f0      	b.n	800202c <__aeabi_i2d+0x3c>
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	0000041e 	.word	0x0000041e

08002050 <__aeabi_ui2d>:
 8002050:	b510      	push	{r4, lr}
 8002052:	1e04      	subs	r4, r0, #0
 8002054:	d010      	beq.n	8002078 <__aeabi_ui2d+0x28>
 8002056:	f000 f821 	bl	800209c <__clzsi2>
 800205a:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <__aeabi_ui2d+0x48>)
 800205c:	1a1b      	subs	r3, r3, r0
 800205e:	280a      	cmp	r0, #10
 8002060:	dc11      	bgt.n	8002086 <__aeabi_ui2d+0x36>
 8002062:	220b      	movs	r2, #11
 8002064:	0021      	movs	r1, r4
 8002066:	1a12      	subs	r2, r2, r0
 8002068:	40d1      	lsrs	r1, r2
 800206a:	3015      	adds	r0, #21
 800206c:	030a      	lsls	r2, r1, #12
 800206e:	055b      	lsls	r3, r3, #21
 8002070:	4084      	lsls	r4, r0
 8002072:	0b12      	lsrs	r2, r2, #12
 8002074:	0d5b      	lsrs	r3, r3, #21
 8002076:	e001      	b.n	800207c <__aeabi_ui2d+0x2c>
 8002078:	2300      	movs	r3, #0
 800207a:	2200      	movs	r2, #0
 800207c:	051b      	lsls	r3, r3, #20
 800207e:	4313      	orrs	r3, r2
 8002080:	0020      	movs	r0, r4
 8002082:	0019      	movs	r1, r3
 8002084:	bd10      	pop	{r4, pc}
 8002086:	0022      	movs	r2, r4
 8002088:	380b      	subs	r0, #11
 800208a:	4082      	lsls	r2, r0
 800208c:	055b      	lsls	r3, r3, #21
 800208e:	0312      	lsls	r2, r2, #12
 8002090:	2400      	movs	r4, #0
 8002092:	0b12      	lsrs	r2, r2, #12
 8002094:	0d5b      	lsrs	r3, r3, #21
 8002096:	e7f1      	b.n	800207c <__aeabi_ui2d+0x2c>
 8002098:	0000041e 	.word	0x0000041e

0800209c <__clzsi2>:
 800209c:	211c      	movs	r1, #28
 800209e:	2301      	movs	r3, #1
 80020a0:	041b      	lsls	r3, r3, #16
 80020a2:	4298      	cmp	r0, r3
 80020a4:	d301      	bcc.n	80020aa <__clzsi2+0xe>
 80020a6:	0c00      	lsrs	r0, r0, #16
 80020a8:	3910      	subs	r1, #16
 80020aa:	0a1b      	lsrs	r3, r3, #8
 80020ac:	4298      	cmp	r0, r3
 80020ae:	d301      	bcc.n	80020b4 <__clzsi2+0x18>
 80020b0:	0a00      	lsrs	r0, r0, #8
 80020b2:	3908      	subs	r1, #8
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	4298      	cmp	r0, r3
 80020b8:	d301      	bcc.n	80020be <__clzsi2+0x22>
 80020ba:	0900      	lsrs	r0, r0, #4
 80020bc:	3904      	subs	r1, #4
 80020be:	a202      	add	r2, pc, #8	; (adr r2, 80020c8 <__clzsi2+0x2c>)
 80020c0:	5c10      	ldrb	r0, [r2, r0]
 80020c2:	1840      	adds	r0, r0, r1
 80020c4:	4770      	bx	lr
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	02020304 	.word	0x02020304
 80020cc:	01010101 	.word	0x01010101
	...

080020d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	0002      	movs	r2, r0
 80020e0:	1dfb      	adds	r3, r7, #7
 80020e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020e4:	1dfb      	adds	r3, r7, #7
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b7f      	cmp	r3, #127	; 0x7f
 80020ea:	d809      	bhi.n	8002100 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ec:	1dfb      	adds	r3, r7, #7
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	001a      	movs	r2, r3
 80020f2:	231f      	movs	r3, #31
 80020f4:	401a      	ands	r2, r3
 80020f6:	4b04      	ldr	r3, [pc, #16]	; (8002108 <__NVIC_EnableIRQ+0x30>)
 80020f8:	2101      	movs	r1, #1
 80020fa:	4091      	lsls	r1, r2
 80020fc:	000a      	movs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002100:	46c0      	nop			; (mov r8, r8)
 8002102:	46bd      	mov	sp, r7
 8002104:	b002      	add	sp, #8
 8002106:	bd80      	pop	{r7, pc}
 8002108:	e000e100 	.word	0xe000e100

0800210c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	0002      	movs	r2, r0
 8002114:	6039      	str	r1, [r7, #0]
 8002116:	1dfb      	adds	r3, r7, #7
 8002118:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800211a:	1dfb      	adds	r3, r7, #7
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b7f      	cmp	r3, #127	; 0x7f
 8002120:	d828      	bhi.n	8002174 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002122:	4a2f      	ldr	r2, [pc, #188]	; (80021e0 <__NVIC_SetPriority+0xd4>)
 8002124:	1dfb      	adds	r3, r7, #7
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	b25b      	sxtb	r3, r3
 800212a:	089b      	lsrs	r3, r3, #2
 800212c:	33c0      	adds	r3, #192	; 0xc0
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	589b      	ldr	r3, [r3, r2]
 8002132:	1dfa      	adds	r2, r7, #7
 8002134:	7812      	ldrb	r2, [r2, #0]
 8002136:	0011      	movs	r1, r2
 8002138:	2203      	movs	r2, #3
 800213a:	400a      	ands	r2, r1
 800213c:	00d2      	lsls	r2, r2, #3
 800213e:	21ff      	movs	r1, #255	; 0xff
 8002140:	4091      	lsls	r1, r2
 8002142:	000a      	movs	r2, r1
 8002144:	43d2      	mvns	r2, r2
 8002146:	401a      	ands	r2, r3
 8002148:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	019b      	lsls	r3, r3, #6
 800214e:	22ff      	movs	r2, #255	; 0xff
 8002150:	401a      	ands	r2, r3
 8002152:	1dfb      	adds	r3, r7, #7
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	0018      	movs	r0, r3
 8002158:	2303      	movs	r3, #3
 800215a:	4003      	ands	r3, r0
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002160:	481f      	ldr	r0, [pc, #124]	; (80021e0 <__NVIC_SetPriority+0xd4>)
 8002162:	1dfb      	adds	r3, r7, #7
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	b25b      	sxtb	r3, r3
 8002168:	089b      	lsrs	r3, r3, #2
 800216a:	430a      	orrs	r2, r1
 800216c:	33c0      	adds	r3, #192	; 0xc0
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002172:	e031      	b.n	80021d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002174:	4a1b      	ldr	r2, [pc, #108]	; (80021e4 <__NVIC_SetPriority+0xd8>)
 8002176:	1dfb      	adds	r3, r7, #7
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	0019      	movs	r1, r3
 800217c:	230f      	movs	r3, #15
 800217e:	400b      	ands	r3, r1
 8002180:	3b08      	subs	r3, #8
 8002182:	089b      	lsrs	r3, r3, #2
 8002184:	3306      	adds	r3, #6
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	18d3      	adds	r3, r2, r3
 800218a:	3304      	adds	r3, #4
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	1dfa      	adds	r2, r7, #7
 8002190:	7812      	ldrb	r2, [r2, #0]
 8002192:	0011      	movs	r1, r2
 8002194:	2203      	movs	r2, #3
 8002196:	400a      	ands	r2, r1
 8002198:	00d2      	lsls	r2, r2, #3
 800219a:	21ff      	movs	r1, #255	; 0xff
 800219c:	4091      	lsls	r1, r2
 800219e:	000a      	movs	r2, r1
 80021a0:	43d2      	mvns	r2, r2
 80021a2:	401a      	ands	r2, r3
 80021a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	019b      	lsls	r3, r3, #6
 80021aa:	22ff      	movs	r2, #255	; 0xff
 80021ac:	401a      	ands	r2, r3
 80021ae:	1dfb      	adds	r3, r7, #7
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	0018      	movs	r0, r3
 80021b4:	2303      	movs	r3, #3
 80021b6:	4003      	ands	r3, r0
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021bc:	4809      	ldr	r0, [pc, #36]	; (80021e4 <__NVIC_SetPriority+0xd8>)
 80021be:	1dfb      	adds	r3, r7, #7
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	001c      	movs	r4, r3
 80021c4:	230f      	movs	r3, #15
 80021c6:	4023      	ands	r3, r4
 80021c8:	3b08      	subs	r3, #8
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	430a      	orrs	r2, r1
 80021ce:	3306      	adds	r3, #6
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	18c3      	adds	r3, r0, r3
 80021d4:	3304      	adds	r3, #4
 80021d6:	601a      	str	r2, [r3, #0]
}
 80021d8:	46c0      	nop			; (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	b003      	add	sp, #12
 80021de:	bd90      	pop	{r4, r7, pc}
 80021e0:	e000e100 	.word	0xe000e100
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2201      	movs	r2, #1
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	601a      	str	r2, [r3, #0]
}
 80021fc:	46c0      	nop			; (mov r8, r8)
 80021fe:	46bd      	mov	sp, r7
 8002200:	b002      	add	sp, #8
 8002202:	bd80      	pop	{r7, pc}

08002204 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a03      	ldr	r2, [pc, #12]	; (8002220 <LL_USART_DisableFIFO+0x1c>)
 8002212:	401a      	ands	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	601a      	str	r2, [r3, #0]
}
 8002218:	46c0      	nop			; (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	b002      	add	sp, #8
 800221e:	bd80      	pop	{r7, pc}
 8002220:	dfffffff 	.word	0xdfffffff

08002224 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	08da      	lsrs	r2, r3, #3
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	075b      	lsls	r3, r3, #29
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	609a      	str	r2, [r3, #8]
}
 8002240:	46c0      	nop			; (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	b002      	add	sp, #8
 8002246:	bd80      	pop	{r7, pc}

08002248 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	4a05      	ldr	r2, [pc, #20]	; (800226c <LL_USART_SetRXFIFOThreshold+0x24>)
 8002258:	401a      	ands	r2, r3
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	065b      	lsls	r3, r3, #25
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	609a      	str	r2, [r3, #8]
}
 8002264:	46c0      	nop			; (mov r8, r8)
 8002266:	46bd      	mov	sp, r7
 8002268:	b002      	add	sp, #8
 800226a:	bd80      	pop	{r7, pc}
 800226c:	f1ffffff 	.word	0xf1ffffff

08002270 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4a07      	ldr	r2, [pc, #28]	; (800229c <LL_USART_ConfigAsyncMode+0x2c>)
 800227e:	401a      	ands	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	222a      	movs	r2, #42	; 0x2a
 800228a:	4393      	bics	r3, r2
 800228c:	001a      	movs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	609a      	str	r2, [r3, #8]
}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	46bd      	mov	sp, r7
 8002296:	b002      	add	sp, #8
 8002298:	bd80      	pop	{r7, pc}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	ffffb7ff 	.word	0xffffb7ff

080022a0 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69da      	ldr	r2, [r3, #28]
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	039b      	lsls	r3, r3, #14
 80022b0:	401a      	ands	r2, r3
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	039b      	lsls	r3, r3, #14
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d101      	bne.n	80022be <LL_USART_IsActiveFlag_TEACK+0x1e>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <LL_USART_IsActiveFlag_TEACK+0x20>
 80022be:	2300      	movs	r3, #0
}
 80022c0:	0018      	movs	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	b002      	add	sp, #8
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69da      	ldr	r2, [r3, #28]
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	03db      	lsls	r3, r3, #15
 80022d8:	401a      	ands	r2, r3
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	03db      	lsls	r3, r3, #15
 80022de:	429a      	cmp	r2, r3
 80022e0:	d101      	bne.n	80022e6 <LL_USART_IsActiveFlag_REACK+0x1e>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <LL_USART_IsActiveFlag_REACK+0x20>
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	0018      	movs	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b002      	add	sp, #8
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2220      	movs	r2, #32
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	601a      	str	r2, [r3, #0]
}
 8002304:	46c0      	nop			; (mov r8, r8)
 8002306:	46bd      	mov	sp, r7
 8002308:	b002      	add	sp, #8
 800230a:	bd80      	pop	{r7, pc}

0800230c <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	2201      	movs	r2, #1
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	609a      	str	r2, [r3, #8]
}
 8002320:	46c0      	nop			; (mov r8, r8)
 8002322:	46bd      	mov	sp, r7
 8002324:	b002      	add	sp, #8
 8002326:	bd80      	pop	{r7, pc}

08002328 <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	b29b      	uxth	r3, r3
 8002336:	05db      	lsls	r3, r3, #23
 8002338:	0ddb      	lsrs	r3, r3, #23
 800233a:	b29b      	uxth	r3, r3
}
 800233c:	0018      	movs	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	b002      	add	sp, #8
 8002342:	bd80      	pop	{r7, pc}

08002344 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 800234c:	4b04      	ldr	r3, [pc, #16]	; (8002360 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 800234e:	6819      	ldr	r1, [r3, #0]
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	430a      	orrs	r2, r1
 8002356:	601a      	str	r2, [r3, #0]
}
 8002358:	46c0      	nop			; (mov r8, r8)
 800235a:	46bd      	mov	sp, r7
 800235c:	b002      	add	sp, #8
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40010000 	.word	0x40010000

08002364 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	619a      	str	r2, [r3, #24]
}
 8002374:	46c0      	nop			; (mov r8, r8)
 8002376:	46bd      	mov	sp, r7
 8002378:	b002      	add	sp, #8
 800237a:	bd80      	pop	{r7, pc}

0800237c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800238c:	46c0      	nop			; (mov r8, r8)
 800238e:	46bd      	mov	sp, r7
 8002390:	b002      	add	sp, #8
 8002392:	bd80      	pop	{r7, pc}

08002394 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 800239c:	4b07      	ldr	r3, [pc, #28]	; (80023bc <LL_APB1_GRP1_EnableClock+0x28>)
 800239e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <LL_APB1_GRP1_EnableClock+0x28>)
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80023a8:	4b04      	ldr	r3, [pc, #16]	; (80023bc <LL_APB1_GRP1_EnableClock+0x28>)
 80023aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	4013      	ands	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023b2:	68fb      	ldr	r3, [r7, #12]
}
 80023b4:	46c0      	nop			; (mov r8, r8)
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b004      	add	sp, #16
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000

080023c0 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80023c8:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <LL_IOP_GRP1_EnableClock+0x28>)
 80023ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <LL_IOP_GRP1_EnableClock+0x28>)
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <LL_IOP_GRP1_EnableClock+0x28>)
 80023d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	4013      	ands	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023de:	68fb      	ldr	r3, [r7, #12]
}
 80023e0:	46c0      	nop			; (mov r8, r8)
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b004      	add	sp, #16
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000

080023ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 80023f2:	231e      	movs	r3, #30
 80023f4:	18fb      	adds	r3, r7, r3
 80023f6:	2200      	movs	r2, #0
 80023f8:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 80023fa:	231c      	movs	r3, #28
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	2200      	movs	r2, #0
 8002400:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 8002402:	231a      	movs	r3, #26
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	2200      	movs	r2, #0
 8002408:	801a      	strh	r2, [r3, #0]
	uint16_t beep1 = 0x0000;
 800240a:	2318      	movs	r3, #24
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	2200      	movs	r2, #0
 8002410:	801a      	strh	r2, [r3, #0]
	uint16_t beep2 = 0xFFFF;
 8002412:	2316      	movs	r3, #22
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	2201      	movs	r2, #1
 8002418:	4252      	negs	r2, r2
 800241a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800241c:	f003 f94a 	bl	80056b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002420:	f000 f894 	bl	800254c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002424:	4b42      	ldr	r3, [pc, #264]	; (8002530 <main+0x144>)
 8002426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002428:	4b41      	ldr	r3, [pc, #260]	; (8002530 <main+0x144>)
 800242a:	2101      	movs	r1, #1
 800242c:	430a      	orrs	r2, r1
 800242e:	635a      	str	r2, [r3, #52]	; 0x34
 8002430:	4b3f      	ldr	r3, [pc, #252]	; (8002530 <main+0x144>)
 8002432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002434:	2201      	movs	r2, #1
 8002436:	4013      	ands	r3, r2
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800243c:	4b3c      	ldr	r3, [pc, #240]	; (8002530 <main+0x144>)
 800243e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002440:	4b3b      	ldr	r3, [pc, #236]	; (8002530 <main+0x144>)
 8002442:	2102      	movs	r1, #2
 8002444:	430a      	orrs	r2, r1
 8002446:	635a      	str	r2, [r3, #52]	; 0x34
 8002448:	4b39      	ldr	r3, [pc, #228]	; (8002530 <main+0x144>)
 800244a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800244c:	2202      	movs	r2, #2
 800244e:	4013      	ands	r3, r2
 8002450:	607b      	str	r3, [r7, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002454:	4b36      	ldr	r3, [pc, #216]	; (8002530 <main+0x144>)
 8002456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002458:	4b35      	ldr	r3, [pc, #212]	; (8002530 <main+0x144>)
 800245a:	2104      	movs	r1, #4
 800245c:	430a      	orrs	r2, r1
 800245e:	635a      	str	r2, [r3, #52]	; 0x34
 8002460:	4b33      	ldr	r3, [pc, #204]	; (8002530 <main+0x144>)
 8002462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002464:	2204      	movs	r2, #4
 8002466:	4013      	ands	r3, r2
 8002468:	603b      	str	r3, [r7, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800246c:	f000 fbd8 	bl	8002c20 <MX_GPIO_Init>
  MX_DMA_Init();
 8002470:	f000 fba8 	bl	8002bc4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002474:	f000 fac4 	bl	8002a00 <MX_USART2_UART_Init>
  MX_COMP1_Init();
 8002478:	f000 f8e8 	bl	800264c <MX_COMP1_Init>
  MX_TIM1_Init();
 800247c:	f000 f9c6 	bl	800280c <MX_TIM1_Init>
  MX_USART3_Init();
 8002480:	f000 fb5c 	bl	8002b3c <MX_USART3_Init>
  MX_I2S1_Init();
 8002484:	f000 f954 	bl	8002730 <MX_I2S1_Init>
  MX_I2C1_Init();
 8002488:	f000 f912 	bl	80026b0 <MX_I2C1_Init>
  MX_SPI2_Init();
 800248c:	f000 f97a 	bl	8002784 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 8002490:	4b28      	ldr	r3, [pc, #160]	; (8002534 <main+0x148>)
 8002492:	0018      	movs	r0, r3
 8002494:	f003 fbdc 	bl	8005c50 <HAL_COMP_Start>
	HAL_Delay(100);
 8002498:	2064      	movs	r0, #100	; 0x64
 800249a:	f003 f991 	bl	80057c0 <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 800249e:	f001 fcf3 	bl	8003e88 <MEM_Reset>

	weoInit();
 80024a2:	f000 fe05 	bl	80030b0 <weoInit>
	HAL_Delay(1);
 80024a6:	2001      	movs	r0, #1
 80024a8:	f003 f98a 	bl	80057c0 <HAL_Delay>
	weoClear();
 80024ac:	f000 fe6c 	bl	8003188 <weoClear>
	MEM_GetID();
 80024b0:	f001 ff88 	bl	80043c4 <MEM_GetID>
	soundSetup();
 80024b4:	f000 fff0 	bl	8003498 <soundSetup>
	LIS3DHsetup();
 80024b8:	f002 fc48 	bl	8004d4c <LIS3DHsetup>

	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 80024bc:	4b1e      	ldr	r3, [pc, #120]	; (8002538 <main+0x14c>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4b1d      	ldr	r3, [pc, #116]	; (8002538 <main+0x14c>)
 80024c2:	491e      	ldr	r1, [pc, #120]	; (800253c <main+0x150>)
 80024c4:	430a      	orrs	r2, r1
 80024c6:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_USART_EnableIT_RXNE(USART2);
 80024c8:	4b1b      	ldr	r3, [pc, #108]	; (8002538 <main+0x14c>)
 80024ca:	0018      	movs	r0, r3
 80024cc:	f7ff ff10 	bl	80022f0 <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80024d0:	4b19      	ldr	r3, [pc, #100]	; (8002538 <main+0x14c>)
 80024d2:	0018      	movs	r0, r3
 80024d4:	f7ff ff1a 	bl	800230c <LL_USART_EnableIT_ERROR>

	USART2->ICR|=USART_ICR_ORECF;
 80024d8:	4b17      	ldr	r3, [pc, #92]	; (8002538 <main+0x14c>)
 80024da:	6a1a      	ldr	r2, [r3, #32]
 80024dc:	4b16      	ldr	r3, [pc, #88]	; (8002538 <main+0x14c>)
 80024de:	2108      	movs	r1, #8
 80024e0:	430a      	orrs	r2, r1
 80024e2:	621a      	str	r2, [r3, #32]

	I2C_SOUND_ChangePage(0x01);
 80024e4:	2001      	movs	r0, #1
 80024e6:	f000 ff97 	bl	8003418 <I2C_SOUND_ChangePage>
	WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 80024ea:	2100      	movs	r1, #0
 80024ec:	2010      	movs	r0, #16
 80024ee:	f000 ffb1 	bl	8003454 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 80024f2:	2124      	movs	r1, #36	; 0x24
 80024f4:	202e      	movs	r0, #46	; 0x2e
 80024f6:	f000 ffad 	bl	8003454 <WriteReg_I2C_SOUND>
//    squeak_triple();
//    HAL_Delay(500);
//    squeak_long();

	uint8_t x=0x02;
 80024fa:	2315      	movs	r3, #21
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	2202      	movs	r2, #2
 8002500:	701a      	strb	r2, [r3, #0]
	uint8_t y=0x04;
 8002502:	2314      	movs	r3, #20
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	2204      	movs	r2, #4
 8002508:	701a      	strb	r2, [r3, #0]

//	I2C_SOUND_ChangePage(0x01);
//	WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
//	WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available

	squeak_generate();
 800250a:	f002 fa69 	bl	80049e0 <squeak_generate>
//	HAL_Delay(100);
//squeak_triple(signal);
squeak_long(signal);
 800250e:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <main+0x154>)
 8002510:	0018      	movs	r0, r3
 8002512:	f002 fb09 	bl	8004b28 <squeak_long>
	GPIOC->ODR |= 1 << 6;
 8002516:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <main+0x158>)
 8002518:	695a      	ldr	r2, [r3, #20]
 800251a:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <main+0x158>)
 800251c:	2140      	movs	r1, #64	; 0x40
 800251e:	430a      	orrs	r2, r1
 8002520:	615a      	str	r2, [r3, #20]
	while (1) {
//		LIS3DHreadData();
		cmdExecute(cmd2Execute);
 8002522:	4b09      	ldr	r3, [pc, #36]	; (8002548 <main+0x15c>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	0018      	movs	r0, r3
 8002528:	f001 ffae 	bl	8004488 <cmdExecute>
 800252c:	e7f9      	b.n	8002522 <main+0x136>
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	40021000 	.word	0x40021000
 8002534:	20000264 	.word	0x20000264
 8002538:	40004400 	.word	0x40004400
 800253c:	1000100d 	.word	0x1000100d
 8002540:	20000314 	.word	0x20000314
 8002544:	50000800 	.word	0x50000800
 8002548:	2000137b 	.word	0x2000137b

0800254c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b0a1      	sub	sp, #132	; 0x84
 8002550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002552:	2448      	movs	r4, #72	; 0x48
 8002554:	193b      	adds	r3, r7, r4
 8002556:	0018      	movs	r0, r3
 8002558:	2338      	movs	r3, #56	; 0x38
 800255a:	001a      	movs	r2, r3
 800255c:	2100      	movs	r1, #0
 800255e:	f00a fc11 	bl	800cd84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002562:	2338      	movs	r3, #56	; 0x38
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	0018      	movs	r0, r3
 8002568:	2310      	movs	r3, #16
 800256a:	001a      	movs	r2, r3
 800256c:	2100      	movs	r1, #0
 800256e:	f00a fc09 	bl	800cd84 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002572:	1d3b      	adds	r3, r7, #4
 8002574:	0018      	movs	r0, r3
 8002576:	2334      	movs	r3, #52	; 0x34
 8002578:	001a      	movs	r2, r3
 800257a:	2100      	movs	r1, #0
 800257c:	f00a fc02 	bl	800cd84 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002580:	2380      	movs	r3, #128	; 0x80
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	0018      	movs	r0, r3
 8002586:	f005 fe59 	bl	800823c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800258a:	193b      	adds	r3, r7, r4
 800258c:	2202      	movs	r2, #2
 800258e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002590:	193b      	adds	r3, r7, r4
 8002592:	2280      	movs	r2, #128	; 0x80
 8002594:	0052      	lsls	r2, r2, #1
 8002596:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002598:	0021      	movs	r1, r4
 800259a:	187b      	adds	r3, r7, r1
 800259c:	2200      	movs	r2, #0
 800259e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025a0:	187b      	adds	r3, r7, r1
 80025a2:	2240      	movs	r2, #64	; 0x40
 80025a4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025a6:	187b      	adds	r3, r7, r1
 80025a8:	2202      	movs	r2, #2
 80025aa:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025ac:	187b      	adds	r3, r7, r1
 80025ae:	2202      	movs	r2, #2
 80025b0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80025b2:	187b      	adds	r3, r7, r1
 80025b4:	2200      	movs	r2, #0
 80025b6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80025b8:	187b      	adds	r3, r7, r1
 80025ba:	2208      	movs	r2, #8
 80025bc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025be:	187b      	adds	r3, r7, r1
 80025c0:	2280      	movs	r2, #128	; 0x80
 80025c2:	0292      	lsls	r2, r2, #10
 80025c4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80025c6:	187b      	adds	r3, r7, r1
 80025c8:	2280      	movs	r2, #128	; 0x80
 80025ca:	0492      	lsls	r2, r2, #18
 80025cc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80025ce:	187b      	adds	r3, r7, r1
 80025d0:	2280      	movs	r2, #128	; 0x80
 80025d2:	0592      	lsls	r2, r2, #22
 80025d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025d6:	187b      	adds	r3, r7, r1
 80025d8:	0018      	movs	r0, r3
 80025da:	f005 fe7b 	bl	80082d4 <HAL_RCC_OscConfig>
 80025de:	1e03      	subs	r3, r0, #0
 80025e0:	d001      	beq.n	80025e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80025e2:	f002 fbe5 	bl	8004db0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025e6:	2138      	movs	r1, #56	; 0x38
 80025e8:	187b      	adds	r3, r7, r1
 80025ea:	2207      	movs	r2, #7
 80025ec:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025ee:	187b      	adds	r3, r7, r1
 80025f0:	2202      	movs	r2, #2
 80025f2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025f4:	187b      	adds	r3, r7, r1
 80025f6:	2200      	movs	r2, #0
 80025f8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025fa:	187b      	adds	r3, r7, r1
 80025fc:	2200      	movs	r2, #0
 80025fe:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002600:	187b      	adds	r3, r7, r1
 8002602:	2102      	movs	r1, #2
 8002604:	0018      	movs	r0, r3
 8002606:	f006 f985 	bl	8008914 <HAL_RCC_ClockConfig>
 800260a:	1e03      	subs	r3, r0, #0
 800260c:	d001      	beq.n	8002612 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800260e:	f002 fbcf 	bl	8004db0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	4a0c      	ldr	r2, [pc, #48]	; (8002648 <SystemClock_Config+0xfc>)
 8002616:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2S1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002618:	1d3b      	adds	r3, r7, #4
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	2200      	movs	r2, #0
 8002628:	615a      	str	r2, [r3, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800262a:	1d3b      	adds	r3, r7, #4
 800262c:	2200      	movs	r2, #0
 800262e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002630:	1d3b      	adds	r3, r7, #4
 8002632:	0018      	movs	r0, r3
 8002634:	f006 fb18 	bl	8008c68 <HAL_RCCEx_PeriphCLKConfig>
 8002638:	1e03      	subs	r3, r0, #0
 800263a:	d001      	beq.n	8002640 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800263c:	f002 fbb8 	bl	8004db0 <Error_Handler>
  }
}
 8002640:	46c0      	nop			; (mov r8, r8)
 8002642:	46bd      	mov	sp, r7
 8002644:	b021      	add	sp, #132	; 0x84
 8002646:	bd90      	pop	{r4, r7, pc}
 8002648:	00200822 	.word	0x00200822

0800264c <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8002650:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <MX_COMP1_Init+0x5c>)
 8002652:	4a16      	ldr	r2, [pc, #88]	; (80026ac <MX_COMP1_Init+0x60>)
 8002654:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8002656:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <MX_COMP1_Init+0x5c>)
 8002658:	2280      	movs	r2, #128	; 0x80
 800265a:	0052      	lsls	r2, r2, #1
 800265c:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 800265e:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <MX_COMP1_Init+0x5c>)
 8002660:	2230      	movs	r2, #48	; 0x30
 8002662:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002664:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <MX_COMP1_Init+0x5c>)
 8002666:	2200      	movs	r2, #0
 8002668:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 800266a:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <MX_COMP1_Init+0x5c>)
 800266c:	2200      	movs	r2, #0
 800266e:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002670:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <MX_COMP1_Init+0x5c>)
 8002672:	2200      	movs	r2, #0
 8002674:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <MX_COMP1_Init+0x5c>)
 8002678:	2280      	movs	r2, #128	; 0x80
 800267a:	0392      	lsls	r2, r2, #14
 800267c:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800267e:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <MX_COMP1_Init+0x5c>)
 8002680:	2200      	movs	r2, #0
 8002682:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002684:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <MX_COMP1_Init+0x5c>)
 8002686:	2200      	movs	r2, #0
 8002688:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 800268a:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <MX_COMP1_Init+0x5c>)
 800268c:	2212      	movs	r2, #18
 800268e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8002690:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <MX_COMP1_Init+0x5c>)
 8002692:	0018      	movs	r0, r3
 8002694:	f003 f97a 	bl	800598c <HAL_COMP_Init>
 8002698:	1e03      	subs	r3, r0, #0
 800269a:	d001      	beq.n	80026a0 <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 800269c:	f002 fb88 	bl	8004db0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80026a0:	46c0      	nop			; (mov r8, r8)
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	20000264 	.word	0x20000264
 80026ac:	40010200 	.word	0x40010200

080026b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026b4:	4b1b      	ldr	r3, [pc, #108]	; (8002724 <MX_I2C1_Init+0x74>)
 80026b6:	4a1c      	ldr	r2, [pc, #112]	; (8002728 <MX_I2C1_Init+0x78>)
 80026b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 80026ba:	4b1a      	ldr	r3, [pc, #104]	; (8002724 <MX_I2C1_Init+0x74>)
 80026bc:	4a1b      	ldr	r2, [pc, #108]	; (800272c <MX_I2C1_Init+0x7c>)
 80026be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80026c0:	4b18      	ldr	r3, [pc, #96]	; (8002724 <MX_I2C1_Init+0x74>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026c6:	4b17      	ldr	r3, [pc, #92]	; (8002724 <MX_I2C1_Init+0x74>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026cc:	4b15      	ldr	r3, [pc, #84]	; (8002724 <MX_I2C1_Init+0x74>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80026d2:	4b14      	ldr	r3, [pc, #80]	; (8002724 <MX_I2C1_Init+0x74>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026d8:	4b12      	ldr	r3, [pc, #72]	; (8002724 <MX_I2C1_Init+0x74>)
 80026da:	2200      	movs	r2, #0
 80026dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026de:	4b11      	ldr	r3, [pc, #68]	; (8002724 <MX_I2C1_Init+0x74>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026e4:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <MX_I2C1_Init+0x74>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026ea:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <MX_I2C1_Init+0x74>)
 80026ec:	0018      	movs	r0, r3
 80026ee:	f004 f80b 	bl	8006708 <HAL_I2C_Init>
 80026f2:	1e03      	subs	r3, r0, #0
 80026f4:	d001      	beq.n	80026fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80026f6:	f002 fb5b 	bl	8004db0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026fa:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <MX_I2C1_Init+0x74>)
 80026fc:	2100      	movs	r1, #0
 80026fe:	0018      	movs	r0, r3
 8002700:	f005 f8f6 	bl	80078f0 <HAL_I2CEx_ConfigAnalogFilter>
 8002704:	1e03      	subs	r3, r0, #0
 8002706:	d001      	beq.n	800270c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002708:	f002 fb52 	bl	8004db0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800270c:	4b05      	ldr	r3, [pc, #20]	; (8002724 <MX_I2C1_Init+0x74>)
 800270e:	2100      	movs	r1, #0
 8002710:	0018      	movs	r0, r3
 8002712:	f005 f939 	bl	8007988 <HAL_I2CEx_ConfigDigitalFilter>
 8002716:	1e03      	subs	r3, r0, #0
 8002718:	d001      	beq.n	800271e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800271a:	f002 fb49 	bl	8004db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20000144 	.word	0x20000144
 8002728:	40005400 	.word	0x40005400
 800272c:	1094102c 	.word	0x1094102c

08002730 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8002734:	4b11      	ldr	r3, [pc, #68]	; (800277c <MX_I2S1_Init+0x4c>)
 8002736:	4a12      	ldr	r2, [pc, #72]	; (8002780 <MX_I2S1_Init+0x50>)
 8002738:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800273a:	4b10      	ldr	r3, [pc, #64]	; (800277c <MX_I2S1_Init+0x4c>)
 800273c:	2280      	movs	r2, #128	; 0x80
 800273e:	0092      	lsls	r2, r2, #2
 8002740:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8002742:	4b0e      	ldr	r3, [pc, #56]	; (800277c <MX_I2S1_Init+0x4c>)
 8002744:	2200      	movs	r2, #0
 8002746:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <MX_I2S1_Init+0x4c>)
 800274a:	2200      	movs	r2, #0
 800274c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800274e:	4b0b      	ldr	r3, [pc, #44]	; (800277c <MX_I2S1_Init+0x4c>)
 8002750:	2280      	movs	r2, #128	; 0x80
 8002752:	0092      	lsls	r2, r2, #2
 8002754:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <MX_I2S1_Init+0x4c>)
 8002758:	22fa      	movs	r2, #250	; 0xfa
 800275a:	0192      	lsls	r2, r2, #6
 800275c:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800275e:	4b07      	ldr	r3, [pc, #28]	; (800277c <MX_I2S1_Init+0x4c>)
 8002760:	2200      	movs	r2, #0
 8002762:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <MX_I2S1_Init+0x4c>)
 8002766:	0018      	movs	r0, r3
 8002768:	f005 f95a 	bl	8007a20 <HAL_I2S_Init>
 800276c:	1e03      	subs	r3, r0, #0
 800276e:	d001      	beq.n	8002774 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 8002770:	f002 fb1e 	bl	8004db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8002774:	46c0      	nop			; (mov r8, r8)
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	20001380 	.word	0x20001380
 8002780:	40013000 	.word	0x40013000

08002784 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002788:	4b1e      	ldr	r3, [pc, #120]	; (8002804 <MX_SPI2_Init+0x80>)
 800278a:	2208      	movs	r2, #8
 800278c:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800278e:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <MX_SPI2_Init+0x80>)
 8002790:	4a1d      	ldr	r2, [pc, #116]	; (8002808 <MX_SPI2_Init+0x84>)
 8002792:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002794:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <MX_SPI2_Init+0x80>)
 8002796:	2282      	movs	r2, #130	; 0x82
 8002798:	0052      	lsls	r2, r2, #1
 800279a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800279c:	4b19      	ldr	r3, [pc, #100]	; (8002804 <MX_SPI2_Init+0x80>)
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80027a2:	4b18      	ldr	r3, [pc, #96]	; (8002804 <MX_SPI2_Init+0x80>)
 80027a4:	22e0      	movs	r2, #224	; 0xe0
 80027a6:	00d2      	lsls	r2, r2, #3
 80027a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027aa:	4b16      	ldr	r3, [pc, #88]	; (8002804 <MX_SPI2_Init+0x80>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027b0:	4b14      	ldr	r3, [pc, #80]	; (8002804 <MX_SPI2_Init+0x80>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80027b6:	4b13      	ldr	r3, [pc, #76]	; (8002804 <MX_SPI2_Init+0x80>)
 80027b8:	2280      	movs	r2, #128	; 0x80
 80027ba:	0092      	lsls	r2, r2, #2
 80027bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80027be:	4b11      	ldr	r3, [pc, #68]	; (8002804 <MX_SPI2_Init+0x80>)
 80027c0:	2210      	movs	r2, #16
 80027c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027c4:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <MX_SPI2_Init+0x80>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80027ca:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <MX_SPI2_Init+0x80>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027d0:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <MX_SPI2_Init+0x80>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80027d6:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <MX_SPI2_Init+0x80>)
 80027d8:	2207      	movs	r2, #7
 80027da:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80027dc:	4b09      	ldr	r3, [pc, #36]	; (8002804 <MX_SPI2_Init+0x80>)
 80027de:	2200      	movs	r2, #0
 80027e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80027e2:	4b08      	ldr	r3, [pc, #32]	; (8002804 <MX_SPI2_Init+0x80>)
 80027e4:	2208      	movs	r2, #8
 80027e6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80027e8:	4b06      	ldr	r3, [pc, #24]	; (8002804 <MX_SPI2_Init+0x80>)
 80027ea:	0018      	movs	r0, r3
 80027ec:	f006 ff3c 	bl	8009668 <HAL_SPI_Init>
 80027f0:	1e03      	subs	r3, r0, #0
 80027f2:	d001      	beq.n	80027f8 <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 80027f4:	f002 fadc 	bl	8004db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80027f8:	4b02      	ldr	r3, [pc, #8]	; (8002804 <MX_SPI2_Init+0x80>)
 80027fa:	2208      	movs	r2, #8
 80027fc:	61da      	str	r2, [r3, #28]
  /* USER CODE END SPI2_Init 2 */

}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	200000b4 	.word	0x200000b4
 8002808:	40003800 	.word	0x40003800

0800280c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b09e      	sub	sp, #120	; 0x78
 8002810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002812:	2368      	movs	r3, #104	; 0x68
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	0018      	movs	r0, r3
 8002818:	2310      	movs	r3, #16
 800281a:	001a      	movs	r2, r3
 800281c:	2100      	movs	r1, #0
 800281e:	f00a fab1 	bl	800cd84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002822:	235c      	movs	r3, #92	; 0x5c
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	0018      	movs	r0, r3
 8002828:	230c      	movs	r3, #12
 800282a:	001a      	movs	r2, r3
 800282c:	2100      	movs	r1, #0
 800282e:	f00a faa9 	bl	800cd84 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8002832:	2350      	movs	r3, #80	; 0x50
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	0018      	movs	r0, r3
 8002838:	230c      	movs	r3, #12
 800283a:	001a      	movs	r2, r3
 800283c:	2100      	movs	r1, #0
 800283e:	f00a faa1 	bl	800cd84 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002842:	2334      	movs	r3, #52	; 0x34
 8002844:	18fb      	adds	r3, r7, r3
 8002846:	0018      	movs	r0, r3
 8002848:	231c      	movs	r3, #28
 800284a:	001a      	movs	r2, r3
 800284c:	2100      	movs	r1, #0
 800284e:	f00a fa99 	bl	800cd84 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002852:	003b      	movs	r3, r7
 8002854:	0018      	movs	r0, r3
 8002856:	2334      	movs	r3, #52	; 0x34
 8002858:	001a      	movs	r2, r3
 800285a:	2100      	movs	r1, #0
 800285c:	f00a fa92 	bl	800cd84 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002860:	4b64      	ldr	r3, [pc, #400]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 8002862:	4a65      	ldr	r2, [pc, #404]	; (80029f8 <MX_TIM1_Init+0x1ec>)
 8002864:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002866:	4b63      	ldr	r3, [pc, #396]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 8002868:	2200      	movs	r2, #0
 800286a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800286c:	4b61      	ldr	r3, [pc, #388]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 8002872:	4b60      	ldr	r3, [pc, #384]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 8002874:	4a61      	ldr	r2, [pc, #388]	; (80029fc <MX_TIM1_Init+0x1f0>)
 8002876:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002878:	4b5e      	ldr	r3, [pc, #376]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 800287a:	2200      	movs	r2, #0
 800287c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800287e:	4b5d      	ldr	r3, [pc, #372]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 8002880:	2200      	movs	r2, #0
 8002882:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002884:	4b5b      	ldr	r3, [pc, #364]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 8002886:	2280      	movs	r2, #128	; 0x80
 8002888:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800288a:	4b5a      	ldr	r3, [pc, #360]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 800288c:	0018      	movs	r0, r3
 800288e:	f007 fefd 	bl	800a68c <HAL_TIM_Base_Init>
 8002892:	1e03      	subs	r3, r0, #0
 8002894:	d001      	beq.n	800289a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8002896:	f002 fa8b 	bl	8004db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800289a:	2168      	movs	r1, #104	; 0x68
 800289c:	187b      	adds	r3, r7, r1
 800289e:	2280      	movs	r2, #128	; 0x80
 80028a0:	0152      	lsls	r2, r2, #5
 80028a2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80028a4:	187a      	adds	r2, r7, r1
 80028a6:	4b53      	ldr	r3, [pc, #332]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 80028a8:	0011      	movs	r1, r2
 80028aa:	0018      	movs	r0, r3
 80028ac:	f008 f986 	bl	800abbc <HAL_TIM_ConfigClockSource>
 80028b0:	1e03      	subs	r3, r0, #0
 80028b2:	d001      	beq.n	80028b8 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80028b4:	f002 fa7c 	bl	8004db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80028b8:	4b4e      	ldr	r3, [pc, #312]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 80028ba:	0018      	movs	r0, r3
 80028bc:	f007 ff3e 	bl	800a73c <HAL_TIM_PWM_Init>
 80028c0:	1e03      	subs	r3, r0, #0
 80028c2:	d001      	beq.n	80028c8 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80028c4:	f002 fa74 	bl	8004db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028c8:	215c      	movs	r1, #92	; 0x5c
 80028ca:	187b      	adds	r3, r7, r1
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80028d0:	187b      	adds	r3, r7, r1
 80028d2:	2200      	movs	r2, #0
 80028d4:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d6:	187b      	adds	r3, r7, r1
 80028d8:	2200      	movs	r2, #0
 80028da:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028dc:	187a      	adds	r2, r7, r1
 80028de:	4b45      	ldr	r3, [pc, #276]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 80028e0:	0011      	movs	r1, r2
 80028e2:	0018      	movs	r0, r3
 80028e4:	f008 fe3a 	bl	800b55c <HAL_TIMEx_MasterConfigSynchronization>
 80028e8:	1e03      	subs	r3, r0, #0
 80028ea:	d001      	beq.n	80028f0 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 80028ec:	f002 fa60 	bl	8004db0 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80028f0:	2150      	movs	r1, #80	; 0x50
 80028f2:	187b      	adds	r3, r7, r1
 80028f4:	2202      	movs	r2, #2
 80028f6:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80028f8:	187b      	adds	r3, r7, r1
 80028fa:	2201      	movs	r2, #1
 80028fc:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80028fe:	187b      	adds	r3, r7, r1
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8002904:	187a      	adds	r2, r7, r1
 8002906:	4b3b      	ldr	r3, [pc, #236]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 8002908:	2101      	movs	r1, #1
 800290a:	0018      	movs	r0, r3
 800290c:	f008 ff3a 	bl	800b784 <HAL_TIMEx_ConfigBreakInput>
 8002910:	1e03      	subs	r3, r0, #0
 8002912:	d001      	beq.n	8002918 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8002914:	f002 fa4c 	bl	8004db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002918:	2134      	movs	r1, #52	; 0x34
 800291a:	187b      	adds	r3, r7, r1
 800291c:	2260      	movs	r2, #96	; 0x60
 800291e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 8002920:	187b      	adds	r3, r7, r1
 8002922:	2296      	movs	r2, #150	; 0x96
 8002924:	0052      	lsls	r2, r2, #1
 8002926:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002928:	187b      	adds	r3, r7, r1
 800292a:	2200      	movs	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800292e:	187b      	adds	r3, r7, r1
 8002930:	2200      	movs	r2, #0
 8002932:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002934:	187b      	adds	r3, r7, r1
 8002936:	2204      	movs	r2, #4
 8002938:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800293a:	187b      	adds	r3, r7, r1
 800293c:	2200      	movs	r2, #0
 800293e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002940:	187b      	adds	r3, r7, r1
 8002942:	2200      	movs	r2, #0
 8002944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002946:	1879      	adds	r1, r7, r1
 8002948:	4b2a      	ldr	r3, [pc, #168]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 800294a:	2200      	movs	r2, #0
 800294c:	0018      	movs	r0, r3
 800294e:	f008 f83f 	bl	800a9d0 <HAL_TIM_PWM_ConfigChannel>
 8002952:	1e03      	subs	r3, r0, #0
 8002954:	d001      	beq.n	800295a <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8002956:	f002 fa2b 	bl	8004db0 <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 800295a:	2134      	movs	r1, #52	; 0x34
 800295c:	187b      	adds	r3, r7, r1
 800295e:	2232      	movs	r2, #50	; 0x32
 8002960:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8002962:	1879      	adds	r1, r7, r1
 8002964:	4b23      	ldr	r3, [pc, #140]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 8002966:	2210      	movs	r2, #16
 8002968:	0018      	movs	r0, r3
 800296a:	f008 f831 	bl	800a9d0 <HAL_TIM_PWM_ConfigChannel>
 800296e:	1e03      	subs	r3, r0, #0
 8002970:	d001      	beq.n	8002976 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8002972:	f002 fa1d 	bl	8004db0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8002976:	003b      	movs	r3, r7
 8002978:	2280      	movs	r2, #128	; 0x80
 800297a:	0112      	lsls	r2, r2, #4
 800297c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800297e:	003b      	movs	r3, r7
 8002980:	2280      	movs	r2, #128	; 0x80
 8002982:	00d2      	lsls	r2, r2, #3
 8002984:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002986:	003b      	movs	r3, r7
 8002988:	2200      	movs	r2, #0
 800298a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800298c:	003b      	movs	r3, r7
 800298e:	2200      	movs	r2, #0
 8002990:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8002992:	003b      	movs	r3, r7
 8002994:	2280      	movs	r2, #128	; 0x80
 8002996:	0152      	lsls	r2, r2, #5
 8002998:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800299a:	003b      	movs	r3, r7
 800299c:	2280      	movs	r2, #128	; 0x80
 800299e:	0192      	lsls	r2, r2, #6
 80029a0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 80029a2:	003b      	movs	r3, r7
 80029a4:	220a      	movs	r2, #10
 80029a6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80029a8:	003b      	movs	r3, r7
 80029aa:	2200      	movs	r2, #0
 80029ac:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80029ae:	003b      	movs	r3, r7
 80029b0:	2200      	movs	r2, #0
 80029b2:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80029b4:	003b      	movs	r3, r7
 80029b6:	2280      	movs	r2, #128	; 0x80
 80029b8:	0492      	lsls	r2, r2, #18
 80029ba:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80029bc:	003b      	movs	r3, r7
 80029be:	2200      	movs	r2, #0
 80029c0:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80029c2:	003b      	movs	r3, r7
 80029c4:	2200      	movs	r2, #0
 80029c6:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 80029c8:	003b      	movs	r3, r7
 80029ca:	2280      	movs	r2, #128	; 0x80
 80029cc:	01d2      	lsls	r2, r2, #7
 80029ce:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80029d0:	003a      	movs	r2, r7
 80029d2:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 80029d4:	0011      	movs	r1, r2
 80029d6:	0018      	movs	r0, r3
 80029d8:	f008 fe2e 	bl	800b638 <HAL_TIMEx_ConfigBreakDeadTime>
 80029dc:	1e03      	subs	r3, r0, #0
 80029de:	d001      	beq.n	80029e4 <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 80029e0:	f002 f9e6 	bl	8004db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80029e4:	4b03      	ldr	r3, [pc, #12]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 80029e6:	0018      	movs	r0, r3
 80029e8:	f002 fc28 	bl	800523c <HAL_TIM_MspPostInit>

}
 80029ec:	46c0      	nop			; (mov r8, r8)
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b01e      	add	sp, #120	; 0x78
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20001320 	.word	0x20001320
 80029f8:	40012c00 	.word	0x40012c00
 80029fc:	0000027f 	.word	0x0000027f

08002a00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a00:	b590      	push	{r4, r7, lr}
 8002a02:	b08f      	sub	sp, #60	; 0x3c
 8002a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002a06:	2418      	movs	r4, #24
 8002a08:	193b      	adds	r3, r7, r4
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	2320      	movs	r3, #32
 8002a0e:	001a      	movs	r2, r3
 8002a10:	2100      	movs	r1, #0
 8002a12:	f00a f9b7 	bl	800cd84 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a16:	003b      	movs	r3, r7
 8002a18:	0018      	movs	r0, r3
 8002a1a:	2318      	movs	r3, #24
 8002a1c:	001a      	movs	r2, r3
 8002a1e:	2100      	movs	r1, #0
 8002a20:	f00a f9b0 	bl	800cd84 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002a24:	2380      	movs	r3, #128	; 0x80
 8002a26:	029b      	lsls	r3, r3, #10
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f7ff fcb3 	bl	8002394 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8002a2e:	2001      	movs	r0, #1
 8002a30:	f7ff fcc6 	bl	80023c0 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8002a34:	003b      	movs	r3, r7
 8002a36:	2204      	movs	r2, #4
 8002a38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a3a:	003b      	movs	r3, r7
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002a40:	003b      	movs	r3, r7
 8002a42:	2200      	movs	r2, #0
 8002a44:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a46:	003b      	movs	r3, r7
 8002a48:	2200      	movs	r2, #0
 8002a4a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a4c:	003b      	movs	r3, r7
 8002a4e:	2200      	movs	r2, #0
 8002a50:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002a52:	003b      	movs	r3, r7
 8002a54:	2201      	movs	r2, #1
 8002a56:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a58:	003a      	movs	r2, r7
 8002a5a:	23a0      	movs	r3, #160	; 0xa0
 8002a5c:	05db      	lsls	r3, r3, #23
 8002a5e:	0011      	movs	r1, r2
 8002a60:	0018      	movs	r0, r3
 8002a62:	f009 fe11 	bl	800c688 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8002a66:	003b      	movs	r3, r7
 8002a68:	2208      	movs	r2, #8
 8002a6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a6c:	003b      	movs	r3, r7
 8002a6e:	2202      	movs	r2, #2
 8002a70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002a72:	003b      	movs	r3, r7
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a78:	003b      	movs	r3, r7
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a7e:	003b      	movs	r3, r7
 8002a80:	2200      	movs	r2, #0
 8002a82:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002a84:	003b      	movs	r3, r7
 8002a86:	2201      	movs	r2, #1
 8002a88:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8a:	003a      	movs	r2, r7
 8002a8c:	23a0      	movs	r3, #160	; 0xa0
 8002a8e:	05db      	lsls	r3, r3, #23
 8002a90:	0011      	movs	r1, r2
 8002a92:	0018      	movs	r0, r3
 8002a94:	f009 fdf8 	bl	800c688 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8002a98:	2100      	movs	r1, #0
 8002a9a:	201c      	movs	r0, #28
 8002a9c:	f7ff fb36 	bl	800210c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8002aa0:	201c      	movs	r0, #28
 8002aa2:	f7ff fb19 	bl	80020d8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8002aa6:	193b      	adds	r3, r7, r4
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8002aac:	193b      	adds	r3, r7, r4
 8002aae:	22e1      	movs	r2, #225	; 0xe1
 8002ab0:	0212      	lsls	r2, r2, #8
 8002ab2:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8002ab4:	193b      	adds	r3, r7, r4
 8002ab6:	2280      	movs	r2, #128	; 0x80
 8002ab8:	0152      	lsls	r2, r2, #5
 8002aba:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002abc:	0021      	movs	r1, r4
 8002abe:	187b      	adds	r3, r7, r1
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002ac4:	187b      	adds	r3, r7, r1
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002aca:	187b      	adds	r3, r7, r1
 8002acc:	220c      	movs	r2, #12
 8002ace:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002ad0:	187b      	adds	r3, r7, r1
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002ad6:	187b      	adds	r3, r7, r1
 8002ad8:	2200      	movs	r2, #0
 8002ada:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8002adc:	187b      	adds	r3, r7, r1
 8002ade:	4a16      	ldr	r2, [pc, #88]	; (8002b38 <MX_USART2_UART_Init+0x138>)
 8002ae0:	0019      	movs	r1, r3
 8002ae2:	0010      	movs	r0, r2
 8002ae4:	f00a f89c 	bl	800cc20 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8002ae8:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <MX_USART2_UART_Init+0x138>)
 8002aea:	2100      	movs	r1, #0
 8002aec:	0018      	movs	r0, r3
 8002aee:	f7ff fb99 	bl	8002224 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8002af2:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <MX_USART2_UART_Init+0x138>)
 8002af4:	2100      	movs	r1, #0
 8002af6:	0018      	movs	r0, r3
 8002af8:	f7ff fba6 	bl	8002248 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8002afc:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <MX_USART2_UART_Init+0x138>)
 8002afe:	0018      	movs	r0, r3
 8002b00:	f7ff fb80 	bl	8002204 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <MX_USART2_UART_Init+0x138>)
 8002b06:	0018      	movs	r0, r3
 8002b08:	f7ff fbb2 	bl	8002270 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <MX_USART2_UART_Init+0x138>)
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f7ff fb6a 	bl	80021e8 <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8002b14:	46c0      	nop			; (mov r8, r8)
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <MX_USART2_UART_Init+0x138>)
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f7ff fbc1 	bl	80022a0 <LL_USART_IsActiveFlag_TEACK>
 8002b1e:	1e03      	subs	r3, r0, #0
 8002b20:	d0f9      	beq.n	8002b16 <MX_USART2_UART_Init+0x116>
 8002b22:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <MX_USART2_UART_Init+0x138>)
 8002b24:	0018      	movs	r0, r3
 8002b26:	f7ff fbcf 	bl	80022c8 <LL_USART_IsActiveFlag_REACK>
 8002b2a:	1e03      	subs	r3, r0, #0
 8002b2c:	d0f3      	beq.n	8002b16 <MX_USART2_UART_Init+0x116>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	46c0      	nop			; (mov r8, r8)
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b00f      	add	sp, #60	; 0x3c
 8002b36:	bd90      	pop	{r4, r7, pc}
 8002b38:	40004400 	.word	0x40004400

08002b3c <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8002b40:	4b1c      	ldr	r3, [pc, #112]	; (8002bb4 <MX_USART3_Init+0x78>)
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <MX_USART3_Init+0x78>)
 8002b46:	2180      	movs	r1, #128	; 0x80
 8002b48:	0309      	lsls	r1, r1, #12
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8002b4e:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b50:	4a18      	ldr	r2, [pc, #96]	; (8002bb4 <MX_USART3_Init+0x78>)
 8002b52:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 4000000;
 8002b54:	4b18      	ldr	r3, [pc, #96]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b56:	4a19      	ldr	r2, [pc, #100]	; (8002bbc <MX_USART3_Init+0x80>)
 8002b58:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8002b5a:	4b17      	ldr	r3, [pc, #92]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8002b60:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8002b66:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8002b6c:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b6e:	2208      	movs	r2, #8
 8002b70:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8002b72:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b74:	2280      	movs	r2, #128	; 0x80
 8002b76:	00d2      	lsls	r2, r2, #3
 8002b78:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8002b7a:	4b0f      	ldr	r3, [pc, #60]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b7c:	2280      	movs	r2, #128	; 0x80
 8002b7e:	0092      	lsls	r2, r2, #2
 8002b80:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8002b82:	4b0d      	ldr	r3, [pc, #52]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b84:	2280      	movs	r2, #128	; 0x80
 8002b86:	0052      	lsls	r2, r2, #1
 8002b88:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8002b8a:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8002b90:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8002b96:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f008 fe93 	bl	800b8c4 <HAL_USART_Init>
 8002b9e:	1e03      	subs	r3, r0, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8002ba2:	f002 f905 	bl	8004db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  husart3.Init.BaudRate = 7000000;
 8002ba6:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002ba8:	4a05      	ldr	r2, [pc, #20]	; (8002bc0 <MX_USART3_Init+0x84>)
 8002baa:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 2 */

}
 8002bac:	46c0      	nop			; (mov r8, r8)
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	40004800 	.word	0x40004800
 8002bb8:	200002a4 	.word	0x200002a4
 8002bbc:	003d0900 	.word	0x003d0900
 8002bc0:	006acfc0 	.word	0x006acfc0

08002bc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002bca:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <MX_DMA_Init+0x58>)
 8002bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bce:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <MX_DMA_Init+0x58>)
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	639a      	str	r2, [r3, #56]	; 0x38
 8002bd6:	4b11      	ldr	r3, [pc, #68]	; (8002c1c <MX_DMA_Init+0x58>)
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bda:	2201      	movs	r2, #1
 8002bdc:	4013      	ands	r3, r2
 8002bde:	607b      	str	r3, [r7, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002be2:	2200      	movs	r2, #0
 8002be4:	2100      	movs	r1, #0
 8002be6:	2009      	movs	r0, #9
 8002be8:	f003 f930 	bl	8005e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002bec:	2009      	movs	r0, #9
 8002bee:	f003 f942 	bl	8005e76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	200a      	movs	r0, #10
 8002bf8:	f003 f928 	bl	8005e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002bfc:	200a      	movs	r0, #10
 8002bfe:	f003 f93a 	bl	8005e76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8002c02:	2200      	movs	r2, #0
 8002c04:	2100      	movs	r1, #0
 8002c06:	200b      	movs	r0, #11
 8002c08:	f003 f920 	bl	8005e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8002c0c:	200b      	movs	r0, #11
 8002c0e:	f003 f932 	bl	8005e76 <HAL_NVIC_EnableIRQ>

}
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	46bd      	mov	sp, r7
 8002c16:	b002      	add	sp, #8
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	40021000 	.word	0x40021000

08002c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c26:	003b      	movs	r3, r7
 8002c28:	0018      	movs	r0, r3
 8002c2a:	2318      	movs	r3, #24
 8002c2c:	001a      	movs	r2, r3
 8002c2e:	2100      	movs	r1, #0
 8002c30:	f00a f8a8 	bl	800cd84 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8002c34:	2002      	movs	r0, #2
 8002c36:	f7ff fbc3 	bl	80023c0 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8002c3a:	2004      	movs	r0, #4
 8002c3c:	f7ff fbc0 	bl	80023c0 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8002c40:	2001      	movs	r0, #1
 8002c42:	f7ff fbbd 	bl	80023c0 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8002c46:	2380      	movs	r3, #128	; 0x80
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4aa0      	ldr	r2, [pc, #640]	; (8002ecc <MX_GPIO_Init+0x2ac>)
 8002c4c:	0019      	movs	r1, r3
 8002c4e:	0010      	movs	r0, r2
 8002c50:	f7ff fb88 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8002c54:	2380      	movs	r3, #128	; 0x80
 8002c56:	01db      	lsls	r3, r3, #7
 8002c58:	4a9d      	ldr	r2, [pc, #628]	; (8002ed0 <MX_GPIO_Init+0x2b0>)
 8002c5a:	0019      	movs	r1, r3
 8002c5c:	0010      	movs	r0, r2
 8002c5e:	f7ff fb81 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8002c62:	2380      	movs	r3, #128	; 0x80
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	4a9a      	ldr	r2, [pc, #616]	; (8002ed0 <MX_GPIO_Init+0x2b0>)
 8002c68:	0019      	movs	r1, r3
 8002c6a:	0010      	movs	r0, r2
 8002c6c:	f7ff fb7a 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8002c70:	23a0      	movs	r3, #160	; 0xa0
 8002c72:	05db      	lsls	r3, r3, #23
 8002c74:	2140      	movs	r1, #64	; 0x40
 8002c76:	0018      	movs	r0, r3
 8002c78:	f7ff fb74 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8002c7c:	23a0      	movs	r3, #160	; 0xa0
 8002c7e:	05db      	lsls	r3, r3, #23
 8002c80:	2180      	movs	r1, #128	; 0x80
 8002c82:	0018      	movs	r0, r3
 8002c84:	f7ff fb6e 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8002c88:	4b91      	ldr	r3, [pc, #580]	; (8002ed0 <MX_GPIO_Init+0x2b0>)
 8002c8a:	2140      	movs	r1, #64	; 0x40
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f7ff fb69 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_1_GPIO_Port, TEST_1_Pin);
 8002c92:	2380      	movs	r3, #128	; 0x80
 8002c94:	011a      	lsls	r2, r3, #4
 8002c96:	23a0      	movs	r3, #160	; 0xa0
 8002c98:	05db      	lsls	r3, r3, #23
 8002c9a:	0011      	movs	r1, r2
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f7ff fb6d 	bl	800237c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_2_GPIO_Port, TEST_2_Pin);
 8002ca2:	2380      	movs	r3, #128	; 0x80
 8002ca4:	015a      	lsls	r2, r3, #5
 8002ca6:	23a0      	movs	r3, #160	; 0xa0
 8002ca8:	05db      	lsls	r3, r3, #23
 8002caa:	0011      	movs	r1, r2
 8002cac:	0018      	movs	r0, r3
 8002cae:	f7ff fb65 	bl	800237c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8002cb2:	003b      	movs	r3, r7
 8002cb4:	2280      	movs	r2, #128	; 0x80
 8002cb6:	0092      	lsls	r2, r2, #2
 8002cb8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002cba:	003b      	movs	r3, r7
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc0:	003b      	movs	r3, r7
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002cc6:	003b      	movs	r3, r7
 8002cc8:	2200      	movs	r2, #0
 8002cca:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ccc:	003b      	movs	r3, r7
 8002cce:	2200      	movs	r2, #0
 8002cd0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8002cd2:	003b      	movs	r3, r7
 8002cd4:	4a7d      	ldr	r2, [pc, #500]	; (8002ecc <MX_GPIO_Init+0x2ac>)
 8002cd6:	0019      	movs	r1, r3
 8002cd8:	0010      	movs	r0, r2
 8002cda:	f009 fcd5 	bl	800c688 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8002cde:	003b      	movs	r3, r7
 8002ce0:	2280      	movs	r2, #128	; 0x80
 8002ce2:	01d2      	lsls	r2, r2, #7
 8002ce4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002ce6:	003b      	movs	r3, r7
 8002ce8:	2201      	movs	r2, #1
 8002cea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002cec:	003b      	movs	r3, r7
 8002cee:	2200      	movs	r2, #0
 8002cf0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002cf2:	003b      	movs	r3, r7
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002cf8:	003b      	movs	r3, r7
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8002cfe:	003b      	movs	r3, r7
 8002d00:	4a73      	ldr	r2, [pc, #460]	; (8002ed0 <MX_GPIO_Init+0x2b0>)
 8002d02:	0019      	movs	r1, r3
 8002d04:	0010      	movs	r0, r2
 8002d06:	f009 fcbf 	bl	800c688 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8002d0a:	003b      	movs	r3, r7
 8002d0c:	2280      	movs	r2, #128	; 0x80
 8002d0e:	0212      	lsls	r2, r2, #8
 8002d10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002d12:	003b      	movs	r3, r7
 8002d14:	2201      	movs	r2, #1
 8002d16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002d18:	003b      	movs	r3, r7
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d1e:	003b      	movs	r3, r7
 8002d20:	2200      	movs	r2, #0
 8002d22:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d24:	003b      	movs	r3, r7
 8002d26:	2200      	movs	r2, #0
 8002d28:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8002d2a:	003b      	movs	r3, r7
 8002d2c:	4a68      	ldr	r2, [pc, #416]	; (8002ed0 <MX_GPIO_Init+0x2b0>)
 8002d2e:	0019      	movs	r1, r3
 8002d30:	0010      	movs	r0, r2
 8002d32:	f009 fca9 	bl	800c688 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8002d36:	003b      	movs	r3, r7
 8002d38:	2201      	movs	r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002d3c:	003b      	movs	r3, r7
 8002d3e:	2200      	movs	r2, #0
 8002d40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002d42:	003b      	movs	r3, r7
 8002d44:	2201      	movs	r2, #1
 8002d46:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8002d48:	003a      	movs	r2, r7
 8002d4a:	23a0      	movs	r3, #160	; 0xa0
 8002d4c:	05db      	lsls	r3, r3, #23
 8002d4e:	0011      	movs	r1, r2
 8002d50:	0018      	movs	r0, r3
 8002d52:	f009 fc99 	bl	800c688 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8002d56:	003b      	movs	r3, r7
 8002d58:	2202      	movs	r2, #2
 8002d5a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002d5c:	003b      	movs	r3, r7
 8002d5e:	2200      	movs	r2, #0
 8002d60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002d62:	003b      	movs	r3, r7
 8002d64:	2201      	movs	r2, #1
 8002d66:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8002d68:	003a      	movs	r2, r7
 8002d6a:	23a0      	movs	r3, #160	; 0xa0
 8002d6c:	05db      	lsls	r3, r3, #23
 8002d6e:	0011      	movs	r1, r2
 8002d70:	0018      	movs	r0, r3
 8002d72:	f009 fc89 	bl	800c688 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8002d76:	003b      	movs	r3, r7
 8002d78:	2210      	movs	r2, #16
 8002d7a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002d7c:	003b      	movs	r3, r7
 8002d7e:	2200      	movs	r2, #0
 8002d80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002d82:	003b      	movs	r3, r7
 8002d84:	2201      	movs	r2, #1
 8002d86:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8002d88:	003a      	movs	r2, r7
 8002d8a:	23a0      	movs	r3, #160	; 0xa0
 8002d8c:	05db      	lsls	r3, r3, #23
 8002d8e:	0011      	movs	r1, r2
 8002d90:	0018      	movs	r0, r3
 8002d92:	f009 fc79 	bl	800c688 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8002d96:	003b      	movs	r3, r7
 8002d98:	2240      	movs	r2, #64	; 0x40
 8002d9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002d9c:	003b      	movs	r3, r7
 8002d9e:	2201      	movs	r2, #1
 8002da0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002da2:	003b      	movs	r3, r7
 8002da4:	2203      	movs	r2, #3
 8002da6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002da8:	003b      	movs	r3, r7
 8002daa:	2200      	movs	r2, #0
 8002dac:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002dae:	003b      	movs	r3, r7
 8002db0:	2200      	movs	r2, #0
 8002db2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8002db4:	003a      	movs	r2, r7
 8002db6:	23a0      	movs	r3, #160	; 0xa0
 8002db8:	05db      	lsls	r3, r3, #23
 8002dba:	0011      	movs	r1, r2
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f009 fc63 	bl	800c688 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8002dc2:	003b      	movs	r3, r7
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002dc8:	003b      	movs	r3, r7
 8002dca:	2201      	movs	r2, #1
 8002dcc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002dce:	003b      	movs	r3, r7
 8002dd0:	2203      	movs	r2, #3
 8002dd2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002dd4:	003b      	movs	r3, r7
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002dda:	003b      	movs	r3, r7
 8002ddc:	2200      	movs	r2, #0
 8002dde:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8002de0:	003a      	movs	r2, r7
 8002de2:	23a0      	movs	r3, #160	; 0xa0
 8002de4:	05db      	lsls	r3, r3, #23
 8002de6:	0011      	movs	r1, r2
 8002de8:	0018      	movs	r0, r3
 8002dea:	f009 fc4d 	bl	800c688 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8002dee:	003b      	movs	r3, r7
 8002df0:	2240      	movs	r2, #64	; 0x40
 8002df2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002df4:	003b      	movs	r3, r7
 8002df6:	2201      	movs	r2, #1
 8002df8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002dfa:	003b      	movs	r3, r7
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e00:	003b      	movs	r3, r7
 8002e02:	2200      	movs	r2, #0
 8002e04:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e06:	003b      	movs	r3, r7
 8002e08:	2200      	movs	r2, #0
 8002e0a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8002e0c:	003b      	movs	r3, r7
 8002e0e:	4a30      	ldr	r2, [pc, #192]	; (8002ed0 <MX_GPIO_Init+0x2b0>)
 8002e10:	0019      	movs	r1, r3
 8002e12:	0010      	movs	r0, r2
 8002e14:	f009 fc38 	bl	800c688 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_1_Pin;
 8002e18:	003b      	movs	r3, r7
 8002e1a:	2280      	movs	r2, #128	; 0x80
 8002e1c:	0112      	lsls	r2, r2, #4
 8002e1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e20:	003b      	movs	r3, r7
 8002e22:	2201      	movs	r2, #1
 8002e24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002e26:	003b      	movs	r3, r7
 8002e28:	2203      	movs	r2, #3
 8002e2a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e2c:	003b      	movs	r3, r7
 8002e2e:	2200      	movs	r2, #0
 8002e30:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e32:	003b      	movs	r3, r7
 8002e34:	2200      	movs	r2, #0
 8002e36:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_1_GPIO_Port, &GPIO_InitStruct);
 8002e38:	003a      	movs	r2, r7
 8002e3a:	23a0      	movs	r3, #160	; 0xa0
 8002e3c:	05db      	lsls	r3, r3, #23
 8002e3e:	0011      	movs	r1, r2
 8002e40:	0018      	movs	r0, r3
 8002e42:	f009 fc21 	bl	800c688 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_2_Pin;
 8002e46:	003b      	movs	r3, r7
 8002e48:	2280      	movs	r2, #128	; 0x80
 8002e4a:	0152      	lsls	r2, r2, #5
 8002e4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e4e:	003b      	movs	r3, r7
 8002e50:	2201      	movs	r2, #1
 8002e52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002e54:	003b      	movs	r3, r7
 8002e56:	2203      	movs	r2, #3
 8002e58:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e5a:	003b      	movs	r3, r7
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e60:	003b      	movs	r3, r7
 8002e62:	2200      	movs	r2, #0
 8002e64:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_2_GPIO_Port, &GPIO_InitStruct);
 8002e66:	003a      	movs	r2, r7
 8002e68:	23a0      	movs	r3, #160	; 0xa0
 8002e6a:	05db      	lsls	r3, r3, #23
 8002e6c:	0011      	movs	r1, r2
 8002e6e:	0018      	movs	r0, r3
 8002e70:	f009 fc0a 	bl	800c688 <LL_GPIO_Init>

  	  GPIO_InitStruct.Pin = KEY_4_Pin;
 8002e74:	003b      	movs	r3, r7
 8002e76:	2280      	movs	r2, #128	; 0x80
 8002e78:	0192      	lsls	r2, r2, #6
 8002e7a:	601a      	str	r2, [r3, #0]
  	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002e7c:	003b      	movs	r3, r7
 8002e7e:	2200      	movs	r2, #0
 8002e80:	605a      	str	r2, [r3, #4]
  	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002e82:	003b      	movs	r3, r7
 8002e84:	2201      	movs	r2, #1
 8002e86:	611a      	str	r2, [r3, #16]
  	  LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8002e88:	003a      	movs	r2, r7
 8002e8a:	23a0      	movs	r3, #160	; 0xa0
 8002e8c:	05db      	lsls	r3, r3, #23
 8002e8e:	0011      	movs	r1, r2
 8002e90:	0018      	movs	r0, r3
 8002e92:	f009 fbf9 	bl	800c688 <LL_GPIO_Init>
  	  /**/
  	    GPIO_InitStruct.Pin = KEY_5_Pin;
 8002e96:	003b      	movs	r3, r7
 8002e98:	2280      	movs	r2, #128	; 0x80
 8002e9a:	01d2      	lsls	r2, r2, #7
 8002e9c:	601a      	str	r2, [r3, #0]
  	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002e9e:	003b      	movs	r3, r7
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	605a      	str	r2, [r3, #4]
  	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002ea4:	003b      	movs	r3, r7
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	611a      	str	r2, [r3, #16]
  	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8002eaa:	003a      	movs	r2, r7
 8002eac:	23a0      	movs	r3, #160	; 0xa0
 8002eae:	05db      	lsls	r3, r3, #23
 8002eb0:	0011      	movs	r1, r2
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f009 fbe8 	bl	800c688 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 8002eb8:	2380      	movs	r3, #128	; 0x80
 8002eba:	031b      	lsls	r3, r3, #12
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f7ff fa41 	bl	8002344 <LL_SYSCFG_EnableFastModePlus>

}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b006      	add	sp, #24
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	50000400 	.word	0x50000400
 8002ed0:	50000800 	.word	0x50000800

08002ed4 <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0

  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 8002ed8:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <USART2_RX_Callback+0x60>)
 8002eda:	0018      	movs	r0, r3
 8002edc:	f7ff fa24 	bl	8002328 <LL_USART_ReceiveData9>
 8002ee0:	0003      	movs	r3, r0
 8002ee2:	001a      	movs	r2, r3
 8002ee4:	4b14      	ldr	r3, [pc, #80]	; (8002f38 <USART2_RX_Callback+0x64>)
 8002ee6:	801a      	strh	r2, [r3, #0]
	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
 8002ee8:	4b12      	ldr	r3, [pc, #72]	; (8002f34 <USART2_RX_Callback+0x60>)
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	05db      	lsls	r3, r3, #23
 8002ef0:	0ddb      	lsrs	r3, r3, #23
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <USART2_RX_Callback+0x64>)
 8002ef6:	801a      	strh	r2, [r3, #0]
  ByteReceived=1;
 8002ef8:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <USART2_RX_Callback+0x68>)
 8002efa:	2201      	movs	r2, #1
 8002efc:	701a      	strb	r2, [r3, #0]
  if(dt1>0xFF){
 8002efe:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <USART2_RX_Callback+0x64>)
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	2bff      	cmp	r3, #255	; 0xff
 8002f04:	d90a      	bls.n	8002f1c <USART2_RX_Callback+0x48>
	  cmd[0]=dt1;
 8002f06:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <USART2_RX_Callback+0x64>)
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <USART2_RX_Callback+0x6c>)
 8002f0e:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <USART2_RX_Callback+0x70>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 8002f16:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <USART2_RX_Callback+0x74>)
 8002f18:	2201      	movs	r2, #1
 8002f1a:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <USART2_RX_Callback+0x74>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d104      	bne.n	8002f2e <USART2_RX_Callback+0x5a>
	  cmdReceive(dt1);
 8002f24:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <USART2_RX_Callback+0x64>)
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f000 f843 	bl	8002fb4 <cmdReceive>
  }
}
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40004400 	.word	0x40004400
 8002f38:	20001506 	.word	0x20001506
 8002f3c:	20000064 	.word	0x20000064
 8002f40:	2000350c 	.word	0x2000350c
 8002f44:	20000066 	.word	0x20000066
 8002f48:	20000065 	.word	0x20000065

08002f4c <HAL_USART_TxCpltCallback>:
//return;
//	}
}
//==============================================================
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart3)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= ~(1 << 7);	//reset dc
 8002f54:	23a0      	movs	r3, #160	; 0xa0
 8002f56:	05db      	lsls	r3, r3, #23
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	23a0      	movs	r3, #160	; 0xa0
 8002f5c:	05db      	lsls	r3, r3, #23
 8002f5e:	2180      	movs	r1, #128	; 0x80
 8002f60:	438a      	bics	r2, r1
 8002f62:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= 1 << 6;	//set cs
 8002f64:	23a0      	movs	r3, #160	; 0xa0
 8002f66:	05db      	lsls	r3, r3, #23
 8002f68:	695a      	ldr	r2, [r3, #20]
 8002f6a:	23a0      	movs	r3, #160	; 0xa0
 8002f6c:	05db      	lsls	r3, r3, #23
 8002f6e:	2140      	movs	r1, #64	; 0x40
 8002f70:	430a      	orrs	r2, r1
 8002f72:	615a      	str	r2, [r3, #20]
	cmd2Execute=0;
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <HAL_USART_TxCpltCallback+0x44>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	701a      	strb	r2, [r3, #0]
//	while(BFEN==0){};
	GPIOC->ODR |= 1 << 6;	//set BF
 8002f7a:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_USART_TxCpltCallback+0x48>)
 8002f7c:	695a      	ldr	r2, [r3, #20]
 8002f7e:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <HAL_USART_TxCpltCallback+0x48>)
 8002f80:	2140      	movs	r1, #64	; 0x40
 8002f82:	430a      	orrs	r2, r1
 8002f84:	615a      	str	r2, [r3, #20]
}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b002      	add	sp, #8
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	2000137b 	.word	0x2000137b
 8002f94:	50000800 	.word	0x50000800

08002f98 <HAL_I2S_TxCpltCallback>:
//	GPIOA->ODR |= 1 << 6;	//set cs		????????????????????????????????????????????????
	//	cmd2Execute=0;
//	GPIOC->ODR |= 1 << 6;	//set BF
}
//======================================================================================================================
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s1) {
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
//	if(numSound==1){
	soundReady=1;
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <HAL_I2S_TxCpltCallback+0x18>)
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	701a      	strb	r2, [r3, #0]
//		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[1], 1, 50); //send address
//		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[0], 1, 50); //send address
//		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
//		curAddr+=sizeof(MEM_Buffer);
//    }
}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	b002      	add	sp, #8
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	20000034 	.word	0x20000034

08002fb4 <cmdReceive>:
//=======================================================================================================================
	void cmdReceive (uint16_t dt1)
	{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	0002      	movs	r2, r0
 8002fbc:	1dbb      	adds	r3, r7, #6
 8002fbe:	801a      	strh	r2, [r3, #0]
//	  uint8_t inputCS=0;
	  uint8_t i=0;
 8002fc0:	230f      	movs	r3, #15
 8002fc2:	18fb      	adds	r3, r7, r3
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 8002fc8:	46c0      	nop			; (mov r8, r8)
 8002fca:	4b2b      	ldr	r3, [pc, #172]	; (8003078 <cmdReceive+0xc4>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0fb      	beq.n	8002fca <cmdReceive+0x16>
	  ByteReceived=0;
 8002fd2:	4b29      	ldr	r3, [pc, #164]	; (8003078 <cmdReceive+0xc4>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 8002fd8:	4b28      	ldr	r3, [pc, #160]	; (800307c <cmdReceive+0xc8>)
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	001a      	movs	r2, r3
 8002fde:	1dbb      	adds	r3, r7, #6
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	b2d9      	uxtb	r1, r3
 8002fe4:	4b26      	ldr	r3, [pc, #152]	; (8003080 <cmdReceive+0xcc>)
 8002fe6:	5499      	strb	r1, [r3, r2]
//	  if(dt1==0x110){
//		  BFEN=0;
//	  }
	  ind++;
 8002fe8:	4b24      	ldr	r3, [pc, #144]	; (800307c <cmdReceive+0xc8>)
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	3301      	adds	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	4b22      	ldr	r3, [pc, #136]	; (800307c <cmdReceive+0xc8>)
 8002ff2:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 8002ff4:	4b21      	ldr	r3, [pc, #132]	; (800307c <cmdReceive+0xc8>)
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d033      	beq.n	8003064 <cmdReceive+0xb0>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 8002ffc:	4b1f      	ldr	r3, [pc, #124]	; (800307c <cmdReceive+0xc8>)
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	001a      	movs	r2, r3
 8003002:	4b1f      	ldr	r3, [pc, #124]	; (8003080 <cmdReceive+0xcc>)
 8003004:	785b      	ldrb	r3, [r3, #1]
 8003006:	3301      	adds	r3, #1
 8003008:	429a      	cmp	r2, r3
 800300a:	dd2b      	ble.n	8003064 <cmdReceive+0xb0>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 800300c:	230f      	movs	r3, #15
 800300e:	18fb      	adds	r3, r7, r3
 8003010:	2200      	movs	r2, #0
 8003012:	701a      	strb	r2, [r3, #0]
 8003014:	e00f      	b.n	8003036 <cmdReceive+0x82>
				 inputCS+=cmd[i];
 8003016:	210f      	movs	r1, #15
 8003018:	187b      	adds	r3, r7, r1
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	4a18      	ldr	r2, [pc, #96]	; (8003080 <cmdReceive+0xcc>)
 800301e:	5cd2      	ldrb	r2, [r2, r3]
 8003020:	4b18      	ldr	r3, [pc, #96]	; (8003084 <cmdReceive+0xd0>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	18d3      	adds	r3, r2, r3
 8003026:	b2da      	uxtb	r2, r3
 8003028:	4b16      	ldr	r3, [pc, #88]	; (8003084 <cmdReceive+0xd0>)
 800302a:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 800302c:	187b      	adds	r3, r7, r1
 800302e:	781a      	ldrb	r2, [r3, #0]
 8003030:	187b      	adds	r3, r7, r1
 8003032:	3201      	adds	r2, #1
 8003034:	701a      	strb	r2, [r3, #0]
 8003036:	4b12      	ldr	r3, [pc, #72]	; (8003080 <cmdReceive+0xcc>)
 8003038:	785b      	ldrb	r3, [r3, #1]
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	210f      	movs	r1, #15
 800303e:	187b      	adds	r3, r7, r1
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	dae7      	bge.n	8003016 <cmdReceive+0x62>
			 }
			 if((inputCS==0)&&(i==cmd[1]+2)){
 8003046:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <cmdReceive+0xd0>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10a      	bne.n	8003064 <cmdReceive+0xb0>
 800304e:	187b      	adds	r3, r7, r1
 8003050:	781a      	ldrb	r2, [r3, #0]
 8003052:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <cmdReceive+0xcc>)
 8003054:	785b      	ldrb	r3, [r3, #1]
 8003056:	3302      	adds	r3, #2
 8003058:	429a      	cmp	r2, r3
 800305a:	d103      	bne.n	8003064 <cmdReceive+0xb0>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 	answer2CPU(cmd);
 800305c:	4b08      	ldr	r3, [pc, #32]	; (8003080 <cmdReceive+0xcc>)
 800305e:	0018      	movs	r0, r3
 8003060:	f000 faa4 	bl	80035ac <answer2CPU>
//				 GPIOC->ODR |= 1 << 6;	//set BF
//			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 8003064:	4b08      	ldr	r3, [pc, #32]	; (8003088 <cmdReceive+0xd4>)
 8003066:	6a1a      	ldr	r2, [r3, #32]
 8003068:	4b07      	ldr	r3, [pc, #28]	; (8003088 <cmdReceive+0xd4>)
 800306a:	2108      	movs	r1, #8
 800306c:	430a      	orrs	r2, r1
 800306e:	621a      	str	r2, [r3, #32]
	}
 8003070:	46c0      	nop			; (mov r8, r8)
 8003072:	46bd      	mov	sp, r7
 8003074:	b004      	add	sp, #16
 8003076:	bd80      	pop	{r7, pc}
 8003078:	20000064 	.word	0x20000064
 800307c:	20000066 	.word	0x20000066
 8003080:	2000350c 	.word	0x2000350c
 8003084:	20000069 	.word	0x20000069
 8003088:	40004400 	.word	0x40004400

0800308c <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	0002      	movs	r2, r0
 8003094:	1dfb      	adds	r3, r7, #7
 8003096:	701a      	strb	r2, [r3, #0]
			HAL_USART_Transmit(&husart3, (uint8_t*)&byte, 1, 10);
 8003098:	1df9      	adds	r1, r7, #7
 800309a:	4804      	ldr	r0, [pc, #16]	; (80030ac <USART_AS_SPI_sendCMD+0x20>)
 800309c:	230a      	movs	r3, #10
 800309e:	2201      	movs	r2, #1
 80030a0:	f008 fc60 	bl	800b964 <HAL_USART_Transmit>
		}
 80030a4:	46c0      	nop			; (mov r8, r8)
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b002      	add	sp, #8
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	200002a4 	.word	0x200002a4

080030b0 <weoInit>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 10);
	}
	void weoInit(void) {
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0

		USART3->CR1 &= ~(USART_CR1_UE);
 80030b4:	4b32      	ldr	r3, [pc, #200]	; (8003180 <weoInit+0xd0>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	4b31      	ldr	r3, [pc, #196]	; (8003180 <weoInit+0xd0>)
 80030ba:	2101      	movs	r1, #1
 80030bc:	438a      	bics	r2, r1
 80030be:	601a      	str	r2, [r3, #0]
		USART3->CR2 |= USART_CR2_MSBFIRST;
 80030c0:	4b2f      	ldr	r3, [pc, #188]	; (8003180 <weoInit+0xd0>)
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	4b2e      	ldr	r3, [pc, #184]	; (8003180 <weoInit+0xd0>)
 80030c6:	2180      	movs	r1, #128	; 0x80
 80030c8:	0309      	lsls	r1, r1, #12
 80030ca:	430a      	orrs	r2, r1
 80030cc:	605a      	str	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_UE;
 80030ce:	4b2c      	ldr	r3, [pc, #176]	; (8003180 <weoInit+0xd0>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	4b2b      	ldr	r3, [pc, #172]	; (8003180 <weoInit+0xd0>)
 80030d4:	2101      	movs	r1, #1
 80030d6:	430a      	orrs	r2, r1
 80030d8:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 80030da:	2001      	movs	r0, #1
 80030dc:	f002 fb70 	bl	80057c0 <HAL_Delay>
		HAL_Delay(1);
 80030e0:	2001      	movs	r0, #1
 80030e2:	f002 fb6d 	bl	80057c0 <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80030e6:	4b27      	ldr	r3, [pc, #156]	; (8003184 <weoInit+0xd4>)
 80030e8:	2100      	movs	r1, #0
 80030ea:	0018      	movs	r0, r3
 80030ec:	f007 fb86 	bl	800a7fc <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 80030f0:	2001      	movs	r0, #1
 80030f2:	f002 fb65 	bl	80057c0 <HAL_Delay>

		GPIOA->ODR &= ~(1 << 6);	//reset cs
 80030f6:	23a0      	movs	r3, #160	; 0xa0
 80030f8:	05db      	lsls	r3, r3, #23
 80030fa:	695a      	ldr	r2, [r3, #20]
 80030fc:	23a0      	movs	r3, #160	; 0xa0
 80030fe:	05db      	lsls	r3, r3, #23
 8003100:	2140      	movs	r1, #64	; 0x40
 8003102:	438a      	bics	r2, r1
 8003104:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 8003106:	23a0      	movs	r3, #160	; 0xa0
 8003108:	05db      	lsls	r3, r3, #23
 800310a:	695a      	ldr	r2, [r3, #20]
 800310c:	23a0      	movs	r3, #160	; 0xa0
 800310e:	05db      	lsls	r3, r3, #23
 8003110:	2180      	movs	r1, #128	; 0x80
 8003112:	438a      	bics	r2, r1
 8003114:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 8003116:	20af      	movs	r0, #175	; 0xaf
 8003118:	f7ff ffb8 	bl	800308c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 800311c:	20a0      	movs	r0, #160	; 0xa0
 800311e:	f7ff ffb5 	bl	800308c <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0b00010100);
		USART_AS_SPI_sendCMD(0x51); //	0x51 is a proper remap!
 8003122:	2051      	movs	r0, #81	; 0x51
 8003124:	f7ff ffb2 	bl	800308c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8003128:	2081      	movs	r0, #129	; 0x81
 800312a:	f7ff ffaf 	bl	800308c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 800312e:	20ff      	movs	r0, #255	; 0xff
 8003130:	f7ff ffac 	bl	800308c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 8003134:	20a1      	movs	r0, #161	; 0xa1
 8003136:	f7ff ffa9 	bl	800308c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 800313a:	2000      	movs	r0, #0
 800313c:	f7ff ffa6 	bl	800308c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 8003140:	20a2      	movs	r0, #162	; 0xa2
 8003142:	f7ff ffa3 	bl	800308c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 8003146:	2000      	movs	r0, #0
 8003148:	f7ff ffa0 	bl	800308c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 800314c:	20a8      	movs	r0, #168	; 0xa8
 800314e:	f7ff ff9d 	bl	800308c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 8003152:	207f      	movs	r0, #127	; 0x7f
 8003154:	f7ff ff9a 	bl	800308c <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 8003158:	23a0      	movs	r3, #160	; 0xa0
 800315a:	05db      	lsls	r3, r3, #23
 800315c:	695a      	ldr	r2, [r3, #20]
 800315e:	23a0      	movs	r3, #160	; 0xa0
 8003160:	05db      	lsls	r3, r3, #23
 8003162:	2180      	movs	r1, #128	; 0x80
 8003164:	430a      	orrs	r2, r1
 8003166:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 8003168:	23a0      	movs	r3, #160	; 0xa0
 800316a:	05db      	lsls	r3, r3, #23
 800316c:	695a      	ldr	r2, [r3, #20]
 800316e:	23a0      	movs	r3, #160	; 0xa0
 8003170:	05db      	lsls	r3, r3, #23
 8003172:	2140      	movs	r1, #64	; 0x40
 8003174:	430a      	orrs	r2, r1
 8003176:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 8003178:	46c0      	nop			; (mov r8, r8)
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	40004800 	.word	0x40004800
 8003184:	20001320 	.word	0x20001320

08003188 <weoClear>:
	void weoClear(void) {
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
		uint16_t i;

					GPIOA->ODR &= ~(1 << 6);	//reset cs
 800318e:	23a0      	movs	r3, #160	; 0xa0
 8003190:	05db      	lsls	r3, r3, #23
 8003192:	695a      	ldr	r2, [r3, #20]
 8003194:	23a0      	movs	r3, #160	; 0xa0
 8003196:	05db      	lsls	r3, r3, #23
 8003198:	2140      	movs	r1, #64	; 0x40
 800319a:	438a      	bics	r2, r1
 800319c:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 7);	// reset dc
 800319e:	23a0      	movs	r3, #160	; 0xa0
 80031a0:	05db      	lsls	r3, r3, #23
 80031a2:	695a      	ldr	r2, [r3, #20]
 80031a4:	23a0      	movs	r3, #160	; 0xa0
 80031a6:	05db      	lsls	r3, r3, #23
 80031a8:	2180      	movs	r1, #128	; 0x80
 80031aa:	438a      	bics	r2, r1
 80031ac:	615a      	str	r2, [r3, #20]
						USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 80031ae:	2075      	movs	r0, #117	; 0x75
 80031b0:	f7ff ff6c 	bl	800308c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 80031b4:	2000      	movs	r0, #0
 80031b6:	f7ff ff69 	bl	800308c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 80031ba:	207f      	movs	r0, #127	; 0x7f
 80031bc:	f7ff ff66 	bl	800308c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 80031c0:	2015      	movs	r0, #21
 80031c2:	f7ff ff63 	bl	800308c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 80031c6:	2000      	movs	r0, #0
 80031c8:	f7ff ff60 	bl	800308c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 80031cc:	207f      	movs	r0, #127	; 0x7f
 80031ce:	f7ff ff5d 	bl	800308c <USART_AS_SPI_sendCMD>
					GPIOA->ODR &= ~(1 << 6);	//reset cs
 80031d2:	23a0      	movs	r3, #160	; 0xa0
 80031d4:	05db      	lsls	r3, r3, #23
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	23a0      	movs	r3, #160	; 0xa0
 80031da:	05db      	lsls	r3, r3, #23
 80031dc:	2140      	movs	r1, #64	; 0x40
 80031de:	438a      	bics	r2, r1
 80031e0:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 7;	// set dc
 80031e2:	23a0      	movs	r3, #160	; 0xa0
 80031e4:	05db      	lsls	r3, r3, #23
 80031e6:	695a      	ldr	r2, [r3, #20]
 80031e8:	23a0      	movs	r3, #160	; 0xa0
 80031ea:	05db      	lsls	r3, r3, #23
 80031ec:	2180      	movs	r1, #128	; 0x80
 80031ee:	430a      	orrs	r2, r1
 80031f0:	615a      	str	r2, [r3, #20]
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 80031f2:	1dbb      	adds	r3, r7, #6
 80031f4:	2200      	movs	r2, #0
 80031f6:	801a      	strh	r2, [r3, #0]
 80031f8:	e00d      	b.n	8003216 <weoClear+0x8e>
						while(!(USART3->ISR & USART_ISR_TXE)){};
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	4b12      	ldr	r3, [pc, #72]	; (8003248 <weoClear+0xc0>)
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	2280      	movs	r2, #128	; 0x80
 8003202:	4013      	ands	r3, r2
 8003204:	d0fa      	beq.n	80031fc <weoClear+0x74>
						USART3->TDR = (uint8_t) 0x00;
 8003206:	4b10      	ldr	r3, [pc, #64]	; (8003248 <weoClear+0xc0>)
 8003208:	2200      	movs	r2, #0
 800320a:	629a      	str	r2, [r3, #40]	; 0x28
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 800320c:	1dbb      	adds	r3, r7, #6
 800320e:	881a      	ldrh	r2, [r3, #0]
 8003210:	1dbb      	adds	r3, r7, #6
 8003212:	3201      	adds	r2, #1
 8003214:	801a      	strh	r2, [r3, #0]
 8003216:	1dbb      	adds	r3, r7, #6
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	4a0c      	ldr	r2, [pc, #48]	; (800324c <weoClear+0xc4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d9ec      	bls.n	80031fa <weoClear+0x72>
					}
					GPIOA->ODR &= ~(1 << 7);	//reset dc
 8003220:	23a0      	movs	r3, #160	; 0xa0
 8003222:	05db      	lsls	r3, r3, #23
 8003224:	695a      	ldr	r2, [r3, #20]
 8003226:	23a0      	movs	r3, #160	; 0xa0
 8003228:	05db      	lsls	r3, r3, #23
 800322a:	2180      	movs	r1, #128	; 0x80
 800322c:	438a      	bics	r2, r1
 800322e:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 8003230:	23a0      	movs	r3, #160	; 0xa0
 8003232:	05db      	lsls	r3, r3, #23
 8003234:	695a      	ldr	r2, [r3, #20]
 8003236:	23a0      	movs	r3, #160	; 0xa0
 8003238:	05db      	lsls	r3, r3, #23
 800323a:	2140      	movs	r1, #64	; 0x40
 800323c:	430a      	orrs	r2, r1
 800323e:	615a      	str	r2, [r3, #20]
	}
 8003240:	46c0      	nop			; (mov r8, r8)
 8003242:	46bd      	mov	sp, r7
 8003244:	b002      	add	sp, #8
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40004800 	.word	0x40004800
 800324c:	00002001 	.word	0x00002001

08003250 <weoDrawRectangleFilled>:
//========================================================================================================================
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char color,
				uint8_t MEM_Buffer[]) {
 8003250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	0005      	movs	r5, r0
 8003258:	000c      	movs	r4, r1
 800325a:	0010      	movs	r0, r2
 800325c:	0019      	movs	r1, r3
 800325e:	1dfb      	adds	r3, r7, #7
 8003260:	1c2a      	adds	r2, r5, #0
 8003262:	701a      	strb	r2, [r3, #0]
 8003264:	1dbb      	adds	r3, r7, #6
 8003266:	1c22      	adds	r2, r4, #0
 8003268:	701a      	strb	r2, [r3, #0]
 800326a:	1d7b      	adds	r3, r7, #5
 800326c:	1c02      	adds	r2, r0, #0
 800326e:	701a      	strb	r2, [r3, #0]
 8003270:	1d3b      	adds	r3, r7, #4
 8003272:	1c0a      	adds	r2, r1, #0
 8003274:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 8003276:	240e      	movs	r4, #14
 8003278:	193b      	adds	r3, r7, r4
 800327a:	2200      	movs	r2, #0
 800327c:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 800327e:	1dfb      	adds	r3, r7, #7
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	b25b      	sxtb	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	da00      	bge.n	800328a <weoDrawRectangleFilled+0x3a>
 8003288:	e0bf      	b.n	800340a <weoDrawRectangleFilled+0x1ba>
 800328a:	1dbb      	adds	r3, r7, #6
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	b25b      	sxtb	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	da00      	bge.n	8003296 <weoDrawRectangleFilled+0x46>
 8003294:	e0b9      	b.n	800340a <weoDrawRectangleFilled+0x1ba>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 8003296:	1d7b      	adds	r3, r7, #5
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	b25b      	sxtb	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	da00      	bge.n	80032a2 <weoDrawRectangleFilled+0x52>
 80032a0:	e0b3      	b.n	800340a <weoDrawRectangleFilled+0x1ba>
 80032a2:	1d3b      	adds	r3, r7, #4
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	b25b      	sxtb	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	da00      	bge.n	80032ae <weoDrawRectangleFilled+0x5e>
 80032ac:	e0ad      	b.n	800340a <weoDrawRectangleFilled+0x1ba>
				return;
			}

			start_x_New=start_x;
 80032ae:	250d      	movs	r5, #13
 80032b0:	197b      	adds	r3, r7, r5
 80032b2:	1dfa      	adds	r2, r7, #7
 80032b4:	7812      	ldrb	r2, [r2, #0]
 80032b6:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 80032b8:	260c      	movs	r6, #12
 80032ba:	19bb      	adds	r3, r7, r6
 80032bc:	1d3a      	adds	r2, r7, #4
 80032be:	7812      	ldrb	r2, [r2, #0]
 80032c0:	217f      	movs	r1, #127	; 0x7f
 80032c2:	1a8a      	subs	r2, r1, r2
 80032c4:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 80032c6:	230b      	movs	r3, #11
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	1d7a      	adds	r2, r7, #5
 80032cc:	7812      	ldrb	r2, [r2, #0]
 80032ce:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 80032d0:	220a      	movs	r2, #10
 80032d2:	18bb      	adds	r3, r7, r2
 80032d4:	1dba      	adds	r2, r7, #6
 80032d6:	7812      	ldrb	r2, [r2, #0]
 80032d8:	217f      	movs	r1, #127	; 0x7f
 80032da:	1a8a      	subs	r2, r1, r2
 80032dc:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80032de:	23a0      	movs	r3, #160	; 0xa0
 80032e0:	05db      	lsls	r3, r3, #23
 80032e2:	695a      	ldr	r2, [r3, #20]
 80032e4:	23a0      	movs	r3, #160	; 0xa0
 80032e6:	05db      	lsls	r3, r3, #23
 80032e8:	2140      	movs	r1, #64	; 0x40
 80032ea:	438a      	bics	r2, r1
 80032ec:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 80032ee:	23a0      	movs	r3, #160	; 0xa0
 80032f0:	05db      	lsls	r3, r3, #23
 80032f2:	695a      	ldr	r2, [r3, #20]
 80032f4:	23a0      	movs	r3, #160	; 0xa0
 80032f6:	05db      	lsls	r3, r3, #23
 80032f8:	2180      	movs	r1, #128	; 0x80
 80032fa:	438a      	bics	r2, r1
 80032fc:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 80032fe:	2075      	movs	r0, #117	; 0x75
 8003300:	f7ff fec4 	bl	800308c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 8003304:	197b      	adds	r3, r7, r5
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	0018      	movs	r0, r3
 800330a:	f7ff febf 	bl	800308c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 800330e:	230b      	movs	r3, #11
 8003310:	18fb      	adds	r3, r7, r3
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	0018      	movs	r0, r3
 8003316:	f7ff feb9 	bl	800308c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 800331a:	2015      	movs	r0, #21
 800331c:	f7ff feb6 	bl	800308c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 8003320:	19bb      	adds	r3, r7, r6
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	085b      	lsrs	r3, r3, #1
 8003326:	b2db      	uxtb	r3, r3
 8003328:	0018      	movs	r0, r3
 800332a:	f7ff feaf 	bl	800308c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 800332e:	220a      	movs	r2, #10
 8003330:	18bb      	adds	r3, r7, r2
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	085b      	lsrs	r3, r3, #1
 8003336:	b2db      	uxtb	r3, r3
 8003338:	0018      	movs	r0, r3
 800333a:	f7ff fea7 	bl	800308c <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 800333e:	23a0      	movs	r3, #160	; 0xa0
 8003340:	05db      	lsls	r3, r3, #23
 8003342:	695a      	ldr	r2, [r3, #20]
 8003344:	23a0      	movs	r3, #160	; 0xa0
 8003346:	05db      	lsls	r3, r3, #23
 8003348:	2180      	movs	r1, #128	; 0x80
 800334a:	430a      	orrs	r2, r1
 800334c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 800334e:	23a0      	movs	r3, #160	; 0xa0
 8003350:	05db      	lsls	r3, r3, #23
 8003352:	695a      	ldr	r2, [r3, #20]
 8003354:	23a0      	movs	r3, #160	; 0xa0
 8003356:	05db      	lsls	r3, r3, #23
 8003358:	2140      	movs	r1, #64	; 0x40
 800335a:	430a      	orrs	r2, r1
 800335c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 800335e:	23a0      	movs	r3, #160	; 0xa0
 8003360:	05db      	lsls	r3, r3, #23
 8003362:	695a      	ldr	r2, [r3, #20]
 8003364:	23a0      	movs	r3, #160	; 0xa0
 8003366:	05db      	lsls	r3, r3, #23
 8003368:	2140      	movs	r1, #64	; 0x40
 800336a:	438a      	bics	r2, r1
 800336c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 800336e:	23a0      	movs	r3, #160	; 0xa0
 8003370:	05db      	lsls	r3, r3, #23
 8003372:	695a      	ldr	r2, [r3, #20]
 8003374:	23a0      	movs	r3, #160	; 0xa0
 8003376:	05db      	lsls	r3, r3, #23
 8003378:	2180      	movs	r1, #128	; 0x80
 800337a:	430a      	orrs	r2, r1
 800337c:	615a      	str	r2, [r3, #20]

			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 800337e:	193b      	adds	r3, r7, r4
 8003380:	2200      	movs	r2, #0
 8003382:	801a      	strh	r2, [r3, #0]
 8003384:	e012      	b.n	80033ac <weoDrawRectangleFilled+0x15c>
//			for (i = 0; i < len;i++) {
				while(!(USART3->ISR & USART_ISR_TXE)){};
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	4b22      	ldr	r3, [pc, #136]	; (8003414 <weoDrawRectangleFilled+0x1c4>)
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	2280      	movs	r2, #128	; 0x80
 800338e:	4013      	ands	r3, r2
 8003390:	d0fa      	beq.n	8003388 <weoDrawRectangleFilled+0x138>
				USART3->TDR =MEM_Buffer[i];
 8003392:	210e      	movs	r1, #14
 8003394:	187b      	adds	r3, r7, r1
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800339a:	18d3      	adds	r3, r2, r3
 800339c:	781a      	ldrb	r2, [r3, #0]
 800339e:	4b1d      	ldr	r3, [pc, #116]	; (8003414 <weoDrawRectangleFilled+0x1c4>)
 80033a0:	629a      	str	r2, [r3, #40]	; 0x28
			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 80033a2:	187b      	adds	r3, r7, r1
 80033a4:	881a      	ldrh	r2, [r3, #0]
 80033a6:	187b      	adds	r3, r7, r1
 80033a8:	3201      	adds	r2, #1
 80033aa:	801a      	strh	r2, [r3, #0]
 80033ac:	230e      	movs	r3, #14
 80033ae:	18fb      	adds	r3, r7, r3
 80033b0:	881a      	ldrh	r2, [r3, #0]
 80033b2:	230b      	movs	r3, #11
 80033b4:	18fb      	adds	r3, r7, r3
 80033b6:	7819      	ldrb	r1, [r3, #0]
 80033b8:	230d      	movs	r3, #13
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	1acb      	subs	r3, r1, r3
 80033c0:	3301      	adds	r3, #1
 80033c2:	210a      	movs	r1, #10
 80033c4:	1879      	adds	r1, r7, r1
 80033c6:	7809      	ldrb	r1, [r1, #0]
 80033c8:	0849      	lsrs	r1, r1, #1
 80033ca:	b2c9      	uxtb	r1, r1
 80033cc:	0008      	movs	r0, r1
 80033ce:	210c      	movs	r1, #12
 80033d0:	1879      	adds	r1, r7, r1
 80033d2:	7809      	ldrb	r1, [r1, #0]
 80033d4:	0849      	lsrs	r1, r1, #1
 80033d6:	b2c9      	uxtb	r1, r1
 80033d8:	1a41      	subs	r1, r0, r1
 80033da:	3101      	adds	r1, #1
 80033dc:	434b      	muls	r3, r1
 80033de:	429a      	cmp	r2, r3
 80033e0:	dbd1      	blt.n	8003386 <weoDrawRectangleFilled+0x136>
			}
//			while(!(USART3->ISR & USART_ISR_TXE)){};
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 80033e2:	23a0      	movs	r3, #160	; 0xa0
 80033e4:	05db      	lsls	r3, r3, #23
 80033e6:	695a      	ldr	r2, [r3, #20]
 80033e8:	23a0      	movs	r3, #160	; 0xa0
 80033ea:	05db      	lsls	r3, r3, #23
 80033ec:	2180      	movs	r1, #128	; 0x80
 80033ee:	438a      	bics	r2, r1
 80033f0:	615a      	str	r2, [r3, #20]
//			USART_AS_SPI_sendCMD(0xBB);	// command for NOP
			HAL_Delay(1);
 80033f2:	2001      	movs	r0, #1
 80033f4:	f002 f9e4 	bl	80057c0 <HAL_Delay>
//			GPIOA->ODR &= ~(1 << 7);	//reset dc
			GPIOA->ODR |= 1 << 6;	//set cs
 80033f8:	23a0      	movs	r3, #160	; 0xa0
 80033fa:	05db      	lsls	r3, r3, #23
 80033fc:	695a      	ldr	r2, [r3, #20]
 80033fe:	23a0      	movs	r3, #160	; 0xa0
 8003400:	05db      	lsls	r3, r3, #23
 8003402:	2140      	movs	r1, #64	; 0x40
 8003404:	430a      	orrs	r2, r1
 8003406:	615a      	str	r2, [r3, #20]
 8003408:	e000      	b.n	800340c <weoDrawRectangleFilled+0x1bc>
				return;
 800340a:	46c0      	nop			; (mov r8, r8)
		}
 800340c:	46bd      	mov	sp, r7
 800340e:	b005      	add	sp, #20
 8003410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	40004800 	.word	0x40004800

08003418 <I2C_SOUND_ChangePage>:
//		LL_GPIO_ResetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
//		LL_GPIO_SetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
	}
	void I2C_SOUND_ChangePage(uint8_t pageNum) {
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af02      	add	r7, sp, #8
 800341e:	0002      	movs	r2, r0
 8003420:	1dfb      	adds	r3, r7, #7
 8003422:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { 0x00, pageNum };
 8003424:	210c      	movs	r1, #12
 8003426:	187b      	adds	r3, r7, r1
 8003428:	2200      	movs	r2, #0
 800342a:	701a      	strb	r2, [r3, #0]
 800342c:	187b      	adds	r3, r7, r1
 800342e:	1dfa      	adds	r2, r7, #7
 8003430:	7812      	ldrb	r2, [r2, #0]
 8003432:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);
 8003434:	187a      	adds	r2, r7, r1
 8003436:	4806      	ldr	r0, [pc, #24]	; (8003450 <I2C_SOUND_ChangePage+0x38>)
 8003438:	23fa      	movs	r3, #250	; 0xfa
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	2302      	movs	r3, #2
 8003440:	2130      	movs	r1, #48	; 0x30
 8003442:	f003 f9f7 	bl	8006834 <HAL_I2C_Master_Transmit>
	}
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	46bd      	mov	sp, r7
 800344a:	b004      	add	sp, #16
 800344c:	bd80      	pop	{r7, pc}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	20000144 	.word	0x20000144

08003454 <WriteReg_I2C_SOUND>:
	void WriteReg_I2C_SOUND(uint8_t reg, uint8_t data) {
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af02      	add	r7, sp, #8
 800345a:	0002      	movs	r2, r0
 800345c:	1dfb      	adds	r3, r7, #7
 800345e:	701a      	strb	r2, [r3, #0]
 8003460:	1dbb      	adds	r3, r7, #6
 8003462:	1c0a      	adds	r2, r1, #0
 8003464:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 8003466:	210c      	movs	r1, #12
 8003468:	187b      	adds	r3, r7, r1
 800346a:	1dfa      	adds	r2, r7, #7
 800346c:	7812      	ldrb	r2, [r2, #0]
 800346e:	701a      	strb	r2, [r3, #0]
 8003470:	187b      	adds	r3, r7, r1
 8003472:	1dba      	adds	r2, r7, #6
 8003474:	7812      	ldrb	r2, [r2, #0]
 8003476:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);	//(uint8_t*)&
 8003478:	187a      	adds	r2, r7, r1
 800347a:	4806      	ldr	r0, [pc, #24]	; (8003494 <WriteReg_I2C_SOUND+0x40>)
 800347c:	23fa      	movs	r3, #250	; 0xfa
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	2302      	movs	r3, #2
 8003484:	2130      	movs	r1, #48	; 0x30
 8003486:	f003 f9d5 	bl	8006834 <HAL_I2C_Master_Transmit>
	}
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	46bd      	mov	sp, r7
 800348e:	b004      	add	sp, #16
 8003490:	bd80      	pop	{r7, pc}
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	20000144 	.word	0x20000144

08003498 <soundSetup>:
	void soundSetup(void) {
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
		I2C_SOUND_ChangePage(0x00);
 800349c:	2000      	movs	r0, #0
 800349e:	f7ff ffbb 	bl	8003418 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x01);	//Assert Software reset (P0, R1, D0=1)
 80034a2:	2101      	movs	r1, #1
 80034a4:	2001      	movs	r0, #1
 80034a6:	f7ff ffd5 	bl	8003454 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 80034aa:	2001      	movs	r0, #1
 80034ac:	f7ff ffb4 	bl	8003418 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x02, 0x00);	//LDO output programmed as 1.8V and Level shifters powered up. (P1, R2, D5-D4=00, D3=0)
 80034b0:	2100      	movs	r1, #0
 80034b2:	2002      	movs	r0, #2
 80034b4:	f7ff ffce 	bl	8003454 <WriteReg_I2C_SOUND>
		HAL_Delay(15);
 80034b8:	200f      	movs	r0, #15
 80034ba:	f002 f981 	bl	80057c0 <HAL_Delay>
		I2C_SOUND_ChangePage(0x00);
 80034be:	2000      	movs	r0, #0
 80034c0:	f7ff ffaa 	bl	8003418 <I2C_SOUND_ChangePage>
	WriteReg_I2C_SOUND(0x04,0x03);//PLL_clkin = MCLK, codec_clkin = PLL_CLK, MCLK should be 11.2896MHz
 80034c4:	2103      	movs	r1, #3
 80034c6:	2004      	movs	r0, #4
 80034c8:	f7ff ffc4 	bl	8003454 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x05,0x91);//Power up PLL, set P=1, R=1
 80034cc:	2191      	movs	r1, #145	; 0x91
 80034ce:	2005      	movs	r0, #5
 80034d0:	f7ff ffc0 	bl	8003454 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x06,0x04);//Set J = 4
 80034d4:	2104      	movs	r1, #4
 80034d6:	2006      	movs	r0, #6
 80034d8:	f7ff ffbc 	bl	8003454 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x07,0x00);//SET D=0000
 80034dc:	2100      	movs	r1, #0
 80034de:	2007      	movs	r0, #7
 80034e0:	f7ff ffb8 	bl	8003454 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x08,0x00);//SET D=0000
 80034e4:	2100      	movs	r1, #0
 80034e6:	2008      	movs	r0, #8
 80034e8:	f7ff ffb4 	bl	8003454 <WriteReg_I2C_SOUND>
	HAL_Delay(15);
 80034ec:	200f      	movs	r0, #15
 80034ee:	f002 f967 	bl	80057c0 <HAL_Delay>
	WriteReg_I2C_SOUND(0x0B,0x84);//DAC NDAC Powered up, set NDAC = 4
 80034f2:	2184      	movs	r1, #132	; 0x84
 80034f4:	200b      	movs	r0, #11
 80034f6:	f7ff ffad 	bl	8003454 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0C,0x82);//DAC MDAC Powered up, set MDAC = 2
 80034fa:	2182      	movs	r1, #130	; 0x82
 80034fc:	200c      	movs	r0, #12
 80034fe:	f7ff ffa9 	bl	8003454 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0D,0x00);//DAC OSR(9:0)-> DOSR=128
 8003502:	2100      	movs	r1, #0
 8003504:	200d      	movs	r0, #13
 8003506:	f7ff ffa5 	bl	8003454 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0E,0x80);//DAC OSR(9:0)
 800350a:	2180      	movs	r1, #128	; 0x80
 800350c:	200e      	movs	r0, #14
 800350e:	f7ff ffa1 	bl	8003454 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x1B, 0x00);	//Codec Interface control Word length = 16bits, BCLK&WCLK inputs, I2S mode. (P0, R27, D7-D6=00, D5-D4=00, D3-D2=00)
 8003512:	2100      	movs	r1, #0
 8003514:	201b      	movs	r0, #27
 8003516:	f7ff ff9d 	bl	8003454 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x1C,0x00);//Data slot offset
 800351a:	2100      	movs	r1, #0
 800351c:	201c      	movs	r0, #28
 800351e:	f7ff ff99 	bl	8003454 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x3c,0x02);//Dac Instruction programming PRB #2 for Mono routing. Type interpolation (x8) and 3 programmable	Biquads. (P0, R60, D4-D0=0010)
 8003522:	2102      	movs	r1, #2
 8003524:	203c      	movs	r0, #60	; 0x3c
 8003526:	f7ff ff95 	bl	8003454 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 800352a:	2001      	movs	r0, #1
 800352c:	f7ff ff74 	bl	8003418 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x10);	//Master Reference Powered on (P1, R1, D4=1)
 8003530:	2110      	movs	r1, #16
 8003532:	2001      	movs	r0, #1
 8003534:	f7ff ff8e 	bl	8003454 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x0A, 0x00);	//Output common mode for DAC set to 0.9V (default) (P1, R10)
 8003538:	2100      	movs	r1, #0
 800353a:	200a      	movs	r0, #10
 800353c:	f7ff ff8a 	bl	8003454 <WriteReg_I2C_SOUND>
		////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x0C, 0x00);	// No analog routing to headphone//0x0c,0x15 by SB
 8003540:	2100      	movs	r1, #0
 8003542:	200c      	movs	r0, #12
 8003544:	f7ff ff86 	bl	8003454 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x16, 0x00);	// Headphone volume=0//0x16,0x75 by SB
 8003548:	2100      	movs	r1, #0
 800354a:	2016      	movs	r0, #22
 800354c:	f7ff ff82 	bl	8003454 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x18, 0x00);	//No need to enable Mixer M and Mixer P, AINL Voulme, 0dB Gain 0x18,0x75 by SB
 8003550:	2100      	movs	r1, #0
 8003552:	2018      	movs	r0, #24
 8003554:	f7ff ff7e 	bl	8003454 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x19, 0x00);	//No need to enable Mixer M and Mixer P, AINR Voulme, 0dB Gain 0x19,0x75 by SB
 8003558:	2100      	movs	r1, #0
 800355a:	2019      	movs	r0, #25
 800355c:	f7ff ff7a 	bl	8003454 <WriteReg_I2C_SOUND>
		//////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x09, 0x00);	//AINL,AINR are powered down
 8003560:	2100      	movs	r1, #0
 8003562:	2009      	movs	r0, #9
 8003564:	f7ff ff76 	bl	8003454 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 8003568:	2100      	movs	r1, #0
 800356a:	2010      	movs	r0, #16
 800356c:	f7ff ff72 	bl	8003454 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x00);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000)
 8003570:	2100      	movs	r1, #0
 8003572:	202e      	movs	r0, #46	; 0x2e
 8003574:	f7ff ff6e 	bl	8003454 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x30, 0x10);	//SPK driver Gain=6.0dB (P1, R48, D6-D4=001)
 8003578:	2110      	movs	r1, #16
 800357a:	2030      	movs	r0, #48	; 0x30
 800357c:	f7ff ff6a 	bl	8003454 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2D, 0x02);	//SPK powered up (P1, R45, D1=1)
 8003580:	2102      	movs	r1, #2
 8003582:	202d      	movs	r0, #45	; 0x2d
 8003584:	f7ff ff66 	bl	8003454 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 8003588:	2000      	movs	r0, #0
 800358a:	f7ff ff45 	bl	8003418 <I2C_SOUND_ChangePage>
		//////////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
 800358e:	2190      	movs	r1, #144	; 0x90
 8003590:	203f      	movs	r0, #63	; 0x3f
 8003592:	f7ff ff5f 	bl	8003454 <WriteReg_I2C_SOUND>
		// 1<<7|1<<4|2 by SB
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000) cnDacValueOn by SB
 8003596:	2100      	movs	r1, #0
 8003598:	2041      	movs	r0, #65	; 0x41
 800359a:	f7ff ff5b 	bl	8003454 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1) 1<<4 by SB
 800359e:	2104      	movs	r1, #4
 80035a0:	2040      	movs	r0, #64	; 0x40
 80035a2:	f7ff ff57 	bl	8003454 <WriteReg_I2C_SOUND>
	}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <answer2CPU>:
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 80035b4:	230f      	movs	r3, #15
 80035b6:	18fb      	adds	r3, r7, r3
 80035b8:	22ff      	movs	r2, #255	; 0xff
 80035ba:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 80035bc:	230d      	movs	r3, #13
 80035be:	18fb      	adds	r3, r7, r3
 80035c0:	2200      	movs	r2, #0
 80035c2:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		uint16_t ind = 0;
 80035c4:	230a      	movs	r3, #10
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	2200      	movs	r2, #0
 80035ca:	801a      	strh	r2, [r3, #0]

		cmd2Execute=0;
 80035cc:	4bd9      	ldr	r3, [pc, #868]	; (8003934 <answer2CPU+0x388>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	701a      	strb	r2, [r3, #0]
		cmd[0]&=~0x100;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	781a      	ldrb	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	701a      	strb	r2, [r3, #0]
		if ((cmd[0] == 0x11)||(cmd[0] == 0x12)||(cmd[0] == 0x13)||(cmd[0] == 0x14)||(cmd[0] == 0x15)) {GPIOC->ODR &= ~(1 << 6);}//reset BF
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b11      	cmp	r3, #17
 80035e0:	d00f      	beq.n	8003602 <answer2CPU+0x56>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b12      	cmp	r3, #18
 80035e8:	d00b      	beq.n	8003602 <answer2CPU+0x56>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b13      	cmp	r3, #19
 80035f0:	d007      	beq.n	8003602 <answer2CPU+0x56>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b14      	cmp	r3, #20
 80035f8:	d003      	beq.n	8003602 <answer2CPU+0x56>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b15      	cmp	r3, #21
 8003600:	d105      	bne.n	800360e <answer2CPU+0x62>
 8003602:	4bcd      	ldr	r3, [pc, #820]	; (8003938 <answer2CPU+0x38c>)
 8003604:	695a      	ldr	r2, [r3, #20]
 8003606:	4bcc      	ldr	r3, [pc, #816]	; (8003938 <answer2CPU+0x38c>)
 8003608:	2140      	movs	r1, #64	; 0x40
 800360a:	438a      	bics	r2, r1
 800360c:	615a      	str	r2, [r3, #20]
		if (cmd[0] == 0x11) {
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b11      	cmp	r3, #17
 8003614:	d105      	bne.n	8003622 <answer2CPU+0x76>
//			GPIOC->ODR &= ~(1 << 6);
			GPIOC->ODR &=~ GPIO_ODR_OD6;
 8003616:	4bc8      	ldr	r3, [pc, #800]	; (8003938 <answer2CPU+0x38c>)
 8003618:	695a      	ldr	r2, [r3, #20]
 800361a:	4bc7      	ldr	r3, [pc, #796]	; (8003938 <answer2CPU+0x38c>)
 800361c:	2140      	movs	r1, #64	; 0x40
 800361e:	438a      	bics	r2, r1
 8003620:	615a      	str	r2, [r3, #20]
		}//reset BF
		ans[0] = cmd[0]|0x80;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2280      	movs	r2, #128	; 0x80
 8003628:	4252      	negs	r2, r2
 800362a:	4313      	orrs	r3, r2
 800362c:	b2db      	uxtb	r3, r3
 800362e:	b29a      	uxth	r2, r3
 8003630:	4bc2      	ldr	r3, [pc, #776]	; (800393c <answer2CPU+0x390>)
 8003632:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b0f      	cmp	r3, #15
 800363a:	d800      	bhi.n	800363e <answer2CPU+0x92>
 800363c:	e165      	b.n	800390a <answer2CPU+0x35e>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b15      	cmp	r3, #21
 8003644:	d900      	bls.n	8003648 <answer2CPU+0x9c>
 8003646:	e160      	b.n	800390a <answer2CPU+0x35e>
//		if (cmd[0] != 0x10) {
//			GPIOC->ODR &= ~(1 << 6);
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 8003648:	23a0      	movs	r3, #160	; 0xa0
 800364a:	05db      	lsls	r3, r3, #23
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	2210      	movs	r2, #16
 8003650:	4013      	ands	r3, r2
 8003652:	d106      	bne.n	8003662 <answer2CPU+0xb6>
					keyboard &= 0b11111110;
 8003654:	220f      	movs	r2, #15
 8003656:	18bb      	adds	r3, r7, r2
 8003658:	18ba      	adds	r2, r7, r2
 800365a:	7812      	ldrb	r2, [r2, #0]
 800365c:	2101      	movs	r1, #1
 800365e:	438a      	bics	r2, r1
 8003660:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 8003662:	23a0      	movs	r3, #160	; 0xa0
 8003664:	05db      	lsls	r3, r3, #23
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	2202      	movs	r2, #2
 800366a:	4013      	ands	r3, r2
 800366c:	d106      	bne.n	800367c <answer2CPU+0xd0>
					keyboard &= 0b11111101;
 800366e:	220f      	movs	r2, #15
 8003670:	18bb      	adds	r3, r7, r2
 8003672:	18ba      	adds	r2, r7, r2
 8003674:	7812      	ldrb	r2, [r2, #0]
 8003676:	2102      	movs	r1, #2
 8003678:	438a      	bics	r2, r1
 800367a:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 800367c:	23a0      	movs	r3, #160	; 0xa0
 800367e:	05db      	lsls	r3, r3, #23
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	2201      	movs	r2, #1
 8003684:	4013      	ands	r3, r2
 8003686:	d106      	bne.n	8003696 <answer2CPU+0xea>
					keyboard &= 0b11111011;
 8003688:	220f      	movs	r2, #15
 800368a:	18bb      	adds	r3, r7, r2
 800368c:	18ba      	adds	r2, r7, r2
 800368e:	7812      	ldrb	r2, [r2, #0]
 8003690:	2104      	movs	r1, #4
 8003692:	438a      	bics	r2, r1
 8003694:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 8003696:	23a0      	movs	r3, #160	; 0xa0
 8003698:	05db      	lsls	r3, r3, #23
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	2380      	movs	r3, #128	; 0x80
 800369e:	019b      	lsls	r3, r3, #6
 80036a0:	4013      	ands	r3, r2
 80036a2:	d106      	bne.n	80036b2 <answer2CPU+0x106>
					keyboard &= 0b11110111;
 80036a4:	220f      	movs	r2, #15
 80036a6:	18bb      	adds	r3, r7, r2
 80036a8:	18ba      	adds	r2, r7, r2
 80036aa:	7812      	ldrb	r2, [r2, #0]
 80036ac:	2108      	movs	r1, #8
 80036ae:	438a      	bics	r2, r1
 80036b0:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 80036b2:	23a0      	movs	r3, #160	; 0xa0
 80036b4:	05db      	lsls	r3, r3, #23
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	2380      	movs	r3, #128	; 0x80
 80036ba:	01db      	lsls	r3, r3, #7
 80036bc:	4013      	ands	r3, r2
 80036be:	d106      	bne.n	80036ce <answer2CPU+0x122>
					keyboard &= 0b11101111;
 80036c0:	220f      	movs	r2, #15
 80036c2:	18bb      	adds	r3, r7, r2
 80036c4:	18ba      	adds	r2, r7, r2
 80036c6:	7812      	ldrb	r2, [r2, #0]
 80036c8:	2110      	movs	r1, #16
 80036ca:	438a      	bics	r2, r1
 80036cc:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 80036ce:	210f      	movs	r1, #15
 80036d0:	187b      	adds	r3, r7, r1
 80036d2:	187a      	adds	r2, r7, r1
 80036d4:	7812      	ldrb	r2, [r2, #0]
 80036d6:	43d2      	mvns	r2, r2
 80036d8:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 80036da:	2009      	movs	r0, #9
 80036dc:	183b      	adds	r3, r7, r0
 80036de:	2204      	movs	r2, #4
 80036e0:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 80036e2:	183b      	adds	r3, r7, r0
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	3b02      	subs	r3, #2
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	4b93      	ldr	r3, [pc, #588]	; (800393c <answer2CPU+0x390>)
 80036ee:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 80036f0:	187b      	adds	r3, r7, r1
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	4b91      	ldr	r3, [pc, #580]	; (800393c <answer2CPU+0x390>)
 80036f8:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 80036fa:	230e      	movs	r3, #14
 80036fc:	18fb      	adds	r3, r7, r3
 80036fe:	2200      	movs	r2, #0
 8003700:	701a      	strb	r2, [r3, #0]
 8003702:	e011      	b.n	8003728 <answer2CPU+0x17c>
					myCS = myCS + ans[i];
 8003704:	200e      	movs	r0, #14
 8003706:	183b      	adds	r3, r7, r0
 8003708:	781a      	ldrb	r2, [r3, #0]
 800370a:	4b8c      	ldr	r3, [pc, #560]	; (800393c <answer2CPU+0x390>)
 800370c:	0052      	lsls	r2, r2, #1
 800370e:	5ad3      	ldrh	r3, [r2, r3]
 8003710:	b2d9      	uxtb	r1, r3
 8003712:	220d      	movs	r2, #13
 8003714:	18bb      	adds	r3, r7, r2
 8003716:	18ba      	adds	r2, r7, r2
 8003718:	7812      	ldrb	r2, [r2, #0]
 800371a:	188a      	adds	r2, r1, r2
 800371c:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 800371e:	183b      	adds	r3, r7, r0
 8003720:	781a      	ldrb	r2, [r3, #0]
 8003722:	183b      	adds	r3, r7, r0
 8003724:	3201      	adds	r2, #1
 8003726:	701a      	strb	r2, [r3, #0]
 8003728:	200e      	movs	r0, #14
 800372a:	183b      	adds	r3, r7, r0
 800372c:	781a      	ldrb	r2, [r3, #0]
 800372e:	2309      	movs	r3, #9
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	3b01      	subs	r3, #1
 8003736:	429a      	cmp	r2, r3
 8003738:	dbe4      	blt.n	8003704 <answer2CPU+0x158>
				}
				myCS = 0 - myCS;
 800373a:	210d      	movs	r1, #13
 800373c:	187b      	adds	r3, r7, r1
 800373e:	187a      	adds	r2, r7, r1
 8003740:	7812      	ldrb	r2, [r2, #0]
 8003742:	4252      	negs	r2, r2
 8003744:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 8003746:	187b      	adds	r3, r7, r1
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	b29a      	uxth	r2, r3
 800374c:	4b7b      	ldr	r3, [pc, #492]	; (800393c <answer2CPU+0x390>)
 800374e:	80da      	strh	r2, [r3, #6]
				i=0;
 8003750:	183b      	adds	r3, r7, r0
 8003752:	2200      	movs	r2, #0
 8003754:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================
				USART2->CR1 &= ~USART_CR1_RE;
 8003756:	4b7a      	ldr	r3, [pc, #488]	; (8003940 <answer2CPU+0x394>)
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	4b79      	ldr	r3, [pc, #484]	; (8003940 <answer2CPU+0x394>)
 800375c:	2104      	movs	r1, #4
 800375e:	438a      	bics	r2, r1
 8003760:	601a      	str	r2, [r3, #0]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	4b76      	ldr	r3, [pc, #472]	; (8003940 <answer2CPU+0x394>)
 8003766:	69db      	ldr	r3, [r3, #28]
 8003768:	2280      	movs	r2, #128	; 0x80
 800376a:	4013      	ands	r3, r2
 800376c:	d0fa      	beq.n	8003764 <answer2CPU+0x1b8>
				USART2->TDR = ans[0]|0x0100;
 800376e:	4b73      	ldr	r3, [pc, #460]	; (800393c <answer2CPU+0x390>)
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	2280      	movs	r2, #128	; 0x80
 8003774:	0052      	lsls	r2, r2, #1
 8003776:	4313      	orrs	r3, r2
 8003778:	b29a      	uxth	r2, r3
 800377a:	4b71      	ldr	r3, [pc, #452]	; (8003940 <answer2CPU+0x394>)
 800377c:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 800377e:	230e      	movs	r3, #14
 8003780:	18fb      	adds	r3, r7, r3
 8003782:	2201      	movs	r2, #1
 8003784:	701a      	strb	r2, [r3, #0]
 8003786:	e013      	b.n	80037b0 <answer2CPU+0x204>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8003788:	46c0      	nop			; (mov r8, r8)
 800378a:	4b6d      	ldr	r3, [pc, #436]	; (8003940 <answer2CPU+0x394>)
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	2280      	movs	r2, #128	; 0x80
 8003790:	4013      	ands	r3, r2
 8003792:	d0fa      	beq.n	800378a <answer2CPU+0x1de>
				    USART2->TDR = (uint8_t)ans[i];
 8003794:	210e      	movs	r1, #14
 8003796:	187b      	adds	r3, r7, r1
 8003798:	781a      	ldrb	r2, [r3, #0]
 800379a:	4b68      	ldr	r3, [pc, #416]	; (800393c <answer2CPU+0x390>)
 800379c:	0052      	lsls	r2, r2, #1
 800379e:	5ad3      	ldrh	r3, [r2, r3]
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	4b67      	ldr	r3, [pc, #412]	; (8003940 <answer2CPU+0x394>)
 80037a4:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 80037a6:	187b      	adds	r3, r7, r1
 80037a8:	781a      	ldrb	r2, [r3, #0]
 80037aa:	187b      	adds	r3, r7, r1
 80037ac:	3201      	adds	r2, #1
 80037ae:	701a      	strb	r2, [r3, #0]
 80037b0:	230e      	movs	r3, #14
 80037b2:	18fa      	adds	r2, r7, r3
 80037b4:	2309      	movs	r3, #9
 80037b6:	18fb      	adds	r3, r7, r3
 80037b8:	7812      	ldrb	r2, [r2, #0]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d3e3      	bcc.n	8003788 <answer2CPU+0x1dc>
				  }
				USART2->CR1 |= USART_CR1_RE;
 80037c0:	4b5f      	ldr	r3, [pc, #380]	; (8003940 <answer2CPU+0x394>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	4b5e      	ldr	r3, [pc, #376]	; (8003940 <answer2CPU+0x394>)
 80037c6:	2104      	movs	r1, #4
 80037c8:	430a      	orrs	r2, r1
 80037ca:	601a      	str	r2, [r3, #0]
//				BFEN=1;
//=======================================================================================================================================
				if (cmd[0] == 0x11) {//Show full screen background;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	2b11      	cmp	r3, #17
 80037d2:	d109      	bne.n	80037e8 <answer2CPU+0x23c>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					picNum = cmd[2];
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	789a      	ldrb	r2, [r3, #2]
 80037d8:	4b5a      	ldr	r3, [pc, #360]	; (8003944 <answer2CPU+0x398>)
 80037da:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 80037dc:	4b55      	ldr	r3, [pc, #340]	; (8003934 <answer2CPU+0x388>)
 80037de:	2211      	movs	r2, #17
 80037e0:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80037e2:	4b59      	ldr	r3, [pc, #356]	; (8003948 <answer2CPU+0x39c>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b12      	cmp	r3, #18
 80037ee:	d115      	bne.n	800381c <answer2CPU+0x270>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3302      	adds	r3, #2
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	001a      	movs	r2, r3
 80037f8:	4b54      	ldr	r3, [pc, #336]	; (800394c <answer2CPU+0x3a0>)
 80037fa:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3303      	adds	r3, #3
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	001a      	movs	r2, r3
 8003804:	4b52      	ldr	r3, [pc, #328]	; (8003950 <answer2CPU+0x3a4>)
 8003806:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	791a      	ldrb	r2, [r3, #4]
 800380c:	4b4d      	ldr	r3, [pc, #308]	; (8003944 <answer2CPU+0x398>)
 800380e:	701a      	strb	r2, [r3, #0]
//					weoShowSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 8003810:	4b48      	ldr	r3, [pc, #288]	; (8003934 <answer2CPU+0x388>)
 8003812:	2212      	movs	r2, #18
 8003814:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8003816:	4b4c      	ldr	r3, [pc, #304]	; (8003948 <answer2CPU+0x39c>)
 8003818:	2200      	movs	r2, #0
 800381a:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b13      	cmp	r3, #19
 8003822:	d140      	bne.n	80038a6 <answer2CPU+0x2fa>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3302      	adds	r3, #2
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	001a      	movs	r2, r3
 800382c:	4b47      	ldr	r3, [pc, #284]	; (800394c <answer2CPU+0x3a0>)
 800382e:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3303      	adds	r3, #3
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	001a      	movs	r2, r3
 8003838:	4b45      	ldr	r3, [pc, #276]	; (8003950 <answer2CPU+0x3a4>)
 800383a:	601a      	str	r2, [r3, #0]
					fontInfo= cmd[4];
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	791a      	ldrb	r2, [r3, #4]
 8003840:	4b44      	ldr	r3, [pc, #272]	; (8003954 <answer2CPU+0x3a8>)
 8003842:	701a      	strb	r2, [r3, #0]
					color=fontInfo|0xF0;
 8003844:	4b43      	ldr	r3, [pc, #268]	; (8003954 <answer2CPU+0x3a8>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	2210      	movs	r2, #16
 800384a:	4252      	negs	r2, r2
 800384c:	4313      	orrs	r3, r2
 800384e:	b2da      	uxtb	r2, r3
 8003850:	4b41      	ldr	r3, [pc, #260]	; (8003958 <answer2CPU+0x3ac>)
 8003852:	701a      	strb	r2, [r3, #0]
					strLen = cmd[1] -0x03;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3301      	adds	r3, #1
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	3b03      	subs	r3, #3
 800385c:	b2da      	uxtb	r2, r3
 800385e:	4b3f      	ldr	r3, [pc, #252]	; (800395c <answer2CPU+0x3b0>)
 8003860:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 8003862:	230e      	movs	r3, #14
 8003864:	18fb      	adds	r3, r7, r3
 8003866:	2200      	movs	r2, #0
 8003868:	701a      	strb	r2, [r3, #0]
 800386a:	e00f      	b.n	800388c <answer2CPU+0x2e0>
					dataASCII[i] = cmd[i+5];
 800386c:	200e      	movs	r0, #14
 800386e:	183b      	adds	r3, r7, r0
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	3305      	adds	r3, #5
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	18d2      	adds	r2, r2, r3
 8003878:	183b      	adds	r3, r7, r0
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	7811      	ldrb	r1, [r2, #0]
 800387e:	4a38      	ldr	r2, [pc, #224]	; (8003960 <answer2CPU+0x3b4>)
 8003880:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 8003882:	183b      	adds	r3, r7, r0
 8003884:	781a      	ldrb	r2, [r3, #0]
 8003886:	183b      	adds	r3, r7, r0
 8003888:	3201      	adds	r2, #1
 800388a:	701a      	strb	r2, [r3, #0]
 800388c:	4b33      	ldr	r3, [pc, #204]	; (800395c <answer2CPU+0x3b0>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	220e      	movs	r2, #14
 8003892:	18ba      	adds	r2, r7, r2
 8003894:	7812      	ldrb	r2, [r2, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d3e8      	bcc.n	800386c <answer2CPU+0x2c0>
				}
					cmd2Execute=0x13;
 800389a:	4b26      	ldr	r3, [pc, #152]	; (8003934 <answer2CPU+0x388>)
 800389c:	2213      	movs	r2, #19
 800389e:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80038a0:	4b29      	ldr	r3, [pc, #164]	; (8003948 <answer2CPU+0x39c>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2b14      	cmp	r3, #20
 80038ac:	d109      	bne.n	80038c2 <answer2CPU+0x316>
					numSound = cmd[2];
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	789a      	ldrb	r2, [r3, #2]
 80038b2:	4b2c      	ldr	r3, [pc, #176]	; (8003964 <answer2CPU+0x3b8>)
 80038b4:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 80038b6:	4b1f      	ldr	r3, [pc, #124]	; (8003934 <answer2CPU+0x388>)
 80038b8:	2214      	movs	r2, #20
 80038ba:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80038bc:	4b22      	ldr	r3, [pc, #136]	; (8003948 <answer2CPU+0x39c>)
 80038be:	2200      	movs	r2, #0
 80038c0:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b15      	cmp	r3, #21
 80038c8:	d10d      	bne.n	80038e6 <answer2CPU+0x33a>
					volume = cmd[2];
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	789a      	ldrb	r2, [r3, #2]
 80038ce:	4b26      	ldr	r3, [pc, #152]	; (8003968 <answer2CPU+0x3bc>)
 80038d0:	701a      	strb	r2, [r3, #0]
					contrast = cmd[3];
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	78da      	ldrb	r2, [r3, #3]
 80038d6:	4b25      	ldr	r3, [pc, #148]	; (800396c <answer2CPU+0x3c0>)
 80038d8:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 80038da:	4b16      	ldr	r3, [pc, #88]	; (8003934 <answer2CPU+0x388>)
 80038dc:	2215      	movs	r2, #21
 80038de:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80038e0:	4b19      	ldr	r3, [pc, #100]	; (8003948 <answer2CPU+0x39c>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b16      	cmp	r3, #22
 80038ec:	d10d      	bne.n	800390a <answer2CPU+0x35e>
					volume = cmd[3];
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	78da      	ldrb	r2, [r3, #3]
 80038f2:	4b1d      	ldr	r3, [pc, #116]	; (8003968 <answer2CPU+0x3bc>)
 80038f4:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	791a      	ldrb	r2, [r3, #4]
 80038fa:	4b1c      	ldr	r3, [pc, #112]	; (800396c <answer2CPU+0x3c0>)
 80038fc:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 80038fe:	4b0d      	ldr	r3, [pc, #52]	; (8003934 <answer2CPU+0x388>)
 8003900:	2216      	movs	r2, #22
 8003902:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8003904:	4b10      	ldr	r3, [pc, #64]	; (8003948 <answer2CPU+0x39c>)
 8003906:	2200      	movs	r2, #0
 8003908:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d000      	beq.n	8003914 <answer2CPU+0x368>
 8003912:	e09d      	b.n	8003a50 <answer2CPU+0x4a4>
				myLength = 0x14; //20 bytes length answer
 8003914:	2109      	movs	r1, #9
 8003916:	187b      	adds	r3, r7, r1
 8003918:	2214      	movs	r2, #20
 800391a:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 800391c:	187b      	adds	r3, r7, r1
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b02      	subs	r3, #2
 8003924:	b29a      	uxth	r2, r3
 8003926:	4b05      	ldr	r3, [pc, #20]	; (800393c <answer2CPU+0x390>)
 8003928:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 800392a:	230e      	movs	r3, #14
 800392c:	18fb      	adds	r3, r7, r3
 800392e:	2200      	movs	r2, #0
 8003930:	701a      	strb	r2, [r3, #0]
 8003932:	e02e      	b.n	8003992 <answer2CPU+0x3e6>
 8003934:	2000137b 	.word	0x2000137b
 8003938:	50000800 	.word	0x50000800
 800393c:	200013c8 	.word	0x200013c8
 8003940:	40004400 	.word	0x40004400
 8003944:	2000137a 	.word	0x2000137a
 8003948:	200013dc 	.word	0x200013dc
 800394c:	20000204 	.word	0x20000204
 8003950:	20000298 	.word	0x20000298
 8003954:	20000195 	.word	0x20000195
 8003958:	20001379 	.word	0x20001379
 800395c:	200013c5 	.word	0x200013c5
 8003960:	200000a4 	.word	0x200000a4
 8003964:	20001445 	.word	0x20001445
 8003968:	20000202 	.word	0x20000202
 800396c:	20000304 	.word	0x20000304
					ans[i + 2] = PCB_type[i];
 8003970:	200e      	movs	r0, #14
 8003972:	183b      	adds	r3, r7, r0
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	4acb      	ldr	r2, [pc, #812]	; (8003ca4 <answer2CPU+0x6f8>)
 8003978:	5cd1      	ldrb	r1, [r2, r3]
 800397a:	183b      	adds	r3, r7, r0
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	1c9a      	adds	r2, r3, #2
 8003980:	b289      	uxth	r1, r1
 8003982:	4bc9      	ldr	r3, [pc, #804]	; (8003ca8 <answer2CPU+0x6fc>)
 8003984:	0052      	lsls	r2, r2, #1
 8003986:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8003988:	183b      	adds	r3, r7, r0
 800398a:	781a      	ldrb	r2, [r3, #0]
 800398c:	183b      	adds	r3, r7, r0
 800398e:	3201      	adds	r2, #1
 8003990:	701a      	strb	r2, [r3, #0]
 8003992:	220e      	movs	r2, #14
 8003994:	18bb      	adds	r3, r7, r2
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2b10      	cmp	r3, #16
 800399a:	d9e9      	bls.n	8003970 <answer2CPU+0x3c4>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 800399c:	18bb      	adds	r3, r7, r2
 800399e:	2200      	movs	r2, #0
 80039a0:	701a      	strb	r2, [r3, #0]
 80039a2:	e011      	b.n	80039c8 <answer2CPU+0x41c>
					myCS = myCS + ans[i];
 80039a4:	200e      	movs	r0, #14
 80039a6:	183b      	adds	r3, r7, r0
 80039a8:	781a      	ldrb	r2, [r3, #0]
 80039aa:	4bbf      	ldr	r3, [pc, #764]	; (8003ca8 <answer2CPU+0x6fc>)
 80039ac:	0052      	lsls	r2, r2, #1
 80039ae:	5ad3      	ldrh	r3, [r2, r3]
 80039b0:	b2d9      	uxtb	r1, r3
 80039b2:	220d      	movs	r2, #13
 80039b4:	18bb      	adds	r3, r7, r2
 80039b6:	18ba      	adds	r2, r7, r2
 80039b8:	7812      	ldrb	r2, [r2, #0]
 80039ba:	188a      	adds	r2, r1, r2
 80039bc:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 80039be:	183b      	adds	r3, r7, r0
 80039c0:	781a      	ldrb	r2, [r3, #0]
 80039c2:	183b      	adds	r3, r7, r0
 80039c4:	3201      	adds	r2, #1
 80039c6:	701a      	strb	r2, [r3, #0]
 80039c8:	230e      	movs	r3, #14
 80039ca:	18fb      	adds	r3, r7, r3
 80039cc:	781a      	ldrb	r2, [r3, #0]
 80039ce:	2009      	movs	r0, #9
 80039d0:	183b      	adds	r3, r7, r0
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	3b01      	subs	r3, #1
 80039d6:	429a      	cmp	r2, r3
 80039d8:	dbe4      	blt.n	80039a4 <answer2CPU+0x3f8>
				}
				myCS = 0 - myCS;
 80039da:	210d      	movs	r1, #13
 80039dc:	187b      	adds	r3, r7, r1
 80039de:	187a      	adds	r2, r7, r1
 80039e0:	7812      	ldrb	r2, [r2, #0]
 80039e2:	4252      	negs	r2, r2
 80039e4:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 80039e6:	183b      	adds	r3, r7, r0
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	1e5a      	subs	r2, r3, #1
 80039ec:	187b      	adds	r3, r7, r1
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	b299      	uxth	r1, r3
 80039f2:	4bad      	ldr	r3, [pc, #692]	; (8003ca8 <answer2CPU+0x6fc>)
 80039f4:	0052      	lsls	r2, r2, #1
 80039f6:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 80039f8:	46c0      	nop			; (mov r8, r8)
 80039fa:	4bac      	ldr	r3, [pc, #688]	; (8003cac <answer2CPU+0x700>)
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	2280      	movs	r2, #128	; 0x80
 8003a00:	4013      	ands	r3, r2
 8003a02:	d0fa      	beq.n	80039fa <answer2CPU+0x44e>
				USART2->TDR = ans[0]|0x0100;
 8003a04:	4ba8      	ldr	r3, [pc, #672]	; (8003ca8 <answer2CPU+0x6fc>)
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	2280      	movs	r2, #128	; 0x80
 8003a0a:	0052      	lsls	r2, r2, #1
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	4ba6      	ldr	r3, [pc, #664]	; (8003cac <answer2CPU+0x700>)
 8003a12:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8003a14:	e014      	b.n	8003a40 <answer2CPU+0x494>
				  {
				    i++;
 8003a16:	210e      	movs	r1, #14
 8003a18:	187b      	adds	r3, r7, r1
 8003a1a:	781a      	ldrb	r2, [r3, #0]
 8003a1c:	187b      	adds	r3, r7, r1
 8003a1e:	3201      	adds	r2, #1
 8003a20:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8003a22:	46c0      	nop			; (mov r8, r8)
 8003a24:	4ba1      	ldr	r3, [pc, #644]	; (8003cac <answer2CPU+0x700>)
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	2280      	movs	r2, #128	; 0x80
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	d0fa      	beq.n	8003a24 <answer2CPU+0x478>
				    USART2->TDR = (uint8_t)ans[i];
 8003a2e:	230e      	movs	r3, #14
 8003a30:	18fb      	adds	r3, r7, r3
 8003a32:	781a      	ldrb	r2, [r3, #0]
 8003a34:	4b9c      	ldr	r3, [pc, #624]	; (8003ca8 <answer2CPU+0x6fc>)
 8003a36:	0052      	lsls	r2, r2, #1
 8003a38:	5ad3      	ldrh	r3, [r2, r3]
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	4b9b      	ldr	r3, [pc, #620]	; (8003cac <answer2CPU+0x700>)
 8003a3e:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8003a40:	230e      	movs	r3, #14
 8003a42:	18fb      	adds	r3, r7, r3
 8003a44:	781a      	ldrb	r2, [r3, #0]
 8003a46:	4b98      	ldr	r3, [pc, #608]	; (8003ca8 <answer2CPU+0x6fc>)
 8003a48:	0052      	lsls	r2, r2, #1
 8003a4a:	5ad3      	ldrh	r3, [r2, r3]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1e2      	bne.n	8003a16 <answer2CPU+0x46a>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d000      	beq.n	8003a5a <answer2CPU+0x4ae>
 8003a58:	e07f      	b.n	8003b5a <answer2CPU+0x5ae>
				myLength = 0x0B; //19 bytes length answer
 8003a5a:	2109      	movs	r1, #9
 8003a5c:	187b      	adds	r3, r7, r1
 8003a5e:	220b      	movs	r2, #11
 8003a60:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003a62:	187b      	adds	r3, r7, r1
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	3b02      	subs	r3, #2
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	4b8e      	ldr	r3, [pc, #568]	; (8003ca8 <answer2CPU+0x6fc>)
 8003a6e:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8003a70:	230e      	movs	r3, #14
 8003a72:	18fb      	adds	r3, r7, r3
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
 8003a78:	e010      	b.n	8003a9c <answer2CPU+0x4f0>
					ans[i + 2] = PCB_rev[i];
 8003a7a:	200e      	movs	r0, #14
 8003a7c:	183b      	adds	r3, r7, r0
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	4a8b      	ldr	r2, [pc, #556]	; (8003cb0 <answer2CPU+0x704>)
 8003a82:	5cd1      	ldrb	r1, [r2, r3]
 8003a84:	183b      	adds	r3, r7, r0
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	1c9a      	adds	r2, r3, #2
 8003a8a:	b289      	uxth	r1, r1
 8003a8c:	4b86      	ldr	r3, [pc, #536]	; (8003ca8 <answer2CPU+0x6fc>)
 8003a8e:	0052      	lsls	r2, r2, #1
 8003a90:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8003a92:	183b      	adds	r3, r7, r0
 8003a94:	781a      	ldrb	r2, [r3, #0]
 8003a96:	183b      	adds	r3, r7, r0
 8003a98:	3201      	adds	r2, #1
 8003a9a:	701a      	strb	r2, [r3, #0]
 8003a9c:	220e      	movs	r2, #14
 8003a9e:	18bb      	adds	r3, r7, r2
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b10      	cmp	r3, #16
 8003aa4:	d9e9      	bls.n	8003a7a <answer2CPU+0x4ce>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8003aa6:	18bb      	adds	r3, r7, r2
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	701a      	strb	r2, [r3, #0]
 8003aac:	e011      	b.n	8003ad2 <answer2CPU+0x526>
					myCS = myCS + ans[i];
 8003aae:	200e      	movs	r0, #14
 8003ab0:	183b      	adds	r3, r7, r0
 8003ab2:	781a      	ldrb	r2, [r3, #0]
 8003ab4:	4b7c      	ldr	r3, [pc, #496]	; (8003ca8 <answer2CPU+0x6fc>)
 8003ab6:	0052      	lsls	r2, r2, #1
 8003ab8:	5ad3      	ldrh	r3, [r2, r3]
 8003aba:	b2d9      	uxtb	r1, r3
 8003abc:	220d      	movs	r2, #13
 8003abe:	18bb      	adds	r3, r7, r2
 8003ac0:	18ba      	adds	r2, r7, r2
 8003ac2:	7812      	ldrb	r2, [r2, #0]
 8003ac4:	188a      	adds	r2, r1, r2
 8003ac6:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8003ac8:	183b      	adds	r3, r7, r0
 8003aca:	781a      	ldrb	r2, [r3, #0]
 8003acc:	183b      	adds	r3, r7, r0
 8003ace:	3201      	adds	r2, #1
 8003ad0:	701a      	strb	r2, [r3, #0]
 8003ad2:	230e      	movs	r3, #14
 8003ad4:	18fb      	adds	r3, r7, r3
 8003ad6:	781a      	ldrb	r2, [r3, #0]
 8003ad8:	2009      	movs	r0, #9
 8003ada:	183b      	adds	r3, r7, r0
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	dbe4      	blt.n	8003aae <answer2CPU+0x502>
				}
				myCS = 0 - myCS;
 8003ae4:	210d      	movs	r1, #13
 8003ae6:	187b      	adds	r3, r7, r1
 8003ae8:	187a      	adds	r2, r7, r1
 8003aea:	7812      	ldrb	r2, [r2, #0]
 8003aec:	4252      	negs	r2, r2
 8003aee:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003af0:	183b      	adds	r3, r7, r0
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	1e5a      	subs	r2, r3, #1
 8003af6:	187b      	adds	r3, r7, r1
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	b299      	uxth	r1, r3
 8003afc:	4b6a      	ldr	r3, [pc, #424]	; (8003ca8 <answer2CPU+0x6fc>)
 8003afe:	0052      	lsls	r2, r2, #1
 8003b00:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	4b69      	ldr	r3, [pc, #420]	; (8003cac <answer2CPU+0x700>)
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	2280      	movs	r2, #128	; 0x80
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d0fa      	beq.n	8003b04 <answer2CPU+0x558>
				USART2->TDR = ans[0]|0x0100;
 8003b0e:	4b66      	ldr	r3, [pc, #408]	; (8003ca8 <answer2CPU+0x6fc>)
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	2280      	movs	r2, #128	; 0x80
 8003b14:	0052      	lsls	r2, r2, #1
 8003b16:	4313      	orrs	r3, r2
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	4b64      	ldr	r3, [pc, #400]	; (8003cac <answer2CPU+0x700>)
 8003b1c:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8003b1e:	e014      	b.n	8003b4a <answer2CPU+0x59e>
					  {
					    i++;
 8003b20:	210e      	movs	r1, #14
 8003b22:	187b      	adds	r3, r7, r1
 8003b24:	781a      	ldrb	r2, [r3, #0]
 8003b26:	187b      	adds	r3, r7, r1
 8003b28:	3201      	adds	r2, #1
 8003b2a:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8003b2c:	46c0      	nop			; (mov r8, r8)
 8003b2e:	4b5f      	ldr	r3, [pc, #380]	; (8003cac <answer2CPU+0x700>)
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	2280      	movs	r2, #128	; 0x80
 8003b34:	4013      	ands	r3, r2
 8003b36:	d0fa      	beq.n	8003b2e <answer2CPU+0x582>
					    USART2->TDR = (uint8_t)ans[i];
 8003b38:	230e      	movs	r3, #14
 8003b3a:	18fb      	adds	r3, r7, r3
 8003b3c:	781a      	ldrb	r2, [r3, #0]
 8003b3e:	4b5a      	ldr	r3, [pc, #360]	; (8003ca8 <answer2CPU+0x6fc>)
 8003b40:	0052      	lsls	r2, r2, #1
 8003b42:	5ad3      	ldrh	r3, [r2, r3]
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	4b59      	ldr	r3, [pc, #356]	; (8003cac <answer2CPU+0x700>)
 8003b48:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8003b4a:	230e      	movs	r3, #14
 8003b4c:	18fb      	adds	r3, r7, r3
 8003b4e:	781a      	ldrb	r2, [r3, #0]
 8003b50:	4b55      	ldr	r3, [pc, #340]	; (8003ca8 <answer2CPU+0x6fc>)
 8003b52:	0052      	lsls	r2, r2, #1
 8003b54:	5ad3      	ldrh	r3, [r2, r3]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1e2      	bne.n	8003b20 <answer2CPU+0x574>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d000      	beq.n	8003b64 <answer2CPU+0x5b8>
 8003b62:	e07f      	b.n	8003c64 <answer2CPU+0x6b8>
				myLength = 0x13; //19 bytes length answer
 8003b64:	2109      	movs	r1, #9
 8003b66:	187b      	adds	r3, r7, r1
 8003b68:	2213      	movs	r2, #19
 8003b6a:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003b6c:	187b      	adds	r3, r7, r1
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	3b02      	subs	r3, #2
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	4b4c      	ldr	r3, [pc, #304]	; (8003ca8 <answer2CPU+0x6fc>)
 8003b78:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8003b7a:	230e      	movs	r3, #14
 8003b7c:	18fb      	adds	r3, r7, r3
 8003b7e:	2200      	movs	r2, #0
 8003b80:	701a      	strb	r2, [r3, #0]
 8003b82:	e010      	b.n	8003ba6 <answer2CPU+0x5fa>
					ans[i + 2] = EmitterSN[i];
 8003b84:	200e      	movs	r0, #14
 8003b86:	183b      	adds	r3, r7, r0
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	4a4a      	ldr	r2, [pc, #296]	; (8003cb4 <answer2CPU+0x708>)
 8003b8c:	5cd1      	ldrb	r1, [r2, r3]
 8003b8e:	183b      	adds	r3, r7, r0
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	1c9a      	adds	r2, r3, #2
 8003b94:	b289      	uxth	r1, r1
 8003b96:	4b44      	ldr	r3, [pc, #272]	; (8003ca8 <answer2CPU+0x6fc>)
 8003b98:	0052      	lsls	r2, r2, #1
 8003b9a:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8003b9c:	183b      	adds	r3, r7, r0
 8003b9e:	781a      	ldrb	r2, [r3, #0]
 8003ba0:	183b      	adds	r3, r7, r0
 8003ba2:	3201      	adds	r2, #1
 8003ba4:	701a      	strb	r2, [r3, #0]
 8003ba6:	220e      	movs	r2, #14
 8003ba8:	18bb      	adds	r3, r7, r2
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b10      	cmp	r3, #16
 8003bae:	d9e9      	bls.n	8003b84 <answer2CPU+0x5d8>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8003bb0:	18bb      	adds	r3, r7, r2
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	701a      	strb	r2, [r3, #0]
 8003bb6:	e011      	b.n	8003bdc <answer2CPU+0x630>
					myCS = myCS + ans[i];
 8003bb8:	200e      	movs	r0, #14
 8003bba:	183b      	adds	r3, r7, r0
 8003bbc:	781a      	ldrb	r2, [r3, #0]
 8003bbe:	4b3a      	ldr	r3, [pc, #232]	; (8003ca8 <answer2CPU+0x6fc>)
 8003bc0:	0052      	lsls	r2, r2, #1
 8003bc2:	5ad3      	ldrh	r3, [r2, r3]
 8003bc4:	b2d9      	uxtb	r1, r3
 8003bc6:	220d      	movs	r2, #13
 8003bc8:	18bb      	adds	r3, r7, r2
 8003bca:	18ba      	adds	r2, r7, r2
 8003bcc:	7812      	ldrb	r2, [r2, #0]
 8003bce:	188a      	adds	r2, r1, r2
 8003bd0:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8003bd2:	183b      	adds	r3, r7, r0
 8003bd4:	781a      	ldrb	r2, [r3, #0]
 8003bd6:	183b      	adds	r3, r7, r0
 8003bd8:	3201      	adds	r2, #1
 8003bda:	701a      	strb	r2, [r3, #0]
 8003bdc:	230e      	movs	r3, #14
 8003bde:	18fb      	adds	r3, r7, r3
 8003be0:	781a      	ldrb	r2, [r3, #0]
 8003be2:	2009      	movs	r0, #9
 8003be4:	183b      	adds	r3, r7, r0
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	3b01      	subs	r3, #1
 8003bea:	429a      	cmp	r2, r3
 8003bec:	dbe4      	blt.n	8003bb8 <answer2CPU+0x60c>
				}
				myCS = 0 - myCS;
 8003bee:	210d      	movs	r1, #13
 8003bf0:	187b      	adds	r3, r7, r1
 8003bf2:	187a      	adds	r2, r7, r1
 8003bf4:	7812      	ldrb	r2, [r2, #0]
 8003bf6:	4252      	negs	r2, r2
 8003bf8:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003bfa:	183b      	adds	r3, r7, r0
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	1e5a      	subs	r2, r3, #1
 8003c00:	187b      	adds	r3, r7, r1
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	b299      	uxth	r1, r3
 8003c06:	4b28      	ldr	r3, [pc, #160]	; (8003ca8 <answer2CPU+0x6fc>)
 8003c08:	0052      	lsls	r2, r2, #1
 8003c0a:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003c0c:	46c0      	nop			; (mov r8, r8)
 8003c0e:	4b27      	ldr	r3, [pc, #156]	; (8003cac <answer2CPU+0x700>)
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	2280      	movs	r2, #128	; 0x80
 8003c14:	4013      	ands	r3, r2
 8003c16:	d0fa      	beq.n	8003c0e <answer2CPU+0x662>
				USART2->TDR = ans[0]|0x0100;
 8003c18:	4b23      	ldr	r3, [pc, #140]	; (8003ca8 <answer2CPU+0x6fc>)
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	2280      	movs	r2, #128	; 0x80
 8003c1e:	0052      	lsls	r2, r2, #1
 8003c20:	4313      	orrs	r3, r2
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	4b21      	ldr	r3, [pc, #132]	; (8003cac <answer2CPU+0x700>)
 8003c26:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8003c28:	e014      	b.n	8003c54 <answer2CPU+0x6a8>
				  {
				    i++;
 8003c2a:	210e      	movs	r1, #14
 8003c2c:	187b      	adds	r3, r7, r1
 8003c2e:	781a      	ldrb	r2, [r3, #0]
 8003c30:	187b      	adds	r3, r7, r1
 8003c32:	3201      	adds	r2, #1
 8003c34:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	4b1c      	ldr	r3, [pc, #112]	; (8003cac <answer2CPU+0x700>)
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	2280      	movs	r2, #128	; 0x80
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d0fa      	beq.n	8003c38 <answer2CPU+0x68c>
				    	USART2->TDR = (uint8_t)ans[i];
 8003c42:	230e      	movs	r3, #14
 8003c44:	18fb      	adds	r3, r7, r3
 8003c46:	781a      	ldrb	r2, [r3, #0]
 8003c48:	4b17      	ldr	r3, [pc, #92]	; (8003ca8 <answer2CPU+0x6fc>)
 8003c4a:	0052      	lsls	r2, r2, #1
 8003c4c:	5ad3      	ldrh	r3, [r2, r3]
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	4b16      	ldr	r3, [pc, #88]	; (8003cac <answer2CPU+0x700>)
 8003c52:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8003c54:	230e      	movs	r3, #14
 8003c56:	18fb      	adds	r3, r7, r3
 8003c58:	781a      	ldrb	r2, [r3, #0]
 8003c5a:	4b13      	ldr	r3, [pc, #76]	; (8003ca8 <answer2CPU+0x6fc>)
 8003c5c:	0052      	lsls	r2, r2, #1
 8003c5e:	5ad3      	ldrh	r3, [r2, r3]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e2      	bne.n	8003c2a <answer2CPU+0x67e>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d000      	beq.n	8003c6e <answer2CPU+0x6c2>
 8003c6c:	e07c      	b.n	8003d68 <answer2CPU+0x7bc>
				myLength = 0x04; //4 bytes length answer
 8003c6e:	2109      	movs	r1, #9
 8003c70:	187b      	adds	r3, r7, r1
 8003c72:	2204      	movs	r2, #4
 8003c74:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003c76:	187b      	adds	r3, r7, r1
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	3b02      	subs	r3, #2
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	4b09      	ldr	r3, [pc, #36]	; (8003ca8 <answer2CPU+0x6fc>)
 8003c82:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8003c84:	4b0c      	ldr	r3, [pc, #48]	; (8003cb8 <answer2CPU+0x70c>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	4b07      	ldr	r3, [pc, #28]	; (8003ca8 <answer2CPU+0x6fc>)
 8003c8c:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8003c8e:	230d      	movs	r3, #13
 8003c90:	18fb      	adds	r3, r7, r3
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	4b04      	ldr	r3, [pc, #16]	; (8003ca8 <answer2CPU+0x6fc>)
 8003c98:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8003c9a:	230e      	movs	r3, #14
 8003c9c:	18fb      	adds	r3, r7, r3
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	701a      	strb	r2, [r3, #0]
 8003ca2:	e01d      	b.n	8003ce0 <answer2CPU+0x734>
 8003ca4:	20000000 	.word	0x20000000
 8003ca8:	200013c8 	.word	0x200013c8
 8003cac:	40004400 	.word	0x40004400
 8003cb0:	20000014 	.word	0x20000014
 8003cb4:	20000020 	.word	0x20000020
 8003cb8:	2000001c 	.word	0x2000001c
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8003cbc:	200e      	movs	r0, #14
 8003cbe:	183b      	adds	r3, r7, r0
 8003cc0:	781a      	ldrb	r2, [r3, #0]
 8003cc2:	4b6d      	ldr	r3, [pc, #436]	; (8003e78 <answer2CPU+0x8cc>)
 8003cc4:	0052      	lsls	r2, r2, #1
 8003cc6:	5ad3      	ldrh	r3, [r2, r3]
 8003cc8:	b2d9      	uxtb	r1, r3
 8003cca:	220d      	movs	r2, #13
 8003ccc:	18bb      	adds	r3, r7, r2
 8003cce:	18ba      	adds	r2, r7, r2
 8003cd0:	7812      	ldrb	r2, [r2, #0]
 8003cd2:	188a      	adds	r2, r1, r2
 8003cd4:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8003cd6:	183b      	adds	r3, r7, r0
 8003cd8:	781a      	ldrb	r2, [r3, #0]
 8003cda:	183b      	adds	r3, r7, r0
 8003cdc:	3201      	adds	r2, #1
 8003cde:	701a      	strb	r2, [r3, #0]
 8003ce0:	230e      	movs	r3, #14
 8003ce2:	18fb      	adds	r3, r7, r3
 8003ce4:	781a      	ldrb	r2, [r3, #0]
 8003ce6:	2009      	movs	r0, #9
 8003ce8:	183b      	adds	r3, r7, r0
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	3b01      	subs	r3, #1
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	dbe4      	blt.n	8003cbc <answer2CPU+0x710>
				}
				myCS = 0 - myCS;
 8003cf2:	210d      	movs	r1, #13
 8003cf4:	187b      	adds	r3, r7, r1
 8003cf6:	187a      	adds	r2, r7, r1
 8003cf8:	7812      	ldrb	r2, [r2, #0]
 8003cfa:	4252      	negs	r2, r2
 8003cfc:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003cfe:	183b      	adds	r3, r7, r0
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	1e5a      	subs	r2, r3, #1
 8003d04:	187b      	adds	r3, r7, r1
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	b299      	uxth	r1, r3
 8003d0a:	4b5b      	ldr	r3, [pc, #364]	; (8003e78 <answer2CPU+0x8cc>)
 8003d0c:	0052      	lsls	r2, r2, #1
 8003d0e:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003d10:	46c0      	nop			; (mov r8, r8)
 8003d12:	4b5a      	ldr	r3, [pc, #360]	; (8003e7c <answer2CPU+0x8d0>)
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	2280      	movs	r2, #128	; 0x80
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d0fa      	beq.n	8003d12 <answer2CPU+0x766>
					USART2->TDR = ans[0]|0x0100;
 8003d1c:	4b56      	ldr	r3, [pc, #344]	; (8003e78 <answer2CPU+0x8cc>)
 8003d1e:	881b      	ldrh	r3, [r3, #0]
 8003d20:	2280      	movs	r2, #128	; 0x80
 8003d22:	0052      	lsls	r2, r2, #1
 8003d24:	4313      	orrs	r3, r2
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	4b54      	ldr	r3, [pc, #336]	; (8003e7c <answer2CPU+0x8d0>)
 8003d2a:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8003d2c:	e014      	b.n	8003d58 <answer2CPU+0x7ac>
						{
						  i++;
 8003d2e:	210e      	movs	r1, #14
 8003d30:	187b      	adds	r3, r7, r1
 8003d32:	781a      	ldrb	r2, [r3, #0]
 8003d34:	187b      	adds	r3, r7, r1
 8003d36:	3201      	adds	r2, #1
 8003d38:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	4b4f      	ldr	r3, [pc, #316]	; (8003e7c <answer2CPU+0x8d0>)
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	2280      	movs	r2, #128	; 0x80
 8003d42:	4013      	ands	r3, r2
 8003d44:	d0fa      	beq.n	8003d3c <answer2CPU+0x790>
						     USART2->TDR = (uint8_t)ans[i];
 8003d46:	230e      	movs	r3, #14
 8003d48:	18fb      	adds	r3, r7, r3
 8003d4a:	781a      	ldrb	r2, [r3, #0]
 8003d4c:	4b4a      	ldr	r3, [pc, #296]	; (8003e78 <answer2CPU+0x8cc>)
 8003d4e:	0052      	lsls	r2, r2, #1
 8003d50:	5ad3      	ldrh	r3, [r2, r3]
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	4b49      	ldr	r3, [pc, #292]	; (8003e7c <answer2CPU+0x8d0>)
 8003d56:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8003d58:	230e      	movs	r3, #14
 8003d5a:	18fb      	adds	r3, r7, r3
 8003d5c:	781a      	ldrb	r2, [r3, #0]
 8003d5e:	4b46      	ldr	r3, [pc, #280]	; (8003e78 <answer2CPU+0x8cc>)
 8003d60:	0052      	lsls	r2, r2, #1
 8003d62:	5ad3      	ldrh	r3, [r2, r3]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e2      	bne.n	8003d2e <answer2CPU+0x782>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	2b04      	cmp	r3, #4
 8003d6e:	d000      	beq.n	8003d72 <answer2CPU+0x7c6>
 8003d70:	e076      	b.n	8003e60 <answer2CPU+0x8b4>
				myLength = 0x04; //4 bytes length answer
 8003d72:	2109      	movs	r1, #9
 8003d74:	187b      	adds	r3, r7, r1
 8003d76:	2204      	movs	r2, #4
 8003d78:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003d7a:	187b      	adds	r3, r7, r1
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	3b02      	subs	r3, #2
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	4b3c      	ldr	r3, [pc, #240]	; (8003e78 <answer2CPU+0x8cc>)
 8003d86:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3302      	adds	r3, #2
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	001a      	movs	r2, r3
 8003d90:	4b3b      	ldr	r3, [pc, #236]	; (8003e80 <answer2CPU+0x8d4>)
 8003d92:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 8003d94:	4b3b      	ldr	r3, [pc, #236]	; (8003e84 <answer2CPU+0x8d8>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	4b37      	ldr	r3, [pc, #220]	; (8003e78 <answer2CPU+0x8cc>)
 8003d9c:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8003d9e:	230d      	movs	r3, #13
 8003da0:	18fb      	adds	r3, r7, r3
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	4b34      	ldr	r3, [pc, #208]	; (8003e78 <answer2CPU+0x8cc>)
 8003da8:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8003daa:	230e      	movs	r3, #14
 8003dac:	18fb      	adds	r3, r7, r3
 8003dae:	2200      	movs	r2, #0
 8003db0:	701a      	strb	r2, [r3, #0]
 8003db2:	e011      	b.n	8003dd8 <answer2CPU+0x82c>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8003db4:	200e      	movs	r0, #14
 8003db6:	183b      	adds	r3, r7, r0
 8003db8:	781a      	ldrb	r2, [r3, #0]
 8003dba:	4b2f      	ldr	r3, [pc, #188]	; (8003e78 <answer2CPU+0x8cc>)
 8003dbc:	0052      	lsls	r2, r2, #1
 8003dbe:	5ad3      	ldrh	r3, [r2, r3]
 8003dc0:	b2d9      	uxtb	r1, r3
 8003dc2:	220d      	movs	r2, #13
 8003dc4:	18bb      	adds	r3, r7, r2
 8003dc6:	18ba      	adds	r2, r7, r2
 8003dc8:	7812      	ldrb	r2, [r2, #0]
 8003dca:	188a      	adds	r2, r1, r2
 8003dcc:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8003dce:	183b      	adds	r3, r7, r0
 8003dd0:	781a      	ldrb	r2, [r3, #0]
 8003dd2:	183b      	adds	r3, r7, r0
 8003dd4:	3201      	adds	r2, #1
 8003dd6:	701a      	strb	r2, [r3, #0]
 8003dd8:	230e      	movs	r3, #14
 8003dda:	18fb      	adds	r3, r7, r3
 8003ddc:	781a      	ldrb	r2, [r3, #0]
 8003dde:	2009      	movs	r0, #9
 8003de0:	183b      	adds	r3, r7, r0
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	3b01      	subs	r3, #1
 8003de6:	429a      	cmp	r2, r3
 8003de8:	dbe4      	blt.n	8003db4 <answer2CPU+0x808>
				}
				myCS = 0 - myCS;
 8003dea:	210d      	movs	r1, #13
 8003dec:	187b      	adds	r3, r7, r1
 8003dee:	187a      	adds	r2, r7, r1
 8003df0:	7812      	ldrb	r2, [r2, #0]
 8003df2:	4252      	negs	r2, r2
 8003df4:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003df6:	183b      	adds	r3, r7, r0
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	1e5a      	subs	r2, r3, #1
 8003dfc:	187b      	adds	r3, r7, r1
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	b299      	uxth	r1, r3
 8003e02:	4b1d      	ldr	r3, [pc, #116]	; (8003e78 <answer2CPU+0x8cc>)
 8003e04:	0052      	lsls	r2, r2, #1
 8003e06:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003e08:	46c0      	nop			; (mov r8, r8)
 8003e0a:	4b1c      	ldr	r3, [pc, #112]	; (8003e7c <answer2CPU+0x8d0>)
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	2280      	movs	r2, #128	; 0x80
 8003e10:	4013      	ands	r3, r2
 8003e12:	d0fa      	beq.n	8003e0a <answer2CPU+0x85e>
				USART2->TDR = ans[0]|0x0100;
 8003e14:	4b18      	ldr	r3, [pc, #96]	; (8003e78 <answer2CPU+0x8cc>)
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	2280      	movs	r2, #128	; 0x80
 8003e1a:	0052      	lsls	r2, r2, #1
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	4b16      	ldr	r3, [pc, #88]	; (8003e7c <answer2CPU+0x8d0>)
 8003e22:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8003e24:	e014      	b.n	8003e50 <answer2CPU+0x8a4>
				{
				  i++;
 8003e26:	210e      	movs	r1, #14
 8003e28:	187b      	adds	r3, r7, r1
 8003e2a:	781a      	ldrb	r2, [r3, #0]
 8003e2c:	187b      	adds	r3, r7, r1
 8003e2e:	3201      	adds	r2, #1
 8003e30:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <answer2CPU+0x8d0>)
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	2280      	movs	r2, #128	; 0x80
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	d0fa      	beq.n	8003e34 <answer2CPU+0x888>
				  USART2->TDR = (uint8_t)ans[i];
 8003e3e:	230e      	movs	r3, #14
 8003e40:	18fb      	adds	r3, r7, r3
 8003e42:	781a      	ldrb	r2, [r3, #0]
 8003e44:	4b0c      	ldr	r3, [pc, #48]	; (8003e78 <answer2CPU+0x8cc>)
 8003e46:	0052      	lsls	r2, r2, #1
 8003e48:	5ad3      	ldrh	r3, [r2, r3]
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <answer2CPU+0x8d0>)
 8003e4e:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8003e50:	230e      	movs	r3, #14
 8003e52:	18fb      	adds	r3, r7, r3
 8003e54:	781a      	ldrb	r2, [r3, #0]
 8003e56:	4b08      	ldr	r3, [pc, #32]	; (8003e78 <answer2CPU+0x8cc>)
 8003e58:	0052      	lsls	r2, r2, #1
 8003e5a:	5ad3      	ldrh	r3, [r2, r3]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1e2      	bne.n	8003e26 <answer2CPU+0x87a>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 8003e60:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <answer2CPU+0x8d0>)
 8003e62:	6a1a      	ldr	r2, [r3, #32]
 8003e64:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <answer2CPU+0x8d0>)
 8003e66:	2108      	movs	r1, #8
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	621a      	str	r2, [r3, #32]
}
 8003e6c:	46c0      	nop			; (mov r8, r8)
 8003e6e:	0018      	movs	r0, r3
 8003e70:	46bd      	mov	sp, r7
 8003e72:	b004      	add	sp, #16
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	46c0      	nop			; (mov r8, r8)
 8003e78:	200013c8 	.word	0x200013c8
 8003e7c:	40004400 	.word	0x40004400
 8003e80:	20000310 	.word	0x20000310
 8003e84:	20000203 	.word	0x20000203

08003e88 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 8003e8e:	2001      	movs	r0, #1
 8003e90:	f001 fc96 	bl	80057c0 <HAL_Delay>
		GPIOB->ODR &= ~(1 << 9); //reset cs
 8003e94:	4b28      	ldr	r3, [pc, #160]	; (8003f38 <MEM_Reset+0xb0>)
 8003e96:	695a      	ldr	r2, [r3, #20]
 8003e98:	4b27      	ldr	r3, [pc, #156]	; (8003f38 <MEM_Reset+0xb0>)
 8003e9a:	4928      	ldr	r1, [pc, #160]	; (8003f3c <MEM_Reset+0xb4>)
 8003e9c:	400a      	ands	r2, r1
 8003e9e:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 8003ea0:	1dfb      	adds	r3, r7, #7
 8003ea2:	2266      	movs	r2, #102	; 0x66
 8003ea4:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8003ea6:	1df9      	adds	r1, r7, #7
 8003ea8:	4825      	ldr	r0, [pc, #148]	; (8003f40 <MEM_Reset+0xb8>)
 8003eaa:	2305      	movs	r3, #5
 8003eac:	2201      	movs	r2, #1
 8003eae:	f005 fc93 	bl	80097d8 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 8003eb2:	4b21      	ldr	r3, [pc, #132]	; (8003f38 <MEM_Reset+0xb0>)
 8003eb4:	695a      	ldr	r2, [r3, #20]
 8003eb6:	4b20      	ldr	r3, [pc, #128]	; (8003f38 <MEM_Reset+0xb0>)
 8003eb8:	2180      	movs	r1, #128	; 0x80
 8003eba:	0089      	lsls	r1, r1, #2
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	615a      	str	r2, [r3, #20]
		asm("NOP");
 8003ec0:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8003ec2:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8003ec4:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 8003ec6:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8003ec8:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8003eca:	46c0      	nop			; (mov r8, r8)
		GPIOB->ODR &= ~(1 << 9);			//reset cs
 8003ecc:	4b1a      	ldr	r3, [pc, #104]	; (8003f38 <MEM_Reset+0xb0>)
 8003ece:	695a      	ldr	r2, [r3, #20]
 8003ed0:	4b19      	ldr	r3, [pc, #100]	; (8003f38 <MEM_Reset+0xb0>)
 8003ed2:	491a      	ldr	r1, [pc, #104]	; (8003f3c <MEM_Reset+0xb4>)
 8003ed4:	400a      	ands	r2, r1
 8003ed6:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 8003ed8:	1dfb      	adds	r3, r7, #7
 8003eda:	2299      	movs	r2, #153	; 0x99
 8003edc:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 8003ede:	1df9      	adds	r1, r7, #7
 8003ee0:	4817      	ldr	r0, [pc, #92]	; (8003f40 <MEM_Reset+0xb8>)
 8003ee2:	2305      	movs	r3, #5
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f005 fc77 	bl	80097d8 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 8003eea:	4b13      	ldr	r3, [pc, #76]	; (8003f38 <MEM_Reset+0xb0>)
 8003eec:	695a      	ldr	r2, [r3, #20]
 8003eee:	4b12      	ldr	r3, [pc, #72]	; (8003f38 <MEM_Reset+0xb0>)
 8003ef0:	2180      	movs	r1, #128	; 0x80
 8003ef2:	0089      	lsls	r1, r1, #2
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8003ef8:	2001      	movs	r0, #1
 8003efa:	f001 fc61 	bl	80057c0 <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 8003efe:	1dfb      	adds	r3, r7, #7
 8003f00:	22b7      	movs	r2, #183	; 0xb7
 8003f02:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 << 9); //reset cs
 8003f04:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <MEM_Reset+0xb0>)
 8003f06:	695a      	ldr	r2, [r3, #20]
 8003f08:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <MEM_Reset+0xb0>)
 8003f0a:	490c      	ldr	r1, [pc, #48]	; (8003f3c <MEM_Reset+0xb4>)
 8003f0c:	400a      	ands	r2, r1
 8003f0e:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8003f10:	1df9      	adds	r1, r7, #7
 8003f12:	480b      	ldr	r0, [pc, #44]	; (8003f40 <MEM_Reset+0xb8>)
 8003f14:	2305      	movs	r3, #5
 8003f16:	2201      	movs	r2, #1
 8003f18:	f005 fc5e 	bl	80097d8 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 8003f1c:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <MEM_Reset+0xb0>)
 8003f1e:	695a      	ldr	r2, [r3, #20]
 8003f20:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <MEM_Reset+0xb0>)
 8003f22:	2180      	movs	r1, #128	; 0x80
 8003f24:	0089      	lsls	r1, r1, #2
 8003f26:	430a      	orrs	r2, r1
 8003f28:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8003f2a:	2001      	movs	r0, #1
 8003f2c:	f001 fc48 	bl	80057c0 <HAL_Delay>
	}
 8003f30:	46c0      	nop			; (mov r8, r8)
 8003f32:	46bd      	mov	sp, r7
 8003f34:	b002      	add	sp, #8
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	50000400 	.word	0x50000400
 8003f3c:	fffffdff 	.word	0xfffffdff
 8003f40:	200000b4 	.word	0x200000b4

08003f44 <weoShowFullScreen>:
//==================================================================================================================================
	uint8_t weoShowFullScreen(uint8_t picNum) {
 8003f44:	b5b0      	push	{r4, r5, r7, lr}
 8003f46:	4c48      	ldr	r4, [pc, #288]	; (8004068 <weoShowFullScreen+0x124>)
 8003f48:	44a5      	add	sp, r4
 8003f4a:	af02      	add	r7, sp, #8
 8003f4c:	0002      	movs	r2, r0
 8003f4e:	4b47      	ldr	r3, [pc, #284]	; (800406c <weoShowFullScreen+0x128>)
 8003f50:	4947      	ldr	r1, [pc, #284]	; (8004070 <weoShowFullScreen+0x12c>)
 8003f52:	468c      	mov	ip, r1
 8003f54:	44bc      	add	ip, r7
 8003f56:	4463      	add	r3, ip
 8003f58:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i, len;
		uint32_t addrInfo,addr,firstImAddr;
		memCMD = 0x13; //read command with 4-byte address
 8003f5a:	4846      	ldr	r0, [pc, #280]	; (8004074 <weoShowFullScreen+0x130>)
 8003f5c:	183b      	adds	r3, r7, r0
 8003f5e:	2213      	movs	r2, #19
 8003f60:	701a      	strb	r2, [r3, #0]
//		picNum=0x02;
		addr=(picNum)*0x2000;
 8003f62:	4b42      	ldr	r3, [pc, #264]	; (800406c <weoShowFullScreen+0x128>)
 8003f64:	4a42      	ldr	r2, [pc, #264]	; (8004070 <weoShowFullScreen+0x12c>)
 8003f66:	4694      	mov	ip, r2
 8003f68:	44bc      	add	ip, r7
 8003f6a:	4463      	add	r3, ip
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	035b      	lsls	r3, r3, #13
 8003f70:	4941      	ldr	r1, [pc, #260]	; (8004078 <weoShowFullScreen+0x134>)
 8003f72:	187a      	adds	r2, r7, r1
 8003f74:	6013      	str	r3, [r2, #0]
//		addr=0x00003800;
		addrArray[0]=addr & 0xFF;
 8003f76:	187b      	adds	r3, r7, r1
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	4b3f      	ldr	r3, [pc, #252]	; (800407c <weoShowFullScreen+0x138>)
 8003f7e:	4c3c      	ldr	r4, [pc, #240]	; (8004070 <weoShowFullScreen+0x12c>)
 8003f80:	46a4      	mov	ip, r4
 8003f82:	44bc      	add	ip, r7
 8003f84:	4463      	add	r3, ip
 8003f86:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8003f88:	187b      	adds	r3, r7, r1
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	0a1b      	lsrs	r3, r3, #8
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	4b3a      	ldr	r3, [pc, #232]	; (800407c <weoShowFullScreen+0x138>)
 8003f92:	4c37      	ldr	r4, [pc, #220]	; (8004070 <weoShowFullScreen+0x12c>)
 8003f94:	46a4      	mov	ip, r4
 8003f96:	44bc      	add	ip, r7
 8003f98:	4463      	add	r3, ip
 8003f9a:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8003f9c:	187b      	adds	r3, r7, r1
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	0c1b      	lsrs	r3, r3, #16
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	4b35      	ldr	r3, [pc, #212]	; (800407c <weoShowFullScreen+0x138>)
 8003fa6:	4c32      	ldr	r4, [pc, #200]	; (8004070 <weoShowFullScreen+0x12c>)
 8003fa8:	46a4      	mov	ip, r4
 8003faa:	44bc      	add	ip, r7
 8003fac:	4463      	add	r3, ip
 8003fae:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8003fb0:	187b      	adds	r3, r7, r1
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	0e1b      	lsrs	r3, r3, #24
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	4b30      	ldr	r3, [pc, #192]	; (800407c <weoShowFullScreen+0x138>)
 8003fba:	492d      	ldr	r1, [pc, #180]	; (8004070 <weoShowFullScreen+0x12c>)
 8003fbc:	468c      	mov	ip, r1
 8003fbe:	44bc      	add	ip, r7
 8003fc0:	4463      	add	r3, ip
 8003fc2:	70da      	strb	r2, [r3, #3]

		GPIOB->ODR &= ~(1 << 9); //reset cs
 8003fc4:	4b2e      	ldr	r3, [pc, #184]	; (8004080 <weoShowFullScreen+0x13c>)
 8003fc6:	695a      	ldr	r2, [r3, #20]
 8003fc8:	4b2d      	ldr	r3, [pc, #180]	; (8004080 <weoShowFullScreen+0x13c>)
 8003fca:	492e      	ldr	r1, [pc, #184]	; (8004084 <weoShowFullScreen+0x140>)
 8003fcc:	400a      	ands	r2, r1
 8003fce:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8003fd0:	1839      	adds	r1, r7, r0
 8003fd2:	482d      	ldr	r0, [pc, #180]	; (8004088 <weoShowFullScreen+0x144>)
 8003fd4:	2332      	movs	r3, #50	; 0x32
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f005 fbfe 	bl	80097d8 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8003fdc:	2408      	movs	r4, #8
 8003fde:	193b      	adds	r3, r7, r4
 8003fe0:	1cd9      	adds	r1, r3, #3
 8003fe2:	4829      	ldr	r0, [pc, #164]	; (8004088 <weoShowFullScreen+0x144>)
 8003fe4:	2332      	movs	r3, #50	; 0x32
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f005 fbf6 	bl	80097d8 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8003fec:	193b      	adds	r3, r7, r4
 8003fee:	1c99      	adds	r1, r3, #2
 8003ff0:	4825      	ldr	r0, [pc, #148]	; (8004088 <weoShowFullScreen+0x144>)
 8003ff2:	2332      	movs	r3, #50	; 0x32
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f005 fbef 	bl	80097d8 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8003ffa:	193b      	adds	r3, r7, r4
 8003ffc:	1c59      	adds	r1, r3, #1
 8003ffe:	4822      	ldr	r0, [pc, #136]	; (8004088 <weoShowFullScreen+0x144>)
 8004000:	2332      	movs	r3, #50	; 0x32
 8004002:	2201      	movs	r2, #1
 8004004:	f005 fbe8 	bl	80097d8 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8004008:	1939      	adds	r1, r7, r4
 800400a:	481f      	ldr	r0, [pc, #124]	; (8004088 <weoShowFullScreen+0x144>)
 800400c:	2332      	movs	r3, #50	; 0x32
 800400e:	2201      	movs	r2, #1
 8004010:	f005 fbe2 	bl	80097d8 <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,8192, 5000);
 8004014:	4c1d      	ldr	r4, [pc, #116]	; (800408c <weoShowFullScreen+0x148>)
 8004016:	2380      	movs	r3, #128	; 0x80
 8004018:	019a      	lsls	r2, r3, #6
 800401a:	2510      	movs	r5, #16
 800401c:	1979      	adds	r1, r7, r5
 800401e:	481a      	ldr	r0, [pc, #104]	; (8004088 <weoShowFullScreen+0x144>)
 8004020:	0023      	movs	r3, r4
 8004022:	f005 fd31 	bl	8009a88 <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9; // set cs
 8004026:	4b16      	ldr	r3, [pc, #88]	; (8004080 <weoShowFullScreen+0x13c>)
 8004028:	695a      	ldr	r2, [r3, #20]
 800402a:	4b15      	ldr	r3, [pc, #84]	; (8004080 <weoShowFullScreen+0x13c>)
 800402c:	2180      	movs	r1, #128	; 0x80
 800402e:	0089      	lsls	r1, r1, #2
 8004030:	430a      	orrs	r2, r1
 8004032:	615a      	str	r2, [r3, #20]

		weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, MEM_Buffer); // Здесь ещё работает
 8004034:	197b      	adds	r3, r7, r5
 8004036:	9301      	str	r3, [sp, #4]
 8004038:	23ff      	movs	r3, #255	; 0xff
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	237f      	movs	r3, #127	; 0x7f
 800403e:	227f      	movs	r2, #127	; 0x7f
 8004040:	2100      	movs	r1, #0
 8004042:	2000      	movs	r0, #0
 8004044:	f7ff f904 	bl	8003250 <weoDrawRectangleFilled>
		cmd2Execute=0;
 8004048:	4b11      	ldr	r3, [pc, #68]	; (8004090 <weoShowFullScreen+0x14c>)
 800404a:	2200      	movs	r2, #0
 800404c:	701a      	strb	r2, [r3, #0]
//		while(BFEN==0){};
		GPIOC->ODR |= 1 << 6;	//set BF
 800404e:	4b11      	ldr	r3, [pc, #68]	; (8004094 <weoShowFullScreen+0x150>)
 8004050:	695a      	ldr	r2, [r3, #20]
 8004052:	4b10      	ldr	r3, [pc, #64]	; (8004094 <weoShowFullScreen+0x150>)
 8004054:	2140      	movs	r1, #64	; 0x40
 8004056:	430a      	orrs	r2, r1
 8004058:	615a      	str	r2, [r3, #20]
	}
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	0018      	movs	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	4b03      	ldr	r3, [pc, #12]	; (8004070 <weoShowFullScreen+0x12c>)
 8004062:	449d      	add	sp, r3
 8004064:	bdb0      	pop	{r4, r5, r7, pc}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	ffffdfe0 	.word	0xffffdfe0
 800406c:	ffffdfef 	.word	0xffffdfef
 8004070:	00002018 	.word	0x00002018
 8004074:	00002013 	.word	0x00002013
 8004078:	00002014 	.word	0x00002014
 800407c:	ffffdff0 	.word	0xffffdff0
 8004080:	50000400 	.word	0x50000400
 8004084:	fffffdff 	.word	0xfffffdff
 8004088:	200000b4 	.word	0x200000b4
 800408c:	00001388 	.word	0x00001388
 8004090:	2000137b 	.word	0x2000137b
 8004094:	50000800 	.word	0x50000800

08004098 <weoShowSmallImage>:
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
	}
//==========================================================================================================================
	uint8_t weoShowSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 8004098:	b590      	push	{r4, r7, lr}
 800409a:	4cb4      	ldr	r4, [pc, #720]	; (800436c <weoShowSmallImage+0x2d4>)
 800409c:	44a5      	add	sp, r4
 800409e:	af02      	add	r7, sp, #8
 80040a0:	0004      	movs	r4, r0
 80040a2:	0008      	movs	r0, r1
 80040a4:	0011      	movs	r1, r2
 80040a6:	4bb2      	ldr	r3, [pc, #712]	; (8004370 <weoShowSmallImage+0x2d8>)
 80040a8:	4ab2      	ldr	r2, [pc, #712]	; (8004374 <weoShowSmallImage+0x2dc>)
 80040aa:	4694      	mov	ip, r2
 80040ac:	44bc      	add	ip, r7
 80040ae:	4463      	add	r3, ip
 80040b0:	1c22      	adds	r2, r4, #0
 80040b2:	701a      	strb	r2, [r3, #0]
 80040b4:	4bb0      	ldr	r3, [pc, #704]	; (8004378 <weoShowSmallImage+0x2e0>)
 80040b6:	4aaf      	ldr	r2, [pc, #700]	; (8004374 <weoShowSmallImage+0x2dc>)
 80040b8:	4694      	mov	ip, r2
 80040ba:	44bc      	add	ip, r7
 80040bc:	4463      	add	r3, ip
 80040be:	1c02      	adds	r2, r0, #0
 80040c0:	701a      	strb	r2, [r3, #0]
 80040c2:	4bae      	ldr	r3, [pc, #696]	; (800437c <weoShowSmallImage+0x2e4>)
 80040c4:	4aab      	ldr	r2, [pc, #684]	; (8004374 <weoShowSmallImage+0x2dc>)
 80040c6:	4694      	mov	ip, r2
 80040c8:	44bc      	add	ip, r7
 80040ca:	4463      	add	r3, ip
 80040cc:	1c0a      	adds	r2, r1, #0
 80040ce:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192];
		uint8_t imInfo[2],addrArray[4];
		uint16_t i;
		uint32_t addr,addrData;
		addr=0x00000000;
 80040d0:	2300      	movs	r3, #0
 80040d2:	49ab      	ldr	r1, [pc, #684]	; (8004380 <weoShowSmallImage+0x2e8>)
 80040d4:	187a      	adds	r2, r7, r1
 80040d6:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 80040d8:	48aa      	ldr	r0, [pc, #680]	; (8004384 <weoShowSmallImage+0x2ec>)
 80040da:	183b      	adds	r3, r7, r0
 80040dc:	2213      	movs	r2, #19
 80040de:	701a      	strb	r2, [r3, #0]
		//look at info about image
		addr=(picNum*0x2000)+0x200000;// the right path is to multiply picNum * image repeat period!
 80040e0:	4ba3      	ldr	r3, [pc, #652]	; (8004370 <weoShowSmallImage+0x2d8>)
 80040e2:	4aa4      	ldr	r2, [pc, #656]	; (8004374 <weoShowSmallImage+0x2dc>)
 80040e4:	4694      	mov	ip, r2
 80040e6:	44bc      	add	ip, r7
 80040e8:	4463      	add	r3, ip
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	3301      	adds	r3, #1
 80040ee:	33ff      	adds	r3, #255	; 0xff
 80040f0:	035b      	lsls	r3, r3, #13
 80040f2:	187a      	adds	r2, r7, r1
 80040f4:	6013      	str	r3, [r2, #0]
//		addr=(picNum*0x2000);

		addrArray[0]=addr & 0xFF;
 80040f6:	187b      	adds	r3, r7, r1
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	4ba2      	ldr	r3, [pc, #648]	; (8004388 <weoShowSmallImage+0x2f0>)
 80040fe:	4c9d      	ldr	r4, [pc, #628]	; (8004374 <weoShowSmallImage+0x2dc>)
 8004100:	46a4      	mov	ip, r4
 8004102:	44bc      	add	ip, r7
 8004104:	4463      	add	r3, ip
 8004106:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8004108:	187b      	adds	r3, r7, r1
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	0a1b      	lsrs	r3, r3, #8
 800410e:	b2da      	uxtb	r2, r3
 8004110:	4b9d      	ldr	r3, [pc, #628]	; (8004388 <weoShowSmallImage+0x2f0>)
 8004112:	4c98      	ldr	r4, [pc, #608]	; (8004374 <weoShowSmallImage+0x2dc>)
 8004114:	46a4      	mov	ip, r4
 8004116:	44bc      	add	ip, r7
 8004118:	4463      	add	r3, ip
 800411a:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 800411c:	187b      	adds	r3, r7, r1
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	0c1b      	lsrs	r3, r3, #16
 8004122:	b2da      	uxtb	r2, r3
 8004124:	4b98      	ldr	r3, [pc, #608]	; (8004388 <weoShowSmallImage+0x2f0>)
 8004126:	4c93      	ldr	r4, [pc, #588]	; (8004374 <weoShowSmallImage+0x2dc>)
 8004128:	46a4      	mov	ip, r4
 800412a:	44bc      	add	ip, r7
 800412c:	4463      	add	r3, ip
 800412e:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8004130:	187b      	adds	r3, r7, r1
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	0e1b      	lsrs	r3, r3, #24
 8004136:	b2da      	uxtb	r2, r3
 8004138:	4b93      	ldr	r3, [pc, #588]	; (8004388 <weoShowSmallImage+0x2f0>)
 800413a:	498e      	ldr	r1, [pc, #568]	; (8004374 <weoShowSmallImage+0x2dc>)
 800413c:	468c      	mov	ip, r1
 800413e:	44bc      	add	ip, r7
 8004140:	4463      	add	r3, ip
 8004142:	70da      	strb	r2, [r3, #3]

		GPIOB->ODR &= ~(1 << 9); //reset cs
 8004144:	4b91      	ldr	r3, [pc, #580]	; (800438c <weoShowSmallImage+0x2f4>)
 8004146:	695a      	ldr	r2, [r3, #20]
 8004148:	4b90      	ldr	r3, [pc, #576]	; (800438c <weoShowSmallImage+0x2f4>)
 800414a:	4991      	ldr	r1, [pc, #580]	; (8004390 <weoShowSmallImage+0x2f8>)
 800414c:	400a      	ands	r2, r1
 800414e:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8004150:	1839      	adds	r1, r7, r0
 8004152:	4890      	ldr	r0, [pc, #576]	; (8004394 <weoShowSmallImage+0x2fc>)
 8004154:	2332      	movs	r3, #50	; 0x32
 8004156:	2201      	movs	r2, #1
 8004158:	f005 fb3e 	bl	80097d8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 800415c:	2408      	movs	r4, #8
 800415e:	193b      	adds	r3, r7, r4
 8004160:	1cd9      	adds	r1, r3, #3
 8004162:	488c      	ldr	r0, [pc, #560]	; (8004394 <weoShowSmallImage+0x2fc>)
 8004164:	2332      	movs	r3, #50	; 0x32
 8004166:	2201      	movs	r2, #1
 8004168:	f005 fb36 	bl	80097d8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 800416c:	193b      	adds	r3, r7, r4
 800416e:	1c99      	adds	r1, r3, #2
 8004170:	4888      	ldr	r0, [pc, #544]	; (8004394 <weoShowSmallImage+0x2fc>)
 8004172:	2332      	movs	r3, #50	; 0x32
 8004174:	2201      	movs	r2, #1
 8004176:	f005 fb2f 	bl	80097d8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 800417a:	193b      	adds	r3, r7, r4
 800417c:	1c59      	adds	r1, r3, #1
 800417e:	4885      	ldr	r0, [pc, #532]	; (8004394 <weoShowSmallImage+0x2fc>)
 8004180:	2332      	movs	r3, #50	; 0x32
 8004182:	2201      	movs	r2, #1
 8004184:	f005 fb28 	bl	80097d8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8004188:	1939      	adds	r1, r7, r4
 800418a:	4882      	ldr	r0, [pc, #520]	; (8004394 <weoShowSmallImage+0x2fc>)
 800418c:	2332      	movs	r3, #50	; 0x32
 800418e:	2201      	movs	r2, #1
 8004190:	f005 fb22 	bl	80097d8 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 8004194:	4b80      	ldr	r3, [pc, #512]	; (8004398 <weoShowSmallImage+0x300>)
 8004196:	220c      	movs	r2, #12
 8004198:	18b9      	adds	r1, r7, r2
 800419a:	487e      	ldr	r0, [pc, #504]	; (8004394 <weoShowSmallImage+0x2fc>)
 800419c:	2202      	movs	r2, #2
 800419e:	f005 fc73 	bl	8009a88 <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9; // set cs
 80041a2:	4b7a      	ldr	r3, [pc, #488]	; (800438c <weoShowSmallImage+0x2f4>)
 80041a4:	695a      	ldr	r2, [r3, #20]
 80041a6:	4b79      	ldr	r3, [pc, #484]	; (800438c <weoShowSmallImage+0x2f4>)
 80041a8:	2180      	movs	r1, #128	; 0x80
 80041aa:	0089      	lsls	r1, r1, #2
 80041ac:	430a      	orrs	r2, r1
 80041ae:	615a      	str	r2, [r3, #20]

		width=imInfo[0];
 80041b0:	497a      	ldr	r1, [pc, #488]	; (800439c <weoShowSmallImage+0x304>)
 80041b2:	187b      	adds	r3, r7, r1
 80041b4:	4a7a      	ldr	r2, [pc, #488]	; (80043a0 <weoShowSmallImage+0x308>)
 80041b6:	486f      	ldr	r0, [pc, #444]	; (8004374 <weoShowSmallImage+0x2dc>)
 80041b8:	4684      	mov	ip, r0
 80041ba:	44bc      	add	ip, r7
 80041bc:	4462      	add	r2, ip
 80041be:	7812      	ldrb	r2, [r2, #0]
 80041c0:	701a      	strb	r2, [r3, #0]
		height=imInfo[1];
 80041c2:	4878      	ldr	r0, [pc, #480]	; (80043a4 <weoShowSmallImage+0x30c>)
 80041c4:	183b      	adds	r3, r7, r0
 80041c6:	4a76      	ldr	r2, [pc, #472]	; (80043a0 <weoShowSmallImage+0x308>)
 80041c8:	4c6a      	ldr	r4, [pc, #424]	; (8004374 <weoShowSmallImage+0x2dc>)
 80041ca:	46a4      	mov	ip, r4
 80041cc:	44bc      	add	ip, r7
 80041ce:	4462      	add	r2, ip
 80041d0:	7852      	ldrb	r2, [r2, #1]
 80041d2:	701a      	strb	r2, [r3, #0]

		len=width*height/2+2;
 80041d4:	187b      	adds	r3, r7, r1
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	183a      	adds	r2, r7, r0
 80041da:	7812      	ldrb	r2, [r2, #0]
 80041dc:	4353      	muls	r3, r2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	da00      	bge.n	80041e4 <weoShowSmallImage+0x14c>
 80041e2:	3301      	adds	r3, #1
 80041e4:	105b      	asrs	r3, r3, #1
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	3302      	adds	r3, #2
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	4b6e      	ldr	r3, [pc, #440]	; (80043a8 <weoShowSmallImage+0x310>)
 80041ee:	801a      	strh	r2, [r3, #0]

		addrData=addr+0x02;
 80041f0:	4b63      	ldr	r3, [pc, #396]	; (8004380 <weoShowSmallImage+0x2e8>)
 80041f2:	18fb      	adds	r3, r7, r3
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	3302      	adds	r3, #2
 80041f8:	496c      	ldr	r1, [pc, #432]	; (80043ac <weoShowSmallImage+0x314>)
 80041fa:	187a      	adds	r2, r7, r1
 80041fc:	6013      	str	r3, [r2, #0]
		addrArray[0]=addrData & 0xFF;
 80041fe:	187b      	adds	r3, r7, r1
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	b2da      	uxtb	r2, r3
 8004204:	4b60      	ldr	r3, [pc, #384]	; (8004388 <weoShowSmallImage+0x2f0>)
 8004206:	485b      	ldr	r0, [pc, #364]	; (8004374 <weoShowSmallImage+0x2dc>)
 8004208:	4684      	mov	ip, r0
 800420a:	44bc      	add	ip, r7
 800420c:	4463      	add	r3, ip
 800420e:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addrData >> 8) & 0xFF;
 8004210:	187b      	adds	r3, r7, r1
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	0a1b      	lsrs	r3, r3, #8
 8004216:	b2da      	uxtb	r2, r3
 8004218:	4b5b      	ldr	r3, [pc, #364]	; (8004388 <weoShowSmallImage+0x2f0>)
 800421a:	4856      	ldr	r0, [pc, #344]	; (8004374 <weoShowSmallImage+0x2dc>)
 800421c:	4684      	mov	ip, r0
 800421e:	44bc      	add	ip, r7
 8004220:	4463      	add	r3, ip
 8004222:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addrData >> 16) & 0xFF;
 8004224:	187b      	adds	r3, r7, r1
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	0c1b      	lsrs	r3, r3, #16
 800422a:	b2da      	uxtb	r2, r3
 800422c:	4b56      	ldr	r3, [pc, #344]	; (8004388 <weoShowSmallImage+0x2f0>)
 800422e:	4851      	ldr	r0, [pc, #324]	; (8004374 <weoShowSmallImage+0x2dc>)
 8004230:	4684      	mov	ip, r0
 8004232:	44bc      	add	ip, r7
 8004234:	4463      	add	r3, ip
 8004236:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addrData >> 24) & 0xFF;
 8004238:	187b      	adds	r3, r7, r1
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	0e1b      	lsrs	r3, r3, #24
 800423e:	b2da      	uxtb	r2, r3
 8004240:	4b51      	ldr	r3, [pc, #324]	; (8004388 <weoShowSmallImage+0x2f0>)
 8004242:	494c      	ldr	r1, [pc, #304]	; (8004374 <weoShowSmallImage+0x2dc>)
 8004244:	468c      	mov	ip, r1
 8004246:	44bc      	add	ip, r7
 8004248:	4463      	add	r3, ip
 800424a:	70da      	strb	r2, [r3, #3]

		USART2->ICR|=USART_ICR_ORECF;
 800424c:	4b58      	ldr	r3, [pc, #352]	; (80043b0 <weoShowSmallImage+0x318>)
 800424e:	6a1a      	ldr	r2, [r3, #32]
 8004250:	4b57      	ldr	r3, [pc, #348]	; (80043b0 <weoShowSmallImage+0x318>)
 8004252:	2108      	movs	r1, #8
 8004254:	430a      	orrs	r2, r1
 8004256:	621a      	str	r2, [r3, #32]
		memCMD = 0x13; //read command with 4-byte address
 8004258:	484a      	ldr	r0, [pc, #296]	; (8004384 <weoShowSmallImage+0x2ec>)
 800425a:	183b      	adds	r3, r7, r0
 800425c:	2213      	movs	r2, #19
 800425e:	701a      	strb	r2, [r3, #0]

		GPIOB->ODR &= ~(1 <<9);	//reset cs
 8004260:	4b4a      	ldr	r3, [pc, #296]	; (800438c <weoShowSmallImage+0x2f4>)
 8004262:	695a      	ldr	r2, [r3, #20]
 8004264:	4b49      	ldr	r3, [pc, #292]	; (800438c <weoShowSmallImage+0x2f4>)
 8004266:	494a      	ldr	r1, [pc, #296]	; (8004390 <weoShowSmallImage+0x2f8>)
 8004268:	400a      	ands	r2, r1
 800426a:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 800426c:	1839      	adds	r1, r7, r0
 800426e:	4849      	ldr	r0, [pc, #292]	; (8004394 <weoShowSmallImage+0x2fc>)
 8004270:	2332      	movs	r3, #50	; 0x32
 8004272:	2201      	movs	r2, #1
 8004274:	f005 fab0 	bl	80097d8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 8004278:	2408      	movs	r4, #8
 800427a:	193b      	adds	r3, r7, r4
 800427c:	1cd9      	adds	r1, r3, #3
 800427e:	4845      	ldr	r0, [pc, #276]	; (8004394 <weoShowSmallImage+0x2fc>)
 8004280:	2332      	movs	r3, #50	; 0x32
 8004282:	2201      	movs	r2, #1
 8004284:	f005 faa8 	bl	80097d8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 8004288:	193b      	adds	r3, r7, r4
 800428a:	1c99      	adds	r1, r3, #2
 800428c:	4841      	ldr	r0, [pc, #260]	; (8004394 <weoShowSmallImage+0x2fc>)
 800428e:	2332      	movs	r3, #50	; 0x32
 8004290:	2201      	movs	r2, #1
 8004292:	f005 faa1 	bl	80097d8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 8004296:	193b      	adds	r3, r7, r4
 8004298:	1c59      	adds	r1, r3, #1
 800429a:	483e      	ldr	r0, [pc, #248]	; (8004394 <weoShowSmallImage+0x2fc>)
 800429c:	2332      	movs	r3, #50	; 0x32
 800429e:	2201      	movs	r2, #1
 80042a0:	f005 fa9a 	bl	80097d8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 80042a4:	1939      	adds	r1, r7, r4
 80042a6:	483b      	ldr	r0, [pc, #236]	; (8004394 <weoShowSmallImage+0x2fc>)
 80042a8:	2332      	movs	r3, #50	; 0x32
 80042aa:	2201      	movs	r2, #1
 80042ac:	f005 fa94 	bl	80097d8 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 80042b0:	4b3d      	ldr	r3, [pc, #244]	; (80043a8 <weoShowSmallImage+0x310>)
 80042b2:	881a      	ldrh	r2, [r3, #0]
 80042b4:	4b38      	ldr	r3, [pc, #224]	; (8004398 <weoShowSmallImage+0x300>)
 80042b6:	2110      	movs	r1, #16
 80042b8:	1879      	adds	r1, r7, r1
 80042ba:	4836      	ldr	r0, [pc, #216]	; (8004394 <weoShowSmallImage+0x2fc>)
 80042bc:	f005 fbe4 	bl	8009a88 <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9;	// set cs
 80042c0:	4b32      	ldr	r3, [pc, #200]	; (800438c <weoShowSmallImage+0x2f4>)
 80042c2:	695a      	ldr	r2, [r3, #20]
 80042c4:	4b31      	ldr	r3, [pc, #196]	; (800438c <weoShowSmallImage+0x2f4>)
 80042c6:	2180      	movs	r1, #128	; 0x80
 80042c8:	0089      	lsls	r1, r1, #2
 80042ca:	430a      	orrs	r2, r1
 80042cc:	615a      	str	r2, [r3, #20]

		decY=0x01;
 80042ce:	4b39      	ldr	r3, [pc, #228]	; (80043b4 <weoShowSmallImage+0x31c>)
 80042d0:	2201      	movs	r2, #1
 80042d2:	701a      	strb	r2, [r3, #0]
		if(imY % 2 !=0){
 80042d4:	4b29      	ldr	r3, [pc, #164]	; (800437c <weoShowSmallImage+0x2e4>)
 80042d6:	4a27      	ldr	r2, [pc, #156]	; (8004374 <weoShowSmallImage+0x2dc>)
 80042d8:	4694      	mov	ip, r2
 80042da:	44bc      	add	ip, r7
 80042dc:	4463      	add	r3, ip
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2201      	movs	r2, #1
 80042e2:	4013      	ands	r3, r2
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d002      	beq.n	80042f0 <weoShowSmallImage+0x258>
			decY=0x02;
 80042ea:	4b32      	ldr	r3, [pc, #200]	; (80043b4 <weoShowSmallImage+0x31c>)
 80042ec:	2202      	movs	r2, #2
 80042ee:	701a      	strb	r2, [r3, #0]
		}
		weoDrawRectangleFilled(imX, imY, imX+width-1, imY+height-decY, 0xFF,MEM_Buffer);	// Здесь ещё работает 0xFF - затычка
 80042f0:	4b21      	ldr	r3, [pc, #132]	; (8004378 <weoShowSmallImage+0x2e0>)
 80042f2:	4920      	ldr	r1, [pc, #128]	; (8004374 <weoShowSmallImage+0x2dc>)
 80042f4:	187a      	adds	r2, r7, r1
 80042f6:	18d2      	adds	r2, r2, r3
 80042f8:	4b28      	ldr	r3, [pc, #160]	; (800439c <weoShowSmallImage+0x304>)
 80042fa:	18fb      	adds	r3, r7, r3
 80042fc:	7812      	ldrb	r2, [r2, #0]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	18d3      	adds	r3, r2, r3
 8004302:	b2db      	uxtb	r3, r3
 8004304:	3b01      	subs	r3, #1
 8004306:	b2dc      	uxtb	r4, r3
 8004308:	4b1c      	ldr	r3, [pc, #112]	; (800437c <weoShowSmallImage+0x2e4>)
 800430a:	187a      	adds	r2, r7, r1
 800430c:	18d2      	adds	r2, r2, r3
 800430e:	4b25      	ldr	r3, [pc, #148]	; (80043a4 <weoShowSmallImage+0x30c>)
 8004310:	18fb      	adds	r3, r7, r3
 8004312:	7812      	ldrb	r2, [r2, #0]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	18d3      	adds	r3, r2, r3
 8004318:	b2da      	uxtb	r2, r3
 800431a:	4b26      	ldr	r3, [pc, #152]	; (80043b4 <weoShowSmallImage+0x31c>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	b2da      	uxtb	r2, r3
 8004322:	4b16      	ldr	r3, [pc, #88]	; (800437c <weoShowSmallImage+0x2e4>)
 8004324:	4913      	ldr	r1, [pc, #76]	; (8004374 <weoShowSmallImage+0x2dc>)
 8004326:	468c      	mov	ip, r1
 8004328:	44bc      	add	ip, r7
 800432a:	4463      	add	r3, ip
 800432c:	7819      	ldrb	r1, [r3, #0]
 800432e:	4b12      	ldr	r3, [pc, #72]	; (8004378 <weoShowSmallImage+0x2e0>)
 8004330:	4810      	ldr	r0, [pc, #64]	; (8004374 <weoShowSmallImage+0x2dc>)
 8004332:	4684      	mov	ip, r0
 8004334:	44bc      	add	ip, r7
 8004336:	4463      	add	r3, ip
 8004338:	7818      	ldrb	r0, [r3, #0]
 800433a:	2310      	movs	r3, #16
 800433c:	18fb      	adds	r3, r7, r3
 800433e:	9301      	str	r3, [sp, #4]
 8004340:	23ff      	movs	r3, #255	; 0xff
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	0013      	movs	r3, r2
 8004346:	0022      	movs	r2, r4
 8004348:	f7fe ff82 	bl	8003250 <weoDrawRectangleFilled>
		cmd2Execute=0;
 800434c:	4b1a      	ldr	r3, [pc, #104]	; (80043b8 <weoShowSmallImage+0x320>)
 800434e:	2200      	movs	r2, #0
 8004350:	701a      	strb	r2, [r3, #0]
//		while(BFEN==0){};
		GPIOC->ODR |= 1 << 6;	//set BF
 8004352:	4b1a      	ldr	r3, [pc, #104]	; (80043bc <weoShowSmallImage+0x324>)
 8004354:	695a      	ldr	r2, [r3, #20]
 8004356:	4b19      	ldr	r3, [pc, #100]	; (80043bc <weoShowSmallImage+0x324>)
 8004358:	2140      	movs	r1, #64	; 0x40
 800435a:	430a      	orrs	r2, r1
 800435c:	615a      	str	r2, [r3, #20]
	}
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	0018      	movs	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	4b16      	ldr	r3, [pc, #88]	; (80043c0 <weoShowSmallImage+0x328>)
 8004366:	449d      	add	sp, r3
 8004368:	bd90      	pop	{r4, r7, pc}
 800436a:	46c0      	nop			; (mov r8, r8)
 800436c:	ffffdfd4 	.word	0xffffdfd4
 8004370:	ffffdfe7 	.word	0xffffdfe7
 8004374:	00002020 	.word	0x00002020
 8004378:	ffffdfe6 	.word	0xffffdfe6
 800437c:	ffffdfe5 	.word	0xffffdfe5
 8004380:	0000201c 	.word	0x0000201c
 8004384:	00002013 	.word	0x00002013
 8004388:	ffffdfe8 	.word	0xffffdfe8
 800438c:	50000400 	.word	0x50000400
 8004390:	fffffdff 	.word	0xfffffdff
 8004394:	200000b4 	.word	0x200000b4
 8004398:	00001388 	.word	0x00001388
 800439c:	0000201b 	.word	0x0000201b
 80043a0:	ffffdfec 	.word	0xffffdfec
 80043a4:	0000201a 	.word	0x0000201a
 80043a8:	20001504 	.word	0x20001504
 80043ac:	00002014 	.word	0x00002014
 80043b0:	40004400 	.word	0x40004400
 80043b4:	2000131d 	.word	0x2000131d
 80043b8:	2000137b 	.word	0x2000137b
 80043bc:	50000800 	.word	0x50000800
 80043c0:	00002024 	.word	0x00002024

080043c4 <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOB->ODR |= 1 << 9;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 80043ca:	1d3b      	adds	r3, r7, #4
 80043cc:	4a29      	ldr	r2, [pc, #164]	; (8004474 <MEM_GetID+0xb0>)
 80043ce:	7812      	ldrb	r2, [r2, #0]
 80043d0:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 80043d2:	1dfb      	adds	r3, r7, #7
 80043d4:	229e      	movs	r2, #158	; 0x9e
 80043d6:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 <<9);	//reset cs
 80043d8:	4b27      	ldr	r3, [pc, #156]	; (8004478 <MEM_GetID+0xb4>)
 80043da:	695a      	ldr	r2, [r3, #20]
 80043dc:	4b26      	ldr	r3, [pc, #152]	; (8004478 <MEM_GetID+0xb4>)
 80043de:	4927      	ldr	r1, [pc, #156]	; (800447c <MEM_GetID+0xb8>)
 80043e0:	400a      	ands	r2, r1
 80043e2:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 80043e4:	1df9      	adds	r1, r7, #7
 80043e6:	4826      	ldr	r0, [pc, #152]	; (8004480 <MEM_GetID+0xbc>)
 80043e8:	2332      	movs	r3, #50	; 0x32
 80043ea:	2201      	movs	r2, #1
 80043ec:	f005 f9f4 	bl	80097d8 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 80043f0:	23fa      	movs	r3, #250	; 0xfa
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	1d39      	adds	r1, r7, #4
 80043f6:	4822      	ldr	r0, [pc, #136]	; (8004480 <MEM_GetID+0xbc>)
 80043f8:	2201      	movs	r2, #1
 80043fa:	f005 fb45 	bl	8009a88 <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 80043fe:	1d3b      	adds	r3, r7, #4
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	001a      	movs	r2, r3
 8004404:	4b1f      	ldr	r3, [pc, #124]	; (8004484 <MEM_GetID+0xc0>)
 8004406:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 8004408:	4b1e      	ldr	r3, [pc, #120]	; (8004484 <MEM_GetID+0xc0>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	021a      	lsls	r2, r3, #8
 800440e:	4b1d      	ldr	r3, [pc, #116]	; (8004484 <MEM_GetID+0xc0>)
 8004410:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8004412:	23fa      	movs	r3, #250	; 0xfa
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	1d39      	adds	r1, r7, #4
 8004418:	4819      	ldr	r0, [pc, #100]	; (8004480 <MEM_GetID+0xbc>)
 800441a:	2201      	movs	r2, #1
 800441c:	f005 fb34 	bl	8009a88 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8004420:	1d3b      	adds	r3, r7, #4
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	001a      	movs	r2, r3
 8004426:	4b17      	ldr	r3, [pc, #92]	; (8004484 <MEM_GetID+0xc0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	18d2      	adds	r2, r2, r3
 800442c:	4b15      	ldr	r3, [pc, #84]	; (8004484 <MEM_GetID+0xc0>)
 800442e:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 8004430:	4b14      	ldr	r3, [pc, #80]	; (8004484 <MEM_GetID+0xc0>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	021a      	lsls	r2, r3, #8
 8004436:	4b13      	ldr	r3, [pc, #76]	; (8004484 <MEM_GetID+0xc0>)
 8004438:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 800443a:	23fa      	movs	r3, #250	; 0xfa
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	1d39      	adds	r1, r7, #4
 8004440:	480f      	ldr	r0, [pc, #60]	; (8004480 <MEM_GetID+0xbc>)
 8004442:	2201      	movs	r2, #1
 8004444:	f005 fb20 	bl	8009a88 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8004448:	1d3b      	adds	r3, r7, #4
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	001a      	movs	r2, r3
 800444e:	4b0d      	ldr	r3, [pc, #52]	; (8004484 <MEM_GetID+0xc0>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	18d2      	adds	r2, r2, r3
 8004454:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <MEM_GetID+0xc0>)
 8004456:	601a      	str	r2, [r3, #0]
		GPIOB->ODR |= 1 << 9;                    			// set cs
 8004458:	4b07      	ldr	r3, [pc, #28]	; (8004478 <MEM_GetID+0xb4>)
 800445a:	695a      	ldr	r2, [r3, #20]
 800445c:	4b06      	ldr	r3, [pc, #24]	; (8004478 <MEM_GetID+0xb4>)
 800445e:	2180      	movs	r1, #128	; 0x80
 8004460:	0089      	lsls	r1, r1, #2
 8004462:	430a      	orrs	r2, r1
 8004464:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 8004466:	4b07      	ldr	r3, [pc, #28]	; (8004484 <MEM_GetID+0xc0>)
 8004468:	681b      	ldr	r3, [r3, #0]
	}
 800446a:	0018      	movs	r0, r3
 800446c:	46bd      	mov	sp, r7
 800446e:	b002      	add	sp, #8
 8004470:	bd80      	pop	{r7, pc}
 8004472:	46c0      	nop			; (mov r8, r8)
 8004474:	0800ddd8 	.word	0x0800ddd8
 8004478:	50000400 	.word	0x50000400
 800447c:	fffffdff 	.word	0xfffffdff
 8004480:	200000b4 	.word	0x200000b4
 8004484:	20000060 	.word	0x20000060

08004488 <cmdExecute>:
	uint16_t Scount(void){
		LIS3DHreadData();

	}
//====================================================================================================================
	uint8_t cmdExecute(uint8_t cmd2Execute){
 8004488:	b590      	push	{r4, r7, lr}
 800448a:	b085      	sub	sp, #20
 800448c:	af02      	add	r7, sp, #8
 800448e:	0002      	movs	r2, r0
 8004490:	1dfb      	adds	r3, r7, #7
 8004492:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8004494:	4b84      	ldr	r3, [pc, #528]	; (80046a8 <cmdExecute+0x220>)
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	2b10      	cmp	r3, #16
 800449a:	d100      	bne.n	800449e <cmdExecute+0x16>
 800449c:	e0fb      	b.n	8004696 <cmdExecute+0x20e>
		if(soundReady==0){return;}
 800449e:	4b83      	ldr	r3, [pc, #524]	; (80046ac <cmdExecute+0x224>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d100      	bne.n	80044a8 <cmdExecute+0x20>
 80044a6:	e0f8      	b.n	800469a <cmdExecute+0x212>
//		if(cmd[0]==00){return;}
		if (bf4me!=0x00){return;}	// protection against false BF resets
 80044a8:	4b81      	ldr	r3, [pc, #516]	; (80046b0 <cmdExecute+0x228>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d000      	beq.n	80044b2 <cmdExecute+0x2a>
 80044b0:	e0f5      	b.n	800469e <cmdExecute+0x216>
		USART2->ICR|=USART_ICR_ORECF;
 80044b2:	4b80      	ldr	r3, [pc, #512]	; (80046b4 <cmdExecute+0x22c>)
 80044b4:	6a1a      	ldr	r2, [r3, #32]
 80044b6:	4b7f      	ldr	r3, [pc, #508]	; (80046b4 <cmdExecute+0x22c>)
 80044b8:	2108      	movs	r1, #8
 80044ba:	430a      	orrs	r2, r1
 80044bc:	621a      	str	r2, [r3, #32]

				}
		if(cmd2Execute==0x10){

				}
		if(cmd2Execute==0x11){
 80044be:	1dfb      	adds	r3, r7, #7
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b11      	cmp	r3, #17
 80044c4:	d113      	bne.n	80044ee <cmdExecute+0x66>
			GPIOC->ODR &=~ GPIO_ODR_OD6;
 80044c6:	4b7c      	ldr	r3, [pc, #496]	; (80046b8 <cmdExecute+0x230>)
 80044c8:	695a      	ldr	r2, [r3, #20]
 80044ca:	4b7b      	ldr	r3, [pc, #492]	; (80046b8 <cmdExecute+0x230>)
 80044cc:	2140      	movs	r1, #64	; 0x40
 80044ce:	438a      	bics	r2, r1
 80044d0:	615a      	str	r2, [r3, #20]
			bf4me=0x11;	//set BF flag 4 me
 80044d2:	4b77      	ldr	r3, [pc, #476]	; (80046b0 <cmdExecute+0x228>)
 80044d4:	2211      	movs	r2, #17
 80044d6:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
			weoShowFullScreen(picNum);
 80044d8:	4b78      	ldr	r3, [pc, #480]	; (80046bc <cmdExecute+0x234>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	0018      	movs	r0, r3
 80044de:	f7ff fd31 	bl	8003f44 <weoShowFullScreen>
//			weoShowFullScreenDMA(picNum);
			USART2->ICR|=USART_ICR_ORECF;
 80044e2:	4b74      	ldr	r3, [pc, #464]	; (80046b4 <cmdExecute+0x22c>)
 80044e4:	6a1a      	ldr	r2, [r3, #32]
 80044e6:	4b73      	ldr	r3, [pc, #460]	; (80046b4 <cmdExecute+0x22c>)
 80044e8:	2108      	movs	r1, #8
 80044ea:	430a      	orrs	r2, r1
 80044ec:	621a      	str	r2, [r3, #32]
				}
		if(cmd2Execute==0x12){
 80044ee:	1dfb      	adds	r3, r7, #7
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2b12      	cmp	r3, #18
 80044f4:	d10d      	bne.n	8004512 <cmdExecute+0x8a>
			bf4me=0x12;	//set BF flag 4 me
 80044f6:	4b6e      	ldr	r3, [pc, #440]	; (80046b0 <cmdExecute+0x228>)
 80044f8:	2212      	movs	r2, #18
 80044fa:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowSmallImageDMA(picNum,imX,imY);
			weoShowSmallImage(picNum,imX,imY);
 80044fc:	4b6f      	ldr	r3, [pc, #444]	; (80046bc <cmdExecute+0x234>)
 80044fe:	7818      	ldrb	r0, [r3, #0]
 8004500:	4b6f      	ldr	r3, [pc, #444]	; (80046c0 <cmdExecute+0x238>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	b2d9      	uxtb	r1, r3
 8004506:	4b6f      	ldr	r3, [pc, #444]	; (80046c4 <cmdExecute+0x23c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	b2db      	uxtb	r3, r3
 800450c:	001a      	movs	r2, r3
 800450e:	f7ff fdc3 	bl	8004098 <weoShowSmallImage>
				}
		if(cmd2Execute==0x13){
 8004512:	1dfb      	adds	r3, r7, #7
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b13      	cmp	r3, #19
 8004518:	d111      	bne.n	800453e <cmdExecute+0xb6>
			bf4me=0x13;	//set BF flag 4 me
 800451a:	4b65      	ldr	r3, [pc, #404]	; (80046b0 <cmdExecute+0x228>)
 800451c:	2213      	movs	r2, #19
 800451e:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY,strLen,fontInfo,dataASCII);
 8004520:	4b67      	ldr	r3, [pc, #412]	; (80046c0 <cmdExecute+0x238>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	b2d8      	uxtb	r0, r3
 8004526:	4b67      	ldr	r3, [pc, #412]	; (80046c4 <cmdExecute+0x23c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	b2d9      	uxtb	r1, r3
 800452c:	4b66      	ldr	r3, [pc, #408]	; (80046c8 <cmdExecute+0x240>)
 800452e:	781a      	ldrb	r2, [r3, #0]
 8004530:	4b66      	ldr	r3, [pc, #408]	; (80046cc <cmdExecute+0x244>)
 8004532:	781c      	ldrb	r4, [r3, #0]
 8004534:	4b66      	ldr	r3, [pc, #408]	; (80046d0 <cmdExecute+0x248>)
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	0023      	movs	r3, r4
 800453a:	f000 f8d3 	bl	80046e4 <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 800453e:	1dfb      	adds	r3, r7, #7
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	2b14      	cmp	r3, #20
 8004544:	d13e      	bne.n	80045c4 <cmdExecute+0x13c>
//			if(soundReady!=1){return;}
			bf4me=0x14;	//set BF flag 4 me
 8004546:	4b5a      	ldr	r3, [pc, #360]	; (80046b0 <cmdExecute+0x228>)
 8004548:	2214      	movs	r2, #20
 800454a:	701a      	strb	r2, [r3, #0]
			if(numSound==0x01){
 800454c:	4b61      	ldr	r3, [pc, #388]	; (80046d4 <cmdExecute+0x24c>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d116      	bne.n	8004582 <cmdExecute+0xfa>
				if(soundReady!=0){
 8004554:	4b55      	ldr	r3, [pc, #340]	; (80046ac <cmdExecute+0x224>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d012      	beq.n	8004582 <cmdExecute+0xfa>
				soundReady=0;
 800455c:	4b53      	ldr	r3, [pc, #332]	; (80046ac <cmdExecute+0x224>)
 800455e:	2200      	movs	r2, #0
 8004560:	701a      	strb	r2, [r3, #0]
				USART2->ICR|=USART_ICR_ORECF;
 8004562:	4b54      	ldr	r3, [pc, #336]	; (80046b4 <cmdExecute+0x22c>)
 8004564:	6a1a      	ldr	r2, [r3, #32]
 8004566:	4b53      	ldr	r3, [pc, #332]	; (80046b4 <cmdExecute+0x22c>)
 8004568:	2108      	movs	r1, #8
 800456a:	430a      	orrs	r2, r1
 800456c:	621a      	str	r2, [r3, #32]
				squeak_single(signal);
 800456e:	4b5a      	ldr	r3, [pc, #360]	; (80046d8 <cmdExecute+0x250>)
 8004570:	0018      	movs	r0, r3
 8004572:	f000 fa99 	bl	8004aa8 <squeak_single>
				USART2->ICR|=USART_ICR_ORECF;
 8004576:	4b4f      	ldr	r3, [pc, #316]	; (80046b4 <cmdExecute+0x22c>)
 8004578:	6a1a      	ldr	r2, [r3, #32]
 800457a:	4b4e      	ldr	r3, [pc, #312]	; (80046b4 <cmdExecute+0x22c>)
 800457c:	2108      	movs	r1, #8
 800457e:	430a      	orrs	r2, r1
 8004580:	621a      	str	r2, [r3, #32]
				}
			}
			if(numSound==0x02){
 8004582:	4b54      	ldr	r3, [pc, #336]	; (80046d4 <cmdExecute+0x24c>)
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	2b02      	cmp	r3, #2
 8004588:	d103      	bne.n	8004592 <cmdExecute+0x10a>
//				soundReady=0;
				squeak_double(signal);
 800458a:	4b53      	ldr	r3, [pc, #332]	; (80046d8 <cmdExecute+0x250>)
 800458c:	0018      	movs	r0, r3
 800458e:	f000 fb45 	bl	8004c1c <squeak_double>
			}
			if(numSound==0x03){
 8004592:	4b50      	ldr	r3, [pc, #320]	; (80046d4 <cmdExecute+0x24c>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	2b03      	cmp	r3, #3
 8004598:	d103      	bne.n	80045a2 <cmdExecute+0x11a>
//				soundReady=0;
				squeak_triple(signal);
 800459a:	4b4f      	ldr	r3, [pc, #316]	; (80046d8 <cmdExecute+0x250>)
 800459c:	0018      	movs	r0, r3
 800459e:	f000 fb73 	bl	8004c88 <squeak_triple>
				}
			if(numSound==0x04){
 80045a2:	4b4c      	ldr	r3, [pc, #304]	; (80046d4 <cmdExecute+0x24c>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d103      	bne.n	80045b2 <cmdExecute+0x12a>
//				soundReady=0;
				squeak_long(signal);
 80045aa:	4b4b      	ldr	r3, [pc, #300]	; (80046d8 <cmdExecute+0x250>)
 80045ac:	0018      	movs	r0, r3
 80045ae:	f000 fabb 	bl	8004b28 <squeak_long>
				}
//			if(numSound!=1){
//			HAL_Delay(500);
//			}
			cmd2Execute=0;
 80045b2:	1dfb      	adds	r3, r7, #7
 80045b4:	2200      	movs	r2, #0
 80045b6:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
			GPIOC->ODR |= 1 << 6;	//set BF
 80045b8:	4b3f      	ldr	r3, [pc, #252]	; (80046b8 <cmdExecute+0x230>)
 80045ba:	695a      	ldr	r2, [r3, #20]
 80045bc:	4b3e      	ldr	r3, [pc, #248]	; (80046b8 <cmdExecute+0x230>)
 80045be:	2140      	movs	r1, #64	; 0x40
 80045c0:	430a      	orrs	r2, r1
 80045c2:	615a      	str	r2, [r3, #20]

		}
		if(cmd2Execute==0x15){
 80045c4:	1dfb      	adds	r3, r7, #7
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	2b15      	cmp	r3, #21
 80045ca:	d153      	bne.n	8004674 <cmdExecute+0x1ec>
			bf4me=0x15;	//set BF flag 4 me
 80045cc:	4b38      	ldr	r3, [pc, #224]	; (80046b0 <cmdExecute+0x228>)
 80045ce:	2215      	movs	r2, #21
 80045d0:	701a      	strb	r2, [r3, #0]
			I2C_SOUND_ChangePage(0x01);
 80045d2:	2001      	movs	r0, #1
 80045d4:	f7fe ff20 	bl	8003418 <I2C_SOUND_ChangePage>
//			WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
			if(volume==0x00){
 80045d8:	4b40      	ldr	r3, [pc, #256]	; (80046dc <cmdExecute+0x254>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d106      	bne.n	80045ee <cmdExecute+0x166>
				I2C_SOUND_ChangePage(0x01);
 80045e0:	2001      	movs	r0, #1
 80045e2:	f7fe ff19 	bl	8003418 <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x2E,0xFF);// mute
 80045e6:	21ff      	movs	r1, #255	; 0xff
 80045e8:	202e      	movs	r0, #46	; 0x2e
 80045ea:	f7fe ff33 	bl	8003454 <WriteReg_I2C_SOUND>
			}
			I2C_SOUND_ChangePage(0x01);
 80045ee:	2001      	movs	r0, #1
 80045f0:	f7fe ff12 	bl	8003418 <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x2E, volume);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 80045f4:	4b39      	ldr	r3, [pc, #228]	; (80046dc <cmdExecute+0x254>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	0019      	movs	r1, r3
 80045fa:	202e      	movs	r0, #46	; 0x2e
 80045fc:	f7fe ff2a 	bl	8003454 <WriteReg_I2C_SOUND>

			if(contrast==0x00){
 8004600:	4b37      	ldr	r3, [pc, #220]	; (80046e0 <cmdExecute+0x258>)
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d102      	bne.n	800460e <cmdExecute+0x186>
				weoClear();
 8004608:	f7fe fdbe 	bl	8003188 <weoClear>
 800460c:	e029      	b.n	8004662 <cmdExecute+0x1da>
			}
			else{
				GPIOA->ODR &= ~(1 << 6);	//reset cs
 800460e:	23a0      	movs	r3, #160	; 0xa0
 8004610:	05db      	lsls	r3, r3, #23
 8004612:	695a      	ldr	r2, [r3, #20]
 8004614:	23a0      	movs	r3, #160	; 0xa0
 8004616:	05db      	lsls	r3, r3, #23
 8004618:	2140      	movs	r1, #64	; 0x40
 800461a:	438a      	bics	r2, r1
 800461c:	615a      	str	r2, [r3, #20]
				GPIOA->ODR &= ~(1 << 7);	// reset dc
 800461e:	23a0      	movs	r3, #160	; 0xa0
 8004620:	05db      	lsls	r3, r3, #23
 8004622:	695a      	ldr	r2, [r3, #20]
 8004624:	23a0      	movs	r3, #160	; 0xa0
 8004626:	05db      	lsls	r3, r3, #23
 8004628:	2180      	movs	r1, #128	; 0x80
 800462a:	438a      	bics	r2, r1
 800462c:	615a      	str	r2, [r3, #20]
				USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 800462e:	2081      	movs	r0, #129	; 0x81
 8004630:	f7fe fd2c 	bl	800308c <USART_AS_SPI_sendCMD>
				USART_AS_SPI_sendCMD(contrast*0x10);
 8004634:	4b2a      	ldr	r3, [pc, #168]	; (80046e0 <cmdExecute+0x258>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	b2db      	uxtb	r3, r3
 800463c:	0018      	movs	r0, r3
 800463e:	f7fe fd25 	bl	800308c <USART_AS_SPI_sendCMD>
				GPIOA->ODR |= 1 << 7;	//set dc
 8004642:	23a0      	movs	r3, #160	; 0xa0
 8004644:	05db      	lsls	r3, r3, #23
 8004646:	695a      	ldr	r2, [r3, #20]
 8004648:	23a0      	movs	r3, #160	; 0xa0
 800464a:	05db      	lsls	r3, r3, #23
 800464c:	2180      	movs	r1, #128	; 0x80
 800464e:	430a      	orrs	r2, r1
 8004650:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= 1 << 6;	//set cs
 8004652:	23a0      	movs	r3, #160	; 0xa0
 8004654:	05db      	lsls	r3, r3, #23
 8004656:	695a      	ldr	r2, [r3, #20]
 8004658:	23a0      	movs	r3, #160	; 0xa0
 800465a:	05db      	lsls	r3, r3, #23
 800465c:	2140      	movs	r1, #64	; 0x40
 800465e:	430a      	orrs	r2, r1
 8004660:	615a      	str	r2, [r3, #20]
			}
//			bf4me=0x15;	//set BF flag 4 me
			cmd2Execute=0;
 8004662:	1dfb      	adds	r3, r7, #7
 8004664:	2200      	movs	r2, #0
 8004666:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
			GPIOC->ODR |= 1 << 6;	//set BF
 8004668:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <cmdExecute+0x230>)
 800466a:	695a      	ldr	r2, [r3, #20]
 800466c:	4b12      	ldr	r3, [pc, #72]	; (80046b8 <cmdExecute+0x230>)
 800466e:	2140      	movs	r1, #64	; 0x40
 8004670:	430a      	orrs	r2, r1
 8004672:	615a      	str	r2, [r3, #20]
		}
		if(cmd2Execute==0x16){
 8004674:	1dfb      	adds	r3, r7, #7
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	2b16      	cmp	r3, #22
 800467a:	d102      	bne.n	8004682 <cmdExecute+0x1fa>
			bf4me=0x16;	//set BF flag 4 me
 800467c:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <cmdExecute+0x228>)
 800467e:	2216      	movs	r2, #22
 8004680:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 8004682:	1dfb      	adds	r3, r7, #7
 8004684:	2200      	movs	r2, #0
 8004686:	701a      	strb	r2, [r3, #0]

				}
//			}
//		}
		USART2->ICR|=USART_ICR_ORECF;
 8004688:	4b0a      	ldr	r3, [pc, #40]	; (80046b4 <cmdExecute+0x22c>)
 800468a:	6a1a      	ldr	r2, [r3, #32]
 800468c:	4b09      	ldr	r3, [pc, #36]	; (80046b4 <cmdExecute+0x22c>)
 800468e:	2108      	movs	r1, #8
 8004690:	430a      	orrs	r2, r1
 8004692:	621a      	str	r2, [r3, #32]
 8004694:	e004      	b.n	80046a0 <cmdExecute+0x218>
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8004696:	46c0      	nop			; (mov r8, r8)
 8004698:	e002      	b.n	80046a0 <cmdExecute+0x218>
		if(soundReady==0){return;}
 800469a:	46c0      	nop			; (mov r8, r8)
 800469c:	e000      	b.n	80046a0 <cmdExecute+0x218>
		if (bf4me!=0x00){return;}	// protection against false BF resets
 800469e:	46c0      	nop			; (mov r8, r8)
	}
 80046a0:	0018      	movs	r0, r3
 80046a2:	46bd      	mov	sp, r7
 80046a4:	b003      	add	sp, #12
 80046a6:	bd90      	pop	{r4, r7, pc}
 80046a8:	2000350c 	.word	0x2000350c
 80046ac:	20000034 	.word	0x20000034
 80046b0:	200013dc 	.word	0x200013dc
 80046b4:	40004400 	.word	0x40004400
 80046b8:	50000800 	.word	0x50000800
 80046bc:	2000137a 	.word	0x2000137a
 80046c0:	20000204 	.word	0x20000204
 80046c4:	20000298 	.word	0x20000298
 80046c8:	200013c5 	.word	0x200013c5
 80046cc:	20000195 	.word	0x20000195
 80046d0:	200000a4 	.word	0x200000a4
 80046d4:	20001445 	.word	0x20001445
 80046d8:	20000314 	.word	0x20000314
 80046dc:	20000202 	.word	0x20000202
 80046e0:	20000304 	.word	0x20000304

080046e4 <printASCIIarray>:
//========================================================================================================================
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t fontInfo,uint8_t dataASCII[]){
 80046e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046e6:	b0af      	sub	sp, #188	; 0xbc
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	0005      	movs	r5, r0
 80046ec:	000c      	movs	r4, r1
 80046ee:	0010      	movs	r0, r2
 80046f0:	0019      	movs	r1, r3
 80046f2:	1dfb      	adds	r3, r7, #7
 80046f4:	1c2a      	adds	r2, r5, #0
 80046f6:	701a      	strb	r2, [r3, #0]
 80046f8:	1dbb      	adds	r3, r7, #6
 80046fa:	1c22      	adds	r2, r4, #0
 80046fc:	701a      	strb	r2, [r3, #0]
 80046fe:	1d7b      	adds	r3, r7, #5
 8004700:	1c02      	adds	r2, r0, #0
 8004702:	701a      	strb	r2, [r3, #0]
 8004704:	1d3b      	adds	r3, r7, #4
 8004706:	1c0a      	adds	r2, r1, #0
 8004708:	701a      	strb	r2, [r3, #0]
			uint8_t j,X_increment,Y_height,X_width,ASCII_X,decY,fontCur;
			uint8_t weoBuffer1[49],weoBuffer2[49],weoBuffer[49];
			uint16_t i, symLen;
			ASCII_X=imX;
 800470a:	23ad      	movs	r3, #173	; 0xad
 800470c:	18fb      	adds	r3, r7, r3
 800470e:	1dfa      	adds	r2, r7, #7
 8004710:	7812      	ldrb	r2, [r2, #0]
 8004712:	701a      	strb	r2, [r3, #0]

			if((fontInfo|0x00==0)){
			symLen=49;
 8004714:	21a8      	movs	r1, #168	; 0xa8
 8004716:	187b      	adds	r3, r7, r1
 8004718:	2231      	movs	r2, #49	; 0x31
 800471a:	801a      	strh	r2, [r3, #0]
			fontCur=0;
 800471c:	20a5      	movs	r0, #165	; 0xa5
 800471e:	183b      	adds	r3, r7, r0
 8004720:	2200      	movs	r2, #0
 8004722:	701a      	strb	r2, [r3, #0]
			X_increment=0x07;
 8004724:	24ae      	movs	r4, #174	; 0xae
 8004726:	193b      	adds	r3, r7, r4
 8004728:	2207      	movs	r2, #7
 800472a:	701a      	strb	r2, [r3, #0]
			Y_height=0x0E;
 800472c:	25a4      	movs	r5, #164	; 0xa4
 800472e:	197b      	adds	r3, r7, r5
 8004730:	220e      	movs	r2, #14
 8004732:	701a      	strb	r2, [r3, #0]
			}
			if((fontInfo|0x01==0)){
 8004734:	1d3b      	adds	r3, r7, #4
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00b      	beq.n	8004754 <printASCIIarray+0x70>
				symLen=99;
 800473c:	187b      	adds	r3, r7, r1
 800473e:	2263      	movs	r2, #99	; 0x63
 8004740:	801a      	strh	r2, [r3, #0]
				fontCur=1;
 8004742:	183b      	adds	r3, r7, r0
 8004744:	2201      	movs	r2, #1
 8004746:	701a      	strb	r2, [r3, #0]
				X_increment=0x07;
 8004748:	193b      	adds	r3, r7, r4
 800474a:	2207      	movs	r2, #7
 800474c:	701a      	strb	r2, [r3, #0]
				Y_height=0x12;
 800474e:	197b      	adds	r3, r7, r5
 8004750:	2212      	movs	r2, #18
 8004752:	701a      	strb	r2, [r3, #0]
				fontCur=2;
				X_increment=0x10;
				Y_height=0x26;
			}

			decY=0x01;
 8004754:	21ac      	movs	r1, #172	; 0xac
 8004756:	187b      	adds	r3, r7, r1
 8004758:	2201      	movs	r2, #1
 800475a:	701a      	strb	r2, [r3, #0]
			if(imY % 2 !=0){
 800475c:	1dbb      	adds	r3, r7, #6
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2201      	movs	r2, #1
 8004762:	4013      	ands	r3, r2
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <printASCIIarray+0x8c>
				decY=0x02;
 800476a:	187b      	adds	r3, r7, r1
 800476c:	2202      	movs	r2, #2
 800476e:	701a      	strb	r2, [r3, #0]
			}

			for (i=0;i<strLen;i++){
 8004770:	23aa      	movs	r3, #170	; 0xaa
 8004772:	18fb      	adds	r3, r7, r3
 8004774:	2200      	movs	r2, #0
 8004776:	801a      	strh	r2, [r3, #0]
 8004778:	e0f5      	b.n	8004966 <printASCIIarray+0x282>
				for(j=0;j<symLen;j++){
 800477a:	23af      	movs	r3, #175	; 0xaf
 800477c:	18fb      	adds	r3, r7, r3
 800477e:	2200      	movs	r2, #0
 8004780:	701a      	strb	r2, [r3, #0]
 8004782:	e046      	b.n	8004812 <printASCIIarray+0x12e>
					if(fontCur=0){
 8004784:	26a5      	movs	r6, #165	; 0xa5
 8004786:	19bb      	adds	r3, r7, r6
 8004788:	2200      	movs	r2, #0
 800478a:	701a      	strb	r2, [r3, #0]
					weoBuffer[j]=F1[dataASCII[i]][j];
					}
					if(fontCur=1){
 800478c:	19bb      	adds	r3, r7, r6
 800478e:	2201      	movs	r2, #1
 8004790:	701a      	strb	r2, [r3, #0]
					weoBuffer[j]=F2[dataASCII[i]][j];
 8004792:	23aa      	movs	r3, #170	; 0xaa
 8004794:	18fb      	adds	r3, r7, r3
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	22c0      	movs	r2, #192	; 0xc0
 800479a:	2108      	movs	r1, #8
 800479c:	1878      	adds	r0, r7, r1
 800479e:	1881      	adds	r1, r0, r2
 80047a0:	680a      	ldr	r2, [r1, #0]
 80047a2:	18d3      	adds	r3, r2, r3
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	001c      	movs	r4, r3
 80047a8:	25af      	movs	r5, #175	; 0xaf
 80047aa:	197b      	adds	r3, r7, r5
 80047ac:	7819      	ldrb	r1, [r3, #0]
 80047ae:	197b      	adds	r3, r7, r5
 80047b0:	781a      	ldrb	r2, [r3, #0]
 80047b2:	4885      	ldr	r0, [pc, #532]	; (80049c8 <printASCIIarray+0x2e4>)
 80047b4:	0023      	movs	r3, r4
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	191b      	adds	r3, r3, r4
 80047ba:	015c      	lsls	r4, r3, #5
 80047bc:	191b      	adds	r3, r3, r4
 80047be:	18c3      	adds	r3, r0, r3
 80047c0:	5c59      	ldrb	r1, [r3, r1]
 80047c2:	2008      	movs	r0, #8
 80047c4:	183b      	adds	r3, r7, r0
 80047c6:	5499      	strb	r1, [r3, r2]
					}
					if(fontCur=2){
 80047c8:	19bb      	adds	r3, r7, r6
 80047ca:	2202      	movs	r2, #2
 80047cc:	701a      	strb	r2, [r3, #0]
					weoBuffer[j]=F3[dataASCII[i+32]][j];
 80047ce:	23aa      	movs	r3, #170	; 0xaa
 80047d0:	18fb      	adds	r3, r7, r3
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	3320      	adds	r3, #32
 80047d6:	22c0      	movs	r2, #192	; 0xc0
 80047d8:	2108      	movs	r1, #8
 80047da:	468c      	mov	ip, r1
 80047dc:	44bc      	add	ip, r7
 80047de:	4462      	add	r2, ip
 80047e0:	6812      	ldr	r2, [r2, #0]
 80047e2:	18d3      	adds	r3, r2, r3
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	001a      	movs	r2, r3
 80047e8:	197b      	adds	r3, r7, r5
 80047ea:	7818      	ldrb	r0, [r3, #0]
 80047ec:	197b      	adds	r3, r7, r5
 80047ee:	7819      	ldrb	r1, [r3, #0]
 80047f0:	4c76      	ldr	r4, [pc, #472]	; (80049cc <printASCIIarray+0x2e8>)
 80047f2:	0013      	movs	r3, r2
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	189b      	adds	r3, r3, r2
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	189b      	adds	r3, r3, r2
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	18e3      	adds	r3, r4, r3
 8004800:	5c1a      	ldrb	r2, [r3, r0]
 8004802:	2008      	movs	r0, #8
 8004804:	183b      	adds	r3, r7, r0
 8004806:	545a      	strb	r2, [r3, r1]
				for(j=0;j<symLen;j++){
 8004808:	197b      	adds	r3, r7, r5
 800480a:	781a      	ldrb	r2, [r3, #0]
 800480c:	197b      	adds	r3, r7, r5
 800480e:	3201      	adds	r2, #1
 8004810:	701a      	strb	r2, [r3, #0]
 8004812:	23af      	movs	r3, #175	; 0xaf
 8004814:	18fb      	adds	r3, r7, r3
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	b29b      	uxth	r3, r3
 800481a:	22a8      	movs	r2, #168	; 0xa8
 800481c:	18ba      	adds	r2, r7, r2
 800481e:	8812      	ldrh	r2, [r2, #0]
 8004820:	429a      	cmp	r2, r3
 8004822:	d8af      	bhi.n	8004784 <printASCIIarray+0xa0>
					}
				}
				if(imY > 0x7F){
 8004824:	1dbb      	adds	r3, r7, #6
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	b25b      	sxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	da6b      	bge.n	8004906 <printASCIIarray+0x222>
					imY &=0x7F;
 800482e:	1dbb      	adds	r3, r7, #6
 8004830:	1dba      	adds	r2, r7, #6
 8004832:	7812      	ldrb	r2, [r2, #0]
 8004834:	217f      	movs	r1, #127	; 0x7f
 8004836:	400a      	ands	r2, r1
 8004838:	701a      	strb	r2, [r3, #0]

					dimmer=1;
 800483a:	4b65      	ldr	r3, [pc, #404]	; (80049d0 <printASCIIarray+0x2ec>)
 800483c:	2201      	movs	r2, #1
 800483e:	701a      	strb	r2, [r3, #0]
				for (uint8_t k=0;k<symLen;k++){
 8004840:	23a7      	movs	r3, #167	; 0xa7
 8004842:	18fb      	adds	r3, r7, r3
 8004844:	2200      	movs	r2, #0
 8004846:	701a      	strb	r2, [r3, #0]
 8004848:	e02b      	b.n	80048a2 <printASCIIarray+0x1be>
					weoBuffer1[k]=(weoBuffer[k]&0x0F)>>dimmer;
 800484a:	21a7      	movs	r1, #167	; 0xa7
 800484c:	187b      	adds	r3, r7, r1
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2408      	movs	r4, #8
 8004852:	193a      	adds	r2, r7, r4
 8004854:	5cd3      	ldrb	r3, [r2, r3]
 8004856:	001a      	movs	r2, r3
 8004858:	230f      	movs	r3, #15
 800485a:	4013      	ands	r3, r2
 800485c:	4a5c      	ldr	r2, [pc, #368]	; (80049d0 <printASCIIarray+0x2ec>)
 800485e:	7812      	ldrb	r2, [r2, #0]
 8004860:	4113      	asrs	r3, r2
 8004862:	001a      	movs	r2, r3
 8004864:	0008      	movs	r0, r1
 8004866:	187b      	adds	r3, r7, r1
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	b2d1      	uxtb	r1, r2
 800486c:	2270      	movs	r2, #112	; 0x70
 800486e:	18ba      	adds	r2, r7, r2
 8004870:	54d1      	strb	r1, [r2, r3]
					weoBuffer2[k]=(weoBuffer[k]&0xF0)>>dimmer;
 8004872:	0001      	movs	r1, r0
 8004874:	187b      	adds	r3, r7, r1
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	193a      	adds	r2, r7, r4
 800487a:	5cd3      	ldrb	r3, [r2, r3]
 800487c:	001a      	movs	r2, r3
 800487e:	23f0      	movs	r3, #240	; 0xf0
 8004880:	4013      	ands	r3, r2
 8004882:	4a53      	ldr	r2, [pc, #332]	; (80049d0 <printASCIIarray+0x2ec>)
 8004884:	7812      	ldrb	r2, [r2, #0]
 8004886:	4113      	asrs	r3, r2
 8004888:	001a      	movs	r2, r3
 800488a:	0008      	movs	r0, r1
 800488c:	187b      	adds	r3, r7, r1
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	b2d1      	uxtb	r1, r2
 8004892:	223c      	movs	r2, #60	; 0x3c
 8004894:	18ba      	adds	r2, r7, r2
 8004896:	54d1      	strb	r1, [r2, r3]
				for (uint8_t k=0;k<symLen;k++){
 8004898:	183b      	adds	r3, r7, r0
 800489a:	781a      	ldrb	r2, [r3, #0]
 800489c:	183b      	adds	r3, r7, r0
 800489e:	3201      	adds	r2, #1
 80048a0:	701a      	strb	r2, [r3, #0]
 80048a2:	23a7      	movs	r3, #167	; 0xa7
 80048a4:	18fb      	adds	r3, r7, r3
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	22a8      	movs	r2, #168	; 0xa8
 80048ac:	18ba      	adds	r2, r7, r2
 80048ae:	8812      	ldrh	r2, [r2, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d8ca      	bhi.n	800484a <printASCIIarray+0x166>
				}

				for (uint8_t k=0;k<symLen;k++){
 80048b4:	23a6      	movs	r3, #166	; 0xa6
 80048b6:	18fb      	adds	r3, r7, r3
 80048b8:	2200      	movs	r2, #0
 80048ba:	701a      	strb	r2, [r3, #0]
 80048bc:	e01a      	b.n	80048f4 <printASCIIarray+0x210>
					weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
 80048be:	20a6      	movs	r0, #166	; 0xa6
 80048c0:	183b      	adds	r3, r7, r0
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	223c      	movs	r2, #60	; 0x3c
 80048c6:	18ba      	adds	r2, r7, r2
 80048c8:	5cd3      	ldrb	r3, [r2, r3]
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	b25a      	sxtb	r2, r3
 80048ce:	183b      	adds	r3, r7, r0
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	2170      	movs	r1, #112	; 0x70
 80048d4:	1879      	adds	r1, r7, r1
 80048d6:	5ccb      	ldrb	r3, [r1, r3]
 80048d8:	b25b      	sxtb	r3, r3
 80048da:	4313      	orrs	r3, r2
 80048dc:	b25a      	sxtb	r2, r3
 80048de:	183b      	adds	r3, r7, r0
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	b2d1      	uxtb	r1, r2
 80048e4:	2208      	movs	r2, #8
 80048e6:	18ba      	adds	r2, r7, r2
 80048e8:	54d1      	strb	r1, [r2, r3]
				for (uint8_t k=0;k<symLen;k++){
 80048ea:	183b      	adds	r3, r7, r0
 80048ec:	781a      	ldrb	r2, [r3, #0]
 80048ee:	183b      	adds	r3, r7, r0
 80048f0:	3201      	adds	r2, #1
 80048f2:	701a      	strb	r2, [r3, #0]
 80048f4:	23a6      	movs	r3, #166	; 0xa6
 80048f6:	18fb      	adds	r3, r7, r3
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	22a8      	movs	r2, #168	; 0xa8
 80048fe:	18ba      	adds	r2, r7, r2
 8004900:	8812      	ldrh	r2, [r2, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d8db      	bhi.n	80048be <printASCIIarray+0x1da>
				}
				}
				weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+X_increment-1,imY+ASCII_height-decY,0xFF,weoBuffer);
 8004906:	20ad      	movs	r0, #173	; 0xad
 8004908:	183a      	adds	r2, r7, r0
 800490a:	26ae      	movs	r6, #174	; 0xae
 800490c:	19bb      	adds	r3, r7, r6
 800490e:	7812      	ldrb	r2, [r2, #0]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	18d3      	adds	r3, r2, r3
 8004914:	b2db      	uxtb	r3, r3
 8004916:	3b01      	subs	r3, #1
 8004918:	b2dc      	uxtb	r4, r3
 800491a:	4b2e      	ldr	r3, [pc, #184]	; (80049d4 <printASCIIarray+0x2f0>)
 800491c:	781a      	ldrb	r2, [r3, #0]
 800491e:	1dbb      	adds	r3, r7, #6
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	18d3      	adds	r3, r2, r3
 8004924:	b2da      	uxtb	r2, r3
 8004926:	23ac      	movs	r3, #172	; 0xac
 8004928:	18fb      	adds	r3, r7, r3
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	b2da      	uxtb	r2, r3
 8004930:	1dbb      	adds	r3, r7, #6
 8004932:	7819      	ldrb	r1, [r3, #0]
 8004934:	0005      	movs	r5, r0
 8004936:	183b      	adds	r3, r7, r0
 8004938:	7818      	ldrb	r0, [r3, #0]
 800493a:	2308      	movs	r3, #8
 800493c:	18fb      	adds	r3, r7, r3
 800493e:	9301      	str	r3, [sp, #4]
 8004940:	23ff      	movs	r3, #255	; 0xff
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	0013      	movs	r3, r2
 8004946:	0022      	movs	r2, r4
 8004948:	f7fe fc82 	bl	8003250 <weoDrawRectangleFilled>
				ASCII_X += X_increment+0;
 800494c:	197b      	adds	r3, r7, r5
 800494e:	1979      	adds	r1, r7, r5
 8004950:	19ba      	adds	r2, r7, r6
 8004952:	7809      	ldrb	r1, [r1, #0]
 8004954:	7812      	ldrb	r2, [r2, #0]
 8004956:	188a      	adds	r2, r1, r2
 8004958:	701a      	strb	r2, [r3, #0]
			for (i=0;i<strLen;i++){
 800495a:	21aa      	movs	r1, #170	; 0xaa
 800495c:	187b      	adds	r3, r7, r1
 800495e:	881a      	ldrh	r2, [r3, #0]
 8004960:	187b      	adds	r3, r7, r1
 8004962:	3201      	adds	r2, #1
 8004964:	801a      	strh	r2, [r3, #0]
 8004966:	1d7b      	adds	r3, r7, #5
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	b29b      	uxth	r3, r3
 800496c:	21aa      	movs	r1, #170	; 0xaa
 800496e:	187a      	adds	r2, r7, r1
 8004970:	8812      	ldrh	r2, [r2, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d200      	bcs.n	8004978 <printASCIIarray+0x294>
 8004976:	e700      	b.n	800477a <printASCIIarray+0x96>
			}
			for(i=0;i<symLen;i++){
 8004978:	187b      	adds	r3, r7, r1
 800497a:	2200      	movs	r2, #0
 800497c:	801a      	strh	r2, [r3, #0]
 800497e:	e00c      	b.n	800499a <printASCIIarray+0x2b6>
					weoBuffer[j]=0x00;
 8004980:	23af      	movs	r3, #175	; 0xaf
 8004982:	18fb      	adds	r3, r7, r3
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	2208      	movs	r2, #8
 8004988:	18ba      	adds	r2, r7, r2
 800498a:	2100      	movs	r1, #0
 800498c:	54d1      	strb	r1, [r2, r3]
			for(i=0;i<symLen;i++){
 800498e:	21aa      	movs	r1, #170	; 0xaa
 8004990:	187b      	adds	r3, r7, r1
 8004992:	881a      	ldrh	r2, [r3, #0]
 8004994:	187b      	adds	r3, r7, r1
 8004996:	3201      	adds	r2, #1
 8004998:	801a      	strh	r2, [r3, #0]
 800499a:	23aa      	movs	r3, #170	; 0xaa
 800499c:	18fa      	adds	r2, r7, r3
 800499e:	23a8      	movs	r3, #168	; 0xa8
 80049a0:	18fb      	adds	r3, r7, r3
 80049a2:	8812      	ldrh	r2, [r2, #0]
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d3ea      	bcc.n	8004980 <printASCIIarray+0x29c>
			}
			cmd2Execute=0;
 80049aa:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <printASCIIarray+0x2f4>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
			GPIOC->ODR |= 1 << 6;	//set BF
 80049b0:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <printASCIIarray+0x2f8>)
 80049b2:	695a      	ldr	r2, [r3, #20]
 80049b4:	4b09      	ldr	r3, [pc, #36]	; (80049dc <printASCIIarray+0x2f8>)
 80049b6:	2140      	movs	r1, #64	; 0x40
 80049b8:	430a      	orrs	r2, r1
 80049ba:	615a      	str	r2, [r3, #20]

	}
 80049bc:	46c0      	nop			; (mov r8, r8)
 80049be:	0018      	movs	r0, r3
 80049c0:	46bd      	mov	sp, r7
 80049c2:	b02d      	add	sp, #180	; 0xb4
 80049c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049c6:	46c0      	nop			; (mov r8, r8)
 80049c8:	0800de5c 	.word	0x0800de5c
 80049cc:	0801415c 	.word	0x0801415c
 80049d0:	20000068 	.word	0x20000068
 80049d4:	20000030 	.word	0x20000030
 80049d8:	2000137b 	.word	0x2000137b
 80049dc:	50000800 	.word	0x50000800

080049e0 <squeak_generate>:
//=============================================================================================================
	void squeak_generate(void){
 80049e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
			    uint16_t nsamples = sizeof(signal) / sizeof(signal[0]);
 80049e6:	230c      	movs	r3, #12
 80049e8:	18fb      	adds	r3, r7, r3
 80049ea:	2280      	movs	r2, #128	; 0x80
 80049ec:	0112      	lsls	r2, r2, #4
 80049ee:	801a      	strh	r2, [r3, #0]
			    uint16_t k = 0;
 80049f0:	230e      	movs	r3, #14
 80049f2:	18fb      	adds	r3, r7, r3
 80049f4:	2200      	movs	r2, #0
 80049f6:	801a      	strh	r2, [r3, #0]
			    while(k < nsamples) {
 80049f8:	e040      	b.n	8004a7c <squeak_generate+0x9c>
			        double t = ((double)k/2.0)/((double)nsamples);
 80049fa:	260e      	movs	r6, #14
 80049fc:	19bb      	adds	r3, r7, r6
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	0018      	movs	r0, r3
 8004a02:	f7fd fb25 	bl	8002050 <__aeabi_ui2d>
 8004a06:	2200      	movs	r2, #0
 8004a08:	2380      	movs	r3, #128	; 0x80
 8004a0a:	05db      	lsls	r3, r3, #23
 8004a0c:	f7fc f8b6 	bl	8000b7c <__aeabi_ddiv>
 8004a10:	0002      	movs	r2, r0
 8004a12:	000b      	movs	r3, r1
 8004a14:	0014      	movs	r4, r2
 8004a16:	001d      	movs	r5, r3
 8004a18:	230c      	movs	r3, #12
 8004a1a:	18fb      	adds	r3, r7, r3
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	0018      	movs	r0, r3
 8004a20:	f7fd fb16 	bl	8002050 <__aeabi_ui2d>
 8004a24:	0002      	movs	r2, r0
 8004a26:	000b      	movs	r3, r1
 8004a28:	0020      	movs	r0, r4
 8004a2a:	0029      	movs	r1, r5
 8004a2c:	f7fc f8a6 	bl	8000b7c <__aeabi_ddiv>
 8004a30:	0002      	movs	r2, r0
 8004a32:	000b      	movs	r3, r1
 8004a34:	603a      	str	r2, [r7, #0]
 8004a36:	607b      	str	r3, [r7, #4]
			       signal[k] = 32767*sin(100.0 * TAU * t); // left
 8004a38:	4a17      	ldr	r2, [pc, #92]	; (8004a98 <squeak_generate+0xb8>)
 8004a3a:	4b18      	ldr	r3, [pc, #96]	; (8004a9c <squeak_generate+0xbc>)
 8004a3c:	6838      	ldr	r0, [r7, #0]
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	f7fc fca2 	bl	8001388 <__aeabi_dmul>
 8004a44:	0002      	movs	r2, r0
 8004a46:	000b      	movs	r3, r1
 8004a48:	0010      	movs	r0, r2
 8004a4a:	0019      	movs	r1, r3
 8004a4c:	f008 f9a2 	bl	800cd94 <sin>
 8004a50:	2200      	movs	r2, #0
 8004a52:	4b13      	ldr	r3, [pc, #76]	; (8004aa0 <squeak_generate+0xc0>)
 8004a54:	f7fc fc98 	bl	8001388 <__aeabi_dmul>
 8004a58:	0002      	movs	r2, r0
 8004a5a:	000b      	movs	r3, r1
 8004a5c:	19b9      	adds	r1, r7, r6
 8004a5e:	880c      	ldrh	r4, [r1, #0]
 8004a60:	0010      	movs	r0, r2
 8004a62:	0019      	movs	r1, r3
 8004a64:	f7fb fd02 	bl	800046c <__aeabi_d2uiz>
 8004a68:	0003      	movs	r3, r0
 8004a6a:	b299      	uxth	r1, r3
 8004a6c:	4b0d      	ldr	r3, [pc, #52]	; (8004aa4 <squeak_generate+0xc4>)
 8004a6e:	0062      	lsls	r2, r4, #1
 8004a70:	52d1      	strh	r1, [r2, r3]
			        k += 1;
 8004a72:	19bb      	adds	r3, r7, r6
 8004a74:	19ba      	adds	r2, r7, r6
 8004a76:	8812      	ldrh	r2, [r2, #0]
 8004a78:	3201      	adds	r2, #1
 8004a7a:	801a      	strh	r2, [r3, #0]
			    while(k < nsamples) {
 8004a7c:	230e      	movs	r3, #14
 8004a7e:	18fa      	adds	r2, r7, r3
 8004a80:	230c      	movs	r3, #12
 8004a82:	18fb      	adds	r3, r7, r3
 8004a84:	8812      	ldrh	r2, [r2, #0]
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d3b6      	bcc.n	80049fa <squeak_generate+0x1a>
			    }
		}
 8004a8c:	46c0      	nop			; (mov r8, r8)
 8004a8e:	46c0      	nop			; (mov r8, r8)
 8004a90:	46bd      	mov	sp, r7
 8004a92:	b005      	add	sp, #20
 8004a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	59d5433b 	.word	0x59d5433b
 8004a9c:	4083a28c 	.word	0x4083a28c
 8004aa0:	40dfffc0 	.word	0x40dfffc0
 8004aa4:	20000314 	.word	0x20000314

08004aa8 <squeak_single>:
//=============================================================================================================
	void squeak_single(uint16_t* signal){
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]

		I2C_SOUND_ChangePage(0x01);
 8004ab0:	2001      	movs	r0, #1
 8004ab2:	f7fe fcb1 	bl	8003418 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x00);
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	2001      	movs	r0, #1
 8004aba:	f7fe fccb 	bl	8003454 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 8004abe:	2000      	movs	r0, #0
 8004ac0:	f7fe fcaa 	bl	8003418 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x41, 0x30);// 0x81 - 0x30 available
 8004ac4:	2130      	movs	r1, #48	; 0x30
 8004ac6:	2041      	movs	r0, #65	; 0x41
 8004ac8:	f7fe fcc4 	bl	8003454 <WriteReg_I2C_SOUND>
	//	I2C_SOUND_ChangePage(0x00);
		I2C_SOUND_ChangePage(0x01);
 8004acc:	2001      	movs	r0, #1
 8004ace:	f7fe fca3 	bl	8003418 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	2010      	movs	r0, #16
 8004ad6:	f7fe fcbd 	bl	8003454 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 8004ada:	2124      	movs	r1, #36	; 0x24
 8004adc:	202e      	movs	r0, #46	; 0x2e
 8004ade:	f7fe fcb9 	bl	8003454 <WriteReg_I2C_SOUND>
		HAL_I2S_Transmit_DMA(&hi2s1, (const uint16_t*)signal, nsamples); //HAL_MAX_DELAY
 8004ae2:	4b0e      	ldr	r3, [pc, #56]	; (8004b1c <squeak_single+0x74>)
 8004ae4:	881a      	ldrh	r2, [r3, #0]
 8004ae6:	6879      	ldr	r1, [r7, #4]
 8004ae8:	4b0d      	ldr	r3, [pc, #52]	; (8004b20 <squeak_single+0x78>)
 8004aea:	0018      	movs	r0, r3
 8004aec:	f003 f986 	bl	8007dfc <HAL_I2S_Transmit_DMA>
		USART2->ICR|=USART_ICR_ORECF;
 8004af0:	4b0c      	ldr	r3, [pc, #48]	; (8004b24 <squeak_single+0x7c>)
 8004af2:	6a1a      	ldr	r2, [r3, #32]
 8004af4:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <squeak_single+0x7c>)
 8004af6:	2108      	movs	r1, #8
 8004af8:	430a      	orrs	r2, r1
 8004afa:	621a      	str	r2, [r3, #32]
		USART2->ICR|=USART_ICR_FECF;
 8004afc:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <squeak_single+0x7c>)
 8004afe:	6a1a      	ldr	r2, [r3, #32]
 8004b00:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <squeak_single+0x7c>)
 8004b02:	2102      	movs	r1, #2
 8004b04:	430a      	orrs	r2, r1
 8004b06:	621a      	str	r2, [r3, #32]
		USART2->ICR|=USART_ICR_NECF;
 8004b08:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <squeak_single+0x7c>)
 8004b0a:	6a1a      	ldr	r2, [r3, #32]
 8004b0c:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <squeak_single+0x7c>)
 8004b0e:	2104      	movs	r1, #4
 8004b10:	430a      	orrs	r2, r1
 8004b12:	621a      	str	r2, [r3, #32]
//		HAL_Delay(100);
//		GPIOC->ODR |= 1 << 6;	//set BF
//		cmd2Execute=0;
	}
 8004b14:	46c0      	nop			; (mov r8, r8)
 8004b16:	46bd      	mov	sp, r7
 8004b18:	b002      	add	sp, #8
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	20000032 	.word	0x20000032
 8004b20:	20001380 	.word	0x20001380
 8004b24:	40004400 	.word	0x40004400

08004b28 <squeak_long>:
//==========================================================================================================================
	void squeak_long(uint16_t* signal){
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]

		I2C_SOUND_ChangePage(0x01);
 8004b30:	2001      	movs	r0, #1
 8004b32:	f7fe fc71 	bl	8003418 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x00);
 8004b36:	2100      	movs	r1, #0
 8004b38:	2001      	movs	r0, #1
 8004b3a:	f7fe fc8b 	bl	8003454 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 8004b3e:	2000      	movs	r0, #0
 8004b40:	f7fe fc6a 	bl	8003418 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x41, 0x30);// 0x81 - 0x30 available
 8004b44:	2130      	movs	r1, #48	; 0x30
 8004b46:	2041      	movs	r0, #65	; 0x41
 8004b48:	f7fe fc84 	bl	8003454 <WriteReg_I2C_SOUND>
	//	I2C_SOUND_ChangePage(0x00);
		I2C_SOUND_ChangePage(0x01);
 8004b4c:	2001      	movs	r0, #1
 8004b4e:	f7fe fc63 	bl	8003418 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 8004b52:	2100      	movs	r1, #0
 8004b54:	2010      	movs	r0, #16
 8004b56:	f7fe fc7d 	bl	8003454 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 8004b5a:	2124      	movs	r1, #36	; 0x24
 8004b5c:	202e      	movs	r0, #46	; 0x2e
 8004b5e:	f7fe fc79 	bl	8003454 <WriteReg_I2C_SOUND>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 8004b62:	4b29      	ldr	r3, [pc, #164]	; (8004c08 <squeak_long+0xe0>)
 8004b64:	881a      	ldrh	r2, [r3, #0]
 8004b66:	4b29      	ldr	r3, [pc, #164]	; (8004c0c <squeak_long+0xe4>)
 8004b68:	6879      	ldr	r1, [r7, #4]
 8004b6a:	4829      	ldr	r0, [pc, #164]	; (8004c10 <squeak_long+0xe8>)
 8004b6c:	f003 f84e 	bl	8007c0c <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 8004b70:	4b25      	ldr	r3, [pc, #148]	; (8004c08 <squeak_long+0xe0>)
 8004b72:	881a      	ldrh	r2, [r3, #0]
 8004b74:	4b25      	ldr	r3, [pc, #148]	; (8004c0c <squeak_long+0xe4>)
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	4825      	ldr	r0, [pc, #148]	; (8004c10 <squeak_long+0xe8>)
 8004b7a:	f003 f847 	bl	8007c0c <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 8004b7e:	4b22      	ldr	r3, [pc, #136]	; (8004c08 <squeak_long+0xe0>)
 8004b80:	881a      	ldrh	r2, [r3, #0]
 8004b82:	4b22      	ldr	r3, [pc, #136]	; (8004c0c <squeak_long+0xe4>)
 8004b84:	6879      	ldr	r1, [r7, #4]
 8004b86:	4822      	ldr	r0, [pc, #136]	; (8004c10 <squeak_long+0xe8>)
 8004b88:	f003 f840 	bl	8007c0c <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 8004b8c:	4b1e      	ldr	r3, [pc, #120]	; (8004c08 <squeak_long+0xe0>)
 8004b8e:	881a      	ldrh	r2, [r3, #0]
 8004b90:	4b1e      	ldr	r3, [pc, #120]	; (8004c0c <squeak_long+0xe4>)
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	481e      	ldr	r0, [pc, #120]	; (8004c10 <squeak_long+0xe8>)
 8004b96:	f003 f839 	bl	8007c0c <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 8004b9a:	4b1b      	ldr	r3, [pc, #108]	; (8004c08 <squeak_long+0xe0>)
 8004b9c:	881a      	ldrh	r2, [r3, #0]
 8004b9e:	4b1b      	ldr	r3, [pc, #108]	; (8004c0c <squeak_long+0xe4>)
 8004ba0:	6879      	ldr	r1, [r7, #4]
 8004ba2:	481b      	ldr	r0, [pc, #108]	; (8004c10 <squeak_long+0xe8>)
 8004ba4:	f003 f832 	bl	8007c0c <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 8004ba8:	4b17      	ldr	r3, [pc, #92]	; (8004c08 <squeak_long+0xe0>)
 8004baa:	881a      	ldrh	r2, [r3, #0]
 8004bac:	4b17      	ldr	r3, [pc, #92]	; (8004c0c <squeak_long+0xe4>)
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	4817      	ldr	r0, [pc, #92]	; (8004c10 <squeak_long+0xe8>)
 8004bb2:	f003 f82b 	bl	8007c0c <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 8004bb6:	4b14      	ldr	r3, [pc, #80]	; (8004c08 <squeak_long+0xe0>)
 8004bb8:	881a      	ldrh	r2, [r3, #0]
 8004bba:	4b14      	ldr	r3, [pc, #80]	; (8004c0c <squeak_long+0xe4>)
 8004bbc:	6879      	ldr	r1, [r7, #4]
 8004bbe:	4814      	ldr	r0, [pc, #80]	; (8004c10 <squeak_long+0xe8>)
 8004bc0:	f003 f824 	bl	8007c0c <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 8004bc4:	4b10      	ldr	r3, [pc, #64]	; (8004c08 <squeak_long+0xe0>)
 8004bc6:	881a      	ldrh	r2, [r3, #0]
 8004bc8:	4b10      	ldr	r3, [pc, #64]	; (8004c0c <squeak_long+0xe4>)
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	4810      	ldr	r0, [pc, #64]	; (8004c10 <squeak_long+0xe8>)
 8004bce:	f003 f81d 	bl	8007c0c <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 8004bd2:	4b0d      	ldr	r3, [pc, #52]	; (8004c08 <squeak_long+0xe0>)
 8004bd4:	881a      	ldrh	r2, [r3, #0]
 8004bd6:	4b0d      	ldr	r3, [pc, #52]	; (8004c0c <squeak_long+0xe4>)
 8004bd8:	6879      	ldr	r1, [r7, #4]
 8004bda:	480d      	ldr	r0, [pc, #52]	; (8004c10 <squeak_long+0xe8>)
 8004bdc:	f003 f816 	bl	8007c0c <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 8004be0:	4b09      	ldr	r3, [pc, #36]	; (8004c08 <squeak_long+0xe0>)
 8004be2:	881a      	ldrh	r2, [r3, #0]
 8004be4:	4b09      	ldr	r3, [pc, #36]	; (8004c0c <squeak_long+0xe4>)
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	4809      	ldr	r0, [pc, #36]	; (8004c10 <squeak_long+0xe8>)
 8004bea:	f003 f80f 	bl	8007c0c <HAL_I2S_Transmit>
//		HAL_Delay(500);
		GPIOC->ODR |= 1 << 6;	//set BF
 8004bee:	4b09      	ldr	r3, [pc, #36]	; (8004c14 <squeak_long+0xec>)
 8004bf0:	695a      	ldr	r2, [r3, #20]
 8004bf2:	4b08      	ldr	r3, [pc, #32]	; (8004c14 <squeak_long+0xec>)
 8004bf4:	2140      	movs	r1, #64	; 0x40
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	615a      	str	r2, [r3, #20]
		cmd2Execute=0;
 8004bfa:	4b07      	ldr	r3, [pc, #28]	; (8004c18 <squeak_long+0xf0>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	701a      	strb	r2, [r3, #0]
	}
 8004c00:	46c0      	nop			; (mov r8, r8)
 8004c02:	46bd      	mov	sp, r7
 8004c04:	b002      	add	sp, #8
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	20000032 	.word	0x20000032
 8004c0c:	00001388 	.word	0x00001388
 8004c10:	20001380 	.word	0x20001380
 8004c14:	50000800 	.word	0x50000800
 8004c18:	2000137b 	.word	0x2000137b

08004c1c <squeak_double>:
//=============================================================================================================
	void squeak_double(uint16_t* signal){
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]

		I2C_SOUND_ChangePage(0x01);
 8004c24:	2001      	movs	r0, #1
 8004c26:	f7fe fbf7 	bl	8003418 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x00);
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	2001      	movs	r0, #1
 8004c2e:	f7fe fc11 	bl	8003454 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 8004c32:	2000      	movs	r0, #0
 8004c34:	f7fe fbf0 	bl	8003418 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x41, 0x30);// 0x81 - 0x30 available
 8004c38:	2130      	movs	r1, #48	; 0x30
 8004c3a:	2041      	movs	r0, #65	; 0x41
 8004c3c:	f7fe fc0a 	bl	8003454 <WriteReg_I2C_SOUND>
	//	I2C_SOUND_ChangePage(0x00);
		I2C_SOUND_ChangePage(0x01);
 8004c40:	2001      	movs	r0, #1
 8004c42:	f7fe fbe9 	bl	8003418 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 8004c46:	2100      	movs	r1, #0
 8004c48:	2010      	movs	r0, #16
 8004c4a:	f7fe fc03 	bl	8003454 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 8004c4e:	2124      	movs	r1, #36	; 0x24
 8004c50:	202e      	movs	r0, #46	; 0x2e
 8004c52:	f7fe fbff 	bl	8003454 <WriteReg_I2C_SOUND>
		HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)signal, nsamples);
 8004c56:	4b0a      	ldr	r3, [pc, #40]	; (8004c80 <squeak_double+0x64>)
 8004c58:	881a      	ldrh	r2, [r3, #0]
 8004c5a:	6879      	ldr	r1, [r7, #4]
 8004c5c:	4b09      	ldr	r3, [pc, #36]	; (8004c84 <squeak_double+0x68>)
 8004c5e:	0018      	movs	r0, r3
 8004c60:	f003 f8cc 	bl	8007dfc <HAL_I2S_Transmit_DMA>
		HAL_Delay(100);
 8004c64:	2064      	movs	r0, #100	; 0x64
 8004c66:	f000 fdab 	bl	80057c0 <HAL_Delay>
		HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)signal, nsamples);
 8004c6a:	4b05      	ldr	r3, [pc, #20]	; (8004c80 <squeak_double+0x64>)
 8004c6c:	881a      	ldrh	r2, [r3, #0]
 8004c6e:	6879      	ldr	r1, [r7, #4]
 8004c70:	4b04      	ldr	r3, [pc, #16]	; (8004c84 <squeak_double+0x68>)
 8004c72:	0018      	movs	r0, r3
 8004c74:	f003 f8c2 	bl	8007dfc <HAL_I2S_Transmit_DMA>
//		HAL_Delay(500);
	}
 8004c78:	46c0      	nop			; (mov r8, r8)
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	b002      	add	sp, #8
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	20000032 	.word	0x20000032
 8004c84:	20001380 	.word	0x20001380

08004c88 <squeak_triple>:
//=============================================================================================================
	void squeak_triple(uint16_t* signal){
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]

		I2C_SOUND_ChangePage(0x01);
 8004c90:	2001      	movs	r0, #1
 8004c92:	f7fe fbc1 	bl	8003418 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x00);
 8004c96:	2100      	movs	r1, #0
 8004c98:	2001      	movs	r0, #1
 8004c9a:	f7fe fbdb 	bl	8003454 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	f7fe fbba 	bl	8003418 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x41, 0x30);// 0x81 - 0x30 available
 8004ca4:	2130      	movs	r1, #48	; 0x30
 8004ca6:	2041      	movs	r0, #65	; 0x41
 8004ca8:	f7fe fbd4 	bl	8003454 <WriteReg_I2C_SOUND>
	//	I2C_SOUND_ChangePage(0x00);
		I2C_SOUND_ChangePage(0x01);
 8004cac:	2001      	movs	r0, #1
 8004cae:	f7fe fbb3 	bl	8003418 <I2C_SOUND_ChangePage>
//		HAL_Delay(1000);
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	2010      	movs	r0, #16
 8004cb6:	f7fe fbcd 	bl	8003454 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 8004cba:	2124      	movs	r1, #36	; 0x24
 8004cbc:	202e      	movs	r0, #46	; 0x2e
 8004cbe:	f7fe fbc9 	bl	8003454 <WriteReg_I2C_SOUND>
		HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)signal, nsamples);
 8004cc2:	4b0f      	ldr	r3, [pc, #60]	; (8004d00 <squeak_triple+0x78>)
 8004cc4:	881a      	ldrh	r2, [r3, #0]
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	4b0e      	ldr	r3, [pc, #56]	; (8004d04 <squeak_triple+0x7c>)
 8004cca:	0018      	movs	r0, r3
 8004ccc:	f003 f896 	bl	8007dfc <HAL_I2S_Transmit_DMA>
		HAL_Delay(100);
 8004cd0:	2064      	movs	r0, #100	; 0x64
 8004cd2:	f000 fd75 	bl	80057c0 <HAL_Delay>
		HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)signal, nsamples);
 8004cd6:	4b0a      	ldr	r3, [pc, #40]	; (8004d00 <squeak_triple+0x78>)
 8004cd8:	881a      	ldrh	r2, [r3, #0]
 8004cda:	6879      	ldr	r1, [r7, #4]
 8004cdc:	4b09      	ldr	r3, [pc, #36]	; (8004d04 <squeak_triple+0x7c>)
 8004cde:	0018      	movs	r0, r3
 8004ce0:	f003 f88c 	bl	8007dfc <HAL_I2S_Transmit_DMA>
		HAL_Delay(100);
 8004ce4:	2064      	movs	r0, #100	; 0x64
 8004ce6:	f000 fd6b 	bl	80057c0 <HAL_Delay>
		HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)signal, nsamples);
 8004cea:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <squeak_triple+0x78>)
 8004cec:	881a      	ldrh	r2, [r3, #0]
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	4b04      	ldr	r3, [pc, #16]	; (8004d04 <squeak_triple+0x7c>)
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	f003 f882 	bl	8007dfc <HAL_I2S_Transmit_DMA>
//		HAL_Delay(500);
//		GPIOC->ODR |= 1 << 6;	//set BF
//		cmd2Execute=0;
	}
 8004cf8:	46c0      	nop			; (mov r8, r8)
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	b002      	add	sp, #8
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	20000032 	.word	0x20000032
 8004d04:	20001380 	.word	0x20001380

08004d08 <LIS3DHsendCMD>:
//=============================================================================================================
	void LIS3DHsendCMD(uint8_t reg, uint8_t data) {
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af02      	add	r7, sp, #8
 8004d0e:	0002      	movs	r2, r0
 8004d10:	1dfb      	adds	r3, r7, #7
 8004d12:	701a      	strb	r2, [r3, #0]
 8004d14:	1dbb      	adds	r3, r7, #6
 8004d16:	1c0a      	adds	r2, r1, #0
 8004d18:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 8004d1a:	210c      	movs	r1, #12
 8004d1c:	187b      	adds	r3, r7, r1
 8004d1e:	1dfa      	adds	r2, r7, #7
 8004d20:	7812      	ldrb	r2, [r2, #0]
 8004d22:	701a      	strb	r2, [r3, #0]
 8004d24:	187b      	adds	r3, r7, r1
 8004d26:	1dba      	adds	r2, r7, #6
 8004d28:	7812      	ldrb	r2, [r2, #0]
 8004d2a:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x32, buf, 2, 1000);	//32h - address for writing
 8004d2c:	187a      	adds	r2, r7, r1
 8004d2e:	4806      	ldr	r0, [pc, #24]	; (8004d48 <LIS3DHsendCMD+0x40>)
 8004d30:	23fa      	movs	r3, #250	; 0xfa
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	2302      	movs	r3, #2
 8004d38:	2132      	movs	r1, #50	; 0x32
 8004d3a:	f001 fd7b 	bl	8006834 <HAL_I2C_Master_Transmit>
	}
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	46bd      	mov	sp, r7
 8004d42:	b004      	add	sp, #16
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	46c0      	nop			; (mov r8, r8)
 8004d48:	20000144 	.word	0x20000144

08004d4c <LIS3DHsetup>:
//	  xVal = buffer[0];
//	  yVal = buffer[1];
//	  zVal = buffer[2];
//	}
//=============================================================================================================
	void LIS3DHsetup(void){
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
		uint8_t CTRL_REG1_val=0x00;
 8004d52:	1dfb      	adds	r3, r7, #7
 8004d54:	2200      	movs	r2, #0
 8004d56:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG4_val=0x00;
 8004d58:	1dbb      	adds	r3, r7, #6
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG5_val=0x00;
 8004d5e:	1d7b      	adds	r3, r7, #5
 8004d60:	2200      	movs	r2, #0
 8004d62:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG6_val=0x00;
 8004d64:	1d3b      	adds	r3, r7, #4
 8004d66:	2200      	movs	r2, #0
 8004d68:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_CTRL_REG_val=0x00;
 8004d6a:	1cfb      	adds	r3, r7, #3
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_SRC_REG_val=0x00;
 8004d70:	1cbb      	adds	r3, r7, #2
 8004d72:	2200      	movs	r2, #0
 8004d74:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_CFG_val=0x00;
 8004d76:	1c7b      	adds	r3, r7, #1
 8004d78:	2200      	movs	r2, #0
 8004d7a:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_SRC_val=0x00;
 8004d7c:	003b      	movs	r3, r7
 8004d7e:	2200      	movs	r2, #0
 8004d80:	701a      	strb	r2, [r3, #0]

		LIS3DHsendCMD(CTRL_REG1,(CTRL_REG1_val|accelDataRate_25_Hz|Xen|Yen|Zen));//data rate selection
 8004d82:	1dfb      	adds	r3, r7, #7
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	2237      	movs	r2, #55	; 0x37
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	0019      	movs	r1, r3
 8004d8e:	2020      	movs	r0, #32
 8004d90:	f7ff ffba 	bl	8004d08 <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG2,);//HPFilter
//		LIS3DHsendCMD(CTRL_REG3,);
		LIS3DHsendCMD(CTRL_REG4,(CTRL_REG4_val|BDU|FULL_SCALE_2G|HR));
 8004d94:	1dbb      	adds	r3, r7, #6
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	227c      	movs	r2, #124	; 0x7c
 8004d9a:	4252      	negs	r2, r2
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	0019      	movs	r1, r3
 8004da2:	2023      	movs	r0, #35	; 0x23
 8004da4:	f7ff ffb0 	bl	8004d08 <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG6,);
//		LIS3DHsendCMD(FIFO_CTRL_REG,FIFO_CTRL_REG_val);	//	2B configured
//		LIS3DHsendCMD(FIFO_SRC_REG,FIFO_SRC_REG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_CFG,INT_1_CFG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_SRC_val,INT_1_SRC_val);	//	2B configured
	}
 8004da8:	46c0      	nop			; (mov r8, r8)
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b002      	add	sp, #8
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004db4:	46c0      	nop			; (mov r8, r8)
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dc2:	4b11      	ldr	r3, [pc, #68]	; (8004e08 <HAL_MspInit+0x4c>)
 8004dc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dc6:	4b10      	ldr	r3, [pc, #64]	; (8004e08 <HAL_MspInit+0x4c>)
 8004dc8:	2101      	movs	r1, #1
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40
 8004dce:	4b0e      	ldr	r3, [pc, #56]	; (8004e08 <HAL_MspInit+0x4c>)
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	607b      	str	r3, [r7, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dda:	4b0b      	ldr	r3, [pc, #44]	; (8004e08 <HAL_MspInit+0x4c>)
 8004ddc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dde:	4b0a      	ldr	r3, [pc, #40]	; (8004e08 <HAL_MspInit+0x4c>)
 8004de0:	2180      	movs	r1, #128	; 0x80
 8004de2:	0549      	lsls	r1, r1, #21
 8004de4:	430a      	orrs	r2, r1
 8004de6:	63da      	str	r2, [r3, #60]	; 0x3c
 8004de8:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <HAL_MspInit+0x4c>)
 8004dea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dec:	2380      	movs	r3, #128	; 0x80
 8004dee:	055b      	lsls	r3, r3, #21
 8004df0:	4013      	ands	r3, r2
 8004df2:	603b      	str	r3, [r7, #0]
 8004df4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8004df6:	2380      	movs	r3, #128	; 0x80
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	f000 fd04 	bl	8005808 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e00:	46c0      	nop			; (mov r8, r8)
 8004e02:	46bd      	mov	sp, r7
 8004e04:	b002      	add	sp, #8
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	40021000 	.word	0x40021000

08004e0c <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8004e0c:	b590      	push	{r4, r7, lr}
 8004e0e:	b089      	sub	sp, #36	; 0x24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e14:	240c      	movs	r4, #12
 8004e16:	193b      	adds	r3, r7, r4
 8004e18:	0018      	movs	r0, r3
 8004e1a:	2314      	movs	r3, #20
 8004e1c:	001a      	movs	r2, r3
 8004e1e:	2100      	movs	r1, #0
 8004e20:	f007 ffb0 	bl	800cd84 <memset>
  if(hcomp->Instance==COMP1)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a10      	ldr	r2, [pc, #64]	; (8004e6c <HAL_COMP_MspInit+0x60>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d11a      	bne.n	8004e64 <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e2e:	4b10      	ldr	r3, [pc, #64]	; (8004e70 <HAL_COMP_MspInit+0x64>)
 8004e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e32:	4b0f      	ldr	r3, [pc, #60]	; (8004e70 <HAL_COMP_MspInit+0x64>)
 8004e34:	2102      	movs	r1, #2
 8004e36:	430a      	orrs	r2, r1
 8004e38:	635a      	str	r2, [r3, #52]	; 0x34
 8004e3a:	4b0d      	ldr	r3, [pc, #52]	; (8004e70 <HAL_COMP_MspInit+0x64>)
 8004e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3e:	2202      	movs	r2, #2
 8004e40:	4013      	ands	r3, r2
 8004e42:	60bb      	str	r3, [r7, #8]
 8004e44:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004e46:	193b      	adds	r3, r7, r4
 8004e48:	2204      	movs	r2, #4
 8004e4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e4c:	193b      	adds	r3, r7, r4
 8004e4e:	2203      	movs	r2, #3
 8004e50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e52:	193b      	adds	r3, r7, r4
 8004e54:	2200      	movs	r2, #0
 8004e56:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e58:	193b      	adds	r3, r7, r4
 8004e5a:	4a06      	ldr	r2, [pc, #24]	; (8004e74 <HAL_COMP_MspInit+0x68>)
 8004e5c:	0019      	movs	r1, r3
 8004e5e:	0010      	movs	r0, r2
 8004e60:	f001 faee 	bl	8006440 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8004e64:	46c0      	nop			; (mov r8, r8)
 8004e66:	46bd      	mov	sp, r7
 8004e68:	b009      	add	sp, #36	; 0x24
 8004e6a:	bd90      	pop	{r4, r7, pc}
 8004e6c:	40010200 	.word	0x40010200
 8004e70:	40021000 	.word	0x40021000
 8004e74:	50000400 	.word	0x50000400

08004e78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004e78:	b590      	push	{r4, r7, lr}
 8004e7a:	b08b      	sub	sp, #44	; 0x2c
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e80:	2414      	movs	r4, #20
 8004e82:	193b      	adds	r3, r7, r4
 8004e84:	0018      	movs	r0, r3
 8004e86:	2314      	movs	r3, #20
 8004e88:	001a      	movs	r2, r3
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	f007 ff7a 	bl	800cd84 <memset>
  if(hi2c->Instance==I2C1)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a20      	ldr	r2, [pc, #128]	; (8004f18 <HAL_I2C_MspInit+0xa0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d139      	bne.n	8004f0e <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e9a:	4b20      	ldr	r3, [pc, #128]	; (8004f1c <HAL_I2C_MspInit+0xa4>)
 8004e9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e9e:	4b1f      	ldr	r3, [pc, #124]	; (8004f1c <HAL_I2C_MspInit+0xa4>)
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	635a      	str	r2, [r3, #52]	; 0x34
 8004ea6:	4b1d      	ldr	r3, [pc, #116]	; (8004f1c <HAL_I2C_MspInit+0xa4>)
 8004ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eaa:	2201      	movs	r2, #1
 8004eac:	4013      	ands	r3, r2
 8004eae:	613b      	str	r3, [r7, #16]
 8004eb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004eb2:	193b      	adds	r3, r7, r4
 8004eb4:	22c0      	movs	r2, #192	; 0xc0
 8004eb6:	00d2      	lsls	r2, r2, #3
 8004eb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004eba:	0021      	movs	r1, r4
 8004ebc:	187b      	adds	r3, r7, r1
 8004ebe:	2212      	movs	r2, #18
 8004ec0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ec2:	187b      	adds	r3, r7, r1
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ec8:	187b      	adds	r3, r7, r1
 8004eca:	2200      	movs	r2, #0
 8004ecc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8004ece:	187b      	adds	r3, r7, r1
 8004ed0:	2206      	movs	r2, #6
 8004ed2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ed4:	187a      	adds	r2, r7, r1
 8004ed6:	23a0      	movs	r3, #160	; 0xa0
 8004ed8:	05db      	lsls	r3, r3, #23
 8004eda:	0011      	movs	r1, r2
 8004edc:	0018      	movs	r0, r3
 8004ede:	f001 faaf 	bl	8006440 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004ee2:	4b0e      	ldr	r3, [pc, #56]	; (8004f1c <HAL_I2C_MspInit+0xa4>)
 8004ee4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ee6:	4b0d      	ldr	r3, [pc, #52]	; (8004f1c <HAL_I2C_MspInit+0xa4>)
 8004ee8:	2180      	movs	r1, #128	; 0x80
 8004eea:	0389      	lsls	r1, r1, #14
 8004eec:	430a      	orrs	r2, r1
 8004eee:	63da      	str	r2, [r3, #60]	; 0x3c
 8004ef0:	4b0a      	ldr	r3, [pc, #40]	; (8004f1c <HAL_I2C_MspInit+0xa4>)
 8004ef2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ef4:	2380      	movs	r3, #128	; 0x80
 8004ef6:	039b      	lsls	r3, r3, #14
 8004ef8:	4013      	ands	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8004efe:	2200      	movs	r2, #0
 8004f00:	2100      	movs	r1, #0
 8004f02:	2017      	movs	r0, #23
 8004f04:	f000 ffa2 	bl	8005e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8004f08:	2017      	movs	r0, #23
 8004f0a:	f000 ffb4 	bl	8005e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004f0e:	46c0      	nop			; (mov r8, r8)
 8004f10:	46bd      	mov	sp, r7
 8004f12:	b00b      	add	sp, #44	; 0x2c
 8004f14:	bd90      	pop	{r4, r7, pc}
 8004f16:	46c0      	nop			; (mov r8, r8)
 8004f18:	40005400 	.word	0x40005400
 8004f1c:	40021000 	.word	0x40021000

08004f20 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8004f20:	b590      	push	{r4, r7, lr}
 8004f22:	b08b      	sub	sp, #44	; 0x2c
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f28:	2414      	movs	r4, #20
 8004f2a:	193b      	adds	r3, r7, r4
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	2314      	movs	r3, #20
 8004f30:	001a      	movs	r2, r3
 8004f32:	2100      	movs	r1, #0
 8004f34:	f007 ff26 	bl	800cd84 <memset>
  if(hi2s->Instance==SPI1)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a47      	ldr	r2, [pc, #284]	; (800505c <HAL_I2S_MspInit+0x13c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d000      	beq.n	8004f44 <HAL_I2S_MspInit+0x24>
 8004f42:	e086      	b.n	8005052 <HAL_I2S_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004f44:	4b46      	ldr	r3, [pc, #280]	; (8005060 <HAL_I2S_MspInit+0x140>)
 8004f46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f48:	4b45      	ldr	r3, [pc, #276]	; (8005060 <HAL_I2S_MspInit+0x140>)
 8004f4a:	2180      	movs	r1, #128	; 0x80
 8004f4c:	0149      	lsls	r1, r1, #5
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	641a      	str	r2, [r3, #64]	; 0x40
 8004f52:	4b43      	ldr	r3, [pc, #268]	; (8005060 <HAL_I2S_MspInit+0x140>)
 8004f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f56:	2380      	movs	r3, #128	; 0x80
 8004f58:	015b      	lsls	r3, r3, #5
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	613b      	str	r3, [r7, #16]
 8004f5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f60:	4b3f      	ldr	r3, [pc, #252]	; (8005060 <HAL_I2S_MspInit+0x140>)
 8004f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f64:	4b3e      	ldr	r3, [pc, #248]	; (8005060 <HAL_I2S_MspInit+0x140>)
 8004f66:	2101      	movs	r1, #1
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	635a      	str	r2, [r3, #52]	; 0x34
 8004f6c:	4b3c      	ldr	r3, [pc, #240]	; (8005060 <HAL_I2S_MspInit+0x140>)
 8004f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f70:	2201      	movs	r2, #1
 8004f72:	4013      	ands	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]
 8004f76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f78:	4b39      	ldr	r3, [pc, #228]	; (8005060 <HAL_I2S_MspInit+0x140>)
 8004f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f7c:	4b38      	ldr	r3, [pc, #224]	; (8005060 <HAL_I2S_MspInit+0x140>)
 8004f7e:	2102      	movs	r1, #2
 8004f80:	430a      	orrs	r2, r1
 8004f82:	635a      	str	r2, [r3, #52]	; 0x34
 8004f84:	4b36      	ldr	r3, [pc, #216]	; (8005060 <HAL_I2S_MspInit+0x140>)
 8004f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f88:	2202      	movs	r2, #2
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	60bb      	str	r3, [r7, #8]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004f90:	193b      	adds	r3, r7, r4
 8004f92:	2280      	movs	r2, #128	; 0x80
 8004f94:	0212      	lsls	r2, r2, #8
 8004f96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f98:	193b      	adds	r3, r7, r4
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f9e:	193b      	adds	r3, r7, r4
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fa4:	193b      	adds	r3, r7, r4
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004faa:	193b      	adds	r3, r7, r4
 8004fac:	2200      	movs	r2, #0
 8004fae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fb0:	193a      	adds	r2, r7, r4
 8004fb2:	23a0      	movs	r3, #160	; 0xa0
 8004fb4:	05db      	lsls	r3, r3, #23
 8004fb6:	0011      	movs	r1, r2
 8004fb8:	0018      	movs	r0, r3
 8004fba:	f001 fa41 	bl	8006440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004fbe:	0021      	movs	r1, r4
 8004fc0:	187b      	adds	r3, r7, r1
 8004fc2:	2238      	movs	r2, #56	; 0x38
 8004fc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fc6:	187b      	adds	r3, r7, r1
 8004fc8:	2202      	movs	r2, #2
 8004fca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fcc:	187b      	adds	r3, r7, r1
 8004fce:	2200      	movs	r2, #0
 8004fd0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fd2:	187b      	adds	r3, r7, r1
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004fd8:	187b      	adds	r3, r7, r1
 8004fda:	2200      	movs	r2, #0
 8004fdc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fde:	187b      	adds	r3, r7, r1
 8004fe0:	4a20      	ldr	r2, [pc, #128]	; (8005064 <HAL_I2S_MspInit+0x144>)
 8004fe2:	0019      	movs	r1, r3
 8004fe4:	0010      	movs	r0, r2
 8004fe6:	f001 fa2b 	bl	8006440 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8004fea:	4b1f      	ldr	r3, [pc, #124]	; (8005068 <HAL_I2S_MspInit+0x148>)
 8004fec:	4a1f      	ldr	r2, [pc, #124]	; (800506c <HAL_I2S_MspInit+0x14c>)
 8004fee:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8004ff0:	4b1d      	ldr	r3, [pc, #116]	; (8005068 <HAL_I2S_MspInit+0x148>)
 8004ff2:	2211      	movs	r2, #17
 8004ff4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ff6:	4b1c      	ldr	r3, [pc, #112]	; (8005068 <HAL_I2S_MspInit+0x148>)
 8004ff8:	2210      	movs	r2, #16
 8004ffa:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ffc:	4b1a      	ldr	r3, [pc, #104]	; (8005068 <HAL_I2S_MspInit+0x148>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005002:	4b19      	ldr	r3, [pc, #100]	; (8005068 <HAL_I2S_MspInit+0x148>)
 8005004:	2280      	movs	r2, #128	; 0x80
 8005006:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005008:	4b17      	ldr	r3, [pc, #92]	; (8005068 <HAL_I2S_MspInit+0x148>)
 800500a:	2280      	movs	r2, #128	; 0x80
 800500c:	0052      	lsls	r2, r2, #1
 800500e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005010:	4b15      	ldr	r3, [pc, #84]	; (8005068 <HAL_I2S_MspInit+0x148>)
 8005012:	2280      	movs	r2, #128	; 0x80
 8005014:	00d2      	lsls	r2, r2, #3
 8005016:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8005018:	4b13      	ldr	r3, [pc, #76]	; (8005068 <HAL_I2S_MspInit+0x148>)
 800501a:	2200      	movs	r2, #0
 800501c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800501e:	4b12      	ldr	r3, [pc, #72]	; (8005068 <HAL_I2S_MspInit+0x148>)
 8005020:	22c0      	movs	r2, #192	; 0xc0
 8005022:	0192      	lsls	r2, r2, #6
 8005024:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8005026:	4b10      	ldr	r3, [pc, #64]	; (8005068 <HAL_I2S_MspInit+0x148>)
 8005028:	0018      	movs	r0, r3
 800502a:	f000 ff41 	bl	8005eb0 <HAL_DMA_Init>
 800502e:	1e03      	subs	r3, r0, #0
 8005030:	d001      	beq.n	8005036 <HAL_I2S_MspInit+0x116>
    {
      Error_Handler();
 8005032:	f7ff febd 	bl	8004db0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a0b      	ldr	r2, [pc, #44]	; (8005068 <HAL_I2S_MspInit+0x148>)
 800503a:	62da      	str	r2, [r3, #44]	; 0x2c
 800503c:	4b0a      	ldr	r3, [pc, #40]	; (8005068 <HAL_I2S_MspInit+0x148>)
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8005042:	2200      	movs	r2, #0
 8005044:	2100      	movs	r1, #0
 8005046:	2019      	movs	r0, #25
 8005048:	f000 ff00 	bl	8005e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800504c:	2019      	movs	r0, #25
 800504e:	f000 ff12 	bl	8005e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005052:	46c0      	nop			; (mov r8, r8)
 8005054:	46bd      	mov	sp, r7
 8005056:	b00b      	add	sp, #44	; 0x2c
 8005058:	bd90      	pop	{r4, r7, pc}
 800505a:	46c0      	nop			; (mov r8, r8)
 800505c:	40013000 	.word	0x40013000
 8005060:	40021000 	.word	0x40021000
 8005064:	50000400 	.word	0x50000400
 8005068:	200014a8 	.word	0x200014a8
 800506c:	40020008 	.word	0x40020008

08005070 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005070:	b590      	push	{r4, r7, lr}
 8005072:	b08b      	sub	sp, #44	; 0x2c
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005078:	2414      	movs	r4, #20
 800507a:	193b      	adds	r3, r7, r4
 800507c:	0018      	movs	r0, r3
 800507e:	2314      	movs	r3, #20
 8005080:	001a      	movs	r2, r3
 8005082:	2100      	movs	r1, #0
 8005084:	f007 fe7e 	bl	800cd84 <memset>
  if(hspi->Instance==SPI2)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a54      	ldr	r2, [pc, #336]	; (80051e0 <HAL_SPI_MspInit+0x170>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d000      	beq.n	8005094 <HAL_SPI_MspInit+0x24>
 8005092:	e0a0      	b.n	80051d6 <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005094:	4b53      	ldr	r3, [pc, #332]	; (80051e4 <HAL_SPI_MspInit+0x174>)
 8005096:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005098:	4b52      	ldr	r3, [pc, #328]	; (80051e4 <HAL_SPI_MspInit+0x174>)
 800509a:	2180      	movs	r1, #128	; 0x80
 800509c:	01c9      	lsls	r1, r1, #7
 800509e:	430a      	orrs	r2, r1
 80050a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80050a2:	4b50      	ldr	r3, [pc, #320]	; (80051e4 <HAL_SPI_MspInit+0x174>)
 80050a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050a6:	2380      	movs	r3, #128	; 0x80
 80050a8:	01db      	lsls	r3, r3, #7
 80050aa:	4013      	ands	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]
 80050ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050b0:	4b4c      	ldr	r3, [pc, #304]	; (80051e4 <HAL_SPI_MspInit+0x174>)
 80050b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050b4:	4b4b      	ldr	r3, [pc, #300]	; (80051e4 <HAL_SPI_MspInit+0x174>)
 80050b6:	2102      	movs	r1, #2
 80050b8:	430a      	orrs	r2, r1
 80050ba:	635a      	str	r2, [r3, #52]	; 0x34
 80050bc:	4b49      	ldr	r3, [pc, #292]	; (80051e4 <HAL_SPI_MspInit+0x174>)
 80050be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c0:	2202      	movs	r2, #2
 80050c2:	4013      	ands	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]
 80050c6:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80050c8:	193b      	adds	r3, r7, r4
 80050ca:	2240      	movs	r2, #64	; 0x40
 80050cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ce:	193b      	adds	r3, r7, r4
 80050d0:	2202      	movs	r2, #2
 80050d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d4:	193b      	adds	r3, r7, r4
 80050d6:	2200      	movs	r2, #0
 80050d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050da:	193b      	adds	r3, r7, r4
 80050dc:	2200      	movs	r2, #0
 80050de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 80050e0:	193b      	adds	r3, r7, r4
 80050e2:	2204      	movs	r2, #4
 80050e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050e6:	193b      	adds	r3, r7, r4
 80050e8:	4a3f      	ldr	r2, [pc, #252]	; (80051e8 <HAL_SPI_MspInit+0x178>)
 80050ea:	0019      	movs	r1, r3
 80050ec:	0010      	movs	r0, r2
 80050ee:	f001 f9a7 	bl	8006440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80050f2:	0021      	movs	r1, r4
 80050f4:	187b      	adds	r3, r7, r1
 80050f6:	22c0      	movs	r2, #192	; 0xc0
 80050f8:	0052      	lsls	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050fc:	187b      	adds	r3, r7, r1
 80050fe:	2202      	movs	r2, #2
 8005100:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005102:	187b      	adds	r3, r7, r1
 8005104:	2200      	movs	r2, #0
 8005106:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005108:	187b      	adds	r3, r7, r1
 800510a:	2200      	movs	r2, #0
 800510c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 800510e:	187b      	adds	r3, r7, r1
 8005110:	2201      	movs	r2, #1
 8005112:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005114:	187b      	adds	r3, r7, r1
 8005116:	4a34      	ldr	r2, [pc, #208]	; (80051e8 <HAL_SPI_MspInit+0x178>)
 8005118:	0019      	movs	r1, r3
 800511a:	0010      	movs	r0, r2
 800511c:	f001 f990 	bl	8006440 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel2;
 8005120:	4b32      	ldr	r3, [pc, #200]	; (80051ec <HAL_SPI_MspInit+0x17c>)
 8005122:	4a33      	ldr	r2, [pc, #204]	; (80051f0 <HAL_SPI_MspInit+0x180>)
 8005124:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8005126:	4b31      	ldr	r3, [pc, #196]	; (80051ec <HAL_SPI_MspInit+0x17c>)
 8005128:	2212      	movs	r2, #18
 800512a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800512c:	4b2f      	ldr	r3, [pc, #188]	; (80051ec <HAL_SPI_MspInit+0x17c>)
 800512e:	2200      	movs	r2, #0
 8005130:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005132:	4b2e      	ldr	r3, [pc, #184]	; (80051ec <HAL_SPI_MspInit+0x17c>)
 8005134:	2200      	movs	r2, #0
 8005136:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005138:	4b2c      	ldr	r3, [pc, #176]	; (80051ec <HAL_SPI_MspInit+0x17c>)
 800513a:	2280      	movs	r2, #128	; 0x80
 800513c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800513e:	4b2b      	ldr	r3, [pc, #172]	; (80051ec <HAL_SPI_MspInit+0x17c>)
 8005140:	2200      	movs	r2, #0
 8005142:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005144:	4b29      	ldr	r3, [pc, #164]	; (80051ec <HAL_SPI_MspInit+0x17c>)
 8005146:	2200      	movs	r2, #0
 8005148:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800514a:	4b28      	ldr	r3, [pc, #160]	; (80051ec <HAL_SPI_MspInit+0x17c>)
 800514c:	2200      	movs	r2, #0
 800514e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005150:	4b26      	ldr	r3, [pc, #152]	; (80051ec <HAL_SPI_MspInit+0x17c>)
 8005152:	2280      	movs	r2, #128	; 0x80
 8005154:	0192      	lsls	r2, r2, #6
 8005156:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8005158:	4b24      	ldr	r3, [pc, #144]	; (80051ec <HAL_SPI_MspInit+0x17c>)
 800515a:	0018      	movs	r0, r3
 800515c:	f000 fea8 	bl	8005eb0 <HAL_DMA_Init>
 8005160:	1e03      	subs	r3, r0, #0
 8005162:	d001      	beq.n	8005168 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 8005164:	f7ff fe24 	bl	8004db0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a20      	ldr	r2, [pc, #128]	; (80051ec <HAL_SPI_MspInit+0x17c>)
 800516c:	659a      	str	r2, [r3, #88]	; 0x58
 800516e:	4b1f      	ldr	r3, [pc, #124]	; (80051ec <HAL_SPI_MspInit+0x17c>)
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel3;
 8005174:	4b1f      	ldr	r3, [pc, #124]	; (80051f4 <HAL_SPI_MspInit+0x184>)
 8005176:	4a20      	ldr	r2, [pc, #128]	; (80051f8 <HAL_SPI_MspInit+0x188>)
 8005178:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 800517a:	4b1e      	ldr	r3, [pc, #120]	; (80051f4 <HAL_SPI_MspInit+0x184>)
 800517c:	2213      	movs	r2, #19
 800517e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005180:	4b1c      	ldr	r3, [pc, #112]	; (80051f4 <HAL_SPI_MspInit+0x184>)
 8005182:	2210      	movs	r2, #16
 8005184:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005186:	4b1b      	ldr	r3, [pc, #108]	; (80051f4 <HAL_SPI_MspInit+0x184>)
 8005188:	2200      	movs	r2, #0
 800518a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800518c:	4b19      	ldr	r3, [pc, #100]	; (80051f4 <HAL_SPI_MspInit+0x184>)
 800518e:	2280      	movs	r2, #128	; 0x80
 8005190:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005192:	4b18      	ldr	r3, [pc, #96]	; (80051f4 <HAL_SPI_MspInit+0x184>)
 8005194:	2200      	movs	r2, #0
 8005196:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005198:	4b16      	ldr	r3, [pc, #88]	; (80051f4 <HAL_SPI_MspInit+0x184>)
 800519a:	2200      	movs	r2, #0
 800519c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800519e:	4b15      	ldr	r3, [pc, #84]	; (80051f4 <HAL_SPI_MspInit+0x184>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80051a4:	4b13      	ldr	r3, [pc, #76]	; (80051f4 <HAL_SPI_MspInit+0x184>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80051aa:	4b12      	ldr	r3, [pc, #72]	; (80051f4 <HAL_SPI_MspInit+0x184>)
 80051ac:	0018      	movs	r0, r3
 80051ae:	f000 fe7f 	bl	8005eb0 <HAL_DMA_Init>
 80051b2:	1e03      	subs	r3, r0, #0
 80051b4:	d001      	beq.n	80051ba <HAL_SPI_MspInit+0x14a>
    {
      Error_Handler();
 80051b6:	f7ff fdfb 	bl	8004db0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a0d      	ldr	r2, [pc, #52]	; (80051f4 <HAL_SPI_MspInit+0x184>)
 80051be:	655a      	str	r2, [r3, #84]	; 0x54
 80051c0:	4b0c      	ldr	r3, [pc, #48]	; (80051f4 <HAL_SPI_MspInit+0x184>)
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80051c6:	2200      	movs	r2, #0
 80051c8:	2100      	movs	r1, #0
 80051ca:	201a      	movs	r0, #26
 80051cc:	f000 fe3e 	bl	8005e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80051d0:	201a      	movs	r0, #26
 80051d2:	f000 fe50 	bl	8005e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80051d6:	46c0      	nop			; (mov r8, r8)
 80051d8:	46bd      	mov	sp, r7
 80051da:	b00b      	add	sp, #44	; 0x2c
 80051dc:	bd90      	pop	{r4, r7, pc}
 80051de:	46c0      	nop			; (mov r8, r8)
 80051e0:	40003800 	.word	0x40003800
 80051e4:	40021000 	.word	0x40021000
 80051e8:	50000400 	.word	0x50000400
 80051ec:	200001a4 	.word	0x200001a4
 80051f0:	4002001c 	.word	0x4002001c
 80051f4:	20001448 	.word	0x20001448
 80051f8:	40020030 	.word	0x40020030

080051fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a0a      	ldr	r2, [pc, #40]	; (8005234 <HAL_TIM_Base_MspInit+0x38>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d10d      	bne.n	800522a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800520e:	4b0a      	ldr	r3, [pc, #40]	; (8005238 <HAL_TIM_Base_MspInit+0x3c>)
 8005210:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005212:	4b09      	ldr	r3, [pc, #36]	; (8005238 <HAL_TIM_Base_MspInit+0x3c>)
 8005214:	2180      	movs	r1, #128	; 0x80
 8005216:	0109      	lsls	r1, r1, #4
 8005218:	430a      	orrs	r2, r1
 800521a:	641a      	str	r2, [r3, #64]	; 0x40
 800521c:	4b06      	ldr	r3, [pc, #24]	; (8005238 <HAL_TIM_Base_MspInit+0x3c>)
 800521e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005220:	2380      	movs	r3, #128	; 0x80
 8005222:	011b      	lsls	r3, r3, #4
 8005224:	4013      	ands	r3, r2
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800522a:	46c0      	nop			; (mov r8, r8)
 800522c:	46bd      	mov	sp, r7
 800522e:	b004      	add	sp, #16
 8005230:	bd80      	pop	{r7, pc}
 8005232:	46c0      	nop			; (mov r8, r8)
 8005234:	40012c00 	.word	0x40012c00
 8005238:	40021000 	.word	0x40021000

0800523c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800523c:	b590      	push	{r4, r7, lr}
 800523e:	b089      	sub	sp, #36	; 0x24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005244:	240c      	movs	r4, #12
 8005246:	193b      	adds	r3, r7, r4
 8005248:	0018      	movs	r0, r3
 800524a:	2314      	movs	r3, #20
 800524c:	001a      	movs	r2, r3
 800524e:	2100      	movs	r1, #0
 8005250:	f007 fd98 	bl	800cd84 <memset>
  if(htim->Instance==TIM1)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a15      	ldr	r2, [pc, #84]	; (80052b0 <HAL_TIM_MspPostInit+0x74>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d123      	bne.n	80052a6 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800525e:	4b15      	ldr	r3, [pc, #84]	; (80052b4 <HAL_TIM_MspPostInit+0x78>)
 8005260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005262:	4b14      	ldr	r3, [pc, #80]	; (80052b4 <HAL_TIM_MspPostInit+0x78>)
 8005264:	2101      	movs	r1, #1
 8005266:	430a      	orrs	r2, r1
 8005268:	635a      	str	r2, [r3, #52]	; 0x34
 800526a:	4b12      	ldr	r3, [pc, #72]	; (80052b4 <HAL_TIM_MspPostInit+0x78>)
 800526c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526e:	2201      	movs	r2, #1
 8005270:	4013      	ands	r3, r2
 8005272:	60bb      	str	r3, [r7, #8]
 8005274:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005276:	193b      	adds	r3, r7, r4
 8005278:	2280      	movs	r2, #128	; 0x80
 800527a:	0052      	lsls	r2, r2, #1
 800527c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800527e:	0021      	movs	r1, r4
 8005280:	187b      	adds	r3, r7, r1
 8005282:	2202      	movs	r2, #2
 8005284:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005286:	187b      	adds	r3, r7, r1
 8005288:	2202      	movs	r2, #2
 800528a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800528c:	187b      	adds	r3, r7, r1
 800528e:	2203      	movs	r2, #3
 8005290:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005292:	187b      	adds	r3, r7, r1
 8005294:	2202      	movs	r2, #2
 8005296:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005298:	187a      	adds	r2, r7, r1
 800529a:	23a0      	movs	r3, #160	; 0xa0
 800529c:	05db      	lsls	r3, r3, #23
 800529e:	0011      	movs	r1, r2
 80052a0:	0018      	movs	r0, r3
 80052a2:	f001 f8cd 	bl	8006440 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80052a6:	46c0      	nop			; (mov r8, r8)
 80052a8:	46bd      	mov	sp, r7
 80052aa:	b009      	add	sp, #36	; 0x24
 80052ac:	bd90      	pop	{r4, r7, pc}
 80052ae:	46c0      	nop			; (mov r8, r8)
 80052b0:	40012c00 	.word	0x40012c00
 80052b4:	40021000 	.word	0x40021000

080052b8 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80052b8:	b590      	push	{r4, r7, lr}
 80052ba:	b08b      	sub	sp, #44	; 0x2c
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052c0:	2414      	movs	r4, #20
 80052c2:	193b      	adds	r3, r7, r4
 80052c4:	0018      	movs	r0, r3
 80052c6:	2314      	movs	r3, #20
 80052c8:	001a      	movs	r2, r3
 80052ca:	2100      	movs	r1, #0
 80052cc:	f007 fd5a 	bl	800cd84 <memset>
  if(husart->Instance==USART3)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a45      	ldr	r2, [pc, #276]	; (80053ec <HAL_USART_MspInit+0x134>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d000      	beq.n	80052dc <HAL_USART_MspInit+0x24>
 80052da:	e083      	b.n	80053e4 <HAL_USART_MspInit+0x12c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80052dc:	4b44      	ldr	r3, [pc, #272]	; (80053f0 <HAL_USART_MspInit+0x138>)
 80052de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052e0:	4b43      	ldr	r3, [pc, #268]	; (80053f0 <HAL_USART_MspInit+0x138>)
 80052e2:	2180      	movs	r1, #128	; 0x80
 80052e4:	02c9      	lsls	r1, r1, #11
 80052e6:	430a      	orrs	r2, r1
 80052e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80052ea:	4b41      	ldr	r3, [pc, #260]	; (80053f0 <HAL_USART_MspInit+0x138>)
 80052ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052ee:	2380      	movs	r3, #128	; 0x80
 80052f0:	02db      	lsls	r3, r3, #11
 80052f2:	4013      	ands	r3, r2
 80052f4:	613b      	str	r3, [r7, #16]
 80052f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052f8:	4b3d      	ldr	r3, [pc, #244]	; (80053f0 <HAL_USART_MspInit+0x138>)
 80052fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052fc:	4b3c      	ldr	r3, [pc, #240]	; (80053f0 <HAL_USART_MspInit+0x138>)
 80052fe:	2101      	movs	r1, #1
 8005300:	430a      	orrs	r2, r1
 8005302:	635a      	str	r2, [r3, #52]	; 0x34
 8005304:	4b3a      	ldr	r3, [pc, #232]	; (80053f0 <HAL_USART_MspInit+0x138>)
 8005306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005308:	2201      	movs	r2, #1
 800530a:	4013      	ands	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005310:	4b37      	ldr	r3, [pc, #220]	; (80053f0 <HAL_USART_MspInit+0x138>)
 8005312:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005314:	4b36      	ldr	r3, [pc, #216]	; (80053f0 <HAL_USART_MspInit+0x138>)
 8005316:	2102      	movs	r1, #2
 8005318:	430a      	orrs	r2, r1
 800531a:	635a      	str	r2, [r3, #52]	; 0x34
 800531c:	4b34      	ldr	r3, [pc, #208]	; (80053f0 <HAL_USART_MspInit+0x138>)
 800531e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005320:	2202      	movs	r2, #2
 8005322:	4013      	ands	r3, r2
 8005324:	60bb      	str	r3, [r7, #8]
 8005326:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005328:	193b      	adds	r3, r7, r4
 800532a:	2220      	movs	r2, #32
 800532c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800532e:	193b      	adds	r3, r7, r4
 8005330:	2202      	movs	r2, #2
 8005332:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005334:	193b      	adds	r3, r7, r4
 8005336:	2200      	movs	r2, #0
 8005338:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800533a:	193b      	adds	r3, r7, r4
 800533c:	2203      	movs	r2, #3
 800533e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8005340:	193b      	adds	r3, r7, r4
 8005342:	2204      	movs	r2, #4
 8005344:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005346:	193a      	adds	r2, r7, r4
 8005348:	23a0      	movs	r3, #160	; 0xa0
 800534a:	05db      	lsls	r3, r3, #23
 800534c:	0011      	movs	r1, r2
 800534e:	0018      	movs	r0, r3
 8005350:	f001 f876 	bl	8006440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005354:	0021      	movs	r1, r4
 8005356:	187b      	adds	r3, r7, r1
 8005358:	2203      	movs	r2, #3
 800535a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800535c:	187b      	adds	r3, r7, r1
 800535e:	2202      	movs	r2, #2
 8005360:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005362:	187b      	adds	r3, r7, r1
 8005364:	2200      	movs	r2, #0
 8005366:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005368:	187b      	adds	r3, r7, r1
 800536a:	2203      	movs	r2, #3
 800536c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800536e:	187b      	adds	r3, r7, r1
 8005370:	2204      	movs	r2, #4
 8005372:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005374:	187b      	adds	r3, r7, r1
 8005376:	4a1f      	ldr	r2, [pc, #124]	; (80053f4 <HAL_USART_MspInit+0x13c>)
 8005378:	0019      	movs	r1, r3
 800537a:	0010      	movs	r0, r2
 800537c:	f001 f860 	bl	8006440 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8005380:	4b1d      	ldr	r3, [pc, #116]	; (80053f8 <HAL_USART_MspInit+0x140>)
 8005382:	4a1e      	ldr	r2, [pc, #120]	; (80053fc <HAL_USART_MspInit+0x144>)
 8005384:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8005386:	4b1c      	ldr	r3, [pc, #112]	; (80053f8 <HAL_USART_MspInit+0x140>)
 8005388:	2237      	movs	r2, #55	; 0x37
 800538a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800538c:	4b1a      	ldr	r3, [pc, #104]	; (80053f8 <HAL_USART_MspInit+0x140>)
 800538e:	2210      	movs	r2, #16
 8005390:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005392:	4b19      	ldr	r3, [pc, #100]	; (80053f8 <HAL_USART_MspInit+0x140>)
 8005394:	2200      	movs	r2, #0
 8005396:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005398:	4b17      	ldr	r3, [pc, #92]	; (80053f8 <HAL_USART_MspInit+0x140>)
 800539a:	2280      	movs	r2, #128	; 0x80
 800539c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800539e:	4b16      	ldr	r3, [pc, #88]	; (80053f8 <HAL_USART_MspInit+0x140>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053a4:	4b14      	ldr	r3, [pc, #80]	; (80053f8 <HAL_USART_MspInit+0x140>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80053aa:	4b13      	ldr	r3, [pc, #76]	; (80053f8 <HAL_USART_MspInit+0x140>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80053b0:	4b11      	ldr	r3, [pc, #68]	; (80053f8 <HAL_USART_MspInit+0x140>)
 80053b2:	2280      	movs	r2, #128	; 0x80
 80053b4:	0192      	lsls	r2, r2, #6
 80053b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80053b8:	4b0f      	ldr	r3, [pc, #60]	; (80053f8 <HAL_USART_MspInit+0x140>)
 80053ba:	0018      	movs	r0, r3
 80053bc:	f000 fd78 	bl	8005eb0 <HAL_DMA_Init>
 80053c0:	1e03      	subs	r3, r0, #0
 80053c2:	d001      	beq.n	80053c8 <HAL_USART_MspInit+0x110>
    {
      Error_Handler();
 80053c4:	f7ff fcf4 	bl	8004db0 <Error_Handler>
    }

    __HAL_LINKDMA(husart,hdmatx,hdma_usart3_tx);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a0b      	ldr	r2, [pc, #44]	; (80053f8 <HAL_USART_MspInit+0x140>)
 80053cc:	651a      	str	r2, [r3, #80]	; 0x50
 80053ce:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <HAL_USART_MspInit+0x140>)
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 80053d4:	2200      	movs	r2, #0
 80053d6:	2100      	movs	r1, #0
 80053d8:	201d      	movs	r0, #29
 80053da:	f000 fd37 	bl	8005e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 80053de:	201d      	movs	r0, #29
 80053e0:	f000 fd49 	bl	8005e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80053e4:	46c0      	nop			; (mov r8, r8)
 80053e6:	46bd      	mov	sp, r7
 80053e8:	b00b      	add	sp, #44	; 0x2c
 80053ea:	bd90      	pop	{r4, r7, pc}
 80053ec:	40004800 	.word	0x40004800
 80053f0:	40021000 	.word	0x40021000
 80053f4:	50000400 	.word	0x50000400
 80053f8:	20000208 	.word	0x20000208
 80053fc:	40020044 	.word	0x40020044

08005400 <LL_USART_IsActiveFlag_FE>:
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	2202      	movs	r2, #2
 800540e:	4013      	ands	r3, r2
 8005410:	2b02      	cmp	r3, #2
 8005412:	d101      	bne.n	8005418 <LL_USART_IsActiveFlag_FE+0x18>
 8005414:	2301      	movs	r3, #1
 8005416:	e000      	b.n	800541a <LL_USART_IsActiveFlag_FE+0x1a>
 8005418:	2300      	movs	r3, #0
}
 800541a:	0018      	movs	r0, r3
 800541c:	46bd      	mov	sp, r7
 800541e:	b002      	add	sp, #8
 8005420:	bd80      	pop	{r7, pc}

08005422 <LL_USART_IsActiveFlag_NE>:
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b082      	sub	sp, #8
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	2204      	movs	r2, #4
 8005430:	4013      	ands	r3, r2
 8005432:	2b04      	cmp	r3, #4
 8005434:	d101      	bne.n	800543a <LL_USART_IsActiveFlag_NE+0x18>
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <LL_USART_IsActiveFlag_NE+0x1a>
 800543a:	2300      	movs	r3, #0
}
 800543c:	0018      	movs	r0, r3
 800543e:	46bd      	mov	sp, r7
 8005440:	b002      	add	sp, #8
 8005442:	bd80      	pop	{r7, pc}

08005444 <LL_USART_IsActiveFlag_ORE>:
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	2208      	movs	r2, #8
 8005452:	4013      	ands	r3, r2
 8005454:	2b08      	cmp	r3, #8
 8005456:	d101      	bne.n	800545c <LL_USART_IsActiveFlag_ORE+0x18>
 8005458:	2301      	movs	r3, #1
 800545a:	e000      	b.n	800545e <LL_USART_IsActiveFlag_ORE+0x1a>
 800545c:	2300      	movs	r3, #0
}
 800545e:	0018      	movs	r0, r3
 8005460:	46bd      	mov	sp, r7
 8005462:	b002      	add	sp, #8
 8005464:	bd80      	pop	{r7, pc}

08005466 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b082      	sub	sp, #8
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	2220      	movs	r2, #32
 8005474:	4013      	ands	r3, r2
 8005476:	2b20      	cmp	r3, #32
 8005478:	d101      	bne.n	800547e <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 800547a:	2301      	movs	r3, #1
 800547c:	e000      	b.n	8005480 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 800547e:	2300      	movs	r3, #0
}
 8005480:	0018      	movs	r0, r3
 8005482:	46bd      	mov	sp, r7
 8005484:	b002      	add	sp, #8
 8005486:	bd80      	pop	{r7, pc}

08005488 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2220      	movs	r2, #32
 8005496:	4013      	ands	r3, r2
 8005498:	2b20      	cmp	r3, #32
 800549a:	d101      	bne.n	80054a0 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 800549c:	2301      	movs	r3, #1
 800549e:	e000      	b.n	80054a2 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	0018      	movs	r0, r3
 80054a4:	46bd      	mov	sp, r7
 80054a6:	b002      	add	sp, #8
 80054a8:	bd80      	pop	{r7, pc}

080054aa <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80054ae:	46c0      	nop			; (mov r8, r8)
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80054b8:	e7fe      	b.n	80054b8 <HardFault_Handler+0x4>

080054ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80054be:	46c0      	nop			; (mov r8, r8)
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80054c8:	46c0      	nop			; (mov r8, r8)
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80054d2:	f000 f959 	bl	8005788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80054d6:	46c0      	nop			; (mov r8, r8)
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80054e0:	4b03      	ldr	r3, [pc, #12]	; (80054f0 <DMA1_Channel1_IRQHandler+0x14>)
 80054e2:	0018      	movs	r0, r3
 80054e4:	f000 fe5e 	bl	80061a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80054e8:	46c0      	nop			; (mov r8, r8)
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	46c0      	nop			; (mov r8, r8)
 80054f0:	200014a8 	.word	0x200014a8

080054f4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

//	HAL_SPI_RxCpltCallback(&hspi2);
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80054f8:	4b05      	ldr	r3, [pc, #20]	; (8005510 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80054fa:	0018      	movs	r0, r3
 80054fc:	f000 fe52 	bl	80061a4 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005500:	4b04      	ldr	r3, [pc, #16]	; (8005514 <DMA1_Channel2_3_IRQHandler+0x20>)
 8005502:	0018      	movs	r0, r3
 8005504:	f000 fe4e 	bl	80061a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8005508:	46c0      	nop			; (mov r8, r8)
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	46c0      	nop			; (mov r8, r8)
 8005510:	200001a4 	.word	0x200001a4
 8005514:	20001448 	.word	0x20001448

08005518 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
//		GPIOA->ODR |= 1 << 11;	//set test 1
//		GPIOA->ODR &= ~(1 << 11);	//reset test 1
  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800551c:	4b03      	ldr	r3, [pc, #12]	; (800552c <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 800551e:	0018      	movs	r0, r3
 8005520:	f000 fe40 	bl	80061a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8005524:	46c0      	nop			; (mov r8, r8)
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	46c0      	nop			; (mov r8, r8)
 800552c:	20000208 	.word	0x20000208

08005530 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8005534:	4b09      	ldr	r3, [pc, #36]	; (800555c <I2C1_IRQHandler+0x2c>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699a      	ldr	r2, [r3, #24]
 800553a:	23e0      	movs	r3, #224	; 0xe0
 800553c:	00db      	lsls	r3, r3, #3
 800553e:	4013      	ands	r3, r2
 8005540:	d004      	beq.n	800554c <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8005542:	4b06      	ldr	r3, [pc, #24]	; (800555c <I2C1_IRQHandler+0x2c>)
 8005544:	0018      	movs	r0, r3
 8005546:	f001 fa97 	bl	8006a78 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800554a:	e003      	b.n	8005554 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800554c:	4b03      	ldr	r3, [pc, #12]	; (800555c <I2C1_IRQHandler+0x2c>)
 800554e:	0018      	movs	r0, r3
 8005550:	f001 fa78 	bl	8006a44 <HAL_I2C_EV_IRQHandler>
}
 8005554:	46c0      	nop			; (mov r8, r8)
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	46c0      	nop			; (mov r8, r8)
 800555c:	20000144 	.word	0x20000144

08005560 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8005564:	4b03      	ldr	r3, [pc, #12]	; (8005574 <SPI1_IRQHandler+0x14>)
 8005566:	0018      	movs	r0, r3
 8005568:	f002 fcf4 	bl	8007f54 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800556c:	46c0      	nop			; (mov r8, r8)
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	46c0      	nop			; (mov r8, r8)
 8005574:	20001380 	.word	0x20001380

08005578 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800557c:	4b03      	ldr	r3, [pc, #12]	; (800558c <SPI2_IRQHandler+0x14>)
 800557e:	0018      	movs	r0, r3
 8005580:	f004 fda0 	bl	800a0c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8005584:	46c0      	nop			; (mov r8, r8)
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	46c0      	nop			; (mov r8, r8)
 800558c:	200000b4 	.word	0x200000b4

08005590 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 8005594:	4b25      	ldr	r3, [pc, #148]	; (800562c <USART2_IRQHandler+0x9c>)
 8005596:	6a1a      	ldr	r2, [r3, #32]
 8005598:	4b24      	ldr	r3, [pc, #144]	; (800562c <USART2_IRQHandler+0x9c>)
 800559a:	2108      	movs	r1, #8
 800559c:	430a      	orrs	r2, r1
 800559e:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 80055a0:	4b22      	ldr	r3, [pc, #136]	; (800562c <USART2_IRQHandler+0x9c>)
 80055a2:	6a1a      	ldr	r2, [r3, #32]
 80055a4:	4b21      	ldr	r3, [pc, #132]	; (800562c <USART2_IRQHandler+0x9c>)
 80055a6:	2102      	movs	r1, #2
 80055a8:	430a      	orrs	r2, r1
 80055aa:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 80055ac:	4b1f      	ldr	r3, [pc, #124]	; (800562c <USART2_IRQHandler+0x9c>)
 80055ae:	6a1a      	ldr	r2, [r3, #32]
 80055b0:	4b1e      	ldr	r3, [pc, #120]	; (800562c <USART2_IRQHandler+0x9c>)
 80055b2:	2104      	movs	r1, #4
 80055b4:	430a      	orrs	r2, r1
 80055b6:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 80055b8:	4b1c      	ldr	r3, [pc, #112]	; (800562c <USART2_IRQHandler+0x9c>)
 80055ba:	0018      	movs	r0, r3
 80055bc:	f7ff ff53 	bl	8005466 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 80055c0:	1e03      	subs	r3, r0, #0
 80055c2:	d009      	beq.n	80055d8 <USART2_IRQHandler+0x48>
 80055c4:	4b19      	ldr	r3, [pc, #100]	; (800562c <USART2_IRQHandler+0x9c>)
 80055c6:	0018      	movs	r0, r3
 80055c8:	f7ff ff5e 	bl	8005488 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 80055cc:	1e03      	subs	r3, r0, #0
 80055ce:	d003      	beq.n	80055d8 <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 80055d0:	f7fd fc80 	bl	8002ed4 <USART2_RX_Callback>
	  {
 80055d4:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80055d6:	e025      	b.n	8005624 <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 80055d8:	4b14      	ldr	r3, [pc, #80]	; (800562c <USART2_IRQHandler+0x9c>)
 80055da:	6a1a      	ldr	r2, [r3, #32]
 80055dc:	4b13      	ldr	r3, [pc, #76]	; (800562c <USART2_IRQHandler+0x9c>)
 80055de:	2108      	movs	r1, #8
 80055e0:	430a      	orrs	r2, r1
 80055e2:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 80055e4:	4b11      	ldr	r3, [pc, #68]	; (800562c <USART2_IRQHandler+0x9c>)
 80055e6:	0018      	movs	r0, r3
 80055e8:	f7ff ff2c 	bl	8005444 <LL_USART_IsActiveFlag_ORE>
 80055ec:	1e03      	subs	r3, r0, #0
 80055ee:	d008      	beq.n	8005602 <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 80055f0:	4b0e      	ldr	r3, [pc, #56]	; (800562c <USART2_IRQHandler+0x9c>)
 80055f2:	6a1a      	ldr	r2, [r3, #32]
 80055f4:	4b0d      	ldr	r3, [pc, #52]	; (800562c <USART2_IRQHandler+0x9c>)
 80055f6:	2108      	movs	r1, #8
 80055f8:	430a      	orrs	r2, r1
 80055fa:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 80055fc:	4b0b      	ldr	r3, [pc, #44]	; (800562c <USART2_IRQHandler+0x9c>)
 80055fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8005600:	e010      	b.n	8005624 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 8005602:	4b0a      	ldr	r3, [pc, #40]	; (800562c <USART2_IRQHandler+0x9c>)
 8005604:	0018      	movs	r0, r3
 8005606:	f7ff fefb 	bl	8005400 <LL_USART_IsActiveFlag_FE>
 800560a:	1e03      	subs	r3, r0, #0
 800560c:	d002      	beq.n	8005614 <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 800560e:	4b07      	ldr	r3, [pc, #28]	; (800562c <USART2_IRQHandler+0x9c>)
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8005612:	e007      	b.n	8005624 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 8005614:	4b05      	ldr	r3, [pc, #20]	; (800562c <USART2_IRQHandler+0x9c>)
 8005616:	0018      	movs	r0, r3
 8005618:	f7ff ff03 	bl	8005422 <LL_USART_IsActiveFlag_NE>
 800561c:	1e03      	subs	r3, r0, #0
 800561e:	d001      	beq.n	8005624 <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 8005620:	4b02      	ldr	r3, [pc, #8]	; (800562c <USART2_IRQHandler+0x9c>)
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8005624:	46c0      	nop			; (mov r8, r8)
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	46c0      	nop			; (mov r8, r8)
 800562c:	40004400 	.word	0x40004400

08005630 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 8005634:	4b03      	ldr	r3, [pc, #12]	; (8005644 <USART3_4_LPUART1_IRQHandler+0x14>)
 8005636:	0018      	movs	r0, r3
 8005638:	f006 fa52 	bl	800bae0 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 800563c:	46c0      	nop			; (mov r8, r8)
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	46c0      	nop			; (mov r8, r8)
 8005644:	200002a4 	.word	0x200002a4

08005648 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800564c:	4b03      	ldr	r3, [pc, #12]	; (800565c <SystemInit+0x14>)
 800564e:	2280      	movs	r2, #128	; 0x80
 8005650:	0512      	lsls	r2, r2, #20
 8005652:	609a      	str	r2, [r3, #8]
#endif
}
 8005654:	46c0      	nop			; (mov r8, r8)
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	46c0      	nop			; (mov r8, r8)
 800565c:	e000ed00 	.word	0xe000ed00

08005660 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005660:	480d      	ldr	r0, [pc, #52]	; (8005698 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005662:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005664:	f7ff fff0 	bl	8005648 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005668:	480c      	ldr	r0, [pc, #48]	; (800569c <LoopForever+0x6>)
  ldr r1, =_edata
 800566a:	490d      	ldr	r1, [pc, #52]	; (80056a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800566c:	4a0d      	ldr	r2, [pc, #52]	; (80056a4 <LoopForever+0xe>)
  movs r3, #0
 800566e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005670:	e002      	b.n	8005678 <LoopCopyDataInit>

08005672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005676:	3304      	adds	r3, #4

08005678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800567a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800567c:	d3f9      	bcc.n	8005672 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800567e:	4a0a      	ldr	r2, [pc, #40]	; (80056a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005680:	4c0a      	ldr	r4, [pc, #40]	; (80056ac <LoopForever+0x16>)
  movs r3, #0
 8005682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005684:	e001      	b.n	800568a <LoopFillZerobss>

08005686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005688:	3204      	adds	r2, #4

0800568a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800568a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800568c:	d3fb      	bcc.n	8005686 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800568e:	f007 fb55 	bl	800cd3c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005692:	f7fc feab 	bl	80023ec <main>

08005696 <LoopForever>:

LoopForever:
  b LoopForever
 8005696:	e7fe      	b.n	8005696 <LoopForever>
  ldr   r0, =_estack
 8005698:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800569c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80056a0:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 80056a4:	08016a20 	.word	0x08016a20
  ldr r2, =_sbss
 80056a8:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 80056ac:	2000352c 	.word	0x2000352c

080056b0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80056b0:	e7fe      	b.n	80056b0 <ADC1_COMP_IRQHandler>
	...

080056b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80056ba:	1dfb      	adds	r3, r7, #7
 80056bc:	2200      	movs	r2, #0
 80056be:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80056c0:	4b0b      	ldr	r3, [pc, #44]	; (80056f0 <HAL_Init+0x3c>)
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	4b0a      	ldr	r3, [pc, #40]	; (80056f0 <HAL_Init+0x3c>)
 80056c6:	2180      	movs	r1, #128	; 0x80
 80056c8:	0049      	lsls	r1, r1, #1
 80056ca:	430a      	orrs	r2, r1
 80056cc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80056ce:	2000      	movs	r0, #0
 80056d0:	f000 f810 	bl	80056f4 <HAL_InitTick>
 80056d4:	1e03      	subs	r3, r0, #0
 80056d6:	d003      	beq.n	80056e0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80056d8:	1dfb      	adds	r3, r7, #7
 80056da:	2201      	movs	r2, #1
 80056dc:	701a      	strb	r2, [r3, #0]
 80056de:	e001      	b.n	80056e4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80056e0:	f7ff fb6c 	bl	8004dbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80056e4:	1dfb      	adds	r3, r7, #7
 80056e6:	781b      	ldrb	r3, [r3, #0]
}
 80056e8:	0018      	movs	r0, r3
 80056ea:	46bd      	mov	sp, r7
 80056ec:	b002      	add	sp, #8
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40022000 	.word	0x40022000

080056f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056f4:	b590      	push	{r4, r7, lr}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80056fc:	230f      	movs	r3, #15
 80056fe:	18fb      	adds	r3, r7, r3
 8005700:	2200      	movs	r2, #0
 8005702:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005704:	4b1d      	ldr	r3, [pc, #116]	; (800577c <HAL_InitTick+0x88>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d02b      	beq.n	8005764 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800570c:	4b1c      	ldr	r3, [pc, #112]	; (8005780 <HAL_InitTick+0x8c>)
 800570e:	681c      	ldr	r4, [r3, #0]
 8005710:	4b1a      	ldr	r3, [pc, #104]	; (800577c <HAL_InitTick+0x88>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	0019      	movs	r1, r3
 8005716:	23fa      	movs	r3, #250	; 0xfa
 8005718:	0098      	lsls	r0, r3, #2
 800571a:	f7fa fcf3 	bl	8000104 <__udivsi3>
 800571e:	0003      	movs	r3, r0
 8005720:	0019      	movs	r1, r3
 8005722:	0020      	movs	r0, r4
 8005724:	f7fa fcee 	bl	8000104 <__udivsi3>
 8005728:	0003      	movs	r3, r0
 800572a:	0018      	movs	r0, r3
 800572c:	f000 fbb3 	bl	8005e96 <HAL_SYSTICK_Config>
 8005730:	1e03      	subs	r3, r0, #0
 8005732:	d112      	bne.n	800575a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b03      	cmp	r3, #3
 8005738:	d80a      	bhi.n	8005750 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800573a:	6879      	ldr	r1, [r7, #4]
 800573c:	2301      	movs	r3, #1
 800573e:	425b      	negs	r3, r3
 8005740:	2200      	movs	r2, #0
 8005742:	0018      	movs	r0, r3
 8005744:	f000 fb82 	bl	8005e4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005748:	4b0e      	ldr	r3, [pc, #56]	; (8005784 <HAL_InitTick+0x90>)
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	e00d      	b.n	800576c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005750:	230f      	movs	r3, #15
 8005752:	18fb      	adds	r3, r7, r3
 8005754:	2201      	movs	r2, #1
 8005756:	701a      	strb	r2, [r3, #0]
 8005758:	e008      	b.n	800576c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800575a:	230f      	movs	r3, #15
 800575c:	18fb      	adds	r3, r7, r3
 800575e:	2201      	movs	r2, #1
 8005760:	701a      	strb	r2, [r3, #0]
 8005762:	e003      	b.n	800576c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005764:	230f      	movs	r3, #15
 8005766:	18fb      	adds	r3, r7, r3
 8005768:	2201      	movs	r2, #1
 800576a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800576c:	230f      	movs	r3, #15
 800576e:	18fb      	adds	r3, r7, r3
 8005770:	781b      	ldrb	r3, [r3, #0]
}
 8005772:	0018      	movs	r0, r3
 8005774:	46bd      	mov	sp, r7
 8005776:	b005      	add	sp, #20
 8005778:	bd90      	pop	{r4, r7, pc}
 800577a:	46c0      	nop			; (mov r8, r8)
 800577c:	20000040 	.word	0x20000040
 8005780:	20000038 	.word	0x20000038
 8005784:	2000003c 	.word	0x2000003c

08005788 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800578c:	4b05      	ldr	r3, [pc, #20]	; (80057a4 <HAL_IncTick+0x1c>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	001a      	movs	r2, r3
 8005792:	4b05      	ldr	r3, [pc, #20]	; (80057a8 <HAL_IncTick+0x20>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	18d2      	adds	r2, r2, r3
 8005798:	4b03      	ldr	r3, [pc, #12]	; (80057a8 <HAL_IncTick+0x20>)
 800579a:	601a      	str	r2, [r3, #0]
}
 800579c:	46c0      	nop			; (mov r8, r8)
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	46c0      	nop			; (mov r8, r8)
 80057a4:	20000040 	.word	0x20000040
 80057a8:	20003528 	.word	0x20003528

080057ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	af00      	add	r7, sp, #0
  return uwTick;
 80057b0:	4b02      	ldr	r3, [pc, #8]	; (80057bc <HAL_GetTick+0x10>)
 80057b2:	681b      	ldr	r3, [r3, #0]
}
 80057b4:	0018      	movs	r0, r3
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	46c0      	nop			; (mov r8, r8)
 80057bc:	20003528 	.word	0x20003528

080057c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80057c8:	f7ff fff0 	bl	80057ac <HAL_GetTick>
 80057cc:	0003      	movs	r3, r0
 80057ce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	3301      	adds	r3, #1
 80057d8:	d005      	beq.n	80057e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80057da:	4b0a      	ldr	r3, [pc, #40]	; (8005804 <HAL_Delay+0x44>)
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	001a      	movs	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	189b      	adds	r3, r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80057e6:	46c0      	nop			; (mov r8, r8)
 80057e8:	f7ff ffe0 	bl	80057ac <HAL_GetTick>
 80057ec:	0002      	movs	r2, r0
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d8f7      	bhi.n	80057e8 <HAL_Delay+0x28>
  {
  }
}
 80057f8:	46c0      	nop			; (mov r8, r8)
 80057fa:	46c0      	nop			; (mov r8, r8)
 80057fc:	46bd      	mov	sp, r7
 80057fe:	b004      	add	sp, #16
 8005800:	bd80      	pop	{r7, pc}
 8005802:	46c0      	nop			; (mov r8, r8)
 8005804:	20000040 	.word	0x20000040

08005808 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8005810:	4b06      	ldr	r3, [pc, #24]	; (800582c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a06      	ldr	r2, [pc, #24]	; (8005830 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8005816:	4013      	ands	r3, r2
 8005818:	0019      	movs	r1, r3
 800581a:	4b04      	ldr	r3, [pc, #16]	; (800582c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	430a      	orrs	r2, r1
 8005820:	601a      	str	r2, [r3, #0]
}
 8005822:	46c0      	nop			; (mov r8, r8)
 8005824:	46bd      	mov	sp, r7
 8005826:	b002      	add	sp, #8
 8005828:	bd80      	pop	{r7, pc}
 800582a:	46c0      	nop			; (mov r8, r8)
 800582c:	40010000 	.word	0x40010000
 8005830:	fffff9ff 	.word	0xfffff9ff

08005834 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800583c:	4a05      	ldr	r2, [pc, #20]	; (8005854 <LL_EXTI_EnableIT_0_31+0x20>)
 800583e:	2380      	movs	r3, #128	; 0x80
 8005840:	58d2      	ldr	r2, [r2, r3]
 8005842:	4904      	ldr	r1, [pc, #16]	; (8005854 <LL_EXTI_EnableIT_0_31+0x20>)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4313      	orrs	r3, r2
 8005848:	2280      	movs	r2, #128	; 0x80
 800584a:	508b      	str	r3, [r1, r2]
}
 800584c:	46c0      	nop			; (mov r8, r8)
 800584e:	46bd      	mov	sp, r7
 8005850:	b002      	add	sp, #8
 8005852:	bd80      	pop	{r7, pc}
 8005854:	40021800 	.word	0x40021800

08005858 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005860:	4a06      	ldr	r2, [pc, #24]	; (800587c <LL_EXTI_DisableIT_0_31+0x24>)
 8005862:	2380      	movs	r3, #128	; 0x80
 8005864:	58d3      	ldr	r3, [r2, r3]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	43d2      	mvns	r2, r2
 800586a:	4904      	ldr	r1, [pc, #16]	; (800587c <LL_EXTI_DisableIT_0_31+0x24>)
 800586c:	4013      	ands	r3, r2
 800586e:	2280      	movs	r2, #128	; 0x80
 8005870:	508b      	str	r3, [r1, r2]
}
 8005872:	46c0      	nop			; (mov r8, r8)
 8005874:	46bd      	mov	sp, r7
 8005876:	b002      	add	sp, #8
 8005878:	bd80      	pop	{r7, pc}
 800587a:	46c0      	nop			; (mov r8, r8)
 800587c:	40021800 	.word	0x40021800

08005880 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8005888:	4a05      	ldr	r2, [pc, #20]	; (80058a0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800588a:	2384      	movs	r3, #132	; 0x84
 800588c:	58d2      	ldr	r2, [r2, r3]
 800588e:	4904      	ldr	r1, [pc, #16]	; (80058a0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4313      	orrs	r3, r2
 8005894:	2284      	movs	r2, #132	; 0x84
 8005896:	508b      	str	r3, [r1, r2]

}
 8005898:	46c0      	nop			; (mov r8, r8)
 800589a:	46bd      	mov	sp, r7
 800589c:	b002      	add	sp, #8
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	40021800 	.word	0x40021800

080058a4 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80058ac:	4a06      	ldr	r2, [pc, #24]	; (80058c8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80058ae:	2384      	movs	r3, #132	; 0x84
 80058b0:	58d3      	ldr	r3, [r2, r3]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	43d2      	mvns	r2, r2
 80058b6:	4904      	ldr	r1, [pc, #16]	; (80058c8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80058b8:	4013      	ands	r3, r2
 80058ba:	2284      	movs	r2, #132	; 0x84
 80058bc:	508b      	str	r3, [r1, r2]
}
 80058be:	46c0      	nop			; (mov r8, r8)
 80058c0:	46bd      	mov	sp, r7
 80058c2:	b002      	add	sp, #8
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	46c0      	nop			; (mov r8, r8)
 80058c8:	40021800 	.word	0x40021800

080058cc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80058d4:	4b04      	ldr	r3, [pc, #16]	; (80058e8 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80058d6:	6819      	ldr	r1, [r3, #0]
 80058d8:	4b03      	ldr	r3, [pc, #12]	; (80058e8 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	430a      	orrs	r2, r1
 80058de:	601a      	str	r2, [r3, #0]

}
 80058e0:	46c0      	nop			; (mov r8, r8)
 80058e2:	46bd      	mov	sp, r7
 80058e4:	b002      	add	sp, #8
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	40021800 	.word	0x40021800

080058ec <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80058f4:	4b05      	ldr	r3, [pc, #20]	; (800590c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	43d9      	mvns	r1, r3
 80058fc:	4b03      	ldr	r3, [pc, #12]	; (800590c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80058fe:	400a      	ands	r2, r1
 8005900:	601a      	str	r2, [r3, #0]

}
 8005902:	46c0      	nop			; (mov r8, r8)
 8005904:	46bd      	mov	sp, r7
 8005906:	b002      	add	sp, #8
 8005908:	bd80      	pop	{r7, pc}
 800590a:	46c0      	nop			; (mov r8, r8)
 800590c:	40021800 	.word	0x40021800

08005910 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005918:	4b04      	ldr	r3, [pc, #16]	; (800592c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800591a:	6859      	ldr	r1, [r3, #4]
 800591c:	4b03      	ldr	r3, [pc, #12]	; (800592c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	430a      	orrs	r2, r1
 8005922:	605a      	str	r2, [r3, #4]
}
 8005924:	46c0      	nop			; (mov r8, r8)
 8005926:	46bd      	mov	sp, r7
 8005928:	b002      	add	sp, #8
 800592a:	bd80      	pop	{r7, pc}
 800592c:	40021800 	.word	0x40021800

08005930 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005938:	4b05      	ldr	r3, [pc, #20]	; (8005950 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	43d9      	mvns	r1, r3
 8005940:	4b03      	ldr	r3, [pc, #12]	; (8005950 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8005942:	400a      	ands	r2, r1
 8005944:	605a      	str	r2, [r3, #4]
}
 8005946:	46c0      	nop			; (mov r8, r8)
 8005948:	46bd      	mov	sp, r7
 800594a:	b002      	add	sp, #8
 800594c:	bd80      	pop	{r7, pc}
 800594e:	46c0      	nop			; (mov r8, r8)
 8005950:	40021800 	.word	0x40021800

08005954 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 800595c:	4b03      	ldr	r3, [pc, #12]	; (800596c <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	611a      	str	r2, [r3, #16]
}
 8005962:	46c0      	nop			; (mov r8, r8)
 8005964:	46bd      	mov	sp, r7
 8005966:	b002      	add	sp, #8
 8005968:	bd80      	pop	{r7, pc}
 800596a:	46c0      	nop			; (mov r8, r8)
 800596c:	40021800 	.word	0x40021800

08005970 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8005978:	4b03      	ldr	r3, [pc, #12]	; (8005988 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	60da      	str	r2, [r3, #12]
}
 800597e:	46c0      	nop			; (mov r8, r8)
 8005980:	46bd      	mov	sp, r7
 8005982:	b002      	add	sp, #8
 8005984:	bd80      	pop	{r7, pc}
 8005986:	46c0      	nop			; (mov r8, r8)
 8005988:	40021800 	.word	0x40021800

0800598c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b088      	sub	sp, #32
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8005994:	2300      	movs	r3, #0
 8005996:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005998:	211f      	movs	r1, #31
 800599a:	187b      	adds	r3, r7, r1
 800599c:	2200      	movs	r2, #0
 800599e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d103      	bne.n	80059ae <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 80059a6:	187b      	adds	r3, r7, r1
 80059a8:	2201      	movs	r2, #1
 80059aa:	701a      	strb	r2, [r3, #0]
 80059ac:	e13d      	b.n	8005c2a <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	0fdb      	lsrs	r3, r3, #31
 80059b6:	07da      	lsls	r2, r3, #31
 80059b8:	2380      	movs	r3, #128	; 0x80
 80059ba:	061b      	lsls	r3, r3, #24
 80059bc:	429a      	cmp	r2, r3
 80059be:	d104      	bne.n	80059ca <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 80059c0:	231f      	movs	r3, #31
 80059c2:	18fb      	adds	r3, r7, r3
 80059c4:	2201      	movs	r2, #1
 80059c6:	701a      	strb	r2, [r3, #0]
 80059c8:	e12f      	b.n	8005c2a <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2229      	movs	r2, #41	; 0x29
 80059ce:	5c9b      	ldrb	r3, [r3, r2]
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10a      	bne.n	80059ec <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2228      	movs	r2, #40	; 0x28
 80059da:	2100      	movs	r1, #0
 80059dc:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	0018      	movs	r0, r3
 80059e8:	f7ff fa10 	bl	8004e0c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2230      	movs	r2, #48	; 0x30
 80059f4:	4013      	ands	r3, r2
 80059f6:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a85      	ldr	r2, [pc, #532]	; (8005c38 <HAL_COMP_Init+0x2ac>)
 8005a24:	4013      	ands	r3, r2
 8005a26:	0019      	movs	r1, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	2380      	movs	r3, #128	; 0x80
 8005a38:	011b      	lsls	r3, r3, #4
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d10d      	bne.n	8005a5a <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8005a3e:	4b7f      	ldr	r3, [pc, #508]	; (8005c3c <HAL_COMP_Init+0x2b0>)
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	4b7e      	ldr	r3, [pc, #504]	; (8005c3c <HAL_COMP_Init+0x2b0>)
 8005a44:	497e      	ldr	r1, [pc, #504]	; (8005c40 <HAL_COMP_Init+0x2b4>)
 8005a46:	400a      	ands	r2, r1
 8005a48:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8005a4a:	4b7c      	ldr	r3, [pc, #496]	; (8005c3c <HAL_COMP_Init+0x2b0>)
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	4b7b      	ldr	r3, [pc, #492]	; (8005c3c <HAL_COMP_Init+0x2b0>)
 8005a50:	2180      	movs	r1, #128	; 0x80
 8005a52:	0109      	lsls	r1, r1, #4
 8005a54:	430a      	orrs	r2, r1
 8005a56:	605a      	str	r2, [r3, #4]
 8005a58:	e01f      	b.n	8005a9a <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	23c0      	movs	r3, #192	; 0xc0
 8005a60:	015b      	lsls	r3, r3, #5
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d10d      	bne.n	8005a82 <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8005a66:	4b75      	ldr	r3, [pc, #468]	; (8005c3c <HAL_COMP_Init+0x2b0>)
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	4b74      	ldr	r3, [pc, #464]	; (8005c3c <HAL_COMP_Init+0x2b0>)
 8005a6c:	2180      	movs	r1, #128	; 0x80
 8005a6e:	0109      	lsls	r1, r1, #4
 8005a70:	430a      	orrs	r2, r1
 8005a72:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8005a74:	4b71      	ldr	r3, [pc, #452]	; (8005c3c <HAL_COMP_Init+0x2b0>)
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	4b70      	ldr	r3, [pc, #448]	; (8005c3c <HAL_COMP_Init+0x2b0>)
 8005a7a:	4971      	ldr	r1, [pc, #452]	; (8005c40 <HAL_COMP_Init+0x2b4>)
 8005a7c:	400a      	ands	r2, r1
 8005a7e:	605a      	str	r2, [r3, #4]
 8005a80:	e00b      	b.n	8005a9a <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8005a82:	4b6e      	ldr	r3, [pc, #440]	; (8005c3c <HAL_COMP_Init+0x2b0>)
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	4b6d      	ldr	r3, [pc, #436]	; (8005c3c <HAL_COMP_Init+0x2b0>)
 8005a88:	496d      	ldr	r1, [pc, #436]	; (8005c40 <HAL_COMP_Init+0x2b4>)
 8005a8a:	400a      	ands	r2, r1
 8005a8c:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8005a8e:	4b6b      	ldr	r3, [pc, #428]	; (8005c3c <HAL_COMP_Init+0x2b0>)
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	4b6a      	ldr	r3, [pc, #424]	; (8005c3c <HAL_COMP_Init+0x2b0>)
 8005a94:	496a      	ldr	r1, [pc, #424]	; (8005c40 <HAL_COMP_Init+0x2b4>)
 8005a96:	400a      	ands	r2, r1
 8005a98:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	22a0      	movs	r2, #160	; 0xa0
 8005aa0:	01d2      	lsls	r2, r2, #7
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d017      	beq.n	8005ad6 <HAL_COMP_Init+0x14a>
 8005aa6:	22a0      	movs	r2, #160	; 0xa0
 8005aa8:	01d2      	lsls	r2, r2, #7
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d830      	bhi.n	8005b10 <HAL_COMP_Init+0x184>
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d01f      	beq.n	8005af2 <HAL_COMP_Init+0x166>
 8005ab2:	2280      	movs	r2, #128	; 0x80
 8005ab4:	01d2      	lsls	r2, r2, #7
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d12a      	bne.n	8005b10 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8005aba:	4b60      	ldr	r3, [pc, #384]	; (8005c3c <HAL_COMP_Init+0x2b0>)
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	4b5f      	ldr	r3, [pc, #380]	; (8005c3c <HAL_COMP_Init+0x2b0>)
 8005ac0:	2180      	movs	r1, #128	; 0x80
 8005ac2:	01c9      	lsls	r1, r1, #7
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8005ac8:	4b5c      	ldr	r3, [pc, #368]	; (8005c3c <HAL_COMP_Init+0x2b0>)
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	4b5b      	ldr	r3, [pc, #364]	; (8005c3c <HAL_COMP_Init+0x2b0>)
 8005ace:	495d      	ldr	r1, [pc, #372]	; (8005c44 <HAL_COMP_Init+0x2b8>)
 8005ad0:	400a      	ands	r2, r1
 8005ad2:	605a      	str	r2, [r3, #4]
        break;
 8005ad4:	e029      	b.n	8005b2a <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8005ad6:	4b59      	ldr	r3, [pc, #356]	; (8005c3c <HAL_COMP_Init+0x2b0>)
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	4b58      	ldr	r3, [pc, #352]	; (8005c3c <HAL_COMP_Init+0x2b0>)
 8005adc:	4959      	ldr	r1, [pc, #356]	; (8005c44 <HAL_COMP_Init+0x2b8>)
 8005ade:	400a      	ands	r2, r1
 8005ae0:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8005ae2:	4b56      	ldr	r3, [pc, #344]	; (8005c3c <HAL_COMP_Init+0x2b0>)
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	4b55      	ldr	r3, [pc, #340]	; (8005c3c <HAL_COMP_Init+0x2b0>)
 8005ae8:	2180      	movs	r1, #128	; 0x80
 8005aea:	01c9      	lsls	r1, r1, #7
 8005aec:	430a      	orrs	r2, r1
 8005aee:	605a      	str	r2, [r3, #4]
        break;
 8005af0:	e01b      	b.n	8005b2a <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8005af2:	4b52      	ldr	r3, [pc, #328]	; (8005c3c <HAL_COMP_Init+0x2b0>)
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	4b51      	ldr	r3, [pc, #324]	; (8005c3c <HAL_COMP_Init+0x2b0>)
 8005af8:	2180      	movs	r1, #128	; 0x80
 8005afa:	01c9      	lsls	r1, r1, #7
 8005afc:	430a      	orrs	r2, r1
 8005afe:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8005b00:	4b4e      	ldr	r3, [pc, #312]	; (8005c3c <HAL_COMP_Init+0x2b0>)
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	4b4d      	ldr	r3, [pc, #308]	; (8005c3c <HAL_COMP_Init+0x2b0>)
 8005b06:	2180      	movs	r1, #128	; 0x80
 8005b08:	01c9      	lsls	r1, r1, #7
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	605a      	str	r2, [r3, #4]
        break;
 8005b0e:	e00c      	b.n	8005b2a <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8005b10:	4b4a      	ldr	r3, [pc, #296]	; (8005c3c <HAL_COMP_Init+0x2b0>)
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	4b49      	ldr	r3, [pc, #292]	; (8005c3c <HAL_COMP_Init+0x2b0>)
 8005b16:	494b      	ldr	r1, [pc, #300]	; (8005c44 <HAL_COMP_Init+0x2b8>)
 8005b18:	400a      	ands	r2, r1
 8005b1a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8005b1c:	4b47      	ldr	r3, [pc, #284]	; (8005c3c <HAL_COMP_Init+0x2b0>)
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	4b46      	ldr	r3, [pc, #280]	; (8005c3c <HAL_COMP_Init+0x2b0>)
 8005b22:	4948      	ldr	r1, [pc, #288]	; (8005c44 <HAL_COMP_Init+0x2b8>)
 8005b24:	400a      	ands	r2, r1
 8005b26:	605a      	str	r2, [r3, #4]
        break;
 8005b28:	46c0      	nop			; (mov r8, r8)
    }
#endif

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2230      	movs	r2, #48	; 0x30
 8005b32:	4013      	ands	r3, r2
 8005b34:	d016      	beq.n	8005b64 <HAL_COMP_Init+0x1d8>
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d113      	bne.n	8005b64 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005b3c:	4b42      	ldr	r3, [pc, #264]	; (8005c48 <HAL_COMP_Init+0x2bc>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4942      	ldr	r1, [pc, #264]	; (8005c4c <HAL_COMP_Init+0x2c0>)
 8005b42:	0018      	movs	r0, r3
 8005b44:	f7fa fade 	bl	8000104 <__udivsi3>
 8005b48:	0003      	movs	r3, r0
 8005b4a:	001a      	movs	r2, r3
 8005b4c:	0013      	movs	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	189b      	adds	r3, r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8005b56:	e002      	b.n	8005b5e <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1f9      	bne.n	8005b58 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a34      	ldr	r2, [pc, #208]	; (8005c3c <HAL_COMP_Init+0x2b0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d102      	bne.n	8005b74 <HAL_COMP_Init+0x1e8>
 8005b6e:	2380      	movs	r3, #128	; 0x80
 8005b70:	029b      	lsls	r3, r3, #10
 8005b72:	e001      	b.n	8005b78 <HAL_COMP_Init+0x1ec>
 8005b74:	2380      	movs	r3, #128	; 0x80
 8005b76:	02db      	lsls	r3, r3, #11
 8005b78:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	2203      	movs	r2, #3
 8005b80:	4013      	ands	r3, r2
 8005b82:	d040      	beq.n	8005c06 <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	2210      	movs	r2, #16
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	d004      	beq.n	8005b98 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	0018      	movs	r0, r3
 8005b92:	f7ff fe9b 	bl	80058cc <LL_EXTI_EnableRisingTrig_0_31>
 8005b96:	e003      	b.n	8005ba0 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	0018      	movs	r0, r3
 8005b9c:	f7ff fea6 	bl	80058ec <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	d004      	beq.n	8005bb4 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	0018      	movs	r0, r3
 8005bae:	f7ff feaf 	bl	8005910 <LL_EXTI_EnableFallingTrig_0_31>
 8005bb2:	e003      	b.n	8005bbc <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	0018      	movs	r0, r3
 8005bb8:	f7ff feba 	bl	8005930 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	0018      	movs	r0, r3
 8005bc0:	f7ff fed6 	bl	8005970 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	f7ff fec4 	bl	8005954 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd0:	2202      	movs	r2, #2
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	d004      	beq.n	8005be0 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	0018      	movs	r0, r3
 8005bda:	f7ff fe51 	bl	8005880 <LL_EXTI_EnableEvent_0_31>
 8005bde:	e003      	b.n	8005be8 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	0018      	movs	r0, r3
 8005be4:	f7ff fe5e 	bl	80058a4 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	2201      	movs	r2, #1
 8005bee:	4013      	ands	r3, r2
 8005bf0:	d004      	beq.n	8005bfc <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	0018      	movs	r0, r3
 8005bf6:	f7ff fe1d 	bl	8005834 <LL_EXTI_EnableIT_0_31>
 8005bfa:	e00c      	b.n	8005c16 <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	0018      	movs	r0, r3
 8005c00:	f7ff fe2a 	bl	8005858 <LL_EXTI_DisableIT_0_31>
 8005c04:	e007      	b.n	8005c16 <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	0018      	movs	r0, r3
 8005c0a:	f7ff fe4b 	bl	80058a4 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	0018      	movs	r0, r3
 8005c12:	f7ff fe21 	bl	8005858 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2229      	movs	r2, #41	; 0x29
 8005c1a:	5c9b      	ldrb	r3, [r3, r2]
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d103      	bne.n	8005c2a <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2229      	movs	r2, #41	; 0x29
 8005c26:	2101      	movs	r1, #1
 8005c28:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8005c2a:	231f      	movs	r3, #31
 8005c2c:	18fb      	adds	r3, r7, r3
 8005c2e:	781b      	ldrb	r3, [r3, #0]
}
 8005c30:	0018      	movs	r0, r3
 8005c32:	46bd      	mov	sp, r7
 8005c34:	b008      	add	sp, #32
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	fe00740f 	.word	0xfe00740f
 8005c3c:	40010200 	.word	0x40010200
 8005c40:	fffff7ff 	.word	0xfffff7ff
 8005c44:	ffffbfff 	.word	0xffffbfff
 8005c48:	20000038 	.word	0x20000038
 8005c4c:	00030d40 	.word	0x00030d40

08005c50 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005c5c:	210f      	movs	r1, #15
 8005c5e:	187b      	adds	r3, r7, r1
 8005c60:	2200      	movs	r2, #0
 8005c62:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d103      	bne.n	8005c72 <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 8005c6a:	187b      	adds	r3, r7, r1
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	701a      	strb	r2, [r3, #0]
 8005c70:	e034      	b.n	8005cdc <HAL_COMP_Start+0x8c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	0fdb      	lsrs	r3, r3, #31
 8005c7a:	07da      	lsls	r2, r3, #31
 8005c7c:	2380      	movs	r3, #128	; 0x80
 8005c7e:	061b      	lsls	r3, r3, #24
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d104      	bne.n	8005c8e <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 8005c84:	230f      	movs	r3, #15
 8005c86:	18fb      	adds	r3, r7, r3
 8005c88:	2201      	movs	r2, #1
 8005c8a:	701a      	strb	r2, [r3, #0]
 8005c8c:	e026      	b.n	8005cdc <HAL_COMP_Start+0x8c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2229      	movs	r2, #41	; 0x29
 8005c92:	5c9b      	ldrb	r3, [r3, r2]
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d11c      	bne.n	8005cd4 <HAL_COMP_Start+0x84>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2101      	movs	r1, #1
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2229      	movs	r2, #41	; 0x29
 8005cae:	2102      	movs	r1, #2
 8005cb0:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005cb2:	4b0e      	ldr	r3, [pc, #56]	; (8005cec <HAL_COMP_Start+0x9c>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	490e      	ldr	r1, [pc, #56]	; (8005cf0 <HAL_COMP_Start+0xa0>)
 8005cb8:	0018      	movs	r0, r3
 8005cba:	f7fa fa23 	bl	8000104 <__udivsi3>
 8005cbe:	0003      	movs	r3, r0
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005cc4:	e002      	b.n	8005ccc <HAL_COMP_Start+0x7c>
      {
        wait_loop_index--;
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1f9      	bne.n	8005cc6 <HAL_COMP_Start+0x76>
 8005cd2:	e003      	b.n	8005cdc <HAL_COMP_Start+0x8c>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005cd4:	230f      	movs	r3, #15
 8005cd6:	18fb      	adds	r3, r7, r3
 8005cd8:	2201      	movs	r2, #1
 8005cda:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8005cdc:	230f      	movs	r3, #15
 8005cde:	18fb      	adds	r3, r7, r3
 8005ce0:	781b      	ldrb	r3, [r3, #0]
}
 8005ce2:	0018      	movs	r0, r3
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	b004      	add	sp, #16
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	46c0      	nop			; (mov r8, r8)
 8005cec:	20000038 	.word	0x20000038
 8005cf0:	00030d40 	.word	0x00030d40

08005cf4 <__NVIC_EnableIRQ>:
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	0002      	movs	r2, r0
 8005cfc:	1dfb      	adds	r3, r7, #7
 8005cfe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005d00:	1dfb      	adds	r3, r7, #7
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	2b7f      	cmp	r3, #127	; 0x7f
 8005d06:	d809      	bhi.n	8005d1c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d08:	1dfb      	adds	r3, r7, #7
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	001a      	movs	r2, r3
 8005d0e:	231f      	movs	r3, #31
 8005d10:	401a      	ands	r2, r3
 8005d12:	4b04      	ldr	r3, [pc, #16]	; (8005d24 <__NVIC_EnableIRQ+0x30>)
 8005d14:	2101      	movs	r1, #1
 8005d16:	4091      	lsls	r1, r2
 8005d18:	000a      	movs	r2, r1
 8005d1a:	601a      	str	r2, [r3, #0]
}
 8005d1c:	46c0      	nop			; (mov r8, r8)
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	b002      	add	sp, #8
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	e000e100 	.word	0xe000e100

08005d28 <__NVIC_SetPriority>:
{
 8005d28:	b590      	push	{r4, r7, lr}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	0002      	movs	r2, r0
 8005d30:	6039      	str	r1, [r7, #0]
 8005d32:	1dfb      	adds	r3, r7, #7
 8005d34:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005d36:	1dfb      	adds	r3, r7, #7
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d3c:	d828      	bhi.n	8005d90 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005d3e:	4a2f      	ldr	r2, [pc, #188]	; (8005dfc <__NVIC_SetPriority+0xd4>)
 8005d40:	1dfb      	adds	r3, r7, #7
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	b25b      	sxtb	r3, r3
 8005d46:	089b      	lsrs	r3, r3, #2
 8005d48:	33c0      	adds	r3, #192	; 0xc0
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	589b      	ldr	r3, [r3, r2]
 8005d4e:	1dfa      	adds	r2, r7, #7
 8005d50:	7812      	ldrb	r2, [r2, #0]
 8005d52:	0011      	movs	r1, r2
 8005d54:	2203      	movs	r2, #3
 8005d56:	400a      	ands	r2, r1
 8005d58:	00d2      	lsls	r2, r2, #3
 8005d5a:	21ff      	movs	r1, #255	; 0xff
 8005d5c:	4091      	lsls	r1, r2
 8005d5e:	000a      	movs	r2, r1
 8005d60:	43d2      	mvns	r2, r2
 8005d62:	401a      	ands	r2, r3
 8005d64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	019b      	lsls	r3, r3, #6
 8005d6a:	22ff      	movs	r2, #255	; 0xff
 8005d6c:	401a      	ands	r2, r3
 8005d6e:	1dfb      	adds	r3, r7, #7
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	0018      	movs	r0, r3
 8005d74:	2303      	movs	r3, #3
 8005d76:	4003      	ands	r3, r0
 8005d78:	00db      	lsls	r3, r3, #3
 8005d7a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005d7c:	481f      	ldr	r0, [pc, #124]	; (8005dfc <__NVIC_SetPriority+0xd4>)
 8005d7e:	1dfb      	adds	r3, r7, #7
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	b25b      	sxtb	r3, r3
 8005d84:	089b      	lsrs	r3, r3, #2
 8005d86:	430a      	orrs	r2, r1
 8005d88:	33c0      	adds	r3, #192	; 0xc0
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	501a      	str	r2, [r3, r0]
}
 8005d8e:	e031      	b.n	8005df4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005d90:	4a1b      	ldr	r2, [pc, #108]	; (8005e00 <__NVIC_SetPriority+0xd8>)
 8005d92:	1dfb      	adds	r3, r7, #7
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	0019      	movs	r1, r3
 8005d98:	230f      	movs	r3, #15
 8005d9a:	400b      	ands	r3, r1
 8005d9c:	3b08      	subs	r3, #8
 8005d9e:	089b      	lsrs	r3, r3, #2
 8005da0:	3306      	adds	r3, #6
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	18d3      	adds	r3, r2, r3
 8005da6:	3304      	adds	r3, #4
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	1dfa      	adds	r2, r7, #7
 8005dac:	7812      	ldrb	r2, [r2, #0]
 8005dae:	0011      	movs	r1, r2
 8005db0:	2203      	movs	r2, #3
 8005db2:	400a      	ands	r2, r1
 8005db4:	00d2      	lsls	r2, r2, #3
 8005db6:	21ff      	movs	r1, #255	; 0xff
 8005db8:	4091      	lsls	r1, r2
 8005dba:	000a      	movs	r2, r1
 8005dbc:	43d2      	mvns	r2, r2
 8005dbe:	401a      	ands	r2, r3
 8005dc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	019b      	lsls	r3, r3, #6
 8005dc6:	22ff      	movs	r2, #255	; 0xff
 8005dc8:	401a      	ands	r2, r3
 8005dca:	1dfb      	adds	r3, r7, #7
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	0018      	movs	r0, r3
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	4003      	ands	r3, r0
 8005dd4:	00db      	lsls	r3, r3, #3
 8005dd6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005dd8:	4809      	ldr	r0, [pc, #36]	; (8005e00 <__NVIC_SetPriority+0xd8>)
 8005dda:	1dfb      	adds	r3, r7, #7
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	001c      	movs	r4, r3
 8005de0:	230f      	movs	r3, #15
 8005de2:	4023      	ands	r3, r4
 8005de4:	3b08      	subs	r3, #8
 8005de6:	089b      	lsrs	r3, r3, #2
 8005de8:	430a      	orrs	r2, r1
 8005dea:	3306      	adds	r3, #6
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	18c3      	adds	r3, r0, r3
 8005df0:	3304      	adds	r3, #4
 8005df2:	601a      	str	r2, [r3, #0]
}
 8005df4:	46c0      	nop			; (mov r8, r8)
 8005df6:	46bd      	mov	sp, r7
 8005df8:	b003      	add	sp, #12
 8005dfa:	bd90      	pop	{r4, r7, pc}
 8005dfc:	e000e100 	.word	0xe000e100
 8005e00:	e000ed00 	.word	0xe000ed00

08005e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	1e5a      	subs	r2, r3, #1
 8005e10:	2380      	movs	r3, #128	; 0x80
 8005e12:	045b      	lsls	r3, r3, #17
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d301      	bcc.n	8005e1c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e010      	b.n	8005e3e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e1c:	4b0a      	ldr	r3, [pc, #40]	; (8005e48 <SysTick_Config+0x44>)
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	3a01      	subs	r2, #1
 8005e22:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e24:	2301      	movs	r3, #1
 8005e26:	425b      	negs	r3, r3
 8005e28:	2103      	movs	r1, #3
 8005e2a:	0018      	movs	r0, r3
 8005e2c:	f7ff ff7c 	bl	8005d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e30:	4b05      	ldr	r3, [pc, #20]	; (8005e48 <SysTick_Config+0x44>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e36:	4b04      	ldr	r3, [pc, #16]	; (8005e48 <SysTick_Config+0x44>)
 8005e38:	2207      	movs	r2, #7
 8005e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	0018      	movs	r0, r3
 8005e40:	46bd      	mov	sp, r7
 8005e42:	b002      	add	sp, #8
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	46c0      	nop			; (mov r8, r8)
 8005e48:	e000e010 	.word	0xe000e010

08005e4c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60b9      	str	r1, [r7, #8]
 8005e54:	607a      	str	r2, [r7, #4]
 8005e56:	210f      	movs	r1, #15
 8005e58:	187b      	adds	r3, r7, r1
 8005e5a:	1c02      	adds	r2, r0, #0
 8005e5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	187b      	adds	r3, r7, r1
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	b25b      	sxtb	r3, r3
 8005e66:	0011      	movs	r1, r2
 8005e68:	0018      	movs	r0, r3
 8005e6a:	f7ff ff5d 	bl	8005d28 <__NVIC_SetPriority>
}
 8005e6e:	46c0      	nop			; (mov r8, r8)
 8005e70:	46bd      	mov	sp, r7
 8005e72:	b004      	add	sp, #16
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b082      	sub	sp, #8
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	0002      	movs	r2, r0
 8005e7e:	1dfb      	adds	r3, r7, #7
 8005e80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e82:	1dfb      	adds	r3, r7, #7
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	b25b      	sxtb	r3, r3
 8005e88:	0018      	movs	r0, r3
 8005e8a:	f7ff ff33 	bl	8005cf4 <__NVIC_EnableIRQ>
}
 8005e8e:	46c0      	nop			; (mov r8, r8)
 8005e90:	46bd      	mov	sp, r7
 8005e92:	b002      	add	sp, #8
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b082      	sub	sp, #8
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	0018      	movs	r0, r3
 8005ea2:	f7ff ffaf 	bl	8005e04 <SysTick_Config>
 8005ea6:	0003      	movs	r3, r0
}
 8005ea8:	0018      	movs	r0, r3
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	b002      	add	sp, #8
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e077      	b.n	8005fb2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a3d      	ldr	r2, [pc, #244]	; (8005fbc <HAL_DMA_Init+0x10c>)
 8005ec8:	4694      	mov	ip, r2
 8005eca:	4463      	add	r3, ip
 8005ecc:	2114      	movs	r1, #20
 8005ece:	0018      	movs	r0, r3
 8005ed0:	f7fa f918 	bl	8000104 <__udivsi3>
 8005ed4:	0003      	movs	r3, r0
 8005ed6:	009a      	lsls	r2, r3, #2
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2225      	movs	r2, #37	; 0x25
 8005ee0:	2102      	movs	r1, #2
 8005ee2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4934      	ldr	r1, [pc, #208]	; (8005fc0 <HAL_DMA_Init+0x110>)
 8005ef0:	400a      	ands	r2, r1
 8005ef2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6819      	ldr	r1, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689a      	ldr	r2, [r3, #8]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	431a      	orrs	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	431a      	orrs	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	431a      	orrs	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	431a      	orrs	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	431a      	orrs	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	f000 fa37 	bl	80063a0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	689a      	ldr	r2, [r3, #8]
 8005f36:	2380      	movs	r3, #128	; 0x80
 8005f38:	01db      	lsls	r3, r3, #7
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d102      	bne.n	8005f44 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f4c:	213f      	movs	r1, #63	; 0x3f
 8005f4e:	400a      	ands	r2, r1
 8005f50:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005f5a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d011      	beq.n	8005f88 <HAL_DMA_Init+0xd8>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	2b04      	cmp	r3, #4
 8005f6a:	d80d      	bhi.n	8005f88 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	0018      	movs	r0, r3
 8005f70:	f000 fa42 	bl	80063f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f78:	2200      	movs	r2, #0
 8005f7a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005f84:	605a      	str	r2, [r3, #4]
 8005f86:	e008      	b.n	8005f9a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2225      	movs	r2, #37	; 0x25
 8005fa4:	2101      	movs	r1, #1
 8005fa6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2224      	movs	r2, #36	; 0x24
 8005fac:	2100      	movs	r1, #0
 8005fae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	0018      	movs	r0, r3
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	b002      	add	sp, #8
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	46c0      	nop			; (mov r8, r8)
 8005fbc:	bffdfff8 	.word	0xbffdfff8
 8005fc0:	ffff800f 	.word	0xffff800f

08005fc4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fd2:	2317      	movs	r3, #23
 8005fd4:	18fb      	adds	r3, r7, r3
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2224      	movs	r2, #36	; 0x24
 8005fde:	5c9b      	ldrb	r3, [r3, r2]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d101      	bne.n	8005fe8 <HAL_DMA_Start_IT+0x24>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e06f      	b.n	80060c8 <HAL_DMA_Start_IT+0x104>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2224      	movs	r2, #36	; 0x24
 8005fec:	2101      	movs	r1, #1
 8005fee:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2225      	movs	r2, #37	; 0x25
 8005ff4:	5c9b      	ldrb	r3, [r3, r2]
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d157      	bne.n	80060ac <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2225      	movs	r2, #37	; 0x25
 8006000:	2102      	movs	r1, #2
 8006002:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2101      	movs	r1, #1
 8006016:	438a      	bics	r2, r1
 8006018:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	68b9      	ldr	r1, [r7, #8]
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 f97d 	bl	8006320 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602a:	2b00      	cmp	r3, #0
 800602c:	d008      	beq.n	8006040 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	210e      	movs	r1, #14
 800603a:	430a      	orrs	r2, r1
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	e00f      	b.n	8006060 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2104      	movs	r1, #4
 800604c:	438a      	bics	r2, r1
 800604e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	210a      	movs	r1, #10
 800605c:	430a      	orrs	r2, r1
 800605e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	2380      	movs	r3, #128	; 0x80
 8006068:	025b      	lsls	r3, r3, #9
 800606a:	4013      	ands	r3, r2
 800606c:	d008      	beq.n	8006080 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006078:	2180      	movs	r1, #128	; 0x80
 800607a:	0049      	lsls	r1, r1, #1
 800607c:	430a      	orrs	r2, r1
 800607e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006084:	2b00      	cmp	r3, #0
 8006086:	d008      	beq.n	800609a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006092:	2180      	movs	r1, #128	; 0x80
 8006094:	0049      	lsls	r1, r1, #1
 8006096:	430a      	orrs	r2, r1
 8006098:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2101      	movs	r1, #1
 80060a6:	430a      	orrs	r2, r1
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	e00a      	b.n	80060c2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2280      	movs	r2, #128	; 0x80
 80060b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2224      	movs	r2, #36	; 0x24
 80060b6:	2100      	movs	r1, #0
 80060b8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80060ba:	2317      	movs	r3, #23
 80060bc:	18fb      	adds	r3, r7, r3
 80060be:	2201      	movs	r2, #1
 80060c0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80060c2:	2317      	movs	r3, #23
 80060c4:	18fb      	adds	r3, r7, r3
 80060c6:	781b      	ldrb	r3, [r3, #0]
}
 80060c8:	0018      	movs	r0, r3
 80060ca:	46bd      	mov	sp, r7
 80060cc:	b006      	add	sp, #24
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060d8:	210f      	movs	r1, #15
 80060da:	187b      	adds	r3, r7, r1
 80060dc:	2200      	movs	r2, #0
 80060de:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2225      	movs	r2, #37	; 0x25
 80060e4:	5c9b      	ldrb	r3, [r3, r2]
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d006      	beq.n	80060fa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2204      	movs	r2, #4
 80060f0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80060f2:	187b      	adds	r3, r7, r1
 80060f4:	2201      	movs	r2, #1
 80060f6:	701a      	strb	r2, [r3, #0]
 80060f8:	e049      	b.n	800618e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	210e      	movs	r1, #14
 8006106:	438a      	bics	r2, r1
 8006108:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2101      	movs	r1, #1
 8006116:	438a      	bics	r2, r1
 8006118:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006124:	491d      	ldr	r1, [pc, #116]	; (800619c <HAL_DMA_Abort_IT+0xcc>)
 8006126:	400a      	ands	r2, r1
 8006128:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800612a:	4b1d      	ldr	r3, [pc, #116]	; (80061a0 <HAL_DMA_Abort_IT+0xd0>)
 800612c:	6859      	ldr	r1, [r3, #4]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	221c      	movs	r2, #28
 8006134:	4013      	ands	r3, r2
 8006136:	2201      	movs	r2, #1
 8006138:	409a      	lsls	r2, r3
 800613a:	4b19      	ldr	r3, [pc, #100]	; (80061a0 <HAL_DMA_Abort_IT+0xd0>)
 800613c:	430a      	orrs	r2, r1
 800613e:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006148:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00c      	beq.n	800616c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800615c:	490f      	ldr	r1, [pc, #60]	; (800619c <HAL_DMA_Abort_IT+0xcc>)
 800615e:	400a      	ands	r2, r1
 8006160:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800616a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2225      	movs	r2, #37	; 0x25
 8006170:	2101      	movs	r1, #1
 8006172:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2224      	movs	r2, #36	; 0x24
 8006178:	2100      	movs	r1, #0
 800617a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006180:	2b00      	cmp	r3, #0
 8006182:	d004      	beq.n	800618e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	0010      	movs	r0, r2
 800618c:	4798      	blx	r3
    }
  }
  return status;
 800618e:	230f      	movs	r3, #15
 8006190:	18fb      	adds	r3, r7, r3
 8006192:	781b      	ldrb	r3, [r3, #0]
}
 8006194:	0018      	movs	r0, r3
 8006196:	46bd      	mov	sp, r7
 8006198:	b004      	add	sp, #16
 800619a:	bd80      	pop	{r7, pc}
 800619c:	fffffeff 	.word	0xfffffeff
 80061a0:	40020000 	.word	0x40020000

080061a4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80061ac:	4b55      	ldr	r3, [pc, #340]	; (8006304 <HAL_DMA_IRQHandler+0x160>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	221c      	movs	r2, #28
 80061c0:	4013      	ands	r3, r2
 80061c2:	2204      	movs	r2, #4
 80061c4:	409a      	lsls	r2, r3
 80061c6:	0013      	movs	r3, r2
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	4013      	ands	r3, r2
 80061cc:	d027      	beq.n	800621e <HAL_DMA_IRQHandler+0x7a>
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	2204      	movs	r2, #4
 80061d2:	4013      	ands	r3, r2
 80061d4:	d023      	beq.n	800621e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2220      	movs	r2, #32
 80061de:	4013      	ands	r3, r2
 80061e0:	d107      	bne.n	80061f2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2104      	movs	r1, #4
 80061ee:	438a      	bics	r2, r1
 80061f0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80061f2:	4b44      	ldr	r3, [pc, #272]	; (8006304 <HAL_DMA_IRQHandler+0x160>)
 80061f4:	6859      	ldr	r1, [r3, #4]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	221c      	movs	r2, #28
 80061fc:	4013      	ands	r3, r2
 80061fe:	2204      	movs	r2, #4
 8006200:	409a      	lsls	r2, r3
 8006202:	4b40      	ldr	r3, [pc, #256]	; (8006304 <HAL_DMA_IRQHandler+0x160>)
 8006204:	430a      	orrs	r2, r1
 8006206:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620c:	2b00      	cmp	r3, #0
 800620e:	d100      	bne.n	8006212 <HAL_DMA_IRQHandler+0x6e>
 8006210:	e073      	b.n	80062fa <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	0010      	movs	r0, r2
 800621a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800621c:	e06d      	b.n	80062fa <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006222:	221c      	movs	r2, #28
 8006224:	4013      	ands	r3, r2
 8006226:	2202      	movs	r2, #2
 8006228:	409a      	lsls	r2, r3
 800622a:	0013      	movs	r3, r2
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	4013      	ands	r3, r2
 8006230:	d02e      	beq.n	8006290 <HAL_DMA_IRQHandler+0xec>
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2202      	movs	r2, #2
 8006236:	4013      	ands	r3, r2
 8006238:	d02a      	beq.n	8006290 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2220      	movs	r2, #32
 8006242:	4013      	ands	r3, r2
 8006244:	d10b      	bne.n	800625e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	210a      	movs	r1, #10
 8006252:	438a      	bics	r2, r1
 8006254:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2225      	movs	r2, #37	; 0x25
 800625a:	2101      	movs	r1, #1
 800625c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800625e:	4b29      	ldr	r3, [pc, #164]	; (8006304 <HAL_DMA_IRQHandler+0x160>)
 8006260:	6859      	ldr	r1, [r3, #4]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006266:	221c      	movs	r2, #28
 8006268:	4013      	ands	r3, r2
 800626a:	2202      	movs	r2, #2
 800626c:	409a      	lsls	r2, r3
 800626e:	4b25      	ldr	r3, [pc, #148]	; (8006304 <HAL_DMA_IRQHandler+0x160>)
 8006270:	430a      	orrs	r2, r1
 8006272:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2224      	movs	r2, #36	; 0x24
 8006278:	2100      	movs	r1, #0
 800627a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006280:	2b00      	cmp	r3, #0
 8006282:	d03a      	beq.n	80062fa <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	0010      	movs	r0, r2
 800628c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800628e:	e034      	b.n	80062fa <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006294:	221c      	movs	r2, #28
 8006296:	4013      	ands	r3, r2
 8006298:	2208      	movs	r2, #8
 800629a:	409a      	lsls	r2, r3
 800629c:	0013      	movs	r3, r2
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	4013      	ands	r3, r2
 80062a2:	d02b      	beq.n	80062fc <HAL_DMA_IRQHandler+0x158>
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	2208      	movs	r2, #8
 80062a8:	4013      	ands	r3, r2
 80062aa:	d027      	beq.n	80062fc <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	210e      	movs	r1, #14
 80062b8:	438a      	bics	r2, r1
 80062ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80062bc:	4b11      	ldr	r3, [pc, #68]	; (8006304 <HAL_DMA_IRQHandler+0x160>)
 80062be:	6859      	ldr	r1, [r3, #4]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c4:	221c      	movs	r2, #28
 80062c6:	4013      	ands	r3, r2
 80062c8:	2201      	movs	r2, #1
 80062ca:	409a      	lsls	r2, r3
 80062cc:	4b0d      	ldr	r3, [pc, #52]	; (8006304 <HAL_DMA_IRQHandler+0x160>)
 80062ce:	430a      	orrs	r2, r1
 80062d0:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2225      	movs	r2, #37	; 0x25
 80062dc:	2101      	movs	r1, #1
 80062de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2224      	movs	r2, #36	; 0x24
 80062e4:	2100      	movs	r1, #0
 80062e6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d005      	beq.n	80062fc <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	0010      	movs	r0, r2
 80062f8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80062fa:	46c0      	nop			; (mov r8, r8)
 80062fc:	46c0      	nop			; (mov r8, r8)
}
 80062fe:	46bd      	mov	sp, r7
 8006300:	b004      	add	sp, #16
 8006302:	bd80      	pop	{r7, pc}
 8006304:	40020000 	.word	0x40020000

08006308 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2225      	movs	r2, #37	; 0x25
 8006314:	5c9b      	ldrb	r3, [r3, r2]
 8006316:	b2db      	uxtb	r3, r3
}
 8006318:	0018      	movs	r0, r3
 800631a:	46bd      	mov	sp, r7
 800631c:	b002      	add	sp, #8
 800631e:	bd80      	pop	{r7, pc}

08006320 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
 800632c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006336:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800633c:	2b00      	cmp	r3, #0
 800633e:	d004      	beq.n	800634a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006348:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800634a:	4b14      	ldr	r3, [pc, #80]	; (800639c <DMA_SetConfig+0x7c>)
 800634c:	6859      	ldr	r1, [r3, #4]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006352:	221c      	movs	r2, #28
 8006354:	4013      	ands	r3, r2
 8006356:	2201      	movs	r2, #1
 8006358:	409a      	lsls	r2, r3
 800635a:	4b10      	ldr	r3, [pc, #64]	; (800639c <DMA_SetConfig+0x7c>)
 800635c:	430a      	orrs	r2, r1
 800635e:	605a      	str	r2, [r3, #4]
#endif

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	2b10      	cmp	r3, #16
 800636e:	d108      	bne.n	8006382 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006380:	e007      	b.n	8006392 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	60da      	str	r2, [r3, #12]
}
 8006392:	46c0      	nop			; (mov r8, r8)
 8006394:	46bd      	mov	sp, r7
 8006396:	b004      	add	sp, #16
 8006398:	bd80      	pop	{r7, pc}
 800639a:	46c0      	nop			; (mov r8, r8)
 800639c:	40020000 	.word	0x40020000

080063a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ac:	089b      	lsrs	r3, r3, #2
 80063ae:	4a10      	ldr	r2, [pc, #64]	; (80063f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80063b0:	4694      	mov	ip, r2
 80063b2:	4463      	add	r3, ip
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	001a      	movs	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	001a      	movs	r2, r3
 80063c2:	23ff      	movs	r3, #255	; 0xff
 80063c4:	4013      	ands	r3, r2
 80063c6:	3b08      	subs	r3, #8
 80063c8:	2114      	movs	r1, #20
 80063ca:	0018      	movs	r0, r3
 80063cc:	f7f9 fe9a 	bl	8000104 <__udivsi3>
 80063d0:	0003      	movs	r3, r0
 80063d2:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a07      	ldr	r2, [pc, #28]	; (80063f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80063d8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	221f      	movs	r2, #31
 80063de:	4013      	ands	r3, r2
 80063e0:	2201      	movs	r2, #1
 80063e2:	409a      	lsls	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80063e8:	46c0      	nop			; (mov r8, r8)
 80063ea:	46bd      	mov	sp, r7
 80063ec:	b004      	add	sp, #16
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	10008200 	.word	0x10008200
 80063f4:	40020880 	.word	0x40020880

080063f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	223f      	movs	r2, #63	; 0x3f
 8006406:	4013      	ands	r3, r2
 8006408:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	4a0a      	ldr	r2, [pc, #40]	; (8006438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800640e:	4694      	mov	ip, r2
 8006410:	4463      	add	r3, ip
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	001a      	movs	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a07      	ldr	r2, [pc, #28]	; (800643c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800641e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	3b01      	subs	r3, #1
 8006424:	2203      	movs	r2, #3
 8006426:	4013      	ands	r3, r2
 8006428:	2201      	movs	r2, #1
 800642a:	409a      	lsls	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8006430:	46c0      	nop			; (mov r8, r8)
 8006432:	46bd      	mov	sp, r7
 8006434:	b004      	add	sp, #16
 8006436:	bd80      	pop	{r7, pc}
 8006438:	1000823f 	.word	0x1000823f
 800643c:	40020940 	.word	0x40020940

08006440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800644a:	2300      	movs	r3, #0
 800644c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800644e:	e147      	b.n	80066e0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2101      	movs	r1, #1
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	4091      	lsls	r1, r2
 800645a:	000a      	movs	r2, r1
 800645c:	4013      	ands	r3, r2
 800645e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d100      	bne.n	8006468 <HAL_GPIO_Init+0x28>
 8006466:	e138      	b.n	80066da <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d00b      	beq.n	8006488 <HAL_GPIO_Init+0x48>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	2b02      	cmp	r3, #2
 8006476:	d007      	beq.n	8006488 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800647c:	2b11      	cmp	r3, #17
 800647e:	d003      	beq.n	8006488 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	2b12      	cmp	r3, #18
 8006486:	d130      	bne.n	80064ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	2203      	movs	r2, #3
 8006494:	409a      	lsls	r2, r3
 8006496:	0013      	movs	r3, r2
 8006498:	43da      	mvns	r2, r3
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	4013      	ands	r3, r2
 800649e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	68da      	ldr	r2, [r3, #12]
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	005b      	lsls	r3, r3, #1
 80064a8:	409a      	lsls	r2, r3
 80064aa:	0013      	movs	r3, r2
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80064be:	2201      	movs	r2, #1
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	409a      	lsls	r2, r3
 80064c4:	0013      	movs	r3, r2
 80064c6:	43da      	mvns	r2, r3
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	4013      	ands	r3, r2
 80064cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	091b      	lsrs	r3, r3, #4
 80064d4:	2201      	movs	r2, #1
 80064d6:	401a      	ands	r2, r3
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	409a      	lsls	r2, r3
 80064dc:	0013      	movs	r3, r2
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	2203      	movs	r2, #3
 80064f6:	409a      	lsls	r2, r3
 80064f8:	0013      	movs	r3, r2
 80064fa:	43da      	mvns	r2, r3
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	4013      	ands	r3, r2
 8006500:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	689a      	ldr	r2, [r3, #8]
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	409a      	lsls	r2, r3
 800650c:	0013      	movs	r3, r2
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	4313      	orrs	r3, r2
 8006512:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	2b02      	cmp	r3, #2
 8006520:	d003      	beq.n	800652a <HAL_GPIO_Init+0xea>
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	2b12      	cmp	r3, #18
 8006528:	d123      	bne.n	8006572 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	08da      	lsrs	r2, r3, #3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	3208      	adds	r2, #8
 8006532:	0092      	lsls	r2, r2, #2
 8006534:	58d3      	ldr	r3, [r2, r3]
 8006536:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	2207      	movs	r2, #7
 800653c:	4013      	ands	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	220f      	movs	r2, #15
 8006542:	409a      	lsls	r2, r3
 8006544:	0013      	movs	r3, r2
 8006546:	43da      	mvns	r2, r3
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	4013      	ands	r3, r2
 800654c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	691a      	ldr	r2, [r3, #16]
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2107      	movs	r1, #7
 8006556:	400b      	ands	r3, r1
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	409a      	lsls	r2, r3
 800655c:	0013      	movs	r3, r2
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	4313      	orrs	r3, r2
 8006562:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	08da      	lsrs	r2, r3, #3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	3208      	adds	r2, #8
 800656c:	0092      	lsls	r2, r2, #2
 800656e:	6939      	ldr	r1, [r7, #16]
 8006570:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	005b      	lsls	r3, r3, #1
 800657c:	2203      	movs	r2, #3
 800657e:	409a      	lsls	r2, r3
 8006580:	0013      	movs	r3, r2
 8006582:	43da      	mvns	r2, r3
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	4013      	ands	r3, r2
 8006588:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	2203      	movs	r2, #3
 8006590:	401a      	ands	r2, r3
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	005b      	lsls	r3, r3, #1
 8006596:	409a      	lsls	r2, r3
 8006598:	0013      	movs	r3, r2
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	4313      	orrs	r3, r2
 800659e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	685a      	ldr	r2, [r3, #4]
 80065aa:	2380      	movs	r3, #128	; 0x80
 80065ac:	055b      	lsls	r3, r3, #21
 80065ae:	4013      	ands	r3, r2
 80065b0:	d100      	bne.n	80065b4 <HAL_GPIO_Init+0x174>
 80065b2:	e092      	b.n	80066da <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80065b4:	4a50      	ldr	r2, [pc, #320]	; (80066f8 <HAL_GPIO_Init+0x2b8>)
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	089b      	lsrs	r3, r3, #2
 80065ba:	3318      	adds	r3, #24
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	589b      	ldr	r3, [r3, r2]
 80065c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2203      	movs	r2, #3
 80065c6:	4013      	ands	r3, r2
 80065c8:	00db      	lsls	r3, r3, #3
 80065ca:	220f      	movs	r2, #15
 80065cc:	409a      	lsls	r2, r3
 80065ce:	0013      	movs	r3, r2
 80065d0:	43da      	mvns	r2, r3
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	4013      	ands	r3, r2
 80065d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	23a0      	movs	r3, #160	; 0xa0
 80065dc:	05db      	lsls	r3, r3, #23
 80065de:	429a      	cmp	r2, r3
 80065e0:	d013      	beq.n	800660a <HAL_GPIO_Init+0x1ca>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a45      	ldr	r2, [pc, #276]	; (80066fc <HAL_GPIO_Init+0x2bc>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d00d      	beq.n	8006606 <HAL_GPIO_Init+0x1c6>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a44      	ldr	r2, [pc, #272]	; (8006700 <HAL_GPIO_Init+0x2c0>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d007      	beq.n	8006602 <HAL_GPIO_Init+0x1c2>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a43      	ldr	r2, [pc, #268]	; (8006704 <HAL_GPIO_Init+0x2c4>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d101      	bne.n	80065fe <HAL_GPIO_Init+0x1be>
 80065fa:	2303      	movs	r3, #3
 80065fc:	e006      	b.n	800660c <HAL_GPIO_Init+0x1cc>
 80065fe:	2305      	movs	r3, #5
 8006600:	e004      	b.n	800660c <HAL_GPIO_Init+0x1cc>
 8006602:	2302      	movs	r3, #2
 8006604:	e002      	b.n	800660c <HAL_GPIO_Init+0x1cc>
 8006606:	2301      	movs	r3, #1
 8006608:	e000      	b.n	800660c <HAL_GPIO_Init+0x1cc>
 800660a:	2300      	movs	r3, #0
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	2103      	movs	r1, #3
 8006610:	400a      	ands	r2, r1
 8006612:	00d2      	lsls	r2, r2, #3
 8006614:	4093      	lsls	r3, r2
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	4313      	orrs	r3, r2
 800661a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800661c:	4936      	ldr	r1, [pc, #216]	; (80066f8 <HAL_GPIO_Init+0x2b8>)
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	089b      	lsrs	r3, r3, #2
 8006622:	3318      	adds	r3, #24
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800662a:	4a33      	ldr	r2, [pc, #204]	; (80066f8 <HAL_GPIO_Init+0x2b8>)
 800662c:	2380      	movs	r3, #128	; 0x80
 800662e:	58d3      	ldr	r3, [r2, r3]
 8006630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	43da      	mvns	r2, r3
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	4013      	ands	r3, r2
 800663a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	2380      	movs	r3, #128	; 0x80
 8006642:	025b      	lsls	r3, r3, #9
 8006644:	4013      	ands	r3, r2
 8006646:	d003      	beq.n	8006650 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	4313      	orrs	r3, r2
 800664e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006650:	4929      	ldr	r1, [pc, #164]	; (80066f8 <HAL_GPIO_Init+0x2b8>)
 8006652:	2280      	movs	r2, #128	; 0x80
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8006658:	4a27      	ldr	r2, [pc, #156]	; (80066f8 <HAL_GPIO_Init+0x2b8>)
 800665a:	2384      	movs	r3, #132	; 0x84
 800665c:	58d3      	ldr	r3, [r2, r3]
 800665e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	43da      	mvns	r2, r3
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	4013      	ands	r3, r2
 8006668:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	2380      	movs	r3, #128	; 0x80
 8006670:	029b      	lsls	r3, r3, #10
 8006672:	4013      	ands	r3, r2
 8006674:	d003      	beq.n	800667e <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4313      	orrs	r3, r2
 800667c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800667e:	491e      	ldr	r1, [pc, #120]	; (80066f8 <HAL_GPIO_Init+0x2b8>)
 8006680:	2284      	movs	r2, #132	; 0x84
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006686:	4b1c      	ldr	r3, [pc, #112]	; (80066f8 <HAL_GPIO_Init+0x2b8>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	43da      	mvns	r2, r3
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	4013      	ands	r3, r2
 8006694:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	685a      	ldr	r2, [r3, #4]
 800669a:	2380      	movs	r3, #128	; 0x80
 800669c:	035b      	lsls	r3, r3, #13
 800669e:	4013      	ands	r3, r2
 80066a0:	d003      	beq.n	80066aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80066aa:	4b13      	ldr	r3, [pc, #76]	; (80066f8 <HAL_GPIO_Init+0x2b8>)
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80066b0:	4b11      	ldr	r3, [pc, #68]	; (80066f8 <HAL_GPIO_Init+0x2b8>)
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	43da      	mvns	r2, r3
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	4013      	ands	r3, r2
 80066be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	685a      	ldr	r2, [r3, #4]
 80066c4:	2380      	movs	r3, #128	; 0x80
 80066c6:	039b      	lsls	r3, r3, #14
 80066c8:	4013      	ands	r3, r2
 80066ca:	d003      	beq.n	80066d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80066d4:	4b08      	ldr	r3, [pc, #32]	; (80066f8 <HAL_GPIO_Init+0x2b8>)
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	3301      	adds	r3, #1
 80066de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	40da      	lsrs	r2, r3
 80066e8:	1e13      	subs	r3, r2, #0
 80066ea:	d000      	beq.n	80066ee <HAL_GPIO_Init+0x2ae>
 80066ec:	e6b0      	b.n	8006450 <HAL_GPIO_Init+0x10>
  }
}
 80066ee:	46c0      	nop			; (mov r8, r8)
 80066f0:	46c0      	nop			; (mov r8, r8)
 80066f2:	46bd      	mov	sp, r7
 80066f4:	b006      	add	sp, #24
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	40021800 	.word	0x40021800
 80066fc:	50000400 	.word	0x50000400
 8006700:	50000800 	.word	0x50000800
 8006704:	50000c00 	.word	0x50000c00

08006708 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e082      	b.n	8006820 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2241      	movs	r2, #65	; 0x41
 800671e:	5c9b      	ldrb	r3, [r3, r2]
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d107      	bne.n	8006736 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2240      	movs	r2, #64	; 0x40
 800672a:	2100      	movs	r1, #0
 800672c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	0018      	movs	r0, r3
 8006732:	f7fe fba1 	bl	8004e78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2241      	movs	r2, #65	; 0x41
 800673a:	2124      	movs	r1, #36	; 0x24
 800673c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2101      	movs	r1, #1
 800674a:	438a      	bics	r2, r1
 800674c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685a      	ldr	r2, [r3, #4]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4934      	ldr	r1, [pc, #208]	; (8006828 <HAL_I2C_Init+0x120>)
 8006758:	400a      	ands	r2, r1
 800675a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689a      	ldr	r2, [r3, #8]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4931      	ldr	r1, [pc, #196]	; (800682c <HAL_I2C_Init+0x124>)
 8006768:	400a      	ands	r2, r1
 800676a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d108      	bne.n	8006786 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689a      	ldr	r2, [r3, #8]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2180      	movs	r1, #128	; 0x80
 800677e:	0209      	lsls	r1, r1, #8
 8006780:	430a      	orrs	r2, r1
 8006782:	609a      	str	r2, [r3, #8]
 8006784:	e007      	b.n	8006796 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	689a      	ldr	r2, [r3, #8]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2184      	movs	r1, #132	; 0x84
 8006790:	0209      	lsls	r1, r1, #8
 8006792:	430a      	orrs	r2, r1
 8006794:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	2b02      	cmp	r3, #2
 800679c:	d104      	bne.n	80067a8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2280      	movs	r2, #128	; 0x80
 80067a4:	0112      	lsls	r2, r2, #4
 80067a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685a      	ldr	r2, [r3, #4]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	491f      	ldr	r1, [pc, #124]	; (8006830 <HAL_I2C_Init+0x128>)
 80067b4:	430a      	orrs	r2, r1
 80067b6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68da      	ldr	r2, [r3, #12]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	491a      	ldr	r1, [pc, #104]	; (800682c <HAL_I2C_Init+0x124>)
 80067c4:	400a      	ands	r2, r1
 80067c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	691a      	ldr	r2, [r3, #16]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	695b      	ldr	r3, [r3, #20]
 80067d0:	431a      	orrs	r2, r3
 80067d2:	0011      	movs	r1, r2
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	021a      	lsls	r2, r3, #8
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	430a      	orrs	r2, r1
 80067e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	69d9      	ldr	r1, [r3, #28]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a1a      	ldr	r2, [r3, #32]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2101      	movs	r1, #1
 80067fe:	430a      	orrs	r2, r1
 8006800:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2241      	movs	r2, #65	; 0x41
 800680c:	2120      	movs	r1, #32
 800680e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2242      	movs	r2, #66	; 0x42
 800681a:	2100      	movs	r1, #0
 800681c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	0018      	movs	r0, r3
 8006822:	46bd      	mov	sp, r7
 8006824:	b002      	add	sp, #8
 8006826:	bd80      	pop	{r7, pc}
 8006828:	f0ffffff 	.word	0xf0ffffff
 800682c:	ffff7fff 	.word	0xffff7fff
 8006830:	02008000 	.word	0x02008000

08006834 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006834:	b590      	push	{r4, r7, lr}
 8006836:	b089      	sub	sp, #36	; 0x24
 8006838:	af02      	add	r7, sp, #8
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	0008      	movs	r0, r1
 800683e:	607a      	str	r2, [r7, #4]
 8006840:	0019      	movs	r1, r3
 8006842:	230a      	movs	r3, #10
 8006844:	18fb      	adds	r3, r7, r3
 8006846:	1c02      	adds	r2, r0, #0
 8006848:	801a      	strh	r2, [r3, #0]
 800684a:	2308      	movs	r3, #8
 800684c:	18fb      	adds	r3, r7, r3
 800684e:	1c0a      	adds	r2, r1, #0
 8006850:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2241      	movs	r2, #65	; 0x41
 8006856:	5c9b      	ldrb	r3, [r3, r2]
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b20      	cmp	r3, #32
 800685c:	d000      	beq.n	8006860 <HAL_I2C_Master_Transmit+0x2c>
 800685e:	e0e7      	b.n	8006a30 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2240      	movs	r2, #64	; 0x40
 8006864:	5c9b      	ldrb	r3, [r3, r2]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d101      	bne.n	800686e <HAL_I2C_Master_Transmit+0x3a>
 800686a:	2302      	movs	r3, #2
 800686c:	e0e1      	b.n	8006a32 <HAL_I2C_Master_Transmit+0x1fe>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2240      	movs	r2, #64	; 0x40
 8006872:	2101      	movs	r1, #1
 8006874:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006876:	f7fe ff99 	bl	80057ac <HAL_GetTick>
 800687a:	0003      	movs	r3, r0
 800687c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800687e:	2380      	movs	r3, #128	; 0x80
 8006880:	0219      	lsls	r1, r3, #8
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	2319      	movs	r3, #25
 800688a:	2201      	movs	r2, #1
 800688c:	f000 fe76 	bl	800757c <I2C_WaitOnFlagUntilTimeout>
 8006890:	1e03      	subs	r3, r0, #0
 8006892:	d001      	beq.n	8006898 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e0cc      	b.n	8006a32 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2241      	movs	r2, #65	; 0x41
 800689c:	2121      	movs	r1, #33	; 0x21
 800689e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2242      	movs	r2, #66	; 0x42
 80068a4:	2110      	movs	r1, #16
 80068a6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2208      	movs	r2, #8
 80068b8:	18ba      	adds	r2, r7, r2
 80068ba:	8812      	ldrh	r2, [r2, #0]
 80068bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	2bff      	cmp	r3, #255	; 0xff
 80068cc:	d911      	bls.n	80068f2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	22ff      	movs	r2, #255	; 0xff
 80068d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d8:	b2da      	uxtb	r2, r3
 80068da:	2380      	movs	r3, #128	; 0x80
 80068dc:	045c      	lsls	r4, r3, #17
 80068de:	230a      	movs	r3, #10
 80068e0:	18fb      	adds	r3, r7, r3
 80068e2:	8819      	ldrh	r1, [r3, #0]
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	4b55      	ldr	r3, [pc, #340]	; (8006a3c <HAL_I2C_Master_Transmit+0x208>)
 80068e8:	9300      	str	r3, [sp, #0]
 80068ea:	0023      	movs	r3, r4
 80068ec:	f000 ff66 	bl	80077bc <I2C_TransferConfig>
 80068f0:	e075      	b.n	80069de <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006900:	b2da      	uxtb	r2, r3
 8006902:	2380      	movs	r3, #128	; 0x80
 8006904:	049c      	lsls	r4, r3, #18
 8006906:	230a      	movs	r3, #10
 8006908:	18fb      	adds	r3, r7, r3
 800690a:	8819      	ldrh	r1, [r3, #0]
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	4b4b      	ldr	r3, [pc, #300]	; (8006a3c <HAL_I2C_Master_Transmit+0x208>)
 8006910:	9300      	str	r3, [sp, #0]
 8006912:	0023      	movs	r3, r4
 8006914:	f000 ff52 	bl	80077bc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8006918:	e061      	b.n	80069de <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	0018      	movs	r0, r3
 8006922:	f000 fe6a 	bl	80075fa <I2C_WaitOnTXISFlagUntilTimeout>
 8006926:	1e03      	subs	r3, r0, #0
 8006928:	d001      	beq.n	800692e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e081      	b.n	8006a32 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006932:	781a      	ldrb	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693e:	1c5a      	adds	r2, r3, #1
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006948:	b29b      	uxth	r3, r3
 800694a:	3b01      	subs	r3, #1
 800694c:	b29a      	uxth	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006956:	3b01      	subs	r3, #1
 8006958:	b29a      	uxth	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006962:	b29b      	uxth	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	d03a      	beq.n	80069de <HAL_I2C_Master_Transmit+0x1aa>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800696c:	2b00      	cmp	r3, #0
 800696e:	d136      	bne.n	80069de <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006970:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	0013      	movs	r3, r2
 800697a:	2200      	movs	r2, #0
 800697c:	2180      	movs	r1, #128	; 0x80
 800697e:	f000 fdfd 	bl	800757c <I2C_WaitOnFlagUntilTimeout>
 8006982:	1e03      	subs	r3, r0, #0
 8006984:	d001      	beq.n	800698a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e053      	b.n	8006a32 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800698e:	b29b      	uxth	r3, r3
 8006990:	2bff      	cmp	r3, #255	; 0xff
 8006992:	d911      	bls.n	80069b8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	22ff      	movs	r2, #255	; 0xff
 8006998:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	2380      	movs	r3, #128	; 0x80
 80069a2:	045c      	lsls	r4, r3, #17
 80069a4:	230a      	movs	r3, #10
 80069a6:	18fb      	adds	r3, r7, r3
 80069a8:	8819      	ldrh	r1, [r3, #0]
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	2300      	movs	r3, #0
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	0023      	movs	r3, r4
 80069b2:	f000 ff03 	bl	80077bc <I2C_TransferConfig>
 80069b6:	e012      	b.n	80069de <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069bc:	b29a      	uxth	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	2380      	movs	r3, #128	; 0x80
 80069ca:	049c      	lsls	r4, r3, #18
 80069cc:	230a      	movs	r3, #10
 80069ce:	18fb      	adds	r3, r7, r3
 80069d0:	8819      	ldrh	r1, [r3, #0]
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	2300      	movs	r3, #0
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	0023      	movs	r3, r4
 80069da:	f000 feef 	bl	80077bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d198      	bne.n	800691a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	0018      	movs	r0, r3
 80069f0:	f000 fe42 	bl	8007678 <I2C_WaitOnSTOPFlagUntilTimeout>
 80069f4:	1e03      	subs	r3, r0, #0
 80069f6:	d001      	beq.n	80069fc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e01a      	b.n	8006a32 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2220      	movs	r2, #32
 8006a02:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685a      	ldr	r2, [r3, #4]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	490c      	ldr	r1, [pc, #48]	; (8006a40 <HAL_I2C_Master_Transmit+0x20c>)
 8006a10:	400a      	ands	r2, r1
 8006a12:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2241      	movs	r2, #65	; 0x41
 8006a18:	2120      	movs	r1, #32
 8006a1a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2242      	movs	r2, #66	; 0x42
 8006a20:	2100      	movs	r1, #0
 8006a22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2240      	movs	r2, #64	; 0x40
 8006a28:	2100      	movs	r1, #0
 8006a2a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	e000      	b.n	8006a32 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8006a30:	2302      	movs	r3, #2
  }
}
 8006a32:	0018      	movs	r0, r3
 8006a34:	46bd      	mov	sp, r7
 8006a36:	b007      	add	sp, #28
 8006a38:	bd90      	pop	{r4, r7, pc}
 8006a3a:	46c0      	nop			; (mov r8, r8)
 8006a3c:	80002000 	.word	0x80002000
 8006a40:	fe00e800 	.word	0xfe00e800

08006a44 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d005      	beq.n	8006a70 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	68f9      	ldr	r1, [r7, #12]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	4798      	blx	r3
  }
}
 8006a70:	46c0      	nop			; (mov r8, r8)
 8006a72:	46bd      	mov	sp, r7
 8006a74:	b004      	add	sp, #16
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	0a1b      	lsrs	r3, r3, #8
 8006a94:	001a      	movs	r2, r3
 8006a96:	2301      	movs	r3, #1
 8006a98:	4013      	ands	r3, r2
 8006a9a:	d010      	beq.n	8006abe <HAL_I2C_ER_IRQHandler+0x46>
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	09db      	lsrs	r3, r3, #7
 8006aa0:	001a      	movs	r2, r3
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	d00a      	beq.n	8006abe <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aac:	2201      	movs	r2, #1
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2280      	movs	r2, #128	; 0x80
 8006aba:	0052      	lsls	r2, r2, #1
 8006abc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	0a9b      	lsrs	r3, r3, #10
 8006ac2:	001a      	movs	r2, r3
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	d010      	beq.n	8006aec <HAL_I2C_ER_IRQHandler+0x74>
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	09db      	lsrs	r3, r3, #7
 8006ace:	001a      	movs	r2, r3
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	d00a      	beq.n	8006aec <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ada:	2208      	movs	r2, #8
 8006adc:	431a      	orrs	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2280      	movs	r2, #128	; 0x80
 8006ae8:	00d2      	lsls	r2, r2, #3
 8006aea:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	0a5b      	lsrs	r3, r3, #9
 8006af0:	001a      	movs	r2, r3
 8006af2:	2301      	movs	r3, #1
 8006af4:	4013      	ands	r3, r2
 8006af6:	d010      	beq.n	8006b1a <HAL_I2C_ER_IRQHandler+0xa2>
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	09db      	lsrs	r3, r3, #7
 8006afc:	001a      	movs	r2, r3
 8006afe:	2301      	movs	r3, #1
 8006b00:	4013      	ands	r3, r2
 8006b02:	d00a      	beq.n	8006b1a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b08:	2202      	movs	r2, #2
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2280      	movs	r2, #128	; 0x80
 8006b16:	0092      	lsls	r2, r2, #2
 8006b18:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	220b      	movs	r2, #11
 8006b24:	4013      	ands	r3, r2
 8006b26:	d005      	beq.n	8006b34 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	0011      	movs	r1, r2
 8006b2e:	0018      	movs	r0, r3
 8006b30:	f000 fbd8 	bl	80072e4 <I2C_ITError>
  }
}
 8006b34:	46c0      	nop			; (mov r8, r8)
 8006b36:	46bd      	mov	sp, r7
 8006b38:	b006      	add	sp, #24
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006b44:	46c0      	nop			; (mov r8, r8)
 8006b46:	46bd      	mov	sp, r7
 8006b48:	b002      	add	sp, #8
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006b54:	46c0      	nop			; (mov r8, r8)
 8006b56:	46bd      	mov	sp, r7
 8006b58:	b002      	add	sp, #8
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	0008      	movs	r0, r1
 8006b66:	0011      	movs	r1, r2
 8006b68:	1cfb      	adds	r3, r7, #3
 8006b6a:	1c02      	adds	r2, r0, #0
 8006b6c:	701a      	strb	r2, [r3, #0]
 8006b6e:	003b      	movs	r3, r7
 8006b70:	1c0a      	adds	r2, r1, #0
 8006b72:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006b74:	46c0      	nop			; (mov r8, r8)
 8006b76:	46bd      	mov	sp, r7
 8006b78:	b002      	add	sp, #8
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006b84:	46c0      	nop			; (mov r8, r8)
 8006b86:	46bd      	mov	sp, r7
 8006b88:	b002      	add	sp, #8
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006b94:	46c0      	nop			; (mov r8, r8)
 8006b96:	46bd      	mov	sp, r7
 8006b98:	b002      	add	sp, #8
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006ba4:	46c0      	nop			; (mov r8, r8)
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	b002      	add	sp, #8
 8006baa:	bd80      	pop	{r7, pc}

08006bac <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2240      	movs	r2, #64	; 0x40
 8006bc6:	5c9b      	ldrb	r3, [r3, r2]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d101      	bne.n	8006bd0 <I2C_Slave_ISR_IT+0x24>
 8006bcc:	2302      	movs	r3, #2
 8006bce:	e0fa      	b.n	8006dc6 <I2C_Slave_ISR_IT+0x21a>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2240      	movs	r2, #64	; 0x40
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	095b      	lsrs	r3, r3, #5
 8006bdc:	001a      	movs	r2, r3
 8006bde:	2301      	movs	r3, #1
 8006be0:	4013      	ands	r3, r2
 8006be2:	d00b      	beq.n	8006bfc <I2C_Slave_ISR_IT+0x50>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	095b      	lsrs	r3, r3, #5
 8006be8:	001a      	movs	r2, r3
 8006bea:	2301      	movs	r3, #1
 8006bec:	4013      	ands	r3, r2
 8006bee:	d005      	beq.n	8006bfc <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	0011      	movs	r1, r2
 8006bf6:	0018      	movs	r0, r3
 8006bf8:	f000 f9f6 	bl	8006fe8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	091b      	lsrs	r3, r3, #4
 8006c00:	001a      	movs	r2, r3
 8006c02:	2301      	movs	r3, #1
 8006c04:	4013      	ands	r3, r2
 8006c06:	d054      	beq.n	8006cb2 <I2C_Slave_ISR_IT+0x106>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	091b      	lsrs	r3, r3, #4
 8006c0c:	001a      	movs	r2, r3
 8006c0e:	2301      	movs	r3, #1
 8006c10:	4013      	ands	r3, r2
 8006c12:	d04e      	beq.n	8006cb2 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d12d      	bne.n	8006c7a <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2241      	movs	r2, #65	; 0x41
 8006c22:	5c9b      	ldrb	r3, [r3, r2]
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b28      	cmp	r3, #40	; 0x28
 8006c28:	d10b      	bne.n	8006c42 <I2C_Slave_ISR_IT+0x96>
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	2380      	movs	r3, #128	; 0x80
 8006c2e:	049b      	lsls	r3, r3, #18
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d106      	bne.n	8006c42 <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	0011      	movs	r1, r2
 8006c3a:	0018      	movs	r0, r3
 8006c3c:	f000 faf8 	bl	8007230 <I2C_ITListenCplt>
 8006c40:	e036      	b.n	8006cb0 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2241      	movs	r2, #65	; 0x41
 8006c46:	5c9b      	ldrb	r3, [r3, r2]
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b29      	cmp	r3, #41	; 0x29
 8006c4c:	d110      	bne.n	8006c70 <I2C_Slave_ISR_IT+0xc4>
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	4a5f      	ldr	r2, [pc, #380]	; (8006dd0 <I2C_Slave_ISR_IT+0x224>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d00c      	beq.n	8006c70 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2210      	movs	r2, #16
 8006c5c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	0018      	movs	r0, r3
 8006c62:	f000 fc4a 	bl	80074fa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	0018      	movs	r0, r3
 8006c6a:	f000 f957 	bl	8006f1c <I2C_ITSlaveSeqCplt>
 8006c6e:	e01f      	b.n	8006cb0 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2210      	movs	r2, #16
 8006c76:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006c78:	e09d      	b.n	8006db6 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2210      	movs	r2, #16
 8006c80:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c86:	2204      	movs	r2, #4
 8006c88:	431a      	orrs	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d005      	beq.n	8006ca0 <I2C_Slave_ISR_IT+0xf4>
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	2380      	movs	r3, #128	; 0x80
 8006c98:	045b      	lsls	r3, r3, #17
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d000      	beq.n	8006ca0 <I2C_Slave_ISR_IT+0xf4>
 8006c9e:	e08a      	b.n	8006db6 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	0011      	movs	r1, r2
 8006ca8:	0018      	movs	r0, r3
 8006caa:	f000 fb1b 	bl	80072e4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006cae:	e082      	b.n	8006db6 <I2C_Slave_ISR_IT+0x20a>
 8006cb0:	e081      	b.n	8006db6 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	089b      	lsrs	r3, r3, #2
 8006cb6:	001a      	movs	r2, r3
 8006cb8:	2301      	movs	r3, #1
 8006cba:	4013      	ands	r3, r2
 8006cbc:	d031      	beq.n	8006d22 <I2C_Slave_ISR_IT+0x176>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	089b      	lsrs	r3, r3, #2
 8006cc2:	001a      	movs	r2, r3
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	d02b      	beq.n	8006d22 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d018      	beq.n	8006d06 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cde:	b2d2      	uxtb	r2, r2
 8006ce0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce6:	1c5a      	adds	r2, r3, #1
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d154      	bne.n	8006dba <I2C_Slave_ISR_IT+0x20e>
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	4a2f      	ldr	r2, [pc, #188]	; (8006dd0 <I2C_Slave_ISR_IT+0x224>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d050      	beq.n	8006dba <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	0018      	movs	r0, r3
 8006d1c:	f000 f8fe 	bl	8006f1c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006d20:	e04b      	b.n	8006dba <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	08db      	lsrs	r3, r3, #3
 8006d26:	001a      	movs	r2, r3
 8006d28:	2301      	movs	r3, #1
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	d00c      	beq.n	8006d48 <I2C_Slave_ISR_IT+0x19c>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	08db      	lsrs	r3, r3, #3
 8006d32:	001a      	movs	r2, r3
 8006d34:	2301      	movs	r3, #1
 8006d36:	4013      	ands	r3, r2
 8006d38:	d006      	beq.n	8006d48 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	0011      	movs	r1, r2
 8006d40:	0018      	movs	r0, r3
 8006d42:	f000 f847 	bl	8006dd4 <I2C_ITAddrCplt>
 8006d46:	e039      	b.n	8006dbc <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	085b      	lsrs	r3, r3, #1
 8006d4c:	001a      	movs	r2, r3
 8006d4e:	2301      	movs	r3, #1
 8006d50:	4013      	ands	r3, r2
 8006d52:	d033      	beq.n	8006dbc <I2C_Slave_ISR_IT+0x210>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	085b      	lsrs	r3, r3, #1
 8006d58:	001a      	movs	r2, r3
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	d02d      	beq.n	8006dbc <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d018      	beq.n	8006d9c <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6e:	781a      	ldrb	r2, [r3, #0]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7a:	1c5a      	adds	r2, r3, #1
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	3b01      	subs	r3, #1
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d92:	3b01      	subs	r3, #1
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	851a      	strh	r2, [r3, #40]	; 0x28
 8006d9a:	e00f      	b.n	8006dbc <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	2380      	movs	r3, #128	; 0x80
 8006da0:	045b      	lsls	r3, r3, #17
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d002      	beq.n	8006dac <I2C_Slave_ISR_IT+0x200>
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d107      	bne.n	8006dbc <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	0018      	movs	r0, r3
 8006db0:	f000 f8b4 	bl	8006f1c <I2C_ITSlaveSeqCplt>
 8006db4:	e002      	b.n	8006dbc <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8006db6:	46c0      	nop			; (mov r8, r8)
 8006db8:	e000      	b.n	8006dbc <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8006dba:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2240      	movs	r2, #64	; 0x40
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	0018      	movs	r0, r3
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	b006      	add	sp, #24
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	46c0      	nop			; (mov r8, r8)
 8006dd0:	ffff0000 	.word	0xffff0000

08006dd4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006dd4:	b5b0      	push	{r4, r5, r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2241      	movs	r2, #65	; 0x41
 8006de2:	5c9b      	ldrb	r3, [r3, r2]
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	001a      	movs	r2, r3
 8006de8:	2328      	movs	r3, #40	; 0x28
 8006dea:	4013      	ands	r3, r2
 8006dec:	2b28      	cmp	r3, #40	; 0x28
 8006dee:	d000      	beq.n	8006df2 <I2C_ITAddrCplt+0x1e>
 8006df0:	e088      	b.n	8006f04 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	0c1b      	lsrs	r3, r3, #16
 8006dfa:	b2da      	uxtb	r2, r3
 8006dfc:	250f      	movs	r5, #15
 8006dfe:	197b      	adds	r3, r7, r5
 8006e00:	2101      	movs	r1, #1
 8006e02:	400a      	ands	r2, r1
 8006e04:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	0c1b      	lsrs	r3, r3, #16
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	200c      	movs	r0, #12
 8006e12:	183b      	adds	r3, r7, r0
 8006e14:	21fe      	movs	r1, #254	; 0xfe
 8006e16:	400a      	ands	r2, r1
 8006e18:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	240a      	movs	r4, #10
 8006e24:	193b      	adds	r3, r7, r4
 8006e26:	0592      	lsls	r2, r2, #22
 8006e28:	0d92      	lsrs	r2, r2, #22
 8006e2a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	2308      	movs	r3, #8
 8006e36:	18fb      	adds	r3, r7, r3
 8006e38:	21fe      	movs	r1, #254	; 0xfe
 8006e3a:	400a      	ands	r2, r1
 8006e3c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d148      	bne.n	8006ed8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8006e46:	0021      	movs	r1, r4
 8006e48:	187b      	adds	r3, r7, r1
 8006e4a:	881b      	ldrh	r3, [r3, #0]
 8006e4c:	09db      	lsrs	r3, r3, #7
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	183b      	adds	r3, r7, r0
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	4053      	eors	r3, r2
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	001a      	movs	r2, r3
 8006e5a:	2306      	movs	r3, #6
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	d120      	bne.n	8006ea2 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8006e60:	183b      	adds	r3, r7, r0
 8006e62:	187a      	adds	r2, r7, r1
 8006e64:	8812      	ldrh	r2, [r2, #0]
 8006e66:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e6c:	1c5a      	adds	r2, r3, #1
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d14c      	bne.n	8006f14 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2208      	movs	r2, #8
 8006e86:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2240      	movs	r2, #64	; 0x40
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006e90:	183b      	adds	r3, r7, r0
 8006e92:	881a      	ldrh	r2, [r3, #0]
 8006e94:	197b      	adds	r3, r7, r5
 8006e96:	7819      	ldrb	r1, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	0018      	movs	r0, r3
 8006e9c:	f7ff fe5e 	bl	8006b5c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006ea0:	e038      	b.n	8006f14 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8006ea2:	240c      	movs	r4, #12
 8006ea4:	193b      	adds	r3, r7, r4
 8006ea6:	2208      	movs	r2, #8
 8006ea8:	18ba      	adds	r2, r7, r2
 8006eaa:	8812      	ldrh	r2, [r2, #0]
 8006eac:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006eae:	2380      	movs	r3, #128	; 0x80
 8006eb0:	021a      	lsls	r2, r3, #8
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	0011      	movs	r1, r2
 8006eb6:	0018      	movs	r0, r3
 8006eb8:	f000 fcb6 	bl	8007828 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2240      	movs	r2, #64	; 0x40
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006ec4:	193b      	adds	r3, r7, r4
 8006ec6:	881a      	ldrh	r2, [r3, #0]
 8006ec8:	230f      	movs	r3, #15
 8006eca:	18fb      	adds	r3, r7, r3
 8006ecc:	7819      	ldrb	r1, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	0018      	movs	r0, r3
 8006ed2:	f7ff fe43 	bl	8006b5c <HAL_I2C_AddrCallback>
}
 8006ed6:	e01d      	b.n	8006f14 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006ed8:	2380      	movs	r3, #128	; 0x80
 8006eda:	021a      	lsls	r2, r3, #8
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	0011      	movs	r1, r2
 8006ee0:	0018      	movs	r0, r3
 8006ee2:	f000 fca1 	bl	8007828 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2240      	movs	r2, #64	; 0x40
 8006eea:	2100      	movs	r1, #0
 8006eec:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006eee:	230c      	movs	r3, #12
 8006ef0:	18fb      	adds	r3, r7, r3
 8006ef2:	881a      	ldrh	r2, [r3, #0]
 8006ef4:	230f      	movs	r3, #15
 8006ef6:	18fb      	adds	r3, r7, r3
 8006ef8:	7819      	ldrb	r1, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	0018      	movs	r0, r3
 8006efe:	f7ff fe2d 	bl	8006b5c <HAL_I2C_AddrCallback>
}
 8006f02:	e007      	b.n	8006f14 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2208      	movs	r2, #8
 8006f0a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2240      	movs	r2, #64	; 0x40
 8006f10:	2100      	movs	r1, #0
 8006f12:	5499      	strb	r1, [r3, r2]
}
 8006f14:	46c0      	nop			; (mov r8, r8)
 8006f16:	46bd      	mov	sp, r7
 8006f18:	b004      	add	sp, #16
 8006f1a:	bdb0      	pop	{r4, r5, r7, pc}

08006f1c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2242      	movs	r2, #66	; 0x42
 8006f30:	2100      	movs	r1, #0
 8006f32:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	0b9b      	lsrs	r3, r3, #14
 8006f38:	001a      	movs	r2, r3
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	d008      	beq.n	8006f52 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4925      	ldr	r1, [pc, #148]	; (8006fe0 <I2C_ITSlaveSeqCplt+0xc4>)
 8006f4c:	400a      	ands	r2, r1
 8006f4e:	601a      	str	r2, [r3, #0]
 8006f50:	e00d      	b.n	8006f6e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	0bdb      	lsrs	r3, r3, #15
 8006f56:	001a      	movs	r2, r3
 8006f58:	2301      	movs	r3, #1
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	d007      	beq.n	8006f6e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	491e      	ldr	r1, [pc, #120]	; (8006fe4 <I2C_ITSlaveSeqCplt+0xc8>)
 8006f6a:	400a      	ands	r2, r1
 8006f6c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2241      	movs	r2, #65	; 0x41
 8006f72:	5c9b      	ldrb	r3, [r3, r2]
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b29      	cmp	r3, #41	; 0x29
 8006f78:	d114      	bne.n	8006fa4 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2241      	movs	r2, #65	; 0x41
 8006f7e:	2128      	movs	r1, #40	; 0x28
 8006f80:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2221      	movs	r2, #33	; 0x21
 8006f86:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2101      	movs	r1, #1
 8006f8c:	0018      	movs	r0, r3
 8006f8e:	f000 fc4b 	bl	8007828 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2240      	movs	r2, #64	; 0x40
 8006f96:	2100      	movs	r1, #0
 8006f98:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	0018      	movs	r0, r3
 8006f9e:	f7ff fdcd 	bl	8006b3c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006fa2:	e019      	b.n	8006fd8 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2241      	movs	r2, #65	; 0x41
 8006fa8:	5c9b      	ldrb	r3, [r3, r2]
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b2a      	cmp	r3, #42	; 0x2a
 8006fae:	d113      	bne.n	8006fd8 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2241      	movs	r2, #65	; 0x41
 8006fb4:	2128      	movs	r1, #40	; 0x28
 8006fb6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2222      	movs	r2, #34	; 0x22
 8006fbc:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2102      	movs	r1, #2
 8006fc2:	0018      	movs	r0, r3
 8006fc4:	f000 fc30 	bl	8007828 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2240      	movs	r2, #64	; 0x40
 8006fcc:	2100      	movs	r1, #0
 8006fce:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	0018      	movs	r0, r3
 8006fd4:	f7ff fdba 	bl	8006b4c <HAL_I2C_SlaveRxCpltCallback>
}
 8006fd8:	46c0      	nop			; (mov r8, r8)
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	b004      	add	sp, #16
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	ffffbfff 	.word	0xffffbfff
 8006fe4:	ffff7fff 	.word	0xffff7fff

08006fe8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006ffe:	200f      	movs	r0, #15
 8007000:	183b      	adds	r3, r7, r0
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	2141      	movs	r1, #65	; 0x41
 8007006:	5c52      	ldrb	r2, [r2, r1]
 8007008:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2220      	movs	r2, #32
 8007010:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007012:	183b      	adds	r3, r7, r0
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	2b21      	cmp	r3, #33	; 0x21
 8007018:	d003      	beq.n	8007022 <I2C_ITSlaveCplt+0x3a>
 800701a:	183b      	adds	r3, r7, r0
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	2b29      	cmp	r3, #41	; 0x29
 8007020:	d109      	bne.n	8007036 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007022:	4a7d      	ldr	r2, [pc, #500]	; (8007218 <I2C_ITSlaveCplt+0x230>)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	0011      	movs	r1, r2
 8007028:	0018      	movs	r0, r3
 800702a:	f000 fbfd 	bl	8007828 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2221      	movs	r2, #33	; 0x21
 8007032:	631a      	str	r2, [r3, #48]	; 0x30
 8007034:	e011      	b.n	800705a <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007036:	220f      	movs	r2, #15
 8007038:	18bb      	adds	r3, r7, r2
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	2b22      	cmp	r3, #34	; 0x22
 800703e:	d003      	beq.n	8007048 <I2C_ITSlaveCplt+0x60>
 8007040:	18bb      	adds	r3, r7, r2
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b2a      	cmp	r3, #42	; 0x2a
 8007046:	d108      	bne.n	800705a <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007048:	4a74      	ldr	r2, [pc, #464]	; (800721c <I2C_ITSlaveCplt+0x234>)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	0011      	movs	r1, r2
 800704e:	0018      	movs	r0, r3
 8007050:	f000 fbea 	bl	8007828 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2222      	movs	r2, #34	; 0x22
 8007058:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2180      	movs	r1, #128	; 0x80
 8007066:	0209      	lsls	r1, r1, #8
 8007068:	430a      	orrs	r2, r1
 800706a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685a      	ldr	r2, [r3, #4]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	496a      	ldr	r1, [pc, #424]	; (8007220 <I2C_ITSlaveCplt+0x238>)
 8007078:	400a      	ands	r2, r1
 800707a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	0018      	movs	r0, r3
 8007080:	f000 fa3b 	bl	80074fa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	0b9b      	lsrs	r3, r3, #14
 8007088:	001a      	movs	r2, r3
 800708a:	2301      	movs	r3, #1
 800708c:	4013      	ands	r3, r2
 800708e:	d013      	beq.n	80070b8 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4962      	ldr	r1, [pc, #392]	; (8007224 <I2C_ITSlaveCplt+0x23c>)
 800709c:	400a      	ands	r2, r1
 800709e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d020      	beq.n	80070ea <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80070b6:	e018      	b.n	80070ea <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	0bdb      	lsrs	r3, r3, #15
 80070bc:	001a      	movs	r2, r3
 80070be:	2301      	movs	r3, #1
 80070c0:	4013      	ands	r3, r2
 80070c2:	d012      	beq.n	80070ea <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4956      	ldr	r1, [pc, #344]	; (8007228 <I2C_ITSlaveCplt+0x240>)
 80070d0:	400a      	ands	r2, r1
 80070d2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d006      	beq.n	80070ea <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	089b      	lsrs	r3, r3, #2
 80070ee:	001a      	movs	r2, r3
 80070f0:	2301      	movs	r3, #1
 80070f2:	4013      	ands	r3, r2
 80070f4:	d020      	beq.n	8007138 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	2204      	movs	r2, #4
 80070fa:	4393      	bics	r3, r2
 80070fc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007108:	b2d2      	uxtb	r2, r2
 800710a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007110:	1c5a      	adds	r2, r3, #1
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00c      	beq.n	8007138 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007122:	3b01      	subs	r3, #1
 8007124:	b29a      	uxth	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800712e:	b29b      	uxth	r3, r3
 8007130:	3b01      	subs	r3, #1
 8007132:	b29a      	uxth	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800713c:	b29b      	uxth	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d005      	beq.n	800714e <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007146:	2204      	movs	r2, #4
 8007148:	431a      	orrs	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2242      	movs	r2, #66	; 0x42
 8007152:	2100      	movs	r1, #0
 8007154:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007160:	2b00      	cmp	r3, #0
 8007162:	d013      	beq.n	800718c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	0011      	movs	r1, r2
 800716c:	0018      	movs	r0, r3
 800716e:	f000 f8b9 	bl	80072e4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2241      	movs	r2, #65	; 0x41
 8007176:	5c9b      	ldrb	r3, [r3, r2]
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b28      	cmp	r3, #40	; 0x28
 800717c:	d147      	bne.n	800720e <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	0011      	movs	r1, r2
 8007184:	0018      	movs	r0, r3
 8007186:	f000 f853 	bl	8007230 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800718a:	e040      	b.n	800720e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007190:	4a26      	ldr	r2, [pc, #152]	; (800722c <I2C_ITSlaveCplt+0x244>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d016      	beq.n	80071c4 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	0018      	movs	r0, r3
 800719a:	f7ff febf 	bl	8006f1c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a22      	ldr	r2, [pc, #136]	; (800722c <I2C_ITSlaveCplt+0x244>)
 80071a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2241      	movs	r2, #65	; 0x41
 80071a8:	2120      	movs	r1, #32
 80071aa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2240      	movs	r2, #64	; 0x40
 80071b6:	2100      	movs	r1, #0
 80071b8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	0018      	movs	r0, r3
 80071be:	f7ff fcdd 	bl	8006b7c <HAL_I2C_ListenCpltCallback>
}
 80071c2:	e024      	b.n	800720e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2241      	movs	r2, #65	; 0x41
 80071c8:	5c9b      	ldrb	r3, [r3, r2]
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b22      	cmp	r3, #34	; 0x22
 80071ce:	d10f      	bne.n	80071f0 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2241      	movs	r2, #65	; 0x41
 80071d4:	2120      	movs	r1, #32
 80071d6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2240      	movs	r2, #64	; 0x40
 80071e2:	2100      	movs	r1, #0
 80071e4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	0018      	movs	r0, r3
 80071ea:	f7ff fcaf 	bl	8006b4c <HAL_I2C_SlaveRxCpltCallback>
}
 80071ee:	e00e      	b.n	800720e <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2241      	movs	r2, #65	; 0x41
 80071f4:	2120      	movs	r1, #32
 80071f6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2240      	movs	r2, #64	; 0x40
 8007202:	2100      	movs	r1, #0
 8007204:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	0018      	movs	r0, r3
 800720a:	f7ff fc97 	bl	8006b3c <HAL_I2C_SlaveTxCpltCallback>
}
 800720e:	46c0      	nop			; (mov r8, r8)
 8007210:	46bd      	mov	sp, r7
 8007212:	b006      	add	sp, #24
 8007214:	bd80      	pop	{r7, pc}
 8007216:	46c0      	nop			; (mov r8, r8)
 8007218:	00008001 	.word	0x00008001
 800721c:	00008002 	.word	0x00008002
 8007220:	fe00e800 	.word	0xfe00e800
 8007224:	ffffbfff 	.word	0xffffbfff
 8007228:	ffff7fff 	.word	0xffff7fff
 800722c:	ffff0000 	.word	0xffff0000

08007230 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a27      	ldr	r2, [pc, #156]	; (80072dc <I2C_ITListenCplt+0xac>)
 800723e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2241      	movs	r2, #65	; 0x41
 800724a:	2120      	movs	r1, #32
 800724c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2242      	movs	r2, #66	; 0x42
 8007252:	2100      	movs	r1, #0
 8007254:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	089b      	lsrs	r3, r3, #2
 8007260:	001a      	movs	r2, r3
 8007262:	2301      	movs	r3, #1
 8007264:	4013      	ands	r3, r2
 8007266:	d022      	beq.n	80072ae <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007272:	b2d2      	uxtb	r2, r2
 8007274:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727a:	1c5a      	adds	r2, r3, #1
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007284:	2b00      	cmp	r3, #0
 8007286:	d012      	beq.n	80072ae <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800728c:	3b01      	subs	r3, #1
 800728e:	b29a      	uxth	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007298:	b29b      	uxth	r3, r3
 800729a:	3b01      	subs	r3, #1
 800729c:	b29a      	uxth	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072a6:	2204      	movs	r2, #4
 80072a8:	431a      	orrs	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80072ae:	4a0c      	ldr	r2, [pc, #48]	; (80072e0 <I2C_ITListenCplt+0xb0>)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	0011      	movs	r1, r2
 80072b4:	0018      	movs	r0, r3
 80072b6:	f000 fab7 	bl	8007828 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2210      	movs	r2, #16
 80072c0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2240      	movs	r2, #64	; 0x40
 80072c6:	2100      	movs	r1, #0
 80072c8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	0018      	movs	r0, r3
 80072ce:	f7ff fc55 	bl	8006b7c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80072d2:	46c0      	nop			; (mov r8, r8)
 80072d4:	46bd      	mov	sp, r7
 80072d6:	b002      	add	sp, #8
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	46c0      	nop			; (mov r8, r8)
 80072dc:	ffff0000 	.word	0xffff0000
 80072e0:	00008003 	.word	0x00008003

080072e4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80072ee:	200f      	movs	r0, #15
 80072f0:	183b      	adds	r3, r7, r0
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	2141      	movs	r1, #65	; 0x41
 80072f6:	5c52      	ldrb	r2, [r2, r1]
 80072f8:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2242      	movs	r2, #66	; 0x42
 80072fe:	2100      	movs	r1, #0
 8007300:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a62      	ldr	r2, [pc, #392]	; (8007490 <I2C_ITError+0x1ac>)
 8007306:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	431a      	orrs	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800731a:	183b      	adds	r3, r7, r0
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	2b28      	cmp	r3, #40	; 0x28
 8007320:	d007      	beq.n	8007332 <I2C_ITError+0x4e>
 8007322:	183b      	adds	r3, r7, r0
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b29      	cmp	r3, #41	; 0x29
 8007328:	d003      	beq.n	8007332 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800732a:	183b      	adds	r3, r7, r0
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	2b2a      	cmp	r3, #42	; 0x2a
 8007330:	d10c      	bne.n	800734c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2103      	movs	r1, #3
 8007336:	0018      	movs	r0, r3
 8007338:	f000 fa76 	bl	8007828 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2241      	movs	r2, #65	; 0x41
 8007340:	2128      	movs	r1, #40	; 0x28
 8007342:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a53      	ldr	r2, [pc, #332]	; (8007494 <I2C_ITError+0x1b0>)
 8007348:	635a      	str	r2, [r3, #52]	; 0x34
 800734a:	e012      	b.n	8007372 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800734c:	4a52      	ldr	r2, [pc, #328]	; (8007498 <I2C_ITError+0x1b4>)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	0011      	movs	r1, r2
 8007352:	0018      	movs	r0, r3
 8007354:	f000 fa68 	bl	8007828 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2241      	movs	r2, #65	; 0x41
 800735c:	5c9b      	ldrb	r3, [r3, r2]
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b60      	cmp	r3, #96	; 0x60
 8007362:	d003      	beq.n	800736c <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2241      	movs	r2, #65	; 0x41
 8007368:	2120      	movs	r1, #32
 800736a:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007376:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737c:	2b00      	cmp	r3, #0
 800737e:	d03b      	beq.n	80073f8 <I2C_ITError+0x114>
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	2b11      	cmp	r3, #17
 8007384:	d002      	beq.n	800738c <I2C_ITError+0xa8>
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	2b21      	cmp	r3, #33	; 0x21
 800738a:	d135      	bne.n	80073f8 <I2C_ITError+0x114>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	2380      	movs	r3, #128	; 0x80
 8007394:	01db      	lsls	r3, r3, #7
 8007396:	401a      	ands	r2, r3
 8007398:	2380      	movs	r3, #128	; 0x80
 800739a:	01db      	lsls	r3, r3, #7
 800739c:	429a      	cmp	r2, r3
 800739e:	d107      	bne.n	80073b0 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	493c      	ldr	r1, [pc, #240]	; (800749c <I2C_ITError+0x1b8>)
 80073ac:	400a      	ands	r2, r1
 80073ae:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b4:	0018      	movs	r0, r3
 80073b6:	f7fe ffa7 	bl	8006308 <HAL_DMA_GetState>
 80073ba:	0003      	movs	r3, r0
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d016      	beq.n	80073ee <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c4:	4a36      	ldr	r2, [pc, #216]	; (80074a0 <I2C_ITError+0x1bc>)
 80073c6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2240      	movs	r2, #64	; 0x40
 80073cc:	2100      	movs	r1, #0
 80073ce:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d4:	0018      	movs	r0, r3
 80073d6:	f7fe fe7b 	bl	80060d0 <HAL_DMA_Abort_IT>
 80073da:	1e03      	subs	r3, r0, #0
 80073dc:	d051      	beq.n	8007482 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e8:	0018      	movs	r0, r3
 80073ea:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80073ec:	e049      	b.n	8007482 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	0018      	movs	r0, r3
 80073f2:	f000 f859 	bl	80074a8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80073f6:	e044      	b.n	8007482 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d03b      	beq.n	8007478 <I2C_ITError+0x194>
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2b12      	cmp	r3, #18
 8007404:	d002      	beq.n	800740c <I2C_ITError+0x128>
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	2b22      	cmp	r3, #34	; 0x22
 800740a:	d135      	bne.n	8007478 <I2C_ITError+0x194>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	2380      	movs	r3, #128	; 0x80
 8007414:	021b      	lsls	r3, r3, #8
 8007416:	401a      	ands	r2, r3
 8007418:	2380      	movs	r3, #128	; 0x80
 800741a:	021b      	lsls	r3, r3, #8
 800741c:	429a      	cmp	r2, r3
 800741e:	d107      	bne.n	8007430 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	491e      	ldr	r1, [pc, #120]	; (80074a4 <I2C_ITError+0x1c0>)
 800742c:	400a      	ands	r2, r1
 800742e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007434:	0018      	movs	r0, r3
 8007436:	f7fe ff67 	bl	8006308 <HAL_DMA_GetState>
 800743a:	0003      	movs	r3, r0
 800743c:	2b01      	cmp	r3, #1
 800743e:	d016      	beq.n	800746e <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007444:	4a16      	ldr	r2, [pc, #88]	; (80074a0 <I2C_ITError+0x1bc>)
 8007446:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2240      	movs	r2, #64	; 0x40
 800744c:	2100      	movs	r1, #0
 800744e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007454:	0018      	movs	r0, r3
 8007456:	f7fe fe3b 	bl	80060d0 <HAL_DMA_Abort_IT>
 800745a:	1e03      	subs	r3, r0, #0
 800745c:	d013      	beq.n	8007486 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007468:	0018      	movs	r0, r3
 800746a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800746c:	e00b      	b.n	8007486 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	0018      	movs	r0, r3
 8007472:	f000 f819 	bl	80074a8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007476:	e006      	b.n	8007486 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	0018      	movs	r0, r3
 800747c:	f000 f814 	bl	80074a8 <I2C_TreatErrorCallback>
  }
}
 8007480:	e002      	b.n	8007488 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007482:	46c0      	nop			; (mov r8, r8)
 8007484:	e000      	b.n	8007488 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007486:	46c0      	nop			; (mov r8, r8)
}
 8007488:	46c0      	nop			; (mov r8, r8)
 800748a:	46bd      	mov	sp, r7
 800748c:	b004      	add	sp, #16
 800748e:	bd80      	pop	{r7, pc}
 8007490:	ffff0000 	.word	0xffff0000
 8007494:	08006bad 	.word	0x08006bad
 8007498:	00008003 	.word	0x00008003
 800749c:	ffffbfff 	.word	0xffffbfff
 80074a0:	0800753f 	.word	0x0800753f
 80074a4:	ffff7fff 	.word	0xffff7fff

080074a8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2241      	movs	r2, #65	; 0x41
 80074b4:	5c9b      	ldrb	r3, [r3, r2]
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b60      	cmp	r3, #96	; 0x60
 80074ba:	d10f      	bne.n	80074dc <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2241      	movs	r2, #65	; 0x41
 80074c0:	2120      	movs	r1, #32
 80074c2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2240      	movs	r2, #64	; 0x40
 80074ce:	2100      	movs	r1, #0
 80074d0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	0018      	movs	r0, r3
 80074d6:	f7ff fb61 	bl	8006b9c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80074da:	e00a      	b.n	80074f2 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2240      	movs	r2, #64	; 0x40
 80074e6:	2100      	movs	r1, #0
 80074e8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	0018      	movs	r0, r3
 80074ee:	f7ff fb4d 	bl	8006b8c <HAL_I2C_ErrorCallback>
}
 80074f2:	46c0      	nop			; (mov r8, r8)
 80074f4:	46bd      	mov	sp, r7
 80074f6:	b002      	add	sp, #8
 80074f8:	bd80      	pop	{r7, pc}

080074fa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b082      	sub	sp, #8
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	2202      	movs	r2, #2
 800750a:	4013      	ands	r3, r2
 800750c:	2b02      	cmp	r3, #2
 800750e:	d103      	bne.n	8007518 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2200      	movs	r2, #0
 8007516:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	2201      	movs	r2, #1
 8007520:	4013      	ands	r3, r2
 8007522:	2b01      	cmp	r3, #1
 8007524:	d007      	beq.n	8007536 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	699a      	ldr	r2, [r3, #24]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2101      	movs	r1, #1
 8007532:	430a      	orrs	r2, r1
 8007534:	619a      	str	r2, [r3, #24]
  }
}
 8007536:	46c0      	nop			; (mov r8, r8)
 8007538:	46bd      	mov	sp, r7
 800753a:	b002      	add	sp, #8
 800753c:	bd80      	pop	{r7, pc}

0800753e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007550:	2b00      	cmp	r3, #0
 8007552:	d003      	beq.n	800755c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007558:	2200      	movs	r2, #0
 800755a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007560:	2b00      	cmp	r3, #0
 8007562:	d003      	beq.n	800756c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007568:	2200      	movs	r2, #0
 800756a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	0018      	movs	r0, r3
 8007570:	f7ff ff9a 	bl	80074a8 <I2C_TreatErrorCallback>
}
 8007574:	46c0      	nop			; (mov r8, r8)
 8007576:	46bd      	mov	sp, r7
 8007578:	b004      	add	sp, #16
 800757a:	bd80      	pop	{r7, pc}

0800757c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	603b      	str	r3, [r7, #0]
 8007588:	1dfb      	adds	r3, r7, #7
 800758a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800758c:	e021      	b.n	80075d2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	3301      	adds	r3, #1
 8007592:	d01e      	beq.n	80075d2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007594:	f7fe f90a 	bl	80057ac <HAL_GetTick>
 8007598:	0002      	movs	r2, r0
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	683a      	ldr	r2, [r7, #0]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d302      	bcc.n	80075aa <I2C_WaitOnFlagUntilTimeout+0x2e>
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d113      	bne.n	80075d2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ae:	2220      	movs	r2, #32
 80075b0:	431a      	orrs	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2241      	movs	r2, #65	; 0x41
 80075ba:	2120      	movs	r1, #32
 80075bc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2242      	movs	r2, #66	; 0x42
 80075c2:	2100      	movs	r1, #0
 80075c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2240      	movs	r2, #64	; 0x40
 80075ca:	2100      	movs	r1, #0
 80075cc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e00f      	b.n	80075f2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	4013      	ands	r3, r2
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	425a      	negs	r2, r3
 80075e2:	4153      	adcs	r3, r2
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	001a      	movs	r2, r3
 80075e8:	1dfb      	adds	r3, r7, #7
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d0ce      	beq.n	800758e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	0018      	movs	r0, r3
 80075f4:	46bd      	mov	sp, r7
 80075f6:	b004      	add	sp, #16
 80075f8:	bd80      	pop	{r7, pc}

080075fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b084      	sub	sp, #16
 80075fe:	af00      	add	r7, sp, #0
 8007600:	60f8      	str	r0, [r7, #12]
 8007602:	60b9      	str	r1, [r7, #8]
 8007604:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007606:	e02b      	b.n	8007660 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	68b9      	ldr	r1, [r7, #8]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	0018      	movs	r0, r3
 8007610:	f000 f86e 	bl	80076f0 <I2C_IsAcknowledgeFailed>
 8007614:	1e03      	subs	r3, r0, #0
 8007616:	d001      	beq.n	800761c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e029      	b.n	8007670 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	3301      	adds	r3, #1
 8007620:	d01e      	beq.n	8007660 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007622:	f7fe f8c3 	bl	80057ac <HAL_GetTick>
 8007626:	0002      	movs	r2, r0
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	429a      	cmp	r2, r3
 8007630:	d302      	bcc.n	8007638 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d113      	bne.n	8007660 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800763c:	2220      	movs	r2, #32
 800763e:	431a      	orrs	r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2241      	movs	r2, #65	; 0x41
 8007648:	2120      	movs	r1, #32
 800764a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2242      	movs	r2, #66	; 0x42
 8007650:	2100      	movs	r1, #0
 8007652:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2240      	movs	r2, #64	; 0x40
 8007658:	2100      	movs	r1, #0
 800765a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e007      	b.n	8007670 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	2202      	movs	r2, #2
 8007668:	4013      	ands	r3, r2
 800766a:	2b02      	cmp	r3, #2
 800766c:	d1cc      	bne.n	8007608 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	0018      	movs	r0, r3
 8007672:	46bd      	mov	sp, r7
 8007674:	b004      	add	sp, #16
 8007676:	bd80      	pop	{r7, pc}

08007678 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007684:	e028      	b.n	80076d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	68b9      	ldr	r1, [r7, #8]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	0018      	movs	r0, r3
 800768e:	f000 f82f 	bl	80076f0 <I2C_IsAcknowledgeFailed>
 8007692:	1e03      	subs	r3, r0, #0
 8007694:	d001      	beq.n	800769a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e026      	b.n	80076e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800769a:	f7fe f887 	bl	80057ac <HAL_GetTick>
 800769e:	0002      	movs	r2, r0
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	68ba      	ldr	r2, [r7, #8]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d302      	bcc.n	80076b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d113      	bne.n	80076d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076b4:	2220      	movs	r2, #32
 80076b6:	431a      	orrs	r2, r3
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2241      	movs	r2, #65	; 0x41
 80076c0:	2120      	movs	r1, #32
 80076c2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2242      	movs	r2, #66	; 0x42
 80076c8:	2100      	movs	r1, #0
 80076ca:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2240      	movs	r2, #64	; 0x40
 80076d0:	2100      	movs	r1, #0
 80076d2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e007      	b.n	80076e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	699b      	ldr	r3, [r3, #24]
 80076de:	2220      	movs	r2, #32
 80076e0:	4013      	ands	r3, r2
 80076e2:	2b20      	cmp	r3, #32
 80076e4:	d1cf      	bne.n	8007686 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	0018      	movs	r0, r3
 80076ea:	46bd      	mov	sp, r7
 80076ec:	b004      	add	sp, #16
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	2210      	movs	r2, #16
 8007704:	4013      	ands	r3, r2
 8007706:	2b10      	cmp	r3, #16
 8007708:	d151      	bne.n	80077ae <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800770a:	e021      	b.n	8007750 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	3301      	adds	r3, #1
 8007710:	d01e      	beq.n	8007750 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007712:	f7fe f84b 	bl	80057ac <HAL_GetTick>
 8007716:	0002      	movs	r2, r0
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	429a      	cmp	r2, r3
 8007720:	d302      	bcc.n	8007728 <I2C_IsAcknowledgeFailed+0x38>
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d113      	bne.n	8007750 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800772c:	2220      	movs	r2, #32
 800772e:	431a      	orrs	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2241      	movs	r2, #65	; 0x41
 8007738:	2120      	movs	r1, #32
 800773a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2242      	movs	r2, #66	; 0x42
 8007740:	2100      	movs	r1, #0
 8007742:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2240      	movs	r2, #64	; 0x40
 8007748:	2100      	movs	r1, #0
 800774a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e02f      	b.n	80077b0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	2220      	movs	r2, #32
 8007758:	4013      	ands	r3, r2
 800775a:	2b20      	cmp	r3, #32
 800775c:	d1d6      	bne.n	800770c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2210      	movs	r2, #16
 8007764:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2220      	movs	r2, #32
 800776c:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	0018      	movs	r0, r3
 8007772:	f7ff fec2 	bl	80074fa <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	490d      	ldr	r1, [pc, #52]	; (80077b8 <I2C_IsAcknowledgeFailed+0xc8>)
 8007782:	400a      	ands	r2, r1
 8007784:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800778a:	2204      	movs	r2, #4
 800778c:	431a      	orrs	r2, r3
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2241      	movs	r2, #65	; 0x41
 8007796:	2120      	movs	r1, #32
 8007798:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2242      	movs	r2, #66	; 0x42
 800779e:	2100      	movs	r1, #0
 80077a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2240      	movs	r2, #64	; 0x40
 80077a6:	2100      	movs	r1, #0
 80077a8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e000      	b.n	80077b0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	0018      	movs	r0, r3
 80077b2:	46bd      	mov	sp, r7
 80077b4:	b004      	add	sp, #16
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	fe00e800 	.word	0xfe00e800

080077bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80077bc:	b590      	push	{r4, r7, lr}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	0008      	movs	r0, r1
 80077c6:	0011      	movs	r1, r2
 80077c8:	607b      	str	r3, [r7, #4]
 80077ca:	240a      	movs	r4, #10
 80077cc:	193b      	adds	r3, r7, r4
 80077ce:	1c02      	adds	r2, r0, #0
 80077d0:	801a      	strh	r2, [r3, #0]
 80077d2:	2009      	movs	r0, #9
 80077d4:	183b      	adds	r3, r7, r0
 80077d6:	1c0a      	adds	r2, r1, #0
 80077d8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	6a3a      	ldr	r2, [r7, #32]
 80077e2:	0d51      	lsrs	r1, r2, #21
 80077e4:	2280      	movs	r2, #128	; 0x80
 80077e6:	00d2      	lsls	r2, r2, #3
 80077e8:	400a      	ands	r2, r1
 80077ea:	490e      	ldr	r1, [pc, #56]	; (8007824 <I2C_TransferConfig+0x68>)
 80077ec:	430a      	orrs	r2, r1
 80077ee:	43d2      	mvns	r2, r2
 80077f0:	401a      	ands	r2, r3
 80077f2:	0011      	movs	r1, r2
 80077f4:	193b      	adds	r3, r7, r4
 80077f6:	881b      	ldrh	r3, [r3, #0]
 80077f8:	059b      	lsls	r3, r3, #22
 80077fa:	0d9a      	lsrs	r2, r3, #22
 80077fc:	183b      	adds	r3, r7, r0
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	0418      	lsls	r0, r3, #16
 8007802:	23ff      	movs	r3, #255	; 0xff
 8007804:	041b      	lsls	r3, r3, #16
 8007806:	4003      	ands	r3, r0
 8007808:	431a      	orrs	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	431a      	orrs	r2, r3
 800780e:	6a3b      	ldr	r3, [r7, #32]
 8007810:	431a      	orrs	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	430a      	orrs	r2, r1
 8007818:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800781a:	46c0      	nop			; (mov r8, r8)
 800781c:	46bd      	mov	sp, r7
 800781e:	b005      	add	sp, #20
 8007820:	bd90      	pop	{r4, r7, pc}
 8007822:	46c0      	nop			; (mov r8, r8)
 8007824:	03ff63ff 	.word	0x03ff63ff

08007828 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	000a      	movs	r2, r1
 8007832:	1cbb      	adds	r3, r7, #2
 8007834:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8007836:	2300      	movs	r3, #0
 8007838:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800783a:	1cbb      	adds	r3, r7, #2
 800783c:	881b      	ldrh	r3, [r3, #0]
 800783e:	2201      	movs	r2, #1
 8007840:	4013      	ands	r3, r2
 8007842:	d010      	beq.n	8007866 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2242      	movs	r2, #66	; 0x42
 8007848:	4313      	orrs	r3, r2
 800784a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2241      	movs	r2, #65	; 0x41
 8007850:	5c9b      	ldrb	r3, [r3, r2]
 8007852:	b2db      	uxtb	r3, r3
 8007854:	001a      	movs	r2, r3
 8007856:	2328      	movs	r3, #40	; 0x28
 8007858:	4013      	ands	r3, r2
 800785a:	2b28      	cmp	r3, #40	; 0x28
 800785c:	d003      	beq.n	8007866 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	22b0      	movs	r2, #176	; 0xb0
 8007862:	4313      	orrs	r3, r2
 8007864:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007866:	1cbb      	adds	r3, r7, #2
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	2202      	movs	r2, #2
 800786c:	4013      	ands	r3, r2
 800786e:	d010      	beq.n	8007892 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2244      	movs	r2, #68	; 0x44
 8007874:	4313      	orrs	r3, r2
 8007876:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2241      	movs	r2, #65	; 0x41
 800787c:	5c9b      	ldrb	r3, [r3, r2]
 800787e:	b2db      	uxtb	r3, r3
 8007880:	001a      	movs	r2, r3
 8007882:	2328      	movs	r3, #40	; 0x28
 8007884:	4013      	ands	r3, r2
 8007886:	2b28      	cmp	r3, #40	; 0x28
 8007888:	d003      	beq.n	8007892 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	22b0      	movs	r2, #176	; 0xb0
 800788e:	4313      	orrs	r3, r2
 8007890:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007892:	1cbb      	adds	r3, r7, #2
 8007894:	2200      	movs	r2, #0
 8007896:	5e9b      	ldrsh	r3, [r3, r2]
 8007898:	2b00      	cmp	r3, #0
 800789a:	da03      	bge.n	80078a4 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	22b8      	movs	r2, #184	; 0xb8
 80078a0:	4313      	orrs	r3, r2
 80078a2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80078a4:	1cbb      	adds	r3, r7, #2
 80078a6:	881b      	ldrh	r3, [r3, #0]
 80078a8:	2b10      	cmp	r3, #16
 80078aa:	d103      	bne.n	80078b4 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2290      	movs	r2, #144	; 0x90
 80078b0:	4313      	orrs	r3, r2
 80078b2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80078b4:	1cbb      	adds	r3, r7, #2
 80078b6:	881b      	ldrh	r3, [r3, #0]
 80078b8:	2b20      	cmp	r3, #32
 80078ba:	d103      	bne.n	80078c4 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2220      	movs	r2, #32
 80078c0:	4313      	orrs	r3, r2
 80078c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80078c4:	1cbb      	adds	r3, r7, #2
 80078c6:	881b      	ldrh	r3, [r3, #0]
 80078c8:	2b40      	cmp	r3, #64	; 0x40
 80078ca:	d103      	bne.n	80078d4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2240      	movs	r2, #64	; 0x40
 80078d0:	4313      	orrs	r3, r2
 80078d2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	43d9      	mvns	r1, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	400a      	ands	r2, r1
 80078e4:	601a      	str	r2, [r3, #0]
}
 80078e6:	46c0      	nop			; (mov r8, r8)
 80078e8:	46bd      	mov	sp, r7
 80078ea:	b004      	add	sp, #16
 80078ec:	bd80      	pop	{r7, pc}
	...

080078f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2241      	movs	r2, #65	; 0x41
 80078fe:	5c9b      	ldrb	r3, [r3, r2]
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b20      	cmp	r3, #32
 8007904:	d138      	bne.n	8007978 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2240      	movs	r2, #64	; 0x40
 800790a:	5c9b      	ldrb	r3, [r3, r2]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d101      	bne.n	8007914 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007910:	2302      	movs	r3, #2
 8007912:	e032      	b.n	800797a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2240      	movs	r2, #64	; 0x40
 8007918:	2101      	movs	r1, #1
 800791a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2241      	movs	r2, #65	; 0x41
 8007920:	2124      	movs	r1, #36	; 0x24
 8007922:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2101      	movs	r1, #1
 8007930:	438a      	bics	r2, r1
 8007932:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4911      	ldr	r1, [pc, #68]	; (8007984 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007940:	400a      	ands	r2, r1
 8007942:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6819      	ldr	r1, [r3, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	430a      	orrs	r2, r1
 8007952:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2101      	movs	r1, #1
 8007960:	430a      	orrs	r2, r1
 8007962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2241      	movs	r2, #65	; 0x41
 8007968:	2120      	movs	r1, #32
 800796a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2240      	movs	r2, #64	; 0x40
 8007970:	2100      	movs	r1, #0
 8007972:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007974:	2300      	movs	r3, #0
 8007976:	e000      	b.n	800797a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007978:	2302      	movs	r3, #2
  }
}
 800797a:	0018      	movs	r0, r3
 800797c:	46bd      	mov	sp, r7
 800797e:	b002      	add	sp, #8
 8007980:	bd80      	pop	{r7, pc}
 8007982:	46c0      	nop			; (mov r8, r8)
 8007984:	ffffefff 	.word	0xffffefff

08007988 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2241      	movs	r2, #65	; 0x41
 8007996:	5c9b      	ldrb	r3, [r3, r2]
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b20      	cmp	r3, #32
 800799c:	d139      	bne.n	8007a12 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2240      	movs	r2, #64	; 0x40
 80079a2:	5c9b      	ldrb	r3, [r3, r2]
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d101      	bne.n	80079ac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80079a8:	2302      	movs	r3, #2
 80079aa:	e033      	b.n	8007a14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2240      	movs	r2, #64	; 0x40
 80079b0:	2101      	movs	r1, #1
 80079b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2241      	movs	r2, #65	; 0x41
 80079b8:	2124      	movs	r1, #36	; 0x24
 80079ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2101      	movs	r1, #1
 80079c8:	438a      	bics	r2, r1
 80079ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	4a11      	ldr	r2, [pc, #68]	; (8007a1c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80079d8:	4013      	ands	r3, r2
 80079da:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	021b      	lsls	r3, r3, #8
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2101      	movs	r1, #1
 80079fa:	430a      	orrs	r2, r1
 80079fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2241      	movs	r2, #65	; 0x41
 8007a02:	2120      	movs	r1, #32
 8007a04:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2240      	movs	r2, #64	; 0x40
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	e000      	b.n	8007a14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007a12:	2302      	movs	r3, #2
  }
}
 8007a14:	0018      	movs	r0, r3
 8007a16:	46bd      	mov	sp, r7
 8007a18:	b004      	add	sp, #16
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	fffff0ff 	.word	0xfffff0ff

08007a20 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b088      	sub	sp, #32
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d101      	bne.n	8007a32 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e0e5      	b.n	8007bfe <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2235      	movs	r2, #53	; 0x35
 8007a36:	5c9b      	ldrb	r3, [r3, r2]
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d107      	bne.n	8007a4e <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2234      	movs	r2, #52	; 0x34
 8007a42:	2100      	movs	r1, #0
 8007a44:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	0018      	movs	r0, r3
 8007a4a:	f7fd fa69 	bl	8004f20 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2235      	movs	r2, #53	; 0x35
 8007a52:	2102      	movs	r1, #2
 8007a54:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	69da      	ldr	r2, [r3, #28]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4969      	ldr	r1, [pc, #420]	; (8007c08 <HAL_I2S_Init+0x1e8>)
 8007a62:	400a      	ands	r2, r1
 8007a64:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	695b      	ldr	r3, [r3, #20]
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d100      	bne.n	8007a78 <HAL_I2S_Init+0x58>
 8007a76:	e076      	b.n	8007b66 <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d102      	bne.n	8007a86 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8007a80:	2310      	movs	r3, #16
 8007a82:	617b      	str	r3, [r7, #20]
 8007a84:	e001      	b.n	8007a8a <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8007a86:	2320      	movs	r3, #32
 8007a88:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	2b20      	cmp	r3, #32
 8007a90:	d802      	bhi.n	8007a98 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	005b      	lsls	r3, r3, #1
 8007a96:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8007a98:	2380      	movs	r3, #128	; 0x80
 8007a9a:	011b      	lsls	r3, r3, #4
 8007a9c:	0018      	movs	r0, r3
 8007a9e:	f001 fa9b 	bl	8008fd8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007aa2:	0003      	movs	r3, r0
 8007aa4:	60fb      	str	r3, [r7, #12]
#endif
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	691a      	ldr	r2, [r3, #16]
 8007aaa:	2380      	movs	r3, #128	; 0x80
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d131      	bne.n	8007b16 <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d016      	beq.n	8007ae8 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	0019      	movs	r1, r3
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f7f8 fb1f 	bl	8000104 <__udivsi3>
 8007ac6:	0003      	movs	r3, r0
 8007ac8:	001a      	movs	r2, r3
 8007aca:	0013      	movs	r3, r2
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	189b      	adds	r3, r3, r2
 8007ad0:	005b      	lsls	r3, r3, #1
 8007ad2:	001a      	movs	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	695b      	ldr	r3, [r3, #20]
 8007ad8:	0019      	movs	r1, r3
 8007ada:	0010      	movs	r0, r2
 8007adc:	f7f8 fb12 	bl	8000104 <__udivsi3>
 8007ae0:	0003      	movs	r3, r0
 8007ae2:	3305      	adds	r3, #5
 8007ae4:	613b      	str	r3, [r7, #16]
 8007ae6:	e02a      	b.n	8007b3e <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	00db      	lsls	r3, r3, #3
 8007aec:	0019      	movs	r1, r3
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f7f8 fb08 	bl	8000104 <__udivsi3>
 8007af4:	0003      	movs	r3, r0
 8007af6:	001a      	movs	r2, r3
 8007af8:	0013      	movs	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	189b      	adds	r3, r3, r2
 8007afe:	005b      	lsls	r3, r3, #1
 8007b00:	001a      	movs	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	0019      	movs	r1, r3
 8007b08:	0010      	movs	r0, r2
 8007b0a:	f7f8 fafb 	bl	8000104 <__udivsi3>
 8007b0e:	0003      	movs	r3, r0
 8007b10:	3305      	adds	r3, #5
 8007b12:	613b      	str	r3, [r7, #16]
 8007b14:	e013      	b.n	8007b3e <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007b16:	6979      	ldr	r1, [r7, #20]
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f7f8 faf3 	bl	8000104 <__udivsi3>
 8007b1e:	0003      	movs	r3, r0
 8007b20:	001a      	movs	r2, r3
 8007b22:	0013      	movs	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	189b      	adds	r3, r3, r2
 8007b28:	005b      	lsls	r3, r3, #1
 8007b2a:	001a      	movs	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	0019      	movs	r1, r3
 8007b32:	0010      	movs	r0, r2
 8007b34:	f7f8 fae6 	bl	8000104 <__udivsi3>
 8007b38:	0003      	movs	r3, r0
 8007b3a:	3305      	adds	r3, #5
 8007b3c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	210a      	movs	r1, #10
 8007b42:	0018      	movs	r0, r3
 8007b44:	f7f8 fade 	bl	8000104 <__udivsi3>
 8007b48:	0003      	movs	r3, r0
 8007b4a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	4013      	ands	r3, r2
 8007b52:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	085b      	lsrs	r3, r3, #1
 8007b5c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	021b      	lsls	r3, r3, #8
 8007b62:	61bb      	str	r3, [r7, #24]
 8007b64:	e003      	b.n	8007b6e <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8007b66:	2302      	movs	r3, #2
 8007b68:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d902      	bls.n	8007b7a <HAL_I2S_Init+0x15a>
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	2bff      	cmp	r3, #255	; 0xff
 8007b78:	d907      	bls.n	8007b8a <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7e:	2210      	movs	r2, #16
 8007b80:	431a      	orrs	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e039      	b.n	8007bfe <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	691a      	ldr	r2, [r3, #16]
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	431a      	orrs	r2, r3
 8007b92:	0011      	movs	r1, r2
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	69fa      	ldr	r2, [r7, #28]
 8007b9a:	430a      	orrs	r2, r1
 8007b9c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	69db      	ldr	r3, [r3, #28]
 8007ba4:	4a18      	ldr	r2, [pc, #96]	; (8007c08 <HAL_I2S_Init+0x1e8>)
 8007ba6:	401a      	ands	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6859      	ldr	r1, [r3, #4]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	4319      	orrs	r1, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	4319      	orrs	r1, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	430b      	orrs	r3, r1
 8007bbe:	431a      	orrs	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2180      	movs	r1, #128	; 0x80
 8007bc6:	0109      	lsls	r1, r1, #4
 8007bc8:	430a      	orrs	r2, r1
 8007bca:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	2b30      	cmp	r3, #48	; 0x30
 8007bd2:	d003      	beq.n	8007bdc <HAL_I2S_Init+0x1bc>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	2bb0      	cmp	r3, #176	; 0xb0
 8007bda:	d108      	bne.n	8007bee <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	69da      	ldr	r2, [r3, #28]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2180      	movs	r1, #128	; 0x80
 8007be8:	0149      	lsls	r1, r1, #5
 8007bea:	430a      	orrs	r2, r1
 8007bec:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2235      	movs	r2, #53	; 0x35
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	0018      	movs	r0, r3
 8007c00:	46bd      	mov	sp, r7
 8007c02:	b008      	add	sp, #32
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	46c0      	nop			; (mov r8, r8)
 8007c08:	fffff040 	.word	0xfffff040

08007c0c <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b086      	sub	sp, #24
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	603b      	str	r3, [r7, #0]
 8007c18:	1dbb      	adds	r3, r7, #6
 8007c1a:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <HAL_I2S_Transmit+0x1e>
 8007c22:	1dbb      	adds	r3, r7, #6
 8007c24:	881b      	ldrh	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <HAL_I2S_Transmit+0x22>
  {
    return  HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e0e2      	b.n	8007df4 <HAL_I2S_Transmit+0x1e8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2234      	movs	r2, #52	; 0x34
 8007c32:	5c9b      	ldrb	r3, [r3, r2]
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d101      	bne.n	8007c3e <HAL_I2S_Transmit+0x32>
 8007c3a:	2302      	movs	r3, #2
 8007c3c:	e0da      	b.n	8007df4 <HAL_I2S_Transmit+0x1e8>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2234      	movs	r2, #52	; 0x34
 8007c42:	2101      	movs	r1, #1
 8007c44:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2235      	movs	r2, #53	; 0x35
 8007c4a:	5c9b      	ldrb	r3, [r3, r2]
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d005      	beq.n	8007c5e <HAL_I2S_Transmit+0x52>
  {
    __HAL_UNLOCK(hi2s);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2234      	movs	r2, #52	; 0x34
 8007c56:	2100      	movs	r1, #0
 8007c58:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8007c5a:	2302      	movs	r3, #2
 8007c5c:	e0ca      	b.n	8007df4 <HAL_I2S_Transmit+0x1e8>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2235      	movs	r2, #53	; 0x35
 8007c62:	2103      	movs	r1, #3
 8007c64:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	69db      	ldr	r3, [r3, #28]
 8007c78:	2207      	movs	r2, #7
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	2b03      	cmp	r3, #3
 8007c82:	d002      	beq.n	8007c8a <HAL_I2S_Transmit+0x7e>
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	2b05      	cmp	r3, #5
 8007c88:	d10c      	bne.n	8007ca4 <HAL_I2S_Transmit+0x98>
  {
    hi2s->TxXferSize = (Size << 1U);
 8007c8a:	1dbb      	adds	r3, r7, #6
 8007c8c:	881b      	ldrh	r3, [r3, #0]
 8007c8e:	18db      	adds	r3, r3, r3
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8007c96:	1dbb      	adds	r3, r7, #6
 8007c98:	881b      	ldrh	r3, [r3, #0]
 8007c9a:	18db      	adds	r3, r3, r3
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	845a      	strh	r2, [r3, #34]	; 0x22
 8007ca2:	e007      	b.n	8007cb4 <HAL_I2S_Transmit+0xa8>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	1dba      	adds	r2, r7, #6
 8007ca8:	8812      	ldrh	r2, [r2, #0]
 8007caa:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	1dba      	adds	r2, r7, #6
 8007cb0:	8812      	ldrh	r2, [r2, #0]
 8007cb2:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	69db      	ldr	r3, [r3, #28]
 8007cba:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	69da      	ldr	r2, [r3, #28]
 8007cc2:	2380      	movs	r3, #128	; 0x80
 8007cc4:	00db      	lsls	r3, r3, #3
 8007cc6:	401a      	ands	r2, r3
 8007cc8:	2380      	movs	r3, #128	; 0x80
 8007cca:	00db      	lsls	r3, r3, #3
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d008      	beq.n	8007ce2 <HAL_I2S_Transmit+0xd6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	69da      	ldr	r2, [r3, #28]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2180      	movs	r1, #128	; 0x80
 8007cdc:	00c9      	lsls	r1, r1, #3
 8007cde:	430a      	orrs	r2, r1
 8007ce0:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	2102      	movs	r1, #2
 8007cea:	f000 fa6d 	bl	80081c8 <I2S_WaitFlagStateUntilTimeout>
 8007cee:	1e03      	subs	r3, r0, #0
 8007cf0:	d04d      	beq.n	8007d8e <HAL_I2S_Transmit+0x182>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	431a      	orrs	r2, r3
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2235      	movs	r2, #53	; 0x35
 8007d02:	2101      	movs	r1, #1
 8007d04:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2s);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2234      	movs	r2, #52	; 0x34
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e070      	b.n	8007df4 <HAL_I2S_Transmit+0x1e8>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	69db      	ldr	r3, [r3, #28]
 8007d16:	881a      	ldrh	r2, [r3, #0]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	69db      	ldr	r3, [r3, #28]
 8007d22:	1c9a      	adds	r2, r3, #2
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	61da      	str	r2, [r3, #28]
    hi2s->TxXferCount--;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	845a      	strh	r2, [r3, #34]	; 0x22

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	2102      	movs	r1, #2
 8007d3e:	f000 fa43 	bl	80081c8 <I2S_WaitFlagStateUntilTimeout>
 8007d42:	1e03      	subs	r3, r0, #0
 8007d44:	d00f      	beq.n	8007d66 <HAL_I2S_Transmit+0x15a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	431a      	orrs	r2, r3
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2235      	movs	r2, #53	; 0x35
 8007d56:	2101      	movs	r1, #1
 8007d58:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2s);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2234      	movs	r2, #52	; 0x34
 8007d5e:	2100      	movs	r1, #0
 8007d60:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e046      	b.n	8007df4 <HAL_I2S_Transmit+0x1e8>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	2208      	movs	r2, #8
 8007d6e:	4013      	ands	r3, r2
 8007d70:	2b08      	cmp	r3, #8
 8007d72:	d10c      	bne.n	8007d8e <HAL_I2S_Transmit+0x182>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007d74:	2300      	movs	r3, #0
 8007d76:	613b      	str	r3, [r7, #16]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	613b      	str	r3, [r7, #16]
 8007d80:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d86:	2204      	movs	r2, #4
 8007d88:	431a      	orrs	r2, r3
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	639a      	str	r2, [r3, #56]	; 0x38
  while (hi2s->TxXferCount > 0U)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1bc      	bne.n	8007d12 <HAL_I2S_Transmit+0x106>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	23c0      	movs	r3, #192	; 0xc0
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4013      	ands	r3, r2
 8007da0:	d007      	beq.n	8007db2 <HAL_I2S_Transmit+0x1a6>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 8007da2:	697a      	ldr	r2, [r7, #20]
 8007da4:	23c0      	movs	r3, #192	; 0xc0
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	401a      	ands	r2, r3
 8007daa:	2380      	movs	r3, #128	; 0x80
 8007dac:	005b      	lsls	r3, r3, #1
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d117      	bne.n	8007de2 <HAL_I2S_Transmit+0x1d6>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	2180      	movs	r1, #128	; 0x80
 8007dba:	f000 fa05 	bl	80081c8 <I2S_WaitFlagStateUntilTimeout>
 8007dbe:	1e03      	subs	r3, r0, #0
 8007dc0:	d00f      	beq.n	8007de2 <HAL_I2S_Transmit+0x1d6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	431a      	orrs	r2, r3
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2235      	movs	r2, #53	; 0x35
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2s);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2234      	movs	r2, #52	; 0x34
 8007dda:	2100      	movs	r1, #0
 8007ddc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	e008      	b.n	8007df4 <HAL_I2S_Transmit+0x1e8>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2235      	movs	r2, #53	; 0x35
 8007de6:	2101      	movs	r1, #1
 8007de8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hi2s);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2234      	movs	r2, #52	; 0x34
 8007dee:	2100      	movs	r1, #0
 8007df0:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	0018      	movs	r0, r3
 8007df6:	46bd      	mov	sp, r7
 8007df8:	b006      	add	sp, #24
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	1dbb      	adds	r3, r7, #6
 8007e08:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d003      	beq.n	8007e18 <HAL_I2S_Transmit_DMA+0x1c>
 8007e10:	1dbb      	adds	r3, r7, #6
 8007e12:	881b      	ldrh	r3, [r3, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d101      	bne.n	8007e1c <HAL_I2S_Transmit_DMA+0x20>
  {
    return  HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e091      	b.n	8007f40 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2234      	movs	r2, #52	; 0x34
 8007e20:	5c9b      	ldrb	r3, [r3, r2]
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d101      	bne.n	8007e2c <HAL_I2S_Transmit_DMA+0x30>
 8007e28:	2302      	movs	r3, #2
 8007e2a:	e089      	b.n	8007f40 <HAL_I2S_Transmit_DMA+0x144>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2234      	movs	r2, #52	; 0x34
 8007e30:	2101      	movs	r1, #1
 8007e32:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2235      	movs	r2, #53	; 0x35
 8007e38:	5c9b      	ldrb	r3, [r3, r2]
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d005      	beq.n	8007e4c <HAL_I2S_Transmit_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2234      	movs	r2, #52	; 0x34
 8007e44:	2100      	movs	r1, #0
 8007e46:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8007e48:	2302      	movs	r3, #2
 8007e4a:	e079      	b.n	8007f40 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2235      	movs	r2, #53	; 0x35
 8007e50:	2103      	movs	r1, #3
 8007e52:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	68ba      	ldr	r2, [r7, #8]
 8007e5e:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	69db      	ldr	r3, [r3, #28]
 8007e66:	2207      	movs	r2, #7
 8007e68:	4013      	ands	r3, r2
 8007e6a:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	2b03      	cmp	r3, #3
 8007e70:	d002      	beq.n	8007e78 <HAL_I2S_Transmit_DMA+0x7c>
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	2b05      	cmp	r3, #5
 8007e76:	d10c      	bne.n	8007e92 <HAL_I2S_Transmit_DMA+0x96>
  {
    hi2s->TxXferSize = (Size << 1U);
 8007e78:	1dbb      	adds	r3, r7, #6
 8007e7a:	881b      	ldrh	r3, [r3, #0]
 8007e7c:	18db      	adds	r3, r3, r3
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8007e84:	1dbb      	adds	r3, r7, #6
 8007e86:	881b      	ldrh	r3, [r3, #0]
 8007e88:	18db      	adds	r3, r3, r3
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	845a      	strh	r2, [r3, #34]	; 0x22
 8007e90:	e007      	b.n	8007ea2 <HAL_I2S_Transmit_DMA+0xa6>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	1dba      	adds	r2, r7, #6
 8007e96:	8812      	ldrh	r2, [r2, #0]
 8007e98:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	1dba      	adds	r2, r7, #6
 8007e9e:	8812      	ldrh	r2, [r2, #0]
 8007ea0:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea6:	4a28      	ldr	r2, [pc, #160]	; (8007f48 <HAL_I2S_Transmit_DMA+0x14c>)
 8007ea8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eae:	4a27      	ldr	r2, [pc, #156]	; (8007f4c <HAL_I2S_Transmit_DMA+0x150>)
 8007eb0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb6:	4a26      	ldr	r2, [pc, #152]	; (8007f50 <HAL_I2S_Transmit_DMA+0x154>)
 8007eb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007ec2:	0019      	movs	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007eca:	001a      	movs	r2, r3
                                 hi2s->TxXferSize))
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	8c1b      	ldrh	r3, [r3, #32]
 8007ed0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007ed2:	f7fe f877 	bl	8005fc4 <HAL_DMA_Start_IT>
 8007ed6:	1e03      	subs	r3, r0, #0
 8007ed8:	d00f      	beq.n	8007efa <HAL_I2S_Transmit_DMA+0xfe>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ede:	2208      	movs	r2, #8
 8007ee0:	431a      	orrs	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2235      	movs	r2, #53	; 0x35
 8007eea:	2101      	movs	r1, #1
 8007eec:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2234      	movs	r2, #52	; 0x34
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e022      	b.n	8007f40 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	69da      	ldr	r2, [r3, #28]
 8007f00:	2380      	movs	r3, #128	; 0x80
 8007f02:	00db      	lsls	r3, r3, #3
 8007f04:	4013      	ands	r3, r2
 8007f06:	d108      	bne.n	8007f1a <HAL_I2S_Transmit_DMA+0x11e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	69da      	ldr	r2, [r3, #28]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2180      	movs	r1, #128	; 0x80
 8007f14:	00c9      	lsls	r1, r1, #3
 8007f16:	430a      	orrs	r2, r1
 8007f18:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	2202      	movs	r2, #2
 8007f22:	4013      	ands	r3, r2
 8007f24:	d107      	bne.n	8007f36 <HAL_I2S_Transmit_DMA+0x13a>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	685a      	ldr	r2, [r3, #4]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2102      	movs	r1, #2
 8007f32:	430a      	orrs	r2, r1
 8007f34:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2234      	movs	r2, #52	; 0x34
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	0018      	movs	r0, r3
 8007f42:	46bd      	mov	sp, r7
 8007f44:	b006      	add	sp, #24
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	0800809f 	.word	0x0800809f
 8007f4c:	0800805b 	.word	0x0800805b
 8007f50:	080080bd 	.word	0x080080bd

08007f54 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	099b      	lsrs	r3, r3, #6
 8007f70:	001a      	movs	r2, r3
 8007f72:	2301      	movs	r3, #1
 8007f74:	4013      	ands	r3, r2
 8007f76:	d10e      	bne.n	8007f96 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8007f7e:	d00a      	beq.n	8007f96 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	099b      	lsrs	r3, r3, #6
 8007f84:	001a      	movs	r2, r3
 8007f86:	2301      	movs	r3, #1
 8007f88:	4013      	ands	r3, r2
 8007f8a:	d004      	beq.n	8007f96 <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	0018      	movs	r0, r3
 8007f90:	f000 f8ea 	bl	8008168 <I2S_Receive_IT>
    return;
 8007f94:	e046      	b.n	8008024 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	085b      	lsrs	r3, r3, #1
 8007f9a:	001a      	movs	r2, r3
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	d00a      	beq.n	8007fb8 <HAL_I2S_IRQHandler+0x64>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	09db      	lsrs	r3, r3, #7
 8007fa6:	001a      	movs	r2, r3
 8007fa8:	2301      	movs	r3, #1
 8007faa:	4013      	ands	r3, r2
 8007fac:	d004      	beq.n	8007fb8 <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	0018      	movs	r0, r3
 8007fb2:	f000 f8aa 	bl	800810a <I2S_Transmit_IT>
    return;
 8007fb6:	e035      	b.n	8008024 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	095b      	lsrs	r3, r3, #5
 8007fbc:	001a      	movs	r2, r3
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	d02f      	beq.n	8008024 <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	099b      	lsrs	r3, r3, #6
 8007fc8:	001a      	movs	r2, r3
 8007fca:	2301      	movs	r3, #1
 8007fcc:	4013      	ands	r3, r2
 8007fce:	d00d      	beq.n	8007fec <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	685a      	ldr	r2, [r3, #4]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2160      	movs	r1, #96	; 0x60
 8007fdc:	438a      	bics	r2, r1
 8007fde:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe4:	2202      	movs	r2, #2
 8007fe6:	431a      	orrs	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	08db      	lsrs	r3, r3, #3
 8007ff0:	001a      	movs	r2, r3
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	d00d      	beq.n	8008014 <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	685a      	ldr	r2, [r3, #4]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	21a0      	movs	r1, #160	; 0xa0
 8008004:	438a      	bics	r2, r1
 8008006:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800c:	2204      	movs	r2, #4
 800800e:	431a      	orrs	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2235      	movs	r2, #53	; 0x35
 8008018:	2101      	movs	r1, #1
 800801a:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	0018      	movs	r0, r3
 8008020:	f000 f813 	bl	800804a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8008024:	46bd      	mov	sp, r7
 8008026:	b004      	add	sp, #16
 8008028:	bd80      	pop	{r7, pc}

0800802a <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b082      	sub	sp, #8
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008032:	46c0      	nop			; (mov r8, r8)
 8008034:	46bd      	mov	sp, r7
 8008036:	b002      	add	sp, #8
 8008038:	bd80      	pop	{r7, pc}

0800803a <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b082      	sub	sp, #8
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8008042:	46c0      	nop			; (mov r8, r8)
 8008044:	46bd      	mov	sp, r7
 8008046:	b002      	add	sp, #8
 8008048:	bd80      	pop	{r7, pc}

0800804a <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b082      	sub	sp, #8
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8008052:	46c0      	nop			; (mov r8, r8)
 8008054:	46bd      	mov	sp, r7
 8008056:	b002      	add	sp, #8
 8008058:	bd80      	pop	{r7, pc}

0800805a <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008066:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	69db      	ldr	r3, [r3, #28]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10e      	bne.n	800808e <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	685a      	ldr	r2, [r3, #4]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2102      	movs	r1, #2
 800807c:	438a      	bics	r2, r1
 800807e:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2200      	movs	r2, #0
 8008084:	845a      	strh	r2, [r3, #34]	; 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2235      	movs	r2, #53	; 0x35
 800808a:	2101      	movs	r1, #1
 800808c:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	0018      	movs	r0, r3
 8008092:	f7fa ff81 	bl	8002f98 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8008096:	46c0      	nop			; (mov r8, r8)
 8008098:	46bd      	mov	sp, r7
 800809a:	b004      	add	sp, #16
 800809c:	bd80      	pop	{r7, pc}

0800809e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b084      	sub	sp, #16
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080aa:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	0018      	movs	r0, r3
 80080b0:	f7ff ffbb 	bl	800802a <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80080b4:	46c0      	nop			; (mov r8, r8)
 80080b6:	46bd      	mov	sp, r7
 80080b8:	b004      	add	sp, #16
 80080ba:	bd80      	pop	{r7, pc}

080080bc <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c8:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2103      	movs	r1, #3
 80080d6:	438a      	bics	r2, r1
 80080d8:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	845a      	strh	r2, [r3, #34]	; 0x22
  hi2s->RxXferCount = 0U;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2200      	movs	r2, #0
 80080e4:	855a      	strh	r2, [r3, #42]	; 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2235      	movs	r2, #53	; 0x35
 80080ea:	2101      	movs	r1, #1
 80080ec:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f2:	2208      	movs	r2, #8
 80080f4:	431a      	orrs	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	0018      	movs	r0, r3
 80080fe:	f7ff ffa4 	bl	800804a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8008102:	46c0      	nop			; (mov r8, r8)
 8008104:	46bd      	mov	sp, r7
 8008106:	b004      	add	sp, #16
 8008108:	bd80      	pop	{r7, pc}

0800810a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b082      	sub	sp, #8
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	69db      	ldr	r3, [r3, #28]
 8008116:	881a      	ldrh	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	1c9a      	adds	r2, r3, #2
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800812c:	b29b      	uxth	r3, r3
 800812e:	3b01      	subs	r3, #1
 8008130:	b29a      	uxth	r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800813a:	b29b      	uxth	r3, r3
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10f      	bne.n	8008160 <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	685a      	ldr	r2, [r3, #4]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	21a0      	movs	r1, #160	; 0xa0
 800814c:	438a      	bics	r2, r1
 800814e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2235      	movs	r2, #53	; 0x35
 8008154:	2101      	movs	r1, #1
 8008156:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	0018      	movs	r0, r3
 800815c:	f7fa ff1c 	bl	8002f98 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8008160:	46c0      	nop			; (mov r8, r8)
 8008162:	46bd      	mov	sp, r7
 8008164:	b002      	add	sp, #8
 8008166:	bd80      	pop	{r7, pc}

08008168 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68da      	ldr	r2, [r3, #12]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817a:	b292      	uxth	r2, r2
 800817c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008182:	1c9a      	adds	r2, r3, #2
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800818c:	b29b      	uxth	r3, r3
 800818e:	3b01      	subs	r3, #1
 8008190:	b29a      	uxth	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800819a:	b29b      	uxth	r3, r3
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10f      	bne.n	80081c0 <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	685a      	ldr	r2, [r3, #4]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2160      	movs	r1, #96	; 0x60
 80081ac:	438a      	bics	r2, r1
 80081ae:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2235      	movs	r2, #53	; 0x35
 80081b4:	2101      	movs	r1, #1
 80081b6:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	0018      	movs	r0, r3
 80081bc:	f7ff ff3d 	bl	800803a <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80081c0:	46c0      	nop			; (mov r8, r8)
 80081c2:	46bd      	mov	sp, r7
 80081c4:	b002      	add	sp, #8
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	603b      	str	r3, [r7, #0]
 80081d4:	1dfb      	adds	r3, r7, #7
 80081d6:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80081d8:	f7fd fae8 	bl	80057ac <HAL_GetTick>
 80081dc:	0003      	movs	r3, r0
 80081de:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80081e0:	e017      	b.n	8008212 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	3301      	adds	r3, #1
 80081e6:	d014      	beq.n	8008212 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80081e8:	f7fd fae0 	bl	80057ac <HAL_GetTick>
 80081ec:	0002      	movs	r2, r0
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d902      	bls.n	80081fe <I2S_WaitFlagStateUntilTimeout+0x36>
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d109      	bne.n	8008212 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2235      	movs	r2, #53	; 0x35
 8008202:	2101      	movs	r1, #1
 8008204:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2234      	movs	r2, #52	; 0x34
 800820a:	2100      	movs	r1, #0
 800820c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e00f      	b.n	8008232 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	4013      	ands	r3, r2
 800821c:	68ba      	ldr	r2, [r7, #8]
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	425a      	negs	r2, r3
 8008222:	4153      	adcs	r3, r2
 8008224:	b2db      	uxtb	r3, r3
 8008226:	001a      	movs	r2, r3
 8008228:	1dfb      	adds	r3, r7, #7
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	429a      	cmp	r2, r3
 800822e:	d1d8      	bne.n	80081e2 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	0018      	movs	r0, r3
 8008234:	46bd      	mov	sp, r7
 8008236:	b006      	add	sp, #24
 8008238:	bd80      	pop	{r7, pc}
	...

0800823c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8008244:	4b19      	ldr	r3, [pc, #100]	; (80082ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a19      	ldr	r2, [pc, #100]	; (80082b0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800824a:	4013      	ands	r3, r2
 800824c:	0019      	movs	r1, r3
 800824e:	4b17      	ldr	r3, [pc, #92]	; (80082ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	430a      	orrs	r2, r1
 8008254:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	2380      	movs	r3, #128	; 0x80
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	429a      	cmp	r2, r3
 800825e:	d11f      	bne.n	80082a0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8008260:	4b14      	ldr	r3, [pc, #80]	; (80082b4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	0013      	movs	r3, r2
 8008266:	005b      	lsls	r3, r3, #1
 8008268:	189b      	adds	r3, r3, r2
 800826a:	005b      	lsls	r3, r3, #1
 800826c:	4912      	ldr	r1, [pc, #72]	; (80082b8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800826e:	0018      	movs	r0, r3
 8008270:	f7f7 ff48 	bl	8000104 <__udivsi3>
 8008274:	0003      	movs	r3, r0
 8008276:	3301      	adds	r3, #1
 8008278:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800827a:	e008      	b.n	800828e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d003      	beq.n	800828a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	3b01      	subs	r3, #1
 8008286:	60fb      	str	r3, [r7, #12]
 8008288:	e001      	b.n	800828e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	e009      	b.n	80082a2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800828e:	4b07      	ldr	r3, [pc, #28]	; (80082ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008290:	695a      	ldr	r2, [r3, #20]
 8008292:	2380      	movs	r3, #128	; 0x80
 8008294:	00db      	lsls	r3, r3, #3
 8008296:	401a      	ands	r2, r3
 8008298:	2380      	movs	r3, #128	; 0x80
 800829a:	00db      	lsls	r3, r3, #3
 800829c:	429a      	cmp	r2, r3
 800829e:	d0ed      	beq.n	800827c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	0018      	movs	r0, r3
 80082a4:	46bd      	mov	sp, r7
 80082a6:	b004      	add	sp, #16
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	46c0      	nop			; (mov r8, r8)
 80082ac:	40007000 	.word	0x40007000
 80082b0:	fffff9ff 	.word	0xfffff9ff
 80082b4:	20000038 	.word	0x20000038
 80082b8:	000f4240 	.word	0x000f4240

080082bc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80082c0:	4b03      	ldr	r3, [pc, #12]	; (80082d0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80082c2:	689a      	ldr	r2, [r3, #8]
 80082c4:	23e0      	movs	r3, #224	; 0xe0
 80082c6:	01db      	lsls	r3, r3, #7
 80082c8:	4013      	ands	r3, r2
}
 80082ca:	0018      	movs	r0, r3
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	40021000 	.word	0x40021000

080082d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b088      	sub	sp, #32
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d101      	bne.n	80082e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e304      	b.n	80088f0 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2201      	movs	r2, #1
 80082ec:	4013      	ands	r3, r2
 80082ee:	d100      	bne.n	80082f2 <HAL_RCC_OscConfig+0x1e>
 80082f0:	e07c      	b.n	80083ec <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082f2:	4bc3      	ldr	r3, [pc, #780]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	2238      	movs	r2, #56	; 0x38
 80082f8:	4013      	ands	r3, r2
 80082fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80082fc:	4bc0      	ldr	r3, [pc, #768]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	2203      	movs	r2, #3
 8008302:	4013      	ands	r3, r2
 8008304:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	2b10      	cmp	r3, #16
 800830a:	d102      	bne.n	8008312 <HAL_RCC_OscConfig+0x3e>
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	2b03      	cmp	r3, #3
 8008310:	d002      	beq.n	8008318 <HAL_RCC_OscConfig+0x44>
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	2b08      	cmp	r3, #8
 8008316:	d10b      	bne.n	8008330 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008318:	4bb9      	ldr	r3, [pc, #740]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	2380      	movs	r3, #128	; 0x80
 800831e:	029b      	lsls	r3, r3, #10
 8008320:	4013      	ands	r3, r2
 8008322:	d062      	beq.n	80083ea <HAL_RCC_OscConfig+0x116>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d15e      	bne.n	80083ea <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e2df      	b.n	80088f0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685a      	ldr	r2, [r3, #4]
 8008334:	2380      	movs	r3, #128	; 0x80
 8008336:	025b      	lsls	r3, r3, #9
 8008338:	429a      	cmp	r2, r3
 800833a:	d107      	bne.n	800834c <HAL_RCC_OscConfig+0x78>
 800833c:	4bb0      	ldr	r3, [pc, #704]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	4baf      	ldr	r3, [pc, #700]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008342:	2180      	movs	r1, #128	; 0x80
 8008344:	0249      	lsls	r1, r1, #9
 8008346:	430a      	orrs	r2, r1
 8008348:	601a      	str	r2, [r3, #0]
 800834a:	e020      	b.n	800838e <HAL_RCC_OscConfig+0xba>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	685a      	ldr	r2, [r3, #4]
 8008350:	23a0      	movs	r3, #160	; 0xa0
 8008352:	02db      	lsls	r3, r3, #11
 8008354:	429a      	cmp	r2, r3
 8008356:	d10e      	bne.n	8008376 <HAL_RCC_OscConfig+0xa2>
 8008358:	4ba9      	ldr	r3, [pc, #676]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	4ba8      	ldr	r3, [pc, #672]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 800835e:	2180      	movs	r1, #128	; 0x80
 8008360:	02c9      	lsls	r1, r1, #11
 8008362:	430a      	orrs	r2, r1
 8008364:	601a      	str	r2, [r3, #0]
 8008366:	4ba6      	ldr	r3, [pc, #664]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	4ba5      	ldr	r3, [pc, #660]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 800836c:	2180      	movs	r1, #128	; 0x80
 800836e:	0249      	lsls	r1, r1, #9
 8008370:	430a      	orrs	r2, r1
 8008372:	601a      	str	r2, [r3, #0]
 8008374:	e00b      	b.n	800838e <HAL_RCC_OscConfig+0xba>
 8008376:	4ba2      	ldr	r3, [pc, #648]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	4ba1      	ldr	r3, [pc, #644]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 800837c:	49a1      	ldr	r1, [pc, #644]	; (8008604 <HAL_RCC_OscConfig+0x330>)
 800837e:	400a      	ands	r2, r1
 8008380:	601a      	str	r2, [r3, #0]
 8008382:	4b9f      	ldr	r3, [pc, #636]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	4b9e      	ldr	r3, [pc, #632]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008388:	499f      	ldr	r1, [pc, #636]	; (8008608 <HAL_RCC_OscConfig+0x334>)
 800838a:	400a      	ands	r2, r1
 800838c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d014      	beq.n	80083c0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008396:	f7fd fa09 	bl	80057ac <HAL_GetTick>
 800839a:	0003      	movs	r3, r0
 800839c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800839e:	e008      	b.n	80083b2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083a0:	f7fd fa04 	bl	80057ac <HAL_GetTick>
 80083a4:	0002      	movs	r2, r0
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	1ad3      	subs	r3, r2, r3
 80083aa:	2b64      	cmp	r3, #100	; 0x64
 80083ac:	d901      	bls.n	80083b2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e29e      	b.n	80088f0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80083b2:	4b93      	ldr	r3, [pc, #588]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	2380      	movs	r3, #128	; 0x80
 80083b8:	029b      	lsls	r3, r3, #10
 80083ba:	4013      	ands	r3, r2
 80083bc:	d0f0      	beq.n	80083a0 <HAL_RCC_OscConfig+0xcc>
 80083be:	e015      	b.n	80083ec <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083c0:	f7fd f9f4 	bl	80057ac <HAL_GetTick>
 80083c4:	0003      	movs	r3, r0
 80083c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80083c8:	e008      	b.n	80083dc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083ca:	f7fd f9ef 	bl	80057ac <HAL_GetTick>
 80083ce:	0002      	movs	r2, r0
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	2b64      	cmp	r3, #100	; 0x64
 80083d6:	d901      	bls.n	80083dc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80083d8:	2303      	movs	r3, #3
 80083da:	e289      	b.n	80088f0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80083dc:	4b88      	ldr	r3, [pc, #544]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	2380      	movs	r3, #128	; 0x80
 80083e2:	029b      	lsls	r3, r3, #10
 80083e4:	4013      	ands	r3, r2
 80083e6:	d1f0      	bne.n	80083ca <HAL_RCC_OscConfig+0xf6>
 80083e8:	e000      	b.n	80083ec <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083ea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2202      	movs	r2, #2
 80083f2:	4013      	ands	r3, r2
 80083f4:	d100      	bne.n	80083f8 <HAL_RCC_OscConfig+0x124>
 80083f6:	e099      	b.n	800852c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083f8:	4b81      	ldr	r3, [pc, #516]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	2238      	movs	r2, #56	; 0x38
 80083fe:	4013      	ands	r3, r2
 8008400:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008402:	4b7f      	ldr	r3, [pc, #508]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	2203      	movs	r2, #3
 8008408:	4013      	ands	r3, r2
 800840a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	2b10      	cmp	r3, #16
 8008410:	d102      	bne.n	8008418 <HAL_RCC_OscConfig+0x144>
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	2b02      	cmp	r3, #2
 8008416:	d002      	beq.n	800841e <HAL_RCC_OscConfig+0x14a>
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d135      	bne.n	800848a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800841e:	4b78      	ldr	r3, [pc, #480]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	2380      	movs	r3, #128	; 0x80
 8008424:	00db      	lsls	r3, r3, #3
 8008426:	4013      	ands	r3, r2
 8008428:	d005      	beq.n	8008436 <HAL_RCC_OscConfig+0x162>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d101      	bne.n	8008436 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e25c      	b.n	80088f0 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008436:	4b72      	ldr	r3, [pc, #456]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	4a74      	ldr	r2, [pc, #464]	; (800860c <HAL_RCC_OscConfig+0x338>)
 800843c:	4013      	ands	r3, r2
 800843e:	0019      	movs	r1, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	695b      	ldr	r3, [r3, #20]
 8008444:	021a      	lsls	r2, r3, #8
 8008446:	4b6e      	ldr	r3, [pc, #440]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008448:	430a      	orrs	r2, r1
 800844a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d112      	bne.n	8008478 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008452:	4b6b      	ldr	r3, [pc, #428]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a6e      	ldr	r2, [pc, #440]	; (8008610 <HAL_RCC_OscConfig+0x33c>)
 8008458:	4013      	ands	r3, r2
 800845a:	0019      	movs	r1, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	691a      	ldr	r2, [r3, #16]
 8008460:	4b67      	ldr	r3, [pc, #412]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008462:	430a      	orrs	r2, r1
 8008464:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8008466:	4b66      	ldr	r3, [pc, #408]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	0adb      	lsrs	r3, r3, #11
 800846c:	2207      	movs	r2, #7
 800846e:	4013      	ands	r3, r2
 8008470:	4a68      	ldr	r2, [pc, #416]	; (8008614 <HAL_RCC_OscConfig+0x340>)
 8008472:	40da      	lsrs	r2, r3
 8008474:	4b68      	ldr	r3, [pc, #416]	; (8008618 <HAL_RCC_OscConfig+0x344>)
 8008476:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008478:	4b68      	ldr	r3, [pc, #416]	; (800861c <HAL_RCC_OscConfig+0x348>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	0018      	movs	r0, r3
 800847e:	f7fd f939 	bl	80056f4 <HAL_InitTick>
 8008482:	1e03      	subs	r3, r0, #0
 8008484:	d051      	beq.n	800852a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e232      	b.n	80088f0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d030      	beq.n	80084f4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008492:	4b5b      	ldr	r3, [pc, #364]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a5e      	ldr	r2, [pc, #376]	; (8008610 <HAL_RCC_OscConfig+0x33c>)
 8008498:	4013      	ands	r3, r2
 800849a:	0019      	movs	r1, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	691a      	ldr	r2, [r3, #16]
 80084a0:	4b57      	ldr	r3, [pc, #348]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80084a2:	430a      	orrs	r2, r1
 80084a4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80084a6:	4b56      	ldr	r3, [pc, #344]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	4b55      	ldr	r3, [pc, #340]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80084ac:	2180      	movs	r1, #128	; 0x80
 80084ae:	0049      	lsls	r1, r1, #1
 80084b0:	430a      	orrs	r2, r1
 80084b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084b4:	f7fd f97a 	bl	80057ac <HAL_GetTick>
 80084b8:	0003      	movs	r3, r0
 80084ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084bc:	e008      	b.n	80084d0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084be:	f7fd f975 	bl	80057ac <HAL_GetTick>
 80084c2:	0002      	movs	r2, r0
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d901      	bls.n	80084d0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e20f      	b.n	80088f0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084d0:	4b4b      	ldr	r3, [pc, #300]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	2380      	movs	r3, #128	; 0x80
 80084d6:	00db      	lsls	r3, r3, #3
 80084d8:	4013      	ands	r3, r2
 80084da:	d0f0      	beq.n	80084be <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084dc:	4b48      	ldr	r3, [pc, #288]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	4a4a      	ldr	r2, [pc, #296]	; (800860c <HAL_RCC_OscConfig+0x338>)
 80084e2:	4013      	ands	r3, r2
 80084e4:	0019      	movs	r1, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	021a      	lsls	r2, r3, #8
 80084ec:	4b44      	ldr	r3, [pc, #272]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80084ee:	430a      	orrs	r2, r1
 80084f0:	605a      	str	r2, [r3, #4]
 80084f2:	e01b      	b.n	800852c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80084f4:	4b42      	ldr	r3, [pc, #264]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	4b41      	ldr	r3, [pc, #260]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80084fa:	4949      	ldr	r1, [pc, #292]	; (8008620 <HAL_RCC_OscConfig+0x34c>)
 80084fc:	400a      	ands	r2, r1
 80084fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008500:	f7fd f954 	bl	80057ac <HAL_GetTick>
 8008504:	0003      	movs	r3, r0
 8008506:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008508:	e008      	b.n	800851c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800850a:	f7fd f94f 	bl	80057ac <HAL_GetTick>
 800850e:	0002      	movs	r2, r0
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	2b02      	cmp	r3, #2
 8008516:	d901      	bls.n	800851c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008518:	2303      	movs	r3, #3
 800851a:	e1e9      	b.n	80088f0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800851c:	4b38      	ldr	r3, [pc, #224]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	2380      	movs	r3, #128	; 0x80
 8008522:	00db      	lsls	r3, r3, #3
 8008524:	4013      	ands	r3, r2
 8008526:	d1f0      	bne.n	800850a <HAL_RCC_OscConfig+0x236>
 8008528:	e000      	b.n	800852c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800852a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2208      	movs	r2, #8
 8008532:	4013      	ands	r3, r2
 8008534:	d047      	beq.n	80085c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008536:	4b32      	ldr	r3, [pc, #200]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	2238      	movs	r2, #56	; 0x38
 800853c:	4013      	ands	r3, r2
 800853e:	2b18      	cmp	r3, #24
 8008540:	d10a      	bne.n	8008558 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8008542:	4b2f      	ldr	r3, [pc, #188]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008546:	2202      	movs	r2, #2
 8008548:	4013      	ands	r3, r2
 800854a:	d03c      	beq.n	80085c6 <HAL_RCC_OscConfig+0x2f2>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	699b      	ldr	r3, [r3, #24]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d138      	bne.n	80085c6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	e1cb      	b.n	80088f0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d019      	beq.n	8008594 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8008560:	4b27      	ldr	r3, [pc, #156]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008562:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008564:	4b26      	ldr	r3, [pc, #152]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008566:	2101      	movs	r1, #1
 8008568:	430a      	orrs	r2, r1
 800856a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800856c:	f7fd f91e 	bl	80057ac <HAL_GetTick>
 8008570:	0003      	movs	r3, r0
 8008572:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008574:	e008      	b.n	8008588 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008576:	f7fd f919 	bl	80057ac <HAL_GetTick>
 800857a:	0002      	movs	r2, r0
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	2b02      	cmp	r3, #2
 8008582:	d901      	bls.n	8008588 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8008584:	2303      	movs	r3, #3
 8008586:	e1b3      	b.n	80088f0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008588:	4b1d      	ldr	r3, [pc, #116]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 800858a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800858c:	2202      	movs	r2, #2
 800858e:	4013      	ands	r3, r2
 8008590:	d0f1      	beq.n	8008576 <HAL_RCC_OscConfig+0x2a2>
 8008592:	e018      	b.n	80085c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008594:	4b1a      	ldr	r3, [pc, #104]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008596:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008598:	4b19      	ldr	r3, [pc, #100]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 800859a:	2101      	movs	r1, #1
 800859c:	438a      	bics	r2, r1
 800859e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085a0:	f7fd f904 	bl	80057ac <HAL_GetTick>
 80085a4:	0003      	movs	r3, r0
 80085a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80085a8:	e008      	b.n	80085bc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085aa:	f7fd f8ff 	bl	80057ac <HAL_GetTick>
 80085ae:	0002      	movs	r2, r0
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	1ad3      	subs	r3, r2, r3
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d901      	bls.n	80085bc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e199      	b.n	80088f0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80085bc:	4b10      	ldr	r3, [pc, #64]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80085be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085c0:	2202      	movs	r2, #2
 80085c2:	4013      	ands	r3, r2
 80085c4:	d1f1      	bne.n	80085aa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2204      	movs	r2, #4
 80085cc:	4013      	ands	r3, r2
 80085ce:	d100      	bne.n	80085d2 <HAL_RCC_OscConfig+0x2fe>
 80085d0:	e0c6      	b.n	8008760 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085d2:	231f      	movs	r3, #31
 80085d4:	18fb      	adds	r3, r7, r3
 80085d6:	2200      	movs	r2, #0
 80085d8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80085da:	4b09      	ldr	r3, [pc, #36]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	2238      	movs	r2, #56	; 0x38
 80085e0:	4013      	ands	r3, r2
 80085e2:	2b20      	cmp	r3, #32
 80085e4:	d11e      	bne.n	8008624 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80085e6:	4b06      	ldr	r3, [pc, #24]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80085e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085ea:	2202      	movs	r2, #2
 80085ec:	4013      	ands	r3, r2
 80085ee:	d100      	bne.n	80085f2 <HAL_RCC_OscConfig+0x31e>
 80085f0:	e0b6      	b.n	8008760 <HAL_RCC_OscConfig+0x48c>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d000      	beq.n	80085fc <HAL_RCC_OscConfig+0x328>
 80085fa:	e0b1      	b.n	8008760 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	e177      	b.n	80088f0 <HAL_RCC_OscConfig+0x61c>
 8008600:	40021000 	.word	0x40021000
 8008604:	fffeffff 	.word	0xfffeffff
 8008608:	fffbffff 	.word	0xfffbffff
 800860c:	ffff80ff 	.word	0xffff80ff
 8008610:	ffffc7ff 	.word	0xffffc7ff
 8008614:	00f42400 	.word	0x00f42400
 8008618:	20000038 	.word	0x20000038
 800861c:	2000003c 	.word	0x2000003c
 8008620:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008624:	4bb4      	ldr	r3, [pc, #720]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 8008626:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008628:	2380      	movs	r3, #128	; 0x80
 800862a:	055b      	lsls	r3, r3, #21
 800862c:	4013      	ands	r3, r2
 800862e:	d101      	bne.n	8008634 <HAL_RCC_OscConfig+0x360>
 8008630:	2301      	movs	r3, #1
 8008632:	e000      	b.n	8008636 <HAL_RCC_OscConfig+0x362>
 8008634:	2300      	movs	r3, #0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d011      	beq.n	800865e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800863a:	4baf      	ldr	r3, [pc, #700]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 800863c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800863e:	4bae      	ldr	r3, [pc, #696]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 8008640:	2180      	movs	r1, #128	; 0x80
 8008642:	0549      	lsls	r1, r1, #21
 8008644:	430a      	orrs	r2, r1
 8008646:	63da      	str	r2, [r3, #60]	; 0x3c
 8008648:	4bab      	ldr	r3, [pc, #684]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 800864a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800864c:	2380      	movs	r3, #128	; 0x80
 800864e:	055b      	lsls	r3, r3, #21
 8008650:	4013      	ands	r3, r2
 8008652:	60fb      	str	r3, [r7, #12]
 8008654:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8008656:	231f      	movs	r3, #31
 8008658:	18fb      	adds	r3, r7, r3
 800865a:	2201      	movs	r2, #1
 800865c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800865e:	4ba7      	ldr	r3, [pc, #668]	; (80088fc <HAL_RCC_OscConfig+0x628>)
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	2380      	movs	r3, #128	; 0x80
 8008664:	005b      	lsls	r3, r3, #1
 8008666:	4013      	ands	r3, r2
 8008668:	d11a      	bne.n	80086a0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800866a:	4ba4      	ldr	r3, [pc, #656]	; (80088fc <HAL_RCC_OscConfig+0x628>)
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	4ba3      	ldr	r3, [pc, #652]	; (80088fc <HAL_RCC_OscConfig+0x628>)
 8008670:	2180      	movs	r1, #128	; 0x80
 8008672:	0049      	lsls	r1, r1, #1
 8008674:	430a      	orrs	r2, r1
 8008676:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8008678:	f7fd f898 	bl	80057ac <HAL_GetTick>
 800867c:	0003      	movs	r3, r0
 800867e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008680:	e008      	b.n	8008694 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008682:	f7fd f893 	bl	80057ac <HAL_GetTick>
 8008686:	0002      	movs	r2, r0
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	2b02      	cmp	r3, #2
 800868e:	d901      	bls.n	8008694 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8008690:	2303      	movs	r3, #3
 8008692:	e12d      	b.n	80088f0 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008694:	4b99      	ldr	r3, [pc, #612]	; (80088fc <HAL_RCC_OscConfig+0x628>)
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	2380      	movs	r3, #128	; 0x80
 800869a:	005b      	lsls	r3, r3, #1
 800869c:	4013      	ands	r3, r2
 800869e:	d0f0      	beq.n	8008682 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d106      	bne.n	80086b6 <HAL_RCC_OscConfig+0x3e2>
 80086a8:	4b93      	ldr	r3, [pc, #588]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 80086aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80086ac:	4b92      	ldr	r3, [pc, #584]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 80086ae:	2101      	movs	r1, #1
 80086b0:	430a      	orrs	r2, r1
 80086b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80086b4:	e01c      	b.n	80086f0 <HAL_RCC_OscConfig+0x41c>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	2b05      	cmp	r3, #5
 80086bc:	d10c      	bne.n	80086d8 <HAL_RCC_OscConfig+0x404>
 80086be:	4b8e      	ldr	r3, [pc, #568]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 80086c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80086c2:	4b8d      	ldr	r3, [pc, #564]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 80086c4:	2104      	movs	r1, #4
 80086c6:	430a      	orrs	r2, r1
 80086c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80086ca:	4b8b      	ldr	r3, [pc, #556]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 80086cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80086ce:	4b8a      	ldr	r3, [pc, #552]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 80086d0:	2101      	movs	r1, #1
 80086d2:	430a      	orrs	r2, r1
 80086d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80086d6:	e00b      	b.n	80086f0 <HAL_RCC_OscConfig+0x41c>
 80086d8:	4b87      	ldr	r3, [pc, #540]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 80086da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80086dc:	4b86      	ldr	r3, [pc, #536]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 80086de:	2101      	movs	r1, #1
 80086e0:	438a      	bics	r2, r1
 80086e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80086e4:	4b84      	ldr	r3, [pc, #528]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 80086e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80086e8:	4b83      	ldr	r3, [pc, #524]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 80086ea:	2104      	movs	r1, #4
 80086ec:	438a      	bics	r2, r1
 80086ee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d014      	beq.n	8008722 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086f8:	f7fd f858 	bl	80057ac <HAL_GetTick>
 80086fc:	0003      	movs	r3, r0
 80086fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008700:	e009      	b.n	8008716 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008702:	f7fd f853 	bl	80057ac <HAL_GetTick>
 8008706:	0002      	movs	r2, r0
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	4a7c      	ldr	r2, [pc, #496]	; (8008900 <HAL_RCC_OscConfig+0x62c>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d901      	bls.n	8008716 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8008712:	2303      	movs	r3, #3
 8008714:	e0ec      	b.n	80088f0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008716:	4b78      	ldr	r3, [pc, #480]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 8008718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800871a:	2202      	movs	r2, #2
 800871c:	4013      	ands	r3, r2
 800871e:	d0f0      	beq.n	8008702 <HAL_RCC_OscConfig+0x42e>
 8008720:	e013      	b.n	800874a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008722:	f7fd f843 	bl	80057ac <HAL_GetTick>
 8008726:	0003      	movs	r3, r0
 8008728:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800872a:	e009      	b.n	8008740 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800872c:	f7fd f83e 	bl	80057ac <HAL_GetTick>
 8008730:	0002      	movs	r2, r0
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	4a72      	ldr	r2, [pc, #456]	; (8008900 <HAL_RCC_OscConfig+0x62c>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d901      	bls.n	8008740 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800873c:	2303      	movs	r3, #3
 800873e:	e0d7      	b.n	80088f0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008740:	4b6d      	ldr	r3, [pc, #436]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 8008742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008744:	2202      	movs	r2, #2
 8008746:	4013      	ands	r3, r2
 8008748:	d1f0      	bne.n	800872c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800874a:	231f      	movs	r3, #31
 800874c:	18fb      	adds	r3, r7, r3
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d105      	bne.n	8008760 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008754:	4b68      	ldr	r3, [pc, #416]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 8008756:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008758:	4b67      	ldr	r3, [pc, #412]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 800875a:	496a      	ldr	r1, [pc, #424]	; (8008904 <HAL_RCC_OscConfig+0x630>)
 800875c:	400a      	ands	r2, r1
 800875e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	69db      	ldr	r3, [r3, #28]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d100      	bne.n	800876a <HAL_RCC_OscConfig+0x496>
 8008768:	e0c1      	b.n	80088ee <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800876a:	4b63      	ldr	r3, [pc, #396]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	2238      	movs	r2, #56	; 0x38
 8008770:	4013      	ands	r3, r2
 8008772:	2b10      	cmp	r3, #16
 8008774:	d100      	bne.n	8008778 <HAL_RCC_OscConfig+0x4a4>
 8008776:	e081      	b.n	800887c <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	69db      	ldr	r3, [r3, #28]
 800877c:	2b02      	cmp	r3, #2
 800877e:	d156      	bne.n	800882e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008780:	4b5d      	ldr	r3, [pc, #372]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	4b5c      	ldr	r3, [pc, #368]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 8008786:	4960      	ldr	r1, [pc, #384]	; (8008908 <HAL_RCC_OscConfig+0x634>)
 8008788:	400a      	ands	r2, r1
 800878a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800878c:	f7fd f80e 	bl	80057ac <HAL_GetTick>
 8008790:	0003      	movs	r3, r0
 8008792:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008794:	e008      	b.n	80087a8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008796:	f7fd f809 	bl	80057ac <HAL_GetTick>
 800879a:	0002      	movs	r2, r0
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	1ad3      	subs	r3, r2, r3
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d901      	bls.n	80087a8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e0a3      	b.n	80088f0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80087a8:	4b53      	ldr	r3, [pc, #332]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	2380      	movs	r3, #128	; 0x80
 80087ae:	049b      	lsls	r3, r3, #18
 80087b0:	4013      	ands	r3, r2
 80087b2:	d1f0      	bne.n	8008796 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80087b4:	4b50      	ldr	r3, [pc, #320]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	4a54      	ldr	r2, [pc, #336]	; (800890c <HAL_RCC_OscConfig+0x638>)
 80087ba:	4013      	ands	r3, r2
 80087bc:	0019      	movs	r1, r3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a1a      	ldr	r2, [r3, #32]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c6:	431a      	orrs	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087cc:	021b      	lsls	r3, r3, #8
 80087ce:	431a      	orrs	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d4:	431a      	orrs	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087da:	431a      	orrs	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e0:	431a      	orrs	r2, r3
 80087e2:	4b45      	ldr	r3, [pc, #276]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 80087e4:	430a      	orrs	r2, r1
 80087e6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087e8:	4b43      	ldr	r3, [pc, #268]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	4b42      	ldr	r3, [pc, #264]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 80087ee:	2180      	movs	r1, #128	; 0x80
 80087f0:	0449      	lsls	r1, r1, #17
 80087f2:	430a      	orrs	r2, r1
 80087f4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80087f6:	4b40      	ldr	r3, [pc, #256]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 80087f8:	68da      	ldr	r2, [r3, #12]
 80087fa:	4b3f      	ldr	r3, [pc, #252]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 80087fc:	2180      	movs	r1, #128	; 0x80
 80087fe:	0549      	lsls	r1, r1, #21
 8008800:	430a      	orrs	r2, r1
 8008802:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008804:	f7fc ffd2 	bl	80057ac <HAL_GetTick>
 8008808:	0003      	movs	r3, r0
 800880a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800880c:	e008      	b.n	8008820 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800880e:	f7fc ffcd 	bl	80057ac <HAL_GetTick>
 8008812:	0002      	movs	r2, r0
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	2b02      	cmp	r3, #2
 800881a:	d901      	bls.n	8008820 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	e067      	b.n	80088f0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008820:	4b35      	ldr	r3, [pc, #212]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	2380      	movs	r3, #128	; 0x80
 8008826:	049b      	lsls	r3, r3, #18
 8008828:	4013      	ands	r3, r2
 800882a:	d0f0      	beq.n	800880e <HAL_RCC_OscConfig+0x53a>
 800882c:	e05f      	b.n	80088ee <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800882e:	4b32      	ldr	r3, [pc, #200]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	4b31      	ldr	r3, [pc, #196]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 8008834:	4934      	ldr	r1, [pc, #208]	; (8008908 <HAL_RCC_OscConfig+0x634>)
 8008836:	400a      	ands	r2, r1
 8008838:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800883a:	4b2f      	ldr	r3, [pc, #188]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 800883c:	68da      	ldr	r2, [r3, #12]
 800883e:	4b2e      	ldr	r3, [pc, #184]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 8008840:	2103      	movs	r1, #3
 8008842:	438a      	bics	r2, r1
 8008844:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8008846:	4b2c      	ldr	r3, [pc, #176]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 8008848:	68da      	ldr	r2, [r3, #12]
 800884a:	4b2b      	ldr	r3, [pc, #172]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 800884c:	4930      	ldr	r1, [pc, #192]	; (8008910 <HAL_RCC_OscConfig+0x63c>)
 800884e:	400a      	ands	r2, r1
 8008850:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008852:	f7fc ffab 	bl	80057ac <HAL_GetTick>
 8008856:	0003      	movs	r3, r0
 8008858:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800885a:	e008      	b.n	800886e <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800885c:	f7fc ffa6 	bl	80057ac <HAL_GetTick>
 8008860:	0002      	movs	r2, r0
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	2b02      	cmp	r3, #2
 8008868:	d901      	bls.n	800886e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	e040      	b.n	80088f0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800886e:	4b22      	ldr	r3, [pc, #136]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	2380      	movs	r3, #128	; 0x80
 8008874:	049b      	lsls	r3, r3, #18
 8008876:	4013      	ands	r3, r2
 8008878:	d1f0      	bne.n	800885c <HAL_RCC_OscConfig+0x588>
 800887a:	e038      	b.n	80088ee <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	69db      	ldr	r3, [r3, #28]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d101      	bne.n	8008888 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	e033      	b.n	80088f0 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8008888:	4b1b      	ldr	r3, [pc, #108]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	2203      	movs	r2, #3
 8008892:	401a      	ands	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6a1b      	ldr	r3, [r3, #32]
 8008898:	429a      	cmp	r2, r3
 800889a:	d126      	bne.n	80088ea <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	2270      	movs	r2, #112	; 0x70
 80088a0:	401a      	ands	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d11f      	bne.n	80088ea <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80088aa:	697a      	ldr	r2, [r7, #20]
 80088ac:	23fe      	movs	r3, #254	; 0xfe
 80088ae:	01db      	lsls	r3, r3, #7
 80088b0:	401a      	ands	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d116      	bne.n	80088ea <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	23f8      	movs	r3, #248	; 0xf8
 80088c0:	039b      	lsls	r3, r3, #14
 80088c2:	401a      	ands	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d10e      	bne.n	80088ea <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80088cc:	697a      	ldr	r2, [r7, #20]
 80088ce:	23e0      	movs	r3, #224	; 0xe0
 80088d0:	051b      	lsls	r3, r3, #20
 80088d2:	401a      	ands	r2, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80088d8:	429a      	cmp	r2, r3
 80088da:	d106      	bne.n	80088ea <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	0f5b      	lsrs	r3, r3, #29
 80088e0:	075a      	lsls	r2, r3, #29
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d001      	beq.n	80088ee <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e000      	b.n	80088f0 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	0018      	movs	r0, r3
 80088f2:	46bd      	mov	sp, r7
 80088f4:	b008      	add	sp, #32
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	40021000 	.word	0x40021000
 80088fc:	40007000 	.word	0x40007000
 8008900:	00001388 	.word	0x00001388
 8008904:	efffffff 	.word	0xefffffff
 8008908:	feffffff 	.word	0xfeffffff
 800890c:	11c1808c 	.word	0x11c1808c
 8008910:	eefeffff 	.word	0xeefeffff

08008914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d101      	bne.n	8008928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	e0e9      	b.n	8008afc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008928:	4b76      	ldr	r3, [pc, #472]	; (8008b04 <HAL_RCC_ClockConfig+0x1f0>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2207      	movs	r2, #7
 800892e:	4013      	ands	r3, r2
 8008930:	683a      	ldr	r2, [r7, #0]
 8008932:	429a      	cmp	r2, r3
 8008934:	d91e      	bls.n	8008974 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008936:	4b73      	ldr	r3, [pc, #460]	; (8008b04 <HAL_RCC_ClockConfig+0x1f0>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2207      	movs	r2, #7
 800893c:	4393      	bics	r3, r2
 800893e:	0019      	movs	r1, r3
 8008940:	4b70      	ldr	r3, [pc, #448]	; (8008b04 <HAL_RCC_ClockConfig+0x1f0>)
 8008942:	683a      	ldr	r2, [r7, #0]
 8008944:	430a      	orrs	r2, r1
 8008946:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008948:	f7fc ff30 	bl	80057ac <HAL_GetTick>
 800894c:	0003      	movs	r3, r0
 800894e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008950:	e009      	b.n	8008966 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008952:	f7fc ff2b 	bl	80057ac <HAL_GetTick>
 8008956:	0002      	movs	r2, r0
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	4a6a      	ldr	r2, [pc, #424]	; (8008b08 <HAL_RCC_ClockConfig+0x1f4>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d901      	bls.n	8008966 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008962:	2303      	movs	r3, #3
 8008964:	e0ca      	b.n	8008afc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008966:	4b67      	ldr	r3, [pc, #412]	; (8008b04 <HAL_RCC_ClockConfig+0x1f0>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2207      	movs	r2, #7
 800896c:	4013      	ands	r3, r2
 800896e:	683a      	ldr	r2, [r7, #0]
 8008970:	429a      	cmp	r2, r3
 8008972:	d1ee      	bne.n	8008952 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2202      	movs	r2, #2
 800897a:	4013      	ands	r3, r2
 800897c:	d015      	beq.n	80089aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2204      	movs	r2, #4
 8008984:	4013      	ands	r3, r2
 8008986:	d006      	beq.n	8008996 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008988:	4b60      	ldr	r3, [pc, #384]	; (8008b0c <HAL_RCC_ClockConfig+0x1f8>)
 800898a:	689a      	ldr	r2, [r3, #8]
 800898c:	4b5f      	ldr	r3, [pc, #380]	; (8008b0c <HAL_RCC_ClockConfig+0x1f8>)
 800898e:	21e0      	movs	r1, #224	; 0xe0
 8008990:	01c9      	lsls	r1, r1, #7
 8008992:	430a      	orrs	r2, r1
 8008994:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008996:	4b5d      	ldr	r3, [pc, #372]	; (8008b0c <HAL_RCC_ClockConfig+0x1f8>)
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	4a5d      	ldr	r2, [pc, #372]	; (8008b10 <HAL_RCC_ClockConfig+0x1fc>)
 800899c:	4013      	ands	r3, r2
 800899e:	0019      	movs	r1, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	689a      	ldr	r2, [r3, #8]
 80089a4:	4b59      	ldr	r3, [pc, #356]	; (8008b0c <HAL_RCC_ClockConfig+0x1f8>)
 80089a6:	430a      	orrs	r2, r1
 80089a8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2201      	movs	r2, #1
 80089b0:	4013      	ands	r3, r2
 80089b2:	d057      	beq.n	8008a64 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d107      	bne.n	80089cc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089bc:	4b53      	ldr	r3, [pc, #332]	; (8008b0c <HAL_RCC_ClockConfig+0x1f8>)
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	2380      	movs	r3, #128	; 0x80
 80089c2:	029b      	lsls	r3, r3, #10
 80089c4:	4013      	ands	r3, r2
 80089c6:	d12b      	bne.n	8008a20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e097      	b.n	8008afc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d107      	bne.n	80089e4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80089d4:	4b4d      	ldr	r3, [pc, #308]	; (8008b0c <HAL_RCC_ClockConfig+0x1f8>)
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	2380      	movs	r3, #128	; 0x80
 80089da:	049b      	lsls	r3, r3, #18
 80089dc:	4013      	ands	r3, r2
 80089de:	d11f      	bne.n	8008a20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e08b      	b.n	8008afc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d107      	bne.n	80089fc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80089ec:	4b47      	ldr	r3, [pc, #284]	; (8008b0c <HAL_RCC_ClockConfig+0x1f8>)
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	2380      	movs	r3, #128	; 0x80
 80089f2:	00db      	lsls	r3, r3, #3
 80089f4:	4013      	ands	r3, r2
 80089f6:	d113      	bne.n	8008a20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e07f      	b.n	8008afc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	2b03      	cmp	r3, #3
 8008a02:	d106      	bne.n	8008a12 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008a04:	4b41      	ldr	r3, [pc, #260]	; (8008b0c <HAL_RCC_ClockConfig+0x1f8>)
 8008a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a08:	2202      	movs	r2, #2
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	d108      	bne.n	8008a20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e074      	b.n	8008afc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a12:	4b3e      	ldr	r3, [pc, #248]	; (8008b0c <HAL_RCC_ClockConfig+0x1f8>)
 8008a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a16:	2202      	movs	r2, #2
 8008a18:	4013      	ands	r3, r2
 8008a1a:	d101      	bne.n	8008a20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e06d      	b.n	8008afc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a20:	4b3a      	ldr	r3, [pc, #232]	; (8008b0c <HAL_RCC_ClockConfig+0x1f8>)
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	2207      	movs	r2, #7
 8008a26:	4393      	bics	r3, r2
 8008a28:	0019      	movs	r1, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	685a      	ldr	r2, [r3, #4]
 8008a2e:	4b37      	ldr	r3, [pc, #220]	; (8008b0c <HAL_RCC_ClockConfig+0x1f8>)
 8008a30:	430a      	orrs	r2, r1
 8008a32:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a34:	f7fc feba 	bl	80057ac <HAL_GetTick>
 8008a38:	0003      	movs	r3, r0
 8008a3a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a3c:	e009      	b.n	8008a52 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a3e:	f7fc feb5 	bl	80057ac <HAL_GetTick>
 8008a42:	0002      	movs	r2, r0
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	1ad3      	subs	r3, r2, r3
 8008a48:	4a2f      	ldr	r2, [pc, #188]	; (8008b08 <HAL_RCC_ClockConfig+0x1f4>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d901      	bls.n	8008a52 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	e054      	b.n	8008afc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a52:	4b2e      	ldr	r3, [pc, #184]	; (8008b0c <HAL_RCC_ClockConfig+0x1f8>)
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	2238      	movs	r2, #56	; 0x38
 8008a58:	401a      	ands	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	00db      	lsls	r3, r3, #3
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d1ec      	bne.n	8008a3e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008a64:	4b27      	ldr	r3, [pc, #156]	; (8008b04 <HAL_RCC_ClockConfig+0x1f0>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2207      	movs	r2, #7
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	683a      	ldr	r2, [r7, #0]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d21e      	bcs.n	8008ab0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a72:	4b24      	ldr	r3, [pc, #144]	; (8008b04 <HAL_RCC_ClockConfig+0x1f0>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2207      	movs	r2, #7
 8008a78:	4393      	bics	r3, r2
 8008a7a:	0019      	movs	r1, r3
 8008a7c:	4b21      	ldr	r3, [pc, #132]	; (8008b04 <HAL_RCC_ClockConfig+0x1f0>)
 8008a7e:	683a      	ldr	r2, [r7, #0]
 8008a80:	430a      	orrs	r2, r1
 8008a82:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008a84:	f7fc fe92 	bl	80057ac <HAL_GetTick>
 8008a88:	0003      	movs	r3, r0
 8008a8a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008a8c:	e009      	b.n	8008aa2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a8e:	f7fc fe8d 	bl	80057ac <HAL_GetTick>
 8008a92:	0002      	movs	r2, r0
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	1ad3      	subs	r3, r2, r3
 8008a98:	4a1b      	ldr	r2, [pc, #108]	; (8008b08 <HAL_RCC_ClockConfig+0x1f4>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d901      	bls.n	8008aa2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	e02c      	b.n	8008afc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008aa2:	4b18      	ldr	r3, [pc, #96]	; (8008b04 <HAL_RCC_ClockConfig+0x1f0>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2207      	movs	r2, #7
 8008aa8:	4013      	ands	r3, r2
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d1ee      	bne.n	8008a8e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2204      	movs	r2, #4
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	d009      	beq.n	8008ace <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008aba:	4b14      	ldr	r3, [pc, #80]	; (8008b0c <HAL_RCC_ClockConfig+0x1f8>)
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	4a15      	ldr	r2, [pc, #84]	; (8008b14 <HAL_RCC_ClockConfig+0x200>)
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	0019      	movs	r1, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	68da      	ldr	r2, [r3, #12]
 8008ac8:	4b10      	ldr	r3, [pc, #64]	; (8008b0c <HAL_RCC_ClockConfig+0x1f8>)
 8008aca:	430a      	orrs	r2, r1
 8008acc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008ace:	f000 f829 	bl	8008b24 <HAL_RCC_GetSysClockFreq>
 8008ad2:	0001      	movs	r1, r0
 8008ad4:	4b0d      	ldr	r3, [pc, #52]	; (8008b0c <HAL_RCC_ClockConfig+0x1f8>)
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	0a1b      	lsrs	r3, r3, #8
 8008ada:	220f      	movs	r2, #15
 8008adc:	401a      	ands	r2, r3
 8008ade:	4b0e      	ldr	r3, [pc, #56]	; (8008b18 <HAL_RCC_ClockConfig+0x204>)
 8008ae0:	0092      	lsls	r2, r2, #2
 8008ae2:	58d3      	ldr	r3, [r2, r3]
 8008ae4:	221f      	movs	r2, #31
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	000a      	movs	r2, r1
 8008aea:	40da      	lsrs	r2, r3
 8008aec:	4b0b      	ldr	r3, [pc, #44]	; (8008b1c <HAL_RCC_ClockConfig+0x208>)
 8008aee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008af0:	4b0b      	ldr	r3, [pc, #44]	; (8008b20 <HAL_RCC_ClockConfig+0x20c>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	0018      	movs	r0, r3
 8008af6:	f7fc fdfd 	bl	80056f4 <HAL_InitTick>
 8008afa:	0003      	movs	r3, r0
}
 8008afc:	0018      	movs	r0, r3
 8008afe:	46bd      	mov	sp, r7
 8008b00:	b004      	add	sp, #16
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	40022000 	.word	0x40022000
 8008b08:	00001388 	.word	0x00001388
 8008b0c:	40021000 	.word	0x40021000
 8008b10:	fffff0ff 	.word	0xfffff0ff
 8008b14:	ffff8fff 	.word	0xffff8fff
 8008b18:	0801675c 	.word	0x0801675c
 8008b1c:	20000038 	.word	0x20000038
 8008b20:	2000003c 	.word	0x2000003c

08008b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b086      	sub	sp, #24
 8008b28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008b2a:	4b3c      	ldr	r3, [pc, #240]	; (8008c1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	2238      	movs	r2, #56	; 0x38
 8008b30:	4013      	ands	r3, r2
 8008b32:	d10f      	bne.n	8008b54 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008b34:	4b39      	ldr	r3, [pc, #228]	; (8008c1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	0adb      	lsrs	r3, r3, #11
 8008b3a:	2207      	movs	r2, #7
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	2201      	movs	r2, #1
 8008b40:	409a      	lsls	r2, r3
 8008b42:	0013      	movs	r3, r2
 8008b44:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	4835      	ldr	r0, [pc, #212]	; (8008c20 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008b4a:	f7f7 fadb 	bl	8000104 <__udivsi3>
 8008b4e:	0003      	movs	r3, r0
 8008b50:	613b      	str	r3, [r7, #16]
 8008b52:	e05d      	b.n	8008c10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008b54:	4b31      	ldr	r3, [pc, #196]	; (8008c1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	2238      	movs	r2, #56	; 0x38
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	2b08      	cmp	r3, #8
 8008b5e:	d102      	bne.n	8008b66 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008b60:	4b30      	ldr	r3, [pc, #192]	; (8008c24 <HAL_RCC_GetSysClockFreq+0x100>)
 8008b62:	613b      	str	r3, [r7, #16]
 8008b64:	e054      	b.n	8008c10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b66:	4b2d      	ldr	r3, [pc, #180]	; (8008c1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	2238      	movs	r2, #56	; 0x38
 8008b6c:	4013      	ands	r3, r2
 8008b6e:	2b10      	cmp	r3, #16
 8008b70:	d138      	bne.n	8008be4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008b72:	4b2a      	ldr	r3, [pc, #168]	; (8008c1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	2203      	movs	r2, #3
 8008b78:	4013      	ands	r3, r2
 8008b7a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008b7c:	4b27      	ldr	r3, [pc, #156]	; (8008c1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	091b      	lsrs	r3, r3, #4
 8008b82:	2207      	movs	r2, #7
 8008b84:	4013      	ands	r3, r2
 8008b86:	3301      	adds	r3, #1
 8008b88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2b03      	cmp	r3, #3
 8008b8e:	d10d      	bne.n	8008bac <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008b90:	68b9      	ldr	r1, [r7, #8]
 8008b92:	4824      	ldr	r0, [pc, #144]	; (8008c24 <HAL_RCC_GetSysClockFreq+0x100>)
 8008b94:	f7f7 fab6 	bl	8000104 <__udivsi3>
 8008b98:	0003      	movs	r3, r0
 8008b9a:	0019      	movs	r1, r3
 8008b9c:	4b1f      	ldr	r3, [pc, #124]	; (8008c1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	0a1b      	lsrs	r3, r3, #8
 8008ba2:	227f      	movs	r2, #127	; 0x7f
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	434b      	muls	r3, r1
 8008ba8:	617b      	str	r3, [r7, #20]
        break;
 8008baa:	e00d      	b.n	8008bc8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8008bac:	68b9      	ldr	r1, [r7, #8]
 8008bae:	481c      	ldr	r0, [pc, #112]	; (8008c20 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008bb0:	f7f7 faa8 	bl	8000104 <__udivsi3>
 8008bb4:	0003      	movs	r3, r0
 8008bb6:	0019      	movs	r1, r3
 8008bb8:	4b18      	ldr	r3, [pc, #96]	; (8008c1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	0a1b      	lsrs	r3, r3, #8
 8008bbe:	227f      	movs	r2, #127	; 0x7f
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	434b      	muls	r3, r1
 8008bc4:	617b      	str	r3, [r7, #20]
        break;
 8008bc6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8008bc8:	4b14      	ldr	r3, [pc, #80]	; (8008c1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	0f5b      	lsrs	r3, r3, #29
 8008bce:	2207      	movs	r2, #7
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8008bd6:	6879      	ldr	r1, [r7, #4]
 8008bd8:	6978      	ldr	r0, [r7, #20]
 8008bda:	f7f7 fa93 	bl	8000104 <__udivsi3>
 8008bde:	0003      	movs	r3, r0
 8008be0:	613b      	str	r3, [r7, #16]
 8008be2:	e015      	b.n	8008c10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008be4:	4b0d      	ldr	r3, [pc, #52]	; (8008c1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	2238      	movs	r2, #56	; 0x38
 8008bea:	4013      	ands	r3, r2
 8008bec:	2b20      	cmp	r3, #32
 8008bee:	d103      	bne.n	8008bf8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008bf0:	2380      	movs	r3, #128	; 0x80
 8008bf2:	021b      	lsls	r3, r3, #8
 8008bf4:	613b      	str	r3, [r7, #16]
 8008bf6:	e00b      	b.n	8008c10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008bf8:	4b08      	ldr	r3, [pc, #32]	; (8008c1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	2238      	movs	r2, #56	; 0x38
 8008bfe:	4013      	ands	r3, r2
 8008c00:	2b18      	cmp	r3, #24
 8008c02:	d103      	bne.n	8008c0c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008c04:	23fa      	movs	r3, #250	; 0xfa
 8008c06:	01db      	lsls	r3, r3, #7
 8008c08:	613b      	str	r3, [r7, #16]
 8008c0a:	e001      	b.n	8008c10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008c10:	693b      	ldr	r3, [r7, #16]
}
 8008c12:	0018      	movs	r0, r3
 8008c14:	46bd      	mov	sp, r7
 8008c16:	b006      	add	sp, #24
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	46c0      	nop			; (mov r8, r8)
 8008c1c:	40021000 	.word	0x40021000
 8008c20:	00f42400 	.word	0x00f42400
 8008c24:	007a1200 	.word	0x007a1200

08008c28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c2c:	4b02      	ldr	r3, [pc, #8]	; (8008c38 <HAL_RCC_GetHCLKFreq+0x10>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
}
 8008c30:	0018      	movs	r0, r3
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	46c0      	nop			; (mov r8, r8)
 8008c38:	20000038 	.word	0x20000038

08008c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c3c:	b5b0      	push	{r4, r5, r7, lr}
 8008c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008c40:	f7ff fff2 	bl	8008c28 <HAL_RCC_GetHCLKFreq>
 8008c44:	0004      	movs	r4, r0
 8008c46:	f7ff fb39 	bl	80082bc <LL_RCC_GetAPB1Prescaler>
 8008c4a:	0003      	movs	r3, r0
 8008c4c:	0b1a      	lsrs	r2, r3, #12
 8008c4e:	4b05      	ldr	r3, [pc, #20]	; (8008c64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c50:	0092      	lsls	r2, r2, #2
 8008c52:	58d3      	ldr	r3, [r2, r3]
 8008c54:	221f      	movs	r2, #31
 8008c56:	4013      	ands	r3, r2
 8008c58:	40dc      	lsrs	r4, r3
 8008c5a:	0023      	movs	r3, r4
}
 8008c5c:	0018      	movs	r0, r3
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bdb0      	pop	{r4, r5, r7, pc}
 8008c62:	46c0      	nop			; (mov r8, r8)
 8008c64:	0801679c 	.word	0x0801679c

08008c68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b086      	sub	sp, #24
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008c70:	2313      	movs	r3, #19
 8008c72:	18fb      	adds	r3, r7, r3
 8008c74:	2200      	movs	r2, #0
 8008c76:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008c78:	2312      	movs	r3, #18
 8008c7a:	18fb      	adds	r3, r7, r3
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	2380      	movs	r3, #128	; 0x80
 8008c86:	029b      	lsls	r3, r3, #10
 8008c88:	4013      	ands	r3, r2
 8008c8a:	d100      	bne.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8008c8c:	e0a3      	b.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c8e:	2011      	movs	r0, #17
 8008c90:	183b      	adds	r3, r7, r0
 8008c92:	2200      	movs	r2, #0
 8008c94:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c96:	4bc3      	ldr	r3, [pc, #780]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008c98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c9a:	2380      	movs	r3, #128	; 0x80
 8008c9c:	055b      	lsls	r3, r3, #21
 8008c9e:	4013      	ands	r3, r2
 8008ca0:	d110      	bne.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ca2:	4bc0      	ldr	r3, [pc, #768]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ca4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ca6:	4bbf      	ldr	r3, [pc, #764]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ca8:	2180      	movs	r1, #128	; 0x80
 8008caa:	0549      	lsls	r1, r1, #21
 8008cac:	430a      	orrs	r2, r1
 8008cae:	63da      	str	r2, [r3, #60]	; 0x3c
 8008cb0:	4bbc      	ldr	r3, [pc, #752]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008cb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cb4:	2380      	movs	r3, #128	; 0x80
 8008cb6:	055b      	lsls	r3, r3, #21
 8008cb8:	4013      	ands	r3, r2
 8008cba:	60bb      	str	r3, [r7, #8]
 8008cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008cbe:	183b      	adds	r3, r7, r0
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008cc4:	4bb8      	ldr	r3, [pc, #736]	; (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	4bb7      	ldr	r3, [pc, #732]	; (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008cca:	2180      	movs	r1, #128	; 0x80
 8008ccc:	0049      	lsls	r1, r1, #1
 8008cce:	430a      	orrs	r2, r1
 8008cd0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008cd2:	f7fc fd6b 	bl	80057ac <HAL_GetTick>
 8008cd6:	0003      	movs	r3, r0
 8008cd8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008cda:	e00b      	b.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cdc:	f7fc fd66 	bl	80057ac <HAL_GetTick>
 8008ce0:	0002      	movs	r2, r0
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	1ad3      	subs	r3, r2, r3
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d904      	bls.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8008cea:	2313      	movs	r3, #19
 8008cec:	18fb      	adds	r3, r7, r3
 8008cee:	2203      	movs	r2, #3
 8008cf0:	701a      	strb	r2, [r3, #0]
        break;
 8008cf2:	e005      	b.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008cf4:	4bac      	ldr	r3, [pc, #688]	; (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	2380      	movs	r3, #128	; 0x80
 8008cfa:	005b      	lsls	r3, r3, #1
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	d0ed      	beq.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8008d00:	2313      	movs	r3, #19
 8008d02:	18fb      	adds	r3, r7, r3
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d154      	bne.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008d0a:	4ba6      	ldr	r3, [pc, #664]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008d0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d0e:	23c0      	movs	r3, #192	; 0xc0
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4013      	ands	r3, r2
 8008d14:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d019      	beq.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d20:	697a      	ldr	r2, [r7, #20]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d014      	beq.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008d26:	4b9f      	ldr	r3, [pc, #636]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d2a:	4aa0      	ldr	r2, [pc, #640]	; (8008fac <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d30:	4b9c      	ldr	r3, [pc, #624]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008d32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d34:	4b9b      	ldr	r3, [pc, #620]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008d36:	2180      	movs	r1, #128	; 0x80
 8008d38:	0249      	lsls	r1, r1, #9
 8008d3a:	430a      	orrs	r2, r1
 8008d3c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d3e:	4b99      	ldr	r3, [pc, #612]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008d40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d42:	4b98      	ldr	r3, [pc, #608]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008d44:	499a      	ldr	r1, [pc, #616]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8008d46:	400a      	ands	r2, r1
 8008d48:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008d4a:	4b96      	ldr	r3, [pc, #600]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008d4c:	697a      	ldr	r2, [r7, #20]
 8008d4e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	2201      	movs	r2, #1
 8008d54:	4013      	ands	r3, r2
 8008d56:	d016      	beq.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d58:	f7fc fd28 	bl	80057ac <HAL_GetTick>
 8008d5c:	0003      	movs	r3, r0
 8008d5e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d60:	e00c      	b.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d62:	f7fc fd23 	bl	80057ac <HAL_GetTick>
 8008d66:	0002      	movs	r2, r0
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	1ad3      	subs	r3, r2, r3
 8008d6c:	4a91      	ldr	r2, [pc, #580]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d904      	bls.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8008d72:	2313      	movs	r3, #19
 8008d74:	18fb      	adds	r3, r7, r3
 8008d76:	2203      	movs	r2, #3
 8008d78:	701a      	strb	r2, [r3, #0]
            break;
 8008d7a:	e004      	b.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d7c:	4b89      	ldr	r3, [pc, #548]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d80:	2202      	movs	r2, #2
 8008d82:	4013      	ands	r3, r2
 8008d84:	d0ed      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8008d86:	2313      	movs	r3, #19
 8008d88:	18fb      	adds	r3, r7, r3
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d10a      	bne.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d90:	4b84      	ldr	r3, [pc, #528]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d94:	4a85      	ldr	r2, [pc, #532]	; (8008fac <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8008d96:	4013      	ands	r3, r2
 8008d98:	0019      	movs	r1, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d9e:	4b81      	ldr	r3, [pc, #516]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008da0:	430a      	orrs	r2, r1
 8008da2:	65da      	str	r2, [r3, #92]	; 0x5c
 8008da4:	e00c      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008da6:	2312      	movs	r3, #18
 8008da8:	18fb      	adds	r3, r7, r3
 8008daa:	2213      	movs	r2, #19
 8008dac:	18ba      	adds	r2, r7, r2
 8008dae:	7812      	ldrb	r2, [r2, #0]
 8008db0:	701a      	strb	r2, [r3, #0]
 8008db2:	e005      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008db4:	2312      	movs	r3, #18
 8008db6:	18fb      	adds	r3, r7, r3
 8008db8:	2213      	movs	r2, #19
 8008dba:	18ba      	adds	r2, r7, r2
 8008dbc:	7812      	ldrb	r2, [r2, #0]
 8008dbe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008dc0:	2311      	movs	r3, #17
 8008dc2:	18fb      	adds	r3, r7, r3
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d105      	bne.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008dca:	4b76      	ldr	r3, [pc, #472]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008dcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dce:	4b75      	ldr	r3, [pc, #468]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008dd0:	4979      	ldr	r1, [pc, #484]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8008dd2:	400a      	ands	r2, r1
 8008dd4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	4013      	ands	r3, r2
 8008dde:	d009      	beq.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008de0:	4b70      	ldr	r3, [pc, #448]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008de4:	2203      	movs	r2, #3
 8008de6:	4393      	bics	r3, r2
 8008de8:	0019      	movs	r1, r3
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	685a      	ldr	r2, [r3, #4]
 8008dee:	4b6d      	ldr	r3, [pc, #436]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008df0:	430a      	orrs	r2, r1
 8008df2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2202      	movs	r2, #2
 8008dfa:	4013      	ands	r3, r2
 8008dfc:	d009      	beq.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008dfe:	4b69      	ldr	r3, [pc, #420]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e02:	220c      	movs	r2, #12
 8008e04:	4393      	bics	r3, r2
 8008e06:	0019      	movs	r1, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	689a      	ldr	r2, [r3, #8]
 8008e0c:	4b65      	ldr	r3, [pc, #404]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e0e:	430a      	orrs	r2, r1
 8008e10:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2210      	movs	r2, #16
 8008e18:	4013      	ands	r3, r2
 8008e1a:	d009      	beq.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008e1c:	4b61      	ldr	r3, [pc, #388]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e20:	4a66      	ldr	r2, [pc, #408]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8008e22:	4013      	ands	r3, r2
 8008e24:	0019      	movs	r1, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	68da      	ldr	r2, [r3, #12]
 8008e2a:	4b5e      	ldr	r3, [pc, #376]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e2c:	430a      	orrs	r2, r1
 8008e2e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	2380      	movs	r3, #128	; 0x80
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	4013      	ands	r3, r2
 8008e3a:	d009      	beq.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008e3c:	4b59      	ldr	r3, [pc, #356]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e40:	4a5f      	ldr	r2, [pc, #380]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008e42:	4013      	ands	r3, r2
 8008e44:	0019      	movs	r1, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	699a      	ldr	r2, [r3, #24]
 8008e4a:	4b56      	ldr	r3, [pc, #344]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e4c:	430a      	orrs	r2, r1
 8008e4e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	2380      	movs	r3, #128	; 0x80
 8008e56:	00db      	lsls	r3, r3, #3
 8008e58:	4013      	ands	r3, r2
 8008e5a:	d009      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008e5c:	4b51      	ldr	r3, [pc, #324]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e60:	4a58      	ldr	r2, [pc, #352]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008e62:	4013      	ands	r3, r2
 8008e64:	0019      	movs	r1, r3
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	69da      	ldr	r2, [r3, #28]
 8008e6a:	4b4e      	ldr	r3, [pc, #312]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e6c:	430a      	orrs	r2, r1
 8008e6e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2220      	movs	r2, #32
 8008e76:	4013      	ands	r3, r2
 8008e78:	d009      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008e7a:	4b4a      	ldr	r3, [pc, #296]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e7e:	4a52      	ldr	r2, [pc, #328]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8008e80:	4013      	ands	r3, r2
 8008e82:	0019      	movs	r1, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	691a      	ldr	r2, [r3, #16]
 8008e88:	4b46      	ldr	r3, [pc, #280]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e8a:	430a      	orrs	r2, r1
 8008e8c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	2380      	movs	r3, #128	; 0x80
 8008e94:	01db      	lsls	r3, r3, #7
 8008e96:	4013      	ands	r3, r2
 8008e98:	d015      	beq.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008e9a:	4b42      	ldr	r3, [pc, #264]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	0899      	lsrs	r1, r3, #2
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a1a      	ldr	r2, [r3, #32]
 8008ea6:	4b3f      	ldr	r3, [pc, #252]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ea8:	430a      	orrs	r2, r1
 8008eaa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a1a      	ldr	r2, [r3, #32]
 8008eb0:	2380      	movs	r3, #128	; 0x80
 8008eb2:	05db      	lsls	r3, r3, #23
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d106      	bne.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008eb8:	4b3a      	ldr	r3, [pc, #232]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008eba:	68da      	ldr	r2, [r3, #12]
 8008ebc:	4b39      	ldr	r3, [pc, #228]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ebe:	2180      	movs	r1, #128	; 0x80
 8008ec0:	0249      	lsls	r1, r1, #9
 8008ec2:	430a      	orrs	r2, r1
 8008ec4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	2380      	movs	r3, #128	; 0x80
 8008ecc:	031b      	lsls	r3, r3, #12
 8008ece:	4013      	ands	r3, r2
 8008ed0:	d009      	beq.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008ed2:	4b34      	ldr	r3, [pc, #208]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ed6:	2240      	movs	r2, #64	; 0x40
 8008ed8:	4393      	bics	r3, r2
 8008eda:	0019      	movs	r1, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ee0:	4b30      	ldr	r3, [pc, #192]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ee2:	430a      	orrs	r2, r1
 8008ee4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	2380      	movs	r3, #128	; 0x80
 8008eec:	039b      	lsls	r3, r3, #14
 8008eee:	4013      	ands	r3, r2
 8008ef0:	d016      	beq.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008ef2:	4b2c      	ldr	r3, [pc, #176]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ef6:	4a35      	ldr	r2, [pc, #212]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008ef8:	4013      	ands	r3, r2
 8008efa:	0019      	movs	r1, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f00:	4b28      	ldr	r3, [pc, #160]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008f02:	430a      	orrs	r2, r1
 8008f04:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f0a:	2380      	movs	r3, #128	; 0x80
 8008f0c:	03db      	lsls	r3, r3, #15
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d106      	bne.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008f12:	4b24      	ldr	r3, [pc, #144]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008f14:	68da      	ldr	r2, [r3, #12]
 8008f16:	4b23      	ldr	r3, [pc, #140]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008f18:	2180      	movs	r1, #128	; 0x80
 8008f1a:	0449      	lsls	r1, r1, #17
 8008f1c:	430a      	orrs	r2, r1
 8008f1e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	2380      	movs	r3, #128	; 0x80
 8008f26:	03db      	lsls	r3, r3, #15
 8008f28:	4013      	ands	r3, r2
 8008f2a:	d016      	beq.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008f2c:	4b1d      	ldr	r3, [pc, #116]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f30:	4a27      	ldr	r2, [pc, #156]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8008f32:	4013      	ands	r3, r2
 8008f34:	0019      	movs	r1, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f3a:	4b1a      	ldr	r3, [pc, #104]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008f3c:	430a      	orrs	r2, r1
 8008f3e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f44:	2380      	movs	r3, #128	; 0x80
 8008f46:	045b      	lsls	r3, r3, #17
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d106      	bne.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008f4c:	4b15      	ldr	r3, [pc, #84]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008f4e:	68da      	ldr	r2, [r3, #12]
 8008f50:	4b14      	ldr	r3, [pc, #80]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008f52:	2180      	movs	r1, #128	; 0x80
 8008f54:	0449      	lsls	r1, r1, #17
 8008f56:	430a      	orrs	r2, r1
 8008f58:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	2380      	movs	r3, #128	; 0x80
 8008f60:	011b      	lsls	r3, r3, #4
 8008f62:	4013      	ands	r3, r2
 8008f64:	d016      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008f66:	4b0f      	ldr	r3, [pc, #60]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f6a:	4a1a      	ldr	r2, [pc, #104]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	0019      	movs	r1, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	695a      	ldr	r2, [r3, #20]
 8008f74:	4b0b      	ldr	r3, [pc, #44]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008f76:	430a      	orrs	r2, r1
 8008f78:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	695a      	ldr	r2, [r3, #20]
 8008f7e:	2380      	movs	r3, #128	; 0x80
 8008f80:	01db      	lsls	r3, r3, #7
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d106      	bne.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008f86:	4b07      	ldr	r3, [pc, #28]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008f88:	68da      	ldr	r2, [r3, #12]
 8008f8a:	4b06      	ldr	r3, [pc, #24]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008f8c:	2180      	movs	r1, #128	; 0x80
 8008f8e:	0249      	lsls	r1, r1, #9
 8008f90:	430a      	orrs	r2, r1
 8008f92:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8008f94:	2312      	movs	r3, #18
 8008f96:	18fb      	adds	r3, r7, r3
 8008f98:	781b      	ldrb	r3, [r3, #0]
}
 8008f9a:	0018      	movs	r0, r3
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	b006      	add	sp, #24
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	46c0      	nop			; (mov r8, r8)
 8008fa4:	40021000 	.word	0x40021000
 8008fa8:	40007000 	.word	0x40007000
 8008fac:	fffffcff 	.word	0xfffffcff
 8008fb0:	fffeffff 	.word	0xfffeffff
 8008fb4:	00001388 	.word	0x00001388
 8008fb8:	efffffff 	.word	0xefffffff
 8008fbc:	fffff3ff 	.word	0xfffff3ff
 8008fc0:	fff3ffff 	.word	0xfff3ffff
 8008fc4:	ffcfffff 	.word	0xffcfffff
 8008fc8:	ffffcfff 	.word	0xffffcfff
 8008fcc:	ffbfffff 	.word	0xffbfffff
 8008fd0:	feffffff 	.word	0xfeffffff
 8008fd4:	ffff3fff 	.word	0xffff3fff

08008fd8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b086      	sub	sp, #24
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	2380      	movs	r3, #128	; 0x80
 8008fe8:	029b      	lsls	r3, r3, #10
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d136      	bne.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008fee:	4bcd      	ldr	r3, [pc, #820]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008ff0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008ff2:	23c0      	movs	r3, #192	; 0xc0
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008ffa:	4bca      	ldr	r3, [pc, #808]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ffe:	2202      	movs	r2, #2
 8009000:	4013      	ands	r3, r2
 8009002:	2b02      	cmp	r3, #2
 8009004:	d108      	bne.n	8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	2380      	movs	r3, #128	; 0x80
 800900a:	005b      	lsls	r3, r3, #1
 800900c:	429a      	cmp	r2, r3
 800900e:	d103      	bne.n	8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8009010:	2380      	movs	r3, #128	; 0x80
 8009012:	021b      	lsls	r3, r3, #8
 8009014:	617b      	str	r3, [r7, #20]
 8009016:	e31c      	b.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8009018:	4bc2      	ldr	r3, [pc, #776]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800901a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800901c:	2202      	movs	r2, #2
 800901e:	4013      	ands	r3, r2
 8009020:	2b02      	cmp	r3, #2
 8009022:	d108      	bne.n	8009036 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	2380      	movs	r3, #128	; 0x80
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	429a      	cmp	r2, r3
 800902c:	d103      	bne.n	8009036 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 800902e:	23fa      	movs	r3, #250	; 0xfa
 8009030:	01db      	lsls	r3, r3, #7
 8009032:	617b      	str	r3, [r7, #20]
 8009034:	e30d      	b.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8009036:	4bbb      	ldr	r3, [pc, #748]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	2380      	movs	r3, #128	; 0x80
 800903c:	029b      	lsls	r3, r3, #10
 800903e:	401a      	ands	r2, r3
 8009040:	2380      	movs	r3, #128	; 0x80
 8009042:	029b      	lsls	r3, r3, #10
 8009044:	429a      	cmp	r2, r3
 8009046:	d000      	beq.n	800904a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8009048:	e303      	b.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	23c0      	movs	r3, #192	; 0xc0
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	429a      	cmp	r2, r3
 8009052:	d000      	beq.n	8009056 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8009054:	e2fd      	b.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 8009056:	4bb4      	ldr	r3, [pc, #720]	; (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8009058:	617b      	str	r3, [r7, #20]
 800905a:	e2fa      	b.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 800905c:	4bb1      	ldr	r3, [pc, #708]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	2203      	movs	r2, #3
 8009062:	4013      	ands	r3, r2
 8009064:	2b02      	cmp	r3, #2
 8009066:	d102      	bne.n	800906e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8009068:	4bb0      	ldr	r3, [pc, #704]	; (800932c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800906a:	613b      	str	r3, [r7, #16]
 800906c:	e00a      	b.n	8009084 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 800906e:	4bad      	ldr	r3, [pc, #692]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	2203      	movs	r2, #3
 8009074:	4013      	ands	r3, r2
 8009076:	2b03      	cmp	r3, #3
 8009078:	d102      	bne.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 800907a:	4bad      	ldr	r3, [pc, #692]	; (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 800907c:	613b      	str	r3, [r7, #16]
 800907e:	e001      	b.n	8009084 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8009080:	2300      	movs	r3, #0
 8009082:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009084:	4ba7      	ldr	r3, [pc, #668]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	091b      	lsrs	r3, r3, #4
 800908a:	2207      	movs	r2, #7
 800908c:	4013      	ands	r3, r2
 800908e:	3301      	adds	r3, #1
 8009090:	0019      	movs	r1, r3
 8009092:	6938      	ldr	r0, [r7, #16]
 8009094:	f7f7 f836 	bl	8000104 <__udivsi3>
 8009098:	0003      	movs	r3, r0
 800909a:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	2380      	movs	r3, #128	; 0x80
 80090a0:	03db      	lsls	r3, r3, #15
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d100      	bne.n	80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 80090a6:	e28e      	b.n	80095c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	2380      	movs	r3, #128	; 0x80
 80090ac:	03db      	lsls	r3, r3, #15
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d900      	bls.n	80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80090b2:	e2b7      	b.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	2380      	movs	r3, #128	; 0x80
 80090b8:	039b      	lsls	r3, r3, #14
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d100      	bne.n	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80090be:	e253      	b.n	8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	2380      	movs	r3, #128	; 0x80
 80090c4:	039b      	lsls	r3, r3, #14
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d900      	bls.n	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80090ca:	e2ab      	b.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	2380      	movs	r3, #128	; 0x80
 80090d0:	031b      	lsls	r3, r3, #12
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d100      	bne.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80090d6:	e0b2      	b.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	2380      	movs	r3, #128	; 0x80
 80090dc:	031b      	lsls	r3, r3, #12
 80090de:	429a      	cmp	r2, r3
 80090e0:	d900      	bls.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80090e2:	e29f      	b.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	2380      	movs	r3, #128	; 0x80
 80090e8:	01db      	lsls	r3, r3, #7
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d100      	bne.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 80090ee:	e103      	b.n	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	2380      	movs	r3, #128	; 0x80
 80090f4:	01db      	lsls	r3, r3, #7
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d900      	bls.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80090fa:	e293      	b.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	2380      	movs	r3, #128	; 0x80
 8009100:	011b      	lsls	r3, r3, #4
 8009102:	429a      	cmp	r2, r3
 8009104:	d100      	bne.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8009106:	e165      	b.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	2380      	movs	r3, #128	; 0x80
 800910c:	011b      	lsls	r3, r3, #4
 800910e:	429a      	cmp	r2, r3
 8009110:	d900      	bls.n	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8009112:	e287      	b.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	2380      	movs	r3, #128	; 0x80
 8009118:	00db      	lsls	r3, r3, #3
 800911a:	429a      	cmp	r2, r3
 800911c:	d100      	bne.n	8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 800911e:	e1e3      	b.n	80094e8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	2380      	movs	r3, #128	; 0x80
 8009124:	00db      	lsls	r3, r3, #3
 8009126:	429a      	cmp	r2, r3
 8009128:	d900      	bls.n	800912c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800912a:	e27b      	b.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	2380      	movs	r3, #128	; 0x80
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	429a      	cmp	r2, r3
 8009134:	d100      	bne.n	8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8009136:	e197      	b.n	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	2380      	movs	r3, #128	; 0x80
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	429a      	cmp	r2, r3
 8009140:	d900      	bls.n	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8009142:	e26f      	b.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2b20      	cmp	r3, #32
 8009148:	d100      	bne.n	800914c <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 800914a:	e118      	b.n	800937e <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2b20      	cmp	r3, #32
 8009150:	d900      	bls.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 8009152:	e267      	b.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b10      	cmp	r3, #16
 8009158:	d100      	bne.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 800915a:	e093      	b.n	8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2b10      	cmp	r3, #16
 8009160:	d900      	bls.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8009162:	e25f      	b.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2b01      	cmp	r3, #1
 8009168:	d003      	beq.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2b02      	cmp	r3, #2
 800916e:	d033      	beq.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8009170:	e258      	b.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009172:	4b6c      	ldr	r3, [pc, #432]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8009174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009176:	2203      	movs	r2, #3
 8009178:	4013      	ands	r3, r2
 800917a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d104      	bne.n	800918c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009182:	f7ff fd5b 	bl	8008c3c <HAL_RCC_GetPCLK1Freq>
 8009186:	0003      	movs	r3, r0
 8009188:	617b      	str	r3, [r7, #20]
        break;
 800918a:	e24d      	b.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2b01      	cmp	r3, #1
 8009190:	d104      	bne.n	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 8009192:	f7ff fcc7 	bl	8008b24 <HAL_RCC_GetSysClockFreq>
 8009196:	0003      	movs	r3, r0
 8009198:	617b      	str	r3, [r7, #20]
        break;
 800919a:	e245      	b.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800919c:	4b61      	ldr	r3, [pc, #388]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	2380      	movs	r3, #128	; 0x80
 80091a2:	00db      	lsls	r3, r3, #3
 80091a4:	401a      	ands	r2, r3
 80091a6:	2380      	movs	r3, #128	; 0x80
 80091a8:	00db      	lsls	r3, r3, #3
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d105      	bne.n	80091ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2b02      	cmp	r3, #2
 80091b2:	d102      	bne.n	80091ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 80091b4:	4b5d      	ldr	r3, [pc, #372]	; (800932c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80091b6:	617b      	str	r3, [r7, #20]
        break;
 80091b8:	e236      	b.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80091ba:	4b5a      	ldr	r3, [pc, #360]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80091bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091be:	2202      	movs	r2, #2
 80091c0:	4013      	ands	r3, r2
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d000      	beq.n	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 80091c6:	e22f      	b.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2b03      	cmp	r3, #3
 80091cc:	d000      	beq.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 80091ce:	e22b      	b.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 80091d0:	2380      	movs	r3, #128	; 0x80
 80091d2:	021b      	lsls	r3, r3, #8
 80091d4:	617b      	str	r3, [r7, #20]
        break;
 80091d6:	e227      	b.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80091d8:	4b52      	ldr	r3, [pc, #328]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80091da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091dc:	220c      	movs	r2, #12
 80091de:	4013      	ands	r3, r2
 80091e0:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d104      	bne.n	80091f2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80091e8:	f7ff fd28 	bl	8008c3c <HAL_RCC_GetPCLK1Freq>
 80091ec:	0003      	movs	r3, r0
 80091ee:	617b      	str	r3, [r7, #20]
        break;
 80091f0:	e21c      	b.n	800962c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2b04      	cmp	r3, #4
 80091f6:	d104      	bne.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 80091f8:	f7ff fc94 	bl	8008b24 <HAL_RCC_GetSysClockFreq>
 80091fc:	0003      	movs	r3, r0
 80091fe:	617b      	str	r3, [r7, #20]
        break;
 8009200:	e214      	b.n	800962c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8009202:	4b48      	ldr	r3, [pc, #288]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	2380      	movs	r3, #128	; 0x80
 8009208:	00db      	lsls	r3, r3, #3
 800920a:	401a      	ands	r2, r3
 800920c:	2380      	movs	r3, #128	; 0x80
 800920e:	00db      	lsls	r3, r3, #3
 8009210:	429a      	cmp	r2, r3
 8009212:	d105      	bne.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2b08      	cmp	r3, #8
 8009218:	d102      	bne.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 800921a:	4b44      	ldr	r3, [pc, #272]	; (800932c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800921c:	617b      	str	r3, [r7, #20]
        break;
 800921e:	e205      	b.n	800962c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8009220:	4b40      	ldr	r3, [pc, #256]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8009222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009224:	2202      	movs	r2, #2
 8009226:	4013      	ands	r3, r2
 8009228:	2b02      	cmp	r3, #2
 800922a:	d000      	beq.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800922c:	e1fe      	b.n	800962c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2b0c      	cmp	r3, #12
 8009232:	d000      	beq.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8009234:	e1fa      	b.n	800962c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 8009236:	2380      	movs	r3, #128	; 0x80
 8009238:	021b      	lsls	r3, r3, #8
 800923a:	617b      	str	r3, [r7, #20]
        break;
 800923c:	e1f6      	b.n	800962c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800923e:	4b39      	ldr	r3, [pc, #228]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8009240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009242:	2240      	movs	r2, #64	; 0x40
 8009244:	4013      	ands	r3, r2
 8009246:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 8009248:	4b36      	ldr	r3, [pc, #216]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	2380      	movs	r3, #128	; 0x80
 800924e:	00db      	lsls	r3, r3, #3
 8009250:	401a      	ands	r2, r3
 8009252:	2380      	movs	r3, #128	; 0x80
 8009254:	00db      	lsls	r3, r3, #3
 8009256:	429a      	cmp	r2, r3
 8009258:	d105      	bne.n	8009266 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d102      	bne.n	8009266 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 8009260:	4b34      	ldr	r3, [pc, #208]	; (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8009262:	617b      	str	r3, [r7, #20]
        break;
 8009264:	e1e4      	b.n	8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8009266:	4b2f      	ldr	r3, [pc, #188]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8009268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800926a:	2202      	movs	r2, #2
 800926c:	4013      	ands	r3, r2
 800926e:	2b02      	cmp	r3, #2
 8009270:	d000      	beq.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8009272:	e1dd      	b.n	8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2b40      	cmp	r3, #64	; 0x40
 8009278:	d000      	beq.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 800927a:	e1d9      	b.n	8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 800927c:	2380      	movs	r3, #128	; 0x80
 800927e:	021b      	lsls	r3, r3, #8
 8009280:	617b      	str	r3, [r7, #20]
        break;
 8009282:	e1d5      	b.n	8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8009284:	4b27      	ldr	r3, [pc, #156]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8009286:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009288:	23c0      	movs	r3, #192	; 0xc0
 800928a:	011b      	lsls	r3, r3, #4
 800928c:	4013      	ands	r3, r2
 800928e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d104      	bne.n	80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009296:	f7ff fcd1 	bl	8008c3c <HAL_RCC_GetPCLK1Freq>
 800929a:	0003      	movs	r3, r0
 800929c:	617b      	str	r3, [r7, #20]
        break;
 800929e:	e1c9      	b.n	8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	2380      	movs	r3, #128	; 0x80
 80092a4:	00db      	lsls	r3, r3, #3
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d104      	bne.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 80092aa:	f7ff fc3b 	bl	8008b24 <HAL_RCC_GetSysClockFreq>
 80092ae:	0003      	movs	r3, r0
 80092b0:	617b      	str	r3, [r7, #20]
        break;
 80092b2:	e1bf      	b.n	8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80092b4:	4b1b      	ldr	r3, [pc, #108]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	2380      	movs	r3, #128	; 0x80
 80092ba:	00db      	lsls	r3, r3, #3
 80092bc:	401a      	ands	r2, r3
 80092be:	2380      	movs	r3, #128	; 0x80
 80092c0:	00db      	lsls	r3, r3, #3
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d107      	bne.n	80092d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	2380      	movs	r3, #128	; 0x80
 80092ca:	011b      	lsls	r3, r3, #4
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d102      	bne.n	80092d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 80092d0:	4b16      	ldr	r3, [pc, #88]	; (800932c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80092d2:	617b      	str	r3, [r7, #20]
        break;
 80092d4:	e1ae      	b.n	8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80092d6:	4b13      	ldr	r3, [pc, #76]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80092d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092da:	2202      	movs	r2, #2
 80092dc:	4013      	ands	r3, r2
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d000      	beq.n	80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80092e2:	e1a7      	b.n	8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	23c0      	movs	r3, #192	; 0xc0
 80092e8:	011b      	lsls	r3, r3, #4
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d000      	beq.n	80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80092ee:	e1a1      	b.n	8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 80092f0:	2380      	movs	r3, #128	; 0x80
 80092f2:	021b      	lsls	r3, r3, #8
 80092f4:	617b      	str	r3, [r7, #20]
        break;
 80092f6:	e19d      	b.n	8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80092f8:	4b0a      	ldr	r3, [pc, #40]	; (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80092fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092fc:	0f9b      	lsrs	r3, r3, #30
 80092fe:	079b      	lsls	r3, r3, #30
 8009300:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d104      	bne.n	8009312 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 8009308:	f7ff fc0c 	bl	8008b24 <HAL_RCC_GetSysClockFreq>
 800930c:	0003      	movs	r3, r0
 800930e:	617b      	str	r3, [r7, #20]
        break;
 8009310:	e192      	b.n	8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8009312:	68fa      	ldr	r2, [r7, #12]
 8009314:	2380      	movs	r3, #128	; 0x80
 8009316:	061b      	lsls	r3, r3, #24
 8009318:	429a      	cmp	r2, r3
 800931a:	d10d      	bne.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 800931c:	4b03      	ldr	r3, [pc, #12]	; (800932c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800931e:	617b      	str	r3, [r7, #20]
        break;
 8009320:	e18a      	b.n	8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009322:	46c0      	nop			; (mov r8, r8)
 8009324:	40021000 	.word	0x40021000
 8009328:	0003d090 	.word	0x0003d090
 800932c:	00f42400 	.word	0x00f42400
 8009330:	007a1200 	.word	0x007a1200
 8009334:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	2380      	movs	r3, #128	; 0x80
 800933c:	05db      	lsls	r3, r3, #23
 800933e:	429a      	cmp	r2, r3
 8009340:	d000      	beq.n	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 8009342:	e179      	b.n	8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8009344:	4bc5      	ldr	r3, [pc, #788]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009346:	68da      	ldr	r2, [r3, #12]
 8009348:	2380      	movs	r3, #128	; 0x80
 800934a:	025b      	lsls	r3, r3, #9
 800934c:	4013      	ands	r3, r2
 800934e:	d100      	bne.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8009350:	e172      	b.n	8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009352:	4bc2      	ldr	r3, [pc, #776]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	0a1b      	lsrs	r3, r3, #8
 8009358:	227f      	movs	r2, #127	; 0x7f
 800935a:	4013      	ands	r3, r2
 800935c:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	68ba      	ldr	r2, [r7, #8]
 8009362:	435a      	muls	r2, r3
 8009364:	4bbd      	ldr	r3, [pc, #756]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	0c5b      	lsrs	r3, r3, #17
 800936a:	211f      	movs	r1, #31
 800936c:	400b      	ands	r3, r1
 800936e:	3301      	adds	r3, #1
 8009370:	0019      	movs	r1, r3
 8009372:	0010      	movs	r0, r2
 8009374:	f7f6 fec6 	bl	8000104 <__udivsi3>
 8009378:	0003      	movs	r3, r0
 800937a:	617b      	str	r3, [r7, #20]
        break;
 800937c:	e15c      	b.n	8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800937e:	4bb7      	ldr	r3, [pc, #732]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009380:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009382:	23c0      	movs	r3, #192	; 0xc0
 8009384:	019b      	lsls	r3, r3, #6
 8009386:	4013      	ands	r3, r2
 8009388:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d104      	bne.n	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009390:	f7ff fc54 	bl	8008c3c <HAL_RCC_GetPCLK1Freq>
 8009394:	0003      	movs	r3, r0
 8009396:	617b      	str	r3, [r7, #20]
        break;
 8009398:	e150      	b.n	800963c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	2380      	movs	r3, #128	; 0x80
 800939e:	015b      	lsls	r3, r3, #5
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d104      	bne.n	80093ae <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 80093a4:	f7ff fbbe 	bl	8008b24 <HAL_RCC_GetSysClockFreq>
 80093a8:	0003      	movs	r3, r0
 80093aa:	617b      	str	r3, [r7, #20]
        break;
 80093ac:	e146      	b.n	800963c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80093ae:	4bab      	ldr	r3, [pc, #684]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	2380      	movs	r3, #128	; 0x80
 80093b4:	00db      	lsls	r3, r3, #3
 80093b6:	401a      	ands	r2, r3
 80093b8:	2380      	movs	r3, #128	; 0x80
 80093ba:	00db      	lsls	r3, r3, #3
 80093bc:	429a      	cmp	r2, r3
 80093be:	d000      	beq.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 80093c0:	e13c      	b.n	800963c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80093c2:	68fa      	ldr	r2, [r7, #12]
 80093c4:	2380      	movs	r3, #128	; 0x80
 80093c6:	019b      	lsls	r3, r3, #6
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d000      	beq.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 80093cc:	e136      	b.n	800963c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 80093ce:	4ba4      	ldr	r3, [pc, #656]	; (8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80093d0:	617b      	str	r3, [r7, #20]
        break;
 80093d2:	e133      	b.n	800963c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 80093d4:	4ba1      	ldr	r3, [pc, #644]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80093d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093d8:	23c0      	movs	r3, #192	; 0xc0
 80093da:	021b      	lsls	r3, r3, #8
 80093dc:	4013      	ands	r3, r2
 80093de:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	2380      	movs	r3, #128	; 0x80
 80093e4:	01db      	lsls	r3, r3, #7
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d11c      	bne.n	8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 80093ea:	4b9c      	ldr	r3, [pc, #624]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80093ec:	68da      	ldr	r2, [r3, #12]
 80093ee:	2380      	movs	r3, #128	; 0x80
 80093f0:	025b      	lsls	r3, r3, #9
 80093f2:	4013      	ands	r3, r2
 80093f4:	d100      	bne.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 80093f6:	e123      	b.n	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80093f8:	4b98      	ldr	r3, [pc, #608]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	0a1b      	lsrs	r3, r3, #8
 80093fe:	227f      	movs	r2, #127	; 0x7f
 8009400:	4013      	ands	r3, r2
 8009402:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	68ba      	ldr	r2, [r7, #8]
 8009408:	435a      	muls	r2, r3
 800940a:	4b94      	ldr	r3, [pc, #592]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	0c5b      	lsrs	r3, r3, #17
 8009410:	211f      	movs	r1, #31
 8009412:	400b      	ands	r3, r1
 8009414:	3301      	adds	r3, #1
 8009416:	0019      	movs	r1, r3
 8009418:	0010      	movs	r0, r2
 800941a:	f7f6 fe73 	bl	8000104 <__udivsi3>
 800941e:	0003      	movs	r3, r0
 8009420:	617b      	str	r3, [r7, #20]
        break;
 8009422:	e10d      	b.n	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d104      	bne.n	8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 800942a:	f7ff fb7b 	bl	8008b24 <HAL_RCC_GetSysClockFreq>
 800942e:	0003      	movs	r3, r0
 8009430:	617b      	str	r3, [r7, #20]
        break;
 8009432:	e105      	b.n	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8009434:	4b89      	ldr	r3, [pc, #548]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	2380      	movs	r3, #128	; 0x80
 800943a:	00db      	lsls	r3, r3, #3
 800943c:	401a      	ands	r2, r3
 800943e:	2380      	movs	r3, #128	; 0x80
 8009440:	00db      	lsls	r3, r3, #3
 8009442:	429a      	cmp	r2, r3
 8009444:	d107      	bne.n	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 8009446:	68fa      	ldr	r2, [r7, #12]
 8009448:	2380      	movs	r3, #128	; 0x80
 800944a:	021b      	lsls	r3, r3, #8
 800944c:	429a      	cmp	r2, r3
 800944e:	d102      	bne.n	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 8009450:	4b83      	ldr	r3, [pc, #524]	; (8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8009452:	617b      	str	r3, [r7, #20]
        break;
 8009454:	e0f4      	b.n	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	23c0      	movs	r3, #192	; 0xc0
 800945a:	021b      	lsls	r3, r3, #8
 800945c:	429a      	cmp	r2, r3
 800945e:	d000      	beq.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8009460:	e0ee      	b.n	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 8009462:	4b80      	ldr	r3, [pc, #512]	; (8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8009464:	617b      	str	r3, [r7, #20]
        break;
 8009466:	e0eb      	b.n	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009468:	4b7c      	ldr	r3, [pc, #496]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800946a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800946c:	23c0      	movs	r3, #192	; 0xc0
 800946e:	031b      	lsls	r3, r3, #12
 8009470:	4013      	ands	r3, r2
 8009472:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d104      	bne.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 800947a:	f7ff fbdf 	bl	8008c3c <HAL_RCC_GetPCLK1Freq>
 800947e:	0003      	movs	r3, r0
 8009480:	617b      	str	r3, [r7, #20]
        break;
 8009482:	e0df      	b.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8009484:	4b75      	ldr	r3, [pc, #468]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009488:	2202      	movs	r2, #2
 800948a:	4013      	ands	r3, r2
 800948c:	2b02      	cmp	r3, #2
 800948e:	d108      	bne.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	2380      	movs	r3, #128	; 0x80
 8009494:	02db      	lsls	r3, r3, #11
 8009496:	429a      	cmp	r2, r3
 8009498:	d103      	bne.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 800949a:	23fa      	movs	r3, #250	; 0xfa
 800949c:	01db      	lsls	r3, r3, #7
 800949e:	617b      	str	r3, [r7, #20]
 80094a0:	e021      	b.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80094a2:	4b6e      	ldr	r3, [pc, #440]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	2380      	movs	r3, #128	; 0x80
 80094a8:	00db      	lsls	r3, r3, #3
 80094aa:	401a      	ands	r2, r3
 80094ac:	2380      	movs	r3, #128	; 0x80
 80094ae:	00db      	lsls	r3, r3, #3
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d107      	bne.n	80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	2380      	movs	r3, #128	; 0x80
 80094b8:	031b      	lsls	r3, r3, #12
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d102      	bne.n	80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 80094be:	4b68      	ldr	r3, [pc, #416]	; (8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80094c0:	617b      	str	r3, [r7, #20]
 80094c2:	e010      	b.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80094c4:	4b65      	ldr	r3, [pc, #404]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80094c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094c8:	2202      	movs	r2, #2
 80094ca:	4013      	ands	r3, r2
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d000      	beq.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80094d0:	e0b8      	b.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80094d2:	68fa      	ldr	r2, [r7, #12]
 80094d4:	23c0      	movs	r3, #192	; 0xc0
 80094d6:	031b      	lsls	r3, r3, #12
 80094d8:	429a      	cmp	r2, r3
 80094da:	d000      	beq.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80094dc:	e0b2      	b.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 80094de:	2380      	movs	r3, #128	; 0x80
 80094e0:	021b      	lsls	r3, r3, #8
 80094e2:	617b      	str	r3, [r7, #20]
        break;
 80094e4:	e0ae      	b.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80094e6:	e0ad      	b.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80094e8:	4b5c      	ldr	r3, [pc, #368]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80094ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094ec:	23c0      	movs	r3, #192	; 0xc0
 80094ee:	039b      	lsls	r3, r3, #14
 80094f0:	4013      	ands	r3, r2
 80094f2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d104      	bne.n	8009504 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80094fa:	f7ff fb9f 	bl	8008c3c <HAL_RCC_GetPCLK1Freq>
 80094fe:	0003      	movs	r3, r0
 8009500:	617b      	str	r3, [r7, #20]
        break;
 8009502:	e0a1      	b.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8009504:	4b55      	ldr	r3, [pc, #340]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009508:	2202      	movs	r2, #2
 800950a:	4013      	ands	r3, r2
 800950c:	2b02      	cmp	r3, #2
 800950e:	d108      	bne.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	2380      	movs	r3, #128	; 0x80
 8009514:	035b      	lsls	r3, r3, #13
 8009516:	429a      	cmp	r2, r3
 8009518:	d103      	bne.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 800951a:	23fa      	movs	r3, #250	; 0xfa
 800951c:	01db      	lsls	r3, r3, #7
 800951e:	617b      	str	r3, [r7, #20]
 8009520:	e021      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8009522:	4b4e      	ldr	r3, [pc, #312]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	2380      	movs	r3, #128	; 0x80
 8009528:	00db      	lsls	r3, r3, #3
 800952a:	401a      	ands	r2, r3
 800952c:	2380      	movs	r3, #128	; 0x80
 800952e:	00db      	lsls	r3, r3, #3
 8009530:	429a      	cmp	r2, r3
 8009532:	d107      	bne.n	8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	2380      	movs	r3, #128	; 0x80
 8009538:	039b      	lsls	r3, r3, #14
 800953a:	429a      	cmp	r2, r3
 800953c:	d102      	bne.n	8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 800953e:	4b48      	ldr	r3, [pc, #288]	; (8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8009540:	617b      	str	r3, [r7, #20]
 8009542:	e010      	b.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8009544:	4b45      	ldr	r3, [pc, #276]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009548:	2202      	movs	r2, #2
 800954a:	4013      	ands	r3, r2
 800954c:	2b02      	cmp	r3, #2
 800954e:	d000      	beq.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8009550:	e07a      	b.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	23c0      	movs	r3, #192	; 0xc0
 8009556:	039b      	lsls	r3, r3, #14
 8009558:	429a      	cmp	r2, r3
 800955a:	d000      	beq.n	800955e <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 800955c:	e074      	b.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 800955e:	2380      	movs	r3, #128	; 0x80
 8009560:	021b      	lsls	r3, r3, #8
 8009562:	617b      	str	r3, [r7, #20]
        break;
 8009564:	e070      	b.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 8009566:	e06f      	b.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 8009568:	4b3c      	ldr	r3, [pc, #240]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800956a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800956c:	2380      	movs	r3, #128	; 0x80
 800956e:	03db      	lsls	r3, r3, #15
 8009570:	4013      	ands	r3, r2
 8009572:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	2380      	movs	r3, #128	; 0x80
 8009578:	03db      	lsls	r3, r3, #15
 800957a:	429a      	cmp	r2, r3
 800957c:	d11b      	bne.n	80095b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 800957e:	4b37      	ldr	r3, [pc, #220]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009580:	68da      	ldr	r2, [r3, #12]
 8009582:	2380      	movs	r3, #128	; 0x80
 8009584:	045b      	lsls	r3, r3, #17
 8009586:	4013      	ands	r3, r2
 8009588:	d060      	beq.n	800964c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800958a:	4b34      	ldr	r3, [pc, #208]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	0a1b      	lsrs	r3, r3, #8
 8009590:	227f      	movs	r2, #127	; 0x7f
 8009592:	4013      	ands	r3, r2
 8009594:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	68ba      	ldr	r2, [r7, #8]
 800959a:	435a      	muls	r2, r3
 800959c:	4b2f      	ldr	r3, [pc, #188]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	0e5b      	lsrs	r3, r3, #25
 80095a2:	2107      	movs	r1, #7
 80095a4:	400b      	ands	r3, r1
 80095a6:	3301      	adds	r3, #1
 80095a8:	0019      	movs	r1, r3
 80095aa:	0010      	movs	r0, r2
 80095ac:	f7f6 fdaa 	bl	8000104 <__udivsi3>
 80095b0:	0003      	movs	r3, r0
 80095b2:	617b      	str	r3, [r7, #20]
        break;
 80095b4:	e04a      	b.n	800964c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d147      	bne.n	800964c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 80095bc:	f7ff fb3e 	bl	8008c3c <HAL_RCC_GetPCLK1Freq>
 80095c0:	0003      	movs	r3, r0
 80095c2:	617b      	str	r3, [r7, #20]
        break;
 80095c4:	e042      	b.n	800964c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 80095c6:	4b25      	ldr	r3, [pc, #148]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80095c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095ca:	2380      	movs	r3, #128	; 0x80
 80095cc:	045b      	lsls	r3, r3, #17
 80095ce:	4013      	ands	r3, r2
 80095d0:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 80095d2:	68fa      	ldr	r2, [r7, #12]
 80095d4:	2380      	movs	r3, #128	; 0x80
 80095d6:	045b      	lsls	r3, r3, #17
 80095d8:	429a      	cmp	r2, r3
 80095da:	d11b      	bne.n	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 80095dc:	4b1f      	ldr	r3, [pc, #124]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80095de:	68da      	ldr	r2, [r3, #12]
 80095e0:	2380      	movs	r3, #128	; 0x80
 80095e2:	045b      	lsls	r3, r3, #17
 80095e4:	4013      	ands	r3, r2
 80095e6:	d033      	beq.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80095e8:	4b1c      	ldr	r3, [pc, #112]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	0a1b      	lsrs	r3, r3, #8
 80095ee:	227f      	movs	r2, #127	; 0x7f
 80095f0:	4013      	ands	r3, r2
 80095f2:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	68ba      	ldr	r2, [r7, #8]
 80095f8:	435a      	muls	r2, r3
 80095fa:	4b18      	ldr	r3, [pc, #96]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	0e5b      	lsrs	r3, r3, #25
 8009600:	2107      	movs	r1, #7
 8009602:	400b      	ands	r3, r1
 8009604:	3301      	adds	r3, #1
 8009606:	0019      	movs	r1, r3
 8009608:	0010      	movs	r0, r2
 800960a:	f7f6 fd7b 	bl	8000104 <__udivsi3>
 800960e:	0003      	movs	r3, r0
 8009610:	617b      	str	r3, [r7, #20]
        break;
 8009612:	e01d      	b.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d11a      	bne.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 800961a:	f7ff fb0f 	bl	8008c3c <HAL_RCC_GetPCLK1Freq>
 800961e:	0003      	movs	r3, r0
 8009620:	617b      	str	r3, [r7, #20]
        break;
 8009622:	e015      	b.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 8009624:	46c0      	nop			; (mov r8, r8)
 8009626:	e014      	b.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009628:	46c0      	nop			; (mov r8, r8)
 800962a:	e012      	b.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800962c:	46c0      	nop			; (mov r8, r8)
 800962e:	e010      	b.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009630:	46c0      	nop			; (mov r8, r8)
 8009632:	e00e      	b.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009634:	46c0      	nop			; (mov r8, r8)
 8009636:	e00c      	b.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009638:	46c0      	nop			; (mov r8, r8)
 800963a:	e00a      	b.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800963c:	46c0      	nop			; (mov r8, r8)
 800963e:	e008      	b.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009640:	46c0      	nop			; (mov r8, r8)
 8009642:	e006      	b.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009644:	46c0      	nop			; (mov r8, r8)
 8009646:	e004      	b.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009648:	46c0      	nop			; (mov r8, r8)
 800964a:	e002      	b.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800964c:	46c0      	nop			; (mov r8, r8)
 800964e:	e000      	b.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009650:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 8009652:	697b      	ldr	r3, [r7, #20]
}
 8009654:	0018      	movs	r0, r3
 8009656:	46bd      	mov	sp, r7
 8009658:	b006      	add	sp, #24
 800965a:	bd80      	pop	{r7, pc}
 800965c:	40021000 	.word	0x40021000
 8009660:	00f42400 	.word	0x00f42400
 8009664:	0000bb80 	.word	0x0000bb80

08009668 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d101      	bne.n	800967a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009676:	2301      	movs	r3, #1
 8009678:	e0a8      	b.n	80097cc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967e:	2b00      	cmp	r3, #0
 8009680:	d109      	bne.n	8009696 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	685a      	ldr	r2, [r3, #4]
 8009686:	2382      	movs	r3, #130	; 0x82
 8009688:	005b      	lsls	r3, r3, #1
 800968a:	429a      	cmp	r2, r3
 800968c:	d009      	beq.n	80096a2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	61da      	str	r2, [r3, #28]
 8009694:	e005      	b.n	80096a2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	225d      	movs	r2, #93	; 0x5d
 80096ac:	5c9b      	ldrb	r3, [r3, r2]
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d107      	bne.n	80096c4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	225c      	movs	r2, #92	; 0x5c
 80096b8:	2100      	movs	r1, #0
 80096ba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	0018      	movs	r0, r3
 80096c0:	f7fb fcd6 	bl	8005070 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	225d      	movs	r2, #93	; 0x5d
 80096c8:	2102      	movs	r1, #2
 80096ca:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2140      	movs	r1, #64	; 0x40
 80096d8:	438a      	bics	r2, r1
 80096da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	68da      	ldr	r2, [r3, #12]
 80096e0:	23e0      	movs	r3, #224	; 0xe0
 80096e2:	00db      	lsls	r3, r3, #3
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d902      	bls.n	80096ee <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80096e8:	2300      	movs	r3, #0
 80096ea:	60fb      	str	r3, [r7, #12]
 80096ec:	e002      	b.n	80096f4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80096ee:	2380      	movs	r3, #128	; 0x80
 80096f0:	015b      	lsls	r3, r3, #5
 80096f2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	68da      	ldr	r2, [r3, #12]
 80096f8:	23f0      	movs	r3, #240	; 0xf0
 80096fa:	011b      	lsls	r3, r3, #4
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d008      	beq.n	8009712 <HAL_SPI_Init+0xaa>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	68da      	ldr	r2, [r3, #12]
 8009704:	23e0      	movs	r3, #224	; 0xe0
 8009706:	00db      	lsls	r3, r3, #3
 8009708:	429a      	cmp	r2, r3
 800970a:	d002      	beq.n	8009712 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	685a      	ldr	r2, [r3, #4]
 8009716:	2382      	movs	r3, #130	; 0x82
 8009718:	005b      	lsls	r3, r3, #1
 800971a:	401a      	ands	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6899      	ldr	r1, [r3, #8]
 8009720:	2384      	movs	r3, #132	; 0x84
 8009722:	021b      	lsls	r3, r3, #8
 8009724:	400b      	ands	r3, r1
 8009726:	431a      	orrs	r2, r3
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	691b      	ldr	r3, [r3, #16]
 800972c:	2102      	movs	r1, #2
 800972e:	400b      	ands	r3, r1
 8009730:	431a      	orrs	r2, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	695b      	ldr	r3, [r3, #20]
 8009736:	2101      	movs	r1, #1
 8009738:	400b      	ands	r3, r1
 800973a:	431a      	orrs	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6999      	ldr	r1, [r3, #24]
 8009740:	2380      	movs	r3, #128	; 0x80
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	400b      	ands	r3, r1
 8009746:	431a      	orrs	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	69db      	ldr	r3, [r3, #28]
 800974c:	2138      	movs	r1, #56	; 0x38
 800974e:	400b      	ands	r3, r1
 8009750:	431a      	orrs	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a1b      	ldr	r3, [r3, #32]
 8009756:	2180      	movs	r1, #128	; 0x80
 8009758:	400b      	ands	r3, r1
 800975a:	431a      	orrs	r2, r3
 800975c:	0011      	movs	r1, r2
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009762:	2380      	movs	r3, #128	; 0x80
 8009764:	019b      	lsls	r3, r3, #6
 8009766:	401a      	ands	r2, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	430a      	orrs	r2, r1
 800976e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	699b      	ldr	r3, [r3, #24]
 8009774:	0c1b      	lsrs	r3, r3, #16
 8009776:	2204      	movs	r2, #4
 8009778:	401a      	ands	r2, r3
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800977e:	2110      	movs	r1, #16
 8009780:	400b      	ands	r3, r1
 8009782:	431a      	orrs	r2, r3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009788:	2108      	movs	r1, #8
 800978a:	400b      	ands	r3, r1
 800978c:	431a      	orrs	r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	68d9      	ldr	r1, [r3, #12]
 8009792:	23f0      	movs	r3, #240	; 0xf0
 8009794:	011b      	lsls	r3, r3, #4
 8009796:	400b      	ands	r3, r1
 8009798:	431a      	orrs	r2, r3
 800979a:	0011      	movs	r1, r2
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	2380      	movs	r3, #128	; 0x80
 80097a0:	015b      	lsls	r3, r3, #5
 80097a2:	401a      	ands	r2, r3
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	430a      	orrs	r2, r1
 80097aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	69da      	ldr	r2, [r3, #28]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4907      	ldr	r1, [pc, #28]	; (80097d4 <HAL_SPI_Init+0x16c>)
 80097b8:	400a      	ands	r2, r1
 80097ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	225d      	movs	r2, #93	; 0x5d
 80097c6:	2101      	movs	r1, #1
 80097c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	0018      	movs	r0, r3
 80097ce:	46bd      	mov	sp, r7
 80097d0:	b004      	add	sp, #16
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	fffff7ff 	.word	0xfffff7ff

080097d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b088      	sub	sp, #32
 80097dc:	af00      	add	r7, sp, #0
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	60b9      	str	r1, [r7, #8]
 80097e2:	603b      	str	r3, [r7, #0]
 80097e4:	1dbb      	adds	r3, r7, #6
 80097e6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80097e8:	231f      	movs	r3, #31
 80097ea:	18fb      	adds	r3, r7, r3
 80097ec:	2200      	movs	r2, #0
 80097ee:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	225c      	movs	r2, #92	; 0x5c
 80097f4:	5c9b      	ldrb	r3, [r3, r2]
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d101      	bne.n	80097fe <HAL_SPI_Transmit+0x26>
 80097fa:	2302      	movs	r3, #2
 80097fc:	e140      	b.n	8009a80 <HAL_SPI_Transmit+0x2a8>
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	225c      	movs	r2, #92	; 0x5c
 8009802:	2101      	movs	r1, #1
 8009804:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009806:	f7fb ffd1 	bl	80057ac <HAL_GetTick>
 800980a:	0003      	movs	r3, r0
 800980c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800980e:	2316      	movs	r3, #22
 8009810:	18fb      	adds	r3, r7, r3
 8009812:	1dba      	adds	r2, r7, #6
 8009814:	8812      	ldrh	r2, [r2, #0]
 8009816:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	225d      	movs	r2, #93	; 0x5d
 800981c:	5c9b      	ldrb	r3, [r3, r2]
 800981e:	b2db      	uxtb	r3, r3
 8009820:	2b01      	cmp	r3, #1
 8009822:	d004      	beq.n	800982e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8009824:	231f      	movs	r3, #31
 8009826:	18fb      	adds	r3, r7, r3
 8009828:	2202      	movs	r2, #2
 800982a:	701a      	strb	r2, [r3, #0]
    goto error;
 800982c:	e11d      	b.n	8009a6a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d003      	beq.n	800983c <HAL_SPI_Transmit+0x64>
 8009834:	1dbb      	adds	r3, r7, #6
 8009836:	881b      	ldrh	r3, [r3, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d104      	bne.n	8009846 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800983c:	231f      	movs	r3, #31
 800983e:	18fb      	adds	r3, r7, r3
 8009840:	2201      	movs	r2, #1
 8009842:	701a      	strb	r2, [r3, #0]
    goto error;
 8009844:	e111      	b.n	8009a6a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	225d      	movs	r2, #93	; 0x5d
 800984a:	2103      	movs	r1, #3
 800984c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2200      	movs	r2, #0
 8009852:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	68ba      	ldr	r2, [r7, #8]
 8009858:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	1dba      	adds	r2, r7, #6
 800985e:	8812      	ldrh	r2, [r2, #0]
 8009860:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	1dba      	adds	r2, r7, #6
 8009866:	8812      	ldrh	r2, [r2, #0]
 8009868:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2200      	movs	r2, #0
 800986e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2244      	movs	r2, #68	; 0x44
 8009874:	2100      	movs	r1, #0
 8009876:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2246      	movs	r2, #70	; 0x46
 800987c:	2100      	movs	r1, #0
 800987e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2200      	movs	r2, #0
 8009884:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2200      	movs	r2, #0
 800988a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	689a      	ldr	r2, [r3, #8]
 8009890:	2380      	movs	r3, #128	; 0x80
 8009892:	021b      	lsls	r3, r3, #8
 8009894:	429a      	cmp	r2, r3
 8009896:	d110      	bne.n	80098ba <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2140      	movs	r1, #64	; 0x40
 80098a4:	438a      	bics	r2, r1
 80098a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2180      	movs	r1, #128	; 0x80
 80098b4:	01c9      	lsls	r1, r1, #7
 80098b6:	430a      	orrs	r2, r1
 80098b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2240      	movs	r2, #64	; 0x40
 80098c2:	4013      	ands	r3, r2
 80098c4:	2b40      	cmp	r3, #64	; 0x40
 80098c6:	d007      	beq.n	80098d8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2140      	movs	r1, #64	; 0x40
 80098d4:	430a      	orrs	r2, r1
 80098d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	68da      	ldr	r2, [r3, #12]
 80098dc:	23e0      	movs	r3, #224	; 0xe0
 80098de:	00db      	lsls	r3, r3, #3
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d94e      	bls.n	8009982 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d004      	beq.n	80098f6 <HAL_SPI_Transmit+0x11e>
 80098ec:	2316      	movs	r3, #22
 80098ee:	18fb      	adds	r3, r7, r3
 80098f0:	881b      	ldrh	r3, [r3, #0]
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d13f      	bne.n	8009976 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098fa:	881a      	ldrh	r2, [r3, #0]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009906:	1c9a      	adds	r2, r3, #2
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009910:	b29b      	uxth	r3, r3
 8009912:	3b01      	subs	r3, #1
 8009914:	b29a      	uxth	r2, r3
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800991a:	e02c      	b.n	8009976 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	2202      	movs	r2, #2
 8009924:	4013      	ands	r3, r2
 8009926:	2b02      	cmp	r3, #2
 8009928:	d112      	bne.n	8009950 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992e:	881a      	ldrh	r2, [r3, #0]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800993a:	1c9a      	adds	r2, r3, #2
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009944:	b29b      	uxth	r3, r3
 8009946:	3b01      	subs	r3, #1
 8009948:	b29a      	uxth	r2, r3
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800994e:	e012      	b.n	8009976 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009950:	f7fb ff2c 	bl	80057ac <HAL_GetTick>
 8009954:	0002      	movs	r2, r0
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	1ad3      	subs	r3, r2, r3
 800995a:	683a      	ldr	r2, [r7, #0]
 800995c:	429a      	cmp	r2, r3
 800995e:	d802      	bhi.n	8009966 <HAL_SPI_Transmit+0x18e>
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	3301      	adds	r3, #1
 8009964:	d102      	bne.n	800996c <HAL_SPI_Transmit+0x194>
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d104      	bne.n	8009976 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800996c:	231f      	movs	r3, #31
 800996e:	18fb      	adds	r3, r7, r3
 8009970:	2203      	movs	r2, #3
 8009972:	701a      	strb	r2, [r3, #0]
          goto error;
 8009974:	e079      	b.n	8009a6a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800997a:	b29b      	uxth	r3, r3
 800997c:	2b00      	cmp	r3, #0
 800997e:	d1cd      	bne.n	800991c <HAL_SPI_Transmit+0x144>
 8009980:	e04f      	b.n	8009a22 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d004      	beq.n	8009994 <HAL_SPI_Transmit+0x1bc>
 800998a:	2316      	movs	r3, #22
 800998c:	18fb      	adds	r3, r7, r3
 800998e:	881b      	ldrh	r3, [r3, #0]
 8009990:	2b01      	cmp	r3, #1
 8009992:	d141      	bne.n	8009a18 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	330c      	adds	r3, #12
 800999e:	7812      	ldrb	r2, [r2, #0]
 80099a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a6:	1c5a      	adds	r2, r3, #1
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	3b01      	subs	r3, #1
 80099b4:	b29a      	uxth	r2, r3
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80099ba:	e02d      	b.n	8009a18 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	689b      	ldr	r3, [r3, #8]
 80099c2:	2202      	movs	r2, #2
 80099c4:	4013      	ands	r3, r2
 80099c6:	2b02      	cmp	r3, #2
 80099c8:	d113      	bne.n	80099f2 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	330c      	adds	r3, #12
 80099d4:	7812      	ldrb	r2, [r2, #0]
 80099d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099dc:	1c5a      	adds	r2, r3, #1
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	3b01      	subs	r3, #1
 80099ea:	b29a      	uxth	r2, r3
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80099f0:	e012      	b.n	8009a18 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80099f2:	f7fb fedb 	bl	80057ac <HAL_GetTick>
 80099f6:	0002      	movs	r2, r0
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	1ad3      	subs	r3, r2, r3
 80099fc:	683a      	ldr	r2, [r7, #0]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d802      	bhi.n	8009a08 <HAL_SPI_Transmit+0x230>
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	3301      	adds	r3, #1
 8009a06:	d102      	bne.n	8009a0e <HAL_SPI_Transmit+0x236>
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d104      	bne.n	8009a18 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8009a0e:	231f      	movs	r3, #31
 8009a10:	18fb      	adds	r3, r7, r3
 8009a12:	2203      	movs	r2, #3
 8009a14:	701a      	strb	r2, [r3, #0]
          goto error;
 8009a16:	e028      	b.n	8009a6a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d1cc      	bne.n	80099bc <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009a22:	69ba      	ldr	r2, [r7, #24]
 8009a24:	6839      	ldr	r1, [r7, #0]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	0018      	movs	r0, r3
 8009a2a:	f000 fde9 	bl	800a600 <SPI_EndRxTxTransaction>
 8009a2e:	1e03      	subs	r3, r0, #0
 8009a30:	d002      	beq.n	8009a38 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2220      	movs	r2, #32
 8009a36:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d10a      	bne.n	8009a56 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009a40:	2300      	movs	r3, #0
 8009a42:	613b      	str	r3, [r7, #16]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	613b      	str	r3, [r7, #16]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	613b      	str	r3, [r7, #16]
 8009a54:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d004      	beq.n	8009a68 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8009a5e:	231f      	movs	r3, #31
 8009a60:	18fb      	adds	r3, r7, r3
 8009a62:	2201      	movs	r2, #1
 8009a64:	701a      	strb	r2, [r3, #0]
 8009a66:	e000      	b.n	8009a6a <HAL_SPI_Transmit+0x292>
  }

error:
 8009a68:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	225d      	movs	r2, #93	; 0x5d
 8009a6e:	2101      	movs	r1, #1
 8009a70:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	225c      	movs	r2, #92	; 0x5c
 8009a76:	2100      	movs	r1, #0
 8009a78:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009a7a:	231f      	movs	r3, #31
 8009a7c:	18fb      	adds	r3, r7, r3
 8009a7e:	781b      	ldrb	r3, [r3, #0]
}
 8009a80:	0018      	movs	r0, r3
 8009a82:	46bd      	mov	sp, r7
 8009a84:	b008      	add	sp, #32
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a88:	b590      	push	{r4, r7, lr}
 8009a8a:	b089      	sub	sp, #36	; 0x24
 8009a8c:	af02      	add	r7, sp, #8
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	603b      	str	r3, [r7, #0]
 8009a94:	1dbb      	adds	r3, r7, #6
 8009a96:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009a98:	2317      	movs	r3, #23
 8009a9a:	18fb      	adds	r3, r7, r3
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	685a      	ldr	r2, [r3, #4]
 8009aa4:	2382      	movs	r3, #130	; 0x82
 8009aa6:	005b      	lsls	r3, r3, #1
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d113      	bne.n	8009ad4 <HAL_SPI_Receive+0x4c>
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d10f      	bne.n	8009ad4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	225d      	movs	r2, #93	; 0x5d
 8009ab8:	2104      	movs	r1, #4
 8009aba:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009abc:	1dbb      	adds	r3, r7, #6
 8009abe:	881c      	ldrh	r4, [r3, #0]
 8009ac0:	68ba      	ldr	r2, [r7, #8]
 8009ac2:	68b9      	ldr	r1, [r7, #8]
 8009ac4:	68f8      	ldr	r0, [r7, #12]
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	0023      	movs	r3, r4
 8009acc:	f000 f928 	bl	8009d20 <HAL_SPI_TransmitReceive>
 8009ad0:	0003      	movs	r3, r0
 8009ad2:	e11c      	b.n	8009d0e <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	225c      	movs	r2, #92	; 0x5c
 8009ad8:	5c9b      	ldrb	r3, [r3, r2]
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d101      	bne.n	8009ae2 <HAL_SPI_Receive+0x5a>
 8009ade:	2302      	movs	r3, #2
 8009ae0:	e115      	b.n	8009d0e <HAL_SPI_Receive+0x286>
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	225c      	movs	r2, #92	; 0x5c
 8009ae6:	2101      	movs	r1, #1
 8009ae8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009aea:	f7fb fe5f 	bl	80057ac <HAL_GetTick>
 8009aee:	0003      	movs	r3, r0
 8009af0:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	225d      	movs	r2, #93	; 0x5d
 8009af6:	5c9b      	ldrb	r3, [r3, r2]
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d004      	beq.n	8009b08 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8009afe:	2317      	movs	r3, #23
 8009b00:	18fb      	adds	r3, r7, r3
 8009b02:	2202      	movs	r2, #2
 8009b04:	701a      	strb	r2, [r3, #0]
    goto error;
 8009b06:	e0f7      	b.n	8009cf8 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d003      	beq.n	8009b16 <HAL_SPI_Receive+0x8e>
 8009b0e:	1dbb      	adds	r3, r7, #6
 8009b10:	881b      	ldrh	r3, [r3, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d104      	bne.n	8009b20 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8009b16:	2317      	movs	r3, #23
 8009b18:	18fb      	adds	r3, r7, r3
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	701a      	strb	r2, [r3, #0]
    goto error;
 8009b1e:	e0eb      	b.n	8009cf8 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	225d      	movs	r2, #93	; 0x5d
 8009b24:	2104      	movs	r1, #4
 8009b26:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	68ba      	ldr	r2, [r7, #8]
 8009b32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	1dba      	adds	r2, r7, #6
 8009b38:	2144      	movs	r1, #68	; 0x44
 8009b3a:	8812      	ldrh	r2, [r2, #0]
 8009b3c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	1dba      	adds	r2, r7, #6
 8009b42:	2146      	movs	r1, #70	; 0x46
 8009b44:	8812      	ldrh	r2, [r2, #0]
 8009b46:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2200      	movs	r2, #0
 8009b52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2200      	movs	r2, #0
 8009b58:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2200      	movs	r2, #0
 8009b64:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	68da      	ldr	r2, [r3, #12]
 8009b6a:	23e0      	movs	r3, #224	; 0xe0
 8009b6c:	00db      	lsls	r3, r3, #3
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d908      	bls.n	8009b84 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	685a      	ldr	r2, [r3, #4]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4966      	ldr	r1, [pc, #408]	; (8009d18 <HAL_SPI_Receive+0x290>)
 8009b7e:	400a      	ands	r2, r1
 8009b80:	605a      	str	r2, [r3, #4]
 8009b82:	e008      	b.n	8009b96 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	685a      	ldr	r2, [r3, #4]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	2180      	movs	r1, #128	; 0x80
 8009b90:	0149      	lsls	r1, r1, #5
 8009b92:	430a      	orrs	r2, r1
 8009b94:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	689a      	ldr	r2, [r3, #8]
 8009b9a:	2380      	movs	r3, #128	; 0x80
 8009b9c:	021b      	lsls	r3, r3, #8
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d10f      	bne.n	8009bc2 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2140      	movs	r1, #64	; 0x40
 8009bae:	438a      	bics	r2, r1
 8009bb0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4957      	ldr	r1, [pc, #348]	; (8009d1c <HAL_SPI_Receive+0x294>)
 8009bbe:	400a      	ands	r2, r1
 8009bc0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2240      	movs	r2, #64	; 0x40
 8009bca:	4013      	ands	r3, r2
 8009bcc:	2b40      	cmp	r3, #64	; 0x40
 8009bce:	d007      	beq.n	8009be0 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2140      	movs	r1, #64	; 0x40
 8009bdc:	430a      	orrs	r2, r1
 8009bde:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	68da      	ldr	r2, [r3, #12]
 8009be4:	23e0      	movs	r3, #224	; 0xe0
 8009be6:	00db      	lsls	r3, r3, #3
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d900      	bls.n	8009bee <HAL_SPI_Receive+0x166>
 8009bec:	e069      	b.n	8009cc2 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009bee:	e031      	b.n	8009c54 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	4013      	ands	r3, r2
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d117      	bne.n	8009c2e <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	330c      	adds	r3, #12
 8009c04:	001a      	movs	r2, r3
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c0a:	7812      	ldrb	r2, [r2, #0]
 8009c0c:	b2d2      	uxtb	r2, r2
 8009c0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c14:	1c5a      	adds	r2, r3, #1
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2246      	movs	r2, #70	; 0x46
 8009c1e:	5a9b      	ldrh	r3, [r3, r2]
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	3b01      	subs	r3, #1
 8009c24:	b299      	uxth	r1, r3
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2246      	movs	r2, #70	; 0x46
 8009c2a:	5299      	strh	r1, [r3, r2]
 8009c2c:	e012      	b.n	8009c54 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c2e:	f7fb fdbd 	bl	80057ac <HAL_GetTick>
 8009c32:	0002      	movs	r2, r0
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	1ad3      	subs	r3, r2, r3
 8009c38:	683a      	ldr	r2, [r7, #0]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d802      	bhi.n	8009c44 <HAL_SPI_Receive+0x1bc>
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	3301      	adds	r3, #1
 8009c42:	d102      	bne.n	8009c4a <HAL_SPI_Receive+0x1c2>
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d104      	bne.n	8009c54 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8009c4a:	2317      	movs	r3, #23
 8009c4c:	18fb      	adds	r3, r7, r3
 8009c4e:	2203      	movs	r2, #3
 8009c50:	701a      	strb	r2, [r3, #0]
          goto error;
 8009c52:	e051      	b.n	8009cf8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2246      	movs	r2, #70	; 0x46
 8009c58:	5a9b      	ldrh	r3, [r3, r2]
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d1c7      	bne.n	8009bf0 <HAL_SPI_Receive+0x168>
 8009c60:	e035      	b.n	8009cce <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	2201      	movs	r2, #1
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d115      	bne.n	8009c9c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	68da      	ldr	r2, [r3, #12]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7a:	b292      	uxth	r2, r2
 8009c7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c82:	1c9a      	adds	r2, r3, #2
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2246      	movs	r2, #70	; 0x46
 8009c8c:	5a9b      	ldrh	r3, [r3, r2]
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	3b01      	subs	r3, #1
 8009c92:	b299      	uxth	r1, r3
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2246      	movs	r2, #70	; 0x46
 8009c98:	5299      	strh	r1, [r3, r2]
 8009c9a:	e012      	b.n	8009cc2 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c9c:	f7fb fd86 	bl	80057ac <HAL_GetTick>
 8009ca0:	0002      	movs	r2, r0
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	1ad3      	subs	r3, r2, r3
 8009ca6:	683a      	ldr	r2, [r7, #0]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d802      	bhi.n	8009cb2 <HAL_SPI_Receive+0x22a>
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	d102      	bne.n	8009cb8 <HAL_SPI_Receive+0x230>
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d104      	bne.n	8009cc2 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8009cb8:	2317      	movs	r3, #23
 8009cba:	18fb      	adds	r3, r7, r3
 8009cbc:	2203      	movs	r2, #3
 8009cbe:	701a      	strb	r2, [r3, #0]
          goto error;
 8009cc0:	e01a      	b.n	8009cf8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2246      	movs	r2, #70	; 0x46
 8009cc6:	5a9b      	ldrh	r3, [r3, r2]
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d1c9      	bne.n	8009c62 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009cce:	693a      	ldr	r2, [r7, #16]
 8009cd0:	6839      	ldr	r1, [r7, #0]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	0018      	movs	r0, r3
 8009cd6:	f000 fc35 	bl	800a544 <SPI_EndRxTransaction>
 8009cda:	1e03      	subs	r3, r0, #0
 8009cdc:	d002      	beq.n	8009ce4 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2220      	movs	r2, #32
 8009ce2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d004      	beq.n	8009cf6 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8009cec:	2317      	movs	r3, #23
 8009cee:	18fb      	adds	r3, r7, r3
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	701a      	strb	r2, [r3, #0]
 8009cf4:	e000      	b.n	8009cf8 <HAL_SPI_Receive+0x270>
  }

error :
 8009cf6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	225d      	movs	r2, #93	; 0x5d
 8009cfc:	2101      	movs	r1, #1
 8009cfe:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	225c      	movs	r2, #92	; 0x5c
 8009d04:	2100      	movs	r1, #0
 8009d06:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009d08:	2317      	movs	r3, #23
 8009d0a:	18fb      	adds	r3, r7, r3
 8009d0c:	781b      	ldrb	r3, [r3, #0]
}
 8009d0e:	0018      	movs	r0, r3
 8009d10:	46bd      	mov	sp, r7
 8009d12:	b007      	add	sp, #28
 8009d14:	bd90      	pop	{r4, r7, pc}
 8009d16:	46c0      	nop			; (mov r8, r8)
 8009d18:	ffffefff 	.word	0xffffefff
 8009d1c:	ffffbfff 	.word	0xffffbfff

08009d20 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b08a      	sub	sp, #40	; 0x28
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	607a      	str	r2, [r7, #4]
 8009d2c:	001a      	movs	r2, r3
 8009d2e:	1cbb      	adds	r3, r7, #2
 8009d30:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009d32:	2301      	movs	r3, #1
 8009d34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009d36:	2323      	movs	r3, #35	; 0x23
 8009d38:	18fb      	adds	r3, r7, r3
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	225c      	movs	r2, #92	; 0x5c
 8009d42:	5c9b      	ldrb	r3, [r3, r2]
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d101      	bne.n	8009d4c <HAL_SPI_TransmitReceive+0x2c>
 8009d48:	2302      	movs	r3, #2
 8009d4a:	e1b5      	b.n	800a0b8 <HAL_SPI_TransmitReceive+0x398>
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	225c      	movs	r2, #92	; 0x5c
 8009d50:	2101      	movs	r1, #1
 8009d52:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d54:	f7fb fd2a 	bl	80057ac <HAL_GetTick>
 8009d58:	0003      	movs	r3, r0
 8009d5a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009d5c:	201b      	movs	r0, #27
 8009d5e:	183b      	adds	r3, r7, r0
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	215d      	movs	r1, #93	; 0x5d
 8009d64:	5c52      	ldrb	r2, [r2, r1]
 8009d66:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009d6e:	2312      	movs	r3, #18
 8009d70:	18fb      	adds	r3, r7, r3
 8009d72:	1cba      	adds	r2, r7, #2
 8009d74:	8812      	ldrh	r2, [r2, #0]
 8009d76:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009d78:	183b      	adds	r3, r7, r0
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d011      	beq.n	8009da4 <HAL_SPI_TransmitReceive+0x84>
 8009d80:	697a      	ldr	r2, [r7, #20]
 8009d82:	2382      	movs	r3, #130	; 0x82
 8009d84:	005b      	lsls	r3, r3, #1
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d107      	bne.n	8009d9a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d103      	bne.n	8009d9a <HAL_SPI_TransmitReceive+0x7a>
 8009d92:	183b      	adds	r3, r7, r0
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	2b04      	cmp	r3, #4
 8009d98:	d004      	beq.n	8009da4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8009d9a:	2323      	movs	r3, #35	; 0x23
 8009d9c:	18fb      	adds	r3, r7, r3
 8009d9e:	2202      	movs	r2, #2
 8009da0:	701a      	strb	r2, [r3, #0]
    goto error;
 8009da2:	e17e      	b.n	800a0a2 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d006      	beq.n	8009db8 <HAL_SPI_TransmitReceive+0x98>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d003      	beq.n	8009db8 <HAL_SPI_TransmitReceive+0x98>
 8009db0:	1cbb      	adds	r3, r7, #2
 8009db2:	881b      	ldrh	r3, [r3, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d104      	bne.n	8009dc2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8009db8:	2323      	movs	r3, #35	; 0x23
 8009dba:	18fb      	adds	r3, r7, r3
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	701a      	strb	r2, [r3, #0]
    goto error;
 8009dc0:	e16f      	b.n	800a0a2 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	225d      	movs	r2, #93	; 0x5d
 8009dc6:	5c9b      	ldrb	r3, [r3, r2]
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	2b04      	cmp	r3, #4
 8009dcc:	d003      	beq.n	8009dd6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	225d      	movs	r2, #93	; 0x5d
 8009dd2:	2105      	movs	r1, #5
 8009dd4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	1cba      	adds	r2, r7, #2
 8009de6:	2146      	movs	r1, #70	; 0x46
 8009de8:	8812      	ldrh	r2, [r2, #0]
 8009dea:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	1cba      	adds	r2, r7, #2
 8009df0:	2144      	movs	r1, #68	; 0x44
 8009df2:	8812      	ldrh	r2, [r2, #0]
 8009df4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	68ba      	ldr	r2, [r7, #8]
 8009dfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	1cba      	adds	r2, r7, #2
 8009e00:	8812      	ldrh	r2, [r2, #0]
 8009e02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	1cba      	adds	r2, r7, #2
 8009e08:	8812      	ldrh	r2, [r2, #0]
 8009e0a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2200      	movs	r2, #0
 8009e16:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	68da      	ldr	r2, [r3, #12]
 8009e1c:	23e0      	movs	r3, #224	; 0xe0
 8009e1e:	00db      	lsls	r3, r3, #3
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d908      	bls.n	8009e36 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	685a      	ldr	r2, [r3, #4]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	49a4      	ldr	r1, [pc, #656]	; (800a0c0 <HAL_SPI_TransmitReceive+0x3a0>)
 8009e30:	400a      	ands	r2, r1
 8009e32:	605a      	str	r2, [r3, #4]
 8009e34:	e008      	b.n	8009e48 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	685a      	ldr	r2, [r3, #4]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2180      	movs	r1, #128	; 0x80
 8009e42:	0149      	lsls	r1, r1, #5
 8009e44:	430a      	orrs	r2, r1
 8009e46:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2240      	movs	r2, #64	; 0x40
 8009e50:	4013      	ands	r3, r2
 8009e52:	2b40      	cmp	r3, #64	; 0x40
 8009e54:	d007      	beq.n	8009e66 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2140      	movs	r1, #64	; 0x40
 8009e62:	430a      	orrs	r2, r1
 8009e64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	68da      	ldr	r2, [r3, #12]
 8009e6a:	23e0      	movs	r3, #224	; 0xe0
 8009e6c:	00db      	lsls	r3, r3, #3
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d800      	bhi.n	8009e74 <HAL_SPI_TransmitReceive+0x154>
 8009e72:	e07f      	b.n	8009f74 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d005      	beq.n	8009e88 <HAL_SPI_TransmitReceive+0x168>
 8009e7c:	2312      	movs	r3, #18
 8009e7e:	18fb      	adds	r3, r7, r3
 8009e80:	881b      	ldrh	r3, [r3, #0]
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d000      	beq.n	8009e88 <HAL_SPI_TransmitReceive+0x168>
 8009e86:	e069      	b.n	8009f5c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e8c:	881a      	ldrh	r2, [r3, #0]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e98:	1c9a      	adds	r2, r3, #2
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	b29a      	uxth	r2, r3
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009eac:	e056      	b.n	8009f5c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	2202      	movs	r2, #2
 8009eb6:	4013      	ands	r3, r2
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d11b      	bne.n	8009ef4 <HAL_SPI_TransmitReceive+0x1d4>
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d016      	beq.n	8009ef4 <HAL_SPI_TransmitReceive+0x1d4>
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d113      	bne.n	8009ef4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed0:	881a      	ldrh	r2, [r3, #0]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009edc:	1c9a      	adds	r2, r3, #2
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	b29a      	uxth	r2, r3
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	2201      	movs	r2, #1
 8009efc:	4013      	ands	r3, r2
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d11c      	bne.n	8009f3c <HAL_SPI_TransmitReceive+0x21c>
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2246      	movs	r2, #70	; 0x46
 8009f06:	5a9b      	ldrh	r3, [r3, r2]
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d016      	beq.n	8009f3c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	68da      	ldr	r2, [r3, #12]
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f18:	b292      	uxth	r2, r2
 8009f1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f20:	1c9a      	adds	r2, r3, #2
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2246      	movs	r2, #70	; 0x46
 8009f2a:	5a9b      	ldrh	r3, [r3, r2]
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	3b01      	subs	r3, #1
 8009f30:	b299      	uxth	r1, r3
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2246      	movs	r2, #70	; 0x46
 8009f36:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009f3c:	f7fb fc36 	bl	80057ac <HAL_GetTick>
 8009f40:	0002      	movs	r2, r0
 8009f42:	69fb      	ldr	r3, [r7, #28]
 8009f44:	1ad3      	subs	r3, r2, r3
 8009f46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d807      	bhi.n	8009f5c <HAL_SPI_TransmitReceive+0x23c>
 8009f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4e:	3301      	adds	r3, #1
 8009f50:	d004      	beq.n	8009f5c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8009f52:	2323      	movs	r3, #35	; 0x23
 8009f54:	18fb      	adds	r3, r7, r3
 8009f56:	2203      	movs	r2, #3
 8009f58:	701a      	strb	r2, [r3, #0]
        goto error;
 8009f5a:	e0a2      	b.n	800a0a2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1a3      	bne.n	8009eae <HAL_SPI_TransmitReceive+0x18e>
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2246      	movs	r2, #70	; 0x46
 8009f6a:	5a9b      	ldrh	r3, [r3, r2]
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d19d      	bne.n	8009eae <HAL_SPI_TransmitReceive+0x18e>
 8009f72:	e085      	b.n	800a080 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d005      	beq.n	8009f88 <HAL_SPI_TransmitReceive+0x268>
 8009f7c:	2312      	movs	r3, #18
 8009f7e:	18fb      	adds	r3, r7, r3
 8009f80:	881b      	ldrh	r3, [r3, #0]
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d000      	beq.n	8009f88 <HAL_SPI_TransmitReceive+0x268>
 8009f86:	e070      	b.n	800a06a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	330c      	adds	r3, #12
 8009f92:	7812      	ldrb	r2, [r2, #0]
 8009f94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9a:	1c5a      	adds	r2, r3, #1
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	3b01      	subs	r3, #1
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009fae:	e05c      	b.n	800a06a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	2202      	movs	r2, #2
 8009fb8:	4013      	ands	r3, r2
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d11c      	bne.n	8009ff8 <HAL_SPI_TransmitReceive+0x2d8>
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d017      	beq.n	8009ff8 <HAL_SPI_TransmitReceive+0x2d8>
 8009fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d114      	bne.n	8009ff8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	330c      	adds	r3, #12
 8009fd8:	7812      	ldrb	r2, [r2, #0]
 8009fda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe0:	1c5a      	adds	r2, r3, #1
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	3b01      	subs	r3, #1
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	2201      	movs	r2, #1
 800a000:	4013      	ands	r3, r2
 800a002:	2b01      	cmp	r3, #1
 800a004:	d11e      	bne.n	800a044 <HAL_SPI_TransmitReceive+0x324>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2246      	movs	r2, #70	; 0x46
 800a00a:	5a9b      	ldrh	r3, [r3, r2]
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d018      	beq.n	800a044 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	330c      	adds	r3, #12
 800a018:	001a      	movs	r2, r3
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01e:	7812      	ldrb	r2, [r2, #0]
 800a020:	b2d2      	uxtb	r2, r2
 800a022:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a028:	1c5a      	adds	r2, r3, #1
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2246      	movs	r2, #70	; 0x46
 800a032:	5a9b      	ldrh	r3, [r3, r2]
 800a034:	b29b      	uxth	r3, r3
 800a036:	3b01      	subs	r3, #1
 800a038:	b299      	uxth	r1, r3
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2246      	movs	r2, #70	; 0x46
 800a03e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a040:	2301      	movs	r3, #1
 800a042:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a044:	f7fb fbb2 	bl	80057ac <HAL_GetTick>
 800a048:	0002      	movs	r2, r0
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	1ad3      	subs	r3, r2, r3
 800a04e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a050:	429a      	cmp	r2, r3
 800a052:	d802      	bhi.n	800a05a <HAL_SPI_TransmitReceive+0x33a>
 800a054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a056:	3301      	adds	r3, #1
 800a058:	d102      	bne.n	800a060 <HAL_SPI_TransmitReceive+0x340>
 800a05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d104      	bne.n	800a06a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800a060:	2323      	movs	r3, #35	; 0x23
 800a062:	18fb      	adds	r3, r7, r3
 800a064:	2203      	movs	r2, #3
 800a066:	701a      	strb	r2, [r3, #0]
        goto error;
 800a068:	e01b      	b.n	800a0a2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a06e:	b29b      	uxth	r3, r3
 800a070:	2b00      	cmp	r3, #0
 800a072:	d19d      	bne.n	8009fb0 <HAL_SPI_TransmitReceive+0x290>
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2246      	movs	r2, #70	; 0x46
 800a078:	5a9b      	ldrh	r3, [r3, r2]
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d197      	bne.n	8009fb0 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a080:	69fa      	ldr	r2, [r7, #28]
 800a082:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	0018      	movs	r0, r3
 800a088:	f000 faba 	bl	800a600 <SPI_EndRxTxTransaction>
 800a08c:	1e03      	subs	r3, r0, #0
 800a08e:	d007      	beq.n	800a0a0 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800a090:	2323      	movs	r3, #35	; 0x23
 800a092:	18fb      	adds	r3, r7, r3
 800a094:	2201      	movs	r2, #1
 800a096:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2220      	movs	r2, #32
 800a09c:	661a      	str	r2, [r3, #96]	; 0x60
 800a09e:	e000      	b.n	800a0a2 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800a0a0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	225d      	movs	r2, #93	; 0x5d
 800a0a6:	2101      	movs	r1, #1
 800a0a8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	225c      	movs	r2, #92	; 0x5c
 800a0ae:	2100      	movs	r1, #0
 800a0b0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800a0b2:	2323      	movs	r3, #35	; 0x23
 800a0b4:	18fb      	adds	r3, r7, r3
 800a0b6:	781b      	ldrb	r3, [r3, #0]
}
 800a0b8:	0018      	movs	r0, r3
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	b00a      	add	sp, #40	; 0x28
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	ffffefff 	.word	0xffffefff

0800a0c4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b088      	sub	sp, #32
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	099b      	lsrs	r3, r3, #6
 800a0e0:	001a      	movs	r2, r3
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	d10f      	bne.n	800a108 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a0ee:	d00b      	beq.n	800a108 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a0f0:	69fb      	ldr	r3, [r7, #28]
 800a0f2:	099b      	lsrs	r3, r3, #6
 800a0f4:	001a      	movs	r2, r3
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	4013      	ands	r3, r2
 800a0fa:	d005      	beq.n	800a108 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	0010      	movs	r0, r2
 800a104:	4798      	blx	r3
    return;
 800a106:	e0d5      	b.n	800a2b4 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	085b      	lsrs	r3, r3, #1
 800a10c:	001a      	movs	r2, r3
 800a10e:	2301      	movs	r3, #1
 800a110:	4013      	ands	r3, r2
 800a112:	d00b      	beq.n	800a12c <HAL_SPI_IRQHandler+0x68>
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	09db      	lsrs	r3, r3, #7
 800a118:	001a      	movs	r2, r3
 800a11a:	2301      	movs	r3, #1
 800a11c:	4013      	ands	r3, r2
 800a11e:	d005      	beq.n	800a12c <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	0010      	movs	r0, r2
 800a128:	4798      	blx	r3
    return;
 800a12a:	e0c3      	b.n	800a2b4 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	095b      	lsrs	r3, r3, #5
 800a130:	001a      	movs	r2, r3
 800a132:	2301      	movs	r3, #1
 800a134:	4013      	ands	r3, r2
 800a136:	d10c      	bne.n	800a152 <HAL_SPI_IRQHandler+0x8e>
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	099b      	lsrs	r3, r3, #6
 800a13c:	001a      	movs	r2, r3
 800a13e:	2301      	movs	r3, #1
 800a140:	4013      	ands	r3, r2
 800a142:	d106      	bne.n	800a152 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	0a1b      	lsrs	r3, r3, #8
 800a148:	001a      	movs	r2, r3
 800a14a:	2301      	movs	r3, #1
 800a14c:	4013      	ands	r3, r2
 800a14e:	d100      	bne.n	800a152 <HAL_SPI_IRQHandler+0x8e>
 800a150:	e0b0      	b.n	800a2b4 <HAL_SPI_IRQHandler+0x1f0>
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	095b      	lsrs	r3, r3, #5
 800a156:	001a      	movs	r2, r3
 800a158:	2301      	movs	r3, #1
 800a15a:	4013      	ands	r3, r2
 800a15c:	d100      	bne.n	800a160 <HAL_SPI_IRQHandler+0x9c>
 800a15e:	e0a9      	b.n	800a2b4 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	099b      	lsrs	r3, r3, #6
 800a164:	001a      	movs	r2, r3
 800a166:	2301      	movs	r3, #1
 800a168:	4013      	ands	r3, r2
 800a16a:	d023      	beq.n	800a1b4 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	225d      	movs	r2, #93	; 0x5d
 800a170:	5c9b      	ldrb	r3, [r3, r2]
 800a172:	b2db      	uxtb	r3, r3
 800a174:	2b03      	cmp	r3, #3
 800a176:	d011      	beq.n	800a19c <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a17c:	2204      	movs	r2, #4
 800a17e:	431a      	orrs	r2, r3
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a184:	2300      	movs	r3, #0
 800a186:	617b      	str	r3, [r7, #20]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	617b      	str	r3, [r7, #20]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	617b      	str	r3, [r7, #20]
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	e00b      	b.n	800a1b4 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a19c:	2300      	movs	r3, #0
 800a19e:	613b      	str	r3, [r7, #16]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	613b      	str	r3, [r7, #16]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	613b      	str	r3, [r7, #16]
 800a1b0:	693b      	ldr	r3, [r7, #16]
        return;
 800a1b2:	e07f      	b.n	800a2b4 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	095b      	lsrs	r3, r3, #5
 800a1b8:	001a      	movs	r2, r3
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	4013      	ands	r3, r2
 800a1be:	d014      	beq.n	800a1ea <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	431a      	orrs	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	60fb      	str	r3, [r7, #12]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	60fb      	str	r3, [r7, #12]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	2140      	movs	r1, #64	; 0x40
 800a1e4:	438a      	bics	r2, r1
 800a1e6:	601a      	str	r2, [r3, #0]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	0a1b      	lsrs	r3, r3, #8
 800a1ee:	001a      	movs	r2, r3
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	d00c      	beq.n	800a210 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1fa:	2208      	movs	r2, #8
 800a1fc:	431a      	orrs	r2, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a202:	2300      	movs	r3, #0
 800a204:	60bb      	str	r3, [r7, #8]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	60bb      	str	r3, [r7, #8]
 800a20e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a214:	2b00      	cmp	r3, #0
 800a216:	d04c      	beq.n	800a2b2 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	685a      	ldr	r2, [r3, #4]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	21e0      	movs	r1, #224	; 0xe0
 800a224:	438a      	bics	r2, r1
 800a226:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	225d      	movs	r2, #93	; 0x5d
 800a22c:	2101      	movs	r1, #1
 800a22e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	2202      	movs	r2, #2
 800a234:	4013      	ands	r3, r2
 800a236:	d103      	bne.n	800a240 <HAL_SPI_IRQHandler+0x17c>
 800a238:	69fb      	ldr	r3, [r7, #28]
 800a23a:	2201      	movs	r2, #1
 800a23c:	4013      	ands	r3, r2
 800a23e:	d032      	beq.n	800a2a6 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	685a      	ldr	r2, [r3, #4]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	2103      	movs	r1, #3
 800a24c:	438a      	bics	r2, r1
 800a24e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a254:	2b00      	cmp	r3, #0
 800a256:	d010      	beq.n	800a27a <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a25c:	4a17      	ldr	r2, [pc, #92]	; (800a2bc <HAL_SPI_IRQHandler+0x1f8>)
 800a25e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a264:	0018      	movs	r0, r3
 800a266:	f7fb ff33 	bl	80060d0 <HAL_DMA_Abort_IT>
 800a26a:	1e03      	subs	r3, r0, #0
 800a26c:	d005      	beq.n	800a27a <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a272:	2240      	movs	r2, #64	; 0x40
 800a274:	431a      	orrs	r2, r3
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d016      	beq.n	800a2b0 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a286:	4a0d      	ldr	r2, [pc, #52]	; (800a2bc <HAL_SPI_IRQHandler+0x1f8>)
 800a288:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a28e:	0018      	movs	r0, r3
 800a290:	f7fb ff1e 	bl	80060d0 <HAL_DMA_Abort_IT>
 800a294:	1e03      	subs	r3, r0, #0
 800a296:	d00b      	beq.n	800a2b0 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a29c:	2240      	movs	r2, #64	; 0x40
 800a29e:	431a      	orrs	r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800a2a4:	e004      	b.n	800a2b0 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	0018      	movs	r0, r3
 800a2aa:	f000 f809 	bl	800a2c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a2ae:	e000      	b.n	800a2b2 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 800a2b0:	46c0      	nop			; (mov r8, r8)
    return;
 800a2b2:	46c0      	nop			; (mov r8, r8)
  }
}
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	b008      	add	sp, #32
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	46c0      	nop			; (mov r8, r8)
 800a2bc:	0800a2d1 	.word	0x0800a2d1

0800a2c0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a2c8:	46c0      	nop			; (mov r8, r8)
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	b002      	add	sp, #8
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2dc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2246      	movs	r2, #70	; 0x46
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	0018      	movs	r0, r3
 800a2f0:	f7ff ffe6 	bl	800a2c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a2f4:	46c0      	nop			; (mov r8, r8)
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	b004      	add	sp, #16
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b088      	sub	sp, #32
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	603b      	str	r3, [r7, #0]
 800a308:	1dfb      	adds	r3, r7, #7
 800a30a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a30c:	f7fb fa4e 	bl	80057ac <HAL_GetTick>
 800a310:	0002      	movs	r2, r0
 800a312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a314:	1a9b      	subs	r3, r3, r2
 800a316:	683a      	ldr	r2, [r7, #0]
 800a318:	18d3      	adds	r3, r2, r3
 800a31a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a31c:	f7fb fa46 	bl	80057ac <HAL_GetTick>
 800a320:	0003      	movs	r3, r0
 800a322:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a324:	4b3a      	ldr	r3, [pc, #232]	; (800a410 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	015b      	lsls	r3, r3, #5
 800a32a:	0d1b      	lsrs	r3, r3, #20
 800a32c:	69fa      	ldr	r2, [r7, #28]
 800a32e:	4353      	muls	r3, r2
 800a330:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a332:	e058      	b.n	800a3e6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	3301      	adds	r3, #1
 800a338:	d055      	beq.n	800a3e6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a33a:	f7fb fa37 	bl	80057ac <HAL_GetTick>
 800a33e:	0002      	movs	r2, r0
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	1ad3      	subs	r3, r2, r3
 800a344:	69fa      	ldr	r2, [r7, #28]
 800a346:	429a      	cmp	r2, r3
 800a348:	d902      	bls.n	800a350 <SPI_WaitFlagStateUntilTimeout+0x54>
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d142      	bne.n	800a3d6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	685a      	ldr	r2, [r3, #4]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	21e0      	movs	r1, #224	; 0xe0
 800a35c:	438a      	bics	r2, r1
 800a35e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	685a      	ldr	r2, [r3, #4]
 800a364:	2382      	movs	r3, #130	; 0x82
 800a366:	005b      	lsls	r3, r3, #1
 800a368:	429a      	cmp	r2, r3
 800a36a:	d113      	bne.n	800a394 <SPI_WaitFlagStateUntilTimeout+0x98>
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	689a      	ldr	r2, [r3, #8]
 800a370:	2380      	movs	r3, #128	; 0x80
 800a372:	021b      	lsls	r3, r3, #8
 800a374:	429a      	cmp	r2, r3
 800a376:	d005      	beq.n	800a384 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	689a      	ldr	r2, [r3, #8]
 800a37c:	2380      	movs	r3, #128	; 0x80
 800a37e:	00db      	lsls	r3, r3, #3
 800a380:	429a      	cmp	r2, r3
 800a382:	d107      	bne.n	800a394 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	2140      	movs	r1, #64	; 0x40
 800a390:	438a      	bics	r2, r1
 800a392:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a398:	2380      	movs	r3, #128	; 0x80
 800a39a:	019b      	lsls	r3, r3, #6
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d110      	bne.n	800a3c2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	491a      	ldr	r1, [pc, #104]	; (800a414 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800a3ac:	400a      	ands	r2, r1
 800a3ae:	601a      	str	r2, [r3, #0]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2180      	movs	r1, #128	; 0x80
 800a3bc:	0189      	lsls	r1, r1, #6
 800a3be:	430a      	orrs	r2, r1
 800a3c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	225d      	movs	r2, #93	; 0x5d
 800a3c6:	2101      	movs	r1, #1
 800a3c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	225c      	movs	r2, #92	; 0x5c
 800a3ce:	2100      	movs	r1, #0
 800a3d0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a3d2:	2303      	movs	r3, #3
 800a3d4:	e017      	b.n	800a406 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d101      	bne.n	800a3e0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	3b01      	subs	r3, #1
 800a3e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	4013      	ands	r3, r2
 800a3f0:	68ba      	ldr	r2, [r7, #8]
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	425a      	negs	r2, r3
 800a3f6:	4153      	adcs	r3, r2
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	001a      	movs	r2, r3
 800a3fc:	1dfb      	adds	r3, r7, #7
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	429a      	cmp	r2, r3
 800a402:	d197      	bne.n	800a334 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	0018      	movs	r0, r3
 800a408:	46bd      	mov	sp, r7
 800a40a:	b008      	add	sp, #32
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	46c0      	nop			; (mov r8, r8)
 800a410:	20000038 	.word	0x20000038
 800a414:	ffffdfff 	.word	0xffffdfff

0800a418 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b088      	sub	sp, #32
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	607a      	str	r2, [r7, #4]
 800a424:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a426:	f7fb f9c1 	bl	80057ac <HAL_GetTick>
 800a42a:	0002      	movs	r2, r0
 800a42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42e:	1a9b      	subs	r3, r3, r2
 800a430:	683a      	ldr	r2, [r7, #0]
 800a432:	18d3      	adds	r3, r2, r3
 800a434:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a436:	f7fb f9b9 	bl	80057ac <HAL_GetTick>
 800a43a:	0003      	movs	r3, r0
 800a43c:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a43e:	4b3f      	ldr	r3, [pc, #252]	; (800a53c <SPI_WaitFifoStateUntilTimeout+0x124>)
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	0013      	movs	r3, r2
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	189b      	adds	r3, r3, r2
 800a448:	00da      	lsls	r2, r3, #3
 800a44a:	1ad3      	subs	r3, r2, r3
 800a44c:	0d1b      	lsrs	r3, r3, #20
 800a44e:	69fa      	ldr	r2, [r7, #28]
 800a450:	4353      	muls	r3, r2
 800a452:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800a454:	e064      	b.n	800a520 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a456:	68ba      	ldr	r2, [r7, #8]
 800a458:	23c0      	movs	r3, #192	; 0xc0
 800a45a:	00db      	lsls	r3, r3, #3
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d106      	bne.n	800a46e <SPI_WaitFifoStateUntilTimeout+0x56>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d103      	bne.n	800a46e <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	330c      	adds	r3, #12
 800a46c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	3301      	adds	r3, #1
 800a472:	d055      	beq.n	800a520 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a474:	f7fb f99a 	bl	80057ac <HAL_GetTick>
 800a478:	0002      	movs	r2, r0
 800a47a:	69bb      	ldr	r3, [r7, #24]
 800a47c:	1ad3      	subs	r3, r2, r3
 800a47e:	69fa      	ldr	r2, [r7, #28]
 800a480:	429a      	cmp	r2, r3
 800a482:	d902      	bls.n	800a48a <SPI_WaitFifoStateUntilTimeout+0x72>
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d142      	bne.n	800a510 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	685a      	ldr	r2, [r3, #4]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	21e0      	movs	r1, #224	; 0xe0
 800a496:	438a      	bics	r2, r1
 800a498:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	685a      	ldr	r2, [r3, #4]
 800a49e:	2382      	movs	r3, #130	; 0x82
 800a4a0:	005b      	lsls	r3, r3, #1
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d113      	bne.n	800a4ce <SPI_WaitFifoStateUntilTimeout+0xb6>
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	689a      	ldr	r2, [r3, #8]
 800a4aa:	2380      	movs	r3, #128	; 0x80
 800a4ac:	021b      	lsls	r3, r3, #8
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d005      	beq.n	800a4be <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	689a      	ldr	r2, [r3, #8]
 800a4b6:	2380      	movs	r3, #128	; 0x80
 800a4b8:	00db      	lsls	r3, r3, #3
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d107      	bne.n	800a4ce <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2140      	movs	r1, #64	; 0x40
 800a4ca:	438a      	bics	r2, r1
 800a4cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a4d2:	2380      	movs	r3, #128	; 0x80
 800a4d4:	019b      	lsls	r3, r3, #6
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d110      	bne.n	800a4fc <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4916      	ldr	r1, [pc, #88]	; (800a540 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a4e6:	400a      	ands	r2, r1
 800a4e8:	601a      	str	r2, [r3, #0]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2180      	movs	r1, #128	; 0x80
 800a4f6:	0189      	lsls	r1, r1, #6
 800a4f8:	430a      	orrs	r2, r1
 800a4fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	225d      	movs	r2, #93	; 0x5d
 800a500:	2101      	movs	r1, #1
 800a502:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	225c      	movs	r2, #92	; 0x5c
 800a508:	2100      	movs	r1, #0
 800a50a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a50c:	2303      	movs	r3, #3
 800a50e:	e010      	b.n	800a532 <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d101      	bne.n	800a51a <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 800a516:	2300      	movs	r3, #0
 800a518:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	3b01      	subs	r3, #1
 800a51e:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	68ba      	ldr	r2, [r7, #8]
 800a528:	4013      	ands	r3, r2
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d192      	bne.n	800a456 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800a530:	2300      	movs	r3, #0
}
 800a532:	0018      	movs	r0, r3
 800a534:	46bd      	mov	sp, r7
 800a536:	b008      	add	sp, #32
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	46c0      	nop			; (mov r8, r8)
 800a53c:	20000038 	.word	0x20000038
 800a540:	ffffdfff 	.word	0xffffdfff

0800a544 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b086      	sub	sp, #24
 800a548:	af02      	add	r7, sp, #8
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	60b9      	str	r1, [r7, #8]
 800a54e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	685a      	ldr	r2, [r3, #4]
 800a554:	2382      	movs	r3, #130	; 0x82
 800a556:	005b      	lsls	r3, r3, #1
 800a558:	429a      	cmp	r2, r3
 800a55a:	d113      	bne.n	800a584 <SPI_EndRxTransaction+0x40>
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	689a      	ldr	r2, [r3, #8]
 800a560:	2380      	movs	r3, #128	; 0x80
 800a562:	021b      	lsls	r3, r3, #8
 800a564:	429a      	cmp	r2, r3
 800a566:	d005      	beq.n	800a574 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	689a      	ldr	r2, [r3, #8]
 800a56c:	2380      	movs	r3, #128	; 0x80
 800a56e:	00db      	lsls	r3, r3, #3
 800a570:	429a      	cmp	r2, r3
 800a572:	d107      	bne.n	800a584 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2140      	movs	r1, #64	; 0x40
 800a580:	438a      	bics	r2, r1
 800a582:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a584:	68ba      	ldr	r2, [r7, #8]
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	9300      	str	r3, [sp, #0]
 800a58c:	0013      	movs	r3, r2
 800a58e:	2200      	movs	r2, #0
 800a590:	2180      	movs	r1, #128	; 0x80
 800a592:	f7ff feb3 	bl	800a2fc <SPI_WaitFlagStateUntilTimeout>
 800a596:	1e03      	subs	r3, r0, #0
 800a598:	d007      	beq.n	800a5aa <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a59e:	2220      	movs	r2, #32
 800a5a0:	431a      	orrs	r2, r3
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a5a6:	2303      	movs	r3, #3
 800a5a8:	e026      	b.n	800a5f8 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	685a      	ldr	r2, [r3, #4]
 800a5ae:	2382      	movs	r3, #130	; 0x82
 800a5b0:	005b      	lsls	r3, r3, #1
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d11f      	bne.n	800a5f6 <SPI_EndRxTransaction+0xb2>
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	689a      	ldr	r2, [r3, #8]
 800a5ba:	2380      	movs	r3, #128	; 0x80
 800a5bc:	021b      	lsls	r3, r3, #8
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d005      	beq.n	800a5ce <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	689a      	ldr	r2, [r3, #8]
 800a5c6:	2380      	movs	r3, #128	; 0x80
 800a5c8:	00db      	lsls	r3, r3, #3
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d113      	bne.n	800a5f6 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a5ce:	68ba      	ldr	r2, [r7, #8]
 800a5d0:	23c0      	movs	r3, #192	; 0xc0
 800a5d2:	00d9      	lsls	r1, r3, #3
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	9300      	str	r3, [sp, #0]
 800a5da:	0013      	movs	r3, r2
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f7ff ff1b 	bl	800a418 <SPI_WaitFifoStateUntilTimeout>
 800a5e2:	1e03      	subs	r3, r0, #0
 800a5e4:	d007      	beq.n	800a5f6 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5ea:	2220      	movs	r2, #32
 800a5ec:	431a      	orrs	r2, r3
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a5f2:	2303      	movs	r3, #3
 800a5f4:	e000      	b.n	800a5f8 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800a5f6:	2300      	movs	r3, #0
}
 800a5f8:	0018      	movs	r0, r3
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	b004      	add	sp, #16
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b086      	sub	sp, #24
 800a604:	af02      	add	r7, sp, #8
 800a606:	60f8      	str	r0, [r7, #12]
 800a608:	60b9      	str	r1, [r7, #8]
 800a60a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a60c:	68ba      	ldr	r2, [r7, #8]
 800a60e:	23c0      	movs	r3, #192	; 0xc0
 800a610:	0159      	lsls	r1, r3, #5
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	9300      	str	r3, [sp, #0]
 800a618:	0013      	movs	r3, r2
 800a61a:	2200      	movs	r2, #0
 800a61c:	f7ff fefc 	bl	800a418 <SPI_WaitFifoStateUntilTimeout>
 800a620:	1e03      	subs	r3, r0, #0
 800a622:	d007      	beq.n	800a634 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a628:	2220      	movs	r2, #32
 800a62a:	431a      	orrs	r2, r3
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a630:	2303      	movs	r3, #3
 800a632:	e027      	b.n	800a684 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a634:	68ba      	ldr	r2, [r7, #8]
 800a636:	68f8      	ldr	r0, [r7, #12]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	9300      	str	r3, [sp, #0]
 800a63c:	0013      	movs	r3, r2
 800a63e:	2200      	movs	r2, #0
 800a640:	2180      	movs	r1, #128	; 0x80
 800a642:	f7ff fe5b 	bl	800a2fc <SPI_WaitFlagStateUntilTimeout>
 800a646:	1e03      	subs	r3, r0, #0
 800a648:	d007      	beq.n	800a65a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a64e:	2220      	movs	r2, #32
 800a650:	431a      	orrs	r2, r3
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a656:	2303      	movs	r3, #3
 800a658:	e014      	b.n	800a684 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a65a:	68ba      	ldr	r2, [r7, #8]
 800a65c:	23c0      	movs	r3, #192	; 0xc0
 800a65e:	00d9      	lsls	r1, r3, #3
 800a660:	68f8      	ldr	r0, [r7, #12]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	9300      	str	r3, [sp, #0]
 800a666:	0013      	movs	r3, r2
 800a668:	2200      	movs	r2, #0
 800a66a:	f7ff fed5 	bl	800a418 <SPI_WaitFifoStateUntilTimeout>
 800a66e:	1e03      	subs	r3, r0, #0
 800a670:	d007      	beq.n	800a682 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a676:	2220      	movs	r2, #32
 800a678:	431a      	orrs	r2, r3
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a67e:	2303      	movs	r3, #3
 800a680:	e000      	b.n	800a684 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a682:	2300      	movs	r3, #0
}
 800a684:	0018      	movs	r0, r3
 800a686:	46bd      	mov	sp, r7
 800a688:	b004      	add	sp, #16
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d101      	bne.n	800a69e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a69a:	2301      	movs	r3, #1
 800a69c:	e04a      	b.n	800a734 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	223d      	movs	r2, #61	; 0x3d
 800a6a2:	5c9b      	ldrb	r3, [r3, r2]
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d107      	bne.n	800a6ba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	223c      	movs	r2, #60	; 0x3c
 800a6ae:	2100      	movs	r1, #0
 800a6b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	0018      	movs	r0, r3
 800a6b6:	f7fa fda1 	bl	80051fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	223d      	movs	r2, #61	; 0x3d
 800a6be:	2102      	movs	r1, #2
 800a6c0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	3304      	adds	r3, #4
 800a6ca:	0019      	movs	r1, r3
 800a6cc:	0010      	movs	r0, r2
 800a6ce:	f000 fb41 	bl	800ad54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2248      	movs	r2, #72	; 0x48
 800a6d6:	2101      	movs	r1, #1
 800a6d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	223e      	movs	r2, #62	; 0x3e
 800a6de:	2101      	movs	r1, #1
 800a6e0:	5499      	strb	r1, [r3, r2]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	223f      	movs	r2, #63	; 0x3f
 800a6e6:	2101      	movs	r1, #1
 800a6e8:	5499      	strb	r1, [r3, r2]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2240      	movs	r2, #64	; 0x40
 800a6ee:	2101      	movs	r1, #1
 800a6f0:	5499      	strb	r1, [r3, r2]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2241      	movs	r2, #65	; 0x41
 800a6f6:	2101      	movs	r1, #1
 800a6f8:	5499      	strb	r1, [r3, r2]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2242      	movs	r2, #66	; 0x42
 800a6fe:	2101      	movs	r1, #1
 800a700:	5499      	strb	r1, [r3, r2]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2243      	movs	r2, #67	; 0x43
 800a706:	2101      	movs	r1, #1
 800a708:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2244      	movs	r2, #68	; 0x44
 800a70e:	2101      	movs	r1, #1
 800a710:	5499      	strb	r1, [r3, r2]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2245      	movs	r2, #69	; 0x45
 800a716:	2101      	movs	r1, #1
 800a718:	5499      	strb	r1, [r3, r2]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2246      	movs	r2, #70	; 0x46
 800a71e:	2101      	movs	r1, #1
 800a720:	5499      	strb	r1, [r3, r2]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2247      	movs	r2, #71	; 0x47
 800a726:	2101      	movs	r1, #1
 800a728:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	223d      	movs	r2, #61	; 0x3d
 800a72e:	2101      	movs	r1, #1
 800a730:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a732:	2300      	movs	r3, #0
}
 800a734:	0018      	movs	r0, r3
 800a736:	46bd      	mov	sp, r7
 800a738:	b002      	add	sp, #8
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b082      	sub	sp, #8
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d101      	bne.n	800a74e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	e04a      	b.n	800a7e4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	223d      	movs	r2, #61	; 0x3d
 800a752:	5c9b      	ldrb	r3, [r3, r2]
 800a754:	b2db      	uxtb	r3, r3
 800a756:	2b00      	cmp	r3, #0
 800a758:	d107      	bne.n	800a76a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	223c      	movs	r2, #60	; 0x3c
 800a75e:	2100      	movs	r1, #0
 800a760:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	0018      	movs	r0, r3
 800a766:	f000 f841 	bl	800a7ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	223d      	movs	r2, #61	; 0x3d
 800a76e:	2102      	movs	r1, #2
 800a770:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	3304      	adds	r3, #4
 800a77a:	0019      	movs	r1, r3
 800a77c:	0010      	movs	r0, r2
 800a77e:	f000 fae9 	bl	800ad54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2248      	movs	r2, #72	; 0x48
 800a786:	2101      	movs	r1, #1
 800a788:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	223e      	movs	r2, #62	; 0x3e
 800a78e:	2101      	movs	r1, #1
 800a790:	5499      	strb	r1, [r3, r2]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	223f      	movs	r2, #63	; 0x3f
 800a796:	2101      	movs	r1, #1
 800a798:	5499      	strb	r1, [r3, r2]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2240      	movs	r2, #64	; 0x40
 800a79e:	2101      	movs	r1, #1
 800a7a0:	5499      	strb	r1, [r3, r2]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2241      	movs	r2, #65	; 0x41
 800a7a6:	2101      	movs	r1, #1
 800a7a8:	5499      	strb	r1, [r3, r2]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2242      	movs	r2, #66	; 0x42
 800a7ae:	2101      	movs	r1, #1
 800a7b0:	5499      	strb	r1, [r3, r2]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2243      	movs	r2, #67	; 0x43
 800a7b6:	2101      	movs	r1, #1
 800a7b8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2244      	movs	r2, #68	; 0x44
 800a7be:	2101      	movs	r1, #1
 800a7c0:	5499      	strb	r1, [r3, r2]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2245      	movs	r2, #69	; 0x45
 800a7c6:	2101      	movs	r1, #1
 800a7c8:	5499      	strb	r1, [r3, r2]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2246      	movs	r2, #70	; 0x46
 800a7ce:	2101      	movs	r1, #1
 800a7d0:	5499      	strb	r1, [r3, r2]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2247      	movs	r2, #71	; 0x47
 800a7d6:	2101      	movs	r1, #1
 800a7d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	223d      	movs	r2, #61	; 0x3d
 800a7de:	2101      	movs	r1, #1
 800a7e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a7e2:	2300      	movs	r3, #0
}
 800a7e4:	0018      	movs	r0, r3
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	b002      	add	sp, #8
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a7f4:	46c0      	nop			; (mov r8, r8)
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	b002      	add	sp, #8
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d108      	bne.n	800a81e <HAL_TIM_PWM_Start+0x22>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	223e      	movs	r2, #62	; 0x3e
 800a810:	5c9b      	ldrb	r3, [r3, r2]
 800a812:	b2db      	uxtb	r3, r3
 800a814:	3b01      	subs	r3, #1
 800a816:	1e5a      	subs	r2, r3, #1
 800a818:	4193      	sbcs	r3, r2
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	e037      	b.n	800a88e <HAL_TIM_PWM_Start+0x92>
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	2b04      	cmp	r3, #4
 800a822:	d108      	bne.n	800a836 <HAL_TIM_PWM_Start+0x3a>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	223f      	movs	r2, #63	; 0x3f
 800a828:	5c9b      	ldrb	r3, [r3, r2]
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	3b01      	subs	r3, #1
 800a82e:	1e5a      	subs	r2, r3, #1
 800a830:	4193      	sbcs	r3, r2
 800a832:	b2db      	uxtb	r3, r3
 800a834:	e02b      	b.n	800a88e <HAL_TIM_PWM_Start+0x92>
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	2b08      	cmp	r3, #8
 800a83a:	d108      	bne.n	800a84e <HAL_TIM_PWM_Start+0x52>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2240      	movs	r2, #64	; 0x40
 800a840:	5c9b      	ldrb	r3, [r3, r2]
 800a842:	b2db      	uxtb	r3, r3
 800a844:	3b01      	subs	r3, #1
 800a846:	1e5a      	subs	r2, r3, #1
 800a848:	4193      	sbcs	r3, r2
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	e01f      	b.n	800a88e <HAL_TIM_PWM_Start+0x92>
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	2b0c      	cmp	r3, #12
 800a852:	d108      	bne.n	800a866 <HAL_TIM_PWM_Start+0x6a>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2241      	movs	r2, #65	; 0x41
 800a858:	5c9b      	ldrb	r3, [r3, r2]
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	3b01      	subs	r3, #1
 800a85e:	1e5a      	subs	r2, r3, #1
 800a860:	4193      	sbcs	r3, r2
 800a862:	b2db      	uxtb	r3, r3
 800a864:	e013      	b.n	800a88e <HAL_TIM_PWM_Start+0x92>
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	2b10      	cmp	r3, #16
 800a86a:	d108      	bne.n	800a87e <HAL_TIM_PWM_Start+0x82>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2242      	movs	r2, #66	; 0x42
 800a870:	5c9b      	ldrb	r3, [r3, r2]
 800a872:	b2db      	uxtb	r3, r3
 800a874:	3b01      	subs	r3, #1
 800a876:	1e5a      	subs	r2, r3, #1
 800a878:	4193      	sbcs	r3, r2
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	e007      	b.n	800a88e <HAL_TIM_PWM_Start+0x92>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2243      	movs	r2, #67	; 0x43
 800a882:	5c9b      	ldrb	r3, [r3, r2]
 800a884:	b2db      	uxtb	r3, r3
 800a886:	3b01      	subs	r3, #1
 800a888:	1e5a      	subs	r2, r3, #1
 800a88a:	4193      	sbcs	r3, r2
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d001      	beq.n	800a896 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800a892:	2301      	movs	r3, #1
 800a894:	e08b      	b.n	800a9ae <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d104      	bne.n	800a8a6 <HAL_TIM_PWM_Start+0xaa>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	223e      	movs	r2, #62	; 0x3e
 800a8a0:	2102      	movs	r1, #2
 800a8a2:	5499      	strb	r1, [r3, r2]
 800a8a4:	e023      	b.n	800a8ee <HAL_TIM_PWM_Start+0xf2>
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	2b04      	cmp	r3, #4
 800a8aa:	d104      	bne.n	800a8b6 <HAL_TIM_PWM_Start+0xba>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	223f      	movs	r2, #63	; 0x3f
 800a8b0:	2102      	movs	r1, #2
 800a8b2:	5499      	strb	r1, [r3, r2]
 800a8b4:	e01b      	b.n	800a8ee <HAL_TIM_PWM_Start+0xf2>
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	2b08      	cmp	r3, #8
 800a8ba:	d104      	bne.n	800a8c6 <HAL_TIM_PWM_Start+0xca>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2240      	movs	r2, #64	; 0x40
 800a8c0:	2102      	movs	r1, #2
 800a8c2:	5499      	strb	r1, [r3, r2]
 800a8c4:	e013      	b.n	800a8ee <HAL_TIM_PWM_Start+0xf2>
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	2b0c      	cmp	r3, #12
 800a8ca:	d104      	bne.n	800a8d6 <HAL_TIM_PWM_Start+0xda>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2241      	movs	r2, #65	; 0x41
 800a8d0:	2102      	movs	r1, #2
 800a8d2:	5499      	strb	r1, [r3, r2]
 800a8d4:	e00b      	b.n	800a8ee <HAL_TIM_PWM_Start+0xf2>
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	2b10      	cmp	r3, #16
 800a8da:	d104      	bne.n	800a8e6 <HAL_TIM_PWM_Start+0xea>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2242      	movs	r2, #66	; 0x42
 800a8e0:	2102      	movs	r1, #2
 800a8e2:	5499      	strb	r1, [r3, r2]
 800a8e4:	e003      	b.n	800a8ee <HAL_TIM_PWM_Start+0xf2>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2243      	movs	r2, #67	; 0x43
 800a8ea:	2102      	movs	r1, #2
 800a8ec:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	6839      	ldr	r1, [r7, #0]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	0018      	movs	r0, r3
 800a8f8:	f000 fe0c 	bl	800b514 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a2d      	ldr	r2, [pc, #180]	; (800a9b8 <HAL_TIM_PWM_Start+0x1bc>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d00e      	beq.n	800a924 <HAL_TIM_PWM_Start+0x128>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a2c      	ldr	r2, [pc, #176]	; (800a9bc <HAL_TIM_PWM_Start+0x1c0>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d009      	beq.n	800a924 <HAL_TIM_PWM_Start+0x128>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a2a      	ldr	r2, [pc, #168]	; (800a9c0 <HAL_TIM_PWM_Start+0x1c4>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d004      	beq.n	800a924 <HAL_TIM_PWM_Start+0x128>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a29      	ldr	r2, [pc, #164]	; (800a9c4 <HAL_TIM_PWM_Start+0x1c8>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d101      	bne.n	800a928 <HAL_TIM_PWM_Start+0x12c>
 800a924:	2301      	movs	r3, #1
 800a926:	e000      	b.n	800a92a <HAL_TIM_PWM_Start+0x12e>
 800a928:	2300      	movs	r3, #0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d008      	beq.n	800a940 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	2180      	movs	r1, #128	; 0x80
 800a93a:	0209      	lsls	r1, r1, #8
 800a93c:	430a      	orrs	r2, r1
 800a93e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a1c      	ldr	r2, [pc, #112]	; (800a9b8 <HAL_TIM_PWM_Start+0x1bc>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d00f      	beq.n	800a96a <HAL_TIM_PWM_Start+0x16e>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	2380      	movs	r3, #128	; 0x80
 800a950:	05db      	lsls	r3, r3, #23
 800a952:	429a      	cmp	r2, r3
 800a954:	d009      	beq.n	800a96a <HAL_TIM_PWM_Start+0x16e>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a1b      	ldr	r2, [pc, #108]	; (800a9c8 <HAL_TIM_PWM_Start+0x1cc>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d004      	beq.n	800a96a <HAL_TIM_PWM_Start+0x16e>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a15      	ldr	r2, [pc, #84]	; (800a9bc <HAL_TIM_PWM_Start+0x1c0>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d116      	bne.n	800a998 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	4a16      	ldr	r2, [pc, #88]	; (800a9cc <HAL_TIM_PWM_Start+0x1d0>)
 800a972:	4013      	ands	r3, r2
 800a974:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2b06      	cmp	r3, #6
 800a97a:	d016      	beq.n	800a9aa <HAL_TIM_PWM_Start+0x1ae>
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	2380      	movs	r3, #128	; 0x80
 800a980:	025b      	lsls	r3, r3, #9
 800a982:	429a      	cmp	r2, r3
 800a984:	d011      	beq.n	800a9aa <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	2101      	movs	r1, #1
 800a992:	430a      	orrs	r2, r1
 800a994:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a996:	e008      	b.n	800a9aa <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	2101      	movs	r1, #1
 800a9a4:	430a      	orrs	r2, r1
 800a9a6:	601a      	str	r2, [r3, #0]
 800a9a8:	e000      	b.n	800a9ac <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9aa:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800a9ac:	2300      	movs	r3, #0
}
 800a9ae:	0018      	movs	r0, r3
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	b004      	add	sp, #16
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	46c0      	nop			; (mov r8, r8)
 800a9b8:	40012c00 	.word	0x40012c00
 800a9bc:	40014000 	.word	0x40014000
 800a9c0:	40014400 	.word	0x40014400
 800a9c4:	40014800 	.word	0x40014800
 800a9c8:	40000400 	.word	0x40000400
 800a9cc:	00010007 	.word	0x00010007

0800a9d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	223c      	movs	r2, #60	; 0x3c
 800a9e0:	5c9b      	ldrb	r3, [r3, r2]
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d101      	bne.n	800a9ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a9e6:	2302      	movs	r3, #2
 800a9e8:	e0df      	b.n	800abaa <HAL_TIM_PWM_ConfigChannel+0x1da>
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	223c      	movs	r2, #60	; 0x3c
 800a9ee:	2101      	movs	r1, #1
 800a9f0:	5499      	strb	r1, [r3, r2]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2b14      	cmp	r3, #20
 800a9f6:	d900      	bls.n	800a9fa <HAL_TIM_PWM_ConfigChannel+0x2a>
 800a9f8:	e0d1      	b.n	800ab9e <HAL_TIM_PWM_ConfigChannel+0x1ce>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	009a      	lsls	r2, r3, #2
 800a9fe:	4b6d      	ldr	r3, [pc, #436]	; (800abb4 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 800aa00:	18d3      	adds	r3, r2, r3
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	68ba      	ldr	r2, [r7, #8]
 800aa0c:	0011      	movs	r1, r2
 800aa0e:	0018      	movs	r0, r3
 800aa10:	f000 fa20 	bl	800ae54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	699a      	ldr	r2, [r3, #24]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	2108      	movs	r1, #8
 800aa20:	430a      	orrs	r2, r1
 800aa22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	699a      	ldr	r2, [r3, #24]
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	2104      	movs	r1, #4
 800aa30:	438a      	bics	r2, r1
 800aa32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	6999      	ldr	r1, [r3, #24]
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	691a      	ldr	r2, [r3, #16]
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	430a      	orrs	r2, r1
 800aa44:	619a      	str	r2, [r3, #24]
      break;
 800aa46:	e0ab      	b.n	800aba0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68ba      	ldr	r2, [r7, #8]
 800aa4e:	0011      	movs	r1, r2
 800aa50:	0018      	movs	r0, r3
 800aa52:	f000 fa89 	bl	800af68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	699a      	ldr	r2, [r3, #24]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2180      	movs	r1, #128	; 0x80
 800aa62:	0109      	lsls	r1, r1, #4
 800aa64:	430a      	orrs	r2, r1
 800aa66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	699a      	ldr	r2, [r3, #24]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4951      	ldr	r1, [pc, #324]	; (800abb8 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800aa74:	400a      	ands	r2, r1
 800aa76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	6999      	ldr	r1, [r3, #24]
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	691b      	ldr	r3, [r3, #16]
 800aa82:	021a      	lsls	r2, r3, #8
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	430a      	orrs	r2, r1
 800aa8a:	619a      	str	r2, [r3, #24]
      break;
 800aa8c:	e088      	b.n	800aba0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	68ba      	ldr	r2, [r7, #8]
 800aa94:	0011      	movs	r1, r2
 800aa96:	0018      	movs	r0, r3
 800aa98:	f000 faea 	bl	800b070 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	69da      	ldr	r2, [r3, #28]
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2108      	movs	r1, #8
 800aaa8:	430a      	orrs	r2, r1
 800aaaa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	69da      	ldr	r2, [r3, #28]
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	2104      	movs	r1, #4
 800aab8:	438a      	bics	r2, r1
 800aaba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	69d9      	ldr	r1, [r3, #28]
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	691a      	ldr	r2, [r3, #16]
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	430a      	orrs	r2, r1
 800aacc:	61da      	str	r2, [r3, #28]
      break;
 800aace:	e067      	b.n	800aba0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	68ba      	ldr	r2, [r7, #8]
 800aad6:	0011      	movs	r1, r2
 800aad8:	0018      	movs	r0, r3
 800aada:	f000 fb51 	bl	800b180 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	69da      	ldr	r2, [r3, #28]
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2180      	movs	r1, #128	; 0x80
 800aaea:	0109      	lsls	r1, r1, #4
 800aaec:	430a      	orrs	r2, r1
 800aaee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	69da      	ldr	r2, [r3, #28]
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	492f      	ldr	r1, [pc, #188]	; (800abb8 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800aafc:	400a      	ands	r2, r1
 800aafe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	69d9      	ldr	r1, [r3, #28]
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	691b      	ldr	r3, [r3, #16]
 800ab0a:	021a      	lsls	r2, r3, #8
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	430a      	orrs	r2, r1
 800ab12:	61da      	str	r2, [r3, #28]
      break;
 800ab14:	e044      	b.n	800aba0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	68ba      	ldr	r2, [r7, #8]
 800ab1c:	0011      	movs	r1, r2
 800ab1e:	0018      	movs	r0, r3
 800ab20:	f000 fb98 	bl	800b254 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2108      	movs	r1, #8
 800ab30:	430a      	orrs	r2, r1
 800ab32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2104      	movs	r1, #4
 800ab40:	438a      	bics	r2, r1
 800ab42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	691a      	ldr	r2, [r3, #16]
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	430a      	orrs	r2, r1
 800ab54:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ab56:	e023      	b.n	800aba0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	68ba      	ldr	r2, [r7, #8]
 800ab5e:	0011      	movs	r1, r2
 800ab60:	0018      	movs	r0, r3
 800ab62:	f000 fbd7 	bl	800b314 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2180      	movs	r1, #128	; 0x80
 800ab72:	0109      	lsls	r1, r1, #4
 800ab74:	430a      	orrs	r2, r1
 800ab76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	490d      	ldr	r1, [pc, #52]	; (800abb8 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800ab84:	400a      	ands	r2, r1
 800ab86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	691b      	ldr	r3, [r3, #16]
 800ab92:	021a      	lsls	r2, r3, #8
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	430a      	orrs	r2, r1
 800ab9a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ab9c:	e000      	b.n	800aba0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 800ab9e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	223c      	movs	r2, #60	; 0x3c
 800aba4:	2100      	movs	r1, #0
 800aba6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aba8:	2300      	movs	r3, #0
}
 800abaa:	0018      	movs	r0, r3
 800abac:	46bd      	mov	sp, r7
 800abae:	b004      	add	sp, #16
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	46c0      	nop			; (mov r8, r8)
 800abb4:	080167bc 	.word	0x080167bc
 800abb8:	fffffbff 	.word	0xfffffbff

0800abbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b084      	sub	sp, #16
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	223c      	movs	r2, #60	; 0x3c
 800abca:	5c9b      	ldrb	r3, [r3, r2]
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d101      	bne.n	800abd4 <HAL_TIM_ConfigClockSource+0x18>
 800abd0:	2302      	movs	r3, #2
 800abd2:	e0b7      	b.n	800ad44 <HAL_TIM_ConfigClockSource+0x188>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	223c      	movs	r2, #60	; 0x3c
 800abd8:	2101      	movs	r1, #1
 800abda:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	223d      	movs	r2, #61	; 0x3d
 800abe0:	2102      	movs	r1, #2
 800abe2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	4a57      	ldr	r2, [pc, #348]	; (800ad4c <HAL_TIM_ConfigClockSource+0x190>)
 800abf0:	4013      	ands	r3, r2
 800abf2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	4a56      	ldr	r2, [pc, #344]	; (800ad50 <HAL_TIM_ConfigClockSource+0x194>)
 800abf8:	4013      	ands	r3, r2
 800abfa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	68fa      	ldr	r2, [r7, #12]
 800ac02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2280      	movs	r2, #128	; 0x80
 800ac0a:	0192      	lsls	r2, r2, #6
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d040      	beq.n	800ac92 <HAL_TIM_ConfigClockSource+0xd6>
 800ac10:	2280      	movs	r2, #128	; 0x80
 800ac12:	0192      	lsls	r2, r2, #6
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d900      	bls.n	800ac1a <HAL_TIM_ConfigClockSource+0x5e>
 800ac18:	e088      	b.n	800ad2c <HAL_TIM_ConfigClockSource+0x170>
 800ac1a:	2280      	movs	r2, #128	; 0x80
 800ac1c:	0152      	lsls	r2, r2, #5
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d100      	bne.n	800ac24 <HAL_TIM_ConfigClockSource+0x68>
 800ac22:	e085      	b.n	800ad30 <HAL_TIM_ConfigClockSource+0x174>
 800ac24:	2280      	movs	r2, #128	; 0x80
 800ac26:	0152      	lsls	r2, r2, #5
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d900      	bls.n	800ac2e <HAL_TIM_ConfigClockSource+0x72>
 800ac2c:	e07e      	b.n	800ad2c <HAL_TIM_ConfigClockSource+0x170>
 800ac2e:	2b70      	cmp	r3, #112	; 0x70
 800ac30:	d018      	beq.n	800ac64 <HAL_TIM_ConfigClockSource+0xa8>
 800ac32:	d900      	bls.n	800ac36 <HAL_TIM_ConfigClockSource+0x7a>
 800ac34:	e07a      	b.n	800ad2c <HAL_TIM_ConfigClockSource+0x170>
 800ac36:	2b60      	cmp	r3, #96	; 0x60
 800ac38:	d04f      	beq.n	800acda <HAL_TIM_ConfigClockSource+0x11e>
 800ac3a:	d900      	bls.n	800ac3e <HAL_TIM_ConfigClockSource+0x82>
 800ac3c:	e076      	b.n	800ad2c <HAL_TIM_ConfigClockSource+0x170>
 800ac3e:	2b50      	cmp	r3, #80	; 0x50
 800ac40:	d03b      	beq.n	800acba <HAL_TIM_ConfigClockSource+0xfe>
 800ac42:	d900      	bls.n	800ac46 <HAL_TIM_ConfigClockSource+0x8a>
 800ac44:	e072      	b.n	800ad2c <HAL_TIM_ConfigClockSource+0x170>
 800ac46:	2b40      	cmp	r3, #64	; 0x40
 800ac48:	d057      	beq.n	800acfa <HAL_TIM_ConfigClockSource+0x13e>
 800ac4a:	d900      	bls.n	800ac4e <HAL_TIM_ConfigClockSource+0x92>
 800ac4c:	e06e      	b.n	800ad2c <HAL_TIM_ConfigClockSource+0x170>
 800ac4e:	2b30      	cmp	r3, #48	; 0x30
 800ac50:	d063      	beq.n	800ad1a <HAL_TIM_ConfigClockSource+0x15e>
 800ac52:	d86b      	bhi.n	800ad2c <HAL_TIM_ConfigClockSource+0x170>
 800ac54:	2b20      	cmp	r3, #32
 800ac56:	d060      	beq.n	800ad1a <HAL_TIM_ConfigClockSource+0x15e>
 800ac58:	d868      	bhi.n	800ad2c <HAL_TIM_ConfigClockSource+0x170>
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d05d      	beq.n	800ad1a <HAL_TIM_ConfigClockSource+0x15e>
 800ac5e:	2b10      	cmp	r3, #16
 800ac60:	d05b      	beq.n	800ad1a <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800ac62:	e063      	b.n	800ad2c <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6818      	ldr	r0, [r3, #0]
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	6899      	ldr	r1, [r3, #8]
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	685a      	ldr	r2, [r3, #4]
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	f000 fc2e 	bl	800b4d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2277      	movs	r2, #119	; 0x77
 800ac84:	4313      	orrs	r3, r2
 800ac86:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	68fa      	ldr	r2, [r7, #12]
 800ac8e:	609a      	str	r2, [r3, #8]
      break;
 800ac90:	e04f      	b.n	800ad32 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6818      	ldr	r0, [r3, #0]
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	6899      	ldr	r1, [r3, #8]
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	685a      	ldr	r2, [r3, #4]
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	68db      	ldr	r3, [r3, #12]
 800aca2:	f000 fc17 	bl	800b4d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	689a      	ldr	r2, [r3, #8]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	2180      	movs	r1, #128	; 0x80
 800acb2:	01c9      	lsls	r1, r1, #7
 800acb4:	430a      	orrs	r2, r1
 800acb6:	609a      	str	r2, [r3, #8]
      break;
 800acb8:	e03b      	b.n	800ad32 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6818      	ldr	r0, [r3, #0]
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	6859      	ldr	r1, [r3, #4]
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	68db      	ldr	r3, [r3, #12]
 800acc6:	001a      	movs	r2, r3
 800acc8:	f000 fb88 	bl	800b3dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2150      	movs	r1, #80	; 0x50
 800acd2:	0018      	movs	r0, r3
 800acd4:	f000 fbe2 	bl	800b49c <TIM_ITRx_SetConfig>
      break;
 800acd8:	e02b      	b.n	800ad32 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6818      	ldr	r0, [r3, #0]
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	6859      	ldr	r1, [r3, #4]
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	001a      	movs	r2, r3
 800ace8:	f000 fba6 	bl	800b438 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	2160      	movs	r1, #96	; 0x60
 800acf2:	0018      	movs	r0, r3
 800acf4:	f000 fbd2 	bl	800b49c <TIM_ITRx_SetConfig>
      break;
 800acf8:	e01b      	b.n	800ad32 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6818      	ldr	r0, [r3, #0]
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	6859      	ldr	r1, [r3, #4]
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	001a      	movs	r2, r3
 800ad08:	f000 fb68 	bl	800b3dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	2140      	movs	r1, #64	; 0x40
 800ad12:	0018      	movs	r0, r3
 800ad14:	f000 fbc2 	bl	800b49c <TIM_ITRx_SetConfig>
      break;
 800ad18:	e00b      	b.n	800ad32 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	0019      	movs	r1, r3
 800ad24:	0010      	movs	r0, r2
 800ad26:	f000 fbb9 	bl	800b49c <TIM_ITRx_SetConfig>
        break;
 800ad2a:	e002      	b.n	800ad32 <HAL_TIM_ConfigClockSource+0x176>
      break;
 800ad2c:	46c0      	nop			; (mov r8, r8)
 800ad2e:	e000      	b.n	800ad32 <HAL_TIM_ConfigClockSource+0x176>
      break;
 800ad30:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	223d      	movs	r2, #61	; 0x3d
 800ad36:	2101      	movs	r1, #1
 800ad38:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	223c      	movs	r2, #60	; 0x3c
 800ad3e:	2100      	movs	r1, #0
 800ad40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ad42:	2300      	movs	r3, #0
}
 800ad44:	0018      	movs	r0, r3
 800ad46:	46bd      	mov	sp, r7
 800ad48:	b004      	add	sp, #16
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	ffceff88 	.word	0xffceff88
 800ad50:	ffff00ff 	.word	0xffff00ff

0800ad54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	4a34      	ldr	r2, [pc, #208]	; (800ae38 <TIM_Base_SetConfig+0xe4>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d008      	beq.n	800ad7e <TIM_Base_SetConfig+0x2a>
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	2380      	movs	r3, #128	; 0x80
 800ad70:	05db      	lsls	r3, r3, #23
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d003      	beq.n	800ad7e <TIM_Base_SetConfig+0x2a>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	4a30      	ldr	r2, [pc, #192]	; (800ae3c <TIM_Base_SetConfig+0xe8>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d108      	bne.n	800ad90 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2270      	movs	r2, #112	; 0x70
 800ad82:	4393      	bics	r3, r2
 800ad84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	68fa      	ldr	r2, [r7, #12]
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	4a29      	ldr	r2, [pc, #164]	; (800ae38 <TIM_Base_SetConfig+0xe4>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d018      	beq.n	800adca <TIM_Base_SetConfig+0x76>
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	2380      	movs	r3, #128	; 0x80
 800ad9c:	05db      	lsls	r3, r3, #23
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d013      	beq.n	800adca <TIM_Base_SetConfig+0x76>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4a25      	ldr	r2, [pc, #148]	; (800ae3c <TIM_Base_SetConfig+0xe8>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d00f      	beq.n	800adca <TIM_Base_SetConfig+0x76>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4a24      	ldr	r2, [pc, #144]	; (800ae40 <TIM_Base_SetConfig+0xec>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d00b      	beq.n	800adca <TIM_Base_SetConfig+0x76>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4a23      	ldr	r2, [pc, #140]	; (800ae44 <TIM_Base_SetConfig+0xf0>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d007      	beq.n	800adca <TIM_Base_SetConfig+0x76>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	4a22      	ldr	r2, [pc, #136]	; (800ae48 <TIM_Base_SetConfig+0xf4>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d003      	beq.n	800adca <TIM_Base_SetConfig+0x76>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4a21      	ldr	r2, [pc, #132]	; (800ae4c <TIM_Base_SetConfig+0xf8>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d108      	bne.n	800addc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	4a20      	ldr	r2, [pc, #128]	; (800ae50 <TIM_Base_SetConfig+0xfc>)
 800adce:	4013      	ands	r3, r2
 800add0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	68fa      	ldr	r2, [r7, #12]
 800add8:	4313      	orrs	r3, r2
 800adda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2280      	movs	r2, #128	; 0x80
 800ade0:	4393      	bics	r3, r2
 800ade2:	001a      	movs	r2, r3
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	695b      	ldr	r3, [r3, #20]
 800ade8:	4313      	orrs	r3, r2
 800adea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	68fa      	ldr	r2, [r7, #12]
 800adf0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	689a      	ldr	r2, [r3, #8]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	4a0c      	ldr	r2, [pc, #48]	; (800ae38 <TIM_Base_SetConfig+0xe4>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d00b      	beq.n	800ae22 <TIM_Base_SetConfig+0xce>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	4a0d      	ldr	r2, [pc, #52]	; (800ae44 <TIM_Base_SetConfig+0xf0>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d007      	beq.n	800ae22 <TIM_Base_SetConfig+0xce>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	4a0c      	ldr	r2, [pc, #48]	; (800ae48 <TIM_Base_SetConfig+0xf4>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d003      	beq.n	800ae22 <TIM_Base_SetConfig+0xce>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	4a0b      	ldr	r2, [pc, #44]	; (800ae4c <TIM_Base_SetConfig+0xf8>)
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d103      	bne.n	800ae2a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	691a      	ldr	r2, [r3, #16]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	615a      	str	r2, [r3, #20]
}
 800ae30:	46c0      	nop			; (mov r8, r8)
 800ae32:	46bd      	mov	sp, r7
 800ae34:	b004      	add	sp, #16
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	40012c00 	.word	0x40012c00
 800ae3c:	40000400 	.word	0x40000400
 800ae40:	40002000 	.word	0x40002000
 800ae44:	40014000 	.word	0x40014000
 800ae48:	40014400 	.word	0x40014400
 800ae4c:	40014800 	.word	0x40014800
 800ae50:	fffffcff 	.word	0xfffffcff

0800ae54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b086      	sub	sp, #24
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6a1b      	ldr	r3, [r3, #32]
 800ae62:	2201      	movs	r2, #1
 800ae64:	4393      	bics	r3, r2
 800ae66:	001a      	movs	r2, r3
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6a1b      	ldr	r3, [r3, #32]
 800ae70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	699b      	ldr	r3, [r3, #24]
 800ae7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	4a32      	ldr	r2, [pc, #200]	; (800af4c <TIM_OC1_SetConfig+0xf8>)
 800ae82:	4013      	ands	r3, r2
 800ae84:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2203      	movs	r2, #3
 800ae8a:	4393      	bics	r3, r2
 800ae8c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	68fa      	ldr	r2, [r7, #12]
 800ae94:	4313      	orrs	r3, r2
 800ae96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	2202      	movs	r2, #2
 800ae9c:	4393      	bics	r3, r2
 800ae9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	689b      	ldr	r3, [r3, #8]
 800aea4:	697a      	ldr	r2, [r7, #20]
 800aea6:	4313      	orrs	r3, r2
 800aea8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	4a28      	ldr	r2, [pc, #160]	; (800af50 <TIM_OC1_SetConfig+0xfc>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d00b      	beq.n	800aeca <TIM_OC1_SetConfig+0x76>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	4a27      	ldr	r2, [pc, #156]	; (800af54 <TIM_OC1_SetConfig+0x100>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d007      	beq.n	800aeca <TIM_OC1_SetConfig+0x76>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	4a26      	ldr	r2, [pc, #152]	; (800af58 <TIM_OC1_SetConfig+0x104>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d003      	beq.n	800aeca <TIM_OC1_SetConfig+0x76>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	4a25      	ldr	r2, [pc, #148]	; (800af5c <TIM_OC1_SetConfig+0x108>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d10c      	bne.n	800aee4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	2208      	movs	r2, #8
 800aece:	4393      	bics	r3, r2
 800aed0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	68db      	ldr	r3, [r3, #12]
 800aed6:	697a      	ldr	r2, [r7, #20]
 800aed8:	4313      	orrs	r3, r2
 800aeda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	2204      	movs	r2, #4
 800aee0:	4393      	bics	r3, r2
 800aee2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	4a1a      	ldr	r2, [pc, #104]	; (800af50 <TIM_OC1_SetConfig+0xfc>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d00b      	beq.n	800af04 <TIM_OC1_SetConfig+0xb0>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	4a19      	ldr	r2, [pc, #100]	; (800af54 <TIM_OC1_SetConfig+0x100>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d007      	beq.n	800af04 <TIM_OC1_SetConfig+0xb0>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	4a18      	ldr	r2, [pc, #96]	; (800af58 <TIM_OC1_SetConfig+0x104>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d003      	beq.n	800af04 <TIM_OC1_SetConfig+0xb0>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	4a17      	ldr	r2, [pc, #92]	; (800af5c <TIM_OC1_SetConfig+0x108>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d111      	bne.n	800af28 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	4a16      	ldr	r2, [pc, #88]	; (800af60 <TIM_OC1_SetConfig+0x10c>)
 800af08:	4013      	ands	r3, r2
 800af0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	4a15      	ldr	r2, [pc, #84]	; (800af64 <TIM_OC1_SetConfig+0x110>)
 800af10:	4013      	ands	r3, r2
 800af12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	695b      	ldr	r3, [r3, #20]
 800af18:	693a      	ldr	r2, [r7, #16]
 800af1a:	4313      	orrs	r3, r2
 800af1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	699b      	ldr	r3, [r3, #24]
 800af22:	693a      	ldr	r2, [r7, #16]
 800af24:	4313      	orrs	r3, r2
 800af26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	693a      	ldr	r2, [r7, #16]
 800af2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	68fa      	ldr	r2, [r7, #12]
 800af32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	685a      	ldr	r2, [r3, #4]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	697a      	ldr	r2, [r7, #20]
 800af40:	621a      	str	r2, [r3, #32]
}
 800af42:	46c0      	nop			; (mov r8, r8)
 800af44:	46bd      	mov	sp, r7
 800af46:	b006      	add	sp, #24
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	46c0      	nop			; (mov r8, r8)
 800af4c:	fffeff8f 	.word	0xfffeff8f
 800af50:	40012c00 	.word	0x40012c00
 800af54:	40014000 	.word	0x40014000
 800af58:	40014400 	.word	0x40014400
 800af5c:	40014800 	.word	0x40014800
 800af60:	fffffeff 	.word	0xfffffeff
 800af64:	fffffdff 	.word	0xfffffdff

0800af68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b086      	sub	sp, #24
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6a1b      	ldr	r3, [r3, #32]
 800af76:	2210      	movs	r2, #16
 800af78:	4393      	bics	r3, r2
 800af7a:	001a      	movs	r2, r3
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6a1b      	ldr	r3, [r3, #32]
 800af84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	699b      	ldr	r3, [r3, #24]
 800af90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	4a2e      	ldr	r2, [pc, #184]	; (800b050 <TIM_OC2_SetConfig+0xe8>)
 800af96:	4013      	ands	r3, r2
 800af98:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	4a2d      	ldr	r2, [pc, #180]	; (800b054 <TIM_OC2_SetConfig+0xec>)
 800af9e:	4013      	ands	r3, r2
 800afa0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	021b      	lsls	r3, r3, #8
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	4313      	orrs	r3, r2
 800afac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	2220      	movs	r2, #32
 800afb2:	4393      	bics	r3, r2
 800afb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	011b      	lsls	r3, r3, #4
 800afbc:	697a      	ldr	r2, [r7, #20]
 800afbe:	4313      	orrs	r3, r2
 800afc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	4a24      	ldr	r2, [pc, #144]	; (800b058 <TIM_OC2_SetConfig+0xf0>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d10d      	bne.n	800afe6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	2280      	movs	r2, #128	; 0x80
 800afce:	4393      	bics	r3, r2
 800afd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	68db      	ldr	r3, [r3, #12]
 800afd6:	011b      	lsls	r3, r3, #4
 800afd8:	697a      	ldr	r2, [r7, #20]
 800afda:	4313      	orrs	r3, r2
 800afdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	2240      	movs	r2, #64	; 0x40
 800afe2:	4393      	bics	r3, r2
 800afe4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	4a1b      	ldr	r2, [pc, #108]	; (800b058 <TIM_OC2_SetConfig+0xf0>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d00b      	beq.n	800b006 <TIM_OC2_SetConfig+0x9e>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	4a1a      	ldr	r2, [pc, #104]	; (800b05c <TIM_OC2_SetConfig+0xf4>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d007      	beq.n	800b006 <TIM_OC2_SetConfig+0x9e>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	4a19      	ldr	r2, [pc, #100]	; (800b060 <TIM_OC2_SetConfig+0xf8>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d003      	beq.n	800b006 <TIM_OC2_SetConfig+0x9e>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	4a18      	ldr	r2, [pc, #96]	; (800b064 <TIM_OC2_SetConfig+0xfc>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d113      	bne.n	800b02e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	4a17      	ldr	r2, [pc, #92]	; (800b068 <TIM_OC2_SetConfig+0x100>)
 800b00a:	4013      	ands	r3, r2
 800b00c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	4a16      	ldr	r2, [pc, #88]	; (800b06c <TIM_OC2_SetConfig+0x104>)
 800b012:	4013      	ands	r3, r2
 800b014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	695b      	ldr	r3, [r3, #20]
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	693a      	ldr	r2, [r7, #16]
 800b01e:	4313      	orrs	r3, r2
 800b020:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	699b      	ldr	r3, [r3, #24]
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	693a      	ldr	r2, [r7, #16]
 800b02a:	4313      	orrs	r3, r2
 800b02c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	693a      	ldr	r2, [r7, #16]
 800b032:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	68fa      	ldr	r2, [r7, #12]
 800b038:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	685a      	ldr	r2, [r3, #4]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	697a      	ldr	r2, [r7, #20]
 800b046:	621a      	str	r2, [r3, #32]
}
 800b048:	46c0      	nop			; (mov r8, r8)
 800b04a:	46bd      	mov	sp, r7
 800b04c:	b006      	add	sp, #24
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	feff8fff 	.word	0xfeff8fff
 800b054:	fffffcff 	.word	0xfffffcff
 800b058:	40012c00 	.word	0x40012c00
 800b05c:	40014000 	.word	0x40014000
 800b060:	40014400 	.word	0x40014400
 800b064:	40014800 	.word	0x40014800
 800b068:	fffffbff 	.word	0xfffffbff
 800b06c:	fffff7ff 	.word	0xfffff7ff

0800b070 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b086      	sub	sp, #24
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6a1b      	ldr	r3, [r3, #32]
 800b07e:	4a35      	ldr	r2, [pc, #212]	; (800b154 <TIM_OC3_SetConfig+0xe4>)
 800b080:	401a      	ands	r2, r3
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6a1b      	ldr	r3, [r3, #32]
 800b08a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	69db      	ldr	r3, [r3, #28]
 800b096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	4a2f      	ldr	r2, [pc, #188]	; (800b158 <TIM_OC3_SetConfig+0xe8>)
 800b09c:	4013      	ands	r3, r2
 800b09e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2203      	movs	r2, #3
 800b0a4:	4393      	bics	r3, r2
 800b0a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	68fa      	ldr	r2, [r7, #12]
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	4a29      	ldr	r2, [pc, #164]	; (800b15c <TIM_OC3_SetConfig+0xec>)
 800b0b6:	4013      	ands	r3, r2
 800b0b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	689b      	ldr	r3, [r3, #8]
 800b0be:	021b      	lsls	r3, r3, #8
 800b0c0:	697a      	ldr	r2, [r7, #20]
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	4a25      	ldr	r2, [pc, #148]	; (800b160 <TIM_OC3_SetConfig+0xf0>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d10d      	bne.n	800b0ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	4a24      	ldr	r2, [pc, #144]	; (800b164 <TIM_OC3_SetConfig+0xf4>)
 800b0d2:	4013      	ands	r3, r2
 800b0d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	68db      	ldr	r3, [r3, #12]
 800b0da:	021b      	lsls	r3, r3, #8
 800b0dc:	697a      	ldr	r2, [r7, #20]
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	4a20      	ldr	r2, [pc, #128]	; (800b168 <TIM_OC3_SetConfig+0xf8>)
 800b0e6:	4013      	ands	r3, r2
 800b0e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	4a1c      	ldr	r2, [pc, #112]	; (800b160 <TIM_OC3_SetConfig+0xf0>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d00b      	beq.n	800b10a <TIM_OC3_SetConfig+0x9a>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	4a1d      	ldr	r2, [pc, #116]	; (800b16c <TIM_OC3_SetConfig+0xfc>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d007      	beq.n	800b10a <TIM_OC3_SetConfig+0x9a>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	4a1c      	ldr	r2, [pc, #112]	; (800b170 <TIM_OC3_SetConfig+0x100>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d003      	beq.n	800b10a <TIM_OC3_SetConfig+0x9a>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4a1b      	ldr	r2, [pc, #108]	; (800b174 <TIM_OC3_SetConfig+0x104>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d113      	bne.n	800b132 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	4a1a      	ldr	r2, [pc, #104]	; (800b178 <TIM_OC3_SetConfig+0x108>)
 800b10e:	4013      	ands	r3, r2
 800b110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	4a19      	ldr	r2, [pc, #100]	; (800b17c <TIM_OC3_SetConfig+0x10c>)
 800b116:	4013      	ands	r3, r2
 800b118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	695b      	ldr	r3, [r3, #20]
 800b11e:	011b      	lsls	r3, r3, #4
 800b120:	693a      	ldr	r2, [r7, #16]
 800b122:	4313      	orrs	r3, r2
 800b124:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	699b      	ldr	r3, [r3, #24]
 800b12a:	011b      	lsls	r3, r3, #4
 800b12c:	693a      	ldr	r2, [r7, #16]
 800b12e:	4313      	orrs	r3, r2
 800b130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	693a      	ldr	r2, [r7, #16]
 800b136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	68fa      	ldr	r2, [r7, #12]
 800b13c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	685a      	ldr	r2, [r3, #4]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	697a      	ldr	r2, [r7, #20]
 800b14a:	621a      	str	r2, [r3, #32]
}
 800b14c:	46c0      	nop			; (mov r8, r8)
 800b14e:	46bd      	mov	sp, r7
 800b150:	b006      	add	sp, #24
 800b152:	bd80      	pop	{r7, pc}
 800b154:	fffffeff 	.word	0xfffffeff
 800b158:	fffeff8f 	.word	0xfffeff8f
 800b15c:	fffffdff 	.word	0xfffffdff
 800b160:	40012c00 	.word	0x40012c00
 800b164:	fffff7ff 	.word	0xfffff7ff
 800b168:	fffffbff 	.word	0xfffffbff
 800b16c:	40014000 	.word	0x40014000
 800b170:	40014400 	.word	0x40014400
 800b174:	40014800 	.word	0x40014800
 800b178:	ffffefff 	.word	0xffffefff
 800b17c:	ffffdfff 	.word	0xffffdfff

0800b180 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b086      	sub	sp, #24
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a1b      	ldr	r3, [r3, #32]
 800b18e:	4a28      	ldr	r2, [pc, #160]	; (800b230 <TIM_OC4_SetConfig+0xb0>)
 800b190:	401a      	ands	r2, r3
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6a1b      	ldr	r3, [r3, #32]
 800b19a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	69db      	ldr	r3, [r3, #28]
 800b1a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	4a22      	ldr	r2, [pc, #136]	; (800b234 <TIM_OC4_SetConfig+0xb4>)
 800b1ac:	4013      	ands	r3, r2
 800b1ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	4a21      	ldr	r2, [pc, #132]	; (800b238 <TIM_OC4_SetConfig+0xb8>)
 800b1b4:	4013      	ands	r3, r2
 800b1b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	021b      	lsls	r3, r3, #8
 800b1be:	68fa      	ldr	r2, [r7, #12]
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	4a1d      	ldr	r2, [pc, #116]	; (800b23c <TIM_OC4_SetConfig+0xbc>)
 800b1c8:	4013      	ands	r3, r2
 800b1ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	689b      	ldr	r3, [r3, #8]
 800b1d0:	031b      	lsls	r3, r3, #12
 800b1d2:	693a      	ldr	r2, [r7, #16]
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	4a19      	ldr	r2, [pc, #100]	; (800b240 <TIM_OC4_SetConfig+0xc0>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d00b      	beq.n	800b1f8 <TIM_OC4_SetConfig+0x78>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	4a18      	ldr	r2, [pc, #96]	; (800b244 <TIM_OC4_SetConfig+0xc4>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d007      	beq.n	800b1f8 <TIM_OC4_SetConfig+0x78>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	4a17      	ldr	r2, [pc, #92]	; (800b248 <TIM_OC4_SetConfig+0xc8>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d003      	beq.n	800b1f8 <TIM_OC4_SetConfig+0x78>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	4a16      	ldr	r2, [pc, #88]	; (800b24c <TIM_OC4_SetConfig+0xcc>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d109      	bne.n	800b20c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	4a15      	ldr	r2, [pc, #84]	; (800b250 <TIM_OC4_SetConfig+0xd0>)
 800b1fc:	4013      	ands	r3, r2
 800b1fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	695b      	ldr	r3, [r3, #20]
 800b204:	019b      	lsls	r3, r3, #6
 800b206:	697a      	ldr	r2, [r7, #20]
 800b208:	4313      	orrs	r3, r2
 800b20a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	697a      	ldr	r2, [r7, #20]
 800b210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	68fa      	ldr	r2, [r7, #12]
 800b216:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	685a      	ldr	r2, [r3, #4]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	693a      	ldr	r2, [r7, #16]
 800b224:	621a      	str	r2, [r3, #32]
}
 800b226:	46c0      	nop			; (mov r8, r8)
 800b228:	46bd      	mov	sp, r7
 800b22a:	b006      	add	sp, #24
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	46c0      	nop			; (mov r8, r8)
 800b230:	ffffefff 	.word	0xffffefff
 800b234:	feff8fff 	.word	0xfeff8fff
 800b238:	fffffcff 	.word	0xfffffcff
 800b23c:	ffffdfff 	.word	0xffffdfff
 800b240:	40012c00 	.word	0x40012c00
 800b244:	40014000 	.word	0x40014000
 800b248:	40014400 	.word	0x40014400
 800b24c:	40014800 	.word	0x40014800
 800b250:	ffffbfff 	.word	0xffffbfff

0800b254 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b086      	sub	sp, #24
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6a1b      	ldr	r3, [r3, #32]
 800b262:	4a25      	ldr	r2, [pc, #148]	; (800b2f8 <TIM_OC5_SetConfig+0xa4>)
 800b264:	401a      	ands	r2, r3
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6a1b      	ldr	r3, [r3, #32]
 800b26e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b27a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	4a1f      	ldr	r2, [pc, #124]	; (800b2fc <TIM_OC5_SetConfig+0xa8>)
 800b280:	4013      	ands	r3, r2
 800b282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	68fa      	ldr	r2, [r7, #12]
 800b28a:	4313      	orrs	r3, r2
 800b28c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	4a1b      	ldr	r2, [pc, #108]	; (800b300 <TIM_OC5_SetConfig+0xac>)
 800b292:	4013      	ands	r3, r2
 800b294:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	689b      	ldr	r3, [r3, #8]
 800b29a:	041b      	lsls	r3, r3, #16
 800b29c:	693a      	ldr	r2, [r7, #16]
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	4a17      	ldr	r2, [pc, #92]	; (800b304 <TIM_OC5_SetConfig+0xb0>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d00b      	beq.n	800b2c2 <TIM_OC5_SetConfig+0x6e>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	4a16      	ldr	r2, [pc, #88]	; (800b308 <TIM_OC5_SetConfig+0xb4>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d007      	beq.n	800b2c2 <TIM_OC5_SetConfig+0x6e>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	4a15      	ldr	r2, [pc, #84]	; (800b30c <TIM_OC5_SetConfig+0xb8>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d003      	beq.n	800b2c2 <TIM_OC5_SetConfig+0x6e>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4a14      	ldr	r2, [pc, #80]	; (800b310 <TIM_OC5_SetConfig+0xbc>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d109      	bne.n	800b2d6 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	4a0c      	ldr	r2, [pc, #48]	; (800b2f8 <TIM_OC5_SetConfig+0xa4>)
 800b2c6:	4013      	ands	r3, r2
 800b2c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	695b      	ldr	r3, [r3, #20]
 800b2ce:	021b      	lsls	r3, r3, #8
 800b2d0:	697a      	ldr	r2, [r7, #20]
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	697a      	ldr	r2, [r7, #20]
 800b2da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	68fa      	ldr	r2, [r7, #12]
 800b2e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	685a      	ldr	r2, [r3, #4]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	693a      	ldr	r2, [r7, #16]
 800b2ee:	621a      	str	r2, [r3, #32]
}
 800b2f0:	46c0      	nop			; (mov r8, r8)
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	b006      	add	sp, #24
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	fffeffff 	.word	0xfffeffff
 800b2fc:	fffeff8f 	.word	0xfffeff8f
 800b300:	fffdffff 	.word	0xfffdffff
 800b304:	40012c00 	.word	0x40012c00
 800b308:	40014000 	.word	0x40014000
 800b30c:	40014400 	.word	0x40014400
 800b310:	40014800 	.word	0x40014800

0800b314 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b086      	sub	sp, #24
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6a1b      	ldr	r3, [r3, #32]
 800b322:	4a26      	ldr	r2, [pc, #152]	; (800b3bc <TIM_OC6_SetConfig+0xa8>)
 800b324:	401a      	ands	r2, r3
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6a1b      	ldr	r3, [r3, #32]
 800b32e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b33a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	4a20      	ldr	r2, [pc, #128]	; (800b3c0 <TIM_OC6_SetConfig+0xac>)
 800b340:	4013      	ands	r3, r2
 800b342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	021b      	lsls	r3, r3, #8
 800b34a:	68fa      	ldr	r2, [r7, #12]
 800b34c:	4313      	orrs	r3, r2
 800b34e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	4a1c      	ldr	r2, [pc, #112]	; (800b3c4 <TIM_OC6_SetConfig+0xb0>)
 800b354:	4013      	ands	r3, r2
 800b356:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	689b      	ldr	r3, [r3, #8]
 800b35c:	051b      	lsls	r3, r3, #20
 800b35e:	693a      	ldr	r2, [r7, #16]
 800b360:	4313      	orrs	r3, r2
 800b362:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	4a18      	ldr	r2, [pc, #96]	; (800b3c8 <TIM_OC6_SetConfig+0xb4>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d00b      	beq.n	800b384 <TIM_OC6_SetConfig+0x70>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4a17      	ldr	r2, [pc, #92]	; (800b3cc <TIM_OC6_SetConfig+0xb8>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d007      	beq.n	800b384 <TIM_OC6_SetConfig+0x70>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4a16      	ldr	r2, [pc, #88]	; (800b3d0 <TIM_OC6_SetConfig+0xbc>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d003      	beq.n	800b384 <TIM_OC6_SetConfig+0x70>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	4a15      	ldr	r2, [pc, #84]	; (800b3d4 <TIM_OC6_SetConfig+0xc0>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d109      	bne.n	800b398 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	4a14      	ldr	r2, [pc, #80]	; (800b3d8 <TIM_OC6_SetConfig+0xc4>)
 800b388:	4013      	ands	r3, r2
 800b38a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	695b      	ldr	r3, [r3, #20]
 800b390:	029b      	lsls	r3, r3, #10
 800b392:	697a      	ldr	r2, [r7, #20]
 800b394:	4313      	orrs	r3, r2
 800b396:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	697a      	ldr	r2, [r7, #20]
 800b39c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	68fa      	ldr	r2, [r7, #12]
 800b3a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	685a      	ldr	r2, [r3, #4]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	693a      	ldr	r2, [r7, #16]
 800b3b0:	621a      	str	r2, [r3, #32]
}
 800b3b2:	46c0      	nop			; (mov r8, r8)
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	b006      	add	sp, #24
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	46c0      	nop			; (mov r8, r8)
 800b3bc:	ffefffff 	.word	0xffefffff
 800b3c0:	feff8fff 	.word	0xfeff8fff
 800b3c4:	ffdfffff 	.word	0xffdfffff
 800b3c8:	40012c00 	.word	0x40012c00
 800b3cc:	40014000 	.word	0x40014000
 800b3d0:	40014400 	.word	0x40014400
 800b3d4:	40014800 	.word	0x40014800
 800b3d8:	fffbffff 	.word	0xfffbffff

0800b3dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b086      	sub	sp, #24
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	6a1b      	ldr	r3, [r3, #32]
 800b3ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	6a1b      	ldr	r3, [r3, #32]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	4393      	bics	r3, r2
 800b3f6:	001a      	movs	r2, r3
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	699b      	ldr	r3, [r3, #24]
 800b400:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	22f0      	movs	r2, #240	; 0xf0
 800b406:	4393      	bics	r3, r2
 800b408:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	011b      	lsls	r3, r3, #4
 800b40e:	693a      	ldr	r2, [r7, #16]
 800b410:	4313      	orrs	r3, r2
 800b412:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	220a      	movs	r2, #10
 800b418:	4393      	bics	r3, r2
 800b41a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b41c:	697a      	ldr	r2, [r7, #20]
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	4313      	orrs	r3, r2
 800b422:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	693a      	ldr	r2, [r7, #16]
 800b428:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	697a      	ldr	r2, [r7, #20]
 800b42e:	621a      	str	r2, [r3, #32]
}
 800b430:	46c0      	nop			; (mov r8, r8)
 800b432:	46bd      	mov	sp, r7
 800b434:	b006      	add	sp, #24
 800b436:	bd80      	pop	{r7, pc}

0800b438 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b086      	sub	sp, #24
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	60b9      	str	r1, [r7, #8]
 800b442:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	6a1b      	ldr	r3, [r3, #32]
 800b448:	2210      	movs	r2, #16
 800b44a:	4393      	bics	r3, r2
 800b44c:	001a      	movs	r2, r3
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	699b      	ldr	r3, [r3, #24]
 800b456:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	6a1b      	ldr	r3, [r3, #32]
 800b45c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	4a0d      	ldr	r2, [pc, #52]	; (800b498 <TIM_TI2_ConfigInputStage+0x60>)
 800b462:	4013      	ands	r3, r2
 800b464:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	031b      	lsls	r3, r3, #12
 800b46a:	697a      	ldr	r2, [r7, #20]
 800b46c:	4313      	orrs	r3, r2
 800b46e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	22a0      	movs	r2, #160	; 0xa0
 800b474:	4393      	bics	r3, r2
 800b476:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	011b      	lsls	r3, r3, #4
 800b47c:	693a      	ldr	r2, [r7, #16]
 800b47e:	4313      	orrs	r3, r2
 800b480:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	697a      	ldr	r2, [r7, #20]
 800b486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	693a      	ldr	r2, [r7, #16]
 800b48c:	621a      	str	r2, [r3, #32]
}
 800b48e:	46c0      	nop			; (mov r8, r8)
 800b490:	46bd      	mov	sp, r7
 800b492:	b006      	add	sp, #24
 800b494:	bd80      	pop	{r7, pc}
 800b496:	46c0      	nop			; (mov r8, r8)
 800b498:	ffff0fff 	.word	0xffff0fff

0800b49c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	689b      	ldr	r3, [r3, #8]
 800b4aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	4a08      	ldr	r2, [pc, #32]	; (800b4d0 <TIM_ITRx_SetConfig+0x34>)
 800b4b0:	4013      	ands	r3, r2
 800b4b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b4b4:	683a      	ldr	r2, [r7, #0]
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	2207      	movs	r2, #7
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	68fa      	ldr	r2, [r7, #12]
 800b4c4:	609a      	str	r2, [r3, #8]
}
 800b4c6:	46c0      	nop			; (mov r8, r8)
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	b004      	add	sp, #16
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	46c0      	nop			; (mov r8, r8)
 800b4d0:	ffcfff8f 	.word	0xffcfff8f

0800b4d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b086      	sub	sp, #24
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	60b9      	str	r1, [r7, #8]
 800b4de:	607a      	str	r2, [r7, #4]
 800b4e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	4a09      	ldr	r2, [pc, #36]	; (800b510 <TIM_ETR_SetConfig+0x3c>)
 800b4ec:	4013      	ands	r3, r2
 800b4ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	021a      	lsls	r2, r3, #8
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	431a      	orrs	r2, r3
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	697a      	ldr	r2, [r7, #20]
 800b4fe:	4313      	orrs	r3, r2
 800b500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	697a      	ldr	r2, [r7, #20]
 800b506:	609a      	str	r2, [r3, #8]
}
 800b508:	46c0      	nop			; (mov r8, r8)
 800b50a:	46bd      	mov	sp, r7
 800b50c:	b006      	add	sp, #24
 800b50e:	bd80      	pop	{r7, pc}
 800b510:	ffff00ff 	.word	0xffff00ff

0800b514 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b086      	sub	sp, #24
 800b518:	af00      	add	r7, sp, #0
 800b51a:	60f8      	str	r0, [r7, #12]
 800b51c:	60b9      	str	r1, [r7, #8]
 800b51e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	221f      	movs	r2, #31
 800b524:	4013      	ands	r3, r2
 800b526:	2201      	movs	r2, #1
 800b528:	409a      	lsls	r2, r3
 800b52a:	0013      	movs	r3, r2
 800b52c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	6a1b      	ldr	r3, [r3, #32]
 800b532:	697a      	ldr	r2, [r7, #20]
 800b534:	43d2      	mvns	r2, r2
 800b536:	401a      	ands	r2, r3
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	6a1a      	ldr	r2, [r3, #32]
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	211f      	movs	r1, #31
 800b544:	400b      	ands	r3, r1
 800b546:	6879      	ldr	r1, [r7, #4]
 800b548:	4099      	lsls	r1, r3
 800b54a:	000b      	movs	r3, r1
 800b54c:	431a      	orrs	r2, r3
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	621a      	str	r2, [r3, #32]
}
 800b552:	46c0      	nop			; (mov r8, r8)
 800b554:	46bd      	mov	sp, r7
 800b556:	b006      	add	sp, #24
 800b558:	bd80      	pop	{r7, pc}
	...

0800b55c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	223c      	movs	r2, #60	; 0x3c
 800b56a:	5c9b      	ldrb	r3, [r3, r2]
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d101      	bne.n	800b574 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b570:	2302      	movs	r3, #2
 800b572:	e055      	b.n	800b620 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	223c      	movs	r2, #60	; 0x3c
 800b578:	2101      	movs	r1, #1
 800b57a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	223d      	movs	r2, #61	; 0x3d
 800b580:	2102      	movs	r1, #2
 800b582:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4a23      	ldr	r2, [pc, #140]	; (800b628 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d108      	bne.n	800b5b0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	4a22      	ldr	r2, [pc, #136]	; (800b62c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b5a2:	4013      	ands	r3, r2
 800b5a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	68fa      	ldr	r2, [r7, #12]
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	2270      	movs	r2, #112	; 0x70
 800b5b4:	4393      	bics	r3, r2
 800b5b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	68fa      	ldr	r2, [r7, #12]
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4a16      	ldr	r2, [pc, #88]	; (800b628 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d00f      	beq.n	800b5f4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681a      	ldr	r2, [r3, #0]
 800b5d8:	2380      	movs	r3, #128	; 0x80
 800b5da:	05db      	lsls	r3, r3, #23
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d009      	beq.n	800b5f4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4a12      	ldr	r2, [pc, #72]	; (800b630 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d004      	beq.n	800b5f4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4a11      	ldr	r2, [pc, #68]	; (800b634 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d10c      	bne.n	800b60e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	2280      	movs	r2, #128	; 0x80
 800b5f8:	4393      	bics	r3, r2
 800b5fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	689b      	ldr	r3, [r3, #8]
 800b600:	68ba      	ldr	r2, [r7, #8]
 800b602:	4313      	orrs	r3, r2
 800b604:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	68ba      	ldr	r2, [r7, #8]
 800b60c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	223d      	movs	r2, #61	; 0x3d
 800b612:	2101      	movs	r1, #1
 800b614:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	223c      	movs	r2, #60	; 0x3c
 800b61a:	2100      	movs	r1, #0
 800b61c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b61e:	2300      	movs	r3, #0
}
 800b620:	0018      	movs	r0, r3
 800b622:	46bd      	mov	sp, r7
 800b624:	b004      	add	sp, #16
 800b626:	bd80      	pop	{r7, pc}
 800b628:	40012c00 	.word	0x40012c00
 800b62c:	ff0fffff 	.word	0xff0fffff
 800b630:	40000400 	.word	0x40000400
 800b634:	40014000 	.word	0x40014000

0800b638 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b642:	2300      	movs	r3, #0
 800b644:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	223c      	movs	r2, #60	; 0x3c
 800b64a:	5c9b      	ldrb	r3, [r3, r2]
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d101      	bne.n	800b654 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b650:	2302      	movs	r3, #2
 800b652:	e079      	b.n	800b748 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	223c      	movs	r2, #60	; 0x3c
 800b658:	2101      	movs	r1, #1
 800b65a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	22ff      	movs	r2, #255	; 0xff
 800b660:	4393      	bics	r3, r2
 800b662:	001a      	movs	r2, r3
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	68db      	ldr	r3, [r3, #12]
 800b668:	4313      	orrs	r3, r2
 800b66a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	4a38      	ldr	r2, [pc, #224]	; (800b750 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800b670:	401a      	ands	r2, r3
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	689b      	ldr	r3, [r3, #8]
 800b676:	4313      	orrs	r3, r2
 800b678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	4a35      	ldr	r2, [pc, #212]	; (800b754 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b67e:	401a      	ands	r2, r3
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	4313      	orrs	r3, r2
 800b686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	4a33      	ldr	r2, [pc, #204]	; (800b758 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b68c:	401a      	ands	r2, r3
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	4313      	orrs	r3, r2
 800b694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	4a30      	ldr	r2, [pc, #192]	; (800b75c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b69a:	401a      	ands	r2, r3
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	691b      	ldr	r3, [r3, #16]
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	4a2e      	ldr	r2, [pc, #184]	; (800b760 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800b6a8:	401a      	ands	r2, r3
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	695b      	ldr	r3, [r3, #20]
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	4a2b      	ldr	r2, [pc, #172]	; (800b764 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800b6b6:	401a      	ands	r2, r3
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	4a29      	ldr	r2, [pc, #164]	; (800b768 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800b6c4:	401a      	ands	r2, r3
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	699b      	ldr	r3, [r3, #24]
 800b6ca:	041b      	lsls	r3, r3, #16
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4a25      	ldr	r2, [pc, #148]	; (800b76c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d106      	bne.n	800b6e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	4a24      	ldr	r2, [pc, #144]	; (800b770 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b6de:	401a      	ands	r2, r3
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	69db      	ldr	r3, [r3, #28]
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a1f      	ldr	r2, [pc, #124]	; (800b76c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d121      	bne.n	800b736 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	4a1f      	ldr	r2, [pc, #124]	; (800b774 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b6f6:	401a      	ands	r2, r3
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6fc:	051b      	lsls	r3, r3, #20
 800b6fe:	4313      	orrs	r3, r2
 800b700:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	4a1c      	ldr	r2, [pc, #112]	; (800b778 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800b706:	401a      	ands	r2, r3
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	6a1b      	ldr	r3, [r3, #32]
 800b70c:	4313      	orrs	r3, r2
 800b70e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	4a1a      	ldr	r2, [pc, #104]	; (800b77c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800b714:	401a      	ands	r2, r3
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b71a:	4313      	orrs	r3, r2
 800b71c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	4a12      	ldr	r2, [pc, #72]	; (800b76c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b724:	4293      	cmp	r3, r2
 800b726:	d106      	bne.n	800b736 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	4a15      	ldr	r2, [pc, #84]	; (800b780 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800b72c:	401a      	ands	r2, r3
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b732:	4313      	orrs	r3, r2
 800b734:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	68fa      	ldr	r2, [r7, #12]
 800b73c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	223c      	movs	r2, #60	; 0x3c
 800b742:	2100      	movs	r1, #0
 800b744:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b746:	2300      	movs	r3, #0
}
 800b748:	0018      	movs	r0, r3
 800b74a:	46bd      	mov	sp, r7
 800b74c:	b004      	add	sp, #16
 800b74e:	bd80      	pop	{r7, pc}
 800b750:	fffffcff 	.word	0xfffffcff
 800b754:	fffffbff 	.word	0xfffffbff
 800b758:	fffff7ff 	.word	0xfffff7ff
 800b75c:	ffffefff 	.word	0xffffefff
 800b760:	ffffdfff 	.word	0xffffdfff
 800b764:	ffffbfff 	.word	0xffffbfff
 800b768:	fff0ffff 	.word	0xfff0ffff
 800b76c:	40012c00 	.word	0x40012c00
 800b770:	efffffff 	.word	0xefffffff
 800b774:	ff0fffff 	.word	0xff0fffff
 800b778:	feffffff 	.word	0xfeffffff
 800b77c:	fdffffff 	.word	0xfdffffff
 800b780:	dfffffff 	.word	0xdfffffff

0800b784 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800b784:	b580      	push	{r7, lr}
 800b786:	b08a      	sub	sp, #40	; 0x28
 800b788:	af00      	add	r7, sp, #0
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	223c      	movs	r2, #60	; 0x3c
 800b794:	5c9b      	ldrb	r3, [r3, r2]
 800b796:	2b01      	cmp	r3, #1
 800b798:	d101      	bne.n	800b79e <HAL_TIMEx_ConfigBreakInput+0x1a>
 800b79a:	2302      	movs	r3, #2
 800b79c:	e08e      	b.n	800b8bc <HAL_TIMEx_ConfigBreakInput+0x138>
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	223c      	movs	r2, #60	; 0x3c
 800b7a2:	2101      	movs	r1, #1
 800b7a4:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	2b04      	cmp	r3, #4
 800b7ac:	d019      	beq.n	800b7e2 <HAL_TIMEx_ConfigBreakInput+0x5e>
 800b7ae:	d822      	bhi.n	800b7f6 <HAL_TIMEx_ConfigBreakInput+0x72>
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d002      	beq.n	800b7ba <HAL_TIMEx_ConfigBreakInput+0x36>
 800b7b4:	2b02      	cmp	r3, #2
 800b7b6:	d00a      	beq.n	800b7ce <HAL_TIMEx_ConfigBreakInput+0x4a>
 800b7b8:	e01d      	b.n	800b7f6 <HAL_TIMEx_ConfigBreakInput+0x72>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800b7c2:	2380      	movs	r3, #128	; 0x80
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800b7c8:	2309      	movs	r3, #9
 800b7ca:	61bb      	str	r3, [r7, #24]
      break;
 800b7cc:	e01c      	b.n	800b808 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800b7ce:	2302      	movs	r3, #2
 800b7d0:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800b7d6:	2380      	movs	r3, #128	; 0x80
 800b7d8:	00db      	lsls	r3, r3, #3
 800b7da:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800b7dc:	230a      	movs	r3, #10
 800b7de:	61bb      	str	r3, [r7, #24]
      break;
 800b7e0:	e012      	b.n	800b808 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800b7e2:	2304      	movs	r3, #4
 800b7e4:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800b7e6:	2302      	movs	r3, #2
 800b7e8:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800b7ea:	2380      	movs	r3, #128	; 0x80
 800b7ec:	011b      	lsls	r3, r3, #4
 800b7ee:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800b7f0:	230b      	movs	r3, #11
 800b7f2:	61bb      	str	r3, [r7, #24]
      break;
 800b7f4:	e008      	b.n	800b808 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_polarity_mask = 0U;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = 0U;
 800b7fe:	2300      	movs	r3, #0
 800b800:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800b802:	2300      	movs	r3, #0
 800b804:	61bb      	str	r3, [r7, #24]
      break;
 800b806:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	d003      	beq.n	800b816 <HAL_TIMEx_ConfigBreakInput+0x92>
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	2b02      	cmp	r3, #2
 800b812:	d027      	beq.n	800b864 <HAL_TIMEx_ConfigBreakInput+0xe0>
      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
      break;
    }
    default:
      break;
 800b814:	e04d      	b.n	800b8b2 <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF1;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b81c:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 800b81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b820:	43da      	mvns	r2, r3
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	4013      	ands	r3, r2
 800b826:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	685a      	ldr	r2, [r3, #4]
 800b82c:	69fb      	ldr	r3, [r7, #28]
 800b82e:	409a      	lsls	r2, r3
 800b830:	0013      	movs	r3, r2
 800b832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b834:	4013      	ands	r3, r2
 800b836:	697a      	ldr	r2, [r7, #20]
 800b838:	4313      	orrs	r3, r2
 800b83a:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 800b83c:	6a3b      	ldr	r3, [r7, #32]
 800b83e:	43da      	mvns	r2, r3
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	4013      	ands	r3, r2
 800b844:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	689a      	ldr	r2, [r3, #8]
 800b84a:	69bb      	ldr	r3, [r7, #24]
 800b84c:	409a      	lsls	r2, r3
 800b84e:	0013      	movs	r3, r2
 800b850:	6a3a      	ldr	r2, [r7, #32]
 800b852:	4013      	ands	r3, r2
 800b854:	697a      	ldr	r2, [r7, #20]
 800b856:	4313      	orrs	r3, r2
 800b858:	617b      	str	r3, [r7, #20]
      htim->Instance->AF1 = tmporx;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	697a      	ldr	r2, [r7, #20]
 800b860:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800b862:	e026      	b.n	800b8b2 <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF2;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b86a:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 800b86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86e:	43da      	mvns	r2, r3
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	4013      	ands	r3, r2
 800b874:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	685a      	ldr	r2, [r3, #4]
 800b87a:	69fb      	ldr	r3, [r7, #28]
 800b87c:	409a      	lsls	r2, r3
 800b87e:	0013      	movs	r3, r2
 800b880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b882:	4013      	ands	r3, r2
 800b884:	697a      	ldr	r2, [r7, #20]
 800b886:	4313      	orrs	r3, r2
 800b888:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 800b88a:	6a3b      	ldr	r3, [r7, #32]
 800b88c:	43da      	mvns	r2, r3
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	4013      	ands	r3, r2
 800b892:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	689a      	ldr	r2, [r3, #8]
 800b898:	69bb      	ldr	r3, [r7, #24]
 800b89a:	409a      	lsls	r2, r3
 800b89c:	0013      	movs	r3, r2
 800b89e:	6a3a      	ldr	r2, [r7, #32]
 800b8a0:	4013      	ands	r3, r2
 800b8a2:	697a      	ldr	r2, [r7, #20]
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	617b      	str	r3, [r7, #20]
      htim->Instance->AF2 = tmporx;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	697a      	ldr	r2, [r7, #20]
 800b8ae:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800b8b0:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	223c      	movs	r2, #60	; 0x3c
 800b8b6:	2100      	movs	r1, #0
 800b8b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b8ba:	2300      	movs	r3, #0
}
 800b8bc:	0018      	movs	r0, r3
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	b00a      	add	sp, #40	; 0x28
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d101      	bne.n	800b8d6 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	e03f      	b.n	800b956 <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2259      	movs	r2, #89	; 0x59
 800b8da:	5c9b      	ldrb	r3, [r3, r2]
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d107      	bne.n	800b8f2 <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2258      	movs	r2, #88	; 0x58
 800b8e6:	2100      	movs	r1, #0
 800b8e8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	0018      	movs	r0, r3
 800b8ee:	f7f9 fce3 	bl	80052b8 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2259      	movs	r2, #89	; 0x59
 800b8f6:	2102      	movs	r1, #2
 800b8f8:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2101      	movs	r1, #1
 800b906:	438a      	bics	r2, r1
 800b908:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	0018      	movs	r0, r3
 800b90e:	f000 facf 	bl	800beb0 <USART_SetConfig>
 800b912:	0003      	movs	r3, r0
 800b914:	2b01      	cmp	r3, #1
 800b916:	d101      	bne.n	800b91c <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 800b918:	2301      	movs	r3, #1
 800b91a:	e01c      	b.n	800b956 <HAL_USART_Init+0x92>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	685a      	ldr	r2, [r3, #4]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	490e      	ldr	r1, [pc, #56]	; (800b960 <HAL_USART_Init+0x9c>)
 800b928:	400a      	ands	r2, r1
 800b92a:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	689a      	ldr	r2, [r3, #8]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	212a      	movs	r1, #42	; 0x2a
 800b938:	438a      	bics	r2, r1
 800b93a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	2101      	movs	r1, #1
 800b948:	430a      	orrs	r2, r1
 800b94a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	0018      	movs	r0, r3
 800b950:	f000 fd4a 	bl	800c3e8 <USART_CheckIdleState>
 800b954:	0003      	movs	r3, r0
}
 800b956:	0018      	movs	r0, r3
 800b958:	46bd      	mov	sp, r7
 800b95a:	b002      	add	sp, #8
 800b95c:	bd80      	pop	{r7, pc}
 800b95e:	46c0      	nop			; (mov r8, r8)
 800b960:	ffffbfff 	.word	0xffffbfff

0800b964 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b08a      	sub	sp, #40	; 0x28
 800b968:	af02      	add	r7, sp, #8
 800b96a:	60f8      	str	r0, [r7, #12]
 800b96c:	60b9      	str	r1, [r7, #8]
 800b96e:	603b      	str	r3, [r7, #0]
 800b970:	1dbb      	adds	r3, r7, #6
 800b972:	801a      	strh	r2, [r3, #0]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2259      	movs	r2, #89	; 0x59
 800b978:	5c9b      	ldrb	r3, [r3, r2]
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	2b01      	cmp	r3, #1
 800b97e:	d000      	beq.n	800b982 <HAL_USART_Transmit+0x1e>
 800b980:	e0a9      	b.n	800bad6 <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d003      	beq.n	800b990 <HAL_USART_Transmit+0x2c>
 800b988:	1dbb      	adds	r3, r7, #6
 800b98a:	881b      	ldrh	r3, [r3, #0]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d101      	bne.n	800b994 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b990:	2301      	movs	r3, #1
 800b992:	e0a1      	b.n	800bad8 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	689a      	ldr	r2, [r3, #8]
 800b998:	2380      	movs	r3, #128	; 0x80
 800b99a:	015b      	lsls	r3, r3, #5
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d109      	bne.n	800b9b4 <HAL_USART_Transmit+0x50>
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	691b      	ldr	r3, [r3, #16]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d105      	bne.n	800b9b4 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	4013      	ands	r3, r2
 800b9ae:	d001      	beq.n	800b9b4 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	e091      	b.n	800bad8 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2258      	movs	r2, #88	; 0x58
 800b9b8:	5c9b      	ldrb	r3, [r3, r2]
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d101      	bne.n	800b9c2 <HAL_USART_Transmit+0x5e>
 800b9be:	2302      	movs	r3, #2
 800b9c0:	e08a      	b.n	800bad8 <HAL_USART_Transmit+0x174>
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2258      	movs	r2, #88	; 0x58
 800b9c6:	2101      	movs	r1, #1
 800b9c8:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2259      	movs	r2, #89	; 0x59
 800b9d4:	2112      	movs	r1, #18
 800b9d6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b9d8:	f7f9 fee8 	bl	80057ac <HAL_GetTick>
 800b9dc:	0003      	movs	r3, r0
 800b9de:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	1dba      	adds	r2, r7, #6
 800b9e4:	8812      	ldrh	r2, [r2, #0]
 800b9e6:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	1dba      	adds	r2, r7, #6
 800b9ec:	8812      	ldrh	r2, [r2, #0]
 800b9ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	689a      	ldr	r2, [r3, #8]
 800b9f4:	2380      	movs	r3, #128	; 0x80
 800b9f6:	015b      	lsls	r3, r3, #5
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d108      	bne.n	800ba0e <HAL_USART_Transmit+0xaa>
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	691b      	ldr	r3, [r3, #16]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d104      	bne.n	800ba0e <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 800ba04:	2300      	movs	r3, #0
 800ba06:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	61bb      	str	r3, [r7, #24]
 800ba0c:	e003      	b.n	800ba16 <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800ba12:	2300      	movs	r3, #0
 800ba14:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800ba16:	e02a      	b.n	800ba6e <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ba18:	697a      	ldr	r2, [r7, #20]
 800ba1a:	68f8      	ldr	r0, [r7, #12]
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	9300      	str	r3, [sp, #0]
 800ba20:	0013      	movs	r3, r2
 800ba22:	2200      	movs	r2, #0
 800ba24:	2180      	movs	r1, #128	; 0x80
 800ba26:	f000 fa0e 	bl	800be46 <USART_WaitOnFlagUntilTimeout>
 800ba2a:	1e03      	subs	r3, r0, #0
 800ba2c:	d001      	beq.n	800ba32 <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800ba2e:	2303      	movs	r3, #3
 800ba30:	e052      	b.n	800bad8 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 800ba32:	69fb      	ldr	r3, [r7, #28]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d10b      	bne.n	800ba50 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 800ba38:	69bb      	ldr	r3, [r7, #24]
 800ba3a:	881b      	ldrh	r3, [r3, #0]
 800ba3c:	001a      	movs	r2, r3
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	05d2      	lsls	r2, r2, #23
 800ba44:	0dd2      	lsrs	r2, r2, #23
 800ba46:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 800ba48:	69bb      	ldr	r3, [r7, #24]
 800ba4a:	3302      	adds	r3, #2
 800ba4c:	61bb      	str	r3, [r7, #24]
 800ba4e:	e007      	b.n	800ba60 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800ba50:	69fb      	ldr	r3, [r7, #28]
 800ba52:	781a      	ldrb	r2, [r3, #0]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 800ba5a:	69fb      	ldr	r3, [r7, #28]
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	3b01      	subs	r3, #1
 800ba68:	b29a      	uxth	r2, r3
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba72:	b29b      	uxth	r3, r3
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d1cf      	bne.n	800ba18 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ba78:	697a      	ldr	r2, [r7, #20]
 800ba7a:	68f8      	ldr	r0, [r7, #12]
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	9300      	str	r3, [sp, #0]
 800ba80:	0013      	movs	r3, r2
 800ba82:	2200      	movs	r2, #0
 800ba84:	2140      	movs	r1, #64	; 0x40
 800ba86:	f000 f9de 	bl	800be46 <USART_WaitOnFlagUntilTimeout>
 800ba8a:	1e03      	subs	r3, r0, #0
 800ba8c:	d001      	beq.n	800ba92 <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 800ba8e:	2303      	movs	r3, #3
 800ba90:	e022      	b.n	800bad8 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	2240      	movs	r2, #64	; 0x40
 800ba98:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	2208      	movs	r2, #8
 800baa0:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	699a      	ldr	r2, [r3, #24]
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2108      	movs	r1, #8
 800baae:	430a      	orrs	r2, r1
 800bab0:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	699a      	ldr	r2, [r3, #24]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2110      	movs	r1, #16
 800babe:	430a      	orrs	r2, r1
 800bac0:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2259      	movs	r2, #89	; 0x59
 800bac6:	2101      	movs	r1, #1
 800bac8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2258      	movs	r2, #88	; 0x58
 800bace:	2100      	movs	r1, #0
 800bad0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800bad2:	2300      	movs	r3, #0
 800bad4:	e000      	b.n	800bad8 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 800bad6:	2302      	movs	r3, #2
  }
}
 800bad8:	0018      	movs	r0, r3
 800bada:	46bd      	mov	sp, r7
 800badc:	b008      	add	sp, #32
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b088      	sub	sp, #32
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	69db      	ldr	r3, [r3, #28]
 800baee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	689b      	ldr	r3, [r3, #8]
 800bafe:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_UDR));
 800bb00:	69fb      	ldr	r3, [r7, #28]
 800bb02:	4aab      	ldr	r2, [pc, #684]	; (800bdb0 <HAL_USART_IRQHandler+0x2d0>)
 800bb04:	4013      	ands	r3, r2
 800bb06:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d117      	bne.n	800bb3e <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bb0e:	69fb      	ldr	r3, [r7, #28]
 800bb10:	2220      	movs	r2, #32
 800bb12:	4013      	ands	r3, r2
 800bb14:	d013      	beq.n	800bb3e <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bb16:	69bb      	ldr	r3, [r7, #24]
 800bb18:	2220      	movs	r2, #32
 800bb1a:	4013      	ands	r3, r2
 800bb1c:	d104      	bne.n	800bb28 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bb1e:	697a      	ldr	r2, [r7, #20]
 800bb20:	2380      	movs	r3, #128	; 0x80
 800bb22:	055b      	lsls	r3, r3, #21
 800bb24:	4013      	ands	r3, r2
 800bb26:	d00a      	beq.n	800bb3e <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d100      	bne.n	800bb32 <HAL_USART_IRQHandler+0x52>
 800bb30:	e135      	b.n	800bd9e <HAL_USART_IRQHandler+0x2be>
      {
        husart->RxISR(husart);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb36:	687a      	ldr	r2, [r7, #4]
 800bb38:	0010      	movs	r0, r2
 800bb3a:	4798      	blx	r3
      }
      return;
 800bb3c:	e12f      	b.n	800bd9e <HAL_USART_IRQHandler+0x2be>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d100      	bne.n	800bb46 <HAL_USART_IRQHandler+0x66>
 800bb44:	e0eb      	b.n	800bd1e <HAL_USART_IRQHandler+0x23e>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	4a9a      	ldr	r2, [pc, #616]	; (800bdb4 <HAL_USART_IRQHandler+0x2d4>)
 800bb4a:	4013      	ands	r3, r2
 800bb4c:	d105      	bne.n	800bb5a <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 800bb4e:	69ba      	ldr	r2, [r7, #24]
 800bb50:	2390      	movs	r3, #144	; 0x90
 800bb52:	005b      	lsls	r3, r3, #1
 800bb54:	4013      	ands	r3, r2
 800bb56:	d100      	bne.n	800bb5a <HAL_USART_IRQHandler+0x7a>
 800bb58:	e0e1      	b.n	800bd1e <HAL_USART_IRQHandler+0x23e>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bb5a:	69fb      	ldr	r3, [r7, #28]
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	4013      	ands	r3, r2
 800bb60:	d00e      	beq.n	800bb80 <HAL_USART_IRQHandler+0xa0>
 800bb62:	69ba      	ldr	r2, [r7, #24]
 800bb64:	2380      	movs	r3, #128	; 0x80
 800bb66:	005b      	lsls	r3, r3, #1
 800bb68:	4013      	ands	r3, r2
 800bb6a:	d009      	beq.n	800bb80 <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2201      	movs	r2, #1
 800bb72:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb78:	2201      	movs	r2, #1
 800bb7a:	431a      	orrs	r2, r3
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb80:	69fb      	ldr	r3, [r7, #28]
 800bb82:	2202      	movs	r2, #2
 800bb84:	4013      	ands	r3, r2
 800bb86:	d00d      	beq.n	800bba4 <HAL_USART_IRQHandler+0xc4>
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	4013      	ands	r3, r2
 800bb8e:	d009      	beq.n	800bba4 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	2202      	movs	r2, #2
 800bb96:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb9c:	2204      	movs	r2, #4
 800bb9e:	431a      	orrs	r2, r3
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	2204      	movs	r2, #4
 800bba8:	4013      	ands	r3, r2
 800bbaa:	d00d      	beq.n	800bbc8 <HAL_USART_IRQHandler+0xe8>
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	4013      	ands	r3, r2
 800bbb2:	d009      	beq.n	800bbc8 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	2204      	movs	r2, #4
 800bbba:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbc0:	2202      	movs	r2, #2
 800bbc2:	431a      	orrs	r2, r3
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bbc8:	69fb      	ldr	r3, [r7, #28]
 800bbca:	2208      	movs	r2, #8
 800bbcc:	4013      	ands	r3, r2
 800bbce:	d011      	beq.n	800bbf4 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bbd0:	69bb      	ldr	r3, [r7, #24]
 800bbd2:	2220      	movs	r2, #32
 800bbd4:	4013      	ands	r3, r2
 800bbd6:	d103      	bne.n	800bbe0 <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	4a76      	ldr	r2, [pc, #472]	; (800bdb4 <HAL_USART_IRQHandler+0x2d4>)
 800bbdc:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bbde:	d009      	beq.n	800bbf4 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	2208      	movs	r2, #8
 800bbe6:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbec:	2208      	movs	r2, #8
 800bbee:	431a      	orrs	r2, r3
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bbf4:	69fa      	ldr	r2, [r7, #28]
 800bbf6:	2380      	movs	r3, #128	; 0x80
 800bbf8:	019b      	lsls	r3, r3, #6
 800bbfa:	4013      	ands	r3, r2
 800bbfc:	d01a      	beq.n	800bc34 <HAL_USART_IRQHandler+0x154>
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	2201      	movs	r2, #1
 800bc02:	4013      	ands	r3, r2
 800bc04:	d016      	beq.n	800bc34 <HAL_USART_IRQHandler+0x154>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2259      	movs	r2, #89	; 0x59
 800bc0a:	5c9b      	ldrb	r3, [r3, r2]
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	2b22      	cmp	r3, #34	; 0x22
 800bc10:	d105      	bne.n	800bc1e <HAL_USART_IRQHandler+0x13e>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	2280      	movs	r2, #128	; 0x80
 800bc18:	0192      	lsls	r2, r2, #6
 800bc1a:	621a      	str	r2, [r3, #32]
        return;
 800bc1c:	e0c4      	b.n	800bda8 <HAL_USART_IRQHandler+0x2c8>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	2280      	movs	r2, #128	; 0x80
 800bc24:	0192      	lsls	r2, r2, #6
 800bc26:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc2c:	2220      	movs	r2, #32
 800bc2e:	431a      	orrs	r2, r3
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d100      	bne.n	800bc3e <HAL_USART_IRQHandler+0x15e>
 800bc3c:	e0b1      	b.n	800bda2 <HAL_USART_IRQHandler+0x2c2>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bc3e:	69fb      	ldr	r3, [r7, #28]
 800bc40:	2220      	movs	r2, #32
 800bc42:	4013      	ands	r3, r2
 800bc44:	d011      	beq.n	800bc6a <HAL_USART_IRQHandler+0x18a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bc46:	69bb      	ldr	r3, [r7, #24]
 800bc48:	2220      	movs	r2, #32
 800bc4a:	4013      	ands	r3, r2
 800bc4c:	d104      	bne.n	800bc58 <HAL_USART_IRQHandler+0x178>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bc4e:	697a      	ldr	r2, [r7, #20]
 800bc50:	2380      	movs	r3, #128	; 0x80
 800bc52:	055b      	lsls	r3, r3, #21
 800bc54:	4013      	ands	r3, r2
 800bc56:	d008      	beq.n	800bc6a <HAL_USART_IRQHandler+0x18a>
      {
        if (husart->RxISR != NULL)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d004      	beq.n	800bc6a <HAL_USART_IRQHandler+0x18a>
        {
          husart->RxISR(husart);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc64:	687a      	ldr	r2, [r7, #4]
 800bc66:	0010      	movs	r0, r2
 800bc68:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc6e:	2208      	movs	r2, #8
 800bc70:	4013      	ands	r3, r2
 800bc72:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	689b      	ldr	r3, [r3, #8]
 800bc7a:	2240      	movs	r2, #64	; 0x40
 800bc7c:	4013      	ands	r3, r2
 800bc7e:	2b40      	cmp	r3, #64	; 0x40
 800bc80:	d002      	beq.n	800bc88 <HAL_USART_IRQHandler+0x1a8>
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d040      	beq.n	800bd0a <HAL_USART_IRQHandler+0x22a>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	0018      	movs	r0, r3
 800bc8c:	f000 f8a6 	bl	800bddc <USART_EndTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	689b      	ldr	r3, [r3, #8]
 800bc96:	2240      	movs	r2, #64	; 0x40
 800bc98:	4013      	ands	r3, r2
 800bc9a:	2b40      	cmp	r3, #64	; 0x40
 800bc9c:	d130      	bne.n	800bd00 <HAL_USART_IRQHandler+0x220>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	689a      	ldr	r2, [r3, #8]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	2140      	movs	r1, #64	; 0x40
 800bcaa:	438a      	bics	r2, r1
 800bcac:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d008      	beq.n	800bcc8 <HAL_USART_IRQHandler+0x1e8>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcba:	2200      	movs	r2, #0
 800bcbc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcc2:	0018      	movs	r0, r3
 800bcc4:	f7fa fa04 	bl	80060d0 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d012      	beq.n	800bcf6 <HAL_USART_IRQHandler+0x216>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcd4:	4a38      	ldr	r2, [pc, #224]	; (800bdb8 <HAL_USART_IRQHandler+0x2d8>)
 800bcd6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcdc:	0018      	movs	r0, r3
 800bcde:	f7fa f9f7 	bl	80060d0 <HAL_DMA_Abort_IT>
 800bce2:	1e03      	subs	r3, r0, #0
 800bce4:	d019      	beq.n	800bd1a <HAL_USART_IRQHandler+0x23a>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcf0:	0018      	movs	r0, r3
 800bcf2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800bcf4:	e011      	b.n	800bd1a <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	0018      	movs	r0, r3
 800bcfa:	f000 f867 	bl	800bdcc <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800bcfe:	e00c      	b.n	800bd1a <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	0018      	movs	r0, r3
 800bd04:	f000 f862 	bl	800bdcc <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800bd08:	e007      	b.n	800bd1a <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	0018      	movs	r0, r3
 800bd0e:	f000 f85d 	bl	800bdcc <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2200      	movs	r2, #0
 800bd16:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 800bd18:	e043      	b.n	800bda2 <HAL_USART_IRQHandler+0x2c2>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800bd1a:	46c0      	nop			; (mov r8, r8)
    return;
 800bd1c:	e041      	b.n	800bda2 <HAL_USART_IRQHandler+0x2c2>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bd1e:	69fb      	ldr	r3, [r7, #28]
 800bd20:	2280      	movs	r2, #128	; 0x80
 800bd22:	4013      	ands	r3, r2
 800bd24:	d012      	beq.n	800bd4c <HAL_USART_IRQHandler+0x26c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bd26:	69bb      	ldr	r3, [r7, #24]
 800bd28:	2280      	movs	r2, #128	; 0x80
 800bd2a:	4013      	ands	r3, r2
 800bd2c:	d104      	bne.n	800bd38 <HAL_USART_IRQHandler+0x258>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bd2e:	697a      	ldr	r2, [r7, #20]
 800bd30:	2380      	movs	r3, #128	; 0x80
 800bd32:	041b      	lsls	r3, r3, #16
 800bd34:	4013      	ands	r3, r2
 800bd36:	d009      	beq.n	800bd4c <HAL_USART_IRQHandler+0x26c>
  {
    if (husart->TxISR != NULL)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d032      	beq.n	800bda6 <HAL_USART_IRQHandler+0x2c6>
    {
      husart->TxISR(husart);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd44:	687a      	ldr	r2, [r7, #4]
 800bd46:	0010      	movs	r0, r2
 800bd48:	4798      	blx	r3
    }
    return;
 800bd4a:	e02c      	b.n	800bda6 <HAL_USART_IRQHandler+0x2c6>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bd4c:	69fb      	ldr	r3, [r7, #28]
 800bd4e:	2240      	movs	r2, #64	; 0x40
 800bd50:	4013      	ands	r3, r2
 800bd52:	d008      	beq.n	800bd66 <HAL_USART_IRQHandler+0x286>
 800bd54:	69bb      	ldr	r3, [r7, #24]
 800bd56:	2240      	movs	r2, #64	; 0x40
 800bd58:	4013      	ands	r3, r2
 800bd5a:	d004      	beq.n	800bd66 <HAL_USART_IRQHandler+0x286>
  {
    USART_EndTransmit_IT(husart);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	0018      	movs	r0, r3
 800bd60:	f000 fb86 	bl	800c470 <USART_EndTransmit_IT>
    return;
 800bd64:	e020      	b.n	800bda8 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bd66:	69fa      	ldr	r2, [r7, #28]
 800bd68:	2380      	movs	r3, #128	; 0x80
 800bd6a:	041b      	lsls	r3, r3, #16
 800bd6c:	4013      	ands	r3, r2
 800bd6e:	d009      	beq.n	800bd84 <HAL_USART_IRQHandler+0x2a4>
 800bd70:	69ba      	ldr	r2, [r7, #24]
 800bd72:	2380      	movs	r3, #128	; 0x80
 800bd74:	05db      	lsls	r3, r3, #23
 800bd76:	4013      	ands	r3, r2
 800bd78:	d004      	beq.n	800bd84 <HAL_USART_IRQHandler+0x2a4>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	0018      	movs	r0, r3
 800bd7e:	f000 fbc2 	bl	800c506 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800bd82:	e011      	b.n	800bda8 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bd84:	69fa      	ldr	r2, [r7, #28]
 800bd86:	2380      	movs	r3, #128	; 0x80
 800bd88:	045b      	lsls	r3, r3, #17
 800bd8a:	4013      	ands	r3, r2
 800bd8c:	d00c      	beq.n	800bda8 <HAL_USART_IRQHandler+0x2c8>
 800bd8e:	69bb      	ldr	r3, [r7, #24]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	da09      	bge.n	800bda8 <HAL_USART_IRQHandler+0x2c8>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	0018      	movs	r0, r3
 800bd98:	f000 fbad 	bl	800c4f6 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800bd9c:	e004      	b.n	800bda8 <HAL_USART_IRQHandler+0x2c8>
      return;
 800bd9e:	46c0      	nop			; (mov r8, r8)
 800bda0:	e002      	b.n	800bda8 <HAL_USART_IRQHandler+0x2c8>
    return;
 800bda2:	46c0      	nop			; (mov r8, r8)
 800bda4:	e000      	b.n	800bda8 <HAL_USART_IRQHandler+0x2c8>
    return;
 800bda6:	46c0      	nop			; (mov r8, r8)
  }
}
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	b008      	add	sp, #32
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	46c0      	nop			; (mov r8, r8)
 800bdb0:	0000200f 	.word	0x0000200f
 800bdb4:	10000001 	.word	0x10000001
 800bdb8:	0800be1d 	.word	0x0800be1d

0800bdbc <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b082      	sub	sp, #8
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 800bdc4:	46c0      	nop			; (mov r8, r8)
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	b002      	add	sp, #8
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b082      	sub	sp, #8
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 800bdd4:	46c0      	nop			; (mov r8, r8)
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	b002      	add	sp, #8
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	681a      	ldr	r2, [r3, #0]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4909      	ldr	r1, [pc, #36]	; (800be14 <USART_EndTransfer+0x38>)
 800bdf0:	400a      	ands	r2, r1
 800bdf2:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	689a      	ldr	r2, [r3, #8]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	4906      	ldr	r1, [pc, #24]	; (800be18 <USART_EndTransfer+0x3c>)
 800be00:	400a      	ands	r2, r1
 800be02:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2259      	movs	r2, #89	; 0x59
 800be08:	2101      	movs	r1, #1
 800be0a:	5499      	strb	r1, [r3, r2]
}
 800be0c:	46c0      	nop			; (mov r8, r8)
 800be0e:	46bd      	mov	sp, r7
 800be10:	b002      	add	sp, #8
 800be12:	bd80      	pop	{r7, pc}
 800be14:	fffffe1f 	.word	0xfffffe1f
 800be18:	ef7ffffe 	.word	0xef7ffffe

0800be1c <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be28:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2200      	movs	r2, #0
 800be2e:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2200      	movs	r2, #0
 800be34:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	0018      	movs	r0, r3
 800be3a:	f7ff ffc7 	bl	800bdcc <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800be3e:	46c0      	nop			; (mov r8, r8)
 800be40:	46bd      	mov	sp, r7
 800be42:	b004      	add	sp, #16
 800be44:	bd80      	pop	{r7, pc}

0800be46 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800be46:	b580      	push	{r7, lr}
 800be48:	b084      	sub	sp, #16
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	60f8      	str	r0, [r7, #12]
 800be4e:	60b9      	str	r1, [r7, #8]
 800be50:	603b      	str	r3, [r7, #0]
 800be52:	1dfb      	adds	r3, r7, #7
 800be54:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800be56:	e017      	b.n	800be88 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	3301      	adds	r3, #1
 800be5c:	d014      	beq.n	800be88 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be5e:	f7f9 fca5 	bl	80057ac <HAL_GetTick>
 800be62:	0002      	movs	r2, r0
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	1ad3      	subs	r3, r2, r3
 800be68:	69ba      	ldr	r2, [r7, #24]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d302      	bcc.n	800be74 <USART_WaitOnFlagUntilTimeout+0x2e>
 800be6e:	69bb      	ldr	r3, [r7, #24]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d109      	bne.n	800be88 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	2259      	movs	r2, #89	; 0x59
 800be78:	2101      	movs	r1, #1
 800be7a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2258      	movs	r2, #88	; 0x58
 800be80:	2100      	movs	r1, #0
 800be82:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800be84:	2303      	movs	r3, #3
 800be86:	e00f      	b.n	800bea8 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	69db      	ldr	r3, [r3, #28]
 800be8e:	68ba      	ldr	r2, [r7, #8]
 800be90:	4013      	ands	r3, r2
 800be92:	68ba      	ldr	r2, [r7, #8]
 800be94:	1ad3      	subs	r3, r2, r3
 800be96:	425a      	negs	r2, r3
 800be98:	4153      	adcs	r3, r2
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	001a      	movs	r2, r3
 800be9e:	1dfb      	adds	r3, r7, #7
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d0d8      	beq.n	800be58 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bea6:	2300      	movs	r3, #0
}
 800bea8:	0018      	movs	r0, r3
 800beaa:	46bd      	mov	sp, r7
 800beac:	b004      	add	sp, #16
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b088      	sub	sp, #32
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800beb8:	231e      	movs	r3, #30
 800beba:	18fb      	adds	r3, r7, r3
 800bebc:	2200      	movs	r2, #0
 800bebe:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800bec0:	2300      	movs	r3, #0
 800bec2:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	689a      	ldr	r2, [r3, #8]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	691b      	ldr	r3, [r3, #16]
 800becc:	431a      	orrs	r2, r3
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	695b      	ldr	r3, [r3, #20]
 800bed2:	4313      	orrs	r3, r2
 800bed4:	2280      	movs	r2, #128	; 0x80
 800bed6:	0212      	lsls	r2, r2, #8
 800bed8:	4313      	orrs	r3, r2
 800beda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	4ab1      	ldr	r2, [pc, #708]	; (800c1a8 <USART_SetConfig+0x2f8>)
 800bee4:	4013      	ands	r3, r2
 800bee6:	0019      	movs	r1, r3
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	697a      	ldr	r2, [r7, #20]
 800beee:	430a      	orrs	r2, r1
 800bef0:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800bef2:	2380      	movs	r3, #128	; 0x80
 800bef4:	011b      	lsls	r3, r3, #4
 800bef6:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6a1b      	ldr	r3, [r3, #32]
 800befc:	697a      	ldr	r2, [r7, #20]
 800befe:	4313      	orrs	r3, r2
 800bf00:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	699a      	ldr	r2, [r3, #24]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	69db      	ldr	r3, [r3, #28]
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	697a      	ldr	r2, [r7, #20]
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	68db      	ldr	r3, [r3, #12]
 800bf16:	697a      	ldr	r2, [r7, #20]
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	4aa2      	ldr	r2, [pc, #648]	; (800c1ac <USART_SetConfig+0x2fc>)
 800bf24:	4013      	ands	r3, r2
 800bf26:	0019      	movs	r1, r3
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	697a      	ldr	r2, [r7, #20]
 800bf2e:	430a      	orrs	r2, r1
 800bf30:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf38:	220f      	movs	r2, #15
 800bf3a:	4393      	bics	r3, r2
 800bf3c:	0019      	movs	r1, r3
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	430a      	orrs	r2, r1
 800bf48:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	4a98      	ldr	r2, [pc, #608]	; (800c1b0 <USART_SetConfig+0x300>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d127      	bne.n	800bfa4 <USART_SetConfig+0xf4>
 800bf54:	4b97      	ldr	r3, [pc, #604]	; (800c1b4 <USART_SetConfig+0x304>)
 800bf56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf58:	2203      	movs	r2, #3
 800bf5a:	4013      	ands	r3, r2
 800bf5c:	2b03      	cmp	r3, #3
 800bf5e:	d017      	beq.n	800bf90 <USART_SetConfig+0xe0>
 800bf60:	d81b      	bhi.n	800bf9a <USART_SetConfig+0xea>
 800bf62:	2b02      	cmp	r3, #2
 800bf64:	d00a      	beq.n	800bf7c <USART_SetConfig+0xcc>
 800bf66:	d818      	bhi.n	800bf9a <USART_SetConfig+0xea>
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d002      	beq.n	800bf72 <USART_SetConfig+0xc2>
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	d00a      	beq.n	800bf86 <USART_SetConfig+0xd6>
 800bf70:	e013      	b.n	800bf9a <USART_SetConfig+0xea>
 800bf72:	231f      	movs	r3, #31
 800bf74:	18fb      	adds	r3, r7, r3
 800bf76:	2200      	movs	r2, #0
 800bf78:	701a      	strb	r2, [r3, #0]
 800bf7a:	e058      	b.n	800c02e <USART_SetConfig+0x17e>
 800bf7c:	231f      	movs	r3, #31
 800bf7e:	18fb      	adds	r3, r7, r3
 800bf80:	2202      	movs	r2, #2
 800bf82:	701a      	strb	r2, [r3, #0]
 800bf84:	e053      	b.n	800c02e <USART_SetConfig+0x17e>
 800bf86:	231f      	movs	r3, #31
 800bf88:	18fb      	adds	r3, r7, r3
 800bf8a:	2204      	movs	r2, #4
 800bf8c:	701a      	strb	r2, [r3, #0]
 800bf8e:	e04e      	b.n	800c02e <USART_SetConfig+0x17e>
 800bf90:	231f      	movs	r3, #31
 800bf92:	18fb      	adds	r3, r7, r3
 800bf94:	2208      	movs	r2, #8
 800bf96:	701a      	strb	r2, [r3, #0]
 800bf98:	e049      	b.n	800c02e <USART_SetConfig+0x17e>
 800bf9a:	231f      	movs	r3, #31
 800bf9c:	18fb      	adds	r3, r7, r3
 800bf9e:	2210      	movs	r2, #16
 800bfa0:	701a      	strb	r2, [r3, #0]
 800bfa2:	e044      	b.n	800c02e <USART_SetConfig+0x17e>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4a83      	ldr	r2, [pc, #524]	; (800c1b8 <USART_SetConfig+0x308>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d127      	bne.n	800bffe <USART_SetConfig+0x14e>
 800bfae:	4b81      	ldr	r3, [pc, #516]	; (800c1b4 <USART_SetConfig+0x304>)
 800bfb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfb2:	220c      	movs	r2, #12
 800bfb4:	4013      	ands	r3, r2
 800bfb6:	2b0c      	cmp	r3, #12
 800bfb8:	d017      	beq.n	800bfea <USART_SetConfig+0x13a>
 800bfba:	d81b      	bhi.n	800bff4 <USART_SetConfig+0x144>
 800bfbc:	2b08      	cmp	r3, #8
 800bfbe:	d00a      	beq.n	800bfd6 <USART_SetConfig+0x126>
 800bfc0:	d818      	bhi.n	800bff4 <USART_SetConfig+0x144>
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d002      	beq.n	800bfcc <USART_SetConfig+0x11c>
 800bfc6:	2b04      	cmp	r3, #4
 800bfc8:	d00a      	beq.n	800bfe0 <USART_SetConfig+0x130>
 800bfca:	e013      	b.n	800bff4 <USART_SetConfig+0x144>
 800bfcc:	231f      	movs	r3, #31
 800bfce:	18fb      	adds	r3, r7, r3
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	701a      	strb	r2, [r3, #0]
 800bfd4:	e02b      	b.n	800c02e <USART_SetConfig+0x17e>
 800bfd6:	231f      	movs	r3, #31
 800bfd8:	18fb      	adds	r3, r7, r3
 800bfda:	2202      	movs	r2, #2
 800bfdc:	701a      	strb	r2, [r3, #0]
 800bfde:	e026      	b.n	800c02e <USART_SetConfig+0x17e>
 800bfe0:	231f      	movs	r3, #31
 800bfe2:	18fb      	adds	r3, r7, r3
 800bfe4:	2204      	movs	r2, #4
 800bfe6:	701a      	strb	r2, [r3, #0]
 800bfe8:	e021      	b.n	800c02e <USART_SetConfig+0x17e>
 800bfea:	231f      	movs	r3, #31
 800bfec:	18fb      	adds	r3, r7, r3
 800bfee:	2208      	movs	r2, #8
 800bff0:	701a      	strb	r2, [r3, #0]
 800bff2:	e01c      	b.n	800c02e <USART_SetConfig+0x17e>
 800bff4:	231f      	movs	r3, #31
 800bff6:	18fb      	adds	r3, r7, r3
 800bff8:	2210      	movs	r2, #16
 800bffa:	701a      	strb	r2, [r3, #0]
 800bffc:	e017      	b.n	800c02e <USART_SetConfig+0x17e>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	4a6e      	ldr	r2, [pc, #440]	; (800c1bc <USART_SetConfig+0x30c>)
 800c004:	4293      	cmp	r3, r2
 800c006:	d104      	bne.n	800c012 <USART_SetConfig+0x162>
 800c008:	231f      	movs	r3, #31
 800c00a:	18fb      	adds	r3, r7, r3
 800c00c:	2200      	movs	r2, #0
 800c00e:	701a      	strb	r2, [r3, #0]
 800c010:	e00d      	b.n	800c02e <USART_SetConfig+0x17e>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	4a6a      	ldr	r2, [pc, #424]	; (800c1c0 <USART_SetConfig+0x310>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d104      	bne.n	800c026 <USART_SetConfig+0x176>
 800c01c:	231f      	movs	r3, #31
 800c01e:	18fb      	adds	r3, r7, r3
 800c020:	2200      	movs	r2, #0
 800c022:	701a      	strb	r2, [r3, #0]
 800c024:	e003      	b.n	800c02e <USART_SetConfig+0x17e>
 800c026:	231f      	movs	r3, #31
 800c028:	18fb      	adds	r3, r7, r3
 800c02a:	2210      	movs	r2, #16
 800c02c:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 800c02e:	231f      	movs	r3, #31
 800c030:	18fb      	adds	r3, r7, r3
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	2b08      	cmp	r3, #8
 800c036:	d100      	bne.n	800c03a <USART_SetConfig+0x18a>
 800c038:	e139      	b.n	800c2ae <USART_SetConfig+0x3fe>
 800c03a:	dd00      	ble.n	800c03e <USART_SetConfig+0x18e>
 800c03c:	e195      	b.n	800c36a <USART_SetConfig+0x4ba>
 800c03e:	2b04      	cmp	r3, #4
 800c040:	d100      	bne.n	800c044 <USART_SetConfig+0x194>
 800c042:	e0d3      	b.n	800c1ec <USART_SetConfig+0x33c>
 800c044:	dd00      	ble.n	800c048 <USART_SetConfig+0x198>
 800c046:	e190      	b.n	800c36a <USART_SetConfig+0x4ba>
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d003      	beq.n	800c054 <USART_SetConfig+0x1a4>
 800c04c:	2b02      	cmp	r3, #2
 800c04e:	d100      	bne.n	800c052 <USART_SetConfig+0x1a2>
 800c050:	e061      	b.n	800c116 <USART_SetConfig+0x266>
 800c052:	e18a      	b.n	800c36a <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800c054:	f7fc fdf2 	bl	8008c3c <HAL_RCC_GetPCLK1Freq>
 800c058:	0003      	movs	r3, r0
 800c05a:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c060:	2b00      	cmp	r3, #0
 800c062:	d044      	beq.n	800c0ee <USART_SetConfig+0x23e>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c068:	2b01      	cmp	r3, #1
 800c06a:	d03e      	beq.n	800c0ea <USART_SetConfig+0x23a>
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c070:	2b02      	cmp	r3, #2
 800c072:	d038      	beq.n	800c0e6 <USART_SetConfig+0x236>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c078:	2b03      	cmp	r3, #3
 800c07a:	d032      	beq.n	800c0e2 <USART_SetConfig+0x232>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c080:	2b04      	cmp	r3, #4
 800c082:	d02c      	beq.n	800c0de <USART_SetConfig+0x22e>
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c088:	2b05      	cmp	r3, #5
 800c08a:	d026      	beq.n	800c0da <USART_SetConfig+0x22a>
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c090:	2b06      	cmp	r3, #6
 800c092:	d020      	beq.n	800c0d6 <USART_SetConfig+0x226>
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c098:	2b07      	cmp	r3, #7
 800c09a:	d01a      	beq.n	800c0d2 <USART_SetConfig+0x222>
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0a0:	2b08      	cmp	r3, #8
 800c0a2:	d014      	beq.n	800c0ce <USART_SetConfig+0x21e>
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0a8:	2b09      	cmp	r3, #9
 800c0aa:	d00e      	beq.n	800c0ca <USART_SetConfig+0x21a>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b0:	2b0a      	cmp	r3, #10
 800c0b2:	d008      	beq.n	800c0c6 <USART_SetConfig+0x216>
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b8:	2b0b      	cmp	r3, #11
 800c0ba:	d102      	bne.n	800c0c2 <USART_SetConfig+0x212>
 800c0bc:	2380      	movs	r3, #128	; 0x80
 800c0be:	005b      	lsls	r3, r3, #1
 800c0c0:	e016      	b.n	800c0f0 <USART_SetConfig+0x240>
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	e014      	b.n	800c0f0 <USART_SetConfig+0x240>
 800c0c6:	2380      	movs	r3, #128	; 0x80
 800c0c8:	e012      	b.n	800c0f0 <USART_SetConfig+0x240>
 800c0ca:	2340      	movs	r3, #64	; 0x40
 800c0cc:	e010      	b.n	800c0f0 <USART_SetConfig+0x240>
 800c0ce:	2320      	movs	r3, #32
 800c0d0:	e00e      	b.n	800c0f0 <USART_SetConfig+0x240>
 800c0d2:	2310      	movs	r3, #16
 800c0d4:	e00c      	b.n	800c0f0 <USART_SetConfig+0x240>
 800c0d6:	230c      	movs	r3, #12
 800c0d8:	e00a      	b.n	800c0f0 <USART_SetConfig+0x240>
 800c0da:	230a      	movs	r3, #10
 800c0dc:	e008      	b.n	800c0f0 <USART_SetConfig+0x240>
 800c0de:	2308      	movs	r3, #8
 800c0e0:	e006      	b.n	800c0f0 <USART_SetConfig+0x240>
 800c0e2:	2306      	movs	r3, #6
 800c0e4:	e004      	b.n	800c0f0 <USART_SetConfig+0x240>
 800c0e6:	2304      	movs	r3, #4
 800c0e8:	e002      	b.n	800c0f0 <USART_SetConfig+0x240>
 800c0ea:	2302      	movs	r3, #2
 800c0ec:	e000      	b.n	800c0f0 <USART_SetConfig+0x240>
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	0019      	movs	r1, r3
 800c0f2:	6938      	ldr	r0, [r7, #16]
 800c0f4:	f7f4 f806 	bl	8000104 <__udivsi3>
 800c0f8:	0003      	movs	r3, r0
 800c0fa:	005a      	lsls	r2, r3, #1
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	085b      	lsrs	r3, r3, #1
 800c102:	18d2      	adds	r2, r2, r3
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	0019      	movs	r1, r3
 800c10a:	0010      	movs	r0, r2
 800c10c:	f7f3 fffa 	bl	8000104 <__udivsi3>
 800c110:	0003      	movs	r3, r0
 800c112:	61bb      	str	r3, [r7, #24]
      break;
 800c114:	e12e      	b.n	800c374 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d052      	beq.n	800c1c4 <USART_SetConfig+0x314>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c122:	2b01      	cmp	r3, #1
 800c124:	d03e      	beq.n	800c1a4 <USART_SetConfig+0x2f4>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c12a:	2b02      	cmp	r3, #2
 800c12c:	d038      	beq.n	800c1a0 <USART_SetConfig+0x2f0>
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c132:	2b03      	cmp	r3, #3
 800c134:	d032      	beq.n	800c19c <USART_SetConfig+0x2ec>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c13a:	2b04      	cmp	r3, #4
 800c13c:	d02c      	beq.n	800c198 <USART_SetConfig+0x2e8>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c142:	2b05      	cmp	r3, #5
 800c144:	d026      	beq.n	800c194 <USART_SetConfig+0x2e4>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c14a:	2b06      	cmp	r3, #6
 800c14c:	d020      	beq.n	800c190 <USART_SetConfig+0x2e0>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c152:	2b07      	cmp	r3, #7
 800c154:	d01a      	beq.n	800c18c <USART_SetConfig+0x2dc>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c15a:	2b08      	cmp	r3, #8
 800c15c:	d014      	beq.n	800c188 <USART_SetConfig+0x2d8>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c162:	2b09      	cmp	r3, #9
 800c164:	d00e      	beq.n	800c184 <USART_SetConfig+0x2d4>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c16a:	2b0a      	cmp	r3, #10
 800c16c:	d008      	beq.n	800c180 <USART_SetConfig+0x2d0>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c172:	2b0b      	cmp	r3, #11
 800c174:	d102      	bne.n	800c17c <USART_SetConfig+0x2cc>
 800c176:	2380      	movs	r3, #128	; 0x80
 800c178:	005b      	lsls	r3, r3, #1
 800c17a:	e024      	b.n	800c1c6 <USART_SetConfig+0x316>
 800c17c:	2301      	movs	r3, #1
 800c17e:	e022      	b.n	800c1c6 <USART_SetConfig+0x316>
 800c180:	2380      	movs	r3, #128	; 0x80
 800c182:	e020      	b.n	800c1c6 <USART_SetConfig+0x316>
 800c184:	2340      	movs	r3, #64	; 0x40
 800c186:	e01e      	b.n	800c1c6 <USART_SetConfig+0x316>
 800c188:	2320      	movs	r3, #32
 800c18a:	e01c      	b.n	800c1c6 <USART_SetConfig+0x316>
 800c18c:	2310      	movs	r3, #16
 800c18e:	e01a      	b.n	800c1c6 <USART_SetConfig+0x316>
 800c190:	230c      	movs	r3, #12
 800c192:	e018      	b.n	800c1c6 <USART_SetConfig+0x316>
 800c194:	230a      	movs	r3, #10
 800c196:	e016      	b.n	800c1c6 <USART_SetConfig+0x316>
 800c198:	2308      	movs	r3, #8
 800c19a:	e014      	b.n	800c1c6 <USART_SetConfig+0x316>
 800c19c:	2306      	movs	r3, #6
 800c19e:	e012      	b.n	800c1c6 <USART_SetConfig+0x316>
 800c1a0:	2304      	movs	r3, #4
 800c1a2:	e010      	b.n	800c1c6 <USART_SetConfig+0x316>
 800c1a4:	2302      	movs	r3, #2
 800c1a6:	e00e      	b.n	800c1c6 <USART_SetConfig+0x316>
 800c1a8:	cfff69f3 	.word	0xcfff69f3
 800c1ac:	ffffc0f6 	.word	0xffffc0f6
 800c1b0:	40013800 	.word	0x40013800
 800c1b4:	40021000 	.word	0x40021000
 800c1b8:	40004400 	.word	0x40004400
 800c1bc:	40004800 	.word	0x40004800
 800c1c0:	40004c00 	.word	0x40004c00
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	0019      	movs	r1, r3
 800c1c8:	4886      	ldr	r0, [pc, #536]	; (800c3e4 <USART_SetConfig+0x534>)
 800c1ca:	f7f3 ff9b 	bl	8000104 <__udivsi3>
 800c1ce:	0003      	movs	r3, r0
 800c1d0:	005a      	lsls	r2, r3, #1
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	085b      	lsrs	r3, r3, #1
 800c1d8:	18d2      	adds	r2, r2, r3
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	0019      	movs	r1, r3
 800c1e0:	0010      	movs	r0, r2
 800c1e2:	f7f3 ff8f 	bl	8000104 <__udivsi3>
 800c1e6:	0003      	movs	r3, r0
 800c1e8:	61bb      	str	r3, [r7, #24]
      break;
 800c1ea:	e0c3      	b.n	800c374 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800c1ec:	f7fc fc9a 	bl	8008b24 <HAL_RCC_GetSysClockFreq>
 800c1f0:	0003      	movs	r3, r0
 800c1f2:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d044      	beq.n	800c286 <USART_SetConfig+0x3d6>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c200:	2b01      	cmp	r3, #1
 800c202:	d03e      	beq.n	800c282 <USART_SetConfig+0x3d2>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c208:	2b02      	cmp	r3, #2
 800c20a:	d038      	beq.n	800c27e <USART_SetConfig+0x3ce>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c210:	2b03      	cmp	r3, #3
 800c212:	d032      	beq.n	800c27a <USART_SetConfig+0x3ca>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c218:	2b04      	cmp	r3, #4
 800c21a:	d02c      	beq.n	800c276 <USART_SetConfig+0x3c6>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c220:	2b05      	cmp	r3, #5
 800c222:	d026      	beq.n	800c272 <USART_SetConfig+0x3c2>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c228:	2b06      	cmp	r3, #6
 800c22a:	d020      	beq.n	800c26e <USART_SetConfig+0x3be>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c230:	2b07      	cmp	r3, #7
 800c232:	d01a      	beq.n	800c26a <USART_SetConfig+0x3ba>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c238:	2b08      	cmp	r3, #8
 800c23a:	d014      	beq.n	800c266 <USART_SetConfig+0x3b6>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c240:	2b09      	cmp	r3, #9
 800c242:	d00e      	beq.n	800c262 <USART_SetConfig+0x3b2>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c248:	2b0a      	cmp	r3, #10
 800c24a:	d008      	beq.n	800c25e <USART_SetConfig+0x3ae>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c250:	2b0b      	cmp	r3, #11
 800c252:	d102      	bne.n	800c25a <USART_SetConfig+0x3aa>
 800c254:	2380      	movs	r3, #128	; 0x80
 800c256:	005b      	lsls	r3, r3, #1
 800c258:	e016      	b.n	800c288 <USART_SetConfig+0x3d8>
 800c25a:	2301      	movs	r3, #1
 800c25c:	e014      	b.n	800c288 <USART_SetConfig+0x3d8>
 800c25e:	2380      	movs	r3, #128	; 0x80
 800c260:	e012      	b.n	800c288 <USART_SetConfig+0x3d8>
 800c262:	2340      	movs	r3, #64	; 0x40
 800c264:	e010      	b.n	800c288 <USART_SetConfig+0x3d8>
 800c266:	2320      	movs	r3, #32
 800c268:	e00e      	b.n	800c288 <USART_SetConfig+0x3d8>
 800c26a:	2310      	movs	r3, #16
 800c26c:	e00c      	b.n	800c288 <USART_SetConfig+0x3d8>
 800c26e:	230c      	movs	r3, #12
 800c270:	e00a      	b.n	800c288 <USART_SetConfig+0x3d8>
 800c272:	230a      	movs	r3, #10
 800c274:	e008      	b.n	800c288 <USART_SetConfig+0x3d8>
 800c276:	2308      	movs	r3, #8
 800c278:	e006      	b.n	800c288 <USART_SetConfig+0x3d8>
 800c27a:	2306      	movs	r3, #6
 800c27c:	e004      	b.n	800c288 <USART_SetConfig+0x3d8>
 800c27e:	2304      	movs	r3, #4
 800c280:	e002      	b.n	800c288 <USART_SetConfig+0x3d8>
 800c282:	2302      	movs	r3, #2
 800c284:	e000      	b.n	800c288 <USART_SetConfig+0x3d8>
 800c286:	2301      	movs	r3, #1
 800c288:	0019      	movs	r1, r3
 800c28a:	6938      	ldr	r0, [r7, #16]
 800c28c:	f7f3 ff3a 	bl	8000104 <__udivsi3>
 800c290:	0003      	movs	r3, r0
 800c292:	005a      	lsls	r2, r3, #1
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	685b      	ldr	r3, [r3, #4]
 800c298:	085b      	lsrs	r3, r3, #1
 800c29a:	18d2      	adds	r2, r2, r3
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	0019      	movs	r1, r3
 800c2a2:	0010      	movs	r0, r2
 800c2a4:	f7f3 ff2e 	bl	8000104 <__udivsi3>
 800c2a8:	0003      	movs	r3, r0
 800c2aa:	61bb      	str	r3, [r7, #24]
      break;
 800c2ac:	e062      	b.n	800c374 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8((uint32_t)LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d044      	beq.n	800c340 <USART_SetConfig+0x490>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	d03e      	beq.n	800c33c <USART_SetConfig+0x48c>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2c2:	2b02      	cmp	r3, #2
 800c2c4:	d038      	beq.n	800c338 <USART_SetConfig+0x488>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ca:	2b03      	cmp	r3, #3
 800c2cc:	d032      	beq.n	800c334 <USART_SetConfig+0x484>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d2:	2b04      	cmp	r3, #4
 800c2d4:	d02c      	beq.n	800c330 <USART_SetConfig+0x480>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2da:	2b05      	cmp	r3, #5
 800c2dc:	d026      	beq.n	800c32c <USART_SetConfig+0x47c>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2e2:	2b06      	cmp	r3, #6
 800c2e4:	d020      	beq.n	800c328 <USART_SetConfig+0x478>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ea:	2b07      	cmp	r3, #7
 800c2ec:	d01a      	beq.n	800c324 <USART_SetConfig+0x474>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f2:	2b08      	cmp	r3, #8
 800c2f4:	d014      	beq.n	800c320 <USART_SetConfig+0x470>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2fa:	2b09      	cmp	r3, #9
 800c2fc:	d00e      	beq.n	800c31c <USART_SetConfig+0x46c>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c302:	2b0a      	cmp	r3, #10
 800c304:	d008      	beq.n	800c318 <USART_SetConfig+0x468>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c30a:	2b0b      	cmp	r3, #11
 800c30c:	d102      	bne.n	800c314 <USART_SetConfig+0x464>
 800c30e:	2380      	movs	r3, #128	; 0x80
 800c310:	005b      	lsls	r3, r3, #1
 800c312:	e016      	b.n	800c342 <USART_SetConfig+0x492>
 800c314:	2301      	movs	r3, #1
 800c316:	e014      	b.n	800c342 <USART_SetConfig+0x492>
 800c318:	2380      	movs	r3, #128	; 0x80
 800c31a:	e012      	b.n	800c342 <USART_SetConfig+0x492>
 800c31c:	2340      	movs	r3, #64	; 0x40
 800c31e:	e010      	b.n	800c342 <USART_SetConfig+0x492>
 800c320:	2320      	movs	r3, #32
 800c322:	e00e      	b.n	800c342 <USART_SetConfig+0x492>
 800c324:	2310      	movs	r3, #16
 800c326:	e00c      	b.n	800c342 <USART_SetConfig+0x492>
 800c328:	230c      	movs	r3, #12
 800c32a:	e00a      	b.n	800c342 <USART_SetConfig+0x492>
 800c32c:	230a      	movs	r3, #10
 800c32e:	e008      	b.n	800c342 <USART_SetConfig+0x492>
 800c330:	2308      	movs	r3, #8
 800c332:	e006      	b.n	800c342 <USART_SetConfig+0x492>
 800c334:	2306      	movs	r3, #6
 800c336:	e004      	b.n	800c342 <USART_SetConfig+0x492>
 800c338:	2304      	movs	r3, #4
 800c33a:	e002      	b.n	800c342 <USART_SetConfig+0x492>
 800c33c:	2302      	movs	r3, #2
 800c33e:	e000      	b.n	800c342 <USART_SetConfig+0x492>
 800c340:	2301      	movs	r3, #1
 800c342:	0019      	movs	r1, r3
 800c344:	2380      	movs	r3, #128	; 0x80
 800c346:	0218      	lsls	r0, r3, #8
 800c348:	f7f3 fedc 	bl	8000104 <__udivsi3>
 800c34c:	0003      	movs	r3, r0
 800c34e:	005a      	lsls	r2, r3, #1
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	085b      	lsrs	r3, r3, #1
 800c356:	18d2      	adds	r2, r2, r3
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	0019      	movs	r1, r3
 800c35e:	0010      	movs	r0, r2
 800c360:	f7f3 fed0 	bl	8000104 <__udivsi3>
 800c364:	0003      	movs	r3, r0
 800c366:	61bb      	str	r3, [r7, #24]
      break;
 800c368:	e004      	b.n	800c374 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 800c36a:	231e      	movs	r3, #30
 800c36c:	18fb      	adds	r3, r7, r3
 800c36e:	2201      	movs	r2, #1
 800c370:	701a      	strb	r2, [r3, #0]
      break;
 800c372:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800c374:	69bb      	ldr	r3, [r7, #24]
 800c376:	2b0f      	cmp	r3, #15
 800c378:	d91c      	bls.n	800c3b4 <USART_SetConfig+0x504>
 800c37a:	69ba      	ldr	r2, [r7, #24]
 800c37c:	2380      	movs	r3, #128	; 0x80
 800c37e:	025b      	lsls	r3, r3, #9
 800c380:	429a      	cmp	r2, r3
 800c382:	d217      	bcs.n	800c3b4 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	b29a      	uxth	r2, r3
 800c388:	200e      	movs	r0, #14
 800c38a:	183b      	adds	r3, r7, r0
 800c38c:	210f      	movs	r1, #15
 800c38e:	438a      	bics	r2, r1
 800c390:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c392:	69bb      	ldr	r3, [r7, #24]
 800c394:	085b      	lsrs	r3, r3, #1
 800c396:	b29b      	uxth	r3, r3
 800c398:	2207      	movs	r2, #7
 800c39a:	4013      	ands	r3, r2
 800c39c:	b299      	uxth	r1, r3
 800c39e:	183b      	adds	r3, r7, r0
 800c3a0:	183a      	adds	r2, r7, r0
 800c3a2:	8812      	ldrh	r2, [r2, #0]
 800c3a4:	430a      	orrs	r2, r1
 800c3a6:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	183a      	adds	r2, r7, r0
 800c3ae:	8812      	ldrh	r2, [r2, #0]
 800c3b0:	60da      	str	r2, [r3, #12]
 800c3b2:	e003      	b.n	800c3bc <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 800c3b4:	231e      	movs	r3, #30
 800c3b6:	18fb      	adds	r3, r7, r3
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2201      	movs	r2, #1
 800c3c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 800c3d4:	231e      	movs	r3, #30
 800c3d6:	18fb      	adds	r3, r7, r3
 800c3d8:	781b      	ldrb	r3, [r3, #0]
}
 800c3da:	0018      	movs	r0, r3
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	b008      	add	sp, #32
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	46c0      	nop			; (mov r8, r8)
 800c3e4:	00f42400 	.word	0x00f42400

0800c3e8 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b086      	sub	sp, #24
 800c3ec:	af02      	add	r7, sp, #8
 800c3ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c3f6:	f7f9 f9d9 	bl	80057ac <HAL_GetTick>
 800c3fa:	0003      	movs	r3, r0
 800c3fc:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	2208      	movs	r2, #8
 800c406:	4013      	ands	r3, r2
 800c408:	2b08      	cmp	r3, #8
 800c40a:	d10e      	bne.n	800c42a <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800c40c:	68fa      	ldr	r2, [r7, #12]
 800c40e:	2380      	movs	r3, #128	; 0x80
 800c410:	0399      	lsls	r1, r3, #14
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	23fa      	movs	r3, #250	; 0xfa
 800c416:	009b      	lsls	r3, r3, #2
 800c418:	9300      	str	r3, [sp, #0]
 800c41a:	0013      	movs	r3, r2
 800c41c:	2200      	movs	r2, #0
 800c41e:	f7ff fd12 	bl	800be46 <USART_WaitOnFlagUntilTimeout>
 800c422:	1e03      	subs	r3, r0, #0
 800c424:	d001      	beq.n	800c42a <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c426:	2303      	movs	r3, #3
 800c428:	e01e      	b.n	800c468 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2204      	movs	r2, #4
 800c432:	4013      	ands	r3, r2
 800c434:	2b04      	cmp	r3, #4
 800c436:	d10e      	bne.n	800c456 <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800c438:	68fa      	ldr	r2, [r7, #12]
 800c43a:	2380      	movs	r3, #128	; 0x80
 800c43c:	03d9      	lsls	r1, r3, #15
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	23fa      	movs	r3, #250	; 0xfa
 800c442:	009b      	lsls	r3, r3, #2
 800c444:	9300      	str	r3, [sp, #0]
 800c446:	0013      	movs	r3, r2
 800c448:	2200      	movs	r2, #0
 800c44a:	f7ff fcfc 	bl	800be46 <USART_WaitOnFlagUntilTimeout>
 800c44e:	1e03      	subs	r3, r0, #0
 800c450:	d001      	beq.n	800c456 <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c452:	2303      	movs	r3, #3
 800c454:	e008      	b.n	800c468 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2259      	movs	r2, #89	; 0x59
 800c45a:	2101      	movs	r1, #1
 800c45c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2258      	movs	r2, #88	; 0x58
 800c462:	2100      	movs	r1, #0
 800c464:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c466:	2300      	movs	r3, #0
}
 800c468:	0018      	movs	r0, r3
 800c46a:	46bd      	mov	sp, r7
 800c46c:	b004      	add	sp, #16
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b082      	sub	sp, #8
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	681a      	ldr	r2, [r3, #0]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2140      	movs	r1, #64	; 0x40
 800c484:	438a      	bics	r2, r1
 800c486:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	689a      	ldr	r2, [r3, #8]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	2101      	movs	r1, #1
 800c494:	438a      	bics	r2, r1
 800c496:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2200      	movs	r2, #0
 800c49c:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2259      	movs	r2, #89	; 0x59
 800c4a2:	5c9b      	ldrb	r3, [r3, r2]
 800c4a4:	b2db      	uxtb	r3, r3
 800c4a6:	2b12      	cmp	r3, #18
 800c4a8:	d114      	bne.n	800c4d4 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2208      	movs	r2, #8
 800c4b0:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	699a      	ldr	r2, [r3, #24]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	2108      	movs	r1, #8
 800c4be:	430a      	orrs	r2, r1
 800c4c0:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2259      	movs	r2, #89	; 0x59
 800c4c6:	2101      	movs	r1, #1
 800c4c8:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	0018      	movs	r0, r3
 800c4ce:	f7f6 fd3d 	bl	8002f4c <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c4d2:	e00c      	b.n	800c4ee <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c4d8:	b29b      	uxth	r3, r3
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d107      	bne.n	800c4ee <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2259      	movs	r2, #89	; 0x59
 800c4e2:	2101      	movs	r1, #1
 800c4e4:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	0018      	movs	r0, r3
 800c4ea:	f7ff fc67 	bl	800bdbc <HAL_USART_TxRxCpltCallback>
}
 800c4ee:	46c0      	nop			; (mov r8, r8)
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	b002      	add	sp, #8
 800c4f4:	bd80      	pop	{r7, pc}

0800c4f6 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 800c4f6:	b580      	push	{r7, lr}
 800c4f8:	b082      	sub	sp, #8
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c4fe:	46c0      	nop			; (mov r8, r8)
 800c500:	46bd      	mov	sp, r7
 800c502:	b002      	add	sp, #8
 800c504:	bd80      	pop	{r7, pc}

0800c506 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 800c506:	b580      	push	{r7, lr}
 800c508:	b082      	sub	sp, #8
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c50e:	46c0      	nop			; (mov r8, r8)
 800c510:	46bd      	mov	sp, r7
 800c512:	b002      	add	sp, #8
 800c514:	bd80      	pop	{r7, pc}

0800c516 <LL_GPIO_SetPinMode>:
{
 800c516:	b580      	push	{r7, lr}
 800c518:	b084      	sub	sp, #16
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	60f8      	str	r0, [r7, #12]
 800c51e:	60b9      	str	r1, [r7, #8]
 800c520:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	6819      	ldr	r1, [r3, #0]
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	435b      	muls	r3, r3
 800c52a:	001a      	movs	r2, r3
 800c52c:	0013      	movs	r3, r2
 800c52e:	005b      	lsls	r3, r3, #1
 800c530:	189b      	adds	r3, r3, r2
 800c532:	43db      	mvns	r3, r3
 800c534:	400b      	ands	r3, r1
 800c536:	001a      	movs	r2, r3
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	435b      	muls	r3, r3
 800c53c:	6879      	ldr	r1, [r7, #4]
 800c53e:	434b      	muls	r3, r1
 800c540:	431a      	orrs	r2, r3
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	601a      	str	r2, [r3, #0]
}
 800c546:	46c0      	nop			; (mov r8, r8)
 800c548:	46bd      	mov	sp, r7
 800c54a:	b004      	add	sp, #16
 800c54c:	bd80      	pop	{r7, pc}

0800c54e <LL_GPIO_SetPinOutputType>:
{
 800c54e:	b580      	push	{r7, lr}
 800c550:	b084      	sub	sp, #16
 800c552:	af00      	add	r7, sp, #0
 800c554:	60f8      	str	r0, [r7, #12]
 800c556:	60b9      	str	r1, [r7, #8]
 800c558:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	68ba      	ldr	r2, [r7, #8]
 800c560:	43d2      	mvns	r2, r2
 800c562:	401a      	ands	r2, r3
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	6879      	ldr	r1, [r7, #4]
 800c568:	434b      	muls	r3, r1
 800c56a:	431a      	orrs	r2, r3
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	605a      	str	r2, [r3, #4]
}
 800c570:	46c0      	nop			; (mov r8, r8)
 800c572:	46bd      	mov	sp, r7
 800c574:	b004      	add	sp, #16
 800c576:	bd80      	pop	{r7, pc}

0800c578 <LL_GPIO_SetPinSpeed>:
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b084      	sub	sp, #16
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	6899      	ldr	r1, [r3, #8]
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	435b      	muls	r3, r3
 800c58c:	001a      	movs	r2, r3
 800c58e:	0013      	movs	r3, r2
 800c590:	005b      	lsls	r3, r3, #1
 800c592:	189b      	adds	r3, r3, r2
 800c594:	43db      	mvns	r3, r3
 800c596:	400b      	ands	r3, r1
 800c598:	001a      	movs	r2, r3
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	435b      	muls	r3, r3
 800c59e:	6879      	ldr	r1, [r7, #4]
 800c5a0:	434b      	muls	r3, r1
 800c5a2:	431a      	orrs	r2, r3
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	609a      	str	r2, [r3, #8]
}
 800c5a8:	46c0      	nop			; (mov r8, r8)
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	b004      	add	sp, #16
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <LL_GPIO_SetPinPull>:
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	60f8      	str	r0, [r7, #12]
 800c5b8:	60b9      	str	r1, [r7, #8]
 800c5ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	68d9      	ldr	r1, [r3, #12]
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	435b      	muls	r3, r3
 800c5c4:	001a      	movs	r2, r3
 800c5c6:	0013      	movs	r3, r2
 800c5c8:	005b      	lsls	r3, r3, #1
 800c5ca:	189b      	adds	r3, r3, r2
 800c5cc:	43db      	mvns	r3, r3
 800c5ce:	400b      	ands	r3, r1
 800c5d0:	001a      	movs	r2, r3
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	435b      	muls	r3, r3
 800c5d6:	6879      	ldr	r1, [r7, #4]
 800c5d8:	434b      	muls	r3, r1
 800c5da:	431a      	orrs	r2, r3
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	60da      	str	r2, [r3, #12]
}
 800c5e0:	46c0      	nop			; (mov r8, r8)
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	b004      	add	sp, #16
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <LL_GPIO_SetAFPin_0_7>:
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	60f8      	str	r0, [r7, #12]
 800c5f0:	60b9      	str	r1, [r7, #8]
 800c5f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	6a19      	ldr	r1, [r3, #32]
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	435b      	muls	r3, r3
 800c5fc:	68ba      	ldr	r2, [r7, #8]
 800c5fe:	4353      	muls	r3, r2
 800c600:	68ba      	ldr	r2, [r7, #8]
 800c602:	435a      	muls	r2, r3
 800c604:	0013      	movs	r3, r2
 800c606:	011b      	lsls	r3, r3, #4
 800c608:	1a9b      	subs	r3, r3, r2
 800c60a:	43db      	mvns	r3, r3
 800c60c:	400b      	ands	r3, r1
 800c60e:	001a      	movs	r2, r3
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	435b      	muls	r3, r3
 800c614:	68b9      	ldr	r1, [r7, #8]
 800c616:	434b      	muls	r3, r1
 800c618:	68b9      	ldr	r1, [r7, #8]
 800c61a:	434b      	muls	r3, r1
 800c61c:	6879      	ldr	r1, [r7, #4]
 800c61e:	434b      	muls	r3, r1
 800c620:	431a      	orrs	r2, r3
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	621a      	str	r2, [r3, #32]
}
 800c626:	46c0      	nop			; (mov r8, r8)
 800c628:	46bd      	mov	sp, r7
 800c62a:	b004      	add	sp, #16
 800c62c:	bd80      	pop	{r7, pc}

0800c62e <LL_GPIO_SetAFPin_8_15>:
{
 800c62e:	b580      	push	{r7, lr}
 800c630:	b084      	sub	sp, #16
 800c632:	af00      	add	r7, sp, #0
 800c634:	60f8      	str	r0, [r7, #12]
 800c636:	60b9      	str	r1, [r7, #8]
 800c638:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	0a1b      	lsrs	r3, r3, #8
 800c642:	68ba      	ldr	r2, [r7, #8]
 800c644:	0a12      	lsrs	r2, r2, #8
 800c646:	4353      	muls	r3, r2
 800c648:	68ba      	ldr	r2, [r7, #8]
 800c64a:	0a12      	lsrs	r2, r2, #8
 800c64c:	4353      	muls	r3, r2
 800c64e:	68ba      	ldr	r2, [r7, #8]
 800c650:	0a12      	lsrs	r2, r2, #8
 800c652:	435a      	muls	r2, r3
 800c654:	0013      	movs	r3, r2
 800c656:	011b      	lsls	r3, r3, #4
 800c658:	1a9b      	subs	r3, r3, r2
 800c65a:	43db      	mvns	r3, r3
 800c65c:	400b      	ands	r3, r1
 800c65e:	001a      	movs	r2, r3
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	0a1b      	lsrs	r3, r3, #8
 800c664:	68b9      	ldr	r1, [r7, #8]
 800c666:	0a09      	lsrs	r1, r1, #8
 800c668:	434b      	muls	r3, r1
 800c66a:	68b9      	ldr	r1, [r7, #8]
 800c66c:	0a09      	lsrs	r1, r1, #8
 800c66e:	434b      	muls	r3, r1
 800c670:	68b9      	ldr	r1, [r7, #8]
 800c672:	0a09      	lsrs	r1, r1, #8
 800c674:	434b      	muls	r3, r1
 800c676:	6879      	ldr	r1, [r7, #4]
 800c678:	434b      	muls	r3, r1
 800c67a:	431a      	orrs	r2, r3
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c680:	46c0      	nop			; (mov r8, r8)
 800c682:	46bd      	mov	sp, r7
 800c684:	b004      	add	sp, #16
 800c686:	bd80      	pop	{r7, pc}

0800c688 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b084      	sub	sp, #16
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800c692:	2300      	movs	r3, #0
 800c694:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800c696:	e047      	b.n	800c728 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	2101      	movs	r1, #1
 800c69e:	68fa      	ldr	r2, [r7, #12]
 800c6a0:	4091      	lsls	r1, r2
 800c6a2:	000a      	movs	r2, r1
 800c6a4:	4013      	ands	r3, r2
 800c6a6:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d039      	beq.n	800c722 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	2b01      	cmp	r3, #1
 800c6b4:	d003      	beq.n	800c6be <LL_GPIO_Init+0x36>
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	685b      	ldr	r3, [r3, #4]
 800c6ba:	2b02      	cmp	r3, #2
 800c6bc:	d10d      	bne.n	800c6da <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	689a      	ldr	r2, [r3, #8]
 800c6c2:	68b9      	ldr	r1, [r7, #8]
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	0018      	movs	r0, r3
 800c6c8:	f7ff ff56 	bl	800c578 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	68da      	ldr	r2, [r3, #12]
 800c6d0:	68b9      	ldr	r1, [r7, #8]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	0018      	movs	r0, r3
 800c6d6:	f7ff ff3a 	bl	800c54e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	691a      	ldr	r2, [r3, #16]
 800c6de:	68b9      	ldr	r1, [r7, #8]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	0018      	movs	r0, r3
 800c6e4:	f7ff ff64 	bl	800c5b0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	685b      	ldr	r3, [r3, #4]
 800c6ec:	2b02      	cmp	r3, #2
 800c6ee:	d111      	bne.n	800c714 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	2bff      	cmp	r3, #255	; 0xff
 800c6f4:	d807      	bhi.n	800c706 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	695a      	ldr	r2, [r3, #20]
 800c6fa:	68b9      	ldr	r1, [r7, #8]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	0018      	movs	r0, r3
 800c700:	f7ff ff72 	bl	800c5e8 <LL_GPIO_SetAFPin_0_7>
 800c704:	e006      	b.n	800c714 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	695a      	ldr	r2, [r3, #20]
 800c70a:	68b9      	ldr	r1, [r7, #8]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	0018      	movs	r0, r3
 800c710:	f7ff ff8d 	bl	800c62e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	685a      	ldr	r2, [r3, #4]
 800c718:	68b9      	ldr	r1, [r7, #8]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	0018      	movs	r0, r3
 800c71e:	f7ff fefa 	bl	800c516 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	3301      	adds	r3, #1
 800c726:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	681a      	ldr	r2, [r3, #0]
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	40da      	lsrs	r2, r3
 800c730:	1e13      	subs	r3, r2, #0
 800c732:	d1b1      	bne.n	800c698 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800c734:	2300      	movs	r3, #0
}
 800c736:	0018      	movs	r0, r3
 800c738:	46bd      	mov	sp, r7
 800c73a:	b004      	add	sp, #16
 800c73c:	bd80      	pop	{r7, pc}
	...

0800c740 <LL_RCC_HSI_IsReady>:
{
 800c740:	b580      	push	{r7, lr}
 800c742:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800c744:	4b07      	ldr	r3, [pc, #28]	; (800c764 <LL_RCC_HSI_IsReady+0x24>)
 800c746:	681a      	ldr	r2, [r3, #0]
 800c748:	2380      	movs	r3, #128	; 0x80
 800c74a:	00db      	lsls	r3, r3, #3
 800c74c:	401a      	ands	r2, r3
 800c74e:	2380      	movs	r3, #128	; 0x80
 800c750:	00db      	lsls	r3, r3, #3
 800c752:	429a      	cmp	r2, r3
 800c754:	d101      	bne.n	800c75a <LL_RCC_HSI_IsReady+0x1a>
 800c756:	2301      	movs	r3, #1
 800c758:	e000      	b.n	800c75c <LL_RCC_HSI_IsReady+0x1c>
 800c75a:	2300      	movs	r3, #0
}
 800c75c:	0018      	movs	r0, r3
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
 800c762:	46c0      	nop			; (mov r8, r8)
 800c764:	40021000 	.word	0x40021000

0800c768 <LL_RCC_LSE_IsReady>:
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c76c:	4b05      	ldr	r3, [pc, #20]	; (800c784 <LL_RCC_LSE_IsReady+0x1c>)
 800c76e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c770:	2202      	movs	r2, #2
 800c772:	4013      	ands	r3, r2
 800c774:	2b02      	cmp	r3, #2
 800c776:	d101      	bne.n	800c77c <LL_RCC_LSE_IsReady+0x14>
 800c778:	2301      	movs	r3, #1
 800c77a:	e000      	b.n	800c77e <LL_RCC_LSE_IsReady+0x16>
 800c77c:	2300      	movs	r3, #0
}
 800c77e:	0018      	movs	r0, r3
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}
 800c784:	40021000 	.word	0x40021000

0800c788 <LL_RCC_GetSysClkSource>:
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c78c:	4b03      	ldr	r3, [pc, #12]	; (800c79c <LL_RCC_GetSysClkSource+0x14>)
 800c78e:	689b      	ldr	r3, [r3, #8]
 800c790:	2238      	movs	r2, #56	; 0x38
 800c792:	4013      	ands	r3, r2
}
 800c794:	0018      	movs	r0, r3
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}
 800c79a:	46c0      	nop			; (mov r8, r8)
 800c79c:	40021000 	.word	0x40021000

0800c7a0 <LL_RCC_GetAHBPrescaler>:
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c7a4:	4b03      	ldr	r3, [pc, #12]	; (800c7b4 <LL_RCC_GetAHBPrescaler+0x14>)
 800c7a6:	689a      	ldr	r2, [r3, #8]
 800c7a8:	23f0      	movs	r3, #240	; 0xf0
 800c7aa:	011b      	lsls	r3, r3, #4
 800c7ac:	4013      	ands	r3, r2
}
 800c7ae:	0018      	movs	r0, r3
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}
 800c7b4:	40021000 	.word	0x40021000

0800c7b8 <LL_RCC_GetAPB1Prescaler>:
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800c7bc:	4b03      	ldr	r3, [pc, #12]	; (800c7cc <LL_RCC_GetAPB1Prescaler+0x14>)
 800c7be:	689a      	ldr	r2, [r3, #8]
 800c7c0:	23e0      	movs	r3, #224	; 0xe0
 800c7c2:	01db      	lsls	r3, r3, #7
 800c7c4:	4013      	ands	r3, r2
}
 800c7c6:	0018      	movs	r0, r3
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	40021000 	.word	0x40021000

0800c7d0 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800c7d8:	4b05      	ldr	r3, [pc, #20]	; (800c7f0 <LL_RCC_GetUSARTClockSource+0x20>)
 800c7da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	401a      	ands	r2, r3
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	041b      	lsls	r3, r3, #16
 800c7e4:	4313      	orrs	r3, r2
}
 800c7e6:	0018      	movs	r0, r3
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	b002      	add	sp, #8
 800c7ec:	bd80      	pop	{r7, pc}
 800c7ee:	46c0      	nop			; (mov r8, r8)
 800c7f0:	40021000 	.word	0x40021000

0800c7f4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800c7f8:	4b03      	ldr	r3, [pc, #12]	; (800c808 <LL_RCC_PLL_GetN+0x14>)
 800c7fa:	68db      	ldr	r3, [r3, #12]
 800c7fc:	0a1b      	lsrs	r3, r3, #8
 800c7fe:	227f      	movs	r2, #127	; 0x7f
 800c800:	4013      	ands	r3, r2
}
 800c802:	0018      	movs	r0, r3
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}
 800c808:	40021000 	.word	0x40021000

0800c80c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800c810:	4b03      	ldr	r3, [pc, #12]	; (800c820 <LL_RCC_PLL_GetR+0x14>)
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	0f5b      	lsrs	r3, r3, #29
 800c816:	075b      	lsls	r3, r3, #29
}
 800c818:	0018      	movs	r0, r3
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}
 800c81e:	46c0      	nop			; (mov r8, r8)
 800c820:	40021000 	.word	0x40021000

0800c824 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c828:	4b03      	ldr	r3, [pc, #12]	; (800c838 <LL_RCC_PLL_GetMainSource+0x14>)
 800c82a:	68db      	ldr	r3, [r3, #12]
 800c82c:	2203      	movs	r2, #3
 800c82e:	4013      	ands	r3, r2
}
 800c830:	0018      	movs	r0, r3
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	46c0      	nop			; (mov r8, r8)
 800c838:	40021000 	.word	0x40021000

0800c83c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800c840:	4b03      	ldr	r3, [pc, #12]	; (800c850 <LL_RCC_PLL_GetDivider+0x14>)
 800c842:	68db      	ldr	r3, [r3, #12]
 800c844:	2270      	movs	r2, #112	; 0x70
 800c846:	4013      	ands	r3, r2
}
 800c848:	0018      	movs	r0, r3
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	46c0      	nop			; (mov r8, r8)
 800c850:	40021000 	.word	0x40021000

0800c854 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800c85c:	f000 f8a8 	bl	800c9b0 <RCC_GetSystemClockFreq>
 800c860:	0002      	movs	r2, r0
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	0018      	movs	r0, r3
 800c86c:	f000 f8ce 	bl	800ca0c <RCC_GetHCLKClockFreq>
 800c870:	0002      	movs	r2, r0
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	685b      	ldr	r3, [r3, #4]
 800c87a:	0018      	movs	r0, r3
 800c87c:	f000 f8de 	bl	800ca3c <RCC_GetPCLK1ClockFreq>
 800c880:	0002      	movs	r2, r0
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	609a      	str	r2, [r3, #8]
}
 800c886:	46c0      	nop			; (mov r8, r8)
 800c888:	46bd      	mov	sp, r7
 800c88a:	b002      	add	sp, #8
 800c88c:	bd80      	pop	{r7, pc}
	...

0800c890 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b084      	sub	sp, #16
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800c898:	2300      	movs	r3, #0
 800c89a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2b03      	cmp	r3, #3
 800c8a0:	d134      	bne.n	800c90c <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	0018      	movs	r0, r3
 800c8a6:	f7ff ff93 	bl	800c7d0 <LL_RCC_GetUSARTClockSource>
 800c8aa:	0003      	movs	r3, r0
 800c8ac:	4a39      	ldr	r2, [pc, #228]	; (800c994 <LL_RCC_GetUSARTClockFreq+0x104>)
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d016      	beq.n	800c8e0 <LL_RCC_GetUSARTClockFreq+0x50>
 800c8b2:	4a38      	ldr	r2, [pc, #224]	; (800c994 <LL_RCC_GetUSARTClockFreq+0x104>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d81c      	bhi.n	800c8f2 <LL_RCC_GetUSARTClockFreq+0x62>
 800c8b8:	4a37      	ldr	r2, [pc, #220]	; (800c998 <LL_RCC_GetUSARTClockFreq+0x108>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d003      	beq.n	800c8c6 <LL_RCC_GetUSARTClockFreq+0x36>
 800c8be:	4a37      	ldr	r2, [pc, #220]	; (800c99c <LL_RCC_GetUSARTClockFreq+0x10c>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d005      	beq.n	800c8d0 <LL_RCC_GetUSARTClockFreq+0x40>
 800c8c4:	e015      	b.n	800c8f2 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800c8c6:	f000 f873 	bl	800c9b0 <RCC_GetSystemClockFreq>
 800c8ca:	0003      	movs	r3, r0
 800c8cc:	60fb      	str	r3, [r7, #12]
        break;
 800c8ce:	e05c      	b.n	800c98a <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800c8d0:	f7ff ff36 	bl	800c740 <LL_RCC_HSI_IsReady>
 800c8d4:	0003      	movs	r3, r0
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d150      	bne.n	800c97c <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 800c8da:	4b31      	ldr	r3, [pc, #196]	; (800c9a0 <LL_RCC_GetUSARTClockFreq+0x110>)
 800c8dc:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c8de:	e04d      	b.n	800c97c <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800c8e0:	f7ff ff42 	bl	800c768 <LL_RCC_LSE_IsReady>
 800c8e4:	0003      	movs	r3, r0
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	d14a      	bne.n	800c980 <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 800c8ea:	2380      	movs	r3, #128	; 0x80
 800c8ec:	021b      	lsls	r3, r3, #8
 800c8ee:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c8f0:	e046      	b.n	800c980 <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800c8f2:	f000 f85d 	bl	800c9b0 <RCC_GetSystemClockFreq>
 800c8f6:	0003      	movs	r3, r0
 800c8f8:	0018      	movs	r0, r3
 800c8fa:	f000 f887 	bl	800ca0c <RCC_GetHCLKClockFreq>
 800c8fe:	0003      	movs	r3, r0
 800c900:	0018      	movs	r0, r3
 800c902:	f000 f89b 	bl	800ca3c <RCC_GetPCLK1ClockFreq>
 800c906:	0003      	movs	r3, r0
 800c908:	60fb      	str	r3, [r7, #12]
        break;
 800c90a:	e03e      	b.n	800c98a <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2b0c      	cmp	r3, #12
 800c910:	d13b      	bne.n	800c98a <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	0018      	movs	r0, r3
 800c916:	f7ff ff5b 	bl	800c7d0 <LL_RCC_GetUSARTClockSource>
 800c91a:	0003      	movs	r3, r0
 800c91c:	4a21      	ldr	r2, [pc, #132]	; (800c9a4 <LL_RCC_GetUSARTClockFreq+0x114>)
 800c91e:	4293      	cmp	r3, r2
 800c920:	d016      	beq.n	800c950 <LL_RCC_GetUSARTClockFreq+0xc0>
 800c922:	4a20      	ldr	r2, [pc, #128]	; (800c9a4 <LL_RCC_GetUSARTClockFreq+0x114>)
 800c924:	4293      	cmp	r3, r2
 800c926:	d81c      	bhi.n	800c962 <LL_RCC_GetUSARTClockFreq+0xd2>
 800c928:	4a1f      	ldr	r2, [pc, #124]	; (800c9a8 <LL_RCC_GetUSARTClockFreq+0x118>)
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d003      	beq.n	800c936 <LL_RCC_GetUSARTClockFreq+0xa6>
 800c92e:	4a1f      	ldr	r2, [pc, #124]	; (800c9ac <LL_RCC_GetUSARTClockFreq+0x11c>)
 800c930:	4293      	cmp	r3, r2
 800c932:	d005      	beq.n	800c940 <LL_RCC_GetUSARTClockFreq+0xb0>
 800c934:	e015      	b.n	800c962 <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800c936:	f000 f83b 	bl	800c9b0 <RCC_GetSystemClockFreq>
 800c93a:	0003      	movs	r3, r0
 800c93c:	60fb      	str	r3, [r7, #12]
        break;
 800c93e:	e024      	b.n	800c98a <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800c940:	f7ff fefe 	bl	800c740 <LL_RCC_HSI_IsReady>
 800c944:	0003      	movs	r3, r0
 800c946:	2b01      	cmp	r3, #1
 800c948:	d11c      	bne.n	800c984 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800c94a:	4b15      	ldr	r3, [pc, #84]	; (800c9a0 <LL_RCC_GetUSARTClockFreq+0x110>)
 800c94c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c94e:	e019      	b.n	800c984 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800c950:	f7ff ff0a 	bl	800c768 <LL_RCC_LSE_IsReady>
 800c954:	0003      	movs	r3, r0
 800c956:	2b01      	cmp	r3, #1
 800c958:	d116      	bne.n	800c988 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800c95a:	2380      	movs	r3, #128	; 0x80
 800c95c:	021b      	lsls	r3, r3, #8
 800c95e:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c960:	e012      	b.n	800c988 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800c962:	f000 f825 	bl	800c9b0 <RCC_GetSystemClockFreq>
 800c966:	0003      	movs	r3, r0
 800c968:	0018      	movs	r0, r3
 800c96a:	f000 f84f 	bl	800ca0c <RCC_GetHCLKClockFreq>
 800c96e:	0003      	movs	r3, r0
 800c970:	0018      	movs	r0, r3
 800c972:	f000 f863 	bl	800ca3c <RCC_GetPCLK1ClockFreq>
 800c976:	0003      	movs	r3, r0
 800c978:	60fb      	str	r3, [r7, #12]
        break;
 800c97a:	e006      	b.n	800c98a <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c97c:	46c0      	nop			; (mov r8, r8)
 800c97e:	e004      	b.n	800c98a <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c980:	46c0      	nop			; (mov r8, r8)
 800c982:	e002      	b.n	800c98a <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c984:	46c0      	nop			; (mov r8, r8)
 800c986:	e000      	b.n	800c98a <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c988:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800c98a:	68fb      	ldr	r3, [r7, #12]
}
 800c98c:	0018      	movs	r0, r3
 800c98e:	46bd      	mov	sp, r7
 800c990:	b004      	add	sp, #16
 800c992:	bd80      	pop	{r7, pc}
 800c994:	00030003 	.word	0x00030003
 800c998:	00030001 	.word	0x00030001
 800c99c:	00030002 	.word	0x00030002
 800c9a0:	00f42400 	.word	0x00f42400
 800c9a4:	000c000c 	.word	0x000c000c
 800c9a8:	000c0004 	.word	0x000c0004
 800c9ac:	000c0008 	.word	0x000c0008

0800c9b0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b082      	sub	sp, #8
 800c9b4:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800c9b6:	f7ff fee7 	bl	800c788 <LL_RCC_GetSysClkSource>
 800c9ba:	0003      	movs	r3, r0
 800c9bc:	2b08      	cmp	r3, #8
 800c9be:	d002      	beq.n	800c9c6 <RCC_GetSystemClockFreq+0x16>
 800c9c0:	2b10      	cmp	r3, #16
 800c9c2:	d003      	beq.n	800c9cc <RCC_GetSystemClockFreq+0x1c>
 800c9c4:	e007      	b.n	800c9d6 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800c9c6:	4b0e      	ldr	r3, [pc, #56]	; (800ca00 <RCC_GetSystemClockFreq+0x50>)
 800c9c8:	607b      	str	r3, [r7, #4]
      break;
 800c9ca:	e014      	b.n	800c9f6 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800c9cc:	f000 f84c 	bl	800ca68 <RCC_PLL_GetFreqDomain_SYS>
 800c9d0:	0003      	movs	r3, r0
 800c9d2:	607b      	str	r3, [r7, #4]
      break;
 800c9d4:	e00f      	b.n	800c9f6 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800c9d6:	4b0b      	ldr	r3, [pc, #44]	; (800ca04 <RCC_GetSystemClockFreq+0x54>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	0adb      	lsrs	r3, r3, #11
 800c9dc:	2207      	movs	r2, #7
 800c9de:	4013      	ands	r3, r2
 800c9e0:	2201      	movs	r2, #1
 800c9e2:	409a      	lsls	r2, r3
 800c9e4:	0013      	movs	r3, r2
 800c9e6:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800c9e8:	6839      	ldr	r1, [r7, #0]
 800c9ea:	4807      	ldr	r0, [pc, #28]	; (800ca08 <RCC_GetSystemClockFreq+0x58>)
 800c9ec:	f7f3 fb8a 	bl	8000104 <__udivsi3>
 800c9f0:	0003      	movs	r3, r0
 800c9f2:	607b      	str	r3, [r7, #4]
      break;
 800c9f4:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800c9f6:	687b      	ldr	r3, [r7, #4]
}
 800c9f8:	0018      	movs	r0, r3
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	b002      	add	sp, #8
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	007a1200 	.word	0x007a1200
 800ca04:	40021000 	.word	0x40021000
 800ca08:	00f42400 	.word	0x00f42400

0800ca0c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b082      	sub	sp, #8
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800ca14:	f7ff fec4 	bl	800c7a0 <LL_RCC_GetAHBPrescaler>
 800ca18:	0003      	movs	r3, r0
 800ca1a:	0a1b      	lsrs	r3, r3, #8
 800ca1c:	220f      	movs	r2, #15
 800ca1e:	401a      	ands	r2, r3
 800ca20:	4b05      	ldr	r3, [pc, #20]	; (800ca38 <RCC_GetHCLKClockFreq+0x2c>)
 800ca22:	0092      	lsls	r2, r2, #2
 800ca24:	58d3      	ldr	r3, [r2, r3]
 800ca26:	221f      	movs	r2, #31
 800ca28:	4013      	ands	r3, r2
 800ca2a:	687a      	ldr	r2, [r7, #4]
 800ca2c:	40da      	lsrs	r2, r3
 800ca2e:	0013      	movs	r3, r2
}
 800ca30:	0018      	movs	r0, r3
 800ca32:	46bd      	mov	sp, r7
 800ca34:	b002      	add	sp, #8
 800ca36:	bd80      	pop	{r7, pc}
 800ca38:	0801675c 	.word	0x0801675c

0800ca3c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b082      	sub	sp, #8
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800ca44:	f7ff feb8 	bl	800c7b8 <LL_RCC_GetAPB1Prescaler>
 800ca48:	0003      	movs	r3, r0
 800ca4a:	0b1a      	lsrs	r2, r3, #12
 800ca4c:	4b05      	ldr	r3, [pc, #20]	; (800ca64 <RCC_GetPCLK1ClockFreq+0x28>)
 800ca4e:	0092      	lsls	r2, r2, #2
 800ca50:	58d3      	ldr	r3, [r2, r3]
 800ca52:	221f      	movs	r2, #31
 800ca54:	4013      	ands	r3, r2
 800ca56:	687a      	ldr	r2, [r7, #4]
 800ca58:	40da      	lsrs	r2, r3
 800ca5a:	0013      	movs	r3, r2
}
 800ca5c:	0018      	movs	r0, r3
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	b002      	add	sp, #8
 800ca62:	bd80      	pop	{r7, pc}
 800ca64:	0801679c 	.word	0x0801679c

0800ca68 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800ca68:	b590      	push	{r4, r7, lr}
 800ca6a:	b083      	sub	sp, #12
 800ca6c:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800ca6e:	f7ff fed9 	bl	800c824 <LL_RCC_PLL_GetMainSource>
 800ca72:	0003      	movs	r3, r0
 800ca74:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	2b02      	cmp	r3, #2
 800ca7a:	d003      	beq.n	800ca84 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	2b03      	cmp	r3, #3
 800ca80:	d003      	beq.n	800ca8a <RCC_PLL_GetFreqDomain_SYS+0x22>
 800ca82:	e005      	b.n	800ca90 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800ca84:	4b13      	ldr	r3, [pc, #76]	; (800cad4 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800ca86:	607b      	str	r3, [r7, #4]
      break;
 800ca88:	e005      	b.n	800ca96 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800ca8a:	4b13      	ldr	r3, [pc, #76]	; (800cad8 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800ca8c:	607b      	str	r3, [r7, #4]
      break;
 800ca8e:	e002      	b.n	800ca96 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800ca90:	4b10      	ldr	r3, [pc, #64]	; (800cad4 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800ca92:	607b      	str	r3, [r7, #4]
      break;
 800ca94:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800ca96:	f7ff fead 	bl	800c7f4 <LL_RCC_PLL_GetN>
 800ca9a:	0002      	movs	r2, r0
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	4353      	muls	r3, r2
 800caa0:	001c      	movs	r4, r3
 800caa2:	f7ff fecb 	bl	800c83c <LL_RCC_PLL_GetDivider>
 800caa6:	0003      	movs	r3, r0
 800caa8:	091b      	lsrs	r3, r3, #4
 800caaa:	3301      	adds	r3, #1
 800caac:	0019      	movs	r1, r3
 800caae:	0020      	movs	r0, r4
 800cab0:	f7f3 fb28 	bl	8000104 <__udivsi3>
 800cab4:	0003      	movs	r3, r0
 800cab6:	001c      	movs	r4, r3
 800cab8:	f7ff fea8 	bl	800c80c <LL_RCC_PLL_GetR>
 800cabc:	0003      	movs	r3, r0
 800cabe:	0f5b      	lsrs	r3, r3, #29
 800cac0:	3301      	adds	r3, #1
 800cac2:	0019      	movs	r1, r3
 800cac4:	0020      	movs	r0, r4
 800cac6:	f7f3 fb1d 	bl	8000104 <__udivsi3>
 800caca:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800cacc:	0018      	movs	r0, r3
 800cace:	46bd      	mov	sp, r7
 800cad0:	b003      	add	sp, #12
 800cad2:	bd90      	pop	{r4, r7, pc}
 800cad4:	00f42400 	.word	0x00f42400
 800cad8:	007a1200 	.word	0x007a1200

0800cadc <LL_USART_IsEnabled>:
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b082      	sub	sp, #8
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	2201      	movs	r2, #1
 800caea:	4013      	ands	r3, r2
 800caec:	2b01      	cmp	r3, #1
 800caee:	d101      	bne.n	800caf4 <LL_USART_IsEnabled+0x18>
 800caf0:	2301      	movs	r3, #1
 800caf2:	e000      	b.n	800caf6 <LL_USART_IsEnabled+0x1a>
 800caf4:	2300      	movs	r3, #0
}
 800caf6:	0018      	movs	r0, r3
 800caf8:	46bd      	mov	sp, r7
 800cafa:	b002      	add	sp, #8
 800cafc:	bd80      	pop	{r7, pc}

0800cafe <LL_USART_SetPrescaler>:
{
 800cafe:	b580      	push	{r7, lr}
 800cb00:	b082      	sub	sp, #8
 800cb02:	af00      	add	r7, sp, #0
 800cb04:	6078      	str	r0, [r7, #4]
 800cb06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb0c:	220f      	movs	r2, #15
 800cb0e:	4393      	bics	r3, r2
 800cb10:	683a      	ldr	r2, [r7, #0]
 800cb12:	b292      	uxth	r2, r2
 800cb14:	431a      	orrs	r2, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800cb1a:	46c0      	nop			; (mov r8, r8)
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	b002      	add	sp, #8
 800cb20:	bd80      	pop	{r7, pc}
	...

0800cb24 <LL_USART_SetStopBitsLength>:
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b082      	sub	sp, #8
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	685b      	ldr	r3, [r3, #4]
 800cb32:	4a05      	ldr	r2, [pc, #20]	; (800cb48 <LL_USART_SetStopBitsLength+0x24>)
 800cb34:	401a      	ands	r2, r3
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	431a      	orrs	r2, r3
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	605a      	str	r2, [r3, #4]
}
 800cb3e:	46c0      	nop			; (mov r8, r8)
 800cb40:	46bd      	mov	sp, r7
 800cb42:	b002      	add	sp, #8
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	46c0      	nop			; (mov r8, r8)
 800cb48:	ffffcfff 	.word	0xffffcfff

0800cb4c <LL_USART_SetHWFlowCtrl>:
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b082      	sub	sp, #8
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	689b      	ldr	r3, [r3, #8]
 800cb5a:	4a05      	ldr	r2, [pc, #20]	; (800cb70 <LL_USART_SetHWFlowCtrl+0x24>)
 800cb5c:	401a      	ands	r2, r3
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	431a      	orrs	r2, r3
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	609a      	str	r2, [r3, #8]
}
 800cb66:	46c0      	nop			; (mov r8, r8)
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	b002      	add	sp, #8
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	46c0      	nop			; (mov r8, r8)
 800cb70:	fffffcff 	.word	0xfffffcff

0800cb74 <LL_USART_SetBaudRate>:
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b086      	sub	sp, #24
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	60b9      	str	r1, [r7, #8]
 800cb7e:	607a      	str	r2, [r7, #4]
 800cb80:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2b0b      	cmp	r3, #11
 800cb86:	d843      	bhi.n	800cc10 <LL_USART_SetBaudRate+0x9c>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800cb88:	683a      	ldr	r2, [r7, #0]
 800cb8a:	2380      	movs	r3, #128	; 0x80
 800cb8c:	021b      	lsls	r3, r3, #8
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d126      	bne.n	800cbe0 <LL_USART_SetBaudRate+0x6c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	b2db      	uxtb	r3, r3
 800cb96:	001a      	movs	r2, r3
 800cb98:	4b1f      	ldr	r3, [pc, #124]	; (800cc18 <LL_USART_SetBaudRate+0xa4>)
 800cb9a:	0092      	lsls	r2, r2, #2
 800cb9c:	58d3      	ldr	r3, [r2, r3]
 800cb9e:	0019      	movs	r1, r3
 800cba0:	68b8      	ldr	r0, [r7, #8]
 800cba2:	f7f3 faaf 	bl	8000104 <__udivsi3>
 800cba6:	0003      	movs	r3, r0
 800cba8:	005a      	lsls	r2, r3, #1
 800cbaa:	6a3b      	ldr	r3, [r7, #32]
 800cbac:	085b      	lsrs	r3, r3, #1
 800cbae:	18d3      	adds	r3, r2, r3
 800cbb0:	6a39      	ldr	r1, [r7, #32]
 800cbb2:	0018      	movs	r0, r3
 800cbb4:	f7f3 faa6 	bl	8000104 <__udivsi3>
 800cbb8:	0003      	movs	r3, r0
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	4a16      	ldr	r2, [pc, #88]	; (800cc1c <LL_USART_SetBaudRate+0xa8>)
 800cbc2:	4013      	ands	r3, r2
 800cbc4:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	085b      	lsrs	r3, r3, #1
 800cbca:	b29b      	uxth	r3, r3
 800cbcc:	001a      	movs	r2, r3
 800cbce:	2307      	movs	r3, #7
 800cbd0:	4013      	ands	r3, r2
 800cbd2:	693a      	ldr	r2, [r7, #16]
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	693a      	ldr	r2, [r7, #16]
 800cbdc:	60da      	str	r2, [r3, #12]
}
 800cbde:	e017      	b.n	800cc10 <LL_USART_SetBaudRate+0x9c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	b2db      	uxtb	r3, r3
 800cbe4:	001a      	movs	r2, r3
 800cbe6:	4b0c      	ldr	r3, [pc, #48]	; (800cc18 <LL_USART_SetBaudRate+0xa4>)
 800cbe8:	0092      	lsls	r2, r2, #2
 800cbea:	58d3      	ldr	r3, [r2, r3]
 800cbec:	0019      	movs	r1, r3
 800cbee:	68b8      	ldr	r0, [r7, #8]
 800cbf0:	f7f3 fa88 	bl	8000104 <__udivsi3>
 800cbf4:	0003      	movs	r3, r0
 800cbf6:	001a      	movs	r2, r3
 800cbf8:	6a3b      	ldr	r3, [r7, #32]
 800cbfa:	085b      	lsrs	r3, r3, #1
 800cbfc:	18d3      	adds	r3, r2, r3
 800cbfe:	6a39      	ldr	r1, [r7, #32]
 800cc00:	0018      	movs	r0, r3
 800cc02:	f7f3 fa7f 	bl	8000104 <__udivsi3>
 800cc06:	0003      	movs	r3, r0
 800cc08:	b29b      	uxth	r3, r3
 800cc0a:	001a      	movs	r2, r3
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	60da      	str	r2, [r3, #12]
}
 800cc10:	46c0      	nop			; (mov r8, r8)
 800cc12:	46bd      	mov	sp, r7
 800cc14:	b006      	add	sp, #24
 800cc16:	bd80      	pop	{r7, pc}
 800cc18:	08016810 	.word	0x08016810
 800cc1c:	0000fff0 	.word	0x0000fff0

0800cc20 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800cc20:	b590      	push	{r4, r7, lr}
 800cc22:	b08b      	sub	sp, #44	; 0x2c
 800cc24:	af02      	add	r7, sp, #8
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800cc2a:	231f      	movs	r3, #31
 800cc2c:	18fb      	adds	r3, r7, r3
 800cc2e:	2201      	movs	r2, #1
 800cc30:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800cc32:	2300      	movs	r3, #0
 800cc34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	0018      	movs	r0, r3
 800cc3a:	f7ff ff4f 	bl	800cadc <LL_USART_IsEnabled>
 800cc3e:	1e03      	subs	r3, r0, #0
 800cc40:	d16a      	bne.n	800cd18 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	4a38      	ldr	r2, [pc, #224]	; (800cd28 <LL_USART_Init+0x108>)
 800cc48:	401a      	ands	r2, r3
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	6899      	ldr	r1, [r3, #8]
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	691b      	ldr	r3, [r3, #16]
 800cc52:	4319      	orrs	r1, r3
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	695b      	ldr	r3, [r3, #20]
 800cc58:	4319      	orrs	r1, r3
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	69db      	ldr	r3, [r3, #28]
 800cc5e:	430b      	orrs	r3, r1
 800cc60:	431a      	orrs	r2, r3
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	68da      	ldr	r2, [r3, #12]
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	0011      	movs	r1, r2
 800cc6e:	0018      	movs	r0, r3
 800cc70:	f7ff ff58 	bl	800cb24 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	699a      	ldr	r2, [r3, #24]
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	0011      	movs	r1, r2
 800cc7c:	0018      	movs	r0, r3
 800cc7e:	f7ff ff65 	bl	800cb4c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	4a29      	ldr	r2, [pc, #164]	; (800cd2c <LL_USART_Init+0x10c>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d105      	bne.n	800cc96 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800cc8a:	2003      	movs	r0, #3
 800cc8c:	f7ff fe00 	bl	800c890 <LL_RCC_GetUSARTClockFreq>
 800cc90:	0003      	movs	r3, r0
 800cc92:	61bb      	str	r3, [r7, #24]
 800cc94:	e022      	b.n	800ccdc <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	4a25      	ldr	r2, [pc, #148]	; (800cd30 <LL_USART_Init+0x110>)
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	d105      	bne.n	800ccaa <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800cc9e:	200c      	movs	r0, #12
 800cca0:	f7ff fdf6 	bl	800c890 <LL_RCC_GetUSARTClockFreq>
 800cca4:	0003      	movs	r3, r0
 800cca6:	61bb      	str	r3, [r7, #24]
 800cca8:	e018      	b.n	800ccdc <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* RCC_CCIPR_USART2SEL */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	4a21      	ldr	r2, [pc, #132]	; (800cd34 <LL_USART_Init+0x114>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d108      	bne.n	800ccc4 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800ccb2:	240c      	movs	r4, #12
 800ccb4:	193b      	adds	r3, r7, r4
 800ccb6:	0018      	movs	r0, r3
 800ccb8:	f7ff fdcc 	bl	800c854 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800ccbc:	193b      	adds	r3, r7, r4
 800ccbe:	689b      	ldr	r3, [r3, #8]
 800ccc0:	61bb      	str	r3, [r7, #24]
 800ccc2:	e00b      	b.n	800ccdc <LL_USART_Init+0xbc>
#endif /* RCC_CCIPR_USART3SEL */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	4a1c      	ldr	r2, [pc, #112]	; (800cd38 <LL_USART_Init+0x118>)
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d107      	bne.n	800ccdc <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800cccc:	240c      	movs	r4, #12
 800ccce:	193b      	adds	r3, r7, r4
 800ccd0:	0018      	movs	r0, r3
 800ccd2:	f7ff fdbf 	bl	800c854 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800ccd6:	193b      	adds	r3, r7, r4
 800ccd8:	689b      	ldr	r3, [r3, #8]
 800ccda:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800ccdc:	69bb      	ldr	r3, [r7, #24]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d013      	beq.n	800cd0a <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	685b      	ldr	r3, [r3, #4]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d00f      	beq.n	800cd0a <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800ccea:	231f      	movs	r3, #31
 800ccec:	18fb      	adds	r3, r7, r3
 800ccee:	2200      	movs	r2, #0
 800ccf0:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	681a      	ldr	r2, [r3, #0]
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	69dc      	ldr	r4, [r3, #28]
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	69b9      	ldr	r1, [r7, #24]
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	9300      	str	r3, [sp, #0]
 800cd04:	0023      	movs	r3, r4
 800cd06:	f7ff ff35 	bl	800cb74 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	681a      	ldr	r2, [r3, #0]
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	0011      	movs	r1, r2
 800cd12:	0018      	movs	r0, r3
 800cd14:	f7ff fef3 	bl	800cafe <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800cd18:	231f      	movs	r3, #31
 800cd1a:	18fb      	adds	r3, r7, r3
 800cd1c:	781b      	ldrb	r3, [r3, #0]
}
 800cd1e:	0018      	movs	r0, r3
 800cd20:	46bd      	mov	sp, r7
 800cd22:	b009      	add	sp, #36	; 0x24
 800cd24:	bd90      	pop	{r4, r7, pc}
 800cd26:	46c0      	nop			; (mov r8, r8)
 800cd28:	efff69f3 	.word	0xefff69f3
 800cd2c:	40013800 	.word	0x40013800
 800cd30:	40004400 	.word	0x40004400
 800cd34:	40004800 	.word	0x40004800
 800cd38:	40004c00 	.word	0x40004c00

0800cd3c <__libc_init_array>:
 800cd3c:	b570      	push	{r4, r5, r6, lr}
 800cd3e:	2600      	movs	r6, #0
 800cd40:	4d0c      	ldr	r5, [pc, #48]	; (800cd74 <__libc_init_array+0x38>)
 800cd42:	4c0d      	ldr	r4, [pc, #52]	; (800cd78 <__libc_init_array+0x3c>)
 800cd44:	1b64      	subs	r4, r4, r5
 800cd46:	10a4      	asrs	r4, r4, #2
 800cd48:	42a6      	cmp	r6, r4
 800cd4a:	d109      	bne.n	800cd60 <__libc_init_array+0x24>
 800cd4c:	2600      	movs	r6, #0
 800cd4e:	f001 f837 	bl	800ddc0 <_init>
 800cd52:	4d0a      	ldr	r5, [pc, #40]	; (800cd7c <__libc_init_array+0x40>)
 800cd54:	4c0a      	ldr	r4, [pc, #40]	; (800cd80 <__libc_init_array+0x44>)
 800cd56:	1b64      	subs	r4, r4, r5
 800cd58:	10a4      	asrs	r4, r4, #2
 800cd5a:	42a6      	cmp	r6, r4
 800cd5c:	d105      	bne.n	800cd6a <__libc_init_array+0x2e>
 800cd5e:	bd70      	pop	{r4, r5, r6, pc}
 800cd60:	00b3      	lsls	r3, r6, #2
 800cd62:	58eb      	ldr	r3, [r5, r3]
 800cd64:	4798      	blx	r3
 800cd66:	3601      	adds	r6, #1
 800cd68:	e7ee      	b.n	800cd48 <__libc_init_array+0xc>
 800cd6a:	00b3      	lsls	r3, r6, #2
 800cd6c:	58eb      	ldr	r3, [r5, r3]
 800cd6e:	4798      	blx	r3
 800cd70:	3601      	adds	r6, #1
 800cd72:	e7f2      	b.n	800cd5a <__libc_init_array+0x1e>
 800cd74:	08016a18 	.word	0x08016a18
 800cd78:	08016a18 	.word	0x08016a18
 800cd7c:	08016a18 	.word	0x08016a18
 800cd80:	08016a1c 	.word	0x08016a1c

0800cd84 <memset>:
 800cd84:	0003      	movs	r3, r0
 800cd86:	1882      	adds	r2, r0, r2
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d100      	bne.n	800cd8e <memset+0xa>
 800cd8c:	4770      	bx	lr
 800cd8e:	7019      	strb	r1, [r3, #0]
 800cd90:	3301      	adds	r3, #1
 800cd92:	e7f9      	b.n	800cd88 <memset+0x4>

0800cd94 <sin>:
 800cd94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd96:	4a20      	ldr	r2, [pc, #128]	; (800ce18 <sin+0x84>)
 800cd98:	004b      	lsls	r3, r1, #1
 800cd9a:	b087      	sub	sp, #28
 800cd9c:	085b      	lsrs	r3, r3, #1
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	dc06      	bgt.n	800cdb0 <sin+0x1c>
 800cda2:	2300      	movs	r3, #0
 800cda4:	2200      	movs	r2, #0
 800cda6:	9300      	str	r3, [sp, #0]
 800cda8:	2300      	movs	r3, #0
 800cdaa:	f000 fe5b 	bl	800da64 <__kernel_sin>
 800cdae:	e006      	b.n	800cdbe <sin+0x2a>
 800cdb0:	4a1a      	ldr	r2, [pc, #104]	; (800ce1c <sin+0x88>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	dd05      	ble.n	800cdc2 <sin+0x2e>
 800cdb6:	0002      	movs	r2, r0
 800cdb8:	000b      	movs	r3, r1
 800cdba:	f7f4 fd51 	bl	8001860 <__aeabi_dsub>
 800cdbe:	b007      	add	sp, #28
 800cdc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdc2:	aa02      	add	r2, sp, #8
 800cdc4:	f000 f82c 	bl	800ce20 <__ieee754_rem_pio2>
 800cdc8:	9c04      	ldr	r4, [sp, #16]
 800cdca:	9d05      	ldr	r5, [sp, #20]
 800cdcc:	2303      	movs	r3, #3
 800cdce:	4003      	ands	r3, r0
 800cdd0:	2b01      	cmp	r3, #1
 800cdd2:	d00a      	beq.n	800cdea <sin+0x56>
 800cdd4:	9802      	ldr	r0, [sp, #8]
 800cdd6:	9903      	ldr	r1, [sp, #12]
 800cdd8:	2b02      	cmp	r3, #2
 800cdda:	d00d      	beq.n	800cdf8 <sin+0x64>
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d115      	bne.n	800ce0c <sin+0x78>
 800cde0:	3301      	adds	r3, #1
 800cde2:	9300      	str	r3, [sp, #0]
 800cde4:	0022      	movs	r2, r4
 800cde6:	002b      	movs	r3, r5
 800cde8:	e7df      	b.n	800cdaa <sin+0x16>
 800cdea:	0022      	movs	r2, r4
 800cdec:	9802      	ldr	r0, [sp, #8]
 800cdee:	9903      	ldr	r1, [sp, #12]
 800cdf0:	002b      	movs	r3, r5
 800cdf2:	f000 fa01 	bl	800d1f8 <__kernel_cos>
 800cdf6:	e7e2      	b.n	800cdbe <sin+0x2a>
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	0022      	movs	r2, r4
 800cdfc:	9300      	str	r3, [sp, #0]
 800cdfe:	002b      	movs	r3, r5
 800ce00:	f000 fe30 	bl	800da64 <__kernel_sin>
 800ce04:	2380      	movs	r3, #128	; 0x80
 800ce06:	061b      	lsls	r3, r3, #24
 800ce08:	18c9      	adds	r1, r1, r3
 800ce0a:	e7d8      	b.n	800cdbe <sin+0x2a>
 800ce0c:	0022      	movs	r2, r4
 800ce0e:	002b      	movs	r3, r5
 800ce10:	f000 f9f2 	bl	800d1f8 <__kernel_cos>
 800ce14:	e7f6      	b.n	800ce04 <sin+0x70>
 800ce16:	46c0      	nop			; (mov r8, r8)
 800ce18:	3fe921fb 	.word	0x3fe921fb
 800ce1c:	7fefffff 	.word	0x7fefffff

0800ce20 <__ieee754_rem_pio2>:
 800ce20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce22:	004b      	lsls	r3, r1, #1
 800ce24:	b091      	sub	sp, #68	; 0x44
 800ce26:	085b      	lsrs	r3, r3, #1
 800ce28:	9302      	str	r3, [sp, #8]
 800ce2a:	0017      	movs	r7, r2
 800ce2c:	4bb6      	ldr	r3, [pc, #728]	; (800d108 <__ieee754_rem_pio2+0x2e8>)
 800ce2e:	9a02      	ldr	r2, [sp, #8]
 800ce30:	0004      	movs	r4, r0
 800ce32:	000d      	movs	r5, r1
 800ce34:	9109      	str	r1, [sp, #36]	; 0x24
 800ce36:	429a      	cmp	r2, r3
 800ce38:	dc09      	bgt.n	800ce4e <__ieee754_rem_pio2+0x2e>
 800ce3a:	0002      	movs	r2, r0
 800ce3c:	000b      	movs	r3, r1
 800ce3e:	603a      	str	r2, [r7, #0]
 800ce40:	607b      	str	r3, [r7, #4]
 800ce42:	2200      	movs	r2, #0
 800ce44:	2300      	movs	r3, #0
 800ce46:	60ba      	str	r2, [r7, #8]
 800ce48:	60fb      	str	r3, [r7, #12]
 800ce4a:	2600      	movs	r6, #0
 800ce4c:	e025      	b.n	800ce9a <__ieee754_rem_pio2+0x7a>
 800ce4e:	4baf      	ldr	r3, [pc, #700]	; (800d10c <__ieee754_rem_pio2+0x2ec>)
 800ce50:	9a02      	ldr	r2, [sp, #8]
 800ce52:	429a      	cmp	r2, r3
 800ce54:	dd00      	ble.n	800ce58 <__ieee754_rem_pio2+0x38>
 800ce56:	e06e      	b.n	800cf36 <__ieee754_rem_pio2+0x116>
 800ce58:	4ead      	ldr	r6, [pc, #692]	; (800d110 <__ieee754_rem_pio2+0x2f0>)
 800ce5a:	4aae      	ldr	r2, [pc, #696]	; (800d114 <__ieee754_rem_pio2+0x2f4>)
 800ce5c:	2d00      	cmp	r5, #0
 800ce5e:	dd35      	ble.n	800cecc <__ieee754_rem_pio2+0xac>
 800ce60:	0020      	movs	r0, r4
 800ce62:	0029      	movs	r1, r5
 800ce64:	4baa      	ldr	r3, [pc, #680]	; (800d110 <__ieee754_rem_pio2+0x2f0>)
 800ce66:	f7f4 fcfb 	bl	8001860 <__aeabi_dsub>
 800ce6a:	9b02      	ldr	r3, [sp, #8]
 800ce6c:	0004      	movs	r4, r0
 800ce6e:	000d      	movs	r5, r1
 800ce70:	42b3      	cmp	r3, r6
 800ce72:	d015      	beq.n	800cea0 <__ieee754_rem_pio2+0x80>
 800ce74:	4aa8      	ldr	r2, [pc, #672]	; (800d118 <__ieee754_rem_pio2+0x2f8>)
 800ce76:	4ba9      	ldr	r3, [pc, #676]	; (800d11c <__ieee754_rem_pio2+0x2fc>)
 800ce78:	f7f4 fcf2 	bl	8001860 <__aeabi_dsub>
 800ce7c:	0002      	movs	r2, r0
 800ce7e:	000b      	movs	r3, r1
 800ce80:	0020      	movs	r0, r4
 800ce82:	603a      	str	r2, [r7, #0]
 800ce84:	607b      	str	r3, [r7, #4]
 800ce86:	0029      	movs	r1, r5
 800ce88:	f7f4 fcea 	bl	8001860 <__aeabi_dsub>
 800ce8c:	4aa2      	ldr	r2, [pc, #648]	; (800d118 <__ieee754_rem_pio2+0x2f8>)
 800ce8e:	4ba3      	ldr	r3, [pc, #652]	; (800d11c <__ieee754_rem_pio2+0x2fc>)
 800ce90:	f7f4 fce6 	bl	8001860 <__aeabi_dsub>
 800ce94:	2601      	movs	r6, #1
 800ce96:	60b8      	str	r0, [r7, #8]
 800ce98:	60f9      	str	r1, [r7, #12]
 800ce9a:	0030      	movs	r0, r6
 800ce9c:	b011      	add	sp, #68	; 0x44
 800ce9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cea0:	22d3      	movs	r2, #211	; 0xd3
 800cea2:	4b9e      	ldr	r3, [pc, #632]	; (800d11c <__ieee754_rem_pio2+0x2fc>)
 800cea4:	0552      	lsls	r2, r2, #21
 800cea6:	f7f4 fcdb 	bl	8001860 <__aeabi_dsub>
 800ceaa:	4a9d      	ldr	r2, [pc, #628]	; (800d120 <__ieee754_rem_pio2+0x300>)
 800ceac:	4b9d      	ldr	r3, [pc, #628]	; (800d124 <__ieee754_rem_pio2+0x304>)
 800ceae:	0004      	movs	r4, r0
 800ceb0:	000d      	movs	r5, r1
 800ceb2:	f7f4 fcd5 	bl	8001860 <__aeabi_dsub>
 800ceb6:	0002      	movs	r2, r0
 800ceb8:	000b      	movs	r3, r1
 800ceba:	0020      	movs	r0, r4
 800cebc:	603a      	str	r2, [r7, #0]
 800cebe:	607b      	str	r3, [r7, #4]
 800cec0:	0029      	movs	r1, r5
 800cec2:	f7f4 fccd 	bl	8001860 <__aeabi_dsub>
 800cec6:	4a96      	ldr	r2, [pc, #600]	; (800d120 <__ieee754_rem_pio2+0x300>)
 800cec8:	4b96      	ldr	r3, [pc, #600]	; (800d124 <__ieee754_rem_pio2+0x304>)
 800ceca:	e7e1      	b.n	800ce90 <__ieee754_rem_pio2+0x70>
 800cecc:	0020      	movs	r0, r4
 800cece:	0029      	movs	r1, r5
 800ced0:	4b8f      	ldr	r3, [pc, #572]	; (800d110 <__ieee754_rem_pio2+0x2f0>)
 800ced2:	f7f3 fae9 	bl	80004a8 <__aeabi_dadd>
 800ced6:	9b02      	ldr	r3, [sp, #8]
 800ced8:	0004      	movs	r4, r0
 800ceda:	000d      	movs	r5, r1
 800cedc:	42b3      	cmp	r3, r6
 800cede:	d014      	beq.n	800cf0a <__ieee754_rem_pio2+0xea>
 800cee0:	4a8d      	ldr	r2, [pc, #564]	; (800d118 <__ieee754_rem_pio2+0x2f8>)
 800cee2:	4b8e      	ldr	r3, [pc, #568]	; (800d11c <__ieee754_rem_pio2+0x2fc>)
 800cee4:	f7f3 fae0 	bl	80004a8 <__aeabi_dadd>
 800cee8:	0002      	movs	r2, r0
 800ceea:	000b      	movs	r3, r1
 800ceec:	0020      	movs	r0, r4
 800ceee:	603a      	str	r2, [r7, #0]
 800cef0:	607b      	str	r3, [r7, #4]
 800cef2:	0029      	movs	r1, r5
 800cef4:	f7f4 fcb4 	bl	8001860 <__aeabi_dsub>
 800cef8:	4a87      	ldr	r2, [pc, #540]	; (800d118 <__ieee754_rem_pio2+0x2f8>)
 800cefa:	4b88      	ldr	r3, [pc, #544]	; (800d11c <__ieee754_rem_pio2+0x2fc>)
 800cefc:	f7f3 fad4 	bl	80004a8 <__aeabi_dadd>
 800cf00:	2601      	movs	r6, #1
 800cf02:	60b8      	str	r0, [r7, #8]
 800cf04:	60f9      	str	r1, [r7, #12]
 800cf06:	4276      	negs	r6, r6
 800cf08:	e7c7      	b.n	800ce9a <__ieee754_rem_pio2+0x7a>
 800cf0a:	22d3      	movs	r2, #211	; 0xd3
 800cf0c:	4b83      	ldr	r3, [pc, #524]	; (800d11c <__ieee754_rem_pio2+0x2fc>)
 800cf0e:	0552      	lsls	r2, r2, #21
 800cf10:	f7f3 faca 	bl	80004a8 <__aeabi_dadd>
 800cf14:	4a82      	ldr	r2, [pc, #520]	; (800d120 <__ieee754_rem_pio2+0x300>)
 800cf16:	4b83      	ldr	r3, [pc, #524]	; (800d124 <__ieee754_rem_pio2+0x304>)
 800cf18:	0004      	movs	r4, r0
 800cf1a:	000d      	movs	r5, r1
 800cf1c:	f7f3 fac4 	bl	80004a8 <__aeabi_dadd>
 800cf20:	0002      	movs	r2, r0
 800cf22:	000b      	movs	r3, r1
 800cf24:	0020      	movs	r0, r4
 800cf26:	603a      	str	r2, [r7, #0]
 800cf28:	607b      	str	r3, [r7, #4]
 800cf2a:	0029      	movs	r1, r5
 800cf2c:	f7f4 fc98 	bl	8001860 <__aeabi_dsub>
 800cf30:	4a7b      	ldr	r2, [pc, #492]	; (800d120 <__ieee754_rem_pio2+0x300>)
 800cf32:	4b7c      	ldr	r3, [pc, #496]	; (800d124 <__ieee754_rem_pio2+0x304>)
 800cf34:	e7e2      	b.n	800cefc <__ieee754_rem_pio2+0xdc>
 800cf36:	4b7c      	ldr	r3, [pc, #496]	; (800d128 <__ieee754_rem_pio2+0x308>)
 800cf38:	9a02      	ldr	r2, [sp, #8]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	dd00      	ble.n	800cf40 <__ieee754_rem_pio2+0x120>
 800cf3e:	e0d3      	b.n	800d0e8 <__ieee754_rem_pio2+0x2c8>
 800cf40:	0020      	movs	r0, r4
 800cf42:	0029      	movs	r1, r5
 800cf44:	f000 fe3a 	bl	800dbbc <fabs>
 800cf48:	4a78      	ldr	r2, [pc, #480]	; (800d12c <__ieee754_rem_pio2+0x30c>)
 800cf4a:	4b79      	ldr	r3, [pc, #484]	; (800d130 <__ieee754_rem_pio2+0x310>)
 800cf4c:	0004      	movs	r4, r0
 800cf4e:	000d      	movs	r5, r1
 800cf50:	f7f4 fa1a 	bl	8001388 <__aeabi_dmul>
 800cf54:	2200      	movs	r2, #0
 800cf56:	4b77      	ldr	r3, [pc, #476]	; (800d134 <__ieee754_rem_pio2+0x314>)
 800cf58:	f7f3 faa6 	bl	80004a8 <__aeabi_dadd>
 800cf5c:	f7f5 f812 	bl	8001f84 <__aeabi_d2iz>
 800cf60:	0006      	movs	r6, r0
 800cf62:	f7f5 f845 	bl	8001ff0 <__aeabi_i2d>
 800cf66:	4a6b      	ldr	r2, [pc, #428]	; (800d114 <__ieee754_rem_pio2+0x2f4>)
 800cf68:	4b69      	ldr	r3, [pc, #420]	; (800d110 <__ieee754_rem_pio2+0x2f0>)
 800cf6a:	9006      	str	r0, [sp, #24]
 800cf6c:	9107      	str	r1, [sp, #28]
 800cf6e:	f7f4 fa0b 	bl	8001388 <__aeabi_dmul>
 800cf72:	0002      	movs	r2, r0
 800cf74:	000b      	movs	r3, r1
 800cf76:	0020      	movs	r0, r4
 800cf78:	0029      	movs	r1, r5
 800cf7a:	f7f4 fc71 	bl	8001860 <__aeabi_dsub>
 800cf7e:	4a66      	ldr	r2, [pc, #408]	; (800d118 <__ieee754_rem_pio2+0x2f8>)
 800cf80:	9004      	str	r0, [sp, #16]
 800cf82:	9105      	str	r1, [sp, #20]
 800cf84:	9806      	ldr	r0, [sp, #24]
 800cf86:	9907      	ldr	r1, [sp, #28]
 800cf88:	4b64      	ldr	r3, [pc, #400]	; (800d11c <__ieee754_rem_pio2+0x2fc>)
 800cf8a:	f7f4 f9fd 	bl	8001388 <__aeabi_dmul>
 800cf8e:	0004      	movs	r4, r0
 800cf90:	000d      	movs	r5, r1
 800cf92:	2e1f      	cmp	r6, #31
 800cf94:	dc0f      	bgt.n	800cfb6 <__ieee754_rem_pio2+0x196>
 800cf96:	4a68      	ldr	r2, [pc, #416]	; (800d138 <__ieee754_rem_pio2+0x318>)
 800cf98:	1e73      	subs	r3, r6, #1
 800cf9a:	009b      	lsls	r3, r3, #2
 800cf9c:	589b      	ldr	r3, [r3, r2]
 800cf9e:	9a02      	ldr	r2, [sp, #8]
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	d008      	beq.n	800cfb6 <__ieee754_rem_pio2+0x196>
 800cfa4:	9804      	ldr	r0, [sp, #16]
 800cfa6:	9905      	ldr	r1, [sp, #20]
 800cfa8:	0022      	movs	r2, r4
 800cfaa:	002b      	movs	r3, r5
 800cfac:	f7f4 fc58 	bl	8001860 <__aeabi_dsub>
 800cfb0:	6038      	str	r0, [r7, #0]
 800cfb2:	6079      	str	r1, [r7, #4]
 800cfb4:	e012      	b.n	800cfdc <__ieee754_rem_pio2+0x1bc>
 800cfb6:	0022      	movs	r2, r4
 800cfb8:	9804      	ldr	r0, [sp, #16]
 800cfba:	9905      	ldr	r1, [sp, #20]
 800cfbc:	002b      	movs	r3, r5
 800cfbe:	f7f4 fc4f 	bl	8001860 <__aeabi_dsub>
 800cfc2:	9b02      	ldr	r3, [sp, #8]
 800cfc4:	151b      	asrs	r3, r3, #20
 800cfc6:	9308      	str	r3, [sp, #32]
 800cfc8:	9a08      	ldr	r2, [sp, #32]
 800cfca:	004b      	lsls	r3, r1, #1
 800cfcc:	0d5b      	lsrs	r3, r3, #21
 800cfce:	1ad3      	subs	r3, r2, r3
 800cfd0:	2b10      	cmp	r3, #16
 800cfd2:	dc21      	bgt.n	800d018 <__ieee754_rem_pio2+0x1f8>
 800cfd4:	0002      	movs	r2, r0
 800cfd6:	000b      	movs	r3, r1
 800cfd8:	603a      	str	r2, [r7, #0]
 800cfda:	607b      	str	r3, [r7, #4]
 800cfdc:	9804      	ldr	r0, [sp, #16]
 800cfde:	9905      	ldr	r1, [sp, #20]
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	683a      	ldr	r2, [r7, #0]
 800cfe4:	9302      	str	r3, [sp, #8]
 800cfe6:	9b02      	ldr	r3, [sp, #8]
 800cfe8:	f7f4 fc3a 	bl	8001860 <__aeabi_dsub>
 800cfec:	0022      	movs	r2, r4
 800cfee:	002b      	movs	r3, r5
 800cff0:	f7f4 fc36 	bl	8001860 <__aeabi_dsub>
 800cff4:	000b      	movs	r3, r1
 800cff6:	0002      	movs	r2, r0
 800cff8:	60ba      	str	r2, [r7, #8]
 800cffa:	60fb      	str	r3, [r7, #12]
 800cffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cffe:	2b00      	cmp	r3, #0
 800d000:	db00      	blt.n	800d004 <__ieee754_rem_pio2+0x1e4>
 800d002:	e74a      	b.n	800ce9a <__ieee754_rem_pio2+0x7a>
 800d004:	2280      	movs	r2, #128	; 0x80
 800d006:	0612      	lsls	r2, r2, #24
 800d008:	4694      	mov	ip, r2
 800d00a:	9b02      	ldr	r3, [sp, #8]
 800d00c:	1889      	adds	r1, r1, r2
 800d00e:	4463      	add	r3, ip
 800d010:	607b      	str	r3, [r7, #4]
 800d012:	60b8      	str	r0, [r7, #8]
 800d014:	60f9      	str	r1, [r7, #12]
 800d016:	e776      	b.n	800cf06 <__ieee754_rem_pio2+0xe6>
 800d018:	22d3      	movs	r2, #211	; 0xd3
 800d01a:	9806      	ldr	r0, [sp, #24]
 800d01c:	9907      	ldr	r1, [sp, #28]
 800d01e:	4b3f      	ldr	r3, [pc, #252]	; (800d11c <__ieee754_rem_pio2+0x2fc>)
 800d020:	0552      	lsls	r2, r2, #21
 800d022:	f7f4 f9b1 	bl	8001388 <__aeabi_dmul>
 800d026:	0004      	movs	r4, r0
 800d028:	000d      	movs	r5, r1
 800d02a:	0002      	movs	r2, r0
 800d02c:	000b      	movs	r3, r1
 800d02e:	9804      	ldr	r0, [sp, #16]
 800d030:	9905      	ldr	r1, [sp, #20]
 800d032:	f7f4 fc15 	bl	8001860 <__aeabi_dsub>
 800d036:	0002      	movs	r2, r0
 800d038:	000b      	movs	r3, r1
 800d03a:	9002      	str	r0, [sp, #8]
 800d03c:	9103      	str	r1, [sp, #12]
 800d03e:	9804      	ldr	r0, [sp, #16]
 800d040:	9905      	ldr	r1, [sp, #20]
 800d042:	f7f4 fc0d 	bl	8001860 <__aeabi_dsub>
 800d046:	0022      	movs	r2, r4
 800d048:	002b      	movs	r3, r5
 800d04a:	f7f4 fc09 	bl	8001860 <__aeabi_dsub>
 800d04e:	0004      	movs	r4, r0
 800d050:	000d      	movs	r5, r1
 800d052:	9806      	ldr	r0, [sp, #24]
 800d054:	9907      	ldr	r1, [sp, #28]
 800d056:	4a32      	ldr	r2, [pc, #200]	; (800d120 <__ieee754_rem_pio2+0x300>)
 800d058:	4b32      	ldr	r3, [pc, #200]	; (800d124 <__ieee754_rem_pio2+0x304>)
 800d05a:	f7f4 f995 	bl	8001388 <__aeabi_dmul>
 800d05e:	0022      	movs	r2, r4
 800d060:	002b      	movs	r3, r5
 800d062:	f7f4 fbfd 	bl	8001860 <__aeabi_dsub>
 800d066:	0002      	movs	r2, r0
 800d068:	000b      	movs	r3, r1
 800d06a:	0004      	movs	r4, r0
 800d06c:	000d      	movs	r5, r1
 800d06e:	9802      	ldr	r0, [sp, #8]
 800d070:	9903      	ldr	r1, [sp, #12]
 800d072:	f7f4 fbf5 	bl	8001860 <__aeabi_dsub>
 800d076:	9a08      	ldr	r2, [sp, #32]
 800d078:	004b      	lsls	r3, r1, #1
 800d07a:	0d5b      	lsrs	r3, r3, #21
 800d07c:	1ad3      	subs	r3, r2, r3
 800d07e:	2b31      	cmp	r3, #49	; 0x31
 800d080:	dc08      	bgt.n	800d094 <__ieee754_rem_pio2+0x274>
 800d082:	0002      	movs	r2, r0
 800d084:	000b      	movs	r3, r1
 800d086:	603a      	str	r2, [r7, #0]
 800d088:	607b      	str	r3, [r7, #4]
 800d08a:	9a02      	ldr	r2, [sp, #8]
 800d08c:	9b03      	ldr	r3, [sp, #12]
 800d08e:	9204      	str	r2, [sp, #16]
 800d090:	9305      	str	r3, [sp, #20]
 800d092:	e7a3      	b.n	800cfdc <__ieee754_rem_pio2+0x1bc>
 800d094:	22b8      	movs	r2, #184	; 0xb8
 800d096:	9806      	ldr	r0, [sp, #24]
 800d098:	9907      	ldr	r1, [sp, #28]
 800d09a:	4b22      	ldr	r3, [pc, #136]	; (800d124 <__ieee754_rem_pio2+0x304>)
 800d09c:	0592      	lsls	r2, r2, #22
 800d09e:	f7f4 f973 	bl	8001388 <__aeabi_dmul>
 800d0a2:	0004      	movs	r4, r0
 800d0a4:	000d      	movs	r5, r1
 800d0a6:	0002      	movs	r2, r0
 800d0a8:	000b      	movs	r3, r1
 800d0aa:	9802      	ldr	r0, [sp, #8]
 800d0ac:	9903      	ldr	r1, [sp, #12]
 800d0ae:	f7f4 fbd7 	bl	8001860 <__aeabi_dsub>
 800d0b2:	0002      	movs	r2, r0
 800d0b4:	000b      	movs	r3, r1
 800d0b6:	9004      	str	r0, [sp, #16]
 800d0b8:	9105      	str	r1, [sp, #20]
 800d0ba:	9802      	ldr	r0, [sp, #8]
 800d0bc:	9903      	ldr	r1, [sp, #12]
 800d0be:	f7f4 fbcf 	bl	8001860 <__aeabi_dsub>
 800d0c2:	0022      	movs	r2, r4
 800d0c4:	002b      	movs	r3, r5
 800d0c6:	f7f4 fbcb 	bl	8001860 <__aeabi_dsub>
 800d0ca:	0004      	movs	r4, r0
 800d0cc:	000d      	movs	r5, r1
 800d0ce:	9806      	ldr	r0, [sp, #24]
 800d0d0:	9907      	ldr	r1, [sp, #28]
 800d0d2:	4a1a      	ldr	r2, [pc, #104]	; (800d13c <__ieee754_rem_pio2+0x31c>)
 800d0d4:	4b1a      	ldr	r3, [pc, #104]	; (800d140 <__ieee754_rem_pio2+0x320>)
 800d0d6:	f7f4 f957 	bl	8001388 <__aeabi_dmul>
 800d0da:	0022      	movs	r2, r4
 800d0dc:	002b      	movs	r3, r5
 800d0de:	f7f4 fbbf 	bl	8001860 <__aeabi_dsub>
 800d0e2:	0004      	movs	r4, r0
 800d0e4:	000d      	movs	r5, r1
 800d0e6:	e75d      	b.n	800cfa4 <__ieee754_rem_pio2+0x184>
 800d0e8:	4b16      	ldr	r3, [pc, #88]	; (800d144 <__ieee754_rem_pio2+0x324>)
 800d0ea:	9a02      	ldr	r2, [sp, #8]
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	dd2b      	ble.n	800d148 <__ieee754_rem_pio2+0x328>
 800d0f0:	0022      	movs	r2, r4
 800d0f2:	002b      	movs	r3, r5
 800d0f4:	0020      	movs	r0, r4
 800d0f6:	0029      	movs	r1, r5
 800d0f8:	f7f4 fbb2 	bl	8001860 <__aeabi_dsub>
 800d0fc:	60b8      	str	r0, [r7, #8]
 800d0fe:	60f9      	str	r1, [r7, #12]
 800d100:	6038      	str	r0, [r7, #0]
 800d102:	6079      	str	r1, [r7, #4]
 800d104:	e6a1      	b.n	800ce4a <__ieee754_rem_pio2+0x2a>
 800d106:	46c0      	nop			; (mov r8, r8)
 800d108:	3fe921fb 	.word	0x3fe921fb
 800d10c:	4002d97b 	.word	0x4002d97b
 800d110:	3ff921fb 	.word	0x3ff921fb
 800d114:	54400000 	.word	0x54400000
 800d118:	1a626331 	.word	0x1a626331
 800d11c:	3dd0b461 	.word	0x3dd0b461
 800d120:	2e037073 	.word	0x2e037073
 800d124:	3ba3198a 	.word	0x3ba3198a
 800d128:	413921fb 	.word	0x413921fb
 800d12c:	6dc9c883 	.word	0x6dc9c883
 800d130:	3fe45f30 	.word	0x3fe45f30
 800d134:	3fe00000 	.word	0x3fe00000
 800d138:	08016840 	.word	0x08016840
 800d13c:	252049c1 	.word	0x252049c1
 800d140:	397b839a 	.word	0x397b839a
 800d144:	7fefffff 	.word	0x7fefffff
 800d148:	9a02      	ldr	r2, [sp, #8]
 800d14a:	0020      	movs	r0, r4
 800d14c:	1516      	asrs	r6, r2, #20
 800d14e:	4a27      	ldr	r2, [pc, #156]	; (800d1ec <__ieee754_rem_pio2+0x3cc>)
 800d150:	18b6      	adds	r6, r6, r2
 800d152:	9a02      	ldr	r2, [sp, #8]
 800d154:	0533      	lsls	r3, r6, #20
 800d156:	1ad5      	subs	r5, r2, r3
 800d158:	0029      	movs	r1, r5
 800d15a:	f7f4 ff13 	bl	8001f84 <__aeabi_d2iz>
 800d15e:	f7f4 ff47 	bl	8001ff0 <__aeabi_i2d>
 800d162:	0002      	movs	r2, r0
 800d164:	000b      	movs	r3, r1
 800d166:	0020      	movs	r0, r4
 800d168:	0029      	movs	r1, r5
 800d16a:	920a      	str	r2, [sp, #40]	; 0x28
 800d16c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d16e:	f7f4 fb77 	bl	8001860 <__aeabi_dsub>
 800d172:	2200      	movs	r2, #0
 800d174:	4b1e      	ldr	r3, [pc, #120]	; (800d1f0 <__ieee754_rem_pio2+0x3d0>)
 800d176:	f7f4 f907 	bl	8001388 <__aeabi_dmul>
 800d17a:	000d      	movs	r5, r1
 800d17c:	0004      	movs	r4, r0
 800d17e:	f7f4 ff01 	bl	8001f84 <__aeabi_d2iz>
 800d182:	f7f4 ff35 	bl	8001ff0 <__aeabi_i2d>
 800d186:	0002      	movs	r2, r0
 800d188:	000b      	movs	r3, r1
 800d18a:	0020      	movs	r0, r4
 800d18c:	0029      	movs	r1, r5
 800d18e:	920c      	str	r2, [sp, #48]	; 0x30
 800d190:	930d      	str	r3, [sp, #52]	; 0x34
 800d192:	f7f4 fb65 	bl	8001860 <__aeabi_dsub>
 800d196:	2200      	movs	r2, #0
 800d198:	4b15      	ldr	r3, [pc, #84]	; (800d1f0 <__ieee754_rem_pio2+0x3d0>)
 800d19a:	f7f4 f8f5 	bl	8001388 <__aeabi_dmul>
 800d19e:	2503      	movs	r5, #3
 800d1a0:	900e      	str	r0, [sp, #56]	; 0x38
 800d1a2:	910f      	str	r1, [sp, #60]	; 0x3c
 800d1a4:	ac0a      	add	r4, sp, #40	; 0x28
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	6920      	ldr	r0, [r4, #16]
 800d1aa:	6961      	ldr	r1, [r4, #20]
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	9502      	str	r5, [sp, #8]
 800d1b0:	3c08      	subs	r4, #8
 800d1b2:	3d01      	subs	r5, #1
 800d1b4:	f7f3 f92c 	bl	8000410 <__aeabi_dcmpeq>
 800d1b8:	2800      	cmp	r0, #0
 800d1ba:	d1f4      	bne.n	800d1a6 <__ieee754_rem_pio2+0x386>
 800d1bc:	4b0d      	ldr	r3, [pc, #52]	; (800d1f4 <__ieee754_rem_pio2+0x3d4>)
 800d1be:	0032      	movs	r2, r6
 800d1c0:	9301      	str	r3, [sp, #4]
 800d1c2:	2302      	movs	r3, #2
 800d1c4:	0039      	movs	r1, r7
 800d1c6:	9300      	str	r3, [sp, #0]
 800d1c8:	a80a      	add	r0, sp, #40	; 0x28
 800d1ca:	9b02      	ldr	r3, [sp, #8]
 800d1cc:	f000 f8d4 	bl	800d378 <__kernel_rem_pio2>
 800d1d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1d2:	0006      	movs	r6, r0
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	db00      	blt.n	800d1da <__ieee754_rem_pio2+0x3ba>
 800d1d8:	e65f      	b.n	800ce9a <__ieee754_rem_pio2+0x7a>
 800d1da:	2280      	movs	r2, #128	; 0x80
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	0612      	lsls	r2, r2, #24
 800d1e0:	189b      	adds	r3, r3, r2
 800d1e2:	607b      	str	r3, [r7, #4]
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	189b      	adds	r3, r3, r2
 800d1e8:	60fb      	str	r3, [r7, #12]
 800d1ea:	e68c      	b.n	800cf06 <__ieee754_rem_pio2+0xe6>
 800d1ec:	fffffbea 	.word	0xfffffbea
 800d1f0:	41700000 	.word	0x41700000
 800d1f4:	080168c0 	.word	0x080168c0

0800d1f8 <__kernel_cos>:
 800d1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1fa:	b087      	sub	sp, #28
 800d1fc:	9204      	str	r2, [sp, #16]
 800d1fe:	9305      	str	r3, [sp, #20]
 800d200:	004b      	lsls	r3, r1, #1
 800d202:	085b      	lsrs	r3, r3, #1
 800d204:	9300      	str	r3, [sp, #0]
 800d206:	23f9      	movs	r3, #249	; 0xf9
 800d208:	9a00      	ldr	r2, [sp, #0]
 800d20a:	0007      	movs	r7, r0
 800d20c:	000e      	movs	r6, r1
 800d20e:	059b      	lsls	r3, r3, #22
 800d210:	429a      	cmp	r2, r3
 800d212:	da04      	bge.n	800d21e <__kernel_cos+0x26>
 800d214:	f7f4 feb6 	bl	8001f84 <__aeabi_d2iz>
 800d218:	2800      	cmp	r0, #0
 800d21a:	d100      	bne.n	800d21e <__kernel_cos+0x26>
 800d21c:	e084      	b.n	800d328 <__kernel_cos+0x130>
 800d21e:	003a      	movs	r2, r7
 800d220:	0033      	movs	r3, r6
 800d222:	0038      	movs	r0, r7
 800d224:	0031      	movs	r1, r6
 800d226:	f7f4 f8af 	bl	8001388 <__aeabi_dmul>
 800d22a:	2200      	movs	r2, #0
 800d22c:	4b40      	ldr	r3, [pc, #256]	; (800d330 <__kernel_cos+0x138>)
 800d22e:	0004      	movs	r4, r0
 800d230:	000d      	movs	r5, r1
 800d232:	f7f4 f8a9 	bl	8001388 <__aeabi_dmul>
 800d236:	4a3f      	ldr	r2, [pc, #252]	; (800d334 <__kernel_cos+0x13c>)
 800d238:	9002      	str	r0, [sp, #8]
 800d23a:	9103      	str	r1, [sp, #12]
 800d23c:	4b3e      	ldr	r3, [pc, #248]	; (800d338 <__kernel_cos+0x140>)
 800d23e:	0020      	movs	r0, r4
 800d240:	0029      	movs	r1, r5
 800d242:	f7f4 f8a1 	bl	8001388 <__aeabi_dmul>
 800d246:	4a3d      	ldr	r2, [pc, #244]	; (800d33c <__kernel_cos+0x144>)
 800d248:	4b3d      	ldr	r3, [pc, #244]	; (800d340 <__kernel_cos+0x148>)
 800d24a:	f7f3 f92d 	bl	80004a8 <__aeabi_dadd>
 800d24e:	0022      	movs	r2, r4
 800d250:	002b      	movs	r3, r5
 800d252:	f7f4 f899 	bl	8001388 <__aeabi_dmul>
 800d256:	4a3b      	ldr	r2, [pc, #236]	; (800d344 <__kernel_cos+0x14c>)
 800d258:	4b3b      	ldr	r3, [pc, #236]	; (800d348 <__kernel_cos+0x150>)
 800d25a:	f7f4 fb01 	bl	8001860 <__aeabi_dsub>
 800d25e:	0022      	movs	r2, r4
 800d260:	002b      	movs	r3, r5
 800d262:	f7f4 f891 	bl	8001388 <__aeabi_dmul>
 800d266:	4a39      	ldr	r2, [pc, #228]	; (800d34c <__kernel_cos+0x154>)
 800d268:	4b39      	ldr	r3, [pc, #228]	; (800d350 <__kernel_cos+0x158>)
 800d26a:	f7f3 f91d 	bl	80004a8 <__aeabi_dadd>
 800d26e:	0022      	movs	r2, r4
 800d270:	002b      	movs	r3, r5
 800d272:	f7f4 f889 	bl	8001388 <__aeabi_dmul>
 800d276:	4a37      	ldr	r2, [pc, #220]	; (800d354 <__kernel_cos+0x15c>)
 800d278:	4b37      	ldr	r3, [pc, #220]	; (800d358 <__kernel_cos+0x160>)
 800d27a:	f7f4 faf1 	bl	8001860 <__aeabi_dsub>
 800d27e:	0022      	movs	r2, r4
 800d280:	002b      	movs	r3, r5
 800d282:	f7f4 f881 	bl	8001388 <__aeabi_dmul>
 800d286:	4a35      	ldr	r2, [pc, #212]	; (800d35c <__kernel_cos+0x164>)
 800d288:	4b35      	ldr	r3, [pc, #212]	; (800d360 <__kernel_cos+0x168>)
 800d28a:	f7f3 f90d 	bl	80004a8 <__aeabi_dadd>
 800d28e:	0022      	movs	r2, r4
 800d290:	002b      	movs	r3, r5
 800d292:	f7f4 f879 	bl	8001388 <__aeabi_dmul>
 800d296:	0022      	movs	r2, r4
 800d298:	002b      	movs	r3, r5
 800d29a:	f7f4 f875 	bl	8001388 <__aeabi_dmul>
 800d29e:	9a04      	ldr	r2, [sp, #16]
 800d2a0:	9b05      	ldr	r3, [sp, #20]
 800d2a2:	0004      	movs	r4, r0
 800d2a4:	000d      	movs	r5, r1
 800d2a6:	0038      	movs	r0, r7
 800d2a8:	0031      	movs	r1, r6
 800d2aa:	f7f4 f86d 	bl	8001388 <__aeabi_dmul>
 800d2ae:	0002      	movs	r2, r0
 800d2b0:	000b      	movs	r3, r1
 800d2b2:	0020      	movs	r0, r4
 800d2b4:	0029      	movs	r1, r5
 800d2b6:	f7f4 fad3 	bl	8001860 <__aeabi_dsub>
 800d2ba:	4b2a      	ldr	r3, [pc, #168]	; (800d364 <__kernel_cos+0x16c>)
 800d2bc:	9a00      	ldr	r2, [sp, #0]
 800d2be:	0004      	movs	r4, r0
 800d2c0:	000d      	movs	r5, r1
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	dc0d      	bgt.n	800d2e2 <__kernel_cos+0xea>
 800d2c6:	0002      	movs	r2, r0
 800d2c8:	000b      	movs	r3, r1
 800d2ca:	9802      	ldr	r0, [sp, #8]
 800d2cc:	9903      	ldr	r1, [sp, #12]
 800d2ce:	f7f4 fac7 	bl	8001860 <__aeabi_dsub>
 800d2d2:	0002      	movs	r2, r0
 800d2d4:	2000      	movs	r0, #0
 800d2d6:	000b      	movs	r3, r1
 800d2d8:	4923      	ldr	r1, [pc, #140]	; (800d368 <__kernel_cos+0x170>)
 800d2da:	f7f4 fac1 	bl	8001860 <__aeabi_dsub>
 800d2de:	b007      	add	sp, #28
 800d2e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2e2:	4b22      	ldr	r3, [pc, #136]	; (800d36c <__kernel_cos+0x174>)
 800d2e4:	9a00      	ldr	r2, [sp, #0]
 800d2e6:	2600      	movs	r6, #0
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	dc1b      	bgt.n	800d324 <__kernel_cos+0x12c>
 800d2ec:	0013      	movs	r3, r2
 800d2ee:	4a20      	ldr	r2, [pc, #128]	; (800d370 <__kernel_cos+0x178>)
 800d2f0:	4694      	mov	ip, r2
 800d2f2:	4463      	add	r3, ip
 800d2f4:	001f      	movs	r7, r3
 800d2f6:	0032      	movs	r2, r6
 800d2f8:	003b      	movs	r3, r7
 800d2fa:	2000      	movs	r0, #0
 800d2fc:	491a      	ldr	r1, [pc, #104]	; (800d368 <__kernel_cos+0x170>)
 800d2fe:	f7f4 faaf 	bl	8001860 <__aeabi_dsub>
 800d302:	0032      	movs	r2, r6
 800d304:	003b      	movs	r3, r7
 800d306:	9000      	str	r0, [sp, #0]
 800d308:	9101      	str	r1, [sp, #4]
 800d30a:	9802      	ldr	r0, [sp, #8]
 800d30c:	9903      	ldr	r1, [sp, #12]
 800d30e:	f7f4 faa7 	bl	8001860 <__aeabi_dsub>
 800d312:	0022      	movs	r2, r4
 800d314:	002b      	movs	r3, r5
 800d316:	f7f4 faa3 	bl	8001860 <__aeabi_dsub>
 800d31a:	0002      	movs	r2, r0
 800d31c:	000b      	movs	r3, r1
 800d31e:	9800      	ldr	r0, [sp, #0]
 800d320:	9901      	ldr	r1, [sp, #4]
 800d322:	e7da      	b.n	800d2da <__kernel_cos+0xe2>
 800d324:	4f13      	ldr	r7, [pc, #76]	; (800d374 <__kernel_cos+0x17c>)
 800d326:	e7e6      	b.n	800d2f6 <__kernel_cos+0xfe>
 800d328:	2000      	movs	r0, #0
 800d32a:	490f      	ldr	r1, [pc, #60]	; (800d368 <__kernel_cos+0x170>)
 800d32c:	e7d7      	b.n	800d2de <__kernel_cos+0xe6>
 800d32e:	46c0      	nop			; (mov r8, r8)
 800d330:	3fe00000 	.word	0x3fe00000
 800d334:	be8838d4 	.word	0xbe8838d4
 800d338:	bda8fae9 	.word	0xbda8fae9
 800d33c:	bdb4b1c4 	.word	0xbdb4b1c4
 800d340:	3e21ee9e 	.word	0x3e21ee9e
 800d344:	809c52ad 	.word	0x809c52ad
 800d348:	3e927e4f 	.word	0x3e927e4f
 800d34c:	19cb1590 	.word	0x19cb1590
 800d350:	3efa01a0 	.word	0x3efa01a0
 800d354:	16c15177 	.word	0x16c15177
 800d358:	3f56c16c 	.word	0x3f56c16c
 800d35c:	5555554c 	.word	0x5555554c
 800d360:	3fa55555 	.word	0x3fa55555
 800d364:	3fd33332 	.word	0x3fd33332
 800d368:	3ff00000 	.word	0x3ff00000
 800d36c:	3fe90000 	.word	0x3fe90000
 800d370:	ffe00000 	.word	0xffe00000
 800d374:	3fd20000 	.word	0x3fd20000

0800d378 <__kernel_rem_pio2>:
 800d378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d37a:	4cd0      	ldr	r4, [pc, #832]	; (800d6bc <__kernel_rem_pio2+0x344>)
 800d37c:	44a5      	add	sp, r4
 800d37e:	930d      	str	r3, [sp, #52]	; 0x34
 800d380:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d382:	0014      	movs	r4, r2
 800d384:	009a      	lsls	r2, r3, #2
 800d386:	4bce      	ldr	r3, [pc, #824]	; (800d6c0 <__kernel_rem_pio2+0x348>)
 800d388:	900e      	str	r0, [sp, #56]	; 0x38
 800d38a:	58d3      	ldr	r3, [r2, r3]
 800d38c:	9107      	str	r1, [sp, #28]
 800d38e:	9308      	str	r3, [sp, #32]
 800d390:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d392:	3b01      	subs	r3, #1
 800d394:	930c      	str	r3, [sp, #48]	; 0x30
 800d396:	2300      	movs	r3, #0
 800d398:	9300      	str	r3, [sp, #0]
 800d39a:	0023      	movs	r3, r4
 800d39c:	3314      	adds	r3, #20
 800d39e:	db04      	blt.n	800d3aa <__kernel_rem_pio2+0x32>
 800d3a0:	2118      	movs	r1, #24
 800d3a2:	1ee0      	subs	r0, r4, #3
 800d3a4:	f7f2 ff38 	bl	8000218 <__divsi3>
 800d3a8:	9000      	str	r0, [sp, #0]
 800d3aa:	2218      	movs	r2, #24
 800d3ac:	9b00      	ldr	r3, [sp, #0]
 800d3ae:	4252      	negs	r2, r2
 800d3b0:	3301      	adds	r3, #1
 800d3b2:	435a      	muls	r2, r3
 800d3b4:	1913      	adds	r3, r2, r4
 800d3b6:	9302      	str	r3, [sp, #8]
 800d3b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d3ba:	9b00      	ldr	r3, [sp, #0]
 800d3bc:	ae26      	add	r6, sp, #152	; 0x98
 800d3be:	1a9d      	subs	r5, r3, r2
 800d3c0:	002c      	movs	r4, r5
 800d3c2:	9b08      	ldr	r3, [sp, #32]
 800d3c4:	189f      	adds	r7, r3, r2
 800d3c6:	1b63      	subs	r3, r4, r5
 800d3c8:	429f      	cmp	r7, r3
 800d3ca:	da17      	bge.n	800d3fc <__kernel_rem_pio2+0x84>
 800d3cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d3ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d3d0:	9304      	str	r3, [sp, #16]
 800d3d2:	ab76      	add	r3, sp, #472	; 0x1d8
 800d3d4:	930a      	str	r3, [sp, #40]	; 0x28
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	1a9b      	subs	r3, r3, r2
 800d3da:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3dc:	ab28      	add	r3, sp, #160	; 0xa0
 800d3de:	930f      	str	r3, [sp, #60]	; 0x3c
 800d3e0:	9a04      	ldr	r2, [sp, #16]
 800d3e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3e4:	189b      	adds	r3, r3, r2
 800d3e6:	9a08      	ldr	r2, [sp, #32]
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	db31      	blt.n	800d450 <__kernel_rem_pio2+0xd8>
 800d3ec:	9b04      	ldr	r3, [sp, #16]
 800d3ee:	2400      	movs	r4, #0
 800d3f0:	00de      	lsls	r6, r3, #3
 800d3f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3f4:	2500      	movs	r5, #0
 800d3f6:	2700      	movs	r7, #0
 800d3f8:	199e      	adds	r6, r3, r6
 800d3fa:	e01e      	b.n	800d43a <__kernel_rem_pio2+0xc2>
 800d3fc:	2c00      	cmp	r4, #0
 800d3fe:	db07      	blt.n	800d410 <__kernel_rem_pio2+0x98>
 800d400:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 800d402:	00a3      	lsls	r3, r4, #2
 800d404:	58d0      	ldr	r0, [r2, r3]
 800d406:	f7f4 fdf3 	bl	8001ff0 <__aeabi_i2d>
 800d40a:	c603      	stmia	r6!, {r0, r1}
 800d40c:	3401      	adds	r4, #1
 800d40e:	e7da      	b.n	800d3c6 <__kernel_rem_pio2+0x4e>
 800d410:	2000      	movs	r0, #0
 800d412:	2100      	movs	r1, #0
 800d414:	e7f9      	b.n	800d40a <__kernel_rem_pio2+0x92>
 800d416:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d418:	00f9      	lsls	r1, r7, #3
 800d41a:	1859      	adds	r1, r3, r1
 800d41c:	6808      	ldr	r0, [r1, #0]
 800d41e:	6849      	ldr	r1, [r1, #4]
 800d420:	6832      	ldr	r2, [r6, #0]
 800d422:	6873      	ldr	r3, [r6, #4]
 800d424:	f7f3 ffb0 	bl	8001388 <__aeabi_dmul>
 800d428:	0002      	movs	r2, r0
 800d42a:	000b      	movs	r3, r1
 800d42c:	0020      	movs	r0, r4
 800d42e:	0029      	movs	r1, r5
 800d430:	f7f3 f83a 	bl	80004a8 <__aeabi_dadd>
 800d434:	0004      	movs	r4, r0
 800d436:	000d      	movs	r5, r1
 800d438:	3701      	adds	r7, #1
 800d43a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d43c:	3e08      	subs	r6, #8
 800d43e:	429f      	cmp	r7, r3
 800d440:	dde9      	ble.n	800d416 <__kernel_rem_pio2+0x9e>
 800d442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d444:	c330      	stmia	r3!, {r4, r5}
 800d446:	930a      	str	r3, [sp, #40]	; 0x28
 800d448:	9b04      	ldr	r3, [sp, #16]
 800d44a:	3301      	adds	r3, #1
 800d44c:	9304      	str	r3, [sp, #16]
 800d44e:	e7c7      	b.n	800d3e0 <__kernel_rem_pio2+0x68>
 800d450:	9b08      	ldr	r3, [sp, #32]
 800d452:	aa12      	add	r2, sp, #72	; 0x48
 800d454:	009b      	lsls	r3, r3, #2
 800d456:	189b      	adds	r3, r3, r2
 800d458:	9310      	str	r3, [sp, #64]	; 0x40
 800d45a:	9b00      	ldr	r3, [sp, #0]
 800d45c:	0098      	lsls	r0, r3, #2
 800d45e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d460:	181b      	adds	r3, r3, r0
 800d462:	930f      	str	r3, [sp, #60]	; 0x3c
 800d464:	9b08      	ldr	r3, [sp, #32]
 800d466:	9304      	str	r3, [sp, #16]
 800d468:	9b04      	ldr	r3, [sp, #16]
 800d46a:	aa76      	add	r2, sp, #472	; 0x1d8
 800d46c:	00db      	lsls	r3, r3, #3
 800d46e:	18d3      	adds	r3, r2, r3
 800d470:	681c      	ldr	r4, [r3, #0]
 800d472:	685d      	ldr	r5, [r3, #4]
 800d474:	ab12      	add	r3, sp, #72	; 0x48
 800d476:	9300      	str	r3, [sp, #0]
 800d478:	930b      	str	r3, [sp, #44]	; 0x2c
 800d47a:	9b04      	ldr	r3, [sp, #16]
 800d47c:	9211      	str	r2, [sp, #68]	; 0x44
 800d47e:	930a      	str	r3, [sp, #40]	; 0x28
 800d480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d482:	2b00      	cmp	r3, #0
 800d484:	dc74      	bgt.n	800d570 <__kernel_rem_pio2+0x1f8>
 800d486:	0020      	movs	r0, r4
 800d488:	0029      	movs	r1, r5
 800d48a:	9a02      	ldr	r2, [sp, #8]
 800d48c:	f000 fc24 	bl	800dcd8 <scalbn>
 800d490:	23ff      	movs	r3, #255	; 0xff
 800d492:	2200      	movs	r2, #0
 800d494:	059b      	lsls	r3, r3, #22
 800d496:	0004      	movs	r4, r0
 800d498:	000d      	movs	r5, r1
 800d49a:	f7f3 ff75 	bl	8001388 <__aeabi_dmul>
 800d49e:	f000 fb91 	bl	800dbc4 <floor>
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	4b87      	ldr	r3, [pc, #540]	; (800d6c4 <__kernel_rem_pio2+0x34c>)
 800d4a6:	f7f3 ff6f 	bl	8001388 <__aeabi_dmul>
 800d4aa:	0002      	movs	r2, r0
 800d4ac:	000b      	movs	r3, r1
 800d4ae:	0020      	movs	r0, r4
 800d4b0:	0029      	movs	r1, r5
 800d4b2:	f7f4 f9d5 	bl	8001860 <__aeabi_dsub>
 800d4b6:	000d      	movs	r5, r1
 800d4b8:	0004      	movs	r4, r0
 800d4ba:	f7f4 fd63 	bl	8001f84 <__aeabi_d2iz>
 800d4be:	900b      	str	r0, [sp, #44]	; 0x2c
 800d4c0:	f7f4 fd96 	bl	8001ff0 <__aeabi_i2d>
 800d4c4:	000b      	movs	r3, r1
 800d4c6:	0002      	movs	r2, r0
 800d4c8:	0029      	movs	r1, r5
 800d4ca:	0020      	movs	r0, r4
 800d4cc:	f7f4 f9c8 	bl	8001860 <__aeabi_dsub>
 800d4d0:	9b02      	ldr	r3, [sp, #8]
 800d4d2:	0006      	movs	r6, r0
 800d4d4:	000f      	movs	r7, r1
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	dd74      	ble.n	800d5c4 <__kernel_rem_pio2+0x24c>
 800d4da:	2118      	movs	r1, #24
 800d4dc:	9b04      	ldr	r3, [sp, #16]
 800d4de:	aa12      	add	r2, sp, #72	; 0x48
 800d4e0:	3b01      	subs	r3, #1
 800d4e2:	009b      	lsls	r3, r3, #2
 800d4e4:	589a      	ldr	r2, [r3, r2]
 800d4e6:	9802      	ldr	r0, [sp, #8]
 800d4e8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d4ea:	1a09      	subs	r1, r1, r0
 800d4ec:	0010      	movs	r0, r2
 800d4ee:	4108      	asrs	r0, r1
 800d4f0:	1824      	adds	r4, r4, r0
 800d4f2:	4088      	lsls	r0, r1
 800d4f4:	a912      	add	r1, sp, #72	; 0x48
 800d4f6:	1a12      	subs	r2, r2, r0
 800d4f8:	505a      	str	r2, [r3, r1]
 800d4fa:	2317      	movs	r3, #23
 800d4fc:	9902      	ldr	r1, [sp, #8]
 800d4fe:	940b      	str	r4, [sp, #44]	; 0x2c
 800d500:	1a5b      	subs	r3, r3, r1
 800d502:	411a      	asrs	r2, r3
 800d504:	920a      	str	r2, [sp, #40]	; 0x28
 800d506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d508:	2b00      	cmp	r3, #0
 800d50a:	dd6d      	ble.n	800d5e8 <__kernel_rem_pio2+0x270>
 800d50c:	2200      	movs	r2, #0
 800d50e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d510:	2080      	movs	r0, #128	; 0x80
 800d512:	3301      	adds	r3, #1
 800d514:	930b      	str	r3, [sp, #44]	; 0x2c
 800d516:	4b6c      	ldr	r3, [pc, #432]	; (800d6c8 <__kernel_rem_pio2+0x350>)
 800d518:	0014      	movs	r4, r2
 800d51a:	469c      	mov	ip, r3
 800d51c:	2501      	movs	r5, #1
 800d51e:	0440      	lsls	r0, r0, #17
 800d520:	9b04      	ldr	r3, [sp, #16]
 800d522:	4293      	cmp	r3, r2
 800d524:	dd00      	ble.n	800d528 <__kernel_rem_pio2+0x1b0>
 800d526:	e098      	b.n	800d65a <__kernel_rem_pio2+0x2e2>
 800d528:	9b02      	ldr	r3, [sp, #8]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	dd05      	ble.n	800d53a <__kernel_rem_pio2+0x1c2>
 800d52e:	2b01      	cmp	r3, #1
 800d530:	d100      	bne.n	800d534 <__kernel_rem_pio2+0x1bc>
 800d532:	e0a8      	b.n	800d686 <__kernel_rem_pio2+0x30e>
 800d534:	2b02      	cmp	r3, #2
 800d536:	d100      	bne.n	800d53a <__kernel_rem_pio2+0x1c2>
 800d538:	e0b0      	b.n	800d69c <__kernel_rem_pio2+0x324>
 800d53a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d53c:	2b02      	cmp	r3, #2
 800d53e:	d153      	bne.n	800d5e8 <__kernel_rem_pio2+0x270>
 800d540:	0032      	movs	r2, r6
 800d542:	003b      	movs	r3, r7
 800d544:	2000      	movs	r0, #0
 800d546:	4961      	ldr	r1, [pc, #388]	; (800d6cc <__kernel_rem_pio2+0x354>)
 800d548:	f7f4 f98a 	bl	8001860 <__aeabi_dsub>
 800d54c:	0006      	movs	r6, r0
 800d54e:	000f      	movs	r7, r1
 800d550:	2c00      	cmp	r4, #0
 800d552:	d049      	beq.n	800d5e8 <__kernel_rem_pio2+0x270>
 800d554:	9a02      	ldr	r2, [sp, #8]
 800d556:	2000      	movs	r0, #0
 800d558:	495c      	ldr	r1, [pc, #368]	; (800d6cc <__kernel_rem_pio2+0x354>)
 800d55a:	f000 fbbd 	bl	800dcd8 <scalbn>
 800d55e:	0002      	movs	r2, r0
 800d560:	000b      	movs	r3, r1
 800d562:	0030      	movs	r0, r6
 800d564:	0039      	movs	r1, r7
 800d566:	f7f4 f97b 	bl	8001860 <__aeabi_dsub>
 800d56a:	0006      	movs	r6, r0
 800d56c:	000f      	movs	r7, r1
 800d56e:	e03b      	b.n	800d5e8 <__kernel_rem_pio2+0x270>
 800d570:	2200      	movs	r2, #0
 800d572:	4b57      	ldr	r3, [pc, #348]	; (800d6d0 <__kernel_rem_pio2+0x358>)
 800d574:	0020      	movs	r0, r4
 800d576:	0029      	movs	r1, r5
 800d578:	f7f3 ff06 	bl	8001388 <__aeabi_dmul>
 800d57c:	f7f4 fd02 	bl	8001f84 <__aeabi_d2iz>
 800d580:	f7f4 fd36 	bl	8001ff0 <__aeabi_i2d>
 800d584:	2200      	movs	r2, #0
 800d586:	4b53      	ldr	r3, [pc, #332]	; (800d6d4 <__kernel_rem_pio2+0x35c>)
 800d588:	0006      	movs	r6, r0
 800d58a:	000f      	movs	r7, r1
 800d58c:	f7f3 fefc 	bl	8001388 <__aeabi_dmul>
 800d590:	0002      	movs	r2, r0
 800d592:	000b      	movs	r3, r1
 800d594:	0020      	movs	r0, r4
 800d596:	0029      	movs	r1, r5
 800d598:	f7f4 f962 	bl	8001860 <__aeabi_dsub>
 800d59c:	f7f4 fcf2 	bl	8001f84 <__aeabi_d2iz>
 800d5a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d5a4:	c301      	stmia	r3!, {r0}
 800d5a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d5a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5aa:	0030      	movs	r0, r6
 800d5ac:	3b01      	subs	r3, #1
 800d5ae:	930a      	str	r3, [sp, #40]	; 0x28
 800d5b0:	00db      	lsls	r3, r3, #3
 800d5b2:	18d3      	adds	r3, r2, r3
 800d5b4:	0039      	movs	r1, r7
 800d5b6:	681a      	ldr	r2, [r3, #0]
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	f7f2 ff75 	bl	80004a8 <__aeabi_dadd>
 800d5be:	0004      	movs	r4, r0
 800d5c0:	000d      	movs	r5, r1
 800d5c2:	e75d      	b.n	800d480 <__kernel_rem_pio2+0x108>
 800d5c4:	9b02      	ldr	r3, [sp, #8]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d107      	bne.n	800d5da <__kernel_rem_pio2+0x262>
 800d5ca:	9b04      	ldr	r3, [sp, #16]
 800d5cc:	aa12      	add	r2, sp, #72	; 0x48
 800d5ce:	3b01      	subs	r3, #1
 800d5d0:	009b      	lsls	r3, r3, #2
 800d5d2:	5898      	ldr	r0, [r3, r2]
 800d5d4:	15c3      	asrs	r3, r0, #23
 800d5d6:	930a      	str	r3, [sp, #40]	; 0x28
 800d5d8:	e795      	b.n	800d506 <__kernel_rem_pio2+0x18e>
 800d5da:	2200      	movs	r2, #0
 800d5dc:	4b3e      	ldr	r3, [pc, #248]	; (800d6d8 <__kernel_rem_pio2+0x360>)
 800d5de:	f7f2 ff3b 	bl	8000458 <__aeabi_dcmpge>
 800d5e2:	2800      	cmp	r0, #0
 800d5e4:	d136      	bne.n	800d654 <__kernel_rem_pio2+0x2dc>
 800d5e6:	900a      	str	r0, [sp, #40]	; 0x28
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	0030      	movs	r0, r6
 800d5ee:	0039      	movs	r1, r7
 800d5f0:	f7f2 ff0e 	bl	8000410 <__aeabi_dcmpeq>
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	d100      	bne.n	800d5fa <__kernel_rem_pio2+0x282>
 800d5f8:	e0b9      	b.n	800d76e <__kernel_rem_pio2+0x3f6>
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	9b04      	ldr	r3, [sp, #16]
 800d5fe:	3b01      	subs	r3, #1
 800d600:	9300      	str	r3, [sp, #0]
 800d602:	9908      	ldr	r1, [sp, #32]
 800d604:	428b      	cmp	r3, r1
 800d606:	da52      	bge.n	800d6ae <__kernel_rem_pio2+0x336>
 800d608:	2a00      	cmp	r2, #0
 800d60a:	d100      	bne.n	800d60e <__kernel_rem_pio2+0x296>
 800d60c:	e095      	b.n	800d73a <__kernel_rem_pio2+0x3c2>
 800d60e:	9b02      	ldr	r3, [sp, #8]
 800d610:	aa12      	add	r2, sp, #72	; 0x48
 800d612:	3b18      	subs	r3, #24
 800d614:	9302      	str	r3, [sp, #8]
 800d616:	9b00      	ldr	r3, [sp, #0]
 800d618:	009b      	lsls	r3, r3, #2
 800d61a:	589b      	ldr	r3, [r3, r2]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d100      	bne.n	800d622 <__kernel_rem_pio2+0x2aa>
 800d620:	e0a1      	b.n	800d766 <__kernel_rem_pio2+0x3ee>
 800d622:	2000      	movs	r0, #0
 800d624:	9a02      	ldr	r2, [sp, #8]
 800d626:	4929      	ldr	r1, [pc, #164]	; (800d6cc <__kernel_rem_pio2+0x354>)
 800d628:	f000 fb56 	bl	800dcd8 <scalbn>
 800d62c:	0006      	movs	r6, r0
 800d62e:	000f      	movs	r7, r1
 800d630:	9c00      	ldr	r4, [sp, #0]
 800d632:	2c00      	cmp	r4, #0
 800d634:	db00      	blt.n	800d638 <__kernel_rem_pio2+0x2c0>
 800d636:	e0d9      	b.n	800d7ec <__kernel_rem_pio2+0x474>
 800d638:	2600      	movs	r6, #0
 800d63a:	9d00      	ldr	r5, [sp, #0]
 800d63c:	2d00      	cmp	r5, #0
 800d63e:	da00      	bge.n	800d642 <__kernel_rem_pio2+0x2ca>
 800d640:	e10c      	b.n	800d85c <__kernel_rem_pio2+0x4e4>
 800d642:	ab76      	add	r3, sp, #472	; 0x1d8
 800d644:	00ef      	lsls	r7, r5, #3
 800d646:	2400      	movs	r4, #0
 800d648:	18ff      	adds	r7, r7, r3
 800d64a:	2300      	movs	r3, #0
 800d64c:	9302      	str	r3, [sp, #8]
 800d64e:	9403      	str	r4, [sp, #12]
 800d650:	2400      	movs	r4, #0
 800d652:	e0f4      	b.n	800d83e <__kernel_rem_pio2+0x4c6>
 800d654:	2302      	movs	r3, #2
 800d656:	930a      	str	r3, [sp, #40]	; 0x28
 800d658:	e758      	b.n	800d50c <__kernel_rem_pio2+0x194>
 800d65a:	9b00      	ldr	r3, [sp, #0]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	2c00      	cmp	r4, #0
 800d660:	d10b      	bne.n	800d67a <__kernel_rem_pio2+0x302>
 800d662:	2b00      	cmp	r3, #0
 800d664:	d003      	beq.n	800d66e <__kernel_rem_pio2+0x2f6>
 800d666:	9c00      	ldr	r4, [sp, #0]
 800d668:	1ac3      	subs	r3, r0, r3
 800d66a:	6023      	str	r3, [r4, #0]
 800d66c:	002b      	movs	r3, r5
 800d66e:	9c00      	ldr	r4, [sp, #0]
 800d670:	3201      	adds	r2, #1
 800d672:	3404      	adds	r4, #4
 800d674:	9400      	str	r4, [sp, #0]
 800d676:	001c      	movs	r4, r3
 800d678:	e752      	b.n	800d520 <__kernel_rem_pio2+0x1a8>
 800d67a:	4661      	mov	r1, ip
 800d67c:	1acb      	subs	r3, r1, r3
 800d67e:	9900      	ldr	r1, [sp, #0]
 800d680:	600b      	str	r3, [r1, #0]
 800d682:	0023      	movs	r3, r4
 800d684:	e7f3      	b.n	800d66e <__kernel_rem_pio2+0x2f6>
 800d686:	9b04      	ldr	r3, [sp, #16]
 800d688:	aa12      	add	r2, sp, #72	; 0x48
 800d68a:	3b01      	subs	r3, #1
 800d68c:	009b      	lsls	r3, r3, #2
 800d68e:	589a      	ldr	r2, [r3, r2]
 800d690:	9200      	str	r2, [sp, #0]
 800d692:	0252      	lsls	r2, r2, #9
 800d694:	0a52      	lsrs	r2, r2, #9
 800d696:	a912      	add	r1, sp, #72	; 0x48
 800d698:	505a      	str	r2, [r3, r1]
 800d69a:	e74e      	b.n	800d53a <__kernel_rem_pio2+0x1c2>
 800d69c:	9b04      	ldr	r3, [sp, #16]
 800d69e:	aa12      	add	r2, sp, #72	; 0x48
 800d6a0:	3b01      	subs	r3, #1
 800d6a2:	009b      	lsls	r3, r3, #2
 800d6a4:	589a      	ldr	r2, [r3, r2]
 800d6a6:	9200      	str	r2, [sp, #0]
 800d6a8:	0292      	lsls	r2, r2, #10
 800d6aa:	0a92      	lsrs	r2, r2, #10
 800d6ac:	e7f3      	b.n	800d696 <__kernel_rem_pio2+0x31e>
 800d6ae:	0099      	lsls	r1, r3, #2
 800d6b0:	a812      	add	r0, sp, #72	; 0x48
 800d6b2:	5809      	ldr	r1, [r1, r0]
 800d6b4:	3b01      	subs	r3, #1
 800d6b6:	430a      	orrs	r2, r1
 800d6b8:	e7a3      	b.n	800d602 <__kernel_rem_pio2+0x28a>
 800d6ba:	46c0      	nop			; (mov r8, r8)
 800d6bc:	fffffd84 	.word	0xfffffd84
 800d6c0:	08016a08 	.word	0x08016a08
 800d6c4:	40200000 	.word	0x40200000
 800d6c8:	00ffffff 	.word	0x00ffffff
 800d6cc:	3ff00000 	.word	0x3ff00000
 800d6d0:	3e700000 	.word	0x3e700000
 800d6d4:	41700000 	.word	0x41700000
 800d6d8:	3fe00000 	.word	0x3fe00000
 800d6dc:	3301      	adds	r3, #1
 800d6de:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d6e0:	009a      	lsls	r2, r3, #2
 800d6e2:	4252      	negs	r2, r2
 800d6e4:	588a      	ldr	r2, [r1, r2]
 800d6e6:	2a00      	cmp	r2, #0
 800d6e8:	d0f8      	beq.n	800d6dc <__kernel_rem_pio2+0x364>
 800d6ea:	9a04      	ldr	r2, [sp, #16]
 800d6ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d6ee:	1c57      	adds	r7, r2, #1
 800d6f0:	1854      	adds	r4, r2, r1
 800d6f2:	00e4      	lsls	r4, r4, #3
 800d6f4:	aa26      	add	r2, sp, #152	; 0x98
 800d6f6:	1914      	adds	r4, r2, r4
 800d6f8:	9a04      	ldr	r2, [sp, #16]
 800d6fa:	18d3      	adds	r3, r2, r3
 800d6fc:	9304      	str	r3, [sp, #16]
 800d6fe:	9b04      	ldr	r3, [sp, #16]
 800d700:	42bb      	cmp	r3, r7
 800d702:	da00      	bge.n	800d706 <__kernel_rem_pio2+0x38e>
 800d704:	e6b0      	b.n	800d468 <__kernel_rem_pio2+0xf0>
 800d706:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d708:	00bb      	lsls	r3, r7, #2
 800d70a:	58d0      	ldr	r0, [r2, r3]
 800d70c:	f7f4 fc70 	bl	8001ff0 <__aeabi_i2d>
 800d710:	2200      	movs	r2, #0
 800d712:	2300      	movs	r3, #0
 800d714:	0026      	movs	r6, r4
 800d716:	2500      	movs	r5, #0
 800d718:	6020      	str	r0, [r4, #0]
 800d71a:	6061      	str	r1, [r4, #4]
 800d71c:	9200      	str	r2, [sp, #0]
 800d71e:	9301      	str	r3, [sp, #4]
 800d720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d722:	429d      	cmp	r5, r3
 800d724:	dd0b      	ble.n	800d73e <__kernel_rem_pio2+0x3c6>
 800d726:	00fb      	lsls	r3, r7, #3
 800d728:	aa76      	add	r2, sp, #472	; 0x1d8
 800d72a:	18d3      	adds	r3, r2, r3
 800d72c:	3701      	adds	r7, #1
 800d72e:	9900      	ldr	r1, [sp, #0]
 800d730:	9a01      	ldr	r2, [sp, #4]
 800d732:	3408      	adds	r4, #8
 800d734:	6019      	str	r1, [r3, #0]
 800d736:	605a      	str	r2, [r3, #4]
 800d738:	e7e1      	b.n	800d6fe <__kernel_rem_pio2+0x386>
 800d73a:	2301      	movs	r3, #1
 800d73c:	e7cf      	b.n	800d6de <__kernel_rem_pio2+0x366>
 800d73e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d740:	00e9      	lsls	r1, r5, #3
 800d742:	1859      	adds	r1, r3, r1
 800d744:	6808      	ldr	r0, [r1, #0]
 800d746:	6849      	ldr	r1, [r1, #4]
 800d748:	6832      	ldr	r2, [r6, #0]
 800d74a:	6873      	ldr	r3, [r6, #4]
 800d74c:	f7f3 fe1c 	bl	8001388 <__aeabi_dmul>
 800d750:	0002      	movs	r2, r0
 800d752:	000b      	movs	r3, r1
 800d754:	9800      	ldr	r0, [sp, #0]
 800d756:	9901      	ldr	r1, [sp, #4]
 800d758:	f7f2 fea6 	bl	80004a8 <__aeabi_dadd>
 800d75c:	3501      	adds	r5, #1
 800d75e:	9000      	str	r0, [sp, #0]
 800d760:	9101      	str	r1, [sp, #4]
 800d762:	3e08      	subs	r6, #8
 800d764:	e7dc      	b.n	800d720 <__kernel_rem_pio2+0x3a8>
 800d766:	9b00      	ldr	r3, [sp, #0]
 800d768:	3b01      	subs	r3, #1
 800d76a:	9300      	str	r3, [sp, #0]
 800d76c:	e74f      	b.n	800d60e <__kernel_rem_pio2+0x296>
 800d76e:	9b02      	ldr	r3, [sp, #8]
 800d770:	0030      	movs	r0, r6
 800d772:	425a      	negs	r2, r3
 800d774:	0039      	movs	r1, r7
 800d776:	f000 faaf 	bl	800dcd8 <scalbn>
 800d77a:	2200      	movs	r2, #0
 800d77c:	4bb6      	ldr	r3, [pc, #728]	; (800da58 <__kernel_rem_pio2+0x6e0>)
 800d77e:	0004      	movs	r4, r0
 800d780:	000d      	movs	r5, r1
 800d782:	f7f2 fe69 	bl	8000458 <__aeabi_dcmpge>
 800d786:	2800      	cmp	r0, #0
 800d788:	d025      	beq.n	800d7d6 <__kernel_rem_pio2+0x45e>
 800d78a:	2200      	movs	r2, #0
 800d78c:	4bb3      	ldr	r3, [pc, #716]	; (800da5c <__kernel_rem_pio2+0x6e4>)
 800d78e:	0020      	movs	r0, r4
 800d790:	0029      	movs	r1, r5
 800d792:	f7f3 fdf9 	bl	8001388 <__aeabi_dmul>
 800d796:	f7f4 fbf5 	bl	8001f84 <__aeabi_d2iz>
 800d79a:	9b04      	ldr	r3, [sp, #16]
 800d79c:	0006      	movs	r6, r0
 800d79e:	009f      	lsls	r7, r3, #2
 800d7a0:	f7f4 fc26 	bl	8001ff0 <__aeabi_i2d>
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	4bac      	ldr	r3, [pc, #688]	; (800da58 <__kernel_rem_pio2+0x6e0>)
 800d7a8:	f7f3 fdee 	bl	8001388 <__aeabi_dmul>
 800d7ac:	0002      	movs	r2, r0
 800d7ae:	000b      	movs	r3, r1
 800d7b0:	0020      	movs	r0, r4
 800d7b2:	0029      	movs	r1, r5
 800d7b4:	f7f4 f854 	bl	8001860 <__aeabi_dsub>
 800d7b8:	f7f4 fbe4 	bl	8001f84 <__aeabi_d2iz>
 800d7bc:	ab12      	add	r3, sp, #72	; 0x48
 800d7be:	51d8      	str	r0, [r3, r7]
 800d7c0:	9b04      	ldr	r3, [sp, #16]
 800d7c2:	aa12      	add	r2, sp, #72	; 0x48
 800d7c4:	3301      	adds	r3, #1
 800d7c6:	9300      	str	r3, [sp, #0]
 800d7c8:	9b02      	ldr	r3, [sp, #8]
 800d7ca:	3318      	adds	r3, #24
 800d7cc:	9302      	str	r3, [sp, #8]
 800d7ce:	9b00      	ldr	r3, [sp, #0]
 800d7d0:	009b      	lsls	r3, r3, #2
 800d7d2:	509e      	str	r6, [r3, r2]
 800d7d4:	e725      	b.n	800d622 <__kernel_rem_pio2+0x2aa>
 800d7d6:	9b04      	ldr	r3, [sp, #16]
 800d7d8:	0020      	movs	r0, r4
 800d7da:	0029      	movs	r1, r5
 800d7dc:	009e      	lsls	r6, r3, #2
 800d7de:	f7f4 fbd1 	bl	8001f84 <__aeabi_d2iz>
 800d7e2:	ab12      	add	r3, sp, #72	; 0x48
 800d7e4:	5198      	str	r0, [r3, r6]
 800d7e6:	9b04      	ldr	r3, [sp, #16]
 800d7e8:	9300      	str	r3, [sp, #0]
 800d7ea:	e71a      	b.n	800d622 <__kernel_rem_pio2+0x2aa>
 800d7ec:	00e5      	lsls	r5, r4, #3
 800d7ee:	ab76      	add	r3, sp, #472	; 0x1d8
 800d7f0:	aa12      	add	r2, sp, #72	; 0x48
 800d7f2:	195d      	adds	r5, r3, r5
 800d7f4:	00a3      	lsls	r3, r4, #2
 800d7f6:	5898      	ldr	r0, [r3, r2]
 800d7f8:	f7f4 fbfa 	bl	8001ff0 <__aeabi_i2d>
 800d7fc:	0032      	movs	r2, r6
 800d7fe:	003b      	movs	r3, r7
 800d800:	f7f3 fdc2 	bl	8001388 <__aeabi_dmul>
 800d804:	2200      	movs	r2, #0
 800d806:	6028      	str	r0, [r5, #0]
 800d808:	6069      	str	r1, [r5, #4]
 800d80a:	4b94      	ldr	r3, [pc, #592]	; (800da5c <__kernel_rem_pio2+0x6e4>)
 800d80c:	0030      	movs	r0, r6
 800d80e:	0039      	movs	r1, r7
 800d810:	f7f3 fdba 	bl	8001388 <__aeabi_dmul>
 800d814:	3c01      	subs	r4, #1
 800d816:	0006      	movs	r6, r0
 800d818:	000f      	movs	r7, r1
 800d81a:	e70a      	b.n	800d632 <__kernel_rem_pio2+0x2ba>
 800d81c:	4b90      	ldr	r3, [pc, #576]	; (800da60 <__kernel_rem_pio2+0x6e8>)
 800d81e:	00e1      	lsls	r1, r4, #3
 800d820:	1859      	adds	r1, r3, r1
 800d822:	6808      	ldr	r0, [r1, #0]
 800d824:	6849      	ldr	r1, [r1, #4]
 800d826:	cf0c      	ldmia	r7!, {r2, r3}
 800d828:	f7f3 fdae 	bl	8001388 <__aeabi_dmul>
 800d82c:	0002      	movs	r2, r0
 800d82e:	000b      	movs	r3, r1
 800d830:	9802      	ldr	r0, [sp, #8]
 800d832:	9903      	ldr	r1, [sp, #12]
 800d834:	f7f2 fe38 	bl	80004a8 <__aeabi_dadd>
 800d838:	9002      	str	r0, [sp, #8]
 800d83a:	9103      	str	r1, [sp, #12]
 800d83c:	3401      	adds	r4, #1
 800d83e:	9b08      	ldr	r3, [sp, #32]
 800d840:	429c      	cmp	r4, r3
 800d842:	dc01      	bgt.n	800d848 <__kernel_rem_pio2+0x4d0>
 800d844:	42a6      	cmp	r6, r4
 800d846:	dae9      	bge.n	800d81c <__kernel_rem_pio2+0x4a4>
 800d848:	00f3      	lsls	r3, r6, #3
 800d84a:	aa4e      	add	r2, sp, #312	; 0x138
 800d84c:	18d3      	adds	r3, r2, r3
 800d84e:	3d01      	subs	r5, #1
 800d850:	9902      	ldr	r1, [sp, #8]
 800d852:	9a03      	ldr	r2, [sp, #12]
 800d854:	3601      	adds	r6, #1
 800d856:	6019      	str	r1, [r3, #0]
 800d858:	605a      	str	r2, [r3, #4]
 800d85a:	e6ef      	b.n	800d63c <__kernel_rem_pio2+0x2c4>
 800d85c:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d85e:	2b02      	cmp	r3, #2
 800d860:	dc0b      	bgt.n	800d87a <__kernel_rem_pio2+0x502>
 800d862:	2b00      	cmp	r3, #0
 800d864:	dd00      	ble.n	800d868 <__kernel_rem_pio2+0x4f0>
 800d866:	e08a      	b.n	800d97e <__kernel_rem_pio2+0x606>
 800d868:	d055      	beq.n	800d916 <__kernel_rem_pio2+0x59e>
 800d86a:	2007      	movs	r0, #7
 800d86c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d86e:	4003      	ands	r3, r0
 800d870:	0018      	movs	r0, r3
 800d872:	239f      	movs	r3, #159	; 0x9f
 800d874:	009b      	lsls	r3, r3, #2
 800d876:	449d      	add	sp, r3
 800d878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d87a:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d87c:	2b03      	cmp	r3, #3
 800d87e:	d1f4      	bne.n	800d86a <__kernel_rem_pio2+0x4f2>
 800d880:	9b00      	ldr	r3, [sp, #0]
 800d882:	00dc      	lsls	r4, r3, #3
 800d884:	ab4e      	add	r3, sp, #312	; 0x138
 800d886:	191c      	adds	r4, r3, r4
 800d888:	0025      	movs	r5, r4
 800d88a:	9b00      	ldr	r3, [sp, #0]
 800d88c:	9302      	str	r3, [sp, #8]
 800d88e:	9b02      	ldr	r3, [sp, #8]
 800d890:	3d08      	subs	r5, #8
 800d892:	2b00      	cmp	r3, #0
 800d894:	dd00      	ble.n	800d898 <__kernel_rem_pio2+0x520>
 800d896:	e083      	b.n	800d9a0 <__kernel_rem_pio2+0x628>
 800d898:	9d00      	ldr	r5, [sp, #0]
 800d89a:	3c08      	subs	r4, #8
 800d89c:	2d01      	cmp	r5, #1
 800d89e:	dd00      	ble.n	800d8a2 <__kernel_rem_pio2+0x52a>
 800d8a0:	e0a0      	b.n	800d9e4 <__kernel_rem_pio2+0x66c>
 800d8a2:	2400      	movs	r4, #0
 800d8a4:	0021      	movs	r1, r4
 800d8a6:	9b00      	ldr	r3, [sp, #0]
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	dd00      	ble.n	800d8ae <__kernel_rem_pio2+0x536>
 800d8ac:	e0b8      	b.n	800da20 <__kernel_rem_pio2+0x6a8>
 800d8ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8b0:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 800d8b2:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 800d8b4:	9d50      	ldr	r5, [sp, #320]	; 0x140
 800d8b6:	9851      	ldr	r0, [sp, #324]	; 0x144
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d000      	beq.n	800d8be <__kernel_rem_pio2+0x546>
 800d8bc:	e0be      	b.n	800da3c <__kernel_rem_pio2+0x6c4>
 800d8be:	0033      	movs	r3, r6
 800d8c0:	003a      	movs	r2, r7
 800d8c2:	9e07      	ldr	r6, [sp, #28]
 800d8c4:	6032      	str	r2, [r6, #0]
 800d8c6:	6073      	str	r3, [r6, #4]
 800d8c8:	002a      	movs	r2, r5
 800d8ca:	0003      	movs	r3, r0
 800d8cc:	60b2      	str	r2, [r6, #8]
 800d8ce:	60f3      	str	r3, [r6, #12]
 800d8d0:	0022      	movs	r2, r4
 800d8d2:	000b      	movs	r3, r1
 800d8d4:	6132      	str	r2, [r6, #16]
 800d8d6:	6173      	str	r3, [r6, #20]
 800d8d8:	e7c7      	b.n	800d86a <__kernel_rem_pio2+0x4f2>
 800d8da:	9b00      	ldr	r3, [sp, #0]
 800d8dc:	aa4e      	add	r2, sp, #312	; 0x138
 800d8de:	00db      	lsls	r3, r3, #3
 800d8e0:	18d3      	adds	r3, r2, r3
 800d8e2:	0028      	movs	r0, r5
 800d8e4:	681a      	ldr	r2, [r3, #0]
 800d8e6:	685b      	ldr	r3, [r3, #4]
 800d8e8:	0021      	movs	r1, r4
 800d8ea:	f7f2 fddd 	bl	80004a8 <__aeabi_dadd>
 800d8ee:	0005      	movs	r5, r0
 800d8f0:	000c      	movs	r4, r1
 800d8f2:	9b00      	ldr	r3, [sp, #0]
 800d8f4:	3b01      	subs	r3, #1
 800d8f6:	9300      	str	r3, [sp, #0]
 800d8f8:	9b00      	ldr	r3, [sp, #0]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	daed      	bge.n	800d8da <__kernel_rem_pio2+0x562>
 800d8fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d900:	2b00      	cmp	r3, #0
 800d902:	d002      	beq.n	800d90a <__kernel_rem_pio2+0x592>
 800d904:	2380      	movs	r3, #128	; 0x80
 800d906:	061b      	lsls	r3, r3, #24
 800d908:	18e4      	adds	r4, r4, r3
 800d90a:	002a      	movs	r2, r5
 800d90c:	0023      	movs	r3, r4
 800d90e:	9907      	ldr	r1, [sp, #28]
 800d910:	600a      	str	r2, [r1, #0]
 800d912:	604b      	str	r3, [r1, #4]
 800d914:	e7a9      	b.n	800d86a <__kernel_rem_pio2+0x4f2>
 800d916:	9da4      	ldr	r5, [sp, #656]	; 0x290
 800d918:	002c      	movs	r4, r5
 800d91a:	e7ed      	b.n	800d8f8 <__kernel_rem_pio2+0x580>
 800d91c:	00e3      	lsls	r3, r4, #3
 800d91e:	aa4e      	add	r2, sp, #312	; 0x138
 800d920:	18d3      	adds	r3, r2, r3
 800d922:	0030      	movs	r0, r6
 800d924:	681a      	ldr	r2, [r3, #0]
 800d926:	685b      	ldr	r3, [r3, #4]
 800d928:	0029      	movs	r1, r5
 800d92a:	f7f2 fdbd 	bl	80004a8 <__aeabi_dadd>
 800d92e:	0006      	movs	r6, r0
 800d930:	000d      	movs	r5, r1
 800d932:	3c01      	subs	r4, #1
 800d934:	2c00      	cmp	r4, #0
 800d936:	daf1      	bge.n	800d91c <__kernel_rem_pio2+0x5a4>
 800d938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d93a:	0029      	movs	r1, r5
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d002      	beq.n	800d946 <__kernel_rem_pio2+0x5ce>
 800d940:	2380      	movs	r3, #128	; 0x80
 800d942:	061b      	lsls	r3, r3, #24
 800d944:	18e9      	adds	r1, r5, r3
 800d946:	0032      	movs	r2, r6
 800d948:	000b      	movs	r3, r1
 800d94a:	9907      	ldr	r1, [sp, #28]
 800d94c:	2401      	movs	r4, #1
 800d94e:	600a      	str	r2, [r1, #0]
 800d950:	604b      	str	r3, [r1, #4]
 800d952:	984e      	ldr	r0, [sp, #312]	; 0x138
 800d954:	994f      	ldr	r1, [sp, #316]	; 0x13c
 800d956:	002b      	movs	r3, r5
 800d958:	f7f3 ff82 	bl	8001860 <__aeabi_dsub>
 800d95c:	0006      	movs	r6, r0
 800d95e:	000d      	movs	r5, r1
 800d960:	9b00      	ldr	r3, [sp, #0]
 800d962:	42a3      	cmp	r3, r4
 800d964:	da0f      	bge.n	800d986 <__kernel_rem_pio2+0x60e>
 800d966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d002      	beq.n	800d972 <__kernel_rem_pio2+0x5fa>
 800d96c:	2380      	movs	r3, #128	; 0x80
 800d96e:	061b      	lsls	r3, r3, #24
 800d970:	18ed      	adds	r5, r5, r3
 800d972:	0032      	movs	r2, r6
 800d974:	002b      	movs	r3, r5
 800d976:	9907      	ldr	r1, [sp, #28]
 800d978:	608a      	str	r2, [r1, #8]
 800d97a:	60cb      	str	r3, [r1, #12]
 800d97c:	e775      	b.n	800d86a <__kernel_rem_pio2+0x4f2>
 800d97e:	2600      	movs	r6, #0
 800d980:	9c00      	ldr	r4, [sp, #0]
 800d982:	0035      	movs	r5, r6
 800d984:	e7d6      	b.n	800d934 <__kernel_rem_pio2+0x5bc>
 800d986:	00e3      	lsls	r3, r4, #3
 800d988:	aa4e      	add	r2, sp, #312	; 0x138
 800d98a:	18d3      	adds	r3, r2, r3
 800d98c:	0030      	movs	r0, r6
 800d98e:	681a      	ldr	r2, [r3, #0]
 800d990:	685b      	ldr	r3, [r3, #4]
 800d992:	0029      	movs	r1, r5
 800d994:	f7f2 fd88 	bl	80004a8 <__aeabi_dadd>
 800d998:	3401      	adds	r4, #1
 800d99a:	0006      	movs	r6, r0
 800d99c:	000d      	movs	r5, r1
 800d99e:	e7df      	b.n	800d960 <__kernel_rem_pio2+0x5e8>
 800d9a0:	9b02      	ldr	r3, [sp, #8]
 800d9a2:	68ae      	ldr	r6, [r5, #8]
 800d9a4:	68ef      	ldr	r7, [r5, #12]
 800d9a6:	3b01      	subs	r3, #1
 800d9a8:	9302      	str	r3, [sp, #8]
 800d9aa:	682a      	ldr	r2, [r5, #0]
 800d9ac:	686b      	ldr	r3, [r5, #4]
 800d9ae:	9204      	str	r2, [sp, #16]
 800d9b0:	9305      	str	r3, [sp, #20]
 800d9b2:	9804      	ldr	r0, [sp, #16]
 800d9b4:	9905      	ldr	r1, [sp, #20]
 800d9b6:	0032      	movs	r2, r6
 800d9b8:	003b      	movs	r3, r7
 800d9ba:	f7f2 fd75 	bl	80004a8 <__aeabi_dadd>
 800d9be:	0002      	movs	r2, r0
 800d9c0:	000b      	movs	r3, r1
 800d9c2:	9008      	str	r0, [sp, #32]
 800d9c4:	9109      	str	r1, [sp, #36]	; 0x24
 800d9c6:	9804      	ldr	r0, [sp, #16]
 800d9c8:	9905      	ldr	r1, [sp, #20]
 800d9ca:	f7f3 ff49 	bl	8001860 <__aeabi_dsub>
 800d9ce:	0032      	movs	r2, r6
 800d9d0:	003b      	movs	r3, r7
 800d9d2:	f7f2 fd69 	bl	80004a8 <__aeabi_dadd>
 800d9d6:	9a08      	ldr	r2, [sp, #32]
 800d9d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9da:	60a8      	str	r0, [r5, #8]
 800d9dc:	60e9      	str	r1, [r5, #12]
 800d9de:	602a      	str	r2, [r5, #0]
 800d9e0:	606b      	str	r3, [r5, #4]
 800d9e2:	e754      	b.n	800d88e <__kernel_rem_pio2+0x516>
 800d9e4:	6826      	ldr	r6, [r4, #0]
 800d9e6:	6867      	ldr	r7, [r4, #4]
 800d9e8:	68a2      	ldr	r2, [r4, #8]
 800d9ea:	68e3      	ldr	r3, [r4, #12]
 800d9ec:	0030      	movs	r0, r6
 800d9ee:	0039      	movs	r1, r7
 800d9f0:	9202      	str	r2, [sp, #8]
 800d9f2:	9303      	str	r3, [sp, #12]
 800d9f4:	f7f2 fd58 	bl	80004a8 <__aeabi_dadd>
 800d9f8:	0002      	movs	r2, r0
 800d9fa:	000b      	movs	r3, r1
 800d9fc:	9004      	str	r0, [sp, #16]
 800d9fe:	9105      	str	r1, [sp, #20]
 800da00:	0030      	movs	r0, r6
 800da02:	0039      	movs	r1, r7
 800da04:	f7f3 ff2c 	bl	8001860 <__aeabi_dsub>
 800da08:	9a02      	ldr	r2, [sp, #8]
 800da0a:	9b03      	ldr	r3, [sp, #12]
 800da0c:	f7f2 fd4c 	bl	80004a8 <__aeabi_dadd>
 800da10:	9a04      	ldr	r2, [sp, #16]
 800da12:	9b05      	ldr	r3, [sp, #20]
 800da14:	60a0      	str	r0, [r4, #8]
 800da16:	60e1      	str	r1, [r4, #12]
 800da18:	6022      	str	r2, [r4, #0]
 800da1a:	6063      	str	r3, [r4, #4]
 800da1c:	3d01      	subs	r5, #1
 800da1e:	e73c      	b.n	800d89a <__kernel_rem_pio2+0x522>
 800da20:	9b00      	ldr	r3, [sp, #0]
 800da22:	aa4e      	add	r2, sp, #312	; 0x138
 800da24:	00db      	lsls	r3, r3, #3
 800da26:	18d3      	adds	r3, r2, r3
 800da28:	0020      	movs	r0, r4
 800da2a:	681a      	ldr	r2, [r3, #0]
 800da2c:	685b      	ldr	r3, [r3, #4]
 800da2e:	f7f2 fd3b 	bl	80004a8 <__aeabi_dadd>
 800da32:	9b00      	ldr	r3, [sp, #0]
 800da34:	0004      	movs	r4, r0
 800da36:	3b01      	subs	r3, #1
 800da38:	9300      	str	r3, [sp, #0]
 800da3a:	e734      	b.n	800d8a6 <__kernel_rem_pio2+0x52e>
 800da3c:	9b07      	ldr	r3, [sp, #28]
 800da3e:	9a07      	ldr	r2, [sp, #28]
 800da40:	601f      	str	r7, [r3, #0]
 800da42:	2380      	movs	r3, #128	; 0x80
 800da44:	061b      	lsls	r3, r3, #24
 800da46:	18f6      	adds	r6, r6, r3
 800da48:	18c0      	adds	r0, r0, r3
 800da4a:	18c9      	adds	r1, r1, r3
 800da4c:	6056      	str	r6, [r2, #4]
 800da4e:	6095      	str	r5, [r2, #8]
 800da50:	60d0      	str	r0, [r2, #12]
 800da52:	6114      	str	r4, [r2, #16]
 800da54:	6151      	str	r1, [r2, #20]
 800da56:	e708      	b.n	800d86a <__kernel_rem_pio2+0x4f2>
 800da58:	41700000 	.word	0x41700000
 800da5c:	3e700000 	.word	0x3e700000
 800da60:	080169c8 	.word	0x080169c8

0800da64 <__kernel_sin>:
 800da64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da66:	b089      	sub	sp, #36	; 0x24
 800da68:	9202      	str	r2, [sp, #8]
 800da6a:	9303      	str	r3, [sp, #12]
 800da6c:	22f9      	movs	r2, #249	; 0xf9
 800da6e:	004b      	lsls	r3, r1, #1
 800da70:	0007      	movs	r7, r0
 800da72:	000e      	movs	r6, r1
 800da74:	085b      	lsrs	r3, r3, #1
 800da76:	0592      	lsls	r2, r2, #22
 800da78:	4293      	cmp	r3, r2
 800da7a:	da03      	bge.n	800da84 <__kernel_sin+0x20>
 800da7c:	f7f4 fa82 	bl	8001f84 <__aeabi_d2iz>
 800da80:	2800      	cmp	r0, #0
 800da82:	d04c      	beq.n	800db1e <__kernel_sin+0xba>
 800da84:	003a      	movs	r2, r7
 800da86:	0033      	movs	r3, r6
 800da88:	0038      	movs	r0, r7
 800da8a:	0031      	movs	r1, r6
 800da8c:	f7f3 fc7c 	bl	8001388 <__aeabi_dmul>
 800da90:	0004      	movs	r4, r0
 800da92:	000d      	movs	r5, r1
 800da94:	0002      	movs	r2, r0
 800da96:	000b      	movs	r3, r1
 800da98:	0038      	movs	r0, r7
 800da9a:	0031      	movs	r1, r6
 800da9c:	f7f3 fc74 	bl	8001388 <__aeabi_dmul>
 800daa0:	4a39      	ldr	r2, [pc, #228]	; (800db88 <__kernel_sin+0x124>)
 800daa2:	9000      	str	r0, [sp, #0]
 800daa4:	9101      	str	r1, [sp, #4]
 800daa6:	4b39      	ldr	r3, [pc, #228]	; (800db8c <__kernel_sin+0x128>)
 800daa8:	0020      	movs	r0, r4
 800daaa:	0029      	movs	r1, r5
 800daac:	f7f3 fc6c 	bl	8001388 <__aeabi_dmul>
 800dab0:	4a37      	ldr	r2, [pc, #220]	; (800db90 <__kernel_sin+0x12c>)
 800dab2:	4b38      	ldr	r3, [pc, #224]	; (800db94 <__kernel_sin+0x130>)
 800dab4:	f7f3 fed4 	bl	8001860 <__aeabi_dsub>
 800dab8:	0022      	movs	r2, r4
 800daba:	002b      	movs	r3, r5
 800dabc:	f7f3 fc64 	bl	8001388 <__aeabi_dmul>
 800dac0:	4a35      	ldr	r2, [pc, #212]	; (800db98 <__kernel_sin+0x134>)
 800dac2:	4b36      	ldr	r3, [pc, #216]	; (800db9c <__kernel_sin+0x138>)
 800dac4:	f7f2 fcf0 	bl	80004a8 <__aeabi_dadd>
 800dac8:	0022      	movs	r2, r4
 800daca:	002b      	movs	r3, r5
 800dacc:	f7f3 fc5c 	bl	8001388 <__aeabi_dmul>
 800dad0:	4a33      	ldr	r2, [pc, #204]	; (800dba0 <__kernel_sin+0x13c>)
 800dad2:	4b34      	ldr	r3, [pc, #208]	; (800dba4 <__kernel_sin+0x140>)
 800dad4:	f7f3 fec4 	bl	8001860 <__aeabi_dsub>
 800dad8:	0022      	movs	r2, r4
 800dada:	002b      	movs	r3, r5
 800dadc:	f7f3 fc54 	bl	8001388 <__aeabi_dmul>
 800dae0:	4b31      	ldr	r3, [pc, #196]	; (800dba8 <__kernel_sin+0x144>)
 800dae2:	4a32      	ldr	r2, [pc, #200]	; (800dbac <__kernel_sin+0x148>)
 800dae4:	f7f2 fce0 	bl	80004a8 <__aeabi_dadd>
 800dae8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800daea:	9004      	str	r0, [sp, #16]
 800daec:	9105      	str	r1, [sp, #20]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d119      	bne.n	800db26 <__kernel_sin+0xc2>
 800daf2:	0002      	movs	r2, r0
 800daf4:	000b      	movs	r3, r1
 800daf6:	0020      	movs	r0, r4
 800daf8:	0029      	movs	r1, r5
 800dafa:	f7f3 fc45 	bl	8001388 <__aeabi_dmul>
 800dafe:	4a2c      	ldr	r2, [pc, #176]	; (800dbb0 <__kernel_sin+0x14c>)
 800db00:	4b2c      	ldr	r3, [pc, #176]	; (800dbb4 <__kernel_sin+0x150>)
 800db02:	f7f3 fead 	bl	8001860 <__aeabi_dsub>
 800db06:	9a00      	ldr	r2, [sp, #0]
 800db08:	9b01      	ldr	r3, [sp, #4]
 800db0a:	f7f3 fc3d 	bl	8001388 <__aeabi_dmul>
 800db0e:	0002      	movs	r2, r0
 800db10:	000b      	movs	r3, r1
 800db12:	0038      	movs	r0, r7
 800db14:	0031      	movs	r1, r6
 800db16:	f7f2 fcc7 	bl	80004a8 <__aeabi_dadd>
 800db1a:	0007      	movs	r7, r0
 800db1c:	000e      	movs	r6, r1
 800db1e:	0038      	movs	r0, r7
 800db20:	0031      	movs	r1, r6
 800db22:	b009      	add	sp, #36	; 0x24
 800db24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db26:	2200      	movs	r2, #0
 800db28:	9802      	ldr	r0, [sp, #8]
 800db2a:	9903      	ldr	r1, [sp, #12]
 800db2c:	4b22      	ldr	r3, [pc, #136]	; (800dbb8 <__kernel_sin+0x154>)
 800db2e:	f7f3 fc2b 	bl	8001388 <__aeabi_dmul>
 800db32:	9a04      	ldr	r2, [sp, #16]
 800db34:	9b05      	ldr	r3, [sp, #20]
 800db36:	9006      	str	r0, [sp, #24]
 800db38:	9107      	str	r1, [sp, #28]
 800db3a:	9800      	ldr	r0, [sp, #0]
 800db3c:	9901      	ldr	r1, [sp, #4]
 800db3e:	f7f3 fc23 	bl	8001388 <__aeabi_dmul>
 800db42:	0002      	movs	r2, r0
 800db44:	000b      	movs	r3, r1
 800db46:	9806      	ldr	r0, [sp, #24]
 800db48:	9907      	ldr	r1, [sp, #28]
 800db4a:	f7f3 fe89 	bl	8001860 <__aeabi_dsub>
 800db4e:	0022      	movs	r2, r4
 800db50:	002b      	movs	r3, r5
 800db52:	f7f3 fc19 	bl	8001388 <__aeabi_dmul>
 800db56:	9a02      	ldr	r2, [sp, #8]
 800db58:	9b03      	ldr	r3, [sp, #12]
 800db5a:	f7f3 fe81 	bl	8001860 <__aeabi_dsub>
 800db5e:	4a14      	ldr	r2, [pc, #80]	; (800dbb0 <__kernel_sin+0x14c>)
 800db60:	0004      	movs	r4, r0
 800db62:	000d      	movs	r5, r1
 800db64:	9800      	ldr	r0, [sp, #0]
 800db66:	9901      	ldr	r1, [sp, #4]
 800db68:	4b12      	ldr	r3, [pc, #72]	; (800dbb4 <__kernel_sin+0x150>)
 800db6a:	f7f3 fc0d 	bl	8001388 <__aeabi_dmul>
 800db6e:	0002      	movs	r2, r0
 800db70:	000b      	movs	r3, r1
 800db72:	0020      	movs	r0, r4
 800db74:	0029      	movs	r1, r5
 800db76:	f7f2 fc97 	bl	80004a8 <__aeabi_dadd>
 800db7a:	0002      	movs	r2, r0
 800db7c:	000b      	movs	r3, r1
 800db7e:	0038      	movs	r0, r7
 800db80:	0031      	movs	r1, r6
 800db82:	f7f3 fe6d 	bl	8001860 <__aeabi_dsub>
 800db86:	e7c8      	b.n	800db1a <__kernel_sin+0xb6>
 800db88:	5acfd57c 	.word	0x5acfd57c
 800db8c:	3de5d93a 	.word	0x3de5d93a
 800db90:	8a2b9ceb 	.word	0x8a2b9ceb
 800db94:	3e5ae5e6 	.word	0x3e5ae5e6
 800db98:	57b1fe7d 	.word	0x57b1fe7d
 800db9c:	3ec71de3 	.word	0x3ec71de3
 800dba0:	19c161d5 	.word	0x19c161d5
 800dba4:	3f2a01a0 	.word	0x3f2a01a0
 800dba8:	3f811111 	.word	0x3f811111
 800dbac:	1110f8a6 	.word	0x1110f8a6
 800dbb0:	55555549 	.word	0x55555549
 800dbb4:	3fc55555 	.word	0x3fc55555
 800dbb8:	3fe00000 	.word	0x3fe00000

0800dbbc <fabs>:
 800dbbc:	004b      	lsls	r3, r1, #1
 800dbbe:	0859      	lsrs	r1, r3, #1
 800dbc0:	4770      	bx	lr
	...

0800dbc4 <floor>:
 800dbc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dbc6:	004b      	lsls	r3, r1, #1
 800dbc8:	4a3d      	ldr	r2, [pc, #244]	; (800dcc0 <floor+0xfc>)
 800dbca:	0d5b      	lsrs	r3, r3, #21
 800dbcc:	189f      	adds	r7, r3, r2
 800dbce:	4684      	mov	ip, r0
 800dbd0:	000e      	movs	r6, r1
 800dbd2:	000d      	movs	r5, r1
 800dbd4:	0004      	movs	r4, r0
 800dbd6:	9001      	str	r0, [sp, #4]
 800dbd8:	2f13      	cmp	r7, #19
 800dbda:	dc34      	bgt.n	800dc46 <floor+0x82>
 800dbdc:	2f00      	cmp	r7, #0
 800dbde:	da16      	bge.n	800dc0e <floor+0x4a>
 800dbe0:	4a38      	ldr	r2, [pc, #224]	; (800dcc4 <floor+0x100>)
 800dbe2:	4b39      	ldr	r3, [pc, #228]	; (800dcc8 <floor+0x104>)
 800dbe4:	4660      	mov	r0, ip
 800dbe6:	0031      	movs	r1, r6
 800dbe8:	f7f2 fc5e 	bl	80004a8 <__aeabi_dadd>
 800dbec:	2200      	movs	r2, #0
 800dbee:	2300      	movs	r3, #0
 800dbf0:	f7f2 fc28 	bl	8000444 <__aeabi_dcmpgt>
 800dbf4:	2800      	cmp	r0, #0
 800dbf6:	d007      	beq.n	800dc08 <floor+0x44>
 800dbf8:	2e00      	cmp	r6, #0
 800dbfa:	da5d      	bge.n	800dcb8 <floor+0xf4>
 800dbfc:	0073      	lsls	r3, r6, #1
 800dbfe:	085b      	lsrs	r3, r3, #1
 800dc00:	431c      	orrs	r4, r3
 800dc02:	d001      	beq.n	800dc08 <floor+0x44>
 800dc04:	2400      	movs	r4, #0
 800dc06:	4d31      	ldr	r5, [pc, #196]	; (800dccc <floor+0x108>)
 800dc08:	46a4      	mov	ip, r4
 800dc0a:	002e      	movs	r6, r5
 800dc0c:	e029      	b.n	800dc62 <floor+0x9e>
 800dc0e:	4b30      	ldr	r3, [pc, #192]	; (800dcd0 <floor+0x10c>)
 800dc10:	413b      	asrs	r3, r7
 800dc12:	9300      	str	r3, [sp, #0]
 800dc14:	400b      	ands	r3, r1
 800dc16:	4303      	orrs	r3, r0
 800dc18:	d023      	beq.n	800dc62 <floor+0x9e>
 800dc1a:	4a2a      	ldr	r2, [pc, #168]	; (800dcc4 <floor+0x100>)
 800dc1c:	4b2a      	ldr	r3, [pc, #168]	; (800dcc8 <floor+0x104>)
 800dc1e:	4660      	mov	r0, ip
 800dc20:	0031      	movs	r1, r6
 800dc22:	f7f2 fc41 	bl	80004a8 <__aeabi_dadd>
 800dc26:	2200      	movs	r2, #0
 800dc28:	2300      	movs	r3, #0
 800dc2a:	f7f2 fc0b 	bl	8000444 <__aeabi_dcmpgt>
 800dc2e:	2800      	cmp	r0, #0
 800dc30:	d0ea      	beq.n	800dc08 <floor+0x44>
 800dc32:	2e00      	cmp	r6, #0
 800dc34:	da03      	bge.n	800dc3e <floor+0x7a>
 800dc36:	2380      	movs	r3, #128	; 0x80
 800dc38:	035b      	lsls	r3, r3, #13
 800dc3a:	413b      	asrs	r3, r7
 800dc3c:	18f5      	adds	r5, r6, r3
 800dc3e:	9b00      	ldr	r3, [sp, #0]
 800dc40:	2400      	movs	r4, #0
 800dc42:	439d      	bics	r5, r3
 800dc44:	e7e0      	b.n	800dc08 <floor+0x44>
 800dc46:	2f33      	cmp	r7, #51	; 0x33
 800dc48:	dd0f      	ble.n	800dc6a <floor+0xa6>
 800dc4a:	2380      	movs	r3, #128	; 0x80
 800dc4c:	00db      	lsls	r3, r3, #3
 800dc4e:	429f      	cmp	r7, r3
 800dc50:	d107      	bne.n	800dc62 <floor+0x9e>
 800dc52:	0002      	movs	r2, r0
 800dc54:	000b      	movs	r3, r1
 800dc56:	4660      	mov	r0, ip
 800dc58:	0031      	movs	r1, r6
 800dc5a:	f7f2 fc25 	bl	80004a8 <__aeabi_dadd>
 800dc5e:	4684      	mov	ip, r0
 800dc60:	000e      	movs	r6, r1
 800dc62:	4660      	mov	r0, ip
 800dc64:	0031      	movs	r1, r6
 800dc66:	b003      	add	sp, #12
 800dc68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc6a:	4a1a      	ldr	r2, [pc, #104]	; (800dcd4 <floor+0x110>)
 800dc6c:	189b      	adds	r3, r3, r2
 800dc6e:	2201      	movs	r2, #1
 800dc70:	4252      	negs	r2, r2
 800dc72:	40da      	lsrs	r2, r3
 800dc74:	9200      	str	r2, [sp, #0]
 800dc76:	4210      	tst	r0, r2
 800dc78:	d0f3      	beq.n	800dc62 <floor+0x9e>
 800dc7a:	4a12      	ldr	r2, [pc, #72]	; (800dcc4 <floor+0x100>)
 800dc7c:	4b12      	ldr	r3, [pc, #72]	; (800dcc8 <floor+0x104>)
 800dc7e:	4660      	mov	r0, ip
 800dc80:	0031      	movs	r1, r6
 800dc82:	f7f2 fc11 	bl	80004a8 <__aeabi_dadd>
 800dc86:	2200      	movs	r2, #0
 800dc88:	2300      	movs	r3, #0
 800dc8a:	f7f2 fbdb 	bl	8000444 <__aeabi_dcmpgt>
 800dc8e:	2800      	cmp	r0, #0
 800dc90:	d0ba      	beq.n	800dc08 <floor+0x44>
 800dc92:	2e00      	cmp	r6, #0
 800dc94:	da02      	bge.n	800dc9c <floor+0xd8>
 800dc96:	2f14      	cmp	r7, #20
 800dc98:	d103      	bne.n	800dca2 <floor+0xde>
 800dc9a:	3501      	adds	r5, #1
 800dc9c:	9b00      	ldr	r3, [sp, #0]
 800dc9e:	439c      	bics	r4, r3
 800dca0:	e7b2      	b.n	800dc08 <floor+0x44>
 800dca2:	2334      	movs	r3, #52	; 0x34
 800dca4:	1bdf      	subs	r7, r3, r7
 800dca6:	3b33      	subs	r3, #51	; 0x33
 800dca8:	40bb      	lsls	r3, r7
 800dcaa:	18e4      	adds	r4, r4, r3
 800dcac:	9b01      	ldr	r3, [sp, #4]
 800dcae:	429c      	cmp	r4, r3
 800dcb0:	419b      	sbcs	r3, r3
 800dcb2:	425b      	negs	r3, r3
 800dcb4:	18f5      	adds	r5, r6, r3
 800dcb6:	e7f1      	b.n	800dc9c <floor+0xd8>
 800dcb8:	2400      	movs	r4, #0
 800dcba:	0025      	movs	r5, r4
 800dcbc:	e7a4      	b.n	800dc08 <floor+0x44>
 800dcbe:	46c0      	nop			; (mov r8, r8)
 800dcc0:	fffffc01 	.word	0xfffffc01
 800dcc4:	8800759c 	.word	0x8800759c
 800dcc8:	7e37e43c 	.word	0x7e37e43c
 800dccc:	bff00000 	.word	0xbff00000
 800dcd0:	000fffff 	.word	0x000fffff
 800dcd4:	fffffbed 	.word	0xfffffbed

0800dcd8 <scalbn>:
 800dcd8:	004b      	lsls	r3, r1, #1
 800dcda:	b570      	push	{r4, r5, r6, lr}
 800dcdc:	0d5b      	lsrs	r3, r3, #21
 800dcde:	0014      	movs	r4, r2
 800dce0:	000a      	movs	r2, r1
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d10d      	bne.n	800dd02 <scalbn+0x2a>
 800dce6:	004b      	lsls	r3, r1, #1
 800dce8:	085b      	lsrs	r3, r3, #1
 800dcea:	4303      	orrs	r3, r0
 800dcec:	d010      	beq.n	800dd10 <scalbn+0x38>
 800dcee:	4b27      	ldr	r3, [pc, #156]	; (800dd8c <scalbn+0xb4>)
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	f7f3 fb49 	bl	8001388 <__aeabi_dmul>
 800dcf6:	4b26      	ldr	r3, [pc, #152]	; (800dd90 <scalbn+0xb8>)
 800dcf8:	429c      	cmp	r4, r3
 800dcfa:	da0a      	bge.n	800dd12 <scalbn+0x3a>
 800dcfc:	4a25      	ldr	r2, [pc, #148]	; (800dd94 <scalbn+0xbc>)
 800dcfe:	4b26      	ldr	r3, [pc, #152]	; (800dd98 <scalbn+0xc0>)
 800dd00:	e019      	b.n	800dd36 <scalbn+0x5e>
 800dd02:	4d26      	ldr	r5, [pc, #152]	; (800dd9c <scalbn+0xc4>)
 800dd04:	42ab      	cmp	r3, r5
 800dd06:	d108      	bne.n	800dd1a <scalbn+0x42>
 800dd08:	0002      	movs	r2, r0
 800dd0a:	000b      	movs	r3, r1
 800dd0c:	f7f2 fbcc 	bl	80004a8 <__aeabi_dadd>
 800dd10:	bd70      	pop	{r4, r5, r6, pc}
 800dd12:	000a      	movs	r2, r1
 800dd14:	004b      	lsls	r3, r1, #1
 800dd16:	0d5b      	lsrs	r3, r3, #21
 800dd18:	3b36      	subs	r3, #54	; 0x36
 800dd1a:	4d21      	ldr	r5, [pc, #132]	; (800dda0 <scalbn+0xc8>)
 800dd1c:	18e3      	adds	r3, r4, r3
 800dd1e:	42ab      	cmp	r3, r5
 800dd20:	dd0c      	ble.n	800dd3c <scalbn+0x64>
 800dd22:	4c20      	ldr	r4, [pc, #128]	; (800dda4 <scalbn+0xcc>)
 800dd24:	4d20      	ldr	r5, [pc, #128]	; (800dda8 <scalbn+0xd0>)
 800dd26:	2900      	cmp	r1, #0
 800dd28:	da01      	bge.n	800dd2e <scalbn+0x56>
 800dd2a:	4c1e      	ldr	r4, [pc, #120]	; (800dda4 <scalbn+0xcc>)
 800dd2c:	4d1f      	ldr	r5, [pc, #124]	; (800ddac <scalbn+0xd4>)
 800dd2e:	0020      	movs	r0, r4
 800dd30:	0029      	movs	r1, r5
 800dd32:	4a1c      	ldr	r2, [pc, #112]	; (800dda4 <scalbn+0xcc>)
 800dd34:	4b1c      	ldr	r3, [pc, #112]	; (800dda8 <scalbn+0xd0>)
 800dd36:	f7f3 fb27 	bl	8001388 <__aeabi_dmul>
 800dd3a:	e7e9      	b.n	800dd10 <scalbn+0x38>
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	dd05      	ble.n	800dd4c <scalbn+0x74>
 800dd40:	4c1b      	ldr	r4, [pc, #108]	; (800ddb0 <scalbn+0xd8>)
 800dd42:	051b      	lsls	r3, r3, #20
 800dd44:	4022      	ands	r2, r4
 800dd46:	431a      	orrs	r2, r3
 800dd48:	0011      	movs	r1, r2
 800dd4a:	e7e1      	b.n	800dd10 <scalbn+0x38>
 800dd4c:	001d      	movs	r5, r3
 800dd4e:	3535      	adds	r5, #53	; 0x35
 800dd50:	da13      	bge.n	800dd7a <scalbn+0xa2>
 800dd52:	4a18      	ldr	r2, [pc, #96]	; (800ddb4 <scalbn+0xdc>)
 800dd54:	0fcb      	lsrs	r3, r1, #31
 800dd56:	4294      	cmp	r4, r2
 800dd58:	dd08      	ble.n	800dd6c <scalbn+0x94>
 800dd5a:	4812      	ldr	r0, [pc, #72]	; (800dda4 <scalbn+0xcc>)
 800dd5c:	4912      	ldr	r1, [pc, #72]	; (800dda8 <scalbn+0xd0>)
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d001      	beq.n	800dd66 <scalbn+0x8e>
 800dd62:	4810      	ldr	r0, [pc, #64]	; (800dda4 <scalbn+0xcc>)
 800dd64:	4911      	ldr	r1, [pc, #68]	; (800ddac <scalbn+0xd4>)
 800dd66:	4a0f      	ldr	r2, [pc, #60]	; (800dda4 <scalbn+0xcc>)
 800dd68:	4b0f      	ldr	r3, [pc, #60]	; (800dda8 <scalbn+0xd0>)
 800dd6a:	e7e4      	b.n	800dd36 <scalbn+0x5e>
 800dd6c:	4809      	ldr	r0, [pc, #36]	; (800dd94 <scalbn+0xbc>)
 800dd6e:	490a      	ldr	r1, [pc, #40]	; (800dd98 <scalbn+0xc0>)
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d0c3      	beq.n	800dcfc <scalbn+0x24>
 800dd74:	4807      	ldr	r0, [pc, #28]	; (800dd94 <scalbn+0xbc>)
 800dd76:	4910      	ldr	r1, [pc, #64]	; (800ddb8 <scalbn+0xe0>)
 800dd78:	e7c0      	b.n	800dcfc <scalbn+0x24>
 800dd7a:	4c0d      	ldr	r4, [pc, #52]	; (800ddb0 <scalbn+0xd8>)
 800dd7c:	3336      	adds	r3, #54	; 0x36
 800dd7e:	4022      	ands	r2, r4
 800dd80:	051b      	lsls	r3, r3, #20
 800dd82:	4313      	orrs	r3, r2
 800dd84:	0019      	movs	r1, r3
 800dd86:	2200      	movs	r2, #0
 800dd88:	4b0c      	ldr	r3, [pc, #48]	; (800ddbc <scalbn+0xe4>)
 800dd8a:	e7d4      	b.n	800dd36 <scalbn+0x5e>
 800dd8c:	43500000 	.word	0x43500000
 800dd90:	ffff3cb0 	.word	0xffff3cb0
 800dd94:	c2f8f359 	.word	0xc2f8f359
 800dd98:	01a56e1f 	.word	0x01a56e1f
 800dd9c:	000007ff 	.word	0x000007ff
 800dda0:	000007fe 	.word	0x000007fe
 800dda4:	8800759c 	.word	0x8800759c
 800dda8:	7e37e43c 	.word	0x7e37e43c
 800ddac:	fe37e43c 	.word	0xfe37e43c
 800ddb0:	800fffff 	.word	0x800fffff
 800ddb4:	0000c350 	.word	0x0000c350
 800ddb8:	81a56e1f 	.word	0x81a56e1f
 800ddbc:	3c900000 	.word	0x3c900000

0800ddc0 <_init>:
 800ddc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddc2:	46c0      	nop			; (mov r8, r8)
 800ddc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddc6:	bc08      	pop	{r3}
 800ddc8:	469e      	mov	lr, r3
 800ddca:	4770      	bx	lr

0800ddcc <_fini>:
 800ddcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddce:	46c0      	nop			; (mov r8, r8)
 800ddd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddd2:	bc08      	pop	{r3}
 800ddd4:	469e      	mov	lr, r3
 800ddd6:	4770      	bx	lr
