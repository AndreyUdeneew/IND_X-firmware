
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5e4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800a6a0  0800a6a0  0001a6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a788  0800a788  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800a788  0800a788  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a788  0800a788  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a788  0800a788  0001a788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a78c  0800a78c  0001a78c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022c4  20000070  0800a800  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002334  0800a800  00022334  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000191b5  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000355c  00000000  00000000  0003924d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001908  00000000  00000000  0003c7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001790  00000000  00000000  0003e0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca4e  00000000  00000000  0003f848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c5b4  00000000  00000000  0005c296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0168  00000000  00000000  0007884a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001289b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bc4  00000000  00000000  00128a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800a688 	.word	0x0800a688

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	0800a688 	.word	0x0800a688

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}

08000348 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <LL_USART_DisableFIFO+0x1c>)
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	dfffffff 	.word	0xdfffffff

08000368 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b086      	sub	sp, #24
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000372:	f3ef 8310 	mrs	r3, PRIMASK
 8000376:	60bb      	str	r3, [r7, #8]
  return(result);
 8000378:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800037a:	617b      	str	r3, [r7, #20]
 800037c:	2301      	movs	r3, #1
 800037e:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f383 8810 	msr	PRIMASK, r3
}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	00db      	lsls	r3, r3, #3
 800038e:	08da      	lsrs	r2, r3, #3
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	075b      	lsls	r3, r3, #29
 8000394:	431a      	orrs	r2, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	697b      	ldr	r3, [r7, #20]
 800039c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800039e:	693b      	ldr	r3, [r7, #16]
 80003a0:	f383 8810 	msr	PRIMASK, r3
}
 80003a4:	46c0      	nop			; (mov r8, r8)
}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	b006      	add	sp, #24
 80003ac:	bd80      	pop	{r7, pc}
	...

080003b0 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80003ba:	f3ef 8310 	mrs	r3, PRIMASK
 80003be:	60bb      	str	r3, [r7, #8]
  return(result);
 80003c0:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80003c2:	617b      	str	r3, [r7, #20]
 80003c4:	2301      	movs	r3, #1
 80003c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f383 8810 	msr	PRIMASK, r3
}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	689b      	ldr	r3, [r3, #8]
 80003d4:	4a08      	ldr	r2, [pc, #32]	; (80003f8 <LL_USART_SetRXFIFOThreshold+0x48>)
 80003d6:	401a      	ands	r2, r3
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	065b      	lsls	r3, r3, #25
 80003dc:	431a      	orrs	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	f383 8810 	msr	PRIMASK, r3
}
 80003ec:	46c0      	nop			; (mov r8, r8)
}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b006      	add	sp, #24
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	f1ffffff 	.word	0xf1ffffff

080003fc <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	4a07      	ldr	r2, [pc, #28]	; (8000428 <LL_USART_ConfigAsyncMode+0x2c>)
 800040a:	401a      	ands	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	689b      	ldr	r3, [r3, #8]
 8000414:	222a      	movs	r2, #42	; 0x2a
 8000416:	4393      	bics	r3, r2
 8000418:	001a      	movs	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	609a      	str	r2, [r3, #8]
}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b002      	add	sp, #8
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffb7ff 	.word	0xffffb7ff

0800042c <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	69da      	ldr	r2, [r3, #28]
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	039b      	lsls	r3, r3, #14
 800043c:	401a      	ands	r2, r3
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	039b      	lsls	r3, r3, #14
 8000442:	429a      	cmp	r2, r3
 8000444:	d101      	bne.n	800044a <LL_USART_IsActiveFlag_TEACK+0x1e>
 8000446:	2301      	movs	r3, #1
 8000448:	e000      	b.n	800044c <LL_USART_IsActiveFlag_TEACK+0x20>
 800044a:	2300      	movs	r3, #0
}
 800044c:	0018      	movs	r0, r3
 800044e:	46bd      	mov	sp, r7
 8000450:	b002      	add	sp, #8
 8000452:	bd80      	pop	{r7, pc}

08000454 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	69da      	ldr	r2, [r3, #28]
 8000460:	2380      	movs	r3, #128	; 0x80
 8000462:	03db      	lsls	r3, r3, #15
 8000464:	401a      	ands	r2, r3
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	03db      	lsls	r3, r3, #15
 800046a:	429a      	cmp	r2, r3
 800046c:	d101      	bne.n	8000472 <LL_USART_IsActiveFlag_REACK+0x1e>
 800046e:	2301      	movs	r3, #1
 8000470:	e000      	b.n	8000474 <LL_USART_IsActiveFlag_REACK+0x20>
 8000472:	2300      	movs	r3, #0
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	b002      	add	sp, #8
 800047a:	bd80      	pop	{r7, pc}

0800047c <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000484:	f3ef 8310 	mrs	r3, PRIMASK
 8000488:	60bb      	str	r3, [r7, #8]
  return(result);
 800048a:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800048c:	617b      	str	r3, [r7, #20]
 800048e:	2301      	movs	r3, #1
 8000490:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	f383 8810 	msr	PRIMASK, r3
}
 8000498:	46c0      	nop			; (mov r8, r8)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2220      	movs	r2, #32
 80004a0:	431a      	orrs	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	f383 8810 	msr	PRIMASK, r3
}
 80004b0:	46c0      	nop			; (mov r8, r8)
}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b006      	add	sp, #24
 80004b8:	bd80      	pop	{r7, pc}

080004ba <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b086      	sub	sp, #24
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80004c2:	f3ef 8310 	mrs	r3, PRIMASK
 80004c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80004c8:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80004ca:	617b      	str	r3, [r7, #20]
 80004cc:	2301      	movs	r3, #1
 80004ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	f383 8810 	msr	PRIMASK, r3
}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	2201      	movs	r2, #1
 80004de:	431a      	orrs	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004e8:	693b      	ldr	r3, [r7, #16]
 80004ea:	f383 8810 	msr	PRIMASK, r3
}
 80004ee:	46c0      	nop			; (mov r8, r8)
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b006      	add	sp, #24
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000504:	b29b      	uxth	r3, r3
 8000506:	05db      	lsls	r3, r3, #23
 8000508:	0ddb      	lsrs	r3, r3, #23
 800050a:	b29b      	uxth	r3, r3
}
 800050c:	0018      	movs	r0, r3
 800050e:	46bd      	mov	sp, r7
 8000510:	b002      	add	sp, #8
 8000512:	bd80      	pop	{r7, pc}

08000514 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 800051c:	4b04      	ldr	r3, [pc, #16]	; (8000530 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 800051e:	6819      	ldr	r1, [r3, #0]
 8000520:	4b03      	ldr	r3, [pc, #12]	; (8000530 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	430a      	orrs	r2, r1
 8000526:	601a      	str	r2, [r3, #0]
}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b002      	add	sp, #8
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40010000 	.word	0x40010000

08000534 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	619a      	str	r2, [r3, #24]
}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b002      	add	sp, #8
 800054a:	bd80      	pop	{r7, pc}

0800054c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	683a      	ldr	r2, [r7, #0]
 800055a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b002      	add	sp, #8
 8000562:	bd80      	pop	{r7, pc}

08000564 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 800056c:	4b07      	ldr	r3, [pc, #28]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 800056e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	430a      	orrs	r2, r1
 8000576:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 800057a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	4013      	ands	r3, r2
 8000580:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000582:	68fb      	ldr	r3, [r7, #12]
}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b004      	add	sp, #16
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40021000 	.word	0x40021000

08000590 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 800059a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	430a      	orrs	r2, r1
 80005a2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 80005a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4013      	ands	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ae:	68fb      	ldr	r3, [r7, #12]
}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b004      	add	sp, #16
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40021000 	.word	0x40021000

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b08d      	sub	sp, #52	; 0x34
 80005c0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 80005c2:	2324      	movs	r3, #36	; 0x24
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	2200      	movs	r2, #0
 80005c8:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 80005ca:	2322      	movs	r3, #34	; 0x22
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	2200      	movs	r2, #0
 80005d0:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 80005d2:	2320      	movs	r3, #32
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	2200      	movs	r2, #0
 80005d8:	801a      	strh	r2, [r3, #0]
	uint16_t beep1 = 0x0000;
 80005da:	231e      	movs	r3, #30
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	2200      	movs	r2, #0
 80005e0:	801a      	strh	r2, [r3, #0]
	uint16_t beep2 = 0xFFFF;
 80005e2:	231c      	movs	r3, #28
 80005e4:	18fb      	adds	r3, r7, r3
 80005e6:	2201      	movs	r2, #1
 80005e8:	4252      	negs	r2, r2
 80005ea:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f002 fd2e 	bl	800304c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f8f6 	bl	80007e0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005f4:	4b74      	ldr	r3, [pc, #464]	; (80007c8 <main+0x20c>)
 80005f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005f8:	4b73      	ldr	r3, [pc, #460]	; (80007c8 <main+0x20c>)
 80005fa:	2101      	movs	r1, #1
 80005fc:	430a      	orrs	r2, r1
 80005fe:	635a      	str	r2, [r3, #52]	; 0x34
 8000600:	4b71      	ldr	r3, [pc, #452]	; (80007c8 <main+0x20c>)
 8000602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000604:	2201      	movs	r2, #1
 8000606:	4013      	ands	r3, r2
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800060c:	4b6e      	ldr	r3, [pc, #440]	; (80007c8 <main+0x20c>)
 800060e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000610:	4b6d      	ldr	r3, [pc, #436]	; (80007c8 <main+0x20c>)
 8000612:	2102      	movs	r1, #2
 8000614:	430a      	orrs	r2, r1
 8000616:	635a      	str	r2, [r3, #52]	; 0x34
 8000618:	4b6b      	ldr	r3, [pc, #428]	; (80007c8 <main+0x20c>)
 800061a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800061c:	2202      	movs	r2, #2
 800061e:	4013      	ands	r3, r2
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000624:	4b68      	ldr	r3, [pc, #416]	; (80007c8 <main+0x20c>)
 8000626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000628:	4b67      	ldr	r3, [pc, #412]	; (80007c8 <main+0x20c>)
 800062a:	2104      	movs	r1, #4
 800062c:	430a      	orrs	r2, r1
 800062e:	635a      	str	r2, [r3, #52]	; 0x34
 8000630:	4b65      	ldr	r3, [pc, #404]	; (80007c8 <main+0x20c>)
 8000632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000634:	2204      	movs	r2, #4
 8000636:	4013      	ands	r3, r2
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 fc20 	bl	8000e80 <MX_GPIO_Init>
  MX_DMA_Init();
 8000640:	f000 fc00 	bl	8000e44 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000644:	f000 fb04 	bl	8000c50 <MX_USART2_UART_Init>
  MX_COMP1_Init();
 8000648:	f000 f928 	bl	800089c <MX_COMP1_Init>
  MX_TIM1_Init();
 800064c:	f000 fa06 	bl	8000a5c <MX_TIM1_Init>
  MX_USART3_Init();
 8000650:	f000 fbb4 	bl	8000dbc <MX_USART3_Init>
  MX_I2S1_Init();
 8000654:	f000 f994 	bl	8000980 <MX_I2S1_Init>
  MX_I2C1_Init();
 8000658:	f000 f952 	bl	8000900 <MX_I2C1_Init>
  MX_SPI2_Init();
 800065c:	f000 f9ba 	bl	80009d4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 8000660:	4b5a      	ldr	r3, [pc, #360]	; (80007cc <main+0x210>)
 8000662:	0018      	movs	r0, r3
 8000664:	f002 ffc0 	bl	80035e8 <HAL_COMP_Start>
	HAL_Delay(100);
 8000668:	2064      	movs	r0, #100	; 0x64
 800066a:	f002 fd75 	bl	8003158 <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 800066e:	f001 fd91 	bl	8002194 <MEM_Reset>

	weoInit();
 8000672:	f000 fe73 	bl	800135c <weoInit>
	HAL_Delay(2);
 8000676:	2002      	movs	r0, #2
 8000678:	f002 fd6e 	bl	8003158 <HAL_Delay>
	weoClear();
 800067c:	f000 ff0a 	bl	8001494 <weoClear>
	MEM_GetID();
 8000680:	f001 ffea 	bl	8002658 <MEM_GetID>
	soundSetup();
 8000684:	f001 f890 	bl	80017a8 <soundSetup>
	LIS3DHsetup();
 8000688:	f002 f87a 	bl	8002780 <LIS3DHsetup>

	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 800068c:	4b50      	ldr	r3, [pc, #320]	; (80007d0 <main+0x214>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b4f      	ldr	r3, [pc, #316]	; (80007d0 <main+0x214>)
 8000692:	4950      	ldr	r1, [pc, #320]	; (80007d4 <main+0x218>)
 8000694:	430a      	orrs	r2, r1
 8000696:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_USART_EnableIT_RXNE(USART2);
 8000698:	4b4d      	ldr	r3, [pc, #308]	; (80007d0 <main+0x214>)
 800069a:	0018      	movs	r0, r3
 800069c:	f7ff feee 	bl	800047c <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80006a0:	4b4b      	ldr	r3, [pc, #300]	; (80007d0 <main+0x214>)
 80006a2:	0018      	movs	r0, r3
 80006a4:	f7ff ff09 	bl	80004ba <LL_USART_EnableIT_ERROR>

	USART2->ICR|=USART_ICR_ORECF;
 80006a8:	4b49      	ldr	r3, [pc, #292]	; (80007d0 <main+0x214>)
 80006aa:	6a1a      	ldr	r2, [r3, #32]
 80006ac:	4b48      	ldr	r3, [pc, #288]	; (80007d0 <main+0x214>)
 80006ae:	2108      	movs	r1, #8
 80006b0:	430a      	orrs	r2, r1
 80006b2:	621a      	str	r2, [r3, #32]

	squeak_generate();
 80006b4:	f002 f832 	bl	800271c <squeak_generate>
//
	I2C_SOUND_ChangePage(0x01);
 80006b8:	2001      	movs	r0, #1
 80006ba:	f001 f835 	bl	8001728 <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x01, 0x00);
 80006be:	2100      	movs	r1, #0
 80006c0:	2001      	movs	r0, #1
 80006c2:	f001 f84f 	bl	8001764 <WriteReg_I2C_SOUND>
				I2C_SOUND_ChangePage(0x00);
 80006c6:	2000      	movs	r0, #0
 80006c8:	f001 f82e 	bl	8001728 <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x41, 0x30);// 0x81 - 0x30 available
 80006cc:	2130      	movs	r1, #48	; 0x30
 80006ce:	2041      	movs	r0, #65	; 0x41
 80006d0:	f001 f848 	bl	8001764 <WriteReg_I2C_SOUND>
			//	I2C_SOUND_ChangePage(0x00);
				I2C_SOUND_ChangePage(0x01);
 80006d4:	2001      	movs	r0, #1
 80006d6:	f001 f827 	bl	8001728 <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 80006da:	2100      	movs	r1, #0
 80006dc:	2010      	movs	r0, #16
 80006de:	f001 f841 	bl	8001764 <WriteReg_I2C_SOUND>
				WriteReg_I2C_SOUND(0x2E, 0x00);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 80006e2:	2100      	movs	r1, #0
 80006e4:	202e      	movs	r0, #46	; 0x2e
 80006e6:	f001 f83d 	bl	8001764 <WriteReg_I2C_SOUND>
//    squeak_triple(signal);
//    soundLoad(3);
//    soundPlay(3);
//    squeak_long(signal);

	uint8_t ASCII_X=0x02;
 80006ea:	231b      	movs	r3, #27
 80006ec:	18fb      	adds	r3, r7, r3
 80006ee:	2202      	movs	r2, #2
 80006f0:	701a      	strb	r2, [r3, #0]
	uint8_t imY=0x04;
 80006f2:	231a      	movs	r3, #26
 80006f4:	18fb      	adds	r3, r7, r3
 80006f6:	2204      	movs	r2, #4
 80006f8:	701a      	strb	r2, [r3, #0]
	uint8_t ASCII_height=0x26;
 80006fa:	2319      	movs	r3, #25
 80006fc:	18fb      	adds	r3, r7, r3
 80006fe:	2226      	movs	r2, #38	; 0x26
 8000700:	701a      	strb	r2, [r3, #0]
	uint8_t X_increment=0x10;
 8000702:	2318      	movs	r3, #24
 8000704:	18fb      	adds	r3, r7, r3
 8000706:	2210      	movs	r2, #16
 8000708:	701a      	strb	r2, [r3, #0]
	uint8_t decY=1;
 800070a:	2127      	movs	r1, #39	; 0x27
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
	uint16_t k,j;
	uint8_t fontInfo=0xF1;
 8000712:	2317      	movs	r3, #23
 8000714:	18fb      	adds	r3, r7, r3
 8000716:	22f1      	movs	r2, #241	; 0xf1
 8000718:	701a      	strb	r2, [r3, #0]
	uint8_t fontCur;
	uint8_t curStr=1;
 800071a:	2316      	movs	r3, #22
 800071c:	18fb      	adds	r3, r7, r3
 800071e:	2201      	movs	r2, #1
 8000720:	701a      	strb	r2, [r3, #0]
//	uint8_t curStr[4]={1,2,3,4};
	uint8_t strLen=4;
 8000722:	2315      	movs	r3, #21
 8000724:	18fb      	adds	r3, r7, r3
 8000726:	2204      	movs	r2, #4
 8000728:	701a      	strb	r2, [r3, #0]
//					USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//					USART_AS_SPI_sendCMD(0xFF);
//					GPIOA->ODR |= 1 << 7;	//set dc
//					GPIOA->ODR |= 1 << 6;	//set cs

	uint8_t localWidth=0x07;
 800072a:	2314      	movs	r3, #20
 800072c:	18fb      	adds	r3, r7, r3
 800072e:	2207      	movs	r2, #7
 8000730:	701a      	strb	r2, [r3, #0]
		uint8_t localHeight=0x0E;
 8000732:	2313      	movs	r3, #19
 8000734:	18fb      	adds	r3, r7, r3
 8000736:	220e      	movs	r2, #14
 8000738:	701a      	strb	r2, [r3, #0]
		uint8_t x = 0;
 800073a:	2312      	movs	r3, #18
 800073c:	18fb      	adds	r3, r7, r3
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
		uint8_t y = 0;
 8000742:	2011      	movs	r0, #17
 8000744:	183b      	adds	r3, r7, r0
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
				decY=0x01;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2201      	movs	r2, #1
 800074e:	701a      	strb	r2, [r3, #0]
				if(y % 2 !=0){
 8000750:	183b      	adds	r3, r7, r0
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2201      	movs	r2, #1
 8000756:	4013      	ands	r3, r2
 8000758:	b2db      	uxtb	r3, r3
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <main+0x1a8>
					decY=0x02;
 800075e:	187b      	adds	r3, r7, r1
 8000760:	2202      	movs	r2, #2
 8000762:	701a      	strb	r2, [r3, #0]
				}
	weoDrawRectangleFilled(x,y,(x+localWidth-1),y+(localHeight-decY),0xFF,aim);
 8000764:	2012      	movs	r0, #18
 8000766:	183a      	adds	r2, r7, r0
 8000768:	2314      	movs	r3, #20
 800076a:	18fb      	adds	r3, r7, r3
 800076c:	7812      	ldrb	r2, [r2, #0]
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	18d3      	adds	r3, r2, r3
 8000772:	b2db      	uxtb	r3, r3
 8000774:	3b01      	subs	r3, #1
 8000776:	b2dc      	uxtb	r4, r3
 8000778:	2313      	movs	r3, #19
 800077a:	18fa      	adds	r2, r7, r3
 800077c:	2327      	movs	r3, #39	; 0x27
 800077e:	18fb      	adds	r3, r7, r3
 8000780:	7812      	ldrb	r2, [r2, #0]
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	b2da      	uxtb	r2, r3
 8000788:	2111      	movs	r1, #17
 800078a:	187b      	adds	r3, r7, r1
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	18d3      	adds	r3, r2, r3
 8000790:	b2da      	uxtb	r2, r3
 8000792:	187b      	adds	r3, r7, r1
 8000794:	7819      	ldrb	r1, [r3, #0]
 8000796:	183b      	adds	r3, r7, r0
 8000798:	7818      	ldrb	r0, [r3, #0]
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <main+0x21c>)
 800079c:	9301      	str	r3, [sp, #4]
 800079e:	23ff      	movs	r3, #255	; 0xff
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	0013      	movs	r3, r2
 80007a4:	0022      	movs	r2, r4
 80007a6:	f000 fed9 	bl	800155c <weoDrawRectangleFilled>
//    GPIOB->PUPDR &= ~0x3F000;
//	while(2){
//			HAL_I2S_Transmit(&hi2s1, (uint16_t*)ethanol2, 7823, HAL_MAX_DELAY);
//			HAL_Delay(500);
//	}
	GPIOC->ODR |= 1 << 6;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <main+0x220>)
 80007ac:	695a      	ldr	r2, [r3, #20]
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <main+0x220>)
 80007b0:	2140      	movs	r1, #64	; 0x40
 80007b2:	430a      	orrs	r2, r1
 80007b4:	615a      	str	r2, [r3, #20]
//	GPIOB->ODR |= 1 << 9;	//set FLASH CS
//				GPIOC->ODR |= 1 << 6;	//set BF
//				GPIOC->ODR &= ~(1 << 6);	//reset BF
//	HAL_I2S_Transmit(&hi2s1, (uint16_t*)&SOUND1, 7823,5000);
//	HAL_Delay(21000);
	soundPlay(0);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f001 ff1e 	bl	80025f8 <soundPlay>
	HAL_Delay(500);
 80007bc:	23fa      	movs	r3, #250	; 0xfa
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	0018      	movs	r0, r3
 80007c2:	f002 fcc9 	bl	8003158 <HAL_Delay>
	soundPlay(0);
 80007c6:	e7f6      	b.n	80007b6 <main+0x1fa>
 80007c8:	40021000 	.word	0x40021000
 80007cc:	2000008c 	.word	0x2000008c
 80007d0:	40004400 	.word	0x40004400
 80007d4:	1000100d 	.word	0x1000100d
 80007d8:	20000030 	.word	0x20000030
 80007dc:	50000800 	.word	0x50000800

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b590      	push	{r4, r7, lr}
 80007e2:	b093      	sub	sp, #76	; 0x4c
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	2410      	movs	r4, #16
 80007e8:	193b      	adds	r3, r7, r4
 80007ea:	0018      	movs	r0, r3
 80007ec:	2338      	movs	r3, #56	; 0x38
 80007ee:	001a      	movs	r2, r3
 80007f0:	2100      	movs	r1, #0
 80007f2:	f009 ff41 	bl	800a678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f6:	003b      	movs	r3, r7
 80007f8:	0018      	movs	r0, r3
 80007fa:	2310      	movs	r3, #16
 80007fc:	001a      	movs	r2, r3
 80007fe:	2100      	movs	r1, #0
 8000800:	f009 ff3a 	bl	800a678 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000804:	2380      	movs	r3, #128	; 0x80
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	0018      	movs	r0, r3
 800080a:	f005 f953 	bl	8005ab4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800080e:	193b      	adds	r3, r7, r4
 8000810:	2202      	movs	r2, #2
 8000812:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000814:	193b      	adds	r3, r7, r4
 8000816:	2280      	movs	r2, #128	; 0x80
 8000818:	0052      	lsls	r2, r2, #1
 800081a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800081c:	0021      	movs	r1, r4
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2240      	movs	r2, #64	; 0x40
 8000828:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2202      	movs	r2, #2
 800082e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2202      	movs	r2, #2
 8000834:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2200      	movs	r2, #0
 800083a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800083c:	187b      	adds	r3, r7, r1
 800083e:	2208      	movs	r2, #8
 8000840:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000842:	187b      	adds	r3, r7, r1
 8000844:	2280      	movs	r2, #128	; 0x80
 8000846:	0292      	lsls	r2, r2, #10
 8000848:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2280      	movs	r2, #128	; 0x80
 800084e:	0492      	lsls	r2, r2, #18
 8000850:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2280      	movs	r2, #128	; 0x80
 8000856:	0592      	lsls	r2, r2, #22
 8000858:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085a:	187b      	adds	r3, r7, r1
 800085c:	0018      	movs	r0, r3
 800085e:	f005 f975 	bl	8005b4c <HAL_RCC_OscConfig>
 8000862:	1e03      	subs	r3, r0, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000866:	f001 ffbd 	bl	80027e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086a:	003b      	movs	r3, r7
 800086c:	2207      	movs	r2, #7
 800086e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000870:	003b      	movs	r3, r7
 8000872:	2202      	movs	r2, #2
 8000874:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000876:	003b      	movs	r3, r7
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800087c:	003b      	movs	r3, r7
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000882:	003b      	movs	r3, r7
 8000884:	2102      	movs	r1, #2
 8000886:	0018      	movs	r0, r3
 8000888:	f005 fc7a 	bl	8006180 <HAL_RCC_ClockConfig>
 800088c:	1e03      	subs	r3, r0, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000890:	f001 ffa8 	bl	80027e4 <Error_Handler>
  }
}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	b013      	add	sp, #76	; 0x4c
 800089a:	bd90      	pop	{r4, r7, pc}

0800089c <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_COMP1_Init+0x5c>)
 80008a2:	4a16      	ldr	r2, [pc, #88]	; (80008fc <MX_COMP1_Init+0x60>)
 80008a4:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_COMP1_Init+0x5c>)
 80008a8:	2280      	movs	r2, #128	; 0x80
 80008aa:	0052      	lsls	r2, r2, #1
 80008ac:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 80008ae:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_COMP1_Init+0x5c>)
 80008b0:	2230      	movs	r2, #48	; 0x30
 80008b2:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80008b4:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <MX_COMP1_Init+0x5c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_COMP1_Init+0x5c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80008c0:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <MX_COMP1_Init+0x5c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_COMP1_Init+0x5c>)
 80008c8:	2280      	movs	r2, #128	; 0x80
 80008ca:	0392      	lsls	r2, r2, #14
 80008cc:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MX_COMP1_Init+0x5c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_COMP1_Init+0x5c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <MX_COMP1_Init+0x5c>)
 80008dc:	2212      	movs	r2, #18
 80008de:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <MX_COMP1_Init+0x5c>)
 80008e2:	0018      	movs	r0, r3
 80008e4:	f002 fd1e 	bl	8003324 <HAL_COMP_Init>
 80008e8:	1e03      	subs	r3, r0, #0
 80008ea:	d001      	beq.n	80008f0 <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 80008ec:	f001 ff7a 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	2000008c 	.word	0x2000008c
 80008fc:	40010200 	.word	0x40010200

08000900 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <MX_I2C1_Init+0x74>)
 8000906:	4a1c      	ldr	r2, [pc, #112]	; (8000978 <MX_I2C1_Init+0x78>)
 8000908:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_I2C1_Init+0x74>)
 800090c:	4a1b      	ldr	r2, [pc, #108]	; (800097c <MX_I2C1_Init+0x7c>)
 800090e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000910:	4b18      	ldr	r3, [pc, #96]	; (8000974 <MX_I2C1_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_I2C1_Init+0x74>)
 8000918:	2201      	movs	r2, #1
 800091a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800091c:	4b15      	ldr	r3, [pc, #84]	; (8000974 <MX_I2C1_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_I2C1_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_I2C1_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_I2C1_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_I2C1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_I2C1_Init+0x74>)
 800093c:	0018      	movs	r0, r3
 800093e:	f003 fbaf 	bl	80040a0 <HAL_I2C_Init>
 8000942:	1e03      	subs	r3, r0, #0
 8000944:	d001      	beq.n	800094a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000946:	f001 ff4d 	bl	80027e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <MX_I2C1_Init+0x74>)
 800094c:	2100      	movs	r1, #0
 800094e:	0018      	movs	r0, r3
 8000950:	f004 fd44 	bl	80053dc <HAL_I2CEx_ConfigAnalogFilter>
 8000954:	1e03      	subs	r3, r0, #0
 8000956:	d001      	beq.n	800095c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000958:	f001 ff44 	bl	80027e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <MX_I2C1_Init+0x74>)
 800095e:	2100      	movs	r1, #0
 8000960:	0018      	movs	r0, r3
 8000962:	f004 fd87 	bl	8005474 <HAL_I2CEx_ConfigDigitalFilter>
 8000966:	1e03      	subs	r3, r0, #0
 8000968:	d001      	beq.n	800096e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800096a:	f001 ff3b 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	200000bc 	.word	0x200000bc
 8000978:	40005400 	.word	0x40005400
 800097c:	1094102c 	.word	0x1094102c

08000980 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_I2S1_Init+0x4c>)
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <MX_I2S1_Init+0x50>)
 8000988:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_I2S1_Init+0x4c>)
 800098c:	2280      	movs	r2, #128	; 0x80
 800098e:	0092      	lsls	r2, r2, #2
 8000990:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_I2S1_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_I2S1_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_I2S1_Init+0x4c>)
 80009a0:	2280      	movs	r2, #128	; 0x80
 80009a2:	0092      	lsls	r2, r2, #2
 80009a4:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_I2S1_Init+0x4c>)
 80009a8:	22fa      	movs	r2, #250	; 0xfa
 80009aa:	0192      	lsls	r2, r2, #6
 80009ac:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80009ae:	4b07      	ldr	r3, [pc, #28]	; (80009cc <MX_I2S1_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <MX_I2S1_Init+0x4c>)
 80009b6:	0018      	movs	r0, r3
 80009b8:	f004 fda8 	bl	800550c <HAL_I2S_Init>
 80009bc:	1e03      	subs	r3, r0, #0
 80009be:	d001      	beq.n	80009c4 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 80009c0:	f001 ff10 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80009c4:	46c0      	nop			; (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	20000108 	.word	0x20000108
 80009d0:	40013000 	.word	0x40013000

080009d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80009d8:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <MX_SPI2_Init+0x80>)
 80009da:	2208      	movs	r2, #8
 80009dc:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009de:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <MX_SPI2_Init+0x80>)
 80009e0:	4a1d      	ldr	r2, [pc, #116]	; (8000a58 <MX_SPI2_Init+0x84>)
 80009e2:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009e4:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <MX_SPI2_Init+0x80>)
 80009e6:	2282      	movs	r2, #130	; 0x82
 80009e8:	0052      	lsls	r2, r2, #1
 80009ea:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009ec:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <MX_SPI2_Init+0x80>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009f2:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_SPI2_Init+0x80>)
 80009f4:	22e0      	movs	r2, #224	; 0xe0
 80009f6:	00d2      	lsls	r2, r2, #3
 80009f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80009fa:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <MX_SPI2_Init+0x80>)
 80009fc:	2202      	movs	r2, #2
 80009fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_SPI2_Init+0x80>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <MX_SPI2_Init+0x80>)
 8000a08:	2280      	movs	r2, #128	; 0x80
 8000a0a:	0092      	lsls	r2, r2, #2
 8000a0c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_SPI2_Init+0x80>)
 8000a10:	2210      	movs	r2, #16
 8000a12:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_SPI2_Init+0x80>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_SPI2_Init+0x80>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_SPI2_Init+0x80>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_SPI2_Init+0x80>)
 8000a28:	2207      	movs	r2, #7
 8000a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_SPI2_Init+0x80>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MX_SPI2_Init+0x80>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_SPI2_Init+0x80>)
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f006 fa4a 	bl	8006ed4 <HAL_SPI_Init>
 8000a40:	1e03      	subs	r3, r0, #0
 8000a42:	d001      	beq.n	8000a48 <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 8000a44:	f001 fece 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a48:	4b02      	ldr	r3, [pc, #8]	; (8000a54 <MX_SPI2_Init+0x80>)
 8000a4a:	2208      	movs	r2, #8
 8000a4c:	61da      	str	r2, [r3, #28]
  /* USER CODE END SPI2_Init 2 */

}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	200001a0 	.word	0x200001a0
 8000a58:	40003800 	.word	0x40003800

08000a5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b09e      	sub	sp, #120	; 0x78
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a62:	2368      	movs	r3, #104	; 0x68
 8000a64:	18fb      	adds	r3, r7, r3
 8000a66:	0018      	movs	r0, r3
 8000a68:	2310      	movs	r3, #16
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	f009 fe03 	bl	800a678 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a72:	235c      	movs	r3, #92	; 0x5c
 8000a74:	18fb      	adds	r3, r7, r3
 8000a76:	0018      	movs	r0, r3
 8000a78:	230c      	movs	r3, #12
 8000a7a:	001a      	movs	r2, r3
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	f009 fdfb 	bl	800a678 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000a82:	2350      	movs	r3, #80	; 0x50
 8000a84:	18fb      	adds	r3, r7, r3
 8000a86:	0018      	movs	r0, r3
 8000a88:	230c      	movs	r3, #12
 8000a8a:	001a      	movs	r2, r3
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	f009 fdf3 	bl	800a678 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a92:	2334      	movs	r3, #52	; 0x34
 8000a94:	18fb      	adds	r3, r7, r3
 8000a96:	0018      	movs	r0, r3
 8000a98:	231c      	movs	r3, #28
 8000a9a:	001a      	movs	r2, r3
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	f009 fdeb 	bl	800a678 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000aa2:	003b      	movs	r3, r7
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	2334      	movs	r3, #52	; 0x34
 8000aa8:	001a      	movs	r2, r3
 8000aaa:	2100      	movs	r1, #0
 8000aac:	f009 fde4 	bl	800a678 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ab0:	4b64      	ldr	r3, [pc, #400]	; (8000c44 <MX_TIM1_Init+0x1e8>)
 8000ab2:	4a65      	ldr	r2, [pc, #404]	; (8000c48 <MX_TIM1_Init+0x1ec>)
 8000ab4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ab6:	4b63      	ldr	r3, [pc, #396]	; (8000c44 <MX_TIM1_Init+0x1e8>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abc:	4b61      	ldr	r3, [pc, #388]	; (8000c44 <MX_TIM1_Init+0x1e8>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 8000ac2:	4b60      	ldr	r3, [pc, #384]	; (8000c44 <MX_TIM1_Init+0x1e8>)
 8000ac4:	4a61      	ldr	r2, [pc, #388]	; (8000c4c <MX_TIM1_Init+0x1f0>)
 8000ac6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac8:	4b5e      	ldr	r3, [pc, #376]	; (8000c44 <MX_TIM1_Init+0x1e8>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ace:	4b5d      	ldr	r3, [pc, #372]	; (8000c44 <MX_TIM1_Init+0x1e8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ad4:	4b5b      	ldr	r3, [pc, #364]	; (8000c44 <MX_TIM1_Init+0x1e8>)
 8000ad6:	2280      	movs	r2, #128	; 0x80
 8000ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ada:	4b5a      	ldr	r3, [pc, #360]	; (8000c44 <MX_TIM1_Init+0x1e8>)
 8000adc:	0018      	movs	r0, r3
 8000ade:	f007 fa17 	bl	8007f10 <HAL_TIM_Base_Init>
 8000ae2:	1e03      	subs	r3, r0, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000ae6:	f001 fe7d 	bl	80027e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aea:	2168      	movs	r1, #104	; 0x68
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	2280      	movs	r2, #128	; 0x80
 8000af0:	0152      	lsls	r2, r2, #5
 8000af2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000af4:	187a      	adds	r2, r7, r1
 8000af6:	4b53      	ldr	r3, [pc, #332]	; (8000c44 <MX_TIM1_Init+0x1e8>)
 8000af8:	0011      	movs	r1, r2
 8000afa:	0018      	movs	r0, r3
 8000afc:	f007 fcaa 	bl	8008454 <HAL_TIM_ConfigClockSource>
 8000b00:	1e03      	subs	r3, r0, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000b04:	f001 fe6e 	bl	80027e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b08:	4b4e      	ldr	r3, [pc, #312]	; (8000c44 <MX_TIM1_Init+0x1e8>)
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f007 fa58 	bl	8007fc0 <HAL_TIM_PWM_Init>
 8000b10:	1e03      	subs	r3, r0, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000b14:	f001 fe66 	bl	80027e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b18:	215c      	movs	r1, #92	; 0x5c
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	2200      	movs	r2, #0
 8000b24:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b2c:	187a      	adds	r2, r7, r1
 8000b2e:	4b45      	ldr	r3, [pc, #276]	; (8000c44 <MX_TIM1_Init+0x1e8>)
 8000b30:	0011      	movs	r1, r2
 8000b32:	0018      	movs	r0, r3
 8000b34:	f008 f968 	bl	8008e08 <HAL_TIMEx_MasterConfigSynchronization>
 8000b38:	1e03      	subs	r3, r0, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000b3c:	f001 fe52 	bl	80027e4 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8000b40:	2150      	movs	r1, #80	; 0x50
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	2202      	movs	r2, #2
 8000b46:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000b54:	187a      	adds	r2, r7, r1
 8000b56:	4b3b      	ldr	r3, [pc, #236]	; (8000c44 <MX_TIM1_Init+0x1e8>)
 8000b58:	2101      	movs	r1, #1
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f008 fa68 	bl	8009030 <HAL_TIMEx_ConfigBreakInput>
 8000b60:	1e03      	subs	r3, r0, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000b64:	f001 fe3e 	bl	80027e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b68:	2134      	movs	r1, #52	; 0x34
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2260      	movs	r2, #96	; 0x60
 8000b6e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	2296      	movs	r2, #150	; 0x96
 8000b74:	0052      	lsls	r2, r2, #1
 8000b76:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2200      	movs	r2, #0
 8000b82:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2204      	movs	r2, #4
 8000b88:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b96:	1879      	adds	r1, r7, r1
 8000b98:	4b2a      	ldr	r3, [pc, #168]	; (8000c44 <MX_TIM1_Init+0x1e8>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f007 fb59 	bl	8008254 <HAL_TIM_PWM_ConfigChannel>
 8000ba2:	1e03      	subs	r3, r0, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000ba6:	f001 fe1d 	bl	80027e4 <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000baa:	2134      	movs	r1, #52	; 0x34
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	2232      	movs	r2, #50	; 0x32
 8000bb0:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000bb2:	1879      	adds	r1, r7, r1
 8000bb4:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <MX_TIM1_Init+0x1e8>)
 8000bb6:	2210      	movs	r2, #16
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f007 fb4b 	bl	8008254 <HAL_TIM_PWM_ConfigChannel>
 8000bbe:	1e03      	subs	r3, r0, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8000bc2:	f001 fe0f 	bl	80027e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000bc6:	003b      	movs	r3, r7
 8000bc8:	2280      	movs	r2, #128	; 0x80
 8000bca:	0112      	lsls	r2, r2, #4
 8000bcc:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000bce:	003b      	movs	r3, r7
 8000bd0:	2280      	movs	r2, #128	; 0x80
 8000bd2:	00d2      	lsls	r2, r2, #3
 8000bd4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bd6:	003b      	movs	r3, r7
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bdc:	003b      	movs	r3, r7
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000be2:	003b      	movs	r3, r7
 8000be4:	2280      	movs	r2, #128	; 0x80
 8000be6:	0152      	lsls	r2, r2, #5
 8000be8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bea:	003b      	movs	r3, r7
 8000bec:	2280      	movs	r2, #128	; 0x80
 8000bee:	0192      	lsls	r2, r2, #6
 8000bf0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8000bf2:	003b      	movs	r3, r7
 8000bf4:	220a      	movs	r2, #10
 8000bf6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000bf8:	003b      	movs	r3, r7
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bfe:	003b      	movs	r3, r7
 8000c00:	2200      	movs	r2, #0
 8000c02:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c04:	003b      	movs	r3, r7
 8000c06:	2280      	movs	r2, #128	; 0x80
 8000c08:	0492      	lsls	r2, r2, #18
 8000c0a:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c0c:	003b      	movs	r3, r7
 8000c0e:	2200      	movs	r2, #0
 8000c10:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c12:	003b      	movs	r3, r7
 8000c14:	2200      	movs	r2, #0
 8000c16:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000c18:	003b      	movs	r3, r7
 8000c1a:	2280      	movs	r2, #128	; 0x80
 8000c1c:	01d2      	lsls	r2, r2, #7
 8000c1e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c20:	003a      	movs	r2, r7
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <MX_TIM1_Init+0x1e8>)
 8000c24:	0011      	movs	r1, r2
 8000c26:	0018      	movs	r0, r3
 8000c28:	f008 f95c 	bl	8008ee4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c2c:	1e03      	subs	r3, r0, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 8000c30:	f001 fdd8 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c34:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <MX_TIM1_Init+0x1e8>)
 8000c36:	0018      	movs	r0, r3
 8000c38:	f002 f818 	bl	8002c6c <HAL_TIM_MspPostInit>

}
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b01e      	add	sp, #120	; 0x78
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000204 	.word	0x20000204
 8000c48:	40012c00 	.word	0x40012c00
 8000c4c:	0000027f 	.word	0x0000027f

08000c50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b09d      	sub	sp, #116	; 0x74
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000c56:	2350      	movs	r3, #80	; 0x50
 8000c58:	18fb      	adds	r3, r7, r3
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	2320      	movs	r3, #32
 8000c5e:	001a      	movs	r2, r3
 8000c60:	2100      	movs	r1, #0
 8000c62:	f009 fd09 	bl	800a678 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c66:	2338      	movs	r3, #56	; 0x38
 8000c68:	18fb      	adds	r3, r7, r3
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	2318      	movs	r3, #24
 8000c6e:	001a      	movs	r2, r3
 8000c70:	2100      	movs	r1, #0
 8000c72:	f009 fd01 	bl	800a678 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	0018      	movs	r0, r3
 8000c7a:	2334      	movs	r3, #52	; 0x34
 8000c7c:	001a      	movs	r2, r3
 8000c7e:	2100      	movs	r1, #0
 8000c80:	f009 fcfa 	bl	800a678 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2202      	movs	r2, #2
 8000c88:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	0018      	movs	r0, r3
 8000c94:	f005 fc1e 	bl	80064d4 <HAL_RCCEx_PeriphCLKConfig>
 8000c98:	1e03      	subs	r3, r0, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8000c9c:	f001 fda2 	bl	80027e4 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000ca0:	2380      	movs	r3, #128	; 0x80
 8000ca2:	029b      	lsls	r3, r3, #10
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f7ff fc5d 	bl	8000564 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000caa:	2001      	movs	r0, #1
 8000cac:	f7ff fc70 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000cb0:	2438      	movs	r4, #56	; 0x38
 8000cb2:	193b      	adds	r3, r7, r4
 8000cb4:	2204      	movs	r2, #4
 8000cb6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000cb8:	193b      	adds	r3, r7, r4
 8000cba:	2202      	movs	r2, #2
 8000cbc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000cbe:	193b      	adds	r3, r7, r4
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cc4:	193b      	adds	r3, r7, r4
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cca:	193b      	adds	r3, r7, r4
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000cd0:	193b      	adds	r3, r7, r4
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	193a      	adds	r2, r7, r4
 8000cd8:	23a0      	movs	r3, #160	; 0xa0
 8000cda:	05db      	lsls	r3, r3, #23
 8000cdc:	0011      	movs	r1, r2
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f009 f948 	bl	8009f74 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000ce4:	0021      	movs	r1, r4
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	2208      	movs	r2, #8
 8000cea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	2202      	movs	r2, #2
 8000cf0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2201      	movs	r2, #1
 8000d08:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	187a      	adds	r2, r7, r1
 8000d0c:	23a0      	movs	r3, #160	; 0xa0
 8000d0e:	05db      	lsls	r3, r3, #23
 8000d10:	0011      	movs	r1, r2
 8000d12:	0018      	movs	r0, r3
 8000d14:	f009 f92e 	bl	8009f74 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000d18:	2100      	movs	r1, #0
 8000d1a:	201c      	movs	r0, #28
 8000d1c:	f7ff fa98 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000d20:	201c      	movs	r0, #28
 8000d22:	f7ff fa7b 	bl	800021c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000d26:	2150      	movs	r1, #80	; 0x50
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	22e1      	movs	r2, #225	; 0xe1
 8000d32:	0212      	lsls	r2, r2, #8
 8000d34:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	2280      	movs	r2, #128	; 0x80
 8000d3a:	0152      	lsls	r2, r2, #5
 8000d3c:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2200      	movs	r2, #0
 8000d42:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	220c      	movs	r2, #12
 8000d4e:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	2200      	movs	r2, #0
 8000d54:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	2200      	movs	r2, #0
 8000d5a:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	4a16      	ldr	r2, [pc, #88]	; (8000db8 <MX_USART2_UART_Init+0x168>)
 8000d60:	0019      	movs	r1, r3
 8000d62:	0010      	movs	r0, r2
 8000d64:	f009 fbd6 	bl	800a514 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <MX_USART2_UART_Init+0x168>)
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff fafb 	bl	8000368 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <MX_USART2_UART_Init+0x168>)
 8000d74:	2100      	movs	r1, #0
 8000d76:	0018      	movs	r0, r3
 8000d78:	f7ff fb1a 	bl	80003b0 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <MX_USART2_UART_Init+0x168>)
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f7ff fae2 	bl	8000348 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <MX_USART2_UART_Init+0x168>)
 8000d86:	0018      	movs	r0, r3
 8000d88:	f7ff fb38 	bl	80003fc <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <MX_USART2_UART_Init+0x168>)
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f7ff facc 	bl	800032c <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000d94:	46c0      	nop			; (mov r8, r8)
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <MX_USART2_UART_Init+0x168>)
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f7ff fb47 	bl	800042c <LL_USART_IsActiveFlag_TEACK>
 8000d9e:	1e03      	subs	r3, r0, #0
 8000da0:	d0f9      	beq.n	8000d96 <MX_USART2_UART_Init+0x146>
 8000da2:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <MX_USART2_UART_Init+0x168>)
 8000da4:	0018      	movs	r0, r3
 8000da6:	f7ff fb55 	bl	8000454 <LL_USART_IsActiveFlag_REACK>
 8000daa:	1e03      	subs	r3, r0, #0
 8000dac:	d0f3      	beq.n	8000d96 <MX_USART2_UART_Init+0x146>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b01d      	add	sp, #116	; 0x74
 8000db6:	bd90      	pop	{r4, r7, pc}
 8000db8:	40004400 	.word	0x40004400

08000dbc <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <MX_USART3_Init+0x78>)
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <MX_USART3_Init+0x78>)
 8000dc6:	2180      	movs	r1, #128	; 0x80
 8000dc8:	0309      	lsls	r1, r1, #12
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000dce:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <MX_USART3_Init+0x7c>)
 8000dd0:	4a18      	ldr	r2, [pc, #96]	; (8000e34 <MX_USART3_Init+0x78>)
 8000dd2:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 4000000;
 8000dd4:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <MX_USART3_Init+0x7c>)
 8000dd6:	4a19      	ldr	r2, [pc, #100]	; (8000e3c <MX_USART3_Init+0x80>)
 8000dd8:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <MX_USART3_Init+0x7c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000de0:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <MX_USART3_Init+0x7c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <MX_USART3_Init+0x7c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <MX_USART3_Init+0x7c>)
 8000dee:	2208      	movs	r2, #8
 8000df0:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <MX_USART3_Init+0x7c>)
 8000df4:	2280      	movs	r2, #128	; 0x80
 8000df6:	00d2      	lsls	r2, r2, #3
 8000df8:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_USART3_Init+0x7c>)
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	0092      	lsls	r2, r2, #2
 8000e00:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <MX_USART3_Init+0x7c>)
 8000e04:	2280      	movs	r2, #128	; 0x80
 8000e06:	0052      	lsls	r2, r2, #1
 8000e08:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <MX_USART3_Init+0x7c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_USART3_Init+0x7c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <MX_USART3_Init+0x7c>)
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f008 f9b5 	bl	8009188 <HAL_USART_Init>
 8000e1e:	1e03      	subs	r3, r0, #0
 8000e20:	d001      	beq.n	8000e26 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8000e22:	f001 fcdf 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  husart3.Init.BaudRate = 8000000;
 8000e26:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <MX_USART3_Init+0x7c>)
 8000e28:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <MX_USART3_Init+0x84>)
 8000e2a:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 2 */

}
 8000e2c:	46c0      	nop			; (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	40004800 	.word	0x40004800
 8000e38:	20000250 	.word	0x20000250
 8000e3c:	003d0900 	.word	0x003d0900
 8000e40:	007a1200 	.word	0x007a1200

08000e44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MX_DMA_Init+0x38>)
 8000e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <MX_DMA_Init+0x38>)
 8000e50:	2101      	movs	r1, #1
 8000e52:	430a      	orrs	r2, r1
 8000e54:	639a      	str	r2, [r3, #56]	; 0x38
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <MX_DMA_Init+0x38>)
 8000e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	2009      	movs	r0, #9
 8000e68:	f002 fcbc 	bl	80037e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e6c:	2009      	movs	r0, #9
 8000e6e:	f002 fcce 	bl	800380e <HAL_NVIC_EnableIRQ>

}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b002      	add	sp, #8
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	40021000 	.word	0x40021000

08000e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e86:	003b      	movs	r3, r7
 8000e88:	0018      	movs	r0, r3
 8000e8a:	2318      	movs	r3, #24
 8000e8c:	001a      	movs	r2, r3
 8000e8e:	2100      	movs	r1, #0
 8000e90:	f009 fbf2 	bl	800a678 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000e94:	2002      	movs	r0, #2
 8000e96:	f7ff fb7b 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000e9a:	2004      	movs	r0, #4
 8000e9c:	f7ff fb78 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f7ff fb75 	bl	8000590 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	4a8f      	ldr	r2, [pc, #572]	; (80010e8 <MX_GPIO_Init+0x268>)
 8000eac:	0019      	movs	r1, r3
 8000eae:	0010      	movs	r0, r2
 8000eb0:	f7ff fb40 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	01db      	lsls	r3, r3, #7
 8000eb8:	4a8c      	ldr	r2, [pc, #560]	; (80010ec <MX_GPIO_Init+0x26c>)
 8000eba:	0019      	movs	r1, r3
 8000ebc:	0010      	movs	r0, r2
 8000ebe:	f7ff fb39 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8000ec2:	2380      	movs	r3, #128	; 0x80
 8000ec4:	021b      	lsls	r3, r3, #8
 8000ec6:	4a89      	ldr	r2, [pc, #548]	; (80010ec <MX_GPIO_Init+0x26c>)
 8000ec8:	0019      	movs	r1, r3
 8000eca:	0010      	movs	r0, r2
 8000ecc:	f7ff fb32 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8000ed0:	23a0      	movs	r3, #160	; 0xa0
 8000ed2:	05db      	lsls	r3, r3, #23
 8000ed4:	2140      	movs	r1, #64	; 0x40
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f7ff fb2c 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8000edc:	23a0      	movs	r3, #160	; 0xa0
 8000ede:	05db      	lsls	r3, r3, #23
 8000ee0:	2180      	movs	r1, #128	; 0x80
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f7ff fb26 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8000ee8:	4b80      	ldr	r3, [pc, #512]	; (80010ec <MX_GPIO_Init+0x26c>)
 8000eea:	2140      	movs	r1, #64	; 0x40
 8000eec:	0018      	movs	r0, r3
 8000eee:	f7ff fb21 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_1_GPIO_Port, TEST_1_Pin);
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	011a      	lsls	r2, r3, #4
 8000ef6:	23a0      	movs	r3, #160	; 0xa0
 8000ef8:	05db      	lsls	r3, r3, #23
 8000efa:	0011      	movs	r1, r2
 8000efc:	0018      	movs	r0, r3
 8000efe:	f7ff fb25 	bl	800054c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_2_GPIO_Port, TEST_2_Pin);
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	015a      	lsls	r2, r3, #5
 8000f06:	23a0      	movs	r3, #160	; 0xa0
 8000f08:	05db      	lsls	r3, r3, #23
 8000f0a:	0011      	movs	r1, r2
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f7ff fb1d 	bl	800054c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8000f12:	003b      	movs	r3, r7
 8000f14:	2280      	movs	r2, #128	; 0x80
 8000f16:	0092      	lsls	r2, r2, #2
 8000f18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f1a:	003b      	movs	r3, r7
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f20:	003b      	movs	r3, r7
 8000f22:	2203      	movs	r2, #3
 8000f24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f26:	003b      	movs	r3, r7
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f2c:	003b      	movs	r3, r7
 8000f2e:	2201      	movs	r2, #1
 8000f30:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000f32:	003b      	movs	r3, r7
 8000f34:	4a6c      	ldr	r2, [pc, #432]	; (80010e8 <MX_GPIO_Init+0x268>)
 8000f36:	0019      	movs	r1, r3
 8000f38:	0010      	movs	r0, r2
 8000f3a:	f009 f81b 	bl	8009f74 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8000f3e:	003b      	movs	r3, r7
 8000f40:	2280      	movs	r2, #128	; 0x80
 8000f42:	01d2      	lsls	r2, r2, #7
 8000f44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f46:	003b      	movs	r3, r7
 8000f48:	2201      	movs	r2, #1
 8000f4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f4c:	003b      	movs	r3, r7
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f52:	003b      	movs	r3, r7
 8000f54:	2200      	movs	r2, #0
 8000f56:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f58:	003b      	movs	r3, r7
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	003b      	movs	r3, r7
 8000f60:	4a62      	ldr	r2, [pc, #392]	; (80010ec <MX_GPIO_Init+0x26c>)
 8000f62:	0019      	movs	r1, r3
 8000f64:	0010      	movs	r0, r2
 8000f66:	f009 f805 	bl	8009f74 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8000f6a:	003b      	movs	r3, r7
 8000f6c:	2280      	movs	r2, #128	; 0x80
 8000f6e:	0212      	lsls	r2, r2, #8
 8000f70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f72:	003b      	movs	r3, r7
 8000f74:	2201      	movs	r2, #1
 8000f76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f78:	003b      	movs	r3, r7
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f7e:	003b      	movs	r3, r7
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f84:	003b      	movs	r3, r7
 8000f86:	2201      	movs	r2, #1
 8000f88:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	003b      	movs	r3, r7
 8000f8c:	4a57      	ldr	r2, [pc, #348]	; (80010ec <MX_GPIO_Init+0x26c>)
 8000f8e:	0019      	movs	r1, r3
 8000f90:	0010      	movs	r0, r2
 8000f92:	f008 ffef 	bl	8009f74 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8000f96:	003b      	movs	r3, r7
 8000f98:	2201      	movs	r2, #1
 8000f9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f9c:	003b      	movs	r3, r7
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000fa2:	003b      	movs	r3, r7
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	003a      	movs	r2, r7
 8000faa:	23a0      	movs	r3, #160	; 0xa0
 8000fac:	05db      	lsls	r3, r3, #23
 8000fae:	0011      	movs	r1, r2
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f008 ffdf 	bl	8009f74 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8000fb6:	003b      	movs	r3, r7
 8000fb8:	2202      	movs	r2, #2
 8000fba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000fbc:	003b      	movs	r3, r7
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000fc2:	003b      	movs	r3, r7
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8000fc8:	003a      	movs	r2, r7
 8000fca:	23a0      	movs	r3, #160	; 0xa0
 8000fcc:	05db      	lsls	r3, r3, #23
 8000fce:	0011      	movs	r1, r2
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f008 ffcf 	bl	8009f74 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000fd6:	003b      	movs	r3, r7
 8000fd8:	2210      	movs	r2, #16
 8000fda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000fdc:	003b      	movs	r3, r7
 8000fde:	2200      	movs	r2, #0
 8000fe0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000fe2:	003b      	movs	r3, r7
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8000fe8:	003a      	movs	r2, r7
 8000fea:	23a0      	movs	r3, #160	; 0xa0
 8000fec:	05db      	lsls	r3, r3, #23
 8000fee:	0011      	movs	r1, r2
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f008 ffbf 	bl	8009f74 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000ff6:	003b      	movs	r3, r7
 8000ff8:	2240      	movs	r2, #64	; 0x40
 8000ffa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ffc:	003b      	movs	r3, r7
 8000ffe:	2201      	movs	r2, #1
 8001000:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001002:	003b      	movs	r3, r7
 8001004:	2203      	movs	r2, #3
 8001006:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001008:	003b      	movs	r3, r7
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800100e:	003b      	movs	r3, r7
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8001014:	003a      	movs	r2, r7
 8001016:	23a0      	movs	r3, #160	; 0xa0
 8001018:	05db      	lsls	r3, r3, #23
 800101a:	0011      	movs	r1, r2
 800101c:	0018      	movs	r0, r3
 800101e:	f008 ffa9 	bl	8009f74 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8001022:	003b      	movs	r3, r7
 8001024:	2280      	movs	r2, #128	; 0x80
 8001026:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001028:	003b      	movs	r3, r7
 800102a:	2201      	movs	r2, #1
 800102c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800102e:	003b      	movs	r3, r7
 8001030:	2203      	movs	r2, #3
 8001032:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001034:	003b      	movs	r3, r7
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800103a:	003b      	movs	r3, r7
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8001040:	003a      	movs	r2, r7
 8001042:	23a0      	movs	r3, #160	; 0xa0
 8001044:	05db      	lsls	r3, r3, #23
 8001046:	0011      	movs	r1, r2
 8001048:	0018      	movs	r0, r3
 800104a:	f008 ff93 	bl	8009f74 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 800104e:	003b      	movs	r3, r7
 8001050:	2240      	movs	r2, #64	; 0x40
 8001052:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001054:	003b      	movs	r3, r7
 8001056:	2201      	movs	r2, #1
 8001058:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800105a:	003b      	movs	r3, r7
 800105c:	2203      	movs	r2, #3
 800105e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001060:	003b      	movs	r3, r7
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001066:	003b      	movs	r3, r7
 8001068:	2201      	movs	r2, #1
 800106a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 800106c:	003b      	movs	r3, r7
 800106e:	4a1f      	ldr	r2, [pc, #124]	; (80010ec <MX_GPIO_Init+0x26c>)
 8001070:	0019      	movs	r1, r3
 8001072:	0010      	movs	r0, r2
 8001074:	f008 ff7e 	bl	8009f74 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_1_Pin;
 8001078:	003b      	movs	r3, r7
 800107a:	2280      	movs	r2, #128	; 0x80
 800107c:	0112      	lsls	r2, r2, #4
 800107e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001080:	003b      	movs	r3, r7
 8001082:	2201      	movs	r2, #1
 8001084:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001086:	003b      	movs	r3, r7
 8001088:	2203      	movs	r2, #3
 800108a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800108c:	003b      	movs	r3, r7
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001092:	003b      	movs	r3, r7
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_1_GPIO_Port, &GPIO_InitStruct);
 8001098:	003a      	movs	r2, r7
 800109a:	23a0      	movs	r3, #160	; 0xa0
 800109c:	05db      	lsls	r3, r3, #23
 800109e:	0011      	movs	r1, r2
 80010a0:	0018      	movs	r0, r3
 80010a2:	f008 ff67 	bl	8009f74 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_2_Pin;
 80010a6:	003b      	movs	r3, r7
 80010a8:	2280      	movs	r2, #128	; 0x80
 80010aa:	0152      	lsls	r2, r2, #5
 80010ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010ae:	003b      	movs	r3, r7
 80010b0:	2201      	movs	r2, #1
 80010b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	003b      	movs	r3, r7
 80010b6:	2203      	movs	r2, #3
 80010b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010ba:	003b      	movs	r3, r7
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010c0:	003b      	movs	r3, r7
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_2_GPIO_Port, &GPIO_InitStruct);
 80010c6:	003a      	movs	r2, r7
 80010c8:	23a0      	movs	r3, #160	; 0xa0
 80010ca:	05db      	lsls	r3, r3, #23
 80010cc:	0011      	movs	r1, r2
 80010ce:	0018      	movs	r0, r3
 80010d0:	f008 ff50 	bl	8009f74 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	031b      	lsls	r3, r3, #12
 80010d8:	0018      	movs	r0, r3
 80010da:	f7ff fa1b 	bl	8000514 <LL_SYSCFG_EnableFastModePlus>

}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b006      	add	sp, #24
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	50000400 	.word	0x50000400
 80010ec:	50000800 	.word	0x50000800

080010f0 <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <USART2_RX_Callback+0x58>)
 80010f6:	0018      	movs	r0, r3
 80010f8:	f7ff f9fe 	bl	80004f8 <LL_USART_ReceiveData9>
 80010fc:	0003      	movs	r3, r0
 80010fe:	001a      	movs	r2, r3
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <USART2_RX_Callback+0x5c>)
 8001102:	801a      	strh	r2, [r3, #0]
//	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
  ByteReceived=1;
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <USART2_RX_Callback+0x60>)
 8001106:	2201      	movs	r2, #1
 8001108:	701a      	strb	r2, [r3, #0]
  if(dt1 & 0x100){
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <USART2_RX_Callback+0x5c>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	001a      	movs	r2, r3
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4013      	ands	r3, r2
 8001116:	d00a      	beq.n	800112e <USART2_RX_Callback+0x3e>
	  cmd[0]=dt1;
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <USART2_RX_Callback+0x5c>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <USART2_RX_Callback+0x64>)
 8001120:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 8001122:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <USART2_RX_Callback+0x68>)
 8001124:	2200      	movs	r2, #0
 8001126:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <USART2_RX_Callback+0x6c>)
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <USART2_RX_Callback+0x6c>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d104      	bne.n	8001140 <USART2_RX_Callback+0x50>
	  cmdReceive(dt1);
 8001136:	4b05      	ldr	r3, [pc, #20]	; (800114c <USART2_RX_Callback+0x5c>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	0018      	movs	r0, r3
 800113c:	f000 f872 	bl	8001224 <cmdReceive>
  }
}
 8001140:	46c0      	nop			; (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	40004400 	.word	0x40004400
 800114c:	2000030e 	.word	0x2000030e
 8001150:	2000030c 	.word	0x2000030c
 8001154:	200002dc 	.word	0x200002dc
 8001158:	20000310 	.word	0x20000310
 800115c:	2000030d 	.word	0x2000030d

08001160 <HAL_USART_TxCpltCallback>:
//return;
//	}
}
//==============================================================
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart3)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= ~(1 << 7);	//reset dc
 8001168:	23a0      	movs	r3, #160	; 0xa0
 800116a:	05db      	lsls	r3, r3, #23
 800116c:	695a      	ldr	r2, [r3, #20]
 800116e:	23a0      	movs	r3, #160	; 0xa0
 8001170:	05db      	lsls	r3, r3, #23
 8001172:	2180      	movs	r1, #128	; 0x80
 8001174:	438a      	bics	r2, r1
 8001176:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= 1 << 6;	//set cs
 8001178:	23a0      	movs	r3, #160	; 0xa0
 800117a:	05db      	lsls	r3, r3, #23
 800117c:	695a      	ldr	r2, [r3, #20]
 800117e:	23a0      	movs	r3, #160	; 0xa0
 8001180:	05db      	lsls	r3, r3, #23
 8001182:	2140      	movs	r1, #64	; 0x40
 8001184:	430a      	orrs	r2, r1
 8001186:	615a      	str	r2, [r3, #20]
	cmd2Execute=0;
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_USART_TxCpltCallback+0x44>)
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
//	while(BFEN==0){};
	GPIOC->ODR |= 1 << 6;	//set BF
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_USART_TxCpltCallback+0x48>)
 8001190:	695a      	ldr	r2, [r3, #20]
 8001192:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <HAL_USART_TxCpltCallback+0x48>)
 8001194:	2140      	movs	r1, #64	; 0x40
 8001196:	430a      	orrs	r2, r1
 8001198:	615a      	str	r2, [r3, #20]
}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	b002      	add	sp, #8
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	20000312 	.word	0x20000312
 80011a8:	50000800 	.word	0x50000800

080011ac <HAL_I2S_TxHalfCpltCallback>:
//	GPIOA->ODR |= 1 << 6;	//set cs		????????????????????????????????????????????????
	//	cmd2Execute=0;
//	GPIOC->ODR |= 1 << 6;	//set BF
}
//======================================================================================================================
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s1) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	curBuf += 1;
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <HAL_I2S_TxHalfCpltCallback+0x28>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	1c5a      	adds	r2, r3, #1
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_I2S_TxHalfCpltCallback+0x28>)
 80011bc:	601a      	str	r2, [r3, #0]
//				GPIOC->ODR |= 1 << 6;	//set BF
//				GPIOC->ODR &= ~(1 << 6);	//reset BF
	soundLoad(soundNum, 0, 0);
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_I2S_TxHalfCpltCallback+0x2c>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	0018      	movs	r0, r3
 80011c8:	f001 f842 	bl	8002250 <soundLoad>
}
 80011cc:	46c0      	nop			; (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b002      	add	sp, #8
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000320 	.word	0x20000320
 80011d8:	200002b2 	.word	0x200002b2

080011dc <HAL_I2S_TxCpltCallback>:
//======================================================================================================================
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s1) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
//	GPIOC->ODR |= 1 << 6;	//set BF
//	GPIOC->ODR &= ~(1 << 6);	//set BF

	if(curBuf < bufCount){
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <HAL_I2S_TxCpltCallback+0x3c>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <HAL_I2S_TxCpltCallback+0x40>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d207      	bcs.n	8001200 <HAL_I2S_TxCpltCallback+0x24>

//		GPIOC->ODR |= 1 << 6;	//set BF
	soundLoad(soundNum, 1, 0);
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <HAL_I2S_TxCpltCallback+0x44>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2200      	movs	r2, #0
 80011f6:	2101      	movs	r1, #1
 80011f8:	0018      	movs	r0, r3
 80011fa:	f001 f829 	bl	8002250 <soundLoad>
	{
//		HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)SOUND2, bufLen/2);

		soundLoad(soundNum, 1, 1);
	}
}
 80011fe:	e006      	b.n	800120e <HAL_I2S_TxCpltCallback+0x32>
		soundLoad(soundNum, 1, 1);
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <HAL_I2S_TxCpltCallback+0x44>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2201      	movs	r2, #1
 8001206:	2101      	movs	r1, #1
 8001208:	0018      	movs	r0, r3
 800120a:	f001 f821 	bl	8002250 <soundLoad>
}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	46bd      	mov	sp, r7
 8001212:	b002      	add	sp, #8
 8001214:	bd80      	pop	{r7, pc}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	20000320 	.word	0x20000320
 800121c:	20000324 	.word	0x20000324
 8001220:	200002b2 	.word	0x200002b2

08001224 <cmdReceive>:
//=======================================================================================================================
	void cmdReceive (uint16_t dt1)
	{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	0002      	movs	r2, r0
 800122c:	1dbb      	adds	r3, r7, #6
 800122e:	801a      	strh	r2, [r3, #0]
//	  uint8_t inputCS=0;
	  uint8_t i=0;
 8001230:	230f      	movs	r3, #15
 8001232:	18fb      	adds	r3, r7, r3
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 8001238:	46c0      	nop			; (mov r8, r8)
 800123a:	4b39      	ldr	r3, [pc, #228]	; (8001320 <cmdReceive+0xfc>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0fb      	beq.n	800123a <cmdReceive+0x16>
	  ByteReceived=0;
 8001242:	4b37      	ldr	r3, [pc, #220]	; (8001320 <cmdReceive+0xfc>)
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 8001248:	4b36      	ldr	r3, [pc, #216]	; (8001324 <cmdReceive+0x100>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	001a      	movs	r2, r3
 800124e:	1dbb      	adds	r3, r7, #6
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	b2d9      	uxtb	r1, r3
 8001254:	4b34      	ldr	r3, [pc, #208]	; (8001328 <cmdReceive+0x104>)
 8001256:	5499      	strb	r1, [r3, r2]
//	  if(dt1==0x110){
//		  BFEN=0;
//	  }
	  ind++;
 8001258:	4b32      	ldr	r3, [pc, #200]	; (8001324 <cmdReceive+0x100>)
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	3301      	adds	r3, #1
 800125e:	b29a      	uxth	r2, r3
 8001260:	4b30      	ldr	r3, [pc, #192]	; (8001324 <cmdReceive+0x100>)
 8001262:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 8001264:	4b2f      	ldr	r3, [pc, #188]	; (8001324 <cmdReceive+0x100>)
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d04f      	beq.n	800130c <cmdReceive+0xe8>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 800126c:	4b2d      	ldr	r3, [pc, #180]	; (8001324 <cmdReceive+0x100>)
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	001a      	movs	r2, r3
 8001272:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <cmdReceive+0x104>)
 8001274:	785b      	ldrb	r3, [r3, #1]
 8001276:	3301      	adds	r3, #1
 8001278:	429a      	cmp	r2, r3
 800127a:	dd47      	ble.n	800130c <cmdReceive+0xe8>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 800127c:	230f      	movs	r3, #15
 800127e:	18fb      	adds	r3, r7, r3
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
 8001284:	e00f      	b.n	80012a6 <cmdReceive+0x82>
				 inputCS+=cmd[i];
 8001286:	210f      	movs	r1, #15
 8001288:	187b      	adds	r3, r7, r1
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	4a26      	ldr	r2, [pc, #152]	; (8001328 <cmdReceive+0x104>)
 800128e:	5cd2      	ldrb	r2, [r2, r3]
 8001290:	4b26      	ldr	r3, [pc, #152]	; (800132c <cmdReceive+0x108>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	18d3      	adds	r3, r2, r3
 8001296:	b2da      	uxtb	r2, r3
 8001298:	4b24      	ldr	r3, [pc, #144]	; (800132c <cmdReceive+0x108>)
 800129a:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 800129c:	187b      	adds	r3, r7, r1
 800129e:	781a      	ldrb	r2, [r3, #0]
 80012a0:	187b      	adds	r3, r7, r1
 80012a2:	3201      	adds	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]
 80012a6:	4b20      	ldr	r3, [pc, #128]	; (8001328 <cmdReceive+0x104>)
 80012a8:	785b      	ldrb	r3, [r3, #1]
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	210f      	movs	r1, #15
 80012ae:	187b      	adds	r3, r7, r1
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	dae7      	bge.n	8001286 <cmdReceive+0x62>
			 }
			 if(!(inputCS==0x00)&&(ind==cmd[1]+2)){
 80012b6:	4b1d      	ldr	r3, [pc, #116]	; (800132c <cmdReceive+0x108>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d022      	beq.n	8001304 <cmdReceive+0xe0>
 80012be:	4b19      	ldr	r3, [pc, #100]	; (8001324 <cmdReceive+0x100>)
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	001a      	movs	r2, r3
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <cmdReceive+0x104>)
 80012c6:	785b      	ldrb	r3, [r3, #1]
 80012c8:	3302      	adds	r3, #2
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d11a      	bne.n	8001304 <cmdReceive+0xe0>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
//				 firstByteReceived=0;
				 firstByteReceived=0;
 80012ce:	4b18      	ldr	r3, [pc, #96]	; (8001330 <cmdReceive+0x10c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
				 				 for (i=0;i<cmd[1]+2;i++){
 80012d4:	187b      	adds	r3, r7, r1
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
 80012da:	e00a      	b.n	80012f2 <cmdReceive+0xce>
				 					 cmd[i]=0;
 80012dc:	200f      	movs	r0, #15
 80012de:	183b      	adds	r3, r7, r0
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	4a11      	ldr	r2, [pc, #68]	; (8001328 <cmdReceive+0x104>)
 80012e4:	2100      	movs	r1, #0
 80012e6:	54d1      	strb	r1, [r2, r3]
				 				 for (i=0;i<cmd[1]+2;i++){
 80012e8:	183b      	adds	r3, r7, r0
 80012ea:	781a      	ldrb	r2, [r3, #0]
 80012ec:	183b      	adds	r3, r7, r0
 80012ee:	3201      	adds	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
 80012f2:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <cmdReceive+0x104>)
 80012f4:	785b      	ldrb	r3, [r3, #1]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	230f      	movs	r3, #15
 80012fa:	18fb      	adds	r3, r7, r3
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	daec      	bge.n	80012dc <cmdReceive+0xb8>
			 if(!(inputCS==0x00)&&(ind==cmd[1]+2)){
 8001302:	e003      	b.n	800130c <cmdReceive+0xe8>
				 				 }
			 }
			 else{
				 answer2CPU(cmd);
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <cmdReceive+0x104>)
 8001306:	0018      	movs	r0, r3
 8001308:	f000 fad8 	bl	80018bc <answer2CPU>
//				 GPIOC->ODR |= 1 << 6;	//set BF
//			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <cmdReceive+0x110>)
 800130e:	6a1a      	ldr	r2, [r3, #32]
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <cmdReceive+0x110>)
 8001312:	2108      	movs	r1, #8
 8001314:	430a      	orrs	r2, r1
 8001316:	621a      	str	r2, [r3, #32]
	}
 8001318:	46c0      	nop			; (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	b004      	add	sp, #16
 800131e:	bd80      	pop	{r7, pc}
 8001320:	2000030c 	.word	0x2000030c
 8001324:	20000310 	.word	0x20000310
 8001328:	200002dc 	.word	0x200002dc
 800132c:	20000314 	.word	0x20000314
 8001330:	2000030d 	.word	0x2000030d
 8001334:	40004400 	.word	0x40004400

08001338 <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	0002      	movs	r2, r0
 8001340:	1dfb      	adds	r3, r7, #7
 8001342:	701a      	strb	r2, [r3, #0]
			HAL_USART_Transmit(&husart3, (uint8_t*)&byte, 1, 10);
 8001344:	1df9      	adds	r1, r7, #7
 8001346:	4804      	ldr	r0, [pc, #16]	; (8001358 <USART_AS_SPI_sendCMD+0x20>)
 8001348:	230a      	movs	r3, #10
 800134a:	2201      	movs	r2, #1
 800134c:	f007 ff6c 	bl	8009228 <HAL_USART_Transmit>
		}
 8001350:	46c0      	nop			; (mov r8, r8)
 8001352:	46bd      	mov	sp, r7
 8001354:	b002      	add	sp, #8
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000250 	.word	0x20000250

0800135c <weoInit>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 10);
	}
	void weoInit(void) {
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0

		USART3->CR1 &= ~(USART_CR1_UE);
 8001360:	4b4a      	ldr	r3, [pc, #296]	; (800148c <weoInit+0x130>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b49      	ldr	r3, [pc, #292]	; (800148c <weoInit+0x130>)
 8001366:	2101      	movs	r1, #1
 8001368:	438a      	bics	r2, r1
 800136a:	601a      	str	r2, [r3, #0]
		USART3->CR2 |= USART_CR2_MSBFIRST;
 800136c:	4b47      	ldr	r3, [pc, #284]	; (800148c <weoInit+0x130>)
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	4b46      	ldr	r3, [pc, #280]	; (800148c <weoInit+0x130>)
 8001372:	2180      	movs	r1, #128	; 0x80
 8001374:	0309      	lsls	r1, r1, #12
 8001376:	430a      	orrs	r2, r1
 8001378:	605a      	str	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_UE;
 800137a:	4b44      	ldr	r3, [pc, #272]	; (800148c <weoInit+0x130>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4b43      	ldr	r3, [pc, #268]	; (800148c <weoInit+0x130>)
 8001380:	2101      	movs	r1, #1
 8001382:	430a      	orrs	r2, r1
 8001384:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 8001386:	2001      	movs	r0, #1
 8001388:	f001 fee6 	bl	8003158 <HAL_Delay>
		HAL_Delay(1);
 800138c:	2001      	movs	r0, #1
 800138e:	f001 fee3 	bl	8003158 <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001392:	4b3f      	ldr	r3, [pc, #252]	; (8001490 <weoInit+0x134>)
 8001394:	2100      	movs	r1, #0
 8001396:	0018      	movs	r0, r3
 8001398:	f006 fe72 	bl	8008080 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 800139c:	2001      	movs	r0, #1
 800139e:	f001 fedb 	bl	8003158 <HAL_Delay>

		GPIOA->ODR &= ~(1 << 6);	//reset cs
 80013a2:	23a0      	movs	r3, #160	; 0xa0
 80013a4:	05db      	lsls	r3, r3, #23
 80013a6:	695a      	ldr	r2, [r3, #20]
 80013a8:	23a0      	movs	r3, #160	; 0xa0
 80013aa:	05db      	lsls	r3, r3, #23
 80013ac:	2140      	movs	r1, #64	; 0x40
 80013ae:	438a      	bics	r2, r1
 80013b0:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 80013b2:	23a0      	movs	r3, #160	; 0xa0
 80013b4:	05db      	lsls	r3, r3, #23
 80013b6:	695a      	ldr	r2, [r3, #20]
 80013b8:	23a0      	movs	r3, #160	; 0xa0
 80013ba:	05db      	lsls	r3, r3, #23
 80013bc:	2180      	movs	r1, #128	; 0x80
 80013be:	438a      	bics	r2, r1
 80013c0:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 80013c2:	20af      	movs	r0, #175	; 0xaf
 80013c4:	f7ff ffb8 	bl	8001338 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xB8);
 80013c8:	20b8      	movs	r0, #184	; 0xb8
 80013ca:	f7ff ffb5 	bl	8001338 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0);
 80013ce:	2000      	movs	r0, #0
 80013d0:	f7ff ffb2 	bl	8001338 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0);
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff ffaf 	bl	8001338 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(1);
 80013da:	2001      	movs	r0, #1
 80013dc:	f7ff ffac 	bl	8001338 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(2);
 80013e0:	2002      	movs	r0, #2
 80013e2:	f7ff ffa9 	bl	8001338 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(4);
 80013e6:	2004      	movs	r0, #4
 80013e8:	f7ff ffa6 	bl	8001338 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(7);
 80013ec:	2007      	movs	r0, #7
 80013ee:	f7ff ffa3 	bl	8001338 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(11);
 80013f2:	200b      	movs	r0, #11
 80013f4:	f7ff ffa0 	bl	8001338 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(14);
 80013f8:	200e      	movs	r0, #14
 80013fa:	f7ff ff9d 	bl	8001338 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(18);
 80013fe:	2012      	movs	r0, #18
 8001400:	f7ff ff9a 	bl	8001338 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(23);
 8001404:	2017      	movs	r0, #23
 8001406:	f7ff ff97 	bl	8001338 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(27);
 800140a:	201b      	movs	r0, #27
 800140c:	f7ff ff94 	bl	8001338 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(33);
 8001410:	2021      	movs	r0, #33	; 0x21
 8001412:	f7ff ff91 	bl	8001338 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(40);
 8001416:	2028      	movs	r0, #40	; 0x28
 8001418:	f7ff ff8e 	bl	8001338 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(49);
 800141c:	2031      	movs	r0, #49	; 0x31
 800141e:	f7ff ff8b 	bl	8001338 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(63);
 8001422:	203f      	movs	r0, #63	; 0x3f
 8001424:	f7ff ff88 	bl	8001338 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 8001428:	20a0      	movs	r0, #160	; 0xa0
 800142a:	f7ff ff85 	bl	8001338 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0x51);
		USART_AS_SPI_sendCMD(0b01010010);// 0b01010010 = 0x52 is a proper remap 4 my bmp_2_bin converter, but pictures must b turned right @ 90 degrees. 0b01000001 = 0x is good if turn display on 180 degrees.
 800142e:	2052      	movs	r0, #82	; 0x52
 8001430:	f7ff ff82 	bl	8001338 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x41); //	0x51 is a proper remap 4 lcd image converter // 0b01010010 is a proper remap 4 left-turned images
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8001434:	2081      	movs	r0, #129	; 0x81
 8001436:	f7ff ff7f 	bl	8001338 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 800143a:	20ff      	movs	r0, #255	; 0xff
 800143c:	f7ff ff7c 	bl	8001338 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 8001440:	20a1      	movs	r0, #161	; 0xa1
 8001442:	f7ff ff79 	bl	8001338 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 8001446:	2000      	movs	r0, #0
 8001448:	f7ff ff76 	bl	8001338 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 800144c:	20a2      	movs	r0, #162	; 0xa2
 800144e:	f7ff ff73 	bl	8001338 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 8001452:	2000      	movs	r0, #0
 8001454:	f7ff ff70 	bl	8001338 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 8001458:	20a8      	movs	r0, #168	; 0xa8
 800145a:	f7ff ff6d 	bl	8001338 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 800145e:	207f      	movs	r0, #127	; 0x7f
 8001460:	f7ff ff6a 	bl	8001338 <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 8001464:	23a0      	movs	r3, #160	; 0xa0
 8001466:	05db      	lsls	r3, r3, #23
 8001468:	695a      	ldr	r2, [r3, #20]
 800146a:	23a0      	movs	r3, #160	; 0xa0
 800146c:	05db      	lsls	r3, r3, #23
 800146e:	2180      	movs	r1, #128	; 0x80
 8001470:	430a      	orrs	r2, r1
 8001472:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 8001474:	23a0      	movs	r3, #160	; 0xa0
 8001476:	05db      	lsls	r3, r3, #23
 8001478:	695a      	ldr	r2, [r3, #20]
 800147a:	23a0      	movs	r3, #160	; 0xa0
 800147c:	05db      	lsls	r3, r3, #23
 800147e:	2140      	movs	r1, #64	; 0x40
 8001480:	430a      	orrs	r2, r1
 8001482:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 8001484:	46c0      	nop			; (mov r8, r8)
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	40004800 	.word	0x40004800
 8001490:	20000204 	.word	0x20000204

08001494 <weoClear>:
	void weoClear(void) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
		uint16_t i;

					GPIOA->ODR &= ~(1 << 6);	//reset cs
 800149a:	23a0      	movs	r3, #160	; 0xa0
 800149c:	05db      	lsls	r3, r3, #23
 800149e:	695a      	ldr	r2, [r3, #20]
 80014a0:	23a0      	movs	r3, #160	; 0xa0
 80014a2:	05db      	lsls	r3, r3, #23
 80014a4:	2140      	movs	r1, #64	; 0x40
 80014a6:	438a      	bics	r2, r1
 80014a8:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 7);	// reset dc
 80014aa:	23a0      	movs	r3, #160	; 0xa0
 80014ac:	05db      	lsls	r3, r3, #23
 80014ae:	695a      	ldr	r2, [r3, #20]
 80014b0:	23a0      	movs	r3, #160	; 0xa0
 80014b2:	05db      	lsls	r3, r3, #23
 80014b4:	2180      	movs	r1, #128	; 0x80
 80014b6:	438a      	bics	r2, r1
 80014b8:	615a      	str	r2, [r3, #20]
						USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 80014ba:	2075      	movs	r0, #117	; 0x75
 80014bc:	f7ff ff3c 	bl	8001338 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 80014c0:	2000      	movs	r0, #0
 80014c2:	f7ff ff39 	bl	8001338 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 80014c6:	207f      	movs	r0, #127	; 0x7f
 80014c8:	f7ff ff36 	bl	8001338 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 80014cc:	2015      	movs	r0, #21
 80014ce:	f7ff ff33 	bl	8001338 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 80014d2:	2000      	movs	r0, #0
 80014d4:	f7ff ff30 	bl	8001338 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 80014d8:	207f      	movs	r0, #127	; 0x7f
 80014da:	f7ff ff2d 	bl	8001338 <USART_AS_SPI_sendCMD>
					GPIOA->ODR &= ~(1 << 6);	//reset cs
 80014de:	23a0      	movs	r3, #160	; 0xa0
 80014e0:	05db      	lsls	r3, r3, #23
 80014e2:	695a      	ldr	r2, [r3, #20]
 80014e4:	23a0      	movs	r3, #160	; 0xa0
 80014e6:	05db      	lsls	r3, r3, #23
 80014e8:	2140      	movs	r1, #64	; 0x40
 80014ea:	438a      	bics	r2, r1
 80014ec:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 7;	// set dc
 80014ee:	23a0      	movs	r3, #160	; 0xa0
 80014f0:	05db      	lsls	r3, r3, #23
 80014f2:	695a      	ldr	r2, [r3, #20]
 80014f4:	23a0      	movs	r3, #160	; 0xa0
 80014f6:	05db      	lsls	r3, r3, #23
 80014f8:	2180      	movs	r1, #128	; 0x80
 80014fa:	430a      	orrs	r2, r1
 80014fc:	615a      	str	r2, [r3, #20]
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 80014fe:	1dbb      	adds	r3, r7, #6
 8001500:	2200      	movs	r2, #0
 8001502:	801a      	strh	r2, [r3, #0]
 8001504:	e00d      	b.n	8001522 <weoClear+0x8e>
						while(!(USART3->ISR & USART_ISR_TXE)){};
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <weoClear+0xc0>)
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	2280      	movs	r2, #128	; 0x80
 800150e:	4013      	ands	r3, r2
 8001510:	d0fa      	beq.n	8001508 <weoClear+0x74>
						USART3->TDR = (uint8_t) 0x00;
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <weoClear+0xc0>)
 8001514:	2200      	movs	r2, #0
 8001516:	629a      	str	r2, [r3, #40]	; 0x28
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 8001518:	1dbb      	adds	r3, r7, #6
 800151a:	881a      	ldrh	r2, [r3, #0]
 800151c:	1dbb      	adds	r3, r7, #6
 800151e:	3201      	adds	r2, #1
 8001520:	801a      	strh	r2, [r3, #0]
 8001522:	1dbb      	adds	r3, r7, #6
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	4a0c      	ldr	r2, [pc, #48]	; (8001558 <weoClear+0xc4>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d9ec      	bls.n	8001506 <weoClear+0x72>
					}
					GPIOA->ODR &= ~(1 << 7);	//reset dc
 800152c:	23a0      	movs	r3, #160	; 0xa0
 800152e:	05db      	lsls	r3, r3, #23
 8001530:	695a      	ldr	r2, [r3, #20]
 8001532:	23a0      	movs	r3, #160	; 0xa0
 8001534:	05db      	lsls	r3, r3, #23
 8001536:	2180      	movs	r1, #128	; 0x80
 8001538:	438a      	bics	r2, r1
 800153a:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 800153c:	23a0      	movs	r3, #160	; 0xa0
 800153e:	05db      	lsls	r3, r3, #23
 8001540:	695a      	ldr	r2, [r3, #20]
 8001542:	23a0      	movs	r3, #160	; 0xa0
 8001544:	05db      	lsls	r3, r3, #23
 8001546:	2140      	movs	r1, #64	; 0x40
 8001548:	430a      	orrs	r2, r1
 800154a:	615a      	str	r2, [r3, #20]
	}
 800154c:	46c0      	nop			; (mov r8, r8)
 800154e:	46bd      	mov	sp, r7
 8001550:	b002      	add	sp, #8
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40004800 	.word	0x40004800
 8001558:	00002001 	.word	0x00002001

0800155c <weoDrawRectangleFilled>:
//========================================================================================================================
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char contrast,
				uint8_t MEM_Buffer[]) {
 800155c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	0005      	movs	r5, r0
 8001564:	000c      	movs	r4, r1
 8001566:	0010      	movs	r0, r2
 8001568:	0019      	movs	r1, r3
 800156a:	1dfb      	adds	r3, r7, #7
 800156c:	1c2a      	adds	r2, r5, #0
 800156e:	701a      	strb	r2, [r3, #0]
 8001570:	1dbb      	adds	r3, r7, #6
 8001572:	1c22      	adds	r2, r4, #0
 8001574:	701a      	strb	r2, [r3, #0]
 8001576:	1d7b      	adds	r3, r7, #5
 8001578:	1c02      	adds	r2, r0, #0
 800157a:	701a      	strb	r2, [r3, #0]
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	1c0a      	adds	r2, r1, #0
 8001580:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 8001582:	240e      	movs	r4, #14
 8001584:	193b      	adds	r3, r7, r4
 8001586:	2200      	movs	r2, #0
 8001588:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 800158a:	1dfb      	adds	r3, r7, #7
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	b25b      	sxtb	r3, r3
 8001590:	2b00      	cmp	r3, #0
 8001592:	da00      	bge.n	8001596 <weoDrawRectangleFilled+0x3a>
 8001594:	e0c1      	b.n	800171a <weoDrawRectangleFilled+0x1be>
 8001596:	1dbb      	adds	r3, r7, #6
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	b25b      	sxtb	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	da00      	bge.n	80015a2 <weoDrawRectangleFilled+0x46>
 80015a0:	e0bb      	b.n	800171a <weoDrawRectangleFilled+0x1be>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 80015a2:	1d7b      	adds	r3, r7, #5
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	b25b      	sxtb	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	da00      	bge.n	80015ae <weoDrawRectangleFilled+0x52>
 80015ac:	e0b5      	b.n	800171a <weoDrawRectangleFilled+0x1be>
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	b25b      	sxtb	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	da00      	bge.n	80015ba <weoDrawRectangleFilled+0x5e>
 80015b8:	e0af      	b.n	800171a <weoDrawRectangleFilled+0x1be>
				return;
			}

			start_x_New=start_x;
 80015ba:	250d      	movs	r5, #13
 80015bc:	197b      	adds	r3, r7, r5
 80015be:	1dfa      	adds	r2, r7, #7
 80015c0:	7812      	ldrb	r2, [r2, #0]
 80015c2:	701a      	strb	r2, [r3, #0]
			start_y_New=start_y;
 80015c4:	260c      	movs	r6, #12
 80015c6:	19bb      	adds	r3, r7, r6
 80015c8:	1dba      	adds	r2, r7, #6
 80015ca:	7812      	ldrb	r2, [r2, #0]
 80015cc:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 80015ce:	230b      	movs	r3, #11
 80015d0:	18fb      	adds	r3, r7, r3
 80015d2:	1d7a      	adds	r2, r7, #5
 80015d4:	7812      	ldrb	r2, [r2, #0]
 80015d6:	701a      	strb	r2, [r3, #0]
			end_y_New=end_y;
 80015d8:	220a      	movs	r2, #10
 80015da:	18bb      	adds	r3, r7, r2
 80015dc:	1d3a      	adds	r2, r7, #4
 80015de:	7812      	ldrb	r2, [r2, #0]
 80015e0:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80015e2:	23a0      	movs	r3, #160	; 0xa0
 80015e4:	05db      	lsls	r3, r3, #23
 80015e6:	695a      	ldr	r2, [r3, #20]
 80015e8:	23a0      	movs	r3, #160	; 0xa0
 80015ea:	05db      	lsls	r3, r3, #23
 80015ec:	2140      	movs	r1, #64	; 0x40
 80015ee:	438a      	bics	r2, r1
 80015f0:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 80015f2:	23a0      	movs	r3, #160	; 0xa0
 80015f4:	05db      	lsls	r3, r3, #23
 80015f6:	695a      	ldr	r2, [r3, #20]
 80015f8:	23a0      	movs	r3, #160	; 0xa0
 80015fa:	05db      	lsls	r3, r3, #23
 80015fc:	2180      	movs	r1, #128	; 0x80
 80015fe:	438a      	bics	r2, r1
 8001600:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 8001602:	2075      	movs	r0, #117	; 0x75
 8001604:	f7ff fe98 	bl	8001338 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 8001608:	197b      	adds	r3, r7, r5
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	0018      	movs	r0, r3
 800160e:	f7ff fe93 	bl	8001338 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 8001612:	230b      	movs	r3, #11
 8001614:	18fb      	adds	r3, r7, r3
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	0018      	movs	r0, r3
 800161a:	f7ff fe8d 	bl	8001338 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 800161e:	2015      	movs	r0, #21
 8001620:	f7ff fe8a 	bl	8001338 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 8001624:	19bb      	adds	r3, r7, r6
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	085b      	lsrs	r3, r3, #1
 800162a:	b2db      	uxtb	r3, r3
 800162c:	0018      	movs	r0, r3
 800162e:	f7ff fe83 	bl	8001338 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 8001632:	220a      	movs	r2, #10
 8001634:	18bb      	adds	r3, r7, r2
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	085b      	lsrs	r3, r3, #1
 800163a:	b2db      	uxtb	r3, r3
 800163c:	0018      	movs	r0, r3
 800163e:	f7ff fe7b 	bl	8001338 <USART_AS_SPI_sendCMD>
//					USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//					USART_AS_SPI_sendCMD(contrast);
			GPIOA->ODR |= 1 << 7;	//set dc
 8001642:	23a0      	movs	r3, #160	; 0xa0
 8001644:	05db      	lsls	r3, r3, #23
 8001646:	695a      	ldr	r2, [r3, #20]
 8001648:	23a0      	movs	r3, #160	; 0xa0
 800164a:	05db      	lsls	r3, r3, #23
 800164c:	2180      	movs	r1, #128	; 0x80
 800164e:	430a      	orrs	r2, r1
 8001650:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 8001652:	23a0      	movs	r3, #160	; 0xa0
 8001654:	05db      	lsls	r3, r3, #23
 8001656:	695a      	ldr	r2, [r3, #20]
 8001658:	23a0      	movs	r3, #160	; 0xa0
 800165a:	05db      	lsls	r3, r3, #23
 800165c:	2140      	movs	r1, #64	; 0x40
 800165e:	430a      	orrs	r2, r1
 8001660:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001662:	23a0      	movs	r3, #160	; 0xa0
 8001664:	05db      	lsls	r3, r3, #23
 8001666:	695a      	ldr	r2, [r3, #20]
 8001668:	23a0      	movs	r3, #160	; 0xa0
 800166a:	05db      	lsls	r3, r3, #23
 800166c:	2140      	movs	r1, #64	; 0x40
 800166e:	438a      	bics	r2, r1
 8001670:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 8001672:	23a0      	movs	r3, #160	; 0xa0
 8001674:	05db      	lsls	r3, r3, #23
 8001676:	695a      	ldr	r2, [r3, #20]
 8001678:	23a0      	movs	r3, #160	; 0xa0
 800167a:	05db      	lsls	r3, r3, #23
 800167c:	2180      	movs	r1, #128	; 0x80
 800167e:	430a      	orrs	r2, r1
 8001680:	615a      	str	r2, [r3, #20]

			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 8001682:	193b      	adds	r3, r7, r4
 8001684:	2200      	movs	r2, #0
 8001686:	801a      	strh	r2, [r3, #0]
 8001688:	e012      	b.n	80016b0 <weoDrawRectangleFilled+0x154>
//			for (i = 0; i < len;i++) {
//				if (i%((end_y-start_y))==0){
//					MEM_Buffer[i] &=0xF0 ;
//				}
				while(!(USART3->ISR & USART_ISR_TXE)){};
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	4b25      	ldr	r3, [pc, #148]	; (8001724 <weoDrawRectangleFilled+0x1c8>)
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	2280      	movs	r2, #128	; 0x80
 8001692:	4013      	ands	r3, r2
 8001694:	d0fa      	beq.n	800168c <weoDrawRectangleFilled+0x130>
				USART3->TDR =MEM_Buffer[i];
 8001696:	210e      	movs	r1, #14
 8001698:	187b      	adds	r3, r7, r1
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800169e:	18d3      	adds	r3, r2, r3
 80016a0:	781a      	ldrb	r2, [r3, #0]
 80016a2:	4b20      	ldr	r3, [pc, #128]	; (8001724 <weoDrawRectangleFilled+0x1c8>)
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28
			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 80016a6:	187b      	adds	r3, r7, r1
 80016a8:	881a      	ldrh	r2, [r3, #0]
 80016aa:	187b      	adds	r3, r7, r1
 80016ac:	3201      	adds	r2, #1
 80016ae:	801a      	strh	r2, [r3, #0]
 80016b0:	230e      	movs	r3, #14
 80016b2:	18fb      	adds	r3, r7, r3
 80016b4:	881a      	ldrh	r2, [r3, #0]
 80016b6:	230b      	movs	r3, #11
 80016b8:	18fb      	adds	r3, r7, r3
 80016ba:	7819      	ldrb	r1, [r3, #0]
 80016bc:	230d      	movs	r3, #13
 80016be:	18fb      	adds	r3, r7, r3
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	1acb      	subs	r3, r1, r3
 80016c4:	3301      	adds	r3, #1
 80016c6:	210a      	movs	r1, #10
 80016c8:	1879      	adds	r1, r7, r1
 80016ca:	7809      	ldrb	r1, [r1, #0]
 80016cc:	0849      	lsrs	r1, r1, #1
 80016ce:	b2c9      	uxtb	r1, r1
 80016d0:	0008      	movs	r0, r1
 80016d2:	210c      	movs	r1, #12
 80016d4:	1879      	adds	r1, r7, r1
 80016d6:	7809      	ldrb	r1, [r1, #0]
 80016d8:	0849      	lsrs	r1, r1, #1
 80016da:	b2c9      	uxtb	r1, r1
 80016dc:	1a41      	subs	r1, r0, r1
 80016de:	3101      	adds	r1, #1
 80016e0:	434b      	muls	r3, r1
 80016e2:	429a      	cmp	r2, r3
 80016e4:	dbd1      	blt.n	800168a <weoDrawRectangleFilled+0x12e>
			}
			while(!(USART3->ISR & USART_ISR_TXE)){};
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <weoDrawRectangleFilled+0x1c8>)
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	2280      	movs	r2, #128	; 0x80
 80016ee:	4013      	ands	r3, r2
 80016f0:	d0fa      	beq.n	80016e8 <weoDrawRectangleFilled+0x18c>
			HAL_Delay(1);
 80016f2:	2001      	movs	r0, #1
 80016f4:	f001 fd30 	bl	8003158 <HAL_Delay>
//			GPIOA->ODR &= ~(1 << 7);	// reset dc
//			USART_AS_SPI_sendCMD(0xBB);	// command for NOP
//			USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//			USART_AS_SPI_sendCMD(0xFF);

			GPIOA->ODR &= ~(1 << 7);	//reset dc
 80016f8:	23a0      	movs	r3, #160	; 0xa0
 80016fa:	05db      	lsls	r3, r3, #23
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	23a0      	movs	r3, #160	; 0xa0
 8001700:	05db      	lsls	r3, r3, #23
 8001702:	2180      	movs	r1, #128	; 0x80
 8001704:	438a      	bics	r2, r1
 8001706:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 8001708:	23a0      	movs	r3, #160	; 0xa0
 800170a:	05db      	lsls	r3, r3, #23
 800170c:	695a      	ldr	r2, [r3, #20]
 800170e:	23a0      	movs	r3, #160	; 0xa0
 8001710:	05db      	lsls	r3, r3, #23
 8001712:	2140      	movs	r1, #64	; 0x40
 8001714:	430a      	orrs	r2, r1
 8001716:	615a      	str	r2, [r3, #20]
 8001718:	e000      	b.n	800171c <weoDrawRectangleFilled+0x1c0>
				return;
 800171a:	46c0      	nop			; (mov r8, r8)
		}
 800171c:	46bd      	mov	sp, r7
 800171e:	b005      	add	sp, #20
 8001720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	40004800 	.word	0x40004800

08001728 <I2C_SOUND_ChangePage>:
//		LL_GPIO_ResetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
//		LL_GPIO_SetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
	}
	void I2C_SOUND_ChangePage(uint8_t pageNum) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af02      	add	r7, sp, #8
 800172e:	0002      	movs	r2, r0
 8001730:	1dfb      	adds	r3, r7, #7
 8001732:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { 0x00, pageNum };
 8001734:	210c      	movs	r1, #12
 8001736:	187b      	adds	r3, r7, r1
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
 800173c:	187b      	adds	r3, r7, r1
 800173e:	1dfa      	adds	r2, r7, #7
 8001740:	7812      	ldrb	r2, [r2, #0]
 8001742:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);
 8001744:	187a      	adds	r2, r7, r1
 8001746:	4806      	ldr	r0, [pc, #24]	; (8001760 <I2C_SOUND_ChangePage+0x38>)
 8001748:	23fa      	movs	r3, #250	; 0xfa
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2302      	movs	r3, #2
 8001750:	2130      	movs	r1, #48	; 0x30
 8001752:	f002 fd3b 	bl	80041cc <HAL_I2C_Master_Transmit>
	}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	46bd      	mov	sp, r7
 800175a:	b004      	add	sp, #16
 800175c:	bd80      	pop	{r7, pc}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	200000bc 	.word	0x200000bc

08001764 <WriteReg_I2C_SOUND>:
	void WriteReg_I2C_SOUND(uint8_t reg, uint8_t data) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af02      	add	r7, sp, #8
 800176a:	0002      	movs	r2, r0
 800176c:	1dfb      	adds	r3, r7, #7
 800176e:	701a      	strb	r2, [r3, #0]
 8001770:	1dbb      	adds	r3, r7, #6
 8001772:	1c0a      	adds	r2, r1, #0
 8001774:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 8001776:	210c      	movs	r1, #12
 8001778:	187b      	adds	r3, r7, r1
 800177a:	1dfa      	adds	r2, r7, #7
 800177c:	7812      	ldrb	r2, [r2, #0]
 800177e:	701a      	strb	r2, [r3, #0]
 8001780:	187b      	adds	r3, r7, r1
 8001782:	1dba      	adds	r2, r7, #6
 8001784:	7812      	ldrb	r2, [r2, #0]
 8001786:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);	//(uint8_t*)&
 8001788:	187a      	adds	r2, r7, r1
 800178a:	4806      	ldr	r0, [pc, #24]	; (80017a4 <WriteReg_I2C_SOUND+0x40>)
 800178c:	23fa      	movs	r3, #250	; 0xfa
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	2302      	movs	r3, #2
 8001794:	2130      	movs	r1, #48	; 0x30
 8001796:	f002 fd19 	bl	80041cc <HAL_I2C_Master_Transmit>
	}
 800179a:	46c0      	nop			; (mov r8, r8)
 800179c:	46bd      	mov	sp, r7
 800179e:	b004      	add	sp, #16
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	200000bc 	.word	0x200000bc

080017a8 <soundSetup>:
	void soundSetup(void) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
		I2C_SOUND_ChangePage(0x00);
 80017ac:	2000      	movs	r0, #0
 80017ae:	f7ff ffbb 	bl	8001728 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x01);	//Assert Software reset (P0, R1, D0=1)
 80017b2:	2101      	movs	r1, #1
 80017b4:	2001      	movs	r0, #1
 80017b6:	f7ff ffd5 	bl	8001764 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 80017ba:	2001      	movs	r0, #1
 80017bc:	f7ff ffb4 	bl	8001728 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x02, 0x00);	//LDO output programmed as 1.8V and Level shifters powered up. (P1, R2, D5-D4=00, D3=0)
 80017c0:	2100      	movs	r1, #0
 80017c2:	2002      	movs	r0, #2
 80017c4:	f7ff ffce 	bl	8001764 <WriteReg_I2C_SOUND>
		HAL_Delay(15);
 80017c8:	200f      	movs	r0, #15
 80017ca:	f001 fcc5 	bl	8003158 <HAL_Delay>
		I2C_SOUND_ChangePage(0x00);
 80017ce:	2000      	movs	r0, #0
 80017d0:	f7ff ffaa 	bl	8001728 <I2C_SOUND_ChangePage>
	WriteReg_I2C_SOUND(0x04,0x03);//PLL_clkin = MCLK, codec_clkin = PLL_CLK, MCLK should be 11.2896MHz
 80017d4:	2103      	movs	r1, #3
 80017d6:	2004      	movs	r0, #4
 80017d8:	f7ff ffc4 	bl	8001764 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x05,0x91);//Power up PLL, set P=1, R=1
 80017dc:	2191      	movs	r1, #145	; 0x91
 80017de:	2005      	movs	r0, #5
 80017e0:	f7ff ffc0 	bl	8001764 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x06,0x04);//Set J = 4
 80017e4:	2104      	movs	r1, #4
 80017e6:	2006      	movs	r0, #6
 80017e8:	f7ff ffbc 	bl	8001764 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x07,0x00);//SET D=0000
 80017ec:	2100      	movs	r1, #0
 80017ee:	2007      	movs	r0, #7
 80017f0:	f7ff ffb8 	bl	8001764 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x08,0x00);//SET D=0000
 80017f4:	2100      	movs	r1, #0
 80017f6:	2008      	movs	r0, #8
 80017f8:	f7ff ffb4 	bl	8001764 <WriteReg_I2C_SOUND>
	HAL_Delay(15);
 80017fc:	200f      	movs	r0, #15
 80017fe:	f001 fcab 	bl	8003158 <HAL_Delay>
	WriteReg_I2C_SOUND(0x0B,0x84);//DAC NDAC Powered up, set NDAC = 4
 8001802:	2184      	movs	r1, #132	; 0x84
 8001804:	200b      	movs	r0, #11
 8001806:	f7ff ffad 	bl	8001764 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0C,0x82);//DAC MDAC Powered up, set MDAC = 2
 800180a:	2182      	movs	r1, #130	; 0x82
 800180c:	200c      	movs	r0, #12
 800180e:	f7ff ffa9 	bl	8001764 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0D,0x00);//DAC OSR(9:0)-> DOSR=128
 8001812:	2100      	movs	r1, #0
 8001814:	200d      	movs	r0, #13
 8001816:	f7ff ffa5 	bl	8001764 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0E,0x80);//DAC OSR(9:0)
 800181a:	2180      	movs	r1, #128	; 0x80
 800181c:	200e      	movs	r0, #14
 800181e:	f7ff ffa1 	bl	8001764 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x1B, 0x00);	//Codec Interface control Word length = 16bits, BCLK&WCLK inputs, I2S mode. (P0, R27, D7-D6=00, D5-D4=00, D3-D2=00)
 8001822:	2100      	movs	r1, #0
 8001824:	201b      	movs	r0, #27
 8001826:	f7ff ff9d 	bl	8001764 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x1C,0x00);//Data slot offset
 800182a:	2100      	movs	r1, #0
 800182c:	201c      	movs	r0, #28
 800182e:	f7ff ff99 	bl	8001764 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x3c,0x02);//Dac Instruction programming PRB #2 for Mono routing. Type interpolation (x8) and 3 programmable	Biquads. (P0, R60, D4-D0=0010)
 8001832:	2102      	movs	r1, #2
 8001834:	203c      	movs	r0, #60	; 0x3c
 8001836:	f7ff ff95 	bl	8001764 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 800183a:	2001      	movs	r0, #1
 800183c:	f7ff ff74 	bl	8001728 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x10);	//Master Reference Powered on (P1, R1, D4=1)
 8001840:	2110      	movs	r1, #16
 8001842:	2001      	movs	r0, #1
 8001844:	f7ff ff8e 	bl	8001764 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x0A, 0x00);	//Output common mode for DAC set to 0.9V (default) (P1, R10)
 8001848:	2100      	movs	r1, #0
 800184a:	200a      	movs	r0, #10
 800184c:	f7ff ff8a 	bl	8001764 <WriteReg_I2C_SOUND>
		////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x0C, 0x00);	// No analog routing to headphone//0x0c,0x15 by SB
 8001850:	2100      	movs	r1, #0
 8001852:	200c      	movs	r0, #12
 8001854:	f7ff ff86 	bl	8001764 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x16, 0x00);	// Headphone volume=0//0x16,0x75 by SB
 8001858:	2100      	movs	r1, #0
 800185a:	2016      	movs	r0, #22
 800185c:	f7ff ff82 	bl	8001764 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x18, 0x00);	//No need to enable Mixer M and Mixer P, AINL Voulme, 0dB Gain 0x18,0x75 by SB
 8001860:	2100      	movs	r1, #0
 8001862:	2018      	movs	r0, #24
 8001864:	f7ff ff7e 	bl	8001764 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x19, 0x00);	//No need to enable Mixer M and Mixer P, AINR Voulme, 0dB Gain 0x19,0x75 by SB
 8001868:	2100      	movs	r1, #0
 800186a:	2019      	movs	r0, #25
 800186c:	f7ff ff7a 	bl	8001764 <WriteReg_I2C_SOUND>
		//////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x09, 0x00);	//AINL,AINR are powered down
 8001870:	2100      	movs	r1, #0
 8001872:	2009      	movs	r0, #9
 8001874:	f7ff ff76 	bl	8001764 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 8001878:	2100      	movs	r1, #0
 800187a:	2010      	movs	r0, #16
 800187c:	f7ff ff72 	bl	8001764 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x00);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000)
 8001880:	2100      	movs	r1, #0
 8001882:	202e      	movs	r0, #46	; 0x2e
 8001884:	f7ff ff6e 	bl	8001764 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x30, 0x10);	//SPK driver Gain=6.0dB (P1, R48, D6-D4=001)
 8001888:	2110      	movs	r1, #16
 800188a:	2030      	movs	r0, #48	; 0x30
 800188c:	f7ff ff6a 	bl	8001764 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2D, 0x02);	//SPK powered up (P1, R45, D1=1)
 8001890:	2102      	movs	r1, #2
 8001892:	202d      	movs	r0, #45	; 0x2d
 8001894:	f7ff ff66 	bl	8001764 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 8001898:	2000      	movs	r0, #0
 800189a:	f7ff ff45 	bl	8001728 <I2C_SOUND_ChangePage>
		//////////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
 800189e:	2190      	movs	r1, #144	; 0x90
 80018a0:	203f      	movs	r0, #63	; 0x3f
 80018a2:	f7ff ff5f 	bl	8001764 <WriteReg_I2C_SOUND>
		// 1<<7|1<<4|2 by SB
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000) cnDacValueOn by SB
 80018a6:	2100      	movs	r1, #0
 80018a8:	2041      	movs	r0, #65	; 0x41
 80018aa:	f7ff ff5b 	bl	8001764 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1) 1<<4 by SB
 80018ae:	2104      	movs	r1, #4
 80018b0:	2040      	movs	r0, #64	; 0x40
 80018b2:	f7ff ff57 	bl	8001764 <WriteReg_I2C_SOUND>
	}
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <answer2CPU>:
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 80018c4:	230f      	movs	r3, #15
 80018c6:	18fb      	adds	r3, r7, r3
 80018c8:	22ff      	movs	r2, #255	; 0xff
 80018ca:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 80018cc:	230d      	movs	r3, #13
 80018ce:	18fb      	adds	r3, r7, r3
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		isReceiverDisabled=1;
 80018d4:	4bd9      	ldr	r3, [pc, #868]	; (8001c3c <answer2CPU+0x380>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	701a      	strb	r2, [r3, #0]

		cmd2Execute=0;
 80018da:	4bd9      	ldr	r3, [pc, #868]	; (8001c40 <answer2CPU+0x384>)
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
		cmd[0]&=~0x100;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	781a      	ldrb	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	701a      	strb	r2, [r3, #0]
		if ((cmd[0] == 0x11)||(cmd[0] == 0x12)||(cmd[0] == 0x13)||(cmd[0] == 0x14)||(cmd[0] == 0x15)) {GPIOC->ODR &= ~(1 << 6);}//reset BF
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b11      	cmp	r3, #17
 80018ee:	d00f      	beq.n	8001910 <answer2CPU+0x54>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b12      	cmp	r3, #18
 80018f6:	d00b      	beq.n	8001910 <answer2CPU+0x54>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b13      	cmp	r3, #19
 80018fe:	d007      	beq.n	8001910 <answer2CPU+0x54>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b14      	cmp	r3, #20
 8001906:	d003      	beq.n	8001910 <answer2CPU+0x54>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b15      	cmp	r3, #21
 800190e:	d105      	bne.n	800191c <answer2CPU+0x60>
 8001910:	4bcc      	ldr	r3, [pc, #816]	; (8001c44 <answer2CPU+0x388>)
 8001912:	695a      	ldr	r2, [r3, #20]
 8001914:	4bcb      	ldr	r3, [pc, #812]	; (8001c44 <answer2CPU+0x388>)
 8001916:	2140      	movs	r1, #64	; 0x40
 8001918:	438a      	bics	r2, r1
 800191a:	615a      	str	r2, [r3, #20]
		if (cmd[0] == 0x11) {
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b11      	cmp	r3, #17
 8001922:	d105      	bne.n	8001930 <answer2CPU+0x74>
//			GPIOC->ODR &= ~(1 << 6);
			GPIOC->ODR &=~ GPIO_ODR_OD6;
 8001924:	4bc7      	ldr	r3, [pc, #796]	; (8001c44 <answer2CPU+0x388>)
 8001926:	695a      	ldr	r2, [r3, #20]
 8001928:	4bc6      	ldr	r3, [pc, #792]	; (8001c44 <answer2CPU+0x388>)
 800192a:	2140      	movs	r1, #64	; 0x40
 800192c:	438a      	bics	r2, r1
 800192e:	615a      	str	r2, [r3, #20]
		}//reset BF
		ans[0] = cmd[0]|0x80;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2280      	movs	r2, #128	; 0x80
 8001936:	4252      	negs	r2, r2
 8001938:	4313      	orrs	r3, r2
 800193a:	b2db      	uxtb	r3, r3
 800193c:	b29a      	uxth	r2, r3
 800193e:	4bc2      	ldr	r3, [pc, #776]	; (8001c48 <answer2CPU+0x38c>)
 8001940:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b0f      	cmp	r3, #15
 8001948:	d800      	bhi.n	800194c <answer2CPU+0x90>
 800194a:	e162      	b.n	8001c12 <answer2CPU+0x356>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b15      	cmp	r3, #21
 8001952:	d900      	bls.n	8001956 <answer2CPU+0x9a>
 8001954:	e15d      	b.n	8001c12 <answer2CPU+0x356>
//		if (cmd[0] != 0x10) {
//			GPIOC->ODR &= ~(1 << 6);
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 8001956:	23a0      	movs	r3, #160	; 0xa0
 8001958:	05db      	lsls	r3, r3, #23
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	2210      	movs	r2, #16
 800195e:	4013      	ands	r3, r2
 8001960:	d106      	bne.n	8001970 <answer2CPU+0xb4>
					keyboard &= 0b11111110;
 8001962:	220f      	movs	r2, #15
 8001964:	18bb      	adds	r3, r7, r2
 8001966:	18ba      	adds	r2, r7, r2
 8001968:	7812      	ldrb	r2, [r2, #0]
 800196a:	2101      	movs	r1, #1
 800196c:	438a      	bics	r2, r1
 800196e:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 8001970:	23a0      	movs	r3, #160	; 0xa0
 8001972:	05db      	lsls	r3, r3, #23
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	2202      	movs	r2, #2
 8001978:	4013      	ands	r3, r2
 800197a:	d106      	bne.n	800198a <answer2CPU+0xce>
					keyboard &= 0b11111101;
 800197c:	220f      	movs	r2, #15
 800197e:	18bb      	adds	r3, r7, r2
 8001980:	18ba      	adds	r2, r7, r2
 8001982:	7812      	ldrb	r2, [r2, #0]
 8001984:	2102      	movs	r1, #2
 8001986:	438a      	bics	r2, r1
 8001988:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 800198a:	23a0      	movs	r3, #160	; 0xa0
 800198c:	05db      	lsls	r3, r3, #23
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	2201      	movs	r2, #1
 8001992:	4013      	ands	r3, r2
 8001994:	d106      	bne.n	80019a4 <answer2CPU+0xe8>
					keyboard &= 0b11111011;
 8001996:	220f      	movs	r2, #15
 8001998:	18bb      	adds	r3, r7, r2
 800199a:	18ba      	adds	r2, r7, r2
 800199c:	7812      	ldrb	r2, [r2, #0]
 800199e:	2104      	movs	r1, #4
 80019a0:	438a      	bics	r2, r1
 80019a2:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 80019a4:	23a0      	movs	r3, #160	; 0xa0
 80019a6:	05db      	lsls	r3, r3, #23
 80019a8:	691a      	ldr	r2, [r3, #16]
 80019aa:	2380      	movs	r3, #128	; 0x80
 80019ac:	019b      	lsls	r3, r3, #6
 80019ae:	4013      	ands	r3, r2
 80019b0:	d106      	bne.n	80019c0 <answer2CPU+0x104>
					keyboard &= 0b11110111;
 80019b2:	220f      	movs	r2, #15
 80019b4:	18bb      	adds	r3, r7, r2
 80019b6:	18ba      	adds	r2, r7, r2
 80019b8:	7812      	ldrb	r2, [r2, #0]
 80019ba:	2108      	movs	r1, #8
 80019bc:	438a      	bics	r2, r1
 80019be:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 80019c0:	23a0      	movs	r3, #160	; 0xa0
 80019c2:	05db      	lsls	r3, r3, #23
 80019c4:	691a      	ldr	r2, [r3, #16]
 80019c6:	2380      	movs	r3, #128	; 0x80
 80019c8:	01db      	lsls	r3, r3, #7
 80019ca:	4013      	ands	r3, r2
 80019cc:	d106      	bne.n	80019dc <answer2CPU+0x120>
					keyboard &= 0b11101111;
 80019ce:	220f      	movs	r2, #15
 80019d0:	18bb      	adds	r3, r7, r2
 80019d2:	18ba      	adds	r2, r7, r2
 80019d4:	7812      	ldrb	r2, [r2, #0]
 80019d6:	2110      	movs	r1, #16
 80019d8:	438a      	bics	r2, r1
 80019da:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 80019dc:	210f      	movs	r1, #15
 80019de:	187b      	adds	r3, r7, r1
 80019e0:	187a      	adds	r2, r7, r1
 80019e2:	7812      	ldrb	r2, [r2, #0]
 80019e4:	43d2      	mvns	r2, r2
 80019e6:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 80019e8:	200c      	movs	r0, #12
 80019ea:	183b      	adds	r3, r7, r0
 80019ec:	2204      	movs	r2, #4
 80019ee:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 80019f0:	183b      	adds	r3, r7, r0
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	3b02      	subs	r3, #2
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	4b93      	ldr	r3, [pc, #588]	; (8001c48 <answer2CPU+0x38c>)
 80019fc:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 80019fe:	187b      	adds	r3, r7, r1
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	4b90      	ldr	r3, [pc, #576]	; (8001c48 <answer2CPU+0x38c>)
 8001a06:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 8001a08:	230e      	movs	r3, #14
 8001a0a:	18fb      	adds	r3, r7, r3
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
 8001a10:	e011      	b.n	8001a36 <answer2CPU+0x17a>
					myCS = myCS + ans[i];
 8001a12:	200e      	movs	r0, #14
 8001a14:	183b      	adds	r3, r7, r0
 8001a16:	781a      	ldrb	r2, [r3, #0]
 8001a18:	4b8b      	ldr	r3, [pc, #556]	; (8001c48 <answer2CPU+0x38c>)
 8001a1a:	0052      	lsls	r2, r2, #1
 8001a1c:	5ad3      	ldrh	r3, [r2, r3]
 8001a1e:	b2d9      	uxtb	r1, r3
 8001a20:	220d      	movs	r2, #13
 8001a22:	18bb      	adds	r3, r7, r2
 8001a24:	18ba      	adds	r2, r7, r2
 8001a26:	7812      	ldrb	r2, [r2, #0]
 8001a28:	188a      	adds	r2, r1, r2
 8001a2a:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001a2c:	183b      	adds	r3, r7, r0
 8001a2e:	781a      	ldrb	r2, [r3, #0]
 8001a30:	183b      	adds	r3, r7, r0
 8001a32:	3201      	adds	r2, #1
 8001a34:	701a      	strb	r2, [r3, #0]
 8001a36:	200e      	movs	r0, #14
 8001a38:	183b      	adds	r3, r7, r0
 8001a3a:	781a      	ldrb	r2, [r3, #0]
 8001a3c:	230c      	movs	r3, #12
 8001a3e:	18fb      	adds	r3, r7, r3
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	429a      	cmp	r2, r3
 8001a46:	dbe4      	blt.n	8001a12 <answer2CPU+0x156>
				}
				myCS = 0 - myCS;
 8001a48:	210d      	movs	r1, #13
 8001a4a:	187b      	adds	r3, r7, r1
 8001a4c:	187a      	adds	r2, r7, r1
 8001a4e:	7812      	ldrb	r2, [r2, #0]
 8001a50:	4252      	negs	r2, r2
 8001a52:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	4b7b      	ldr	r3, [pc, #492]	; (8001c48 <answer2CPU+0x38c>)
 8001a5c:	80da      	strh	r2, [r3, #6]
				i=0;
 8001a5e:	183b      	adds	r3, r7, r0
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================

				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001a64:	46c0      	nop			; (mov r8, r8)
 8001a66:	4b79      	ldr	r3, [pc, #484]	; (8001c4c <answer2CPU+0x390>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	2280      	movs	r2, #128	; 0x80
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d0fa      	beq.n	8001a66 <answer2CPU+0x1aa>
				USART2->TDR = ans[0]|0x0100;
 8001a70:	4b75      	ldr	r3, [pc, #468]	; (8001c48 <answer2CPU+0x38c>)
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	2280      	movs	r2, #128	; 0x80
 8001a76:	0052      	lsls	r2, r2, #1
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	4b73      	ldr	r3, [pc, #460]	; (8001c4c <answer2CPU+0x390>)
 8001a7e:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001a80:	230e      	movs	r3, #14
 8001a82:	18fb      	adds	r3, r7, r3
 8001a84:	2201      	movs	r2, #1
 8001a86:	701a      	strb	r2, [r3, #0]
 8001a88:	e013      	b.n	8001ab2 <answer2CPU+0x1f6>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	4b6f      	ldr	r3, [pc, #444]	; (8001c4c <answer2CPU+0x390>)
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	2280      	movs	r2, #128	; 0x80
 8001a92:	4013      	ands	r3, r2
 8001a94:	d0fa      	beq.n	8001a8c <answer2CPU+0x1d0>
				    USART2->TDR = (uint8_t)ans[i];
 8001a96:	210e      	movs	r1, #14
 8001a98:	187b      	adds	r3, r7, r1
 8001a9a:	781a      	ldrb	r2, [r3, #0]
 8001a9c:	4b6a      	ldr	r3, [pc, #424]	; (8001c48 <answer2CPU+0x38c>)
 8001a9e:	0052      	lsls	r2, r2, #1
 8001aa0:	5ad3      	ldrh	r3, [r2, r3]
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	4b69      	ldr	r3, [pc, #420]	; (8001c4c <answer2CPU+0x390>)
 8001aa6:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001aa8:	187b      	adds	r3, r7, r1
 8001aaa:	781a      	ldrb	r2, [r3, #0]
 8001aac:	187b      	adds	r3, r7, r1
 8001aae:	3201      	adds	r2, #1
 8001ab0:	701a      	strb	r2, [r3, #0]
 8001ab2:	230e      	movs	r3, #14
 8001ab4:	18fa      	adds	r2, r7, r3
 8001ab6:	230c      	movs	r3, #12
 8001ab8:	18fb      	adds	r3, r7, r3
 8001aba:	7812      	ldrb	r2, [r2, #0]
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d3e3      	bcc.n	8001a8a <answer2CPU+0x1ce>
				  }
//				HAL_Delay(1);
				USART2->CR1 |= USART_CR1_RE;
 8001ac2:	4b62      	ldr	r3, [pc, #392]	; (8001c4c <answer2CPU+0x390>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	4b61      	ldr	r3, [pc, #388]	; (8001c4c <answer2CPU+0x390>)
 8001ac8:	2104      	movs	r1, #4
 8001aca:	430a      	orrs	r2, r1
 8001acc:	601a      	str	r2, [r3, #0]
				isReceiverDisabled=0;
 8001ace:	4b5b      	ldr	r3, [pc, #364]	; (8001c3c <answer2CPU+0x380>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
//				BFEN=1;
//=======================================================================================================================================
				if (cmd[0] == 0x11) {//Show full screen background;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b11      	cmp	r3, #17
 8001ada:	d109      	bne.n	8001af0 <answer2CPU+0x234>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					picNum = cmd[2];
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	789a      	ldrb	r2, [r3, #2]
 8001ae0:	4b5b      	ldr	r3, [pc, #364]	; (8001c50 <answer2CPU+0x394>)
 8001ae2:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 8001ae4:	4b56      	ldr	r3, [pc, #344]	; (8001c40 <answer2CPU+0x384>)
 8001ae6:	2211      	movs	r2, #17
 8001ae8:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001aea:	4b5a      	ldr	r3, [pc, #360]	; (8001c54 <answer2CPU+0x398>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b12      	cmp	r3, #18
 8001af6:	d115      	bne.n	8001b24 <answer2CPU+0x268>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3302      	adds	r3, #2
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	001a      	movs	r2, r3
 8001b00:	4b55      	ldr	r3, [pc, #340]	; (8001c58 <answer2CPU+0x39c>)
 8001b02:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3303      	adds	r3, #3
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	001a      	movs	r2, r3
 8001b0c:	4b53      	ldr	r3, [pc, #332]	; (8001c5c <answer2CPU+0x3a0>)
 8001b0e:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	791a      	ldrb	r2, [r3, #4]
 8001b14:	4b4e      	ldr	r3, [pc, #312]	; (8001c50 <answer2CPU+0x394>)
 8001b16:	701a      	strb	r2, [r3, #0]
//					weoShowSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 8001b18:	4b49      	ldr	r3, [pc, #292]	; (8001c40 <answer2CPU+0x384>)
 8001b1a:	2212      	movs	r2, #18
 8001b1c:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001b1e:	4b4d      	ldr	r3, [pc, #308]	; (8001c54 <answer2CPU+0x398>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b13      	cmp	r3, #19
 8001b2a:	d140      	bne.n	8001bae <answer2CPU+0x2f2>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3302      	adds	r3, #2
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	001a      	movs	r2, r3
 8001b34:	4b48      	ldr	r3, [pc, #288]	; (8001c58 <answer2CPU+0x39c>)
 8001b36:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3303      	adds	r3, #3
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	001a      	movs	r2, r3
 8001b40:	4b46      	ldr	r3, [pc, #280]	; (8001c5c <answer2CPU+0x3a0>)
 8001b42:	601a      	str	r2, [r3, #0]
					fontInfo= cmd[4];
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	791a      	ldrb	r2, [r3, #4]
 8001b48:	4b45      	ldr	r3, [pc, #276]	; (8001c60 <answer2CPU+0x3a4>)
 8001b4a:	701a      	strb	r2, [r3, #0]
					color=fontInfo|0xF0;
 8001b4c:	4b44      	ldr	r3, [pc, #272]	; (8001c60 <answer2CPU+0x3a4>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2210      	movs	r2, #16
 8001b52:	4252      	negs	r2, r2
 8001b54:	4313      	orrs	r3, r2
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	4b42      	ldr	r3, [pc, #264]	; (8001c64 <answer2CPU+0x3a8>)
 8001b5a:	701a      	strb	r2, [r3, #0]
					strLen = cmd[1] - 0x04;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	3b04      	subs	r3, #4
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4b40      	ldr	r3, [pc, #256]	; (8001c68 <answer2CPU+0x3ac>)
 8001b68:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 8001b6a:	230e      	movs	r3, #14
 8001b6c:	18fb      	adds	r3, r7, r3
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
 8001b72:	e00f      	b.n	8001b94 <answer2CPU+0x2d8>
					dataASCII[i] = cmd[i+5];
 8001b74:	200e      	movs	r0, #14
 8001b76:	183b      	adds	r3, r7, r0
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	3305      	adds	r3, #5
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	18d2      	adds	r2, r2, r3
 8001b80:	183b      	adds	r3, r7, r0
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	7811      	ldrb	r1, [r2, #0]
 8001b86:	4a39      	ldr	r2, [pc, #228]	; (8001c6c <answer2CPU+0x3b0>)
 8001b88:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 8001b8a:	183b      	adds	r3, r7, r0
 8001b8c:	781a      	ldrb	r2, [r3, #0]
 8001b8e:	183b      	adds	r3, r7, r0
 8001b90:	3201      	adds	r2, #1
 8001b92:	701a      	strb	r2, [r3, #0]
 8001b94:	4b34      	ldr	r3, [pc, #208]	; (8001c68 <answer2CPU+0x3ac>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	220e      	movs	r2, #14
 8001b9a:	18ba      	adds	r2, r7, r2
 8001b9c:	7812      	ldrb	r2, [r2, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d3e8      	bcc.n	8001b74 <answer2CPU+0x2b8>
				}
					cmd2Execute=0x13;
 8001ba2:	4b27      	ldr	r3, [pc, #156]	; (8001c40 <answer2CPU+0x384>)
 8001ba4:	2213      	movs	r2, #19
 8001ba6:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001ba8:	4b2a      	ldr	r3, [pc, #168]	; (8001c54 <answer2CPU+0x398>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b14      	cmp	r3, #20
 8001bb4:	d109      	bne.n	8001bca <answer2CPU+0x30e>
					soundNum = cmd[2];
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	789a      	ldrb	r2, [r3, #2]
 8001bba:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <answer2CPU+0x3b4>)
 8001bbc:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 8001bbe:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <answer2CPU+0x384>)
 8001bc0:	2214      	movs	r2, #20
 8001bc2:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001bc4:	4b23      	ldr	r3, [pc, #140]	; (8001c54 <answer2CPU+0x398>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b15      	cmp	r3, #21
 8001bd0:	d10d      	bne.n	8001bee <answer2CPU+0x332>
					volume = cmd[2];
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	789a      	ldrb	r2, [r3, #2]
 8001bd6:	4b27      	ldr	r3, [pc, #156]	; (8001c74 <answer2CPU+0x3b8>)
 8001bd8:	701a      	strb	r2, [r3, #0]
					contrast = cmd[3];
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	78da      	ldrb	r2, [r3, #3]
 8001bde:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <answer2CPU+0x3bc>)
 8001be0:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 8001be2:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <answer2CPU+0x384>)
 8001be4:	2215      	movs	r2, #21
 8001be6:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001be8:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <answer2CPU+0x398>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b16      	cmp	r3, #22
 8001bf4:	d10d      	bne.n	8001c12 <answer2CPU+0x356>
					volume = cmd[3];
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	78da      	ldrb	r2, [r3, #3]
 8001bfa:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <answer2CPU+0x3b8>)
 8001bfc:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	791a      	ldrb	r2, [r3, #4]
 8001c02:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <answer2CPU+0x3bc>)
 8001c04:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <answer2CPU+0x384>)
 8001c08:	2216      	movs	r2, #22
 8001c0a:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <answer2CPU+0x398>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d000      	beq.n	8001c1c <answer2CPU+0x360>
 8001c1a:	e09f      	b.n	8001d5c <answer2CPU+0x4a0>
				myLength = 0x14; //20 bytes length answer
 8001c1c:	210c      	movs	r1, #12
 8001c1e:	187b      	adds	r3, r7, r1
 8001c20:	2214      	movs	r2, #20
 8001c22:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001c24:	187b      	adds	r3, r7, r1
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	3b02      	subs	r3, #2
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <answer2CPU+0x38c>)
 8001c30:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001c32:	230e      	movs	r3, #14
 8001c34:	18fb      	adds	r3, r7, r3
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
 8001c3a:	e030      	b.n	8001c9e <answer2CPU+0x3e2>
 8001c3c:	200002b0 	.word	0x200002b0
 8001c40:	20000312 	.word	0x20000312
 8001c44:	50000800 	.word	0x50000800
 8001c48:	200002f8 	.word	0x200002f8
 8001c4c:	40004400 	.word	0x40004400
 8001c50:	200002b1 	.word	0x200002b1
 8001c54:	20000313 	.word	0x20000313
 8001c58:	200002b8 	.word	0x200002b8
 8001c5c:	200002bc 	.word	0x200002bc
 8001c60:	2000031c 	.word	0x2000031c
 8001c64:	2000031d 	.word	0x2000031d
 8001c68:	200002b6 	.word	0x200002b6
 8001c6c:	200002c4 	.word	0x200002c4
 8001c70:	200002b2 	.word	0x200002b2
 8001c74:	200002b3 	.word	0x200002b3
 8001c78:	200002b4 	.word	0x200002b4
					ans[i + 2] = PCB_type[i];
 8001c7c:	200e      	movs	r0, #14
 8001c7e:	183b      	adds	r3, r7, r0
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	4acb      	ldr	r2, [pc, #812]	; (8001fb0 <answer2CPU+0x6f4>)
 8001c84:	5cd1      	ldrb	r1, [r2, r3]
 8001c86:	183b      	adds	r3, r7, r0
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	1c9a      	adds	r2, r3, #2
 8001c8c:	b289      	uxth	r1, r1
 8001c8e:	4bc9      	ldr	r3, [pc, #804]	; (8001fb4 <answer2CPU+0x6f8>)
 8001c90:	0052      	lsls	r2, r2, #1
 8001c92:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001c94:	183b      	adds	r3, r7, r0
 8001c96:	781a      	ldrb	r2, [r3, #0]
 8001c98:	183b      	adds	r3, r7, r0
 8001c9a:	3201      	adds	r2, #1
 8001c9c:	701a      	strb	r2, [r3, #0]
 8001c9e:	220e      	movs	r2, #14
 8001ca0:	18bb      	adds	r3, r7, r2
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b10      	cmp	r3, #16
 8001ca6:	d9e9      	bls.n	8001c7c <answer2CPU+0x3c0>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001ca8:	18bb      	adds	r3, r7, r2
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]
 8001cae:	e011      	b.n	8001cd4 <answer2CPU+0x418>
					myCS = myCS + ans[i];
 8001cb0:	200e      	movs	r0, #14
 8001cb2:	183b      	adds	r3, r7, r0
 8001cb4:	781a      	ldrb	r2, [r3, #0]
 8001cb6:	4bbf      	ldr	r3, [pc, #764]	; (8001fb4 <answer2CPU+0x6f8>)
 8001cb8:	0052      	lsls	r2, r2, #1
 8001cba:	5ad3      	ldrh	r3, [r2, r3]
 8001cbc:	b2d9      	uxtb	r1, r3
 8001cbe:	220d      	movs	r2, #13
 8001cc0:	18bb      	adds	r3, r7, r2
 8001cc2:	18ba      	adds	r2, r7, r2
 8001cc4:	7812      	ldrb	r2, [r2, #0]
 8001cc6:	188a      	adds	r2, r1, r2
 8001cc8:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001cca:	183b      	adds	r3, r7, r0
 8001ccc:	781a      	ldrb	r2, [r3, #0]
 8001cce:	183b      	adds	r3, r7, r0
 8001cd0:	3201      	adds	r2, #1
 8001cd2:	701a      	strb	r2, [r3, #0]
 8001cd4:	230e      	movs	r3, #14
 8001cd6:	18fb      	adds	r3, r7, r3
 8001cd8:	781a      	ldrb	r2, [r3, #0]
 8001cda:	200c      	movs	r0, #12
 8001cdc:	183b      	adds	r3, r7, r0
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	dbe4      	blt.n	8001cb0 <answer2CPU+0x3f4>
				}
				myCS = 0 - myCS;
 8001ce6:	210d      	movs	r1, #13
 8001ce8:	187b      	adds	r3, r7, r1
 8001cea:	187a      	adds	r2, r7, r1
 8001cec:	7812      	ldrb	r2, [r2, #0]
 8001cee:	4252      	negs	r2, r2
 8001cf0:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001cf2:	183b      	adds	r3, r7, r0
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	1e5a      	subs	r2, r3, #1
 8001cf8:	187b      	adds	r3, r7, r1
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	b299      	uxth	r1, r3
 8001cfe:	4bad      	ldr	r3, [pc, #692]	; (8001fb4 <answer2CPU+0x6f8>)
 8001d00:	0052      	lsls	r2, r2, #1
 8001d02:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001d04:	46c0      	nop			; (mov r8, r8)
 8001d06:	4bac      	ldr	r3, [pc, #688]	; (8001fb8 <answer2CPU+0x6fc>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	2280      	movs	r2, #128	; 0x80
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d0fa      	beq.n	8001d06 <answer2CPU+0x44a>
				USART2->TDR = ans[0]|0x0100;
 8001d10:	4ba8      	ldr	r3, [pc, #672]	; (8001fb4 <answer2CPU+0x6f8>)
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	2280      	movs	r2, #128	; 0x80
 8001d16:	0052      	lsls	r2, r2, #1
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	4ba6      	ldr	r3, [pc, #664]	; (8001fb8 <answer2CPU+0x6fc>)
 8001d1e:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001d20:	e014      	b.n	8001d4c <answer2CPU+0x490>
				  {
				    i++;
 8001d22:	210e      	movs	r1, #14
 8001d24:	187b      	adds	r3, r7, r1
 8001d26:	781a      	ldrb	r2, [r3, #0]
 8001d28:	187b      	adds	r3, r7, r1
 8001d2a:	3201      	adds	r2, #1
 8001d2c:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	4ba1      	ldr	r3, [pc, #644]	; (8001fb8 <answer2CPU+0x6fc>)
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	2280      	movs	r2, #128	; 0x80
 8001d36:	4013      	ands	r3, r2
 8001d38:	d0fa      	beq.n	8001d30 <answer2CPU+0x474>
				    USART2->TDR = (uint8_t)ans[i];
 8001d3a:	230e      	movs	r3, #14
 8001d3c:	18fb      	adds	r3, r7, r3
 8001d3e:	781a      	ldrb	r2, [r3, #0]
 8001d40:	4b9c      	ldr	r3, [pc, #624]	; (8001fb4 <answer2CPU+0x6f8>)
 8001d42:	0052      	lsls	r2, r2, #1
 8001d44:	5ad3      	ldrh	r3, [r2, r3]
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	4b9b      	ldr	r3, [pc, #620]	; (8001fb8 <answer2CPU+0x6fc>)
 8001d4a:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001d4c:	230e      	movs	r3, #14
 8001d4e:	18fb      	adds	r3, r7, r3
 8001d50:	781a      	ldrb	r2, [r3, #0]
 8001d52:	4b98      	ldr	r3, [pc, #608]	; (8001fb4 <answer2CPU+0x6f8>)
 8001d54:	0052      	lsls	r2, r2, #1
 8001d56:	5ad3      	ldrh	r3, [r2, r3]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1e2      	bne.n	8001d22 <answer2CPU+0x466>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d000      	beq.n	8001d66 <answer2CPU+0x4aa>
 8001d64:	e07f      	b.n	8001e66 <answer2CPU+0x5aa>
				myLength = 0x0B; //19 bytes length answer
 8001d66:	210c      	movs	r1, #12
 8001d68:	187b      	adds	r3, r7, r1
 8001d6a:	220b      	movs	r2, #11
 8001d6c:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001d6e:	187b      	adds	r3, r7, r1
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	3b02      	subs	r3, #2
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	4b8e      	ldr	r3, [pc, #568]	; (8001fb4 <answer2CPU+0x6f8>)
 8001d7a:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001d7c:	230e      	movs	r3, #14
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
 8001d84:	e010      	b.n	8001da8 <answer2CPU+0x4ec>
					ans[i + 2] = PCB_rev[i];
 8001d86:	200e      	movs	r0, #14
 8001d88:	183b      	adds	r3, r7, r0
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	4a8b      	ldr	r2, [pc, #556]	; (8001fbc <answer2CPU+0x700>)
 8001d8e:	5cd1      	ldrb	r1, [r2, r3]
 8001d90:	183b      	adds	r3, r7, r0
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	1c9a      	adds	r2, r3, #2
 8001d96:	b289      	uxth	r1, r1
 8001d98:	4b86      	ldr	r3, [pc, #536]	; (8001fb4 <answer2CPU+0x6f8>)
 8001d9a:	0052      	lsls	r2, r2, #1
 8001d9c:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001d9e:	183b      	adds	r3, r7, r0
 8001da0:	781a      	ldrb	r2, [r3, #0]
 8001da2:	183b      	adds	r3, r7, r0
 8001da4:	3201      	adds	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]
 8001da8:	220e      	movs	r2, #14
 8001daa:	18bb      	adds	r3, r7, r2
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b10      	cmp	r3, #16
 8001db0:	d9e9      	bls.n	8001d86 <answer2CPU+0x4ca>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001db2:	18bb      	adds	r3, r7, r2
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
 8001db8:	e011      	b.n	8001dde <answer2CPU+0x522>
					myCS = myCS + ans[i];
 8001dba:	200e      	movs	r0, #14
 8001dbc:	183b      	adds	r3, r7, r0
 8001dbe:	781a      	ldrb	r2, [r3, #0]
 8001dc0:	4b7c      	ldr	r3, [pc, #496]	; (8001fb4 <answer2CPU+0x6f8>)
 8001dc2:	0052      	lsls	r2, r2, #1
 8001dc4:	5ad3      	ldrh	r3, [r2, r3]
 8001dc6:	b2d9      	uxtb	r1, r3
 8001dc8:	220d      	movs	r2, #13
 8001dca:	18bb      	adds	r3, r7, r2
 8001dcc:	18ba      	adds	r2, r7, r2
 8001dce:	7812      	ldrb	r2, [r2, #0]
 8001dd0:	188a      	adds	r2, r1, r2
 8001dd2:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001dd4:	183b      	adds	r3, r7, r0
 8001dd6:	781a      	ldrb	r2, [r3, #0]
 8001dd8:	183b      	adds	r3, r7, r0
 8001dda:	3201      	adds	r2, #1
 8001ddc:	701a      	strb	r2, [r3, #0]
 8001dde:	230e      	movs	r3, #14
 8001de0:	18fb      	adds	r3, r7, r3
 8001de2:	781a      	ldrb	r2, [r3, #0]
 8001de4:	200c      	movs	r0, #12
 8001de6:	183b      	adds	r3, r7, r0
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	429a      	cmp	r2, r3
 8001dee:	dbe4      	blt.n	8001dba <answer2CPU+0x4fe>
				}
				myCS = 0 - myCS;
 8001df0:	210d      	movs	r1, #13
 8001df2:	187b      	adds	r3, r7, r1
 8001df4:	187a      	adds	r2, r7, r1
 8001df6:	7812      	ldrb	r2, [r2, #0]
 8001df8:	4252      	negs	r2, r2
 8001dfa:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001dfc:	183b      	adds	r3, r7, r0
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	1e5a      	subs	r2, r3, #1
 8001e02:	187b      	adds	r3, r7, r1
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	b299      	uxth	r1, r3
 8001e08:	4b6a      	ldr	r3, [pc, #424]	; (8001fb4 <answer2CPU+0x6f8>)
 8001e0a:	0052      	lsls	r2, r2, #1
 8001e0c:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	4b69      	ldr	r3, [pc, #420]	; (8001fb8 <answer2CPU+0x6fc>)
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	2280      	movs	r2, #128	; 0x80
 8001e16:	4013      	ands	r3, r2
 8001e18:	d0fa      	beq.n	8001e10 <answer2CPU+0x554>
				USART2->TDR = ans[0]|0x0100;
 8001e1a:	4b66      	ldr	r3, [pc, #408]	; (8001fb4 <answer2CPU+0x6f8>)
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	2280      	movs	r2, #128	; 0x80
 8001e20:	0052      	lsls	r2, r2, #1
 8001e22:	4313      	orrs	r3, r2
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	4b64      	ldr	r3, [pc, #400]	; (8001fb8 <answer2CPU+0x6fc>)
 8001e28:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001e2a:	e014      	b.n	8001e56 <answer2CPU+0x59a>
					  {
					    i++;
 8001e2c:	210e      	movs	r1, #14
 8001e2e:	187b      	adds	r3, r7, r1
 8001e30:	781a      	ldrb	r2, [r3, #0]
 8001e32:	187b      	adds	r3, r7, r1
 8001e34:	3201      	adds	r2, #1
 8001e36:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001e38:	46c0      	nop			; (mov r8, r8)
 8001e3a:	4b5f      	ldr	r3, [pc, #380]	; (8001fb8 <answer2CPU+0x6fc>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	2280      	movs	r2, #128	; 0x80
 8001e40:	4013      	ands	r3, r2
 8001e42:	d0fa      	beq.n	8001e3a <answer2CPU+0x57e>
					    USART2->TDR = (uint8_t)ans[i];
 8001e44:	230e      	movs	r3, #14
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	781a      	ldrb	r2, [r3, #0]
 8001e4a:	4b5a      	ldr	r3, [pc, #360]	; (8001fb4 <answer2CPU+0x6f8>)
 8001e4c:	0052      	lsls	r2, r2, #1
 8001e4e:	5ad3      	ldrh	r3, [r2, r3]
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	4b59      	ldr	r3, [pc, #356]	; (8001fb8 <answer2CPU+0x6fc>)
 8001e54:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001e56:	230e      	movs	r3, #14
 8001e58:	18fb      	adds	r3, r7, r3
 8001e5a:	781a      	ldrb	r2, [r3, #0]
 8001e5c:	4b55      	ldr	r3, [pc, #340]	; (8001fb4 <answer2CPU+0x6f8>)
 8001e5e:	0052      	lsls	r2, r2, #1
 8001e60:	5ad3      	ldrh	r3, [r2, r3]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1e2      	bne.n	8001e2c <answer2CPU+0x570>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d000      	beq.n	8001e70 <answer2CPU+0x5b4>
 8001e6e:	e07f      	b.n	8001f70 <answer2CPU+0x6b4>
				myLength = 0x13; //19 bytes length answer
 8001e70:	210c      	movs	r1, #12
 8001e72:	187b      	adds	r3, r7, r1
 8001e74:	2213      	movs	r2, #19
 8001e76:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001e78:	187b      	adds	r3, r7, r1
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	3b02      	subs	r3, #2
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	4b4c      	ldr	r3, [pc, #304]	; (8001fb4 <answer2CPU+0x6f8>)
 8001e84:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001e86:	230e      	movs	r3, #14
 8001e88:	18fb      	adds	r3, r7, r3
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
 8001e8e:	e010      	b.n	8001eb2 <answer2CPU+0x5f6>
					ans[i + 2] = EmitterSN[i];
 8001e90:	200e      	movs	r0, #14
 8001e92:	183b      	adds	r3, r7, r0
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	4a4a      	ldr	r2, [pc, #296]	; (8001fc0 <answer2CPU+0x704>)
 8001e98:	5cd1      	ldrb	r1, [r2, r3]
 8001e9a:	183b      	adds	r3, r7, r0
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	1c9a      	adds	r2, r3, #2
 8001ea0:	b289      	uxth	r1, r1
 8001ea2:	4b44      	ldr	r3, [pc, #272]	; (8001fb4 <answer2CPU+0x6f8>)
 8001ea4:	0052      	lsls	r2, r2, #1
 8001ea6:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001ea8:	183b      	adds	r3, r7, r0
 8001eaa:	781a      	ldrb	r2, [r3, #0]
 8001eac:	183b      	adds	r3, r7, r0
 8001eae:	3201      	adds	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
 8001eb2:	220e      	movs	r2, #14
 8001eb4:	18bb      	adds	r3, r7, r2
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b10      	cmp	r3, #16
 8001eba:	d9e9      	bls.n	8001e90 <answer2CPU+0x5d4>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001ebc:	18bb      	adds	r3, r7, r2
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
 8001ec2:	e011      	b.n	8001ee8 <answer2CPU+0x62c>
					myCS = myCS + ans[i];
 8001ec4:	200e      	movs	r0, #14
 8001ec6:	183b      	adds	r3, r7, r0
 8001ec8:	781a      	ldrb	r2, [r3, #0]
 8001eca:	4b3a      	ldr	r3, [pc, #232]	; (8001fb4 <answer2CPU+0x6f8>)
 8001ecc:	0052      	lsls	r2, r2, #1
 8001ece:	5ad3      	ldrh	r3, [r2, r3]
 8001ed0:	b2d9      	uxtb	r1, r3
 8001ed2:	220d      	movs	r2, #13
 8001ed4:	18bb      	adds	r3, r7, r2
 8001ed6:	18ba      	adds	r2, r7, r2
 8001ed8:	7812      	ldrb	r2, [r2, #0]
 8001eda:	188a      	adds	r2, r1, r2
 8001edc:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001ede:	183b      	adds	r3, r7, r0
 8001ee0:	781a      	ldrb	r2, [r3, #0]
 8001ee2:	183b      	adds	r3, r7, r0
 8001ee4:	3201      	adds	r2, #1
 8001ee6:	701a      	strb	r2, [r3, #0]
 8001ee8:	230e      	movs	r3, #14
 8001eea:	18fb      	adds	r3, r7, r3
 8001eec:	781a      	ldrb	r2, [r3, #0]
 8001eee:	200c      	movs	r0, #12
 8001ef0:	183b      	adds	r3, r7, r0
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	dbe4      	blt.n	8001ec4 <answer2CPU+0x608>
				}
				myCS = 0 - myCS;
 8001efa:	210d      	movs	r1, #13
 8001efc:	187b      	adds	r3, r7, r1
 8001efe:	187a      	adds	r2, r7, r1
 8001f00:	7812      	ldrb	r2, [r2, #0]
 8001f02:	4252      	negs	r2, r2
 8001f04:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001f06:	183b      	adds	r3, r7, r0
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	1e5a      	subs	r2, r3, #1
 8001f0c:	187b      	adds	r3, r7, r1
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	b299      	uxth	r1, r3
 8001f12:	4b28      	ldr	r3, [pc, #160]	; (8001fb4 <answer2CPU+0x6f8>)
 8001f14:	0052      	lsls	r2, r2, #1
 8001f16:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001f18:	46c0      	nop			; (mov r8, r8)
 8001f1a:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <answer2CPU+0x6fc>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	2280      	movs	r2, #128	; 0x80
 8001f20:	4013      	ands	r3, r2
 8001f22:	d0fa      	beq.n	8001f1a <answer2CPU+0x65e>
				USART2->TDR = ans[0]|0x0100;
 8001f24:	4b23      	ldr	r3, [pc, #140]	; (8001fb4 <answer2CPU+0x6f8>)
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	2280      	movs	r2, #128	; 0x80
 8001f2a:	0052      	lsls	r2, r2, #1
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <answer2CPU+0x6fc>)
 8001f32:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001f34:	e014      	b.n	8001f60 <answer2CPU+0x6a4>
				  {
				    i++;
 8001f36:	210e      	movs	r1, #14
 8001f38:	187b      	adds	r3, r7, r1
 8001f3a:	781a      	ldrb	r2, [r3, #0]
 8001f3c:	187b      	adds	r3, r7, r1
 8001f3e:	3201      	adds	r2, #1
 8001f40:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	4b1c      	ldr	r3, [pc, #112]	; (8001fb8 <answer2CPU+0x6fc>)
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	2280      	movs	r2, #128	; 0x80
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d0fa      	beq.n	8001f44 <answer2CPU+0x688>
				    	USART2->TDR = (uint8_t)ans[i];
 8001f4e:	230e      	movs	r3, #14
 8001f50:	18fb      	adds	r3, r7, r3
 8001f52:	781a      	ldrb	r2, [r3, #0]
 8001f54:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <answer2CPU+0x6f8>)
 8001f56:	0052      	lsls	r2, r2, #1
 8001f58:	5ad3      	ldrh	r3, [r2, r3]
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <answer2CPU+0x6fc>)
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001f60:	230e      	movs	r3, #14
 8001f62:	18fb      	adds	r3, r7, r3
 8001f64:	781a      	ldrb	r2, [r3, #0]
 8001f66:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <answer2CPU+0x6f8>)
 8001f68:	0052      	lsls	r2, r2, #1
 8001f6a:	5ad3      	ldrh	r3, [r2, r3]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1e2      	bne.n	8001f36 <answer2CPU+0x67a>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d000      	beq.n	8001f7a <answer2CPU+0x6be>
 8001f78:	e07c      	b.n	8002074 <answer2CPU+0x7b8>
				myLength = 0x04; //4 bytes length answer
 8001f7a:	210c      	movs	r1, #12
 8001f7c:	187b      	adds	r3, r7, r1
 8001f7e:	2204      	movs	r2, #4
 8001f80:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001f82:	187b      	adds	r3, r7, r1
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	3b02      	subs	r3, #2
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <answer2CPU+0x6f8>)
 8001f8e:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <answer2CPU+0x708>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <answer2CPU+0x6f8>)
 8001f98:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001f9a:	230d      	movs	r3, #13
 8001f9c:	18fb      	adds	r3, r7, r3
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <answer2CPU+0x6f8>)
 8001fa4:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001fa6:	230e      	movs	r3, #14
 8001fa8:	18fb      	adds	r3, r7, r3
 8001faa:	2200      	movs	r2, #0
 8001fac:	701a      	strb	r2, [r3, #0]
 8001fae:	e01d      	b.n	8001fec <answer2CPU+0x730>
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	200002f8 	.word	0x200002f8
 8001fb8:	40004400 	.word	0x40004400
 8001fbc:	20000014 	.word	0x20000014
 8001fc0:	20000020 	.word	0x20000020
 8001fc4:	2000001c 	.word	0x2000001c
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001fc8:	200e      	movs	r0, #14
 8001fca:	183b      	adds	r3, r7, r0
 8001fcc:	781a      	ldrb	r2, [r3, #0]
 8001fce:	4b6d      	ldr	r3, [pc, #436]	; (8002184 <answer2CPU+0x8c8>)
 8001fd0:	0052      	lsls	r2, r2, #1
 8001fd2:	5ad3      	ldrh	r3, [r2, r3]
 8001fd4:	b2d9      	uxtb	r1, r3
 8001fd6:	220d      	movs	r2, #13
 8001fd8:	18bb      	adds	r3, r7, r2
 8001fda:	18ba      	adds	r2, r7, r2
 8001fdc:	7812      	ldrb	r2, [r2, #0]
 8001fde:	188a      	adds	r2, r1, r2
 8001fe0:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001fe2:	183b      	adds	r3, r7, r0
 8001fe4:	781a      	ldrb	r2, [r3, #0]
 8001fe6:	183b      	adds	r3, r7, r0
 8001fe8:	3201      	adds	r2, #1
 8001fea:	701a      	strb	r2, [r3, #0]
 8001fec:	230e      	movs	r3, #14
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	781a      	ldrb	r2, [r3, #0]
 8001ff2:	200c      	movs	r0, #12
 8001ff4:	183b      	adds	r3, r7, r0
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	dbe4      	blt.n	8001fc8 <answer2CPU+0x70c>
				}
				myCS = 0 - myCS;
 8001ffe:	210d      	movs	r1, #13
 8002000:	187b      	adds	r3, r7, r1
 8002002:	187a      	adds	r2, r7, r1
 8002004:	7812      	ldrb	r2, [r2, #0]
 8002006:	4252      	negs	r2, r2
 8002008:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 800200a:	183b      	adds	r3, r7, r0
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	1e5a      	subs	r2, r3, #1
 8002010:	187b      	adds	r3, r7, r1
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	b299      	uxth	r1, r3
 8002016:	4b5b      	ldr	r3, [pc, #364]	; (8002184 <answer2CPU+0x8c8>)
 8002018:	0052      	lsls	r2, r2, #1
 800201a:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 800201c:	46c0      	nop			; (mov r8, r8)
 800201e:	4b5a      	ldr	r3, [pc, #360]	; (8002188 <answer2CPU+0x8cc>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	2280      	movs	r2, #128	; 0x80
 8002024:	4013      	ands	r3, r2
 8002026:	d0fa      	beq.n	800201e <answer2CPU+0x762>
					USART2->TDR = ans[0]|0x0100;
 8002028:	4b56      	ldr	r3, [pc, #344]	; (8002184 <answer2CPU+0x8c8>)
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	2280      	movs	r2, #128	; 0x80
 800202e:	0052      	lsls	r2, r2, #1
 8002030:	4313      	orrs	r3, r2
 8002032:	b29a      	uxth	r2, r3
 8002034:	4b54      	ldr	r3, [pc, #336]	; (8002188 <answer2CPU+0x8cc>)
 8002036:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8002038:	e014      	b.n	8002064 <answer2CPU+0x7a8>
						{
						  i++;
 800203a:	210e      	movs	r1, #14
 800203c:	187b      	adds	r3, r7, r1
 800203e:	781a      	ldrb	r2, [r3, #0]
 8002040:	187b      	adds	r3, r7, r1
 8002042:	3201      	adds	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	4b4f      	ldr	r3, [pc, #316]	; (8002188 <answer2CPU+0x8cc>)
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	2280      	movs	r2, #128	; 0x80
 800204e:	4013      	ands	r3, r2
 8002050:	d0fa      	beq.n	8002048 <answer2CPU+0x78c>
						     USART2->TDR = (uint8_t)ans[i];
 8002052:	230e      	movs	r3, #14
 8002054:	18fb      	adds	r3, r7, r3
 8002056:	781a      	ldrb	r2, [r3, #0]
 8002058:	4b4a      	ldr	r3, [pc, #296]	; (8002184 <answer2CPU+0x8c8>)
 800205a:	0052      	lsls	r2, r2, #1
 800205c:	5ad3      	ldrh	r3, [r2, r3]
 800205e:	b2da      	uxtb	r2, r3
 8002060:	4b49      	ldr	r3, [pc, #292]	; (8002188 <answer2CPU+0x8cc>)
 8002062:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8002064:	230e      	movs	r3, #14
 8002066:	18fb      	adds	r3, r7, r3
 8002068:	781a      	ldrb	r2, [r3, #0]
 800206a:	4b46      	ldr	r3, [pc, #280]	; (8002184 <answer2CPU+0x8c8>)
 800206c:	0052      	lsls	r2, r2, #1
 800206e:	5ad3      	ldrh	r3, [r2, r3]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1e2      	bne.n	800203a <answer2CPU+0x77e>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b04      	cmp	r3, #4
 800207a:	d000      	beq.n	800207e <answer2CPU+0x7c2>
 800207c:	e076      	b.n	800216c <answer2CPU+0x8b0>
				myLength = 0x04; //4 bytes length answer
 800207e:	210c      	movs	r1, #12
 8002080:	187b      	adds	r3, r7, r1
 8002082:	2204      	movs	r2, #4
 8002084:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8002086:	187b      	adds	r3, r7, r1
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	b29b      	uxth	r3, r3
 800208c:	3b02      	subs	r3, #2
 800208e:	b29a      	uxth	r2, r3
 8002090:	4b3c      	ldr	r3, [pc, #240]	; (8002184 <answer2CPU+0x8c8>)
 8002092:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3302      	adds	r3, #2
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	001a      	movs	r2, r3
 800209c:	4b3b      	ldr	r3, [pc, #236]	; (800218c <answer2CPU+0x8d0>)
 800209e:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 80020a0:	4b3b      	ldr	r3, [pc, #236]	; (8002190 <answer2CPU+0x8d4>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	4b37      	ldr	r3, [pc, #220]	; (8002184 <answer2CPU+0x8c8>)
 80020a8:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 80020aa:	230d      	movs	r3, #13
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	4b34      	ldr	r3, [pc, #208]	; (8002184 <answer2CPU+0x8c8>)
 80020b4:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 80020b6:	230e      	movs	r3, #14
 80020b8:	18fb      	adds	r3, r7, r3
 80020ba:	2200      	movs	r2, #0
 80020bc:	701a      	strb	r2, [r3, #0]
 80020be:	e011      	b.n	80020e4 <answer2CPU+0x828>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 80020c0:	200e      	movs	r0, #14
 80020c2:	183b      	adds	r3, r7, r0
 80020c4:	781a      	ldrb	r2, [r3, #0]
 80020c6:	4b2f      	ldr	r3, [pc, #188]	; (8002184 <answer2CPU+0x8c8>)
 80020c8:	0052      	lsls	r2, r2, #1
 80020ca:	5ad3      	ldrh	r3, [r2, r3]
 80020cc:	b2d9      	uxtb	r1, r3
 80020ce:	220d      	movs	r2, #13
 80020d0:	18bb      	adds	r3, r7, r2
 80020d2:	18ba      	adds	r2, r7, r2
 80020d4:	7812      	ldrb	r2, [r2, #0]
 80020d6:	188a      	adds	r2, r1, r2
 80020d8:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 80020da:	183b      	adds	r3, r7, r0
 80020dc:	781a      	ldrb	r2, [r3, #0]
 80020de:	183b      	adds	r3, r7, r0
 80020e0:	3201      	adds	r2, #1
 80020e2:	701a      	strb	r2, [r3, #0]
 80020e4:	230e      	movs	r3, #14
 80020e6:	18fb      	adds	r3, r7, r3
 80020e8:	781a      	ldrb	r2, [r3, #0]
 80020ea:	200c      	movs	r0, #12
 80020ec:	183b      	adds	r3, r7, r0
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	3b01      	subs	r3, #1
 80020f2:	429a      	cmp	r2, r3
 80020f4:	dbe4      	blt.n	80020c0 <answer2CPU+0x804>
				}
				myCS = 0 - myCS;
 80020f6:	210d      	movs	r1, #13
 80020f8:	187b      	adds	r3, r7, r1
 80020fa:	187a      	adds	r2, r7, r1
 80020fc:	7812      	ldrb	r2, [r2, #0]
 80020fe:	4252      	negs	r2, r2
 8002100:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8002102:	183b      	adds	r3, r7, r0
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	1e5a      	subs	r2, r3, #1
 8002108:	187b      	adds	r3, r7, r1
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	b299      	uxth	r1, r3
 800210e:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <answer2CPU+0x8c8>)
 8002110:	0052      	lsls	r2, r2, #1
 8002112:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8002114:	46c0      	nop			; (mov r8, r8)
 8002116:	4b1c      	ldr	r3, [pc, #112]	; (8002188 <answer2CPU+0x8cc>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	2280      	movs	r2, #128	; 0x80
 800211c:	4013      	ands	r3, r2
 800211e:	d0fa      	beq.n	8002116 <answer2CPU+0x85a>
				USART2->TDR = ans[0]|0x0100;
 8002120:	4b18      	ldr	r3, [pc, #96]	; (8002184 <answer2CPU+0x8c8>)
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	2280      	movs	r2, #128	; 0x80
 8002126:	0052      	lsls	r2, r2, #1
 8002128:	4313      	orrs	r3, r2
 800212a:	b29a      	uxth	r2, r3
 800212c:	4b16      	ldr	r3, [pc, #88]	; (8002188 <answer2CPU+0x8cc>)
 800212e:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8002130:	e014      	b.n	800215c <answer2CPU+0x8a0>
				{
				  i++;
 8002132:	210e      	movs	r1, #14
 8002134:	187b      	adds	r3, r7, r1
 8002136:	781a      	ldrb	r2, [r3, #0]
 8002138:	187b      	adds	r3, r7, r1
 800213a:	3201      	adds	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <answer2CPU+0x8cc>)
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	2280      	movs	r2, #128	; 0x80
 8002146:	4013      	ands	r3, r2
 8002148:	d0fa      	beq.n	8002140 <answer2CPU+0x884>
				  USART2->TDR = (uint8_t)ans[i];
 800214a:	230e      	movs	r3, #14
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	781a      	ldrb	r2, [r3, #0]
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <answer2CPU+0x8c8>)
 8002152:	0052      	lsls	r2, r2, #1
 8002154:	5ad3      	ldrh	r3, [r2, r3]
 8002156:	b2da      	uxtb	r2, r3
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <answer2CPU+0x8cc>)
 800215a:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 800215c:	230e      	movs	r3, #14
 800215e:	18fb      	adds	r3, r7, r3
 8002160:	781a      	ldrb	r2, [r3, #0]
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <answer2CPU+0x8c8>)
 8002164:	0052      	lsls	r2, r2, #1
 8002166:	5ad3      	ldrh	r3, [r2, r3]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1e2      	bne.n	8002132 <answer2CPU+0x876>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <answer2CPU+0x8cc>)
 800216e:	6a1a      	ldr	r2, [r3, #32]
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <answer2CPU+0x8cc>)
 8002172:	2108      	movs	r1, #8
 8002174:	430a      	orrs	r2, r1
 8002176:	621a      	str	r2, [r3, #32]
}
 8002178:	46c0      	nop			; (mov r8, r8)
 800217a:	0018      	movs	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	b004      	add	sp, #16
 8002180:	bd80      	pop	{r7, pc}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	200002f8 	.word	0x200002f8
 8002188:	40004400 	.word	0x40004400
 800218c:	200002c0 	.word	0x200002c0
 8002190:	200002b5 	.word	0x200002b5

08002194 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 800219a:	2001      	movs	r0, #1
 800219c:	f000 ffdc 	bl	8003158 <HAL_Delay>
		GPIOB->ODR &= ~(1 << 9); //reset cs
 80021a0:	4b28      	ldr	r3, [pc, #160]	; (8002244 <MEM_Reset+0xb0>)
 80021a2:	695a      	ldr	r2, [r3, #20]
 80021a4:	4b27      	ldr	r3, [pc, #156]	; (8002244 <MEM_Reset+0xb0>)
 80021a6:	4928      	ldr	r1, [pc, #160]	; (8002248 <MEM_Reset+0xb4>)
 80021a8:	400a      	ands	r2, r1
 80021aa:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 80021ac:	1dfb      	adds	r3, r7, #7
 80021ae:	2266      	movs	r2, #102	; 0x66
 80021b0:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 80021b2:	1df9      	adds	r1, r7, #7
 80021b4:	4825      	ldr	r0, [pc, #148]	; (800224c <MEM_Reset+0xb8>)
 80021b6:	2305      	movs	r3, #5
 80021b8:	2201      	movs	r2, #1
 80021ba:	f004 ff43 	bl	8007044 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 80021be:	4b21      	ldr	r3, [pc, #132]	; (8002244 <MEM_Reset+0xb0>)
 80021c0:	695a      	ldr	r2, [r3, #20]
 80021c2:	4b20      	ldr	r3, [pc, #128]	; (8002244 <MEM_Reset+0xb0>)
 80021c4:	2180      	movs	r1, #128	; 0x80
 80021c6:	0089      	lsls	r1, r1, #2
 80021c8:	430a      	orrs	r2, r1
 80021ca:	615a      	str	r2, [r3, #20]
		asm("NOP");
 80021cc:	46c0      	nop			; (mov r8, r8)
		__NOP();
 80021ce:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 80021d0:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 80021d2:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 80021d4:	46c0      	nop			; (mov r8, r8)
		__NOP();
 80021d6:	46c0      	nop			; (mov r8, r8)
		GPIOB->ODR &= ~(1 << 9);			//reset cs
 80021d8:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <MEM_Reset+0xb0>)
 80021da:	695a      	ldr	r2, [r3, #20]
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <MEM_Reset+0xb0>)
 80021de:	491a      	ldr	r1, [pc, #104]	; (8002248 <MEM_Reset+0xb4>)
 80021e0:	400a      	ands	r2, r1
 80021e2:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 80021e4:	1dfb      	adds	r3, r7, #7
 80021e6:	2299      	movs	r2, #153	; 0x99
 80021e8:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 80021ea:	1df9      	adds	r1, r7, #7
 80021ec:	4817      	ldr	r0, [pc, #92]	; (800224c <MEM_Reset+0xb8>)
 80021ee:	2305      	movs	r3, #5
 80021f0:	2201      	movs	r2, #1
 80021f2:	f004 ff27 	bl	8007044 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 80021f6:	4b13      	ldr	r3, [pc, #76]	; (8002244 <MEM_Reset+0xb0>)
 80021f8:	695a      	ldr	r2, [r3, #20]
 80021fa:	4b12      	ldr	r3, [pc, #72]	; (8002244 <MEM_Reset+0xb0>)
 80021fc:	2180      	movs	r1, #128	; 0x80
 80021fe:	0089      	lsls	r1, r1, #2
 8002200:	430a      	orrs	r2, r1
 8002202:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8002204:	2001      	movs	r0, #1
 8002206:	f000 ffa7 	bl	8003158 <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 800220a:	1dfb      	adds	r3, r7, #7
 800220c:	22b7      	movs	r2, #183	; 0xb7
 800220e:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 << 9); //reset cs
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <MEM_Reset+0xb0>)
 8002212:	695a      	ldr	r2, [r3, #20]
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <MEM_Reset+0xb0>)
 8002216:	490c      	ldr	r1, [pc, #48]	; (8002248 <MEM_Reset+0xb4>)
 8002218:	400a      	ands	r2, r1
 800221a:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 800221c:	1df9      	adds	r1, r7, #7
 800221e:	480b      	ldr	r0, [pc, #44]	; (800224c <MEM_Reset+0xb8>)
 8002220:	2305      	movs	r3, #5
 8002222:	2201      	movs	r2, #1
 8002224:	f004 ff0e 	bl	8007044 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <MEM_Reset+0xb0>)
 800222a:	695a      	ldr	r2, [r3, #20]
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <MEM_Reset+0xb0>)
 800222e:	2180      	movs	r1, #128	; 0x80
 8002230:	0089      	lsls	r1, r1, #2
 8002232:	430a      	orrs	r2, r1
 8002234:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8002236:	2001      	movs	r0, #1
 8002238:	f000 ff8e 	bl	8003158 <HAL_Delay>
	}
 800223c:	46c0      	nop			; (mov r8, r8)
 800223e:	46bd      	mov	sp, r7
 8002240:	b002      	add	sp, #8
 8002242:	bd80      	pop	{r7, pc}
 8002244:	50000400 	.word	0x50000400
 8002248:	fffffdff 	.word	0xfffffdff
 800224c:	200001a0 	.word	0x200001a0

08002250 <soundLoad>:
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	uint8_t soundLoad(uint8_t soundNum, uint8_t soundReady, uint8_t isSoundOver) {
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b08b      	sub	sp, #44	; 0x2c
 8002254:	af00      	add	r7, sp, #0
 8002256:	0004      	movs	r4, r0
 8002258:	0008      	movs	r0, r1
 800225a:	0011      	movs	r1, r2
 800225c:	1dfb      	adds	r3, r7, #7
 800225e:	1c22      	adds	r2, r4, #0
 8002260:	701a      	strb	r2, [r3, #0]
 8002262:	1dbb      	adds	r3, r7, #6
 8002264:	1c02      	adds	r2, r0, #0
 8002266:	701a      	strb	r2, [r3, #0]
 8002268:	1d7b      	adds	r3, r7, #5
 800226a:	1c0a      	adds	r2, r1, #0
 800226c:	701a      	strb	r2, [r3, #0]
			uint8_t memCMD;
			uint8_t soundInfo[9],addrINFO[4],addr[4],length[4];
			uint32_t i;
			memCMD = 0x13; //read command with 4-byte address
 800226e:	231f      	movs	r3, #31
 8002270:	18fb      	adds	r3, r7, r3
 8002272:	2213      	movs	r2, #19
 8002274:	701a      	strb	r2, [r3, #0]
//						GPIOC->ODR |= 1 << 6;	//set BF
//						GPIOC->ODR &= ~(1 << 6);	//reset BF
			if(isSoundOver == 1)
 8002276:	1d7b      	adds	r3, r7, #5
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d103      	bne.n	8002286 <soundLoad+0x36>
			{
				curBuf = 0;
 800227e:	4bce      	ldr	r3, [pc, #824]	; (80025b8 <soundLoad+0x368>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e194      	b.n	80025b0 <soundLoad+0x360>
				return;
			}

			if(soundReady == 0){
 8002286:	1dbb      	adds	r3, r7, #6
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d000      	beq.n	8002290 <soundLoad+0x40>
 800228e:	e17e      	b.n	800258e <soundLoad+0x33e>

				if (curBuf == 0){
 8002290:	4bc9      	ldr	r3, [pc, #804]	; (80025b8 <soundLoad+0x368>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d000      	beq.n	800229a <soundLoad+0x4a>
 8002298:	e0f5      	b.n	8002486 <soundLoad+0x236>
//					squeak_generate();
					address=startAddressForSoundInfo+(soundNum*0x09)+0xabcfFF;
 800229a:	1dfb      	adds	r3, r7, #7
 800229c:	781a      	ldrb	r2, [r3, #0]
 800229e:	0013      	movs	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	189b      	adds	r3, r3, r2
 80022a4:	4ac5      	ldr	r2, [pc, #788]	; (80025bc <soundLoad+0x36c>)
 80022a6:	4694      	mov	ip, r2
 80022a8:	4463      	add	r3, ip
 80022aa:	001a      	movs	r2, r3
 80022ac:	4bc4      	ldr	r3, [pc, #784]	; (80025c0 <soundLoad+0x370>)
 80022ae:	601a      	str	r2, [r3, #0]
					GPIOC->ODR |= 1 << 6;	//set BF
 80022b0:	4bc4      	ldr	r3, [pc, #784]	; (80025c4 <soundLoad+0x374>)
 80022b2:	695a      	ldr	r2, [r3, #20]
 80022b4:	4bc3      	ldr	r3, [pc, #780]	; (80025c4 <soundLoad+0x374>)
 80022b6:	2140      	movs	r1, #64	; 0x40
 80022b8:	430a      	orrs	r2, r1
 80022ba:	615a      	str	r2, [r3, #20]
					GPIOC->ODR &= ~(1 << 6);	//set BF
 80022bc:	4bc1      	ldr	r3, [pc, #772]	; (80025c4 <soundLoad+0x374>)
 80022be:	695a      	ldr	r2, [r3, #20]
 80022c0:	4bc0      	ldr	r3, [pc, #768]	; (80025c4 <soundLoad+0x374>)
 80022c2:	2140      	movs	r1, #64	; 0x40
 80022c4:	438a      	bics	r2, r1
 80022c6:	615a      	str	r2, [r3, #20]
					addrINFO[0]=address & 0xFF;
 80022c8:	4bbd      	ldr	r3, [pc, #756]	; (80025c0 <soundLoad+0x370>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	2410      	movs	r4, #16
 80022d0:	193b      	adds	r3, r7, r4
 80022d2:	701a      	strb	r2, [r3, #0]
					addrINFO[1]=(address >> 8) & 0xFF;
 80022d4:	4bba      	ldr	r3, [pc, #744]	; (80025c0 <soundLoad+0x370>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	0a1b      	lsrs	r3, r3, #8
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	193b      	adds	r3, r7, r4
 80022de:	705a      	strb	r2, [r3, #1]
					addrINFO[2]=(address >> 16) & 0xFF;
 80022e0:	4bb7      	ldr	r3, [pc, #732]	; (80025c0 <soundLoad+0x370>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	0c1b      	lsrs	r3, r3, #16
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	193b      	adds	r3, r7, r4
 80022ea:	709a      	strb	r2, [r3, #2]
					addrINFO[3]=(address >> 24) & 0xFF;
 80022ec:	4bb4      	ldr	r3, [pc, #720]	; (80025c0 <soundLoad+0x370>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	0e1b      	lsrs	r3, r3, #24
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	193b      	adds	r3, r7, r4
 80022f6:	70da      	strb	r2, [r3, #3]

					GPIOB->ODR &= ~(1 << 9); //reset cs
 80022f8:	4bb3      	ldr	r3, [pc, #716]	; (80025c8 <soundLoad+0x378>)
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	4bb2      	ldr	r3, [pc, #712]	; (80025c8 <soundLoad+0x378>)
 80022fe:	49b3      	ldr	r1, [pc, #716]	; (80025cc <soundLoad+0x37c>)
 8002300:	400a      	ands	r2, r1
 8002302:	615a      	str	r2, [r3, #20]
					HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8002304:	231f      	movs	r3, #31
 8002306:	18f9      	adds	r1, r7, r3
 8002308:	48b1      	ldr	r0, [pc, #708]	; (80025d0 <soundLoad+0x380>)
 800230a:	2332      	movs	r3, #50	; 0x32
 800230c:	2201      	movs	r2, #1
 800230e:	f004 fe99 	bl	8007044 <HAL_SPI_Transmit>
					HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrINFO[3], 1, 50); //send address
 8002312:	193b      	adds	r3, r7, r4
 8002314:	1cd9      	adds	r1, r3, #3
 8002316:	48ae      	ldr	r0, [pc, #696]	; (80025d0 <soundLoad+0x380>)
 8002318:	2332      	movs	r3, #50	; 0x32
 800231a:	2201      	movs	r2, #1
 800231c:	f004 fe92 	bl	8007044 <HAL_SPI_Transmit>
					HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrINFO[2], 1, 50); //send address
 8002320:	193b      	adds	r3, r7, r4
 8002322:	1c99      	adds	r1, r3, #2
 8002324:	48aa      	ldr	r0, [pc, #680]	; (80025d0 <soundLoad+0x380>)
 8002326:	2332      	movs	r3, #50	; 0x32
 8002328:	2201      	movs	r2, #1
 800232a:	f004 fe8b 	bl	8007044 <HAL_SPI_Transmit>
					HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrINFO[1], 1, 50); //send address
 800232e:	193b      	adds	r3, r7, r4
 8002330:	1c59      	adds	r1, r3, #1
 8002332:	48a7      	ldr	r0, [pc, #668]	; (80025d0 <soundLoad+0x380>)
 8002334:	2332      	movs	r3, #50	; 0x32
 8002336:	2201      	movs	r2, #1
 8002338:	f004 fe84 	bl	8007044 <HAL_SPI_Transmit>
					HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrINFO[0], 1, 50); //send address
 800233c:	1939      	adds	r1, r7, r4
 800233e:	48a4      	ldr	r0, [pc, #656]	; (80025d0 <soundLoad+0x380>)
 8002340:	2332      	movs	r3, #50	; 0x32
 8002342:	2201      	movs	r2, #1
 8002344:	f004 fe7e 	bl	8007044 <HAL_SPI_Transmit>
					HAL_SPI_Receive(&hspi2, (uint8_t*) &soundInfo, 9, 5000);//9 bytes of soundInfo
 8002348:	4ba2      	ldr	r3, [pc, #648]	; (80025d4 <soundLoad+0x384>)
 800234a:	2414      	movs	r4, #20
 800234c:	1939      	adds	r1, r7, r4
 800234e:	48a0      	ldr	r0, [pc, #640]	; (80025d0 <soundLoad+0x380>)
 8002350:	2209      	movs	r2, #9
 8002352:	f004 ffcf 	bl	80072f4 <HAL_SPI_Receive>
					GPIOB->ODR |= 1 << 9; // set cs
 8002356:	4b9c      	ldr	r3, [pc, #624]	; (80025c8 <soundLoad+0x378>)
 8002358:	695a      	ldr	r2, [r3, #20]
 800235a:	4b9b      	ldr	r3, [pc, #620]	; (80025c8 <soundLoad+0x378>)
 800235c:	2180      	movs	r1, #128	; 0x80
 800235e:	0089      	lsls	r1, r1, #2
 8002360:	430a      	orrs	r2, r1
 8002362:	615a      	str	r2, [r3, #20]


					addr[0]=soundInfo[4];
 8002364:	0020      	movs	r0, r4
 8002366:	183b      	adds	r3, r7, r0
 8002368:	791a      	ldrb	r2, [r3, #4]
 800236a:	210c      	movs	r1, #12
 800236c:	187b      	adds	r3, r7, r1
 800236e:	701a      	strb	r2, [r3, #0]
					addr[1]=soundInfo[3];
 8002370:	183b      	adds	r3, r7, r0
 8002372:	78da      	ldrb	r2, [r3, #3]
 8002374:	187b      	adds	r3, r7, r1
 8002376:	705a      	strb	r2, [r3, #1]
					addr[2]=soundInfo[2];
 8002378:	183b      	adds	r3, r7, r0
 800237a:	789a      	ldrb	r2, [r3, #2]
 800237c:	187b      	adds	r3, r7, r1
 800237e:	709a      	strb	r2, [r3, #2]
					addr[3]=soundInfo[1];
 8002380:	183b      	adds	r3, r7, r0
 8002382:	785a      	ldrb	r2, [r3, #1]
 8002384:	187b      	adds	r3, r7, r1
 8002386:	70da      	strb	r2, [r3, #3]

					addr[0]=0;
 8002388:	187b      	adds	r3, r7, r1
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
					addr[1]=0;
 800238e:	187b      	adds	r3, r7, r1
 8002390:	2200      	movs	r2, #0
 8002392:	705a      	strb	r2, [r3, #1]
					addr[2]=0;
 8002394:	187b      	adds	r3, r7, r1
 8002396:	2200      	movs	r2, #0
 8002398:	709a      	strb	r2, [r3, #2]
					addr[3]=0;
 800239a:	187b      	adds	r3, r7, r1
 800239c:	2200      	movs	r2, #0
 800239e:	70da      	strb	r2, [r3, #3]


					length[0]=soundInfo[8];
 80023a0:	183b      	adds	r3, r7, r0
 80023a2:	7a1a      	ldrb	r2, [r3, #8]
 80023a4:	2408      	movs	r4, #8
 80023a6:	193b      	adds	r3, r7, r4
 80023a8:	701a      	strb	r2, [r3, #0]
					length[1]=soundInfo[7];
 80023aa:	183b      	adds	r3, r7, r0
 80023ac:	79da      	ldrb	r2, [r3, #7]
 80023ae:	193b      	adds	r3, r7, r4
 80023b0:	705a      	strb	r2, [r3, #1]
					length[2]=soundInfo[6];
 80023b2:	183b      	adds	r3, r7, r0
 80023b4:	799a      	ldrb	r2, [r3, #6]
 80023b6:	193b      	adds	r3, r7, r4
 80023b8:	709a      	strb	r2, [r3, #2]
					length[3]=soundInfo[5];
 80023ba:	183b      	adds	r3, r7, r0
 80023bc:	795a      	ldrb	r2, [r3, #5]
 80023be:	0020      	movs	r0, r4
 80023c0:	183b      	adds	r3, r7, r0
 80023c2:	70da      	strb	r2, [r3, #3]

					uint32_t lenOfsound = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	623b      	str	r3, [r7, #32]

					lenOfsound |= length[3];
 80023c8:	183b      	adds	r3, r7, r0
 80023ca:	78db      	ldrb	r3, [r3, #3]
 80023cc:	001a      	movs	r2, r3
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	623b      	str	r3, [r7, #32]
					lenOfsound <<= 8;
 80023d4:	6a3b      	ldr	r3, [r7, #32]
 80023d6:	021b      	lsls	r3, r3, #8
 80023d8:	623b      	str	r3, [r7, #32]
					lenOfsound |= length[2];
 80023da:	183b      	adds	r3, r7, r0
 80023dc:	789b      	ldrb	r3, [r3, #2]
 80023de:	001a      	movs	r2, r3
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	623b      	str	r3, [r7, #32]
					lenOfsound <<= 8;
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	021b      	lsls	r3, r3, #8
 80023ea:	623b      	str	r3, [r7, #32]
					lenOfsound |= length[1];
 80023ec:	183b      	adds	r3, r7, r0
 80023ee:	785b      	ldrb	r3, [r3, #1]
 80023f0:	001a      	movs	r2, r3
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	623b      	str	r3, [r7, #32]
					lenOfsound <<= 8;
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	021b      	lsls	r3, r3, #8
 80023fc:	623b      	str	r3, [r7, #32]
					lenOfsound |= length[0];
 80023fe:	183b      	adds	r3, r7, r0
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	001a      	movs	r2, r3
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	4313      	orrs	r3, r2
 8002408:	623b      	str	r3, [r7, #32]

					addrSound|=addr[3];
 800240a:	187b      	adds	r3, r7, r1
 800240c:	78db      	ldrb	r3, [r3, #3]
 800240e:	001a      	movs	r2, r3
 8002410:	4b71      	ldr	r3, [pc, #452]	; (80025d8 <soundLoad+0x388>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	431a      	orrs	r2, r3
 8002416:	4b70      	ldr	r3, [pc, #448]	; (80025d8 <soundLoad+0x388>)
 8002418:	601a      	str	r2, [r3, #0]
					addrSound<<=8;
 800241a:	4b6f      	ldr	r3, [pc, #444]	; (80025d8 <soundLoad+0x388>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	021a      	lsls	r2, r3, #8
 8002420:	4b6d      	ldr	r3, [pc, #436]	; (80025d8 <soundLoad+0x388>)
 8002422:	601a      	str	r2, [r3, #0]
					addrSound|=addr[2];
 8002424:	187b      	adds	r3, r7, r1
 8002426:	789b      	ldrb	r3, [r3, #2]
 8002428:	001a      	movs	r2, r3
 800242a:	4b6b      	ldr	r3, [pc, #428]	; (80025d8 <soundLoad+0x388>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	431a      	orrs	r2, r3
 8002430:	4b69      	ldr	r3, [pc, #420]	; (80025d8 <soundLoad+0x388>)
 8002432:	601a      	str	r2, [r3, #0]
					addrSound<<=8;
 8002434:	4b68      	ldr	r3, [pc, #416]	; (80025d8 <soundLoad+0x388>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	021a      	lsls	r2, r3, #8
 800243a:	4b67      	ldr	r3, [pc, #412]	; (80025d8 <soundLoad+0x388>)
 800243c:	601a      	str	r2, [r3, #0]
					addrSound|=addr[1];
 800243e:	187b      	adds	r3, r7, r1
 8002440:	785b      	ldrb	r3, [r3, #1]
 8002442:	001a      	movs	r2, r3
 8002444:	4b64      	ldr	r3, [pc, #400]	; (80025d8 <soundLoad+0x388>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	431a      	orrs	r2, r3
 800244a:	4b63      	ldr	r3, [pc, #396]	; (80025d8 <soundLoad+0x388>)
 800244c:	601a      	str	r2, [r3, #0]
					addrSound<<=8;
 800244e:	4b62      	ldr	r3, [pc, #392]	; (80025d8 <soundLoad+0x388>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	021a      	lsls	r2, r3, #8
 8002454:	4b60      	ldr	r3, [pc, #384]	; (80025d8 <soundLoad+0x388>)
 8002456:	601a      	str	r2, [r3, #0]
					addrSound|=addr[0];
 8002458:	187b      	adds	r3, r7, r1
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	001a      	movs	r2, r3
 800245e:	4b5e      	ldr	r3, [pc, #376]	; (80025d8 <soundLoad+0x388>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	431a      	orrs	r2, r3
 8002464:	4b5c      	ldr	r3, [pc, #368]	; (80025d8 <soundLoad+0x388>)
 8002466:	601a      	str	r2, [r3, #0]

					lenOfsound = 15646;
 8002468:	4b5c      	ldr	r3, [pc, #368]	; (80025dc <soundLoad+0x38c>)
 800246a:	623b      	str	r3, [r7, #32]

					soundLen = lenOfsound;
 800246c:	4b5c      	ldr	r3, [pc, #368]	; (80025e0 <soundLoad+0x390>)
 800246e:	6a3a      	ldr	r2, [r7, #32]
 8002470:	601a      	str	r2, [r3, #0]
					bufCount = lenOfsound / bufLen;
 8002472:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <soundLoad+0x394>)
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	0019      	movs	r1, r3
 8002478:	6a38      	ldr	r0, [r7, #32]
 800247a:	f7fd fe43 	bl	8000104 <__udivsi3>
 800247e:	0003      	movs	r3, r0
 8002480:	001a      	movs	r2, r3
 8002482:	4b59      	ldr	r3, [pc, #356]	; (80025e8 <soundLoad+0x398>)
 8002484:	601a      	str	r2, [r3, #0]
//					bufCount = 50;
			}

				addrSound += bufLen;
 8002486:	4b57      	ldr	r3, [pc, #348]	; (80025e4 <soundLoad+0x394>)
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	001a      	movs	r2, r3
 800248c:	4b52      	ldr	r3, [pc, #328]	; (80025d8 <soundLoad+0x388>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	18d2      	adds	r2, r2, r3
 8002492:	4b51      	ldr	r3, [pc, #324]	; (80025d8 <soundLoad+0x388>)
 8002494:	601a      	str	r2, [r3, #0]
				if (curBuf != 0){
 8002496:	4b48      	ldr	r3, [pc, #288]	; (80025b8 <soundLoad+0x368>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d017      	beq.n	80024ce <soundLoad+0x27e>
					addr[0]=addrSound & 0xFF;
 800249e:	4b4e      	ldr	r3, [pc, #312]	; (80025d8 <soundLoad+0x388>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	210c      	movs	r1, #12
 80024a6:	187b      	adds	r3, r7, r1
 80024a8:	701a      	strb	r2, [r3, #0]
					addr[1]=(addrSound >> 8) & 0xFF;
 80024aa:	4b4b      	ldr	r3, [pc, #300]	; (80025d8 <soundLoad+0x388>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	0a1b      	lsrs	r3, r3, #8
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	187b      	adds	r3, r7, r1
 80024b4:	705a      	strb	r2, [r3, #1]
					addr[2]=(addrSound >> 16) & 0xFF;
 80024b6:	4b48      	ldr	r3, [pc, #288]	; (80025d8 <soundLoad+0x388>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	0c1b      	lsrs	r3, r3, #16
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	187b      	adds	r3, r7, r1
 80024c0:	709a      	strb	r2, [r3, #2]
					addr[3]=(addrSound >> 24) & 0xFF;
 80024c2:	4b45      	ldr	r3, [pc, #276]	; (80025d8 <soundLoad+0x388>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	0e1b      	lsrs	r3, r3, #24
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	187b      	adds	r3, r7, r1
 80024cc:	70da      	strb	r2, [r3, #3]
				}

			if(soundReady == 0){
 80024ce:	1dbb      	adds	r3, r7, #6
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d14a      	bne.n	800256c <soundLoad+0x31c>

				GPIOB->ODR &= ~(1 << 9); //reset FLASH CS
 80024d6:	4b3c      	ldr	r3, [pc, #240]	; (80025c8 <soundLoad+0x378>)
 80024d8:	695a      	ldr	r2, [r3, #20]
 80024da:	4b3b      	ldr	r3, [pc, #236]	; (80025c8 <soundLoad+0x378>)
 80024dc:	493b      	ldr	r1, [pc, #236]	; (80025cc <soundLoad+0x37c>)
 80024de:	400a      	ands	r2, r1
 80024e0:	615a      	str	r2, [r3, #20]
				HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 80024e2:	231f      	movs	r3, #31
 80024e4:	18f9      	adds	r1, r7, r3
 80024e6:	483a      	ldr	r0, [pc, #232]	; (80025d0 <soundLoad+0x380>)
 80024e8:	2332      	movs	r3, #50	; 0x32
 80024ea:	2201      	movs	r2, #1
 80024ec:	f004 fdaa 	bl	8007044 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[3], 1, 50); //send address
 80024f0:	240c      	movs	r4, #12
 80024f2:	193b      	adds	r3, r7, r4
 80024f4:	1cd9      	adds	r1, r3, #3
 80024f6:	4836      	ldr	r0, [pc, #216]	; (80025d0 <soundLoad+0x380>)
 80024f8:	2332      	movs	r3, #50	; 0x32
 80024fa:	2201      	movs	r2, #1
 80024fc:	f004 fda2 	bl	8007044 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[2], 1, 50); //send address
 8002500:	193b      	adds	r3, r7, r4
 8002502:	1c99      	adds	r1, r3, #2
 8002504:	4832      	ldr	r0, [pc, #200]	; (80025d0 <soundLoad+0x380>)
 8002506:	2332      	movs	r3, #50	; 0x32
 8002508:	2201      	movs	r2, #1
 800250a:	f004 fd9b 	bl	8007044 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[1], 1, 50); //send address
 800250e:	193b      	adds	r3, r7, r4
 8002510:	1c59      	adds	r1, r3, #1
 8002512:	482f      	ldr	r0, [pc, #188]	; (80025d0 <soundLoad+0x380>)
 8002514:	2332      	movs	r3, #50	; 0x32
 8002516:	2201      	movs	r2, #1
 8002518:	f004 fd94 	bl	8007044 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[0], 1, 50); //send address
 800251c:	1939      	adds	r1, r7, r4
 800251e:	482c      	ldr	r0, [pc, #176]	; (80025d0 <soundLoad+0x380>)
 8002520:	2332      	movs	r3, #50	; 0x32
 8002522:	2201      	movs	r2, #1
 8002524:	f004 fd8e 	bl	8007044 <HAL_SPI_Transmit>
				HAL_SPI_Receive(&hspi2, (uint8_t*)SOUND1, bufLen, 5000);
 8002528:	4b2e      	ldr	r3, [pc, #184]	; (80025e4 <soundLoad+0x394>)
 800252a:	881a      	ldrh	r2, [r3, #0]
 800252c:	4b29      	ldr	r3, [pc, #164]	; (80025d4 <soundLoad+0x384>)
 800252e:	492f      	ldr	r1, [pc, #188]	; (80025ec <soundLoad+0x39c>)
 8002530:	4827      	ldr	r0, [pc, #156]	; (80025d0 <soundLoad+0x380>)
 8002532:	f004 fedf 	bl	80072f4 <HAL_SPI_Receive>
				GPIOB->ODR |= 1 << 9;	//set FLASH CS
 8002536:	4b24      	ldr	r3, [pc, #144]	; (80025c8 <soundLoad+0x378>)
 8002538:	695a      	ldr	r2, [r3, #20]
 800253a:	4b23      	ldr	r3, [pc, #140]	; (80025c8 <soundLoad+0x378>)
 800253c:	2180      	movs	r1, #128	; 0x80
 800253e:	0089      	lsls	r1, r1, #2
 8002540:	430a      	orrs	r2, r1
 8002542:	615a      	str	r2, [r3, #20]
//					SOUND2[i] = SOUND1[i+1];
//					SOUND2[i+1] = SOUND1[i];
//				}


				for (i = 0; i < bufLen; i+=1){
 8002544:	2300      	movs	r3, #0
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
 8002548:	e00a      	b.n	8002560 <soundLoad+0x310>
					SOUND2[i] = SOUND1[i];
 800254a:	4b28      	ldr	r3, [pc, #160]	; (80025ec <soundLoad+0x39c>)
 800254c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254e:	0052      	lsls	r2, r2, #1
 8002550:	5ad1      	ldrh	r1, [r2, r3]
 8002552:	4b27      	ldr	r3, [pc, #156]	; (80025f0 <soundLoad+0x3a0>)
 8002554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002556:	0052      	lsls	r2, r2, #1
 8002558:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < bufLen; i+=1){
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	3301      	adds	r3, #1
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
 8002560:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <soundLoad+0x394>)
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	001a      	movs	r2, r3
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	4293      	cmp	r3, r2
 800256a:	d3ee      	bcc.n	800254a <soundLoad+0x2fa>
//					HAL_I2S_Transmit(&hi2s1, (uint16_t*)SOUND2, bufLen, 5000);
//					HAL_Delay(500);
//				}
			}
//			soundReady = 1;
				if ((curBuf == 0) && (soundReady == 0)){
 800256c:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <soundLoad+0x368>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10c      	bne.n	800258e <soundLoad+0x33e>
 8002574:	1dbb      	adds	r3, r7, #6
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d108      	bne.n	800258e <soundLoad+0x33e>

//					HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)SOUND2, 1024);
//					GPIOC->ODR &= ~(1 << 6);	//reset BF
					HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)SOUND1, bufLen>>1);
 800257c:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <soundLoad+0x394>)
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	085b      	lsrs	r3, r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	4919      	ldr	r1, [pc, #100]	; (80025ec <soundLoad+0x39c>)
 8002586:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <soundLoad+0x3a4>)
 8002588:	0018      	movs	r0, r3
 800258a:	f003 f8b5 	bl	80056f8 <HAL_I2S_Transmit_DMA>

//				curBuf = 0;
				}

			}
			if (soundReady ==1){
 800258e:	1dbb      	adds	r3, r7, #6
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d108      	bne.n	80025a8 <soundLoad+0x358>
//				if (curBuf != 0){
//				for (uint8_t k = 0; k<255; k++){

					HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)SOUND2, bufLen>>1);
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <soundLoad+0x394>)
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	085b      	lsrs	r3, r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	4914      	ldr	r1, [pc, #80]	; (80025f0 <soundLoad+0x3a0>)
 80025a0:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <soundLoad+0x3a4>)
 80025a2:	0018      	movs	r0, r3
 80025a4:	f003 f8a8 	bl	80056f8 <HAL_I2S_Transmit_DMA>
//					while (!isSoundOver){}
//			soundReady = 1;
//			curBuf = 0;
//				}
			}
			while (isSoundOver){}
 80025a8:	1d7b      	adds	r3, r7, #5
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1fb      	bne.n	80025a8 <soundLoad+0x358>
//			GPIOC->ODR &= ~(1 << 6);	//reset BF
//			HAL_Delay(500);
//			SoundPlay();
		}
 80025b0:	0018      	movs	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b00b      	add	sp, #44	; 0x2c
 80025b6:	bd90      	pop	{r4, r7, pc}
 80025b8:	20000320 	.word	0x20000320
 80025bc:	00abcfff 	.word	0x00abcfff
 80025c0:	20000318 	.word	0x20000318
 80025c4:	50000800 	.word	0x50000800
 80025c8:	50000400 	.word	0x50000400
 80025cc:	fffffdff 	.word	0xfffffdff
 80025d0:	200001a0 	.word	0x200001a0
 80025d4:	00001388 	.word	0x00001388
 80025d8:	2000232c 	.word	0x2000232c
 80025dc:	00003d1e 	.word	0x00003d1e
 80025e0:	20002328 	.word	0x20002328
 80025e4:	20000062 	.word	0x20000062
 80025e8:	20000324 	.word	0x20000324
 80025ec:	20000328 	.word	0x20000328
 80025f0:	20001328 	.word	0x20001328
 80025f4:	20000108 	.word	0x20000108

080025f8 <soundPlay>:
//=========================================================================================================================
	uint8_t soundPlay(uint8_t soundNum) {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	0002      	movs	r2, r0
 8002600:	1dfb      	adds	r3, r7, #7
 8002602:	701a      	strb	r2, [r3, #0]
//		HAL_Delay(500);
//		GPIOC->ODR |= 1 << 6;	//set BF
//		GPIOC->ODR &= ~(1 << 6);	//reset BF
//		HAL_Delay(500);
			I2C_SOUND_ChangePage(0x01);
 8002604:	2001      	movs	r0, #1
 8002606:	f7ff f88f 	bl	8001728 <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x01, 0x00);
 800260a:	2100      	movs	r1, #0
 800260c:	2001      	movs	r0, #1
 800260e:	f7ff f8a9 	bl	8001764 <WriteReg_I2C_SOUND>
			I2C_SOUND_ChangePage(0x00);
 8002612:	2000      	movs	r0, #0
 8002614:	f7ff f888 	bl	8001728 <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x41, 0x30);// 0x81 - 0x30 available
 8002618:	2130      	movs	r1, #48	; 0x30
 800261a:	2041      	movs	r0, #65	; 0x41
 800261c:	f7ff f8a2 	bl	8001764 <WriteReg_I2C_SOUND>
		//	I2C_SOUND_ChangePage(0x00);
			I2C_SOUND_ChangePage(0x01);
 8002620:	2001      	movs	r0, #1
 8002622:	f7ff f881 	bl	8001728 <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 8002626:	2100      	movs	r1, #0
 8002628:	2010      	movs	r0, #16
 800262a:	f7ff f89b 	bl	8001764 <WriteReg_I2C_SOUND>
			WriteReg_I2C_SOUND(0x2E, 0x00);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 800262e:	2100      	movs	r1, #0
 8002630:	202e      	movs	r0, #46	; 0x2e
 8002632:	f7ff f897 	bl	8001764 <WriteReg_I2C_SOUND>
//			bufLen = sizeof(SOUND1);
			curBuf = 0;
 8002636:	4b07      	ldr	r3, [pc, #28]	; (8002654 <soundPlay+0x5c>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
//			lenOfsound = sizeof(SOUND2)/sizeof(SOUND2[0]);
			soundLoad(soundNum, 0, 0);
 800263c:	1dfb      	adds	r3, r7, #7
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2200      	movs	r2, #0
 8002642:	2100      	movs	r1, #0
 8002644:	0018      	movs	r0, r3
 8002646:	f7ff fe03 	bl	8002250 <soundLoad>
//			GPIOC->ODR &= ~(1 << 6);	//reset BF
//			HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)SOUND, 16384/2); //HAL_MAX_DELAY

//			HAL_I2S_Transmit(&hi2s1, (uint16_t*)SOUND,4096,5000);
//		squeak_double(signal);
		}
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	0018      	movs	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	b002      	add	sp, #8
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20000320 	.word	0x20000320

08002658 <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOB->ODR |= 1 << 9;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	4a29      	ldr	r2, [pc, #164]	; (8002708 <MEM_GetID+0xb0>)
 8002662:	7812      	ldrb	r2, [r2, #0]
 8002664:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 8002666:	1dfb      	adds	r3, r7, #7
 8002668:	229e      	movs	r2, #158	; 0x9e
 800266a:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 <<9);	//reset cs
 800266c:	4b27      	ldr	r3, [pc, #156]	; (800270c <MEM_GetID+0xb4>)
 800266e:	695a      	ldr	r2, [r3, #20]
 8002670:	4b26      	ldr	r3, [pc, #152]	; (800270c <MEM_GetID+0xb4>)
 8002672:	4927      	ldr	r1, [pc, #156]	; (8002710 <MEM_GetID+0xb8>)
 8002674:	400a      	ands	r2, r1
 8002676:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 8002678:	1df9      	adds	r1, r7, #7
 800267a:	4826      	ldr	r0, [pc, #152]	; (8002714 <MEM_GetID+0xbc>)
 800267c:	2332      	movs	r3, #50	; 0x32
 800267e:	2201      	movs	r2, #1
 8002680:	f004 fce0 	bl	8007044 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002684:	23fa      	movs	r3, #250	; 0xfa
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	1d39      	adds	r1, r7, #4
 800268a:	4822      	ldr	r0, [pc, #136]	; (8002714 <MEM_GetID+0xbc>)
 800268c:	2201      	movs	r2, #1
 800268e:	f004 fe31 	bl	80072f4 <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 8002692:	1d3b      	adds	r3, r7, #4
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	001a      	movs	r2, r3
 8002698:	4b1f      	ldr	r3, [pc, #124]	; (8002718 <MEM_GetID+0xc0>)
 800269a:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 800269c:	4b1e      	ldr	r3, [pc, #120]	; (8002718 <MEM_GetID+0xc0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	021a      	lsls	r2, r3, #8
 80026a2:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <MEM_GetID+0xc0>)
 80026a4:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 80026a6:	23fa      	movs	r3, #250	; 0xfa
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	1d39      	adds	r1, r7, #4
 80026ac:	4819      	ldr	r0, [pc, #100]	; (8002714 <MEM_GetID+0xbc>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	f004 fe20 	bl	80072f4 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 80026b4:	1d3b      	adds	r3, r7, #4
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	001a      	movs	r2, r3
 80026ba:	4b17      	ldr	r3, [pc, #92]	; (8002718 <MEM_GetID+0xc0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	18d2      	adds	r2, r2, r3
 80026c0:	4b15      	ldr	r3, [pc, #84]	; (8002718 <MEM_GetID+0xc0>)
 80026c2:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 80026c4:	4b14      	ldr	r3, [pc, #80]	; (8002718 <MEM_GetID+0xc0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	021a      	lsls	r2, r3, #8
 80026ca:	4b13      	ldr	r3, [pc, #76]	; (8002718 <MEM_GetID+0xc0>)
 80026cc:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 80026ce:	23fa      	movs	r3, #250	; 0xfa
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	1d39      	adds	r1, r7, #4
 80026d4:	480f      	ldr	r0, [pc, #60]	; (8002714 <MEM_GetID+0xbc>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	f004 fe0c 	bl	80072f4 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	001a      	movs	r2, r3
 80026e2:	4b0d      	ldr	r3, [pc, #52]	; (8002718 <MEM_GetID+0xc0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	18d2      	adds	r2, r2, r3
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <MEM_GetID+0xc0>)
 80026ea:	601a      	str	r2, [r3, #0]
		GPIOB->ODR |= 1 << 9;                    			// set cs
 80026ec:	4b07      	ldr	r3, [pc, #28]	; (800270c <MEM_GetID+0xb4>)
 80026ee:	695a      	ldr	r2, [r3, #20]
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <MEM_GetID+0xb4>)
 80026f2:	2180      	movs	r1, #128	; 0x80
 80026f4:	0089      	lsls	r1, r1, #2
 80026f6:	430a      	orrs	r2, r1
 80026f8:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 80026fa:	4b07      	ldr	r3, [pc, #28]	; (8002718 <MEM_GetID+0xc0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
	}
 80026fe:	0018      	movs	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	b002      	add	sp, #8
 8002704:	bd80      	pop	{r7, pc}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	0800a6a0 	.word	0x0800a6a0
 800270c:	50000400 	.word	0x50000400
 8002710:	fffffdff 	.word	0xfffffdff
 8002714:	200001a0 	.word	0x200001a0
 8002718:	200002d8 	.word	0x200002d8

0800271c <squeak_generate>:
//			while(BFEN==0){};
			GPIOC->ODR |= 1 << 6;	//set BF

	}
//=============================================================================================================
	void squeak_generate(void){
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
//			    uint16_t nsamples = sizeof(signal) / sizeof(signal[0]);
			    uint16_t k = 0;
 8002722:	1dbb      	adds	r3, r7, #6
 8002724:	2200      	movs	r2, #0
 8002726:	801a      	strh	r2, [r3, #0]
//			    while(k < nsamples) {
//			        double t = ((double)k/2.0)/((double)nsamples);
//			       signal[k] = 32767*sin(100.0 * TAU * t); // left
//			       signal[k+1] = signal[k];
			        k += 2;
 8002728:	1dbb      	adds	r3, r7, #6
 800272a:	1dba      	adds	r2, r7, #6
 800272c:	8812      	ldrh	r2, [r2, #0]
 800272e:	3202      	adds	r2, #2
 8002730:	801a      	strh	r2, [r3, #0]
//			    }
		}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	46bd      	mov	sp, r7
 8002736:	b002      	add	sp, #8
 8002738:	bd80      	pop	{r7, pc}
	...

0800273c <LIS3DHsendCMD>:
		HAL_Delay(500);
//		GPIOC->ODR |= 1 << 6;	//set BF
//		cmd2Execute=0;
	}
//=============================================================================================================
	void LIS3DHsendCMD(uint8_t reg, uint8_t data) {
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af02      	add	r7, sp, #8
 8002742:	0002      	movs	r2, r0
 8002744:	1dfb      	adds	r3, r7, #7
 8002746:	701a      	strb	r2, [r3, #0]
 8002748:	1dbb      	adds	r3, r7, #6
 800274a:	1c0a      	adds	r2, r1, #0
 800274c:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 800274e:	210c      	movs	r1, #12
 8002750:	187b      	adds	r3, r7, r1
 8002752:	1dfa      	adds	r2, r7, #7
 8002754:	7812      	ldrb	r2, [r2, #0]
 8002756:	701a      	strb	r2, [r3, #0]
 8002758:	187b      	adds	r3, r7, r1
 800275a:	1dba      	adds	r2, r7, #6
 800275c:	7812      	ldrb	r2, [r2, #0]
 800275e:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x32, buf, 2, 1000);	//32h - address for writing
 8002760:	187a      	adds	r2, r7, r1
 8002762:	4806      	ldr	r0, [pc, #24]	; (800277c <LIS3DHsendCMD+0x40>)
 8002764:	23fa      	movs	r3, #250	; 0xfa
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	2302      	movs	r3, #2
 800276c:	2132      	movs	r1, #50	; 0x32
 800276e:	f001 fd2d 	bl	80041cc <HAL_I2C_Master_Transmit>
	}
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	46bd      	mov	sp, r7
 8002776:	b004      	add	sp, #16
 8002778:	bd80      	pop	{r7, pc}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	200000bc 	.word	0x200000bc

08002780 <LIS3DHsetup>:
//	  xVal = buffer[0];
//	  yVal = buffer[1];
//	  zVal = buffer[2];
//	}
//=============================================================================================================
	void LIS3DHsetup(void){
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
		uint8_t CTRL_REG1_val=0x00;
 8002786:	1dfb      	adds	r3, r7, #7
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG4_val=0x00;
 800278c:	1dbb      	adds	r3, r7, #6
 800278e:	2200      	movs	r2, #0
 8002790:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG5_val=0x00;
 8002792:	1d7b      	adds	r3, r7, #5
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG6_val=0x00;
 8002798:	1d3b      	adds	r3, r7, #4
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_CTRL_REG_val=0x00;
 800279e:	1cfb      	adds	r3, r7, #3
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_SRC_REG_val=0x00;
 80027a4:	1cbb      	adds	r3, r7, #2
 80027a6:	2200      	movs	r2, #0
 80027a8:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_CFG_val=0x00;
 80027aa:	1c7b      	adds	r3, r7, #1
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_SRC_val=0x00;
 80027b0:	003b      	movs	r3, r7
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]

		LIS3DHsendCMD(CTRL_REG1,(CTRL_REG1_val|accelDataRate_25_Hz|Xen|Yen|Zen));//data rate selection
 80027b6:	1dfb      	adds	r3, r7, #7
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2237      	movs	r2, #55	; 0x37
 80027bc:	4313      	orrs	r3, r2
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	0019      	movs	r1, r3
 80027c2:	2020      	movs	r0, #32
 80027c4:	f7ff ffba 	bl	800273c <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG2,);//HPFilter
//		LIS3DHsendCMD(CTRL_REG3,);
		LIS3DHsendCMD(CTRL_REG4,(CTRL_REG4_val|BDU|FULL_SCALE_2G|HR));
 80027c8:	1dbb      	adds	r3, r7, #6
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	227c      	movs	r2, #124	; 0x7c
 80027ce:	4252      	negs	r2, r2
 80027d0:	4313      	orrs	r3, r2
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	0019      	movs	r1, r3
 80027d6:	2023      	movs	r0, #35	; 0x23
 80027d8:	f7ff ffb0 	bl	800273c <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG6,);
//		LIS3DHsendCMD(FIFO_CTRL_REG,FIFO_CTRL_REG_val);	//	2B configured
//		LIS3DHsendCMD(FIFO_SRC_REG,FIFO_SRC_REG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_CFG,INT_1_CFG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_SRC_val,INT_1_SRC_val);	//	2B configured
	}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	b002      	add	sp, #8
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80027e8:	46c0      	nop			; (mov r8, r8)
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f6:	4b11      	ldr	r3, [pc, #68]	; (800283c <HAL_MspInit+0x4c>)
 80027f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027fa:	4b10      	ldr	r3, [pc, #64]	; (800283c <HAL_MspInit+0x4c>)
 80027fc:	2101      	movs	r1, #1
 80027fe:	430a      	orrs	r2, r1
 8002800:	641a      	str	r2, [r3, #64]	; 0x40
 8002802:	4b0e      	ldr	r3, [pc, #56]	; (800283c <HAL_MspInit+0x4c>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	2201      	movs	r2, #1
 8002808:	4013      	ands	r3, r2
 800280a:	607b      	str	r3, [r7, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800280e:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_MspInit+0x4c>)
 8002810:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002812:	4b0a      	ldr	r3, [pc, #40]	; (800283c <HAL_MspInit+0x4c>)
 8002814:	2180      	movs	r1, #128	; 0x80
 8002816:	0549      	lsls	r1, r1, #21
 8002818:	430a      	orrs	r2, r1
 800281a:	63da      	str	r2, [r3, #60]	; 0x3c
 800281c:	4b07      	ldr	r3, [pc, #28]	; (800283c <HAL_MspInit+0x4c>)
 800281e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002820:	2380      	movs	r3, #128	; 0x80
 8002822:	055b      	lsls	r3, r3, #21
 8002824:	4013      	ands	r3, r2
 8002826:	603b      	str	r3, [r7, #0]
 8002828:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 800282a:	2380      	movs	r3, #128	; 0x80
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	0018      	movs	r0, r3
 8002830:	f000 fcb6 	bl	80031a0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002834:	46c0      	nop			; (mov r8, r8)
 8002836:	46bd      	mov	sp, r7
 8002838:	b002      	add	sp, #8
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40021000 	.word	0x40021000

08002840 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b089      	sub	sp, #36	; 0x24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002848:	240c      	movs	r4, #12
 800284a:	193b      	adds	r3, r7, r4
 800284c:	0018      	movs	r0, r3
 800284e:	2314      	movs	r3, #20
 8002850:	001a      	movs	r2, r3
 8002852:	2100      	movs	r1, #0
 8002854:	f007 ff10 	bl	800a678 <memset>
  if(hcomp->Instance==COMP1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a10      	ldr	r2, [pc, #64]	; (80028a0 <HAL_COMP_MspInit+0x60>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d11a      	bne.n	8002898 <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002862:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <HAL_COMP_MspInit+0x64>)
 8002864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002866:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <HAL_COMP_MspInit+0x64>)
 8002868:	2102      	movs	r1, #2
 800286a:	430a      	orrs	r2, r1
 800286c:	635a      	str	r2, [r3, #52]	; 0x34
 800286e:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <HAL_COMP_MspInit+0x64>)
 8002870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002872:	2202      	movs	r2, #2
 8002874:	4013      	ands	r3, r2
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800287a:	193b      	adds	r3, r7, r4
 800287c:	2204      	movs	r2, #4
 800287e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002880:	193b      	adds	r3, r7, r4
 8002882:	2203      	movs	r2, #3
 8002884:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002886:	193b      	adds	r3, r7, r4
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800288c:	193b      	adds	r3, r7, r4
 800288e:	4a06      	ldr	r2, [pc, #24]	; (80028a8 <HAL_COMP_MspInit+0x68>)
 8002890:	0019      	movs	r1, r3
 8002892:	0010      	movs	r0, r2
 8002894:	f001 faa0 	bl	8003dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8002898:	46c0      	nop			; (mov r8, r8)
 800289a:	46bd      	mov	sp, r7
 800289c:	b009      	add	sp, #36	; 0x24
 800289e:	bd90      	pop	{r4, r7, pc}
 80028a0:	40010200 	.word	0x40010200
 80028a4:	40021000 	.word	0x40021000
 80028a8:	50000400 	.word	0x50000400

080028ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028ac:	b590      	push	{r4, r7, lr}
 80028ae:	b097      	sub	sp, #92	; 0x5c
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b4:	2344      	movs	r3, #68	; 0x44
 80028b6:	18fb      	adds	r3, r7, r3
 80028b8:	0018      	movs	r0, r3
 80028ba:	2314      	movs	r3, #20
 80028bc:	001a      	movs	r2, r3
 80028be:	2100      	movs	r1, #0
 80028c0:	f007 feda 	bl	800a678 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028c4:	2410      	movs	r4, #16
 80028c6:	193b      	adds	r3, r7, r4
 80028c8:	0018      	movs	r0, r3
 80028ca:	2334      	movs	r3, #52	; 0x34
 80028cc:	001a      	movs	r2, r3
 80028ce:	2100      	movs	r1, #0
 80028d0:	f007 fed2 	bl	800a678 <memset>
  if(hi2c->Instance==I2C1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a27      	ldr	r2, [pc, #156]	; (8002978 <HAL_I2C_MspInit+0xcc>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d147      	bne.n	800296e <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80028de:	193b      	adds	r3, r7, r4
 80028e0:	2220      	movs	r2, #32
 80028e2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80028e4:	193b      	adds	r3, r7, r4
 80028e6:	2200      	movs	r2, #0
 80028e8:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028ea:	193b      	adds	r3, r7, r4
 80028ec:	0018      	movs	r0, r3
 80028ee:	f003 fdf1 	bl	80064d4 <HAL_RCCEx_PeriphCLKConfig>
 80028f2:	1e03      	subs	r3, r0, #0
 80028f4:	d001      	beq.n	80028fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80028f6:	f7ff ff75 	bl	80027e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fa:	4b20      	ldr	r3, [pc, #128]	; (800297c <HAL_I2C_MspInit+0xd0>)
 80028fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028fe:	4b1f      	ldr	r3, [pc, #124]	; (800297c <HAL_I2C_MspInit+0xd0>)
 8002900:	2101      	movs	r1, #1
 8002902:	430a      	orrs	r2, r1
 8002904:	635a      	str	r2, [r3, #52]	; 0x34
 8002906:	4b1d      	ldr	r3, [pc, #116]	; (800297c <HAL_I2C_MspInit+0xd0>)
 8002908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290a:	2201      	movs	r2, #1
 800290c:	4013      	ands	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002912:	2144      	movs	r1, #68	; 0x44
 8002914:	187b      	adds	r3, r7, r1
 8002916:	22c0      	movs	r2, #192	; 0xc0
 8002918:	00d2      	lsls	r2, r2, #3
 800291a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800291c:	187b      	adds	r3, r7, r1
 800291e:	2212      	movs	r2, #18
 8002920:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002922:	187b      	adds	r3, r7, r1
 8002924:	2201      	movs	r2, #1
 8002926:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002928:	187b      	adds	r3, r7, r1
 800292a:	2200      	movs	r2, #0
 800292c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800292e:	187b      	adds	r3, r7, r1
 8002930:	2206      	movs	r2, #6
 8002932:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002934:	187a      	adds	r2, r7, r1
 8002936:	23a0      	movs	r3, #160	; 0xa0
 8002938:	05db      	lsls	r3, r3, #23
 800293a:	0011      	movs	r1, r2
 800293c:	0018      	movs	r0, r3
 800293e:	f001 fa4b 	bl	8003dd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002942:	4b0e      	ldr	r3, [pc, #56]	; (800297c <HAL_I2C_MspInit+0xd0>)
 8002944:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002946:	4b0d      	ldr	r3, [pc, #52]	; (800297c <HAL_I2C_MspInit+0xd0>)
 8002948:	2180      	movs	r1, #128	; 0x80
 800294a:	0389      	lsls	r1, r1, #14
 800294c:	430a      	orrs	r2, r1
 800294e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002950:	4b0a      	ldr	r3, [pc, #40]	; (800297c <HAL_I2C_MspInit+0xd0>)
 8002952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002954:	2380      	movs	r3, #128	; 0x80
 8002956:	039b      	lsls	r3, r3, #14
 8002958:	4013      	ands	r3, r2
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800295e:	2200      	movs	r2, #0
 8002960:	2100      	movs	r1, #0
 8002962:	2017      	movs	r0, #23
 8002964:	f000 ff3e 	bl	80037e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8002968:	2017      	movs	r0, #23
 800296a:	f000 ff50 	bl	800380e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	46bd      	mov	sp, r7
 8002972:	b017      	add	sp, #92	; 0x5c
 8002974:	bd90      	pop	{r4, r7, pc}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	40005400 	.word	0x40005400
 800297c:	40021000 	.word	0x40021000

08002980 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002980:	b590      	push	{r4, r7, lr}
 8002982:	b099      	sub	sp, #100	; 0x64
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	234c      	movs	r3, #76	; 0x4c
 800298a:	18fb      	adds	r3, r7, r3
 800298c:	0018      	movs	r0, r3
 800298e:	2314      	movs	r3, #20
 8002990:	001a      	movs	r2, r3
 8002992:	2100      	movs	r1, #0
 8002994:	f007 fe70 	bl	800a678 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002998:	2418      	movs	r4, #24
 800299a:	193b      	adds	r3, r7, r4
 800299c:	0018      	movs	r0, r3
 800299e:	2334      	movs	r3, #52	; 0x34
 80029a0:	001a      	movs	r2, r3
 80029a2:	2100      	movs	r1, #0
 80029a4:	f007 fe68 	bl	800a678 <memset>
  if(hi2s->Instance==SPI1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a4f      	ldr	r2, [pc, #316]	; (8002aec <HAL_I2S_MspInit+0x16c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d000      	beq.n	80029b4 <HAL_I2S_MspInit+0x34>
 80029b2:	e097      	b.n	8002ae4 <HAL_I2S_MspInit+0x164>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 80029b4:	193b      	adds	r3, r7, r4
 80029b6:	2280      	movs	r2, #128	; 0x80
 80029b8:	0112      	lsls	r2, r2, #4
 80029ba:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 80029bc:	193b      	adds	r3, r7, r4
 80029be:	2200      	movs	r2, #0
 80029c0:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029c2:	193b      	adds	r3, r7, r4
 80029c4:	0018      	movs	r0, r3
 80029c6:	f003 fd85 	bl	80064d4 <HAL_RCCEx_PeriphCLKConfig>
 80029ca:	1e03      	subs	r3, r0, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80029ce:	f7ff ff09 	bl	80027e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029d2:	4b47      	ldr	r3, [pc, #284]	; (8002af0 <HAL_I2S_MspInit+0x170>)
 80029d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029d6:	4b46      	ldr	r3, [pc, #280]	; (8002af0 <HAL_I2S_MspInit+0x170>)
 80029d8:	2180      	movs	r1, #128	; 0x80
 80029da:	0149      	lsls	r1, r1, #5
 80029dc:	430a      	orrs	r2, r1
 80029de:	641a      	str	r2, [r3, #64]	; 0x40
 80029e0:	4b43      	ldr	r3, [pc, #268]	; (8002af0 <HAL_I2S_MspInit+0x170>)
 80029e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029e4:	2380      	movs	r3, #128	; 0x80
 80029e6:	015b      	lsls	r3, r3, #5
 80029e8:	4013      	ands	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ee:	4b40      	ldr	r3, [pc, #256]	; (8002af0 <HAL_I2S_MspInit+0x170>)
 80029f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029f2:	4b3f      	ldr	r3, [pc, #252]	; (8002af0 <HAL_I2S_MspInit+0x170>)
 80029f4:	2101      	movs	r1, #1
 80029f6:	430a      	orrs	r2, r1
 80029f8:	635a      	str	r2, [r3, #52]	; 0x34
 80029fa:	4b3d      	ldr	r3, [pc, #244]	; (8002af0 <HAL_I2S_MspInit+0x170>)
 80029fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fe:	2201      	movs	r2, #1
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a06:	4b3a      	ldr	r3, [pc, #232]	; (8002af0 <HAL_I2S_MspInit+0x170>)
 8002a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a0a:	4b39      	ldr	r3, [pc, #228]	; (8002af0 <HAL_I2S_MspInit+0x170>)
 8002a0c:	2102      	movs	r1, #2
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	635a      	str	r2, [r3, #52]	; 0x34
 8002a12:	4b37      	ldr	r3, [pc, #220]	; (8002af0 <HAL_I2S_MspInit+0x170>)
 8002a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a16:	2202      	movs	r2, #2
 8002a18:	4013      	ands	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a1e:	214c      	movs	r1, #76	; 0x4c
 8002a20:	187b      	adds	r3, r7, r1
 8002a22:	2280      	movs	r2, #128	; 0x80
 8002a24:	0212      	lsls	r2, r2, #8
 8002a26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	000c      	movs	r4, r1
 8002a2a:	193b      	adds	r3, r7, r4
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a30:	193b      	adds	r3, r7, r4
 8002a32:	2201      	movs	r2, #1
 8002a34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a36:	193b      	adds	r3, r7, r4
 8002a38:	2203      	movs	r2, #3
 8002a3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002a3c:	193b      	adds	r3, r7, r4
 8002a3e:	2200      	movs	r2, #0
 8002a40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a42:	193a      	adds	r2, r7, r4
 8002a44:	23a0      	movs	r3, #160	; 0xa0
 8002a46:	05db      	lsls	r3, r3, #23
 8002a48:	0011      	movs	r1, r2
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f001 f9c4 	bl	8003dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002a50:	0021      	movs	r1, r4
 8002a52:	187b      	adds	r3, r7, r1
 8002a54:	2238      	movs	r2, #56	; 0x38
 8002a56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a58:	187b      	adds	r3, r7, r1
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a5e:	187b      	adds	r3, r7, r1
 8002a60:	2201      	movs	r2, #1
 8002a62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a64:	187b      	adds	r3, r7, r1
 8002a66:	2203      	movs	r2, #3
 8002a68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002a6a:	187b      	adds	r3, r7, r1
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a70:	187b      	adds	r3, r7, r1
 8002a72:	4a20      	ldr	r2, [pc, #128]	; (8002af4 <HAL_I2S_MspInit+0x174>)
 8002a74:	0019      	movs	r1, r3
 8002a76:	0010      	movs	r0, r2
 8002a78:	f001 f9ae 	bl	8003dd8 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8002a7c:	4b1e      	ldr	r3, [pc, #120]	; (8002af8 <HAL_I2S_MspInit+0x178>)
 8002a7e:	4a1f      	ldr	r2, [pc, #124]	; (8002afc <HAL_I2S_MspInit+0x17c>)
 8002a80:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002a82:	4b1d      	ldr	r3, [pc, #116]	; (8002af8 <HAL_I2S_MspInit+0x178>)
 8002a84:	2211      	movs	r2, #17
 8002a86:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a88:	4b1b      	ldr	r3, [pc, #108]	; (8002af8 <HAL_I2S_MspInit+0x178>)
 8002a8a:	2210      	movs	r2, #16
 8002a8c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a8e:	4b1a      	ldr	r3, [pc, #104]	; (8002af8 <HAL_I2S_MspInit+0x178>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a94:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <HAL_I2S_MspInit+0x178>)
 8002a96:	2280      	movs	r2, #128	; 0x80
 8002a98:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a9a:	4b17      	ldr	r3, [pc, #92]	; (8002af8 <HAL_I2S_MspInit+0x178>)
 8002a9c:	2280      	movs	r2, #128	; 0x80
 8002a9e:	0052      	lsls	r2, r2, #1
 8002aa0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002aa2:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <HAL_I2S_MspInit+0x178>)
 8002aa4:	2280      	movs	r2, #128	; 0x80
 8002aa6:	00d2      	lsls	r2, r2, #3
 8002aa8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002aaa:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <HAL_I2S_MspInit+0x178>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002ab0:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <HAL_I2S_MspInit+0x178>)
 8002ab2:	22c0      	movs	r2, #192	; 0xc0
 8002ab4:	0192      	lsls	r2, r2, #6
 8002ab6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002ab8:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <HAL_I2S_MspInit+0x178>)
 8002aba:	0018      	movs	r0, r3
 8002abc:	f000 fec4 	bl	8003848 <HAL_DMA_Init>
 8002ac0:	1e03      	subs	r3, r0, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_I2S_MspInit+0x148>
    {
      Error_Handler();
 8002ac4:	f7ff fe8e 	bl	80027e4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a0b      	ldr	r2, [pc, #44]	; (8002af8 <HAL_I2S_MspInit+0x178>)
 8002acc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <HAL_I2S_MspInit+0x178>)
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	2019      	movs	r0, #25
 8002ada:	f000 fe83 	bl	80037e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002ade:	2019      	movs	r0, #25
 8002ae0:	f000 fe95 	bl	800380e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ae4:	46c0      	nop			; (mov r8, r8)
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b019      	add	sp, #100	; 0x64
 8002aea:	bd90      	pop	{r4, r7, pc}
 8002aec:	40013000 	.word	0x40013000
 8002af0:	40021000 	.word	0x40021000
 8002af4:	50000400 	.word	0x50000400
 8002af8:	20000144 	.word	0x20000144
 8002afc:	40020008 	.word	0x40020008

08002b00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b00:	b590      	push	{r4, r7, lr}
 8002b02:	b08b      	sub	sp, #44	; 0x2c
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	2414      	movs	r4, #20
 8002b0a:	193b      	adds	r3, r7, r4
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	2314      	movs	r3, #20
 8002b10:	001a      	movs	r2, r3
 8002b12:	2100      	movs	r1, #0
 8002b14:	f007 fdb0 	bl	800a678 <memset>
  if(hspi->Instance==SPI2)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a34      	ldr	r2, [pc, #208]	; (8002bf0 <HAL_SPI_MspInit+0xf0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d162      	bne.n	8002be8 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b22:	4b34      	ldr	r3, [pc, #208]	; (8002bf4 <HAL_SPI_MspInit+0xf4>)
 8002b24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b26:	4b33      	ldr	r3, [pc, #204]	; (8002bf4 <HAL_SPI_MspInit+0xf4>)
 8002b28:	2180      	movs	r1, #128	; 0x80
 8002b2a:	01c9      	lsls	r1, r1, #7
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b30:	4b30      	ldr	r3, [pc, #192]	; (8002bf4 <HAL_SPI_MspInit+0xf4>)
 8002b32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b34:	2380      	movs	r3, #128	; 0x80
 8002b36:	01db      	lsls	r3, r3, #7
 8002b38:	4013      	ands	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b3e:	4b2d      	ldr	r3, [pc, #180]	; (8002bf4 <HAL_SPI_MspInit+0xf4>)
 8002b40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b42:	4b2c      	ldr	r3, [pc, #176]	; (8002bf4 <HAL_SPI_MspInit+0xf4>)
 8002b44:	2102      	movs	r1, #2
 8002b46:	430a      	orrs	r2, r1
 8002b48:	635a      	str	r2, [r3, #52]	; 0x34
 8002b4a:	4b2a      	ldr	r3, [pc, #168]	; (8002bf4 <HAL_SPI_MspInit+0xf4>)
 8002b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4e:	2202      	movs	r2, #2
 8002b50:	4013      	ands	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b56:	193b      	adds	r3, r7, r4
 8002b58:	2240      	movs	r2, #64	; 0x40
 8002b5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5c:	193b      	adds	r3, r7, r4
 8002b5e:	2202      	movs	r2, #2
 8002b60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b62:	193b      	adds	r3, r7, r4
 8002b64:	2201      	movs	r2, #1
 8002b66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b68:	193b      	adds	r3, r7, r4
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8002b6e:	193b      	adds	r3, r7, r4
 8002b70:	2204      	movs	r2, #4
 8002b72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b74:	193b      	adds	r3, r7, r4
 8002b76:	4a20      	ldr	r2, [pc, #128]	; (8002bf8 <HAL_SPI_MspInit+0xf8>)
 8002b78:	0019      	movs	r1, r3
 8002b7a:	0010      	movs	r0, r2
 8002b7c:	f001 f92c 	bl	8003dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002b80:	0021      	movs	r1, r4
 8002b82:	187b      	adds	r3, r7, r1
 8002b84:	22c0      	movs	r2, #192	; 0xc0
 8002b86:	0052      	lsls	r2, r2, #1
 8002b88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8a:	187b      	adds	r3, r7, r1
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b90:	187b      	adds	r3, r7, r1
 8002b92:	2201      	movs	r2, #1
 8002b94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b96:	187b      	adds	r3, r7, r1
 8002b98:	2203      	movs	r2, #3
 8002b9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8002b9c:	187b      	adds	r3, r7, r1
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba2:	187b      	adds	r3, r7, r1
 8002ba4:	4a14      	ldr	r2, [pc, #80]	; (8002bf8 <HAL_SPI_MspInit+0xf8>)
 8002ba6:	0019      	movs	r1, r3
 8002ba8:	0010      	movs	r0, r2
 8002baa:	f001 f915 	bl	8003dd8 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8002bae:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <HAL_SPI_MspInit+0xfc>)
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <HAL_SPI_MspInit+0xfc>)
 8002bb4:	2180      	movs	r1, #128	; 0x80
 8002bb6:	0249      	lsls	r1, r1, #9
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	601a      	str	r2, [r3, #0]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8002bbc:	4b0f      	ldr	r3, [pc, #60]	; (8002bfc <HAL_SPI_MspInit+0xfc>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <HAL_SPI_MspInit+0xfc>)
 8002bc2:	2180      	movs	r1, #128	; 0x80
 8002bc4:	0289      	lsls	r1, r1, #10
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	601a      	str	r2, [r3, #0]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB8);
 8002bca:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <HAL_SPI_MspInit+0xfc>)
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <HAL_SPI_MspInit+0xfc>)
 8002bd0:	2180      	movs	r1, #128	; 0x80
 8002bd2:	02c9      	lsls	r1, r1, #11
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	601a      	str	r2, [r3, #0]

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2100      	movs	r1, #0
 8002bdc:	201a      	movs	r0, #26
 8002bde:	f000 fe01 	bl	80037e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002be2:	201a      	movs	r0, #26
 8002be4:	f000 fe13 	bl	800380e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002be8:	46c0      	nop			; (mov r8, r8)
 8002bea:	46bd      	mov	sp, r7
 8002bec:	b00b      	add	sp, #44	; 0x2c
 8002bee:	bd90      	pop	{r4, r7, pc}
 8002bf0:	40003800 	.word	0x40003800
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	50000400 	.word	0x50000400
 8002bfc:	40010000 	.word	0x40010000

08002c00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c00:	b590      	push	{r4, r7, lr}
 8002c02:	b091      	sub	sp, #68	; 0x44
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c08:	240c      	movs	r4, #12
 8002c0a:	193b      	adds	r3, r7, r4
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	2334      	movs	r3, #52	; 0x34
 8002c10:	001a      	movs	r2, r3
 8002c12:	2100      	movs	r1, #0
 8002c14:	f007 fd30 	bl	800a678 <memset>
  if(htim_base->Instance==TIM1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a11      	ldr	r2, [pc, #68]	; (8002c64 <HAL_TIM_Base_MspInit+0x64>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d11c      	bne.n	8002c5c <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8002c22:	193b      	adds	r3, r7, r4
 8002c24:	2280      	movs	r2, #128	; 0x80
 8002c26:	0392      	lsls	r2, r2, #14
 8002c28:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8002c2a:	193b      	adds	r3, r7, r4
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c30:	193b      	adds	r3, r7, r4
 8002c32:	0018      	movs	r0, r3
 8002c34:	f003 fc4e 	bl	80064d4 <HAL_RCCEx_PeriphCLKConfig>
 8002c38:	1e03      	subs	r3, r0, #0
 8002c3a:	d001      	beq.n	8002c40 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8002c3c:	f7ff fdd2 	bl	80027e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <HAL_TIM_Base_MspInit+0x68>)
 8002c42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c44:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <HAL_TIM_Base_MspInit+0x68>)
 8002c46:	2180      	movs	r1, #128	; 0x80
 8002c48:	0109      	lsls	r1, r1, #4
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	641a      	str	r2, [r3, #64]	; 0x40
 8002c4e:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_TIM_Base_MspInit+0x68>)
 8002c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c52:	2380      	movs	r3, #128	; 0x80
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	4013      	ands	r3, r2
 8002c58:	60bb      	str	r3, [r7, #8]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002c5c:	46c0      	nop			; (mov r8, r8)
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b011      	add	sp, #68	; 0x44
 8002c62:	bd90      	pop	{r4, r7, pc}
 8002c64:	40012c00 	.word	0x40012c00
 8002c68:	40021000 	.word	0x40021000

08002c6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c6c:	b590      	push	{r4, r7, lr}
 8002c6e:	b089      	sub	sp, #36	; 0x24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c74:	240c      	movs	r4, #12
 8002c76:	193b      	adds	r3, r7, r4
 8002c78:	0018      	movs	r0, r3
 8002c7a:	2314      	movs	r3, #20
 8002c7c:	001a      	movs	r2, r3
 8002c7e:	2100      	movs	r1, #0
 8002c80:	f007 fcfa 	bl	800a678 <memset>
  if(htim->Instance==TIM1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a15      	ldr	r2, [pc, #84]	; (8002ce0 <HAL_TIM_MspPostInit+0x74>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d123      	bne.n	8002cd6 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8e:	4b15      	ldr	r3, [pc, #84]	; (8002ce4 <HAL_TIM_MspPostInit+0x78>)
 8002c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c92:	4b14      	ldr	r3, [pc, #80]	; (8002ce4 <HAL_TIM_MspPostInit+0x78>)
 8002c94:	2101      	movs	r1, #1
 8002c96:	430a      	orrs	r2, r1
 8002c98:	635a      	str	r2, [r3, #52]	; 0x34
 8002c9a:	4b12      	ldr	r3, [pc, #72]	; (8002ce4 <HAL_TIM_MspPostInit+0x78>)
 8002c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ca6:	193b      	adds	r3, r7, r4
 8002ca8:	2280      	movs	r2, #128	; 0x80
 8002caa:	0052      	lsls	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cae:	0021      	movs	r1, r4
 8002cb0:	187b      	adds	r3, r7, r1
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002cb6:	187b      	adds	r3, r7, r1
 8002cb8:	2202      	movs	r2, #2
 8002cba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cbc:	187b      	adds	r3, r7, r1
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002cc2:	187b      	adds	r3, r7, r1
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc8:	187a      	adds	r2, r7, r1
 8002cca:	23a0      	movs	r3, #160	; 0xa0
 8002ccc:	05db      	lsls	r3, r3, #23
 8002cce:	0011      	movs	r1, r2
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f001 f881 	bl	8003dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	b009      	add	sp, #36	; 0x24
 8002cdc:	bd90      	pop	{r4, r7, pc}
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	40012c00 	.word	0x40012c00
 8002ce4:	40021000 	.word	0x40021000

08002ce8 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8002ce8:	b590      	push	{r4, r7, lr}
 8002cea:	b08b      	sub	sp, #44	; 0x2c
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf0:	2414      	movs	r4, #20
 8002cf2:	193b      	adds	r3, r7, r4
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	2314      	movs	r3, #20
 8002cf8:	001a      	movs	r2, r3
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	f007 fcbc 	bl	800a678 <memset>
  if(husart->Instance==USART3)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a30      	ldr	r2, [pc, #192]	; (8002dc8 <HAL_USART_MspInit+0xe0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d159      	bne.n	8002dbe <HAL_USART_MspInit+0xd6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d0a:	4b30      	ldr	r3, [pc, #192]	; (8002dcc <HAL_USART_MspInit+0xe4>)
 8002d0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d0e:	4b2f      	ldr	r3, [pc, #188]	; (8002dcc <HAL_USART_MspInit+0xe4>)
 8002d10:	2180      	movs	r1, #128	; 0x80
 8002d12:	02c9      	lsls	r1, r1, #11
 8002d14:	430a      	orrs	r2, r1
 8002d16:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d18:	4b2c      	ldr	r3, [pc, #176]	; (8002dcc <HAL_USART_MspInit+0xe4>)
 8002d1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d1c:	2380      	movs	r3, #128	; 0x80
 8002d1e:	02db      	lsls	r3, r3, #11
 8002d20:	4013      	ands	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
 8002d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d26:	4b29      	ldr	r3, [pc, #164]	; (8002dcc <HAL_USART_MspInit+0xe4>)
 8002d28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d2a:	4b28      	ldr	r3, [pc, #160]	; (8002dcc <HAL_USART_MspInit+0xe4>)
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	635a      	str	r2, [r3, #52]	; 0x34
 8002d32:	4b26      	ldr	r3, [pc, #152]	; (8002dcc <HAL_USART_MspInit+0xe4>)
 8002d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d36:	2201      	movs	r2, #1
 8002d38:	4013      	ands	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d3e:	4b23      	ldr	r3, [pc, #140]	; (8002dcc <HAL_USART_MspInit+0xe4>)
 8002d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d42:	4b22      	ldr	r3, [pc, #136]	; (8002dcc <HAL_USART_MspInit+0xe4>)
 8002d44:	2102      	movs	r1, #2
 8002d46:	430a      	orrs	r2, r1
 8002d48:	635a      	str	r2, [r3, #52]	; 0x34
 8002d4a:	4b20      	ldr	r3, [pc, #128]	; (8002dcc <HAL_USART_MspInit+0xe4>)
 8002d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4e:	2202      	movs	r2, #2
 8002d50:	4013      	ands	r3, r2
 8002d52:	60bb      	str	r3, [r7, #8]
 8002d54:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002d56:	193b      	adds	r3, r7, r4
 8002d58:	2220      	movs	r2, #32
 8002d5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5c:	193b      	adds	r3, r7, r4
 8002d5e:	2202      	movs	r2, #2
 8002d60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d62:	193b      	adds	r3, r7, r4
 8002d64:	2200      	movs	r2, #0
 8002d66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d68:	193b      	adds	r3, r7, r4
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002d6e:	193b      	adds	r3, r7, r4
 8002d70:	2204      	movs	r2, #4
 8002d72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d74:	193a      	adds	r2, r7, r4
 8002d76:	23a0      	movs	r3, #160	; 0xa0
 8002d78:	05db      	lsls	r3, r3, #23
 8002d7a:	0011      	movs	r1, r2
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f001 f82b 	bl	8003dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d82:	0021      	movs	r1, r4
 8002d84:	187b      	adds	r3, r7, r1
 8002d86:	2203      	movs	r2, #3
 8002d88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8a:	187b      	adds	r3, r7, r1
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	187b      	adds	r3, r7, r1
 8002d92:	2200      	movs	r2, #0
 8002d94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d96:	187b      	adds	r3, r7, r1
 8002d98:	2203      	movs	r2, #3
 8002d9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002d9c:	187b      	adds	r3, r7, r1
 8002d9e:	2204      	movs	r2, #4
 8002da0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da2:	187b      	adds	r3, r7, r1
 8002da4:	4a0a      	ldr	r2, [pc, #40]	; (8002dd0 <HAL_USART_MspInit+0xe8>)
 8002da6:	0019      	movs	r1, r3
 8002da8:	0010      	movs	r0, r2
 8002daa:	f001 f815 	bl	8003dd8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8002dae:	2200      	movs	r2, #0
 8002db0:	2100      	movs	r1, #0
 8002db2:	201d      	movs	r0, #29
 8002db4:	f000 fd16 	bl	80037e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8002db8:	201d      	movs	r0, #29
 8002dba:	f000 fd28 	bl	800380e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b00b      	add	sp, #44	; 0x2c
 8002dc4:	bd90      	pop	{r4, r7, pc}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	40004800 	.word	0x40004800
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	50000400 	.word	0x50000400

08002dd4 <LL_USART_IsActiveFlag_FE>:
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	2202      	movs	r2, #2
 8002de2:	4013      	ands	r3, r2
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d101      	bne.n	8002dec <LL_USART_IsActiveFlag_FE+0x18>
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <LL_USART_IsActiveFlag_FE+0x1a>
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	0018      	movs	r0, r3
 8002df0:	46bd      	mov	sp, r7
 8002df2:	b002      	add	sp, #8
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <LL_USART_IsActiveFlag_NE>:
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	2204      	movs	r2, #4
 8002e04:	4013      	ands	r3, r2
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d101      	bne.n	8002e0e <LL_USART_IsActiveFlag_NE+0x18>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <LL_USART_IsActiveFlag_NE+0x1a>
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	0018      	movs	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	b002      	add	sp, #8
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <LL_USART_IsActiveFlag_ORE>:
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	2208      	movs	r2, #8
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d101      	bne.n	8002e30 <LL_USART_IsActiveFlag_ORE+0x18>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <LL_USART_IsActiveFlag_ORE+0x1a>
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	0018      	movs	r0, r3
 8002e34:	46bd      	mov	sp, r7
 8002e36:	b002      	add	sp, #8
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b082      	sub	sp, #8
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	2220      	movs	r2, #32
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b20      	cmp	r3, #32
 8002e4c:	d101      	bne.n	8002e52 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	0018      	movs	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b002      	add	sp, #8
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b20      	cmp	r3, #32
 8002e6e:	d101      	bne.n	8002e74 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8002e70:	2301      	movs	r3, #1
 8002e72:	e000      	b.n	8002e76 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	0018      	movs	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	b002      	add	sp, #8
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e8c:	e7fe      	b.n	8002e8c <HardFault_Handler+0x4>

08002e8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e9c:	46c0      	nop			; (mov r8, r8)
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ea6:	f000 f93b 	bl	8003120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002eb4:	4b03      	ldr	r3, [pc, #12]	; (8002ec4 <DMA1_Channel1_IRQHandler+0x14>)
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f000 fe40 	bl	8003b3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ebc:	46c0      	nop			; (mov r8, r8)
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	20000144 	.word	0x20000144

08002ec8 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002ecc:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <I2C1_IRQHandler+0x2c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	23e0      	movs	r3, #224	; 0xe0
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d004      	beq.n	8002ee4 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8002eda:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <I2C1_IRQHandler+0x2c>)
 8002edc:	0018      	movs	r0, r3
 8002ede:	f001 fa97 	bl	8004410 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002ee2:	e003      	b.n	8002eec <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002ee4:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <I2C1_IRQHandler+0x2c>)
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f001 fa78 	bl	80043dc <HAL_I2C_EV_IRQHandler>
}
 8002eec:	46c0      	nop			; (mov r8, r8)
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	200000bc 	.word	0x200000bc

08002ef8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8002efc:	4b03      	ldr	r3, [pc, #12]	; (8002f0c <SPI1_IRQHandler+0x14>)
 8002efe:	0018      	movs	r0, r3
 8002f00:	f002 fca6 	bl	8005850 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002f04:	46c0      	nop			; (mov r8, r8)
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	20000108 	.word	0x20000108

08002f10 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002f14:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <SPI2_IRQHandler+0x14>)
 8002f16:	0018      	movs	r0, r3
 8002f18:	f004 fd0a 	bl	8007930 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002f1c:	46c0      	nop			; (mov r8, r8)
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	200001a0 	.word	0x200001a0

08002f28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 8002f2c:	4b25      	ldr	r3, [pc, #148]	; (8002fc4 <USART2_IRQHandler+0x9c>)
 8002f2e:	6a1a      	ldr	r2, [r3, #32]
 8002f30:	4b24      	ldr	r3, [pc, #144]	; (8002fc4 <USART2_IRQHandler+0x9c>)
 8002f32:	2108      	movs	r1, #8
 8002f34:	430a      	orrs	r2, r1
 8002f36:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 8002f38:	4b22      	ldr	r3, [pc, #136]	; (8002fc4 <USART2_IRQHandler+0x9c>)
 8002f3a:	6a1a      	ldr	r2, [r3, #32]
 8002f3c:	4b21      	ldr	r3, [pc, #132]	; (8002fc4 <USART2_IRQHandler+0x9c>)
 8002f3e:	2102      	movs	r1, #2
 8002f40:	430a      	orrs	r2, r1
 8002f42:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 8002f44:	4b1f      	ldr	r3, [pc, #124]	; (8002fc4 <USART2_IRQHandler+0x9c>)
 8002f46:	6a1a      	ldr	r2, [r3, #32]
 8002f48:	4b1e      	ldr	r3, [pc, #120]	; (8002fc4 <USART2_IRQHandler+0x9c>)
 8002f4a:	2104      	movs	r1, #4
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 8002f50:	4b1c      	ldr	r3, [pc, #112]	; (8002fc4 <USART2_IRQHandler+0x9c>)
 8002f52:	0018      	movs	r0, r3
 8002f54:	f7ff ff71 	bl	8002e3a <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8002f58:	1e03      	subs	r3, r0, #0
 8002f5a:	d009      	beq.n	8002f70 <USART2_IRQHandler+0x48>
 8002f5c:	4b19      	ldr	r3, [pc, #100]	; (8002fc4 <USART2_IRQHandler+0x9c>)
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f7ff ff7c 	bl	8002e5c <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8002f64:	1e03      	subs	r3, r0, #0
 8002f66:	d003      	beq.n	8002f70 <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 8002f68:	f7fe f8c2 	bl	80010f0 <USART2_RX_Callback>
	  {
 8002f6c:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f6e:	e025      	b.n	8002fbc <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 8002f70:	4b14      	ldr	r3, [pc, #80]	; (8002fc4 <USART2_IRQHandler+0x9c>)
 8002f72:	6a1a      	ldr	r2, [r3, #32]
 8002f74:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <USART2_IRQHandler+0x9c>)
 8002f76:	2108      	movs	r1, #8
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 8002f7c:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <USART2_IRQHandler+0x9c>)
 8002f7e:	0018      	movs	r0, r3
 8002f80:	f7ff ff4a 	bl	8002e18 <LL_USART_IsActiveFlag_ORE>
 8002f84:	1e03      	subs	r3, r0, #0
 8002f86:	d008      	beq.n	8002f9a <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 8002f88:	4b0e      	ldr	r3, [pc, #56]	; (8002fc4 <USART2_IRQHandler+0x9c>)
 8002f8a:	6a1a      	ldr	r2, [r3, #32]
 8002f8c:	4b0d      	ldr	r3, [pc, #52]	; (8002fc4 <USART2_IRQHandler+0x9c>)
 8002f8e:	2108      	movs	r1, #8
 8002f90:	430a      	orrs	r2, r1
 8002f92:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 8002f94:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <USART2_IRQHandler+0x9c>)
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002f98:	e010      	b.n	8002fbc <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <USART2_IRQHandler+0x9c>)
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	f7ff ff19 	bl	8002dd4 <LL_USART_IsActiveFlag_FE>
 8002fa2:	1e03      	subs	r3, r0, #0
 8002fa4:	d002      	beq.n	8002fac <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 8002fa6:	4b07      	ldr	r3, [pc, #28]	; (8002fc4 <USART2_IRQHandler+0x9c>)
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002faa:	e007      	b.n	8002fbc <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 8002fac:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <USART2_IRQHandler+0x9c>)
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f7ff ff21 	bl	8002df6 <LL_USART_IsActiveFlag_NE>
 8002fb4:	1e03      	subs	r3, r0, #0
 8002fb6:	d001      	beq.n	8002fbc <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 8002fb8:	4b02      	ldr	r3, [pc, #8]	; (8002fc4 <USART2_IRQHandler+0x9c>)
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002fbc:	46c0      	nop			; (mov r8, r8)
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	40004400 	.word	0x40004400

08002fc8 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 8002fcc:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <USART3_4_LPUART1_IRQHandler+0x14>)
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f006 f9e8 	bl	80093a4 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	20000250 	.word	0x20000250

08002fe0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fe4:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <SystemInit+0x14>)
 8002fe6:	2280      	movs	r2, #128	; 0x80
 8002fe8:	0512      	lsls	r2, r2, #20
 8002fea:	609a      	str	r2, [r3, #8]
#endif
}
 8002fec:	46c0      	nop			; (mov r8, r8)
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ff8:	480d      	ldr	r0, [pc, #52]	; (8003030 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ffa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ffc:	f7ff fff0 	bl	8002fe0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003000:	480c      	ldr	r0, [pc, #48]	; (8003034 <LoopForever+0x6>)
  ldr r1, =_edata
 8003002:	490d      	ldr	r1, [pc, #52]	; (8003038 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003004:	4a0d      	ldr	r2, [pc, #52]	; (800303c <LoopForever+0xe>)
  movs r3, #0
 8003006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003008:	e002      	b.n	8003010 <LoopCopyDataInit>

0800300a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800300a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800300c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800300e:	3304      	adds	r3, #4

08003010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003014:	d3f9      	bcc.n	800300a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003016:	4a0a      	ldr	r2, [pc, #40]	; (8003040 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003018:	4c0a      	ldr	r4, [pc, #40]	; (8003044 <LoopForever+0x16>)
  movs r3, #0
 800301a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800301c:	e001      	b.n	8003022 <LoopFillZerobss>

0800301e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800301e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003020:	3204      	adds	r2, #4

08003022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003024:	d3fb      	bcc.n	800301e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003026:	f007 fb03 	bl	800a630 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800302a:	f7fd fac7 	bl	80005bc <main>

0800302e <LoopForever>:

LoopForever:
  b LoopForever
 800302e:	e7fe      	b.n	800302e <LoopForever>
  ldr   r0, =_estack
 8003030:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003038:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800303c:	0800a790 	.word	0x0800a790
  ldr r2, =_sbss
 8003040:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003044:	20002334 	.word	0x20002334

08003048 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003048:	e7fe      	b.n	8003048 <ADC1_COMP_IRQHandler>
	...

0800304c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003052:	1dfb      	adds	r3, r7, #7
 8003054:	2200      	movs	r2, #0
 8003056:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <HAL_Init+0x3c>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <HAL_Init+0x3c>)
 800305e:	2180      	movs	r1, #128	; 0x80
 8003060:	0049      	lsls	r1, r1, #1
 8003062:	430a      	orrs	r2, r1
 8003064:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003066:	2000      	movs	r0, #0
 8003068:	f000 f810 	bl	800308c <HAL_InitTick>
 800306c:	1e03      	subs	r3, r0, #0
 800306e:	d003      	beq.n	8003078 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003070:	1dfb      	adds	r3, r7, #7
 8003072:	2201      	movs	r2, #1
 8003074:	701a      	strb	r2, [r3, #0]
 8003076:	e001      	b.n	800307c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003078:	f7ff fbba 	bl	80027f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800307c:	1dfb      	adds	r3, r7, #7
 800307e:	781b      	ldrb	r3, [r3, #0]
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	b002      	add	sp, #8
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40022000 	.word	0x40022000

0800308c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800308c:	b590      	push	{r4, r7, lr}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003094:	230f      	movs	r3, #15
 8003096:	18fb      	adds	r3, r7, r3
 8003098:	2200      	movs	r2, #0
 800309a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800309c:	4b1d      	ldr	r3, [pc, #116]	; (8003114 <HAL_InitTick+0x88>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d02b      	beq.n	80030fc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80030a4:	4b1c      	ldr	r3, [pc, #112]	; (8003118 <HAL_InitTick+0x8c>)
 80030a6:	681c      	ldr	r4, [r3, #0]
 80030a8:	4b1a      	ldr	r3, [pc, #104]	; (8003114 <HAL_InitTick+0x88>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	0019      	movs	r1, r3
 80030ae:	23fa      	movs	r3, #250	; 0xfa
 80030b0:	0098      	lsls	r0, r3, #2
 80030b2:	f7fd f827 	bl	8000104 <__udivsi3>
 80030b6:	0003      	movs	r3, r0
 80030b8:	0019      	movs	r1, r3
 80030ba:	0020      	movs	r0, r4
 80030bc:	f7fd f822 	bl	8000104 <__udivsi3>
 80030c0:	0003      	movs	r3, r0
 80030c2:	0018      	movs	r0, r3
 80030c4:	f000 fbb3 	bl	800382e <HAL_SYSTICK_Config>
 80030c8:	1e03      	subs	r3, r0, #0
 80030ca:	d112      	bne.n	80030f2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d80a      	bhi.n	80030e8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	2301      	movs	r3, #1
 80030d6:	425b      	negs	r3, r3
 80030d8:	2200      	movs	r2, #0
 80030da:	0018      	movs	r0, r3
 80030dc:	f000 fb82 	bl	80037e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030e0:	4b0e      	ldr	r3, [pc, #56]	; (800311c <HAL_InitTick+0x90>)
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	e00d      	b.n	8003104 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80030e8:	230f      	movs	r3, #15
 80030ea:	18fb      	adds	r3, r7, r3
 80030ec:	2201      	movs	r2, #1
 80030ee:	701a      	strb	r2, [r3, #0]
 80030f0:	e008      	b.n	8003104 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030f2:	230f      	movs	r3, #15
 80030f4:	18fb      	adds	r3, r7, r3
 80030f6:	2201      	movs	r2, #1
 80030f8:	701a      	strb	r2, [r3, #0]
 80030fa:	e003      	b.n	8003104 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030fc:	230f      	movs	r3, #15
 80030fe:	18fb      	adds	r3, r7, r3
 8003100:	2201      	movs	r2, #1
 8003102:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003104:	230f      	movs	r3, #15
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	781b      	ldrb	r3, [r3, #0]
}
 800310a:	0018      	movs	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	b005      	add	sp, #20
 8003110:	bd90      	pop	{r4, r7, pc}
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	2000006c 	.word	0x2000006c
 8003118:	20000064 	.word	0x20000064
 800311c:	20000068 	.word	0x20000068

08003120 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003124:	4b05      	ldr	r3, [pc, #20]	; (800313c <HAL_IncTick+0x1c>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	001a      	movs	r2, r3
 800312a:	4b05      	ldr	r3, [pc, #20]	; (8003140 <HAL_IncTick+0x20>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	18d2      	adds	r2, r2, r3
 8003130:	4b03      	ldr	r3, [pc, #12]	; (8003140 <HAL_IncTick+0x20>)
 8003132:	601a      	str	r2, [r3, #0]
}
 8003134:	46c0      	nop			; (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	2000006c 	.word	0x2000006c
 8003140:	20002330 	.word	0x20002330

08003144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  return uwTick;
 8003148:	4b02      	ldr	r3, [pc, #8]	; (8003154 <HAL_GetTick+0x10>)
 800314a:	681b      	ldr	r3, [r3, #0]
}
 800314c:	0018      	movs	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	20002330 	.word	0x20002330

08003158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003160:	f7ff fff0 	bl	8003144 <HAL_GetTick>
 8003164:	0003      	movs	r3, r0
 8003166:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	3301      	adds	r3, #1
 8003170:	d005      	beq.n	800317e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003172:	4b0a      	ldr	r3, [pc, #40]	; (800319c <HAL_Delay+0x44>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	001a      	movs	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	189b      	adds	r3, r3, r2
 800317c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	f7ff ffe0 	bl	8003144 <HAL_GetTick>
 8003184:	0002      	movs	r2, r0
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	429a      	cmp	r2, r3
 800318e:	d8f7      	bhi.n	8003180 <HAL_Delay+0x28>
  {
  }
}
 8003190:	46c0      	nop			; (mov r8, r8)
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	46bd      	mov	sp, r7
 8003196:	b004      	add	sp, #16
 8003198:	bd80      	pop	{r7, pc}
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	2000006c 	.word	0x2000006c

080031a0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80031a8:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a06      	ldr	r2, [pc, #24]	; (80031c8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	0019      	movs	r1, r3
 80031b2:	4b04      	ldr	r3, [pc, #16]	; (80031c4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	601a      	str	r2, [r3, #0]
}
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	46bd      	mov	sp, r7
 80031be:	b002      	add	sp, #8
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	40010000 	.word	0x40010000
 80031c8:	fffff9ff 	.word	0xfffff9ff

080031cc <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80031d4:	4a05      	ldr	r2, [pc, #20]	; (80031ec <LL_EXTI_EnableIT_0_31+0x20>)
 80031d6:	2380      	movs	r3, #128	; 0x80
 80031d8:	58d2      	ldr	r2, [r2, r3]
 80031da:	4904      	ldr	r1, [pc, #16]	; (80031ec <LL_EXTI_EnableIT_0_31+0x20>)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4313      	orrs	r3, r2
 80031e0:	2280      	movs	r2, #128	; 0x80
 80031e2:	508b      	str	r3, [r1, r2]
}
 80031e4:	46c0      	nop			; (mov r8, r8)
 80031e6:	46bd      	mov	sp, r7
 80031e8:	b002      	add	sp, #8
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40021800 	.word	0x40021800

080031f0 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80031f8:	4a06      	ldr	r2, [pc, #24]	; (8003214 <LL_EXTI_DisableIT_0_31+0x24>)
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	58d3      	ldr	r3, [r2, r3]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	43d2      	mvns	r2, r2
 8003202:	4904      	ldr	r1, [pc, #16]	; (8003214 <LL_EXTI_DisableIT_0_31+0x24>)
 8003204:	4013      	ands	r3, r2
 8003206:	2280      	movs	r2, #128	; 0x80
 8003208:	508b      	str	r3, [r1, r2]
}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	46bd      	mov	sp, r7
 800320e:	b002      	add	sp, #8
 8003210:	bd80      	pop	{r7, pc}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	40021800 	.word	0x40021800

08003218 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003220:	4a05      	ldr	r2, [pc, #20]	; (8003238 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003222:	2384      	movs	r3, #132	; 0x84
 8003224:	58d2      	ldr	r2, [r2, r3]
 8003226:	4904      	ldr	r1, [pc, #16]	; (8003238 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4313      	orrs	r3, r2
 800322c:	2284      	movs	r2, #132	; 0x84
 800322e:	508b      	str	r3, [r1, r2]

}
 8003230:	46c0      	nop			; (mov r8, r8)
 8003232:	46bd      	mov	sp, r7
 8003234:	b002      	add	sp, #8
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40021800 	.word	0x40021800

0800323c <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003244:	4a06      	ldr	r2, [pc, #24]	; (8003260 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003246:	2384      	movs	r3, #132	; 0x84
 8003248:	58d3      	ldr	r3, [r2, r3]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	43d2      	mvns	r2, r2
 800324e:	4904      	ldr	r1, [pc, #16]	; (8003260 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003250:	4013      	ands	r3, r2
 8003252:	2284      	movs	r2, #132	; 0x84
 8003254:	508b      	str	r3, [r1, r2]
}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	46bd      	mov	sp, r7
 800325a:	b002      	add	sp, #8
 800325c:	bd80      	pop	{r7, pc}
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	40021800 	.word	0x40021800

08003264 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800326c:	4b04      	ldr	r3, [pc, #16]	; (8003280 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800326e:	6819      	ldr	r1, [r3, #0]
 8003270:	4b03      	ldr	r3, [pc, #12]	; (8003280 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	430a      	orrs	r2, r1
 8003276:	601a      	str	r2, [r3, #0]

}
 8003278:	46c0      	nop			; (mov r8, r8)
 800327a:	46bd      	mov	sp, r7
 800327c:	b002      	add	sp, #8
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40021800 	.word	0x40021800

08003284 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800328c:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	43d9      	mvns	r1, r3
 8003294:	4b03      	ldr	r3, [pc, #12]	; (80032a4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8003296:	400a      	ands	r2, r1
 8003298:	601a      	str	r2, [r3, #0]

}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	46bd      	mov	sp, r7
 800329e:	b002      	add	sp, #8
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	40021800 	.word	0x40021800

080032a8 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80032b0:	4b04      	ldr	r3, [pc, #16]	; (80032c4 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80032b2:	6859      	ldr	r1, [r3, #4]
 80032b4:	4b03      	ldr	r3, [pc, #12]	; (80032c4 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	605a      	str	r2, [r3, #4]
}
 80032bc:	46c0      	nop			; (mov r8, r8)
 80032be:	46bd      	mov	sp, r7
 80032c0:	b002      	add	sp, #8
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40021800 	.word	0x40021800

080032c8 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80032d0:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	43d9      	mvns	r1, r3
 80032d8:	4b03      	ldr	r3, [pc, #12]	; (80032e8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80032da:	400a      	ands	r2, r1
 80032dc:	605a      	str	r2, [r3, #4]
}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b002      	add	sp, #8
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	40021800 	.word	0x40021800

080032ec <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 80032f4:	4b03      	ldr	r3, [pc, #12]	; (8003304 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	611a      	str	r2, [r3, #16]
}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	46bd      	mov	sp, r7
 80032fe:	b002      	add	sp, #8
 8003300:	bd80      	pop	{r7, pc}
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	40021800 	.word	0x40021800

08003308 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8003310:	4b03      	ldr	r3, [pc, #12]	; (8003320 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	60da      	str	r2, [r3, #12]
}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	46bd      	mov	sp, r7
 800331a:	b002      	add	sp, #8
 800331c:	bd80      	pop	{r7, pc}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	40021800 	.word	0x40021800

08003324 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800332c:	2300      	movs	r3, #0
 800332e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003330:	211f      	movs	r1, #31
 8003332:	187b      	adds	r3, r7, r1
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif /* COMP3 */

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d103      	bne.n	8003346 <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 800333e:	187b      	adds	r3, r7, r1
 8003340:	2201      	movs	r2, #1
 8003342:	701a      	strb	r2, [r3, #0]
 8003344:	e13d      	b.n	80035c2 <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	0fdb      	lsrs	r3, r3, #31
 800334e:	07da      	lsls	r2, r3, #31
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	061b      	lsls	r3, r3, #24
 8003354:	429a      	cmp	r2, r3
 8003356:	d104      	bne.n	8003362 <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 8003358:	231f      	movs	r3, #31
 800335a:	18fb      	adds	r3, r7, r3
 800335c:	2201      	movs	r2, #1
 800335e:	701a      	strb	r2, [r3, #0]
 8003360:	e12f      	b.n	80035c2 <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2229      	movs	r2, #41	; 0x29
 8003366:	5c9b      	ldrb	r3, [r3, r2]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10a      	bne.n	8003384 <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2228      	movs	r2, #40	; 0x28
 8003372:	2100      	movs	r1, #0
 8003374:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	0018      	movs	r0, r3
 8003380:	f7ff fa5e 	bl	8002840 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2230      	movs	r2, #48	; 0x30
 800338c:	4013      	ands	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 80033b0:	4313      	orrs	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a85      	ldr	r2, [pc, #532]	; (80035d0 <HAL_COMP_Init+0x2ac>)
 80033bc:	4013      	ands	r3, r2
 80033be:	0019      	movs	r1, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	2380      	movs	r3, #128	; 0x80
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d10d      	bne.n	80033f2 <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80033d6:	4b7f      	ldr	r3, [pc, #508]	; (80035d4 <HAL_COMP_Init+0x2b0>)
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	4b7e      	ldr	r3, [pc, #504]	; (80035d4 <HAL_COMP_Init+0x2b0>)
 80033dc:	497e      	ldr	r1, [pc, #504]	; (80035d8 <HAL_COMP_Init+0x2b4>)
 80033de:	400a      	ands	r2, r1
 80033e0:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80033e2:	4b7c      	ldr	r3, [pc, #496]	; (80035d4 <HAL_COMP_Init+0x2b0>)
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	4b7b      	ldr	r3, [pc, #492]	; (80035d4 <HAL_COMP_Init+0x2b0>)
 80033e8:	2180      	movs	r1, #128	; 0x80
 80033ea:	0109      	lsls	r1, r1, #4
 80033ec:	430a      	orrs	r2, r1
 80033ee:	605a      	str	r2, [r3, #4]
 80033f0:	e01f      	b.n	8003432 <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	23c0      	movs	r3, #192	; 0xc0
 80033f8:	015b      	lsls	r3, r3, #5
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d10d      	bne.n	800341a <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80033fe:	4b75      	ldr	r3, [pc, #468]	; (80035d4 <HAL_COMP_Init+0x2b0>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	4b74      	ldr	r3, [pc, #464]	; (80035d4 <HAL_COMP_Init+0x2b0>)
 8003404:	2180      	movs	r1, #128	; 0x80
 8003406:	0109      	lsls	r1, r1, #4
 8003408:	430a      	orrs	r2, r1
 800340a:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800340c:	4b71      	ldr	r3, [pc, #452]	; (80035d4 <HAL_COMP_Init+0x2b0>)
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	4b70      	ldr	r3, [pc, #448]	; (80035d4 <HAL_COMP_Init+0x2b0>)
 8003412:	4971      	ldr	r1, [pc, #452]	; (80035d8 <HAL_COMP_Init+0x2b4>)
 8003414:	400a      	ands	r2, r1
 8003416:	605a      	str	r2, [r3, #4]
 8003418:	e00b      	b.n	8003432 <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800341a:	4b6e      	ldr	r3, [pc, #440]	; (80035d4 <HAL_COMP_Init+0x2b0>)
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	4b6d      	ldr	r3, [pc, #436]	; (80035d4 <HAL_COMP_Init+0x2b0>)
 8003420:	496d      	ldr	r1, [pc, #436]	; (80035d8 <HAL_COMP_Init+0x2b4>)
 8003422:	400a      	ands	r2, r1
 8003424:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8003426:	4b6b      	ldr	r3, [pc, #428]	; (80035d4 <HAL_COMP_Init+0x2b0>)
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	4b6a      	ldr	r3, [pc, #424]	; (80035d4 <HAL_COMP_Init+0x2b0>)
 800342c:	496a      	ldr	r1, [pc, #424]	; (80035d8 <HAL_COMP_Init+0x2b4>)
 800342e:	400a      	ands	r2, r1
 8003430:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	22a0      	movs	r2, #160	; 0xa0
 8003438:	01d2      	lsls	r2, r2, #7
 800343a:	4293      	cmp	r3, r2
 800343c:	d017      	beq.n	800346e <HAL_COMP_Init+0x14a>
 800343e:	22a0      	movs	r2, #160	; 0xa0
 8003440:	01d2      	lsls	r2, r2, #7
 8003442:	4293      	cmp	r3, r2
 8003444:	d830      	bhi.n	80034a8 <HAL_COMP_Init+0x184>
 8003446:	2b01      	cmp	r3, #1
 8003448:	d01f      	beq.n	800348a <HAL_COMP_Init+0x166>
 800344a:	2280      	movs	r2, #128	; 0x80
 800344c:	01d2      	lsls	r2, r2, #7
 800344e:	4293      	cmp	r3, r2
 8003450:	d12a      	bne.n	80034a8 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8003452:	4b60      	ldr	r3, [pc, #384]	; (80035d4 <HAL_COMP_Init+0x2b0>)
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	4b5f      	ldr	r3, [pc, #380]	; (80035d4 <HAL_COMP_Init+0x2b0>)
 8003458:	2180      	movs	r1, #128	; 0x80
 800345a:	01c9      	lsls	r1, r1, #7
 800345c:	430a      	orrs	r2, r1
 800345e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003460:	4b5c      	ldr	r3, [pc, #368]	; (80035d4 <HAL_COMP_Init+0x2b0>)
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	4b5b      	ldr	r3, [pc, #364]	; (80035d4 <HAL_COMP_Init+0x2b0>)
 8003466:	495d      	ldr	r1, [pc, #372]	; (80035dc <HAL_COMP_Init+0x2b8>)
 8003468:	400a      	ands	r2, r1
 800346a:	605a      	str	r2, [r3, #4]
        break;
 800346c:	e029      	b.n	80034c2 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800346e:	4b59      	ldr	r3, [pc, #356]	; (80035d4 <HAL_COMP_Init+0x2b0>)
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	4b58      	ldr	r3, [pc, #352]	; (80035d4 <HAL_COMP_Init+0x2b0>)
 8003474:	4959      	ldr	r1, [pc, #356]	; (80035dc <HAL_COMP_Init+0x2b8>)
 8003476:	400a      	ands	r2, r1
 8003478:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800347a:	4b56      	ldr	r3, [pc, #344]	; (80035d4 <HAL_COMP_Init+0x2b0>)
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	4b55      	ldr	r3, [pc, #340]	; (80035d4 <HAL_COMP_Init+0x2b0>)
 8003480:	2180      	movs	r1, #128	; 0x80
 8003482:	01c9      	lsls	r1, r1, #7
 8003484:	430a      	orrs	r2, r1
 8003486:	605a      	str	r2, [r3, #4]
        break;
 8003488:	e01b      	b.n	80034c2 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800348a:	4b52      	ldr	r3, [pc, #328]	; (80035d4 <HAL_COMP_Init+0x2b0>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	4b51      	ldr	r3, [pc, #324]	; (80035d4 <HAL_COMP_Init+0x2b0>)
 8003490:	2180      	movs	r1, #128	; 0x80
 8003492:	01c9      	lsls	r1, r1, #7
 8003494:	430a      	orrs	r2, r1
 8003496:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003498:	4b4e      	ldr	r3, [pc, #312]	; (80035d4 <HAL_COMP_Init+0x2b0>)
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	4b4d      	ldr	r3, [pc, #308]	; (80035d4 <HAL_COMP_Init+0x2b0>)
 800349e:	2180      	movs	r1, #128	; 0x80
 80034a0:	01c9      	lsls	r1, r1, #7
 80034a2:	430a      	orrs	r2, r1
 80034a4:	605a      	str	r2, [r3, #4]
        break;
 80034a6:	e00c      	b.n	80034c2 <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80034a8:	4b4a      	ldr	r3, [pc, #296]	; (80035d4 <HAL_COMP_Init+0x2b0>)
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	4b49      	ldr	r3, [pc, #292]	; (80035d4 <HAL_COMP_Init+0x2b0>)
 80034ae:	494b      	ldr	r1, [pc, #300]	; (80035dc <HAL_COMP_Init+0x2b8>)
 80034b0:	400a      	ands	r2, r1
 80034b2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80034b4:	4b47      	ldr	r3, [pc, #284]	; (80035d4 <HAL_COMP_Init+0x2b0>)
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	4b46      	ldr	r3, [pc, #280]	; (80035d4 <HAL_COMP_Init+0x2b0>)
 80034ba:	4948      	ldr	r1, [pc, #288]	; (80035dc <HAL_COMP_Init+0x2b8>)
 80034bc:	400a      	ands	r2, r1
 80034be:	605a      	str	r2, [r3, #4]
        break;
 80034c0:	46c0      	nop			; (mov r8, r8)
    }
#endif /* COMP3 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2230      	movs	r2, #48	; 0x30
 80034ca:	4013      	ands	r3, r2
 80034cc:	d016      	beq.n	80034fc <HAL_COMP_Init+0x1d8>
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d113      	bne.n	80034fc <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034d4:	4b42      	ldr	r3, [pc, #264]	; (80035e0 <HAL_COMP_Init+0x2bc>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4942      	ldr	r1, [pc, #264]	; (80035e4 <HAL_COMP_Init+0x2c0>)
 80034da:	0018      	movs	r0, r3
 80034dc:	f7fc fe12 	bl	8000104 <__udivsi3>
 80034e0:	0003      	movs	r3, r0
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	0013      	movs	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	189b      	adds	r3, r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80034ee:	e002      	b.n	80034f6 <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1f9      	bne.n	80034f0 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a34      	ldr	r2, [pc, #208]	; (80035d4 <HAL_COMP_Init+0x2b0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d102      	bne.n	800350c <HAL_COMP_Init+0x1e8>
 8003506:	2380      	movs	r3, #128	; 0x80
 8003508:	029b      	lsls	r3, r3, #10
 800350a:	e001      	b.n	8003510 <HAL_COMP_Init+0x1ec>
 800350c:	2380      	movs	r3, #128	; 0x80
 800350e:	02db      	lsls	r3, r3, #11
 8003510:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	2203      	movs	r2, #3
 8003518:	4013      	ands	r3, r2
 800351a:	d040      	beq.n	800359e <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	2210      	movs	r2, #16
 8003522:	4013      	ands	r3, r2
 8003524:	d004      	beq.n	8003530 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	0018      	movs	r0, r3
 800352a:	f7ff fe9b 	bl	8003264 <LL_EXTI_EnableRisingTrig_0_31>
 800352e:	e003      	b.n	8003538 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	0018      	movs	r0, r3
 8003534:	f7ff fea6 	bl	8003284 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	2220      	movs	r2, #32
 800353e:	4013      	ands	r3, r2
 8003540:	d004      	beq.n	800354c <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	0018      	movs	r0, r3
 8003546:	f7ff feaf 	bl	80032a8 <LL_EXTI_EnableFallingTrig_0_31>
 800354a:	e003      	b.n	8003554 <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	0018      	movs	r0, r3
 8003550:	f7ff feba 	bl	80032c8 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	0018      	movs	r0, r3
 8003558:	f7ff fed6 	bl	8003308 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	0018      	movs	r0, r3
 8003560:	f7ff fec4 	bl	80032ec <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	2202      	movs	r2, #2
 800356a:	4013      	ands	r3, r2
 800356c:	d004      	beq.n	8003578 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	0018      	movs	r0, r3
 8003572:	f7ff fe51 	bl	8003218 <LL_EXTI_EnableEvent_0_31>
 8003576:	e003      	b.n	8003580 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	0018      	movs	r0, r3
 800357c:	f7ff fe5e 	bl	800323c <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	2201      	movs	r2, #1
 8003586:	4013      	ands	r3, r2
 8003588:	d004      	beq.n	8003594 <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	0018      	movs	r0, r3
 800358e:	f7ff fe1d 	bl	80031cc <LL_EXTI_EnableIT_0_31>
 8003592:	e00c      	b.n	80035ae <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	0018      	movs	r0, r3
 8003598:	f7ff fe2a 	bl	80031f0 <LL_EXTI_DisableIT_0_31>
 800359c:	e007      	b.n	80035ae <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	0018      	movs	r0, r3
 80035a2:	f7ff fe4b 	bl	800323c <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	0018      	movs	r0, r3
 80035aa:	f7ff fe21 	bl	80031f0 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2229      	movs	r2, #41	; 0x29
 80035b2:	5c9b      	ldrb	r3, [r3, r2]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d103      	bne.n	80035c2 <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2229      	movs	r2, #41	; 0x29
 80035be:	2101      	movs	r1, #1
 80035c0:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80035c2:	231f      	movs	r3, #31
 80035c4:	18fb      	adds	r3, r7, r3
 80035c6:	781b      	ldrb	r3, [r3, #0]
}
 80035c8:	0018      	movs	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b008      	add	sp, #32
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	fe00740f 	.word	0xfe00740f
 80035d4:	40010200 	.word	0x40010200
 80035d8:	fffff7ff 	.word	0xfffff7ff
 80035dc:	ffffbfff 	.word	0xffffbfff
 80035e0:	20000064 	.word	0x20000064
 80035e4:	00030d40 	.word	0x00030d40

080035e8 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80035f4:	210f      	movs	r1, #15
 80035f6:	187b      	adds	r3, r7, r1
 80035f8:	2200      	movs	r2, #0
 80035fa:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d103      	bne.n	800360a <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 8003602:	187b      	adds	r3, r7, r1
 8003604:	2201      	movs	r2, #1
 8003606:	701a      	strb	r2, [r3, #0]
 8003608:	e035      	b.n	8003676 <HAL_COMP_Start+0x8e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	0fdb      	lsrs	r3, r3, #31
 8003612:	07da      	lsls	r2, r3, #31
 8003614:	2380      	movs	r3, #128	; 0x80
 8003616:	061b      	lsls	r3, r3, #24
 8003618:	429a      	cmp	r2, r3
 800361a:	d104      	bne.n	8003626 <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 800361c:	230f      	movs	r3, #15
 800361e:	18fb      	adds	r3, r7, r3
 8003620:	2201      	movs	r2, #1
 8003622:	701a      	strb	r2, [r3, #0]
 8003624:	e027      	b.n	8003676 <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2229      	movs	r2, #41	; 0x29
 800362a:	5c9b      	ldrb	r3, [r3, r2]
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b01      	cmp	r3, #1
 8003630:	d11d      	bne.n	800366e <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2101      	movs	r1, #1
 800363e:	430a      	orrs	r2, r1
 8003640:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2229      	movs	r2, #41	; 0x29
 8003646:	2102      	movs	r1, #2
 8003648:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800364a:	4b0e      	ldr	r3, [pc, #56]	; (8003684 <HAL_COMP_Start+0x9c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	490e      	ldr	r1, [pc, #56]	; (8003688 <HAL_COMP_Start+0xa0>)
 8003650:	0018      	movs	r0, r3
 8003652:	f7fc fd57 	bl	8000104 <__udivsi3>
 8003656:	0003      	movs	r3, r0
 8003658:	3301      	adds	r3, #1
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800365e:	e002      	b.n	8003666 <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	3b01      	subs	r3, #1
 8003664:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1f9      	bne.n	8003660 <HAL_COMP_Start+0x78>
 800366c:	e003      	b.n	8003676 <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800366e:	230f      	movs	r3, #15
 8003670:	18fb      	adds	r3, r7, r3
 8003672:	2201      	movs	r2, #1
 8003674:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003676:	230f      	movs	r3, #15
 8003678:	18fb      	adds	r3, r7, r3
 800367a:	781b      	ldrb	r3, [r3, #0]
}
 800367c:	0018      	movs	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	b004      	add	sp, #16
 8003682:	bd80      	pop	{r7, pc}
 8003684:	20000064 	.word	0x20000064
 8003688:	00030d40 	.word	0x00030d40

0800368c <__NVIC_EnableIRQ>:
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	0002      	movs	r2, r0
 8003694:	1dfb      	adds	r3, r7, #7
 8003696:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003698:	1dfb      	adds	r3, r7, #7
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b7f      	cmp	r3, #127	; 0x7f
 800369e:	d809      	bhi.n	80036b4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036a0:	1dfb      	adds	r3, r7, #7
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	001a      	movs	r2, r3
 80036a6:	231f      	movs	r3, #31
 80036a8:	401a      	ands	r2, r3
 80036aa:	4b04      	ldr	r3, [pc, #16]	; (80036bc <__NVIC_EnableIRQ+0x30>)
 80036ac:	2101      	movs	r1, #1
 80036ae:	4091      	lsls	r1, r2
 80036b0:	000a      	movs	r2, r1
 80036b2:	601a      	str	r2, [r3, #0]
}
 80036b4:	46c0      	nop			; (mov r8, r8)
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b002      	add	sp, #8
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	e000e100 	.word	0xe000e100

080036c0 <__NVIC_SetPriority>:
{
 80036c0:	b590      	push	{r4, r7, lr}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	0002      	movs	r2, r0
 80036c8:	6039      	str	r1, [r7, #0]
 80036ca:	1dfb      	adds	r3, r7, #7
 80036cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80036ce:	1dfb      	adds	r3, r7, #7
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b7f      	cmp	r3, #127	; 0x7f
 80036d4:	d828      	bhi.n	8003728 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036d6:	4a2f      	ldr	r2, [pc, #188]	; (8003794 <__NVIC_SetPriority+0xd4>)
 80036d8:	1dfb      	adds	r3, r7, #7
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	b25b      	sxtb	r3, r3
 80036de:	089b      	lsrs	r3, r3, #2
 80036e0:	33c0      	adds	r3, #192	; 0xc0
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	589b      	ldr	r3, [r3, r2]
 80036e6:	1dfa      	adds	r2, r7, #7
 80036e8:	7812      	ldrb	r2, [r2, #0]
 80036ea:	0011      	movs	r1, r2
 80036ec:	2203      	movs	r2, #3
 80036ee:	400a      	ands	r2, r1
 80036f0:	00d2      	lsls	r2, r2, #3
 80036f2:	21ff      	movs	r1, #255	; 0xff
 80036f4:	4091      	lsls	r1, r2
 80036f6:	000a      	movs	r2, r1
 80036f8:	43d2      	mvns	r2, r2
 80036fa:	401a      	ands	r2, r3
 80036fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	019b      	lsls	r3, r3, #6
 8003702:	22ff      	movs	r2, #255	; 0xff
 8003704:	401a      	ands	r2, r3
 8003706:	1dfb      	adds	r3, r7, #7
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	0018      	movs	r0, r3
 800370c:	2303      	movs	r3, #3
 800370e:	4003      	ands	r3, r0
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003714:	481f      	ldr	r0, [pc, #124]	; (8003794 <__NVIC_SetPriority+0xd4>)
 8003716:	1dfb      	adds	r3, r7, #7
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	b25b      	sxtb	r3, r3
 800371c:	089b      	lsrs	r3, r3, #2
 800371e:	430a      	orrs	r2, r1
 8003720:	33c0      	adds	r3, #192	; 0xc0
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	501a      	str	r2, [r3, r0]
}
 8003726:	e031      	b.n	800378c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003728:	4a1b      	ldr	r2, [pc, #108]	; (8003798 <__NVIC_SetPriority+0xd8>)
 800372a:	1dfb      	adds	r3, r7, #7
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	0019      	movs	r1, r3
 8003730:	230f      	movs	r3, #15
 8003732:	400b      	ands	r3, r1
 8003734:	3b08      	subs	r3, #8
 8003736:	089b      	lsrs	r3, r3, #2
 8003738:	3306      	adds	r3, #6
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	18d3      	adds	r3, r2, r3
 800373e:	3304      	adds	r3, #4
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	1dfa      	adds	r2, r7, #7
 8003744:	7812      	ldrb	r2, [r2, #0]
 8003746:	0011      	movs	r1, r2
 8003748:	2203      	movs	r2, #3
 800374a:	400a      	ands	r2, r1
 800374c:	00d2      	lsls	r2, r2, #3
 800374e:	21ff      	movs	r1, #255	; 0xff
 8003750:	4091      	lsls	r1, r2
 8003752:	000a      	movs	r2, r1
 8003754:	43d2      	mvns	r2, r2
 8003756:	401a      	ands	r2, r3
 8003758:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	019b      	lsls	r3, r3, #6
 800375e:	22ff      	movs	r2, #255	; 0xff
 8003760:	401a      	ands	r2, r3
 8003762:	1dfb      	adds	r3, r7, #7
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	0018      	movs	r0, r3
 8003768:	2303      	movs	r3, #3
 800376a:	4003      	ands	r3, r0
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003770:	4809      	ldr	r0, [pc, #36]	; (8003798 <__NVIC_SetPriority+0xd8>)
 8003772:	1dfb      	adds	r3, r7, #7
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	001c      	movs	r4, r3
 8003778:	230f      	movs	r3, #15
 800377a:	4023      	ands	r3, r4
 800377c:	3b08      	subs	r3, #8
 800377e:	089b      	lsrs	r3, r3, #2
 8003780:	430a      	orrs	r2, r1
 8003782:	3306      	adds	r3, #6
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	18c3      	adds	r3, r0, r3
 8003788:	3304      	adds	r3, #4
 800378a:	601a      	str	r2, [r3, #0]
}
 800378c:	46c0      	nop			; (mov r8, r8)
 800378e:	46bd      	mov	sp, r7
 8003790:	b003      	add	sp, #12
 8003792:	bd90      	pop	{r4, r7, pc}
 8003794:	e000e100 	.word	0xe000e100
 8003798:	e000ed00 	.word	0xe000ed00

0800379c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	1e5a      	subs	r2, r3, #1
 80037a8:	2380      	movs	r3, #128	; 0x80
 80037aa:	045b      	lsls	r3, r3, #17
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d301      	bcc.n	80037b4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037b0:	2301      	movs	r3, #1
 80037b2:	e010      	b.n	80037d6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037b4:	4b0a      	ldr	r3, [pc, #40]	; (80037e0 <SysTick_Config+0x44>)
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	3a01      	subs	r2, #1
 80037ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037bc:	2301      	movs	r3, #1
 80037be:	425b      	negs	r3, r3
 80037c0:	2103      	movs	r1, #3
 80037c2:	0018      	movs	r0, r3
 80037c4:	f7ff ff7c 	bl	80036c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <SysTick_Config+0x44>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ce:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <SysTick_Config+0x44>)
 80037d0:	2207      	movs	r2, #7
 80037d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	0018      	movs	r0, r3
 80037d8:	46bd      	mov	sp, r7
 80037da:	b002      	add	sp, #8
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	46c0      	nop			; (mov r8, r8)
 80037e0:	e000e010 	.word	0xe000e010

080037e4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
 80037ee:	210f      	movs	r1, #15
 80037f0:	187b      	adds	r3, r7, r1
 80037f2:	1c02      	adds	r2, r0, #0
 80037f4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	187b      	adds	r3, r7, r1
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	b25b      	sxtb	r3, r3
 80037fe:	0011      	movs	r1, r2
 8003800:	0018      	movs	r0, r3
 8003802:	f7ff ff5d 	bl	80036c0 <__NVIC_SetPriority>
}
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	46bd      	mov	sp, r7
 800380a:	b004      	add	sp, #16
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b082      	sub	sp, #8
 8003812:	af00      	add	r7, sp, #0
 8003814:	0002      	movs	r2, r0
 8003816:	1dfb      	adds	r3, r7, #7
 8003818:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800381a:	1dfb      	adds	r3, r7, #7
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	b25b      	sxtb	r3, r3
 8003820:	0018      	movs	r0, r3
 8003822:	f7ff ff33 	bl	800368c <__NVIC_EnableIRQ>
}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	46bd      	mov	sp, r7
 800382a:	b002      	add	sp, #8
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	0018      	movs	r0, r3
 800383a:	f7ff ffaf 	bl	800379c <SysTick_Config>
 800383e:	0003      	movs	r3, r0
}
 8003840:	0018      	movs	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	b002      	add	sp, #8
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e077      	b.n	800394a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a3d      	ldr	r2, [pc, #244]	; (8003954 <HAL_DMA_Init+0x10c>)
 8003860:	4694      	mov	ip, r2
 8003862:	4463      	add	r3, ip
 8003864:	2114      	movs	r1, #20
 8003866:	0018      	movs	r0, r3
 8003868:	f7fc fc4c 	bl	8000104 <__udivsi3>
 800386c:	0003      	movs	r3, r0
 800386e:	009a      	lsls	r2, r3, #2
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2225      	movs	r2, #37	; 0x25
 8003878:	2102      	movs	r1, #2
 800387a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4934      	ldr	r1, [pc, #208]	; (8003958 <HAL_DMA_Init+0x110>)
 8003888:	400a      	ands	r2, r1
 800388a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6819      	ldr	r1, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	431a      	orrs	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	431a      	orrs	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	431a      	orrs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	0018      	movs	r0, r3
 80038c6:	f000 fa37 	bl	8003d38 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689a      	ldr	r2, [r3, #8]
 80038ce:	2380      	movs	r3, #128	; 0x80
 80038d0:	01db      	lsls	r3, r3, #7
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d102      	bne.n	80038dc <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e4:	213f      	movs	r1, #63	; 0x3f
 80038e6:	400a      	ands	r2, r1
 80038e8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80038f2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d011      	beq.n	8003920 <HAL_DMA_Init+0xd8>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b04      	cmp	r3, #4
 8003902:	d80d      	bhi.n	8003920 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	0018      	movs	r0, r3
 8003908:	f000 fa42 	bl	8003d90 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	e008      	b.n	8003932 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2225      	movs	r2, #37	; 0x25
 800393c:	2101      	movs	r1, #1
 800393e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2224      	movs	r2, #36	; 0x24
 8003944:	2100      	movs	r1, #0
 8003946:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	0018      	movs	r0, r3
 800394c:	46bd      	mov	sp, r7
 800394e:	b002      	add	sp, #8
 8003950:	bd80      	pop	{r7, pc}
 8003952:	46c0      	nop			; (mov r8, r8)
 8003954:	bffdfff8 	.word	0xbffdfff8
 8003958:	ffff800f 	.word	0xffff800f

0800395c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800396a:	2317      	movs	r3, #23
 800396c:	18fb      	adds	r3, r7, r3
 800396e:	2200      	movs	r2, #0
 8003970:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2224      	movs	r2, #36	; 0x24
 8003976:	5c9b      	ldrb	r3, [r3, r2]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_DMA_Start_IT+0x24>
 800397c:	2302      	movs	r3, #2
 800397e:	e06f      	b.n	8003a60 <HAL_DMA_Start_IT+0x104>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2224      	movs	r2, #36	; 0x24
 8003984:	2101      	movs	r1, #1
 8003986:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2225      	movs	r2, #37	; 0x25
 800398c:	5c9b      	ldrb	r3, [r3, r2]
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b01      	cmp	r3, #1
 8003992:	d157      	bne.n	8003a44 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2225      	movs	r2, #37	; 0x25
 8003998:	2102      	movs	r1, #2
 800399a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2101      	movs	r1, #1
 80039ae:	438a      	bics	r2, r1
 80039b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	68b9      	ldr	r1, [r7, #8]
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f000 f97d 	bl	8003cb8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d008      	beq.n	80039d8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	210e      	movs	r1, #14
 80039d2:	430a      	orrs	r2, r1
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	e00f      	b.n	80039f8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2104      	movs	r1, #4
 80039e4:	438a      	bics	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	210a      	movs	r1, #10
 80039f4:	430a      	orrs	r2, r1
 80039f6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	2380      	movs	r3, #128	; 0x80
 8003a00:	025b      	lsls	r3, r3, #9
 8003a02:	4013      	ands	r3, r2
 8003a04:	d008      	beq.n	8003a18 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a10:	2180      	movs	r1, #128	; 0x80
 8003a12:	0049      	lsls	r1, r1, #1
 8003a14:	430a      	orrs	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d008      	beq.n	8003a32 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2a:	2180      	movs	r1, #128	; 0x80
 8003a2c:	0049      	lsls	r1, r1, #1
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	e00a      	b.n	8003a5a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2280      	movs	r2, #128	; 0x80
 8003a48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2224      	movs	r2, #36	; 0x24
 8003a4e:	2100      	movs	r1, #0
 8003a50:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003a52:	2317      	movs	r3, #23
 8003a54:	18fb      	adds	r3, r7, r3
 8003a56:	2201      	movs	r2, #1
 8003a58:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003a5a:	2317      	movs	r3, #23
 8003a5c:	18fb      	adds	r3, r7, r3
 8003a5e:	781b      	ldrb	r3, [r3, #0]
}
 8003a60:	0018      	movs	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	b006      	add	sp, #24
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a70:	210f      	movs	r1, #15
 8003a72:	187b      	adds	r3, r7, r1
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2225      	movs	r2, #37	; 0x25
 8003a7c:	5c9b      	ldrb	r3, [r3, r2]
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d006      	beq.n	8003a92 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2204      	movs	r2, #4
 8003a88:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003a8a:	187b      	adds	r3, r7, r1
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	701a      	strb	r2, [r3, #0]
 8003a90:	e049      	b.n	8003b26 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	210e      	movs	r1, #14
 8003a9e:	438a      	bics	r2, r1
 8003aa0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2101      	movs	r1, #1
 8003aae:	438a      	bics	r2, r1
 8003ab0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abc:	491d      	ldr	r1, [pc, #116]	; (8003b34 <HAL_DMA_Abort_IT+0xcc>)
 8003abe:	400a      	ands	r2, r1
 8003ac0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003ac2:	4b1d      	ldr	r3, [pc, #116]	; (8003b38 <HAL_DMA_Abort_IT+0xd0>)
 8003ac4:	6859      	ldr	r1, [r3, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	221c      	movs	r2, #28
 8003acc:	4013      	ands	r3, r2
 8003ace:	2201      	movs	r2, #1
 8003ad0:	409a      	lsls	r2, r3
 8003ad2:	4b19      	ldr	r3, [pc, #100]	; (8003b38 <HAL_DMA_Abort_IT+0xd0>)
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003ae0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00c      	beq.n	8003b04 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af4:	490f      	ldr	r1, [pc, #60]	; (8003b34 <HAL_DMA_Abort_IT+0xcc>)
 8003af6:	400a      	ands	r2, r1
 8003af8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003b02:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2225      	movs	r2, #37	; 0x25
 8003b08:	2101      	movs	r1, #1
 8003b0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2224      	movs	r2, #36	; 0x24
 8003b10:	2100      	movs	r1, #0
 8003b12:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d004      	beq.n	8003b26 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	0010      	movs	r0, r2
 8003b24:	4798      	blx	r3
    }
  }
  return status;
 8003b26:	230f      	movs	r3, #15
 8003b28:	18fb      	adds	r3, r7, r3
 8003b2a:	781b      	ldrb	r3, [r3, #0]
}
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b004      	add	sp, #16
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	fffffeff 	.word	0xfffffeff
 8003b38:	40020000 	.word	0x40020000

08003b3c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003b44:	4b55      	ldr	r3, [pc, #340]	; (8003c9c <HAL_DMA_IRQHandler+0x160>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	221c      	movs	r2, #28
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2204      	movs	r2, #4
 8003b5c:	409a      	lsls	r2, r3
 8003b5e:	0013      	movs	r3, r2
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4013      	ands	r3, r2
 8003b64:	d027      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0x7a>
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2204      	movs	r2, #4
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d023      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2220      	movs	r2, #32
 8003b76:	4013      	ands	r3, r2
 8003b78:	d107      	bne.n	8003b8a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2104      	movs	r1, #4
 8003b86:	438a      	bics	r2, r1
 8003b88:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003b8a:	4b44      	ldr	r3, [pc, #272]	; (8003c9c <HAL_DMA_IRQHandler+0x160>)
 8003b8c:	6859      	ldr	r1, [r3, #4]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	221c      	movs	r2, #28
 8003b94:	4013      	ands	r3, r2
 8003b96:	2204      	movs	r2, #4
 8003b98:	409a      	lsls	r2, r3
 8003b9a:	4b40      	ldr	r3, [pc, #256]	; (8003c9c <HAL_DMA_IRQHandler+0x160>)
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d100      	bne.n	8003baa <HAL_DMA_IRQHandler+0x6e>
 8003ba8:	e073      	b.n	8003c92 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	0010      	movs	r0, r2
 8003bb2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003bb4:	e06d      	b.n	8003c92 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	221c      	movs	r2, #28
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	409a      	lsls	r2, r3
 8003bc2:	0013      	movs	r3, r2
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	d02e      	beq.n	8003c28 <HAL_DMA_IRQHandler+0xec>
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	2202      	movs	r2, #2
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d02a      	beq.n	8003c28 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d10b      	bne.n	8003bf6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	210a      	movs	r1, #10
 8003bea:	438a      	bics	r2, r1
 8003bec:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2225      	movs	r2, #37	; 0x25
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003bf6:	4b29      	ldr	r3, [pc, #164]	; (8003c9c <HAL_DMA_IRQHandler+0x160>)
 8003bf8:	6859      	ldr	r1, [r3, #4]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	221c      	movs	r2, #28
 8003c00:	4013      	ands	r3, r2
 8003c02:	2202      	movs	r2, #2
 8003c04:	409a      	lsls	r2, r3
 8003c06:	4b25      	ldr	r3, [pc, #148]	; (8003c9c <HAL_DMA_IRQHandler+0x160>)
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2224      	movs	r2, #36	; 0x24
 8003c10:	2100      	movs	r1, #0
 8003c12:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d03a      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	0010      	movs	r0, r2
 8003c24:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003c26:	e034      	b.n	8003c92 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	221c      	movs	r2, #28
 8003c2e:	4013      	ands	r3, r2
 8003c30:	2208      	movs	r2, #8
 8003c32:	409a      	lsls	r2, r3
 8003c34:	0013      	movs	r3, r2
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d02b      	beq.n	8003c94 <HAL_DMA_IRQHandler+0x158>
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2208      	movs	r2, #8
 8003c40:	4013      	ands	r3, r2
 8003c42:	d027      	beq.n	8003c94 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	210e      	movs	r1, #14
 8003c50:	438a      	bics	r2, r1
 8003c52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003c54:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <HAL_DMA_IRQHandler+0x160>)
 8003c56:	6859      	ldr	r1, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	221c      	movs	r2, #28
 8003c5e:	4013      	ands	r3, r2
 8003c60:	2201      	movs	r2, #1
 8003c62:	409a      	lsls	r2, r3
 8003c64:	4b0d      	ldr	r3, [pc, #52]	; (8003c9c <HAL_DMA_IRQHandler+0x160>)
 8003c66:	430a      	orrs	r2, r1
 8003c68:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2225      	movs	r2, #37	; 0x25
 8003c74:	2101      	movs	r1, #1
 8003c76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2224      	movs	r2, #36	; 0x24
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	0010      	movs	r0, r2
 8003c90:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	46c0      	nop			; (mov r8, r8)
}
 8003c96:	46bd      	mov	sp, r7
 8003c98:	b004      	add	sp, #16
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40020000 	.word	0x40020000

08003ca0 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2225      	movs	r2, #37	; 0x25
 8003cac:	5c9b      	ldrb	r3, [r3, r2]
 8003cae:	b2db      	uxtb	r3, r3
}
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b002      	add	sp, #8
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003cce:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d004      	beq.n	8003ce2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003ce0:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003ce2:	4b14      	ldr	r3, [pc, #80]	; (8003d34 <DMA_SetConfig+0x7c>)
 8003ce4:	6859      	ldr	r1, [r3, #4]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	221c      	movs	r2, #28
 8003cec:	4013      	ands	r3, r2
 8003cee:	2201      	movs	r2, #1
 8003cf0:	409a      	lsls	r2, r3
 8003cf2:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <DMA_SetConfig+0x7c>)
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	2b10      	cmp	r3, #16
 8003d06:	d108      	bne.n	8003d1a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d18:	e007      	b.n	8003d2a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	60da      	str	r2, [r3, #12]
}
 8003d2a:	46c0      	nop			; (mov r8, r8)
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	b004      	add	sp, #16
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	40020000 	.word	0x40020000

08003d38 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	089b      	lsrs	r3, r3, #2
 8003d46:	4a10      	ldr	r2, [pc, #64]	; (8003d88 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003d48:	4694      	mov	ip, r2
 8003d4a:	4463      	add	r3, ip
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	001a      	movs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	001a      	movs	r2, r3
 8003d5a:	23ff      	movs	r3, #255	; 0xff
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	3b08      	subs	r3, #8
 8003d60:	2114      	movs	r1, #20
 8003d62:	0018      	movs	r0, r3
 8003d64:	f7fc f9ce 	bl	8000104 <__udivsi3>
 8003d68:	0003      	movs	r3, r0
 8003d6a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a07      	ldr	r2, [pc, #28]	; (8003d8c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003d70:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	221f      	movs	r2, #31
 8003d76:	4013      	ands	r3, r2
 8003d78:	2201      	movs	r2, #1
 8003d7a:	409a      	lsls	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003d80:	46c0      	nop			; (mov r8, r8)
 8003d82:	46bd      	mov	sp, r7
 8003d84:	b004      	add	sp, #16
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	10008200 	.word	0x10008200
 8003d8c:	40020880 	.word	0x40020880

08003d90 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	223f      	movs	r2, #63	; 0x3f
 8003d9e:	4013      	ands	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003da6:	4694      	mov	ip, r2
 8003da8:	4463      	add	r3, ip
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	001a      	movs	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a07      	ldr	r2, [pc, #28]	; (8003dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003db6:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	2203      	movs	r2, #3
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	409a      	lsls	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003dc8:	46c0      	nop			; (mov r8, r8)
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	b004      	add	sp, #16
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	1000823f 	.word	0x1000823f
 8003dd4:	40020940 	.word	0x40020940

08003dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003de2:	2300      	movs	r3, #0
 8003de4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003de6:	e147      	b.n	8004078 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2101      	movs	r1, #1
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	4091      	lsls	r1, r2
 8003df2:	000a      	movs	r2, r1
 8003df4:	4013      	ands	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d100      	bne.n	8003e00 <HAL_GPIO_Init+0x28>
 8003dfe:	e138      	b.n	8004072 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2203      	movs	r2, #3
 8003e06:	4013      	ands	r3, r2
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d005      	beq.n	8003e18 <HAL_GPIO_Init+0x40>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2203      	movs	r2, #3
 8003e12:	4013      	ands	r3, r2
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d130      	bne.n	8003e7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	2203      	movs	r2, #3
 8003e24:	409a      	lsls	r2, r3
 8003e26:	0013      	movs	r3, r2
 8003e28:	43da      	mvns	r2, r3
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	409a      	lsls	r2, r3
 8003e3a:	0013      	movs	r3, r2
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e4e:	2201      	movs	r2, #1
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	409a      	lsls	r2, r3
 8003e54:	0013      	movs	r3, r2
 8003e56:	43da      	mvns	r2, r3
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	091b      	lsrs	r3, r3, #4
 8003e64:	2201      	movs	r2, #1
 8003e66:	401a      	ands	r2, r3
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	409a      	lsls	r2, r3
 8003e6c:	0013      	movs	r3, r2
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2203      	movs	r2, #3
 8003e80:	4013      	ands	r3, r2
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d017      	beq.n	8003eb6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	2203      	movs	r2, #3
 8003e92:	409a      	lsls	r2, r3
 8003e94:	0013      	movs	r3, r2
 8003e96:	43da      	mvns	r2, r3
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	409a      	lsls	r2, r3
 8003ea8:	0013      	movs	r3, r2
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2203      	movs	r2, #3
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d123      	bne.n	8003f0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	08da      	lsrs	r2, r3, #3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	3208      	adds	r2, #8
 8003eca:	0092      	lsls	r2, r2, #2
 8003ecc:	58d3      	ldr	r3, [r2, r3]
 8003ece:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	2207      	movs	r2, #7
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	220f      	movs	r2, #15
 8003eda:	409a      	lsls	r2, r3
 8003edc:	0013      	movs	r3, r2
 8003ede:	43da      	mvns	r2, r3
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2107      	movs	r1, #7
 8003eee:	400b      	ands	r3, r1
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	409a      	lsls	r2, r3
 8003ef4:	0013      	movs	r3, r2
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	08da      	lsrs	r2, r3, #3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3208      	adds	r2, #8
 8003f04:	0092      	lsls	r2, r2, #2
 8003f06:	6939      	ldr	r1, [r7, #16]
 8003f08:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	2203      	movs	r2, #3
 8003f16:	409a      	lsls	r2, r3
 8003f18:	0013      	movs	r3, r2
 8003f1a:	43da      	mvns	r2, r3
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2203      	movs	r2, #3
 8003f28:	401a      	ands	r2, r3
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	409a      	lsls	r2, r3
 8003f30:	0013      	movs	r3, r2
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	23c0      	movs	r3, #192	; 0xc0
 8003f44:	029b      	lsls	r3, r3, #10
 8003f46:	4013      	ands	r3, r2
 8003f48:	d100      	bne.n	8003f4c <HAL_GPIO_Init+0x174>
 8003f4a:	e092      	b.n	8004072 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003f4c:	4a50      	ldr	r2, [pc, #320]	; (8004090 <HAL_GPIO_Init+0x2b8>)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	089b      	lsrs	r3, r3, #2
 8003f52:	3318      	adds	r3, #24
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	589b      	ldr	r3, [r3, r2]
 8003f58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2203      	movs	r2, #3
 8003f5e:	4013      	ands	r3, r2
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	220f      	movs	r2, #15
 8003f64:	409a      	lsls	r2, r3
 8003f66:	0013      	movs	r3, r2
 8003f68:	43da      	mvns	r2, r3
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	23a0      	movs	r3, #160	; 0xa0
 8003f74:	05db      	lsls	r3, r3, #23
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d013      	beq.n	8003fa2 <HAL_GPIO_Init+0x1ca>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a45      	ldr	r2, [pc, #276]	; (8004094 <HAL_GPIO_Init+0x2bc>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d00d      	beq.n	8003f9e <HAL_GPIO_Init+0x1c6>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a44      	ldr	r2, [pc, #272]	; (8004098 <HAL_GPIO_Init+0x2c0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d007      	beq.n	8003f9a <HAL_GPIO_Init+0x1c2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a43      	ldr	r2, [pc, #268]	; (800409c <HAL_GPIO_Init+0x2c4>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d101      	bne.n	8003f96 <HAL_GPIO_Init+0x1be>
 8003f92:	2303      	movs	r3, #3
 8003f94:	e006      	b.n	8003fa4 <HAL_GPIO_Init+0x1cc>
 8003f96:	2305      	movs	r3, #5
 8003f98:	e004      	b.n	8003fa4 <HAL_GPIO_Init+0x1cc>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e002      	b.n	8003fa4 <HAL_GPIO_Init+0x1cc>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <HAL_GPIO_Init+0x1cc>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	2103      	movs	r1, #3
 8003fa8:	400a      	ands	r2, r1
 8003faa:	00d2      	lsls	r2, r2, #3
 8003fac:	4093      	lsls	r3, r2
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003fb4:	4936      	ldr	r1, [pc, #216]	; (8004090 <HAL_GPIO_Init+0x2b8>)
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	089b      	lsrs	r3, r3, #2
 8003fba:	3318      	adds	r3, #24
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fc2:	4b33      	ldr	r3, [pc, #204]	; (8004090 <HAL_GPIO_Init+0x2b8>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	43da      	mvns	r2, r3
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	2380      	movs	r3, #128	; 0x80
 8003fd8:	035b      	lsls	r3, r3, #13
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d003      	beq.n	8003fe6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fe6:	4b2a      	ldr	r3, [pc, #168]	; (8004090 <HAL_GPIO_Init+0x2b8>)
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003fec:	4b28      	ldr	r3, [pc, #160]	; (8004090 <HAL_GPIO_Init+0x2b8>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	43da      	mvns	r2, r3
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	2380      	movs	r3, #128	; 0x80
 8004002:	039b      	lsls	r3, r3, #14
 8004004:	4013      	ands	r3, r2
 8004006:	d003      	beq.n	8004010 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4313      	orrs	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004010:	4b1f      	ldr	r3, [pc, #124]	; (8004090 <HAL_GPIO_Init+0x2b8>)
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004016:	4a1e      	ldr	r2, [pc, #120]	; (8004090 <HAL_GPIO_Init+0x2b8>)
 8004018:	2384      	movs	r3, #132	; 0x84
 800401a:	58d3      	ldr	r3, [r2, r3]
 800401c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	43da      	mvns	r2, r3
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	4013      	ands	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	2380      	movs	r3, #128	; 0x80
 800402e:	029b      	lsls	r3, r3, #10
 8004030:	4013      	ands	r3, r2
 8004032:	d003      	beq.n	800403c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	4313      	orrs	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800403c:	4914      	ldr	r1, [pc, #80]	; (8004090 <HAL_GPIO_Init+0x2b8>)
 800403e:	2284      	movs	r2, #132	; 0x84
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004044:	4a12      	ldr	r2, [pc, #72]	; (8004090 <HAL_GPIO_Init+0x2b8>)
 8004046:	2380      	movs	r3, #128	; 0x80
 8004048:	58d3      	ldr	r3, [r2, r3]
 800404a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	43da      	mvns	r2, r3
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	4013      	ands	r3, r2
 8004054:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	2380      	movs	r3, #128	; 0x80
 800405c:	025b      	lsls	r3, r3, #9
 800405e:	4013      	ands	r3, r2
 8004060:	d003      	beq.n	800406a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4313      	orrs	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800406a:	4909      	ldr	r1, [pc, #36]	; (8004090 <HAL_GPIO_Init+0x2b8>)
 800406c:	2280      	movs	r2, #128	; 0x80
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	3301      	adds	r3, #1
 8004076:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	40da      	lsrs	r2, r3
 8004080:	1e13      	subs	r3, r2, #0
 8004082:	d000      	beq.n	8004086 <HAL_GPIO_Init+0x2ae>
 8004084:	e6b0      	b.n	8003de8 <HAL_GPIO_Init+0x10>
  }
}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	46c0      	nop			; (mov r8, r8)
 800408a:	46bd      	mov	sp, r7
 800408c:	b006      	add	sp, #24
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40021800 	.word	0x40021800
 8004094:	50000400 	.word	0x50000400
 8004098:	50000800 	.word	0x50000800
 800409c:	50000c00 	.word	0x50000c00

080040a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e082      	b.n	80041b8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2241      	movs	r2, #65	; 0x41
 80040b6:	5c9b      	ldrb	r3, [r3, r2]
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d107      	bne.n	80040ce <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2240      	movs	r2, #64	; 0x40
 80040c2:	2100      	movs	r1, #0
 80040c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	0018      	movs	r0, r3
 80040ca:	f7fe fbef 	bl	80028ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2241      	movs	r2, #65	; 0x41
 80040d2:	2124      	movs	r1, #36	; 0x24
 80040d4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2101      	movs	r1, #1
 80040e2:	438a      	bics	r2, r1
 80040e4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4934      	ldr	r1, [pc, #208]	; (80041c0 <HAL_I2C_Init+0x120>)
 80040f0:	400a      	ands	r2, r1
 80040f2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4931      	ldr	r1, [pc, #196]	; (80041c4 <HAL_I2C_Init+0x124>)
 8004100:	400a      	ands	r2, r1
 8004102:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d108      	bne.n	800411e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2180      	movs	r1, #128	; 0x80
 8004116:	0209      	lsls	r1, r1, #8
 8004118:	430a      	orrs	r2, r1
 800411a:	609a      	str	r2, [r3, #8]
 800411c:	e007      	b.n	800412e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2184      	movs	r1, #132	; 0x84
 8004128:	0209      	lsls	r1, r1, #8
 800412a:	430a      	orrs	r2, r1
 800412c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	2b02      	cmp	r3, #2
 8004134:	d104      	bne.n	8004140 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2280      	movs	r2, #128	; 0x80
 800413c:	0112      	lsls	r2, r2, #4
 800413e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	491f      	ldr	r1, [pc, #124]	; (80041c8 <HAL_I2C_Init+0x128>)
 800414c:	430a      	orrs	r2, r1
 800414e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	491a      	ldr	r1, [pc, #104]	; (80041c4 <HAL_I2C_Init+0x124>)
 800415c:	400a      	ands	r2, r1
 800415e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691a      	ldr	r2, [r3, #16]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	431a      	orrs	r2, r3
 800416a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69d9      	ldr	r1, [r3, #28]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1a      	ldr	r2, [r3, #32]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2101      	movs	r1, #1
 8004196:	430a      	orrs	r2, r1
 8004198:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2241      	movs	r2, #65	; 0x41
 80041a4:	2120      	movs	r1, #32
 80041a6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2242      	movs	r2, #66	; 0x42
 80041b2:	2100      	movs	r1, #0
 80041b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	0018      	movs	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	b002      	add	sp, #8
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	f0ffffff 	.word	0xf0ffffff
 80041c4:	ffff7fff 	.word	0xffff7fff
 80041c8:	02008000 	.word	0x02008000

080041cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80041cc:	b590      	push	{r4, r7, lr}
 80041ce:	b089      	sub	sp, #36	; 0x24
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	0008      	movs	r0, r1
 80041d6:	607a      	str	r2, [r7, #4]
 80041d8:	0019      	movs	r1, r3
 80041da:	230a      	movs	r3, #10
 80041dc:	18fb      	adds	r3, r7, r3
 80041de:	1c02      	adds	r2, r0, #0
 80041e0:	801a      	strh	r2, [r3, #0]
 80041e2:	2308      	movs	r3, #8
 80041e4:	18fb      	adds	r3, r7, r3
 80041e6:	1c0a      	adds	r2, r1, #0
 80041e8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2241      	movs	r2, #65	; 0x41
 80041ee:	5c9b      	ldrb	r3, [r3, r2]
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b20      	cmp	r3, #32
 80041f4:	d000      	beq.n	80041f8 <HAL_I2C_Master_Transmit+0x2c>
 80041f6:	e0e7      	b.n	80043c8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2240      	movs	r2, #64	; 0x40
 80041fc:	5c9b      	ldrb	r3, [r3, r2]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d101      	bne.n	8004206 <HAL_I2C_Master_Transmit+0x3a>
 8004202:	2302      	movs	r3, #2
 8004204:	e0e1      	b.n	80043ca <HAL_I2C_Master_Transmit+0x1fe>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2240      	movs	r2, #64	; 0x40
 800420a:	2101      	movs	r1, #1
 800420c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800420e:	f7fe ff99 	bl	8003144 <HAL_GetTick>
 8004212:	0003      	movs	r3, r0
 8004214:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004216:	2380      	movs	r3, #128	; 0x80
 8004218:	0219      	lsls	r1, r3, #8
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	2319      	movs	r3, #25
 8004222:	2201      	movs	r2, #1
 8004224:	f000 fe76 	bl	8004f14 <I2C_WaitOnFlagUntilTimeout>
 8004228:	1e03      	subs	r3, r0, #0
 800422a:	d001      	beq.n	8004230 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0cc      	b.n	80043ca <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2241      	movs	r2, #65	; 0x41
 8004234:	2121      	movs	r1, #33	; 0x21
 8004236:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2242      	movs	r2, #66	; 0x42
 800423c:	2110      	movs	r1, #16
 800423e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2208      	movs	r2, #8
 8004250:	18ba      	adds	r2, r7, r2
 8004252:	8812      	ldrh	r2, [r2, #0]
 8004254:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004260:	b29b      	uxth	r3, r3
 8004262:	2bff      	cmp	r3, #255	; 0xff
 8004264:	d911      	bls.n	800428a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	22ff      	movs	r2, #255	; 0xff
 800426a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004270:	b2da      	uxtb	r2, r3
 8004272:	2380      	movs	r3, #128	; 0x80
 8004274:	045c      	lsls	r4, r3, #17
 8004276:	230a      	movs	r3, #10
 8004278:	18fb      	adds	r3, r7, r3
 800427a:	8819      	ldrh	r1, [r3, #0]
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	4b55      	ldr	r3, [pc, #340]	; (80043d4 <HAL_I2C_Master_Transmit+0x208>)
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	0023      	movs	r3, r4
 8004284:	f001 f80c 	bl	80052a0 <I2C_TransferConfig>
 8004288:	e075      	b.n	8004376 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428e:	b29a      	uxth	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004298:	b2da      	uxtb	r2, r3
 800429a:	2380      	movs	r3, #128	; 0x80
 800429c:	049c      	lsls	r4, r3, #18
 800429e:	230a      	movs	r3, #10
 80042a0:	18fb      	adds	r3, r7, r3
 80042a2:	8819      	ldrh	r1, [r3, #0]
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	4b4b      	ldr	r3, [pc, #300]	; (80043d4 <HAL_I2C_Master_Transmit+0x208>)
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	0023      	movs	r3, r4
 80042ac:	f000 fff8 	bl	80052a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80042b0:	e061      	b.n	8004376 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	0018      	movs	r0, r3
 80042ba:	f000 fe6a 	bl	8004f92 <I2C_WaitOnTXISFlagUntilTimeout>
 80042be:	1e03      	subs	r3, r0, #0
 80042c0:	d001      	beq.n	80042c6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e081      	b.n	80043ca <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	781a      	ldrb	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d03a      	beq.n	8004376 <HAL_I2C_Master_Transmit+0x1aa>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004304:	2b00      	cmp	r3, #0
 8004306:	d136      	bne.n	8004376 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004308:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	0013      	movs	r3, r2
 8004312:	2200      	movs	r2, #0
 8004314:	2180      	movs	r1, #128	; 0x80
 8004316:	f000 fdfd 	bl	8004f14 <I2C_WaitOnFlagUntilTimeout>
 800431a:	1e03      	subs	r3, r0, #0
 800431c:	d001      	beq.n	8004322 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e053      	b.n	80043ca <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004326:	b29b      	uxth	r3, r3
 8004328:	2bff      	cmp	r3, #255	; 0xff
 800432a:	d911      	bls.n	8004350 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	22ff      	movs	r2, #255	; 0xff
 8004330:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004336:	b2da      	uxtb	r2, r3
 8004338:	2380      	movs	r3, #128	; 0x80
 800433a:	045c      	lsls	r4, r3, #17
 800433c:	230a      	movs	r3, #10
 800433e:	18fb      	adds	r3, r7, r3
 8004340:	8819      	ldrh	r1, [r3, #0]
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	2300      	movs	r3, #0
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	0023      	movs	r3, r4
 800434a:	f000 ffa9 	bl	80052a0 <I2C_TransferConfig>
 800434e:	e012      	b.n	8004376 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800435e:	b2da      	uxtb	r2, r3
 8004360:	2380      	movs	r3, #128	; 0x80
 8004362:	049c      	lsls	r4, r3, #18
 8004364:	230a      	movs	r3, #10
 8004366:	18fb      	adds	r3, r7, r3
 8004368:	8819      	ldrh	r1, [r3, #0]
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	2300      	movs	r3, #0
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	0023      	movs	r3, r4
 8004372:	f000 ff95 	bl	80052a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437a:	b29b      	uxth	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d198      	bne.n	80042b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	0018      	movs	r0, r3
 8004388:	f000 fe42 	bl	8005010 <I2C_WaitOnSTOPFlagUntilTimeout>
 800438c:	1e03      	subs	r3, r0, #0
 800438e:	d001      	beq.n	8004394 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e01a      	b.n	80043ca <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2220      	movs	r2, #32
 800439a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	490c      	ldr	r1, [pc, #48]	; (80043d8 <HAL_I2C_Master_Transmit+0x20c>)
 80043a8:	400a      	ands	r2, r1
 80043aa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2241      	movs	r2, #65	; 0x41
 80043b0:	2120      	movs	r1, #32
 80043b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2242      	movs	r2, #66	; 0x42
 80043b8:	2100      	movs	r1, #0
 80043ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2240      	movs	r2, #64	; 0x40
 80043c0:	2100      	movs	r1, #0
 80043c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	e000      	b.n	80043ca <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80043c8:	2302      	movs	r3, #2
  }
}
 80043ca:	0018      	movs	r0, r3
 80043cc:	46bd      	mov	sp, r7
 80043ce:	b007      	add	sp, #28
 80043d0:	bd90      	pop	{r4, r7, pc}
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	80002000 	.word	0x80002000
 80043d8:	fe00e800 	.word	0xfe00e800

080043dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	68f9      	ldr	r1, [r7, #12]
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	4798      	blx	r3
  }
}
 8004408:	46c0      	nop			; (mov r8, r8)
 800440a:	46bd      	mov	sp, r7
 800440c:	b004      	add	sp, #16
 800440e:	bd80      	pop	{r7, pc}

08004410 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	0a1b      	lsrs	r3, r3, #8
 800442c:	001a      	movs	r2, r3
 800442e:	2301      	movs	r3, #1
 8004430:	4013      	ands	r3, r2
 8004432:	d010      	beq.n	8004456 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	09db      	lsrs	r3, r3, #7
 8004438:	001a      	movs	r2, r3
 800443a:	2301      	movs	r3, #1
 800443c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800443e:	d00a      	beq.n	8004456 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004444:	2201      	movs	r2, #1
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2280      	movs	r2, #128	; 0x80
 8004452:	0052      	lsls	r2, r2, #1
 8004454:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	0a9b      	lsrs	r3, r3, #10
 800445a:	001a      	movs	r2, r3
 800445c:	2301      	movs	r3, #1
 800445e:	4013      	ands	r3, r2
 8004460:	d010      	beq.n	8004484 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	09db      	lsrs	r3, r3, #7
 8004466:	001a      	movs	r2, r3
 8004468:	2301      	movs	r3, #1
 800446a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800446c:	d00a      	beq.n	8004484 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004472:	2208      	movs	r2, #8
 8004474:	431a      	orrs	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2280      	movs	r2, #128	; 0x80
 8004480:	00d2      	lsls	r2, r2, #3
 8004482:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	0a5b      	lsrs	r3, r3, #9
 8004488:	001a      	movs	r2, r3
 800448a:	2301      	movs	r3, #1
 800448c:	4013      	ands	r3, r2
 800448e:	d010      	beq.n	80044b2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	09db      	lsrs	r3, r3, #7
 8004494:	001a      	movs	r2, r3
 8004496:	2301      	movs	r3, #1
 8004498:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800449a:	d00a      	beq.n	80044b2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a0:	2202      	movs	r2, #2
 80044a2:	431a      	orrs	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2280      	movs	r2, #128	; 0x80
 80044ae:	0092      	lsls	r2, r2, #2
 80044b0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	220b      	movs	r2, #11
 80044bc:	4013      	ands	r3, r2
 80044be:	d005      	beq.n	80044cc <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	0011      	movs	r1, r2
 80044c6:	0018      	movs	r0, r3
 80044c8:	f000 fbd8 	bl	8004c7c <I2C_ITError>
  }
}
 80044cc:	46c0      	nop			; (mov r8, r8)
 80044ce:	46bd      	mov	sp, r7
 80044d0:	b006      	add	sp, #24
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80044dc:	46c0      	nop			; (mov r8, r8)
 80044de:	46bd      	mov	sp, r7
 80044e0:	b002      	add	sp, #8
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80044ec:	46c0      	nop			; (mov r8, r8)
 80044ee:	46bd      	mov	sp, r7
 80044f0:	b002      	add	sp, #8
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	0008      	movs	r0, r1
 80044fe:	0011      	movs	r1, r2
 8004500:	1cfb      	adds	r3, r7, #3
 8004502:	1c02      	adds	r2, r0, #0
 8004504:	701a      	strb	r2, [r3, #0]
 8004506:	003b      	movs	r3, r7
 8004508:	1c0a      	adds	r2, r1, #0
 800450a:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800450c:	46c0      	nop			; (mov r8, r8)
 800450e:	46bd      	mov	sp, r7
 8004510:	b002      	add	sp, #8
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800451c:	46c0      	nop			; (mov r8, r8)
 800451e:	46bd      	mov	sp, r7
 8004520:	b002      	add	sp, #8
 8004522:	bd80      	pop	{r7, pc}

08004524 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800452c:	46c0      	nop			; (mov r8, r8)
 800452e:	46bd      	mov	sp, r7
 8004530:	b002      	add	sp, #8
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800453c:	46c0      	nop			; (mov r8, r8)
 800453e:	46bd      	mov	sp, r7
 8004540:	b002      	add	sp, #8
 8004542:	bd80      	pop	{r7, pc}

08004544 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004554:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2240      	movs	r2, #64	; 0x40
 800455e:	5c9b      	ldrb	r3, [r3, r2]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d101      	bne.n	8004568 <I2C_Slave_ISR_IT+0x24>
 8004564:	2302      	movs	r3, #2
 8004566:	e0fa      	b.n	800475e <I2C_Slave_ISR_IT+0x21a>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2240      	movs	r2, #64	; 0x40
 800456c:	2101      	movs	r1, #1
 800456e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	001a      	movs	r2, r3
 8004576:	2301      	movs	r3, #1
 8004578:	4013      	ands	r3, r2
 800457a:	d00b      	beq.n	8004594 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	095b      	lsrs	r3, r3, #5
 8004580:	001a      	movs	r2, r3
 8004582:	2301      	movs	r3, #1
 8004584:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004586:	d005      	beq.n	8004594 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	0011      	movs	r1, r2
 800458e:	0018      	movs	r0, r3
 8004590:	f000 f9f6 	bl	8004980 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	091b      	lsrs	r3, r3, #4
 8004598:	001a      	movs	r2, r3
 800459a:	2301      	movs	r3, #1
 800459c:	4013      	ands	r3, r2
 800459e:	d054      	beq.n	800464a <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	091b      	lsrs	r3, r3, #4
 80045a4:	001a      	movs	r2, r3
 80045a6:	2301      	movs	r3, #1
 80045a8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80045aa:	d04e      	beq.n	800464a <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d12d      	bne.n	8004612 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2241      	movs	r2, #65	; 0x41
 80045ba:	5c9b      	ldrb	r3, [r3, r2]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b28      	cmp	r3, #40	; 0x28
 80045c0:	d10b      	bne.n	80045da <I2C_Slave_ISR_IT+0x96>
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	2380      	movs	r3, #128	; 0x80
 80045c6:	049b      	lsls	r3, r3, #18
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d106      	bne.n	80045da <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	0011      	movs	r1, r2
 80045d2:	0018      	movs	r0, r3
 80045d4:	f000 faf8 	bl	8004bc8 <I2C_ITListenCplt>
 80045d8:	e036      	b.n	8004648 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2241      	movs	r2, #65	; 0x41
 80045de:	5c9b      	ldrb	r3, [r3, r2]
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b29      	cmp	r3, #41	; 0x29
 80045e4:	d110      	bne.n	8004608 <I2C_Slave_ISR_IT+0xc4>
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	4a5f      	ldr	r2, [pc, #380]	; (8004768 <I2C_Slave_ISR_IT+0x224>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d00c      	beq.n	8004608 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2210      	movs	r2, #16
 80045f4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	0018      	movs	r0, r3
 80045fa:	f000 fc4a 	bl	8004e92 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	0018      	movs	r0, r3
 8004602:	f000 f957 	bl	80048b4 <I2C_ITSlaveSeqCplt>
 8004606:	e01f      	b.n	8004648 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2210      	movs	r2, #16
 800460e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004610:	e09d      	b.n	800474e <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2210      	movs	r2, #16
 8004618:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461e:	2204      	movs	r2, #4
 8004620:	431a      	orrs	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <I2C_Slave_ISR_IT+0xf4>
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	2380      	movs	r3, #128	; 0x80
 8004630:	045b      	lsls	r3, r3, #17
 8004632:	429a      	cmp	r2, r3
 8004634:	d000      	beq.n	8004638 <I2C_Slave_ISR_IT+0xf4>
 8004636:	e08a      	b.n	800474e <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	0011      	movs	r1, r2
 8004640:	0018      	movs	r0, r3
 8004642:	f000 fb1b 	bl	8004c7c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004646:	e082      	b.n	800474e <I2C_Slave_ISR_IT+0x20a>
 8004648:	e081      	b.n	800474e <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	089b      	lsrs	r3, r3, #2
 800464e:	001a      	movs	r2, r3
 8004650:	2301      	movs	r3, #1
 8004652:	4013      	ands	r3, r2
 8004654:	d031      	beq.n	80046ba <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	089b      	lsrs	r3, r3, #2
 800465a:	001a      	movs	r2, r3
 800465c:	2301      	movs	r3, #1
 800465e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004660:	d02b      	beq.n	80046ba <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004666:	b29b      	uxth	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d018      	beq.n	800469e <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	1c5a      	adds	r2, r3, #1
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004688:	3b01      	subs	r3, #1
 800468a:	b29a      	uxth	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004694:	b29b      	uxth	r3, r3
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d154      	bne.n	8004752 <I2C_Slave_ISR_IT+0x20e>
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	4a2f      	ldr	r2, [pc, #188]	; (8004768 <I2C_Slave_ISR_IT+0x224>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d050      	beq.n	8004752 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	0018      	movs	r0, r3
 80046b4:	f000 f8fe 	bl	80048b4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80046b8:	e04b      	b.n	8004752 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	08db      	lsrs	r3, r3, #3
 80046be:	001a      	movs	r2, r3
 80046c0:	2301      	movs	r3, #1
 80046c2:	4013      	ands	r3, r2
 80046c4:	d00c      	beq.n	80046e0 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	08db      	lsrs	r3, r3, #3
 80046ca:	001a      	movs	r2, r3
 80046cc:	2301      	movs	r3, #1
 80046ce:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80046d0:	d006      	beq.n	80046e0 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	0011      	movs	r1, r2
 80046d8:	0018      	movs	r0, r3
 80046da:	f000 f847 	bl	800476c <I2C_ITAddrCplt>
 80046de:	e039      	b.n	8004754 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	085b      	lsrs	r3, r3, #1
 80046e4:	001a      	movs	r2, r3
 80046e6:	2301      	movs	r3, #1
 80046e8:	4013      	ands	r3, r2
 80046ea:	d033      	beq.n	8004754 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	085b      	lsrs	r3, r3, #1
 80046f0:	001a      	movs	r2, r3
 80046f2:	2301      	movs	r3, #1
 80046f4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80046f6:	d02d      	beq.n	8004754 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d018      	beq.n	8004734 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	781a      	ldrb	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471c:	b29b      	uxth	r3, r3
 800471e:	3b01      	subs	r3, #1
 8004720:	b29a      	uxth	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472a:	3b01      	subs	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	851a      	strh	r2, [r3, #40]	; 0x28
 8004732:	e00f      	b.n	8004754 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	2380      	movs	r3, #128	; 0x80
 8004738:	045b      	lsls	r3, r3, #17
 800473a:	429a      	cmp	r2, r3
 800473c:	d002      	beq.n	8004744 <I2C_Slave_ISR_IT+0x200>
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d107      	bne.n	8004754 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	0018      	movs	r0, r3
 8004748:	f000 f8b4 	bl	80048b4 <I2C_ITSlaveSeqCplt>
 800474c:	e002      	b.n	8004754 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800474e:	46c0      	nop			; (mov r8, r8)
 8004750:	e000      	b.n	8004754 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8004752:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2240      	movs	r2, #64	; 0x40
 8004758:	2100      	movs	r1, #0
 800475a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	0018      	movs	r0, r3
 8004760:	46bd      	mov	sp, r7
 8004762:	b006      	add	sp, #24
 8004764:	bd80      	pop	{r7, pc}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	ffff0000 	.word	0xffff0000

0800476c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800476c:	b5b0      	push	{r4, r5, r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2241      	movs	r2, #65	; 0x41
 800477a:	5c9b      	ldrb	r3, [r3, r2]
 800477c:	b2db      	uxtb	r3, r3
 800477e:	001a      	movs	r2, r3
 8004780:	2328      	movs	r3, #40	; 0x28
 8004782:	4013      	ands	r3, r2
 8004784:	2b28      	cmp	r3, #40	; 0x28
 8004786:	d000      	beq.n	800478a <I2C_ITAddrCplt+0x1e>
 8004788:	e088      	b.n	800489c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	0c1b      	lsrs	r3, r3, #16
 8004792:	b2da      	uxtb	r2, r3
 8004794:	250f      	movs	r5, #15
 8004796:	197b      	adds	r3, r7, r5
 8004798:	2101      	movs	r1, #1
 800479a:	400a      	ands	r2, r1
 800479c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	0c1b      	lsrs	r3, r3, #16
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	200c      	movs	r0, #12
 80047aa:	183b      	adds	r3, r7, r0
 80047ac:	21fe      	movs	r1, #254	; 0xfe
 80047ae:	400a      	ands	r2, r1
 80047b0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	240a      	movs	r4, #10
 80047bc:	193b      	adds	r3, r7, r4
 80047be:	0592      	lsls	r2, r2, #22
 80047c0:	0d92      	lsrs	r2, r2, #22
 80047c2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	2308      	movs	r3, #8
 80047ce:	18fb      	adds	r3, r7, r3
 80047d0:	21fe      	movs	r1, #254	; 0xfe
 80047d2:	400a      	ands	r2, r1
 80047d4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d148      	bne.n	8004870 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80047de:	0021      	movs	r1, r4
 80047e0:	187b      	adds	r3, r7, r1
 80047e2:	881b      	ldrh	r3, [r3, #0]
 80047e4:	09db      	lsrs	r3, r3, #7
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	183b      	adds	r3, r7, r0
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	4053      	eors	r3, r2
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	001a      	movs	r2, r3
 80047f2:	2306      	movs	r3, #6
 80047f4:	4013      	ands	r3, r2
 80047f6:	d120      	bne.n	800483a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80047f8:	183b      	adds	r3, r7, r0
 80047fa:	187a      	adds	r2, r7, r1
 80047fc:	8812      	ldrh	r2, [r2, #0]
 80047fe:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800480e:	2b02      	cmp	r3, #2
 8004810:	d14c      	bne.n	80048ac <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2208      	movs	r2, #8
 800481e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2240      	movs	r2, #64	; 0x40
 8004824:	2100      	movs	r1, #0
 8004826:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004828:	183b      	adds	r3, r7, r0
 800482a:	881a      	ldrh	r2, [r3, #0]
 800482c:	197b      	adds	r3, r7, r5
 800482e:	7819      	ldrb	r1, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	0018      	movs	r0, r3
 8004834:	f7ff fe5e 	bl	80044f4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004838:	e038      	b.n	80048ac <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800483a:	240c      	movs	r4, #12
 800483c:	193b      	adds	r3, r7, r4
 800483e:	2208      	movs	r2, #8
 8004840:	18ba      	adds	r2, r7, r2
 8004842:	8812      	ldrh	r2, [r2, #0]
 8004844:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004846:	2380      	movs	r3, #128	; 0x80
 8004848:	021a      	lsls	r2, r3, #8
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	0011      	movs	r1, r2
 800484e:	0018      	movs	r0, r3
 8004850:	f000 fd60 	bl	8005314 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2240      	movs	r2, #64	; 0x40
 8004858:	2100      	movs	r1, #0
 800485a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800485c:	193b      	adds	r3, r7, r4
 800485e:	881a      	ldrh	r2, [r3, #0]
 8004860:	230f      	movs	r3, #15
 8004862:	18fb      	adds	r3, r7, r3
 8004864:	7819      	ldrb	r1, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	0018      	movs	r0, r3
 800486a:	f7ff fe43 	bl	80044f4 <HAL_I2C_AddrCallback>
}
 800486e:	e01d      	b.n	80048ac <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004870:	2380      	movs	r3, #128	; 0x80
 8004872:	021a      	lsls	r2, r3, #8
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	0011      	movs	r1, r2
 8004878:	0018      	movs	r0, r3
 800487a:	f000 fd4b 	bl	8005314 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2240      	movs	r2, #64	; 0x40
 8004882:	2100      	movs	r1, #0
 8004884:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004886:	230c      	movs	r3, #12
 8004888:	18fb      	adds	r3, r7, r3
 800488a:	881a      	ldrh	r2, [r3, #0]
 800488c:	230f      	movs	r3, #15
 800488e:	18fb      	adds	r3, r7, r3
 8004890:	7819      	ldrb	r1, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	0018      	movs	r0, r3
 8004896:	f7ff fe2d 	bl	80044f4 <HAL_I2C_AddrCallback>
}
 800489a:	e007      	b.n	80048ac <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2208      	movs	r2, #8
 80048a2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2240      	movs	r2, #64	; 0x40
 80048a8:	2100      	movs	r1, #0
 80048aa:	5499      	strb	r1, [r3, r2]
}
 80048ac:	46c0      	nop			; (mov r8, r8)
 80048ae:	46bd      	mov	sp, r7
 80048b0:	b004      	add	sp, #16
 80048b2:	bdb0      	pop	{r4, r5, r7, pc}

080048b4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2242      	movs	r2, #66	; 0x42
 80048c8:	2100      	movs	r1, #0
 80048ca:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	0b9b      	lsrs	r3, r3, #14
 80048d0:	001a      	movs	r2, r3
 80048d2:	2301      	movs	r3, #1
 80048d4:	4013      	ands	r3, r2
 80048d6:	d008      	beq.n	80048ea <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4925      	ldr	r1, [pc, #148]	; (8004978 <I2C_ITSlaveSeqCplt+0xc4>)
 80048e4:	400a      	ands	r2, r1
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	e00d      	b.n	8004906 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	0bdb      	lsrs	r3, r3, #15
 80048ee:	001a      	movs	r2, r3
 80048f0:	2301      	movs	r3, #1
 80048f2:	4013      	ands	r3, r2
 80048f4:	d007      	beq.n	8004906 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	491e      	ldr	r1, [pc, #120]	; (800497c <I2C_ITSlaveSeqCplt+0xc8>)
 8004902:	400a      	ands	r2, r1
 8004904:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2241      	movs	r2, #65	; 0x41
 800490a:	5c9b      	ldrb	r3, [r3, r2]
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b29      	cmp	r3, #41	; 0x29
 8004910:	d114      	bne.n	800493c <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2241      	movs	r2, #65	; 0x41
 8004916:	2128      	movs	r1, #40	; 0x28
 8004918:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2221      	movs	r2, #33	; 0x21
 800491e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2101      	movs	r1, #1
 8004924:	0018      	movs	r0, r3
 8004926:	f000 fcf5 	bl	8005314 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2240      	movs	r2, #64	; 0x40
 800492e:	2100      	movs	r1, #0
 8004930:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	0018      	movs	r0, r3
 8004936:	f7ff fdcd 	bl	80044d4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800493a:	e019      	b.n	8004970 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2241      	movs	r2, #65	; 0x41
 8004940:	5c9b      	ldrb	r3, [r3, r2]
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b2a      	cmp	r3, #42	; 0x2a
 8004946:	d113      	bne.n	8004970 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2241      	movs	r2, #65	; 0x41
 800494c:	2128      	movs	r1, #40	; 0x28
 800494e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2222      	movs	r2, #34	; 0x22
 8004954:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2102      	movs	r1, #2
 800495a:	0018      	movs	r0, r3
 800495c:	f000 fcda 	bl	8005314 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2240      	movs	r2, #64	; 0x40
 8004964:	2100      	movs	r1, #0
 8004966:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	0018      	movs	r0, r3
 800496c:	f7ff fdba 	bl	80044e4 <HAL_I2C_SlaveRxCpltCallback>
}
 8004970:	46c0      	nop			; (mov r8, r8)
 8004972:	46bd      	mov	sp, r7
 8004974:	b004      	add	sp, #16
 8004976:	bd80      	pop	{r7, pc}
 8004978:	ffffbfff 	.word	0xffffbfff
 800497c:	ffff7fff 	.word	0xffff7fff

08004980 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004996:	200f      	movs	r0, #15
 8004998:	183b      	adds	r3, r7, r0
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	2141      	movs	r1, #65	; 0x41
 800499e:	5c52      	ldrb	r2, [r2, r1]
 80049a0:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2220      	movs	r2, #32
 80049a8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80049aa:	183b      	adds	r3, r7, r0
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	2b21      	cmp	r3, #33	; 0x21
 80049b0:	d003      	beq.n	80049ba <I2C_ITSlaveCplt+0x3a>
 80049b2:	183b      	adds	r3, r7, r0
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	2b29      	cmp	r3, #41	; 0x29
 80049b8:	d109      	bne.n	80049ce <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80049ba:	4a7d      	ldr	r2, [pc, #500]	; (8004bb0 <I2C_ITSlaveCplt+0x230>)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	0011      	movs	r1, r2
 80049c0:	0018      	movs	r0, r3
 80049c2:	f000 fca7 	bl	8005314 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2221      	movs	r2, #33	; 0x21
 80049ca:	631a      	str	r2, [r3, #48]	; 0x30
 80049cc:	e011      	b.n	80049f2 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80049ce:	220f      	movs	r2, #15
 80049d0:	18bb      	adds	r3, r7, r2
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	2b22      	cmp	r3, #34	; 0x22
 80049d6:	d003      	beq.n	80049e0 <I2C_ITSlaveCplt+0x60>
 80049d8:	18bb      	adds	r3, r7, r2
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	2b2a      	cmp	r3, #42	; 0x2a
 80049de:	d108      	bne.n	80049f2 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80049e0:	4a74      	ldr	r2, [pc, #464]	; (8004bb4 <I2C_ITSlaveCplt+0x234>)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	0011      	movs	r1, r2
 80049e6:	0018      	movs	r0, r3
 80049e8:	f000 fc94 	bl	8005314 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2222      	movs	r2, #34	; 0x22
 80049f0:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2180      	movs	r1, #128	; 0x80
 80049fe:	0209      	lsls	r1, r1, #8
 8004a00:	430a      	orrs	r2, r1
 8004a02:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	496a      	ldr	r1, [pc, #424]	; (8004bb8 <I2C_ITSlaveCplt+0x238>)
 8004a10:	400a      	ands	r2, r1
 8004a12:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	0018      	movs	r0, r3
 8004a18:	f000 fa3b 	bl	8004e92 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	0b9b      	lsrs	r3, r3, #14
 8004a20:	001a      	movs	r2, r3
 8004a22:	2301      	movs	r3, #1
 8004a24:	4013      	ands	r3, r2
 8004a26:	d013      	beq.n	8004a50 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4962      	ldr	r1, [pc, #392]	; (8004bbc <I2C_ITSlaveCplt+0x23c>)
 8004a34:	400a      	ands	r2, r1
 8004a36:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d020      	beq.n	8004a82 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a4e:	e018      	b.n	8004a82 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	0bdb      	lsrs	r3, r3, #15
 8004a54:	001a      	movs	r2, r3
 8004a56:	2301      	movs	r3, #1
 8004a58:	4013      	ands	r3, r2
 8004a5a:	d012      	beq.n	8004a82 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4956      	ldr	r1, [pc, #344]	; (8004bc0 <I2C_ITSlaveCplt+0x240>)
 8004a68:	400a      	ands	r2, r1
 8004a6a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d006      	beq.n	8004a82 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	089b      	lsrs	r3, r3, #2
 8004a86:	001a      	movs	r2, r3
 8004a88:	2301      	movs	r3, #1
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	d020      	beq.n	8004ad0 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2204      	movs	r2, #4
 8004a92:	4393      	bics	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00c      	beq.n	8004ad0 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aba:	3b01      	subs	r3, #1
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d005      	beq.n	8004ae6 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ade:	2204      	movs	r2, #4
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2242      	movs	r2, #66	; 0x42
 8004aea:	2100      	movs	r1, #0
 8004aec:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d013      	beq.n	8004b24 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	0011      	movs	r1, r2
 8004b04:	0018      	movs	r0, r3
 8004b06:	f000 f8b9 	bl	8004c7c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2241      	movs	r2, #65	; 0x41
 8004b0e:	5c9b      	ldrb	r3, [r3, r2]
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b28      	cmp	r3, #40	; 0x28
 8004b14:	d147      	bne.n	8004ba6 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	0011      	movs	r1, r2
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	f000 f853 	bl	8004bc8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b22:	e040      	b.n	8004ba6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	4a26      	ldr	r2, [pc, #152]	; (8004bc4 <I2C_ITSlaveCplt+0x244>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d016      	beq.n	8004b5c <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	0018      	movs	r0, r3
 8004b32:	f7ff febf 	bl	80048b4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a22      	ldr	r2, [pc, #136]	; (8004bc4 <I2C_ITSlaveCplt+0x244>)
 8004b3a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2241      	movs	r2, #65	; 0x41
 8004b40:	2120      	movs	r1, #32
 8004b42:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2240      	movs	r2, #64	; 0x40
 8004b4e:	2100      	movs	r1, #0
 8004b50:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	0018      	movs	r0, r3
 8004b56:	f7ff fcdd 	bl	8004514 <HAL_I2C_ListenCpltCallback>
}
 8004b5a:	e024      	b.n	8004ba6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2241      	movs	r2, #65	; 0x41
 8004b60:	5c9b      	ldrb	r3, [r3, r2]
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b22      	cmp	r3, #34	; 0x22
 8004b66:	d10f      	bne.n	8004b88 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2241      	movs	r2, #65	; 0x41
 8004b6c:	2120      	movs	r1, #32
 8004b6e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2240      	movs	r2, #64	; 0x40
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	0018      	movs	r0, r3
 8004b82:	f7ff fcaf 	bl	80044e4 <HAL_I2C_SlaveRxCpltCallback>
}
 8004b86:	e00e      	b.n	8004ba6 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2241      	movs	r2, #65	; 0x41
 8004b8c:	2120      	movs	r1, #32
 8004b8e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2240      	movs	r2, #64	; 0x40
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	f7ff fc97 	bl	80044d4 <HAL_I2C_SlaveTxCpltCallback>
}
 8004ba6:	46c0      	nop			; (mov r8, r8)
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	b006      	add	sp, #24
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	46c0      	nop			; (mov r8, r8)
 8004bb0:	00008001 	.word	0x00008001
 8004bb4:	00008002 	.word	0x00008002
 8004bb8:	fe00e800 	.word	0xfe00e800
 8004bbc:	ffffbfff 	.word	0xffffbfff
 8004bc0:	ffff7fff 	.word	0xffff7fff
 8004bc4:	ffff0000 	.word	0xffff0000

08004bc8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a27      	ldr	r2, [pc, #156]	; (8004c74 <I2C_ITListenCplt+0xac>)
 8004bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2241      	movs	r2, #65	; 0x41
 8004be2:	2120      	movs	r1, #32
 8004be4:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2242      	movs	r2, #66	; 0x42
 8004bea:	2100      	movs	r1, #0
 8004bec:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	089b      	lsrs	r3, r3, #2
 8004bf8:	001a      	movs	r2, r3
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	d022      	beq.n	8004c46 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d012      	beq.n	8004c46 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c24:	3b01      	subs	r3, #1
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	3b01      	subs	r3, #1
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3e:	2204      	movs	r2, #4
 8004c40:	431a      	orrs	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004c46:	4a0c      	ldr	r2, [pc, #48]	; (8004c78 <I2C_ITListenCplt+0xb0>)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	0011      	movs	r1, r2
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f000 fb61 	bl	8005314 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2210      	movs	r2, #16
 8004c58:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2240      	movs	r2, #64	; 0x40
 8004c5e:	2100      	movs	r1, #0
 8004c60:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	0018      	movs	r0, r3
 8004c66:	f7ff fc55 	bl	8004514 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004c6a:	46c0      	nop			; (mov r8, r8)
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	b002      	add	sp, #8
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	46c0      	nop			; (mov r8, r8)
 8004c74:	ffff0000 	.word	0xffff0000
 8004c78:	00008003 	.word	0x00008003

08004c7c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004c86:	200f      	movs	r0, #15
 8004c88:	183b      	adds	r3, r7, r0
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	2141      	movs	r1, #65	; 0x41
 8004c8e:	5c52      	ldrb	r2, [r2, r1]
 8004c90:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2242      	movs	r2, #66	; 0x42
 8004c96:	2100      	movs	r1, #0
 8004c98:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a62      	ldr	r2, [pc, #392]	; (8004e28 <I2C_ITError+0x1ac>)
 8004c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004cb2:	183b      	adds	r3, r7, r0
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	2b28      	cmp	r3, #40	; 0x28
 8004cb8:	d007      	beq.n	8004cca <I2C_ITError+0x4e>
 8004cba:	183b      	adds	r3, r7, r0
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	2b29      	cmp	r3, #41	; 0x29
 8004cc0:	d003      	beq.n	8004cca <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004cc2:	183b      	adds	r3, r7, r0
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	2b2a      	cmp	r3, #42	; 0x2a
 8004cc8:	d10c      	bne.n	8004ce4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2103      	movs	r1, #3
 8004cce:	0018      	movs	r0, r3
 8004cd0:	f000 fb20 	bl	8005314 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2241      	movs	r2, #65	; 0x41
 8004cd8:	2128      	movs	r1, #40	; 0x28
 8004cda:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a53      	ldr	r2, [pc, #332]	; (8004e2c <I2C_ITError+0x1b0>)
 8004ce0:	635a      	str	r2, [r3, #52]	; 0x34
 8004ce2:	e012      	b.n	8004d0a <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ce4:	4a52      	ldr	r2, [pc, #328]	; (8004e30 <I2C_ITError+0x1b4>)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	0011      	movs	r1, r2
 8004cea:	0018      	movs	r0, r3
 8004cec:	f000 fb12 	bl	8005314 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2241      	movs	r2, #65	; 0x41
 8004cf4:	5c9b      	ldrb	r3, [r3, r2]
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b60      	cmp	r3, #96	; 0x60
 8004cfa:	d003      	beq.n	8004d04 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2241      	movs	r2, #65	; 0x41
 8004d00:	2120      	movs	r1, #32
 8004d02:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0e:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d03b      	beq.n	8004d90 <I2C_ITError+0x114>
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b11      	cmp	r3, #17
 8004d1c:	d002      	beq.n	8004d24 <I2C_ITError+0xa8>
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2b21      	cmp	r3, #33	; 0x21
 8004d22:	d135      	bne.n	8004d90 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	2380      	movs	r3, #128	; 0x80
 8004d2c:	01db      	lsls	r3, r3, #7
 8004d2e:	401a      	ands	r2, r3
 8004d30:	2380      	movs	r3, #128	; 0x80
 8004d32:	01db      	lsls	r3, r3, #7
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d107      	bne.n	8004d48 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	493c      	ldr	r1, [pc, #240]	; (8004e34 <I2C_ITError+0x1b8>)
 8004d44:	400a      	ands	r2, r1
 8004d46:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f7fe ffa7 	bl	8003ca0 <HAL_DMA_GetState>
 8004d52:	0003      	movs	r3, r0
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d016      	beq.n	8004d86 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	4a36      	ldr	r2, [pc, #216]	; (8004e38 <I2C_ITError+0x1bc>)
 8004d5e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2240      	movs	r2, #64	; 0x40
 8004d64:	2100      	movs	r1, #0
 8004d66:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f7fe fe7b 	bl	8003a68 <HAL_DMA_Abort_IT>
 8004d72:	1e03      	subs	r3, r0, #0
 8004d74:	d051      	beq.n	8004e1a <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d80:	0018      	movs	r0, r3
 8004d82:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d84:	e049      	b.n	8004e1a <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	0018      	movs	r0, r3
 8004d8a:	f000 f859 	bl	8004e40 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d8e:	e044      	b.n	8004e1a <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d03b      	beq.n	8004e10 <I2C_ITError+0x194>
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2b12      	cmp	r3, #18
 8004d9c:	d002      	beq.n	8004da4 <I2C_ITError+0x128>
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2b22      	cmp	r3, #34	; 0x22
 8004da2:	d135      	bne.n	8004e10 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	2380      	movs	r3, #128	; 0x80
 8004dac:	021b      	lsls	r3, r3, #8
 8004dae:	401a      	ands	r2, r3
 8004db0:	2380      	movs	r3, #128	; 0x80
 8004db2:	021b      	lsls	r3, r3, #8
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d107      	bne.n	8004dc8 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	491e      	ldr	r1, [pc, #120]	; (8004e3c <I2C_ITError+0x1c0>)
 8004dc4:	400a      	ands	r2, r1
 8004dc6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dcc:	0018      	movs	r0, r3
 8004dce:	f7fe ff67 	bl	8003ca0 <HAL_DMA_GetState>
 8004dd2:	0003      	movs	r3, r0
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d016      	beq.n	8004e06 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ddc:	4a16      	ldr	r2, [pc, #88]	; (8004e38 <I2C_ITError+0x1bc>)
 8004dde:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2240      	movs	r2, #64	; 0x40
 8004de4:	2100      	movs	r1, #0
 8004de6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dec:	0018      	movs	r0, r3
 8004dee:	f7fe fe3b 	bl	8003a68 <HAL_DMA_Abort_IT>
 8004df2:	1e03      	subs	r3, r0, #0
 8004df4:	d013      	beq.n	8004e1e <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e00:	0018      	movs	r0, r3
 8004e02:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e04:	e00b      	b.n	8004e1e <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	0018      	movs	r0, r3
 8004e0a:	f000 f819 	bl	8004e40 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e0e:	e006      	b.n	8004e1e <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	0018      	movs	r0, r3
 8004e14:	f000 f814 	bl	8004e40 <I2C_TreatErrorCallback>
  }
}
 8004e18:	e002      	b.n	8004e20 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e1a:	46c0      	nop			; (mov r8, r8)
 8004e1c:	e000      	b.n	8004e20 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e1e:	46c0      	nop			; (mov r8, r8)
}
 8004e20:	46c0      	nop			; (mov r8, r8)
 8004e22:	46bd      	mov	sp, r7
 8004e24:	b004      	add	sp, #16
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	ffff0000 	.word	0xffff0000
 8004e2c:	08004545 	.word	0x08004545
 8004e30:	00008003 	.word	0x00008003
 8004e34:	ffffbfff 	.word	0xffffbfff
 8004e38:	08004ed7 	.word	0x08004ed7
 8004e3c:	ffff7fff 	.word	0xffff7fff

08004e40 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2241      	movs	r2, #65	; 0x41
 8004e4c:	5c9b      	ldrb	r3, [r3, r2]
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b60      	cmp	r3, #96	; 0x60
 8004e52:	d10f      	bne.n	8004e74 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2241      	movs	r2, #65	; 0x41
 8004e58:	2120      	movs	r1, #32
 8004e5a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2240      	movs	r2, #64	; 0x40
 8004e66:	2100      	movs	r1, #0
 8004e68:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	f7ff fb61 	bl	8004534 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e72:	e00a      	b.n	8004e8a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2240      	movs	r2, #64	; 0x40
 8004e7e:	2100      	movs	r1, #0
 8004e80:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	0018      	movs	r0, r3
 8004e86:	f7ff fb4d 	bl	8004524 <HAL_I2C_ErrorCallback>
}
 8004e8a:	46c0      	nop			; (mov r8, r8)
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	b002      	add	sp, #8
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b082      	sub	sp, #8
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d103      	bne.n	8004eb0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2200      	movs	r2, #0
 8004eae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	4013      	ands	r3, r2
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d007      	beq.n	8004ece <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	699a      	ldr	r2, [r3, #24]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2101      	movs	r1, #1
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	619a      	str	r2, [r3, #24]
  }
}
 8004ece:	46c0      	nop			; (mov r8, r8)
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	b002      	add	sp, #8
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b084      	sub	sp, #16
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f00:	2200      	movs	r2, #0
 8004f02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	0018      	movs	r0, r3
 8004f08:	f7ff ff9a 	bl	8004e40 <I2C_TreatErrorCallback>
}
 8004f0c:	46c0      	nop			; (mov r8, r8)
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	b004      	add	sp, #16
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	603b      	str	r3, [r7, #0]
 8004f20:	1dfb      	adds	r3, r7, #7
 8004f22:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f24:	e021      	b.n	8004f6a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	d01e      	beq.n	8004f6a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2c:	f7fe f90a 	bl	8003144 <HAL_GetTick>
 8004f30:	0002      	movs	r2, r0
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d302      	bcc.n	8004f42 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d113      	bne.n	8004f6a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f46:	2220      	movs	r2, #32
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2241      	movs	r2, #65	; 0x41
 8004f52:	2120      	movs	r1, #32
 8004f54:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2242      	movs	r2, #66	; 0x42
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2240      	movs	r2, #64	; 0x40
 8004f62:	2100      	movs	r1, #0
 8004f64:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e00f      	b.n	8004f8a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	4013      	ands	r3, r2
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	425a      	negs	r2, r3
 8004f7a:	4153      	adcs	r3, r2
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	001a      	movs	r2, r3
 8004f80:	1dfb      	adds	r3, r7, #7
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d0ce      	beq.n	8004f26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	b004      	add	sp, #16
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b084      	sub	sp, #16
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f9e:	e02b      	b.n	8004ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	68b9      	ldr	r1, [r7, #8]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f000 f86e 	bl	8005088 <I2C_IsErrorOccurred>
 8004fac:	1e03      	subs	r3, r0, #0
 8004fae:	d001      	beq.n	8004fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e029      	b.n	8005008 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	d01e      	beq.n	8004ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fba:	f7fe f8c3 	bl	8003144 <HAL_GetTick>
 8004fbe:	0002      	movs	r2, r0
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d302      	bcc.n	8004fd0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d113      	bne.n	8004ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2241      	movs	r2, #65	; 0x41
 8004fe0:	2120      	movs	r1, #32
 8004fe2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2242      	movs	r2, #66	; 0x42
 8004fe8:	2100      	movs	r1, #0
 8004fea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2240      	movs	r2, #64	; 0x40
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e007      	b.n	8005008 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	2202      	movs	r2, #2
 8005000:	4013      	ands	r3, r2
 8005002:	2b02      	cmp	r3, #2
 8005004:	d1cc      	bne.n	8004fa0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	0018      	movs	r0, r3
 800500a:	46bd      	mov	sp, r7
 800500c:	b004      	add	sp, #16
 800500e:	bd80      	pop	{r7, pc}

08005010 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800501c:	e028      	b.n	8005070 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	68b9      	ldr	r1, [r7, #8]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	0018      	movs	r0, r3
 8005026:	f000 f82f 	bl	8005088 <I2C_IsErrorOccurred>
 800502a:	1e03      	subs	r3, r0, #0
 800502c:	d001      	beq.n	8005032 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e026      	b.n	8005080 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005032:	f7fe f887 	bl	8003144 <HAL_GetTick>
 8005036:	0002      	movs	r2, r0
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	429a      	cmp	r2, r3
 8005040:	d302      	bcc.n	8005048 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d113      	bne.n	8005070 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504c:	2220      	movs	r2, #32
 800504e:	431a      	orrs	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2241      	movs	r2, #65	; 0x41
 8005058:	2120      	movs	r1, #32
 800505a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2242      	movs	r2, #66	; 0x42
 8005060:	2100      	movs	r1, #0
 8005062:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2240      	movs	r2, #64	; 0x40
 8005068:	2100      	movs	r1, #0
 800506a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e007      	b.n	8005080 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	2220      	movs	r2, #32
 8005078:	4013      	ands	r3, r2
 800507a:	2b20      	cmp	r3, #32
 800507c:	d1cf      	bne.n	800501e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	0018      	movs	r0, r3
 8005082:	46bd      	mov	sp, r7
 8005084:	b004      	add	sp, #16
 8005086:	bd80      	pop	{r7, pc}

08005088 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005088:	b590      	push	{r4, r7, lr}
 800508a:	b08b      	sub	sp, #44	; 0x2c
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005094:	2327      	movs	r3, #39	; 0x27
 8005096:	18fb      	adds	r3, r7, r3
 8005098:	2200      	movs	r2, #0
 800509a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80050a4:	2300      	movs	r3, #0
 80050a6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	2210      	movs	r2, #16
 80050b0:	4013      	ands	r3, r2
 80050b2:	d100      	bne.n	80050b6 <I2C_IsErrorOccurred+0x2e>
 80050b4:	e08e      	b.n	80051d4 <I2C_IsErrorOccurred+0x14c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2210      	movs	r2, #16
 80050bc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80050be:	e06c      	b.n	800519a <I2C_IsErrorOccurred+0x112>
 80050c0:	2427      	movs	r4, #39	; 0x27
 80050c2:	193b      	adds	r3, r7, r4
 80050c4:	193a      	adds	r2, r7, r4
 80050c6:	7812      	ldrb	r2, [r2, #0]
 80050c8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	3301      	adds	r3, #1
 80050ce:	d064      	beq.n	800519a <I2C_IsErrorOccurred+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80050d0:	f7fe f838 	bl	8003144 <HAL_GetTick>
 80050d4:	0002      	movs	r2, r0
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d306      	bcc.n	80050ee <I2C_IsErrorOccurred+0x66>
 80050e0:	193b      	adds	r3, r7, r4
 80050e2:	193a      	adds	r2, r7, r4
 80050e4:	7812      	ldrb	r2, [r2, #0]
 80050e6:	701a      	strb	r2, [r3, #0]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d155      	bne.n	800519a <I2C_IsErrorOccurred+0x112>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	2380      	movs	r3, #128	; 0x80
 80050f6:	01db      	lsls	r3, r3, #7
 80050f8:	4013      	ands	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80050fc:	2013      	movs	r0, #19
 80050fe:	183b      	adds	r3, r7, r0
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	2142      	movs	r1, #66	; 0x42
 8005104:	5c52      	ldrb	r2, [r2, r1]
 8005106:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	699a      	ldr	r2, [r3, #24]
 800510e:	2380      	movs	r3, #128	; 0x80
 8005110:	021b      	lsls	r3, r3, #8
 8005112:	401a      	ands	r2, r3
 8005114:	2380      	movs	r3, #128	; 0x80
 8005116:	021b      	lsls	r3, r3, #8
 8005118:	429a      	cmp	r2, r3
 800511a:	d137      	bne.n	800518c <I2C_IsErrorOccurred+0x104>
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	2380      	movs	r3, #128	; 0x80
 8005120:	01db      	lsls	r3, r3, #7
 8005122:	429a      	cmp	r2, r3
 8005124:	d032      	beq.n	800518c <I2C_IsErrorOccurred+0x104>
              (tmp1 != I2C_CR2_STOP) && \
 8005126:	183b      	adds	r3, r7, r0
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	2b20      	cmp	r3, #32
 800512c:	d02e      	beq.n	800518c <I2C_IsErrorOccurred+0x104>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2180      	movs	r1, #128	; 0x80
 800513a:	01c9      	lsls	r1, r1, #7
 800513c:	430a      	orrs	r2, r1
 800513e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005140:	f7fe f800 	bl	8003144 <HAL_GetTick>
 8005144:	0003      	movs	r3, r0
 8005146:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005148:	e020      	b.n	800518c <I2C_IsErrorOccurred+0x104>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800514a:	f7fd fffb 	bl	8003144 <HAL_GetTick>
 800514e:	0002      	movs	r2, r0
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2027      	movs	r0, #39	; 0x27
 8005156:	183a      	adds	r2, r7, r0
 8005158:	1839      	adds	r1, r7, r0
 800515a:	7809      	ldrb	r1, [r1, #0]
 800515c:	7011      	strb	r1, [r2, #0]
 800515e:	2b19      	cmp	r3, #25
 8005160:	d914      	bls.n	800518c <I2C_IsErrorOccurred+0x104>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005166:	2220      	movs	r2, #32
 8005168:	431a      	orrs	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2241      	movs	r2, #65	; 0x41
 8005172:	2120      	movs	r1, #32
 8005174:	5499      	strb	r1, [r3, r2]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2242      	movs	r2, #66	; 0x42
 800517a:	2100      	movs	r1, #0
 800517c:	5499      	strb	r1, [r3, r2]

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2240      	movs	r2, #64	; 0x40
 8005182:	2100      	movs	r1, #0
 8005184:	5499      	strb	r1, [r3, r2]

              status = HAL_ERROR;
 8005186:	183b      	adds	r3, r7, r0
 8005188:	2201      	movs	r2, #1
 800518a:	701a      	strb	r2, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	2220      	movs	r2, #32
 8005194:	4013      	ands	r3, r2
 8005196:	2b20      	cmp	r3, #32
 8005198:	d1d7      	bne.n	800514a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	2220      	movs	r2, #32
 80051a2:	4013      	ands	r3, r2
 80051a4:	2b20      	cmp	r3, #32
 80051a6:	d004      	beq.n	80051b2 <I2C_IsErrorOccurred+0x12a>
 80051a8:	2327      	movs	r3, #39	; 0x27
 80051aa:	18fb      	adds	r3, r7, r3
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d086      	beq.n	80050c0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80051b2:	2327      	movs	r3, #39	; 0x27
 80051b4:	18fb      	adds	r3, r7, r3
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d103      	bne.n	80051c4 <I2C_IsErrorOccurred+0x13c>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2220      	movs	r2, #32
 80051c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	2204      	movs	r2, #4
 80051c8:	4313      	orrs	r3, r2
 80051ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80051cc:	2327      	movs	r3, #39	; 0x27
 80051ce:	18fb      	adds	r3, r7, r3
 80051d0:	2201      	movs	r2, #1
 80051d2:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	2380      	movs	r3, #128	; 0x80
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	4013      	ands	r3, r2
 80051e4:	d00c      	beq.n	8005200 <I2C_IsErrorOccurred+0x178>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	2201      	movs	r2, #1
 80051ea:	4313      	orrs	r3, r2
 80051ec:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2280      	movs	r2, #128	; 0x80
 80051f4:	0052      	lsls	r2, r2, #1
 80051f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051f8:	2327      	movs	r3, #39	; 0x27
 80051fa:	18fb      	adds	r3, r7, r3
 80051fc:	2201      	movs	r2, #1
 80051fe:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	2380      	movs	r3, #128	; 0x80
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	4013      	ands	r3, r2
 8005208:	d00c      	beq.n	8005224 <I2C_IsErrorOccurred+0x19c>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	2208      	movs	r2, #8
 800520e:	4313      	orrs	r3, r2
 8005210:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2280      	movs	r2, #128	; 0x80
 8005218:	00d2      	lsls	r2, r2, #3
 800521a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800521c:	2327      	movs	r3, #39	; 0x27
 800521e:	18fb      	adds	r3, r7, r3
 8005220:	2201      	movs	r2, #1
 8005222:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	2380      	movs	r3, #128	; 0x80
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4013      	ands	r3, r2
 800522c:	d00c      	beq.n	8005248 <I2C_IsErrorOccurred+0x1c0>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	2202      	movs	r2, #2
 8005232:	4313      	orrs	r3, r2
 8005234:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2280      	movs	r2, #128	; 0x80
 800523c:	0092      	lsls	r2, r2, #2
 800523e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005240:	2327      	movs	r3, #39	; 0x27
 8005242:	18fb      	adds	r3, r7, r3
 8005244:	2201      	movs	r2, #1
 8005246:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005248:	2327      	movs	r3, #39	; 0x27
 800524a:	18fb      	adds	r3, r7, r3
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d01d      	beq.n	800528e <I2C_IsErrorOccurred+0x206>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	0018      	movs	r0, r3
 8005256:	f7ff fe1c 	bl	8004e92 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	490d      	ldr	r1, [pc, #52]	; (800529c <I2C_IsErrorOccurred+0x214>)
 8005266:	400a      	ands	r2, r1
 8005268:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	431a      	orrs	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2241      	movs	r2, #65	; 0x41
 800527a:	2120      	movs	r1, #32
 800527c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2242      	movs	r2, #66	; 0x42
 8005282:	2100      	movs	r1, #0
 8005284:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2240      	movs	r2, #64	; 0x40
 800528a:	2100      	movs	r1, #0
 800528c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800528e:	2327      	movs	r3, #39	; 0x27
 8005290:	18fb      	adds	r3, r7, r3
 8005292:	781b      	ldrb	r3, [r3, #0]
}
 8005294:	0018      	movs	r0, r3
 8005296:	46bd      	mov	sp, r7
 8005298:	b00b      	add	sp, #44	; 0x2c
 800529a:	bd90      	pop	{r4, r7, pc}
 800529c:	fe00e800 	.word	0xfe00e800

080052a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80052a0:	b590      	push	{r4, r7, lr}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	0008      	movs	r0, r1
 80052aa:	0011      	movs	r1, r2
 80052ac:	607b      	str	r3, [r7, #4]
 80052ae:	240a      	movs	r4, #10
 80052b0:	193b      	adds	r3, r7, r4
 80052b2:	1c02      	adds	r2, r0, #0
 80052b4:	801a      	strh	r2, [r3, #0]
 80052b6:	2009      	movs	r0, #9
 80052b8:	183b      	adds	r3, r7, r0
 80052ba:	1c0a      	adds	r2, r1, #0
 80052bc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052be:	193b      	adds	r3, r7, r4
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	059b      	lsls	r3, r3, #22
 80052c4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052c6:	183b      	adds	r3, r7, r0
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	0419      	lsls	r1, r3, #16
 80052cc:	23ff      	movs	r3, #255	; 0xff
 80052ce:	041b      	lsls	r3, r3, #16
 80052d0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052d2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052da:	4313      	orrs	r3, r2
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	085b      	lsrs	r3, r3, #1
 80052e0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052ea:	0d51      	lsrs	r1, r2, #21
 80052ec:	2280      	movs	r2, #128	; 0x80
 80052ee:	00d2      	lsls	r2, r2, #3
 80052f0:	400a      	ands	r2, r1
 80052f2:	4907      	ldr	r1, [pc, #28]	; (8005310 <I2C_TransferConfig+0x70>)
 80052f4:	430a      	orrs	r2, r1
 80052f6:	43d2      	mvns	r2, r2
 80052f8:	401a      	ands	r2, r3
 80052fa:	0011      	movs	r1, r2
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	430a      	orrs	r2, r1
 8005304:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	46bd      	mov	sp, r7
 800530a:	b007      	add	sp, #28
 800530c:	bd90      	pop	{r4, r7, pc}
 800530e:	46c0      	nop			; (mov r8, r8)
 8005310:	03ff63ff 	.word	0x03ff63ff

08005314 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	000a      	movs	r2, r1
 800531e:	1cbb      	adds	r3, r7, #2
 8005320:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8005322:	2300      	movs	r3, #0
 8005324:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005326:	1cbb      	adds	r3, r7, #2
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	2201      	movs	r2, #1
 800532c:	4013      	ands	r3, r2
 800532e:	d010      	beq.n	8005352 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2242      	movs	r2, #66	; 0x42
 8005334:	4313      	orrs	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2241      	movs	r2, #65	; 0x41
 800533c:	5c9b      	ldrb	r3, [r3, r2]
 800533e:	b2db      	uxtb	r3, r3
 8005340:	001a      	movs	r2, r3
 8005342:	2328      	movs	r3, #40	; 0x28
 8005344:	4013      	ands	r3, r2
 8005346:	2b28      	cmp	r3, #40	; 0x28
 8005348:	d003      	beq.n	8005352 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	22b0      	movs	r2, #176	; 0xb0
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005352:	1cbb      	adds	r3, r7, #2
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	2202      	movs	r2, #2
 8005358:	4013      	ands	r3, r2
 800535a:	d010      	beq.n	800537e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2244      	movs	r2, #68	; 0x44
 8005360:	4313      	orrs	r3, r2
 8005362:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2241      	movs	r2, #65	; 0x41
 8005368:	5c9b      	ldrb	r3, [r3, r2]
 800536a:	b2db      	uxtb	r3, r3
 800536c:	001a      	movs	r2, r3
 800536e:	2328      	movs	r3, #40	; 0x28
 8005370:	4013      	ands	r3, r2
 8005372:	2b28      	cmp	r3, #40	; 0x28
 8005374:	d003      	beq.n	800537e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	22b0      	movs	r2, #176	; 0xb0
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800537e:	1cbb      	adds	r3, r7, #2
 8005380:	2200      	movs	r2, #0
 8005382:	5e9b      	ldrsh	r3, [r3, r2]
 8005384:	2b00      	cmp	r3, #0
 8005386:	da03      	bge.n	8005390 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	22b8      	movs	r2, #184	; 0xb8
 800538c:	4313      	orrs	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005390:	1cbb      	adds	r3, r7, #2
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	2b10      	cmp	r3, #16
 8005396:	d103      	bne.n	80053a0 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2290      	movs	r2, #144	; 0x90
 800539c:	4313      	orrs	r3, r2
 800539e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80053a0:	1cbb      	adds	r3, r7, #2
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	2b20      	cmp	r3, #32
 80053a6:	d103      	bne.n	80053b0 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2220      	movs	r2, #32
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80053b0:	1cbb      	adds	r3, r7, #2
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	2b40      	cmp	r3, #64	; 0x40
 80053b6:	d103      	bne.n	80053c0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2240      	movs	r2, #64	; 0x40
 80053bc:	4313      	orrs	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	43d9      	mvns	r1, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	400a      	ands	r2, r1
 80053d0:	601a      	str	r2, [r3, #0]
}
 80053d2:	46c0      	nop			; (mov r8, r8)
 80053d4:	46bd      	mov	sp, r7
 80053d6:	b004      	add	sp, #16
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2241      	movs	r2, #65	; 0x41
 80053ea:	5c9b      	ldrb	r3, [r3, r2]
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b20      	cmp	r3, #32
 80053f0:	d138      	bne.n	8005464 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2240      	movs	r2, #64	; 0x40
 80053f6:	5c9b      	ldrb	r3, [r3, r2]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d101      	bne.n	8005400 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80053fc:	2302      	movs	r3, #2
 80053fe:	e032      	b.n	8005466 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2240      	movs	r2, #64	; 0x40
 8005404:	2101      	movs	r1, #1
 8005406:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2241      	movs	r2, #65	; 0x41
 800540c:	2124      	movs	r1, #36	; 0x24
 800540e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2101      	movs	r1, #1
 800541c:	438a      	bics	r2, r1
 800541e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4911      	ldr	r1, [pc, #68]	; (8005470 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800542c:	400a      	ands	r2, r1
 800542e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6819      	ldr	r1, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2101      	movs	r1, #1
 800544c:	430a      	orrs	r2, r1
 800544e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2241      	movs	r2, #65	; 0x41
 8005454:	2120      	movs	r1, #32
 8005456:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2240      	movs	r2, #64	; 0x40
 800545c:	2100      	movs	r1, #0
 800545e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005460:	2300      	movs	r3, #0
 8005462:	e000      	b.n	8005466 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005464:	2302      	movs	r3, #2
  }
}
 8005466:	0018      	movs	r0, r3
 8005468:	46bd      	mov	sp, r7
 800546a:	b002      	add	sp, #8
 800546c:	bd80      	pop	{r7, pc}
 800546e:	46c0      	nop			; (mov r8, r8)
 8005470:	ffffefff 	.word	0xffffefff

08005474 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2241      	movs	r2, #65	; 0x41
 8005482:	5c9b      	ldrb	r3, [r3, r2]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b20      	cmp	r3, #32
 8005488:	d139      	bne.n	80054fe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2240      	movs	r2, #64	; 0x40
 800548e:	5c9b      	ldrb	r3, [r3, r2]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d101      	bne.n	8005498 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005494:	2302      	movs	r3, #2
 8005496:	e033      	b.n	8005500 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2240      	movs	r2, #64	; 0x40
 800549c:	2101      	movs	r1, #1
 800549e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2241      	movs	r2, #65	; 0x41
 80054a4:	2124      	movs	r1, #36	; 0x24
 80054a6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2101      	movs	r1, #1
 80054b4:	438a      	bics	r2, r1
 80054b6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4a11      	ldr	r2, [pc, #68]	; (8005508 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80054c4:	4013      	ands	r3, r2
 80054c6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	021b      	lsls	r3, r3, #8
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2101      	movs	r1, #1
 80054e6:	430a      	orrs	r2, r1
 80054e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2241      	movs	r2, #65	; 0x41
 80054ee:	2120      	movs	r1, #32
 80054f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2240      	movs	r2, #64	; 0x40
 80054f6:	2100      	movs	r1, #0
 80054f8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	e000      	b.n	8005500 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80054fe:	2302      	movs	r3, #2
  }
}
 8005500:	0018      	movs	r0, r3
 8005502:	46bd      	mov	sp, r7
 8005504:	b004      	add	sp, #16
 8005506:	bd80      	pop	{r7, pc}
 8005508:	fffff0ff 	.word	0xfffff0ff

0800550c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b088      	sub	sp, #32
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e0e5      	b.n	80056ea <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2235      	movs	r2, #53	; 0x35
 8005522:	5c9b      	ldrb	r3, [r3, r2]
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d107      	bne.n	800553a <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2234      	movs	r2, #52	; 0x34
 800552e:	2100      	movs	r1, #0
 8005530:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	0018      	movs	r0, r3
 8005536:	f7fd fa23 	bl	8002980 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2235      	movs	r2, #53	; 0x35
 800553e:	2102      	movs	r1, #2
 8005540:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69da      	ldr	r2, [r3, #28]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4969      	ldr	r1, [pc, #420]	; (80056f4 <HAL_I2S_Init+0x1e8>)
 800554e:	400a      	ands	r2, r1
 8005550:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2202      	movs	r2, #2
 8005558:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	2b02      	cmp	r3, #2
 8005560:	d100      	bne.n	8005564 <HAL_I2S_Init+0x58>
 8005562:	e076      	b.n	8005652 <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d102      	bne.n	8005572 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800556c:	2310      	movs	r3, #16
 800556e:	617b      	str	r3, [r7, #20]
 8005570:	e001      	b.n	8005576 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005572:	2320      	movs	r3, #32
 8005574:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	2b20      	cmp	r3, #32
 800557c:	d802      	bhi.n	8005584 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8005584:	2380      	movs	r3, #128	; 0x80
 8005586:	011b      	lsls	r3, r3, #4
 8005588:	0018      	movs	r0, r3
 800558a:	f001 f95b 	bl	8006844 <HAL_RCCEx_GetPeriphCLKFreq>
 800558e:	0003      	movs	r3, r0
 8005590:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691a      	ldr	r2, [r3, #16]
 8005596:	2380      	movs	r3, #128	; 0x80
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	429a      	cmp	r2, r3
 800559c:	d131      	bne.n	8005602 <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d016      	beq.n	80055d4 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	0019      	movs	r1, r3
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f7fa fda9 	bl	8000104 <__udivsi3>
 80055b2:	0003      	movs	r3, r0
 80055b4:	001a      	movs	r2, r3
 80055b6:	0013      	movs	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	189b      	adds	r3, r3, r2
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	001a      	movs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	0019      	movs	r1, r3
 80055c6:	0010      	movs	r0, r2
 80055c8:	f7fa fd9c 	bl	8000104 <__udivsi3>
 80055cc:	0003      	movs	r3, r0
 80055ce:	3305      	adds	r3, #5
 80055d0:	613b      	str	r3, [r7, #16]
 80055d2:	e02a      	b.n	800562a <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	0019      	movs	r1, r3
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f7fa fd92 	bl	8000104 <__udivsi3>
 80055e0:	0003      	movs	r3, r0
 80055e2:	001a      	movs	r2, r3
 80055e4:	0013      	movs	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	189b      	adds	r3, r3, r2
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	001a      	movs	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	0019      	movs	r1, r3
 80055f4:	0010      	movs	r0, r2
 80055f6:	f7fa fd85 	bl	8000104 <__udivsi3>
 80055fa:	0003      	movs	r3, r0
 80055fc:	3305      	adds	r3, #5
 80055fe:	613b      	str	r3, [r7, #16]
 8005600:	e013      	b.n	800562a <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005602:	6979      	ldr	r1, [r7, #20]
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f7fa fd7d 	bl	8000104 <__udivsi3>
 800560a:	0003      	movs	r3, r0
 800560c:	001a      	movs	r2, r3
 800560e:	0013      	movs	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	189b      	adds	r3, r3, r2
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	001a      	movs	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	0019      	movs	r1, r3
 800561e:	0010      	movs	r0, r2
 8005620:	f7fa fd70 	bl	8000104 <__udivsi3>
 8005624:	0003      	movs	r3, r0
 8005626:	3305      	adds	r3, #5
 8005628:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	210a      	movs	r1, #10
 800562e:	0018      	movs	r0, r3
 8005630:	f7fa fd68 	bl	8000104 <__udivsi3>
 8005634:	0003      	movs	r3, r0
 8005636:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2201      	movs	r2, #1
 800563c:	4013      	ands	r3, r2
 800563e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	085b      	lsrs	r3, r3, #1
 8005648:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	021b      	lsls	r3, r3, #8
 800564e:	61bb      	str	r3, [r7, #24]
 8005650:	e003      	b.n	800565a <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005652:	2302      	movs	r3, #2
 8005654:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005656:	2300      	movs	r3, #0
 8005658:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d902      	bls.n	8005666 <HAL_I2S_Init+0x15a>
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	2bff      	cmp	r3, #255	; 0xff
 8005664:	d907      	bls.n	8005676 <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566a:	2210      	movs	r2, #16
 800566c:	431a      	orrs	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e039      	b.n	80056ea <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	691a      	ldr	r2, [r3, #16]
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	431a      	orrs	r2, r3
 800567e:	0011      	movs	r1, r2
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	69fa      	ldr	r2, [r7, #28]
 8005686:	430a      	orrs	r2, r1
 8005688:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	4a18      	ldr	r2, [pc, #96]	; (80056f4 <HAL_I2S_Init+0x1e8>)
 8005692:	401a      	ands	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6859      	ldr	r1, [r3, #4]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	4319      	orrs	r1, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	4319      	orrs	r1, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	430b      	orrs	r3, r1
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2180      	movs	r1, #128	; 0x80
 80056b2:	0109      	lsls	r1, r1, #4
 80056b4:	430a      	orrs	r2, r1
 80056b6:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	2b30      	cmp	r3, #48	; 0x30
 80056be:	d003      	beq.n	80056c8 <HAL_I2S_Init+0x1bc>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	2bb0      	cmp	r3, #176	; 0xb0
 80056c6:	d108      	bne.n	80056da <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	69da      	ldr	r2, [r3, #28]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2180      	movs	r1, #128	; 0x80
 80056d4:	0149      	lsls	r1, r1, #5
 80056d6:	430a      	orrs	r2, r1
 80056d8:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2235      	movs	r2, #53	; 0x35
 80056e4:	2101      	movs	r1, #1
 80056e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	0018      	movs	r0, r3
 80056ec:	46bd      	mov	sp, r7
 80056ee:	b008      	add	sp, #32
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	46c0      	nop			; (mov r8, r8)
 80056f4:	fffff040 	.word	0xfffff040

080056f8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	1dbb      	adds	r3, r7, #6
 8005704:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <HAL_I2S_Transmit_DMA+0x1c>
 800570c:	1dbb      	adds	r3, r7, #6
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <HAL_I2S_Transmit_DMA+0x20>
  {
    return  HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e091      	b.n	800583c <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2234      	movs	r2, #52	; 0x34
 800571c:	5c9b      	ldrb	r3, [r3, r2]
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b01      	cmp	r3, #1
 8005722:	d101      	bne.n	8005728 <HAL_I2S_Transmit_DMA+0x30>
 8005724:	2302      	movs	r3, #2
 8005726:	e089      	b.n	800583c <HAL_I2S_Transmit_DMA+0x144>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2234      	movs	r2, #52	; 0x34
 800572c:	2101      	movs	r1, #1
 800572e:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2235      	movs	r2, #53	; 0x35
 8005734:	5c9b      	ldrb	r3, [r3, r2]
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b01      	cmp	r3, #1
 800573a:	d005      	beq.n	8005748 <HAL_I2S_Transmit_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2234      	movs	r2, #52	; 0x34
 8005740:	2100      	movs	r1, #0
 8005742:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8005744:	2302      	movs	r3, #2
 8005746:	e079      	b.n	800583c <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2235      	movs	r2, #53	; 0x35
 800574c:	2103      	movs	r1, #3
 800574e:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	2207      	movs	r2, #7
 8005764:	4013      	ands	r3, r2
 8005766:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2b03      	cmp	r3, #3
 800576c:	d002      	beq.n	8005774 <HAL_I2S_Transmit_DMA+0x7c>
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	2b05      	cmp	r3, #5
 8005772:	d10c      	bne.n	800578e <HAL_I2S_Transmit_DMA+0x96>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005774:	1dbb      	adds	r3, r7, #6
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	18db      	adds	r3, r3, r3
 800577a:	b29a      	uxth	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8005780:	1dbb      	adds	r3, r7, #6
 8005782:	881b      	ldrh	r3, [r3, #0]
 8005784:	18db      	adds	r3, r3, r3
 8005786:	b29a      	uxth	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	845a      	strh	r2, [r3, #34]	; 0x22
 800578c:	e007      	b.n	800579e <HAL_I2S_Transmit_DMA+0xa6>
  }
  else
  {
    hi2s->TxXferSize = Size;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	1dba      	adds	r2, r7, #6
 8005792:	8812      	ldrh	r2, [r2, #0]
 8005794:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	1dba      	adds	r2, r7, #6
 800579a:	8812      	ldrh	r2, [r2, #0]
 800579c:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a2:	4a28      	ldr	r2, [pc, #160]	; (8005844 <HAL_I2S_Transmit_DMA+0x14c>)
 80057a4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057aa:	4a27      	ldr	r2, [pc, #156]	; (8005848 <HAL_I2S_Transmit_DMA+0x150>)
 80057ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b2:	4a26      	ldr	r2, [pc, #152]	; (800584c <HAL_I2S_Transmit_DMA+0x154>)
 80057b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80057be:	0019      	movs	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80057c6:	001a      	movs	r2, r3
                                 hi2s->TxXferSize))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8c1b      	ldrh	r3, [r3, #32]
 80057cc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80057ce:	f7fe f8c5 	bl	800395c <HAL_DMA_Start_IT>
 80057d2:	1e03      	subs	r3, r0, #0
 80057d4:	d00f      	beq.n	80057f6 <HAL_I2S_Transmit_DMA+0xfe>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057da:	2208      	movs	r2, #8
 80057dc:	431a      	orrs	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2235      	movs	r2, #53	; 0x35
 80057e6:	2101      	movs	r1, #1
 80057e8:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2234      	movs	r2, #52	; 0x34
 80057ee:	2100      	movs	r1, #0
 80057f0:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e022      	b.n	800583c <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	69da      	ldr	r2, [r3, #28]
 80057fc:	2380      	movs	r3, #128	; 0x80
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	4013      	ands	r3, r2
 8005802:	d108      	bne.n	8005816 <HAL_I2S_Transmit_DMA+0x11e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	69da      	ldr	r2, [r3, #28]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2180      	movs	r1, #128	; 0x80
 8005810:	00c9      	lsls	r1, r1, #3
 8005812:	430a      	orrs	r2, r1
 8005814:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	2202      	movs	r2, #2
 800581e:	4013      	ands	r3, r2
 8005820:	d107      	bne.n	8005832 <HAL_I2S_Transmit_DMA+0x13a>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2102      	movs	r1, #2
 800582e:	430a      	orrs	r2, r1
 8005830:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2234      	movs	r2, #52	; 0x34
 8005836:	2100      	movs	r1, #0
 8005838:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	0018      	movs	r0, r3
 800583e:	46bd      	mov	sp, r7
 8005840:	b006      	add	sp, #24
 8005842:	bd80      	pop	{r7, pc}
 8005844:	0800598b 	.word	0x0800598b
 8005848:	08005947 	.word	0x08005947
 800584c:	080059a9 	.word	0x080059a9

08005850 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	099b      	lsrs	r3, r3, #6
 800586c:	001a      	movs	r2, r3
 800586e:	2301      	movs	r3, #1
 8005870:	4013      	ands	r3, r2
 8005872:	d10e      	bne.n	8005892 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2201      	movs	r2, #1
 8005878:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 800587a:	d00a      	beq.n	8005892 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	099b      	lsrs	r3, r3, #6
 8005880:	001a      	movs	r2, r3
 8005882:	2301      	movs	r3, #1
 8005884:	4013      	ands	r3, r2
 8005886:	d004      	beq.n	8005892 <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	0018      	movs	r0, r3
 800588c:	f000 f8e2 	bl	8005a54 <I2S_Receive_IT>
    return;
 8005890:	e046      	b.n	8005920 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	085b      	lsrs	r3, r3, #1
 8005896:	001a      	movs	r2, r3
 8005898:	2301      	movs	r3, #1
 800589a:	4013      	ands	r3, r2
 800589c:	d00a      	beq.n	80058b4 <HAL_I2S_IRQHandler+0x64>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	09db      	lsrs	r3, r3, #7
 80058a2:	001a      	movs	r2, r3
 80058a4:	2301      	movs	r3, #1
 80058a6:	4013      	ands	r3, r2
 80058a8:	d004      	beq.n	80058b4 <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	0018      	movs	r0, r3
 80058ae:	f000 f8a2 	bl	80059f6 <I2S_Transmit_IT>
    return;
 80058b2:	e035      	b.n	8005920 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	095b      	lsrs	r3, r3, #5
 80058b8:	001a      	movs	r2, r3
 80058ba:	2301      	movs	r3, #1
 80058bc:	4013      	ands	r3, r2
 80058be:	d02f      	beq.n	8005920 <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	099b      	lsrs	r3, r3, #6
 80058c4:	001a      	movs	r2, r3
 80058c6:	2301      	movs	r3, #1
 80058c8:	4013      	ands	r3, r2
 80058ca:	d00d      	beq.n	80058e8 <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2160      	movs	r1, #96	; 0x60
 80058d8:	438a      	bics	r2, r1
 80058da:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e0:	2202      	movs	r2, #2
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	08db      	lsrs	r3, r3, #3
 80058ec:	001a      	movs	r2, r3
 80058ee:	2301      	movs	r3, #1
 80058f0:	4013      	ands	r3, r2
 80058f2:	d00d      	beq.n	8005910 <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	21a0      	movs	r1, #160	; 0xa0
 8005900:	438a      	bics	r2, r1
 8005902:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005908:	2204      	movs	r2, #4
 800590a:	431a      	orrs	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2235      	movs	r2, #53	; 0x35
 8005914:	2101      	movs	r1, #1
 8005916:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	0018      	movs	r0, r3
 800591c:	f000 f80b 	bl	8005936 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005920:	46bd      	mov	sp, r7
 8005922:	b004      	add	sp, #16
 8005924:	bd80      	pop	{r7, pc}

08005926 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b082      	sub	sp, #8
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800592e:	46c0      	nop			; (mov r8, r8)
 8005930:	46bd      	mov	sp, r7
 8005932:	b002      	add	sp, #8
 8005934:	bd80      	pop	{r7, pc}

08005936 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b082      	sub	sp, #8
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800593e:	46c0      	nop			; (mov r8, r8)
 8005940:	46bd      	mov	sp, r7
 8005942:	b002      	add	sp, #8
 8005944:	bd80      	pop	{r7, pc}

08005946 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b084      	sub	sp, #16
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005952:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	69db      	ldr	r3, [r3, #28]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10e      	bne.n	800597a <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2102      	movs	r1, #2
 8005968:	438a      	bics	r2, r1
 800596a:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	845a      	strh	r2, [r3, #34]	; 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2235      	movs	r2, #53	; 0x35
 8005976:	2101      	movs	r1, #1
 8005978:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	0018      	movs	r0, r3
 800597e:	f7fb fc2d 	bl	80011dc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005982:	46c0      	nop			; (mov r8, r8)
 8005984:	46bd      	mov	sp, r7
 8005986:	b004      	add	sp, #16
 8005988:	bd80      	pop	{r7, pc}

0800598a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b084      	sub	sp, #16
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005996:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	0018      	movs	r0, r3
 800599c:	f7fb fc06 	bl	80011ac <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80059a0:	46c0      	nop			; (mov r8, r8)
 80059a2:	46bd      	mov	sp, r7
 80059a4:	b004      	add	sp, #16
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b4:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2103      	movs	r1, #3
 80059c2:	438a      	bics	r2, r1
 80059c4:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	845a      	strh	r2, [r3, #34]	; 0x22
  hi2s->RxXferCount = 0U;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	855a      	strh	r2, [r3, #42]	; 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2235      	movs	r2, #53	; 0x35
 80059d6:	2101      	movs	r1, #1
 80059d8:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059de:	2208      	movs	r2, #8
 80059e0:	431a      	orrs	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	0018      	movs	r0, r3
 80059ea:	f7ff ffa4 	bl	8005936 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80059ee:	46c0      	nop			; (mov r8, r8)
 80059f0:	46bd      	mov	sp, r7
 80059f2:	b004      	add	sp, #16
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b082      	sub	sp, #8
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	881a      	ldrh	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	1c9a      	adds	r2, r3, #2
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10f      	bne.n	8005a4c <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685a      	ldr	r2, [r3, #4]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	21a0      	movs	r1, #160	; 0xa0
 8005a38:	438a      	bics	r2, r1
 8005a3a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2235      	movs	r2, #53	; 0x35
 8005a40:	2101      	movs	r1, #1
 8005a42:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	0018      	movs	r0, r3
 8005a48:	f7fb fbc8 	bl	80011dc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005a4c:	46c0      	nop			; (mov r8, r8)
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	b002      	add	sp, #8
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a66:	b292      	uxth	r2, r2
 8005a68:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6e:	1c9a      	adds	r2, r3, #2
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10f      	bne.n	8005aac <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2160      	movs	r1, #96	; 0x60
 8005a98:	438a      	bics	r2, r1
 8005a9a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2235      	movs	r2, #53	; 0x35
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	f7ff ff3d 	bl	8005926 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005aac:	46c0      	nop			; (mov r8, r8)
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	b002      	add	sp, #8
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005abc:	4b19      	ldr	r3, [pc, #100]	; (8005b24 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a19      	ldr	r2, [pc, #100]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	0019      	movs	r1, r3
 8005ac6:	4b17      	ldr	r3, [pc, #92]	; (8005b24 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	2380      	movs	r3, #128	; 0x80
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d11f      	bne.n	8005b18 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005ad8:	4b14      	ldr	r3, [pc, #80]	; (8005b2c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	0013      	movs	r3, r2
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	189b      	adds	r3, r3, r2
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	4912      	ldr	r1, [pc, #72]	; (8005b30 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	f7fa fb0c 	bl	8000104 <__udivsi3>
 8005aec:	0003      	movs	r3, r0
 8005aee:	3301      	adds	r3, #1
 8005af0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005af2:	e008      	b.n	8005b06 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	e001      	b.n	8005b06 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e009      	b.n	8005b1a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b06:	4b07      	ldr	r3, [pc, #28]	; (8005b24 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005b08:	695a      	ldr	r2, [r3, #20]
 8005b0a:	2380      	movs	r3, #128	; 0x80
 8005b0c:	00db      	lsls	r3, r3, #3
 8005b0e:	401a      	ands	r2, r3
 8005b10:	2380      	movs	r3, #128	; 0x80
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d0ed      	beq.n	8005af4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	b004      	add	sp, #16
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	46c0      	nop			; (mov r8, r8)
 8005b24:	40007000 	.word	0x40007000
 8005b28:	fffff9ff 	.word	0xfffff9ff
 8005b2c:	20000064 	.word	0x20000064
 8005b30:	000f4240 	.word	0x000f4240

08005b34 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005b38:	4b03      	ldr	r3, [pc, #12]	; (8005b48 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	23e0      	movs	r3, #224	; 0xe0
 8005b3e:	01db      	lsls	r3, r3, #7
 8005b40:	4013      	ands	r3, r2
}
 8005b42:	0018      	movs	r0, r3
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	40021000 	.word	0x40021000

08005b4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b088      	sub	sp, #32
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e2fe      	b.n	800615c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2201      	movs	r2, #1
 8005b64:	4013      	ands	r3, r2
 8005b66:	d100      	bne.n	8005b6a <HAL_RCC_OscConfig+0x1e>
 8005b68:	e07c      	b.n	8005c64 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b6a:	4bc3      	ldr	r3, [pc, #780]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	2238      	movs	r2, #56	; 0x38
 8005b70:	4013      	ands	r3, r2
 8005b72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b74:	4bc0      	ldr	r3, [pc, #768]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	2203      	movs	r2, #3
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	2b10      	cmp	r3, #16
 8005b82:	d102      	bne.n	8005b8a <HAL_RCC_OscConfig+0x3e>
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	2b03      	cmp	r3, #3
 8005b88:	d002      	beq.n	8005b90 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d10b      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b90:	4bb9      	ldr	r3, [pc, #740]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	2380      	movs	r3, #128	; 0x80
 8005b96:	029b      	lsls	r3, r3, #10
 8005b98:	4013      	ands	r3, r2
 8005b9a:	d062      	beq.n	8005c62 <HAL_RCC_OscConfig+0x116>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d15e      	bne.n	8005c62 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e2d9      	b.n	800615c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	2380      	movs	r3, #128	; 0x80
 8005bae:	025b      	lsls	r3, r3, #9
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d107      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x78>
 8005bb4:	4bb0      	ldr	r3, [pc, #704]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	4baf      	ldr	r3, [pc, #700]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005bba:	2180      	movs	r1, #128	; 0x80
 8005bbc:	0249      	lsls	r1, r1, #9
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	601a      	str	r2, [r3, #0]
 8005bc2:	e020      	b.n	8005c06 <HAL_RCC_OscConfig+0xba>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	23a0      	movs	r3, #160	; 0xa0
 8005bca:	02db      	lsls	r3, r3, #11
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d10e      	bne.n	8005bee <HAL_RCC_OscConfig+0xa2>
 8005bd0:	4ba9      	ldr	r3, [pc, #676]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	4ba8      	ldr	r3, [pc, #672]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005bd6:	2180      	movs	r1, #128	; 0x80
 8005bd8:	02c9      	lsls	r1, r1, #11
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	4ba6      	ldr	r3, [pc, #664]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	4ba5      	ldr	r3, [pc, #660]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005be4:	2180      	movs	r1, #128	; 0x80
 8005be6:	0249      	lsls	r1, r1, #9
 8005be8:	430a      	orrs	r2, r1
 8005bea:	601a      	str	r2, [r3, #0]
 8005bec:	e00b      	b.n	8005c06 <HAL_RCC_OscConfig+0xba>
 8005bee:	4ba2      	ldr	r3, [pc, #648]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	4ba1      	ldr	r3, [pc, #644]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005bf4:	49a1      	ldr	r1, [pc, #644]	; (8005e7c <HAL_RCC_OscConfig+0x330>)
 8005bf6:	400a      	ands	r2, r1
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	4b9f      	ldr	r3, [pc, #636]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	4b9e      	ldr	r3, [pc, #632]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005c00:	499f      	ldr	r1, [pc, #636]	; (8005e80 <HAL_RCC_OscConfig+0x334>)
 8005c02:	400a      	ands	r2, r1
 8005c04:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d014      	beq.n	8005c38 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0e:	f7fd fa99 	bl	8003144 <HAL_GetTick>
 8005c12:	0003      	movs	r3, r0
 8005c14:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c16:	e008      	b.n	8005c2a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c18:	f7fd fa94 	bl	8003144 <HAL_GetTick>
 8005c1c:	0002      	movs	r2, r0
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b64      	cmp	r3, #100	; 0x64
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e298      	b.n	800615c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c2a:	4b93      	ldr	r3, [pc, #588]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	2380      	movs	r3, #128	; 0x80
 8005c30:	029b      	lsls	r3, r3, #10
 8005c32:	4013      	ands	r3, r2
 8005c34:	d0f0      	beq.n	8005c18 <HAL_RCC_OscConfig+0xcc>
 8005c36:	e015      	b.n	8005c64 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c38:	f7fd fa84 	bl	8003144 <HAL_GetTick>
 8005c3c:	0003      	movs	r3, r0
 8005c3e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c40:	e008      	b.n	8005c54 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c42:	f7fd fa7f 	bl	8003144 <HAL_GetTick>
 8005c46:	0002      	movs	r2, r0
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	2b64      	cmp	r3, #100	; 0x64
 8005c4e:	d901      	bls.n	8005c54 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e283      	b.n	800615c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c54:	4b88      	ldr	r3, [pc, #544]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	2380      	movs	r3, #128	; 0x80
 8005c5a:	029b      	lsls	r3, r3, #10
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	d1f0      	bne.n	8005c42 <HAL_RCC_OscConfig+0xf6>
 8005c60:	e000      	b.n	8005c64 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c62:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2202      	movs	r2, #2
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	d100      	bne.n	8005c70 <HAL_RCC_OscConfig+0x124>
 8005c6e:	e099      	b.n	8005da4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c70:	4b81      	ldr	r3, [pc, #516]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	2238      	movs	r2, #56	; 0x38
 8005c76:	4013      	ands	r3, r2
 8005c78:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c7a:	4b7f      	ldr	r3, [pc, #508]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	2203      	movs	r2, #3
 8005c80:	4013      	ands	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	2b10      	cmp	r3, #16
 8005c88:	d102      	bne.n	8005c90 <HAL_RCC_OscConfig+0x144>
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d002      	beq.n	8005c96 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d135      	bne.n	8005d02 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c96:	4b78      	ldr	r3, [pc, #480]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	2380      	movs	r3, #128	; 0x80
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	d005      	beq.n	8005cae <HAL_RCC_OscConfig+0x162>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e256      	b.n	800615c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cae:	4b72      	ldr	r3, [pc, #456]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	4a74      	ldr	r2, [pc, #464]	; (8005e84 <HAL_RCC_OscConfig+0x338>)
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	0019      	movs	r1, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	021a      	lsls	r2, r3, #8
 8005cbe:	4b6e      	ldr	r3, [pc, #440]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d112      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005cca:	4b6b      	ldr	r3, [pc, #428]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a6e      	ldr	r2, [pc, #440]	; (8005e88 <HAL_RCC_OscConfig+0x33c>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	0019      	movs	r1, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691a      	ldr	r2, [r3, #16]
 8005cd8:	4b67      	ldr	r3, [pc, #412]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005cde:	4b66      	ldr	r3, [pc, #408]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	0adb      	lsrs	r3, r3, #11
 8005ce4:	2207      	movs	r2, #7
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	4a68      	ldr	r2, [pc, #416]	; (8005e8c <HAL_RCC_OscConfig+0x340>)
 8005cea:	40da      	lsrs	r2, r3
 8005cec:	4b68      	ldr	r3, [pc, #416]	; (8005e90 <HAL_RCC_OscConfig+0x344>)
 8005cee:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005cf0:	4b68      	ldr	r3, [pc, #416]	; (8005e94 <HAL_RCC_OscConfig+0x348>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	f7fd f9c9 	bl	800308c <HAL_InitTick>
 8005cfa:	1e03      	subs	r3, r0, #0
 8005cfc:	d051      	beq.n	8005da2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e22c      	b.n	800615c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d030      	beq.n	8005d6c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005d0a:	4b5b      	ldr	r3, [pc, #364]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a5e      	ldr	r2, [pc, #376]	; (8005e88 <HAL_RCC_OscConfig+0x33c>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	0019      	movs	r1, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691a      	ldr	r2, [r3, #16]
 8005d18:	4b57      	ldr	r3, [pc, #348]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005d1e:	4b56      	ldr	r3, [pc, #344]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	4b55      	ldr	r3, [pc, #340]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005d24:	2180      	movs	r1, #128	; 0x80
 8005d26:	0049      	lsls	r1, r1, #1
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d2c:	f7fd fa0a 	bl	8003144 <HAL_GetTick>
 8005d30:	0003      	movs	r3, r0
 8005d32:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d34:	e008      	b.n	8005d48 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d36:	f7fd fa05 	bl	8003144 <HAL_GetTick>
 8005d3a:	0002      	movs	r2, r0
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d901      	bls.n	8005d48 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e209      	b.n	800615c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d48:	4b4b      	ldr	r3, [pc, #300]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	2380      	movs	r3, #128	; 0x80
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	4013      	ands	r3, r2
 8005d52:	d0f0      	beq.n	8005d36 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d54:	4b48      	ldr	r3, [pc, #288]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	4a4a      	ldr	r2, [pc, #296]	; (8005e84 <HAL_RCC_OscConfig+0x338>)
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	0019      	movs	r1, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	021a      	lsls	r2, r3, #8
 8005d64:	4b44      	ldr	r3, [pc, #272]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005d66:	430a      	orrs	r2, r1
 8005d68:	605a      	str	r2, [r3, #4]
 8005d6a:	e01b      	b.n	8005da4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005d6c:	4b42      	ldr	r3, [pc, #264]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	4b41      	ldr	r3, [pc, #260]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005d72:	4949      	ldr	r1, [pc, #292]	; (8005e98 <HAL_RCC_OscConfig+0x34c>)
 8005d74:	400a      	ands	r2, r1
 8005d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d78:	f7fd f9e4 	bl	8003144 <HAL_GetTick>
 8005d7c:	0003      	movs	r3, r0
 8005d7e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d80:	e008      	b.n	8005d94 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d82:	f7fd f9df 	bl	8003144 <HAL_GetTick>
 8005d86:	0002      	movs	r2, r0
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d901      	bls.n	8005d94 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e1e3      	b.n	800615c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d94:	4b38      	ldr	r3, [pc, #224]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	2380      	movs	r3, #128	; 0x80
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	d1f0      	bne.n	8005d82 <HAL_RCC_OscConfig+0x236>
 8005da0:	e000      	b.n	8005da4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005da2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2208      	movs	r2, #8
 8005daa:	4013      	ands	r3, r2
 8005dac:	d047      	beq.n	8005e3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005dae:	4b32      	ldr	r3, [pc, #200]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	2238      	movs	r2, #56	; 0x38
 8005db4:	4013      	ands	r3, r2
 8005db6:	2b18      	cmp	r3, #24
 8005db8:	d10a      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005dba:	4b2f      	ldr	r3, [pc, #188]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	d03c      	beq.n	8005e3e <HAL_RCC_OscConfig+0x2f2>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d138      	bne.n	8005e3e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e1c5      	b.n	800615c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d019      	beq.n	8005e0c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005dd8:	4b27      	ldr	r3, [pc, #156]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005dda:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005ddc:	4b26      	ldr	r3, [pc, #152]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005dde:	2101      	movs	r1, #1
 8005de0:	430a      	orrs	r2, r1
 8005de2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de4:	f7fd f9ae 	bl	8003144 <HAL_GetTick>
 8005de8:	0003      	movs	r3, r0
 8005dea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005dec:	e008      	b.n	8005e00 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dee:	f7fd f9a9 	bl	8003144 <HAL_GetTick>
 8005df2:	0002      	movs	r2, r0
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d901      	bls.n	8005e00 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e1ad      	b.n	800615c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e00:	4b1d      	ldr	r3, [pc, #116]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e04:	2202      	movs	r2, #2
 8005e06:	4013      	ands	r3, r2
 8005e08:	d0f1      	beq.n	8005dee <HAL_RCC_OscConfig+0x2a2>
 8005e0a:	e018      	b.n	8005e3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005e0c:	4b1a      	ldr	r3, [pc, #104]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005e0e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005e10:	4b19      	ldr	r3, [pc, #100]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005e12:	2101      	movs	r1, #1
 8005e14:	438a      	bics	r2, r1
 8005e16:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e18:	f7fd f994 	bl	8003144 <HAL_GetTick>
 8005e1c:	0003      	movs	r3, r0
 8005e1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e20:	e008      	b.n	8005e34 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e22:	f7fd f98f 	bl	8003144 <HAL_GetTick>
 8005e26:	0002      	movs	r2, r0
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d901      	bls.n	8005e34 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e193      	b.n	800615c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e34:	4b10      	ldr	r3, [pc, #64]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e38:	2202      	movs	r2, #2
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	d1f1      	bne.n	8005e22 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2204      	movs	r2, #4
 8005e44:	4013      	ands	r3, r2
 8005e46:	d100      	bne.n	8005e4a <HAL_RCC_OscConfig+0x2fe>
 8005e48:	e0c6      	b.n	8005fd8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e4a:	231f      	movs	r3, #31
 8005e4c:	18fb      	adds	r3, r7, r3
 8005e4e:	2200      	movs	r2, #0
 8005e50:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005e52:	4b09      	ldr	r3, [pc, #36]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	2238      	movs	r2, #56	; 0x38
 8005e58:	4013      	ands	r3, r2
 8005e5a:	2b20      	cmp	r3, #32
 8005e5c:	d11e      	bne.n	8005e9c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005e5e:	4b06      	ldr	r3, [pc, #24]	; (8005e78 <HAL_RCC_OscConfig+0x32c>)
 8005e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e62:	2202      	movs	r2, #2
 8005e64:	4013      	ands	r3, r2
 8005e66:	d100      	bne.n	8005e6a <HAL_RCC_OscConfig+0x31e>
 8005e68:	e0b6      	b.n	8005fd8 <HAL_RCC_OscConfig+0x48c>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d000      	beq.n	8005e74 <HAL_RCC_OscConfig+0x328>
 8005e72:	e0b1      	b.n	8005fd8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e171      	b.n	800615c <HAL_RCC_OscConfig+0x610>
 8005e78:	40021000 	.word	0x40021000
 8005e7c:	fffeffff 	.word	0xfffeffff
 8005e80:	fffbffff 	.word	0xfffbffff
 8005e84:	ffff80ff 	.word	0xffff80ff
 8005e88:	ffffc7ff 	.word	0xffffc7ff
 8005e8c:	00f42400 	.word	0x00f42400
 8005e90:	20000064 	.word	0x20000064
 8005e94:	20000068 	.word	0x20000068
 8005e98:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e9c:	4bb1      	ldr	r3, [pc, #708]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 8005e9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ea0:	2380      	movs	r3, #128	; 0x80
 8005ea2:	055b      	lsls	r3, r3, #21
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	d101      	bne.n	8005eac <HAL_RCC_OscConfig+0x360>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e000      	b.n	8005eae <HAL_RCC_OscConfig+0x362>
 8005eac:	2300      	movs	r3, #0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d011      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005eb2:	4bac      	ldr	r3, [pc, #688]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 8005eb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eb6:	4bab      	ldr	r3, [pc, #684]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 8005eb8:	2180      	movs	r1, #128	; 0x80
 8005eba:	0549      	lsls	r1, r1, #21
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	63da      	str	r2, [r3, #60]	; 0x3c
 8005ec0:	4ba8      	ldr	r3, [pc, #672]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 8005ec2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ec4:	2380      	movs	r3, #128	; 0x80
 8005ec6:	055b      	lsls	r3, r3, #21
 8005ec8:	4013      	ands	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005ece:	231f      	movs	r3, #31
 8005ed0:	18fb      	adds	r3, r7, r3
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ed6:	4ba4      	ldr	r3, [pc, #656]	; (8006168 <HAL_RCC_OscConfig+0x61c>)
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	2380      	movs	r3, #128	; 0x80
 8005edc:	005b      	lsls	r3, r3, #1
 8005ede:	4013      	ands	r3, r2
 8005ee0:	d11a      	bne.n	8005f18 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ee2:	4ba1      	ldr	r3, [pc, #644]	; (8006168 <HAL_RCC_OscConfig+0x61c>)
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	4ba0      	ldr	r3, [pc, #640]	; (8006168 <HAL_RCC_OscConfig+0x61c>)
 8005ee8:	2180      	movs	r1, #128	; 0x80
 8005eea:	0049      	lsls	r1, r1, #1
 8005eec:	430a      	orrs	r2, r1
 8005eee:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005ef0:	f7fd f928 	bl	8003144 <HAL_GetTick>
 8005ef4:	0003      	movs	r3, r0
 8005ef6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ef8:	e008      	b.n	8005f0c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005efa:	f7fd f923 	bl	8003144 <HAL_GetTick>
 8005efe:	0002      	movs	r2, r0
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d901      	bls.n	8005f0c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e127      	b.n	800615c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f0c:	4b96      	ldr	r3, [pc, #600]	; (8006168 <HAL_RCC_OscConfig+0x61c>)
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	2380      	movs	r3, #128	; 0x80
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	4013      	ands	r3, r2
 8005f16:	d0f0      	beq.n	8005efa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d106      	bne.n	8005f2e <HAL_RCC_OscConfig+0x3e2>
 8005f20:	4b90      	ldr	r3, [pc, #576]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 8005f22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f24:	4b8f      	ldr	r3, [pc, #572]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 8005f26:	2101      	movs	r1, #1
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f2c:	e01c      	b.n	8005f68 <HAL_RCC_OscConfig+0x41c>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	2b05      	cmp	r3, #5
 8005f34:	d10c      	bne.n	8005f50 <HAL_RCC_OscConfig+0x404>
 8005f36:	4b8b      	ldr	r3, [pc, #556]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 8005f38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f3a:	4b8a      	ldr	r3, [pc, #552]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 8005f3c:	2104      	movs	r1, #4
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f42:	4b88      	ldr	r3, [pc, #544]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 8005f44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f46:	4b87      	ldr	r3, [pc, #540]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 8005f48:	2101      	movs	r1, #1
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f4e:	e00b      	b.n	8005f68 <HAL_RCC_OscConfig+0x41c>
 8005f50:	4b84      	ldr	r3, [pc, #528]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 8005f52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f54:	4b83      	ldr	r3, [pc, #524]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 8005f56:	2101      	movs	r1, #1
 8005f58:	438a      	bics	r2, r1
 8005f5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f5c:	4b81      	ldr	r3, [pc, #516]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 8005f5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f60:	4b80      	ldr	r3, [pc, #512]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 8005f62:	2104      	movs	r1, #4
 8005f64:	438a      	bics	r2, r1
 8005f66:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d014      	beq.n	8005f9a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f70:	f7fd f8e8 	bl	8003144 <HAL_GetTick>
 8005f74:	0003      	movs	r3, r0
 8005f76:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f78:	e009      	b.n	8005f8e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f7a:	f7fd f8e3 	bl	8003144 <HAL_GetTick>
 8005f7e:	0002      	movs	r2, r0
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	4a79      	ldr	r2, [pc, #484]	; (800616c <HAL_RCC_OscConfig+0x620>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d901      	bls.n	8005f8e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e0e6      	b.n	800615c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f8e:	4b75      	ldr	r3, [pc, #468]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 8005f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f92:	2202      	movs	r2, #2
 8005f94:	4013      	ands	r3, r2
 8005f96:	d0f0      	beq.n	8005f7a <HAL_RCC_OscConfig+0x42e>
 8005f98:	e013      	b.n	8005fc2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f9a:	f7fd f8d3 	bl	8003144 <HAL_GetTick>
 8005f9e:	0003      	movs	r3, r0
 8005fa0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005fa2:	e009      	b.n	8005fb8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fa4:	f7fd f8ce 	bl	8003144 <HAL_GetTick>
 8005fa8:	0002      	movs	r2, r0
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	4a6f      	ldr	r2, [pc, #444]	; (800616c <HAL_RCC_OscConfig+0x620>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d901      	bls.n	8005fb8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e0d1      	b.n	800615c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005fb8:	4b6a      	ldr	r3, [pc, #424]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 8005fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fbc:	2202      	movs	r2, #2
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	d1f0      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005fc2:	231f      	movs	r3, #31
 8005fc4:	18fb      	adds	r3, r7, r3
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d105      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005fcc:	4b65      	ldr	r3, [pc, #404]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 8005fce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fd0:	4b64      	ldr	r3, [pc, #400]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 8005fd2:	4967      	ldr	r1, [pc, #412]	; (8006170 <HAL_RCC_OscConfig+0x624>)
 8005fd4:	400a      	ands	r2, r1
 8005fd6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d100      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x496>
 8005fe0:	e0bb      	b.n	800615a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fe2:	4b60      	ldr	r3, [pc, #384]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	2238      	movs	r2, #56	; 0x38
 8005fe8:	4013      	ands	r3, r2
 8005fea:	2b10      	cmp	r3, #16
 8005fec:	d100      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x4a4>
 8005fee:	e07b      	b.n	80060e8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	69db      	ldr	r3, [r3, #28]
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d156      	bne.n	80060a6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ff8:	4b5a      	ldr	r3, [pc, #360]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	4b59      	ldr	r3, [pc, #356]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 8005ffe:	495d      	ldr	r1, [pc, #372]	; (8006174 <HAL_RCC_OscConfig+0x628>)
 8006000:	400a      	ands	r2, r1
 8006002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006004:	f7fd f89e 	bl	8003144 <HAL_GetTick>
 8006008:	0003      	movs	r3, r0
 800600a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800600c:	e008      	b.n	8006020 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800600e:	f7fd f899 	bl	8003144 <HAL_GetTick>
 8006012:	0002      	movs	r2, r0
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	2b02      	cmp	r3, #2
 800601a:	d901      	bls.n	8006020 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e09d      	b.n	800615c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006020:	4b50      	ldr	r3, [pc, #320]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	2380      	movs	r3, #128	; 0x80
 8006026:	049b      	lsls	r3, r3, #18
 8006028:	4013      	ands	r3, r2
 800602a:	d1f0      	bne.n	800600e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800602c:	4b4d      	ldr	r3, [pc, #308]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	4a51      	ldr	r2, [pc, #324]	; (8006178 <HAL_RCC_OscConfig+0x62c>)
 8006032:	4013      	ands	r3, r2
 8006034:	0019      	movs	r1, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1a      	ldr	r2, [r3, #32]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603e:	431a      	orrs	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006044:	021b      	lsls	r3, r3, #8
 8006046:	431a      	orrs	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604c:	431a      	orrs	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006052:	431a      	orrs	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006058:	431a      	orrs	r2, r3
 800605a:	4b42      	ldr	r3, [pc, #264]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 800605c:	430a      	orrs	r2, r1
 800605e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006060:	4b40      	ldr	r3, [pc, #256]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	4b3f      	ldr	r3, [pc, #252]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 8006066:	2180      	movs	r1, #128	; 0x80
 8006068:	0449      	lsls	r1, r1, #17
 800606a:	430a      	orrs	r2, r1
 800606c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800606e:	4b3d      	ldr	r3, [pc, #244]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 8006070:	68da      	ldr	r2, [r3, #12]
 8006072:	4b3c      	ldr	r3, [pc, #240]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 8006074:	2180      	movs	r1, #128	; 0x80
 8006076:	0549      	lsls	r1, r1, #21
 8006078:	430a      	orrs	r2, r1
 800607a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800607c:	f7fd f862 	bl	8003144 <HAL_GetTick>
 8006080:	0003      	movs	r3, r0
 8006082:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006084:	e008      	b.n	8006098 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006086:	f7fd f85d 	bl	8003144 <HAL_GetTick>
 800608a:	0002      	movs	r2, r0
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	2b02      	cmp	r3, #2
 8006092:	d901      	bls.n	8006098 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e061      	b.n	800615c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006098:	4b32      	ldr	r3, [pc, #200]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	2380      	movs	r3, #128	; 0x80
 800609e:	049b      	lsls	r3, r3, #18
 80060a0:	4013      	ands	r3, r2
 80060a2:	d0f0      	beq.n	8006086 <HAL_RCC_OscConfig+0x53a>
 80060a4:	e059      	b.n	800615a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060a6:	4b2f      	ldr	r3, [pc, #188]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	4b2e      	ldr	r3, [pc, #184]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 80060ac:	4931      	ldr	r1, [pc, #196]	; (8006174 <HAL_RCC_OscConfig+0x628>)
 80060ae:	400a      	ands	r2, r1
 80060b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b2:	f7fd f847 	bl	8003144 <HAL_GetTick>
 80060b6:	0003      	movs	r3, r0
 80060b8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060bc:	f7fd f842 	bl	8003144 <HAL_GetTick>
 80060c0:	0002      	movs	r2, r0
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e046      	b.n	800615c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060ce:	4b25      	ldr	r3, [pc, #148]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	2380      	movs	r3, #128	; 0x80
 80060d4:	049b      	lsls	r3, r3, #18
 80060d6:	4013      	ands	r3, r2
 80060d8:	d1f0      	bne.n	80060bc <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80060da:	4b22      	ldr	r3, [pc, #136]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	4b21      	ldr	r3, [pc, #132]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 80060e0:	4926      	ldr	r1, [pc, #152]	; (800617c <HAL_RCC_OscConfig+0x630>)
 80060e2:	400a      	ands	r2, r1
 80060e4:	60da      	str	r2, [r3, #12]
 80060e6:	e038      	b.n	800615a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	69db      	ldr	r3, [r3, #28]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d101      	bne.n	80060f4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e033      	b.n	800615c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80060f4:	4b1b      	ldr	r3, [pc, #108]	; (8006164 <HAL_RCC_OscConfig+0x618>)
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2203      	movs	r2, #3
 80060fe:	401a      	ands	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	429a      	cmp	r2, r3
 8006106:	d126      	bne.n	8006156 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	2270      	movs	r2, #112	; 0x70
 800610c:	401a      	ands	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006112:	429a      	cmp	r2, r3
 8006114:	d11f      	bne.n	8006156 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	23fe      	movs	r3, #254	; 0xfe
 800611a:	01db      	lsls	r3, r3, #7
 800611c:	401a      	ands	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006122:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006124:	429a      	cmp	r2, r3
 8006126:	d116      	bne.n	8006156 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	23f8      	movs	r3, #248	; 0xf8
 800612c:	039b      	lsls	r3, r3, #14
 800612e:	401a      	ands	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006134:	429a      	cmp	r2, r3
 8006136:	d10e      	bne.n	8006156 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	23e0      	movs	r3, #224	; 0xe0
 800613c:	051b      	lsls	r3, r3, #20
 800613e:	401a      	ands	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006144:	429a      	cmp	r2, r3
 8006146:	d106      	bne.n	8006156 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	0f5b      	lsrs	r3, r3, #29
 800614c:	075a      	lsls	r2, r3, #29
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006152:	429a      	cmp	r2, r3
 8006154:	d001      	beq.n	800615a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e000      	b.n	800615c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	0018      	movs	r0, r3
 800615e:	46bd      	mov	sp, r7
 8006160:	b008      	add	sp, #32
 8006162:	bd80      	pop	{r7, pc}
 8006164:	40021000 	.word	0x40021000
 8006168:	40007000 	.word	0x40007000
 800616c:	00001388 	.word	0x00001388
 8006170:	efffffff 	.word	0xefffffff
 8006174:	feffffff 	.word	0xfeffffff
 8006178:	11c1808c 	.word	0x11c1808c
 800617c:	eefefffc 	.word	0xeefefffc

08006180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e0e9      	b.n	8006368 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006194:	4b76      	ldr	r3, [pc, #472]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2207      	movs	r2, #7
 800619a:	4013      	ands	r3, r2
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d91e      	bls.n	80061e0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061a2:	4b73      	ldr	r3, [pc, #460]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2207      	movs	r2, #7
 80061a8:	4393      	bics	r3, r2
 80061aa:	0019      	movs	r1, r3
 80061ac:	4b70      	ldr	r3, [pc, #448]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80061b4:	f7fc ffc6 	bl	8003144 <HAL_GetTick>
 80061b8:	0003      	movs	r3, r0
 80061ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80061bc:	e009      	b.n	80061d2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061be:	f7fc ffc1 	bl	8003144 <HAL_GetTick>
 80061c2:	0002      	movs	r2, r0
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	4a6a      	ldr	r2, [pc, #424]	; (8006374 <HAL_RCC_ClockConfig+0x1f4>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e0ca      	b.n	8006368 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80061d2:	4b67      	ldr	r3, [pc, #412]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2207      	movs	r2, #7
 80061d8:	4013      	ands	r3, r2
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d1ee      	bne.n	80061be <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2202      	movs	r2, #2
 80061e6:	4013      	ands	r3, r2
 80061e8:	d015      	beq.n	8006216 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2204      	movs	r2, #4
 80061f0:	4013      	ands	r3, r2
 80061f2:	d006      	beq.n	8006202 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80061f4:	4b60      	ldr	r3, [pc, #384]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 80061f6:	689a      	ldr	r2, [r3, #8]
 80061f8:	4b5f      	ldr	r3, [pc, #380]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 80061fa:	21e0      	movs	r1, #224	; 0xe0
 80061fc:	01c9      	lsls	r1, r1, #7
 80061fe:	430a      	orrs	r2, r1
 8006200:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006202:	4b5d      	ldr	r3, [pc, #372]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	4a5d      	ldr	r2, [pc, #372]	; (800637c <HAL_RCC_ClockConfig+0x1fc>)
 8006208:	4013      	ands	r3, r2
 800620a:	0019      	movs	r1, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	4b59      	ldr	r3, [pc, #356]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 8006212:	430a      	orrs	r2, r1
 8006214:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2201      	movs	r2, #1
 800621c:	4013      	ands	r3, r2
 800621e:	d057      	beq.n	80062d0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d107      	bne.n	8006238 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006228:	4b53      	ldr	r3, [pc, #332]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	2380      	movs	r3, #128	; 0x80
 800622e:	029b      	lsls	r3, r3, #10
 8006230:	4013      	ands	r3, r2
 8006232:	d12b      	bne.n	800628c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e097      	b.n	8006368 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	2b02      	cmp	r3, #2
 800623e:	d107      	bne.n	8006250 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006240:	4b4d      	ldr	r3, [pc, #308]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	2380      	movs	r3, #128	; 0x80
 8006246:	049b      	lsls	r3, r3, #18
 8006248:	4013      	ands	r3, r2
 800624a:	d11f      	bne.n	800628c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e08b      	b.n	8006368 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d107      	bne.n	8006268 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006258:	4b47      	ldr	r3, [pc, #284]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	2380      	movs	r3, #128	; 0x80
 800625e:	00db      	lsls	r3, r3, #3
 8006260:	4013      	ands	r3, r2
 8006262:	d113      	bne.n	800628c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e07f      	b.n	8006368 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	2b03      	cmp	r3, #3
 800626e:	d106      	bne.n	800627e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006270:	4b41      	ldr	r3, [pc, #260]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 8006272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006274:	2202      	movs	r2, #2
 8006276:	4013      	ands	r3, r2
 8006278:	d108      	bne.n	800628c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e074      	b.n	8006368 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800627e:	4b3e      	ldr	r3, [pc, #248]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 8006280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006282:	2202      	movs	r2, #2
 8006284:	4013      	ands	r3, r2
 8006286:	d101      	bne.n	800628c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e06d      	b.n	8006368 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800628c:	4b3a      	ldr	r3, [pc, #232]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	2207      	movs	r2, #7
 8006292:	4393      	bics	r3, r2
 8006294:	0019      	movs	r1, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	4b37      	ldr	r3, [pc, #220]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 800629c:	430a      	orrs	r2, r1
 800629e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062a0:	f7fc ff50 	bl	8003144 <HAL_GetTick>
 80062a4:	0003      	movs	r3, r0
 80062a6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062a8:	e009      	b.n	80062be <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062aa:	f7fc ff4b 	bl	8003144 <HAL_GetTick>
 80062ae:	0002      	movs	r2, r0
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	4a2f      	ldr	r2, [pc, #188]	; (8006374 <HAL_RCC_ClockConfig+0x1f4>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d901      	bls.n	80062be <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e054      	b.n	8006368 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062be:	4b2e      	ldr	r3, [pc, #184]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	2238      	movs	r2, #56	; 0x38
 80062c4:	401a      	ands	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	00db      	lsls	r3, r3, #3
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d1ec      	bne.n	80062aa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80062d0:	4b27      	ldr	r3, [pc, #156]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2207      	movs	r2, #7
 80062d6:	4013      	ands	r3, r2
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d21e      	bcs.n	800631c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062de:	4b24      	ldr	r3, [pc, #144]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2207      	movs	r2, #7
 80062e4:	4393      	bics	r3, r2
 80062e6:	0019      	movs	r1, r3
 80062e8:	4b21      	ldr	r3, [pc, #132]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	430a      	orrs	r2, r1
 80062ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80062f0:	f7fc ff28 	bl	8003144 <HAL_GetTick>
 80062f4:	0003      	movs	r3, r0
 80062f6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80062f8:	e009      	b.n	800630e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062fa:	f7fc ff23 	bl	8003144 <HAL_GetTick>
 80062fe:	0002      	movs	r2, r0
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	4a1b      	ldr	r2, [pc, #108]	; (8006374 <HAL_RCC_ClockConfig+0x1f4>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d901      	bls.n	800630e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e02c      	b.n	8006368 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800630e:	4b18      	ldr	r3, [pc, #96]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2207      	movs	r2, #7
 8006314:	4013      	ands	r3, r2
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	429a      	cmp	r2, r3
 800631a:	d1ee      	bne.n	80062fa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2204      	movs	r2, #4
 8006322:	4013      	ands	r3, r2
 8006324:	d009      	beq.n	800633a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006326:	4b14      	ldr	r3, [pc, #80]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	4a15      	ldr	r2, [pc, #84]	; (8006380 <HAL_RCC_ClockConfig+0x200>)
 800632c:	4013      	ands	r3, r2
 800632e:	0019      	movs	r1, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68da      	ldr	r2, [r3, #12]
 8006334:	4b10      	ldr	r3, [pc, #64]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 8006336:	430a      	orrs	r2, r1
 8006338:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800633a:	f000 f829 	bl	8006390 <HAL_RCC_GetSysClockFreq>
 800633e:	0001      	movs	r1, r0
 8006340:	4b0d      	ldr	r3, [pc, #52]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	0a1b      	lsrs	r3, r3, #8
 8006346:	220f      	movs	r2, #15
 8006348:	401a      	ands	r2, r3
 800634a:	4b0e      	ldr	r3, [pc, #56]	; (8006384 <HAL_RCC_ClockConfig+0x204>)
 800634c:	0092      	lsls	r2, r2, #2
 800634e:	58d3      	ldr	r3, [r2, r3]
 8006350:	221f      	movs	r2, #31
 8006352:	4013      	ands	r3, r2
 8006354:	000a      	movs	r2, r1
 8006356:	40da      	lsrs	r2, r3
 8006358:	4b0b      	ldr	r3, [pc, #44]	; (8006388 <HAL_RCC_ClockConfig+0x208>)
 800635a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800635c:	4b0b      	ldr	r3, [pc, #44]	; (800638c <HAL_RCC_ClockConfig+0x20c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	0018      	movs	r0, r3
 8006362:	f7fc fe93 	bl	800308c <HAL_InitTick>
 8006366:	0003      	movs	r3, r0
}
 8006368:	0018      	movs	r0, r3
 800636a:	46bd      	mov	sp, r7
 800636c:	b004      	add	sp, #16
 800636e:	bd80      	pop	{r7, pc}
 8006370:	40022000 	.word	0x40022000
 8006374:	00001388 	.word	0x00001388
 8006378:	40021000 	.word	0x40021000
 800637c:	fffff0ff 	.word	0xfffff0ff
 8006380:	ffff8fff 	.word	0xffff8fff
 8006384:	0800a6a4 	.word	0x0800a6a4
 8006388:	20000064 	.word	0x20000064
 800638c:	20000068 	.word	0x20000068

08006390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006396:	4b3c      	ldr	r3, [pc, #240]	; (8006488 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	2238      	movs	r2, #56	; 0x38
 800639c:	4013      	ands	r3, r2
 800639e:	d10f      	bne.n	80063c0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80063a0:	4b39      	ldr	r3, [pc, #228]	; (8006488 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	0adb      	lsrs	r3, r3, #11
 80063a6:	2207      	movs	r2, #7
 80063a8:	4013      	ands	r3, r2
 80063aa:	2201      	movs	r2, #1
 80063ac:	409a      	lsls	r2, r3
 80063ae:	0013      	movs	r3, r2
 80063b0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80063b2:	6839      	ldr	r1, [r7, #0]
 80063b4:	4835      	ldr	r0, [pc, #212]	; (800648c <HAL_RCC_GetSysClockFreq+0xfc>)
 80063b6:	f7f9 fea5 	bl	8000104 <__udivsi3>
 80063ba:	0003      	movs	r3, r0
 80063bc:	613b      	str	r3, [r7, #16]
 80063be:	e05d      	b.n	800647c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063c0:	4b31      	ldr	r3, [pc, #196]	; (8006488 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	2238      	movs	r2, #56	; 0x38
 80063c6:	4013      	ands	r3, r2
 80063c8:	2b08      	cmp	r3, #8
 80063ca:	d102      	bne.n	80063d2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80063cc:	4b30      	ldr	r3, [pc, #192]	; (8006490 <HAL_RCC_GetSysClockFreq+0x100>)
 80063ce:	613b      	str	r3, [r7, #16]
 80063d0:	e054      	b.n	800647c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063d2:	4b2d      	ldr	r3, [pc, #180]	; (8006488 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	2238      	movs	r2, #56	; 0x38
 80063d8:	4013      	ands	r3, r2
 80063da:	2b10      	cmp	r3, #16
 80063dc:	d138      	bne.n	8006450 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80063de:	4b2a      	ldr	r3, [pc, #168]	; (8006488 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	2203      	movs	r2, #3
 80063e4:	4013      	ands	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80063e8:	4b27      	ldr	r3, [pc, #156]	; (8006488 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	091b      	lsrs	r3, r3, #4
 80063ee:	2207      	movs	r2, #7
 80063f0:	4013      	ands	r3, r2
 80063f2:	3301      	adds	r3, #1
 80063f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2b03      	cmp	r3, #3
 80063fa:	d10d      	bne.n	8006418 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80063fc:	68b9      	ldr	r1, [r7, #8]
 80063fe:	4824      	ldr	r0, [pc, #144]	; (8006490 <HAL_RCC_GetSysClockFreq+0x100>)
 8006400:	f7f9 fe80 	bl	8000104 <__udivsi3>
 8006404:	0003      	movs	r3, r0
 8006406:	0019      	movs	r1, r3
 8006408:	4b1f      	ldr	r3, [pc, #124]	; (8006488 <HAL_RCC_GetSysClockFreq+0xf8>)
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	0a1b      	lsrs	r3, r3, #8
 800640e:	227f      	movs	r2, #127	; 0x7f
 8006410:	4013      	ands	r3, r2
 8006412:	434b      	muls	r3, r1
 8006414:	617b      	str	r3, [r7, #20]
        break;
 8006416:	e00d      	b.n	8006434 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006418:	68b9      	ldr	r1, [r7, #8]
 800641a:	481c      	ldr	r0, [pc, #112]	; (800648c <HAL_RCC_GetSysClockFreq+0xfc>)
 800641c:	f7f9 fe72 	bl	8000104 <__udivsi3>
 8006420:	0003      	movs	r3, r0
 8006422:	0019      	movs	r1, r3
 8006424:	4b18      	ldr	r3, [pc, #96]	; (8006488 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	0a1b      	lsrs	r3, r3, #8
 800642a:	227f      	movs	r2, #127	; 0x7f
 800642c:	4013      	ands	r3, r2
 800642e:	434b      	muls	r3, r1
 8006430:	617b      	str	r3, [r7, #20]
        break;
 8006432:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006434:	4b14      	ldr	r3, [pc, #80]	; (8006488 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	0f5b      	lsrs	r3, r3, #29
 800643a:	2207      	movs	r2, #7
 800643c:	4013      	ands	r3, r2
 800643e:	3301      	adds	r3, #1
 8006440:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006442:	6879      	ldr	r1, [r7, #4]
 8006444:	6978      	ldr	r0, [r7, #20]
 8006446:	f7f9 fe5d 	bl	8000104 <__udivsi3>
 800644a:	0003      	movs	r3, r0
 800644c:	613b      	str	r3, [r7, #16]
 800644e:	e015      	b.n	800647c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006450:	4b0d      	ldr	r3, [pc, #52]	; (8006488 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	2238      	movs	r2, #56	; 0x38
 8006456:	4013      	ands	r3, r2
 8006458:	2b20      	cmp	r3, #32
 800645a:	d103      	bne.n	8006464 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800645c:	2380      	movs	r3, #128	; 0x80
 800645e:	021b      	lsls	r3, r3, #8
 8006460:	613b      	str	r3, [r7, #16]
 8006462:	e00b      	b.n	800647c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006464:	4b08      	ldr	r3, [pc, #32]	; (8006488 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	2238      	movs	r2, #56	; 0x38
 800646a:	4013      	ands	r3, r2
 800646c:	2b18      	cmp	r3, #24
 800646e:	d103      	bne.n	8006478 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006470:	23fa      	movs	r3, #250	; 0xfa
 8006472:	01db      	lsls	r3, r3, #7
 8006474:	613b      	str	r3, [r7, #16]
 8006476:	e001      	b.n	800647c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006478:	2300      	movs	r3, #0
 800647a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800647c:	693b      	ldr	r3, [r7, #16]
}
 800647e:	0018      	movs	r0, r3
 8006480:	46bd      	mov	sp, r7
 8006482:	b006      	add	sp, #24
 8006484:	bd80      	pop	{r7, pc}
 8006486:	46c0      	nop			; (mov r8, r8)
 8006488:	40021000 	.word	0x40021000
 800648c:	00f42400 	.word	0x00f42400
 8006490:	007a1200 	.word	0x007a1200

08006494 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006498:	4b02      	ldr	r3, [pc, #8]	; (80064a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800649a:	681b      	ldr	r3, [r3, #0]
}
 800649c:	0018      	movs	r0, r3
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	46c0      	nop			; (mov r8, r8)
 80064a4:	20000064 	.word	0x20000064

080064a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064a8:	b5b0      	push	{r4, r5, r7, lr}
 80064aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80064ac:	f7ff fff2 	bl	8006494 <HAL_RCC_GetHCLKFreq>
 80064b0:	0004      	movs	r4, r0
 80064b2:	f7ff fb3f 	bl	8005b34 <LL_RCC_GetAPB1Prescaler>
 80064b6:	0003      	movs	r3, r0
 80064b8:	0b1a      	lsrs	r2, r3, #12
 80064ba:	4b05      	ldr	r3, [pc, #20]	; (80064d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80064bc:	0092      	lsls	r2, r2, #2
 80064be:	58d3      	ldr	r3, [r2, r3]
 80064c0:	221f      	movs	r2, #31
 80064c2:	4013      	ands	r3, r2
 80064c4:	40dc      	lsrs	r4, r3
 80064c6:	0023      	movs	r3, r4
}
 80064c8:	0018      	movs	r0, r3
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bdb0      	pop	{r4, r5, r7, pc}
 80064ce:	46c0      	nop			; (mov r8, r8)
 80064d0:	0800a6e4 	.word	0x0800a6e4

080064d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80064dc:	2313      	movs	r3, #19
 80064de:	18fb      	adds	r3, r7, r3
 80064e0:	2200      	movs	r2, #0
 80064e2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064e4:	2312      	movs	r3, #18
 80064e6:	18fb      	adds	r3, r7, r3
 80064e8:	2200      	movs	r2, #0
 80064ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	2380      	movs	r3, #128	; 0x80
 80064f2:	029b      	lsls	r3, r3, #10
 80064f4:	4013      	ands	r3, r2
 80064f6:	d100      	bne.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x26>
 80064f8:	e0a3      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064fa:	2011      	movs	r0, #17
 80064fc:	183b      	adds	r3, r7, r0
 80064fe:	2200      	movs	r2, #0
 8006500:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006502:	4bc3      	ldr	r3, [pc, #780]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006504:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006506:	2380      	movs	r3, #128	; 0x80
 8006508:	055b      	lsls	r3, r3, #21
 800650a:	4013      	ands	r3, r2
 800650c:	d110      	bne.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800650e:	4bc0      	ldr	r3, [pc, #768]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006510:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006512:	4bbf      	ldr	r3, [pc, #764]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006514:	2180      	movs	r1, #128	; 0x80
 8006516:	0549      	lsls	r1, r1, #21
 8006518:	430a      	orrs	r2, r1
 800651a:	63da      	str	r2, [r3, #60]	; 0x3c
 800651c:	4bbc      	ldr	r3, [pc, #752]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800651e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006520:	2380      	movs	r3, #128	; 0x80
 8006522:	055b      	lsls	r3, r3, #21
 8006524:	4013      	ands	r3, r2
 8006526:	60bb      	str	r3, [r7, #8]
 8006528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800652a:	183b      	adds	r3, r7, r0
 800652c:	2201      	movs	r2, #1
 800652e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006530:	4bb8      	ldr	r3, [pc, #736]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	4bb7      	ldr	r3, [pc, #732]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006536:	2180      	movs	r1, #128	; 0x80
 8006538:	0049      	lsls	r1, r1, #1
 800653a:	430a      	orrs	r2, r1
 800653c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800653e:	f7fc fe01 	bl	8003144 <HAL_GetTick>
 8006542:	0003      	movs	r3, r0
 8006544:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006546:	e00b      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006548:	f7fc fdfc 	bl	8003144 <HAL_GetTick>
 800654c:	0002      	movs	r2, r0
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	2b02      	cmp	r3, #2
 8006554:	d904      	bls.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006556:	2313      	movs	r3, #19
 8006558:	18fb      	adds	r3, r7, r3
 800655a:	2203      	movs	r2, #3
 800655c:	701a      	strb	r2, [r3, #0]
        break;
 800655e:	e005      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006560:	4bac      	ldr	r3, [pc, #688]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	2380      	movs	r3, #128	; 0x80
 8006566:	005b      	lsls	r3, r3, #1
 8006568:	4013      	ands	r3, r2
 800656a:	d0ed      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800656c:	2313      	movs	r3, #19
 800656e:	18fb      	adds	r3, r7, r3
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d154      	bne.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006576:	4ba6      	ldr	r3, [pc, #664]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006578:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800657a:	23c0      	movs	r3, #192	; 0xc0
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4013      	ands	r3, r2
 8006580:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d019      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	429a      	cmp	r2, r3
 8006590:	d014      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006592:	4b9f      	ldr	r3, [pc, #636]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006596:	4aa0      	ldr	r2, [pc, #640]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006598:	4013      	ands	r3, r2
 800659a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800659c:	4b9c      	ldr	r3, [pc, #624]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800659e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80065a0:	4b9b      	ldr	r3, [pc, #620]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065a2:	2180      	movs	r1, #128	; 0x80
 80065a4:	0249      	lsls	r1, r1, #9
 80065a6:	430a      	orrs	r2, r1
 80065a8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065aa:	4b99      	ldr	r3, [pc, #612]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80065ae:	4b98      	ldr	r3, [pc, #608]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065b0:	499a      	ldr	r1, [pc, #616]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80065b2:	400a      	ands	r2, r1
 80065b4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80065b6:	4b96      	ldr	r3, [pc, #600]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	2201      	movs	r2, #1
 80065c0:	4013      	ands	r3, r2
 80065c2:	d016      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c4:	f7fc fdbe 	bl	8003144 <HAL_GetTick>
 80065c8:	0003      	movs	r3, r0
 80065ca:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065cc:	e00c      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065ce:	f7fc fdb9 	bl	8003144 <HAL_GetTick>
 80065d2:	0002      	movs	r2, r0
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	4a91      	ldr	r2, [pc, #580]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d904      	bls.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80065de:	2313      	movs	r3, #19
 80065e0:	18fb      	adds	r3, r7, r3
 80065e2:	2203      	movs	r2, #3
 80065e4:	701a      	strb	r2, [r3, #0]
            break;
 80065e6:	e004      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065e8:	4b89      	ldr	r3, [pc, #548]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ec:	2202      	movs	r2, #2
 80065ee:	4013      	ands	r3, r2
 80065f0:	d0ed      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80065f2:	2313      	movs	r3, #19
 80065f4:	18fb      	adds	r3, r7, r3
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10a      	bne.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065fc:	4b84      	ldr	r3, [pc, #528]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006600:	4a85      	ldr	r2, [pc, #532]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006602:	4013      	ands	r3, r2
 8006604:	0019      	movs	r1, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800660a:	4b81      	ldr	r3, [pc, #516]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800660c:	430a      	orrs	r2, r1
 800660e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006610:	e00c      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006612:	2312      	movs	r3, #18
 8006614:	18fb      	adds	r3, r7, r3
 8006616:	2213      	movs	r2, #19
 8006618:	18ba      	adds	r2, r7, r2
 800661a:	7812      	ldrb	r2, [r2, #0]
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	e005      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006620:	2312      	movs	r3, #18
 8006622:	18fb      	adds	r3, r7, r3
 8006624:	2213      	movs	r2, #19
 8006626:	18ba      	adds	r2, r7, r2
 8006628:	7812      	ldrb	r2, [r2, #0]
 800662a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800662c:	2311      	movs	r3, #17
 800662e:	18fb      	adds	r3, r7, r3
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d105      	bne.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006636:	4b76      	ldr	r3, [pc, #472]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006638:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800663a:	4b75      	ldr	r3, [pc, #468]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800663c:	4979      	ldr	r1, [pc, #484]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800663e:	400a      	ands	r2, r1
 8006640:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2201      	movs	r2, #1
 8006648:	4013      	ands	r3, r2
 800664a:	d009      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800664c:	4b70      	ldr	r3, [pc, #448]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800664e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006650:	2203      	movs	r2, #3
 8006652:	4393      	bics	r3, r2
 8006654:	0019      	movs	r1, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	4b6d      	ldr	r3, [pc, #436]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800665c:	430a      	orrs	r2, r1
 800665e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2202      	movs	r2, #2
 8006666:	4013      	ands	r3, r2
 8006668:	d009      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800666a:	4b69      	ldr	r3, [pc, #420]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800666c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666e:	220c      	movs	r2, #12
 8006670:	4393      	bics	r3, r2
 8006672:	0019      	movs	r1, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	4b65      	ldr	r3, [pc, #404]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800667a:	430a      	orrs	r2, r1
 800667c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2210      	movs	r2, #16
 8006684:	4013      	ands	r3, r2
 8006686:	d009      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006688:	4b61      	ldr	r3, [pc, #388]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800668a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800668c:	4a66      	ldr	r2, [pc, #408]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800668e:	4013      	ands	r3, r2
 8006690:	0019      	movs	r1, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	68da      	ldr	r2, [r3, #12]
 8006696:	4b5e      	ldr	r3, [pc, #376]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006698:	430a      	orrs	r2, r1
 800669a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	2380      	movs	r3, #128	; 0x80
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4013      	ands	r3, r2
 80066a6:	d009      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066a8:	4b59      	ldr	r3, [pc, #356]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ac:	4a5f      	ldr	r2, [pc, #380]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80066ae:	4013      	ands	r3, r2
 80066b0:	0019      	movs	r1, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	699a      	ldr	r2, [r3, #24]
 80066b6:	4b56      	ldr	r3, [pc, #344]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066b8:	430a      	orrs	r2, r1
 80066ba:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	2380      	movs	r3, #128	; 0x80
 80066c2:	00db      	lsls	r3, r3, #3
 80066c4:	4013      	ands	r3, r2
 80066c6:	d009      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80066c8:	4b51      	ldr	r3, [pc, #324]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066cc:	4a58      	ldr	r2, [pc, #352]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066ce:	4013      	ands	r3, r2
 80066d0:	0019      	movs	r1, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	69da      	ldr	r2, [r3, #28]
 80066d6:	4b4e      	ldr	r3, [pc, #312]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066d8:	430a      	orrs	r2, r1
 80066da:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2220      	movs	r2, #32
 80066e2:	4013      	ands	r3, r2
 80066e4:	d009      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80066e6:	4b4a      	ldr	r3, [pc, #296]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ea:	4a52      	ldr	r2, [pc, #328]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80066ec:	4013      	ands	r3, r2
 80066ee:	0019      	movs	r1, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	691a      	ldr	r2, [r3, #16]
 80066f4:	4b46      	ldr	r3, [pc, #280]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066f6:	430a      	orrs	r2, r1
 80066f8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	2380      	movs	r3, #128	; 0x80
 8006700:	01db      	lsls	r3, r3, #7
 8006702:	4013      	ands	r3, r2
 8006704:	d015      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006706:	4b42      	ldr	r3, [pc, #264]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	0899      	lsrs	r1, r3, #2
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1a      	ldr	r2, [r3, #32]
 8006712:	4b3f      	ldr	r3, [pc, #252]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006714:	430a      	orrs	r2, r1
 8006716:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a1a      	ldr	r2, [r3, #32]
 800671c:	2380      	movs	r3, #128	; 0x80
 800671e:	05db      	lsls	r3, r3, #23
 8006720:	429a      	cmp	r2, r3
 8006722:	d106      	bne.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006724:	4b3a      	ldr	r3, [pc, #232]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006726:	68da      	ldr	r2, [r3, #12]
 8006728:	4b39      	ldr	r3, [pc, #228]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800672a:	2180      	movs	r1, #128	; 0x80
 800672c:	0249      	lsls	r1, r1, #9
 800672e:	430a      	orrs	r2, r1
 8006730:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	2380      	movs	r3, #128	; 0x80
 8006738:	031b      	lsls	r3, r3, #12
 800673a:	4013      	ands	r3, r2
 800673c:	d009      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800673e:	4b34      	ldr	r3, [pc, #208]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006742:	2240      	movs	r2, #64	; 0x40
 8006744:	4393      	bics	r3, r2
 8006746:	0019      	movs	r1, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800674c:	4b30      	ldr	r3, [pc, #192]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800674e:	430a      	orrs	r2, r1
 8006750:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	2380      	movs	r3, #128	; 0x80
 8006758:	039b      	lsls	r3, r3, #14
 800675a:	4013      	ands	r3, r2
 800675c:	d016      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800675e:	4b2c      	ldr	r3, [pc, #176]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006762:	4a35      	ldr	r2, [pc, #212]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006764:	4013      	ands	r3, r2
 8006766:	0019      	movs	r1, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800676c:	4b28      	ldr	r3, [pc, #160]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800676e:	430a      	orrs	r2, r1
 8006770:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006776:	2380      	movs	r3, #128	; 0x80
 8006778:	03db      	lsls	r3, r3, #15
 800677a:	429a      	cmp	r2, r3
 800677c:	d106      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800677e:	4b24      	ldr	r3, [pc, #144]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006780:	68da      	ldr	r2, [r3, #12]
 8006782:	4b23      	ldr	r3, [pc, #140]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006784:	2180      	movs	r1, #128	; 0x80
 8006786:	0449      	lsls	r1, r1, #17
 8006788:	430a      	orrs	r2, r1
 800678a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	2380      	movs	r3, #128	; 0x80
 8006792:	03db      	lsls	r3, r3, #15
 8006794:	4013      	ands	r3, r2
 8006796:	d016      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006798:	4b1d      	ldr	r3, [pc, #116]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800679a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679c:	4a27      	ldr	r2, [pc, #156]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800679e:	4013      	ands	r3, r2
 80067a0:	0019      	movs	r1, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a6:	4b1a      	ldr	r3, [pc, #104]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067a8:	430a      	orrs	r2, r1
 80067aa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b0:	2380      	movs	r3, #128	; 0x80
 80067b2:	045b      	lsls	r3, r3, #17
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d106      	bne.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80067b8:	4b15      	ldr	r3, [pc, #84]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067ba:	68da      	ldr	r2, [r3, #12]
 80067bc:	4b14      	ldr	r3, [pc, #80]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067be:	2180      	movs	r1, #128	; 0x80
 80067c0:	0449      	lsls	r1, r1, #17
 80067c2:	430a      	orrs	r2, r1
 80067c4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	2380      	movs	r3, #128	; 0x80
 80067cc:	011b      	lsls	r3, r3, #4
 80067ce:	4013      	ands	r3, r2
 80067d0:	d016      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80067d2:	4b0f      	ldr	r3, [pc, #60]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d6:	4a1a      	ldr	r2, [pc, #104]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80067d8:	4013      	ands	r3, r2
 80067da:	0019      	movs	r1, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	695a      	ldr	r2, [r3, #20]
 80067e0:	4b0b      	ldr	r3, [pc, #44]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067e2:	430a      	orrs	r2, r1
 80067e4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	695a      	ldr	r2, [r3, #20]
 80067ea:	2380      	movs	r3, #128	; 0x80
 80067ec:	01db      	lsls	r3, r3, #7
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d106      	bne.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80067f2:	4b07      	ldr	r3, [pc, #28]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067f4:	68da      	ldr	r2, [r3, #12]
 80067f6:	4b06      	ldr	r3, [pc, #24]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067f8:	2180      	movs	r1, #128	; 0x80
 80067fa:	0249      	lsls	r1, r1, #9
 80067fc:	430a      	orrs	r2, r1
 80067fe:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006800:	2312      	movs	r3, #18
 8006802:	18fb      	adds	r3, r7, r3
 8006804:	781b      	ldrb	r3, [r3, #0]
}
 8006806:	0018      	movs	r0, r3
 8006808:	46bd      	mov	sp, r7
 800680a:	b006      	add	sp, #24
 800680c:	bd80      	pop	{r7, pc}
 800680e:	46c0      	nop			; (mov r8, r8)
 8006810:	40021000 	.word	0x40021000
 8006814:	40007000 	.word	0x40007000
 8006818:	fffffcff 	.word	0xfffffcff
 800681c:	fffeffff 	.word	0xfffeffff
 8006820:	00001388 	.word	0x00001388
 8006824:	efffffff 	.word	0xefffffff
 8006828:	fffff3ff 	.word	0xfffff3ff
 800682c:	fff3ffff 	.word	0xfff3ffff
 8006830:	ffcfffff 	.word	0xffcfffff
 8006834:	ffffcfff 	.word	0xffffcfff
 8006838:	ffbfffff 	.word	0xffbfffff
 800683c:	feffffff 	.word	0xfeffffff
 8006840:	ffff3fff 	.word	0xffff3fff

08006844 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	2380      	movs	r3, #128	; 0x80
 8006854:	029b      	lsls	r3, r3, #10
 8006856:	429a      	cmp	r2, r3
 8006858:	d136      	bne.n	80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800685a:	4bcd      	ldr	r3, [pc, #820]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800685c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800685e:	23c0      	movs	r3, #192	; 0xc0
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4013      	ands	r3, r2
 8006864:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006866:	4bca      	ldr	r3, [pc, #808]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800686a:	2202      	movs	r2, #2
 800686c:	4013      	ands	r3, r2
 800686e:	2b02      	cmp	r3, #2
 8006870:	d108      	bne.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	2380      	movs	r3, #128	; 0x80
 8006876:	005b      	lsls	r3, r3, #1
 8006878:	429a      	cmp	r2, r3
 800687a:	d103      	bne.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 800687c:	2380      	movs	r3, #128	; 0x80
 800687e:	021b      	lsls	r3, r3, #8
 8006880:	617b      	str	r3, [r7, #20]
 8006882:	e31c      	b.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006884:	4bc2      	ldr	r3, [pc, #776]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006888:	2202      	movs	r2, #2
 800688a:	4013      	ands	r3, r2
 800688c:	2b02      	cmp	r3, #2
 800688e:	d108      	bne.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	2380      	movs	r3, #128	; 0x80
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	429a      	cmp	r2, r3
 8006898:	d103      	bne.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 800689a:	23fa      	movs	r3, #250	; 0xfa
 800689c:	01db      	lsls	r3, r3, #7
 800689e:	617b      	str	r3, [r7, #20]
 80068a0:	e30d      	b.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80068a2:	4bbb      	ldr	r3, [pc, #748]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	2380      	movs	r3, #128	; 0x80
 80068a8:	029b      	lsls	r3, r3, #10
 80068aa:	401a      	ands	r2, r3
 80068ac:	2380      	movs	r3, #128	; 0x80
 80068ae:	029b      	lsls	r3, r3, #10
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d000      	beq.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 80068b4:	e303      	b.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	23c0      	movs	r3, #192	; 0xc0
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	429a      	cmp	r2, r3
 80068be:	d000      	beq.n	80068c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 80068c0:	e2fd      	b.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 80068c2:	4bb4      	ldr	r3, [pc, #720]	; (8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 80068c4:	617b      	str	r3, [r7, #20]
 80068c6:	e2fa      	b.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 80068c8:	4bb1      	ldr	r3, [pc, #708]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	2203      	movs	r2, #3
 80068ce:	4013      	ands	r3, r2
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d102      	bne.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 80068d4:	4bb0      	ldr	r3, [pc, #704]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80068d6:	613b      	str	r3, [r7, #16]
 80068d8:	e00a      	b.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 80068da:	4bad      	ldr	r3, [pc, #692]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	2203      	movs	r2, #3
 80068e0:	4013      	ands	r3, r2
 80068e2:	2b03      	cmp	r3, #3
 80068e4:	d102      	bne.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 80068e6:	4bad      	ldr	r3, [pc, #692]	; (8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80068e8:	613b      	str	r3, [r7, #16]
 80068ea:	e001      	b.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80068f0:	4ba7      	ldr	r3, [pc, #668]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	091b      	lsrs	r3, r3, #4
 80068f6:	2207      	movs	r2, #7
 80068f8:	4013      	ands	r3, r2
 80068fa:	3301      	adds	r3, #1
 80068fc:	0019      	movs	r1, r3
 80068fe:	6938      	ldr	r0, [r7, #16]
 8006900:	f7f9 fc00 	bl	8000104 <__udivsi3>
 8006904:	0003      	movs	r3, r0
 8006906:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	2380      	movs	r3, #128	; 0x80
 800690c:	03db      	lsls	r3, r3, #15
 800690e:	429a      	cmp	r2, r3
 8006910:	d100      	bne.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8006912:	e28e      	b.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	2380      	movs	r3, #128	; 0x80
 8006918:	03db      	lsls	r3, r3, #15
 800691a:	429a      	cmp	r2, r3
 800691c:	d900      	bls.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800691e:	e2b7      	b.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	2380      	movs	r3, #128	; 0x80
 8006924:	039b      	lsls	r3, r3, #14
 8006926:	429a      	cmp	r2, r3
 8006928:	d100      	bne.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800692a:	e253      	b.n	8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	2380      	movs	r3, #128	; 0x80
 8006930:	039b      	lsls	r3, r3, #14
 8006932:	429a      	cmp	r2, r3
 8006934:	d900      	bls.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006936:	e2ab      	b.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	2380      	movs	r3, #128	; 0x80
 800693c:	031b      	lsls	r3, r3, #12
 800693e:	429a      	cmp	r2, r3
 8006940:	d100      	bne.n	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006942:	e0b2      	b.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	2380      	movs	r3, #128	; 0x80
 8006948:	031b      	lsls	r3, r3, #12
 800694a:	429a      	cmp	r2, r3
 800694c:	d900      	bls.n	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 800694e:	e29f      	b.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	2380      	movs	r3, #128	; 0x80
 8006954:	01db      	lsls	r3, r3, #7
 8006956:	429a      	cmp	r2, r3
 8006958:	d100      	bne.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 800695a:	e103      	b.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	2380      	movs	r3, #128	; 0x80
 8006960:	01db      	lsls	r3, r3, #7
 8006962:	429a      	cmp	r2, r3
 8006964:	d900      	bls.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006966:	e293      	b.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	2380      	movs	r3, #128	; 0x80
 800696c:	011b      	lsls	r3, r3, #4
 800696e:	429a      	cmp	r2, r3
 8006970:	d100      	bne.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8006972:	e165      	b.n	8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	2380      	movs	r3, #128	; 0x80
 8006978:	011b      	lsls	r3, r3, #4
 800697a:	429a      	cmp	r2, r3
 800697c:	d900      	bls.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800697e:	e287      	b.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	2380      	movs	r3, #128	; 0x80
 8006984:	00db      	lsls	r3, r3, #3
 8006986:	429a      	cmp	r2, r3
 8006988:	d100      	bne.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 800698a:	e1e3      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	2380      	movs	r3, #128	; 0x80
 8006990:	00db      	lsls	r3, r3, #3
 8006992:	429a      	cmp	r2, r3
 8006994:	d900      	bls.n	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8006996:	e27b      	b.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	2380      	movs	r3, #128	; 0x80
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	429a      	cmp	r2, r3
 80069a0:	d100      	bne.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80069a2:	e197      	b.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	2380      	movs	r3, #128	; 0x80
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d900      	bls.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 80069ae:	e26f      	b.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b20      	cmp	r3, #32
 80069b4:	d100      	bne.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 80069b6:	e118      	b.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b20      	cmp	r3, #32
 80069bc:	d900      	bls.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 80069be:	e267      	b.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b10      	cmp	r3, #16
 80069c4:	d100      	bne.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 80069c6:	e093      	b.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b10      	cmp	r3, #16
 80069cc:	d900      	bls.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80069ce:	e25f      	b.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d003      	beq.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d033      	beq.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 80069dc:	e258      	b.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80069de:	4b6c      	ldr	r3, [pc, #432]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80069e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e2:	2203      	movs	r2, #3
 80069e4:	4013      	ands	r3, r2
 80069e6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d104      	bne.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 80069ee:	f7ff fd5b 	bl	80064a8 <HAL_RCC_GetPCLK1Freq>
 80069f2:	0003      	movs	r3, r0
 80069f4:	617b      	str	r3, [r7, #20]
        break;
 80069f6:	e24d      	b.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d104      	bne.n	8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 80069fe:	f7ff fcc7 	bl	8006390 <HAL_RCC_GetSysClockFreq>
 8006a02:	0003      	movs	r3, r0
 8006a04:	617b      	str	r3, [r7, #20]
        break;
 8006a06:	e245      	b.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006a08:	4b61      	ldr	r3, [pc, #388]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	2380      	movs	r3, #128	; 0x80
 8006a0e:	00db      	lsls	r3, r3, #3
 8006a10:	401a      	ands	r2, r3
 8006a12:	2380      	movs	r3, #128	; 0x80
 8006a14:	00db      	lsls	r3, r3, #3
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d105      	bne.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d102      	bne.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 8006a20:	4b5d      	ldr	r3, [pc, #372]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006a22:	617b      	str	r3, [r7, #20]
        break;
 8006a24:	e236      	b.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006a26:	4b5a      	ldr	r3, [pc, #360]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d000      	beq.n	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 8006a32:	e22f      	b.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2b03      	cmp	r3, #3
 8006a38:	d000      	beq.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 8006a3a:	e22b      	b.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 8006a3c:	2380      	movs	r3, #128	; 0x80
 8006a3e:	021b      	lsls	r3, r3, #8
 8006a40:	617b      	str	r3, [r7, #20]
        break;
 8006a42:	e227      	b.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006a44:	4b52      	ldr	r3, [pc, #328]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a48:	220c      	movs	r2, #12
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d104      	bne.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a54:	f7ff fd28 	bl	80064a8 <HAL_RCC_GetPCLK1Freq>
 8006a58:	0003      	movs	r3, r0
 8006a5a:	617b      	str	r3, [r7, #20]
        break;
 8006a5c:	e21c      	b.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2b04      	cmp	r3, #4
 8006a62:	d104      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006a64:	f7ff fc94 	bl	8006390 <HAL_RCC_GetSysClockFreq>
 8006a68:	0003      	movs	r3, r0
 8006a6a:	617b      	str	r3, [r7, #20]
        break;
 8006a6c:	e214      	b.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006a6e:	4b48      	ldr	r3, [pc, #288]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	2380      	movs	r3, #128	; 0x80
 8006a74:	00db      	lsls	r3, r3, #3
 8006a76:	401a      	ands	r2, r3
 8006a78:	2380      	movs	r3, #128	; 0x80
 8006a7a:	00db      	lsls	r3, r3, #3
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d105      	bne.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2b08      	cmp	r3, #8
 8006a84:	d102      	bne.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 8006a86:	4b44      	ldr	r3, [pc, #272]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006a88:	617b      	str	r3, [r7, #20]
        break;
 8006a8a:	e205      	b.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006a8c:	4b40      	ldr	r3, [pc, #256]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a90:	2202      	movs	r2, #2
 8006a92:	4013      	ands	r3, r2
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d000      	beq.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8006a98:	e1fe      	b.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2b0c      	cmp	r3, #12
 8006a9e:	d000      	beq.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8006aa0:	e1fa      	b.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 8006aa2:	2380      	movs	r3, #128	; 0x80
 8006aa4:	021b      	lsls	r3, r3, #8
 8006aa6:	617b      	str	r3, [r7, #20]
        break;
 8006aa8:	e1f6      	b.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8006aaa:	4b39      	ldr	r3, [pc, #228]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aae:	2240      	movs	r2, #64	; 0x40
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 8006ab4:	4b36      	ldr	r3, [pc, #216]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	2380      	movs	r3, #128	; 0x80
 8006aba:	00db      	lsls	r3, r3, #3
 8006abc:	401a      	ands	r2, r3
 8006abe:	2380      	movs	r3, #128	; 0x80
 8006ac0:	00db      	lsls	r3, r3, #3
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d105      	bne.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d102      	bne.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 8006acc:	4b34      	ldr	r3, [pc, #208]	; (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8006ace:	617b      	str	r3, [r7, #20]
        break;
 8006ad0:	e1e4      	b.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8006ad2:	4b2f      	ldr	r3, [pc, #188]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	4013      	ands	r3, r2
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d000      	beq.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8006ade:	e1dd      	b.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2b40      	cmp	r3, #64	; 0x40
 8006ae4:	d000      	beq.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8006ae6:	e1d9      	b.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 8006ae8:	2380      	movs	r3, #128	; 0x80
 8006aea:	021b      	lsls	r3, r3, #8
 8006aec:	617b      	str	r3, [r7, #20]
        break;
 8006aee:	e1d5      	b.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006af0:	4b27      	ldr	r3, [pc, #156]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006af2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006af4:	23c0      	movs	r3, #192	; 0xc0
 8006af6:	011b      	lsls	r3, r3, #4
 8006af8:	4013      	ands	r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d104      	bne.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b02:	f7ff fcd1 	bl	80064a8 <HAL_RCC_GetPCLK1Freq>
 8006b06:	0003      	movs	r3, r0
 8006b08:	617b      	str	r3, [r7, #20]
        break;
 8006b0a:	e1c9      	b.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	2380      	movs	r3, #128	; 0x80
 8006b10:	00db      	lsls	r3, r3, #3
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d104      	bne.n	8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8006b16:	f7ff fc3b 	bl	8006390 <HAL_RCC_GetSysClockFreq>
 8006b1a:	0003      	movs	r3, r0
 8006b1c:	617b      	str	r3, [r7, #20]
        break;
 8006b1e:	e1bf      	b.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006b20:	4b1b      	ldr	r3, [pc, #108]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	2380      	movs	r3, #128	; 0x80
 8006b26:	00db      	lsls	r3, r3, #3
 8006b28:	401a      	ands	r2, r3
 8006b2a:	2380      	movs	r3, #128	; 0x80
 8006b2c:	00db      	lsls	r3, r3, #3
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d107      	bne.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	2380      	movs	r3, #128	; 0x80
 8006b36:	011b      	lsls	r3, r3, #4
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d102      	bne.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 8006b3c:	4b16      	ldr	r3, [pc, #88]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006b3e:	617b      	str	r3, [r7, #20]
        break;
 8006b40:	e1ae      	b.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006b42:	4b13      	ldr	r3, [pc, #76]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b46:	2202      	movs	r2, #2
 8006b48:	4013      	ands	r3, r2
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d000      	beq.n	8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8006b4e:	e1a7      	b.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	23c0      	movs	r3, #192	; 0xc0
 8006b54:	011b      	lsls	r3, r3, #4
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d000      	beq.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8006b5a:	e1a1      	b.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 8006b5c:	2380      	movs	r3, #128	; 0x80
 8006b5e:	021b      	lsls	r3, r3, #8
 8006b60:	617b      	str	r3, [r7, #20]
        break;
 8006b62:	e19d      	b.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006b64:	4b0a      	ldr	r3, [pc, #40]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b68:	0f9b      	lsrs	r3, r3, #30
 8006b6a:	079b      	lsls	r3, r3, #30
 8006b6c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d104      	bne.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006b74:	f7ff fc0c 	bl	8006390 <HAL_RCC_GetSysClockFreq>
 8006b78:	0003      	movs	r3, r0
 8006b7a:	617b      	str	r3, [r7, #20]
        break;
 8006b7c:	e192      	b.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	2380      	movs	r3, #128	; 0x80
 8006b82:	061b      	lsls	r3, r3, #24
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d10d      	bne.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 8006b88:	4b03      	ldr	r3, [pc, #12]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006b8a:	617b      	str	r3, [r7, #20]
        break;
 8006b8c:	e18a      	b.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006b8e:	46c0      	nop			; (mov r8, r8)
 8006b90:	40021000 	.word	0x40021000
 8006b94:	0003d090 	.word	0x0003d090
 8006b98:	00f42400 	.word	0x00f42400
 8006b9c:	007a1200 	.word	0x007a1200
 8006ba0:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	2380      	movs	r3, #128	; 0x80
 8006ba8:	05db      	lsls	r3, r3, #23
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d000      	beq.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 8006bae:	e179      	b.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8006bb0:	4bc5      	ldr	r3, [pc, #788]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	2380      	movs	r3, #128	; 0x80
 8006bb6:	025b      	lsls	r3, r3, #9
 8006bb8:	4013      	ands	r3, r2
 8006bba:	d100      	bne.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8006bbc:	e172      	b.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006bbe:	4bc2      	ldr	r3, [pc, #776]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	0a1b      	lsrs	r3, r3, #8
 8006bc4:	227f      	movs	r2, #127	; 0x7f
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	435a      	muls	r2, r3
 8006bd0:	4bbd      	ldr	r3, [pc, #756]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	0c5b      	lsrs	r3, r3, #17
 8006bd6:	211f      	movs	r1, #31
 8006bd8:	400b      	ands	r3, r1
 8006bda:	3301      	adds	r3, #1
 8006bdc:	0019      	movs	r1, r3
 8006bde:	0010      	movs	r0, r2
 8006be0:	f7f9 fa90 	bl	8000104 <__udivsi3>
 8006be4:	0003      	movs	r3, r0
 8006be6:	617b      	str	r3, [r7, #20]
        break;
 8006be8:	e15c      	b.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006bea:	4bb7      	ldr	r3, [pc, #732]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006bec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bee:	23c0      	movs	r3, #192	; 0xc0
 8006bf0:	019b      	lsls	r3, r3, #6
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d104      	bne.n	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006bfc:	f7ff fc54 	bl	80064a8 <HAL_RCC_GetPCLK1Freq>
 8006c00:	0003      	movs	r3, r0
 8006c02:	617b      	str	r3, [r7, #20]
        break;
 8006c04:	e150      	b.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	2380      	movs	r3, #128	; 0x80
 8006c0a:	015b      	lsls	r3, r3, #5
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d104      	bne.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c10:	f7ff fbbe 	bl	8006390 <HAL_RCC_GetSysClockFreq>
 8006c14:	0003      	movs	r3, r0
 8006c16:	617b      	str	r3, [r7, #20]
        break;
 8006c18:	e146      	b.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006c1a:	4bab      	ldr	r3, [pc, #684]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	2380      	movs	r3, #128	; 0x80
 8006c20:	00db      	lsls	r3, r3, #3
 8006c22:	401a      	ands	r2, r3
 8006c24:	2380      	movs	r3, #128	; 0x80
 8006c26:	00db      	lsls	r3, r3, #3
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d000      	beq.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8006c2c:	e13c      	b.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	2380      	movs	r3, #128	; 0x80
 8006c32:	019b      	lsls	r3, r3, #6
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d000      	beq.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8006c38:	e136      	b.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 8006c3a:	4ba4      	ldr	r3, [pc, #656]	; (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006c3c:	617b      	str	r3, [r7, #20]
        break;
 8006c3e:	e133      	b.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8006c40:	4ba1      	ldr	r3, [pc, #644]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006c42:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c44:	23c0      	movs	r3, #192	; 0xc0
 8006c46:	021b      	lsls	r3, r3, #8
 8006c48:	4013      	ands	r3, r2
 8006c4a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	2380      	movs	r3, #128	; 0x80
 8006c50:	01db      	lsls	r3, r3, #7
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d11c      	bne.n	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8006c56:	4b9c      	ldr	r3, [pc, #624]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006c58:	68da      	ldr	r2, [r3, #12]
 8006c5a:	2380      	movs	r3, #128	; 0x80
 8006c5c:	025b      	lsls	r3, r3, #9
 8006c5e:	4013      	ands	r3, r2
 8006c60:	d100      	bne.n	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8006c62:	e123      	b.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006c64:	4b98      	ldr	r3, [pc, #608]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	0a1b      	lsrs	r3, r3, #8
 8006c6a:	227f      	movs	r2, #127	; 0x7f
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	435a      	muls	r2, r3
 8006c76:	4b94      	ldr	r3, [pc, #592]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	0c5b      	lsrs	r3, r3, #17
 8006c7c:	211f      	movs	r1, #31
 8006c7e:	400b      	ands	r3, r1
 8006c80:	3301      	adds	r3, #1
 8006c82:	0019      	movs	r1, r3
 8006c84:	0010      	movs	r0, r2
 8006c86:	f7f9 fa3d 	bl	8000104 <__udivsi3>
 8006c8a:	0003      	movs	r3, r0
 8006c8c:	617b      	str	r3, [r7, #20]
        break;
 8006c8e:	e10d      	b.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d104      	bne.n	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c96:	f7ff fb7b 	bl	8006390 <HAL_RCC_GetSysClockFreq>
 8006c9a:	0003      	movs	r3, r0
 8006c9c:	617b      	str	r3, [r7, #20]
        break;
 8006c9e:	e105      	b.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8006ca0:	4b89      	ldr	r3, [pc, #548]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	2380      	movs	r3, #128	; 0x80
 8006ca6:	00db      	lsls	r3, r3, #3
 8006ca8:	401a      	ands	r2, r3
 8006caa:	2380      	movs	r3, #128	; 0x80
 8006cac:	00db      	lsls	r3, r3, #3
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d107      	bne.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	2380      	movs	r3, #128	; 0x80
 8006cb6:	021b      	lsls	r3, r3, #8
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d102      	bne.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 8006cbc:	4b83      	ldr	r3, [pc, #524]	; (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006cbe:	617b      	str	r3, [r7, #20]
        break;
 8006cc0:	e0f4      	b.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	23c0      	movs	r3, #192	; 0xc0
 8006cc6:	021b      	lsls	r3, r3, #8
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d000      	beq.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006ccc:	e0ee      	b.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 8006cce:	4b80      	ldr	r3, [pc, #512]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8006cd0:	617b      	str	r3, [r7, #20]
        break;
 8006cd2:	e0eb      	b.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006cd4:	4b7c      	ldr	r3, [pc, #496]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006cd6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cd8:	23c0      	movs	r3, #192	; 0xc0
 8006cda:	031b      	lsls	r3, r3, #12
 8006cdc:	4013      	ands	r3, r2
 8006cde:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d104      	bne.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ce6:	f7ff fbdf 	bl	80064a8 <HAL_RCC_GetPCLK1Freq>
 8006cea:	0003      	movs	r3, r0
 8006cec:	617b      	str	r3, [r7, #20]
        break;
 8006cee:	e0df      	b.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006cf0:	4b75      	ldr	r3, [pc, #468]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cf4:	2202      	movs	r2, #2
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d108      	bne.n	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	2380      	movs	r3, #128	; 0x80
 8006d00:	02db      	lsls	r3, r3, #11
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d103      	bne.n	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 8006d06:	23fa      	movs	r3, #250	; 0xfa
 8006d08:	01db      	lsls	r3, r3, #7
 8006d0a:	617b      	str	r3, [r7, #20]
 8006d0c:	e021      	b.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006d0e:	4b6e      	ldr	r3, [pc, #440]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	2380      	movs	r3, #128	; 0x80
 8006d14:	00db      	lsls	r3, r3, #3
 8006d16:	401a      	ands	r2, r3
 8006d18:	2380      	movs	r3, #128	; 0x80
 8006d1a:	00db      	lsls	r3, r3, #3
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d107      	bne.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	2380      	movs	r3, #128	; 0x80
 8006d24:	031b      	lsls	r3, r3, #12
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d102      	bne.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 8006d2a:	4b68      	ldr	r3, [pc, #416]	; (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006d2c:	617b      	str	r3, [r7, #20]
 8006d2e:	e010      	b.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006d30:	4b65      	ldr	r3, [pc, #404]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d34:	2202      	movs	r2, #2
 8006d36:	4013      	ands	r3, r2
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d000      	beq.n	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006d3c:	e0b8      	b.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	23c0      	movs	r3, #192	; 0xc0
 8006d42:	031b      	lsls	r3, r3, #12
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d000      	beq.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006d48:	e0b2      	b.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 8006d4a:	2380      	movs	r3, #128	; 0x80
 8006d4c:	021b      	lsls	r3, r3, #8
 8006d4e:	617b      	str	r3, [r7, #20]
        break;
 8006d50:	e0ae      	b.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8006d52:	e0ad      	b.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006d54:	4b5c      	ldr	r3, [pc, #368]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006d56:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d58:	23c0      	movs	r3, #192	; 0xc0
 8006d5a:	039b      	lsls	r3, r3, #14
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d104      	bne.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d66:	f7ff fb9f 	bl	80064a8 <HAL_RCC_GetPCLK1Freq>
 8006d6a:	0003      	movs	r3, r0
 8006d6c:	617b      	str	r3, [r7, #20]
        break;
 8006d6e:	e0a1      	b.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006d70:	4b55      	ldr	r3, [pc, #340]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d74:	2202      	movs	r2, #2
 8006d76:	4013      	ands	r3, r2
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d108      	bne.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	2380      	movs	r3, #128	; 0x80
 8006d80:	035b      	lsls	r3, r3, #13
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d103      	bne.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 8006d86:	23fa      	movs	r3, #250	; 0xfa
 8006d88:	01db      	lsls	r3, r3, #7
 8006d8a:	617b      	str	r3, [r7, #20]
 8006d8c:	e021      	b.n	8006dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006d8e:	4b4e      	ldr	r3, [pc, #312]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	2380      	movs	r3, #128	; 0x80
 8006d94:	00db      	lsls	r3, r3, #3
 8006d96:	401a      	ands	r2, r3
 8006d98:	2380      	movs	r3, #128	; 0x80
 8006d9a:	00db      	lsls	r3, r3, #3
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d107      	bne.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	2380      	movs	r3, #128	; 0x80
 8006da4:	039b      	lsls	r3, r3, #14
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d102      	bne.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 8006daa:	4b48      	ldr	r3, [pc, #288]	; (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006dac:	617b      	str	r3, [r7, #20]
 8006dae:	e010      	b.n	8006dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006db0:	4b45      	ldr	r3, [pc, #276]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006db4:	2202      	movs	r2, #2
 8006db6:	4013      	ands	r3, r2
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d000      	beq.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8006dbc:	e07a      	b.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	23c0      	movs	r3, #192	; 0xc0
 8006dc2:	039b      	lsls	r3, r3, #14
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d000      	beq.n	8006dca <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 8006dc8:	e074      	b.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 8006dca:	2380      	movs	r3, #128	; 0x80
 8006dcc:	021b      	lsls	r3, r3, #8
 8006dce:	617b      	str	r3, [r7, #20]
        break;
 8006dd0:	e070      	b.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 8006dd2:	e06f      	b.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 8006dd4:	4b3c      	ldr	r3, [pc, #240]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006dd6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dd8:	2380      	movs	r3, #128	; 0x80
 8006dda:	03db      	lsls	r3, r3, #15
 8006ddc:	4013      	ands	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	2380      	movs	r3, #128	; 0x80
 8006de4:	03db      	lsls	r3, r3, #15
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d11b      	bne.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8006dea:	4b37      	ldr	r3, [pc, #220]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006dec:	68da      	ldr	r2, [r3, #12]
 8006dee:	2380      	movs	r3, #128	; 0x80
 8006df0:	045b      	lsls	r3, r3, #17
 8006df2:	4013      	ands	r3, r2
 8006df4:	d060      	beq.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006df6:	4b34      	ldr	r3, [pc, #208]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	0a1b      	lsrs	r3, r3, #8
 8006dfc:	227f      	movs	r2, #127	; 0x7f
 8006dfe:	4013      	ands	r3, r2
 8006e00:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	435a      	muls	r2, r3
 8006e08:	4b2f      	ldr	r3, [pc, #188]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	0e5b      	lsrs	r3, r3, #25
 8006e0e:	2107      	movs	r1, #7
 8006e10:	400b      	ands	r3, r1
 8006e12:	3301      	adds	r3, #1
 8006e14:	0019      	movs	r1, r3
 8006e16:	0010      	movs	r0, r2
 8006e18:	f7f9 f974 	bl	8000104 <__udivsi3>
 8006e1c:	0003      	movs	r3, r0
 8006e1e:	617b      	str	r3, [r7, #20]
        break;
 8006e20:	e04a      	b.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d147      	bne.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e28:	f7ff fb3e 	bl	80064a8 <HAL_RCC_GetPCLK1Freq>
 8006e2c:	0003      	movs	r3, r0
 8006e2e:	617b      	str	r3, [r7, #20]
        break;
 8006e30:	e042      	b.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 8006e32:	4b25      	ldr	r3, [pc, #148]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006e34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e36:	2380      	movs	r3, #128	; 0x80
 8006e38:	045b      	lsls	r3, r3, #17
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	2380      	movs	r3, #128	; 0x80
 8006e42:	045b      	lsls	r3, r3, #17
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d11b      	bne.n	8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8006e48:	4b1f      	ldr	r3, [pc, #124]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006e4a:	68da      	ldr	r2, [r3, #12]
 8006e4c:	2380      	movs	r3, #128	; 0x80
 8006e4e:	045b      	lsls	r3, r3, #17
 8006e50:	4013      	ands	r3, r2
 8006e52:	d033      	beq.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006e54:	4b1c      	ldr	r3, [pc, #112]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	0a1b      	lsrs	r3, r3, #8
 8006e5a:	227f      	movs	r2, #127	; 0x7f
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	435a      	muls	r2, r3
 8006e66:	4b18      	ldr	r3, [pc, #96]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	0e5b      	lsrs	r3, r3, #25
 8006e6c:	2107      	movs	r1, #7
 8006e6e:	400b      	ands	r3, r1
 8006e70:	3301      	adds	r3, #1
 8006e72:	0019      	movs	r1, r3
 8006e74:	0010      	movs	r0, r2
 8006e76:	f7f9 f945 	bl	8000104 <__udivsi3>
 8006e7a:	0003      	movs	r3, r0
 8006e7c:	617b      	str	r3, [r7, #20]
        break;
 8006e7e:	e01d      	b.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d11a      	bne.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e86:	f7ff fb0f 	bl	80064a8 <HAL_RCC_GetPCLK1Freq>
 8006e8a:	0003      	movs	r3, r0
 8006e8c:	617b      	str	r3, [r7, #20]
        break;
 8006e8e:	e015      	b.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 8006e90:	46c0      	nop			; (mov r8, r8)
 8006e92:	e014      	b.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006e94:	46c0      	nop			; (mov r8, r8)
 8006e96:	e012      	b.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006e98:	46c0      	nop			; (mov r8, r8)
 8006e9a:	e010      	b.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006e9c:	46c0      	nop			; (mov r8, r8)
 8006e9e:	e00e      	b.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006ea0:	46c0      	nop			; (mov r8, r8)
 8006ea2:	e00c      	b.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006ea4:	46c0      	nop			; (mov r8, r8)
 8006ea6:	e00a      	b.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006ea8:	46c0      	nop			; (mov r8, r8)
 8006eaa:	e008      	b.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006eac:	46c0      	nop			; (mov r8, r8)
 8006eae:	e006      	b.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006eb0:	46c0      	nop			; (mov r8, r8)
 8006eb2:	e004      	b.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006eb4:	46c0      	nop			; (mov r8, r8)
 8006eb6:	e002      	b.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006eb8:	46c0      	nop			; (mov r8, r8)
 8006eba:	e000      	b.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006ebc:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 8006ebe:	697b      	ldr	r3, [r7, #20]
}
 8006ec0:	0018      	movs	r0, r3
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	b006      	add	sp, #24
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	40021000 	.word	0x40021000
 8006ecc:	00f42400 	.word	0x00f42400
 8006ed0:	0000bb80 	.word	0x0000bb80

08006ed4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e0a8      	b.n	8007038 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d109      	bne.n	8006f02 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	2382      	movs	r3, #130	; 0x82
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d009      	beq.n	8006f0e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	61da      	str	r2, [r3, #28]
 8006f00:	e005      	b.n	8006f0e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	225d      	movs	r2, #93	; 0x5d
 8006f18:	5c9b      	ldrb	r3, [r3, r2]
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d107      	bne.n	8006f30 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	225c      	movs	r2, #92	; 0x5c
 8006f24:	2100      	movs	r1, #0
 8006f26:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	0018      	movs	r0, r3
 8006f2c:	f7fb fde8 	bl	8002b00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	225d      	movs	r2, #93	; 0x5d
 8006f34:	2102      	movs	r1, #2
 8006f36:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2140      	movs	r1, #64	; 0x40
 8006f44:	438a      	bics	r2, r1
 8006f46:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68da      	ldr	r2, [r3, #12]
 8006f4c:	23e0      	movs	r3, #224	; 0xe0
 8006f4e:	00db      	lsls	r3, r3, #3
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d902      	bls.n	8006f5a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006f54:	2300      	movs	r3, #0
 8006f56:	60fb      	str	r3, [r7, #12]
 8006f58:	e002      	b.n	8006f60 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006f5a:	2380      	movs	r3, #128	; 0x80
 8006f5c:	015b      	lsls	r3, r3, #5
 8006f5e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68da      	ldr	r2, [r3, #12]
 8006f64:	23f0      	movs	r3, #240	; 0xf0
 8006f66:	011b      	lsls	r3, r3, #4
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d008      	beq.n	8006f7e <HAL_SPI_Init+0xaa>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	68da      	ldr	r2, [r3, #12]
 8006f70:	23e0      	movs	r3, #224	; 0xe0
 8006f72:	00db      	lsls	r3, r3, #3
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d002      	beq.n	8006f7e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	2382      	movs	r3, #130	; 0x82
 8006f84:	005b      	lsls	r3, r3, #1
 8006f86:	401a      	ands	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6899      	ldr	r1, [r3, #8]
 8006f8c:	2384      	movs	r3, #132	; 0x84
 8006f8e:	021b      	lsls	r3, r3, #8
 8006f90:	400b      	ands	r3, r1
 8006f92:	431a      	orrs	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	2102      	movs	r1, #2
 8006f9a:	400b      	ands	r3, r1
 8006f9c:	431a      	orrs	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	2101      	movs	r1, #1
 8006fa4:	400b      	ands	r3, r1
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6999      	ldr	r1, [r3, #24]
 8006fac:	2380      	movs	r3, #128	; 0x80
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	400b      	ands	r3, r1
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	69db      	ldr	r3, [r3, #28]
 8006fb8:	2138      	movs	r1, #56	; 0x38
 8006fba:	400b      	ands	r3, r1
 8006fbc:	431a      	orrs	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	2180      	movs	r1, #128	; 0x80
 8006fc4:	400b      	ands	r3, r1
 8006fc6:	431a      	orrs	r2, r3
 8006fc8:	0011      	movs	r1, r2
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fce:	2380      	movs	r3, #128	; 0x80
 8006fd0:	019b      	lsls	r3, r3, #6
 8006fd2:	401a      	ands	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	0c1b      	lsrs	r3, r3, #16
 8006fe2:	2204      	movs	r2, #4
 8006fe4:	401a      	ands	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fea:	2110      	movs	r1, #16
 8006fec:	400b      	ands	r3, r1
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff4:	2108      	movs	r1, #8
 8006ff6:	400b      	ands	r3, r1
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68d9      	ldr	r1, [r3, #12]
 8006ffe:	23f0      	movs	r3, #240	; 0xf0
 8007000:	011b      	lsls	r3, r3, #4
 8007002:	400b      	ands	r3, r1
 8007004:	431a      	orrs	r2, r3
 8007006:	0011      	movs	r1, r2
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	2380      	movs	r3, #128	; 0x80
 800700c:	015b      	lsls	r3, r3, #5
 800700e:	401a      	ands	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	430a      	orrs	r2, r1
 8007016:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	69da      	ldr	r2, [r3, #28]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4907      	ldr	r1, [pc, #28]	; (8007040 <HAL_SPI_Init+0x16c>)
 8007024:	400a      	ands	r2, r1
 8007026:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	225d      	movs	r2, #93	; 0x5d
 8007032:	2101      	movs	r1, #1
 8007034:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	0018      	movs	r0, r3
 800703a:	46bd      	mov	sp, r7
 800703c:	b004      	add	sp, #16
 800703e:	bd80      	pop	{r7, pc}
 8007040:	fffff7ff 	.word	0xfffff7ff

08007044 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b088      	sub	sp, #32
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	603b      	str	r3, [r7, #0]
 8007050:	1dbb      	adds	r3, r7, #6
 8007052:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007054:	231f      	movs	r3, #31
 8007056:	18fb      	adds	r3, r7, r3
 8007058:	2200      	movs	r2, #0
 800705a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	225c      	movs	r2, #92	; 0x5c
 8007060:	5c9b      	ldrb	r3, [r3, r2]
 8007062:	2b01      	cmp	r3, #1
 8007064:	d101      	bne.n	800706a <HAL_SPI_Transmit+0x26>
 8007066:	2302      	movs	r3, #2
 8007068:	e140      	b.n	80072ec <HAL_SPI_Transmit+0x2a8>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	225c      	movs	r2, #92	; 0x5c
 800706e:	2101      	movs	r1, #1
 8007070:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007072:	f7fc f867 	bl	8003144 <HAL_GetTick>
 8007076:	0003      	movs	r3, r0
 8007078:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800707a:	2316      	movs	r3, #22
 800707c:	18fb      	adds	r3, r7, r3
 800707e:	1dba      	adds	r2, r7, #6
 8007080:	8812      	ldrh	r2, [r2, #0]
 8007082:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	225d      	movs	r2, #93	; 0x5d
 8007088:	5c9b      	ldrb	r3, [r3, r2]
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b01      	cmp	r3, #1
 800708e:	d004      	beq.n	800709a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8007090:	231f      	movs	r3, #31
 8007092:	18fb      	adds	r3, r7, r3
 8007094:	2202      	movs	r2, #2
 8007096:	701a      	strb	r2, [r3, #0]
    goto error;
 8007098:	e11d      	b.n	80072d6 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d003      	beq.n	80070a8 <HAL_SPI_Transmit+0x64>
 80070a0:	1dbb      	adds	r3, r7, #6
 80070a2:	881b      	ldrh	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d104      	bne.n	80070b2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80070a8:	231f      	movs	r3, #31
 80070aa:	18fb      	adds	r3, r7, r3
 80070ac:	2201      	movs	r2, #1
 80070ae:	701a      	strb	r2, [r3, #0]
    goto error;
 80070b0:	e111      	b.n	80072d6 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	225d      	movs	r2, #93	; 0x5d
 80070b6:	2103      	movs	r1, #3
 80070b8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	1dba      	adds	r2, r7, #6
 80070ca:	8812      	ldrh	r2, [r2, #0]
 80070cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	1dba      	adds	r2, r7, #6
 80070d2:	8812      	ldrh	r2, [r2, #0]
 80070d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2244      	movs	r2, #68	; 0x44
 80070e0:	2100      	movs	r1, #0
 80070e2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2246      	movs	r2, #70	; 0x46
 80070e8:	2100      	movs	r1, #0
 80070ea:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	689a      	ldr	r2, [r3, #8]
 80070fc:	2380      	movs	r3, #128	; 0x80
 80070fe:	021b      	lsls	r3, r3, #8
 8007100:	429a      	cmp	r2, r3
 8007102:	d110      	bne.n	8007126 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2140      	movs	r1, #64	; 0x40
 8007110:	438a      	bics	r2, r1
 8007112:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2180      	movs	r1, #128	; 0x80
 8007120:	01c9      	lsls	r1, r1, #7
 8007122:	430a      	orrs	r2, r1
 8007124:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2240      	movs	r2, #64	; 0x40
 800712e:	4013      	ands	r3, r2
 8007130:	2b40      	cmp	r3, #64	; 0x40
 8007132:	d007      	beq.n	8007144 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2140      	movs	r1, #64	; 0x40
 8007140:	430a      	orrs	r2, r1
 8007142:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	68da      	ldr	r2, [r3, #12]
 8007148:	23e0      	movs	r3, #224	; 0xe0
 800714a:	00db      	lsls	r3, r3, #3
 800714c:	429a      	cmp	r2, r3
 800714e:	d94e      	bls.n	80071ee <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d004      	beq.n	8007162 <HAL_SPI_Transmit+0x11e>
 8007158:	2316      	movs	r3, #22
 800715a:	18fb      	adds	r3, r7, r3
 800715c:	881b      	ldrh	r3, [r3, #0]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d13f      	bne.n	80071e2 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007166:	881a      	ldrh	r2, [r3, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007172:	1c9a      	adds	r2, r3, #2
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800717c:	b29b      	uxth	r3, r3
 800717e:	3b01      	subs	r3, #1
 8007180:	b29a      	uxth	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007186:	e02c      	b.n	80071e2 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	2202      	movs	r2, #2
 8007190:	4013      	ands	r3, r2
 8007192:	2b02      	cmp	r3, #2
 8007194:	d112      	bne.n	80071bc <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719a:	881a      	ldrh	r2, [r3, #0]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a6:	1c9a      	adds	r2, r3, #2
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	3b01      	subs	r3, #1
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80071ba:	e012      	b.n	80071e2 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071bc:	f7fb ffc2 	bl	8003144 <HAL_GetTick>
 80071c0:	0002      	movs	r2, r0
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d802      	bhi.n	80071d2 <HAL_SPI_Transmit+0x18e>
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	3301      	adds	r3, #1
 80071d0:	d102      	bne.n	80071d8 <HAL_SPI_Transmit+0x194>
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d104      	bne.n	80071e2 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80071d8:	231f      	movs	r3, #31
 80071da:	18fb      	adds	r3, r7, r3
 80071dc:	2203      	movs	r2, #3
 80071de:	701a      	strb	r2, [r3, #0]
          goto error;
 80071e0:	e079      	b.n	80072d6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1cd      	bne.n	8007188 <HAL_SPI_Transmit+0x144>
 80071ec:	e04f      	b.n	800728e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d004      	beq.n	8007200 <HAL_SPI_Transmit+0x1bc>
 80071f6:	2316      	movs	r3, #22
 80071f8:	18fb      	adds	r3, r7, r3
 80071fa:	881b      	ldrh	r3, [r3, #0]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d141      	bne.n	8007284 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	330c      	adds	r3, #12
 800720a:	7812      	ldrb	r2, [r2, #0]
 800720c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007212:	1c5a      	adds	r2, r3, #1
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800721c:	b29b      	uxth	r3, r3
 800721e:	3b01      	subs	r3, #1
 8007220:	b29a      	uxth	r2, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8007226:	e02d      	b.n	8007284 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	2202      	movs	r2, #2
 8007230:	4013      	ands	r3, r2
 8007232:	2b02      	cmp	r3, #2
 8007234:	d113      	bne.n	800725e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	330c      	adds	r3, #12
 8007240:	7812      	ldrb	r2, [r2, #0]
 8007242:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007248:	1c5a      	adds	r2, r3, #1
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007252:	b29b      	uxth	r3, r3
 8007254:	3b01      	subs	r3, #1
 8007256:	b29a      	uxth	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800725c:	e012      	b.n	8007284 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800725e:	f7fb ff71 	bl	8003144 <HAL_GetTick>
 8007262:	0002      	movs	r2, r0
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	683a      	ldr	r2, [r7, #0]
 800726a:	429a      	cmp	r2, r3
 800726c:	d802      	bhi.n	8007274 <HAL_SPI_Transmit+0x230>
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	3301      	adds	r3, #1
 8007272:	d102      	bne.n	800727a <HAL_SPI_Transmit+0x236>
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d104      	bne.n	8007284 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800727a:	231f      	movs	r3, #31
 800727c:	18fb      	adds	r3, r7, r3
 800727e:	2203      	movs	r2, #3
 8007280:	701a      	strb	r2, [r3, #0]
          goto error;
 8007282:	e028      	b.n	80072d6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007288:	b29b      	uxth	r3, r3
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1cc      	bne.n	8007228 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800728e:	69ba      	ldr	r2, [r7, #24]
 8007290:	6839      	ldr	r1, [r7, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	0018      	movs	r0, r3
 8007296:	f000 fdf5 	bl	8007e84 <SPI_EndRxTxTransaction>
 800729a:	1e03      	subs	r3, r0, #0
 800729c:	d002      	beq.n	80072a4 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2220      	movs	r2, #32
 80072a2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10a      	bne.n	80072c2 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072ac:	2300      	movs	r3, #0
 80072ae:	613b      	str	r3, [r7, #16]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	613b      	str	r3, [r7, #16]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	613b      	str	r3, [r7, #16]
 80072c0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d004      	beq.n	80072d4 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80072ca:	231f      	movs	r3, #31
 80072cc:	18fb      	adds	r3, r7, r3
 80072ce:	2201      	movs	r2, #1
 80072d0:	701a      	strb	r2, [r3, #0]
 80072d2:	e000      	b.n	80072d6 <HAL_SPI_Transmit+0x292>
  }

error:
 80072d4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	225d      	movs	r2, #93	; 0x5d
 80072da:	2101      	movs	r1, #1
 80072dc:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	225c      	movs	r2, #92	; 0x5c
 80072e2:	2100      	movs	r1, #0
 80072e4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80072e6:	231f      	movs	r3, #31
 80072e8:	18fb      	adds	r3, r7, r3
 80072ea:	781b      	ldrb	r3, [r3, #0]
}
 80072ec:	0018      	movs	r0, r3
 80072ee:	46bd      	mov	sp, r7
 80072f0:	b008      	add	sp, #32
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072f4:	b590      	push	{r4, r7, lr}
 80072f6:	b089      	sub	sp, #36	; 0x24
 80072f8:	af02      	add	r7, sp, #8
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	603b      	str	r3, [r7, #0]
 8007300:	1dbb      	adds	r3, r7, #6
 8007302:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007304:	2317      	movs	r3, #23
 8007306:	18fb      	adds	r3, r7, r3
 8007308:	2200      	movs	r2, #0
 800730a:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	2382      	movs	r3, #130	; 0x82
 8007312:	005b      	lsls	r3, r3, #1
 8007314:	429a      	cmp	r2, r3
 8007316:	d113      	bne.n	8007340 <HAL_SPI_Receive+0x4c>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10f      	bne.n	8007340 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	225d      	movs	r2, #93	; 0x5d
 8007324:	2104      	movs	r1, #4
 8007326:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007328:	1dbb      	adds	r3, r7, #6
 800732a:	881c      	ldrh	r4, [r3, #0]
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	68b9      	ldr	r1, [r7, #8]
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	0023      	movs	r3, r4
 8007338:	f000 f928 	bl	800758c <HAL_SPI_TransmitReceive>
 800733c:	0003      	movs	r3, r0
 800733e:	e11c      	b.n	800757a <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	225c      	movs	r2, #92	; 0x5c
 8007344:	5c9b      	ldrb	r3, [r3, r2]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d101      	bne.n	800734e <HAL_SPI_Receive+0x5a>
 800734a:	2302      	movs	r3, #2
 800734c:	e115      	b.n	800757a <HAL_SPI_Receive+0x286>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	225c      	movs	r2, #92	; 0x5c
 8007352:	2101      	movs	r1, #1
 8007354:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007356:	f7fb fef5 	bl	8003144 <HAL_GetTick>
 800735a:	0003      	movs	r3, r0
 800735c:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	225d      	movs	r2, #93	; 0x5d
 8007362:	5c9b      	ldrb	r3, [r3, r2]
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b01      	cmp	r3, #1
 8007368:	d004      	beq.n	8007374 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800736a:	2317      	movs	r3, #23
 800736c:	18fb      	adds	r3, r7, r3
 800736e:	2202      	movs	r2, #2
 8007370:	701a      	strb	r2, [r3, #0]
    goto error;
 8007372:	e0f7      	b.n	8007564 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d003      	beq.n	8007382 <HAL_SPI_Receive+0x8e>
 800737a:	1dbb      	adds	r3, r7, #6
 800737c:	881b      	ldrh	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d104      	bne.n	800738c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8007382:	2317      	movs	r3, #23
 8007384:	18fb      	adds	r3, r7, r3
 8007386:	2201      	movs	r2, #1
 8007388:	701a      	strb	r2, [r3, #0]
    goto error;
 800738a:	e0eb      	b.n	8007564 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	225d      	movs	r2, #93	; 0x5d
 8007390:	2104      	movs	r1, #4
 8007392:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	1dba      	adds	r2, r7, #6
 80073a4:	2144      	movs	r1, #68	; 0x44
 80073a6:	8812      	ldrh	r2, [r2, #0]
 80073a8:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	1dba      	adds	r2, r7, #6
 80073ae:	2146      	movs	r1, #70	; 0x46
 80073b0:	8812      	ldrh	r2, [r2, #0]
 80073b2:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	23e0      	movs	r3, #224	; 0xe0
 80073d8:	00db      	lsls	r3, r3, #3
 80073da:	429a      	cmp	r2, r3
 80073dc:	d908      	bls.n	80073f0 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685a      	ldr	r2, [r3, #4]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4966      	ldr	r1, [pc, #408]	; (8007584 <HAL_SPI_Receive+0x290>)
 80073ea:	400a      	ands	r2, r1
 80073ec:	605a      	str	r2, [r3, #4]
 80073ee:	e008      	b.n	8007402 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685a      	ldr	r2, [r3, #4]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2180      	movs	r1, #128	; 0x80
 80073fc:	0149      	lsls	r1, r1, #5
 80073fe:	430a      	orrs	r2, r1
 8007400:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	689a      	ldr	r2, [r3, #8]
 8007406:	2380      	movs	r3, #128	; 0x80
 8007408:	021b      	lsls	r3, r3, #8
 800740a:	429a      	cmp	r2, r3
 800740c:	d10f      	bne.n	800742e <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2140      	movs	r1, #64	; 0x40
 800741a:	438a      	bics	r2, r1
 800741c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4957      	ldr	r1, [pc, #348]	; (8007588 <HAL_SPI_Receive+0x294>)
 800742a:	400a      	ands	r2, r1
 800742c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2240      	movs	r2, #64	; 0x40
 8007436:	4013      	ands	r3, r2
 8007438:	2b40      	cmp	r3, #64	; 0x40
 800743a:	d007      	beq.n	800744c <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2140      	movs	r1, #64	; 0x40
 8007448:	430a      	orrs	r2, r1
 800744a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	68da      	ldr	r2, [r3, #12]
 8007450:	23e0      	movs	r3, #224	; 0xe0
 8007452:	00db      	lsls	r3, r3, #3
 8007454:	429a      	cmp	r2, r3
 8007456:	d900      	bls.n	800745a <HAL_SPI_Receive+0x166>
 8007458:	e069      	b.n	800752e <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800745a:	e031      	b.n	80074c0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	2201      	movs	r2, #1
 8007464:	4013      	ands	r3, r2
 8007466:	2b01      	cmp	r3, #1
 8007468:	d117      	bne.n	800749a <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	330c      	adds	r3, #12
 8007470:	001a      	movs	r2, r3
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007476:	7812      	ldrb	r2, [r2, #0]
 8007478:	b2d2      	uxtb	r2, r2
 800747a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007480:	1c5a      	adds	r2, r3, #1
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2246      	movs	r2, #70	; 0x46
 800748a:	5a9b      	ldrh	r3, [r3, r2]
 800748c:	b29b      	uxth	r3, r3
 800748e:	3b01      	subs	r3, #1
 8007490:	b299      	uxth	r1, r3
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2246      	movs	r2, #70	; 0x46
 8007496:	5299      	strh	r1, [r3, r2]
 8007498:	e012      	b.n	80074c0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800749a:	f7fb fe53 	bl	8003144 <HAL_GetTick>
 800749e:	0002      	movs	r2, r0
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	683a      	ldr	r2, [r7, #0]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d802      	bhi.n	80074b0 <HAL_SPI_Receive+0x1bc>
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	3301      	adds	r3, #1
 80074ae:	d102      	bne.n	80074b6 <HAL_SPI_Receive+0x1c2>
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d104      	bne.n	80074c0 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80074b6:	2317      	movs	r3, #23
 80074b8:	18fb      	adds	r3, r7, r3
 80074ba:	2203      	movs	r2, #3
 80074bc:	701a      	strb	r2, [r3, #0]
          goto error;
 80074be:	e051      	b.n	8007564 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2246      	movs	r2, #70	; 0x46
 80074c4:	5a9b      	ldrh	r3, [r3, r2]
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1c7      	bne.n	800745c <HAL_SPI_Receive+0x168>
 80074cc:	e035      	b.n	800753a <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	2201      	movs	r2, #1
 80074d6:	4013      	ands	r3, r2
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d115      	bne.n	8007508 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68da      	ldr	r2, [r3, #12]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e6:	b292      	uxth	r2, r2
 80074e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ee:	1c9a      	adds	r2, r3, #2
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2246      	movs	r2, #70	; 0x46
 80074f8:	5a9b      	ldrh	r3, [r3, r2]
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	3b01      	subs	r3, #1
 80074fe:	b299      	uxth	r1, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2246      	movs	r2, #70	; 0x46
 8007504:	5299      	strh	r1, [r3, r2]
 8007506:	e012      	b.n	800752e <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007508:	f7fb fe1c 	bl	8003144 <HAL_GetTick>
 800750c:	0002      	movs	r2, r0
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	683a      	ldr	r2, [r7, #0]
 8007514:	429a      	cmp	r2, r3
 8007516:	d802      	bhi.n	800751e <HAL_SPI_Receive+0x22a>
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	3301      	adds	r3, #1
 800751c:	d102      	bne.n	8007524 <HAL_SPI_Receive+0x230>
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d104      	bne.n	800752e <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8007524:	2317      	movs	r3, #23
 8007526:	18fb      	adds	r3, r7, r3
 8007528:	2203      	movs	r2, #3
 800752a:	701a      	strb	r2, [r3, #0]
          goto error;
 800752c:	e01a      	b.n	8007564 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2246      	movs	r2, #70	; 0x46
 8007532:	5a9b      	ldrh	r3, [r3, r2]
 8007534:	b29b      	uxth	r3, r3
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1c9      	bne.n	80074ce <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	0018      	movs	r0, r3
 8007542:	f000 fc41 	bl	8007dc8 <SPI_EndRxTransaction>
 8007546:	1e03      	subs	r3, r0, #0
 8007548:	d002      	beq.n	8007550 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2220      	movs	r2, #32
 800754e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007554:	2b00      	cmp	r3, #0
 8007556:	d004      	beq.n	8007562 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8007558:	2317      	movs	r3, #23
 800755a:	18fb      	adds	r3, r7, r3
 800755c:	2201      	movs	r2, #1
 800755e:	701a      	strb	r2, [r3, #0]
 8007560:	e000      	b.n	8007564 <HAL_SPI_Receive+0x270>
  }

error :
 8007562:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	225d      	movs	r2, #93	; 0x5d
 8007568:	2101      	movs	r1, #1
 800756a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	225c      	movs	r2, #92	; 0x5c
 8007570:	2100      	movs	r1, #0
 8007572:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007574:	2317      	movs	r3, #23
 8007576:	18fb      	adds	r3, r7, r3
 8007578:	781b      	ldrb	r3, [r3, #0]
}
 800757a:	0018      	movs	r0, r3
 800757c:	46bd      	mov	sp, r7
 800757e:	b007      	add	sp, #28
 8007580:	bd90      	pop	{r4, r7, pc}
 8007582:	46c0      	nop			; (mov r8, r8)
 8007584:	ffffefff 	.word	0xffffefff
 8007588:	ffffbfff 	.word	0xffffbfff

0800758c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b08a      	sub	sp, #40	; 0x28
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
 8007598:	001a      	movs	r2, r3
 800759a:	1cbb      	adds	r3, r7, #2
 800759c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800759e:	2301      	movs	r3, #1
 80075a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80075a2:	2323      	movs	r3, #35	; 0x23
 80075a4:	18fb      	adds	r3, r7, r3
 80075a6:	2200      	movs	r2, #0
 80075a8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	225c      	movs	r2, #92	; 0x5c
 80075ae:	5c9b      	ldrb	r3, [r3, r2]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d101      	bne.n	80075b8 <HAL_SPI_TransmitReceive+0x2c>
 80075b4:	2302      	movs	r3, #2
 80075b6:	e1b5      	b.n	8007924 <HAL_SPI_TransmitReceive+0x398>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	225c      	movs	r2, #92	; 0x5c
 80075bc:	2101      	movs	r1, #1
 80075be:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075c0:	f7fb fdc0 	bl	8003144 <HAL_GetTick>
 80075c4:	0003      	movs	r3, r0
 80075c6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80075c8:	201b      	movs	r0, #27
 80075ca:	183b      	adds	r3, r7, r0
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	215d      	movs	r1, #93	; 0x5d
 80075d0:	5c52      	ldrb	r2, [r2, r1]
 80075d2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80075da:	2312      	movs	r3, #18
 80075dc:	18fb      	adds	r3, r7, r3
 80075de:	1cba      	adds	r2, r7, #2
 80075e0:	8812      	ldrh	r2, [r2, #0]
 80075e2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80075e4:	183b      	adds	r3, r7, r0
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d011      	beq.n	8007610 <HAL_SPI_TransmitReceive+0x84>
 80075ec:	697a      	ldr	r2, [r7, #20]
 80075ee:	2382      	movs	r3, #130	; 0x82
 80075f0:	005b      	lsls	r3, r3, #1
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d107      	bne.n	8007606 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d103      	bne.n	8007606 <HAL_SPI_TransmitReceive+0x7a>
 80075fe:	183b      	adds	r3, r7, r0
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	2b04      	cmp	r3, #4
 8007604:	d004      	beq.n	8007610 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8007606:	2323      	movs	r3, #35	; 0x23
 8007608:	18fb      	adds	r3, r7, r3
 800760a:	2202      	movs	r2, #2
 800760c:	701a      	strb	r2, [r3, #0]
    goto error;
 800760e:	e17e      	b.n	800790e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d006      	beq.n	8007624 <HAL_SPI_TransmitReceive+0x98>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d003      	beq.n	8007624 <HAL_SPI_TransmitReceive+0x98>
 800761c:	1cbb      	adds	r3, r7, #2
 800761e:	881b      	ldrh	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d104      	bne.n	800762e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007624:	2323      	movs	r3, #35	; 0x23
 8007626:	18fb      	adds	r3, r7, r3
 8007628:	2201      	movs	r2, #1
 800762a:	701a      	strb	r2, [r3, #0]
    goto error;
 800762c:	e16f      	b.n	800790e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	225d      	movs	r2, #93	; 0x5d
 8007632:	5c9b      	ldrb	r3, [r3, r2]
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b04      	cmp	r3, #4
 8007638:	d003      	beq.n	8007642 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	225d      	movs	r2, #93	; 0x5d
 800763e:	2105      	movs	r1, #5
 8007640:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2200      	movs	r2, #0
 8007646:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	1cba      	adds	r2, r7, #2
 8007652:	2146      	movs	r1, #70	; 0x46
 8007654:	8812      	ldrh	r2, [r2, #0]
 8007656:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	1cba      	adds	r2, r7, #2
 800765c:	2144      	movs	r1, #68	; 0x44
 800765e:	8812      	ldrh	r2, [r2, #0]
 8007660:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	1cba      	adds	r2, r7, #2
 800766c:	8812      	ldrh	r2, [r2, #0]
 800766e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	1cba      	adds	r2, r7, #2
 8007674:	8812      	ldrh	r2, [r2, #0]
 8007676:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	68da      	ldr	r2, [r3, #12]
 8007688:	23e0      	movs	r3, #224	; 0xe0
 800768a:	00db      	lsls	r3, r3, #3
 800768c:	429a      	cmp	r2, r3
 800768e:	d908      	bls.n	80076a2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	685a      	ldr	r2, [r3, #4]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	49a4      	ldr	r1, [pc, #656]	; (800792c <HAL_SPI_TransmitReceive+0x3a0>)
 800769c:	400a      	ands	r2, r1
 800769e:	605a      	str	r2, [r3, #4]
 80076a0:	e008      	b.n	80076b4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	685a      	ldr	r2, [r3, #4]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2180      	movs	r1, #128	; 0x80
 80076ae:	0149      	lsls	r1, r1, #5
 80076b0:	430a      	orrs	r2, r1
 80076b2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2240      	movs	r2, #64	; 0x40
 80076bc:	4013      	ands	r3, r2
 80076be:	2b40      	cmp	r3, #64	; 0x40
 80076c0:	d007      	beq.n	80076d2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2140      	movs	r1, #64	; 0x40
 80076ce:	430a      	orrs	r2, r1
 80076d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	68da      	ldr	r2, [r3, #12]
 80076d6:	23e0      	movs	r3, #224	; 0xe0
 80076d8:	00db      	lsls	r3, r3, #3
 80076da:	429a      	cmp	r2, r3
 80076dc:	d800      	bhi.n	80076e0 <HAL_SPI_TransmitReceive+0x154>
 80076de:	e07f      	b.n	80077e0 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d005      	beq.n	80076f4 <HAL_SPI_TransmitReceive+0x168>
 80076e8:	2312      	movs	r3, #18
 80076ea:	18fb      	adds	r3, r7, r3
 80076ec:	881b      	ldrh	r3, [r3, #0]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d000      	beq.n	80076f4 <HAL_SPI_TransmitReceive+0x168>
 80076f2:	e069      	b.n	80077c8 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f8:	881a      	ldrh	r2, [r3, #0]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007704:	1c9a      	adds	r2, r3, #2
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800770e:	b29b      	uxth	r3, r3
 8007710:	3b01      	subs	r3, #1
 8007712:	b29a      	uxth	r2, r3
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007718:	e056      	b.n	80077c8 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	2202      	movs	r2, #2
 8007722:	4013      	ands	r3, r2
 8007724:	2b02      	cmp	r3, #2
 8007726:	d11b      	bne.n	8007760 <HAL_SPI_TransmitReceive+0x1d4>
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800772c:	b29b      	uxth	r3, r3
 800772e:	2b00      	cmp	r3, #0
 8007730:	d016      	beq.n	8007760 <HAL_SPI_TransmitReceive+0x1d4>
 8007732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007734:	2b01      	cmp	r3, #1
 8007736:	d113      	bne.n	8007760 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773c:	881a      	ldrh	r2, [r3, #0]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007748:	1c9a      	adds	r2, r3, #2
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007752:	b29b      	uxth	r3, r3
 8007754:	3b01      	subs	r3, #1
 8007756:	b29a      	uxth	r2, r3
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800775c:	2300      	movs	r3, #0
 800775e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	2201      	movs	r2, #1
 8007768:	4013      	ands	r3, r2
 800776a:	2b01      	cmp	r3, #1
 800776c:	d11c      	bne.n	80077a8 <HAL_SPI_TransmitReceive+0x21c>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2246      	movs	r2, #70	; 0x46
 8007772:	5a9b      	ldrh	r3, [r3, r2]
 8007774:	b29b      	uxth	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d016      	beq.n	80077a8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68da      	ldr	r2, [r3, #12]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007784:	b292      	uxth	r2, r2
 8007786:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778c:	1c9a      	adds	r2, r3, #2
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2246      	movs	r2, #70	; 0x46
 8007796:	5a9b      	ldrh	r3, [r3, r2]
 8007798:	b29b      	uxth	r3, r3
 800779a:	3b01      	subs	r3, #1
 800779c:	b299      	uxth	r1, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2246      	movs	r2, #70	; 0x46
 80077a2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80077a4:	2301      	movs	r3, #1
 80077a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80077a8:	f7fb fccc 	bl	8003144 <HAL_GetTick>
 80077ac:	0002      	movs	r2, r0
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d807      	bhi.n	80077c8 <HAL_SPI_TransmitReceive+0x23c>
 80077b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ba:	3301      	adds	r3, #1
 80077bc:	d004      	beq.n	80077c8 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80077be:	2323      	movs	r3, #35	; 0x23
 80077c0:	18fb      	adds	r3, r7, r3
 80077c2:	2203      	movs	r2, #3
 80077c4:	701a      	strb	r2, [r3, #0]
        goto error;
 80077c6:	e0a2      	b.n	800790e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1a3      	bne.n	800771a <HAL_SPI_TransmitReceive+0x18e>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2246      	movs	r2, #70	; 0x46
 80077d6:	5a9b      	ldrh	r3, [r3, r2]
 80077d8:	b29b      	uxth	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d19d      	bne.n	800771a <HAL_SPI_TransmitReceive+0x18e>
 80077de:	e085      	b.n	80078ec <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d005      	beq.n	80077f4 <HAL_SPI_TransmitReceive+0x268>
 80077e8:	2312      	movs	r3, #18
 80077ea:	18fb      	adds	r3, r7, r3
 80077ec:	881b      	ldrh	r3, [r3, #0]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d000      	beq.n	80077f4 <HAL_SPI_TransmitReceive+0x268>
 80077f2:	e070      	b.n	80078d6 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	330c      	adds	r3, #12
 80077fe:	7812      	ldrb	r2, [r2, #0]
 8007800:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007806:	1c5a      	adds	r2, r3, #1
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007810:	b29b      	uxth	r3, r3
 8007812:	3b01      	subs	r3, #1
 8007814:	b29a      	uxth	r2, r3
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800781a:	e05c      	b.n	80078d6 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	2202      	movs	r2, #2
 8007824:	4013      	ands	r3, r2
 8007826:	2b02      	cmp	r3, #2
 8007828:	d11c      	bne.n	8007864 <HAL_SPI_TransmitReceive+0x2d8>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800782e:	b29b      	uxth	r3, r3
 8007830:	2b00      	cmp	r3, #0
 8007832:	d017      	beq.n	8007864 <HAL_SPI_TransmitReceive+0x2d8>
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007836:	2b01      	cmp	r3, #1
 8007838:	d114      	bne.n	8007864 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	330c      	adds	r3, #12
 8007844:	7812      	ldrb	r2, [r2, #0]
 8007846:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784c:	1c5a      	adds	r2, r3, #1
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007856:	b29b      	uxth	r3, r3
 8007858:	3b01      	subs	r3, #1
 800785a:	b29a      	uxth	r2, r3
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007860:	2300      	movs	r3, #0
 8007862:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	2201      	movs	r2, #1
 800786c:	4013      	ands	r3, r2
 800786e:	2b01      	cmp	r3, #1
 8007870:	d11e      	bne.n	80078b0 <HAL_SPI_TransmitReceive+0x324>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2246      	movs	r2, #70	; 0x46
 8007876:	5a9b      	ldrh	r3, [r3, r2]
 8007878:	b29b      	uxth	r3, r3
 800787a:	2b00      	cmp	r3, #0
 800787c:	d018      	beq.n	80078b0 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	330c      	adds	r3, #12
 8007884:	001a      	movs	r2, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788a:	7812      	ldrb	r2, [r2, #0]
 800788c:	b2d2      	uxtb	r2, r2
 800788e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007894:	1c5a      	adds	r2, r3, #1
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2246      	movs	r2, #70	; 0x46
 800789e:	5a9b      	ldrh	r3, [r3, r2]
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	3b01      	subs	r3, #1
 80078a4:	b299      	uxth	r1, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2246      	movs	r2, #70	; 0x46
 80078aa:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80078ac:	2301      	movs	r3, #1
 80078ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80078b0:	f7fb fc48 	bl	8003144 <HAL_GetTick>
 80078b4:	0002      	movs	r2, r0
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078bc:	429a      	cmp	r2, r3
 80078be:	d802      	bhi.n	80078c6 <HAL_SPI_TransmitReceive+0x33a>
 80078c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c2:	3301      	adds	r3, #1
 80078c4:	d102      	bne.n	80078cc <HAL_SPI_TransmitReceive+0x340>
 80078c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d104      	bne.n	80078d6 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80078cc:	2323      	movs	r3, #35	; 0x23
 80078ce:	18fb      	adds	r3, r7, r3
 80078d0:	2203      	movs	r2, #3
 80078d2:	701a      	strb	r2, [r3, #0]
        goto error;
 80078d4:	e01b      	b.n	800790e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078da:	b29b      	uxth	r3, r3
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d19d      	bne.n	800781c <HAL_SPI_TransmitReceive+0x290>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2246      	movs	r2, #70	; 0x46
 80078e4:	5a9b      	ldrh	r3, [r3, r2]
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d197      	bne.n	800781c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078ec:	69fa      	ldr	r2, [r7, #28]
 80078ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	0018      	movs	r0, r3
 80078f4:	f000 fac6 	bl	8007e84 <SPI_EndRxTxTransaction>
 80078f8:	1e03      	subs	r3, r0, #0
 80078fa:	d007      	beq.n	800790c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80078fc:	2323      	movs	r3, #35	; 0x23
 80078fe:	18fb      	adds	r3, r7, r3
 8007900:	2201      	movs	r2, #1
 8007902:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2220      	movs	r2, #32
 8007908:	661a      	str	r2, [r3, #96]	; 0x60
 800790a:	e000      	b.n	800790e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800790c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	225d      	movs	r2, #93	; 0x5d
 8007912:	2101      	movs	r1, #1
 8007914:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	225c      	movs	r2, #92	; 0x5c
 800791a:	2100      	movs	r1, #0
 800791c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800791e:	2323      	movs	r3, #35	; 0x23
 8007920:	18fb      	adds	r3, r7, r3
 8007922:	781b      	ldrb	r3, [r3, #0]
}
 8007924:	0018      	movs	r0, r3
 8007926:	46bd      	mov	sp, r7
 8007928:	b00a      	add	sp, #40	; 0x28
 800792a:	bd80      	pop	{r7, pc}
 800792c:	ffffefff 	.word	0xffffefff

08007930 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b088      	sub	sp, #32
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	099b      	lsrs	r3, r3, #6
 800794c:	001a      	movs	r2, r3
 800794e:	2301      	movs	r3, #1
 8007950:	4013      	ands	r3, r2
 8007952:	d10f      	bne.n	8007974 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	2201      	movs	r2, #1
 8007958:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800795a:	d00b      	beq.n	8007974 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	099b      	lsrs	r3, r3, #6
 8007960:	001a      	movs	r2, r3
 8007962:	2301      	movs	r3, #1
 8007964:	4013      	ands	r3, r2
 8007966:	d005      	beq.n	8007974 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	0010      	movs	r0, r2
 8007970:	4798      	blx	r3
    return;
 8007972:	e0d5      	b.n	8007b20 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	085b      	lsrs	r3, r3, #1
 8007978:	001a      	movs	r2, r3
 800797a:	2301      	movs	r3, #1
 800797c:	4013      	ands	r3, r2
 800797e:	d00b      	beq.n	8007998 <HAL_SPI_IRQHandler+0x68>
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	09db      	lsrs	r3, r3, #7
 8007984:	001a      	movs	r2, r3
 8007986:	2301      	movs	r3, #1
 8007988:	4013      	ands	r3, r2
 800798a:	d005      	beq.n	8007998 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	0010      	movs	r0, r2
 8007994:	4798      	blx	r3
    return;
 8007996:	e0c3      	b.n	8007b20 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	095b      	lsrs	r3, r3, #5
 800799c:	001a      	movs	r2, r3
 800799e:	2301      	movs	r3, #1
 80079a0:	4013      	ands	r3, r2
 80079a2:	d10c      	bne.n	80079be <HAL_SPI_IRQHandler+0x8e>
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	099b      	lsrs	r3, r3, #6
 80079a8:	001a      	movs	r2, r3
 80079aa:	2301      	movs	r3, #1
 80079ac:	4013      	ands	r3, r2
 80079ae:	d106      	bne.n	80079be <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	0a1b      	lsrs	r3, r3, #8
 80079b4:	001a      	movs	r2, r3
 80079b6:	2301      	movs	r3, #1
 80079b8:	4013      	ands	r3, r2
 80079ba:	d100      	bne.n	80079be <HAL_SPI_IRQHandler+0x8e>
 80079bc:	e0b0      	b.n	8007b20 <HAL_SPI_IRQHandler+0x1f0>
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	095b      	lsrs	r3, r3, #5
 80079c2:	001a      	movs	r2, r3
 80079c4:	2301      	movs	r3, #1
 80079c6:	4013      	ands	r3, r2
 80079c8:	d100      	bne.n	80079cc <HAL_SPI_IRQHandler+0x9c>
 80079ca:	e0a9      	b.n	8007b20 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	099b      	lsrs	r3, r3, #6
 80079d0:	001a      	movs	r2, r3
 80079d2:	2301      	movs	r3, #1
 80079d4:	4013      	ands	r3, r2
 80079d6:	d023      	beq.n	8007a20 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	225d      	movs	r2, #93	; 0x5d
 80079dc:	5c9b      	ldrb	r3, [r3, r2]
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b03      	cmp	r3, #3
 80079e2:	d011      	beq.n	8007a08 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079e8:	2204      	movs	r2, #4
 80079ea:	431a      	orrs	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079f0:	2300      	movs	r3, #0
 80079f2:	617b      	str	r3, [r7, #20]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	617b      	str	r3, [r7, #20]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	617b      	str	r3, [r7, #20]
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	e00b      	b.n	8007a20 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a08:	2300      	movs	r3, #0
 8007a0a:	613b      	str	r3, [r7, #16]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	613b      	str	r3, [r7, #16]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	613b      	str	r3, [r7, #16]
 8007a1c:	693b      	ldr	r3, [r7, #16]
        return;
 8007a1e:	e07f      	b.n	8007b20 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	095b      	lsrs	r3, r3, #5
 8007a24:	001a      	movs	r2, r3
 8007a26:	2301      	movs	r3, #1
 8007a28:	4013      	ands	r3, r2
 8007a2a:	d014      	beq.n	8007a56 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a30:	2201      	movs	r2, #1
 8007a32:	431a      	orrs	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007a38:	2300      	movs	r3, #0
 8007a3a:	60fb      	str	r3, [r7, #12]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	60fb      	str	r3, [r7, #12]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2140      	movs	r1, #64	; 0x40
 8007a50:	438a      	bics	r2, r1
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	0a1b      	lsrs	r3, r3, #8
 8007a5a:	001a      	movs	r2, r3
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	4013      	ands	r3, r2
 8007a60:	d00c      	beq.n	8007a7c <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a66:	2208      	movs	r2, #8
 8007a68:	431a      	orrs	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007a6e:	2300      	movs	r3, #0
 8007a70:	60bb      	str	r3, [r7, #8]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	60bb      	str	r3, [r7, #8]
 8007a7a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d04c      	beq.n	8007b1e <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	685a      	ldr	r2, [r3, #4]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	21e0      	movs	r1, #224	; 0xe0
 8007a90:	438a      	bics	r2, r1
 8007a92:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	225d      	movs	r2, #93	; 0x5d
 8007a98:	2101      	movs	r1, #1
 8007a9a:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	2202      	movs	r2, #2
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	d103      	bne.n	8007aac <HAL_SPI_IRQHandler+0x17c>
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	d032      	beq.n	8007b12 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685a      	ldr	r2, [r3, #4]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2103      	movs	r1, #3
 8007ab8:	438a      	bics	r2, r1
 8007aba:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d010      	beq.n	8007ae6 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ac8:	4a17      	ldr	r2, [pc, #92]	; (8007b28 <HAL_SPI_IRQHandler+0x1f8>)
 8007aca:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ad0:	0018      	movs	r0, r3
 8007ad2:	f7fb ffc9 	bl	8003a68 <HAL_DMA_Abort_IT>
 8007ad6:	1e03      	subs	r3, r0, #0
 8007ad8:	d005      	beq.n	8007ae6 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ade:	2240      	movs	r2, #64	; 0x40
 8007ae0:	431a      	orrs	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d016      	beq.n	8007b1c <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af2:	4a0d      	ldr	r2, [pc, #52]	; (8007b28 <HAL_SPI_IRQHandler+0x1f8>)
 8007af4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007afa:	0018      	movs	r0, r3
 8007afc:	f7fb ffb4 	bl	8003a68 <HAL_DMA_Abort_IT>
 8007b00:	1e03      	subs	r3, r0, #0
 8007b02:	d00b      	beq.n	8007b1c <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b08:	2240      	movs	r2, #64	; 0x40
 8007b0a:	431a      	orrs	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007b10:	e004      	b.n	8007b1c <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	0018      	movs	r0, r3
 8007b16:	f000 f809 	bl	8007b2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007b1a:	e000      	b.n	8007b1e <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8007b1c:	46c0      	nop			; (mov r8, r8)
    return;
 8007b1e:	46c0      	nop			; (mov r8, r8)
  }
}
 8007b20:	46bd      	mov	sp, r7
 8007b22:	b008      	add	sp, #32
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	46c0      	nop			; (mov r8, r8)
 8007b28:	08007b3d 	.word	0x08007b3d

08007b2c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007b34:	46c0      	nop			; (mov r8, r8)
 8007b36:	46bd      	mov	sp, r7
 8007b38:	b002      	add	sp, #8
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b48:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2246      	movs	r2, #70	; 0x46
 8007b4e:	2100      	movs	r1, #0
 8007b50:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	0018      	movs	r0, r3
 8007b5c:	f7ff ffe6 	bl	8007b2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007b60:	46c0      	nop			; (mov r8, r8)
 8007b62:	46bd      	mov	sp, r7
 8007b64:	b004      	add	sp, #16
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b088      	sub	sp, #32
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	603b      	str	r3, [r7, #0]
 8007b74:	1dfb      	adds	r3, r7, #7
 8007b76:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b78:	f7fb fae4 	bl	8003144 <HAL_GetTick>
 8007b7c:	0002      	movs	r2, r0
 8007b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b80:	1a9b      	subs	r3, r3, r2
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	18d3      	adds	r3, r2, r3
 8007b86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b88:	f7fb fadc 	bl	8003144 <HAL_GetTick>
 8007b8c:	0003      	movs	r3, r0
 8007b8e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b90:	4b3a      	ldr	r3, [pc, #232]	; (8007c7c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	015b      	lsls	r3, r3, #5
 8007b96:	0d1b      	lsrs	r3, r3, #20
 8007b98:	69fa      	ldr	r2, [r7, #28]
 8007b9a:	4353      	muls	r3, r2
 8007b9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b9e:	e058      	b.n	8007c52 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	d055      	beq.n	8007c52 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ba6:	f7fb facd 	bl	8003144 <HAL_GetTick>
 8007baa:	0002      	movs	r2, r0
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	69fa      	ldr	r2, [r7, #28]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d902      	bls.n	8007bbc <SPI_WaitFlagStateUntilTimeout+0x54>
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d142      	bne.n	8007c42 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	685a      	ldr	r2, [r3, #4]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	21e0      	movs	r1, #224	; 0xe0
 8007bc8:	438a      	bics	r2, r1
 8007bca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	685a      	ldr	r2, [r3, #4]
 8007bd0:	2382      	movs	r3, #130	; 0x82
 8007bd2:	005b      	lsls	r3, r3, #1
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d113      	bne.n	8007c00 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	689a      	ldr	r2, [r3, #8]
 8007bdc:	2380      	movs	r3, #128	; 0x80
 8007bde:	021b      	lsls	r3, r3, #8
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d005      	beq.n	8007bf0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	689a      	ldr	r2, [r3, #8]
 8007be8:	2380      	movs	r3, #128	; 0x80
 8007bea:	00db      	lsls	r3, r3, #3
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d107      	bne.n	8007c00 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2140      	movs	r1, #64	; 0x40
 8007bfc:	438a      	bics	r2, r1
 8007bfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c04:	2380      	movs	r3, #128	; 0x80
 8007c06:	019b      	lsls	r3, r3, #6
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d110      	bne.n	8007c2e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	491a      	ldr	r1, [pc, #104]	; (8007c80 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007c18:	400a      	ands	r2, r1
 8007c1a:	601a      	str	r2, [r3, #0]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2180      	movs	r1, #128	; 0x80
 8007c28:	0189      	lsls	r1, r1, #6
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	225d      	movs	r2, #93	; 0x5d
 8007c32:	2101      	movs	r1, #1
 8007c34:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	225c      	movs	r2, #92	; 0x5c
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e017      	b.n	8007c72 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d101      	bne.n	8007c4c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	425a      	negs	r2, r3
 8007c62:	4153      	adcs	r3, r2
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	001a      	movs	r2, r3
 8007c68:	1dfb      	adds	r3, r7, #7
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d197      	bne.n	8007ba0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	0018      	movs	r0, r3
 8007c74:	46bd      	mov	sp, r7
 8007c76:	b008      	add	sp, #32
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	46c0      	nop			; (mov r8, r8)
 8007c7c:	20000064 	.word	0x20000064
 8007c80:	ffffdfff 	.word	0xffffdfff

08007c84 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b08a      	sub	sp, #40	; 0x28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]
 8007c90:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007c92:	2317      	movs	r3, #23
 8007c94:	18fb      	adds	r3, r7, r3
 8007c96:	2200      	movs	r2, #0
 8007c98:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007c9a:	f7fb fa53 	bl	8003144 <HAL_GetTick>
 8007c9e:	0002      	movs	r2, r0
 8007ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca2:	1a9b      	subs	r3, r3, r2
 8007ca4:	683a      	ldr	r2, [r7, #0]
 8007ca6:	18d3      	adds	r3, r2, r3
 8007ca8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007caa:	f7fb fa4b 	bl	8003144 <HAL_GetTick>
 8007cae:	0003      	movs	r3, r0
 8007cb0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	330c      	adds	r3, #12
 8007cb8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007cba:	4b41      	ldr	r3, [pc, #260]	; (8007dc0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	0013      	movs	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	189b      	adds	r3, r3, r2
 8007cc4:	00da      	lsls	r2, r3, #3
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	0d1b      	lsrs	r3, r3, #20
 8007cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ccc:	4353      	muls	r3, r2
 8007cce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007cd0:	e068      	b.n	8007da4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	23c0      	movs	r3, #192	; 0xc0
 8007cd6:	00db      	lsls	r3, r3, #3
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d10a      	bne.n	8007cf2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d107      	bne.n	8007cf2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	b2da      	uxtb	r2, r3
 8007ce8:	2117      	movs	r1, #23
 8007cea:	187b      	adds	r3, r7, r1
 8007cec:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007cee:	187b      	adds	r3, r7, r1
 8007cf0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	d055      	beq.n	8007da4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007cf8:	f7fb fa24 	bl	8003144 <HAL_GetTick>
 8007cfc:	0002      	movs	r2, r0
 8007cfe:	6a3b      	ldr	r3, [r7, #32]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d902      	bls.n	8007d0e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8007d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d142      	bne.n	8007d94 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	685a      	ldr	r2, [r3, #4]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	21e0      	movs	r1, #224	; 0xe0
 8007d1a:	438a      	bics	r2, r1
 8007d1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	2382      	movs	r3, #130	; 0x82
 8007d24:	005b      	lsls	r3, r3, #1
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d113      	bne.n	8007d52 <SPI_WaitFifoStateUntilTimeout+0xce>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	689a      	ldr	r2, [r3, #8]
 8007d2e:	2380      	movs	r3, #128	; 0x80
 8007d30:	021b      	lsls	r3, r3, #8
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d005      	beq.n	8007d42 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	689a      	ldr	r2, [r3, #8]
 8007d3a:	2380      	movs	r3, #128	; 0x80
 8007d3c:	00db      	lsls	r3, r3, #3
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d107      	bne.n	8007d52 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2140      	movs	r1, #64	; 0x40
 8007d4e:	438a      	bics	r2, r1
 8007d50:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d56:	2380      	movs	r3, #128	; 0x80
 8007d58:	019b      	lsls	r3, r3, #6
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d110      	bne.n	8007d80 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4916      	ldr	r1, [pc, #88]	; (8007dc4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007d6a:	400a      	ands	r2, r1
 8007d6c:	601a      	str	r2, [r3, #0]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2180      	movs	r1, #128	; 0x80
 8007d7a:	0189      	lsls	r1, r1, #6
 8007d7c:	430a      	orrs	r2, r1
 8007d7e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	225d      	movs	r2, #93	; 0x5d
 8007d84:	2101      	movs	r1, #1
 8007d86:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	225c      	movs	r2, #92	; 0x5c
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e010      	b.n	8007db6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	3b01      	subs	r3, #1
 8007da2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	68ba      	ldr	r2, [r7, #8]
 8007dac:	4013      	ands	r3, r2
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d18e      	bne.n	8007cd2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	0018      	movs	r0, r3
 8007db8:	46bd      	mov	sp, r7
 8007dba:	b00a      	add	sp, #40	; 0x28
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	46c0      	nop			; (mov r8, r8)
 8007dc0:	20000064 	.word	0x20000064
 8007dc4:	ffffdfff 	.word	0xffffdfff

08007dc8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b086      	sub	sp, #24
 8007dcc:	af02      	add	r7, sp, #8
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	685a      	ldr	r2, [r3, #4]
 8007dd8:	2382      	movs	r3, #130	; 0x82
 8007dda:	005b      	lsls	r3, r3, #1
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d113      	bne.n	8007e08 <SPI_EndRxTransaction+0x40>
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	689a      	ldr	r2, [r3, #8]
 8007de4:	2380      	movs	r3, #128	; 0x80
 8007de6:	021b      	lsls	r3, r3, #8
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d005      	beq.n	8007df8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	689a      	ldr	r2, [r3, #8]
 8007df0:	2380      	movs	r3, #128	; 0x80
 8007df2:	00db      	lsls	r3, r3, #3
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d107      	bne.n	8007e08 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2140      	movs	r1, #64	; 0x40
 8007e04:	438a      	bics	r2, r1
 8007e06:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	0013      	movs	r3, r2
 8007e12:	2200      	movs	r2, #0
 8007e14:	2180      	movs	r1, #128	; 0x80
 8007e16:	f7ff fea7 	bl	8007b68 <SPI_WaitFlagStateUntilTimeout>
 8007e1a:	1e03      	subs	r3, r0, #0
 8007e1c:	d007      	beq.n	8007e2e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e22:	2220      	movs	r2, #32
 8007e24:	431a      	orrs	r2, r3
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e026      	b.n	8007e7c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	685a      	ldr	r2, [r3, #4]
 8007e32:	2382      	movs	r3, #130	; 0x82
 8007e34:	005b      	lsls	r3, r3, #1
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d11f      	bne.n	8007e7a <SPI_EndRxTransaction+0xb2>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	689a      	ldr	r2, [r3, #8]
 8007e3e:	2380      	movs	r3, #128	; 0x80
 8007e40:	021b      	lsls	r3, r3, #8
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d005      	beq.n	8007e52 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	689a      	ldr	r2, [r3, #8]
 8007e4a:	2380      	movs	r3, #128	; 0x80
 8007e4c:	00db      	lsls	r3, r3, #3
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d113      	bne.n	8007e7a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	23c0      	movs	r3, #192	; 0xc0
 8007e56:	00d9      	lsls	r1, r3, #3
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	0013      	movs	r3, r2
 8007e60:	2200      	movs	r2, #0
 8007e62:	f7ff ff0f 	bl	8007c84 <SPI_WaitFifoStateUntilTimeout>
 8007e66:	1e03      	subs	r3, r0, #0
 8007e68:	d007      	beq.n	8007e7a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e6e:	2220      	movs	r2, #32
 8007e70:	431a      	orrs	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e000      	b.n	8007e7c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	0018      	movs	r0, r3
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	b004      	add	sp, #16
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b086      	sub	sp, #24
 8007e88:	af02      	add	r7, sp, #8
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	23c0      	movs	r3, #192	; 0xc0
 8007e94:	0159      	lsls	r1, r3, #5
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	9300      	str	r3, [sp, #0]
 8007e9c:	0013      	movs	r3, r2
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f7ff fef0 	bl	8007c84 <SPI_WaitFifoStateUntilTimeout>
 8007ea4:	1e03      	subs	r3, r0, #0
 8007ea6:	d007      	beq.n	8007eb8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eac:	2220      	movs	r2, #32
 8007eae:	431a      	orrs	r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e027      	b.n	8007f08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007eb8:	68ba      	ldr	r2, [r7, #8]
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	0013      	movs	r3, r2
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	2180      	movs	r1, #128	; 0x80
 8007ec6:	f7ff fe4f 	bl	8007b68 <SPI_WaitFlagStateUntilTimeout>
 8007eca:	1e03      	subs	r3, r0, #0
 8007ecc:	d007      	beq.n	8007ede <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ed2:	2220      	movs	r2, #32
 8007ed4:	431a      	orrs	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007eda:	2303      	movs	r3, #3
 8007edc:	e014      	b.n	8007f08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	23c0      	movs	r3, #192	; 0xc0
 8007ee2:	00d9      	lsls	r1, r3, #3
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	0013      	movs	r3, r2
 8007eec:	2200      	movs	r2, #0
 8007eee:	f7ff fec9 	bl	8007c84 <SPI_WaitFifoStateUntilTimeout>
 8007ef2:	1e03      	subs	r3, r0, #0
 8007ef4:	d007      	beq.n	8007f06 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007efa:	2220      	movs	r2, #32
 8007efc:	431a      	orrs	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e000      	b.n	8007f08 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	0018      	movs	r0, r3
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	b004      	add	sp, #16
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d101      	bne.n	8007f22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e04a      	b.n	8007fb8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	223d      	movs	r2, #61	; 0x3d
 8007f26:	5c9b      	ldrb	r3, [r3, r2]
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d107      	bne.n	8007f3e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	223c      	movs	r2, #60	; 0x3c
 8007f32:	2100      	movs	r1, #0
 8007f34:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	0018      	movs	r0, r3
 8007f3a:	f7fa fe61 	bl	8002c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	223d      	movs	r2, #61	; 0x3d
 8007f42:	2102      	movs	r1, #2
 8007f44:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	3304      	adds	r3, #4
 8007f4e:	0019      	movs	r1, r3
 8007f50:	0010      	movs	r0, r2
 8007f52:	f000 fb55 	bl	8008600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2248      	movs	r2, #72	; 0x48
 8007f5a:	2101      	movs	r1, #1
 8007f5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	223e      	movs	r2, #62	; 0x3e
 8007f62:	2101      	movs	r1, #1
 8007f64:	5499      	strb	r1, [r3, r2]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	223f      	movs	r2, #63	; 0x3f
 8007f6a:	2101      	movs	r1, #1
 8007f6c:	5499      	strb	r1, [r3, r2]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2240      	movs	r2, #64	; 0x40
 8007f72:	2101      	movs	r1, #1
 8007f74:	5499      	strb	r1, [r3, r2]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2241      	movs	r2, #65	; 0x41
 8007f7a:	2101      	movs	r1, #1
 8007f7c:	5499      	strb	r1, [r3, r2]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2242      	movs	r2, #66	; 0x42
 8007f82:	2101      	movs	r1, #1
 8007f84:	5499      	strb	r1, [r3, r2]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2243      	movs	r2, #67	; 0x43
 8007f8a:	2101      	movs	r1, #1
 8007f8c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2244      	movs	r2, #68	; 0x44
 8007f92:	2101      	movs	r1, #1
 8007f94:	5499      	strb	r1, [r3, r2]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2245      	movs	r2, #69	; 0x45
 8007f9a:	2101      	movs	r1, #1
 8007f9c:	5499      	strb	r1, [r3, r2]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2246      	movs	r2, #70	; 0x46
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	5499      	strb	r1, [r3, r2]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2247      	movs	r2, #71	; 0x47
 8007faa:	2101      	movs	r1, #1
 8007fac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	223d      	movs	r2, #61	; 0x3d
 8007fb2:	2101      	movs	r1, #1
 8007fb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	0018      	movs	r0, r3
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	b002      	add	sp, #8
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d101      	bne.n	8007fd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e04a      	b.n	8008068 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	223d      	movs	r2, #61	; 0x3d
 8007fd6:	5c9b      	ldrb	r3, [r3, r2]
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d107      	bne.n	8007fee <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	223c      	movs	r2, #60	; 0x3c
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	0018      	movs	r0, r3
 8007fea:	f000 f841 	bl	8008070 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	223d      	movs	r2, #61	; 0x3d
 8007ff2:	2102      	movs	r1, #2
 8007ff4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	3304      	adds	r3, #4
 8007ffe:	0019      	movs	r1, r3
 8008000:	0010      	movs	r0, r2
 8008002:	f000 fafd 	bl	8008600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2248      	movs	r2, #72	; 0x48
 800800a:	2101      	movs	r1, #1
 800800c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	223e      	movs	r2, #62	; 0x3e
 8008012:	2101      	movs	r1, #1
 8008014:	5499      	strb	r1, [r3, r2]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	223f      	movs	r2, #63	; 0x3f
 800801a:	2101      	movs	r1, #1
 800801c:	5499      	strb	r1, [r3, r2]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2240      	movs	r2, #64	; 0x40
 8008022:	2101      	movs	r1, #1
 8008024:	5499      	strb	r1, [r3, r2]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2241      	movs	r2, #65	; 0x41
 800802a:	2101      	movs	r1, #1
 800802c:	5499      	strb	r1, [r3, r2]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2242      	movs	r2, #66	; 0x42
 8008032:	2101      	movs	r1, #1
 8008034:	5499      	strb	r1, [r3, r2]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2243      	movs	r2, #67	; 0x43
 800803a:	2101      	movs	r1, #1
 800803c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2244      	movs	r2, #68	; 0x44
 8008042:	2101      	movs	r1, #1
 8008044:	5499      	strb	r1, [r3, r2]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2245      	movs	r2, #69	; 0x45
 800804a:	2101      	movs	r1, #1
 800804c:	5499      	strb	r1, [r3, r2]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2246      	movs	r2, #70	; 0x46
 8008052:	2101      	movs	r1, #1
 8008054:	5499      	strb	r1, [r3, r2]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2247      	movs	r2, #71	; 0x47
 800805a:	2101      	movs	r1, #1
 800805c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	223d      	movs	r2, #61	; 0x3d
 8008062:	2101      	movs	r1, #1
 8008064:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	0018      	movs	r0, r3
 800806a:	46bd      	mov	sp, r7
 800806c:	b002      	add	sp, #8
 800806e:	bd80      	pop	{r7, pc}

08008070 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008078:	46c0      	nop			; (mov r8, r8)
 800807a:	46bd      	mov	sp, r7
 800807c:	b002      	add	sp, #8
 800807e:	bd80      	pop	{r7, pc}

08008080 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d108      	bne.n	80080a2 <HAL_TIM_PWM_Start+0x22>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	223e      	movs	r2, #62	; 0x3e
 8008094:	5c9b      	ldrb	r3, [r3, r2]
 8008096:	b2db      	uxtb	r3, r3
 8008098:	3b01      	subs	r3, #1
 800809a:	1e5a      	subs	r2, r3, #1
 800809c:	4193      	sbcs	r3, r2
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	e037      	b.n	8008112 <HAL_TIM_PWM_Start+0x92>
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	2b04      	cmp	r3, #4
 80080a6:	d108      	bne.n	80080ba <HAL_TIM_PWM_Start+0x3a>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	223f      	movs	r2, #63	; 0x3f
 80080ac:	5c9b      	ldrb	r3, [r3, r2]
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	3b01      	subs	r3, #1
 80080b2:	1e5a      	subs	r2, r3, #1
 80080b4:	4193      	sbcs	r3, r2
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	e02b      	b.n	8008112 <HAL_TIM_PWM_Start+0x92>
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	2b08      	cmp	r3, #8
 80080be:	d108      	bne.n	80080d2 <HAL_TIM_PWM_Start+0x52>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2240      	movs	r2, #64	; 0x40
 80080c4:	5c9b      	ldrb	r3, [r3, r2]
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	3b01      	subs	r3, #1
 80080ca:	1e5a      	subs	r2, r3, #1
 80080cc:	4193      	sbcs	r3, r2
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	e01f      	b.n	8008112 <HAL_TIM_PWM_Start+0x92>
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	2b0c      	cmp	r3, #12
 80080d6:	d108      	bne.n	80080ea <HAL_TIM_PWM_Start+0x6a>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2241      	movs	r2, #65	; 0x41
 80080dc:	5c9b      	ldrb	r3, [r3, r2]
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	3b01      	subs	r3, #1
 80080e2:	1e5a      	subs	r2, r3, #1
 80080e4:	4193      	sbcs	r3, r2
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	e013      	b.n	8008112 <HAL_TIM_PWM_Start+0x92>
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	2b10      	cmp	r3, #16
 80080ee:	d108      	bne.n	8008102 <HAL_TIM_PWM_Start+0x82>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2242      	movs	r2, #66	; 0x42
 80080f4:	5c9b      	ldrb	r3, [r3, r2]
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	3b01      	subs	r3, #1
 80080fa:	1e5a      	subs	r2, r3, #1
 80080fc:	4193      	sbcs	r3, r2
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	e007      	b.n	8008112 <HAL_TIM_PWM_Start+0x92>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2243      	movs	r2, #67	; 0x43
 8008106:	5c9b      	ldrb	r3, [r3, r2]
 8008108:	b2db      	uxtb	r3, r3
 800810a:	3b01      	subs	r3, #1
 800810c:	1e5a      	subs	r2, r3, #1
 800810e:	4193      	sbcs	r3, r2
 8008110:	b2db      	uxtb	r3, r3
 8008112:	2b00      	cmp	r3, #0
 8008114:	d001      	beq.n	800811a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	e08b      	b.n	8008232 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d104      	bne.n	800812a <HAL_TIM_PWM_Start+0xaa>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	223e      	movs	r2, #62	; 0x3e
 8008124:	2102      	movs	r1, #2
 8008126:	5499      	strb	r1, [r3, r2]
 8008128:	e023      	b.n	8008172 <HAL_TIM_PWM_Start+0xf2>
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	2b04      	cmp	r3, #4
 800812e:	d104      	bne.n	800813a <HAL_TIM_PWM_Start+0xba>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	223f      	movs	r2, #63	; 0x3f
 8008134:	2102      	movs	r1, #2
 8008136:	5499      	strb	r1, [r3, r2]
 8008138:	e01b      	b.n	8008172 <HAL_TIM_PWM_Start+0xf2>
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	2b08      	cmp	r3, #8
 800813e:	d104      	bne.n	800814a <HAL_TIM_PWM_Start+0xca>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2240      	movs	r2, #64	; 0x40
 8008144:	2102      	movs	r1, #2
 8008146:	5499      	strb	r1, [r3, r2]
 8008148:	e013      	b.n	8008172 <HAL_TIM_PWM_Start+0xf2>
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	2b0c      	cmp	r3, #12
 800814e:	d104      	bne.n	800815a <HAL_TIM_PWM_Start+0xda>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2241      	movs	r2, #65	; 0x41
 8008154:	2102      	movs	r1, #2
 8008156:	5499      	strb	r1, [r3, r2]
 8008158:	e00b      	b.n	8008172 <HAL_TIM_PWM_Start+0xf2>
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	2b10      	cmp	r3, #16
 800815e:	d104      	bne.n	800816a <HAL_TIM_PWM_Start+0xea>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2242      	movs	r2, #66	; 0x42
 8008164:	2102      	movs	r1, #2
 8008166:	5499      	strb	r1, [r3, r2]
 8008168:	e003      	b.n	8008172 <HAL_TIM_PWM_Start+0xf2>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2243      	movs	r2, #67	; 0x43
 800816e:	2102      	movs	r1, #2
 8008170:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	6839      	ldr	r1, [r7, #0]
 8008178:	2201      	movs	r2, #1
 800817a:	0018      	movs	r0, r3
 800817c:	f000 fe20 	bl	8008dc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a2d      	ldr	r2, [pc, #180]	; (800823c <HAL_TIM_PWM_Start+0x1bc>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d00e      	beq.n	80081a8 <HAL_TIM_PWM_Start+0x128>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a2c      	ldr	r2, [pc, #176]	; (8008240 <HAL_TIM_PWM_Start+0x1c0>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d009      	beq.n	80081a8 <HAL_TIM_PWM_Start+0x128>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a2a      	ldr	r2, [pc, #168]	; (8008244 <HAL_TIM_PWM_Start+0x1c4>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d004      	beq.n	80081a8 <HAL_TIM_PWM_Start+0x128>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a29      	ldr	r2, [pc, #164]	; (8008248 <HAL_TIM_PWM_Start+0x1c8>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d101      	bne.n	80081ac <HAL_TIM_PWM_Start+0x12c>
 80081a8:	2301      	movs	r3, #1
 80081aa:	e000      	b.n	80081ae <HAL_TIM_PWM_Start+0x12e>
 80081ac:	2300      	movs	r3, #0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d008      	beq.n	80081c4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2180      	movs	r1, #128	; 0x80
 80081be:	0209      	lsls	r1, r1, #8
 80081c0:	430a      	orrs	r2, r1
 80081c2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a1c      	ldr	r2, [pc, #112]	; (800823c <HAL_TIM_PWM_Start+0x1bc>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d00f      	beq.n	80081ee <HAL_TIM_PWM_Start+0x16e>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	2380      	movs	r3, #128	; 0x80
 80081d4:	05db      	lsls	r3, r3, #23
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d009      	beq.n	80081ee <HAL_TIM_PWM_Start+0x16e>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a1b      	ldr	r2, [pc, #108]	; (800824c <HAL_TIM_PWM_Start+0x1cc>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d004      	beq.n	80081ee <HAL_TIM_PWM_Start+0x16e>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a15      	ldr	r2, [pc, #84]	; (8008240 <HAL_TIM_PWM_Start+0x1c0>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d116      	bne.n	800821c <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	4a16      	ldr	r2, [pc, #88]	; (8008250 <HAL_TIM_PWM_Start+0x1d0>)
 80081f6:	4013      	ands	r3, r2
 80081f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2b06      	cmp	r3, #6
 80081fe:	d016      	beq.n	800822e <HAL_TIM_PWM_Start+0x1ae>
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	2380      	movs	r3, #128	; 0x80
 8008204:	025b      	lsls	r3, r3, #9
 8008206:	429a      	cmp	r2, r3
 8008208:	d011      	beq.n	800822e <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2101      	movs	r1, #1
 8008216:	430a      	orrs	r2, r1
 8008218:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800821a:	e008      	b.n	800822e <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2101      	movs	r1, #1
 8008228:	430a      	orrs	r2, r1
 800822a:	601a      	str	r2, [r3, #0]
 800822c:	e000      	b.n	8008230 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800822e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	0018      	movs	r0, r3
 8008234:	46bd      	mov	sp, r7
 8008236:	b004      	add	sp, #16
 8008238:	bd80      	pop	{r7, pc}
 800823a:	46c0      	nop			; (mov r8, r8)
 800823c:	40012c00 	.word	0x40012c00
 8008240:	40014000 	.word	0x40014000
 8008244:	40014400 	.word	0x40014400
 8008248:	40014800 	.word	0x40014800
 800824c:	40000400 	.word	0x40000400
 8008250:	00010007 	.word	0x00010007

08008254 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008260:	2317      	movs	r3, #23
 8008262:	18fb      	adds	r3, r7, r3
 8008264:	2200      	movs	r2, #0
 8008266:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	223c      	movs	r2, #60	; 0x3c
 800826c:	5c9b      	ldrb	r3, [r3, r2]
 800826e:	2b01      	cmp	r3, #1
 8008270:	d101      	bne.n	8008276 <HAL_TIM_PWM_ConfigChannel+0x22>
 8008272:	2302      	movs	r3, #2
 8008274:	e0e5      	b.n	8008442 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	223c      	movs	r2, #60	; 0x3c
 800827a:	2101      	movs	r1, #1
 800827c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b14      	cmp	r3, #20
 8008282:	d900      	bls.n	8008286 <HAL_TIM_PWM_ConfigChannel+0x32>
 8008284:	e0d1      	b.n	800842a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	009a      	lsls	r2, r3, #2
 800828a:	4b70      	ldr	r3, [pc, #448]	; (800844c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800828c:	18d3      	adds	r3, r2, r3
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	0011      	movs	r1, r2
 800829a:	0018      	movs	r0, r3
 800829c:	f000 fa30 	bl	8008700 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	699a      	ldr	r2, [r3, #24]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2108      	movs	r1, #8
 80082ac:	430a      	orrs	r2, r1
 80082ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	699a      	ldr	r2, [r3, #24]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2104      	movs	r1, #4
 80082bc:	438a      	bics	r2, r1
 80082be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	6999      	ldr	r1, [r3, #24]
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	691a      	ldr	r2, [r3, #16]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	430a      	orrs	r2, r1
 80082d0:	619a      	str	r2, [r3, #24]
      break;
 80082d2:	e0af      	b.n	8008434 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	0011      	movs	r1, r2
 80082dc:	0018      	movs	r0, r3
 80082de:	f000 fa99 	bl	8008814 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	699a      	ldr	r2, [r3, #24]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2180      	movs	r1, #128	; 0x80
 80082ee:	0109      	lsls	r1, r1, #4
 80082f0:	430a      	orrs	r2, r1
 80082f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	699a      	ldr	r2, [r3, #24]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4954      	ldr	r1, [pc, #336]	; (8008450 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008300:	400a      	ands	r2, r1
 8008302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	6999      	ldr	r1, [r3, #24]
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	021a      	lsls	r2, r3, #8
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	430a      	orrs	r2, r1
 8008316:	619a      	str	r2, [r3, #24]
      break;
 8008318:	e08c      	b.n	8008434 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	0011      	movs	r1, r2
 8008322:	0018      	movs	r0, r3
 8008324:	f000 fafa 	bl	800891c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	69da      	ldr	r2, [r3, #28]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2108      	movs	r1, #8
 8008334:	430a      	orrs	r2, r1
 8008336:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	69da      	ldr	r2, [r3, #28]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2104      	movs	r1, #4
 8008344:	438a      	bics	r2, r1
 8008346:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	69d9      	ldr	r1, [r3, #28]
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	691a      	ldr	r2, [r3, #16]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	430a      	orrs	r2, r1
 8008358:	61da      	str	r2, [r3, #28]
      break;
 800835a:	e06b      	b.n	8008434 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	0011      	movs	r1, r2
 8008364:	0018      	movs	r0, r3
 8008366:	f000 fb61 	bl	8008a2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	69da      	ldr	r2, [r3, #28]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2180      	movs	r1, #128	; 0x80
 8008376:	0109      	lsls	r1, r1, #4
 8008378:	430a      	orrs	r2, r1
 800837a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	69da      	ldr	r2, [r3, #28]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4932      	ldr	r1, [pc, #200]	; (8008450 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008388:	400a      	ands	r2, r1
 800838a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	69d9      	ldr	r1, [r3, #28]
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	021a      	lsls	r2, r3, #8
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	430a      	orrs	r2, r1
 800839e:	61da      	str	r2, [r3, #28]
      break;
 80083a0:	e048      	b.n	8008434 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68ba      	ldr	r2, [r7, #8]
 80083a8:	0011      	movs	r1, r2
 80083aa:	0018      	movs	r0, r3
 80083ac:	f000 fba8 	bl	8008b00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2108      	movs	r1, #8
 80083bc:	430a      	orrs	r2, r1
 80083be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2104      	movs	r1, #4
 80083cc:	438a      	bics	r2, r1
 80083ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	691a      	ldr	r2, [r3, #16]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	430a      	orrs	r2, r1
 80083e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80083e2:	e027      	b.n	8008434 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68ba      	ldr	r2, [r7, #8]
 80083ea:	0011      	movs	r1, r2
 80083ec:	0018      	movs	r0, r3
 80083ee:	f000 fbe7 	bl	8008bc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2180      	movs	r1, #128	; 0x80
 80083fe:	0109      	lsls	r1, r1, #4
 8008400:	430a      	orrs	r2, r1
 8008402:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4910      	ldr	r1, [pc, #64]	; (8008450 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008410:	400a      	ands	r2, r1
 8008412:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	021a      	lsls	r2, r3, #8
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	430a      	orrs	r2, r1
 8008426:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008428:	e004      	b.n	8008434 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800842a:	2317      	movs	r3, #23
 800842c:	18fb      	adds	r3, r7, r3
 800842e:	2201      	movs	r2, #1
 8008430:	701a      	strb	r2, [r3, #0]
      break;
 8008432:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	223c      	movs	r2, #60	; 0x3c
 8008438:	2100      	movs	r1, #0
 800843a:	5499      	strb	r1, [r3, r2]

  return status;
 800843c:	2317      	movs	r3, #23
 800843e:	18fb      	adds	r3, r7, r3
 8008440:	781b      	ldrb	r3, [r3, #0]
}
 8008442:	0018      	movs	r0, r3
 8008444:	46bd      	mov	sp, r7
 8008446:	b006      	add	sp, #24
 8008448:	bd80      	pop	{r7, pc}
 800844a:	46c0      	nop			; (mov r8, r8)
 800844c:	0800a704 	.word	0x0800a704
 8008450:	fffffbff 	.word	0xfffffbff

08008454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800845e:	230f      	movs	r3, #15
 8008460:	18fb      	adds	r3, r7, r3
 8008462:	2200      	movs	r2, #0
 8008464:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	223c      	movs	r2, #60	; 0x3c
 800846a:	5c9b      	ldrb	r3, [r3, r2]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d101      	bne.n	8008474 <HAL_TIM_ConfigClockSource+0x20>
 8008470:	2302      	movs	r3, #2
 8008472:	e0bc      	b.n	80085ee <HAL_TIM_ConfigClockSource+0x19a>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	223c      	movs	r2, #60	; 0x3c
 8008478:	2101      	movs	r1, #1
 800847a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	223d      	movs	r2, #61	; 0x3d
 8008480:	2102      	movs	r1, #2
 8008482:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	4a5a      	ldr	r2, [pc, #360]	; (80085f8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8008490:	4013      	ands	r3, r2
 8008492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	4a59      	ldr	r2, [pc, #356]	; (80085fc <HAL_TIM_ConfigClockSource+0x1a8>)
 8008498:	4013      	ands	r3, r2
 800849a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2280      	movs	r2, #128	; 0x80
 80084aa:	0192      	lsls	r2, r2, #6
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d040      	beq.n	8008532 <HAL_TIM_ConfigClockSource+0xde>
 80084b0:	2280      	movs	r2, #128	; 0x80
 80084b2:	0192      	lsls	r2, r2, #6
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d900      	bls.n	80084ba <HAL_TIM_ConfigClockSource+0x66>
 80084b8:	e088      	b.n	80085cc <HAL_TIM_ConfigClockSource+0x178>
 80084ba:	2280      	movs	r2, #128	; 0x80
 80084bc:	0152      	lsls	r2, r2, #5
 80084be:	4293      	cmp	r3, r2
 80084c0:	d100      	bne.n	80084c4 <HAL_TIM_ConfigClockSource+0x70>
 80084c2:	e088      	b.n	80085d6 <HAL_TIM_ConfigClockSource+0x182>
 80084c4:	2280      	movs	r2, #128	; 0x80
 80084c6:	0152      	lsls	r2, r2, #5
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d900      	bls.n	80084ce <HAL_TIM_ConfigClockSource+0x7a>
 80084cc:	e07e      	b.n	80085cc <HAL_TIM_ConfigClockSource+0x178>
 80084ce:	2b70      	cmp	r3, #112	; 0x70
 80084d0:	d018      	beq.n	8008504 <HAL_TIM_ConfigClockSource+0xb0>
 80084d2:	d900      	bls.n	80084d6 <HAL_TIM_ConfigClockSource+0x82>
 80084d4:	e07a      	b.n	80085cc <HAL_TIM_ConfigClockSource+0x178>
 80084d6:	2b60      	cmp	r3, #96	; 0x60
 80084d8:	d04f      	beq.n	800857a <HAL_TIM_ConfigClockSource+0x126>
 80084da:	d900      	bls.n	80084de <HAL_TIM_ConfigClockSource+0x8a>
 80084dc:	e076      	b.n	80085cc <HAL_TIM_ConfigClockSource+0x178>
 80084de:	2b50      	cmp	r3, #80	; 0x50
 80084e0:	d03b      	beq.n	800855a <HAL_TIM_ConfigClockSource+0x106>
 80084e2:	d900      	bls.n	80084e6 <HAL_TIM_ConfigClockSource+0x92>
 80084e4:	e072      	b.n	80085cc <HAL_TIM_ConfigClockSource+0x178>
 80084e6:	2b40      	cmp	r3, #64	; 0x40
 80084e8:	d057      	beq.n	800859a <HAL_TIM_ConfigClockSource+0x146>
 80084ea:	d900      	bls.n	80084ee <HAL_TIM_ConfigClockSource+0x9a>
 80084ec:	e06e      	b.n	80085cc <HAL_TIM_ConfigClockSource+0x178>
 80084ee:	2b30      	cmp	r3, #48	; 0x30
 80084f0:	d063      	beq.n	80085ba <HAL_TIM_ConfigClockSource+0x166>
 80084f2:	d86b      	bhi.n	80085cc <HAL_TIM_ConfigClockSource+0x178>
 80084f4:	2b20      	cmp	r3, #32
 80084f6:	d060      	beq.n	80085ba <HAL_TIM_ConfigClockSource+0x166>
 80084f8:	d868      	bhi.n	80085cc <HAL_TIM_ConfigClockSource+0x178>
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d05d      	beq.n	80085ba <HAL_TIM_ConfigClockSource+0x166>
 80084fe:	2b10      	cmp	r3, #16
 8008500:	d05b      	beq.n	80085ba <HAL_TIM_ConfigClockSource+0x166>
 8008502:	e063      	b.n	80085cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6818      	ldr	r0, [r3, #0]
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	6899      	ldr	r1, [r3, #8]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	685a      	ldr	r2, [r3, #4]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	f000 fc34 	bl	8008d80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	2277      	movs	r2, #119	; 0x77
 8008524:	4313      	orrs	r3, r2
 8008526:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	609a      	str	r2, [r3, #8]
      break;
 8008530:	e052      	b.n	80085d8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6818      	ldr	r0, [r3, #0]
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	6899      	ldr	r1, [r3, #8]
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	685a      	ldr	r2, [r3, #4]
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	f000 fc1d 	bl	8008d80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	689a      	ldr	r2, [r3, #8]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2180      	movs	r1, #128	; 0x80
 8008552:	01c9      	lsls	r1, r1, #7
 8008554:	430a      	orrs	r2, r1
 8008556:	609a      	str	r2, [r3, #8]
      break;
 8008558:	e03e      	b.n	80085d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6818      	ldr	r0, [r3, #0]
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	6859      	ldr	r1, [r3, #4]
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	001a      	movs	r2, r3
 8008568:	f000 fb8e 	bl	8008c88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2150      	movs	r1, #80	; 0x50
 8008572:	0018      	movs	r0, r3
 8008574:	f000 fbe8 	bl	8008d48 <TIM_ITRx_SetConfig>
      break;
 8008578:	e02e      	b.n	80085d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6818      	ldr	r0, [r3, #0]
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	6859      	ldr	r1, [r3, #4]
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	001a      	movs	r2, r3
 8008588:	f000 fbac 	bl	8008ce4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2160      	movs	r1, #96	; 0x60
 8008592:	0018      	movs	r0, r3
 8008594:	f000 fbd8 	bl	8008d48 <TIM_ITRx_SetConfig>
      break;
 8008598:	e01e      	b.n	80085d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6818      	ldr	r0, [r3, #0]
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	6859      	ldr	r1, [r3, #4]
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	001a      	movs	r2, r3
 80085a8:	f000 fb6e 	bl	8008c88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2140      	movs	r1, #64	; 0x40
 80085b2:	0018      	movs	r0, r3
 80085b4:	f000 fbc8 	bl	8008d48 <TIM_ITRx_SetConfig>
      break;
 80085b8:	e00e      	b.n	80085d8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	0019      	movs	r1, r3
 80085c4:	0010      	movs	r0, r2
 80085c6:	f000 fbbf 	bl	8008d48 <TIM_ITRx_SetConfig>
      break;
 80085ca:	e005      	b.n	80085d8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80085cc:	230f      	movs	r3, #15
 80085ce:	18fb      	adds	r3, r7, r3
 80085d0:	2201      	movs	r2, #1
 80085d2:	701a      	strb	r2, [r3, #0]
      break;
 80085d4:	e000      	b.n	80085d8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80085d6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	223d      	movs	r2, #61	; 0x3d
 80085dc:	2101      	movs	r1, #1
 80085de:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	223c      	movs	r2, #60	; 0x3c
 80085e4:	2100      	movs	r1, #0
 80085e6:	5499      	strb	r1, [r3, r2]

  return status;
 80085e8:	230f      	movs	r3, #15
 80085ea:	18fb      	adds	r3, r7, r3
 80085ec:	781b      	ldrb	r3, [r3, #0]
}
 80085ee:	0018      	movs	r0, r3
 80085f0:	46bd      	mov	sp, r7
 80085f2:	b004      	add	sp, #16
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	46c0      	nop			; (mov r8, r8)
 80085f8:	ffceff88 	.word	0xffceff88
 80085fc:	ffff00ff 	.word	0xffff00ff

08008600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a34      	ldr	r2, [pc, #208]	; (80086e4 <TIM_Base_SetConfig+0xe4>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d008      	beq.n	800862a <TIM_Base_SetConfig+0x2a>
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	2380      	movs	r3, #128	; 0x80
 800861c:	05db      	lsls	r3, r3, #23
 800861e:	429a      	cmp	r2, r3
 8008620:	d003      	beq.n	800862a <TIM_Base_SetConfig+0x2a>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4a30      	ldr	r2, [pc, #192]	; (80086e8 <TIM_Base_SetConfig+0xe8>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d108      	bne.n	800863c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2270      	movs	r2, #112	; 0x70
 800862e:	4393      	bics	r3, r2
 8008630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	4313      	orrs	r3, r2
 800863a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4a29      	ldr	r2, [pc, #164]	; (80086e4 <TIM_Base_SetConfig+0xe4>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d018      	beq.n	8008676 <TIM_Base_SetConfig+0x76>
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	2380      	movs	r3, #128	; 0x80
 8008648:	05db      	lsls	r3, r3, #23
 800864a:	429a      	cmp	r2, r3
 800864c:	d013      	beq.n	8008676 <TIM_Base_SetConfig+0x76>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a25      	ldr	r2, [pc, #148]	; (80086e8 <TIM_Base_SetConfig+0xe8>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d00f      	beq.n	8008676 <TIM_Base_SetConfig+0x76>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a24      	ldr	r2, [pc, #144]	; (80086ec <TIM_Base_SetConfig+0xec>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d00b      	beq.n	8008676 <TIM_Base_SetConfig+0x76>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a23      	ldr	r2, [pc, #140]	; (80086f0 <TIM_Base_SetConfig+0xf0>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d007      	beq.n	8008676 <TIM_Base_SetConfig+0x76>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a22      	ldr	r2, [pc, #136]	; (80086f4 <TIM_Base_SetConfig+0xf4>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d003      	beq.n	8008676 <TIM_Base_SetConfig+0x76>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a21      	ldr	r2, [pc, #132]	; (80086f8 <TIM_Base_SetConfig+0xf8>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d108      	bne.n	8008688 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	4a20      	ldr	r2, [pc, #128]	; (80086fc <TIM_Base_SetConfig+0xfc>)
 800867a:	4013      	ands	r3, r2
 800867c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	68fa      	ldr	r2, [r7, #12]
 8008684:	4313      	orrs	r3, r2
 8008686:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2280      	movs	r2, #128	; 0x80
 800868c:	4393      	bics	r3, r2
 800868e:	001a      	movs	r2, r3
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	695b      	ldr	r3, [r3, #20]
 8008694:	4313      	orrs	r3, r2
 8008696:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	689a      	ldr	r2, [r3, #8]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4a0c      	ldr	r2, [pc, #48]	; (80086e4 <TIM_Base_SetConfig+0xe4>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d00b      	beq.n	80086ce <TIM_Base_SetConfig+0xce>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4a0d      	ldr	r2, [pc, #52]	; (80086f0 <TIM_Base_SetConfig+0xf0>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d007      	beq.n	80086ce <TIM_Base_SetConfig+0xce>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4a0c      	ldr	r2, [pc, #48]	; (80086f4 <TIM_Base_SetConfig+0xf4>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d003      	beq.n	80086ce <TIM_Base_SetConfig+0xce>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4a0b      	ldr	r2, [pc, #44]	; (80086f8 <TIM_Base_SetConfig+0xf8>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d103      	bne.n	80086d6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	691a      	ldr	r2, [r3, #16]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2201      	movs	r2, #1
 80086da:	615a      	str	r2, [r3, #20]
}
 80086dc:	46c0      	nop			; (mov r8, r8)
 80086de:	46bd      	mov	sp, r7
 80086e0:	b004      	add	sp, #16
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	40012c00 	.word	0x40012c00
 80086e8:	40000400 	.word	0x40000400
 80086ec:	40002000 	.word	0x40002000
 80086f0:	40014000 	.word	0x40014000
 80086f4:	40014400 	.word	0x40014400
 80086f8:	40014800 	.word	0x40014800
 80086fc:	fffffcff 	.word	0xfffffcff

08008700 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a1b      	ldr	r3, [r3, #32]
 800870e:	2201      	movs	r2, #1
 8008710:	4393      	bics	r3, r2
 8008712:	001a      	movs	r2, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a1b      	ldr	r3, [r3, #32]
 800871c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	699b      	ldr	r3, [r3, #24]
 8008728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	4a32      	ldr	r2, [pc, #200]	; (80087f8 <TIM_OC1_SetConfig+0xf8>)
 800872e:	4013      	ands	r3, r2
 8008730:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2203      	movs	r2, #3
 8008736:	4393      	bics	r3, r2
 8008738:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	4313      	orrs	r3, r2
 8008742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	2202      	movs	r2, #2
 8008748:	4393      	bics	r3, r2
 800874a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	697a      	ldr	r2, [r7, #20]
 8008752:	4313      	orrs	r3, r2
 8008754:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a28      	ldr	r2, [pc, #160]	; (80087fc <TIM_OC1_SetConfig+0xfc>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d00b      	beq.n	8008776 <TIM_OC1_SetConfig+0x76>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a27      	ldr	r2, [pc, #156]	; (8008800 <TIM_OC1_SetConfig+0x100>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d007      	beq.n	8008776 <TIM_OC1_SetConfig+0x76>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a26      	ldr	r2, [pc, #152]	; (8008804 <TIM_OC1_SetConfig+0x104>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d003      	beq.n	8008776 <TIM_OC1_SetConfig+0x76>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a25      	ldr	r2, [pc, #148]	; (8008808 <TIM_OC1_SetConfig+0x108>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d10c      	bne.n	8008790 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	2208      	movs	r2, #8
 800877a:	4393      	bics	r3, r2
 800877c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	697a      	ldr	r2, [r7, #20]
 8008784:	4313      	orrs	r3, r2
 8008786:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	2204      	movs	r2, #4
 800878c:	4393      	bics	r3, r2
 800878e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4a1a      	ldr	r2, [pc, #104]	; (80087fc <TIM_OC1_SetConfig+0xfc>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d00b      	beq.n	80087b0 <TIM_OC1_SetConfig+0xb0>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a19      	ldr	r2, [pc, #100]	; (8008800 <TIM_OC1_SetConfig+0x100>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d007      	beq.n	80087b0 <TIM_OC1_SetConfig+0xb0>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4a18      	ldr	r2, [pc, #96]	; (8008804 <TIM_OC1_SetConfig+0x104>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d003      	beq.n	80087b0 <TIM_OC1_SetConfig+0xb0>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a17      	ldr	r2, [pc, #92]	; (8008808 <TIM_OC1_SetConfig+0x108>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d111      	bne.n	80087d4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	4a16      	ldr	r2, [pc, #88]	; (800880c <TIM_OC1_SetConfig+0x10c>)
 80087b4:	4013      	ands	r3, r2
 80087b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	4a15      	ldr	r2, [pc, #84]	; (8008810 <TIM_OC1_SetConfig+0x110>)
 80087bc:	4013      	ands	r3, r2
 80087be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	695b      	ldr	r3, [r3, #20]
 80087c4:	693a      	ldr	r2, [r7, #16]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	699b      	ldr	r3, [r3, #24]
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	693a      	ldr	r2, [r7, #16]
 80087d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	685a      	ldr	r2, [r3, #4]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	697a      	ldr	r2, [r7, #20]
 80087ec:	621a      	str	r2, [r3, #32]
}
 80087ee:	46c0      	nop			; (mov r8, r8)
 80087f0:	46bd      	mov	sp, r7
 80087f2:	b006      	add	sp, #24
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	46c0      	nop			; (mov r8, r8)
 80087f8:	fffeff8f 	.word	0xfffeff8f
 80087fc:	40012c00 	.word	0x40012c00
 8008800:	40014000 	.word	0x40014000
 8008804:	40014400 	.word	0x40014400
 8008808:	40014800 	.word	0x40014800
 800880c:	fffffeff 	.word	0xfffffeff
 8008810:	fffffdff 	.word	0xfffffdff

08008814 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b086      	sub	sp, #24
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a1b      	ldr	r3, [r3, #32]
 8008822:	2210      	movs	r2, #16
 8008824:	4393      	bics	r3, r2
 8008826:	001a      	movs	r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6a1b      	ldr	r3, [r3, #32]
 8008830:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	699b      	ldr	r3, [r3, #24]
 800883c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	4a2e      	ldr	r2, [pc, #184]	; (80088fc <TIM_OC2_SetConfig+0xe8>)
 8008842:	4013      	ands	r3, r2
 8008844:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	4a2d      	ldr	r2, [pc, #180]	; (8008900 <TIM_OC2_SetConfig+0xec>)
 800884a:	4013      	ands	r3, r2
 800884c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	021b      	lsls	r3, r3, #8
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	4313      	orrs	r3, r2
 8008858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	2220      	movs	r2, #32
 800885e:	4393      	bics	r3, r2
 8008860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	011b      	lsls	r3, r3, #4
 8008868:	697a      	ldr	r2, [r7, #20]
 800886a:	4313      	orrs	r3, r2
 800886c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4a24      	ldr	r2, [pc, #144]	; (8008904 <TIM_OC2_SetConfig+0xf0>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d10d      	bne.n	8008892 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	2280      	movs	r2, #128	; 0x80
 800887a:	4393      	bics	r3, r2
 800887c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	011b      	lsls	r3, r3, #4
 8008884:	697a      	ldr	r2, [r7, #20]
 8008886:	4313      	orrs	r3, r2
 8008888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	2240      	movs	r2, #64	; 0x40
 800888e:	4393      	bics	r3, r2
 8008890:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a1b      	ldr	r2, [pc, #108]	; (8008904 <TIM_OC2_SetConfig+0xf0>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d00b      	beq.n	80088b2 <TIM_OC2_SetConfig+0x9e>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a1a      	ldr	r2, [pc, #104]	; (8008908 <TIM_OC2_SetConfig+0xf4>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d007      	beq.n	80088b2 <TIM_OC2_SetConfig+0x9e>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a19      	ldr	r2, [pc, #100]	; (800890c <TIM_OC2_SetConfig+0xf8>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d003      	beq.n	80088b2 <TIM_OC2_SetConfig+0x9e>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a18      	ldr	r2, [pc, #96]	; (8008910 <TIM_OC2_SetConfig+0xfc>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d113      	bne.n	80088da <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	4a17      	ldr	r2, [pc, #92]	; (8008914 <TIM_OC2_SetConfig+0x100>)
 80088b6:	4013      	ands	r3, r2
 80088b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	4a16      	ldr	r2, [pc, #88]	; (8008918 <TIM_OC2_SetConfig+0x104>)
 80088be:	4013      	ands	r3, r2
 80088c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	693a      	ldr	r2, [r7, #16]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	699b      	ldr	r3, [r3, #24]
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	693a      	ldr	r2, [r7, #16]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	693a      	ldr	r2, [r7, #16]
 80088de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	685a      	ldr	r2, [r3, #4]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	697a      	ldr	r2, [r7, #20]
 80088f2:	621a      	str	r2, [r3, #32]
}
 80088f4:	46c0      	nop			; (mov r8, r8)
 80088f6:	46bd      	mov	sp, r7
 80088f8:	b006      	add	sp, #24
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	feff8fff 	.word	0xfeff8fff
 8008900:	fffffcff 	.word	0xfffffcff
 8008904:	40012c00 	.word	0x40012c00
 8008908:	40014000 	.word	0x40014000
 800890c:	40014400 	.word	0x40014400
 8008910:	40014800 	.word	0x40014800
 8008914:	fffffbff 	.word	0xfffffbff
 8008918:	fffff7ff 	.word	0xfffff7ff

0800891c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b086      	sub	sp, #24
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6a1b      	ldr	r3, [r3, #32]
 800892a:	4a35      	ldr	r2, [pc, #212]	; (8008a00 <TIM_OC3_SetConfig+0xe4>)
 800892c:	401a      	ands	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	69db      	ldr	r3, [r3, #28]
 8008942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	4a2f      	ldr	r2, [pc, #188]	; (8008a04 <TIM_OC3_SetConfig+0xe8>)
 8008948:	4013      	ands	r3, r2
 800894a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2203      	movs	r2, #3
 8008950:	4393      	bics	r3, r2
 8008952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	4313      	orrs	r3, r2
 800895c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	4a29      	ldr	r2, [pc, #164]	; (8008a08 <TIM_OC3_SetConfig+0xec>)
 8008962:	4013      	ands	r3, r2
 8008964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	021b      	lsls	r3, r3, #8
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	4313      	orrs	r3, r2
 8008970:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a25      	ldr	r2, [pc, #148]	; (8008a0c <TIM_OC3_SetConfig+0xf0>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d10d      	bne.n	8008996 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	4a24      	ldr	r2, [pc, #144]	; (8008a10 <TIM_OC3_SetConfig+0xf4>)
 800897e:	4013      	ands	r3, r2
 8008980:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	021b      	lsls	r3, r3, #8
 8008988:	697a      	ldr	r2, [r7, #20]
 800898a:	4313      	orrs	r3, r2
 800898c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	4a20      	ldr	r2, [pc, #128]	; (8008a14 <TIM_OC3_SetConfig+0xf8>)
 8008992:	4013      	ands	r3, r2
 8008994:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a1c      	ldr	r2, [pc, #112]	; (8008a0c <TIM_OC3_SetConfig+0xf0>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d00b      	beq.n	80089b6 <TIM_OC3_SetConfig+0x9a>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a1d      	ldr	r2, [pc, #116]	; (8008a18 <TIM_OC3_SetConfig+0xfc>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d007      	beq.n	80089b6 <TIM_OC3_SetConfig+0x9a>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a1c      	ldr	r2, [pc, #112]	; (8008a1c <TIM_OC3_SetConfig+0x100>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d003      	beq.n	80089b6 <TIM_OC3_SetConfig+0x9a>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a1b      	ldr	r2, [pc, #108]	; (8008a20 <TIM_OC3_SetConfig+0x104>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d113      	bne.n	80089de <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	4a1a      	ldr	r2, [pc, #104]	; (8008a24 <TIM_OC3_SetConfig+0x108>)
 80089ba:	4013      	ands	r3, r2
 80089bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	4a19      	ldr	r2, [pc, #100]	; (8008a28 <TIM_OC3_SetConfig+0x10c>)
 80089c2:	4013      	ands	r3, r2
 80089c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	011b      	lsls	r3, r3, #4
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	011b      	lsls	r3, r3, #4
 80089d8:	693a      	ldr	r2, [r7, #16]
 80089da:	4313      	orrs	r3, r2
 80089dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	685a      	ldr	r2, [r3, #4]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	697a      	ldr	r2, [r7, #20]
 80089f6:	621a      	str	r2, [r3, #32]
}
 80089f8:	46c0      	nop			; (mov r8, r8)
 80089fa:	46bd      	mov	sp, r7
 80089fc:	b006      	add	sp, #24
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	fffffeff 	.word	0xfffffeff
 8008a04:	fffeff8f 	.word	0xfffeff8f
 8008a08:	fffffdff 	.word	0xfffffdff
 8008a0c:	40012c00 	.word	0x40012c00
 8008a10:	fffff7ff 	.word	0xfffff7ff
 8008a14:	fffffbff 	.word	0xfffffbff
 8008a18:	40014000 	.word	0x40014000
 8008a1c:	40014400 	.word	0x40014400
 8008a20:	40014800 	.word	0x40014800
 8008a24:	ffffefff 	.word	0xffffefff
 8008a28:	ffffdfff 	.word	0xffffdfff

08008a2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b086      	sub	sp, #24
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a1b      	ldr	r3, [r3, #32]
 8008a3a:	4a28      	ldr	r2, [pc, #160]	; (8008adc <TIM_OC4_SetConfig+0xb0>)
 8008a3c:	401a      	ands	r2, r3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a1b      	ldr	r3, [r3, #32]
 8008a46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	69db      	ldr	r3, [r3, #28]
 8008a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	4a22      	ldr	r2, [pc, #136]	; (8008ae0 <TIM_OC4_SetConfig+0xb4>)
 8008a58:	4013      	ands	r3, r2
 8008a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	4a21      	ldr	r2, [pc, #132]	; (8008ae4 <TIM_OC4_SetConfig+0xb8>)
 8008a60:	4013      	ands	r3, r2
 8008a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	021b      	lsls	r3, r3, #8
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	4a1d      	ldr	r2, [pc, #116]	; (8008ae8 <TIM_OC4_SetConfig+0xbc>)
 8008a74:	4013      	ands	r3, r2
 8008a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	031b      	lsls	r3, r3, #12
 8008a7e:	693a      	ldr	r2, [r7, #16]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4a19      	ldr	r2, [pc, #100]	; (8008aec <TIM_OC4_SetConfig+0xc0>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d00b      	beq.n	8008aa4 <TIM_OC4_SetConfig+0x78>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a18      	ldr	r2, [pc, #96]	; (8008af0 <TIM_OC4_SetConfig+0xc4>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d007      	beq.n	8008aa4 <TIM_OC4_SetConfig+0x78>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a17      	ldr	r2, [pc, #92]	; (8008af4 <TIM_OC4_SetConfig+0xc8>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d003      	beq.n	8008aa4 <TIM_OC4_SetConfig+0x78>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a16      	ldr	r2, [pc, #88]	; (8008af8 <TIM_OC4_SetConfig+0xcc>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d109      	bne.n	8008ab8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	4a15      	ldr	r2, [pc, #84]	; (8008afc <TIM_OC4_SetConfig+0xd0>)
 8008aa8:	4013      	ands	r3, r2
 8008aaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	695b      	ldr	r3, [r3, #20]
 8008ab0:	019b      	lsls	r3, r3, #6
 8008ab2:	697a      	ldr	r2, [r7, #20]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	697a      	ldr	r2, [r7, #20]
 8008abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	685a      	ldr	r2, [r3, #4]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	621a      	str	r2, [r3, #32]
}
 8008ad2:	46c0      	nop			; (mov r8, r8)
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	b006      	add	sp, #24
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	46c0      	nop			; (mov r8, r8)
 8008adc:	ffffefff 	.word	0xffffefff
 8008ae0:	feff8fff 	.word	0xfeff8fff
 8008ae4:	fffffcff 	.word	0xfffffcff
 8008ae8:	ffffdfff 	.word	0xffffdfff
 8008aec:	40012c00 	.word	0x40012c00
 8008af0:	40014000 	.word	0x40014000
 8008af4:	40014400 	.word	0x40014400
 8008af8:	40014800 	.word	0x40014800
 8008afc:	ffffbfff 	.word	0xffffbfff

08008b00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b086      	sub	sp, #24
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a1b      	ldr	r3, [r3, #32]
 8008b0e:	4a25      	ldr	r2, [pc, #148]	; (8008ba4 <TIM_OC5_SetConfig+0xa4>)
 8008b10:	401a      	ands	r2, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a1b      	ldr	r3, [r3, #32]
 8008b1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	4a1f      	ldr	r2, [pc, #124]	; (8008ba8 <TIM_OC5_SetConfig+0xa8>)
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	4a1b      	ldr	r2, [pc, #108]	; (8008bac <TIM_OC5_SetConfig+0xac>)
 8008b3e:	4013      	ands	r3, r2
 8008b40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	041b      	lsls	r3, r3, #16
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a17      	ldr	r2, [pc, #92]	; (8008bb0 <TIM_OC5_SetConfig+0xb0>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d00b      	beq.n	8008b6e <TIM_OC5_SetConfig+0x6e>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a16      	ldr	r2, [pc, #88]	; (8008bb4 <TIM_OC5_SetConfig+0xb4>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d007      	beq.n	8008b6e <TIM_OC5_SetConfig+0x6e>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a15      	ldr	r2, [pc, #84]	; (8008bb8 <TIM_OC5_SetConfig+0xb8>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d003      	beq.n	8008b6e <TIM_OC5_SetConfig+0x6e>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a14      	ldr	r2, [pc, #80]	; (8008bbc <TIM_OC5_SetConfig+0xbc>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d109      	bne.n	8008b82 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	4a0c      	ldr	r2, [pc, #48]	; (8008ba4 <TIM_OC5_SetConfig+0xa4>)
 8008b72:	4013      	ands	r3, r2
 8008b74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	021b      	lsls	r3, r3, #8
 8008b7c:	697a      	ldr	r2, [r7, #20]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	697a      	ldr	r2, [r7, #20]
 8008b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	685a      	ldr	r2, [r3, #4]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	693a      	ldr	r2, [r7, #16]
 8008b9a:	621a      	str	r2, [r3, #32]
}
 8008b9c:	46c0      	nop			; (mov r8, r8)
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	b006      	add	sp, #24
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	fffeffff 	.word	0xfffeffff
 8008ba8:	fffeff8f 	.word	0xfffeff8f
 8008bac:	fffdffff 	.word	0xfffdffff
 8008bb0:	40012c00 	.word	0x40012c00
 8008bb4:	40014000 	.word	0x40014000
 8008bb8:	40014400 	.word	0x40014400
 8008bbc:	40014800 	.word	0x40014800

08008bc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a1b      	ldr	r3, [r3, #32]
 8008bce:	4a26      	ldr	r2, [pc, #152]	; (8008c68 <TIM_OC6_SetConfig+0xa8>)
 8008bd0:	401a      	ands	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	4a20      	ldr	r2, [pc, #128]	; (8008c6c <TIM_OC6_SetConfig+0xac>)
 8008bec:	4013      	ands	r3, r2
 8008bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	021b      	lsls	r3, r3, #8
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	4a1c      	ldr	r2, [pc, #112]	; (8008c70 <TIM_OC6_SetConfig+0xb0>)
 8008c00:	4013      	ands	r3, r2
 8008c02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	051b      	lsls	r3, r3, #20
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a18      	ldr	r2, [pc, #96]	; (8008c74 <TIM_OC6_SetConfig+0xb4>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d00b      	beq.n	8008c30 <TIM_OC6_SetConfig+0x70>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a17      	ldr	r2, [pc, #92]	; (8008c78 <TIM_OC6_SetConfig+0xb8>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d007      	beq.n	8008c30 <TIM_OC6_SetConfig+0x70>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a16      	ldr	r2, [pc, #88]	; (8008c7c <TIM_OC6_SetConfig+0xbc>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d003      	beq.n	8008c30 <TIM_OC6_SetConfig+0x70>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a15      	ldr	r2, [pc, #84]	; (8008c80 <TIM_OC6_SetConfig+0xc0>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d109      	bne.n	8008c44 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	4a14      	ldr	r2, [pc, #80]	; (8008c84 <TIM_OC6_SetConfig+0xc4>)
 8008c34:	4013      	ands	r3, r2
 8008c36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	695b      	ldr	r3, [r3, #20]
 8008c3c:	029b      	lsls	r3, r3, #10
 8008c3e:	697a      	ldr	r2, [r7, #20]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	697a      	ldr	r2, [r7, #20]
 8008c48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	685a      	ldr	r2, [r3, #4]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	693a      	ldr	r2, [r7, #16]
 8008c5c:	621a      	str	r2, [r3, #32]
}
 8008c5e:	46c0      	nop			; (mov r8, r8)
 8008c60:	46bd      	mov	sp, r7
 8008c62:	b006      	add	sp, #24
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	46c0      	nop			; (mov r8, r8)
 8008c68:	ffefffff 	.word	0xffefffff
 8008c6c:	feff8fff 	.word	0xfeff8fff
 8008c70:	ffdfffff 	.word	0xffdfffff
 8008c74:	40012c00 	.word	0x40012c00
 8008c78:	40014000 	.word	0x40014000
 8008c7c:	40014400 	.word	0x40014400
 8008c80:	40014800 	.word	0x40014800
 8008c84:	fffbffff 	.word	0xfffbffff

08008c88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b086      	sub	sp, #24
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6a1b      	ldr	r3, [r3, #32]
 8008c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	4393      	bics	r3, r2
 8008ca2:	001a      	movs	r2, r3
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	699b      	ldr	r3, [r3, #24]
 8008cac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	22f0      	movs	r2, #240	; 0xf0
 8008cb2:	4393      	bics	r3, r2
 8008cb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	011b      	lsls	r3, r3, #4
 8008cba:	693a      	ldr	r2, [r7, #16]
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	220a      	movs	r2, #10
 8008cc4:	4393      	bics	r3, r2
 8008cc6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008cc8:	697a      	ldr	r2, [r7, #20]
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	693a      	ldr	r2, [r7, #16]
 8008cd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	697a      	ldr	r2, [r7, #20]
 8008cda:	621a      	str	r2, [r3, #32]
}
 8008cdc:	46c0      	nop			; (mov r8, r8)
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	b006      	add	sp, #24
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b086      	sub	sp, #24
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6a1b      	ldr	r3, [r3, #32]
 8008cf4:	2210      	movs	r2, #16
 8008cf6:	4393      	bics	r3, r2
 8008cf8:	001a      	movs	r2, r3
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6a1b      	ldr	r3, [r3, #32]
 8008d08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	4a0d      	ldr	r2, [pc, #52]	; (8008d44 <TIM_TI2_ConfigInputStage+0x60>)
 8008d0e:	4013      	ands	r3, r2
 8008d10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	031b      	lsls	r3, r3, #12
 8008d16:	697a      	ldr	r2, [r7, #20]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	22a0      	movs	r2, #160	; 0xa0
 8008d20:	4393      	bics	r3, r2
 8008d22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	011b      	lsls	r3, r3, #4
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	697a      	ldr	r2, [r7, #20]
 8008d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	693a      	ldr	r2, [r7, #16]
 8008d38:	621a      	str	r2, [r3, #32]
}
 8008d3a:	46c0      	nop			; (mov r8, r8)
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	b006      	add	sp, #24
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	46c0      	nop			; (mov r8, r8)
 8008d44:	ffff0fff 	.word	0xffff0fff

08008d48 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	4a08      	ldr	r2, [pc, #32]	; (8008d7c <TIM_ITRx_SetConfig+0x34>)
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d60:	683a      	ldr	r2, [r7, #0]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	4313      	orrs	r3, r2
 8008d66:	2207      	movs	r2, #7
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	609a      	str	r2, [r3, #8]
}
 8008d72:	46c0      	nop			; (mov r8, r8)
 8008d74:	46bd      	mov	sp, r7
 8008d76:	b004      	add	sp, #16
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	46c0      	nop			; (mov r8, r8)
 8008d7c:	ffcfff8f 	.word	0xffcfff8f

08008d80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b086      	sub	sp, #24
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	607a      	str	r2, [r7, #4]
 8008d8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	4a09      	ldr	r2, [pc, #36]	; (8008dbc <TIM_ETR_SetConfig+0x3c>)
 8008d98:	4013      	ands	r3, r2
 8008d9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	021a      	lsls	r2, r3, #8
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	431a      	orrs	r2, r3
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	697a      	ldr	r2, [r7, #20]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	697a      	ldr	r2, [r7, #20]
 8008db2:	609a      	str	r2, [r3, #8]
}
 8008db4:	46c0      	nop			; (mov r8, r8)
 8008db6:	46bd      	mov	sp, r7
 8008db8:	b006      	add	sp, #24
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	ffff00ff 	.word	0xffff00ff

08008dc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b086      	sub	sp, #24
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	221f      	movs	r2, #31
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	409a      	lsls	r2, r3
 8008dd6:	0013      	movs	r3, r2
 8008dd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6a1b      	ldr	r3, [r3, #32]
 8008dde:	697a      	ldr	r2, [r7, #20]
 8008de0:	43d2      	mvns	r2, r2
 8008de2:	401a      	ands	r2, r3
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6a1a      	ldr	r2, [r3, #32]
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	211f      	movs	r1, #31
 8008df0:	400b      	ands	r3, r1
 8008df2:	6879      	ldr	r1, [r7, #4]
 8008df4:	4099      	lsls	r1, r3
 8008df6:	000b      	movs	r3, r1
 8008df8:	431a      	orrs	r2, r3
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	621a      	str	r2, [r3, #32]
}
 8008dfe:	46c0      	nop			; (mov r8, r8)
 8008e00:	46bd      	mov	sp, r7
 8008e02:	b006      	add	sp, #24
 8008e04:	bd80      	pop	{r7, pc}
	...

08008e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	223c      	movs	r2, #60	; 0x3c
 8008e16:	5c9b      	ldrb	r3, [r3, r2]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d101      	bne.n	8008e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e1c:	2302      	movs	r3, #2
 8008e1e:	e055      	b.n	8008ecc <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	223c      	movs	r2, #60	; 0x3c
 8008e24:	2101      	movs	r1, #1
 8008e26:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	223d      	movs	r2, #61	; 0x3d
 8008e2c:	2102      	movs	r1, #2
 8008e2e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a23      	ldr	r2, [pc, #140]	; (8008ed4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d108      	bne.n	8008e5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	4a22      	ldr	r2, [pc, #136]	; (8008ed8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008e4e:	4013      	ands	r3, r2
 8008e50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2270      	movs	r2, #112	; 0x70
 8008e60:	4393      	bics	r3, r2
 8008e62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a16      	ldr	r2, [pc, #88]	; (8008ed4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d00f      	beq.n	8008ea0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	2380      	movs	r3, #128	; 0x80
 8008e86:	05db      	lsls	r3, r3, #23
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d009      	beq.n	8008ea0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a12      	ldr	r2, [pc, #72]	; (8008edc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d004      	beq.n	8008ea0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a11      	ldr	r2, [pc, #68]	; (8008ee0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d10c      	bne.n	8008eba <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	2280      	movs	r2, #128	; 0x80
 8008ea4:	4393      	bics	r3, r2
 8008ea6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	68ba      	ldr	r2, [r7, #8]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68ba      	ldr	r2, [r7, #8]
 8008eb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	223d      	movs	r2, #61	; 0x3d
 8008ebe:	2101      	movs	r1, #1
 8008ec0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	223c      	movs	r2, #60	; 0x3c
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	0018      	movs	r0, r3
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	b004      	add	sp, #16
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	40012c00 	.word	0x40012c00
 8008ed8:	ff0fffff 	.word	0xff0fffff
 8008edc:	40000400 	.word	0x40000400
 8008ee0:	40014000 	.word	0x40014000

08008ee4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	223c      	movs	r2, #60	; 0x3c
 8008ef6:	5c9b      	ldrb	r3, [r3, r2]
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d101      	bne.n	8008f00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008efc:	2302      	movs	r3, #2
 8008efe:	e079      	b.n	8008ff4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	223c      	movs	r2, #60	; 0x3c
 8008f04:	2101      	movs	r1, #1
 8008f06:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	22ff      	movs	r2, #255	; 0xff
 8008f0c:	4393      	bics	r3, r2
 8008f0e:	001a      	movs	r2, r3
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	4313      	orrs	r3, r2
 8008f16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	4a38      	ldr	r2, [pc, #224]	; (8008ffc <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8008f1c:	401a      	ands	r2, r3
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	4a35      	ldr	r2, [pc, #212]	; (8009000 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008f2a:	401a      	ands	r2, r3
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	4313      	orrs	r3, r2
 8008f32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	4a33      	ldr	r2, [pc, #204]	; (8009004 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008f38:	401a      	ands	r2, r3
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	4a30      	ldr	r2, [pc, #192]	; (8009008 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008f46:	401a      	ands	r2, r3
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	4a2e      	ldr	r2, [pc, #184]	; (800900c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008f54:	401a      	ands	r2, r3
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	695b      	ldr	r3, [r3, #20]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	4a2b      	ldr	r2, [pc, #172]	; (8009010 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8008f62:	401a      	ands	r2, r3
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	4a29      	ldr	r2, [pc, #164]	; (8009014 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008f70:	401a      	ands	r2, r3
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	041b      	lsls	r3, r3, #16
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a25      	ldr	r2, [pc, #148]	; (8009018 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d106      	bne.n	8008f94 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	4a24      	ldr	r2, [pc, #144]	; (800901c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008f8a:	401a      	ands	r2, r3
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	69db      	ldr	r3, [r3, #28]
 8008f90:	4313      	orrs	r3, r2
 8008f92:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a1f      	ldr	r2, [pc, #124]	; (8009018 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d121      	bne.n	8008fe2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	4a1f      	ldr	r2, [pc, #124]	; (8009020 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008fa2:	401a      	ands	r2, r3
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa8:	051b      	lsls	r3, r3, #20
 8008faa:	4313      	orrs	r3, r2
 8008fac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	4a1c      	ldr	r2, [pc, #112]	; (8009024 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8008fb2:	401a      	ands	r2, r3
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	6a1b      	ldr	r3, [r3, #32]
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	4a1a      	ldr	r2, [pc, #104]	; (8009028 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8008fc0:	401a      	ands	r2, r3
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a12      	ldr	r2, [pc, #72]	; (8009018 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d106      	bne.n	8008fe2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	4a15      	ldr	r2, [pc, #84]	; (800902c <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8008fd8:	401a      	ands	r2, r3
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	223c      	movs	r2, #60	; 0x3c
 8008fee:	2100      	movs	r1, #0
 8008ff0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	0018      	movs	r0, r3
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	b004      	add	sp, #16
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	fffffcff 	.word	0xfffffcff
 8009000:	fffffbff 	.word	0xfffffbff
 8009004:	fffff7ff 	.word	0xfffff7ff
 8009008:	ffffefff 	.word	0xffffefff
 800900c:	ffffdfff 	.word	0xffffdfff
 8009010:	ffffbfff 	.word	0xffffbfff
 8009014:	fff0ffff 	.word	0xfff0ffff
 8009018:	40012c00 	.word	0x40012c00
 800901c:	efffffff 	.word	0xefffffff
 8009020:	ff0fffff 	.word	0xff0fffff
 8009024:	feffffff 	.word	0xfeffffff
 8009028:	fdffffff 	.word	0xfdffffff
 800902c:	dfffffff 	.word	0xdfffffff

08009030 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8009030:	b580      	push	{r7, lr}
 8009032:	b08a      	sub	sp, #40	; 0x28
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800903c:	2327      	movs	r3, #39	; 0x27
 800903e:	18fb      	adds	r3, r7, r3
 8009040:	2200      	movs	r2, #0
 8009042:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	223c      	movs	r2, #60	; 0x3c
 8009048:	5c9b      	ldrb	r3, [r3, r2]
 800904a:	2b01      	cmp	r3, #1
 800904c:	d101      	bne.n	8009052 <HAL_TIMEx_ConfigBreakInput+0x22>
 800904e:	2302      	movs	r3, #2
 8009050:	e095      	b.n	800917e <HAL_TIMEx_ConfigBreakInput+0x14e>
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	223c      	movs	r2, #60	; 0x3c
 8009056:	2101      	movs	r1, #1
 8009058:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2b04      	cmp	r3, #4
 8009060:	d019      	beq.n	8009096 <HAL_TIMEx_ConfigBreakInput+0x66>
 8009062:	d822      	bhi.n	80090aa <HAL_TIMEx_ConfigBreakInput+0x7a>
 8009064:	2b01      	cmp	r3, #1
 8009066:	d002      	beq.n	800906e <HAL_TIMEx_ConfigBreakInput+0x3e>
 8009068:	2b02      	cmp	r3, #2
 800906a:	d00a      	beq.n	8009082 <HAL_TIMEx_ConfigBreakInput+0x52>
 800906c:	e01d      	b.n	80090aa <HAL_TIMEx_ConfigBreakInput+0x7a>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800906e:	2301      	movs	r3, #1
 8009070:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8009072:	2300      	movs	r3, #0
 8009074:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8009076:	2380      	movs	r3, #128	; 0x80
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800907c:	2309      	movs	r3, #9
 800907e:	617b      	str	r3, [r7, #20]
      break;
 8009080:	e01c      	b.n	80090bc <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8009082:	2302      	movs	r3, #2
 8009084:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8009086:	2301      	movs	r3, #1
 8009088:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800908a:	2380      	movs	r3, #128	; 0x80
 800908c:	00db      	lsls	r3, r3, #3
 800908e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8009090:	230a      	movs	r3, #10
 8009092:	617b      	str	r3, [r7, #20]
      break;
 8009094:	e012      	b.n	80090bc <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8009096:	2304      	movs	r3, #4
 8009098:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800909a:	2302      	movs	r3, #2
 800909c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800909e:	2380      	movs	r3, #128	; 0x80
 80090a0:	011b      	lsls	r3, r3, #4
 80090a2:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 80090a4:	230b      	movs	r3, #11
 80090a6:	617b      	str	r3, [r7, #20]
      break;
 80090a8:	e008      	b.n	80090bc <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 80090aa:	2300      	movs	r3, #0
 80090ac:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 80090ae:	2300      	movs	r3, #0
 80090b0:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 80090b2:	2300      	movs	r3, #0
 80090b4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 80090b6:	2300      	movs	r3, #0
 80090b8:	617b      	str	r3, [r7, #20]
      break;
 80090ba:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d003      	beq.n	80090ca <HAL_TIMEx_ConfigBreakInput+0x9a>
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	2b02      	cmp	r3, #2
 80090c6:	d027      	beq.n	8009118 <HAL_TIMEx_ConfigBreakInput+0xe8>
 80090c8:	e04d      	b.n	8009166 <HAL_TIMEx_ConfigBreakInput+0x136>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090d0:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80090d2:	6a3b      	ldr	r3, [r7, #32]
 80090d4:	43da      	mvns	r2, r3
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	4013      	ands	r3, r2
 80090da:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	685a      	ldr	r2, [r3, #4]
 80090e0:	69bb      	ldr	r3, [r7, #24]
 80090e2:	409a      	lsls	r2, r3
 80090e4:	0013      	movs	r3, r2
 80090e6:	6a3a      	ldr	r2, [r7, #32]
 80090e8:	4013      	ands	r3, r2
 80090ea:	693a      	ldr	r2, [r7, #16]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	43da      	mvns	r2, r3
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	4013      	ands	r3, r2
 80090f8:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	689a      	ldr	r2, [r3, #8]
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	409a      	lsls	r2, r3
 8009102:	0013      	movs	r3, r2
 8009104:	69fa      	ldr	r2, [r7, #28]
 8009106:	4013      	ands	r3, r2
 8009108:	693a      	ldr	r2, [r7, #16]
 800910a:	4313      	orrs	r3, r2
 800910c:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	693a      	ldr	r2, [r7, #16]
 8009114:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 8009116:	e02b      	b.n	8009170 <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800911e:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8009120:	6a3b      	ldr	r3, [r7, #32]
 8009122:	43da      	mvns	r2, r3
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	4013      	ands	r3, r2
 8009128:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	685a      	ldr	r2, [r3, #4]
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	409a      	lsls	r2, r3
 8009132:	0013      	movs	r3, r2
 8009134:	6a3a      	ldr	r2, [r7, #32]
 8009136:	4013      	ands	r3, r2
 8009138:	693a      	ldr	r2, [r7, #16]
 800913a:	4313      	orrs	r3, r2
 800913c:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	43da      	mvns	r2, r3
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	4013      	ands	r3, r2
 8009146:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	689a      	ldr	r2, [r3, #8]
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	409a      	lsls	r2, r3
 8009150:	0013      	movs	r3, r2
 8009152:	69fa      	ldr	r2, [r7, #28]
 8009154:	4013      	ands	r3, r2
 8009156:	693a      	ldr	r2, [r7, #16]
 8009158:	4313      	orrs	r3, r2
 800915a:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	693a      	ldr	r2, [r7, #16]
 8009162:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8009164:	e004      	b.n	8009170 <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    default:
      status = HAL_ERROR;
 8009166:	2327      	movs	r3, #39	; 0x27
 8009168:	18fb      	adds	r3, r7, r3
 800916a:	2201      	movs	r2, #1
 800916c:	701a      	strb	r2, [r3, #0]
      break;
 800916e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	223c      	movs	r2, #60	; 0x3c
 8009174:	2100      	movs	r1, #0
 8009176:	5499      	strb	r1, [r3, r2]

  return status;
 8009178:	2327      	movs	r3, #39	; 0x27
 800917a:	18fb      	adds	r3, r7, r3
 800917c:	781b      	ldrb	r3, [r3, #0]
}
 800917e:	0018      	movs	r0, r3
 8009180:	46bd      	mov	sp, r7
 8009182:	b00a      	add	sp, #40	; 0x28
 8009184:	bd80      	pop	{r7, pc}
	...

08009188 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d101      	bne.n	800919a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e03f      	b.n	800921a <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2259      	movs	r2, #89	; 0x59
 800919e:	5c9b      	ldrb	r3, [r3, r2]
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d107      	bne.n	80091b6 <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2258      	movs	r2, #88	; 0x58
 80091aa:	2100      	movs	r1, #0
 80091ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	0018      	movs	r0, r3
 80091b2:	f7f9 fd99 	bl	8002ce8 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2259      	movs	r2, #89	; 0x59
 80091ba:	2102      	movs	r1, #2
 80091bc:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2101      	movs	r1, #1
 80091ca:	438a      	bics	r2, r1
 80091cc:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	0018      	movs	r0, r3
 80091d2:	f000 fae3 	bl	800979c <USART_SetConfig>
 80091d6:	0003      	movs	r3, r0
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d101      	bne.n	80091e0 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	e01c      	b.n	800921a <HAL_USART_Init+0x92>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	685a      	ldr	r2, [r3, #4]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	490e      	ldr	r1, [pc, #56]	; (8009224 <HAL_USART_Init+0x9c>)
 80091ec:	400a      	ands	r2, r1
 80091ee:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	689a      	ldr	r2, [r3, #8]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	212a      	movs	r1, #42	; 0x2a
 80091fc:	438a      	bics	r2, r1
 80091fe:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2101      	movs	r1, #1
 800920c:	430a      	orrs	r2, r1
 800920e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	0018      	movs	r0, r3
 8009214:	f000 fd5e 	bl	8009cd4 <USART_CheckIdleState>
 8009218:	0003      	movs	r3, r0
}
 800921a:	0018      	movs	r0, r3
 800921c:	46bd      	mov	sp, r7
 800921e:	b002      	add	sp, #8
 8009220:	bd80      	pop	{r7, pc}
 8009222:	46c0      	nop			; (mov r8, r8)
 8009224:	ffffbfff 	.word	0xffffbfff

08009228 <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b08a      	sub	sp, #40	; 0x28
 800922c:	af02      	add	r7, sp, #8
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	603b      	str	r3, [r7, #0]
 8009234:	1dbb      	adds	r3, r7, #6
 8009236:	801a      	strh	r2, [r3, #0]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2259      	movs	r2, #89	; 0x59
 800923c:	5c9b      	ldrb	r3, [r3, r2]
 800923e:	b2db      	uxtb	r3, r3
 8009240:	2b01      	cmp	r3, #1
 8009242:	d000      	beq.n	8009246 <HAL_USART_Transmit+0x1e>
 8009244:	e0a9      	b.n	800939a <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d003      	beq.n	8009254 <HAL_USART_Transmit+0x2c>
 800924c:	1dbb      	adds	r3, r7, #6
 800924e:	881b      	ldrh	r3, [r3, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d101      	bne.n	8009258 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	e0a1      	b.n	800939c <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	689a      	ldr	r2, [r3, #8]
 800925c:	2380      	movs	r3, #128	; 0x80
 800925e:	015b      	lsls	r3, r3, #5
 8009260:	429a      	cmp	r2, r3
 8009262:	d109      	bne.n	8009278 <HAL_USART_Transmit+0x50>
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d105      	bne.n	8009278 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	2201      	movs	r2, #1
 8009270:	4013      	ands	r3, r2
 8009272:	d001      	beq.n	8009278 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 8009274:	2301      	movs	r3, #1
 8009276:	e091      	b.n	800939c <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2258      	movs	r2, #88	; 0x58
 800927c:	5c9b      	ldrb	r3, [r3, r2]
 800927e:	2b01      	cmp	r3, #1
 8009280:	d101      	bne.n	8009286 <HAL_USART_Transmit+0x5e>
 8009282:	2302      	movs	r3, #2
 8009284:	e08a      	b.n	800939c <HAL_USART_Transmit+0x174>
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2258      	movs	r2, #88	; 0x58
 800928a:	2101      	movs	r1, #1
 800928c:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2200      	movs	r2, #0
 8009292:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2259      	movs	r2, #89	; 0x59
 8009298:	2112      	movs	r1, #18
 800929a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800929c:	f7f9 ff52 	bl	8003144 <HAL_GetTick>
 80092a0:	0003      	movs	r3, r0
 80092a2:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	1dba      	adds	r2, r7, #6
 80092a8:	8812      	ldrh	r2, [r2, #0]
 80092aa:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	1dba      	adds	r2, r7, #6
 80092b0:	8812      	ldrh	r2, [r2, #0]
 80092b2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	689a      	ldr	r2, [r3, #8]
 80092b8:	2380      	movs	r3, #128	; 0x80
 80092ba:	015b      	lsls	r3, r3, #5
 80092bc:	429a      	cmp	r2, r3
 80092be:	d108      	bne.n	80092d2 <HAL_USART_Transmit+0xaa>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d104      	bne.n	80092d2 <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 80092c8:	2300      	movs	r3, #0
 80092ca:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	61bb      	str	r3, [r7, #24]
 80092d0:	e003      	b.n	80092da <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 80092d6:	2300      	movs	r3, #0
 80092d8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 80092da:	e02a      	b.n	8009332 <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80092dc:	697a      	ldr	r2, [r7, #20]
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	9300      	str	r3, [sp, #0]
 80092e4:	0013      	movs	r3, r2
 80092e6:	2200      	movs	r2, #0
 80092e8:	2180      	movs	r1, #128	; 0x80
 80092ea:	f000 fa22 	bl	8009732 <USART_WaitOnFlagUntilTimeout>
 80092ee:	1e03      	subs	r3, r0, #0
 80092f0:	d001      	beq.n	80092f6 <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 80092f2:	2303      	movs	r3, #3
 80092f4:	e052      	b.n	800939c <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d10b      	bne.n	8009314 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	881b      	ldrh	r3, [r3, #0]
 8009300:	001a      	movs	r2, r3
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	05d2      	lsls	r2, r2, #23
 8009308:	0dd2      	lsrs	r2, r2, #23
 800930a:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	3302      	adds	r3, #2
 8009310:	61bb      	str	r3, [r7, #24]
 8009312:	e007      	b.n	8009324 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	781a      	ldrb	r2, [r3, #0]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	3301      	adds	r3, #1
 8009322:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009328:	b29b      	uxth	r3, r3
 800932a:	3b01      	subs	r3, #1
 800932c:	b29a      	uxth	r2, r3
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009336:	b29b      	uxth	r3, r3
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1cf      	bne.n	80092dc <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800933c:	697a      	ldr	r2, [r7, #20]
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	0013      	movs	r3, r2
 8009346:	2200      	movs	r2, #0
 8009348:	2140      	movs	r1, #64	; 0x40
 800934a:	f000 f9f2 	bl	8009732 <USART_WaitOnFlagUntilTimeout>
 800934e:	1e03      	subs	r3, r0, #0
 8009350:	d001      	beq.n	8009356 <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 8009352:	2303      	movs	r3, #3
 8009354:	e022      	b.n	800939c <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2240      	movs	r2, #64	; 0x40
 800935c:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2208      	movs	r2, #8
 8009364:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	699a      	ldr	r2, [r3, #24]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2108      	movs	r1, #8
 8009372:	430a      	orrs	r2, r1
 8009374:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	699a      	ldr	r2, [r3, #24]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2110      	movs	r1, #16
 8009382:	430a      	orrs	r2, r1
 8009384:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2259      	movs	r2, #89	; 0x59
 800938a:	2101      	movs	r1, #1
 800938c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2258      	movs	r2, #88	; 0x58
 8009392:	2100      	movs	r1, #0
 8009394:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009396:	2300      	movs	r3, #0
 8009398:	e000      	b.n	800939c <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 800939a:	2302      	movs	r3, #2
  }
}
 800939c:	0018      	movs	r0, r3
 800939e:	46bd      	mov	sp, r7
 80093a0:	b008      	add	sp, #32
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b088      	sub	sp, #32
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	69db      	ldr	r3, [r3, #28]
 80093b2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
 80093c4:	69fb      	ldr	r3, [r7, #28]
 80093c6:	4ab3      	ldr	r2, [pc, #716]	; (8009694 <HAL_USART_IRQHandler+0x2f0>)
 80093c8:	4013      	ands	r3, r2
 80093ca:	613b      	str	r3, [r7, #16]
                                      USART_ISR_UDR));
  if (errorflags == 0U)
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d117      	bne.n	8009402 <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	2220      	movs	r2, #32
 80093d6:	4013      	ands	r3, r2
 80093d8:	d013      	beq.n	8009402 <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	2220      	movs	r2, #32
 80093de:	4013      	ands	r3, r2
 80093e0:	d104      	bne.n	80093ec <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80093e2:	697a      	ldr	r2, [r7, #20]
 80093e4:	2380      	movs	r3, #128	; 0x80
 80093e6:	055b      	lsls	r3, r3, #21
 80093e8:	4013      	ands	r3, r2
 80093ea:	d00a      	beq.n	8009402 <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d100      	bne.n	80093f6 <HAL_USART_IRQHandler+0x52>
 80093f4:	e14a      	b.n	800968c <HAL_USART_IRQHandler+0x2e8>
      {
        husart->RxISR(husart);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	0010      	movs	r0, r2
 80093fe:	4798      	blx	r3
      }
      return;
 8009400:	e144      	b.n	800968c <HAL_USART_IRQHandler+0x2e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d100      	bne.n	800940a <HAL_USART_IRQHandler+0x66>
 8009408:	e100      	b.n	800960c <HAL_USART_IRQHandler+0x268>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	4aa2      	ldr	r2, [pc, #648]	; (8009698 <HAL_USART_IRQHandler+0x2f4>)
 800940e:	4013      	ands	r3, r2
 8009410:	d105      	bne.n	800941e <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 8009412:	69ba      	ldr	r2, [r7, #24]
 8009414:	2390      	movs	r3, #144	; 0x90
 8009416:	005b      	lsls	r3, r3, #1
 8009418:	4013      	ands	r3, r2
 800941a:	d100      	bne.n	800941e <HAL_USART_IRQHandler+0x7a>
 800941c:	e0f6      	b.n	800960c <HAL_USART_IRQHandler+0x268>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	2201      	movs	r2, #1
 8009422:	4013      	ands	r3, r2
 8009424:	d00e      	beq.n	8009444 <HAL_USART_IRQHandler+0xa0>
 8009426:	69ba      	ldr	r2, [r7, #24]
 8009428:	2380      	movs	r3, #128	; 0x80
 800942a:	005b      	lsls	r3, r3, #1
 800942c:	4013      	ands	r3, r2
 800942e:	d009      	beq.n	8009444 <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2201      	movs	r2, #1
 8009436:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800943c:	2201      	movs	r2, #1
 800943e:	431a      	orrs	r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	2202      	movs	r2, #2
 8009448:	4013      	ands	r3, r2
 800944a:	d00d      	beq.n	8009468 <HAL_USART_IRQHandler+0xc4>
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	2201      	movs	r2, #1
 8009450:	4013      	ands	r3, r2
 8009452:	d009      	beq.n	8009468 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2202      	movs	r2, #2
 800945a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009460:	2204      	movs	r2, #4
 8009462:	431a      	orrs	r2, r3
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	2204      	movs	r2, #4
 800946c:	4013      	ands	r3, r2
 800946e:	d00d      	beq.n	800948c <HAL_USART_IRQHandler+0xe8>
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	2201      	movs	r2, #1
 8009474:	4013      	ands	r3, r2
 8009476:	d009      	beq.n	800948c <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2204      	movs	r2, #4
 800947e:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009484:	2202      	movs	r2, #2
 8009486:	431a      	orrs	r2, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	2208      	movs	r2, #8
 8009490:	4013      	ands	r3, r2
 8009492:	d011      	beq.n	80094b8 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	2220      	movs	r2, #32
 8009498:	4013      	ands	r3, r2
 800949a:	d103      	bne.n	80094a4 <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	4a7e      	ldr	r2, [pc, #504]	; (8009698 <HAL_USART_IRQHandler+0x2f4>)
 80094a0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80094a2:	d009      	beq.n	80094b8 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2208      	movs	r2, #8
 80094aa:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094b0:	2208      	movs	r2, #8
 80094b2:	431a      	orrs	r2, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80094b8:	69fa      	ldr	r2, [r7, #28]
 80094ba:	2380      	movs	r3, #128	; 0x80
 80094bc:	011b      	lsls	r3, r3, #4
 80094be:	4013      	ands	r3, r2
 80094c0:	d00f      	beq.n	80094e2 <HAL_USART_IRQHandler+0x13e>
 80094c2:	69ba      	ldr	r2, [r7, #24]
 80094c4:	2380      	movs	r3, #128	; 0x80
 80094c6:	04db      	lsls	r3, r3, #19
 80094c8:	4013      	ands	r3, r2
 80094ca:	d00a      	beq.n	80094e2 <HAL_USART_IRQHandler+0x13e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2280      	movs	r2, #128	; 0x80
 80094d2:	0112      	lsls	r2, r2, #4
 80094d4:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094da:	2280      	movs	r2, #128	; 0x80
 80094dc:	431a      	orrs	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094e2:	69fa      	ldr	r2, [r7, #28]
 80094e4:	2380      	movs	r3, #128	; 0x80
 80094e6:	019b      	lsls	r3, r3, #6
 80094e8:	4013      	ands	r3, r2
 80094ea:	d01a      	beq.n	8009522 <HAL_USART_IRQHandler+0x17e>
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	2201      	movs	r2, #1
 80094f0:	4013      	ands	r3, r2
 80094f2:	d016      	beq.n	8009522 <HAL_USART_IRQHandler+0x17e>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2259      	movs	r2, #89	; 0x59
 80094f8:	5c9b      	ldrb	r3, [r3, r2]
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	2b22      	cmp	r3, #34	; 0x22
 80094fe:	d105      	bne.n	800950c <HAL_USART_IRQHandler+0x168>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2280      	movs	r2, #128	; 0x80
 8009506:	0192      	lsls	r2, r2, #6
 8009508:	621a      	str	r2, [r3, #32]
        return;
 800950a:	e0ca      	b.n	80096a2 <HAL_USART_IRQHandler+0x2fe>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2280      	movs	r2, #128	; 0x80
 8009512:	0192      	lsls	r2, r2, #6
 8009514:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800951a:	2220      	movs	r2, #32
 800951c:	431a      	orrs	r2, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009526:	2b00      	cmp	r3, #0
 8009528:	d100      	bne.n	800952c <HAL_USART_IRQHandler+0x188>
 800952a:	e0b1      	b.n	8009690 <HAL_USART_IRQHandler+0x2ec>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	2220      	movs	r2, #32
 8009530:	4013      	ands	r3, r2
 8009532:	d011      	beq.n	8009558 <HAL_USART_IRQHandler+0x1b4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	2220      	movs	r2, #32
 8009538:	4013      	ands	r3, r2
 800953a:	d104      	bne.n	8009546 <HAL_USART_IRQHandler+0x1a2>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800953c:	697a      	ldr	r2, [r7, #20]
 800953e:	2380      	movs	r3, #128	; 0x80
 8009540:	055b      	lsls	r3, r3, #21
 8009542:	4013      	ands	r3, r2
 8009544:	d008      	beq.n	8009558 <HAL_USART_IRQHandler+0x1b4>
      {
        if (husart->RxISR != NULL)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800954a:	2b00      	cmp	r3, #0
 800954c:	d004      	beq.n	8009558 <HAL_USART_IRQHandler+0x1b4>
        {
          husart->RxISR(husart);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	0010      	movs	r0, r2
 8009556:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800955c:	2208      	movs	r2, #8
 800955e:	4013      	ands	r3, r2
 8009560:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	2240      	movs	r2, #64	; 0x40
 800956a:	4013      	ands	r3, r2
 800956c:	2b40      	cmp	r3, #64	; 0x40
 800956e:	d002      	beq.n	8009576 <HAL_USART_IRQHandler+0x1d2>
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d040      	beq.n	80095f8 <HAL_USART_IRQHandler+0x254>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	0018      	movs	r0, r3
 800957a:	f000 f8a5 	bl	80096c8 <USART_EndTransfer>

        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	2240      	movs	r2, #64	; 0x40
 8009586:	4013      	ands	r3, r2
 8009588:	2b40      	cmp	r3, #64	; 0x40
 800958a:	d130      	bne.n	80095ee <HAL_USART_IRQHandler+0x24a>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	689a      	ldr	r2, [r3, #8]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2140      	movs	r1, #64	; 0x40
 8009598:	438a      	bics	r2, r1
 800959a:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d008      	beq.n	80095b6 <HAL_USART_IRQHandler+0x212>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095a8:	2200      	movs	r2, #0
 80095aa:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095b0:	0018      	movs	r0, r3
 80095b2:	f7fa fa59 	bl	8003a68 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d012      	beq.n	80095e4 <HAL_USART_IRQHandler+0x240>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095c2:	4a36      	ldr	r2, [pc, #216]	; (800969c <HAL_USART_IRQHandler+0x2f8>)
 80095c4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ca:	0018      	movs	r0, r3
 80095cc:	f7fa fa4c 	bl	8003a68 <HAL_DMA_Abort_IT>
 80095d0:	1e03      	subs	r3, r0, #0
 80095d2:	d019      	beq.n	8009608 <HAL_USART_IRQHandler+0x264>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095de:	0018      	movs	r0, r3
 80095e0:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80095e2:	e011      	b.n	8009608 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	0018      	movs	r0, r3
 80095e8:	f000 f866 	bl	80096b8 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80095ec:	e00c      	b.n	8009608 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	0018      	movs	r0, r3
 80095f2:	f000 f861 	bl	80096b8 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80095f6:	e007      	b.n	8009608 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	0018      	movs	r0, r3
 80095fc:	f000 f85c 	bl	80096b8 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 8009606:	e043      	b.n	8009690 <HAL_USART_IRQHandler+0x2ec>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009608:	46c0      	nop			; (mov r8, r8)
    return;
 800960a:	e041      	b.n	8009690 <HAL_USART_IRQHandler+0x2ec>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800960c:	69fb      	ldr	r3, [r7, #28]
 800960e:	2280      	movs	r2, #128	; 0x80
 8009610:	4013      	ands	r3, r2
 8009612:	d012      	beq.n	800963a <HAL_USART_IRQHandler+0x296>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	2280      	movs	r2, #128	; 0x80
 8009618:	4013      	ands	r3, r2
 800961a:	d104      	bne.n	8009626 <HAL_USART_IRQHandler+0x282>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800961c:	697a      	ldr	r2, [r7, #20]
 800961e:	2380      	movs	r3, #128	; 0x80
 8009620:	041b      	lsls	r3, r3, #16
 8009622:	4013      	ands	r3, r2
 8009624:	d009      	beq.n	800963a <HAL_USART_IRQHandler+0x296>
  {
    if (husart->TxISR != NULL)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800962a:	2b00      	cmp	r3, #0
 800962c:	d038      	beq.n	80096a0 <HAL_USART_IRQHandler+0x2fc>
    {
      husart->TxISR(husart);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	0010      	movs	r0, r2
 8009636:	4798      	blx	r3
    }
    return;
 8009638:	e032      	b.n	80096a0 <HAL_USART_IRQHandler+0x2fc>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800963a:	69fb      	ldr	r3, [r7, #28]
 800963c:	2240      	movs	r2, #64	; 0x40
 800963e:	4013      	ands	r3, r2
 8009640:	d008      	beq.n	8009654 <HAL_USART_IRQHandler+0x2b0>
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	2240      	movs	r2, #64	; 0x40
 8009646:	4013      	ands	r3, r2
 8009648:	d004      	beq.n	8009654 <HAL_USART_IRQHandler+0x2b0>
  {
    USART_EndTransmit_IT(husart);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	0018      	movs	r0, r3
 800964e:	f000 fb85 	bl	8009d5c <USART_EndTransmit_IT>
    return;
 8009652:	e026      	b.n	80096a2 <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009654:	69fa      	ldr	r2, [r7, #28]
 8009656:	2380      	movs	r3, #128	; 0x80
 8009658:	041b      	lsls	r3, r3, #16
 800965a:	4013      	ands	r3, r2
 800965c:	d009      	beq.n	8009672 <HAL_USART_IRQHandler+0x2ce>
 800965e:	69ba      	ldr	r2, [r7, #24]
 8009660:	2380      	movs	r3, #128	; 0x80
 8009662:	05db      	lsls	r3, r3, #23
 8009664:	4013      	ands	r3, r2
 8009666:	d004      	beq.n	8009672 <HAL_USART_IRQHandler+0x2ce>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	0018      	movs	r0, r3
 800966c:	f000 fbc1 	bl	8009df2 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 8009670:	e017      	b.n	80096a2 <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009672:	69fa      	ldr	r2, [r7, #28]
 8009674:	2380      	movs	r3, #128	; 0x80
 8009676:	045b      	lsls	r3, r3, #17
 8009678:	4013      	ands	r3, r2
 800967a:	d012      	beq.n	80096a2 <HAL_USART_IRQHandler+0x2fe>
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	2b00      	cmp	r3, #0
 8009680:	da0f      	bge.n	80096a2 <HAL_USART_IRQHandler+0x2fe>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	0018      	movs	r0, r3
 8009686:	f000 fbac 	bl	8009de2 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800968a:	e00a      	b.n	80096a2 <HAL_USART_IRQHandler+0x2fe>
      return;
 800968c:	46c0      	nop			; (mov r8, r8)
 800968e:	e008      	b.n	80096a2 <HAL_USART_IRQHandler+0x2fe>
    return;
 8009690:	46c0      	nop			; (mov r8, r8)
 8009692:	e006      	b.n	80096a2 <HAL_USART_IRQHandler+0x2fe>
 8009694:	0000280f 	.word	0x0000280f
 8009698:	10000001 	.word	0x10000001
 800969c:	08009709 	.word	0x08009709
    return;
 80096a0:	46c0      	nop			; (mov r8, r8)
  }
}
 80096a2:	46bd      	mov	sp, r7
 80096a4:	b008      	add	sp, #32
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 80096b0:	46c0      	nop			; (mov r8, r8)
 80096b2:	46bd      	mov	sp, r7
 80096b4:	b002      	add	sp, #8
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 80096c0:	46c0      	nop			; (mov r8, r8)
 80096c2:	46bd      	mov	sp, r7
 80096c4:	b002      	add	sp, #8
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4909      	ldr	r1, [pc, #36]	; (8009700 <USART_EndTransfer+0x38>)
 80096dc:	400a      	ands	r2, r1
 80096de:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	689a      	ldr	r2, [r3, #8]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4906      	ldr	r1, [pc, #24]	; (8009704 <USART_EndTransfer+0x3c>)
 80096ec:	400a      	ands	r2, r1
 80096ee:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2259      	movs	r2, #89	; 0x59
 80096f4:	2101      	movs	r1, #1
 80096f6:	5499      	strb	r1, [r3, r2]
}
 80096f8:	46c0      	nop			; (mov r8, r8)
 80096fa:	46bd      	mov	sp, r7
 80096fc:	b002      	add	sp, #8
 80096fe:	bd80      	pop	{r7, pc}
 8009700:	fffffe1f 	.word	0xfffffe1f
 8009704:	ef7ffffe 	.word	0xef7ffffe

08009708 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009714:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2200      	movs	r2, #0
 800971a:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2200      	movs	r2, #0
 8009720:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	0018      	movs	r0, r3
 8009726:	f7ff ffc7 	bl	80096b8 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800972a:	46c0      	nop			; (mov r8, r8)
 800972c:	46bd      	mov	sp, r7
 800972e:	b004      	add	sp, #16
 8009730:	bd80      	pop	{r7, pc}

08009732 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b084      	sub	sp, #16
 8009736:	af00      	add	r7, sp, #0
 8009738:	60f8      	str	r0, [r7, #12]
 800973a:	60b9      	str	r1, [r7, #8]
 800973c:	603b      	str	r3, [r7, #0]
 800973e:	1dfb      	adds	r3, r7, #7
 8009740:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8009742:	e017      	b.n	8009774 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	3301      	adds	r3, #1
 8009748:	d014      	beq.n	8009774 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800974a:	f7f9 fcfb 	bl	8003144 <HAL_GetTick>
 800974e:	0002      	movs	r2, r0
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	1ad3      	subs	r3, r2, r3
 8009754:	69ba      	ldr	r2, [r7, #24]
 8009756:	429a      	cmp	r2, r3
 8009758:	d302      	bcc.n	8009760 <USART_WaitOnFlagUntilTimeout+0x2e>
 800975a:	69bb      	ldr	r3, [r7, #24]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d109      	bne.n	8009774 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2259      	movs	r2, #89	; 0x59
 8009764:	2101      	movs	r1, #1
 8009766:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2258      	movs	r2, #88	; 0x58
 800976c:	2100      	movs	r1, #0
 800976e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009770:	2303      	movs	r3, #3
 8009772:	e00f      	b.n	8009794 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	69db      	ldr	r3, [r3, #28]
 800977a:	68ba      	ldr	r2, [r7, #8]
 800977c:	4013      	ands	r3, r2
 800977e:	68ba      	ldr	r2, [r7, #8]
 8009780:	1ad3      	subs	r3, r2, r3
 8009782:	425a      	negs	r2, r3
 8009784:	4153      	adcs	r3, r2
 8009786:	b2db      	uxtb	r3, r3
 8009788:	001a      	movs	r2, r3
 800978a:	1dfb      	adds	r3, r7, #7
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	429a      	cmp	r2, r3
 8009790:	d0d8      	beq.n	8009744 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009792:	2300      	movs	r3, #0
}
 8009794:	0018      	movs	r0, r3
 8009796:	46bd      	mov	sp, r7
 8009798:	b004      	add	sp, #16
 800979a:	bd80      	pop	{r7, pc}

0800979c <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b088      	sub	sp, #32
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 80097a4:	231e      	movs	r3, #30
 80097a6:	18fb      	adds	r3, r7, r3
 80097a8:	2200      	movs	r2, #0
 80097aa:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 80097ac:	2300      	movs	r3, #0
 80097ae:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	689a      	ldr	r2, [r3, #8]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	691b      	ldr	r3, [r3, #16]
 80097b8:	431a      	orrs	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	695b      	ldr	r3, [r3, #20]
 80097be:	4313      	orrs	r3, r2
 80097c0:	2280      	movs	r2, #128	; 0x80
 80097c2:	0212      	lsls	r2, r2, #8
 80097c4:	4313      	orrs	r3, r2
 80097c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4ab1      	ldr	r2, [pc, #708]	; (8009a94 <USART_SetConfig+0x2f8>)
 80097d0:	4013      	ands	r3, r2
 80097d2:	0019      	movs	r1, r3
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	697a      	ldr	r2, [r7, #20]
 80097da:	430a      	orrs	r2, r1
 80097dc:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80097de:	2380      	movs	r3, #128	; 0x80
 80097e0:	011b      	lsls	r3, r3, #4
 80097e2:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6a1b      	ldr	r3, [r3, #32]
 80097e8:	697a      	ldr	r2, [r7, #20]
 80097ea:	4313      	orrs	r3, r2
 80097ec:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	699a      	ldr	r2, [r3, #24]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	69db      	ldr	r3, [r3, #28]
 80097f6:	4313      	orrs	r3, r2
 80097f8:	697a      	ldr	r2, [r7, #20]
 80097fa:	4313      	orrs	r3, r2
 80097fc:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	68db      	ldr	r3, [r3, #12]
 8009802:	697a      	ldr	r2, [r7, #20]
 8009804:	4313      	orrs	r3, r2
 8009806:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	4aa2      	ldr	r2, [pc, #648]	; (8009a98 <USART_SetConfig+0x2fc>)
 8009810:	4013      	ands	r3, r2
 8009812:	0019      	movs	r1, r3
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	697a      	ldr	r2, [r7, #20]
 800981a:	430a      	orrs	r2, r1
 800981c:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009824:	220f      	movs	r2, #15
 8009826:	4393      	bics	r3, r2
 8009828:	0019      	movs	r1, r3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	430a      	orrs	r2, r1
 8009834:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a98      	ldr	r2, [pc, #608]	; (8009a9c <USART_SetConfig+0x300>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d127      	bne.n	8009890 <USART_SetConfig+0xf4>
 8009840:	4b97      	ldr	r3, [pc, #604]	; (8009aa0 <USART_SetConfig+0x304>)
 8009842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009844:	2203      	movs	r2, #3
 8009846:	4013      	ands	r3, r2
 8009848:	2b03      	cmp	r3, #3
 800984a:	d017      	beq.n	800987c <USART_SetConfig+0xe0>
 800984c:	d81b      	bhi.n	8009886 <USART_SetConfig+0xea>
 800984e:	2b02      	cmp	r3, #2
 8009850:	d00a      	beq.n	8009868 <USART_SetConfig+0xcc>
 8009852:	d818      	bhi.n	8009886 <USART_SetConfig+0xea>
 8009854:	2b00      	cmp	r3, #0
 8009856:	d002      	beq.n	800985e <USART_SetConfig+0xc2>
 8009858:	2b01      	cmp	r3, #1
 800985a:	d00a      	beq.n	8009872 <USART_SetConfig+0xd6>
 800985c:	e013      	b.n	8009886 <USART_SetConfig+0xea>
 800985e:	231f      	movs	r3, #31
 8009860:	18fb      	adds	r3, r7, r3
 8009862:	2200      	movs	r2, #0
 8009864:	701a      	strb	r2, [r3, #0]
 8009866:	e058      	b.n	800991a <USART_SetConfig+0x17e>
 8009868:	231f      	movs	r3, #31
 800986a:	18fb      	adds	r3, r7, r3
 800986c:	2202      	movs	r2, #2
 800986e:	701a      	strb	r2, [r3, #0]
 8009870:	e053      	b.n	800991a <USART_SetConfig+0x17e>
 8009872:	231f      	movs	r3, #31
 8009874:	18fb      	adds	r3, r7, r3
 8009876:	2204      	movs	r2, #4
 8009878:	701a      	strb	r2, [r3, #0]
 800987a:	e04e      	b.n	800991a <USART_SetConfig+0x17e>
 800987c:	231f      	movs	r3, #31
 800987e:	18fb      	adds	r3, r7, r3
 8009880:	2208      	movs	r2, #8
 8009882:	701a      	strb	r2, [r3, #0]
 8009884:	e049      	b.n	800991a <USART_SetConfig+0x17e>
 8009886:	231f      	movs	r3, #31
 8009888:	18fb      	adds	r3, r7, r3
 800988a:	2210      	movs	r2, #16
 800988c:	701a      	strb	r2, [r3, #0]
 800988e:	e044      	b.n	800991a <USART_SetConfig+0x17e>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a83      	ldr	r2, [pc, #524]	; (8009aa4 <USART_SetConfig+0x308>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d127      	bne.n	80098ea <USART_SetConfig+0x14e>
 800989a:	4b81      	ldr	r3, [pc, #516]	; (8009aa0 <USART_SetConfig+0x304>)
 800989c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800989e:	220c      	movs	r2, #12
 80098a0:	4013      	ands	r3, r2
 80098a2:	2b0c      	cmp	r3, #12
 80098a4:	d017      	beq.n	80098d6 <USART_SetConfig+0x13a>
 80098a6:	d81b      	bhi.n	80098e0 <USART_SetConfig+0x144>
 80098a8:	2b08      	cmp	r3, #8
 80098aa:	d00a      	beq.n	80098c2 <USART_SetConfig+0x126>
 80098ac:	d818      	bhi.n	80098e0 <USART_SetConfig+0x144>
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d002      	beq.n	80098b8 <USART_SetConfig+0x11c>
 80098b2:	2b04      	cmp	r3, #4
 80098b4:	d00a      	beq.n	80098cc <USART_SetConfig+0x130>
 80098b6:	e013      	b.n	80098e0 <USART_SetConfig+0x144>
 80098b8:	231f      	movs	r3, #31
 80098ba:	18fb      	adds	r3, r7, r3
 80098bc:	2200      	movs	r2, #0
 80098be:	701a      	strb	r2, [r3, #0]
 80098c0:	e02b      	b.n	800991a <USART_SetConfig+0x17e>
 80098c2:	231f      	movs	r3, #31
 80098c4:	18fb      	adds	r3, r7, r3
 80098c6:	2202      	movs	r2, #2
 80098c8:	701a      	strb	r2, [r3, #0]
 80098ca:	e026      	b.n	800991a <USART_SetConfig+0x17e>
 80098cc:	231f      	movs	r3, #31
 80098ce:	18fb      	adds	r3, r7, r3
 80098d0:	2204      	movs	r2, #4
 80098d2:	701a      	strb	r2, [r3, #0]
 80098d4:	e021      	b.n	800991a <USART_SetConfig+0x17e>
 80098d6:	231f      	movs	r3, #31
 80098d8:	18fb      	adds	r3, r7, r3
 80098da:	2208      	movs	r2, #8
 80098dc:	701a      	strb	r2, [r3, #0]
 80098de:	e01c      	b.n	800991a <USART_SetConfig+0x17e>
 80098e0:	231f      	movs	r3, #31
 80098e2:	18fb      	adds	r3, r7, r3
 80098e4:	2210      	movs	r2, #16
 80098e6:	701a      	strb	r2, [r3, #0]
 80098e8:	e017      	b.n	800991a <USART_SetConfig+0x17e>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a6e      	ldr	r2, [pc, #440]	; (8009aa8 <USART_SetConfig+0x30c>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d104      	bne.n	80098fe <USART_SetConfig+0x162>
 80098f4:	231f      	movs	r3, #31
 80098f6:	18fb      	adds	r3, r7, r3
 80098f8:	2200      	movs	r2, #0
 80098fa:	701a      	strb	r2, [r3, #0]
 80098fc:	e00d      	b.n	800991a <USART_SetConfig+0x17e>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a6a      	ldr	r2, [pc, #424]	; (8009aac <USART_SetConfig+0x310>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d104      	bne.n	8009912 <USART_SetConfig+0x176>
 8009908:	231f      	movs	r3, #31
 800990a:	18fb      	adds	r3, r7, r3
 800990c:	2200      	movs	r2, #0
 800990e:	701a      	strb	r2, [r3, #0]
 8009910:	e003      	b.n	800991a <USART_SetConfig+0x17e>
 8009912:	231f      	movs	r3, #31
 8009914:	18fb      	adds	r3, r7, r3
 8009916:	2210      	movs	r2, #16
 8009918:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 800991a:	231f      	movs	r3, #31
 800991c:	18fb      	adds	r3, r7, r3
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	2b08      	cmp	r3, #8
 8009922:	d100      	bne.n	8009926 <USART_SetConfig+0x18a>
 8009924:	e139      	b.n	8009b9a <USART_SetConfig+0x3fe>
 8009926:	dd00      	ble.n	800992a <USART_SetConfig+0x18e>
 8009928:	e195      	b.n	8009c56 <USART_SetConfig+0x4ba>
 800992a:	2b04      	cmp	r3, #4
 800992c:	d100      	bne.n	8009930 <USART_SetConfig+0x194>
 800992e:	e0d3      	b.n	8009ad8 <USART_SetConfig+0x33c>
 8009930:	dd00      	ble.n	8009934 <USART_SetConfig+0x198>
 8009932:	e190      	b.n	8009c56 <USART_SetConfig+0x4ba>
 8009934:	2b00      	cmp	r3, #0
 8009936:	d003      	beq.n	8009940 <USART_SetConfig+0x1a4>
 8009938:	2b02      	cmp	r3, #2
 800993a:	d100      	bne.n	800993e <USART_SetConfig+0x1a2>
 800993c:	e061      	b.n	8009a02 <USART_SetConfig+0x266>
 800993e:	e18a      	b.n	8009c56 <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8009940:	f7fc fdb2 	bl	80064a8 <HAL_RCC_GetPCLK1Freq>
 8009944:	0003      	movs	r3, r0
 8009946:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994c:	2b00      	cmp	r3, #0
 800994e:	d044      	beq.n	80099da <USART_SetConfig+0x23e>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009954:	2b01      	cmp	r3, #1
 8009956:	d03e      	beq.n	80099d6 <USART_SetConfig+0x23a>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995c:	2b02      	cmp	r3, #2
 800995e:	d038      	beq.n	80099d2 <USART_SetConfig+0x236>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009964:	2b03      	cmp	r3, #3
 8009966:	d032      	beq.n	80099ce <USART_SetConfig+0x232>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996c:	2b04      	cmp	r3, #4
 800996e:	d02c      	beq.n	80099ca <USART_SetConfig+0x22e>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009974:	2b05      	cmp	r3, #5
 8009976:	d026      	beq.n	80099c6 <USART_SetConfig+0x22a>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997c:	2b06      	cmp	r3, #6
 800997e:	d020      	beq.n	80099c2 <USART_SetConfig+0x226>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009984:	2b07      	cmp	r3, #7
 8009986:	d01a      	beq.n	80099be <USART_SetConfig+0x222>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998c:	2b08      	cmp	r3, #8
 800998e:	d014      	beq.n	80099ba <USART_SetConfig+0x21e>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009994:	2b09      	cmp	r3, #9
 8009996:	d00e      	beq.n	80099b6 <USART_SetConfig+0x21a>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999c:	2b0a      	cmp	r3, #10
 800999e:	d008      	beq.n	80099b2 <USART_SetConfig+0x216>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a4:	2b0b      	cmp	r3, #11
 80099a6:	d102      	bne.n	80099ae <USART_SetConfig+0x212>
 80099a8:	2380      	movs	r3, #128	; 0x80
 80099aa:	005b      	lsls	r3, r3, #1
 80099ac:	e016      	b.n	80099dc <USART_SetConfig+0x240>
 80099ae:	2301      	movs	r3, #1
 80099b0:	e014      	b.n	80099dc <USART_SetConfig+0x240>
 80099b2:	2380      	movs	r3, #128	; 0x80
 80099b4:	e012      	b.n	80099dc <USART_SetConfig+0x240>
 80099b6:	2340      	movs	r3, #64	; 0x40
 80099b8:	e010      	b.n	80099dc <USART_SetConfig+0x240>
 80099ba:	2320      	movs	r3, #32
 80099bc:	e00e      	b.n	80099dc <USART_SetConfig+0x240>
 80099be:	2310      	movs	r3, #16
 80099c0:	e00c      	b.n	80099dc <USART_SetConfig+0x240>
 80099c2:	230c      	movs	r3, #12
 80099c4:	e00a      	b.n	80099dc <USART_SetConfig+0x240>
 80099c6:	230a      	movs	r3, #10
 80099c8:	e008      	b.n	80099dc <USART_SetConfig+0x240>
 80099ca:	2308      	movs	r3, #8
 80099cc:	e006      	b.n	80099dc <USART_SetConfig+0x240>
 80099ce:	2306      	movs	r3, #6
 80099d0:	e004      	b.n	80099dc <USART_SetConfig+0x240>
 80099d2:	2304      	movs	r3, #4
 80099d4:	e002      	b.n	80099dc <USART_SetConfig+0x240>
 80099d6:	2302      	movs	r3, #2
 80099d8:	e000      	b.n	80099dc <USART_SetConfig+0x240>
 80099da:	2301      	movs	r3, #1
 80099dc:	0019      	movs	r1, r3
 80099de:	6938      	ldr	r0, [r7, #16]
 80099e0:	f7f6 fb90 	bl	8000104 <__udivsi3>
 80099e4:	0003      	movs	r3, r0
 80099e6:	005a      	lsls	r2, r3, #1
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	085b      	lsrs	r3, r3, #1
 80099ee:	18d2      	adds	r2, r2, r3
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	0019      	movs	r1, r3
 80099f6:	0010      	movs	r0, r2
 80099f8:	f7f6 fb84 	bl	8000104 <__udivsi3>
 80099fc:	0003      	movs	r3, r0
 80099fe:	61bb      	str	r3, [r7, #24]
      break;
 8009a00:	e12e      	b.n	8009c60 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d052      	beq.n	8009ab0 <USART_SetConfig+0x314>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d03e      	beq.n	8009a90 <USART_SetConfig+0x2f4>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	d038      	beq.n	8009a8c <USART_SetConfig+0x2f0>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1e:	2b03      	cmp	r3, #3
 8009a20:	d032      	beq.n	8009a88 <USART_SetConfig+0x2ec>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a26:	2b04      	cmp	r3, #4
 8009a28:	d02c      	beq.n	8009a84 <USART_SetConfig+0x2e8>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2e:	2b05      	cmp	r3, #5
 8009a30:	d026      	beq.n	8009a80 <USART_SetConfig+0x2e4>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a36:	2b06      	cmp	r3, #6
 8009a38:	d020      	beq.n	8009a7c <USART_SetConfig+0x2e0>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3e:	2b07      	cmp	r3, #7
 8009a40:	d01a      	beq.n	8009a78 <USART_SetConfig+0x2dc>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a46:	2b08      	cmp	r3, #8
 8009a48:	d014      	beq.n	8009a74 <USART_SetConfig+0x2d8>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4e:	2b09      	cmp	r3, #9
 8009a50:	d00e      	beq.n	8009a70 <USART_SetConfig+0x2d4>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a56:	2b0a      	cmp	r3, #10
 8009a58:	d008      	beq.n	8009a6c <USART_SetConfig+0x2d0>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5e:	2b0b      	cmp	r3, #11
 8009a60:	d102      	bne.n	8009a68 <USART_SetConfig+0x2cc>
 8009a62:	2380      	movs	r3, #128	; 0x80
 8009a64:	005b      	lsls	r3, r3, #1
 8009a66:	e024      	b.n	8009ab2 <USART_SetConfig+0x316>
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e022      	b.n	8009ab2 <USART_SetConfig+0x316>
 8009a6c:	2380      	movs	r3, #128	; 0x80
 8009a6e:	e020      	b.n	8009ab2 <USART_SetConfig+0x316>
 8009a70:	2340      	movs	r3, #64	; 0x40
 8009a72:	e01e      	b.n	8009ab2 <USART_SetConfig+0x316>
 8009a74:	2320      	movs	r3, #32
 8009a76:	e01c      	b.n	8009ab2 <USART_SetConfig+0x316>
 8009a78:	2310      	movs	r3, #16
 8009a7a:	e01a      	b.n	8009ab2 <USART_SetConfig+0x316>
 8009a7c:	230c      	movs	r3, #12
 8009a7e:	e018      	b.n	8009ab2 <USART_SetConfig+0x316>
 8009a80:	230a      	movs	r3, #10
 8009a82:	e016      	b.n	8009ab2 <USART_SetConfig+0x316>
 8009a84:	2308      	movs	r3, #8
 8009a86:	e014      	b.n	8009ab2 <USART_SetConfig+0x316>
 8009a88:	2306      	movs	r3, #6
 8009a8a:	e012      	b.n	8009ab2 <USART_SetConfig+0x316>
 8009a8c:	2304      	movs	r3, #4
 8009a8e:	e010      	b.n	8009ab2 <USART_SetConfig+0x316>
 8009a90:	2302      	movs	r3, #2
 8009a92:	e00e      	b.n	8009ab2 <USART_SetConfig+0x316>
 8009a94:	cfff69f3 	.word	0xcfff69f3
 8009a98:	ffffc0f6 	.word	0xffffc0f6
 8009a9c:	40013800 	.word	0x40013800
 8009aa0:	40021000 	.word	0x40021000
 8009aa4:	40004400 	.word	0x40004400
 8009aa8:	40004800 	.word	0x40004800
 8009aac:	40004c00 	.word	0x40004c00
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	0019      	movs	r1, r3
 8009ab4:	4886      	ldr	r0, [pc, #536]	; (8009cd0 <USART_SetConfig+0x534>)
 8009ab6:	f7f6 fb25 	bl	8000104 <__udivsi3>
 8009aba:	0003      	movs	r3, r0
 8009abc:	005a      	lsls	r2, r3, #1
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	085b      	lsrs	r3, r3, #1
 8009ac4:	18d2      	adds	r2, r2, r3
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	0019      	movs	r1, r3
 8009acc:	0010      	movs	r0, r2
 8009ace:	f7f6 fb19 	bl	8000104 <__udivsi3>
 8009ad2:	0003      	movs	r3, r0
 8009ad4:	61bb      	str	r3, [r7, #24]
      break;
 8009ad6:	e0c3      	b.n	8009c60 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8009ad8:	f7fc fc5a 	bl	8006390 <HAL_RCC_GetSysClockFreq>
 8009adc:	0003      	movs	r3, r0
 8009ade:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d044      	beq.n	8009b72 <USART_SetConfig+0x3d6>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d03e      	beq.n	8009b6e <USART_SetConfig+0x3d2>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af4:	2b02      	cmp	r3, #2
 8009af6:	d038      	beq.n	8009b6a <USART_SetConfig+0x3ce>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afc:	2b03      	cmp	r3, #3
 8009afe:	d032      	beq.n	8009b66 <USART_SetConfig+0x3ca>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b04:	2b04      	cmp	r3, #4
 8009b06:	d02c      	beq.n	8009b62 <USART_SetConfig+0x3c6>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0c:	2b05      	cmp	r3, #5
 8009b0e:	d026      	beq.n	8009b5e <USART_SetConfig+0x3c2>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b14:	2b06      	cmp	r3, #6
 8009b16:	d020      	beq.n	8009b5a <USART_SetConfig+0x3be>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1c:	2b07      	cmp	r3, #7
 8009b1e:	d01a      	beq.n	8009b56 <USART_SetConfig+0x3ba>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b24:	2b08      	cmp	r3, #8
 8009b26:	d014      	beq.n	8009b52 <USART_SetConfig+0x3b6>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2c:	2b09      	cmp	r3, #9
 8009b2e:	d00e      	beq.n	8009b4e <USART_SetConfig+0x3b2>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b34:	2b0a      	cmp	r3, #10
 8009b36:	d008      	beq.n	8009b4a <USART_SetConfig+0x3ae>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3c:	2b0b      	cmp	r3, #11
 8009b3e:	d102      	bne.n	8009b46 <USART_SetConfig+0x3aa>
 8009b40:	2380      	movs	r3, #128	; 0x80
 8009b42:	005b      	lsls	r3, r3, #1
 8009b44:	e016      	b.n	8009b74 <USART_SetConfig+0x3d8>
 8009b46:	2301      	movs	r3, #1
 8009b48:	e014      	b.n	8009b74 <USART_SetConfig+0x3d8>
 8009b4a:	2380      	movs	r3, #128	; 0x80
 8009b4c:	e012      	b.n	8009b74 <USART_SetConfig+0x3d8>
 8009b4e:	2340      	movs	r3, #64	; 0x40
 8009b50:	e010      	b.n	8009b74 <USART_SetConfig+0x3d8>
 8009b52:	2320      	movs	r3, #32
 8009b54:	e00e      	b.n	8009b74 <USART_SetConfig+0x3d8>
 8009b56:	2310      	movs	r3, #16
 8009b58:	e00c      	b.n	8009b74 <USART_SetConfig+0x3d8>
 8009b5a:	230c      	movs	r3, #12
 8009b5c:	e00a      	b.n	8009b74 <USART_SetConfig+0x3d8>
 8009b5e:	230a      	movs	r3, #10
 8009b60:	e008      	b.n	8009b74 <USART_SetConfig+0x3d8>
 8009b62:	2308      	movs	r3, #8
 8009b64:	e006      	b.n	8009b74 <USART_SetConfig+0x3d8>
 8009b66:	2306      	movs	r3, #6
 8009b68:	e004      	b.n	8009b74 <USART_SetConfig+0x3d8>
 8009b6a:	2304      	movs	r3, #4
 8009b6c:	e002      	b.n	8009b74 <USART_SetConfig+0x3d8>
 8009b6e:	2302      	movs	r3, #2
 8009b70:	e000      	b.n	8009b74 <USART_SetConfig+0x3d8>
 8009b72:	2301      	movs	r3, #1
 8009b74:	0019      	movs	r1, r3
 8009b76:	6938      	ldr	r0, [r7, #16]
 8009b78:	f7f6 fac4 	bl	8000104 <__udivsi3>
 8009b7c:	0003      	movs	r3, r0
 8009b7e:	005a      	lsls	r2, r3, #1
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	085b      	lsrs	r3, r3, #1
 8009b86:	18d2      	adds	r2, r2, r3
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	0019      	movs	r1, r3
 8009b8e:	0010      	movs	r0, r2
 8009b90:	f7f6 fab8 	bl	8000104 <__udivsi3>
 8009b94:	0003      	movs	r3, r0
 8009b96:	61bb      	str	r3, [r7, #24]
      break;
 8009b98:	e062      	b.n	8009c60 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d044      	beq.n	8009c2c <USART_SetConfig+0x490>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d03e      	beq.n	8009c28 <USART_SetConfig+0x48c>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bae:	2b02      	cmp	r3, #2
 8009bb0:	d038      	beq.n	8009c24 <USART_SetConfig+0x488>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb6:	2b03      	cmp	r3, #3
 8009bb8:	d032      	beq.n	8009c20 <USART_SetConfig+0x484>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbe:	2b04      	cmp	r3, #4
 8009bc0:	d02c      	beq.n	8009c1c <USART_SetConfig+0x480>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc6:	2b05      	cmp	r3, #5
 8009bc8:	d026      	beq.n	8009c18 <USART_SetConfig+0x47c>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bce:	2b06      	cmp	r3, #6
 8009bd0:	d020      	beq.n	8009c14 <USART_SetConfig+0x478>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd6:	2b07      	cmp	r3, #7
 8009bd8:	d01a      	beq.n	8009c10 <USART_SetConfig+0x474>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bde:	2b08      	cmp	r3, #8
 8009be0:	d014      	beq.n	8009c0c <USART_SetConfig+0x470>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be6:	2b09      	cmp	r3, #9
 8009be8:	d00e      	beq.n	8009c08 <USART_SetConfig+0x46c>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bee:	2b0a      	cmp	r3, #10
 8009bf0:	d008      	beq.n	8009c04 <USART_SetConfig+0x468>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf6:	2b0b      	cmp	r3, #11
 8009bf8:	d102      	bne.n	8009c00 <USART_SetConfig+0x464>
 8009bfa:	2380      	movs	r3, #128	; 0x80
 8009bfc:	005b      	lsls	r3, r3, #1
 8009bfe:	e016      	b.n	8009c2e <USART_SetConfig+0x492>
 8009c00:	2301      	movs	r3, #1
 8009c02:	e014      	b.n	8009c2e <USART_SetConfig+0x492>
 8009c04:	2380      	movs	r3, #128	; 0x80
 8009c06:	e012      	b.n	8009c2e <USART_SetConfig+0x492>
 8009c08:	2340      	movs	r3, #64	; 0x40
 8009c0a:	e010      	b.n	8009c2e <USART_SetConfig+0x492>
 8009c0c:	2320      	movs	r3, #32
 8009c0e:	e00e      	b.n	8009c2e <USART_SetConfig+0x492>
 8009c10:	2310      	movs	r3, #16
 8009c12:	e00c      	b.n	8009c2e <USART_SetConfig+0x492>
 8009c14:	230c      	movs	r3, #12
 8009c16:	e00a      	b.n	8009c2e <USART_SetConfig+0x492>
 8009c18:	230a      	movs	r3, #10
 8009c1a:	e008      	b.n	8009c2e <USART_SetConfig+0x492>
 8009c1c:	2308      	movs	r3, #8
 8009c1e:	e006      	b.n	8009c2e <USART_SetConfig+0x492>
 8009c20:	2306      	movs	r3, #6
 8009c22:	e004      	b.n	8009c2e <USART_SetConfig+0x492>
 8009c24:	2304      	movs	r3, #4
 8009c26:	e002      	b.n	8009c2e <USART_SetConfig+0x492>
 8009c28:	2302      	movs	r3, #2
 8009c2a:	e000      	b.n	8009c2e <USART_SetConfig+0x492>
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	0019      	movs	r1, r3
 8009c30:	2380      	movs	r3, #128	; 0x80
 8009c32:	0218      	lsls	r0, r3, #8
 8009c34:	f7f6 fa66 	bl	8000104 <__udivsi3>
 8009c38:	0003      	movs	r3, r0
 8009c3a:	005a      	lsls	r2, r3, #1
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	085b      	lsrs	r3, r3, #1
 8009c42:	18d2      	adds	r2, r2, r3
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	0019      	movs	r1, r3
 8009c4a:	0010      	movs	r0, r2
 8009c4c:	f7f6 fa5a 	bl	8000104 <__udivsi3>
 8009c50:	0003      	movs	r3, r0
 8009c52:	61bb      	str	r3, [r7, #24]
      break;
 8009c54:	e004      	b.n	8009c60 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 8009c56:	231e      	movs	r3, #30
 8009c58:	18fb      	adds	r3, r7, r3
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	701a      	strb	r2, [r3, #0]
      break;
 8009c5e:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8009c60:	69bb      	ldr	r3, [r7, #24]
 8009c62:	2b0f      	cmp	r3, #15
 8009c64:	d91c      	bls.n	8009ca0 <USART_SetConfig+0x504>
 8009c66:	69ba      	ldr	r2, [r7, #24]
 8009c68:	2380      	movs	r3, #128	; 0x80
 8009c6a:	025b      	lsls	r3, r3, #9
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d217      	bcs.n	8009ca0 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	b29a      	uxth	r2, r3
 8009c74:	200e      	movs	r0, #14
 8009c76:	183b      	adds	r3, r7, r0
 8009c78:	210f      	movs	r1, #15
 8009c7a:	438a      	bics	r2, r1
 8009c7c:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c7e:	69bb      	ldr	r3, [r7, #24]
 8009c80:	085b      	lsrs	r3, r3, #1
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	2207      	movs	r2, #7
 8009c86:	4013      	ands	r3, r2
 8009c88:	b299      	uxth	r1, r3
 8009c8a:	183b      	adds	r3, r7, r0
 8009c8c:	183a      	adds	r2, r7, r0
 8009c8e:	8812      	ldrh	r2, [r2, #0]
 8009c90:	430a      	orrs	r2, r1
 8009c92:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	183a      	adds	r2, r7, r0
 8009c9a:	8812      	ldrh	r2, [r2, #0]
 8009c9c:	60da      	str	r2, [r3, #12]
 8009c9e:	e003      	b.n	8009ca8 <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 8009ca0:	231e      	movs	r3, #30
 8009ca2:	18fb      	adds	r3, r7, r3
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8009cc0:	231e      	movs	r3, #30
 8009cc2:	18fb      	adds	r3, r7, r3
 8009cc4:	781b      	ldrb	r3, [r3, #0]
}
 8009cc6:	0018      	movs	r0, r3
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	b008      	add	sp, #32
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	46c0      	nop			; (mov r8, r8)
 8009cd0:	00f42400 	.word	0x00f42400

08009cd4 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af02      	add	r7, sp, #8
 8009cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ce2:	f7f9 fa2f 	bl	8003144 <HAL_GetTick>
 8009ce6:	0003      	movs	r3, r0
 8009ce8:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2208      	movs	r2, #8
 8009cf2:	4013      	ands	r3, r2
 8009cf4:	2b08      	cmp	r3, #8
 8009cf6:	d10e      	bne.n	8009d16 <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	2380      	movs	r3, #128	; 0x80
 8009cfc:	0399      	lsls	r1, r3, #14
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	23fa      	movs	r3, #250	; 0xfa
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	9300      	str	r3, [sp, #0]
 8009d06:	0013      	movs	r3, r2
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f7ff fd12 	bl	8009732 <USART_WaitOnFlagUntilTimeout>
 8009d0e:	1e03      	subs	r3, r0, #0
 8009d10:	d001      	beq.n	8009d16 <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d12:	2303      	movs	r3, #3
 8009d14:	e01e      	b.n	8009d54 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2204      	movs	r2, #4
 8009d1e:	4013      	ands	r3, r2
 8009d20:	2b04      	cmp	r3, #4
 8009d22:	d10e      	bne.n	8009d42 <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	2380      	movs	r3, #128	; 0x80
 8009d28:	03d9      	lsls	r1, r3, #15
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	23fa      	movs	r3, #250	; 0xfa
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	9300      	str	r3, [sp, #0]
 8009d32:	0013      	movs	r3, r2
 8009d34:	2200      	movs	r2, #0
 8009d36:	f7ff fcfc 	bl	8009732 <USART_WaitOnFlagUntilTimeout>
 8009d3a:	1e03      	subs	r3, r0, #0
 8009d3c:	d001      	beq.n	8009d42 <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d3e:	2303      	movs	r3, #3
 8009d40:	e008      	b.n	8009d54 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2259      	movs	r2, #89	; 0x59
 8009d46:	2101      	movs	r1, #1
 8009d48:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2258      	movs	r2, #88	; 0x58
 8009d4e:	2100      	movs	r1, #0
 8009d50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	0018      	movs	r0, r3
 8009d56:	46bd      	mov	sp, r7
 8009d58:	b004      	add	sp, #16
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2140      	movs	r1, #64	; 0x40
 8009d70:	438a      	bics	r2, r1
 8009d72:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	689a      	ldr	r2, [r3, #8]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2101      	movs	r1, #1
 8009d80:	438a      	bics	r2, r1
 8009d82:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2259      	movs	r2, #89	; 0x59
 8009d8e:	5c9b      	ldrb	r3, [r3, r2]
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	2b12      	cmp	r3, #18
 8009d94:	d114      	bne.n	8009dc0 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2208      	movs	r2, #8
 8009d9c:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	699a      	ldr	r2, [r3, #24]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2108      	movs	r1, #8
 8009daa:	430a      	orrs	r2, r1
 8009dac:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2259      	movs	r2, #89	; 0x59
 8009db2:	2101      	movs	r1, #1
 8009db4:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	0018      	movs	r0, r3
 8009dba:	f7f7 f9d1 	bl	8001160 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009dbe:	e00c      	b.n	8009dda <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d107      	bne.n	8009dda <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2259      	movs	r2, #89	; 0x59
 8009dce:	2101      	movs	r1, #1
 8009dd0:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	0018      	movs	r0, r3
 8009dd6:	f7ff fc67 	bl	80096a8 <HAL_USART_TxRxCpltCallback>
}
 8009dda:	46c0      	nop			; (mov r8, r8)
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	b002      	add	sp, #8
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b082      	sub	sp, #8
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009dea:	46c0      	nop			; (mov r8, r8)
 8009dec:	46bd      	mov	sp, r7
 8009dee:	b002      	add	sp, #8
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b082      	sub	sp, #8
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009dfa:	46c0      	nop			; (mov r8, r8)
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	b002      	add	sp, #8
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <LL_GPIO_SetPinMode>:
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b084      	sub	sp, #16
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	60f8      	str	r0, [r7, #12]
 8009e0a:	60b9      	str	r1, [r7, #8]
 8009e0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	6819      	ldr	r1, [r3, #0]
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	435b      	muls	r3, r3
 8009e16:	001a      	movs	r2, r3
 8009e18:	0013      	movs	r3, r2
 8009e1a:	005b      	lsls	r3, r3, #1
 8009e1c:	189b      	adds	r3, r3, r2
 8009e1e:	43db      	mvns	r3, r3
 8009e20:	400b      	ands	r3, r1
 8009e22:	001a      	movs	r2, r3
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	435b      	muls	r3, r3
 8009e28:	6879      	ldr	r1, [r7, #4]
 8009e2a:	434b      	muls	r3, r1
 8009e2c:	431a      	orrs	r2, r3
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	601a      	str	r2, [r3, #0]
}
 8009e32:	46c0      	nop			; (mov r8, r8)
 8009e34:	46bd      	mov	sp, r7
 8009e36:	b004      	add	sp, #16
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <LL_GPIO_SetPinOutputType>:
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b084      	sub	sp, #16
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	60f8      	str	r0, [r7, #12]
 8009e42:	60b9      	str	r1, [r7, #8]
 8009e44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	68ba      	ldr	r2, [r7, #8]
 8009e4c:	43d2      	mvns	r2, r2
 8009e4e:	401a      	ands	r2, r3
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	6879      	ldr	r1, [r7, #4]
 8009e54:	434b      	muls	r3, r1
 8009e56:	431a      	orrs	r2, r3
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	605a      	str	r2, [r3, #4]
}
 8009e5c:	46c0      	nop			; (mov r8, r8)
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	b004      	add	sp, #16
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <LL_GPIO_SetPinSpeed>:
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6899      	ldr	r1, [r3, #8]
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	435b      	muls	r3, r3
 8009e78:	001a      	movs	r2, r3
 8009e7a:	0013      	movs	r3, r2
 8009e7c:	005b      	lsls	r3, r3, #1
 8009e7e:	189b      	adds	r3, r3, r2
 8009e80:	43db      	mvns	r3, r3
 8009e82:	400b      	ands	r3, r1
 8009e84:	001a      	movs	r2, r3
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	435b      	muls	r3, r3
 8009e8a:	6879      	ldr	r1, [r7, #4]
 8009e8c:	434b      	muls	r3, r1
 8009e8e:	431a      	orrs	r2, r3
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	609a      	str	r2, [r3, #8]
}
 8009e94:	46c0      	nop			; (mov r8, r8)
 8009e96:	46bd      	mov	sp, r7
 8009e98:	b004      	add	sp, #16
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <LL_GPIO_SetPinPull>:
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	68d9      	ldr	r1, [r3, #12]
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	435b      	muls	r3, r3
 8009eb0:	001a      	movs	r2, r3
 8009eb2:	0013      	movs	r3, r2
 8009eb4:	005b      	lsls	r3, r3, #1
 8009eb6:	189b      	adds	r3, r3, r2
 8009eb8:	43db      	mvns	r3, r3
 8009eba:	400b      	ands	r3, r1
 8009ebc:	001a      	movs	r2, r3
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	435b      	muls	r3, r3
 8009ec2:	6879      	ldr	r1, [r7, #4]
 8009ec4:	434b      	muls	r3, r1
 8009ec6:	431a      	orrs	r2, r3
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	60da      	str	r2, [r3, #12]
}
 8009ecc:	46c0      	nop			; (mov r8, r8)
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	b004      	add	sp, #16
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <LL_GPIO_SetAFPin_0_7>:
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6a19      	ldr	r1, [r3, #32]
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	435b      	muls	r3, r3
 8009ee8:	68ba      	ldr	r2, [r7, #8]
 8009eea:	4353      	muls	r3, r2
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	435a      	muls	r2, r3
 8009ef0:	0013      	movs	r3, r2
 8009ef2:	011b      	lsls	r3, r3, #4
 8009ef4:	1a9b      	subs	r3, r3, r2
 8009ef6:	43db      	mvns	r3, r3
 8009ef8:	400b      	ands	r3, r1
 8009efa:	001a      	movs	r2, r3
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	435b      	muls	r3, r3
 8009f00:	68b9      	ldr	r1, [r7, #8]
 8009f02:	434b      	muls	r3, r1
 8009f04:	68b9      	ldr	r1, [r7, #8]
 8009f06:	434b      	muls	r3, r1
 8009f08:	6879      	ldr	r1, [r7, #4]
 8009f0a:	434b      	muls	r3, r1
 8009f0c:	431a      	orrs	r2, r3
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	621a      	str	r2, [r3, #32]
}
 8009f12:	46c0      	nop			; (mov r8, r8)
 8009f14:	46bd      	mov	sp, r7
 8009f16:	b004      	add	sp, #16
 8009f18:	bd80      	pop	{r7, pc}

08009f1a <LL_GPIO_SetAFPin_8_15>:
{
 8009f1a:	b580      	push	{r7, lr}
 8009f1c:	b084      	sub	sp, #16
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	60f8      	str	r0, [r7, #12]
 8009f22:	60b9      	str	r1, [r7, #8]
 8009f24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	0a1b      	lsrs	r3, r3, #8
 8009f2e:	68ba      	ldr	r2, [r7, #8]
 8009f30:	0a12      	lsrs	r2, r2, #8
 8009f32:	4353      	muls	r3, r2
 8009f34:	68ba      	ldr	r2, [r7, #8]
 8009f36:	0a12      	lsrs	r2, r2, #8
 8009f38:	4353      	muls	r3, r2
 8009f3a:	68ba      	ldr	r2, [r7, #8]
 8009f3c:	0a12      	lsrs	r2, r2, #8
 8009f3e:	435a      	muls	r2, r3
 8009f40:	0013      	movs	r3, r2
 8009f42:	011b      	lsls	r3, r3, #4
 8009f44:	1a9b      	subs	r3, r3, r2
 8009f46:	43db      	mvns	r3, r3
 8009f48:	400b      	ands	r3, r1
 8009f4a:	001a      	movs	r2, r3
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	0a1b      	lsrs	r3, r3, #8
 8009f50:	68b9      	ldr	r1, [r7, #8]
 8009f52:	0a09      	lsrs	r1, r1, #8
 8009f54:	434b      	muls	r3, r1
 8009f56:	68b9      	ldr	r1, [r7, #8]
 8009f58:	0a09      	lsrs	r1, r1, #8
 8009f5a:	434b      	muls	r3, r1
 8009f5c:	68b9      	ldr	r1, [r7, #8]
 8009f5e:	0a09      	lsrs	r1, r1, #8
 8009f60:	434b      	muls	r3, r1
 8009f62:	6879      	ldr	r1, [r7, #4]
 8009f64:	434b      	muls	r3, r1
 8009f66:	431a      	orrs	r2, r3
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009f6c:	46c0      	nop			; (mov r8, r8)
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	b004      	add	sp, #16
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8009f82:	e047      	b.n	800a014 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2101      	movs	r1, #1
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	4091      	lsls	r1, r2
 8009f8e:	000a      	movs	r2, r1
 8009f90:	4013      	ands	r3, r2
 8009f92:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d039      	beq.n	800a00e <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d003      	beq.n	8009faa <LL_GPIO_Init+0x36>
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	2b02      	cmp	r3, #2
 8009fa8:	d10d      	bne.n	8009fc6 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	689a      	ldr	r2, [r3, #8]
 8009fae:	68b9      	ldr	r1, [r7, #8]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	0018      	movs	r0, r3
 8009fb4:	f7ff ff56 	bl	8009e64 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	68da      	ldr	r2, [r3, #12]
 8009fbc:	68b9      	ldr	r1, [r7, #8]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	0018      	movs	r0, r3
 8009fc2:	f7ff ff3a 	bl	8009e3a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	691a      	ldr	r2, [r3, #16]
 8009fca:	68b9      	ldr	r1, [r7, #8]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	0018      	movs	r0, r3
 8009fd0:	f7ff ff64 	bl	8009e9c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	2b02      	cmp	r3, #2
 8009fda:	d111      	bne.n	800a000 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	2bff      	cmp	r3, #255	; 0xff
 8009fe0:	d807      	bhi.n	8009ff2 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	695a      	ldr	r2, [r3, #20]
 8009fe6:	68b9      	ldr	r1, [r7, #8]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	0018      	movs	r0, r3
 8009fec:	f7ff ff72 	bl	8009ed4 <LL_GPIO_SetAFPin_0_7>
 8009ff0:	e006      	b.n	800a000 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	695a      	ldr	r2, [r3, #20]
 8009ff6:	68b9      	ldr	r1, [r7, #8]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	0018      	movs	r0, r3
 8009ffc:	f7ff ff8d 	bl	8009f1a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	685a      	ldr	r2, [r3, #4]
 800a004:	68b9      	ldr	r1, [r7, #8]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	0018      	movs	r0, r3
 800a00a:	f7ff fefa 	bl	8009e02 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	3301      	adds	r3, #1
 800a012:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	40da      	lsrs	r2, r3
 800a01c:	1e13      	subs	r3, r2, #0
 800a01e:	d1b1      	bne.n	8009f84 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800a020:	2300      	movs	r3, #0
}
 800a022:	0018      	movs	r0, r3
 800a024:	46bd      	mov	sp, r7
 800a026:	b004      	add	sp, #16
 800a028:	bd80      	pop	{r7, pc}
	...

0800a02c <LL_RCC_HSI_IsReady>:
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a030:	4b07      	ldr	r3, [pc, #28]	; (800a050 <LL_RCC_HSI_IsReady+0x24>)
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	2380      	movs	r3, #128	; 0x80
 800a036:	00db      	lsls	r3, r3, #3
 800a038:	401a      	ands	r2, r3
 800a03a:	2380      	movs	r3, #128	; 0x80
 800a03c:	00db      	lsls	r3, r3, #3
 800a03e:	429a      	cmp	r2, r3
 800a040:	d101      	bne.n	800a046 <LL_RCC_HSI_IsReady+0x1a>
 800a042:	2301      	movs	r3, #1
 800a044:	e000      	b.n	800a048 <LL_RCC_HSI_IsReady+0x1c>
 800a046:	2300      	movs	r3, #0
}
 800a048:	0018      	movs	r0, r3
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	46c0      	nop			; (mov r8, r8)
 800a050:	40021000 	.word	0x40021000

0800a054 <LL_RCC_LSE_IsReady>:
{
 800a054:	b580      	push	{r7, lr}
 800a056:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a058:	4b05      	ldr	r3, [pc, #20]	; (800a070 <LL_RCC_LSE_IsReady+0x1c>)
 800a05a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a05c:	2202      	movs	r2, #2
 800a05e:	4013      	ands	r3, r2
 800a060:	2b02      	cmp	r3, #2
 800a062:	d101      	bne.n	800a068 <LL_RCC_LSE_IsReady+0x14>
 800a064:	2301      	movs	r3, #1
 800a066:	e000      	b.n	800a06a <LL_RCC_LSE_IsReady+0x16>
 800a068:	2300      	movs	r3, #0
}
 800a06a:	0018      	movs	r0, r3
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	40021000 	.word	0x40021000

0800a074 <LL_RCC_GetSysClkSource>:
{
 800a074:	b580      	push	{r7, lr}
 800a076:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a078:	4b03      	ldr	r3, [pc, #12]	; (800a088 <LL_RCC_GetSysClkSource+0x14>)
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	2238      	movs	r2, #56	; 0x38
 800a07e:	4013      	ands	r3, r2
}
 800a080:	0018      	movs	r0, r3
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	46c0      	nop			; (mov r8, r8)
 800a088:	40021000 	.word	0x40021000

0800a08c <LL_RCC_GetAHBPrescaler>:
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800a090:	4b03      	ldr	r3, [pc, #12]	; (800a0a0 <LL_RCC_GetAHBPrescaler+0x14>)
 800a092:	689a      	ldr	r2, [r3, #8]
 800a094:	23f0      	movs	r3, #240	; 0xf0
 800a096:	011b      	lsls	r3, r3, #4
 800a098:	4013      	ands	r3, r2
}
 800a09a:	0018      	movs	r0, r3
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	40021000 	.word	0x40021000

0800a0a4 <LL_RCC_GetAPB1Prescaler>:
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800a0a8:	4b03      	ldr	r3, [pc, #12]	; (800a0b8 <LL_RCC_GetAPB1Prescaler+0x14>)
 800a0aa:	689a      	ldr	r2, [r3, #8]
 800a0ac:	23e0      	movs	r3, #224	; 0xe0
 800a0ae:	01db      	lsls	r3, r3, #7
 800a0b0:	4013      	ands	r3, r2
}
 800a0b2:	0018      	movs	r0, r3
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	40021000 	.word	0x40021000

0800a0bc <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800a0c4:	4b05      	ldr	r3, [pc, #20]	; (800a0dc <LL_RCC_GetUSARTClockSource+0x20>)
 800a0c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	401a      	ands	r2, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	041b      	lsls	r3, r3, #16
 800a0d0:	4313      	orrs	r3, r2
}
 800a0d2:	0018      	movs	r0, r3
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	b002      	add	sp, #8
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	46c0      	nop			; (mov r8, r8)
 800a0dc:	40021000 	.word	0x40021000

0800a0e0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800a0e4:	4b03      	ldr	r3, [pc, #12]	; (800a0f4 <LL_RCC_PLL_GetN+0x14>)
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	0a1b      	lsrs	r3, r3, #8
 800a0ea:	227f      	movs	r2, #127	; 0x7f
 800a0ec:	4013      	ands	r3, r2
}
 800a0ee:	0018      	movs	r0, r3
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	40021000 	.word	0x40021000

0800a0f8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800a0fc:	4b03      	ldr	r3, [pc, #12]	; (800a10c <LL_RCC_PLL_GetR+0x14>)
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	0f5b      	lsrs	r3, r3, #29
 800a102:	075b      	lsls	r3, r3, #29
}
 800a104:	0018      	movs	r0, r3
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	46c0      	nop			; (mov r8, r8)
 800a10c:	40021000 	.word	0x40021000

0800a110 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800a114:	4b03      	ldr	r3, [pc, #12]	; (800a124 <LL_RCC_PLL_GetMainSource+0x14>)
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	2203      	movs	r2, #3
 800a11a:	4013      	ands	r3, r2
}
 800a11c:	0018      	movs	r0, r3
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	46c0      	nop			; (mov r8, r8)
 800a124:	40021000 	.word	0x40021000

0800a128 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800a12c:	4b03      	ldr	r3, [pc, #12]	; (800a13c <LL_RCC_PLL_GetDivider+0x14>)
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	2270      	movs	r2, #112	; 0x70
 800a132:	4013      	ands	r3, r2
}
 800a134:	0018      	movs	r0, r3
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	46c0      	nop			; (mov r8, r8)
 800a13c:	40021000 	.word	0x40021000

0800a140 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b082      	sub	sp, #8
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800a148:	f000 f8a8 	bl	800a29c <RCC_GetSystemClockFreq>
 800a14c:	0002      	movs	r2, r0
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	0018      	movs	r0, r3
 800a158:	f000 f8ce 	bl	800a2f8 <RCC_GetHCLKClockFreq>
 800a15c:	0002      	movs	r2, r0
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	0018      	movs	r0, r3
 800a168:	f000 f8de 	bl	800a328 <RCC_GetPCLK1ClockFreq>
 800a16c:	0002      	movs	r2, r0
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	609a      	str	r2, [r3, #8]
}
 800a172:	46c0      	nop			; (mov r8, r8)
 800a174:	46bd      	mov	sp, r7
 800a176:	b002      	add	sp, #8
 800a178:	bd80      	pop	{r7, pc}
	...

0800a17c <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800a184:	2300      	movs	r3, #0
 800a186:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2b03      	cmp	r3, #3
 800a18c:	d134      	bne.n	800a1f8 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	0018      	movs	r0, r3
 800a192:	f7ff ff93 	bl	800a0bc <LL_RCC_GetUSARTClockSource>
 800a196:	0003      	movs	r3, r0
 800a198:	4a39      	ldr	r2, [pc, #228]	; (800a280 <LL_RCC_GetUSARTClockFreq+0x104>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d016      	beq.n	800a1cc <LL_RCC_GetUSARTClockFreq+0x50>
 800a19e:	4a38      	ldr	r2, [pc, #224]	; (800a280 <LL_RCC_GetUSARTClockFreq+0x104>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d81c      	bhi.n	800a1de <LL_RCC_GetUSARTClockFreq+0x62>
 800a1a4:	4a37      	ldr	r2, [pc, #220]	; (800a284 <LL_RCC_GetUSARTClockFreq+0x108>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d003      	beq.n	800a1b2 <LL_RCC_GetUSARTClockFreq+0x36>
 800a1aa:	4a37      	ldr	r2, [pc, #220]	; (800a288 <LL_RCC_GetUSARTClockFreq+0x10c>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d005      	beq.n	800a1bc <LL_RCC_GetUSARTClockFreq+0x40>
 800a1b0:	e015      	b.n	800a1de <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800a1b2:	f000 f873 	bl	800a29c <RCC_GetSystemClockFreq>
 800a1b6:	0003      	movs	r3, r0
 800a1b8:	60fb      	str	r3, [r7, #12]
        break;
 800a1ba:	e05c      	b.n	800a276 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800a1bc:	f7ff ff36 	bl	800a02c <LL_RCC_HSI_IsReady>
 800a1c0:	0003      	movs	r3, r0
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d150      	bne.n	800a268 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 800a1c6:	4b31      	ldr	r3, [pc, #196]	; (800a28c <LL_RCC_GetUSARTClockFreq+0x110>)
 800a1c8:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a1ca:	e04d      	b.n	800a268 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800a1cc:	f7ff ff42 	bl	800a054 <LL_RCC_LSE_IsReady>
 800a1d0:	0003      	movs	r3, r0
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d14a      	bne.n	800a26c <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 800a1d6:	2380      	movs	r3, #128	; 0x80
 800a1d8:	021b      	lsls	r3, r3, #8
 800a1da:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a1dc:	e046      	b.n	800a26c <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a1de:	f000 f85d 	bl	800a29c <RCC_GetSystemClockFreq>
 800a1e2:	0003      	movs	r3, r0
 800a1e4:	0018      	movs	r0, r3
 800a1e6:	f000 f887 	bl	800a2f8 <RCC_GetHCLKClockFreq>
 800a1ea:	0003      	movs	r3, r0
 800a1ec:	0018      	movs	r0, r3
 800a1ee:	f000 f89b 	bl	800a328 <RCC_GetPCLK1ClockFreq>
 800a1f2:	0003      	movs	r3, r0
 800a1f4:	60fb      	str	r3, [r7, #12]
        break;
 800a1f6:	e03e      	b.n	800a276 <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2b0c      	cmp	r3, #12
 800a1fc:	d13b      	bne.n	800a276 <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	0018      	movs	r0, r3
 800a202:	f7ff ff5b 	bl	800a0bc <LL_RCC_GetUSARTClockSource>
 800a206:	0003      	movs	r3, r0
 800a208:	4a21      	ldr	r2, [pc, #132]	; (800a290 <LL_RCC_GetUSARTClockFreq+0x114>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d016      	beq.n	800a23c <LL_RCC_GetUSARTClockFreq+0xc0>
 800a20e:	4a20      	ldr	r2, [pc, #128]	; (800a290 <LL_RCC_GetUSARTClockFreq+0x114>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d81c      	bhi.n	800a24e <LL_RCC_GetUSARTClockFreq+0xd2>
 800a214:	4a1f      	ldr	r2, [pc, #124]	; (800a294 <LL_RCC_GetUSARTClockFreq+0x118>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d003      	beq.n	800a222 <LL_RCC_GetUSARTClockFreq+0xa6>
 800a21a:	4a1f      	ldr	r2, [pc, #124]	; (800a298 <LL_RCC_GetUSARTClockFreq+0x11c>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d005      	beq.n	800a22c <LL_RCC_GetUSARTClockFreq+0xb0>
 800a220:	e015      	b.n	800a24e <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800a222:	f000 f83b 	bl	800a29c <RCC_GetSystemClockFreq>
 800a226:	0003      	movs	r3, r0
 800a228:	60fb      	str	r3, [r7, #12]
        break;
 800a22a:	e024      	b.n	800a276 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800a22c:	f7ff fefe 	bl	800a02c <LL_RCC_HSI_IsReady>
 800a230:	0003      	movs	r3, r0
 800a232:	2b01      	cmp	r3, #1
 800a234:	d11c      	bne.n	800a270 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800a236:	4b15      	ldr	r3, [pc, #84]	; (800a28c <LL_RCC_GetUSARTClockFreq+0x110>)
 800a238:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a23a:	e019      	b.n	800a270 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800a23c:	f7ff ff0a 	bl	800a054 <LL_RCC_LSE_IsReady>
 800a240:	0003      	movs	r3, r0
 800a242:	2b01      	cmp	r3, #1
 800a244:	d116      	bne.n	800a274 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800a246:	2380      	movs	r3, #128	; 0x80
 800a248:	021b      	lsls	r3, r3, #8
 800a24a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a24c:	e012      	b.n	800a274 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a24e:	f000 f825 	bl	800a29c <RCC_GetSystemClockFreq>
 800a252:	0003      	movs	r3, r0
 800a254:	0018      	movs	r0, r3
 800a256:	f000 f84f 	bl	800a2f8 <RCC_GetHCLKClockFreq>
 800a25a:	0003      	movs	r3, r0
 800a25c:	0018      	movs	r0, r3
 800a25e:	f000 f863 	bl	800a328 <RCC_GetPCLK1ClockFreq>
 800a262:	0003      	movs	r3, r0
 800a264:	60fb      	str	r3, [r7, #12]
        break;
 800a266:	e006      	b.n	800a276 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a268:	46c0      	nop			; (mov r8, r8)
 800a26a:	e004      	b.n	800a276 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a26c:	46c0      	nop			; (mov r8, r8)
 800a26e:	e002      	b.n	800a276 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a270:	46c0      	nop			; (mov r8, r8)
 800a272:	e000      	b.n	800a276 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a274:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800a276:	68fb      	ldr	r3, [r7, #12]
}
 800a278:	0018      	movs	r0, r3
 800a27a:	46bd      	mov	sp, r7
 800a27c:	b004      	add	sp, #16
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	00030003 	.word	0x00030003
 800a284:	00030001 	.word	0x00030001
 800a288:	00030002 	.word	0x00030002
 800a28c:	00f42400 	.word	0x00f42400
 800a290:	000c000c 	.word	0x000c000c
 800a294:	000c0004 	.word	0x000c0004
 800a298:	000c0008 	.word	0x000c0008

0800a29c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800a2a2:	f7ff fee7 	bl	800a074 <LL_RCC_GetSysClkSource>
 800a2a6:	0003      	movs	r3, r0
 800a2a8:	2b08      	cmp	r3, #8
 800a2aa:	d002      	beq.n	800a2b2 <RCC_GetSystemClockFreq+0x16>
 800a2ac:	2b10      	cmp	r3, #16
 800a2ae:	d003      	beq.n	800a2b8 <RCC_GetSystemClockFreq+0x1c>
 800a2b0:	e007      	b.n	800a2c2 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800a2b2:	4b0e      	ldr	r3, [pc, #56]	; (800a2ec <RCC_GetSystemClockFreq+0x50>)
 800a2b4:	607b      	str	r3, [r7, #4]
      break;
 800a2b6:	e014      	b.n	800a2e2 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800a2b8:	f000 f84c 	bl	800a354 <RCC_PLL_GetFreqDomain_SYS>
 800a2bc:	0003      	movs	r3, r0
 800a2be:	607b      	str	r3, [r7, #4]
      break;
 800a2c0:	e00f      	b.n	800a2e2 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800a2c2:	4b0b      	ldr	r3, [pc, #44]	; (800a2f0 <RCC_GetSystemClockFreq+0x54>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	0adb      	lsrs	r3, r3, #11
 800a2c8:	2207      	movs	r2, #7
 800a2ca:	4013      	ands	r3, r2
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	409a      	lsls	r2, r3
 800a2d0:	0013      	movs	r3, r2
 800a2d2:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800a2d4:	6839      	ldr	r1, [r7, #0]
 800a2d6:	4807      	ldr	r0, [pc, #28]	; (800a2f4 <RCC_GetSystemClockFreq+0x58>)
 800a2d8:	f7f5 ff14 	bl	8000104 <__udivsi3>
 800a2dc:	0003      	movs	r3, r0
 800a2de:	607b      	str	r3, [r7, #4]
      break;
 800a2e0:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800a2e2:	687b      	ldr	r3, [r7, #4]
}
 800a2e4:	0018      	movs	r0, r3
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	b002      	add	sp, #8
 800a2ea:	bd80      	pop	{r7, pc}
 800a2ec:	007a1200 	.word	0x007a1200
 800a2f0:	40021000 	.word	0x40021000
 800a2f4:	00f42400 	.word	0x00f42400

0800a2f8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800a300:	f7ff fec4 	bl	800a08c <LL_RCC_GetAHBPrescaler>
 800a304:	0003      	movs	r3, r0
 800a306:	0a1b      	lsrs	r3, r3, #8
 800a308:	220f      	movs	r2, #15
 800a30a:	401a      	ands	r2, r3
 800a30c:	4b05      	ldr	r3, [pc, #20]	; (800a324 <RCC_GetHCLKClockFreq+0x2c>)
 800a30e:	0092      	lsls	r2, r2, #2
 800a310:	58d3      	ldr	r3, [r2, r3]
 800a312:	221f      	movs	r2, #31
 800a314:	4013      	ands	r3, r2
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	40da      	lsrs	r2, r3
 800a31a:	0013      	movs	r3, r2
}
 800a31c:	0018      	movs	r0, r3
 800a31e:	46bd      	mov	sp, r7
 800a320:	b002      	add	sp, #8
 800a322:	bd80      	pop	{r7, pc}
 800a324:	0800a6a4 	.word	0x0800a6a4

0800a328 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800a330:	f7ff feb8 	bl	800a0a4 <LL_RCC_GetAPB1Prescaler>
 800a334:	0003      	movs	r3, r0
 800a336:	0b1a      	lsrs	r2, r3, #12
 800a338:	4b05      	ldr	r3, [pc, #20]	; (800a350 <RCC_GetPCLK1ClockFreq+0x28>)
 800a33a:	0092      	lsls	r2, r2, #2
 800a33c:	58d3      	ldr	r3, [r2, r3]
 800a33e:	221f      	movs	r2, #31
 800a340:	4013      	ands	r3, r2
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	40da      	lsrs	r2, r3
 800a346:	0013      	movs	r3, r2
}
 800a348:	0018      	movs	r0, r3
 800a34a:	46bd      	mov	sp, r7
 800a34c:	b002      	add	sp, #8
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	0800a6e4 	.word	0x0800a6e4

0800a354 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800a354:	b590      	push	{r4, r7, lr}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800a35a:	f7ff fed9 	bl	800a110 <LL_RCC_PLL_GetMainSource>
 800a35e:	0003      	movs	r3, r0
 800a360:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	2b02      	cmp	r3, #2
 800a366:	d003      	beq.n	800a370 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	2b03      	cmp	r3, #3
 800a36c:	d003      	beq.n	800a376 <RCC_PLL_GetFreqDomain_SYS+0x22>
 800a36e:	e005      	b.n	800a37c <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800a370:	4b13      	ldr	r3, [pc, #76]	; (800a3c0 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800a372:	607b      	str	r3, [r7, #4]
      break;
 800a374:	e005      	b.n	800a382 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800a376:	4b13      	ldr	r3, [pc, #76]	; (800a3c4 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800a378:	607b      	str	r3, [r7, #4]
      break;
 800a37a:	e002      	b.n	800a382 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800a37c:	4b10      	ldr	r3, [pc, #64]	; (800a3c0 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800a37e:	607b      	str	r3, [r7, #4]
      break;
 800a380:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800a382:	f7ff fead 	bl	800a0e0 <LL_RCC_PLL_GetN>
 800a386:	0002      	movs	r2, r0
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4353      	muls	r3, r2
 800a38c:	001c      	movs	r4, r3
 800a38e:	f7ff fecb 	bl	800a128 <LL_RCC_PLL_GetDivider>
 800a392:	0003      	movs	r3, r0
 800a394:	091b      	lsrs	r3, r3, #4
 800a396:	3301      	adds	r3, #1
 800a398:	0019      	movs	r1, r3
 800a39a:	0020      	movs	r0, r4
 800a39c:	f7f5 feb2 	bl	8000104 <__udivsi3>
 800a3a0:	0003      	movs	r3, r0
 800a3a2:	001c      	movs	r4, r3
 800a3a4:	f7ff fea8 	bl	800a0f8 <LL_RCC_PLL_GetR>
 800a3a8:	0003      	movs	r3, r0
 800a3aa:	0f5b      	lsrs	r3, r3, #29
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	0019      	movs	r1, r3
 800a3b0:	0020      	movs	r0, r4
 800a3b2:	f7f5 fea7 	bl	8000104 <__udivsi3>
 800a3b6:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800a3b8:	0018      	movs	r0, r3
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	b003      	add	sp, #12
 800a3be:	bd90      	pop	{r4, r7, pc}
 800a3c0:	00f42400 	.word	0x00f42400
 800a3c4:	007a1200 	.word	0x007a1200

0800a3c8 <LL_USART_IsEnabled>:
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	4013      	ands	r3, r2
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d101      	bne.n	800a3e0 <LL_USART_IsEnabled+0x18>
 800a3dc:	2301      	movs	r3, #1
 800a3de:	e000      	b.n	800a3e2 <LL_USART_IsEnabled+0x1a>
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	0018      	movs	r0, r3
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	b002      	add	sp, #8
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <LL_USART_SetPrescaler>:
{
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b082      	sub	sp, #8
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
 800a3f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f8:	220f      	movs	r2, #15
 800a3fa:	4393      	bics	r3, r2
 800a3fc:	683a      	ldr	r2, [r7, #0]
 800a3fe:	b292      	uxth	r2, r2
 800a400:	431a      	orrs	r2, r3
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a406:	46c0      	nop			; (mov r8, r8)
 800a408:	46bd      	mov	sp, r7
 800a40a:	b002      	add	sp, #8
 800a40c:	bd80      	pop	{r7, pc}
	...

0800a410 <LL_USART_SetStopBitsLength>:
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	4a05      	ldr	r2, [pc, #20]	; (800a434 <LL_USART_SetStopBitsLength+0x24>)
 800a420:	401a      	ands	r2, r3
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	431a      	orrs	r2, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	605a      	str	r2, [r3, #4]
}
 800a42a:	46c0      	nop			; (mov r8, r8)
 800a42c:	46bd      	mov	sp, r7
 800a42e:	b002      	add	sp, #8
 800a430:	bd80      	pop	{r7, pc}
 800a432:	46c0      	nop			; (mov r8, r8)
 800a434:	ffffcfff 	.word	0xffffcfff

0800a438 <LL_USART_SetHWFlowCtrl>:
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	4a05      	ldr	r2, [pc, #20]	; (800a45c <LL_USART_SetHWFlowCtrl+0x24>)
 800a448:	401a      	ands	r2, r3
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	431a      	orrs	r2, r3
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	609a      	str	r2, [r3, #8]
}
 800a452:	46c0      	nop			; (mov r8, r8)
 800a454:	46bd      	mov	sp, r7
 800a456:	b002      	add	sp, #8
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	46c0      	nop			; (mov r8, r8)
 800a45c:	fffffcff 	.word	0xfffffcff

0800a460 <LL_USART_SetBaudRate>:
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b086      	sub	sp, #24
 800a464:	af00      	add	r7, sp, #0
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	607a      	str	r2, [r7, #4]
 800a46c:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2b0b      	cmp	r3, #11
 800a472:	d846      	bhi.n	800a502 <LL_USART_SetBaudRate+0xa2>
  else if (BaudRate == 0U)
 800a474:	6a3b      	ldr	r3, [r7, #32]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d043      	beq.n	800a502 <LL_USART_SetBaudRate+0xa2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800a47a:	683a      	ldr	r2, [r7, #0]
 800a47c:	2380      	movs	r3, #128	; 0x80
 800a47e:	021b      	lsls	r3, r3, #8
 800a480:	429a      	cmp	r2, r3
 800a482:	d126      	bne.n	800a4d2 <LL_USART_SetBaudRate+0x72>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	b2db      	uxtb	r3, r3
 800a488:	001a      	movs	r2, r3
 800a48a:	4b20      	ldr	r3, [pc, #128]	; (800a50c <LL_USART_SetBaudRate+0xac>)
 800a48c:	0092      	lsls	r2, r2, #2
 800a48e:	58d3      	ldr	r3, [r2, r3]
 800a490:	0019      	movs	r1, r3
 800a492:	68b8      	ldr	r0, [r7, #8]
 800a494:	f7f5 fe36 	bl	8000104 <__udivsi3>
 800a498:	0003      	movs	r3, r0
 800a49a:	005a      	lsls	r2, r3, #1
 800a49c:	6a3b      	ldr	r3, [r7, #32]
 800a49e:	085b      	lsrs	r3, r3, #1
 800a4a0:	18d3      	adds	r3, r2, r3
 800a4a2:	6a39      	ldr	r1, [r7, #32]
 800a4a4:	0018      	movs	r0, r3
 800a4a6:	f7f5 fe2d 	bl	8000104 <__udivsi3>
 800a4aa:	0003      	movs	r3, r0
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	4a17      	ldr	r2, [pc, #92]	; (800a510 <LL_USART_SetBaudRate+0xb0>)
 800a4b4:	4013      	ands	r3, r2
 800a4b6:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	085b      	lsrs	r3, r3, #1
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	001a      	movs	r2, r3
 800a4c0:	2307      	movs	r3, #7
 800a4c2:	4013      	ands	r3, r2
 800a4c4:	693a      	ldr	r2, [r7, #16]
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	693a      	ldr	r2, [r7, #16]
 800a4ce:	60da      	str	r2, [r3, #12]
}
 800a4d0:	e017      	b.n	800a502 <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	001a      	movs	r2, r3
 800a4d8:	4b0c      	ldr	r3, [pc, #48]	; (800a50c <LL_USART_SetBaudRate+0xac>)
 800a4da:	0092      	lsls	r2, r2, #2
 800a4dc:	58d3      	ldr	r3, [r2, r3]
 800a4de:	0019      	movs	r1, r3
 800a4e0:	68b8      	ldr	r0, [r7, #8]
 800a4e2:	f7f5 fe0f 	bl	8000104 <__udivsi3>
 800a4e6:	0003      	movs	r3, r0
 800a4e8:	001a      	movs	r2, r3
 800a4ea:	6a3b      	ldr	r3, [r7, #32]
 800a4ec:	085b      	lsrs	r3, r3, #1
 800a4ee:	18d3      	adds	r3, r2, r3
 800a4f0:	6a39      	ldr	r1, [r7, #32]
 800a4f2:	0018      	movs	r0, r3
 800a4f4:	f7f5 fe06 	bl	8000104 <__udivsi3>
 800a4f8:	0003      	movs	r3, r0
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	001a      	movs	r2, r3
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	60da      	str	r2, [r3, #12]
}
 800a502:	46c0      	nop			; (mov r8, r8)
 800a504:	46bd      	mov	sp, r7
 800a506:	b006      	add	sp, #24
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	46c0      	nop			; (mov r8, r8)
 800a50c:	0800a758 	.word	0x0800a758
 800a510:	0000fff0 	.word	0x0000fff0

0800a514 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800a514:	b590      	push	{r4, r7, lr}
 800a516:	b08b      	sub	sp, #44	; 0x2c
 800a518:	af02      	add	r7, sp, #8
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800a51e:	231f      	movs	r3, #31
 800a520:	18fb      	adds	r3, r7, r3
 800a522:	2201      	movs	r2, #1
 800a524:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800a526:	2300      	movs	r3, #0
 800a528:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	0018      	movs	r0, r3
 800a52e:	f7ff ff4b 	bl	800a3c8 <LL_USART_IsEnabled>
 800a532:	1e03      	subs	r3, r0, #0
 800a534:	d16a      	bne.n	800a60c <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a38      	ldr	r2, [pc, #224]	; (800a61c <LL_USART_Init+0x108>)
 800a53c:	401a      	ands	r2, r3
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	6899      	ldr	r1, [r3, #8]
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	691b      	ldr	r3, [r3, #16]
 800a546:	4319      	orrs	r1, r3
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	695b      	ldr	r3, [r3, #20]
 800a54c:	4319      	orrs	r1, r3
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	69db      	ldr	r3, [r3, #28]
 800a552:	430b      	orrs	r3, r1
 800a554:	431a      	orrs	r2, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	68da      	ldr	r2, [r3, #12]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	0011      	movs	r1, r2
 800a562:	0018      	movs	r0, r3
 800a564:	f7ff ff54 	bl	800a410 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	699a      	ldr	r2, [r3, #24]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	0011      	movs	r1, r2
 800a570:	0018      	movs	r0, r3
 800a572:	f7ff ff61 	bl	800a438 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	4a29      	ldr	r2, [pc, #164]	; (800a620 <LL_USART_Init+0x10c>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d105      	bne.n	800a58a <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800a57e:	2003      	movs	r0, #3
 800a580:	f7ff fdfc 	bl	800a17c <LL_RCC_GetUSARTClockFreq>
 800a584:	0003      	movs	r3, r0
 800a586:	61bb      	str	r3, [r7, #24]
 800a588:	e022      	b.n	800a5d0 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	4a25      	ldr	r2, [pc, #148]	; (800a624 <LL_USART_Init+0x110>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d105      	bne.n	800a59e <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800a592:	200c      	movs	r0, #12
 800a594:	f7ff fdf2 	bl	800a17c <LL_RCC_GetUSARTClockFreq>
 800a598:	0003      	movs	r3, r0
 800a59a:	61bb      	str	r3, [r7, #24]
 800a59c:	e018      	b.n	800a5d0 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4a21      	ldr	r2, [pc, #132]	; (800a628 <LL_USART_Init+0x114>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d108      	bne.n	800a5b8 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800a5a6:	240c      	movs	r4, #12
 800a5a8:	193b      	adds	r3, r7, r4
 800a5aa:	0018      	movs	r0, r3
 800a5ac:	f7ff fdc8 	bl	800a140 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800a5b0:	193b      	adds	r3, r7, r4
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	61bb      	str	r3, [r7, #24]
 800a5b6:	e00b      	b.n	800a5d0 <LL_USART_Init+0xbc>
#endif
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	4a1c      	ldr	r2, [pc, #112]	; (800a62c <LL_USART_Init+0x118>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d107      	bne.n	800a5d0 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800a5c0:	240c      	movs	r4, #12
 800a5c2:	193b      	adds	r3, r7, r4
 800a5c4:	0018      	movs	r0, r3
 800a5c6:	f7ff fdbb 	bl	800a140 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800a5ca:	193b      	adds	r3, r7, r4
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d013      	beq.n	800a5fe <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d00f      	beq.n	800a5fe <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800a5de:	231f      	movs	r3, #31
 800a5e0:	18fb      	adds	r3, r7, r3
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	69dc      	ldr	r4, [r3, #28]
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	69b9      	ldr	r1, [r7, #24]
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	9300      	str	r3, [sp, #0]
 800a5f8:	0023      	movs	r3, r4
 800a5fa:	f7ff ff31 	bl	800a460 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	0011      	movs	r1, r2
 800a606:	0018      	movs	r0, r3
 800a608:	f7ff feef 	bl	800a3ea <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800a60c:	231f      	movs	r3, #31
 800a60e:	18fb      	adds	r3, r7, r3
 800a610:	781b      	ldrb	r3, [r3, #0]
}
 800a612:	0018      	movs	r0, r3
 800a614:	46bd      	mov	sp, r7
 800a616:	b009      	add	sp, #36	; 0x24
 800a618:	bd90      	pop	{r4, r7, pc}
 800a61a:	46c0      	nop			; (mov r8, r8)
 800a61c:	efff69f3 	.word	0xefff69f3
 800a620:	40013800 	.word	0x40013800
 800a624:	40004400 	.word	0x40004400
 800a628:	40004800 	.word	0x40004800
 800a62c:	40004c00 	.word	0x40004c00

0800a630 <__libc_init_array>:
 800a630:	b570      	push	{r4, r5, r6, lr}
 800a632:	2600      	movs	r6, #0
 800a634:	4d0c      	ldr	r5, [pc, #48]	; (800a668 <__libc_init_array+0x38>)
 800a636:	4c0d      	ldr	r4, [pc, #52]	; (800a66c <__libc_init_array+0x3c>)
 800a638:	1b64      	subs	r4, r4, r5
 800a63a:	10a4      	asrs	r4, r4, #2
 800a63c:	42a6      	cmp	r6, r4
 800a63e:	d109      	bne.n	800a654 <__libc_init_array+0x24>
 800a640:	2600      	movs	r6, #0
 800a642:	f000 f821 	bl	800a688 <_init>
 800a646:	4d0a      	ldr	r5, [pc, #40]	; (800a670 <__libc_init_array+0x40>)
 800a648:	4c0a      	ldr	r4, [pc, #40]	; (800a674 <__libc_init_array+0x44>)
 800a64a:	1b64      	subs	r4, r4, r5
 800a64c:	10a4      	asrs	r4, r4, #2
 800a64e:	42a6      	cmp	r6, r4
 800a650:	d105      	bne.n	800a65e <__libc_init_array+0x2e>
 800a652:	bd70      	pop	{r4, r5, r6, pc}
 800a654:	00b3      	lsls	r3, r6, #2
 800a656:	58eb      	ldr	r3, [r5, r3]
 800a658:	4798      	blx	r3
 800a65a:	3601      	adds	r6, #1
 800a65c:	e7ee      	b.n	800a63c <__libc_init_array+0xc>
 800a65e:	00b3      	lsls	r3, r6, #2
 800a660:	58eb      	ldr	r3, [r5, r3]
 800a662:	4798      	blx	r3
 800a664:	3601      	adds	r6, #1
 800a666:	e7f2      	b.n	800a64e <__libc_init_array+0x1e>
 800a668:	0800a788 	.word	0x0800a788
 800a66c:	0800a788 	.word	0x0800a788
 800a670:	0800a788 	.word	0x0800a788
 800a674:	0800a78c 	.word	0x0800a78c

0800a678 <memset>:
 800a678:	0003      	movs	r3, r0
 800a67a:	1882      	adds	r2, r0, r2
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d100      	bne.n	800a682 <memset+0xa>
 800a680:	4770      	bx	lr
 800a682:	7019      	strb	r1, [r3, #0]
 800a684:	3301      	adds	r3, #1
 800a686:	e7f9      	b.n	800a67c <memset+0x4>

0800a688 <_init>:
 800a688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a68a:	46c0      	nop			; (mov r8, r8)
 800a68c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a68e:	bc08      	pop	{r3}
 800a690:	469e      	mov	lr, r3
 800a692:	4770      	bx	lr

0800a694 <_fini>:
 800a694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a696:	46c0      	nop			; (mov r8, r8)
 800a698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a69a:	bc08      	pop	{r3}
 800a69c:	469e      	mov	lr, r3
 800a69e:	4770      	bx	lr
