
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098e8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080099a4  080099a4  000199a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a88  08009a88  00023140  2**0
                  CONTENTS
  4 .ARM          00000000  08009a88  08009a88  00023140  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a88  08009a88  00023140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a88  08009a88  00019a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a8c  08009a8c  00019a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00003140  20000000  08009a90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20003140  0800cbd0  00023140  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200034c0  0800cbd0  000234c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00023140  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001821f  00000000  00000000  00023168  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000307d  00000000  00000000  0003b387  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001858  00000000  00000000  0003e408  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016e0  00000000  00000000  0003fc60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c374  00000000  00000000  00041340  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001543b  00000000  00000000  0005d6b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ae123  00000000  00000000  00072aef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00120c12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058dc  00000000  00000000  00120c90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20003140 	.word	0x20003140
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800998c 	.word	0x0800998c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20003144 	.word	0x20003144
 8000100:	0800998c 	.word	0x0800998c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}

08000348 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <LL_USART_DisableFIFO+0x1c>)
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	dfffffff 	.word	0xdfffffff

08000368 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	00db      	lsls	r3, r3, #3
 8000378:	08da      	lsrs	r2, r3, #3
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	075b      	lsls	r3, r3, #29
 800037e:	431a      	orrs	r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	609a      	str	r2, [r3, #8]
}
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	b002      	add	sp, #8
 800038a:	bd80      	pop	{r7, pc}

0800038c <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <LL_USART_SetRXFIFOThreshold+0x24>)
 800039c:	401a      	ands	r2, r3
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	065b      	lsls	r3, r3, #25
 80003a2:	431a      	orrs	r2, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	609a      	str	r2, [r3, #8]
}
 80003a8:	46c0      	nop			; (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b002      	add	sp, #8
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	f1ffffff 	.word	0xf1ffffff

080003b4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <LL_USART_ConfigAsyncMode+0x2c>)
 80003c2:	401a      	ands	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	222a      	movs	r2, #42	; 0x2a
 80003ce:	4393      	bics	r3, r2
 80003d0:	001a      	movs	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	609a      	str	r2, [r3, #8]
}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	46bd      	mov	sp, r7
 80003da:	b002      	add	sp, #8
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	ffffb7ff 	.word	0xffffb7ff

080003e4 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	69da      	ldr	r2, [r3, #28]
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	039b      	lsls	r3, r3, #14
 80003f4:	401a      	ands	r2, r3
 80003f6:	2380      	movs	r3, #128	; 0x80
 80003f8:	039b      	lsls	r3, r3, #14
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d101      	bne.n	8000402 <LL_USART_IsActiveFlag_TEACK+0x1e>
 80003fe:	2301      	movs	r3, #1
 8000400:	e000      	b.n	8000404 <LL_USART_IsActiveFlag_TEACK+0x20>
 8000402:	2300      	movs	r3, #0
}
 8000404:	0018      	movs	r0, r3
 8000406:	46bd      	mov	sp, r7
 8000408:	b002      	add	sp, #8
 800040a:	bd80      	pop	{r7, pc}

0800040c <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	69da      	ldr	r2, [r3, #28]
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	03db      	lsls	r3, r3, #15
 800041c:	401a      	ands	r2, r3
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	03db      	lsls	r3, r3, #15
 8000422:	429a      	cmp	r2, r3
 8000424:	d101      	bne.n	800042a <LL_USART_IsActiveFlag_REACK+0x1e>
 8000426:	2301      	movs	r3, #1
 8000428:	e000      	b.n	800042c <LL_USART_IsActiveFlag_REACK+0x20>
 800042a:	2300      	movs	r3, #0
}
 800042c:	0018      	movs	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	b002      	add	sp, #8
 8000432:	bd80      	pop	{r7, pc}

08000434 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2220      	movs	r2, #32
 8000442:	431a      	orrs	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	601a      	str	r2, [r3, #0]
}
 8000448:	46c0      	nop			; (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}

08000450 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	2201      	movs	r2, #1
 800045e:	431a      	orrs	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	609a      	str	r2, [r3, #8]
}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	b002      	add	sp, #8
 800046a:	bd80      	pop	{r7, pc}

0800046c <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000478:	b29b      	uxth	r3, r3
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	0ddb      	lsrs	r3, r3, #23
 800047e:	b29b      	uxth	r3, r3
}
 8000480:	0018      	movs	r0, r3
 8000482:	46bd      	mov	sp, r7
 8000484:	b002      	add	sp, #8
 8000486:	bd80      	pop	{r7, pc}

08000488 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000492:	6819      	ldr	r1, [r3, #0]
 8000494:	4b03      	ldr	r3, [pc, #12]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	430a      	orrs	r2, r1
 800049a:	601a      	str	r2, [r3, #0]
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b002      	add	sp, #8
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40010000 	.word	0x40010000

080004a8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	683a      	ldr	r2, [r7, #0]
 80004b6:	619a      	str	r2, [r3, #24]
}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b002      	add	sp, #8
 80004be:	bd80      	pop	{r7, pc}

080004c0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004ca:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	430a      	orrs	r2, r1
 80004d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	4013      	ands	r3, r2
 80004dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004de:	68fb      	ldr	r3, [r7, #12]
}
 80004e0:	46c0      	nop			; (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b004      	add	sp, #16
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40021000 	.word	0x40021000

080004ec <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80004f4:	4b07      	ldr	r3, [pc, #28]	; (8000514 <LL_IOP_GRP1_EnableClock+0x28>)
 80004f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <LL_IOP_GRP1_EnableClock+0x28>)
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	430a      	orrs	r2, r1
 80004fe:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <LL_IOP_GRP1_EnableClock+0x28>)
 8000502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	4013      	ands	r3, r2
 8000508:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800050a:	68fb      	ldr	r3, [r7, #12]
}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b004      	add	sp, #16
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40021000 	.word	0x40021000

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b086      	sub	sp, #24
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 800051e:	2316      	movs	r3, #22
 8000520:	18fb      	adds	r3, r7, r3
 8000522:	2200      	movs	r2, #0
 8000524:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 8000526:	2314      	movs	r3, #20
 8000528:	18fb      	adds	r3, r7, r3
 800052a:	2200      	movs	r2, #0
 800052c:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 800052e:	2312      	movs	r3, #18
 8000530:	18fb      	adds	r3, r7, r3
 8000532:	2200      	movs	r2, #0
 8000534:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f002 fc2f 	bl	8002d98 <HAL_Init>

  /* USER CODE BEGIN Init */
  USART3->CR1 &=~(USART_CR1_UE);
 800053a:	4b3a      	ldr	r3, [pc, #232]	; (8000624 <main+0x10c>)
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	4b39      	ldr	r3, [pc, #228]	; (8000624 <main+0x10c>)
 8000540:	2101      	movs	r1, #1
 8000542:	438a      	bics	r2, r1
 8000544:	601a      	str	r2, [r3, #0]
  USART3->CR2 |=USART_CR2_MSBFIRST;
 8000546:	4b37      	ldr	r3, [pc, #220]	; (8000624 <main+0x10c>)
 8000548:	685a      	ldr	r2, [r3, #4]
 800054a:	4b36      	ldr	r3, [pc, #216]	; (8000624 <main+0x10c>)
 800054c:	2180      	movs	r1, #128	; 0x80
 800054e:	02c9      	lsls	r1, r1, #11
 8000550:	430a      	orrs	r2, r1
 8000552:	605a      	str	r2, [r3, #4]
  USART3->CR1 |=USART_CR1_UE;
 8000554:	4b33      	ldr	r3, [pc, #204]	; (8000624 <main+0x10c>)
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4b32      	ldr	r3, [pc, #200]	; (8000624 <main+0x10c>)
 800055a:	2101      	movs	r1, #1
 800055c:	430a      	orrs	r2, r1
 800055e:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000560:	f000 f86c 	bl	800063c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000564:	4b30      	ldr	r3, [pc, #192]	; (8000628 <main+0x110>)
 8000566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000568:	4b2f      	ldr	r3, [pc, #188]	; (8000628 <main+0x110>)
 800056a:	2101      	movs	r1, #1
 800056c:	430a      	orrs	r2, r1
 800056e:	635a      	str	r2, [r3, #52]	; 0x34
 8000570:	4b2d      	ldr	r3, [pc, #180]	; (8000628 <main+0x110>)
 8000572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000574:	2201      	movs	r2, #1
 8000576:	4013      	ands	r3, r2
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800057c:	4b2a      	ldr	r3, [pc, #168]	; (8000628 <main+0x110>)
 800057e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000580:	4b29      	ldr	r3, [pc, #164]	; (8000628 <main+0x110>)
 8000582:	2102      	movs	r1, #2
 8000584:	430a      	orrs	r2, r1
 8000586:	635a      	str	r2, [r3, #52]	; 0x34
 8000588:	4b27      	ldr	r3, [pc, #156]	; (8000628 <main+0x110>)
 800058a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800058c:	2202      	movs	r2, #2
 800058e:	4013      	ands	r3, r2
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000594:	4b24      	ldr	r3, [pc, #144]	; (8000628 <main+0x110>)
 8000596:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000598:	4b23      	ldr	r3, [pc, #140]	; (8000628 <main+0x110>)
 800059a:	2104      	movs	r1, #4
 800059c:	430a      	orrs	r2, r1
 800059e:	635a      	str	r2, [r3, #52]	; 0x34
 80005a0:	4b21      	ldr	r3, [pc, #132]	; (8000628 <main+0x110>)
 80005a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a4:	2204      	movs	r2, #4
 80005a6:	4013      	ands	r3, r2
 80005a8:	603b      	str	r3, [r7, #0]
 80005aa:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 fb8e 	bl	8000ccc <MX_GPIO_Init>
  MX_DMA_Init();
 80005b0:	f000 fb6e 	bl	8000c90 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005b4:	f000 fa96 	bl	8000ae4 <MX_USART2_UART_Init>
  MX_COMP1_Init();
 80005b8:	f000 f8c0 	bl	800073c <MX_COMP1_Init>
  MX_TIM1_Init();
 80005bc:	f000 f998 	bl	80008f0 <MX_TIM1_Init>
  MX_USART3_Init();
 80005c0:	f000 fb2e 	bl	8000c20 <MX_USART3_Init>
  MX_I2S1_Init();
 80005c4:	f000 f92c 	bl	8000820 <MX_I2S1_Init>
  MX_I2C1_Init();
 80005c8:	f000 f8ea 	bl	80007a0 <MX_I2C1_Init>
  MX_SPI2_Init();
 80005cc:	f000 f952 	bl	8000874 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 80005d0:	4b16      	ldr	r3, [pc, #88]	; (800062c <main+0x114>)
 80005d2:	0018      	movs	r0, r3
 80005d4:	f002 feaa 	bl	800332c <HAL_COMP_Start>
	HAL_Delay(100);
 80005d8:	2064      	movs	r0, #100	; 0x64
 80005da:	f002 fc63 	bl	8002ea4 <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 80005de:	f001 fc27 	bl	8001e30 <MEM_Reset>
	weoClear();
 80005e2:	f000 fe4f 	bl	8001284 <weoClear>
	weoInit();
 80005e6:	f000 fdf7 	bl	80011d8 <weoInit>
	MEM_GetID();
 80005ea:	f001 fe71 	bl	80022d0 <MEM_GetID>

//	weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, h1);
//	weoDrawRectangleFilled(0x00,0x00,0x06,0x0D,0xFF,FONT_X[0xFE]);
//	weoDrawRectangleFilled(0x00, 0x00,0x00+X_increment-1,0x00+ASCII_height-1, 0xFF, image_data_Font_0x31);
//	weoDrawRectangleFilled(0x00, 0x00, 0x0E, 0x25, 0xFF, h2);
	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 80005ee:	4b10      	ldr	r3, [pc, #64]	; (8000630 <main+0x118>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <main+0x118>)
 80005f4:	490f      	ldr	r1, [pc, #60]	; (8000634 <main+0x11c>)
 80005f6:	430a      	orrs	r2, r1
 80005f8:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_USART_EnableIT_RXNE(USART2);
 80005fa:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <main+0x118>)
 80005fc:	0018      	movs	r0, r3
 80005fe:	f7ff ff19 	bl	8000434 <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <main+0x118>)
 8000604:	0018      	movs	r0, r3
 8000606:	f7ff ff23 	bl	8000450 <LL_USART_EnableIT_ERROR>
//	dataASCII[0]= 0x30;
//	dataASCII[1]=0x31;
	USART2->ICR|=USART_ICR_ORECF;
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <main+0x118>)
 800060c:	6a1a      	ldr	r2, [r3, #32]
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <main+0x118>)
 8000610:	2108      	movs	r1, #8
 8000612:	430a      	orrs	r2, r1
 8000614:	621a      	str	r2, [r3, #32]
//	showFullScreen(0x00);
	while (1) {
//		MEM_GetID();
//		showSmallImage(0x00, 0x00, 0x00);
//		printASCIIarray(0,0,1,dataASCII);
		cmdExecute(cmd2Execute);
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <main+0x120>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	0018      	movs	r0, r3
 800061c:	f001 feb6 	bl	800238c <cmdExecute>
 8000620:	e7f9      	b.n	8000616 <main+0xfe>
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	40004800 	.word	0x40004800
 8000628:	40021000 	.word	0x40021000
 800062c:	20003280 	.word	0x20003280
 8000630:	40004400 	.word	0x40004400
 8000634:	1000100d 	.word	0x1000100d
 8000638:	20003376 	.word	0x20003376

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b0a1      	sub	sp, #132	; 0x84
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	2448      	movs	r4, #72	; 0x48
 8000644:	193b      	adds	r3, r7, r4
 8000646:	0018      	movs	r0, r3
 8000648:	2338      	movs	r3, #56	; 0x38
 800064a:	001a      	movs	r2, r3
 800064c:	2100      	movs	r1, #0
 800064e:	f009 f995 	bl	800997c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000652:	2338      	movs	r3, #56	; 0x38
 8000654:	18fb      	adds	r3, r7, r3
 8000656:	0018      	movs	r0, r3
 8000658:	2310      	movs	r3, #16
 800065a:	001a      	movs	r2, r3
 800065c:	2100      	movs	r1, #0
 800065e:	f009 f98d 	bl	800997c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	0018      	movs	r0, r3
 8000666:	2334      	movs	r3, #52	; 0x34
 8000668:	001a      	movs	r2, r3
 800066a:	2100      	movs	r1, #0
 800066c:	f009 f986 	bl	800997c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	0018      	movs	r0, r3
 8000676:	f004 fc01 	bl	8004e7c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067a:	193b      	adds	r3, r7, r4
 800067c:	2202      	movs	r2, #2
 800067e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	193b      	adds	r3, r7, r4
 8000682:	2280      	movs	r2, #128	; 0x80
 8000684:	0052      	lsls	r2, r2, #1
 8000686:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000688:	0021      	movs	r1, r4
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2240      	movs	r2, #64	; 0x40
 8000694:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2202      	movs	r2, #2
 800069a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2202      	movs	r2, #2
 80006a0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2200      	movs	r2, #0
 80006a6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2208      	movs	r2, #8
 80006ac:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2280      	movs	r2, #128	; 0x80
 80006b2:	0292      	lsls	r2, r2, #10
 80006b4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2280      	movs	r2, #128	; 0x80
 80006ba:	0492      	lsls	r2, r2, #18
 80006bc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2280      	movs	r2, #128	; 0x80
 80006c2:	0592      	lsls	r2, r2, #22
 80006c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	0018      	movs	r0, r3
 80006ca:	f004 fc23 	bl	8004f14 <HAL_RCC_OscConfig>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006d2:	f001 ff83 	bl	80025dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	2138      	movs	r1, #56	; 0x38
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2207      	movs	r2, #7
 80006dc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2202      	movs	r2, #2
 80006e2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2102      	movs	r1, #2
 80006f4:	0018      	movs	r0, r3
 80006f6:	f004 ff2d 	bl	8005554 <HAL_RCC_ClockConfig>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006fe:	f001 ff6d 	bl	80025dc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	4a0c      	ldr	r2, [pc, #48]	; (8000738 <SystemClock_Config+0xfc>)
 8000706:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2S1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2200      	movs	r2, #0
 8000718:	615a      	str	r2, [r3, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2200      	movs	r2, #0
 800071e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	0018      	movs	r0, r3
 8000724:	f005 f8c0 	bl	80058a8 <HAL_RCCEx_PeriphCLKConfig>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800072c:	f001 ff56 	bl	80025dc <Error_Handler>
  }
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	b021      	add	sp, #132	; 0x84
 8000736:	bd90      	pop	{r4, r7, pc}
 8000738:	00200822 	.word	0x00200822

0800073c <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_COMP1_Init+0x5c>)
 8000742:	4a16      	ldr	r2, [pc, #88]	; (800079c <MX_COMP1_Init+0x60>)
 8000744:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_COMP1_Init+0x5c>)
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	0052      	lsls	r2, r2, #1
 800074c:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_COMP1_Init+0x5c>)
 8000750:	2230      	movs	r2, #48	; 0x30
 8000752:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_COMP1_Init+0x5c>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_COMP1_Init+0x5c>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000760:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <MX_COMP1_Init+0x5c>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_COMP1_Init+0x5c>)
 8000768:	2280      	movs	r2, #128	; 0x80
 800076a:	0392      	lsls	r2, r2, #14
 800076c:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <MX_COMP1_Init+0x5c>)
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <MX_COMP1_Init+0x5c>)
 8000776:	2200      	movs	r2, #0
 8000778:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MX_COMP1_Init+0x5c>)
 800077c:	2212      	movs	r2, #18
 800077e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <MX_COMP1_Init+0x5c>)
 8000782:	0018      	movs	r0, r3
 8000784:	f002 fc72 	bl	800306c <HAL_COMP_Init>
 8000788:	1e03      	subs	r3, r0, #0
 800078a:	d001      	beq.n	8000790 <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 800078c:	f001 ff26 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	20003280 	.word	0x20003280
 800079c:	40010200 	.word	0x40010200

080007a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a4:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <MX_I2C1_Init+0x74>)
 80007a6:	4a1c      	ldr	r2, [pc, #112]	; (8000818 <MX_I2C1_Init+0x78>)
 80007a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 80007aa:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <MX_I2C1_Init+0x74>)
 80007ac:	4a1b      	ldr	r2, [pc, #108]	; (800081c <MX_I2C1_Init+0x7c>)
 80007ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007b0:	4b18      	ldr	r3, [pc, #96]	; (8000814 <MX_I2C1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b6:	4b17      	ldr	r3, [pc, #92]	; (8000814 <MX_I2C1_Init+0x74>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007bc:	4b15      	ldr	r3, [pc, #84]	; (8000814 <MX_I2C1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_I2C1_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_I2C1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_I2C1_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_I2C1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_I2C1_Init+0x74>)
 80007dc:	0018      	movs	r0, r3
 80007de:	f003 fa3d 	bl	8003c5c <HAL_I2C_Init>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007e6:	f001 fef9 	bl	80025dc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ea:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <MX_I2C1_Init+0x74>)
 80007ec:	2100      	movs	r1, #0
 80007ee:	0018      	movs	r0, r3
 80007f0:	f004 f8d4 	bl	800499c <HAL_I2CEx_ConfigAnalogFilter>
 80007f4:	1e03      	subs	r3, r0, #0
 80007f6:	d001      	beq.n	80007fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007f8:	f001 fef0 	bl	80025dc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <MX_I2C1_Init+0x74>)
 80007fe:	2100      	movs	r1, #0
 8000800:	0018      	movs	r0, r3
 8000802:	f004 f917 	bl	8004a34 <HAL_I2CEx_ConfigDigitalFilter>
 8000806:	1e03      	subs	r3, r0, #0
 8000808:	d001      	beq.n	800080e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800080a:	f001 fee7 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	2000321c 	.word	0x2000321c
 8000818:	40005400 	.word	0x40005400
 800081c:	1094102c 	.word	0x1094102c

08000820 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_I2S1_Init+0x4c>)
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <MX_I2S1_Init+0x50>)
 8000828:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <MX_I2S1_Init+0x4c>)
 800082c:	2280      	movs	r2, #128	; 0x80
 800082e:	0092      	lsls	r2, r2, #2
 8000830:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_I2S1_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_I2S1_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MX_I2S1_Init+0x4c>)
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	0092      	lsls	r2, r2, #2
 8000844:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_I2S1_Init+0x4c>)
 8000848:	22fa      	movs	r2, #250	; 0xfa
 800084a:	0192      	lsls	r2, r2, #6
 800084c:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800084e:	4b07      	ldr	r3, [pc, #28]	; (800086c <MX_I2S1_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <MX_I2S1_Init+0x4c>)
 8000856:	0018      	movs	r0, r3
 8000858:	f004 f938 	bl	8004acc <HAL_I2S_Init>
 800085c:	1e03      	subs	r3, r0, #0
 800085e:	d001      	beq.n	8000864 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 8000860:	f001 febc 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	20003378 	.word	0x20003378
 8000870:	40013000 	.word	0x40013000

08000874 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */
//	SPI_BAUDRATEPRESCALER_4
  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <MX_SPI2_Init+0x74>)
 800087a:	4a1c      	ldr	r2, [pc, #112]	; (80008ec <MX_SPI2_Init+0x78>)
 800087c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_SPI2_Init+0x74>)
 8000880:	2282      	movs	r2, #130	; 0x82
 8000882:	0052      	lsls	r2, r2, #1
 8000884:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <MX_SPI2_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_SPI2_Init+0x74>)
 800088e:	22e0      	movs	r2, #224	; 0xe0
 8000890:	00d2      	lsls	r2, r2, #3
 8000892:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_SPI2_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_SPI2_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_SPI2_Init+0x74>)
 80008a2:	2280      	movs	r2, #128	; 0x80
 80008a4:	0092      	lsls	r2, r2, #2
 80008a6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_SPI2_Init+0x74>)
 80008aa:	2208      	movs	r2, #8
 80008ac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_SPI2_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_SPI2_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_SPI2_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_SPI2_Init+0x74>)
 80008c2:	2207      	movs	r2, #7
 80008c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_SPI2_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_SPI2_Init+0x74>)
 80008ce:	2208      	movs	r2, #8
 80008d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008d2:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <MX_SPI2_Init+0x74>)
 80008d4:	0018      	movs	r0, r3
 80008d6:	f005 fcb5 	bl	8006244 <HAL_SPI_Init>
 80008da:	1e03      	subs	r3, r0, #0
 80008dc:	d001      	beq.n	80008e2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80008de:	f001 fe7d 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200031a4 	.word	0x200031a4
 80008ec:	40003800 	.word	0x40003800

080008f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b09e      	sub	sp, #120	; 0x78
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	2368      	movs	r3, #104	; 0x68
 80008f8:	18fb      	adds	r3, r7, r3
 80008fa:	0018      	movs	r0, r3
 80008fc:	2310      	movs	r3, #16
 80008fe:	001a      	movs	r2, r3
 8000900:	2100      	movs	r1, #0
 8000902:	f009 f83b 	bl	800997c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000906:	235c      	movs	r3, #92	; 0x5c
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	0018      	movs	r0, r3
 800090c:	230c      	movs	r3, #12
 800090e:	001a      	movs	r2, r3
 8000910:	2100      	movs	r1, #0
 8000912:	f009 f833 	bl	800997c <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000916:	2350      	movs	r3, #80	; 0x50
 8000918:	18fb      	adds	r3, r7, r3
 800091a:	0018      	movs	r0, r3
 800091c:	230c      	movs	r3, #12
 800091e:	001a      	movs	r2, r3
 8000920:	2100      	movs	r1, #0
 8000922:	f009 f82b 	bl	800997c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000926:	2334      	movs	r3, #52	; 0x34
 8000928:	18fb      	adds	r3, r7, r3
 800092a:	0018      	movs	r0, r3
 800092c:	231c      	movs	r3, #28
 800092e:	001a      	movs	r2, r3
 8000930:	2100      	movs	r1, #0
 8000932:	f009 f823 	bl	800997c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000936:	003b      	movs	r3, r7
 8000938:	0018      	movs	r0, r3
 800093a:	2334      	movs	r3, #52	; 0x34
 800093c:	001a      	movs	r2, r3
 800093e:	2100      	movs	r1, #0
 8000940:	f009 f81c 	bl	800997c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000944:	4b64      	ldr	r3, [pc, #400]	; (8000ad8 <MX_TIM1_Init+0x1e8>)
 8000946:	4a65      	ldr	r2, [pc, #404]	; (8000adc <MX_TIM1_Init+0x1ec>)
 8000948:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800094a:	4b63      	ldr	r3, [pc, #396]	; (8000ad8 <MX_TIM1_Init+0x1e8>)
 800094c:	2200      	movs	r2, #0
 800094e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000950:	4b61      	ldr	r3, [pc, #388]	; (8000ad8 <MX_TIM1_Init+0x1e8>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 8000956:	4b60      	ldr	r3, [pc, #384]	; (8000ad8 <MX_TIM1_Init+0x1e8>)
 8000958:	4a61      	ldr	r2, [pc, #388]	; (8000ae0 <MX_TIM1_Init+0x1f0>)
 800095a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095c:	4b5e      	ldr	r3, [pc, #376]	; (8000ad8 <MX_TIM1_Init+0x1e8>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000962:	4b5d      	ldr	r3, [pc, #372]	; (8000ad8 <MX_TIM1_Init+0x1e8>)
 8000964:	2200      	movs	r2, #0
 8000966:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000968:	4b5b      	ldr	r3, [pc, #364]	; (8000ad8 <MX_TIM1_Init+0x1e8>)
 800096a:	2280      	movs	r2, #128	; 0x80
 800096c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800096e:	4b5a      	ldr	r3, [pc, #360]	; (8000ad8 <MX_TIM1_Init+0x1e8>)
 8000970:	0018      	movs	r0, r3
 8000972:	f006 fc7b 	bl	800726c <HAL_TIM_Base_Init>
 8000976:	1e03      	subs	r3, r0, #0
 8000978:	d001      	beq.n	800097e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800097a:	f001 fe2f 	bl	80025dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097e:	2168      	movs	r1, #104	; 0x68
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2280      	movs	r2, #128	; 0x80
 8000984:	0152      	lsls	r2, r2, #5
 8000986:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000988:	187a      	adds	r2, r7, r1
 800098a:	4b53      	ldr	r3, [pc, #332]	; (8000ad8 <MX_TIM1_Init+0x1e8>)
 800098c:	0011      	movs	r1, r2
 800098e:	0018      	movs	r0, r3
 8000990:	f006 ff04 	bl	800779c <HAL_TIM_ConfigClockSource>
 8000994:	1e03      	subs	r3, r0, #0
 8000996:	d001      	beq.n	800099c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000998:	f001 fe20 	bl	80025dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800099c:	4b4e      	ldr	r3, [pc, #312]	; (8000ad8 <MX_TIM1_Init+0x1e8>)
 800099e:	0018      	movs	r0, r3
 80009a0:	f006 fcbc 	bl	800731c <HAL_TIM_PWM_Init>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80009a8:	f001 fe18 	bl	80025dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ac:	215c      	movs	r1, #92	; 0x5c
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2200      	movs	r2, #0
 80009b8:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009c0:	187a      	adds	r2, r7, r1
 80009c2:	4b45      	ldr	r3, [pc, #276]	; (8000ad8 <MX_TIM1_Init+0x1e8>)
 80009c4:	0011      	movs	r1, r2
 80009c6:	0018      	movs	r0, r3
 80009c8:	f007 fbac 	bl	8008124 <HAL_TIMEx_MasterConfigSynchronization>
 80009cc:	1e03      	subs	r3, r0, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 80009d0:	f001 fe04 	bl	80025dc <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80009d4:	2150      	movs	r1, #80	; 0x50
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2202      	movs	r2, #2
 80009da:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2201      	movs	r2, #1
 80009e0:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80009e8:	187a      	adds	r2, r7, r1
 80009ea:	4b3b      	ldr	r3, [pc, #236]	; (8000ad8 <MX_TIM1_Init+0x1e8>)
 80009ec:	2101      	movs	r1, #1
 80009ee:	0018      	movs	r0, r3
 80009f0:	f007 fcac 	bl	800834c <HAL_TIMEx_ConfigBreakInput>
 80009f4:	1e03      	subs	r3, r0, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80009f8:	f001 fdf0 	bl	80025dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009fc:	2134      	movs	r1, #52	; 0x34
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2260      	movs	r2, #96	; 0x60
 8000a02:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2296      	movs	r2, #150	; 0x96
 8000a08:	0052      	lsls	r2, r2, #1
 8000a0a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	2204      	movs	r2, #4
 8000a1c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a2a:	1879      	adds	r1, r7, r1
 8000a2c:	4b2a      	ldr	r3, [pc, #168]	; (8000ad8 <MX_TIM1_Init+0x1e8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	0018      	movs	r0, r3
 8000a32:	f006 fdbd 	bl	80075b0 <HAL_TIM_PWM_ConfigChannel>
 8000a36:	1e03      	subs	r3, r0, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000a3a:	f001 fdcf 	bl	80025dc <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000a3e:	2134      	movs	r1, #52	; 0x34
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2232      	movs	r2, #50	; 0x32
 8000a44:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000a46:	1879      	adds	r1, r7, r1
 8000a48:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <MX_TIM1_Init+0x1e8>)
 8000a4a:	2210      	movs	r2, #16
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f006 fdaf 	bl	80075b0 <HAL_TIM_PWM_ConfigChannel>
 8000a52:	1e03      	subs	r3, r0, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8000a56:	f001 fdc1 	bl	80025dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a5a:	003b      	movs	r3, r7
 8000a5c:	2280      	movs	r2, #128	; 0x80
 8000a5e:	0112      	lsls	r2, r2, #4
 8000a60:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000a62:	003b      	movs	r3, r7
 8000a64:	2280      	movs	r2, #128	; 0x80
 8000a66:	00d2      	lsls	r2, r2, #3
 8000a68:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a6a:	003b      	movs	r3, r7
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a70:	003b      	movs	r3, r7
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000a76:	003b      	movs	r3, r7
 8000a78:	2280      	movs	r2, #128	; 0x80
 8000a7a:	0152      	lsls	r2, r2, #5
 8000a7c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a7e:	003b      	movs	r3, r7
 8000a80:	2280      	movs	r2, #128	; 0x80
 8000a82:	0192      	lsls	r2, r2, #6
 8000a84:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8000a86:	003b      	movs	r3, r7
 8000a88:	220a      	movs	r2, #10
 8000a8a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a8c:	003b      	movs	r3, r7
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a92:	003b      	movs	r3, r7
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a98:	003b      	movs	r3, r7
 8000a9a:	2280      	movs	r2, #128	; 0x80
 8000a9c:	0492      	lsls	r2, r2, #18
 8000a9e:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000aa0:	003b      	movs	r3, r7
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000aa6:	003b      	movs	r3, r7
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000aac:	003b      	movs	r3, r7
 8000aae:	2280      	movs	r2, #128	; 0x80
 8000ab0:	01d2      	lsls	r2, r2, #7
 8000ab2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ab4:	003a      	movs	r2, r7
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <MX_TIM1_Init+0x1e8>)
 8000ab8:	0011      	movs	r1, r2
 8000aba:	0018      	movs	r0, r3
 8000abc:	f007 fba0 	bl	8008200 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ac0:	1e03      	subs	r3, r0, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 8000ac4:	f001 fd8a 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <MX_TIM1_Init+0x1e8>)
 8000aca:	0018      	movs	r0, r3
 8000acc:	f001 ff74 	bl	80029b8 <HAL_TIM_MspPostInit>

}
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b01e      	add	sp, #120	; 0x78
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20003328 	.word	0x20003328
 8000adc:	40012c00 	.word	0x40012c00
 8000ae0:	0000027f 	.word	0x0000027f

08000ae4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b08f      	sub	sp, #60	; 0x3c
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000aea:	2418      	movs	r4, #24
 8000aec:	193b      	adds	r3, r7, r4
 8000aee:	0018      	movs	r0, r3
 8000af0:	2320      	movs	r3, #32
 8000af2:	001a      	movs	r2, r3
 8000af4:	2100      	movs	r1, #0
 8000af6:	f008 ff41 	bl	800997c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	003b      	movs	r3, r7
 8000afc:	0018      	movs	r0, r3
 8000afe:	2318      	movs	r3, #24
 8000b00:	001a      	movs	r2, r3
 8000b02:	2100      	movs	r1, #0
 8000b04:	f008 ff3a 	bl	800997c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000b08:	2380      	movs	r3, #128	; 0x80
 8000b0a:	029b      	lsls	r3, r3, #10
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f7ff fcd7 	bl	80004c0 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000b12:	2001      	movs	r0, #1
 8000b14:	f7ff fcea 	bl	80004ec <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000b18:	003b      	movs	r3, r7
 8000b1a:	2204      	movs	r2, #4
 8000b1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b1e:	003b      	movs	r3, r7
 8000b20:	2202      	movs	r2, #2
 8000b22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b24:	003b      	movs	r3, r7
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b2a:	003b      	movs	r3, r7
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b30:	003b      	movs	r3, r7
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b36:	003b      	movs	r3, r7
 8000b38:	2201      	movs	r2, #1
 8000b3a:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	003a      	movs	r2, r7
 8000b3e:	23a0      	movs	r3, #160	; 0xa0
 8000b40:	05db      	lsls	r3, r3, #23
 8000b42:	0011      	movs	r1, r2
 8000b44:	0018      	movs	r0, r3
 8000b46:	f008 fba2 	bl	800928e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000b4a:	003b      	movs	r3, r7
 8000b4c:	2208      	movs	r2, #8
 8000b4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b50:	003b      	movs	r3, r7
 8000b52:	2202      	movs	r2, #2
 8000b54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b56:	003b      	movs	r3, r7
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b5c:	003b      	movs	r3, r7
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b62:	003b      	movs	r3, r7
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b68:	003b      	movs	r3, r7
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	003a      	movs	r2, r7
 8000b70:	23a0      	movs	r3, #160	; 0xa0
 8000b72:	05db      	lsls	r3, r3, #23
 8000b74:	0011      	movs	r1, r2
 8000b76:	0018      	movs	r0, r3
 8000b78:	f008 fb89 	bl	800928e <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	201c      	movs	r0, #28
 8000b80:	f7ff fb66 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000b84:	201c      	movs	r0, #28
 8000b86:	f7ff fb49 	bl	800021c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	22e1      	movs	r2, #225	; 0xe1
 8000b94:	0212      	lsls	r2, r2, #8
 8000b96:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000b98:	193b      	adds	r3, r7, r4
 8000b9a:	2280      	movs	r2, #128	; 0x80
 8000b9c:	0152      	lsls	r2, r2, #5
 8000b9e:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000ba0:	0021      	movs	r1, r4
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	220c      	movs	r2, #12
 8000bb2:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	4a16      	ldr	r2, [pc, #88]	; (8000c1c <MX_USART2_UART_Init+0x138>)
 8000bc4:	0019      	movs	r1, r3
 8000bc6:	0010      	movs	r0, r2
 8000bc8:	f008 fe26 	bl	8009818 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <MX_USART2_UART_Init+0x138>)
 8000bce:	2100      	movs	r1, #0
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f7ff fbc9 	bl	8000368 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <MX_USART2_UART_Init+0x138>)
 8000bd8:	2100      	movs	r1, #0
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f7ff fbd6 	bl	800038c <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000be0:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <MX_USART2_UART_Init+0x138>)
 8000be2:	0018      	movs	r0, r3
 8000be4:	f7ff fbb0 	bl	8000348 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <MX_USART2_UART_Init+0x138>)
 8000bea:	0018      	movs	r0, r3
 8000bec:	f7ff fbe2 	bl	80003b4 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <MX_USART2_UART_Init+0x138>)
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f7ff fb9a 	bl	800032c <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000bf8:	46c0      	nop			; (mov r8, r8)
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <MX_USART2_UART_Init+0x138>)
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f7ff fbf1 	bl	80003e4 <LL_USART_IsActiveFlag_TEACK>
 8000c02:	1e03      	subs	r3, r0, #0
 8000c04:	d0f9      	beq.n	8000bfa <MX_USART2_UART_Init+0x116>
 8000c06:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <MX_USART2_UART_Init+0x138>)
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f7ff fbff 	bl	800040c <LL_USART_IsActiveFlag_REACK>
 8000c0e:	1e03      	subs	r3, r0, #0
 8000c10:	d0f3      	beq.n	8000bfa <MX_USART2_UART_Init+0x116>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b00f      	add	sp, #60	; 0x3c
 8000c18:	bd90      	pop	{r4, r7, pc}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	40004400 	.word	0x40004400

08000c20 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
//	husart3.Init.BaudRate = 8000000;
  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_USART3_Init+0x64>)
 8000c26:	4a18      	ldr	r2, [pc, #96]	; (8000c88 <MX_USART3_Init+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8000000;
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <MX_USART3_Init+0x64>)
 8000c2c:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <MX_USART3_Init+0x6c>)
 8000c2e:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_USART3_Init+0x64>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_USART3_Init+0x64>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_USART3_Init+0x64>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <MX_USART3_Init+0x64>)
 8000c44:	2208      	movs	r2, #8
 8000c46:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_USART3_Init+0x64>)
 8000c4a:	2280      	movs	r2, #128	; 0x80
 8000c4c:	00d2      	lsls	r2, r2, #3
 8000c4e:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_USART3_Init+0x64>)
 8000c52:	2280      	movs	r2, #128	; 0x80
 8000c54:	0092      	lsls	r2, r2, #2
 8000c56:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <MX_USART3_Init+0x64>)
 8000c5a:	2280      	movs	r2, #128	; 0x80
 8000c5c:	0052      	lsls	r2, r2, #1
 8000c5e:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <MX_USART3_Init+0x64>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <MX_USART3_Init+0x64>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <MX_USART3_Init+0x64>)
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f007 fc0a 	bl	8008488 <HAL_USART_Init>
 8000c74:	1e03      	subs	r3, r0, #0
 8000c76:	d001      	beq.n	8000c7c <MX_USART3_Init+0x5c>
  {
    Error_Handler();
 8000c78:	f001 fcb0 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c7c:	46c0      	nop			; (mov r8, r8)
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	200032b8 	.word	0x200032b8
 8000c88:	40004800 	.word	0x40004800
 8000c8c:	007a1200 	.word	0x007a1200

08000c90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_DMA_Init+0x38>)
 8000c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <MX_DMA_Init+0x38>)
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	639a      	str	r2, [r3, #56]	; 0x38
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_DMA_Init+0x38>)
 8000ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	4013      	ands	r3, r2
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	2009      	movs	r0, #9
 8000cb4:	f002 fc38 	bl	8003528 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cb8:	2009      	movs	r0, #9
 8000cba:	f002 fc4a 	bl	8003552 <HAL_NVIC_EnableIRQ>

}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b002      	add	sp, #8
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	40021000 	.word	0x40021000

08000ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd2:	003b      	movs	r3, r7
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	2318      	movs	r3, #24
 8000cd8:	001a      	movs	r2, r3
 8000cda:	2100      	movs	r1, #0
 8000cdc:	f008 fe4e 	bl	800997c <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000ce0:	2002      	movs	r0, #2
 8000ce2:	f7ff fc03 	bl	80004ec <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000ce6:	2004      	movs	r0, #4
 8000ce8:	f7ff fc00 	bl	80004ec <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000cec:	2001      	movs	r0, #1
 8000cee:	f7ff fbfd 	bl	80004ec <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8000cf2:	2380      	movs	r3, #128	; 0x80
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	4a92      	ldr	r2, [pc, #584]	; (8000f40 <MX_GPIO_Init+0x274>)
 8000cf8:	0019      	movs	r1, r3
 8000cfa:	0010      	movs	r0, r2
 8000cfc:	f7ff fbd4 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	01db      	lsls	r3, r3, #7
 8000d04:	4a8f      	ldr	r2, [pc, #572]	; (8000f44 <MX_GPIO_Init+0x278>)
 8000d06:	0019      	movs	r1, r3
 8000d08:	0010      	movs	r0, r2
 8000d0a:	f7ff fbcd 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8000d0e:	2380      	movs	r3, #128	; 0x80
 8000d10:	021b      	lsls	r3, r3, #8
 8000d12:	4a8c      	ldr	r2, [pc, #560]	; (8000f44 <MX_GPIO_Init+0x278>)
 8000d14:	0019      	movs	r1, r3
 8000d16:	0010      	movs	r0, r2
 8000d18:	f7ff fbc6 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8000d1c:	23a0      	movs	r3, #160	; 0xa0
 8000d1e:	05db      	lsls	r3, r3, #23
 8000d20:	2140      	movs	r1, #64	; 0x40
 8000d22:	0018      	movs	r0, r3
 8000d24:	f7ff fbc0 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8000d28:	23a0      	movs	r3, #160	; 0xa0
 8000d2a:	05db      	lsls	r3, r3, #23
 8000d2c:	2180      	movs	r1, #128	; 0x80
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f7ff fbba 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8000d34:	4b83      	ldr	r3, [pc, #524]	; (8000f44 <MX_GPIO_Init+0x278>)
 8000d36:	2140      	movs	r1, #64	; 0x40
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f7ff fbb5 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8000d3e:	003b      	movs	r3, r7
 8000d40:	2280      	movs	r2, #128	; 0x80
 8000d42:	0092      	lsls	r2, r2, #2
 8000d44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d46:	003b      	movs	r3, r7
 8000d48:	2201      	movs	r2, #1
 8000d4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	003b      	movs	r3, r7
 8000d4e:	2203      	movs	r2, #3
 8000d50:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d52:	003b      	movs	r3, r7
 8000d54:	2200      	movs	r2, #0
 8000d56:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d58:	003b      	movs	r3, r7
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	003b      	movs	r3, r7
 8000d60:	4a77      	ldr	r2, [pc, #476]	; (8000f40 <MX_GPIO_Init+0x274>)
 8000d62:	0019      	movs	r1, r3
 8000d64:	0010      	movs	r0, r2
 8000d66:	f008 fa92 	bl	800928e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8000d6a:	003b      	movs	r3, r7
 8000d6c:	2280      	movs	r2, #128	; 0x80
 8000d6e:	01d2      	lsls	r2, r2, #7
 8000d70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d72:	003b      	movs	r3, r7
 8000d74:	2201      	movs	r2, #1
 8000d76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d78:	003b      	movs	r3, r7
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d7e:	003b      	movs	r3, r7
 8000d80:	2200      	movs	r2, #0
 8000d82:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d84:	003b      	movs	r3, r7
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	003b      	movs	r3, r7
 8000d8c:	4a6d      	ldr	r2, [pc, #436]	; (8000f44 <MX_GPIO_Init+0x278>)
 8000d8e:	0019      	movs	r1, r3
 8000d90:	0010      	movs	r0, r2
 8000d92:	f008 fa7c 	bl	800928e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8000d96:	003b      	movs	r3, r7
 8000d98:	2280      	movs	r2, #128	; 0x80
 8000d9a:	0212      	lsls	r2, r2, #8
 8000d9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d9e:	003b      	movs	r3, r7
 8000da0:	2201      	movs	r2, #1
 8000da2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000da4:	003b      	movs	r3, r7
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000daa:	003b      	movs	r3, r7
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000db0:	003b      	movs	r3, r7
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000db6:	003b      	movs	r3, r7
 8000db8:	4a62      	ldr	r2, [pc, #392]	; (8000f44 <MX_GPIO_Init+0x278>)
 8000dba:	0019      	movs	r1, r3
 8000dbc:	0010      	movs	r0, r2
 8000dbe:	f008 fa66 	bl	800928e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000dc2:	003b      	movs	r3, r7
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000dc8:	003b      	movs	r3, r7
 8000dca:	2200      	movs	r2, #0
 8000dcc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000dce:	003b      	movs	r3, r7
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8000dd4:	003a      	movs	r2, r7
 8000dd6:	23a0      	movs	r3, #160	; 0xa0
 8000dd8:	05db      	lsls	r3, r3, #23
 8000dda:	0011      	movs	r1, r2
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f008 fa56 	bl	800928e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8000de2:	003b      	movs	r3, r7
 8000de4:	2202      	movs	r2, #2
 8000de6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000de8:	003b      	movs	r3, r7
 8000dea:	2200      	movs	r2, #0
 8000dec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000dee:	003b      	movs	r3, r7
 8000df0:	2201      	movs	r2, #1
 8000df2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8000df4:	003a      	movs	r2, r7
 8000df6:	23a0      	movs	r3, #160	; 0xa0
 8000df8:	05db      	lsls	r3, r3, #23
 8000dfa:	0011      	movs	r1, r2
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f008 fa46 	bl	800928e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8000e02:	003b      	movs	r3, r7
 8000e04:	2210      	movs	r2, #16
 8000e06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e08:	003b      	movs	r3, r7
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e0e:	003b      	movs	r3, r7
 8000e10:	2201      	movs	r2, #1
 8000e12:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8000e14:	003a      	movs	r2, r7
 8000e16:	23a0      	movs	r3, #160	; 0xa0
 8000e18:	05db      	lsls	r3, r3, #23
 8000e1a:	0011      	movs	r1, r2
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f008 fa36 	bl	800928e <LL_GPIO_Init>
  /**/
  	  GPIO_InitStruct.Pin = KEY_4_Pin;
 8000e22:	003b      	movs	r3, r7
 8000e24:	2280      	movs	r2, #128	; 0x80
 8000e26:	0192      	lsls	r2, r2, #6
 8000e28:	601a      	str	r2, [r3, #0]
  	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e2a:	003b      	movs	r3, r7
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	605a      	str	r2, [r3, #4]
  	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e30:	003b      	movs	r3, r7
 8000e32:	2201      	movs	r2, #1
 8000e34:	611a      	str	r2, [r3, #16]
  	  LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8000e36:	003a      	movs	r2, r7
 8000e38:	23a0      	movs	r3, #160	; 0xa0
 8000e3a:	05db      	lsls	r3, r3, #23
 8000e3c:	0011      	movs	r1, r2
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f008 fa25 	bl	800928e <LL_GPIO_Init>
  	  /**/
  	    GPIO_InitStruct.Pin = KEY_5_Pin;
 8000e44:	003b      	movs	r3, r7
 8000e46:	2280      	movs	r2, #128	; 0x80
 8000e48:	01d2      	lsls	r2, r2, #7
 8000e4a:	601a      	str	r2, [r3, #0]
  	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e4c:	003b      	movs	r3, r7
 8000e4e:	2200      	movs	r2, #0
 8000e50:	605a      	str	r2, [r3, #4]
  	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e52:	003b      	movs	r3, r7
 8000e54:	2201      	movs	r2, #1
 8000e56:	611a      	str	r2, [r3, #16]
  	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8000e58:	003a      	movs	r2, r7
 8000e5a:	23a0      	movs	r3, #160	; 0xa0
 8000e5c:	05db      	lsls	r3, r3, #23
 8000e5e:	0011      	movs	r1, r2
 8000e60:	0018      	movs	r0, r3
 8000e62:	f008 fa14 	bl	800928e <LL_GPIO_Init>
  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000e66:	003b      	movs	r3, r7
 8000e68:	2240      	movs	r2, #64	; 0x40
 8000e6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e6c:	003b      	movs	r3, r7
 8000e6e:	2201      	movs	r2, #1
 8000e70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e72:	003b      	movs	r3, r7
 8000e74:	2203      	movs	r2, #3
 8000e76:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e78:	003b      	movs	r3, r7
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e7e:	003b      	movs	r3, r7
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8000e84:	003a      	movs	r2, r7
 8000e86:	23a0      	movs	r3, #160	; 0xa0
 8000e88:	05db      	lsls	r3, r3, #23
 8000e8a:	0011      	movs	r1, r2
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f008 f9fe 	bl	800928e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8000e92:	003b      	movs	r3, r7
 8000e94:	2280      	movs	r2, #128	; 0x80
 8000e96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e98:	003b      	movs	r3, r7
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9e:	003b      	movs	r3, r7
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ea4:	003b      	movs	r3, r7
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eaa:	003b      	movs	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	003a      	movs	r2, r7
 8000eb2:	23a0      	movs	r3, #160	; 0xa0
 8000eb4:	05db      	lsls	r3, r3, #23
 8000eb6:	0011      	movs	r1, r2
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f008 f9e8 	bl	800928e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8000ebe:	003b      	movs	r3, r7
 8000ec0:	2240      	movs	r2, #64	; 0x40
 8000ec2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ec4:	003b      	movs	r3, r7
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	003b      	movs	r3, r7
 8000ecc:	2203      	movs	r2, #3
 8000ece:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ed0:	003b      	movs	r3, r7
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ed6:	003b      	movs	r3, r7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8000edc:	003b      	movs	r3, r7
 8000ede:	4a19      	ldr	r2, [pc, #100]	; (8000f44 <MX_GPIO_Init+0x278>)
 8000ee0:	0019      	movs	r1, r3
 8000ee2:	0010      	movs	r0, r2
 8000ee4:	f008 f9d3 	bl	800928e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACCEL_INT1_Pin;
 8000ee8:	003b      	movs	r3, r7
 8000eea:	2280      	movs	r2, #128	; 0x80
 8000eec:	0112      	lsls	r2, r2, #4
 8000eee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000ef0:	003b      	movs	r3, r7
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ef6:	003b      	movs	r3, r7
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACCEL_INT1_GPIO_Port, &GPIO_InitStruct);
 8000efc:	003a      	movs	r2, r7
 8000efe:	23a0      	movs	r3, #160	; 0xa0
 8000f00:	05db      	lsls	r3, r3, #23
 8000f02:	0011      	movs	r1, r2
 8000f04:	0018      	movs	r0, r3
 8000f06:	f008 f9c2 	bl	800928e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACCEL_INT2_Pin;
 8000f0a:	003b      	movs	r3, r7
 8000f0c:	2280      	movs	r2, #128	; 0x80
 8000f0e:	0152      	lsls	r2, r2, #5
 8000f10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f12:	003b      	movs	r3, r7
 8000f14:	2200      	movs	r2, #0
 8000f16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f18:	003b      	movs	r3, r7
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACCEL_INT2_GPIO_Port, &GPIO_InitStruct);
 8000f1e:	003a      	movs	r2, r7
 8000f20:	23a0      	movs	r3, #160	; 0xa0
 8000f22:	05db      	lsls	r3, r3, #23
 8000f24:	0011      	movs	r1, r2
 8000f26:	0018      	movs	r0, r3
 8000f28:	f008 f9b1 	bl	800928e <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	031b      	lsls	r3, r3, #12
 8000f30:	0018      	movs	r0, r3
 8000f32:	f7ff faa9 	bl	8000488 <LL_SYSCFG_EnableFastModePlus>

}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b006      	add	sp, #24
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	50000400 	.word	0x50000400
 8000f44:	50000800 	.word	0x50000800

08000f48 <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0

  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <USART2_RX_Callback+0x60>)
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f7ff fa8c 	bl	800046c <LL_USART_ReceiveData9>
 8000f54:	0003      	movs	r3, r0
 8000f56:	001a      	movs	r2, r3
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <USART2_RX_Callback+0x64>)
 8000f5a:	801a      	strh	r2, [r3, #0]
	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <USART2_RX_Callback+0x60>)
 8000f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	05db      	lsls	r3, r3, #23
 8000f64:	0ddb      	lsrs	r3, r3, #23
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	4b10      	ldr	r3, [pc, #64]	; (8000fac <USART2_RX_Callback+0x64>)
 8000f6a:	801a      	strh	r2, [r3, #0]
  ByteReceived=1;
 8000f6c:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <USART2_RX_Callback+0x68>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
  if(dt1>0xFF){
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <USART2_RX_Callback+0x64>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	2bff      	cmp	r3, #255	; 0xff
 8000f78:	d90a      	bls.n	8000f90 <USART2_RX_Callback+0x48>
	  cmd[0]=dt1;
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <USART2_RX_Callback+0x64>)
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <USART2_RX_Callback+0x6c>)
 8000f82:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <USART2_RX_Callback+0x70>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <USART2_RX_Callback+0x74>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 8000f90:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <USART2_RX_Callback+0x74>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d104      	bne.n	8000fa2 <USART2_RX_Callback+0x5a>
	  cmdReceive(dt1);
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <USART2_RX_Callback+0x64>)
 8000f9a:	881b      	ldrh	r3, [r3, #0]
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f000 f80f 	bl	8000fc0 <cmdReceive>
  }
}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40004400 	.word	0x40004400
 8000fac:	20003498 	.word	0x20003498
 8000fb0:	20003160 	.word	0x20003160
 8000fb4:	200034a0 	.word	0x200034a0
 8000fb8:	20003162 	.word	0x20003162
 8000fbc:	20003161 	.word	0x20003161

08000fc0 <cmdReceive>:
	void cmdReceive (uint16_t dt1)
	{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	0002      	movs	r2, r0
 8000fc8:	1dbb      	adds	r3, r7, #6
 8000fca:	801a      	strh	r2, [r3, #0]
	  uint8_t inputCS=0;
 8000fcc:	230f      	movs	r3, #15
 8000fce:	18fb      	adds	r3, r7, r3
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
	  uint8_t i=0;
 8000fd4:	230e      	movs	r3, #14
 8000fd6:	18fb      	adds	r3, r7, r3
 8000fd8:	2200      	movs	r2, #0
 8000fda:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 8000fdc:	46c0      	nop			; (mov r8, r8)
 8000fde:	4b28      	ldr	r3, [pc, #160]	; (8001080 <cmdReceive+0xc0>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0fb      	beq.n	8000fde <cmdReceive+0x1e>
	  ByteReceived=0;
 8000fe6:	4b26      	ldr	r3, [pc, #152]	; (8001080 <cmdReceive+0xc0>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 8000fec:	4b25      	ldr	r3, [pc, #148]	; (8001084 <cmdReceive+0xc4>)
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	001a      	movs	r2, r3
 8000ff2:	1dbb      	adds	r3, r7, #6
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	b2d9      	uxtb	r1, r3
 8000ff8:	4b23      	ldr	r3, [pc, #140]	; (8001088 <cmdReceive+0xc8>)
 8000ffa:	5499      	strb	r1, [r3, r2]
	  ind++;
 8000ffc:	4b21      	ldr	r3, [pc, #132]	; (8001084 <cmdReceive+0xc4>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	3301      	adds	r3, #1
 8001002:	b29a      	uxth	r2, r3
 8001004:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <cmdReceive+0xc4>)
 8001006:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 8001008:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <cmdReceive+0xc4>)
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d02d      	beq.n	800106c <cmdReceive+0xac>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 8001010:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <cmdReceive+0xc4>)
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	001a      	movs	r2, r3
 8001016:	4b1c      	ldr	r3, [pc, #112]	; (8001088 <cmdReceive+0xc8>)
 8001018:	785b      	ldrb	r3, [r3, #1]
 800101a:	3301      	adds	r3, #1
 800101c:	429a      	cmp	r2, r3
 800101e:	dd25      	ble.n	800106c <cmdReceive+0xac>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 8001020:	230e      	movs	r3, #14
 8001022:	18fb      	adds	r3, r7, r3
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
 8001028:	e00f      	b.n	800104a <cmdReceive+0x8a>
				 inputCS+=cmd[i];
 800102a:	200e      	movs	r0, #14
 800102c:	183b      	adds	r3, r7, r0
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4a15      	ldr	r2, [pc, #84]	; (8001088 <cmdReceive+0xc8>)
 8001032:	5cd1      	ldrb	r1, [r2, r3]
 8001034:	220f      	movs	r2, #15
 8001036:	18bb      	adds	r3, r7, r2
 8001038:	18ba      	adds	r2, r7, r2
 800103a:	7812      	ldrb	r2, [r2, #0]
 800103c:	188a      	adds	r2, r1, r2
 800103e:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 8001040:	183b      	adds	r3, r7, r0
 8001042:	781a      	ldrb	r2, [r3, #0]
 8001044:	183b      	adds	r3, r7, r0
 8001046:	3201      	adds	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]
 800104a:	230e      	movs	r3, #14
 800104c:	18fb      	adds	r3, r7, r3
 800104e:	781a      	ldrb	r2, [r3, #0]
 8001050:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <cmdReceive+0xc8>)
 8001052:	785b      	ldrb	r3, [r3, #1]
 8001054:	3302      	adds	r3, #2
 8001056:	429a      	cmp	r2, r3
 8001058:	dbe7      	blt.n	800102a <cmdReceive+0x6a>
			 }
			 if(inputCS==0){
 800105a:	230f      	movs	r3, #15
 800105c:	18fb      	adds	r3, r7, r3
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d103      	bne.n	800106c <cmdReceive+0xac>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 				  answer2CPU(cmd);
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <cmdReceive+0xc8>)
 8001066:	0018      	movs	r0, r3
 8001068:	f000 faa0 	bl	80015ac <answer2CPU>
			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 800106c:	4b07      	ldr	r3, [pc, #28]	; (800108c <cmdReceive+0xcc>)
 800106e:	6a1a      	ldr	r2, [r3, #32]
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <cmdReceive+0xcc>)
 8001072:	2108      	movs	r1, #8
 8001074:	430a      	orrs	r2, r1
 8001076:	621a      	str	r2, [r3, #32]
	}
 8001078:	46c0      	nop			; (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	b004      	add	sp, #16
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20003160 	.word	0x20003160
 8001084:	20003162 	.word	0x20003162
 8001088:	200034a0 	.word	0x200034a0
 800108c:	40004400 	.word	0x40004400

08001090 <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	0002      	movs	r2, r0
 8001098:	1dfb      	adds	r3, r7, #7
 800109a:	701a      	strb	r2, [r3, #0]
			byte = (byte & 0x55) << 1 | (byte & 0xAA) >> 1;
 800109c:	1dfb      	adds	r3, r7, #7
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	b25b      	sxtb	r3, r3
 80010a4:	2255      	movs	r2, #85	; 0x55
 80010a6:	4393      	bics	r3, r2
 80010a8:	b25a      	sxtb	r2, r3
 80010aa:	1dfb      	adds	r3, r7, #7
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	105b      	asrs	r3, r3, #1
 80010b0:	b25b      	sxtb	r3, r3
 80010b2:	2155      	movs	r1, #85	; 0x55
 80010b4:	400b      	ands	r3, r1
 80010b6:	b25b      	sxtb	r3, r3
 80010b8:	4313      	orrs	r3, r2
 80010ba:	b25b      	sxtb	r3, r3
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	701a      	strb	r2, [r3, #0]
			byte = (byte & 0x33) << 2 | (byte & 0xCC) >> 2;
 80010c2:	1dfb      	adds	r3, r7, #7
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	b25b      	sxtb	r3, r3
 80010ca:	2233      	movs	r2, #51	; 0x33
 80010cc:	4393      	bics	r3, r2
 80010ce:	b25a      	sxtb	r2, r3
 80010d0:	1dfb      	adds	r3, r7, #7
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	109b      	asrs	r3, r3, #2
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	2133      	movs	r1, #51	; 0x33
 80010da:	400b      	ands	r3, r1
 80010dc:	b25b      	sxtb	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	1dfb      	adds	r3, r7, #7
 80010e6:	701a      	strb	r2, [r3, #0]
			byte = (byte & 0x0F) << 4 | (byte & 0xF0) >> 4;
 80010e8:	1dfb      	adds	r3, r7, #7
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	011b      	lsls	r3, r3, #4
 80010ee:	b25a      	sxtb	r2, r3
 80010f0:	1dfb      	adds	r3, r7, #7
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	091b      	lsrs	r3, r3, #4
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	b25b      	sxtb	r3, r3
 80010fa:	4313      	orrs	r3, r2
 80010fc:	b25b      	sxtb	r3, r3
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	1dfb      	adds	r3, r7, #7
 8001102:	701a      	strb	r2, [r3, #0]
	//		GPIOA->ODR &= ~(1 << 6); //reset cs
	//		GPIOA->ODR &= ~(1 << 7); // reset d/c
			HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 1);
 8001104:	1df9      	adds	r1, r7, #7
 8001106:	4804      	ldr	r0, [pc, #16]	; (8001118 <USART_AS_SPI_sendCMD+0x88>)
 8001108:	2301      	movs	r3, #1
 800110a:	2201      	movs	r2, #1
 800110c:	f007 fa0c 	bl	8008528 <HAL_USART_Transmit>
	//		GPIOA->ODR |= 1 << 6; //set cs
		}
 8001110:	46c0      	nop			; (mov r8, r8)
 8001112:	46bd      	mov	sp, r7
 8001114:	b002      	add	sp, #8
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200032b8 	.word	0x200032b8

0800111c <USART_AS_SPI_sendDAT>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	0002      	movs	r2, r0
 8001124:	1dfb      	adds	r3, r7, #7
 8001126:	701a      	strb	r2, [r3, #0]
		byte = (byte & 0x55) << 1 | (byte & 0xAA) >> 1;
 8001128:	1dfb      	adds	r3, r7, #7
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	b25b      	sxtb	r3, r3
 8001130:	2255      	movs	r2, #85	; 0x55
 8001132:	4393      	bics	r3, r2
 8001134:	b25a      	sxtb	r2, r3
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	105b      	asrs	r3, r3, #1
 800113c:	b25b      	sxtb	r3, r3
 800113e:	2155      	movs	r1, #85	; 0x55
 8001140:	400b      	ands	r3, r1
 8001142:	b25b      	sxtb	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b25b      	sxtb	r3, r3
 8001148:	b2da      	uxtb	r2, r3
 800114a:	1dfb      	adds	r3, r7, #7
 800114c:	701a      	strb	r2, [r3, #0]
		byte = (byte & 0x33) << 2 | (byte & 0xCC) >> 2;
 800114e:	1dfb      	adds	r3, r7, #7
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	b25b      	sxtb	r3, r3
 8001156:	2233      	movs	r2, #51	; 0x33
 8001158:	4393      	bics	r3, r2
 800115a:	b25a      	sxtb	r2, r3
 800115c:	1dfb      	adds	r3, r7, #7
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	109b      	asrs	r3, r3, #2
 8001162:	b25b      	sxtb	r3, r3
 8001164:	2133      	movs	r1, #51	; 0x33
 8001166:	400b      	ands	r3, r1
 8001168:	b25b      	sxtb	r3, r3
 800116a:	4313      	orrs	r3, r2
 800116c:	b25b      	sxtb	r3, r3
 800116e:	b2da      	uxtb	r2, r3
 8001170:	1dfb      	adds	r3, r7, #7
 8001172:	701a      	strb	r2, [r3, #0]
		byte = (byte & 0x0F) << 4 | (byte & 0xF0) >> 4;
 8001174:	1dfb      	adds	r3, r7, #7
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	b25a      	sxtb	r2, r3
 800117c:	1dfb      	adds	r3, r7, #7
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	091b      	lsrs	r3, r3, #4
 8001182:	b2db      	uxtb	r3, r3
 8001184:	b25b      	sxtb	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b25b      	sxtb	r3, r3
 800118a:	b2da      	uxtb	r2, r3
 800118c:	1dfb      	adds	r3, r7, #7
 800118e:	701a      	strb	r2, [r3, #0]
		GPIOA->ODR &= ~(1 << 6); //reset cs
 8001190:	23a0      	movs	r3, #160	; 0xa0
 8001192:	05db      	lsls	r3, r3, #23
 8001194:	695a      	ldr	r2, [r3, #20]
 8001196:	23a0      	movs	r3, #160	; 0xa0
 8001198:	05db      	lsls	r3, r3, #23
 800119a:	2140      	movs	r1, #64	; 0x40
 800119c:	438a      	bics	r2, r1
 800119e:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 7; // set dc
 80011a0:	23a0      	movs	r3, #160	; 0xa0
 80011a2:	05db      	lsls	r3, r3, #23
 80011a4:	695a      	ldr	r2, [r3, #20]
 80011a6:	23a0      	movs	r3, #160	; 0xa0
 80011a8:	05db      	lsls	r3, r3, #23
 80011aa:	2180      	movs	r1, #128	; 0x80
 80011ac:	430a      	orrs	r2, r1
 80011ae:	615a      	str	r2, [r3, #20]
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 1);
 80011b0:	1df9      	adds	r1, r7, #7
 80011b2:	4808      	ldr	r0, [pc, #32]	; (80011d4 <USART_AS_SPI_sendDAT+0xb8>)
 80011b4:	2301      	movs	r3, #1
 80011b6:	2201      	movs	r2, #1
 80011b8:	f007 f9b6 	bl	8008528 <HAL_USART_Transmit>
		GPIOA->ODR |= 1 << 6; //set cs
 80011bc:	23a0      	movs	r3, #160	; 0xa0
 80011be:	05db      	lsls	r3, r3, #23
 80011c0:	695a      	ldr	r2, [r3, #20]
 80011c2:	23a0      	movs	r3, #160	; 0xa0
 80011c4:	05db      	lsls	r3, r3, #23
 80011c6:	2140      	movs	r1, #64	; 0x40
 80011c8:	430a      	orrs	r2, r1
 80011ca:	615a      	str	r2, [r3, #20]

	}
 80011cc:	46c0      	nop			; (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b002      	add	sp, #8
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200032b8 	.word	0x200032b8

080011d8 <weoInit>:
	void weoInit(void) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
		HAL_Delay(1);
 80011dc:	2001      	movs	r0, #1
 80011de:	f001 fe61 	bl	8002ea4 <HAL_Delay>
		HAL_Delay(1);
 80011e2:	2001      	movs	r0, #1
 80011e4:	f001 fe5e 	bl	8002ea4 <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011e8:	4b25      	ldr	r3, [pc, #148]	; (8001280 <weoInit+0xa8>)
 80011ea:	2100      	movs	r1, #0
 80011ec:	0018      	movs	r0, r3
 80011ee:	f006 f8f5 	bl	80073dc <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 80011f2:	2001      	movs	r0, #1
 80011f4:	f001 fe56 	bl	8002ea4 <HAL_Delay>
		GPIOA->ODR &= ~(1 << 6);	//reset cs
 80011f8:	23a0      	movs	r3, #160	; 0xa0
 80011fa:	05db      	lsls	r3, r3, #23
 80011fc:	695a      	ldr	r2, [r3, #20]
 80011fe:	23a0      	movs	r3, #160	; 0xa0
 8001200:	05db      	lsls	r3, r3, #23
 8001202:	2140      	movs	r1, #64	; 0x40
 8001204:	438a      	bics	r2, r1
 8001206:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001208:	23a0      	movs	r3, #160	; 0xa0
 800120a:	05db      	lsls	r3, r3, #23
 800120c:	695a      	ldr	r2, [r3, #20]
 800120e:	23a0      	movs	r3, #160	; 0xa0
 8001210:	05db      	lsls	r3, r3, #23
 8001212:	2180      	movs	r1, #128	; 0x80
 8001214:	438a      	bics	r2, r1
 8001216:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 8001218:	20af      	movs	r0, #175	; 0xaf
 800121a:	f7ff ff39 	bl	8001090 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 800121e:	20a0      	movs	r0, #160	; 0xa0
 8001220:	f7ff ff36 	bl	8001090 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0b00010100);
		USART_AS_SPI_sendCMD(0x51); //	0x51 is a proper remap!	// or 0x53 if disable software bytes inversion
 8001224:	2051      	movs	r0, #81	; 0x51
 8001226:	f7ff ff33 	bl	8001090 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 800122a:	2081      	movs	r0, #129	; 0x81
 800122c:	f7ff ff30 	bl	8001090 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 8001230:	20ff      	movs	r0, #255	; 0xff
 8001232:	f7ff ff2d 	bl	8001090 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 8001236:	20a1      	movs	r0, #161	; 0xa1
 8001238:	f7ff ff2a 	bl	8001090 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 800123c:	2000      	movs	r0, #0
 800123e:	f7ff ff27 	bl	8001090 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 8001242:	20a2      	movs	r0, #162	; 0xa2
 8001244:	f7ff ff24 	bl	8001090 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 8001248:	2000      	movs	r0, #0
 800124a:	f7ff ff21 	bl	8001090 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 800124e:	20a8      	movs	r0, #168	; 0xa8
 8001250:	f7ff ff1e 	bl	8001090 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 8001254:	207f      	movs	r0, #127	; 0x7f
 8001256:	f7ff ff1b 	bl	8001090 <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 800125a:	23a0      	movs	r3, #160	; 0xa0
 800125c:	05db      	lsls	r3, r3, #23
 800125e:	695a      	ldr	r2, [r3, #20]
 8001260:	23a0      	movs	r3, #160	; 0xa0
 8001262:	05db      	lsls	r3, r3, #23
 8001264:	2180      	movs	r1, #128	; 0x80
 8001266:	430a      	orrs	r2, r1
 8001268:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 800126a:	23a0      	movs	r3, #160	; 0xa0
 800126c:	05db      	lsls	r3, r3, #23
 800126e:	695a      	ldr	r2, [r3, #20]
 8001270:	23a0      	movs	r3, #160	; 0xa0
 8001272:	05db      	lsls	r3, r3, #23
 8001274:	2140      	movs	r1, #64	; 0x40
 8001276:	430a      	orrs	r2, r1
 8001278:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20003328 	.word	0x20003328

08001284 <weoClear>:
	void weoClear(void) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
		uint16_t i;
		for (i = 0; i < 8192; i++) {
 800128a:	1dbb      	adds	r3, r7, #6
 800128c:	2200      	movs	r2, #0
 800128e:	801a      	strh	r2, [r3, #0]
 8001290:	e007      	b.n	80012a2 <weoClear+0x1e>
			USART_AS_SPI_sendDAT(BACKGROUND_COLOR);
 8001292:	2000      	movs	r0, #0
 8001294:	f7ff ff42 	bl	800111c <USART_AS_SPI_sendDAT>
		for (i = 0; i < 8192; i++) {
 8001298:	1dbb      	adds	r3, r7, #6
 800129a:	881a      	ldrh	r2, [r3, #0]
 800129c:	1dbb      	adds	r3, r7, #6
 800129e:	3201      	adds	r2, #1
 80012a0:	801a      	strh	r2, [r3, #0]
 80012a2:	1dbb      	adds	r3, r7, #6
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	4a03      	ldr	r2, [pc, #12]	; (80012b4 <weoClear+0x30>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d9f2      	bls.n	8001292 <weoClear+0xe>
		}
	}
 80012ac:	46c0      	nop			; (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b002      	add	sp, #8
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	00001fff 	.word	0x00001fff

080012b8 <weoDrawRectangleFilled>:
			}
		}
	}
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char color,
				uint8_t MEM_Buffer[]) {
 80012b8:	b5b0      	push	{r4, r5, r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	0005      	movs	r5, r0
 80012c0:	000c      	movs	r4, r1
 80012c2:	0010      	movs	r0, r2
 80012c4:	0019      	movs	r1, r3
 80012c6:	1dfb      	adds	r3, r7, #7
 80012c8:	1c2a      	adds	r2, r5, #0
 80012ca:	701a      	strb	r2, [r3, #0]
 80012cc:	1dbb      	adds	r3, r7, #6
 80012ce:	1c22      	adds	r2, r4, #0
 80012d0:	701a      	strb	r2, [r3, #0]
 80012d2:	1d7b      	adds	r3, r7, #5
 80012d4:	1c02      	adds	r2, r0, #0
 80012d6:	701a      	strb	r2, [r3, #0]
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	1c0a      	adds	r2, r1, #0
 80012dc:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 80012de:	230e      	movs	r3, #14
 80012e0:	18fb      	adds	r3, r7, r3
 80012e2:	2200      	movs	r2, #0
 80012e4:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 80012e6:	1dfb      	adds	r3, r7, #7
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	b25b      	sxtb	r3, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	da00      	bge.n	80012f2 <weoDrawRectangleFilled+0x3a>
 80012f0:	e156      	b.n	80015a0 <weoDrawRectangleFilled+0x2e8>
 80012f2:	1dbb      	adds	r3, r7, #6
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	b25b      	sxtb	r3, r3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	da00      	bge.n	80012fe <weoDrawRectangleFilled+0x46>
 80012fc:	e150      	b.n	80015a0 <weoDrawRectangleFilled+0x2e8>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 80012fe:	1d7b      	adds	r3, r7, #5
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	b25b      	sxtb	r3, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	da00      	bge.n	800130a <weoDrawRectangleFilled+0x52>
 8001308:	e14a      	b.n	80015a0 <weoDrawRectangleFilled+0x2e8>
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b25b      	sxtb	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	da00      	bge.n	8001316 <weoDrawRectangleFilled+0x5e>
 8001314:	e144      	b.n	80015a0 <weoDrawRectangleFilled+0x2e8>
				return;
			}

			start_x_New=start_x;
 8001316:	230d      	movs	r3, #13
 8001318:	18fb      	adds	r3, r7, r3
 800131a:	1dfa      	adds	r2, r7, #7
 800131c:	7812      	ldrb	r2, [r2, #0]
 800131e:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 8001320:	230c      	movs	r3, #12
 8001322:	18fb      	adds	r3, r7, r3
 8001324:	1d3a      	adds	r2, r7, #4
 8001326:	7812      	ldrb	r2, [r2, #0]
 8001328:	217f      	movs	r1, #127	; 0x7f
 800132a:	1a8a      	subs	r2, r1, r2
 800132c:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 800132e:	230b      	movs	r3, #11
 8001330:	18fb      	adds	r3, r7, r3
 8001332:	1d7a      	adds	r2, r7, #5
 8001334:	7812      	ldrb	r2, [r2, #0]
 8001336:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 8001338:	230a      	movs	r3, #10
 800133a:	18fb      	adds	r3, r7, r3
 800133c:	1dba      	adds	r2, r7, #6
 800133e:	7812      	ldrb	r2, [r2, #0]
 8001340:	217f      	movs	r1, #127	; 0x7f
 8001342:	1a8a      	subs	r2, r1, r2
 8001344:	701a      	strb	r2, [r3, #0]

			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New /2 - start_y_New/2 + 1));
 8001346:	230e      	movs	r3, #14
 8001348:	18fb      	adds	r3, r7, r3
 800134a:	2200      	movs	r2, #0
 800134c:	801a      	strh	r2, [r3, #0]
 800134e:	e054      	b.n	80013fa <weoDrawRectangleFilled+0x142>
			i++) {
//			for (i = 0; i < 8192;i++) {
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x55) << 1
 8001350:	200e      	movs	r0, #14
 8001352:	183b      	adds	r3, r7, r0
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001358:	18d3      	adds	r3, r2, r3
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	b25b      	sxtb	r3, r3
 8001360:	2255      	movs	r2, #85	; 0x55
 8001362:	4393      	bics	r3, r2
 8001364:	b25a      	sxtb	r2, r3
				| (MEM_Buffer[i] & 0xAA) >> 1;
 8001366:	183b      	adds	r3, r7, r0
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800136c:	18cb      	adds	r3, r1, r3
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	105b      	asrs	r3, r3, #1
 8001372:	b25b      	sxtb	r3, r3
 8001374:	2155      	movs	r1, #85	; 0x55
 8001376:	400b      	ands	r3, r1
 8001378:	b25b      	sxtb	r3, r3
 800137a:	4313      	orrs	r3, r2
 800137c:	b259      	sxtb	r1, r3
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x55) << 1
 800137e:	183b      	adds	r3, r7, r0
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001384:	18d3      	adds	r3, r2, r3
				| (MEM_Buffer[i] & 0xAA) >> 1;
 8001386:	b2ca      	uxtb	r2, r1
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x55) << 1
 8001388:	701a      	strb	r2, [r3, #0]
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x33) << 2
 800138a:	183b      	adds	r3, r7, r0
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001390:	18d3      	adds	r3, r2, r3
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	b25b      	sxtb	r3, r3
 8001398:	2233      	movs	r2, #51	; 0x33
 800139a:	4393      	bics	r3, r2
 800139c:	b25a      	sxtb	r2, r3
				| (MEM_Buffer[i] & 0xCC) >> 2;
 800139e:	183b      	adds	r3, r7, r0
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013a4:	18cb      	adds	r3, r1, r3
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	109b      	asrs	r3, r3, #2
 80013aa:	b25b      	sxtb	r3, r3
 80013ac:	2133      	movs	r1, #51	; 0x33
 80013ae:	400b      	ands	r3, r1
 80013b0:	b25b      	sxtb	r3, r3
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b259      	sxtb	r1, r3
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x33) << 2
 80013b6:	183b      	adds	r3, r7, r0
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013bc:	18d3      	adds	r3, r2, r3
				| (MEM_Buffer[i] & 0xCC) >> 2;
 80013be:	b2ca      	uxtb	r2, r1
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x33) << 2
 80013c0:	701a      	strb	r2, [r3, #0]
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x0F) << 4
 80013c2:	183b      	adds	r3, r7, r0
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c8:	18d3      	adds	r3, r2, r3
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	011b      	lsls	r3, r3, #4
				| (MEM_Buffer[i] & 0xF0) >> 4;
 80013ce:	b25a      	sxtb	r2, r3
 80013d0:	183b      	adds	r3, r7, r0
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013d6:	18cb      	adds	r3, r1, r3
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	091b      	lsrs	r3, r3, #4
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	b25b      	sxtb	r3, r3
 80013e0:	4313      	orrs	r3, r2
 80013e2:	b259      	sxtb	r1, r3
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x0F) << 4
 80013e4:	183b      	adds	r3, r7, r0
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ea:	18d3      	adds	r3, r2, r3
				| (MEM_Buffer[i] & 0xF0) >> 4;
 80013ec:	b2ca      	uxtb	r2, r1
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x0F) << 4
 80013ee:	701a      	strb	r2, [r3, #0]
			i++) {
 80013f0:	183b      	adds	r3, r7, r0
 80013f2:	881a      	ldrh	r2, [r3, #0]
 80013f4:	183b      	adds	r3, r7, r0
 80013f6:	3201      	adds	r2, #1
 80013f8:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New /2 - start_y_New/2 + 1));
 80013fa:	230e      	movs	r3, #14
 80013fc:	18fb      	adds	r3, r7, r3
 80013fe:	881a      	ldrh	r2, [r3, #0]
 8001400:	230b      	movs	r3, #11
 8001402:	18fb      	adds	r3, r7, r3
 8001404:	7819      	ldrb	r1, [r3, #0]
 8001406:	230d      	movs	r3, #13
 8001408:	18fb      	adds	r3, r7, r3
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	1acb      	subs	r3, r1, r3
 800140e:	3301      	adds	r3, #1
 8001410:	210a      	movs	r1, #10
 8001412:	1879      	adds	r1, r7, r1
 8001414:	7809      	ldrb	r1, [r1, #0]
 8001416:	0849      	lsrs	r1, r1, #1
 8001418:	b2c9      	uxtb	r1, r1
 800141a:	0008      	movs	r0, r1
 800141c:	210c      	movs	r1, #12
 800141e:	1879      	adds	r1, r7, r1
 8001420:	7809      	ldrb	r1, [r1, #0]
 8001422:	0849      	lsrs	r1, r1, #1
 8001424:	b2c9      	uxtb	r1, r1
 8001426:	1a41      	subs	r1, r0, r1
 8001428:	3101      	adds	r1, #1
 800142a:	434b      	muls	r3, r1
 800142c:	429a      	cmp	r2, r3
 800142e:	db8f      	blt.n	8001350 <weoDrawRectangleFilled+0x98>
			}
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001430:	23a0      	movs	r3, #160	; 0xa0
 8001432:	05db      	lsls	r3, r3, #23
 8001434:	695a      	ldr	r2, [r3, #20]
 8001436:	23a0      	movs	r3, #160	; 0xa0
 8001438:	05db      	lsls	r3, r3, #23
 800143a:	2140      	movs	r1, #64	; 0x40
 800143c:	438a      	bics	r2, r1
 800143e:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001440:	23a0      	movs	r3, #160	; 0xa0
 8001442:	05db      	lsls	r3, r3, #23
 8001444:	695a      	ldr	r2, [r3, #20]
 8001446:	23a0      	movs	r3, #160	; 0xa0
 8001448:	05db      	lsls	r3, r3, #23
 800144a:	2180      	movs	r1, #128	; 0x80
 800144c:	438a      	bics	r2, r1
 800144e:	615a      	str	r2, [r3, #20]
			USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 8001450:	2075      	movs	r0, #117	; 0x75
 8001452:	f7ff fe1d 	bl	8001090 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 8001456:	230d      	movs	r3, #13
 8001458:	18fb      	adds	r3, r7, r3
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	0018      	movs	r0, r3
 800145e:	f7ff fe17 	bl	8001090 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 8001462:	230b      	movs	r3, #11
 8001464:	18fb      	adds	r3, r7, r3
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	0018      	movs	r0, r3
 800146a:	f7ff fe11 	bl	8001090 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 800146e:	2015      	movs	r0, #21
 8001470:	f7ff fe0e 	bl	8001090 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 8001474:	230c      	movs	r3, #12
 8001476:	18fb      	adds	r3, r7, r3
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	085b      	lsrs	r3, r3, #1
 800147c:	b2db      	uxtb	r3, r3
 800147e:	0018      	movs	r0, r3
 8001480:	f7ff fe06 	bl	8001090 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 8001484:	230a      	movs	r3, #10
 8001486:	18fb      	adds	r3, r7, r3
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	085b      	lsrs	r3, r3, #1
 800148c:	b2db      	uxtb	r3, r3
 800148e:	0018      	movs	r0, r3
 8001490:	f7ff fdfe 	bl	8001090 <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 8001494:	23a0      	movs	r3, #160	; 0xa0
 8001496:	05db      	lsls	r3, r3, #23
 8001498:	695a      	ldr	r2, [r3, #20]
 800149a:	23a0      	movs	r3, #160	; 0xa0
 800149c:	05db      	lsls	r3, r3, #23
 800149e:	2180      	movs	r1, #128	; 0x80
 80014a0:	430a      	orrs	r2, r1
 80014a2:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 80014a4:	23a0      	movs	r3, #160	; 0xa0
 80014a6:	05db      	lsls	r3, r3, #23
 80014a8:	695a      	ldr	r2, [r3, #20]
 80014aa:	23a0      	movs	r3, #160	; 0xa0
 80014ac:	05db      	lsls	r3, r3, #23
 80014ae:	2140      	movs	r1, #64	; 0x40
 80014b0:	430a      	orrs	r2, r1
 80014b2:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80014b4:	23a0      	movs	r3, #160	; 0xa0
 80014b6:	05db      	lsls	r3, r3, #23
 80014b8:	695a      	ldr	r2, [r3, #20]
 80014ba:	23a0      	movs	r3, #160	; 0xa0
 80014bc:	05db      	lsls	r3, r3, #23
 80014be:	2140      	movs	r1, #64	; 0x40
 80014c0:	438a      	bics	r2, r1
 80014c2:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 80014c4:	23a0      	movs	r3, #160	; 0xa0
 80014c6:	05db      	lsls	r3, r3, #23
 80014c8:	695a      	ldr	r2, [r3, #20]
 80014ca:	23a0      	movs	r3, #160	; 0xa0
 80014cc:	05db      	lsls	r3, r3, #23
 80014ce:	2180      	movs	r1, #128	; 0x80
 80014d0:	430a      	orrs	r2, r1
 80014d2:	615a      	str	r2, [r3, #20]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));
 80014d4:	230e      	movs	r3, #14
 80014d6:	18fb      	adds	r3, r7, r3
 80014d8:	2200      	movs	r2, #0
 80014da:	801a      	strh	r2, [r3, #0]
 80014dc:	e00e      	b.n	80014fc <weoDrawRectangleFilled+0x244>
					i++) {
				HAL_USART_Transmit(&husart3, (uint8_t*) &MEM_Buffer[i], 1, 1);
 80014de:	240e      	movs	r4, #14
 80014e0:	193b      	adds	r3, r7, r4
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e6:	18d1      	adds	r1, r2, r3
 80014e8:	482f      	ldr	r0, [pc, #188]	; (80015a8 <weoDrawRectangleFilled+0x2f0>)
 80014ea:	2301      	movs	r3, #1
 80014ec:	2201      	movs	r2, #1
 80014ee:	f007 f81b 	bl	8008528 <HAL_USART_Transmit>
					i++) {
 80014f2:	193b      	adds	r3, r7, r4
 80014f4:	881a      	ldrh	r2, [r3, #0]
 80014f6:	193b      	adds	r3, r7, r4
 80014f8:	3201      	adds	r2, #1
 80014fa:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));
 80014fc:	230e      	movs	r3, #14
 80014fe:	18fb      	adds	r3, r7, r3
 8001500:	881a      	ldrh	r2, [r3, #0]
 8001502:	230b      	movs	r3, #11
 8001504:	18fb      	adds	r3, r7, r3
 8001506:	7819      	ldrb	r1, [r3, #0]
 8001508:	230d      	movs	r3, #13
 800150a:	18fb      	adds	r3, r7, r3
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	1acb      	subs	r3, r1, r3
 8001510:	3301      	adds	r3, #1
 8001512:	210a      	movs	r1, #10
 8001514:	1879      	adds	r1, r7, r1
 8001516:	7809      	ldrb	r1, [r1, #0]
 8001518:	0849      	lsrs	r1, r1, #1
 800151a:	b2c9      	uxtb	r1, r1
 800151c:	0008      	movs	r0, r1
 800151e:	210c      	movs	r1, #12
 8001520:	1879      	adds	r1, r7, r1
 8001522:	7809      	ldrb	r1, [r1, #0]
 8001524:	0849      	lsrs	r1, r1, #1
 8001526:	b2c9      	uxtb	r1, r1
 8001528:	1a41      	subs	r1, r0, r1
 800152a:	3101      	adds	r1, #1
 800152c:	434b      	muls	r3, r1
 800152e:	429a      	cmp	r2, r3
 8001530:	dbd5      	blt.n	80014de <weoDrawRectangleFilled+0x226>
			}
			GPIOA->ODR &= ~(1 << 7);	//reset dc
 8001532:	23a0      	movs	r3, #160	; 0xa0
 8001534:	05db      	lsls	r3, r3, #23
 8001536:	695a      	ldr	r2, [r3, #20]
 8001538:	23a0      	movs	r3, #160	; 0xa0
 800153a:	05db      	lsls	r3, r3, #23
 800153c:	2180      	movs	r1, #128	; 0x80
 800153e:	438a      	bics	r2, r1
 8001540:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 8001542:	23a0      	movs	r3, #160	; 0xa0
 8001544:	05db      	lsls	r3, r3, #23
 8001546:	695a      	ldr	r2, [r3, #20]
 8001548:	23a0      	movs	r3, #160	; 0xa0
 800154a:	05db      	lsls	r3, r3, #23
 800154c:	2140      	movs	r1, #64	; 0x40
 800154e:	430a      	orrs	r2, r1
 8001550:	615a      	str	r2, [r3, #20]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));
 8001552:	230e      	movs	r3, #14
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	2200      	movs	r2, #0
 8001558:	801a      	strh	r2, [r3, #0]
 800155a:	e005      	b.n	8001568 <weoDrawRectangleFilled+0x2b0>
								i++) {
 800155c:	210e      	movs	r1, #14
 800155e:	187b      	adds	r3, r7, r1
 8001560:	881a      	ldrh	r2, [r3, #0]
 8001562:	187b      	adds	r3, r7, r1
 8001564:	3201      	adds	r2, #1
 8001566:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));
 8001568:	230e      	movs	r3, #14
 800156a:	18fb      	adds	r3, r7, r3
 800156c:	881a      	ldrh	r2, [r3, #0]
 800156e:	230b      	movs	r3, #11
 8001570:	18fb      	adds	r3, r7, r3
 8001572:	7819      	ldrb	r1, [r3, #0]
 8001574:	230d      	movs	r3, #13
 8001576:	18fb      	adds	r3, r7, r3
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	1acb      	subs	r3, r1, r3
 800157c:	3301      	adds	r3, #1
 800157e:	210a      	movs	r1, #10
 8001580:	1879      	adds	r1, r7, r1
 8001582:	7809      	ldrb	r1, [r1, #0]
 8001584:	0849      	lsrs	r1, r1, #1
 8001586:	b2c9      	uxtb	r1, r1
 8001588:	0008      	movs	r0, r1
 800158a:	210c      	movs	r1, #12
 800158c:	1879      	adds	r1, r7, r1
 800158e:	7809      	ldrb	r1, [r1, #0]
 8001590:	0849      	lsrs	r1, r1, #1
 8001592:	b2c9      	uxtb	r1, r1
 8001594:	1a41      	subs	r1, r0, r1
 8001596:	3101      	adds	r1, #1
 8001598:	434b      	muls	r3, r1
 800159a:	429a      	cmp	r2, r3
 800159c:	dbde      	blt.n	800155c <weoDrawRectangleFilled+0x2a4>
 800159e:	e000      	b.n	80015a2 <weoDrawRectangleFilled+0x2ea>
				return;
 80015a0:	46c0      	nop			; (mov r8, r8)
						}
		}
 80015a2:	46bd      	mov	sp, r7
 80015a4:	b004      	add	sp, #16
 80015a6:	bdb0      	pop	{r4, r5, r7, pc}
 80015a8:	200032b8 	.word	0x200032b8

080015ac <answer2CPU>:
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000)
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1)
	}
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 80015b4:	230f      	movs	r3, #15
 80015b6:	18fb      	adds	r3, r7, r3
 80015b8:	22ff      	movs	r2, #255	; 0xff
 80015ba:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 80015bc:	230d      	movs	r3, #13
 80015be:	18fb      	adds	r3, r7, r3
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		uint16_t ind = 0;
 80015c4:	230a      	movs	r3, #10
 80015c6:	18fb      	adds	r3, r7, r3
 80015c8:	2200      	movs	r2, #0
 80015ca:	801a      	strh	r2, [r3, #0]
			ans[0] = cmd[0]|0x80;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2280      	movs	r2, #128	; 0x80
 80015d2:	4252      	negs	r2, r2
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	b29a      	uxth	r2, r3
 80015da:	4bcc      	ldr	r3, [pc, #816]	; (800190c <answer2CPU+0x360>)
 80015dc:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b0f      	cmp	r3, #15
 80015e4:	d800      	bhi.n	80015e8 <answer2CPU+0x3c>
 80015e6:	e160      	b.n	80018aa <answer2CPU+0x2fe>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b15      	cmp	r3, #21
 80015ee:	d900      	bls.n	80015f2 <answer2CPU+0x46>
 80015f0:	e15b      	b.n	80018aa <answer2CPU+0x2fe>
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 80015f2:	23a0      	movs	r3, #160	; 0xa0
 80015f4:	05db      	lsls	r3, r3, #23
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	2201      	movs	r2, #1
 80015fa:	4013      	ands	r3, r2
 80015fc:	d106      	bne.n	800160c <answer2CPU+0x60>
					keyboard &= 0b11111110;
 80015fe:	220f      	movs	r2, #15
 8001600:	18bb      	adds	r3, r7, r2
 8001602:	18ba      	adds	r2, r7, r2
 8001604:	7812      	ldrb	r2, [r2, #0]
 8001606:	2101      	movs	r1, #1
 8001608:	438a      	bics	r2, r1
 800160a:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 800160c:	23a0      	movs	r3, #160	; 0xa0
 800160e:	05db      	lsls	r3, r3, #23
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	2202      	movs	r2, #2
 8001614:	4013      	ands	r3, r2
 8001616:	d106      	bne.n	8001626 <answer2CPU+0x7a>
					keyboard &= 0b11111101;
 8001618:	220f      	movs	r2, #15
 800161a:	18bb      	adds	r3, r7, r2
 800161c:	18ba      	adds	r2, r7, r2
 800161e:	7812      	ldrb	r2, [r2, #0]
 8001620:	2102      	movs	r1, #2
 8001622:	438a      	bics	r2, r1
 8001624:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 8001626:	23a0      	movs	r3, #160	; 0xa0
 8001628:	05db      	lsls	r3, r3, #23
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	2210      	movs	r2, #16
 800162e:	4013      	ands	r3, r2
 8001630:	d106      	bne.n	8001640 <answer2CPU+0x94>
					keyboard &= 0b11111011;
 8001632:	220f      	movs	r2, #15
 8001634:	18bb      	adds	r3, r7, r2
 8001636:	18ba      	adds	r2, r7, r2
 8001638:	7812      	ldrb	r2, [r2, #0]
 800163a:	2104      	movs	r1, #4
 800163c:	438a      	bics	r2, r1
 800163e:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 8001640:	23a0      	movs	r3, #160	; 0xa0
 8001642:	05db      	lsls	r3, r3, #23
 8001644:	691a      	ldr	r2, [r3, #16]
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	019b      	lsls	r3, r3, #6
 800164a:	4013      	ands	r3, r2
 800164c:	d106      	bne.n	800165c <answer2CPU+0xb0>
					keyboard &= 0b11110111;
 800164e:	220f      	movs	r2, #15
 8001650:	18bb      	adds	r3, r7, r2
 8001652:	18ba      	adds	r2, r7, r2
 8001654:	7812      	ldrb	r2, [r2, #0]
 8001656:	2108      	movs	r1, #8
 8001658:	438a      	bics	r2, r1
 800165a:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 800165c:	23a0      	movs	r3, #160	; 0xa0
 800165e:	05db      	lsls	r3, r3, #23
 8001660:	691a      	ldr	r2, [r3, #16]
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	01db      	lsls	r3, r3, #7
 8001666:	4013      	ands	r3, r2
 8001668:	d106      	bne.n	8001678 <answer2CPU+0xcc>
					keyboard &= 0b11101111;
 800166a:	220f      	movs	r2, #15
 800166c:	18bb      	adds	r3, r7, r2
 800166e:	18ba      	adds	r2, r7, r2
 8001670:	7812      	ldrb	r2, [r2, #0]
 8001672:	2110      	movs	r1, #16
 8001674:	438a      	bics	r2, r1
 8001676:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 8001678:	210f      	movs	r1, #15
 800167a:	187b      	adds	r3, r7, r1
 800167c:	187a      	adds	r2, r7, r1
 800167e:	7812      	ldrb	r2, [r2, #0]
 8001680:	43d2      	mvns	r2, r2
 8001682:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 8001684:	2009      	movs	r0, #9
 8001686:	183b      	adds	r3, r7, r0
 8001688:	2204      	movs	r2, #4
 800168a:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 800168c:	183b      	adds	r3, r7, r0
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b29b      	uxth	r3, r3
 8001692:	3b02      	subs	r3, #2
 8001694:	b29a      	uxth	r2, r3
 8001696:	4b9d      	ldr	r3, [pc, #628]	; (800190c <answer2CPU+0x360>)
 8001698:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 800169a:	187b      	adds	r3, r7, r1
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b29a      	uxth	r2, r3
 80016a0:	4b9a      	ldr	r3, [pc, #616]	; (800190c <answer2CPU+0x360>)
 80016a2:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 80016a4:	230e      	movs	r3, #14
 80016a6:	18fb      	adds	r3, r7, r3
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
 80016ac:	e011      	b.n	80016d2 <answer2CPU+0x126>
					myCS = myCS + ans[i];
 80016ae:	200e      	movs	r0, #14
 80016b0:	183b      	adds	r3, r7, r0
 80016b2:	781a      	ldrb	r2, [r3, #0]
 80016b4:	4b95      	ldr	r3, [pc, #596]	; (800190c <answer2CPU+0x360>)
 80016b6:	0052      	lsls	r2, r2, #1
 80016b8:	5ad3      	ldrh	r3, [r2, r3]
 80016ba:	b2d9      	uxtb	r1, r3
 80016bc:	220d      	movs	r2, #13
 80016be:	18bb      	adds	r3, r7, r2
 80016c0:	18ba      	adds	r2, r7, r2
 80016c2:	7812      	ldrb	r2, [r2, #0]
 80016c4:	188a      	adds	r2, r1, r2
 80016c6:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 80016c8:	183b      	adds	r3, r7, r0
 80016ca:	781a      	ldrb	r2, [r3, #0]
 80016cc:	183b      	adds	r3, r7, r0
 80016ce:	3201      	adds	r2, #1
 80016d0:	701a      	strb	r2, [r3, #0]
 80016d2:	230e      	movs	r3, #14
 80016d4:	18fb      	adds	r3, r7, r3
 80016d6:	781a      	ldrb	r2, [r3, #0]
 80016d8:	2309      	movs	r3, #9
 80016da:	18fb      	adds	r3, r7, r3
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	3b01      	subs	r3, #1
 80016e0:	429a      	cmp	r2, r3
 80016e2:	dbe4      	blt.n	80016ae <answer2CPU+0x102>
				}
				myCS = 0 - myCS;
 80016e4:	210d      	movs	r1, #13
 80016e6:	187b      	adds	r3, r7, r1
 80016e8:	187a      	adds	r2, r7, r1
 80016ea:	7812      	ldrb	r2, [r2, #0]
 80016ec:	4252      	negs	r2, r2
 80016ee:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 80016f0:	187b      	adds	r3, r7, r1
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	4b85      	ldr	r3, [pc, #532]	; (800190c <answer2CPU+0x360>)
 80016f8:	80da      	strh	r2, [r3, #6]
				i=0;
 80016fa:	230e      	movs	r3, #14
 80016fc:	18fb      	adds	r3, r7, r3
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	4b82      	ldr	r3, [pc, #520]	; (8001910 <answer2CPU+0x364>)
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	2280      	movs	r2, #128	; 0x80
 800170a:	4013      	ands	r3, r2
 800170c:	d0fa      	beq.n	8001704 <answer2CPU+0x158>
				USART2->TDR = ans[0]|0x0100;
 800170e:	4b7f      	ldr	r3, [pc, #508]	; (800190c <answer2CPU+0x360>)
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	2280      	movs	r2, #128	; 0x80
 8001714:	0052      	lsls	r2, r2, #1
 8001716:	4313      	orrs	r3, r2
 8001718:	b29a      	uxth	r2, r3
 800171a:	4b7d      	ldr	r3, [pc, #500]	; (8001910 <answer2CPU+0x364>)
 800171c:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 800171e:	230e      	movs	r3, #14
 8001720:	18fb      	adds	r3, r7, r3
 8001722:	2201      	movs	r2, #1
 8001724:	701a      	strb	r2, [r3, #0]
 8001726:	e013      	b.n	8001750 <answer2CPU+0x1a4>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001728:	46c0      	nop			; (mov r8, r8)
 800172a:	4b79      	ldr	r3, [pc, #484]	; (8001910 <answer2CPU+0x364>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	2280      	movs	r2, #128	; 0x80
 8001730:	4013      	ands	r3, r2
 8001732:	d0fa      	beq.n	800172a <answer2CPU+0x17e>
				    USART2->TDR = (uint8_t)ans[i];
 8001734:	210e      	movs	r1, #14
 8001736:	187b      	adds	r3, r7, r1
 8001738:	781a      	ldrb	r2, [r3, #0]
 800173a:	4b74      	ldr	r3, [pc, #464]	; (800190c <answer2CPU+0x360>)
 800173c:	0052      	lsls	r2, r2, #1
 800173e:	5ad3      	ldrh	r3, [r2, r3]
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4b73      	ldr	r3, [pc, #460]	; (8001910 <answer2CPU+0x364>)
 8001744:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001746:	187b      	adds	r3, r7, r1
 8001748:	781a      	ldrb	r2, [r3, #0]
 800174a:	187b      	adds	r3, r7, r1
 800174c:	3201      	adds	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]
 8001750:	230e      	movs	r3, #14
 8001752:	18fa      	adds	r2, r7, r3
 8001754:	2309      	movs	r3, #9
 8001756:	18fb      	adds	r3, r7, r3
 8001758:	7812      	ldrb	r2, [r2, #0]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d3e3      	bcc.n	8001728 <answer2CPU+0x17c>
				  }
//=======================================================================================================================================
				if (cmd[0] == 0x11) {             //Show full screen background;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b11      	cmp	r3, #17
 8001766:	d10c      	bne.n	8001782 <answer2CPU+0x1d6>
					picNum = cmd[2];
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	789a      	ldrb	r2, [r3, #2]
 800176c:	4b69      	ldr	r3, [pc, #420]	; (8001914 <answer2CPU+0x368>)
 800176e:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 8001770:	4b69      	ldr	r3, [pc, #420]	; (8001918 <answer2CPU+0x36c>)
 8001772:	2211      	movs	r2, #17
 8001774:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	22ff      	movs	r2, #255	; 0xff
 800177a:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 800177c:	4b67      	ldr	r3, [pc, #412]	; (800191c <answer2CPU+0x370>)
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b12      	cmp	r3, #18
 8001788:	d118      	bne.n	80017bc <answer2CPU+0x210>
					imX = cmd[2];
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3302      	adds	r3, #2
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	001a      	movs	r2, r3
 8001792:	4b63      	ldr	r3, [pc, #396]	; (8001920 <answer2CPU+0x374>)
 8001794:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3303      	adds	r3, #3
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	001a      	movs	r2, r3
 800179e:	4b61      	ldr	r3, [pc, #388]	; (8001924 <answer2CPU+0x378>)
 80017a0:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	791a      	ldrb	r2, [r3, #4]
 80017a6:	4b5b      	ldr	r3, [pc, #364]	; (8001914 <answer2CPU+0x368>)
 80017a8:	701a      	strb	r2, [r3, #0]
//					showSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 80017aa:	4b5b      	ldr	r3, [pc, #364]	; (8001918 <answer2CPU+0x36c>)
 80017ac:	2212      	movs	r2, #18
 80017ae:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	22ff      	movs	r2, #255	; 0xff
 80017b4:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 80017b6:	4b59      	ldr	r3, [pc, #356]	; (800191c <answer2CPU+0x370>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b13      	cmp	r3, #19
 80017c2:	d137      	bne.n	8001834 <answer2CPU+0x288>
					imX = cmd[2];
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3302      	adds	r3, #2
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	001a      	movs	r2, r3
 80017cc:	4b54      	ldr	r3, [pc, #336]	; (8001920 <answer2CPU+0x374>)
 80017ce:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3303      	adds	r3, #3
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	001a      	movs	r2, r3
 80017d8:	4b52      	ldr	r3, [pc, #328]	; (8001924 <answer2CPU+0x378>)
 80017da:	601a      	str	r2, [r3, #0]
					strLen = cmd[1] -0x03;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3301      	adds	r3, #1
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	3b03      	subs	r3, #3
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4b50      	ldr	r3, [pc, #320]	; (8001928 <answer2CPU+0x37c>)
 80017e8:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 80017ea:	230e      	movs	r3, #14
 80017ec:	18fb      	adds	r3, r7, r3
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
 80017f2:	e00f      	b.n	8001814 <answer2CPU+0x268>
					dataASCII[i] = cmd[i+4];
 80017f4:	200e      	movs	r0, #14
 80017f6:	183b      	adds	r3, r7, r0
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	3304      	adds	r3, #4
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	18d2      	adds	r2, r2, r3
 8001800:	183b      	adds	r3, r7, r0
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	7811      	ldrb	r1, [r2, #0]
 8001806:	4a49      	ldr	r2, [pc, #292]	; (800192c <answer2CPU+0x380>)
 8001808:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 800180a:	183b      	adds	r3, r7, r0
 800180c:	781a      	ldrb	r2, [r3, #0]
 800180e:	183b      	adds	r3, r7, r0
 8001810:	3201      	adds	r2, #1
 8001812:	701a      	strb	r2, [r3, #0]
 8001814:	4b44      	ldr	r3, [pc, #272]	; (8001928 <answer2CPU+0x37c>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	220e      	movs	r2, #14
 800181a:	18ba      	adds	r2, r7, r2
 800181c:	7812      	ldrb	r2, [r2, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d3e8      	bcc.n	80017f4 <answer2CPU+0x248>
				}
					cmd2Execute=0x13;
 8001822:	4b3d      	ldr	r3, [pc, #244]	; (8001918 <answer2CPU+0x36c>)
 8001824:	2213      	movs	r2, #19
 8001826:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	22ff      	movs	r2, #255	; 0xff
 800182c:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 800182e:	4b3b      	ldr	r3, [pc, #236]	; (800191c <answer2CPU+0x370>)
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b14      	cmp	r3, #20
 800183a:	d10c      	bne.n	8001856 <answer2CPU+0x2aa>
					numSound = cmd[3];
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	78da      	ldrb	r2, [r3, #3]
 8001840:	4b3b      	ldr	r3, [pc, #236]	; (8001930 <answer2CPU+0x384>)
 8001842:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 8001844:	4b34      	ldr	r3, [pc, #208]	; (8001918 <answer2CPU+0x36c>)
 8001846:	2214      	movs	r2, #20
 8001848:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	22ff      	movs	r2, #255	; 0xff
 800184e:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 8001850:	4b32      	ldr	r3, [pc, #200]	; (800191c <answer2CPU+0x370>)
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b15      	cmp	r3, #21
 800185c:	d110      	bne.n	8001880 <answer2CPU+0x2d4>
					volume = cmd[3];
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	78da      	ldrb	r2, [r3, #3]
 8001862:	4b34      	ldr	r3, [pc, #208]	; (8001934 <answer2CPU+0x388>)
 8001864:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	791a      	ldrb	r2, [r3, #4]
 800186a:	4b33      	ldr	r3, [pc, #204]	; (8001938 <answer2CPU+0x38c>)
 800186c:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 800186e:	4b2a      	ldr	r3, [pc, #168]	; (8001918 <answer2CPU+0x36c>)
 8001870:	2215      	movs	r2, #21
 8001872:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	22ff      	movs	r2, #255	; 0xff
 8001878:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 800187a:	4b28      	ldr	r3, [pc, #160]	; (800191c <answer2CPU+0x370>)
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b16      	cmp	r3, #22
 8001886:	d110      	bne.n	80018aa <answer2CPU+0x2fe>
					volume = cmd[3];
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	78da      	ldrb	r2, [r3, #3]
 800188c:	4b29      	ldr	r3, [pc, #164]	; (8001934 <answer2CPU+0x388>)
 800188e:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	791a      	ldrb	r2, [r3, #4]
 8001894:	4b28      	ldr	r3, [pc, #160]	; (8001938 <answer2CPU+0x38c>)
 8001896:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 8001898:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <answer2CPU+0x36c>)
 800189a:	2216      	movs	r2, #22
 800189c:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	22ff      	movs	r2, #255	; 0xff
 80018a2:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 80018a4:	4b1d      	ldr	r3, [pc, #116]	; (800191c <answer2CPU+0x370>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d000      	beq.n	80018b4 <answer2CPU+0x308>
 80018b2:	e09c      	b.n	80019ee <answer2CPU+0x442>
				myLength = 0x14; //20 bytes length answer
 80018b4:	2109      	movs	r1, #9
 80018b6:	187b      	adds	r3, r7, r1
 80018b8:	2214      	movs	r2, #20
 80018ba:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 80018bc:	187b      	adds	r3, r7, r1
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	3b02      	subs	r3, #2
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <answer2CPU+0x360>)
 80018c8:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 80018ca:	230e      	movs	r3, #14
 80018cc:	18fb      	adds	r3, r7, r3
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
 80018d2:	e010      	b.n	80018f6 <answer2CPU+0x34a>
					ans[i + 2] = PCB_type[i];
 80018d4:	200e      	movs	r0, #14
 80018d6:	183b      	adds	r3, r7, r0
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	4a18      	ldr	r2, [pc, #96]	; (800193c <answer2CPU+0x390>)
 80018dc:	5cd1      	ldrb	r1, [r2, r3]
 80018de:	183b      	adds	r3, r7, r0
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	1c9a      	adds	r2, r3, #2
 80018e4:	b289      	uxth	r1, r1
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <answer2CPU+0x360>)
 80018e8:	0052      	lsls	r2, r2, #1
 80018ea:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 80018ec:	183b      	adds	r3, r7, r0
 80018ee:	781a      	ldrb	r2, [r3, #0]
 80018f0:	183b      	adds	r3, r7, r0
 80018f2:	3201      	adds	r2, #1
 80018f4:	701a      	strb	r2, [r3, #0]
 80018f6:	230e      	movs	r3, #14
 80018f8:	18fb      	adds	r3, r7, r3
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b10      	cmp	r3, #16
 80018fe:	d9e9      	bls.n	80018d4 <answer2CPU+0x328>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001900:	230e      	movs	r3, #14
 8001902:	18fb      	adds	r3, r7, r3
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
 8001908:	e02c      	b.n	8001964 <answer2CPU+0x3b8>
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	200033b8 	.word	0x200033b8
 8001910:	40004400 	.word	0x40004400
 8001914:	20003375 	.word	0x20003375
 8001918:	20003376 	.word	0x20003376
 800191c:	200033cc 	.word	0x200033cc
 8001920:	2000327c 	.word	0x2000327c
 8001924:	200032b4 	.word	0x200032b4
 8001928:	200033b5 	.word	0x200033b5
 800192c:	20003194 	.word	0x20003194
 8001930:	20003434 	.word	0x20003434
 8001934:	2000327a 	.word	0x2000327a
 8001938:	20003318 	.word	0x20003318
 800193c:	20003100 	.word	0x20003100
					myCS = myCS + ans[i];
 8001940:	200e      	movs	r0, #14
 8001942:	183b      	adds	r3, r7, r0
 8001944:	781a      	ldrb	r2, [r3, #0]
 8001946:	4bc1      	ldr	r3, [pc, #772]	; (8001c4c <answer2CPU+0x6a0>)
 8001948:	0052      	lsls	r2, r2, #1
 800194a:	5ad3      	ldrh	r3, [r2, r3]
 800194c:	b2d9      	uxtb	r1, r3
 800194e:	220d      	movs	r2, #13
 8001950:	18bb      	adds	r3, r7, r2
 8001952:	18ba      	adds	r2, r7, r2
 8001954:	7812      	ldrb	r2, [r2, #0]
 8001956:	188a      	adds	r2, r1, r2
 8001958:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 800195a:	183b      	adds	r3, r7, r0
 800195c:	781a      	ldrb	r2, [r3, #0]
 800195e:	183b      	adds	r3, r7, r0
 8001960:	3201      	adds	r2, #1
 8001962:	701a      	strb	r2, [r3, #0]
 8001964:	230e      	movs	r3, #14
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	781a      	ldrb	r2, [r3, #0]
 800196a:	2309      	movs	r3, #9
 800196c:	18fb      	adds	r3, r7, r3
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	3b01      	subs	r3, #1
 8001972:	429a      	cmp	r2, r3
 8001974:	dbe4      	blt.n	8001940 <answer2CPU+0x394>
				}
				myCS = 0 - myCS;
 8001976:	210d      	movs	r1, #13
 8001978:	187b      	adds	r3, r7, r1
 800197a:	187a      	adds	r2, r7, r1
 800197c:	7812      	ldrb	r2, [r2, #0]
 800197e:	4252      	negs	r2, r2
 8001980:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001982:	2309      	movs	r3, #9
 8001984:	18fb      	adds	r3, r7, r3
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	1e5a      	subs	r2, r3, #1
 800198a:	187b      	adds	r3, r7, r1
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	b299      	uxth	r1, r3
 8001990:	4bae      	ldr	r3, [pc, #696]	; (8001c4c <answer2CPU+0x6a0>)
 8001992:	0052      	lsls	r2, r2, #1
 8001994:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	4bad      	ldr	r3, [pc, #692]	; (8001c50 <answer2CPU+0x6a4>)
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	2280      	movs	r2, #128	; 0x80
 800199e:	4013      	ands	r3, r2
 80019a0:	d0fa      	beq.n	8001998 <answer2CPU+0x3ec>
				USART2->TDR = ans[0]|0x0100;
 80019a2:	4baa      	ldr	r3, [pc, #680]	; (8001c4c <answer2CPU+0x6a0>)
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	2280      	movs	r2, #128	; 0x80
 80019a8:	0052      	lsls	r2, r2, #1
 80019aa:	4313      	orrs	r3, r2
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	4ba8      	ldr	r3, [pc, #672]	; (8001c50 <answer2CPU+0x6a4>)
 80019b0:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 80019b2:	e014      	b.n	80019de <answer2CPU+0x432>
				  {
				    i++;
 80019b4:	210e      	movs	r1, #14
 80019b6:	187b      	adds	r3, r7, r1
 80019b8:	781a      	ldrb	r2, [r3, #0]
 80019ba:	187b      	adds	r3, r7, r1
 80019bc:	3201      	adds	r2, #1
 80019be:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 80019c0:	46c0      	nop			; (mov r8, r8)
 80019c2:	4ba3      	ldr	r3, [pc, #652]	; (8001c50 <answer2CPU+0x6a4>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	2280      	movs	r2, #128	; 0x80
 80019c8:	4013      	ands	r3, r2
 80019ca:	d0fa      	beq.n	80019c2 <answer2CPU+0x416>
				    USART2->TDR = (uint8_t)ans[i];
 80019cc:	230e      	movs	r3, #14
 80019ce:	18fb      	adds	r3, r7, r3
 80019d0:	781a      	ldrb	r2, [r3, #0]
 80019d2:	4b9e      	ldr	r3, [pc, #632]	; (8001c4c <answer2CPU+0x6a0>)
 80019d4:	0052      	lsls	r2, r2, #1
 80019d6:	5ad3      	ldrh	r3, [r2, r3]
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	4b9d      	ldr	r3, [pc, #628]	; (8001c50 <answer2CPU+0x6a4>)
 80019dc:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 80019de:	230e      	movs	r3, #14
 80019e0:	18fb      	adds	r3, r7, r3
 80019e2:	781a      	ldrb	r2, [r3, #0]
 80019e4:	4b99      	ldr	r3, [pc, #612]	; (8001c4c <answer2CPU+0x6a0>)
 80019e6:	0052      	lsls	r2, r2, #1
 80019e8:	5ad3      	ldrh	r3, [r2, r3]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1e2      	bne.n	80019b4 <answer2CPU+0x408>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d000      	beq.n	80019f8 <answer2CPU+0x44c>
 80019f6:	e081      	b.n	8001afc <answer2CPU+0x550>
				myLength = 0x0B; //19 bytes length answer
 80019f8:	2109      	movs	r1, #9
 80019fa:	187b      	adds	r3, r7, r1
 80019fc:	220b      	movs	r2, #11
 80019fe:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001a00:	187b      	adds	r3, r7, r1
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	3b02      	subs	r3, #2
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	4b90      	ldr	r3, [pc, #576]	; (8001c4c <answer2CPU+0x6a0>)
 8001a0c:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001a0e:	230e      	movs	r3, #14
 8001a10:	18fb      	adds	r3, r7, r3
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]
 8001a16:	e010      	b.n	8001a3a <answer2CPU+0x48e>
					ans[i + 2] = PCB_rev[i];
 8001a18:	200e      	movs	r0, #14
 8001a1a:	183b      	adds	r3, r7, r0
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	4a8d      	ldr	r2, [pc, #564]	; (8001c54 <answer2CPU+0x6a8>)
 8001a20:	5cd1      	ldrb	r1, [r2, r3]
 8001a22:	183b      	adds	r3, r7, r0
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	1c9a      	adds	r2, r3, #2
 8001a28:	b289      	uxth	r1, r1
 8001a2a:	4b88      	ldr	r3, [pc, #544]	; (8001c4c <answer2CPU+0x6a0>)
 8001a2c:	0052      	lsls	r2, r2, #1
 8001a2e:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001a30:	183b      	adds	r3, r7, r0
 8001a32:	781a      	ldrb	r2, [r3, #0]
 8001a34:	183b      	adds	r3, r7, r0
 8001a36:	3201      	adds	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]
 8001a3a:	230e      	movs	r3, #14
 8001a3c:	18fb      	adds	r3, r7, r3
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b10      	cmp	r3, #16
 8001a42:	d9e9      	bls.n	8001a18 <answer2CPU+0x46c>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001a44:	230e      	movs	r3, #14
 8001a46:	18fb      	adds	r3, r7, r3
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
 8001a4c:	e011      	b.n	8001a72 <answer2CPU+0x4c6>
					myCS = myCS + ans[i];
 8001a4e:	200e      	movs	r0, #14
 8001a50:	183b      	adds	r3, r7, r0
 8001a52:	781a      	ldrb	r2, [r3, #0]
 8001a54:	4b7d      	ldr	r3, [pc, #500]	; (8001c4c <answer2CPU+0x6a0>)
 8001a56:	0052      	lsls	r2, r2, #1
 8001a58:	5ad3      	ldrh	r3, [r2, r3]
 8001a5a:	b2d9      	uxtb	r1, r3
 8001a5c:	220d      	movs	r2, #13
 8001a5e:	18bb      	adds	r3, r7, r2
 8001a60:	18ba      	adds	r2, r7, r2
 8001a62:	7812      	ldrb	r2, [r2, #0]
 8001a64:	188a      	adds	r2, r1, r2
 8001a66:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001a68:	183b      	adds	r3, r7, r0
 8001a6a:	781a      	ldrb	r2, [r3, #0]
 8001a6c:	183b      	adds	r3, r7, r0
 8001a6e:	3201      	adds	r2, #1
 8001a70:	701a      	strb	r2, [r3, #0]
 8001a72:	230e      	movs	r3, #14
 8001a74:	18fb      	adds	r3, r7, r3
 8001a76:	781a      	ldrb	r2, [r3, #0]
 8001a78:	2309      	movs	r3, #9
 8001a7a:	18fb      	adds	r3, r7, r3
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	429a      	cmp	r2, r3
 8001a82:	dbe4      	blt.n	8001a4e <answer2CPU+0x4a2>
				}
				myCS = 0 - myCS;
 8001a84:	210d      	movs	r1, #13
 8001a86:	187b      	adds	r3, r7, r1
 8001a88:	187a      	adds	r2, r7, r1
 8001a8a:	7812      	ldrb	r2, [r2, #0]
 8001a8c:	4252      	negs	r2, r2
 8001a8e:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001a90:	2309      	movs	r3, #9
 8001a92:	18fb      	adds	r3, r7, r3
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	1e5a      	subs	r2, r3, #1
 8001a98:	187b      	adds	r3, r7, r1
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	b299      	uxth	r1, r3
 8001a9e:	4b6b      	ldr	r3, [pc, #428]	; (8001c4c <answer2CPU+0x6a0>)
 8001aa0:	0052      	lsls	r2, r2, #1
 8001aa2:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001aa4:	46c0      	nop			; (mov r8, r8)
 8001aa6:	4b6a      	ldr	r3, [pc, #424]	; (8001c50 <answer2CPU+0x6a4>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	2280      	movs	r2, #128	; 0x80
 8001aac:	4013      	ands	r3, r2
 8001aae:	d0fa      	beq.n	8001aa6 <answer2CPU+0x4fa>
				USART2->TDR = ans[0]|0x0100;
 8001ab0:	4b66      	ldr	r3, [pc, #408]	; (8001c4c <answer2CPU+0x6a0>)
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	2280      	movs	r2, #128	; 0x80
 8001ab6:	0052      	lsls	r2, r2, #1
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	4b64      	ldr	r3, [pc, #400]	; (8001c50 <answer2CPU+0x6a4>)
 8001abe:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001ac0:	e014      	b.n	8001aec <answer2CPU+0x540>
					  {
					    i++;
 8001ac2:	210e      	movs	r1, #14
 8001ac4:	187b      	adds	r3, r7, r1
 8001ac6:	781a      	ldrb	r2, [r3, #0]
 8001ac8:	187b      	adds	r3, r7, r1
 8001aca:	3201      	adds	r2, #1
 8001acc:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	4b5f      	ldr	r3, [pc, #380]	; (8001c50 <answer2CPU+0x6a4>)
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	2280      	movs	r2, #128	; 0x80
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d0fa      	beq.n	8001ad0 <answer2CPU+0x524>
					    USART2->TDR = (uint8_t)ans[i];
 8001ada:	230e      	movs	r3, #14
 8001adc:	18fb      	adds	r3, r7, r3
 8001ade:	781a      	ldrb	r2, [r3, #0]
 8001ae0:	4b5a      	ldr	r3, [pc, #360]	; (8001c4c <answer2CPU+0x6a0>)
 8001ae2:	0052      	lsls	r2, r2, #1
 8001ae4:	5ad3      	ldrh	r3, [r2, r3]
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	4b59      	ldr	r3, [pc, #356]	; (8001c50 <answer2CPU+0x6a4>)
 8001aea:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001aec:	230e      	movs	r3, #14
 8001aee:	18fb      	adds	r3, r7, r3
 8001af0:	781a      	ldrb	r2, [r3, #0]
 8001af2:	4b56      	ldr	r3, [pc, #344]	; (8001c4c <answer2CPU+0x6a0>)
 8001af4:	0052      	lsls	r2, r2, #1
 8001af6:	5ad3      	ldrh	r3, [r2, r3]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1e2      	bne.n	8001ac2 <answer2CPU+0x516>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d000      	beq.n	8001b06 <answer2CPU+0x55a>
 8001b04:	e081      	b.n	8001c0a <answer2CPU+0x65e>
				myLength = 0x13; //19 bytes length answer
 8001b06:	2109      	movs	r1, #9
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	2213      	movs	r2, #19
 8001b0c:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001b0e:	187b      	adds	r3, r7, r1
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	3b02      	subs	r3, #2
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	4b4c      	ldr	r3, [pc, #304]	; (8001c4c <answer2CPU+0x6a0>)
 8001b1a:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001b1c:	230e      	movs	r3, #14
 8001b1e:	18fb      	adds	r3, r7, r3
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
 8001b24:	e010      	b.n	8001b48 <answer2CPU+0x59c>
					ans[i + 2] = EmitterSN[i];
 8001b26:	200e      	movs	r0, #14
 8001b28:	183b      	adds	r3, r7, r0
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4a4a      	ldr	r2, [pc, #296]	; (8001c58 <answer2CPU+0x6ac>)
 8001b2e:	5cd1      	ldrb	r1, [r2, r3]
 8001b30:	183b      	adds	r3, r7, r0
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	1c9a      	adds	r2, r3, #2
 8001b36:	b289      	uxth	r1, r1
 8001b38:	4b44      	ldr	r3, [pc, #272]	; (8001c4c <answer2CPU+0x6a0>)
 8001b3a:	0052      	lsls	r2, r2, #1
 8001b3c:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001b3e:	183b      	adds	r3, r7, r0
 8001b40:	781a      	ldrb	r2, [r3, #0]
 8001b42:	183b      	adds	r3, r7, r0
 8001b44:	3201      	adds	r2, #1
 8001b46:	701a      	strb	r2, [r3, #0]
 8001b48:	230e      	movs	r3, #14
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b10      	cmp	r3, #16
 8001b50:	d9e9      	bls.n	8001b26 <answer2CPU+0x57a>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001b52:	230e      	movs	r3, #14
 8001b54:	18fb      	adds	r3, r7, r3
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]
 8001b5a:	e011      	b.n	8001b80 <answer2CPU+0x5d4>
					myCS = myCS + ans[i];
 8001b5c:	200e      	movs	r0, #14
 8001b5e:	183b      	adds	r3, r7, r0
 8001b60:	781a      	ldrb	r2, [r3, #0]
 8001b62:	4b3a      	ldr	r3, [pc, #232]	; (8001c4c <answer2CPU+0x6a0>)
 8001b64:	0052      	lsls	r2, r2, #1
 8001b66:	5ad3      	ldrh	r3, [r2, r3]
 8001b68:	b2d9      	uxtb	r1, r3
 8001b6a:	220d      	movs	r2, #13
 8001b6c:	18bb      	adds	r3, r7, r2
 8001b6e:	18ba      	adds	r2, r7, r2
 8001b70:	7812      	ldrb	r2, [r2, #0]
 8001b72:	188a      	adds	r2, r1, r2
 8001b74:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001b76:	183b      	adds	r3, r7, r0
 8001b78:	781a      	ldrb	r2, [r3, #0]
 8001b7a:	183b      	adds	r3, r7, r0
 8001b7c:	3201      	adds	r2, #1
 8001b7e:	701a      	strb	r2, [r3, #0]
 8001b80:	230e      	movs	r3, #14
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	781a      	ldrb	r2, [r3, #0]
 8001b86:	2309      	movs	r3, #9
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	dbe4      	blt.n	8001b5c <answer2CPU+0x5b0>
				}
				myCS = 0 - myCS;
 8001b92:	210d      	movs	r1, #13
 8001b94:	187b      	adds	r3, r7, r1
 8001b96:	187a      	adds	r2, r7, r1
 8001b98:	7812      	ldrb	r2, [r2, #0]
 8001b9a:	4252      	negs	r2, r2
 8001b9c:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001b9e:	2309      	movs	r3, #9
 8001ba0:	18fb      	adds	r3, r7, r3
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	1e5a      	subs	r2, r3, #1
 8001ba6:	187b      	adds	r3, r7, r1
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	b299      	uxth	r1, r3
 8001bac:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <answer2CPU+0x6a0>)
 8001bae:	0052      	lsls	r2, r2, #1
 8001bb0:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	4b26      	ldr	r3, [pc, #152]	; (8001c50 <answer2CPU+0x6a4>)
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	2280      	movs	r2, #128	; 0x80
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d0fa      	beq.n	8001bb4 <answer2CPU+0x608>
				USART2->TDR = ans[0]|0x0100;
 8001bbe:	4b23      	ldr	r3, [pc, #140]	; (8001c4c <answer2CPU+0x6a0>)
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	2280      	movs	r2, #128	; 0x80
 8001bc4:	0052      	lsls	r2, r2, #1
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <answer2CPU+0x6a4>)
 8001bcc:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001bce:	e014      	b.n	8001bfa <answer2CPU+0x64e>
				  {
				    i++;
 8001bd0:	210e      	movs	r1, #14
 8001bd2:	187b      	adds	r3, r7, r1
 8001bd4:	781a      	ldrb	r2, [r3, #0]
 8001bd6:	187b      	adds	r3, r7, r1
 8001bd8:	3201      	adds	r2, #1
 8001bda:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001bdc:	46c0      	nop			; (mov r8, r8)
 8001bde:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <answer2CPU+0x6a4>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	2280      	movs	r2, #128	; 0x80
 8001be4:	4013      	ands	r3, r2
 8001be6:	d0fa      	beq.n	8001bde <answer2CPU+0x632>
				    	USART2->TDR = (uint8_t)ans[i];
 8001be8:	230e      	movs	r3, #14
 8001bea:	18fb      	adds	r3, r7, r3
 8001bec:	781a      	ldrb	r2, [r3, #0]
 8001bee:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <answer2CPU+0x6a0>)
 8001bf0:	0052      	lsls	r2, r2, #1
 8001bf2:	5ad3      	ldrh	r3, [r2, r3]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <answer2CPU+0x6a4>)
 8001bf8:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001bfa:	230e      	movs	r3, #14
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	781a      	ldrb	r2, [r3, #0]
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <answer2CPU+0x6a0>)
 8001c02:	0052      	lsls	r2, r2, #1
 8001c04:	5ad3      	ldrh	r3, [r2, r3]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1e2      	bne.n	8001bd0 <answer2CPU+0x624>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d000      	beq.n	8001c14 <answer2CPU+0x668>
 8001c12:	e07c      	b.n	8001d0e <answer2CPU+0x762>
				myLength = 0x04; //4 bytes length answer
 8001c14:	2109      	movs	r1, #9
 8001c16:	187b      	adds	r3, r7, r1
 8001c18:	2204      	movs	r2, #4
 8001c1a:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001c1c:	187b      	adds	r3, r7, r1
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	3b02      	subs	r3, #2
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <answer2CPU+0x6a0>)
 8001c28:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <answer2CPU+0x6b0>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <answer2CPU+0x6a0>)
 8001c32:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001c34:	230d      	movs	r3, #13
 8001c36:	18fb      	adds	r3, r7, r3
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <answer2CPU+0x6a0>)
 8001c3e:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001c40:	230e      	movs	r3, #14
 8001c42:	18fb      	adds	r3, r7, r3
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	e01c      	b.n	8001c84 <answer2CPU+0x6d8>
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	200033b8 	.word	0x200033b8
 8001c50:	40004400 	.word	0x40004400
 8001c54:	20003114 	.word	0x20003114
 8001c58:	20003120 	.word	0x20003120
 8001c5c:	2000311c 	.word	0x2000311c
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001c60:	200e      	movs	r0, #14
 8001c62:	183b      	adds	r3, r7, r0
 8001c64:	781a      	ldrb	r2, [r3, #0]
 8001c66:	4b6e      	ldr	r3, [pc, #440]	; (8001e20 <answer2CPU+0x874>)
 8001c68:	0052      	lsls	r2, r2, #1
 8001c6a:	5ad3      	ldrh	r3, [r2, r3]
 8001c6c:	b2d9      	uxtb	r1, r3
 8001c6e:	220d      	movs	r2, #13
 8001c70:	18bb      	adds	r3, r7, r2
 8001c72:	18ba      	adds	r2, r7, r2
 8001c74:	7812      	ldrb	r2, [r2, #0]
 8001c76:	188a      	adds	r2, r1, r2
 8001c78:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001c7a:	183b      	adds	r3, r7, r0
 8001c7c:	781a      	ldrb	r2, [r3, #0]
 8001c7e:	183b      	adds	r3, r7, r0
 8001c80:	3201      	adds	r2, #1
 8001c82:	701a      	strb	r2, [r3, #0]
 8001c84:	230e      	movs	r3, #14
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	781a      	ldrb	r2, [r3, #0]
 8001c8a:	2309      	movs	r3, #9
 8001c8c:	18fb      	adds	r3, r7, r3
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	3b01      	subs	r3, #1
 8001c92:	429a      	cmp	r2, r3
 8001c94:	dbe4      	blt.n	8001c60 <answer2CPU+0x6b4>
				}
				myCS = 0 - myCS;
 8001c96:	210d      	movs	r1, #13
 8001c98:	187b      	adds	r3, r7, r1
 8001c9a:	187a      	adds	r2, r7, r1
 8001c9c:	7812      	ldrb	r2, [r2, #0]
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001ca2:	2309      	movs	r3, #9
 8001ca4:	18fb      	adds	r3, r7, r3
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	1e5a      	subs	r2, r3, #1
 8001caa:	187b      	adds	r3, r7, r1
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	b299      	uxth	r1, r3
 8001cb0:	4b5b      	ldr	r3, [pc, #364]	; (8001e20 <answer2CPU+0x874>)
 8001cb2:	0052      	lsls	r2, r2, #1
 8001cb4:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	4b5a      	ldr	r3, [pc, #360]	; (8001e24 <answer2CPU+0x878>)
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	2280      	movs	r2, #128	; 0x80
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d0fa      	beq.n	8001cb8 <answer2CPU+0x70c>
					USART2->TDR = ans[0]|0x0100;
 8001cc2:	4b57      	ldr	r3, [pc, #348]	; (8001e20 <answer2CPU+0x874>)
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	2280      	movs	r2, #128	; 0x80
 8001cc8:	0052      	lsls	r2, r2, #1
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	4b55      	ldr	r3, [pc, #340]	; (8001e24 <answer2CPU+0x878>)
 8001cd0:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001cd2:	e014      	b.n	8001cfe <answer2CPU+0x752>
						{
						  i++;
 8001cd4:	210e      	movs	r1, #14
 8001cd6:	187b      	adds	r3, r7, r1
 8001cd8:	781a      	ldrb	r2, [r3, #0]
 8001cda:	187b      	adds	r3, r7, r1
 8001cdc:	3201      	adds	r2, #1
 8001cde:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001ce0:	46c0      	nop			; (mov r8, r8)
 8001ce2:	4b50      	ldr	r3, [pc, #320]	; (8001e24 <answer2CPU+0x878>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	2280      	movs	r2, #128	; 0x80
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d0fa      	beq.n	8001ce2 <answer2CPU+0x736>
						     USART2->TDR = (uint8_t)ans[i];
 8001cec:	230e      	movs	r3, #14
 8001cee:	18fb      	adds	r3, r7, r3
 8001cf0:	781a      	ldrb	r2, [r3, #0]
 8001cf2:	4b4b      	ldr	r3, [pc, #300]	; (8001e20 <answer2CPU+0x874>)
 8001cf4:	0052      	lsls	r2, r2, #1
 8001cf6:	5ad3      	ldrh	r3, [r2, r3]
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4b4a      	ldr	r3, [pc, #296]	; (8001e24 <answer2CPU+0x878>)
 8001cfc:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001cfe:	230e      	movs	r3, #14
 8001d00:	18fb      	adds	r3, r7, r3
 8001d02:	781a      	ldrb	r2, [r3, #0]
 8001d04:	4b46      	ldr	r3, [pc, #280]	; (8001e20 <answer2CPU+0x874>)
 8001d06:	0052      	lsls	r2, r2, #1
 8001d08:	5ad3      	ldrh	r3, [r2, r3]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1e2      	bne.n	8001cd4 <answer2CPU+0x728>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d000      	beq.n	8001d18 <answer2CPU+0x76c>
 8001d16:	e077      	b.n	8001e08 <answer2CPU+0x85c>
				myLength = 0x04; //4 bytes length answer
 8001d18:	2109      	movs	r1, #9
 8001d1a:	187b      	adds	r3, r7, r1
 8001d1c:	2204      	movs	r2, #4
 8001d1e:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001d20:	187b      	adds	r3, r7, r1
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	3b02      	subs	r3, #2
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	4b3d      	ldr	r3, [pc, #244]	; (8001e20 <answer2CPU+0x874>)
 8001d2c:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3302      	adds	r3, #2
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	001a      	movs	r2, r3
 8001d36:	4b3c      	ldr	r3, [pc, #240]	; (8001e28 <answer2CPU+0x87c>)
 8001d38:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 8001d3a:	4b3c      	ldr	r3, [pc, #240]	; (8001e2c <answer2CPU+0x880>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	4b37      	ldr	r3, [pc, #220]	; (8001e20 <answer2CPU+0x874>)
 8001d42:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001d44:	230d      	movs	r3, #13
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	4b34      	ldr	r3, [pc, #208]	; (8001e20 <answer2CPU+0x874>)
 8001d4e:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001d50:	230e      	movs	r3, #14
 8001d52:	18fb      	adds	r3, r7, r3
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
 8001d58:	e011      	b.n	8001d7e <answer2CPU+0x7d2>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001d5a:	200e      	movs	r0, #14
 8001d5c:	183b      	adds	r3, r7, r0
 8001d5e:	781a      	ldrb	r2, [r3, #0]
 8001d60:	4b2f      	ldr	r3, [pc, #188]	; (8001e20 <answer2CPU+0x874>)
 8001d62:	0052      	lsls	r2, r2, #1
 8001d64:	5ad3      	ldrh	r3, [r2, r3]
 8001d66:	b2d9      	uxtb	r1, r3
 8001d68:	220d      	movs	r2, #13
 8001d6a:	18bb      	adds	r3, r7, r2
 8001d6c:	18ba      	adds	r2, r7, r2
 8001d6e:	7812      	ldrb	r2, [r2, #0]
 8001d70:	188a      	adds	r2, r1, r2
 8001d72:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001d74:	183b      	adds	r3, r7, r0
 8001d76:	781a      	ldrb	r2, [r3, #0]
 8001d78:	183b      	adds	r3, r7, r0
 8001d7a:	3201      	adds	r2, #1
 8001d7c:	701a      	strb	r2, [r3, #0]
 8001d7e:	230e      	movs	r3, #14
 8001d80:	18fb      	adds	r3, r7, r3
 8001d82:	781a      	ldrb	r2, [r3, #0]
 8001d84:	2309      	movs	r3, #9
 8001d86:	18fb      	adds	r3, r7, r3
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	dbe4      	blt.n	8001d5a <answer2CPU+0x7ae>
				}
				myCS = 0 - myCS;
 8001d90:	210d      	movs	r1, #13
 8001d92:	187b      	adds	r3, r7, r1
 8001d94:	187a      	adds	r2, r7, r1
 8001d96:	7812      	ldrb	r2, [r2, #0]
 8001d98:	4252      	negs	r2, r2
 8001d9a:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001d9c:	2309      	movs	r3, #9
 8001d9e:	18fb      	adds	r3, r7, r3
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	1e5a      	subs	r2, r3, #1
 8001da4:	187b      	adds	r3, r7, r1
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b299      	uxth	r1, r3
 8001daa:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <answer2CPU+0x874>)
 8001dac:	0052      	lsls	r2, r2, #1
 8001dae:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001db0:	46c0      	nop			; (mov r8, r8)
 8001db2:	4b1c      	ldr	r3, [pc, #112]	; (8001e24 <answer2CPU+0x878>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	2280      	movs	r2, #128	; 0x80
 8001db8:	4013      	ands	r3, r2
 8001dba:	d0fa      	beq.n	8001db2 <answer2CPU+0x806>
				USART2->TDR = ans[0]|0x0100;
 8001dbc:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <answer2CPU+0x874>)
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	2280      	movs	r2, #128	; 0x80
 8001dc2:	0052      	lsls	r2, r2, #1
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <answer2CPU+0x878>)
 8001dca:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001dcc:	e014      	b.n	8001df8 <answer2CPU+0x84c>
				{
				  i++;
 8001dce:	210e      	movs	r1, #14
 8001dd0:	187b      	adds	r3, r7, r1
 8001dd2:	781a      	ldrb	r2, [r3, #0]
 8001dd4:	187b      	adds	r3, r7, r1
 8001dd6:	3201      	adds	r2, #1
 8001dd8:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <answer2CPU+0x878>)
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	2280      	movs	r2, #128	; 0x80
 8001de2:	4013      	ands	r3, r2
 8001de4:	d0fa      	beq.n	8001ddc <answer2CPU+0x830>
				  USART2->TDR = (uint8_t)ans[i];
 8001de6:	230e      	movs	r3, #14
 8001de8:	18fb      	adds	r3, r7, r3
 8001dea:	781a      	ldrb	r2, [r3, #0]
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <answer2CPU+0x874>)
 8001dee:	0052      	lsls	r2, r2, #1
 8001df0:	5ad3      	ldrh	r3, [r2, r3]
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <answer2CPU+0x878>)
 8001df6:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001df8:	230e      	movs	r3, #14
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	781a      	ldrb	r2, [r3, #0]
 8001dfe:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <answer2CPU+0x874>)
 8001e00:	0052      	lsls	r2, r2, #1
 8001e02:	5ad3      	ldrh	r3, [r2, r3]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1e2      	bne.n	8001dce <answer2CPU+0x822>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <answer2CPU+0x878>)
 8001e0a:	6a1a      	ldr	r2, [r3, #32]
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <answer2CPU+0x878>)
 8001e0e:	2108      	movs	r1, #8
 8001e10:	430a      	orrs	r2, r1
 8001e12:	621a      	str	r2, [r3, #32]
}
 8001e14:	46c0      	nop			; (mov r8, r8)
 8001e16:	0018      	movs	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	b004      	add	sp, #16
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	200033b8 	.word	0x200033b8
 8001e24:	40004400 	.word	0x40004400
 8001e28:	2000331c 	.word	0x2000331c
 8001e2c:	2000327b 	.word	0x2000327b

08001e30 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 8001e36:	2001      	movs	r0, #1
 8001e38:	f001 f834 	bl	8002ea4 <HAL_Delay>
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001e3c:	4b28      	ldr	r3, [pc, #160]	; (8001ee0 <MEM_Reset+0xb0>)
 8001e3e:	695a      	ldr	r2, [r3, #20]
 8001e40:	4b27      	ldr	r3, [pc, #156]	; (8001ee0 <MEM_Reset+0xb0>)
 8001e42:	4928      	ldr	r1, [pc, #160]	; (8001ee4 <MEM_Reset+0xb4>)
 8001e44:	400a      	ands	r2, r1
 8001e46:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 8001e48:	1dfb      	adds	r3, r7, #7
 8001e4a:	2266      	movs	r2, #102	; 0x66
 8001e4c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001e4e:	1df9      	adds	r1, r7, #7
 8001e50:	4825      	ldr	r0, [pc, #148]	; (8001ee8 <MEM_Reset+0xb8>)
 8001e52:	2305      	movs	r3, #5
 8001e54:	2201      	movs	r2, #1
 8001e56:	f004 faad 	bl	80063b4 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001e5a:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <MEM_Reset+0xb0>)
 8001e5c:	695a      	ldr	r2, [r3, #20]
 8001e5e:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <MEM_Reset+0xb0>)
 8001e60:	2180      	movs	r1, #128	; 0x80
 8001e62:	0209      	lsls	r1, r1, #8
 8001e64:	430a      	orrs	r2, r1
 8001e66:	615a      	str	r2, [r3, #20]
		asm("NOP");
 8001e68:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001e6a:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001e6c:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 8001e6e:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001e70:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001e72:	46c0      	nop			; (mov r8, r8)
		GPIOC->ODR &= ~(1 << 15);			//reset cs
 8001e74:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <MEM_Reset+0xb0>)
 8001e76:	695a      	ldr	r2, [r3, #20]
 8001e78:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <MEM_Reset+0xb0>)
 8001e7a:	491a      	ldr	r1, [pc, #104]	; (8001ee4 <MEM_Reset+0xb4>)
 8001e7c:	400a      	ands	r2, r1
 8001e7e:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 8001e80:	1dfb      	adds	r3, r7, #7
 8001e82:	2299      	movs	r2, #153	; 0x99
 8001e84:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 8001e86:	1df9      	adds	r1, r7, #7
 8001e88:	4817      	ldr	r0, [pc, #92]	; (8001ee8 <MEM_Reset+0xb8>)
 8001e8a:	2305      	movs	r3, #5
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f004 fa91 	bl	80063b4 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001e92:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <MEM_Reset+0xb0>)
 8001e94:	695a      	ldr	r2, [r3, #20]
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <MEM_Reset+0xb0>)
 8001e98:	2180      	movs	r1, #128	; 0x80
 8001e9a:	0209      	lsls	r1, r1, #8
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f000 ffff 	bl	8002ea4 <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 8001ea6:	1dfb      	adds	r3, r7, #7
 8001ea8:	22b7      	movs	r2, #183	; 0xb7
 8001eaa:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <MEM_Reset+0xb0>)
 8001eae:	695a      	ldr	r2, [r3, #20]
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <MEM_Reset+0xb0>)
 8001eb2:	490c      	ldr	r1, [pc, #48]	; (8001ee4 <MEM_Reset+0xb4>)
 8001eb4:	400a      	ands	r2, r1
 8001eb6:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001eb8:	1df9      	adds	r1, r7, #7
 8001eba:	480b      	ldr	r0, [pc, #44]	; (8001ee8 <MEM_Reset+0xb8>)
 8001ebc:	2305      	movs	r3, #5
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f004 fa78 	bl	80063b4 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <MEM_Reset+0xb0>)
 8001ec6:	695a      	ldr	r2, [r3, #20]
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <MEM_Reset+0xb0>)
 8001eca:	2180      	movs	r1, #128	; 0x80
 8001ecc:	0209      	lsls	r1, r1, #8
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	f000 ffe6 	bl	8002ea4 <HAL_Delay>
	}
 8001ed8:	46c0      	nop			; (mov r8, r8)
 8001eda:	46bd      	mov	sp, r7
 8001edc:	b002      	add	sp, #8
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	50000800 	.word	0x50000800
 8001ee4:	ffff7fff 	.word	0xffff7fff
 8001ee8:	200031a4 	.word	0x200031a4

08001eec <showFullScreen>:
//==================================================================================================================================
	uint8_t showFullScreen(uint8_t picNum) {
 8001eec:	b5b0      	push	{r4, r5, r7, lr}
 8001eee:	4c46      	ldr	r4, [pc, #280]	; (8002008 <showFullScreen+0x11c>)
 8001ef0:	44a5      	add	sp, r4
 8001ef2:	af02      	add	r7, sp, #8
 8001ef4:	0002      	movs	r2, r0
 8001ef6:	4b45      	ldr	r3, [pc, #276]	; (800200c <showFullScreen+0x120>)
 8001ef8:	4945      	ldr	r1, [pc, #276]	; (8002010 <showFullScreen+0x124>)
 8001efa:	468c      	mov	ip, r1
 8001efc:	44bc      	add	ip, r7
 8001efe:	4463      	add	r3, ip
 8001f00:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i, len;
		uint32_t addrInfo,addr,firstImAddr;
		memCMD = 0x13; //read command with 4-byte address
 8001f02:	4844      	ldr	r0, [pc, #272]	; (8002014 <showFullScreen+0x128>)
 8001f04:	183b      	adds	r3, r7, r0
 8001f06:	2213      	movs	r2, #19
 8001f08:	701a      	strb	r2, [r3, #0]
//		picNum=0x02;
		addr=(picNum)*0x2000;
 8001f0a:	4b40      	ldr	r3, [pc, #256]	; (800200c <showFullScreen+0x120>)
 8001f0c:	4a40      	ldr	r2, [pc, #256]	; (8002010 <showFullScreen+0x124>)
 8001f0e:	4694      	mov	ip, r2
 8001f10:	44bc      	add	ip, r7
 8001f12:	4463      	add	r3, ip
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	035b      	lsls	r3, r3, #13
 8001f18:	493f      	ldr	r1, [pc, #252]	; (8002018 <showFullScreen+0x12c>)
 8001f1a:	187a      	adds	r2, r7, r1
 8001f1c:	6013      	str	r3, [r2, #0]
//		addr=0x00003800;
		addrArray[0]=addr & 0xFF;
 8001f1e:	187b      	adds	r3, r7, r1
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	4b3d      	ldr	r3, [pc, #244]	; (800201c <showFullScreen+0x130>)
 8001f26:	4c3a      	ldr	r4, [pc, #232]	; (8002010 <showFullScreen+0x124>)
 8001f28:	46a4      	mov	ip, r4
 8001f2a:	44bc      	add	ip, r7
 8001f2c:	4463      	add	r3, ip
 8001f2e:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8001f30:	187b      	adds	r3, r7, r1
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	4b38      	ldr	r3, [pc, #224]	; (800201c <showFullScreen+0x130>)
 8001f3a:	4c35      	ldr	r4, [pc, #212]	; (8002010 <showFullScreen+0x124>)
 8001f3c:	46a4      	mov	ip, r4
 8001f3e:	44bc      	add	ip, r7
 8001f40:	4463      	add	r3, ip
 8001f42:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8001f44:	187b      	adds	r3, r7, r1
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	0c1b      	lsrs	r3, r3, #16
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	4b33      	ldr	r3, [pc, #204]	; (800201c <showFullScreen+0x130>)
 8001f4e:	4c30      	ldr	r4, [pc, #192]	; (8002010 <showFullScreen+0x124>)
 8001f50:	46a4      	mov	ip, r4
 8001f52:	44bc      	add	ip, r7
 8001f54:	4463      	add	r3, ip
 8001f56:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8001f58:	187b      	adds	r3, r7, r1
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	0e1b      	lsrs	r3, r3, #24
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	4b2e      	ldr	r3, [pc, #184]	; (800201c <showFullScreen+0x130>)
 8001f62:	492b      	ldr	r1, [pc, #172]	; (8002010 <showFullScreen+0x124>)
 8001f64:	468c      	mov	ip, r1
 8001f66:	44bc      	add	ip, r7
 8001f68:	4463      	add	r3, ip
 8001f6a:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001f6c:	4b2c      	ldr	r3, [pc, #176]	; (8002020 <showFullScreen+0x134>)
 8001f6e:	695a      	ldr	r2, [r3, #20]
 8001f70:	4b2b      	ldr	r3, [pc, #172]	; (8002020 <showFullScreen+0x134>)
 8001f72:	492c      	ldr	r1, [pc, #176]	; (8002024 <showFullScreen+0x138>)
 8001f74:	400a      	ands	r2, r1
 8001f76:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8001f78:	1839      	adds	r1, r7, r0
 8001f7a:	482b      	ldr	r0, [pc, #172]	; (8002028 <showFullScreen+0x13c>)
 8001f7c:	2332      	movs	r3, #50	; 0x32
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f004 fa18 	bl	80063b4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8001f84:	2408      	movs	r4, #8
 8001f86:	193b      	adds	r3, r7, r4
 8001f88:	1cd9      	adds	r1, r3, #3
 8001f8a:	4827      	ldr	r0, [pc, #156]	; (8002028 <showFullScreen+0x13c>)
 8001f8c:	2332      	movs	r3, #50	; 0x32
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f004 fa10 	bl	80063b4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8001f94:	193b      	adds	r3, r7, r4
 8001f96:	1c99      	adds	r1, r3, #2
 8001f98:	4823      	ldr	r0, [pc, #140]	; (8002028 <showFullScreen+0x13c>)
 8001f9a:	2332      	movs	r3, #50	; 0x32
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f004 fa09 	bl	80063b4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8001fa2:	193b      	adds	r3, r7, r4
 8001fa4:	1c59      	adds	r1, r3, #1
 8001fa6:	4820      	ldr	r0, [pc, #128]	; (8002028 <showFullScreen+0x13c>)
 8001fa8:	2332      	movs	r3, #50	; 0x32
 8001faa:	2201      	movs	r2, #1
 8001fac:	f004 fa02 	bl	80063b4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8001fb0:	1939      	adds	r1, r7, r4
 8001fb2:	481d      	ldr	r0, [pc, #116]	; (8002028 <showFullScreen+0x13c>)
 8001fb4:	2332      	movs	r3, #50	; 0x32
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f004 f9fc 	bl	80063b4 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,8192, 5000);
 8001fbc:	4c1b      	ldr	r4, [pc, #108]	; (800202c <showFullScreen+0x140>)
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	019a      	lsls	r2, r3, #6
 8001fc2:	2510      	movs	r5, #16
 8001fc4:	1979      	adds	r1, r7, r5
 8001fc6:	4818      	ldr	r0, [pc, #96]	; (8002028 <showFullScreen+0x13c>)
 8001fc8:	0023      	movs	r3, r4
 8001fca:	f004 fb4b 	bl	8006664 <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15; // set cs
 8001fce:	4b14      	ldr	r3, [pc, #80]	; (8002020 <showFullScreen+0x134>)
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	4b13      	ldr	r3, [pc, #76]	; (8002020 <showFullScreen+0x134>)
 8001fd4:	2180      	movs	r1, #128	; 0x80
 8001fd6:	0209      	lsls	r1, r1, #8
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	615a      	str	r2, [r3, #20]
//    HAL_Delay(1);
		weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, MEM_Buffer); // Здесь ещё работает
 8001fdc:	197b      	adds	r3, r7, r5
 8001fde:	9301      	str	r3, [sp, #4]
 8001fe0:	23ff      	movs	r3, #255	; 0xff
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	237f      	movs	r3, #127	; 0x7f
 8001fe6:	227f      	movs	r2, #127	; 0x7f
 8001fe8:	2100      	movs	r1, #0
 8001fea:	2000      	movs	r0, #0
 8001fec:	f7ff f964 	bl	80012b8 <weoDrawRectangleFilled>
		GPIOC->ODR |= 1 << 6;	//set BF
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <showFullScreen+0x134>)
 8001ff2:	695a      	ldr	r2, [r3, #20]
 8001ff4:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <showFullScreen+0x134>)
 8001ff6:	2140      	movs	r1, #64	; 0x40
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	615a      	str	r2, [r3, #20]

	}
 8001ffc:	46c0      	nop			; (mov r8, r8)
 8001ffe:	0018      	movs	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	4b03      	ldr	r3, [pc, #12]	; (8002010 <showFullScreen+0x124>)
 8002004:	449d      	add	sp, r3
 8002006:	bdb0      	pop	{r4, r5, r7, pc}
 8002008:	ffffdfe0 	.word	0xffffdfe0
 800200c:	ffffdfef 	.word	0xffffdfef
 8002010:	00002018 	.word	0x00002018
 8002014:	00002013 	.word	0x00002013
 8002018:	00002014 	.word	0x00002014
 800201c:	ffffdff0 	.word	0xffffdff0
 8002020:	50000800 	.word	0x50000800
 8002024:	ffff7fff 	.word	0xffff7fff
 8002028:	200031a4 	.word	0x200031a4
 800202c:	00001388 	.word	0x00001388

08002030 <showSmallImage>:
	uint8_t showSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 8002030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002032:	4c95      	ldr	r4, [pc, #596]	; (8002288 <showSmallImage+0x258>)
 8002034:	44a5      	add	sp, r4
 8002036:	af02      	add	r7, sp, #8
 8002038:	0004      	movs	r4, r0
 800203a:	0008      	movs	r0, r1
 800203c:	0011      	movs	r1, r2
 800203e:	4b93      	ldr	r3, [pc, #588]	; (800228c <showSmallImage+0x25c>)
 8002040:	4a93      	ldr	r2, [pc, #588]	; (8002290 <showSmallImage+0x260>)
 8002042:	4694      	mov	ip, r2
 8002044:	44bc      	add	ip, r7
 8002046:	4463      	add	r3, ip
 8002048:	1c22      	adds	r2, r4, #0
 800204a:	701a      	strb	r2, [r3, #0]
 800204c:	4b91      	ldr	r3, [pc, #580]	; (8002294 <showSmallImage+0x264>)
 800204e:	4a90      	ldr	r2, [pc, #576]	; (8002290 <showSmallImage+0x260>)
 8002050:	4694      	mov	ip, r2
 8002052:	44bc      	add	ip, r7
 8002054:	4463      	add	r3, ip
 8002056:	1c02      	adds	r2, r0, #0
 8002058:	701a      	strb	r2, [r3, #0]
 800205a:	4b8f      	ldr	r3, [pc, #572]	; (8002298 <showSmallImage+0x268>)
 800205c:	4a8c      	ldr	r2, [pc, #560]	; (8002290 <showSmallImage+0x260>)
 800205e:	4694      	mov	ip, r2
 8002060:	44bc      	add	ip, r7
 8002062:	4463      	add	r3, ip
 8002064:	1c0a      	adds	r2, r1, #0
 8002066:	701a      	strb	r2, [r3, #0]

		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192], imInfo[2],addrArray[4];
		uint16_t i, len;
		uint32_t addr;
		addr=0x00000000;
 8002068:	2300      	movs	r3, #0
 800206a:	498c      	ldr	r1, [pc, #560]	; (800229c <showSmallImage+0x26c>)
 800206c:	187a      	adds	r2, r7, r1
 800206e:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 8002070:	4d8b      	ldr	r5, [pc, #556]	; (80022a0 <showSmallImage+0x270>)
 8002072:	197b      	adds	r3, r7, r5
 8002074:	2213      	movs	r2, #19
 8002076:	701a      	strb	r2, [r3, #0]
		//look at info about image
//		picNum=0x20;
		addr=picNum*0x2000;// the right path is to multiply picNum * image repeat period!
 8002078:	4b84      	ldr	r3, [pc, #528]	; (800228c <showSmallImage+0x25c>)
 800207a:	4a85      	ldr	r2, [pc, #532]	; (8002290 <showSmallImage+0x260>)
 800207c:	4694      	mov	ip, r2
 800207e:	44bc      	add	ip, r7
 8002080:	4463      	add	r3, ip
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	035b      	lsls	r3, r3, #13
 8002086:	187a      	adds	r2, r7, r1
 8002088:	6013      	str	r3, [r2, #0]

		addrArray[0]=addr & 0xFF;
 800208a:	187b      	adds	r3, r7, r1
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	b2da      	uxtb	r2, r3
 8002090:	4b84      	ldr	r3, [pc, #528]	; (80022a4 <showSmallImage+0x274>)
 8002092:	487f      	ldr	r0, [pc, #508]	; (8002290 <showSmallImage+0x260>)
 8002094:	4684      	mov	ip, r0
 8002096:	44bc      	add	ip, r7
 8002098:	4463      	add	r3, ip
 800209a:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 800209c:	187b      	adds	r3, r7, r1
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	0a1b      	lsrs	r3, r3, #8
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	4b7f      	ldr	r3, [pc, #508]	; (80022a4 <showSmallImage+0x274>)
 80020a6:	487a      	ldr	r0, [pc, #488]	; (8002290 <showSmallImage+0x260>)
 80020a8:	4684      	mov	ip, r0
 80020aa:	44bc      	add	ip, r7
 80020ac:	4463      	add	r3, ip
 80020ae:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 80020b0:	187b      	adds	r3, r7, r1
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	0c1b      	lsrs	r3, r3, #16
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	4b7a      	ldr	r3, [pc, #488]	; (80022a4 <showSmallImage+0x274>)
 80020ba:	4875      	ldr	r0, [pc, #468]	; (8002290 <showSmallImage+0x260>)
 80020bc:	4684      	mov	ip, r0
 80020be:	44bc      	add	ip, r7
 80020c0:	4463      	add	r3, ip
 80020c2:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 80020c4:	187b      	adds	r3, r7, r1
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	0e1b      	lsrs	r3, r3, #24
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	4b75      	ldr	r3, [pc, #468]	; (80022a4 <showSmallImage+0x274>)
 80020ce:	4970      	ldr	r1, [pc, #448]	; (8002290 <showSmallImage+0x260>)
 80020d0:	468c      	mov	ip, r1
 80020d2:	44bc      	add	ip, r7
 80020d4:	4463      	add	r3, ip
 80020d6:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 80020d8:	4b73      	ldr	r3, [pc, #460]	; (80022a8 <showSmallImage+0x278>)
 80020da:	695a      	ldr	r2, [r3, #20]
 80020dc:	4b72      	ldr	r3, [pc, #456]	; (80022a8 <showSmallImage+0x278>)
 80020de:	4973      	ldr	r1, [pc, #460]	; (80022ac <showSmallImage+0x27c>)
 80020e0:	400a      	ands	r2, r1
 80020e2:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 80020e4:	1979      	adds	r1, r7, r5
 80020e6:	4872      	ldr	r0, [pc, #456]	; (80022b0 <showSmallImage+0x280>)
 80020e8:	2332      	movs	r3, #50	; 0x32
 80020ea:	2201      	movs	r2, #1
 80020ec:	f004 f962 	bl	80063b4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 80020f0:	240c      	movs	r4, #12
 80020f2:	193b      	adds	r3, r7, r4
 80020f4:	1cd9      	adds	r1, r3, #3
 80020f6:	486e      	ldr	r0, [pc, #440]	; (80022b0 <showSmallImage+0x280>)
 80020f8:	2332      	movs	r3, #50	; 0x32
 80020fa:	2201      	movs	r2, #1
 80020fc:	f004 f95a 	bl	80063b4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8002100:	193b      	adds	r3, r7, r4
 8002102:	1c99      	adds	r1, r3, #2
 8002104:	486a      	ldr	r0, [pc, #424]	; (80022b0 <showSmallImage+0x280>)
 8002106:	2332      	movs	r3, #50	; 0x32
 8002108:	2201      	movs	r2, #1
 800210a:	f004 f953 	bl	80063b4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 800210e:	193b      	adds	r3, r7, r4
 8002110:	1c59      	adds	r1, r3, #1
 8002112:	4867      	ldr	r0, [pc, #412]	; (80022b0 <showSmallImage+0x280>)
 8002114:	2332      	movs	r3, #50	; 0x32
 8002116:	2201      	movs	r2, #1
 8002118:	f004 f94c 	bl	80063b4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 800211c:	1939      	adds	r1, r7, r4
 800211e:	4864      	ldr	r0, [pc, #400]	; (80022b0 <showSmallImage+0x280>)
 8002120:	2332      	movs	r3, #50	; 0x32
 8002122:	2201      	movs	r2, #1
 8002124:	f004 f946 	bl	80063b4 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 8002128:	4b62      	ldr	r3, [pc, #392]	; (80022b4 <showSmallImage+0x284>)
 800212a:	2210      	movs	r2, #16
 800212c:	18b9      	adds	r1, r7, r2
 800212e:	4860      	ldr	r0, [pc, #384]	; (80022b0 <showSmallImage+0x280>)
 8002130:	2202      	movs	r2, #2
 8002132:	f004 fa97 	bl	8006664 <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15; // set cs
 8002136:	4b5c      	ldr	r3, [pc, #368]	; (80022a8 <showSmallImage+0x278>)
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	4b5b      	ldr	r3, [pc, #364]	; (80022a8 <showSmallImage+0x278>)
 800213c:	2180      	movs	r1, #128	; 0x80
 800213e:	0209      	lsls	r1, r1, #8
 8002140:	430a      	orrs	r2, r1
 8002142:	615a      	str	r2, [r3, #20]
//
		width=imInfo[0];
 8002144:	4e5c      	ldr	r6, [pc, #368]	; (80022b8 <showSmallImage+0x288>)
 8002146:	19bb      	adds	r3, r7, r6
 8002148:	4a5c      	ldr	r2, [pc, #368]	; (80022bc <showSmallImage+0x28c>)
 800214a:	4951      	ldr	r1, [pc, #324]	; (8002290 <showSmallImage+0x260>)
 800214c:	468c      	mov	ip, r1
 800214e:	44bc      	add	ip, r7
 8002150:	4462      	add	r2, ip
 8002152:	7812      	ldrb	r2, [r2, #0]
 8002154:	701a      	strb	r2, [r3, #0]
//		width=0x10;
		height=imInfo[1];
 8002156:	495a      	ldr	r1, [pc, #360]	; (80022c0 <showSmallImage+0x290>)
 8002158:	187b      	adds	r3, r7, r1
 800215a:	4a58      	ldr	r2, [pc, #352]	; (80022bc <showSmallImage+0x28c>)
 800215c:	484c      	ldr	r0, [pc, #304]	; (8002290 <showSmallImage+0x260>)
 800215e:	4684      	mov	ip, r0
 8002160:	44bc      	add	ip, r7
 8002162:	4462      	add	r2, ip
 8002164:	7852      	ldrb	r2, [r2, #1]
 8002166:	701a      	strb	r2, [r3, #0]
//		height=0x07;
		len=(width*height>>1)+0x20;
 8002168:	19bb      	adds	r3, r7, r6
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	187a      	adds	r2, r7, r1
 800216e:	7812      	ldrb	r2, [r2, #0]
 8002170:	4353      	muls	r3, r2
 8002172:	105b      	asrs	r3, r3, #1
 8002174:	b29a      	uxth	r2, r3
 8002176:	4b53      	ldr	r3, [pc, #332]	; (80022c4 <showSmallImage+0x294>)
 8002178:	18fb      	adds	r3, r7, r3
 800217a:	3220      	adds	r2, #32
 800217c:	801a      	strh	r2, [r3, #0]
		addrArray[0]+=0x02;
 800217e:	4b49      	ldr	r3, [pc, #292]	; (80022a4 <showSmallImage+0x274>)
 8002180:	4a43      	ldr	r2, [pc, #268]	; (8002290 <showSmallImage+0x260>)
 8002182:	4694      	mov	ip, r2
 8002184:	44bc      	add	ip, r7
 8002186:	4463      	add	r3, ip
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	3302      	adds	r3, #2
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4b45      	ldr	r3, [pc, #276]	; (80022a4 <showSmallImage+0x274>)
 8002190:	483f      	ldr	r0, [pc, #252]	; (8002290 <showSmallImage+0x260>)
 8002192:	4684      	mov	ip, r0
 8002194:	44bc      	add	ip, r7
 8002196:	4463      	add	r3, ip
 8002198:	701a      	strb	r2, [r3, #0]
//len=0x38;
		USART2->ICR|=USART_ICR_ORECF;
 800219a:	4b4b      	ldr	r3, [pc, #300]	; (80022c8 <showSmallImage+0x298>)
 800219c:	6a1a      	ldr	r2, [r3, #32]
 800219e:	4b4a      	ldr	r3, [pc, #296]	; (80022c8 <showSmallImage+0x298>)
 80021a0:	2108      	movs	r1, #8
 80021a2:	430a      	orrs	r2, r1
 80021a4:	621a      	str	r2, [r3, #32]
				memCMD = 0x13; //read command with 4-byte address
 80021a6:	197b      	adds	r3, r7, r5
 80021a8:	2213      	movs	r2, #19
 80021aa:	701a      	strb	r2, [r3, #0]
//						addrArray[3]=0x00;
//						addrArray[2]=0x03;
//						addrArray[1]=0xC0;
//						addrArray[0]=0x02;

		GPIOC->ODR &= ~(1 << 15);	//reset cs
 80021ac:	4b3e      	ldr	r3, [pc, #248]	; (80022a8 <showSmallImage+0x278>)
 80021ae:	695a      	ldr	r2, [r3, #20]
 80021b0:	4b3d      	ldr	r3, [pc, #244]	; (80022a8 <showSmallImage+0x278>)
 80021b2:	493e      	ldr	r1, [pc, #248]	; (80022ac <showSmallImage+0x27c>)
 80021b4:	400a      	ands	r2, r1
 80021b6:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 80021b8:	1979      	adds	r1, r7, r5
 80021ba:	483d      	ldr	r0, [pc, #244]	; (80022b0 <showSmallImage+0x280>)
 80021bc:	2332      	movs	r3, #50	; 0x32
 80021be:	2201      	movs	r2, #1
 80021c0:	f004 f8f8 	bl	80063b4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 80021c4:	193b      	adds	r3, r7, r4
 80021c6:	1cd9      	adds	r1, r3, #3
 80021c8:	4839      	ldr	r0, [pc, #228]	; (80022b0 <showSmallImage+0x280>)
 80021ca:	2332      	movs	r3, #50	; 0x32
 80021cc:	2201      	movs	r2, #1
 80021ce:	f004 f8f1 	bl	80063b4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 80021d2:	193b      	adds	r3, r7, r4
 80021d4:	1c99      	adds	r1, r3, #2
 80021d6:	4836      	ldr	r0, [pc, #216]	; (80022b0 <showSmallImage+0x280>)
 80021d8:	2332      	movs	r3, #50	; 0x32
 80021da:	2201      	movs	r2, #1
 80021dc:	f004 f8ea 	bl	80063b4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 80021e0:	193b      	adds	r3, r7, r4
 80021e2:	1c59      	adds	r1, r3, #1
 80021e4:	4832      	ldr	r0, [pc, #200]	; (80022b0 <showSmallImage+0x280>)
 80021e6:	2332      	movs	r3, #50	; 0x32
 80021e8:	2201      	movs	r2, #1
 80021ea:	f004 f8e3 	bl	80063b4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 80021ee:	1939      	adds	r1, r7, r4
 80021f0:	482f      	ldr	r0, [pc, #188]	; (80022b0 <showSmallImage+0x280>)
 80021f2:	2332      	movs	r3, #50	; 0x32
 80021f4:	2201      	movs	r2, #1
 80021f6:	f004 f8dd 	bl	80063b4 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 80021fa:	4c2e      	ldr	r4, [pc, #184]	; (80022b4 <showSmallImage+0x284>)
 80021fc:	4b31      	ldr	r3, [pc, #196]	; (80022c4 <showSmallImage+0x294>)
 80021fe:	18fb      	adds	r3, r7, r3
 8002200:	881a      	ldrh	r2, [r3, #0]
 8002202:	2514      	movs	r5, #20
 8002204:	1979      	adds	r1, r7, r5
 8002206:	482a      	ldr	r0, [pc, #168]	; (80022b0 <showSmallImage+0x280>)
 8002208:	0023      	movs	r3, r4
 800220a:	f004 fa2b 	bl	8006664 <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15;	// set cs
 800220e:	4b26      	ldr	r3, [pc, #152]	; (80022a8 <showSmallImage+0x278>)
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <showSmallImage+0x278>)
 8002214:	2180      	movs	r1, #128	; 0x80
 8002216:	0209      	lsls	r1, r1, #8
 8002218:	430a      	orrs	r2, r1
 800221a:	615a      	str	r2, [r3, #20]
		weoDrawRectangleFilled(imX, imY, (imX+width-0x01), (imY+height-0x01), 0xFF,MEM_Buffer);	// Здесь ещё работает 0xFF - затычка
 800221c:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <showSmallImage+0x264>)
 800221e:	481c      	ldr	r0, [pc, #112]	; (8002290 <showSmallImage+0x260>)
 8002220:	183a      	adds	r2, r7, r0
 8002222:	18d2      	adds	r2, r2, r3
 8002224:	19bb      	adds	r3, r7, r6
 8002226:	7812      	ldrb	r2, [r2, #0]
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	18d3      	adds	r3, r2, r3
 800222c:	b2db      	uxtb	r3, r3
 800222e:	3b01      	subs	r3, #1
 8002230:	b2dc      	uxtb	r4, r3
 8002232:	4b19      	ldr	r3, [pc, #100]	; (8002298 <showSmallImage+0x268>)
 8002234:	183a      	adds	r2, r7, r0
 8002236:	18d2      	adds	r2, r2, r3
 8002238:	4921      	ldr	r1, [pc, #132]	; (80022c0 <showSmallImage+0x290>)
 800223a:	187b      	adds	r3, r7, r1
 800223c:	7812      	ldrb	r2, [r2, #0]
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	18d3      	adds	r3, r2, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	3b01      	subs	r3, #1
 8002246:	b2da      	uxtb	r2, r3
 8002248:	4b13      	ldr	r3, [pc, #76]	; (8002298 <showSmallImage+0x268>)
 800224a:	4911      	ldr	r1, [pc, #68]	; (8002290 <showSmallImage+0x260>)
 800224c:	468c      	mov	ip, r1
 800224e:	44bc      	add	ip, r7
 8002250:	4463      	add	r3, ip
 8002252:	7819      	ldrb	r1, [r3, #0]
 8002254:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <showSmallImage+0x264>)
 8002256:	480e      	ldr	r0, [pc, #56]	; (8002290 <showSmallImage+0x260>)
 8002258:	4684      	mov	ip, r0
 800225a:	44bc      	add	ip, r7
 800225c:	4463      	add	r3, ip
 800225e:	7818      	ldrb	r0, [r3, #0]
 8002260:	197b      	adds	r3, r7, r5
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	23ff      	movs	r3, #255	; 0xff
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	0013      	movs	r3, r2
 800226a:	0022      	movs	r2, r4
 800226c:	f7ff f824 	bl	80012b8 <weoDrawRectangleFilled>
//		weoDrawRectangleFilled(0x00, 0x00, 0x0F, 0x06, 0xFF,MEM_Buffer);
//		printASCIIarray(0x20,0x00,0x01,width);
		GPIOC->ODR |= 1 << 6;	//set BF
 8002270:	4b0d      	ldr	r3, [pc, #52]	; (80022a8 <showSmallImage+0x278>)
 8002272:	695a      	ldr	r2, [r3, #20]
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <showSmallImage+0x278>)
 8002276:	2140      	movs	r1, #64	; 0x40
 8002278:	430a      	orrs	r2, r1
 800227a:	615a      	str	r2, [r3, #20]

	}
 800227c:	46c0      	nop			; (mov r8, r8)
 800227e:	0018      	movs	r0, r3
 8002280:	46bd      	mov	sp, r7
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <showSmallImage+0x29c>)
 8002284:	449d      	add	sp, r3
 8002286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002288:	ffffdfd4 	.word	0xffffdfd4
 800228c:	ffffdfe7 	.word	0xffffdfe7
 8002290:	00002020 	.word	0x00002020
 8002294:	ffffdfe6 	.word	0xffffdfe6
 8002298:	ffffdfe5 	.word	0xffffdfe5
 800229c:	0000201c 	.word	0x0000201c
 80022a0:	00002017 	.word	0x00002017
 80022a4:	ffffdfec 	.word	0xffffdfec
 80022a8:	50000800 	.word	0x50000800
 80022ac:	ffff7fff 	.word	0xffff7fff
 80022b0:	200031a4 	.word	0x200031a4
 80022b4:	00001388 	.word	0x00001388
 80022b8:	0000201b 	.word	0x0000201b
 80022bc:	ffffdff0 	.word	0xffffdff0
 80022c0:	0000201a 	.word	0x0000201a
 80022c4:	00002018 	.word	0x00002018
 80022c8:	40004400 	.word	0x40004400
 80022cc:	00002024 	.word	0x00002024

080022d0 <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOC->ODR |= 1 << 15;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 80022dc:	1dfb      	adds	r3, r7, #7
 80022de:	229e      	movs	r2, #158	; 0x9e
 80022e0:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15);	//reset cs
 80022e2:	4b26      	ldr	r3, [pc, #152]	; (800237c <MEM_GetID+0xac>)
 80022e4:	695a      	ldr	r2, [r3, #20]
 80022e6:	4b25      	ldr	r3, [pc, #148]	; (800237c <MEM_GetID+0xac>)
 80022e8:	4925      	ldr	r1, [pc, #148]	; (8002380 <MEM_GetID+0xb0>)
 80022ea:	400a      	ands	r2, r1
 80022ec:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 80022ee:	1df9      	adds	r1, r7, #7
 80022f0:	4824      	ldr	r0, [pc, #144]	; (8002384 <MEM_GetID+0xb4>)
 80022f2:	2332      	movs	r3, #50	; 0x32
 80022f4:	2201      	movs	r2, #1
 80022f6:	f004 f85d 	bl	80063b4 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 80022fa:	23fa      	movs	r3, #250	; 0xfa
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	1d39      	adds	r1, r7, #4
 8002300:	4820      	ldr	r0, [pc, #128]	; (8002384 <MEM_GetID+0xb4>)
 8002302:	2201      	movs	r2, #1
 8002304:	f004 f9ae 	bl	8006664 <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 8002308:	1d3b      	adds	r3, r7, #4
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	001a      	movs	r2, r3
 800230e:	4b1e      	ldr	r3, [pc, #120]	; (8002388 <MEM_GetID+0xb8>)
 8002310:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 8002312:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <MEM_GetID+0xb8>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	021a      	lsls	r2, r3, #8
 8002318:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <MEM_GetID+0xb8>)
 800231a:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 800231c:	23fa      	movs	r3, #250	; 0xfa
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	1d39      	adds	r1, r7, #4
 8002322:	4818      	ldr	r0, [pc, #96]	; (8002384 <MEM_GetID+0xb4>)
 8002324:	2201      	movs	r2, #1
 8002326:	f004 f99d 	bl	8006664 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 800232a:	1d3b      	adds	r3, r7, #4
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	001a      	movs	r2, r3
 8002330:	4b15      	ldr	r3, [pc, #84]	; (8002388 <MEM_GetID+0xb8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	18d2      	adds	r2, r2, r3
 8002336:	4b14      	ldr	r3, [pc, #80]	; (8002388 <MEM_GetID+0xb8>)
 8002338:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 800233a:	4b13      	ldr	r3, [pc, #76]	; (8002388 <MEM_GetID+0xb8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	021a      	lsls	r2, r3, #8
 8002340:	4b11      	ldr	r3, [pc, #68]	; (8002388 <MEM_GetID+0xb8>)
 8002342:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002344:	23fa      	movs	r3, #250	; 0xfa
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	1d39      	adds	r1, r7, #4
 800234a:	480e      	ldr	r0, [pc, #56]	; (8002384 <MEM_GetID+0xb4>)
 800234c:	2201      	movs	r2, #1
 800234e:	f004 f989 	bl	8006664 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002352:	1d3b      	adds	r3, r7, #4
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	001a      	movs	r2, r3
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <MEM_GetID+0xb8>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	18d2      	adds	r2, r2, r3
 800235e:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <MEM_GetID+0xb8>)
 8002360:	601a      	str	r2, [r3, #0]
		GPIOC->ODR |= 1 << 15;                    			// set cs
 8002362:	4b06      	ldr	r3, [pc, #24]	; (800237c <MEM_GetID+0xac>)
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	4b05      	ldr	r3, [pc, #20]	; (800237c <MEM_GetID+0xac>)
 8002368:	2180      	movs	r1, #128	; 0x80
 800236a:	0209      	lsls	r1, r1, #8
 800236c:	430a      	orrs	r2, r1
 800236e:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <MEM_GetID+0xb8>)
 8002372:	681b      	ldr	r3, [r3, #0]
	}
 8002374:	0018      	movs	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	b002      	add	sp, #8
 800237a:	bd80      	pop	{r7, pc}
 800237c:	50000800 	.word	0x50000800
 8002380:	ffff7fff 	.word	0xffff7fff
 8002384:	200031a4 	.word	0x200031a4
 8002388:	2000315c 	.word	0x2000315c

0800238c <cmdExecute>:
//		HAL_Delay(1000);
	}
	uint16_t Scount(void){

	}
	uint8_t cmdExecute(uint8_t cmd2Execute){
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	0002      	movs	r2, r0
 8002394:	1dfb      	adds	r3, r7, #7
 8002396:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0xFF){}
 8002398:	4b39      	ldr	r3, [pc, #228]	; (8002480 <cmdExecute+0xf4>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2bff      	cmp	r3, #255	; 0xff
 800239e:	d069      	beq.n	8002474 <cmdExecute+0xe8>
		else{
			if (bf4me!=0x00){}
 80023a0:	4b38      	ldr	r3, [pc, #224]	; (8002484 <cmdExecute+0xf8>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d165      	bne.n	8002474 <cmdExecute+0xe8>
			else{
		USART2->ICR|=USART_ICR_ORECF;
 80023a8:	4b37      	ldr	r3, [pc, #220]	; (8002488 <cmdExecute+0xfc>)
 80023aa:	6a1a      	ldr	r2, [r3, #32]
 80023ac:	4b36      	ldr	r3, [pc, #216]	; (8002488 <cmdExecute+0xfc>)
 80023ae:	2108      	movs	r1, #8
 80023b0:	430a      	orrs	r2, r1
 80023b2:	621a      	str	r2, [r3, #32]
//			dataASCII[0]=0x31;
//			dataASCII[1]=0x32;
//			printASCIIarray(0x00,0x00,0x02,dataASCII);
//			weoDrawRectangleFilled(0x00, 0x00, 0x0E, 0x25, 0xFF, h2);//works
				}
		if(cmd2Execute==0x11){
 80023b4:	1dfb      	adds	r3, r7, #7
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b11      	cmp	r3, #17
 80023ba:	d10d      	bne.n	80023d8 <cmdExecute+0x4c>
			bf4me=0x11;	//set BF flag 4 me
 80023bc:	4b31      	ldr	r3, [pc, #196]	; (8002484 <cmdExecute+0xf8>)
 80023be:	2211      	movs	r2, #17
 80023c0:	701a      	strb	r2, [r3, #0]
			GPIOC->ODR &= ~(1 << 6);	//reset BF
 80023c2:	4b32      	ldr	r3, [pc, #200]	; (800248c <cmdExecute+0x100>)
 80023c4:	695a      	ldr	r2, [r3, #20]
 80023c6:	4b31      	ldr	r3, [pc, #196]	; (800248c <cmdExecute+0x100>)
 80023c8:	2140      	movs	r1, #64	; 0x40
 80023ca:	438a      	bics	r2, r1
 80023cc:	615a      	str	r2, [r3, #20]

			showFullScreen(picNum);
 80023ce:	4b30      	ldr	r3, [pc, #192]	; (8002490 <cmdExecute+0x104>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	0018      	movs	r0, r3
 80023d4:	f7ff fd8a 	bl	8001eec <showFullScreen>
//			showSmallImage(picNum,0x00,0x00);
				}
		if(cmd2Execute==0x12){
 80023d8:	1dfb      	adds	r3, r7, #7
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b12      	cmp	r3, #18
 80023de:	d113      	bne.n	8002408 <cmdExecute+0x7c>
			bf4me=0x12;	//set BF flag 4 me
 80023e0:	4b28      	ldr	r3, [pc, #160]	; (8002484 <cmdExecute+0xf8>)
 80023e2:	2212      	movs	r2, #18
 80023e4:	701a      	strb	r2, [r3, #0]
			GPIOC->ODR &= ~(1 << 6);	//reset BF
 80023e6:	4b29      	ldr	r3, [pc, #164]	; (800248c <cmdExecute+0x100>)
 80023e8:	695a      	ldr	r2, [r3, #20]
 80023ea:	4b28      	ldr	r3, [pc, #160]	; (800248c <cmdExecute+0x100>)
 80023ec:	2140      	movs	r1, #64	; 0x40
 80023ee:	438a      	bics	r2, r1
 80023f0:	615a      	str	r2, [r3, #20]

			showSmallImage(picNum,imX,imY);
 80023f2:	4b27      	ldr	r3, [pc, #156]	; (8002490 <cmdExecute+0x104>)
 80023f4:	7818      	ldrb	r0, [r3, #0]
 80023f6:	4b27      	ldr	r3, [pc, #156]	; (8002494 <cmdExecute+0x108>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	b2d9      	uxtb	r1, r3
 80023fc:	4b26      	ldr	r3, [pc, #152]	; (8002498 <cmdExecute+0x10c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	001a      	movs	r2, r3
 8002404:	f7ff fe14 	bl	8002030 <showSmallImage>
				}
		if(cmd2Execute==0x13){
 8002408:	1dfb      	adds	r3, r7, #7
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b13      	cmp	r3, #19
 800240e:	d113      	bne.n	8002438 <cmdExecute+0xac>
			bf4me=0x13;	//set BF flag 4 me
 8002410:	4b1c      	ldr	r3, [pc, #112]	; (8002484 <cmdExecute+0xf8>)
 8002412:	2213      	movs	r2, #19
 8002414:	701a      	strb	r2, [r3, #0]
			GPIOC->ODR &= ~(1 << 6);	//reset BF
 8002416:	4b1d      	ldr	r3, [pc, #116]	; (800248c <cmdExecute+0x100>)
 8002418:	695a      	ldr	r2, [r3, #20]
 800241a:	4b1c      	ldr	r3, [pc, #112]	; (800248c <cmdExecute+0x100>)
 800241c:	2140      	movs	r1, #64	; 0x40
 800241e:	438a      	bics	r2, r1
 8002420:	615a      	str	r2, [r3, #20]

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY, strLen,dataASCII);
 8002422:	4b1c      	ldr	r3, [pc, #112]	; (8002494 <cmdExecute+0x108>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	b2d8      	uxtb	r0, r3
 8002428:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <cmdExecute+0x10c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	b2d9      	uxtb	r1, r3
 800242e:	4b1b      	ldr	r3, [pc, #108]	; (800249c <cmdExecute+0x110>)
 8002430:	781a      	ldrb	r2, [r3, #0]
 8002432:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <cmdExecute+0x114>)
 8002434:	f000 f836 	bl	80024a4 <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 8002438:	1dfb      	adds	r3, r7, #7
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b14      	cmp	r3, #20
 800243e:	d108      	bne.n	8002452 <cmdExecute+0xc6>
			bf4me=0x14;	//set BF flag 4 me
 8002440:	4b10      	ldr	r3, [pc, #64]	; (8002484 <cmdExecute+0xf8>)
 8002442:	2214      	movs	r2, #20
 8002444:	701a      	strb	r2, [r3, #0]
			GPIOC->ODR &= ~(1 << 6);	//reset BF
 8002446:	4b11      	ldr	r3, [pc, #68]	; (800248c <cmdExecute+0x100>)
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	4b10      	ldr	r3, [pc, #64]	; (800248c <cmdExecute+0x100>)
 800244c:	2140      	movs	r1, #64	; 0x40
 800244e:	438a      	bics	r2, r1
 8002450:	615a      	str	r2, [r3, #20]


				}
		if(cmd2Execute==0x15){
 8002452:	1dfb      	adds	r3, r7, #7
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b15      	cmp	r3, #21
 8002458:	d102      	bne.n	8002460 <cmdExecute+0xd4>
			bf4me=0x15;	//set BF flag 4 me
 800245a:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <cmdExecute+0xf8>)
 800245c:	2215      	movs	r2, #21
 800245e:	701a      	strb	r2, [r3, #0]
				}
		if(cmd2Execute==0x16){
 8002460:	1dfb      	adds	r3, r7, #7
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b16      	cmp	r3, #22
 8002466:	d102      	bne.n	800246e <cmdExecute+0xe2>
			bf4me=0x16;	//set BF flag 4 me
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <cmdExecute+0xf8>)
 800246a:	2216      	movs	r2, #22
 800246c:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 800246e:	1dfb      	adds	r3, r7, #7
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]

				}
			}
		}
	}
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	0018      	movs	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	b002      	add	sp, #8
 800247c:	bd80      	pop	{r7, pc}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	200034a0 	.word	0x200034a0
 8002484:	200033cc 	.word	0x200033cc
 8002488:	40004400 	.word	0x40004400
 800248c:	50000800 	.word	0x50000800
 8002490:	20003375 	.word	0x20003375
 8002494:	2000327c 	.word	0x2000327c
 8002498:	200032b4 	.word	0x200032b4
 800249c:	200033b5 	.word	0x200033b5
 80024a0:	20003194 	.word	0x20003194

080024a4 <printASCIIarray>:
		for(i=0;i<48;i++){
		weoBuffer[i]=0x00;
		}
		GPIOC->ODR |= 1 << 6;	//set BF
	}
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t dataASCII[]){
 80024a4:	b5b0      	push	{r4, r5, r7, lr}
 80024a6:	b092      	sub	sp, #72	; 0x48
 80024a8:	af02      	add	r7, sp, #8
 80024aa:	0004      	movs	r4, r0
 80024ac:	0008      	movs	r0, r1
 80024ae:	0011      	movs	r1, r2
 80024b0:	603b      	str	r3, [r7, #0]
 80024b2:	1dfb      	adds	r3, r7, #7
 80024b4:	1c22      	adds	r2, r4, #0
 80024b6:	701a      	strb	r2, [r3, #0]
 80024b8:	1dbb      	adds	r3, r7, #6
 80024ba:	1c02      	adds	r2, r0, #0
 80024bc:	701a      	strb	r2, [r3, #0]
 80024be:	1d7b      	adds	r3, r7, #5
 80024c0:	1c0a      	adds	r2, r1, #0
 80024c2:	701a      	strb	r2, [r3, #0]
			uint8_t j,Y_height,X_width,ASCII_X;
			uint8_t weoBuffer[49];
			uint16_t i;
			ASCII_X=imX;
 80024c4:	233e      	movs	r3, #62	; 0x3e
 80024c6:	18fb      	adds	r3, r7, r3
 80024c8:	1dfa      	adds	r2, r7, #7
 80024ca:	7812      	ldrb	r2, [r2, #0]
 80024cc:	701a      	strb	r2, [r3, #0]

			for (i=0;i<strLen;i++){
 80024ce:	233c      	movs	r3, #60	; 0x3c
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	2200      	movs	r2, #0
 80024d4:	801a      	strh	r2, [r3, #0]
 80024d6:	e050      	b.n	800257a <printASCIIarray+0xd6>
//			if ( dataASCII[i]==0x39 ) {
				for(j=0;j<49;j++){
 80024d8:	233f      	movs	r3, #63	; 0x3f
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
 80024e0:	e01b      	b.n	800251a <printASCIIarray+0x76>
									weoBuffer[j]=FONT_X[dataASCII[i]][j];
 80024e2:	233c      	movs	r3, #60	; 0x3c
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	18d3      	adds	r3, r2, r3
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	001a      	movs	r2, r3
 80024f0:	253f      	movs	r5, #63	; 0x3f
 80024f2:	197b      	adds	r3, r7, r5
 80024f4:	7818      	ldrb	r0, [r3, #0]
 80024f6:	197b      	adds	r3, r7, r5
 80024f8:	7819      	ldrb	r1, [r3, #0]
 80024fa:	4c34      	ldr	r4, [pc, #208]	; (80025cc <printASCIIarray+0x128>)
 80024fc:	0013      	movs	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	00da      	lsls	r2, r3, #3
 8002504:	1ad2      	subs	r2, r2, r3
 8002506:	18a3      	adds	r3, r4, r2
 8002508:	5c1a      	ldrb	r2, [r3, r0]
 800250a:	2308      	movs	r3, #8
 800250c:	18fb      	adds	r3, r7, r3
 800250e:	545a      	strb	r2, [r3, r1]
				for(j=0;j<49;j++){
 8002510:	197b      	adds	r3, r7, r5
 8002512:	781a      	ldrb	r2, [r3, #0]
 8002514:	197b      	adds	r3, r7, r5
 8002516:	3201      	adds	r2, #1
 8002518:	701a      	strb	r2, [r3, #0]
 800251a:	233f      	movs	r3, #63	; 0x3f
 800251c:	18fb      	adds	r3, r7, r3
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b30      	cmp	r3, #48	; 0x30
 8002522:	d9de      	bls.n	80024e2 <printASCIIarray+0x3e>
									}
			        	weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+X_increment-0,imY+ASCII_height-0,0xFF,weoBuffer);
 8002524:	4b2a      	ldr	r3, [pc, #168]	; (80025d0 <printASCIIarray+0x12c>)
 8002526:	781a      	ldrb	r2, [r3, #0]
 8002528:	203e      	movs	r0, #62	; 0x3e
 800252a:	183b      	adds	r3, r7, r0
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	18d3      	adds	r3, r2, r3
 8002530:	b2dc      	uxtb	r4, r3
 8002532:	4b28      	ldr	r3, [pc, #160]	; (80025d4 <printASCIIarray+0x130>)
 8002534:	781a      	ldrb	r2, [r3, #0]
 8002536:	1dbb      	adds	r3, r7, #6
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	18d3      	adds	r3, r2, r3
 800253c:	b2da      	uxtb	r2, r3
 800253e:	1dbb      	adds	r3, r7, #6
 8002540:	7819      	ldrb	r1, [r3, #0]
 8002542:	0005      	movs	r5, r0
 8002544:	183b      	adds	r3, r7, r0
 8002546:	7818      	ldrb	r0, [r3, #0]
 8002548:	2308      	movs	r3, #8
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	9301      	str	r3, [sp, #4]
 800254e:	23ff      	movs	r3, #255	; 0xff
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	0013      	movs	r3, r2
 8002554:	0022      	movs	r2, r4
 8002556:	f7fe feaf 	bl	80012b8 <weoDrawRectangleFilled>
//				weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+X_increment-0,imY+ASCII_height-0,0xFF,FONT_X[dataASCII[i]]);
//				weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+0x06,imY+0x0D,0xFF,weoBuffer);
//			}

				ASCII_X += X_increment+1;
 800255a:	4b1d      	ldr	r3, [pc, #116]	; (80025d0 <printASCIIarray+0x12c>)
 800255c:	781a      	ldrb	r2, [r3, #0]
 800255e:	0028      	movs	r0, r5
 8002560:	183b      	adds	r3, r7, r0
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	18d3      	adds	r3, r2, r3
 8002566:	b2da      	uxtb	r2, r3
 8002568:	183b      	adds	r3, r7, r0
 800256a:	3201      	adds	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]
			for (i=0;i<strLen;i++){
 800256e:	213c      	movs	r1, #60	; 0x3c
 8002570:	187b      	adds	r3, r7, r1
 8002572:	881a      	ldrh	r2, [r3, #0]
 8002574:	187b      	adds	r3, r7, r1
 8002576:	3201      	adds	r2, #1
 8002578:	801a      	strh	r2, [r3, #0]
 800257a:	1d7b      	adds	r3, r7, #5
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	b29b      	uxth	r3, r3
 8002580:	223c      	movs	r2, #60	; 0x3c
 8002582:	18ba      	adds	r2, r7, r2
 8002584:	8812      	ldrh	r2, [r2, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d3a6      	bcc.n	80024d8 <printASCIIarray+0x34>
			}
			for(i=0;i<49;i++){
 800258a:	233c      	movs	r3, #60	; 0x3c
 800258c:	18fb      	adds	r3, r7, r3
 800258e:	2200      	movs	r2, #0
 8002590:	801a      	strh	r2, [r3, #0]
 8002592:	e00b      	b.n	80025ac <printASCIIarray+0x108>
			weoBuffer[i]=0x00;
 8002594:	203c      	movs	r0, #60	; 0x3c
 8002596:	183b      	adds	r3, r7, r0
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	2208      	movs	r2, #8
 800259c:	18ba      	adds	r2, r7, r2
 800259e:	2100      	movs	r1, #0
 80025a0:	54d1      	strb	r1, [r2, r3]
			for(i=0;i<49;i++){
 80025a2:	183b      	adds	r3, r7, r0
 80025a4:	881a      	ldrh	r2, [r3, #0]
 80025a6:	183b      	adds	r3, r7, r0
 80025a8:	3201      	adds	r2, #1
 80025aa:	801a      	strh	r2, [r3, #0]
 80025ac:	233c      	movs	r3, #60	; 0x3c
 80025ae:	18fb      	adds	r3, r7, r3
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	2b30      	cmp	r3, #48	; 0x30
 80025b4:	d9ee      	bls.n	8002594 <printASCIIarray+0xf0>
			}
			GPIOC->ODR |= 1 << 6;	//set BF
 80025b6:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <printASCIIarray+0x134>)
 80025b8:	695a      	ldr	r2, [r3, #20]
 80025ba:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <printASCIIarray+0x134>)
 80025bc:	2140      	movs	r1, #64	; 0x40
 80025be:	430a      	orrs	r2, r1
 80025c0:	615a      	str	r2, [r3, #20]

		}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	0018      	movs	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	b010      	add	sp, #64	; 0x40
 80025ca:	bdb0      	pop	{r4, r5, r7, pc}
 80025cc:	20000000 	.word	0x20000000
 80025d0:	20003130 	.word	0x20003130
 80025d4:	20003131 	.word	0x20003131
 80025d8:	50000800 	.word	0x50000800

080025dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80025e0:	46c0      	nop			; (mov r8, r8)
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ee:	4b11      	ldr	r3, [pc, #68]	; (8002634 <HAL_MspInit+0x4c>)
 80025f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <HAL_MspInit+0x4c>)
 80025f4:	2101      	movs	r1, #1
 80025f6:	430a      	orrs	r2, r1
 80025f8:	641a      	str	r2, [r3, #64]	; 0x40
 80025fa:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <HAL_MspInit+0x4c>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	2201      	movs	r2, #1
 8002600:	4013      	ands	r3, r2
 8002602:	607b      	str	r3, [r7, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002606:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <HAL_MspInit+0x4c>)
 8002608:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <HAL_MspInit+0x4c>)
 800260c:	2180      	movs	r1, #128	; 0x80
 800260e:	0549      	lsls	r1, r1, #21
 8002610:	430a      	orrs	r2, r1
 8002612:	63da      	str	r2, [r3, #60]	; 0x3c
 8002614:	4b07      	ldr	r3, [pc, #28]	; (8002634 <HAL_MspInit+0x4c>)
 8002616:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	055b      	lsls	r3, r3, #21
 800261c:	4013      	ands	r3, r2
 800261e:	603b      	str	r3, [r7, #0]
 8002620:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8002622:	2380      	movs	r3, #128	; 0x80
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	0018      	movs	r0, r3
 8002628:	f000 fc5e 	bl	8002ee8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800262c:	46c0      	nop			; (mov r8, r8)
 800262e:	46bd      	mov	sp, r7
 8002630:	b002      	add	sp, #8
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40021000 	.word	0x40021000

08002638 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002640:	230c      	movs	r3, #12
 8002642:	18fb      	adds	r3, r7, r3
 8002644:	0018      	movs	r0, r3
 8002646:	2314      	movs	r3, #20
 8002648:	001a      	movs	r2, r3
 800264a:	2100      	movs	r1, #0
 800264c:	f007 f996 	bl	800997c <memset>
  if(hcomp->Instance==COMP1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a11      	ldr	r2, [pc, #68]	; (800269c <HAL_COMP_MspInit+0x64>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d11b      	bne.n	8002692 <HAL_COMP_MspInit+0x5a>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800265a:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <HAL_COMP_MspInit+0x68>)
 800265c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <HAL_COMP_MspInit+0x68>)
 8002660:	2102      	movs	r1, #2
 8002662:	430a      	orrs	r2, r1
 8002664:	635a      	str	r2, [r3, #52]	; 0x34
 8002666:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <HAL_COMP_MspInit+0x68>)
 8002668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800266a:	2202      	movs	r2, #2
 800266c:	4013      	ands	r3, r2
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002672:	210c      	movs	r1, #12
 8002674:	187b      	adds	r3, r7, r1
 8002676:	2204      	movs	r2, #4
 8002678:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800267a:	187b      	adds	r3, r7, r1
 800267c:	2203      	movs	r2, #3
 800267e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	187b      	adds	r3, r7, r1
 8002682:	2200      	movs	r2, #0
 8002684:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002686:	187b      	adds	r3, r7, r1
 8002688:	4a06      	ldr	r2, [pc, #24]	; (80026a4 <HAL_COMP_MspInit+0x6c>)
 800268a:	0019      	movs	r1, r3
 800268c:	0010      	movs	r0, r2
 800268e:	f001 f981 	bl	8003994 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	46bd      	mov	sp, r7
 8002696:	b008      	add	sp, #32
 8002698:	bd80      	pop	{r7, pc}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	40010200 	.word	0x40010200
 80026a0:	40021000 	.word	0x40021000
 80026a4:	50000400 	.word	0x50000400

080026a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08a      	sub	sp, #40	; 0x28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	2314      	movs	r3, #20
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	0018      	movs	r0, r3
 80026b6:	2314      	movs	r3, #20
 80026b8:	001a      	movs	r2, r3
 80026ba:	2100      	movs	r1, #0
 80026bc:	f007 f95e 	bl	800997c <memset>
  if(hi2c->Instance==I2C1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a20      	ldr	r2, [pc, #128]	; (8002748 <HAL_I2C_MspInit+0xa0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d139      	bne.n	800273e <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ca:	4b20      	ldr	r3, [pc, #128]	; (800274c <HAL_I2C_MspInit+0xa4>)
 80026cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ce:	4b1f      	ldr	r3, [pc, #124]	; (800274c <HAL_I2C_MspInit+0xa4>)
 80026d0:	2101      	movs	r1, #1
 80026d2:	430a      	orrs	r2, r1
 80026d4:	635a      	str	r2, [r3, #52]	; 0x34
 80026d6:	4b1d      	ldr	r3, [pc, #116]	; (800274c <HAL_I2C_MspInit+0xa4>)
 80026d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026da:	2201      	movs	r2, #1
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026e2:	2114      	movs	r1, #20
 80026e4:	187b      	adds	r3, r7, r1
 80026e6:	22c0      	movs	r2, #192	; 0xc0
 80026e8:	00d2      	lsls	r2, r2, #3
 80026ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026ec:	187b      	adds	r3, r7, r1
 80026ee:	2212      	movs	r2, #18
 80026f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026f2:	187b      	adds	r3, r7, r1
 80026f4:	2201      	movs	r2, #1
 80026f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f8:	187b      	adds	r3, r7, r1
 80026fa:	2200      	movs	r2, #0
 80026fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80026fe:	187b      	adds	r3, r7, r1
 8002700:	2206      	movs	r2, #6
 8002702:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002704:	187a      	adds	r2, r7, r1
 8002706:	23a0      	movs	r3, #160	; 0xa0
 8002708:	05db      	lsls	r3, r3, #23
 800270a:	0011      	movs	r1, r2
 800270c:	0018      	movs	r0, r3
 800270e:	f001 f941 	bl	8003994 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <HAL_I2C_MspInit+0xa4>)
 8002714:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002716:	4b0d      	ldr	r3, [pc, #52]	; (800274c <HAL_I2C_MspInit+0xa4>)
 8002718:	2180      	movs	r1, #128	; 0x80
 800271a:	0389      	lsls	r1, r1, #14
 800271c:	430a      	orrs	r2, r1
 800271e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002720:	4b0a      	ldr	r3, [pc, #40]	; (800274c <HAL_I2C_MspInit+0xa4>)
 8002722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002724:	2380      	movs	r3, #128	; 0x80
 8002726:	039b      	lsls	r3, r3, #14
 8002728:	4013      	ands	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800272e:	2200      	movs	r2, #0
 8002730:	2100      	movs	r1, #0
 8002732:	2017      	movs	r0, #23
 8002734:	f000 fef8 	bl	8003528 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8002738:	2017      	movs	r0, #23
 800273a:	f000 ff0a 	bl	8003552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	46bd      	mov	sp, r7
 8002742:	b00a      	add	sp, #40	; 0x28
 8002744:	bd80      	pop	{r7, pc}
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	40005400 	.word	0x40005400
 800274c:	40021000 	.word	0x40021000

08002750 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002750:	b590      	push	{r4, r7, lr}
 8002752:	b08b      	sub	sp, #44	; 0x2c
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	2314      	movs	r3, #20
 800275a:	18fb      	adds	r3, r7, r3
 800275c:	0018      	movs	r0, r3
 800275e:	2314      	movs	r3, #20
 8002760:	001a      	movs	r2, r3
 8002762:	2100      	movs	r1, #0
 8002764:	f007 f90a 	bl	800997c <memset>
  if(hi2s->Instance==SPI1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a47      	ldr	r2, [pc, #284]	; (800288c <HAL_I2S_MspInit+0x13c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d000      	beq.n	8002774 <HAL_I2S_MspInit+0x24>
 8002772:	e087      	b.n	8002884 <HAL_I2S_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002774:	4b46      	ldr	r3, [pc, #280]	; (8002890 <HAL_I2S_MspInit+0x140>)
 8002776:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002778:	4b45      	ldr	r3, [pc, #276]	; (8002890 <HAL_I2S_MspInit+0x140>)
 800277a:	2180      	movs	r1, #128	; 0x80
 800277c:	0149      	lsls	r1, r1, #5
 800277e:	430a      	orrs	r2, r1
 8002780:	641a      	str	r2, [r3, #64]	; 0x40
 8002782:	4b43      	ldr	r3, [pc, #268]	; (8002890 <HAL_I2S_MspInit+0x140>)
 8002784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002786:	2380      	movs	r3, #128	; 0x80
 8002788:	015b      	lsls	r3, r3, #5
 800278a:	4013      	ands	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002790:	4b3f      	ldr	r3, [pc, #252]	; (8002890 <HAL_I2S_MspInit+0x140>)
 8002792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002794:	4b3e      	ldr	r3, [pc, #248]	; (8002890 <HAL_I2S_MspInit+0x140>)
 8002796:	2101      	movs	r1, #1
 8002798:	430a      	orrs	r2, r1
 800279a:	635a      	str	r2, [r3, #52]	; 0x34
 800279c:	4b3c      	ldr	r3, [pc, #240]	; (8002890 <HAL_I2S_MspInit+0x140>)
 800279e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a0:	2201      	movs	r2, #1
 80027a2:	4013      	ands	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a8:	4b39      	ldr	r3, [pc, #228]	; (8002890 <HAL_I2S_MspInit+0x140>)
 80027aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ac:	4b38      	ldr	r3, [pc, #224]	; (8002890 <HAL_I2S_MspInit+0x140>)
 80027ae:	2102      	movs	r1, #2
 80027b0:	430a      	orrs	r2, r1
 80027b2:	635a      	str	r2, [r3, #52]	; 0x34
 80027b4:	4b36      	ldr	r3, [pc, #216]	; (8002890 <HAL_I2S_MspInit+0x140>)
 80027b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b8:	2202      	movs	r2, #2
 80027ba:	4013      	ands	r3, r2
 80027bc:	60bb      	str	r3, [r7, #8]
 80027be:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80027c0:	2114      	movs	r1, #20
 80027c2:	187b      	adds	r3, r7, r1
 80027c4:	2280      	movs	r2, #128	; 0x80
 80027c6:	0212      	lsls	r2, r2, #8
 80027c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ca:	000c      	movs	r4, r1
 80027cc:	193b      	adds	r3, r7, r4
 80027ce:	2202      	movs	r2, #2
 80027d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	193b      	adds	r3, r7, r4
 80027d4:	2200      	movs	r2, #0
 80027d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d8:	193b      	adds	r3, r7, r4
 80027da:	2200      	movs	r2, #0
 80027dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80027de:	193b      	adds	r3, r7, r4
 80027e0:	2200      	movs	r2, #0
 80027e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e4:	193a      	adds	r2, r7, r4
 80027e6:	23a0      	movs	r3, #160	; 0xa0
 80027e8:	05db      	lsls	r3, r3, #23
 80027ea:	0011      	movs	r1, r2
 80027ec:	0018      	movs	r0, r3
 80027ee:	f001 f8d1 	bl	8003994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80027f2:	0021      	movs	r1, r4
 80027f4:	187b      	adds	r3, r7, r1
 80027f6:	2238      	movs	r2, #56	; 0x38
 80027f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fa:	187b      	adds	r3, r7, r1
 80027fc:	2202      	movs	r2, #2
 80027fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	187b      	adds	r3, r7, r1
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002806:	187b      	adds	r3, r7, r1
 8002808:	2200      	movs	r2, #0
 800280a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800280c:	187b      	adds	r3, r7, r1
 800280e:	2200      	movs	r2, #0
 8002810:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002812:	187b      	adds	r3, r7, r1
 8002814:	4a1f      	ldr	r2, [pc, #124]	; (8002894 <HAL_I2S_MspInit+0x144>)
 8002816:	0019      	movs	r1, r3
 8002818:	0010      	movs	r0, r2
 800281a:	f001 f8bb 	bl	8003994 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 800281e:	4b1e      	ldr	r3, [pc, #120]	; (8002898 <HAL_I2S_MspInit+0x148>)
 8002820:	4a1e      	ldr	r2, [pc, #120]	; (800289c <HAL_I2S_MspInit+0x14c>)
 8002822:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002824:	4b1c      	ldr	r3, [pc, #112]	; (8002898 <HAL_I2S_MspInit+0x148>)
 8002826:	2211      	movs	r2, #17
 8002828:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800282a:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <HAL_I2S_MspInit+0x148>)
 800282c:	2210      	movs	r2, #16
 800282e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002830:	4b19      	ldr	r3, [pc, #100]	; (8002898 <HAL_I2S_MspInit+0x148>)
 8002832:	2200      	movs	r2, #0
 8002834:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002836:	4b18      	ldr	r3, [pc, #96]	; (8002898 <HAL_I2S_MspInit+0x148>)
 8002838:	2280      	movs	r2, #128	; 0x80
 800283a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800283c:	4b16      	ldr	r3, [pc, #88]	; (8002898 <HAL_I2S_MspInit+0x148>)
 800283e:	2280      	movs	r2, #128	; 0x80
 8002840:	0052      	lsls	r2, r2, #1
 8002842:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002844:	4b14      	ldr	r3, [pc, #80]	; (8002898 <HAL_I2S_MspInit+0x148>)
 8002846:	2280      	movs	r2, #128	; 0x80
 8002848:	00d2      	lsls	r2, r2, #3
 800284a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800284c:	4b12      	ldr	r3, [pc, #72]	; (8002898 <HAL_I2S_MspInit+0x148>)
 800284e:	2200      	movs	r2, #0
 8002850:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002852:	4b11      	ldr	r3, [pc, #68]	; (8002898 <HAL_I2S_MspInit+0x148>)
 8002854:	2200      	movs	r2, #0
 8002856:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002858:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <HAL_I2S_MspInit+0x148>)
 800285a:	0018      	movs	r0, r3
 800285c:	f000 fe96 	bl	800358c <HAL_DMA_Init>
 8002860:	1e03      	subs	r3, r0, #0
 8002862:	d001      	beq.n	8002868 <HAL_I2S_MspInit+0x118>
    {
      Error_Handler();
 8002864:	f7ff feba 	bl	80025dc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a0b      	ldr	r2, [pc, #44]	; (8002898 <HAL_I2S_MspInit+0x148>)
 800286c:	62da      	str	r2, [r3, #44]	; 0x2c
 800286e:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <HAL_I2S_MspInit+0x148>)
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002874:	2200      	movs	r2, #0
 8002876:	2100      	movs	r1, #0
 8002878:	2019      	movs	r0, #25
 800287a:	f000 fe55 	bl	8003528 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800287e:	2019      	movs	r0, #25
 8002880:	f000 fe67 	bl	8003552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002884:	46c0      	nop			; (mov r8, r8)
 8002886:	46bd      	mov	sp, r7
 8002888:	b00b      	add	sp, #44	; 0x2c
 800288a:	bd90      	pop	{r4, r7, pc}
 800288c:	40013000 	.word	0x40013000
 8002890:	40021000 	.word	0x40021000
 8002894:	50000400 	.word	0x50000400
 8002898:	2000343c 	.word	0x2000343c
 800289c:	40020008 	.word	0x40020008

080028a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028a0:	b590      	push	{r4, r7, lr}
 80028a2:	b08b      	sub	sp, #44	; 0x2c
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a8:	2314      	movs	r3, #20
 80028aa:	18fb      	adds	r3, r7, r3
 80028ac:	0018      	movs	r0, r3
 80028ae:	2314      	movs	r3, #20
 80028b0:	001a      	movs	r2, r3
 80028b2:	2100      	movs	r1, #0
 80028b4:	f007 f862 	bl	800997c <memset>
  if(hspi->Instance==SPI2)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a2b      	ldr	r2, [pc, #172]	; (800296c <HAL_SPI_MspInit+0xcc>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d14f      	bne.n	8002962 <HAL_SPI_MspInit+0xc2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028c2:	4b2b      	ldr	r3, [pc, #172]	; (8002970 <HAL_SPI_MspInit+0xd0>)
 80028c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028c6:	4b2a      	ldr	r3, [pc, #168]	; (8002970 <HAL_SPI_MspInit+0xd0>)
 80028c8:	2180      	movs	r1, #128	; 0x80
 80028ca:	01c9      	lsls	r1, r1, #7
 80028cc:	430a      	orrs	r2, r1
 80028ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80028d0:	4b27      	ldr	r3, [pc, #156]	; (8002970 <HAL_SPI_MspInit+0xd0>)
 80028d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028d4:	2380      	movs	r3, #128	; 0x80
 80028d6:	01db      	lsls	r3, r3, #7
 80028d8:	4013      	ands	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028de:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_SPI_MspInit+0xd0>)
 80028e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028e2:	4b23      	ldr	r3, [pc, #140]	; (8002970 <HAL_SPI_MspInit+0xd0>)
 80028e4:	2102      	movs	r1, #2
 80028e6:	430a      	orrs	r2, r1
 80028e8:	635a      	str	r2, [r3, #52]	; 0x34
 80028ea:	4b21      	ldr	r3, [pc, #132]	; (8002970 <HAL_SPI_MspInit+0xd0>)
 80028ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ee:	2202      	movs	r2, #2
 80028f0:	4013      	ands	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028f6:	2114      	movs	r1, #20
 80028f8:	187b      	adds	r3, r7, r1
 80028fa:	2240      	movs	r2, #64	; 0x40
 80028fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fe:	187b      	adds	r3, r7, r1
 8002900:	2202      	movs	r2, #2
 8002902:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	187b      	adds	r3, r7, r1
 8002906:	2200      	movs	r2, #0
 8002908:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290a:	187b      	adds	r3, r7, r1
 800290c:	2200      	movs	r2, #0
 800290e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8002910:	187b      	adds	r3, r7, r1
 8002912:	2204      	movs	r2, #4
 8002914:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002916:	000c      	movs	r4, r1
 8002918:	187b      	adds	r3, r7, r1
 800291a:	4a16      	ldr	r2, [pc, #88]	; (8002974 <HAL_SPI_MspInit+0xd4>)
 800291c:	0019      	movs	r1, r3
 800291e:	0010      	movs	r0, r2
 8002920:	f001 f838 	bl	8003994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002924:	0021      	movs	r1, r4
 8002926:	187b      	adds	r3, r7, r1
 8002928:	22c0      	movs	r2, #192	; 0xc0
 800292a:	0052      	lsls	r2, r2, #1
 800292c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292e:	187b      	adds	r3, r7, r1
 8002930:	2202      	movs	r2, #2
 8002932:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	187b      	adds	r3, r7, r1
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293a:	187b      	adds	r3, r7, r1
 800293c:	2200      	movs	r2, #0
 800293e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8002940:	187b      	adds	r3, r7, r1
 8002942:	2201      	movs	r2, #1
 8002944:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002946:	187b      	adds	r3, r7, r1
 8002948:	4a0a      	ldr	r2, [pc, #40]	; (8002974 <HAL_SPI_MspInit+0xd4>)
 800294a:	0019      	movs	r1, r3
 800294c:	0010      	movs	r0, r2
 800294e:	f001 f821 	bl	8003994 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002952:	2200      	movs	r2, #0
 8002954:	2100      	movs	r1, #0
 8002956:	201a      	movs	r0, #26
 8002958:	f000 fde6 	bl	8003528 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800295c:	201a      	movs	r0, #26
 800295e:	f000 fdf8 	bl	8003552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	46bd      	mov	sp, r7
 8002966:	b00b      	add	sp, #44	; 0x2c
 8002968:	bd90      	pop	{r4, r7, pc}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	40003800 	.word	0x40003800
 8002970:	40021000 	.word	0x40021000
 8002974:	50000400 	.word	0x50000400

08002978 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <HAL_TIM_Base_MspInit+0x38>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d10d      	bne.n	80029a6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800298a:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <HAL_TIM_Base_MspInit+0x3c>)
 800298c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800298e:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <HAL_TIM_Base_MspInit+0x3c>)
 8002990:	2180      	movs	r1, #128	; 0x80
 8002992:	0109      	lsls	r1, r1, #4
 8002994:	430a      	orrs	r2, r1
 8002996:	641a      	str	r2, [r3, #64]	; 0x40
 8002998:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <HAL_TIM_Base_MspInit+0x3c>)
 800299a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	4013      	ands	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b004      	add	sp, #16
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	40012c00 	.word	0x40012c00
 80029b4:	40021000 	.word	0x40021000

080029b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c0:	230c      	movs	r3, #12
 80029c2:	18fb      	adds	r3, r7, r3
 80029c4:	0018      	movs	r0, r3
 80029c6:	2314      	movs	r3, #20
 80029c8:	001a      	movs	r2, r3
 80029ca:	2100      	movs	r1, #0
 80029cc:	f006 ffd6 	bl	800997c <memset>
  if(htim->Instance==TIM1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a15      	ldr	r2, [pc, #84]	; (8002a2c <HAL_TIM_MspPostInit+0x74>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d123      	bne.n	8002a22 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029da:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <HAL_TIM_MspPostInit+0x78>)
 80029dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029de:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <HAL_TIM_MspPostInit+0x78>)
 80029e0:	2101      	movs	r1, #1
 80029e2:	430a      	orrs	r2, r1
 80029e4:	635a      	str	r2, [r3, #52]	; 0x34
 80029e6:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <HAL_TIM_MspPostInit+0x78>)
 80029e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ea:	2201      	movs	r2, #1
 80029ec:	4013      	ands	r3, r2
 80029ee:	60bb      	str	r3, [r7, #8]
 80029f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029f2:	210c      	movs	r1, #12
 80029f4:	187b      	adds	r3, r7, r1
 80029f6:	2280      	movs	r2, #128	; 0x80
 80029f8:	0052      	lsls	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fc:	187b      	adds	r3, r7, r1
 80029fe:	2202      	movs	r2, #2
 8002a00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a02:	187b      	adds	r3, r7, r1
 8002a04:	2202      	movs	r2, #2
 8002a06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a08:	187b      	adds	r3, r7, r1
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002a0e:	187b      	adds	r3, r7, r1
 8002a10:	2202      	movs	r2, #2
 8002a12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a14:	187a      	adds	r2, r7, r1
 8002a16:	23a0      	movs	r3, #160	; 0xa0
 8002a18:	05db      	lsls	r3, r3, #23
 8002a1a:	0011      	movs	r1, r2
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f000 ffb9 	bl	8003994 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	46bd      	mov	sp, r7
 8002a26:	b008      	add	sp, #32
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	40012c00 	.word	0x40012c00
 8002a30:	40021000 	.word	0x40021000

08002a34 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8002a34:	b590      	push	{r4, r7, lr}
 8002a36:	b08b      	sub	sp, #44	; 0x2c
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3c:	2314      	movs	r3, #20
 8002a3e:	18fb      	adds	r3, r7, r3
 8002a40:	0018      	movs	r0, r3
 8002a42:	2314      	movs	r3, #20
 8002a44:	001a      	movs	r2, r3
 8002a46:	2100      	movs	r1, #0
 8002a48:	f006 ff98 	bl	800997c <memset>
  if(husart->Instance==USART3)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a30      	ldr	r2, [pc, #192]	; (8002b14 <HAL_USART_MspInit+0xe0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d15a      	bne.n	8002b0c <HAL_USART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a56:	4b30      	ldr	r3, [pc, #192]	; (8002b18 <HAL_USART_MspInit+0xe4>)
 8002a58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a5a:	4b2f      	ldr	r3, [pc, #188]	; (8002b18 <HAL_USART_MspInit+0xe4>)
 8002a5c:	2180      	movs	r1, #128	; 0x80
 8002a5e:	02c9      	lsls	r1, r1, #11
 8002a60:	430a      	orrs	r2, r1
 8002a62:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a64:	4b2c      	ldr	r3, [pc, #176]	; (8002b18 <HAL_USART_MspInit+0xe4>)
 8002a66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a68:	2380      	movs	r3, #128	; 0x80
 8002a6a:	02db      	lsls	r3, r3, #11
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a72:	4b29      	ldr	r3, [pc, #164]	; (8002b18 <HAL_USART_MspInit+0xe4>)
 8002a74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a76:	4b28      	ldr	r3, [pc, #160]	; (8002b18 <HAL_USART_MspInit+0xe4>)
 8002a78:	2101      	movs	r1, #1
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a7e:	4b26      	ldr	r3, [pc, #152]	; (8002b18 <HAL_USART_MspInit+0xe4>)
 8002a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a82:	2201      	movs	r2, #1
 8002a84:	4013      	ands	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a8a:	4b23      	ldr	r3, [pc, #140]	; (8002b18 <HAL_USART_MspInit+0xe4>)
 8002a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a8e:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <HAL_USART_MspInit+0xe4>)
 8002a90:	2102      	movs	r1, #2
 8002a92:	430a      	orrs	r2, r1
 8002a94:	635a      	str	r2, [r3, #52]	; 0x34
 8002a96:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <HAL_USART_MspInit+0xe4>)
 8002a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60bb      	str	r3, [r7, #8]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002aa2:	2414      	movs	r4, #20
 8002aa4:	193b      	adds	r3, r7, r4
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aaa:	193b      	adds	r3, r7, r4
 8002aac:	2202      	movs	r2, #2
 8002aae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	193b      	adds	r3, r7, r4
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab6:	193b      	adds	r3, r7, r4
 8002ab8:	2203      	movs	r2, #3
 8002aba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002abc:	193b      	adds	r3, r7, r4
 8002abe:	2204      	movs	r2, #4
 8002ac0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac2:	193a      	adds	r2, r7, r4
 8002ac4:	23a0      	movs	r3, #160	; 0xa0
 8002ac6:	05db      	lsls	r3, r3, #23
 8002ac8:	0011      	movs	r1, r2
 8002aca:	0018      	movs	r0, r3
 8002acc:	f000 ff62 	bl	8003994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ad0:	0021      	movs	r1, r4
 8002ad2:	187b      	adds	r3, r7, r1
 8002ad4:	2203      	movs	r2, #3
 8002ad6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad8:	187b      	adds	r3, r7, r1
 8002ada:	2202      	movs	r2, #2
 8002adc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	187b      	adds	r3, r7, r1
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae4:	187b      	adds	r3, r7, r1
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002aea:	187b      	adds	r3, r7, r1
 8002aec:	2204      	movs	r2, #4
 8002aee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af0:	187b      	adds	r3, r7, r1
 8002af2:	4a0a      	ldr	r2, [pc, #40]	; (8002b1c <HAL_USART_MspInit+0xe8>)
 8002af4:	0019      	movs	r1, r3
 8002af6:	0010      	movs	r0, r2
 8002af8:	f000 ff4c 	bl	8003994 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8002afc:	2200      	movs	r2, #0
 8002afe:	2100      	movs	r1, #0
 8002b00:	201d      	movs	r0, #29
 8002b02:	f000 fd11 	bl	8003528 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8002b06:	201d      	movs	r0, #29
 8002b08:	f000 fd23 	bl	8003552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b0c:	46c0      	nop			; (mov r8, r8)
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b00b      	add	sp, #44	; 0x2c
 8002b12:	bd90      	pop	{r4, r7, pc}
 8002b14:	40004800 	.word	0x40004800
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	50000400 	.word	0x50000400

08002b20 <LL_USART_IsActiveFlag_FE>:
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d101      	bne.n	8002b38 <LL_USART_IsActiveFlag_FE+0x18>
 8002b34:	2301      	movs	r3, #1
 8002b36:	e000      	b.n	8002b3a <LL_USART_IsActiveFlag_FE+0x1a>
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b002      	add	sp, #8
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <LL_USART_IsActiveFlag_NE>:
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	2204      	movs	r2, #4
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d101      	bne.n	8002b5a <LL_USART_IsActiveFlag_NE+0x18>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <LL_USART_IsActiveFlag_NE+0x1a>
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b002      	add	sp, #8
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <LL_USART_IsActiveFlag_ORE>:
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	2208      	movs	r2, #8
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d101      	bne.n	8002b7c <LL_USART_IsActiveFlag_ORE+0x18>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <LL_USART_IsActiveFlag_ORE+0x1a>
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	0018      	movs	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b002      	add	sp, #8
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	2220      	movs	r2, #32
 8002b94:	4013      	ands	r3, r2
 8002b96:	2b20      	cmp	r3, #32
 8002b98:	d101      	bne.n	8002b9e <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b002      	add	sp, #8
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d101      	bne.n	8002bc0 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	b002      	add	sp, #8
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bd8:	e7fe      	b.n	8002bd8 <HardFault_Handler+0x4>

08002bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002be8:	46c0      	nop			; (mov r8, r8)
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bf2:	f000 f93b 	bl	8002e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002c00:	4b03      	ldr	r3, [pc, #12]	; (8002c10 <DMA1_Channel1_IRQHandler+0x14>)
 8002c02:	0018      	movs	r0, r3
 8002c04:	f000 fdb8 	bl	8003778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c08:	46c0      	nop			; (mov r8, r8)
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	2000343c 	.word	0x2000343c

08002c14 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002c18:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <I2C1_IRQHandler+0x2c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699a      	ldr	r2, [r3, #24]
 8002c1e:	23e0      	movs	r3, #224	; 0xe0
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	4013      	ands	r3, r2
 8002c24:	d004      	beq.n	8002c30 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8002c26:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <I2C1_IRQHandler+0x2c>)
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f001 f8c7 	bl	8003dbc <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002c2e:	e003      	b.n	8002c38 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002c30:	4b03      	ldr	r3, [pc, #12]	; (8002c40 <I2C1_IRQHandler+0x2c>)
 8002c32:	0018      	movs	r0, r3
 8002c34:	f001 f8a8 	bl	8003d88 <HAL_I2C_EV_IRQHandler>
}
 8002c38:	46c0      	nop			; (mov r8, r8)
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	2000321c 	.word	0x2000321c

08002c44 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8002c48:	4b03      	ldr	r3, [pc, #12]	; (8002c58 <SPI1_IRQHandler+0x14>)
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f002 f834 	bl	8004cb8 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002c50:	46c0      	nop			; (mov r8, r8)
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	20003378 	.word	0x20003378

08002c5c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002c60:	4b03      	ldr	r3, [pc, #12]	; (8002c70 <SPI2_IRQHandler+0x14>)
 8002c62:	0018      	movs	r0, r3
 8002c64:	f004 f81e 	bl	8006ca4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002c68:	46c0      	nop			; (mov r8, r8)
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	200031a4 	.word	0x200031a4

08002c74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 8002c78:	4b25      	ldr	r3, [pc, #148]	; (8002d10 <USART2_IRQHandler+0x9c>)
 8002c7a:	6a1a      	ldr	r2, [r3, #32]
 8002c7c:	4b24      	ldr	r3, [pc, #144]	; (8002d10 <USART2_IRQHandler+0x9c>)
 8002c7e:	2108      	movs	r1, #8
 8002c80:	430a      	orrs	r2, r1
 8002c82:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 8002c84:	4b22      	ldr	r3, [pc, #136]	; (8002d10 <USART2_IRQHandler+0x9c>)
 8002c86:	6a1a      	ldr	r2, [r3, #32]
 8002c88:	4b21      	ldr	r3, [pc, #132]	; (8002d10 <USART2_IRQHandler+0x9c>)
 8002c8a:	2102      	movs	r1, #2
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 8002c90:	4b1f      	ldr	r3, [pc, #124]	; (8002d10 <USART2_IRQHandler+0x9c>)
 8002c92:	6a1a      	ldr	r2, [r3, #32]
 8002c94:	4b1e      	ldr	r3, [pc, #120]	; (8002d10 <USART2_IRQHandler+0x9c>)
 8002c96:	2104      	movs	r1, #4
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 8002c9c:	4b1c      	ldr	r3, [pc, #112]	; (8002d10 <USART2_IRQHandler+0x9c>)
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f7ff ff71 	bl	8002b86 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8002ca4:	1e03      	subs	r3, r0, #0
 8002ca6:	d009      	beq.n	8002cbc <USART2_IRQHandler+0x48>
 8002ca8:	4b19      	ldr	r3, [pc, #100]	; (8002d10 <USART2_IRQHandler+0x9c>)
 8002caa:	0018      	movs	r0, r3
 8002cac:	f7ff ff7c 	bl	8002ba8 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8002cb0:	1e03      	subs	r3, r0, #0
 8002cb2:	d003      	beq.n	8002cbc <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 8002cb4:	f7fe f948 	bl	8000f48 <USART2_RX_Callback>
	  {
 8002cb8:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002cba:	e025      	b.n	8002d08 <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 8002cbc:	4b14      	ldr	r3, [pc, #80]	; (8002d10 <USART2_IRQHandler+0x9c>)
 8002cbe:	6a1a      	ldr	r2, [r3, #32]
 8002cc0:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <USART2_IRQHandler+0x9c>)
 8002cc2:	2108      	movs	r1, #8
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 8002cc8:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <USART2_IRQHandler+0x9c>)
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f7ff ff4a 	bl	8002b64 <LL_USART_IsActiveFlag_ORE>
 8002cd0:	1e03      	subs	r3, r0, #0
 8002cd2:	d008      	beq.n	8002ce6 <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 8002cd4:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <USART2_IRQHandler+0x9c>)
 8002cd6:	6a1a      	ldr	r2, [r3, #32]
 8002cd8:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <USART2_IRQHandler+0x9c>)
 8002cda:	2108      	movs	r1, #8
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <USART2_IRQHandler+0x9c>)
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002ce4:	e010      	b.n	8002d08 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <USART2_IRQHandler+0x9c>)
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f7ff ff19 	bl	8002b20 <LL_USART_IsActiveFlag_FE>
 8002cee:	1e03      	subs	r3, r0, #0
 8002cf0:	d002      	beq.n	8002cf8 <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 8002cf2:	4b07      	ldr	r3, [pc, #28]	; (8002d10 <USART2_IRQHandler+0x9c>)
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002cf6:	e007      	b.n	8002d08 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <USART2_IRQHandler+0x9c>)
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f7ff ff21 	bl	8002b42 <LL_USART_IsActiveFlag_NE>
 8002d00:	1e03      	subs	r3, r0, #0
 8002d02:	d001      	beq.n	8002d08 <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 8002d04:	4b02      	ldr	r3, [pc, #8]	; (8002d10 <USART2_IRQHandler+0x9c>)
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002d08:	46c0      	nop			; (mov r8, r8)
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	40004400 	.word	0x40004400

08002d14 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 8002d18:	4b03      	ldr	r3, [pc, #12]	; (8002d28 <USART3_4_LPUART1_IRQHandler+0x14>)
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f005 fcc2 	bl	80086a4 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	200032b8 	.word	0x200032b8

08002d2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d30:	4b03      	ldr	r3, [pc, #12]	; (8002d40 <SystemInit+0x14>)
 8002d32:	2280      	movs	r2, #128	; 0x80
 8002d34:	0512      	lsls	r2, r2, #20
 8002d36:	609a      	str	r2, [r3, #8]
#endif
}
 8002d38:	46c0      	nop			; (mov r8, r8)
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <Reset_Handler>:
 8002d44:	480d      	ldr	r0, [pc, #52]	; (8002d7c <LoopForever+0x2>)
 8002d46:	4685      	mov	sp, r0
 8002d48:	f7ff fff0 	bl	8002d2c <SystemInit>
 8002d4c:	480c      	ldr	r0, [pc, #48]	; (8002d80 <LoopForever+0x6>)
 8002d4e:	490d      	ldr	r1, [pc, #52]	; (8002d84 <LoopForever+0xa>)
 8002d50:	4a0d      	ldr	r2, [pc, #52]	; (8002d88 <LoopForever+0xe>)
 8002d52:	2300      	movs	r3, #0
 8002d54:	e002      	b.n	8002d5c <LoopCopyDataInit>

08002d56 <CopyDataInit>:
 8002d56:	58d4      	ldr	r4, [r2, r3]
 8002d58:	50c4      	str	r4, [r0, r3]
 8002d5a:	3304      	adds	r3, #4

08002d5c <LoopCopyDataInit>:
 8002d5c:	18c4      	adds	r4, r0, r3
 8002d5e:	428c      	cmp	r4, r1
 8002d60:	d3f9      	bcc.n	8002d56 <CopyDataInit>
 8002d62:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <LoopForever+0x12>)
 8002d64:	4c0a      	ldr	r4, [pc, #40]	; (8002d90 <LoopForever+0x16>)
 8002d66:	2300      	movs	r3, #0
 8002d68:	e001      	b.n	8002d6e <LoopFillZerobss>

08002d6a <FillZerobss>:
 8002d6a:	6013      	str	r3, [r2, #0]
 8002d6c:	3204      	adds	r2, #4

08002d6e <LoopFillZerobss>:
 8002d6e:	42a2      	cmp	r2, r4
 8002d70:	d3fb      	bcc.n	8002d6a <FillZerobss>
 8002d72:	f006 fddf 	bl	8009934 <__libc_init_array>
 8002d76:	f7fd fbcf 	bl	8000518 <main>

08002d7a <LoopForever>:
 8002d7a:	e7fe      	b.n	8002d7a <LoopForever>
 8002d7c:	20009000 	.word	0x20009000
 8002d80:	20000000 	.word	0x20000000
 8002d84:	20003140 	.word	0x20003140
 8002d88:	08009a90 	.word	0x08009a90
 8002d8c:	20003140 	.word	0x20003140
 8002d90:	200034c0 	.word	0x200034c0

08002d94 <ADC1_COMP_IRQHandler>:
 8002d94:	e7fe      	b.n	8002d94 <ADC1_COMP_IRQHandler>
	...

08002d98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d9e:	1dfb      	adds	r3, r7, #7
 8002da0:	2200      	movs	r2, #0
 8002da2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002da4:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_Init+0x3c>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <HAL_Init+0x3c>)
 8002daa:	2180      	movs	r1, #128	; 0x80
 8002dac:	0049      	lsls	r1, r1, #1
 8002dae:	430a      	orrs	r2, r1
 8002db0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002db2:	2000      	movs	r0, #0
 8002db4:	f000 f810 	bl	8002dd8 <HAL_InitTick>
 8002db8:	1e03      	subs	r3, r0, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002dbc:	1dfb      	adds	r3, r7, #7
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	701a      	strb	r2, [r3, #0]
 8002dc2:	e001      	b.n	8002dc8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002dc4:	f7ff fc10 	bl	80025e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002dc8:	1dfb      	adds	r3, r7, #7
 8002dca:	781b      	ldrb	r3, [r3, #0]
}
 8002dcc:	0018      	movs	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b002      	add	sp, #8
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40022000 	.word	0x40022000

08002dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dd8:	b590      	push	{r4, r7, lr}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002de0:	230f      	movs	r3, #15
 8002de2:	18fb      	adds	r3, r7, r3
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002de8:	4b1d      	ldr	r3, [pc, #116]	; (8002e60 <HAL_InitTick+0x88>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d02b      	beq.n	8002e48 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002df0:	4b1c      	ldr	r3, [pc, #112]	; (8002e64 <HAL_InitTick+0x8c>)
 8002df2:	681c      	ldr	r4, [r3, #0]
 8002df4:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <HAL_InitTick+0x88>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	0019      	movs	r1, r3
 8002dfa:	23fa      	movs	r3, #250	; 0xfa
 8002dfc:	0098      	lsls	r0, r3, #2
 8002dfe:	f7fd f981 	bl	8000104 <__udivsi3>
 8002e02:	0003      	movs	r3, r0
 8002e04:	0019      	movs	r1, r3
 8002e06:	0020      	movs	r0, r4
 8002e08:	f7fd f97c 	bl	8000104 <__udivsi3>
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f000 fbaf 	bl	8003572 <HAL_SYSTICK_Config>
 8002e14:	1e03      	subs	r3, r0, #0
 8002e16:	d112      	bne.n	8002e3e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d80a      	bhi.n	8002e34 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	2301      	movs	r3, #1
 8002e22:	425b      	negs	r3, r3
 8002e24:	2200      	movs	r2, #0
 8002e26:	0018      	movs	r0, r3
 8002e28:	f000 fb7e 	bl	8003528 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e2c:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <HAL_InitTick+0x90>)
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	e00d      	b.n	8002e50 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002e34:	230f      	movs	r3, #15
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	2201      	movs	r2, #1
 8002e3a:	701a      	strb	r2, [r3, #0]
 8002e3c:	e008      	b.n	8002e50 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e3e:	230f      	movs	r3, #15
 8002e40:	18fb      	adds	r3, r7, r3
 8002e42:	2201      	movs	r2, #1
 8002e44:	701a      	strb	r2, [r3, #0]
 8002e46:	e003      	b.n	8002e50 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e48:	230f      	movs	r3, #15
 8002e4a:	18fb      	adds	r3, r7, r3
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002e50:	230f      	movs	r3, #15
 8002e52:	18fb      	adds	r3, r7, r3
 8002e54:	781b      	ldrb	r3, [r3, #0]
}
 8002e56:	0018      	movs	r0, r3
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	b005      	add	sp, #20
 8002e5c:	bd90      	pop	{r4, r7, pc}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	2000313c 	.word	0x2000313c
 8002e64:	20003134 	.word	0x20003134
 8002e68:	20003138 	.word	0x20003138

08002e6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e70:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <HAL_IncTick+0x1c>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	001a      	movs	r2, r3
 8002e76:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <HAL_IncTick+0x20>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	18d2      	adds	r2, r2, r3
 8002e7c:	4b03      	ldr	r3, [pc, #12]	; (8002e8c <HAL_IncTick+0x20>)
 8002e7e:	601a      	str	r2, [r3, #0]
}
 8002e80:	46c0      	nop			; (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	2000313c 	.word	0x2000313c
 8002e8c:	200034bc 	.word	0x200034bc

08002e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  return uwTick;
 8002e94:	4b02      	ldr	r3, [pc, #8]	; (8002ea0 <HAL_GetTick+0x10>)
 8002e96:	681b      	ldr	r3, [r3, #0]
}
 8002e98:	0018      	movs	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	200034bc 	.word	0x200034bc

08002ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eac:	f7ff fff0 	bl	8002e90 <HAL_GetTick>
 8002eb0:	0003      	movs	r3, r0
 8002eb2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	d005      	beq.n	8002eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ebe:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <HAL_Delay+0x40>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	001a      	movs	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	189b      	adds	r3, r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	f7ff ffe0 	bl	8002e90 <HAL_GetTick>
 8002ed0:	0002      	movs	r2, r0
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d8f7      	bhi.n	8002ecc <HAL_Delay+0x28>
  {
  }
}
 8002edc:	46c0      	nop			; (mov r8, r8)
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b004      	add	sp, #16
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	2000313c 	.word	0x2000313c

08002ee8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002ef0:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a06      	ldr	r2, [pc, #24]	; (8002f10 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	0019      	movs	r1, r3
 8002efa:	4b04      	ldr	r3, [pc, #16]	; (8002f0c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	601a      	str	r2, [r3, #0]
}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	46bd      	mov	sp, r7
 8002f06:	b002      	add	sp, #8
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	40010000 	.word	0x40010000
 8002f10:	fffff9ff 	.word	0xfffff9ff

08002f14 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002f1c:	4a05      	ldr	r2, [pc, #20]	; (8002f34 <LL_EXTI_EnableIT_0_31+0x20>)
 8002f1e:	2380      	movs	r3, #128	; 0x80
 8002f20:	58d2      	ldr	r2, [r2, r3]
 8002f22:	4904      	ldr	r1, [pc, #16]	; (8002f34 <LL_EXTI_EnableIT_0_31+0x20>)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	2280      	movs	r2, #128	; 0x80
 8002f2a:	508b      	str	r3, [r1, r2]
}
 8002f2c:	46c0      	nop			; (mov r8, r8)
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b002      	add	sp, #8
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40021800 	.word	0x40021800

08002f38 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002f40:	4a06      	ldr	r2, [pc, #24]	; (8002f5c <LL_EXTI_DisableIT_0_31+0x24>)
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	58d3      	ldr	r3, [r2, r3]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	43d2      	mvns	r2, r2
 8002f4a:	4904      	ldr	r1, [pc, #16]	; (8002f5c <LL_EXTI_DisableIT_0_31+0x24>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2280      	movs	r2, #128	; 0x80
 8002f50:	508b      	str	r3, [r1, r2]
}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	46bd      	mov	sp, r7
 8002f56:	b002      	add	sp, #8
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	40021800 	.word	0x40021800

08002f60 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002f68:	4a05      	ldr	r2, [pc, #20]	; (8002f80 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002f6a:	2384      	movs	r3, #132	; 0x84
 8002f6c:	58d2      	ldr	r2, [r2, r3]
 8002f6e:	4904      	ldr	r1, [pc, #16]	; (8002f80 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	2284      	movs	r2, #132	; 0x84
 8002f76:	508b      	str	r3, [r1, r2]

}
 8002f78:	46c0      	nop			; (mov r8, r8)
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	b002      	add	sp, #8
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40021800 	.word	0x40021800

08002f84 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002f8c:	4a06      	ldr	r2, [pc, #24]	; (8002fa8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002f8e:	2384      	movs	r3, #132	; 0x84
 8002f90:	58d3      	ldr	r3, [r2, r3]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	43d2      	mvns	r2, r2
 8002f96:	4904      	ldr	r1, [pc, #16]	; (8002fa8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	2284      	movs	r2, #132	; 0x84
 8002f9c:	508b      	str	r3, [r1, r2]
}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	b002      	add	sp, #8
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	40021800 	.word	0x40021800

08002fac <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002fb4:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002fb6:	6819      	ldr	r1, [r3, #0]
 8002fb8:	4b03      	ldr	r3, [pc, #12]	; (8002fc8 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	601a      	str	r2, [r3, #0]

}
 8002fc0:	46c0      	nop			; (mov r8, r8)
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	b002      	add	sp, #8
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40021800 	.word	0x40021800

08002fcc <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002fd4:	4b05      	ldr	r3, [pc, #20]	; (8002fec <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	43d9      	mvns	r1, r3
 8002fdc:	4b03      	ldr	r3, [pc, #12]	; (8002fec <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002fde:	400a      	ands	r2, r1
 8002fe0:	601a      	str	r2, [r3, #0]

}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	b002      	add	sp, #8
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	40021800 	.word	0x40021800

08002ff0 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002ffa:	6859      	ldr	r1, [r3, #4]
 8002ffc:	4b03      	ldr	r3, [pc, #12]	; (800300c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	430a      	orrs	r2, r1
 8003002:	605a      	str	r2, [r3, #4]
}
 8003004:	46c0      	nop			; (mov r8, r8)
 8003006:	46bd      	mov	sp, r7
 8003008:	b002      	add	sp, #8
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40021800 	.word	0x40021800

08003010 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003018:	4b05      	ldr	r3, [pc, #20]	; (8003030 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	43d9      	mvns	r1, r3
 8003020:	4b03      	ldr	r3, [pc, #12]	; (8003030 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8003022:	400a      	ands	r2, r1
 8003024:	605a      	str	r2, [r3, #4]
}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	46bd      	mov	sp, r7
 800302a:	b002      	add	sp, #8
 800302c:	bd80      	pop	{r7, pc}
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	40021800 	.word	0x40021800

08003034 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 800303c:	4b03      	ldr	r3, [pc, #12]	; (800304c <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	611a      	str	r2, [r3, #16]
}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	46bd      	mov	sp, r7
 8003046:	b002      	add	sp, #8
 8003048:	bd80      	pop	{r7, pc}
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	40021800 	.word	0x40021800

08003050 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8003058:	4b03      	ldr	r3, [pc, #12]	; (8003068 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	60da      	str	r2, [r3, #12]
}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	46bd      	mov	sp, r7
 8003062:	b002      	add	sp, #8
 8003064:	bd80      	pop	{r7, pc}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	40021800 	.word	0x40021800

0800306c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003074:	2300      	movs	r3, #0
 8003076:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003078:	231f      	movs	r3, #31
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	2200      	movs	r2, #0
 800307e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d104      	bne.n	8003090 <HAL_COMP_Init+0x24>
  {
    status = HAL_ERROR;
 8003086:	231f      	movs	r3, #31
 8003088:	18fb      	adds	r3, r7, r3
 800308a:	2201      	movs	r2, #1
 800308c:	701a      	strb	r2, [r3, #0]
 800308e:	e13a      	b.n	8003306 <HAL_COMP_Init+0x29a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	0fdb      	lsrs	r3, r3, #31
 8003098:	07da      	lsls	r2, r3, #31
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	061b      	lsls	r3, r3, #24
 800309e:	429a      	cmp	r2, r3
 80030a0:	d104      	bne.n	80030ac <HAL_COMP_Init+0x40>
  {
    status = HAL_ERROR;
 80030a2:	231f      	movs	r3, #31
 80030a4:	18fb      	adds	r3, r7, r3
 80030a6:	2201      	movs	r2, #1
 80030a8:	701a      	strb	r2, [r3, #0]
 80030aa:	e12c      	b.n	8003306 <HAL_COMP_Init+0x29a>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2229      	movs	r2, #41	; 0x29
 80030b0:	5c9b      	ldrb	r3, [r3, r2]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10a      	bne.n	80030ce <HAL_COMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2228      	movs	r2, #40	; 0x28
 80030bc:	2100      	movs	r1, #0
 80030be:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	0018      	movs	r0, r3
 80030ca:	f7ff fab5 	bl	8002638 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2230      	movs	r2, #48	; 0x30
 80030d6:	4013      	ands	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 80030fa:	4313      	orrs	r3, r2
 80030fc:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a83      	ldr	r2, [pc, #524]	; (8003314 <HAL_COMP_Init+0x2a8>)
 8003106:	4013      	ands	r3, r2
 8003108:	0019      	movs	r1, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	430a      	orrs	r2, r1
 8003112:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	2380      	movs	r3, #128	; 0x80
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	429a      	cmp	r2, r3
 800311e:	d10d      	bne.n	800313c <HAL_COMP_Init+0xd0>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8003120:	4b7d      	ldr	r3, [pc, #500]	; (8003318 <HAL_COMP_Init+0x2ac>)
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	4b7c      	ldr	r3, [pc, #496]	; (8003318 <HAL_COMP_Init+0x2ac>)
 8003126:	497d      	ldr	r1, [pc, #500]	; (800331c <HAL_COMP_Init+0x2b0>)
 8003128:	400a      	ands	r2, r1
 800312a:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800312c:	4b7a      	ldr	r3, [pc, #488]	; (8003318 <HAL_COMP_Init+0x2ac>)
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	4b79      	ldr	r3, [pc, #484]	; (8003318 <HAL_COMP_Init+0x2ac>)
 8003132:	2180      	movs	r1, #128	; 0x80
 8003134:	0109      	lsls	r1, r1, #4
 8003136:	430a      	orrs	r2, r1
 8003138:	605a      	str	r2, [r3, #4]
 800313a:	e01f      	b.n	800317c <HAL_COMP_Init+0x110>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	23c0      	movs	r3, #192	; 0xc0
 8003142:	015b      	lsls	r3, r3, #5
 8003144:	429a      	cmp	r2, r3
 8003146:	d10d      	bne.n	8003164 <HAL_COMP_Init+0xf8>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8003148:	4b73      	ldr	r3, [pc, #460]	; (8003318 <HAL_COMP_Init+0x2ac>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4b72      	ldr	r3, [pc, #456]	; (8003318 <HAL_COMP_Init+0x2ac>)
 800314e:	2180      	movs	r1, #128	; 0x80
 8003150:	0109      	lsls	r1, r1, #4
 8003152:	430a      	orrs	r2, r1
 8003154:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8003156:	4b70      	ldr	r3, [pc, #448]	; (8003318 <HAL_COMP_Init+0x2ac>)
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	4b6f      	ldr	r3, [pc, #444]	; (8003318 <HAL_COMP_Init+0x2ac>)
 800315c:	496f      	ldr	r1, [pc, #444]	; (800331c <HAL_COMP_Init+0x2b0>)
 800315e:	400a      	ands	r2, r1
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	e00b      	b.n	800317c <HAL_COMP_Init+0x110>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8003164:	4b6c      	ldr	r3, [pc, #432]	; (8003318 <HAL_COMP_Init+0x2ac>)
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	4b6b      	ldr	r3, [pc, #428]	; (8003318 <HAL_COMP_Init+0x2ac>)
 800316a:	496c      	ldr	r1, [pc, #432]	; (800331c <HAL_COMP_Init+0x2b0>)
 800316c:	400a      	ands	r2, r1
 800316e:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8003170:	4b69      	ldr	r3, [pc, #420]	; (8003318 <HAL_COMP_Init+0x2ac>)
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	4b68      	ldr	r3, [pc, #416]	; (8003318 <HAL_COMP_Init+0x2ac>)
 8003176:	4969      	ldr	r1, [pc, #420]	; (800331c <HAL_COMP_Init+0x2b0>)
 8003178:	400a      	ands	r2, r1
 800317a:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2280      	movs	r2, #128	; 0x80
 8003182:	01d2      	lsls	r2, r2, #7
 8003184:	4293      	cmp	r3, r2
 8003186:	d006      	beq.n	8003196 <HAL_COMP_Init+0x12a>
 8003188:	22a0      	movs	r2, #160	; 0xa0
 800318a:	01d2      	lsls	r2, r2, #7
 800318c:	4293      	cmp	r3, r2
 800318e:	d010      	beq.n	80031b2 <HAL_COMP_Init+0x146>
 8003190:	2b01      	cmp	r3, #1
 8003192:	d01c      	beq.n	80031ce <HAL_COMP_Init+0x162>
 8003194:	e02a      	b.n	80031ec <HAL_COMP_Init+0x180>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8003196:	4b60      	ldr	r3, [pc, #384]	; (8003318 <HAL_COMP_Init+0x2ac>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	4b5f      	ldr	r3, [pc, #380]	; (8003318 <HAL_COMP_Init+0x2ac>)
 800319c:	2180      	movs	r1, #128	; 0x80
 800319e:	01c9      	lsls	r1, r1, #7
 80031a0:	430a      	orrs	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80031a4:	4b5c      	ldr	r3, [pc, #368]	; (8003318 <HAL_COMP_Init+0x2ac>)
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	4b5b      	ldr	r3, [pc, #364]	; (8003318 <HAL_COMP_Init+0x2ac>)
 80031aa:	495d      	ldr	r1, [pc, #372]	; (8003320 <HAL_COMP_Init+0x2b4>)
 80031ac:	400a      	ands	r2, r1
 80031ae:	605a      	str	r2, [r3, #4]
        break;
 80031b0:	e029      	b.n	8003206 <HAL_COMP_Init+0x19a>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80031b2:	4b59      	ldr	r3, [pc, #356]	; (8003318 <HAL_COMP_Init+0x2ac>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	4b58      	ldr	r3, [pc, #352]	; (8003318 <HAL_COMP_Init+0x2ac>)
 80031b8:	4959      	ldr	r1, [pc, #356]	; (8003320 <HAL_COMP_Init+0x2b4>)
 80031ba:	400a      	ands	r2, r1
 80031bc:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80031be:	4b56      	ldr	r3, [pc, #344]	; (8003318 <HAL_COMP_Init+0x2ac>)
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	4b55      	ldr	r3, [pc, #340]	; (8003318 <HAL_COMP_Init+0x2ac>)
 80031c4:	2180      	movs	r1, #128	; 0x80
 80031c6:	01c9      	lsls	r1, r1, #7
 80031c8:	430a      	orrs	r2, r1
 80031ca:	605a      	str	r2, [r3, #4]
        break;
 80031cc:	e01b      	b.n	8003206 <HAL_COMP_Init+0x19a>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80031ce:	4b52      	ldr	r3, [pc, #328]	; (8003318 <HAL_COMP_Init+0x2ac>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	4b51      	ldr	r3, [pc, #324]	; (8003318 <HAL_COMP_Init+0x2ac>)
 80031d4:	2180      	movs	r1, #128	; 0x80
 80031d6:	01c9      	lsls	r1, r1, #7
 80031d8:	430a      	orrs	r2, r1
 80031da:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80031dc:	4b4e      	ldr	r3, [pc, #312]	; (8003318 <HAL_COMP_Init+0x2ac>)
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	4b4d      	ldr	r3, [pc, #308]	; (8003318 <HAL_COMP_Init+0x2ac>)
 80031e2:	2180      	movs	r1, #128	; 0x80
 80031e4:	01c9      	lsls	r1, r1, #7
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]
        break;
 80031ea:	e00c      	b.n	8003206 <HAL_COMP_Init+0x19a>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80031ec:	4b4a      	ldr	r3, [pc, #296]	; (8003318 <HAL_COMP_Init+0x2ac>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4b49      	ldr	r3, [pc, #292]	; (8003318 <HAL_COMP_Init+0x2ac>)
 80031f2:	494b      	ldr	r1, [pc, #300]	; (8003320 <HAL_COMP_Init+0x2b4>)
 80031f4:	400a      	ands	r2, r1
 80031f6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80031f8:	4b47      	ldr	r3, [pc, #284]	; (8003318 <HAL_COMP_Init+0x2ac>)
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	4b46      	ldr	r3, [pc, #280]	; (8003318 <HAL_COMP_Init+0x2ac>)
 80031fe:	4948      	ldr	r1, [pc, #288]	; (8003320 <HAL_COMP_Init+0x2b4>)
 8003200:	400a      	ands	r2, r1
 8003202:	605a      	str	r2, [r3, #4]
        break;
 8003204:	46c0      	nop			; (mov r8, r8)
    }
#endif

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2230      	movs	r2, #48	; 0x30
 800320e:	4013      	ands	r3, r2
 8003210:	d016      	beq.n	8003240 <HAL_COMP_Init+0x1d4>
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d113      	bne.n	8003240 <HAL_COMP_Init+0x1d4>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003218:	4b42      	ldr	r3, [pc, #264]	; (8003324 <HAL_COMP_Init+0x2b8>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4942      	ldr	r1, [pc, #264]	; (8003328 <HAL_COMP_Init+0x2bc>)
 800321e:	0018      	movs	r0, r3
 8003220:	f7fc ff70 	bl	8000104 <__udivsi3>
 8003224:	0003      	movs	r3, r0
 8003226:	001a      	movs	r2, r3
 8003228:	0013      	movs	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	189b      	adds	r3, r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003232:	e002      	b.n	800323a <HAL_COMP_Init+0x1ce>
      {
        wait_loop_index--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	3b01      	subs	r3, #1
 8003238:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f9      	bne.n	8003234 <HAL_COMP_Init+0x1c8>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a34      	ldr	r2, [pc, #208]	; (8003318 <HAL_COMP_Init+0x2ac>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d102      	bne.n	8003250 <HAL_COMP_Init+0x1e4>
 800324a:	2380      	movs	r3, #128	; 0x80
 800324c:	029b      	lsls	r3, r3, #10
 800324e:	e001      	b.n	8003254 <HAL_COMP_Init+0x1e8>
 8003250:	2380      	movs	r3, #128	; 0x80
 8003252:	02db      	lsls	r3, r3, #11
 8003254:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	2203      	movs	r2, #3
 800325c:	4013      	ands	r3, r2
 800325e:	d040      	beq.n	80032e2 <HAL_COMP_Init+0x276>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	2210      	movs	r2, #16
 8003266:	4013      	ands	r3, r2
 8003268:	d004      	beq.n	8003274 <HAL_COMP_Init+0x208>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	0018      	movs	r0, r3
 800326e:	f7ff fe9d 	bl	8002fac <LL_EXTI_EnableRisingTrig_0_31>
 8003272:	e003      	b.n	800327c <HAL_COMP_Init+0x210>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	0018      	movs	r0, r3
 8003278:	f7ff fea8 	bl	8002fcc <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	2220      	movs	r2, #32
 8003282:	4013      	ands	r3, r2
 8003284:	d004      	beq.n	8003290 <HAL_COMP_Init+0x224>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	0018      	movs	r0, r3
 800328a:	f7ff feb1 	bl	8002ff0 <LL_EXTI_EnableFallingTrig_0_31>
 800328e:	e003      	b.n	8003298 <HAL_COMP_Init+0x22c>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	0018      	movs	r0, r3
 8003294:	f7ff febc 	bl	8003010 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	0018      	movs	r0, r3
 800329c:	f7ff fed8 	bl	8003050 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	0018      	movs	r0, r3
 80032a4:	f7ff fec6 	bl	8003034 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	2202      	movs	r2, #2
 80032ae:	4013      	ands	r3, r2
 80032b0:	d004      	beq.n	80032bc <HAL_COMP_Init+0x250>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	0018      	movs	r0, r3
 80032b6:	f7ff fe53 	bl	8002f60 <LL_EXTI_EnableEvent_0_31>
 80032ba:	e003      	b.n	80032c4 <HAL_COMP_Init+0x258>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	0018      	movs	r0, r3
 80032c0:	f7ff fe60 	bl	8002f84 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	2201      	movs	r2, #1
 80032ca:	4013      	ands	r3, r2
 80032cc:	d004      	beq.n	80032d8 <HAL_COMP_Init+0x26c>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	0018      	movs	r0, r3
 80032d2:	f7ff fe1f 	bl	8002f14 <LL_EXTI_EnableIT_0_31>
 80032d6:	e00c      	b.n	80032f2 <HAL_COMP_Init+0x286>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	0018      	movs	r0, r3
 80032dc:	f7ff fe2c 	bl	8002f38 <LL_EXTI_DisableIT_0_31>
 80032e0:	e007      	b.n	80032f2 <HAL_COMP_Init+0x286>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	0018      	movs	r0, r3
 80032e6:	f7ff fe4d 	bl	8002f84 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	0018      	movs	r0, r3
 80032ee:	f7ff fe23 	bl	8002f38 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2229      	movs	r2, #41	; 0x29
 80032f6:	5c9b      	ldrb	r3, [r3, r2]
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d103      	bne.n	8003306 <HAL_COMP_Init+0x29a>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2229      	movs	r2, #41	; 0x29
 8003302:	2101      	movs	r1, #1
 8003304:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8003306:	231f      	movs	r3, #31
 8003308:	18fb      	adds	r3, r7, r3
 800330a:	781b      	ldrb	r3, [r3, #0]
}
 800330c:	0018      	movs	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	b008      	add	sp, #32
 8003312:	bd80      	pop	{r7, pc}
 8003314:	fe00740f 	.word	0xfe00740f
 8003318:	40010200 	.word	0x40010200
 800331c:	fffff7ff 	.word	0xfffff7ff
 8003320:	ffffbfff 	.word	0xffffbfff
 8003324:	20003134 	.word	0x20003134
 8003328:	00030d40 	.word	0x00030d40

0800332c <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8003334:	2300      	movs	r3, #0
 8003336:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003338:	230f      	movs	r3, #15
 800333a:	18fb      	adds	r3, r7, r3
 800333c:	2200      	movs	r2, #0
 800333e:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d104      	bne.n	8003350 <HAL_COMP_Start+0x24>
  {
    status = HAL_ERROR;
 8003346:	230f      	movs	r3, #15
 8003348:	18fb      	adds	r3, r7, r3
 800334a:	2201      	movs	r2, #1
 800334c:	701a      	strb	r2, [r3, #0]
 800334e:	e034      	b.n	80033ba <HAL_COMP_Start+0x8e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	0fdb      	lsrs	r3, r3, #31
 8003358:	07da      	lsls	r2, r3, #31
 800335a:	2380      	movs	r3, #128	; 0x80
 800335c:	061b      	lsls	r3, r3, #24
 800335e:	429a      	cmp	r2, r3
 8003360:	d104      	bne.n	800336c <HAL_COMP_Start+0x40>
  {
    status = HAL_ERROR;
 8003362:	230f      	movs	r3, #15
 8003364:	18fb      	adds	r3, r7, r3
 8003366:	2201      	movs	r2, #1
 8003368:	701a      	strb	r2, [r3, #0]
 800336a:	e026      	b.n	80033ba <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2229      	movs	r2, #41	; 0x29
 8003370:	5c9b      	ldrb	r3, [r3, r2]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b01      	cmp	r3, #1
 8003376:	d11c      	bne.n	80033b2 <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2101      	movs	r1, #1
 8003384:	430a      	orrs	r2, r1
 8003386:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2229      	movs	r2, #41	; 0x29
 800338c:	2102      	movs	r1, #2
 800338e:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003390:	4b0d      	ldr	r3, [pc, #52]	; (80033c8 <HAL_COMP_Start+0x9c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	490d      	ldr	r1, [pc, #52]	; (80033cc <HAL_COMP_Start+0xa0>)
 8003396:	0018      	movs	r0, r3
 8003398:	f7fc feb4 	bl	8000104 <__udivsi3>
 800339c:	0003      	movs	r3, r0
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80033a2:	e002      	b.n	80033aa <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1f9      	bne.n	80033a4 <HAL_COMP_Start+0x78>
 80033b0:	e003      	b.n	80033ba <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80033b2:	230f      	movs	r3, #15
 80033b4:	18fb      	adds	r3, r7, r3
 80033b6:	2201      	movs	r2, #1
 80033b8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80033ba:	230f      	movs	r3, #15
 80033bc:	18fb      	adds	r3, r7, r3
 80033be:	781b      	ldrb	r3, [r3, #0]
}
 80033c0:	0018      	movs	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	b004      	add	sp, #16
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	20003134 	.word	0x20003134
 80033cc:	00030d40 	.word	0x00030d40

080033d0 <__NVIC_EnableIRQ>:
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	0002      	movs	r2, r0
 80033d8:	1dfb      	adds	r3, r7, #7
 80033da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033dc:	1dfb      	adds	r3, r7, #7
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b7f      	cmp	r3, #127	; 0x7f
 80033e2:	d809      	bhi.n	80033f8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033e4:	1dfb      	adds	r3, r7, #7
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	001a      	movs	r2, r3
 80033ea:	231f      	movs	r3, #31
 80033ec:	401a      	ands	r2, r3
 80033ee:	4b04      	ldr	r3, [pc, #16]	; (8003400 <__NVIC_EnableIRQ+0x30>)
 80033f0:	2101      	movs	r1, #1
 80033f2:	4091      	lsls	r1, r2
 80033f4:	000a      	movs	r2, r1
 80033f6:	601a      	str	r2, [r3, #0]
}
 80033f8:	46c0      	nop			; (mov r8, r8)
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b002      	add	sp, #8
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	e000e100 	.word	0xe000e100

08003404 <__NVIC_SetPriority>:
{
 8003404:	b590      	push	{r4, r7, lr}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	0002      	movs	r2, r0
 800340c:	6039      	str	r1, [r7, #0]
 800340e:	1dfb      	adds	r3, r7, #7
 8003410:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003412:	1dfb      	adds	r3, r7, #7
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b7f      	cmp	r3, #127	; 0x7f
 8003418:	d828      	bhi.n	800346c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800341a:	4a2f      	ldr	r2, [pc, #188]	; (80034d8 <__NVIC_SetPriority+0xd4>)
 800341c:	1dfb      	adds	r3, r7, #7
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	b25b      	sxtb	r3, r3
 8003422:	089b      	lsrs	r3, r3, #2
 8003424:	33c0      	adds	r3, #192	; 0xc0
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	589b      	ldr	r3, [r3, r2]
 800342a:	1dfa      	adds	r2, r7, #7
 800342c:	7812      	ldrb	r2, [r2, #0]
 800342e:	0011      	movs	r1, r2
 8003430:	2203      	movs	r2, #3
 8003432:	400a      	ands	r2, r1
 8003434:	00d2      	lsls	r2, r2, #3
 8003436:	21ff      	movs	r1, #255	; 0xff
 8003438:	4091      	lsls	r1, r2
 800343a:	000a      	movs	r2, r1
 800343c:	43d2      	mvns	r2, r2
 800343e:	401a      	ands	r2, r3
 8003440:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	019b      	lsls	r3, r3, #6
 8003446:	22ff      	movs	r2, #255	; 0xff
 8003448:	401a      	ands	r2, r3
 800344a:	1dfb      	adds	r3, r7, #7
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	0018      	movs	r0, r3
 8003450:	2303      	movs	r3, #3
 8003452:	4003      	ands	r3, r0
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003458:	481f      	ldr	r0, [pc, #124]	; (80034d8 <__NVIC_SetPriority+0xd4>)
 800345a:	1dfb      	adds	r3, r7, #7
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	b25b      	sxtb	r3, r3
 8003460:	089b      	lsrs	r3, r3, #2
 8003462:	430a      	orrs	r2, r1
 8003464:	33c0      	adds	r3, #192	; 0xc0
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	501a      	str	r2, [r3, r0]
}
 800346a:	e031      	b.n	80034d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800346c:	4a1b      	ldr	r2, [pc, #108]	; (80034dc <__NVIC_SetPriority+0xd8>)
 800346e:	1dfb      	adds	r3, r7, #7
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	0019      	movs	r1, r3
 8003474:	230f      	movs	r3, #15
 8003476:	400b      	ands	r3, r1
 8003478:	3b08      	subs	r3, #8
 800347a:	089b      	lsrs	r3, r3, #2
 800347c:	3306      	adds	r3, #6
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	18d3      	adds	r3, r2, r3
 8003482:	3304      	adds	r3, #4
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	1dfa      	adds	r2, r7, #7
 8003488:	7812      	ldrb	r2, [r2, #0]
 800348a:	0011      	movs	r1, r2
 800348c:	2203      	movs	r2, #3
 800348e:	400a      	ands	r2, r1
 8003490:	00d2      	lsls	r2, r2, #3
 8003492:	21ff      	movs	r1, #255	; 0xff
 8003494:	4091      	lsls	r1, r2
 8003496:	000a      	movs	r2, r1
 8003498:	43d2      	mvns	r2, r2
 800349a:	401a      	ands	r2, r3
 800349c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	019b      	lsls	r3, r3, #6
 80034a2:	22ff      	movs	r2, #255	; 0xff
 80034a4:	401a      	ands	r2, r3
 80034a6:	1dfb      	adds	r3, r7, #7
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	0018      	movs	r0, r3
 80034ac:	2303      	movs	r3, #3
 80034ae:	4003      	ands	r3, r0
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034b4:	4809      	ldr	r0, [pc, #36]	; (80034dc <__NVIC_SetPriority+0xd8>)
 80034b6:	1dfb      	adds	r3, r7, #7
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	001c      	movs	r4, r3
 80034bc:	230f      	movs	r3, #15
 80034be:	4023      	ands	r3, r4
 80034c0:	3b08      	subs	r3, #8
 80034c2:	089b      	lsrs	r3, r3, #2
 80034c4:	430a      	orrs	r2, r1
 80034c6:	3306      	adds	r3, #6
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	18c3      	adds	r3, r0, r3
 80034cc:	3304      	adds	r3, #4
 80034ce:	601a      	str	r2, [r3, #0]
}
 80034d0:	46c0      	nop			; (mov r8, r8)
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b003      	add	sp, #12
 80034d6:	bd90      	pop	{r4, r7, pc}
 80034d8:	e000e100 	.word	0xe000e100
 80034dc:	e000ed00 	.word	0xe000ed00

080034e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	4a0c      	ldr	r2, [pc, #48]	; (8003520 <SysTick_Config+0x40>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d901      	bls.n	80034f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034f2:	2301      	movs	r3, #1
 80034f4:	e010      	b.n	8003518 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034f6:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <SysTick_Config+0x44>)
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	3a01      	subs	r2, #1
 80034fc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034fe:	2301      	movs	r3, #1
 8003500:	425b      	negs	r3, r3
 8003502:	2103      	movs	r1, #3
 8003504:	0018      	movs	r0, r3
 8003506:	f7ff ff7d 	bl	8003404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800350a:	4b06      	ldr	r3, [pc, #24]	; (8003524 <SysTick_Config+0x44>)
 800350c:	2200      	movs	r2, #0
 800350e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003510:	4b04      	ldr	r3, [pc, #16]	; (8003524 <SysTick_Config+0x44>)
 8003512:	2207      	movs	r2, #7
 8003514:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003516:	2300      	movs	r3, #0
}
 8003518:	0018      	movs	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	b002      	add	sp, #8
 800351e:	bd80      	pop	{r7, pc}
 8003520:	00ffffff 	.word	0x00ffffff
 8003524:	e000e010 	.word	0xe000e010

08003528 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	607a      	str	r2, [r7, #4]
 8003532:	210f      	movs	r1, #15
 8003534:	187b      	adds	r3, r7, r1
 8003536:	1c02      	adds	r2, r0, #0
 8003538:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	187b      	adds	r3, r7, r1
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	b25b      	sxtb	r3, r3
 8003542:	0011      	movs	r1, r2
 8003544:	0018      	movs	r0, r3
 8003546:	f7ff ff5d 	bl	8003404 <__NVIC_SetPriority>
}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	46bd      	mov	sp, r7
 800354e:	b004      	add	sp, #16
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b082      	sub	sp, #8
 8003556:	af00      	add	r7, sp, #0
 8003558:	0002      	movs	r2, r0
 800355a:	1dfb      	adds	r3, r7, #7
 800355c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800355e:	1dfb      	adds	r3, r7, #7
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	b25b      	sxtb	r3, r3
 8003564:	0018      	movs	r0, r3
 8003566:	f7ff ff33 	bl	80033d0 <__NVIC_EnableIRQ>
}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	46bd      	mov	sp, r7
 800356e:	b002      	add	sp, #8
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b082      	sub	sp, #8
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	0018      	movs	r0, r3
 800357e:	f7ff ffaf 	bl	80034e0 <SysTick_Config>
 8003582:	0003      	movs	r3, r0
}
 8003584:	0018      	movs	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	b002      	add	sp, #8
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e077      	b.n	800368e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a3d      	ldr	r2, [pc, #244]	; (8003698 <HAL_DMA_Init+0x10c>)
 80035a4:	4694      	mov	ip, r2
 80035a6:	4463      	add	r3, ip
 80035a8:	2114      	movs	r1, #20
 80035aa:	0018      	movs	r0, r3
 80035ac:	f7fc fdaa 	bl	8000104 <__udivsi3>
 80035b0:	0003      	movs	r3, r0
 80035b2:	009a      	lsls	r2, r3, #2
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2225      	movs	r2, #37	; 0x25
 80035bc:	2102      	movs	r1, #2
 80035be:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4934      	ldr	r1, [pc, #208]	; (800369c <HAL_DMA_Init+0x110>)
 80035cc:	400a      	ands	r2, r1
 80035ce:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6819      	ldr	r1, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	431a      	orrs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	431a      	orrs	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	0018      	movs	r0, r3
 800360a:	f000 f973 	bl	80038f4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	2380      	movs	r3, #128	; 0x80
 8003614:	01db      	lsls	r3, r3, #7
 8003616:	429a      	cmp	r2, r3
 8003618:	d102      	bne.n	8003620 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003628:	213f      	movs	r1, #63	; 0x3f
 800362a:	400a      	ands	r2, r1
 800362c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003636:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d011      	beq.n	8003664 <HAL_DMA_Init+0xd8>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b04      	cmp	r3, #4
 8003646:	d80d      	bhi.n	8003664 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	0018      	movs	r0, r3
 800364c:	f000 f97e 	bl	800394c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003660:	605a      	str	r2, [r3, #4]
 8003662:	e008      	b.n	8003676 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2225      	movs	r2, #37	; 0x25
 8003680:	2101      	movs	r1, #1
 8003682:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2224      	movs	r2, #36	; 0x24
 8003688:	2100      	movs	r1, #0
 800368a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	0018      	movs	r0, r3
 8003690:	46bd      	mov	sp, r7
 8003692:	b002      	add	sp, #8
 8003694:	bd80      	pop	{r7, pc}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	bffdfff8 	.word	0xbffdfff8
 800369c:	ffff800f 	.word	0xffff800f

080036a0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a8:	230f      	movs	r3, #15
 80036aa:	18fb      	adds	r3, r7, r3
 80036ac:	2200      	movs	r2, #0
 80036ae:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2225      	movs	r2, #37	; 0x25
 80036b4:	5c9b      	ldrb	r3, [r3, r2]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d007      	beq.n	80036cc <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2204      	movs	r2, #4
 80036c0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80036c2:	230f      	movs	r3, #15
 80036c4:	18fb      	adds	r3, r7, r3
 80036c6:	2201      	movs	r2, #1
 80036c8:	701a      	strb	r2, [r3, #0]
 80036ca:	e049      	b.n	8003760 <HAL_DMA_Abort_IT+0xc0>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	210e      	movs	r1, #14
 80036d8:	438a      	bics	r2, r1
 80036da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2101      	movs	r1, #1
 80036e8:	438a      	bics	r2, r1
 80036ea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f6:	491e      	ldr	r1, [pc, #120]	; (8003770 <HAL_DMA_Abort_IT+0xd0>)
 80036f8:	400a      	ands	r2, r1
 80036fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80036fc:	4b1d      	ldr	r3, [pc, #116]	; (8003774 <HAL_DMA_Abort_IT+0xd4>)
 80036fe:	6859      	ldr	r1, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	221c      	movs	r2, #28
 8003706:	4013      	ands	r3, r2
 8003708:	2201      	movs	r2, #1
 800370a:	409a      	lsls	r2, r3
 800370c:	4b19      	ldr	r3, [pc, #100]	; (8003774 <HAL_DMA_Abort_IT+0xd4>)
 800370e:	430a      	orrs	r2, r1
 8003710:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800371a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00c      	beq.n	800373e <HAL_DMA_Abort_IT+0x9e>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372e:	4910      	ldr	r1, [pc, #64]	; (8003770 <HAL_DMA_Abort_IT+0xd0>)
 8003730:	400a      	ands	r2, r1
 8003732:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800373c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2225      	movs	r2, #37	; 0x25
 8003742:	2101      	movs	r1, #1
 8003744:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2224      	movs	r2, #36	; 0x24
 800374a:	2100      	movs	r1, #0
 800374c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003752:	2b00      	cmp	r3, #0
 8003754:	d004      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc0>
    {
      hdma->XferAbortCallback(hdma);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	0010      	movs	r0, r2
 800375e:	4798      	blx	r3
    }
  }
  return status;
 8003760:	230f      	movs	r3, #15
 8003762:	18fb      	adds	r3, r7, r3
 8003764:	781b      	ldrb	r3, [r3, #0]
}
 8003766:	0018      	movs	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	b004      	add	sp, #16
 800376c:	bd80      	pop	{r7, pc}
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	fffffeff 	.word	0xfffffeff
 8003774:	40020000 	.word	0x40020000

08003778 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003780:	4b55      	ldr	r3, [pc, #340]	; (80038d8 <HAL_DMA_IRQHandler+0x160>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	221c      	movs	r2, #28
 8003794:	4013      	ands	r3, r2
 8003796:	2204      	movs	r2, #4
 8003798:	409a      	lsls	r2, r3
 800379a:	0013      	movs	r3, r2
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	4013      	ands	r3, r2
 80037a0:	d027      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x7a>
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2204      	movs	r2, #4
 80037a6:	4013      	ands	r3, r2
 80037a8:	d023      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2220      	movs	r2, #32
 80037b2:	4013      	ands	r3, r2
 80037b4:	d107      	bne.n	80037c6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2104      	movs	r1, #4
 80037c2:	438a      	bics	r2, r1
 80037c4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80037c6:	4b44      	ldr	r3, [pc, #272]	; (80038d8 <HAL_DMA_IRQHandler+0x160>)
 80037c8:	6859      	ldr	r1, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	221c      	movs	r2, #28
 80037d0:	4013      	ands	r3, r2
 80037d2:	2204      	movs	r2, #4
 80037d4:	409a      	lsls	r2, r3
 80037d6:	4b40      	ldr	r3, [pc, #256]	; (80038d8 <HAL_DMA_IRQHandler+0x160>)
 80037d8:	430a      	orrs	r2, r1
 80037da:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d100      	bne.n	80037e6 <HAL_DMA_IRQHandler+0x6e>
 80037e4:	e073      	b.n	80038ce <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	0010      	movs	r0, r2
 80037ee:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80037f0:	e06d      	b.n	80038ce <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	221c      	movs	r2, #28
 80037f8:	4013      	ands	r3, r2
 80037fa:	2202      	movs	r2, #2
 80037fc:	409a      	lsls	r2, r3
 80037fe:	0013      	movs	r3, r2
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	4013      	ands	r3, r2
 8003804:	d02e      	beq.n	8003864 <HAL_DMA_IRQHandler+0xec>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2202      	movs	r2, #2
 800380a:	4013      	ands	r3, r2
 800380c:	d02a      	beq.n	8003864 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2220      	movs	r2, #32
 8003816:	4013      	ands	r3, r2
 8003818:	d10b      	bne.n	8003832 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	210a      	movs	r1, #10
 8003826:	438a      	bics	r2, r1
 8003828:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2225      	movs	r2, #37	; 0x25
 800382e:	2101      	movs	r1, #1
 8003830:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003832:	4b29      	ldr	r3, [pc, #164]	; (80038d8 <HAL_DMA_IRQHandler+0x160>)
 8003834:	6859      	ldr	r1, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	221c      	movs	r2, #28
 800383c:	4013      	ands	r3, r2
 800383e:	2202      	movs	r2, #2
 8003840:	409a      	lsls	r2, r3
 8003842:	4b25      	ldr	r3, [pc, #148]	; (80038d8 <HAL_DMA_IRQHandler+0x160>)
 8003844:	430a      	orrs	r2, r1
 8003846:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2224      	movs	r2, #36	; 0x24
 800384c:	2100      	movs	r1, #0
 800384e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	2b00      	cmp	r3, #0
 8003856:	d03a      	beq.n	80038ce <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	0010      	movs	r0, r2
 8003860:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003862:	e034      	b.n	80038ce <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	221c      	movs	r2, #28
 800386a:	4013      	ands	r3, r2
 800386c:	2208      	movs	r2, #8
 800386e:	409a      	lsls	r2, r3
 8003870:	0013      	movs	r3, r2
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4013      	ands	r3, r2
 8003876:	d02b      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x158>
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2208      	movs	r2, #8
 800387c:	4013      	ands	r3, r2
 800387e:	d027      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	210e      	movs	r1, #14
 800388c:	438a      	bics	r2, r1
 800388e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003890:	4b11      	ldr	r3, [pc, #68]	; (80038d8 <HAL_DMA_IRQHandler+0x160>)
 8003892:	6859      	ldr	r1, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	221c      	movs	r2, #28
 800389a:	4013      	ands	r3, r2
 800389c:	2201      	movs	r2, #1
 800389e:	409a      	lsls	r2, r3
 80038a0:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <HAL_DMA_IRQHandler+0x160>)
 80038a2:	430a      	orrs	r2, r1
 80038a4:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2225      	movs	r2, #37	; 0x25
 80038b0:	2101      	movs	r1, #1
 80038b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2224      	movs	r2, #36	; 0x24
 80038b8:	2100      	movs	r1, #0
 80038ba:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	0010      	movs	r0, r2
 80038cc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	46c0      	nop			; (mov r8, r8)
}
 80038d2:	46bd      	mov	sp, r7
 80038d4:	b004      	add	sp, #16
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40020000 	.word	0x40020000

080038dc <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2225      	movs	r2, #37	; 0x25
 80038e8:	5c9b      	ldrb	r3, [r3, r2]
 80038ea:	b2db      	uxtb	r3, r3
}
 80038ec:	0018      	movs	r0, r3
 80038ee:	46bd      	mov	sp, r7
 80038f0:	b002      	add	sp, #8
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	089b      	lsrs	r3, r3, #2
 8003902:	4a10      	ldr	r2, [pc, #64]	; (8003944 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003904:	4694      	mov	ip, r2
 8003906:	4463      	add	r3, ip
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	001a      	movs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	001a      	movs	r2, r3
 8003916:	23ff      	movs	r3, #255	; 0xff
 8003918:	4013      	ands	r3, r2
 800391a:	3b08      	subs	r3, #8
 800391c:	2114      	movs	r1, #20
 800391e:	0018      	movs	r0, r3
 8003920:	f7fc fbf0 	bl	8000104 <__udivsi3>
 8003924:	0003      	movs	r3, r0
 8003926:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a07      	ldr	r2, [pc, #28]	; (8003948 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800392c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	221f      	movs	r2, #31
 8003932:	4013      	ands	r3, r2
 8003934:	2201      	movs	r2, #1
 8003936:	409a      	lsls	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800393c:	46c0      	nop			; (mov r8, r8)
 800393e:	46bd      	mov	sp, r7
 8003940:	b004      	add	sp, #16
 8003942:	bd80      	pop	{r7, pc}
 8003944:	10008200 	.word	0x10008200
 8003948:	40020880 	.word	0x40020880

0800394c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	223f      	movs	r2, #63	; 0x3f
 800395a:	4013      	ands	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4a0a      	ldr	r2, [pc, #40]	; (800398c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003962:	4694      	mov	ip, r2
 8003964:	4463      	add	r3, ip
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	001a      	movs	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a07      	ldr	r2, [pc, #28]	; (8003990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003972:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	3b01      	subs	r3, #1
 8003978:	2203      	movs	r2, #3
 800397a:	4013      	ands	r3, r2
 800397c:	2201      	movs	r2, #1
 800397e:	409a      	lsls	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003984:	46c0      	nop			; (mov r8, r8)
 8003986:	46bd      	mov	sp, r7
 8003988:	b004      	add	sp, #16
 800398a:	bd80      	pop	{r7, pc}
 800398c:	1000823f 	.word	0x1000823f
 8003990:	40020940 	.word	0x40020940

08003994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039a2:	e147      	b.n	8003c34 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2101      	movs	r1, #1
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	4091      	lsls	r1, r2
 80039ae:	000a      	movs	r2, r1
 80039b0:	4013      	ands	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d100      	bne.n	80039bc <HAL_GPIO_Init+0x28>
 80039ba:	e138      	b.n	8003c2e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d00b      	beq.n	80039dc <HAL_GPIO_Init+0x48>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d007      	beq.n	80039dc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039d0:	2b11      	cmp	r3, #17
 80039d2:	d003      	beq.n	80039dc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2b12      	cmp	r3, #18
 80039da:	d130      	bne.n	8003a3e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	2203      	movs	r2, #3
 80039e8:	409a      	lsls	r2, r3
 80039ea:	0013      	movs	r3, r2
 80039ec:	43da      	mvns	r2, r3
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4013      	ands	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	409a      	lsls	r2, r3
 80039fe:	0013      	movs	r3, r2
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a12:	2201      	movs	r2, #1
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	409a      	lsls	r2, r3
 8003a18:	0013      	movs	r3, r2
 8003a1a:	43da      	mvns	r2, r3
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	091b      	lsrs	r3, r3, #4
 8003a28:	2201      	movs	r2, #1
 8003a2a:	401a      	ands	r2, r3
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	409a      	lsls	r2, r3
 8003a30:	0013      	movs	r3, r2
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	2203      	movs	r2, #3
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	0013      	movs	r3, r2
 8003a4e:	43da      	mvns	r2, r3
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	4013      	ands	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	409a      	lsls	r2, r3
 8003a60:	0013      	movs	r3, r2
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d003      	beq.n	8003a7e <HAL_GPIO_Init+0xea>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b12      	cmp	r3, #18
 8003a7c:	d123      	bne.n	8003ac6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	08da      	lsrs	r2, r3, #3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3208      	adds	r2, #8
 8003a86:	0092      	lsls	r2, r2, #2
 8003a88:	58d3      	ldr	r3, [r2, r3]
 8003a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	2207      	movs	r2, #7
 8003a90:	4013      	ands	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	220f      	movs	r2, #15
 8003a96:	409a      	lsls	r2, r3
 8003a98:	0013      	movs	r3, r2
 8003a9a:	43da      	mvns	r2, r3
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	691a      	ldr	r2, [r3, #16]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2107      	movs	r1, #7
 8003aaa:	400b      	ands	r3, r1
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	409a      	lsls	r2, r3
 8003ab0:	0013      	movs	r3, r2
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	08da      	lsrs	r2, r3, #3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3208      	adds	r2, #8
 8003ac0:	0092      	lsls	r2, r2, #2
 8003ac2:	6939      	ldr	r1, [r7, #16]
 8003ac4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	2203      	movs	r2, #3
 8003ad2:	409a      	lsls	r2, r3
 8003ad4:	0013      	movs	r3, r2
 8003ad6:	43da      	mvns	r2, r3
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	4013      	ands	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2203      	movs	r2, #3
 8003ae4:	401a      	ands	r2, r3
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	409a      	lsls	r2, r3
 8003aec:	0013      	movs	r3, r2
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	2380      	movs	r3, #128	; 0x80
 8003b00:	055b      	lsls	r3, r3, #21
 8003b02:	4013      	ands	r3, r2
 8003b04:	d100      	bne.n	8003b08 <HAL_GPIO_Init+0x174>
 8003b06:	e092      	b.n	8003c2e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003b08:	4a50      	ldr	r2, [pc, #320]	; (8003c4c <HAL_GPIO_Init+0x2b8>)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	089b      	lsrs	r3, r3, #2
 8003b0e:	3318      	adds	r3, #24
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	589b      	ldr	r3, [r3, r2]
 8003b14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2203      	movs	r2, #3
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	220f      	movs	r2, #15
 8003b20:	409a      	lsls	r2, r3
 8003b22:	0013      	movs	r3, r2
 8003b24:	43da      	mvns	r2, r3
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	23a0      	movs	r3, #160	; 0xa0
 8003b30:	05db      	lsls	r3, r3, #23
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d013      	beq.n	8003b5e <HAL_GPIO_Init+0x1ca>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a45      	ldr	r2, [pc, #276]	; (8003c50 <HAL_GPIO_Init+0x2bc>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00d      	beq.n	8003b5a <HAL_GPIO_Init+0x1c6>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a44      	ldr	r2, [pc, #272]	; (8003c54 <HAL_GPIO_Init+0x2c0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d007      	beq.n	8003b56 <HAL_GPIO_Init+0x1c2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a43      	ldr	r2, [pc, #268]	; (8003c58 <HAL_GPIO_Init+0x2c4>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d101      	bne.n	8003b52 <HAL_GPIO_Init+0x1be>
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e006      	b.n	8003b60 <HAL_GPIO_Init+0x1cc>
 8003b52:	2305      	movs	r3, #5
 8003b54:	e004      	b.n	8003b60 <HAL_GPIO_Init+0x1cc>
 8003b56:	2302      	movs	r3, #2
 8003b58:	e002      	b.n	8003b60 <HAL_GPIO_Init+0x1cc>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <HAL_GPIO_Init+0x1cc>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	2103      	movs	r1, #3
 8003b64:	400a      	ands	r2, r1
 8003b66:	00d2      	lsls	r2, r2, #3
 8003b68:	4093      	lsls	r3, r2
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003b70:	4936      	ldr	r1, [pc, #216]	; (8003c4c <HAL_GPIO_Init+0x2b8>)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	089b      	lsrs	r3, r3, #2
 8003b76:	3318      	adds	r3, #24
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003b7e:	4a33      	ldr	r2, [pc, #204]	; (8003c4c <HAL_GPIO_Init+0x2b8>)
 8003b80:	2380      	movs	r3, #128	; 0x80
 8003b82:	58d3      	ldr	r3, [r2, r3]
 8003b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	43da      	mvns	r2, r3
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	2380      	movs	r3, #128	; 0x80
 8003b96:	025b      	lsls	r3, r3, #9
 8003b98:	4013      	ands	r3, r2
 8003b9a:	d003      	beq.n	8003ba4 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ba4:	4929      	ldr	r1, [pc, #164]	; (8003c4c <HAL_GPIO_Init+0x2b8>)
 8003ba6:	2280      	movs	r2, #128	; 0x80
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003bac:	4a27      	ldr	r2, [pc, #156]	; (8003c4c <HAL_GPIO_Init+0x2b8>)
 8003bae:	2384      	movs	r3, #132	; 0x84
 8003bb0:	58d3      	ldr	r3, [r2, r3]
 8003bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	43da      	mvns	r2, r3
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	2380      	movs	r3, #128	; 0x80
 8003bc4:	029b      	lsls	r3, r3, #10
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	d003      	beq.n	8003bd2 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bd2:	491e      	ldr	r1, [pc, #120]	; (8003c4c <HAL_GPIO_Init+0x2b8>)
 8003bd4:	2284      	movs	r2, #132	; 0x84
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bda:	4b1c      	ldr	r3, [pc, #112]	; (8003c4c <HAL_GPIO_Init+0x2b8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	43da      	mvns	r2, r3
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	4013      	ands	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	2380      	movs	r3, #128	; 0x80
 8003bf0:	035b      	lsls	r3, r3, #13
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	d003      	beq.n	8003bfe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bfe:	4b13      	ldr	r3, [pc, #76]	; (8003c4c <HAL_GPIO_Init+0x2b8>)
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003c04:	4b11      	ldr	r3, [pc, #68]	; (8003c4c <HAL_GPIO_Init+0x2b8>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	43da      	mvns	r2, r3
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	4013      	ands	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	2380      	movs	r3, #128	; 0x80
 8003c1a:	039b      	lsls	r3, r3, #14
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	d003      	beq.n	8003c28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c28:	4b08      	ldr	r3, [pc, #32]	; (8003c4c <HAL_GPIO_Init+0x2b8>)
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	3301      	adds	r3, #1
 8003c32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	40da      	lsrs	r2, r3
 8003c3c:	1e13      	subs	r3, r2, #0
 8003c3e:	d000      	beq.n	8003c42 <HAL_GPIO_Init+0x2ae>
 8003c40:	e6b0      	b.n	80039a4 <HAL_GPIO_Init+0x10>
  }
}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	46bd      	mov	sp, r7
 8003c46:	b006      	add	sp, #24
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	40021800 	.word	0x40021800
 8003c50:	50000400 	.word	0x50000400
 8003c54:	50000800 	.word	0x50000800
 8003c58:	50000c00 	.word	0x50000c00

08003c5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e082      	b.n	8003d74 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2241      	movs	r2, #65	; 0x41
 8003c72:	5c9b      	ldrb	r3, [r3, r2]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d107      	bne.n	8003c8a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2240      	movs	r2, #64	; 0x40
 8003c7e:	2100      	movs	r1, #0
 8003c80:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	0018      	movs	r0, r3
 8003c86:	f7fe fd0f 	bl	80026a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2241      	movs	r2, #65	; 0x41
 8003c8e:	2124      	movs	r1, #36	; 0x24
 8003c90:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	438a      	bics	r2, r1
 8003ca0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4934      	ldr	r1, [pc, #208]	; (8003d7c <HAL_I2C_Init+0x120>)
 8003cac:	400a      	ands	r2, r1
 8003cae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4931      	ldr	r1, [pc, #196]	; (8003d80 <HAL_I2C_Init+0x124>)
 8003cbc:	400a      	ands	r2, r1
 8003cbe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d108      	bne.n	8003cda <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2180      	movs	r1, #128	; 0x80
 8003cd2:	0209      	lsls	r1, r1, #8
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	609a      	str	r2, [r3, #8]
 8003cd8:	e007      	b.n	8003cea <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2184      	movs	r1, #132	; 0x84
 8003ce4:	0209      	lsls	r1, r1, #8
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d104      	bne.n	8003cfc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2280      	movs	r2, #128	; 0x80
 8003cf8:	0112      	lsls	r2, r2, #4
 8003cfa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	491f      	ldr	r1, [pc, #124]	; (8003d84 <HAL_I2C_Init+0x128>)
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	491a      	ldr	r1, [pc, #104]	; (8003d80 <HAL_I2C_Init+0x124>)
 8003d18:	400a      	ands	r2, r1
 8003d1a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	431a      	orrs	r2, r3
 8003d26:	0011      	movs	r1, r2
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	021a      	lsls	r2, r3, #8
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69d9      	ldr	r1, [r3, #28]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1a      	ldr	r2, [r3, #32]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2101      	movs	r1, #1
 8003d52:	430a      	orrs	r2, r1
 8003d54:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2241      	movs	r2, #65	; 0x41
 8003d60:	2120      	movs	r1, #32
 8003d62:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2242      	movs	r2, #66	; 0x42
 8003d6e:	2100      	movs	r1, #0
 8003d70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	0018      	movs	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b002      	add	sp, #8
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	f0ffffff 	.word	0xf0ffffff
 8003d80:	ffff7fff 	.word	0xffff7fff
 8003d84:	02008000 	.word	0x02008000

08003d88 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	68f9      	ldr	r1, [r7, #12]
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	4798      	blx	r3
  }
}
 8003db4:	46c0      	nop			; (mov r8, r8)
 8003db6:	46bd      	mov	sp, r7
 8003db8:	b004      	add	sp, #16
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	0a1b      	lsrs	r3, r3, #8
 8003dd8:	001a      	movs	r2, r3
 8003dda:	2301      	movs	r3, #1
 8003ddc:	4013      	ands	r3, r2
 8003dde:	d010      	beq.n	8003e02 <HAL_I2C_ER_IRQHandler+0x46>
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	09db      	lsrs	r3, r3, #7
 8003de4:	001a      	movs	r2, r3
 8003de6:	2301      	movs	r3, #1
 8003de8:	4013      	ands	r3, r2
 8003dea:	d00a      	beq.n	8003e02 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df0:	2201      	movs	r2, #1
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2280      	movs	r2, #128	; 0x80
 8003dfe:	0052      	lsls	r2, r2, #1
 8003e00:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	0a9b      	lsrs	r3, r3, #10
 8003e06:	001a      	movs	r2, r3
 8003e08:	2301      	movs	r3, #1
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d010      	beq.n	8003e30 <HAL_I2C_ER_IRQHandler+0x74>
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	09db      	lsrs	r3, r3, #7
 8003e12:	001a      	movs	r2, r3
 8003e14:	2301      	movs	r3, #1
 8003e16:	4013      	ands	r3, r2
 8003e18:	d00a      	beq.n	8003e30 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1e:	2208      	movs	r2, #8
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2280      	movs	r2, #128	; 0x80
 8003e2c:	00d2      	lsls	r2, r2, #3
 8003e2e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	0a5b      	lsrs	r3, r3, #9
 8003e34:	001a      	movs	r2, r3
 8003e36:	2301      	movs	r3, #1
 8003e38:	4013      	ands	r3, r2
 8003e3a:	d010      	beq.n	8003e5e <HAL_I2C_ER_IRQHandler+0xa2>
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	09db      	lsrs	r3, r3, #7
 8003e40:	001a      	movs	r2, r3
 8003e42:	2301      	movs	r3, #1
 8003e44:	4013      	ands	r3, r2
 8003e46:	d00a      	beq.n	8003e5e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2280      	movs	r2, #128	; 0x80
 8003e5a:	0092      	lsls	r2, r2, #2
 8003e5c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	220b      	movs	r2, #11
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d005      	beq.n	8003e78 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	0011      	movs	r1, r2
 8003e72:	0018      	movs	r0, r3
 8003e74:	f000 fbe0 	bl	8004638 <I2C_ITError>
  }
}
 8003e78:	46c0      	nop			; (mov r8, r8)
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	b006      	add	sp, #24
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003e88:	46c0      	nop			; (mov r8, r8)
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	b002      	add	sp, #8
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003e98:	46c0      	nop			; (mov r8, r8)
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b002      	add	sp, #8
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	0008      	movs	r0, r1
 8003eaa:	0011      	movs	r1, r2
 8003eac:	1cfb      	adds	r3, r7, #3
 8003eae:	1c02      	adds	r2, r0, #0
 8003eb0:	701a      	strb	r2, [r3, #0]
 8003eb2:	003b      	movs	r3, r7
 8003eb4:	1c0a      	adds	r2, r1, #0
 8003eb6:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003eb8:	46c0      	nop			; (mov r8, r8)
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	b002      	add	sp, #8
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003ec8:	46c0      	nop			; (mov r8, r8)
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	b002      	add	sp, #8
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003ed8:	46c0      	nop			; (mov r8, r8)
 8003eda:	46bd      	mov	sp, r7
 8003edc:	b002      	add	sp, #8
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ee8:	46c0      	nop			; (mov r8, r8)
 8003eea:	46bd      	mov	sp, r7
 8003eec:	b002      	add	sp, #8
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2240      	movs	r2, #64	; 0x40
 8003f0a:	5c9b      	ldrb	r3, [r3, r2]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <I2C_Slave_ISR_IT+0x24>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e0fa      	b.n	800410a <I2C_Slave_ISR_IT+0x21a>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2240      	movs	r2, #64	; 0x40
 8003f18:	2101      	movs	r1, #1
 8003f1a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	001a      	movs	r2, r3
 8003f22:	2301      	movs	r3, #1
 8003f24:	4013      	ands	r3, r2
 8003f26:	d00b      	beq.n	8003f40 <I2C_Slave_ISR_IT+0x50>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	095b      	lsrs	r3, r3, #5
 8003f2c:	001a      	movs	r2, r3
 8003f2e:	2301      	movs	r3, #1
 8003f30:	4013      	ands	r3, r2
 8003f32:	d005      	beq.n	8003f40 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	0011      	movs	r1, r2
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	f000 f9fc 	bl	8004338 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	091b      	lsrs	r3, r3, #4
 8003f44:	001a      	movs	r2, r3
 8003f46:	2301      	movs	r3, #1
 8003f48:	4013      	ands	r3, r2
 8003f4a:	d054      	beq.n	8003ff6 <I2C_Slave_ISR_IT+0x106>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	091b      	lsrs	r3, r3, #4
 8003f50:	001a      	movs	r2, r3
 8003f52:	2301      	movs	r3, #1
 8003f54:	4013      	ands	r3, r2
 8003f56:	d04e      	beq.n	8003ff6 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d12d      	bne.n	8003fbe <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2241      	movs	r2, #65	; 0x41
 8003f66:	5c9b      	ldrb	r3, [r3, r2]
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b28      	cmp	r3, #40	; 0x28
 8003f6c:	d10b      	bne.n	8003f86 <I2C_Slave_ISR_IT+0x96>
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	2380      	movs	r3, #128	; 0x80
 8003f72:	049b      	lsls	r3, r3, #18
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d106      	bne.n	8003f86 <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	0011      	movs	r1, r2
 8003f7e:	0018      	movs	r0, r3
 8003f80:	f000 fb00 	bl	8004584 <I2C_ITListenCplt>
 8003f84:	e036      	b.n	8003ff4 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2241      	movs	r2, #65	; 0x41
 8003f8a:	5c9b      	ldrb	r3, [r3, r2]
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b29      	cmp	r3, #41	; 0x29
 8003f90:	d110      	bne.n	8003fb4 <I2C_Slave_ISR_IT+0xc4>
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	4a5f      	ldr	r2, [pc, #380]	; (8004114 <I2C_Slave_ISR_IT+0x224>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00c      	beq.n	8003fb4 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2210      	movs	r2, #16
 8003fa0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f000 fc54 	bl	8004852 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	0018      	movs	r0, r3
 8003fae:	f000 f95d 	bl	800426c <I2C_ITSlaveSeqCplt>
 8003fb2:	e01f      	b.n	8003ff4 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2210      	movs	r2, #16
 8003fba:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003fbc:	e09d      	b.n	80040fa <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2210      	movs	r2, #16
 8003fc4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fca:	2204      	movs	r2, #4
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <I2C_Slave_ISR_IT+0xf4>
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	2380      	movs	r3, #128	; 0x80
 8003fdc:	045b      	lsls	r3, r3, #17
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d000      	beq.n	8003fe4 <I2C_Slave_ISR_IT+0xf4>
 8003fe2:	e08a      	b.n	80040fa <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	0011      	movs	r1, r2
 8003fec:	0018      	movs	r0, r3
 8003fee:	f000 fb23 	bl	8004638 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003ff2:	e082      	b.n	80040fa <I2C_Slave_ISR_IT+0x20a>
 8003ff4:	e081      	b.n	80040fa <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	089b      	lsrs	r3, r3, #2
 8003ffa:	001a      	movs	r2, r3
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	4013      	ands	r3, r2
 8004000:	d031      	beq.n	8004066 <I2C_Slave_ISR_IT+0x176>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	089b      	lsrs	r3, r3, #2
 8004006:	001a      	movs	r2, r3
 8004008:	2301      	movs	r3, #1
 800400a:	4013      	ands	r3, r2
 800400c:	d02b      	beq.n	8004066 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004012:	b29b      	uxth	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d018      	beq.n	800404a <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	1c5a      	adds	r2, r3, #1
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004040:	b29b      	uxth	r3, r3
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404e:	b29b      	uxth	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d154      	bne.n	80040fe <I2C_Slave_ISR_IT+0x20e>
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	4a2f      	ldr	r2, [pc, #188]	; (8004114 <I2C_Slave_ISR_IT+0x224>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d050      	beq.n	80040fe <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	0018      	movs	r0, r3
 8004060:	f000 f904 	bl	800426c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004064:	e04b      	b.n	80040fe <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	08db      	lsrs	r3, r3, #3
 800406a:	001a      	movs	r2, r3
 800406c:	2301      	movs	r3, #1
 800406e:	4013      	ands	r3, r2
 8004070:	d00c      	beq.n	800408c <I2C_Slave_ISR_IT+0x19c>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	08db      	lsrs	r3, r3, #3
 8004076:	001a      	movs	r2, r3
 8004078:	2301      	movs	r3, #1
 800407a:	4013      	ands	r3, r2
 800407c:	d006      	beq.n	800408c <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	0011      	movs	r1, r2
 8004084:	0018      	movs	r0, r3
 8004086:	f000 f847 	bl	8004118 <I2C_ITAddrCplt>
 800408a:	e039      	b.n	8004100 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	085b      	lsrs	r3, r3, #1
 8004090:	001a      	movs	r2, r3
 8004092:	2301      	movs	r3, #1
 8004094:	4013      	ands	r3, r2
 8004096:	d033      	beq.n	8004100 <I2C_Slave_ISR_IT+0x210>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	085b      	lsrs	r3, r3, #1
 800409c:	001a      	movs	r2, r3
 800409e:	2301      	movs	r3, #1
 80040a0:	4013      	ands	r3, r2
 80040a2:	d02d      	beq.n	8004100 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d018      	beq.n	80040e0 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	781a      	ldrb	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	851a      	strh	r2, [r3, #40]	; 0x28
 80040de:	e00f      	b.n	8004100 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	2380      	movs	r3, #128	; 0x80
 80040e4:	045b      	lsls	r3, r3, #17
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d002      	beq.n	80040f0 <I2C_Slave_ISR_IT+0x200>
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d107      	bne.n	8004100 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	0018      	movs	r0, r3
 80040f4:	f000 f8ba 	bl	800426c <I2C_ITSlaveSeqCplt>
 80040f8:	e002      	b.n	8004100 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	e000      	b.n	8004100 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80040fe:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2240      	movs	r2, #64	; 0x40
 8004104:	2100      	movs	r1, #0
 8004106:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	0018      	movs	r0, r3
 800410c:	46bd      	mov	sp, r7
 800410e:	b006      	add	sp, #24
 8004110:	bd80      	pop	{r7, pc}
 8004112:	46c0      	nop			; (mov r8, r8)
 8004114:	ffff0000 	.word	0xffff0000

08004118 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004118:	b590      	push	{r4, r7, lr}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2241      	movs	r2, #65	; 0x41
 8004126:	5c9b      	ldrb	r3, [r3, r2]
 8004128:	b2db      	uxtb	r3, r3
 800412a:	001a      	movs	r2, r3
 800412c:	2328      	movs	r3, #40	; 0x28
 800412e:	4013      	ands	r3, r2
 8004130:	2b28      	cmp	r3, #40	; 0x28
 8004132:	d000      	beq.n	8004136 <I2C_ITAddrCplt+0x1e>
 8004134:	e08d      	b.n	8004252 <I2C_ITAddrCplt+0x13a>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	0c1b      	lsrs	r3, r3, #16
 800413e:	b2da      	uxtb	r2, r3
 8004140:	230f      	movs	r3, #15
 8004142:	18fb      	adds	r3, r7, r3
 8004144:	2101      	movs	r1, #1
 8004146:	400a      	ands	r2, r1
 8004148:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	0c1b      	lsrs	r3, r3, #16
 8004152:	b29a      	uxth	r2, r3
 8004154:	230c      	movs	r3, #12
 8004156:	18fb      	adds	r3, r7, r3
 8004158:	21fe      	movs	r1, #254	; 0xfe
 800415a:	400a      	ands	r2, r1
 800415c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	b29a      	uxth	r2, r3
 8004166:	230a      	movs	r3, #10
 8004168:	18fb      	adds	r3, r7, r3
 800416a:	0592      	lsls	r2, r2, #22
 800416c:	0d92      	lsrs	r2, r2, #22
 800416e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	b29a      	uxth	r2, r3
 8004178:	2308      	movs	r3, #8
 800417a:	18fb      	adds	r3, r7, r3
 800417c:	21fe      	movs	r1, #254	; 0xfe
 800417e:	400a      	ands	r2, r1
 8004180:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	2b02      	cmp	r3, #2
 8004188:	d14d      	bne.n	8004226 <I2C_ITAddrCplt+0x10e>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800418a:	230a      	movs	r3, #10
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	09db      	lsrs	r3, r3, #7
 8004192:	b29a      	uxth	r2, r3
 8004194:	230c      	movs	r3, #12
 8004196:	18fb      	adds	r3, r7, r3
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	4053      	eors	r3, r2
 800419c:	b29b      	uxth	r3, r3
 800419e:	001a      	movs	r2, r3
 80041a0:	2306      	movs	r3, #6
 80041a2:	4013      	ands	r3, r2
 80041a4:	d124      	bne.n	80041f0 <I2C_ITAddrCplt+0xd8>
      {
        slaveaddrcode = ownadd1code;
 80041a6:	230c      	movs	r3, #12
 80041a8:	18fb      	adds	r3, r7, r3
 80041aa:	220a      	movs	r2, #10
 80041ac:	18ba      	adds	r2, r7, r2
 80041ae:	8812      	ldrh	r2, [r2, #0]
 80041b0:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d14e      	bne.n	8004262 <I2C_ITAddrCplt+0x14a>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2208      	movs	r2, #8
 80041d0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2240      	movs	r2, #64	; 0x40
 80041d6:	2100      	movs	r1, #0
 80041d8:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80041da:	230c      	movs	r3, #12
 80041dc:	18fb      	adds	r3, r7, r3
 80041de:	881a      	ldrh	r2, [r3, #0]
 80041e0:	230f      	movs	r3, #15
 80041e2:	18fb      	adds	r3, r7, r3
 80041e4:	7819      	ldrb	r1, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	0018      	movs	r0, r3
 80041ea:	f7ff fe59 	bl	8003ea0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80041ee:	e038      	b.n	8004262 <I2C_ITAddrCplt+0x14a>
        slaveaddrcode = ownadd2code;
 80041f0:	240c      	movs	r4, #12
 80041f2:	193b      	adds	r3, r7, r4
 80041f4:	2208      	movs	r2, #8
 80041f6:	18ba      	adds	r2, r7, r2
 80041f8:	8812      	ldrh	r2, [r2, #0]
 80041fa:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80041fc:	2380      	movs	r3, #128	; 0x80
 80041fe:	021a      	lsls	r2, r3, #8
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	0011      	movs	r1, r2
 8004204:	0018      	movs	r0, r3
 8004206:	f000 fb65 	bl	80048d4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2240      	movs	r2, #64	; 0x40
 800420e:	2100      	movs	r1, #0
 8004210:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004212:	193b      	adds	r3, r7, r4
 8004214:	881a      	ldrh	r2, [r3, #0]
 8004216:	230f      	movs	r3, #15
 8004218:	18fb      	adds	r3, r7, r3
 800421a:	7819      	ldrb	r1, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	0018      	movs	r0, r3
 8004220:	f7ff fe3e 	bl	8003ea0 <HAL_I2C_AddrCallback>
}
 8004224:	e01d      	b.n	8004262 <I2C_ITAddrCplt+0x14a>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004226:	2380      	movs	r3, #128	; 0x80
 8004228:	021a      	lsls	r2, r3, #8
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	0011      	movs	r1, r2
 800422e:	0018      	movs	r0, r3
 8004230:	f000 fb50 	bl	80048d4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2240      	movs	r2, #64	; 0x40
 8004238:	2100      	movs	r1, #0
 800423a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800423c:	230c      	movs	r3, #12
 800423e:	18fb      	adds	r3, r7, r3
 8004240:	881a      	ldrh	r2, [r3, #0]
 8004242:	230f      	movs	r3, #15
 8004244:	18fb      	adds	r3, r7, r3
 8004246:	7819      	ldrb	r1, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	0018      	movs	r0, r3
 800424c:	f7ff fe28 	bl	8003ea0 <HAL_I2C_AddrCallback>
}
 8004250:	e007      	b.n	8004262 <I2C_ITAddrCplt+0x14a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2208      	movs	r2, #8
 8004258:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2240      	movs	r2, #64	; 0x40
 800425e:	2100      	movs	r1, #0
 8004260:	5499      	strb	r1, [r3, r2]
}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	46bd      	mov	sp, r7
 8004266:	b005      	add	sp, #20
 8004268:	bd90      	pop	{r4, r7, pc}
	...

0800426c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2242      	movs	r2, #66	; 0x42
 8004280:	2100      	movs	r1, #0
 8004282:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	0b9b      	lsrs	r3, r3, #14
 8004288:	001a      	movs	r2, r3
 800428a:	2301      	movs	r3, #1
 800428c:	4013      	ands	r3, r2
 800428e:	d008      	beq.n	80042a2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4925      	ldr	r1, [pc, #148]	; (8004330 <I2C_ITSlaveSeqCplt+0xc4>)
 800429c:	400a      	ands	r2, r1
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	e00d      	b.n	80042be <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	0bdb      	lsrs	r3, r3, #15
 80042a6:	001a      	movs	r2, r3
 80042a8:	2301      	movs	r3, #1
 80042aa:	4013      	ands	r3, r2
 80042ac:	d007      	beq.n	80042be <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	491e      	ldr	r1, [pc, #120]	; (8004334 <I2C_ITSlaveSeqCplt+0xc8>)
 80042ba:	400a      	ands	r2, r1
 80042bc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2241      	movs	r2, #65	; 0x41
 80042c2:	5c9b      	ldrb	r3, [r3, r2]
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b29      	cmp	r3, #41	; 0x29
 80042c8:	d114      	bne.n	80042f4 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2241      	movs	r2, #65	; 0x41
 80042ce:	2128      	movs	r1, #40	; 0x28
 80042d0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2221      	movs	r2, #33	; 0x21
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2101      	movs	r1, #1
 80042dc:	0018      	movs	r0, r3
 80042de:	f000 faf9 	bl	80048d4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2240      	movs	r2, #64	; 0x40
 80042e6:	2100      	movs	r1, #0
 80042e8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	0018      	movs	r0, r3
 80042ee:	f7ff fdc7 	bl	8003e80 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80042f2:	e019      	b.n	8004328 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2241      	movs	r2, #65	; 0x41
 80042f8:	5c9b      	ldrb	r3, [r3, r2]
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b2a      	cmp	r3, #42	; 0x2a
 80042fe:	d113      	bne.n	8004328 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2241      	movs	r2, #65	; 0x41
 8004304:	2128      	movs	r1, #40	; 0x28
 8004306:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2222      	movs	r2, #34	; 0x22
 800430c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2102      	movs	r1, #2
 8004312:	0018      	movs	r0, r3
 8004314:	f000 fade 	bl	80048d4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2240      	movs	r2, #64	; 0x40
 800431c:	2100      	movs	r1, #0
 800431e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	0018      	movs	r0, r3
 8004324:	f7ff fdb4 	bl	8003e90 <HAL_I2C_SlaveRxCpltCallback>
}
 8004328:	46c0      	nop			; (mov r8, r8)
 800432a:	46bd      	mov	sp, r7
 800432c:	b004      	add	sp, #16
 800432e:	bd80      	pop	{r7, pc}
 8004330:	ffffbfff 	.word	0xffffbfff
 8004334:	ffff7fff 	.word	0xffff7fff

08004338 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800434e:	200f      	movs	r0, #15
 8004350:	183b      	adds	r3, r7, r0
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	2141      	movs	r1, #65	; 0x41
 8004356:	5c52      	ldrb	r2, [r2, r1]
 8004358:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2220      	movs	r2, #32
 8004360:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004362:	183b      	adds	r3, r7, r0
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	2b21      	cmp	r3, #33	; 0x21
 8004368:	d004      	beq.n	8004374 <I2C_ITSlaveCplt+0x3c>
 800436a:	230f      	movs	r3, #15
 800436c:	18fb      	adds	r3, r7, r3
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b29      	cmp	r3, #41	; 0x29
 8004372:	d109      	bne.n	8004388 <I2C_ITSlaveCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004374:	4a7d      	ldr	r2, [pc, #500]	; (800456c <I2C_ITSlaveCplt+0x234>)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	0011      	movs	r1, r2
 800437a:	0018      	movs	r0, r3
 800437c:	f000 faaa 	bl	80048d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2221      	movs	r2, #33	; 0x21
 8004384:	631a      	str	r2, [r3, #48]	; 0x30
 8004386:	e012      	b.n	80043ae <I2C_ITSlaveCplt+0x76>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004388:	230f      	movs	r3, #15
 800438a:	18fb      	adds	r3, r7, r3
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	2b22      	cmp	r3, #34	; 0x22
 8004390:	d004      	beq.n	800439c <I2C_ITSlaveCplt+0x64>
 8004392:	230f      	movs	r3, #15
 8004394:	18fb      	adds	r3, r7, r3
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	2b2a      	cmp	r3, #42	; 0x2a
 800439a:	d108      	bne.n	80043ae <I2C_ITSlaveCplt+0x76>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800439c:	4a74      	ldr	r2, [pc, #464]	; (8004570 <I2C_ITSlaveCplt+0x238>)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	0011      	movs	r1, r2
 80043a2:	0018      	movs	r0, r3
 80043a4:	f000 fa96 	bl	80048d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2222      	movs	r2, #34	; 0x22
 80043ac:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2180      	movs	r1, #128	; 0x80
 80043ba:	0209      	lsls	r1, r1, #8
 80043bc:	430a      	orrs	r2, r1
 80043be:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	496a      	ldr	r1, [pc, #424]	; (8004574 <I2C_ITSlaveCplt+0x23c>)
 80043cc:	400a      	ands	r2, r1
 80043ce:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	0018      	movs	r0, r3
 80043d4:	f000 fa3d 	bl	8004852 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	0b9b      	lsrs	r3, r3, #14
 80043dc:	001a      	movs	r2, r3
 80043de:	2301      	movs	r3, #1
 80043e0:	4013      	ands	r3, r2
 80043e2:	d013      	beq.n	800440c <I2C_ITSlaveCplt+0xd4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4962      	ldr	r1, [pc, #392]	; (8004578 <I2C_ITSlaveCplt+0x240>)
 80043f0:	400a      	ands	r2, r1
 80043f2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d020      	beq.n	800443e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	b29a      	uxth	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	855a      	strh	r2, [r3, #42]	; 0x2a
 800440a:	e018      	b.n	800443e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	0bdb      	lsrs	r3, r3, #15
 8004410:	001a      	movs	r2, r3
 8004412:	2301      	movs	r3, #1
 8004414:	4013      	ands	r3, r2
 8004416:	d012      	beq.n	800443e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4956      	ldr	r1, [pc, #344]	; (800457c <I2C_ITSlaveCplt+0x244>)
 8004424:	400a      	ands	r2, r1
 8004426:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442c:	2b00      	cmp	r3, #0
 800442e:	d006      	beq.n	800443e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	b29a      	uxth	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	089b      	lsrs	r3, r3, #2
 8004442:	001a      	movs	r2, r3
 8004444:	2301      	movs	r3, #1
 8004446:	4013      	ands	r3, r2
 8004448:	d020      	beq.n	800448c <I2C_ITSlaveCplt+0x154>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2204      	movs	r2, #4
 800444e:	4393      	bics	r3, r2
 8004450:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	b2d2      	uxtb	r2, r2
 800445e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00c      	beq.n	800448c <I2C_ITSlaveCplt+0x154>
    {
      hi2c->XferSize--;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004476:	3b01      	subs	r3, #1
 8004478:	b29a      	uxth	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004490:	b29b      	uxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d005      	beq.n	80044a2 <I2C_ITSlaveCplt+0x16a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449a:	2204      	movs	r2, #4
 800449c:	431a      	orrs	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2242      	movs	r2, #66	; 0x42
 80044a6:	2100      	movs	r1, #0
 80044a8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d013      	beq.n	80044e0 <I2C_ITSlaveCplt+0x1a8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	0011      	movs	r1, r2
 80044c0:	0018      	movs	r0, r3
 80044c2:	f000 f8b9 	bl	8004638 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2241      	movs	r2, #65	; 0x41
 80044ca:	5c9b      	ldrb	r3, [r3, r2]
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b28      	cmp	r3, #40	; 0x28
 80044d0:	d147      	bne.n	8004562 <I2C_ITSlaveCplt+0x22a>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	0011      	movs	r1, r2
 80044d8:	0018      	movs	r0, r3
 80044da:	f000 f853 	bl	8004584 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80044de:	e040      	b.n	8004562 <I2C_ITSlaveCplt+0x22a>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e4:	4a26      	ldr	r2, [pc, #152]	; (8004580 <I2C_ITSlaveCplt+0x248>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d016      	beq.n	8004518 <I2C_ITSlaveCplt+0x1e0>
    I2C_ITSlaveSeqCplt(hi2c);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	0018      	movs	r0, r3
 80044ee:	f7ff febd 	bl	800426c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a22      	ldr	r2, [pc, #136]	; (8004580 <I2C_ITSlaveCplt+0x248>)
 80044f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2241      	movs	r2, #65	; 0x41
 80044fc:	2120      	movs	r1, #32
 80044fe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2240      	movs	r2, #64	; 0x40
 800450a:	2100      	movs	r1, #0
 800450c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	0018      	movs	r0, r3
 8004512:	f7ff fcd5 	bl	8003ec0 <HAL_I2C_ListenCpltCallback>
}
 8004516:	e024      	b.n	8004562 <I2C_ITSlaveCplt+0x22a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2241      	movs	r2, #65	; 0x41
 800451c:	5c9b      	ldrb	r3, [r3, r2]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b22      	cmp	r3, #34	; 0x22
 8004522:	d10f      	bne.n	8004544 <I2C_ITSlaveCplt+0x20c>
    hi2c->State = HAL_I2C_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2241      	movs	r2, #65	; 0x41
 8004528:	2120      	movs	r1, #32
 800452a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2240      	movs	r2, #64	; 0x40
 8004536:	2100      	movs	r1, #0
 8004538:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	0018      	movs	r0, r3
 800453e:	f7ff fca7 	bl	8003e90 <HAL_I2C_SlaveRxCpltCallback>
}
 8004542:	e00e      	b.n	8004562 <I2C_ITSlaveCplt+0x22a>
    hi2c->State = HAL_I2C_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2241      	movs	r2, #65	; 0x41
 8004548:	2120      	movs	r1, #32
 800454a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2240      	movs	r2, #64	; 0x40
 8004556:	2100      	movs	r1, #0
 8004558:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	0018      	movs	r0, r3
 800455e:	f7ff fc8f 	bl	8003e80 <HAL_I2C_SlaveTxCpltCallback>
}
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	46bd      	mov	sp, r7
 8004566:	b006      	add	sp, #24
 8004568:	bd80      	pop	{r7, pc}
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	00008001 	.word	0x00008001
 8004570:	00008002 	.word	0x00008002
 8004574:	fe00e800 	.word	0xfe00e800
 8004578:	ffffbfff 	.word	0xffffbfff
 800457c:	ffff7fff 	.word	0xffff7fff
 8004580:	ffff0000 	.word	0xffff0000

08004584 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a27      	ldr	r2, [pc, #156]	; (8004630 <I2C_ITListenCplt+0xac>)
 8004592:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2241      	movs	r2, #65	; 0x41
 800459e:	2120      	movs	r1, #32
 80045a0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2242      	movs	r2, #66	; 0x42
 80045a6:	2100      	movs	r1, #0
 80045a8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	089b      	lsrs	r3, r3, #2
 80045b4:	001a      	movs	r2, r3
 80045b6:	2301      	movs	r3, #1
 80045b8:	4013      	ands	r3, r2
 80045ba:	d022      	beq.n	8004602 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d012      	beq.n	8004602 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	2204      	movs	r2, #4
 80045fc:	431a      	orrs	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004602:	4a0c      	ldr	r2, [pc, #48]	; (8004634 <I2C_ITListenCplt+0xb0>)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	0011      	movs	r1, r2
 8004608:	0018      	movs	r0, r3
 800460a:	f000 f963 	bl	80048d4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2210      	movs	r2, #16
 8004614:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2240      	movs	r2, #64	; 0x40
 800461a:	2100      	movs	r1, #0
 800461c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	0018      	movs	r0, r3
 8004622:	f7ff fc4d 	bl	8003ec0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	46bd      	mov	sp, r7
 800462a:	b002      	add	sp, #8
 800462c:	bd80      	pop	{r7, pc}
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	ffff0000 	.word	0xffff0000
 8004634:	00008003 	.word	0x00008003

08004638 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004642:	200f      	movs	r0, #15
 8004644:	183b      	adds	r3, r7, r0
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	2141      	movs	r1, #65	; 0x41
 800464a:	5c52      	ldrb	r2, [r2, r1]
 800464c:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2242      	movs	r2, #66	; 0x42
 8004652:	2100      	movs	r1, #0
 8004654:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a63      	ldr	r2, [pc, #396]	; (80047e8 <I2C_ITError+0x1b0>)
 800465a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	431a      	orrs	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800466e:	183b      	adds	r3, r7, r0
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b28      	cmp	r3, #40	; 0x28
 8004674:	d009      	beq.n	800468a <I2C_ITError+0x52>
 8004676:	230f      	movs	r3, #15
 8004678:	18fb      	adds	r3, r7, r3
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b29      	cmp	r3, #41	; 0x29
 800467e:	d004      	beq.n	800468a <I2C_ITError+0x52>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004680:	230f      	movs	r3, #15
 8004682:	18fb      	adds	r3, r7, r3
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b2a      	cmp	r3, #42	; 0x2a
 8004688:	d10c      	bne.n	80046a4 <I2C_ITError+0x6c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2103      	movs	r1, #3
 800468e:	0018      	movs	r0, r3
 8004690:	f000 f920 	bl	80048d4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2241      	movs	r2, #65	; 0x41
 8004698:	2128      	movs	r1, #40	; 0x28
 800469a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a53      	ldr	r2, [pc, #332]	; (80047ec <I2C_ITError+0x1b4>)
 80046a0:	635a      	str	r2, [r3, #52]	; 0x34
 80046a2:	e012      	b.n	80046ca <I2C_ITError+0x92>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80046a4:	4a52      	ldr	r2, [pc, #328]	; (80047f0 <I2C_ITError+0x1b8>)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	0011      	movs	r1, r2
 80046aa:	0018      	movs	r0, r3
 80046ac:	f000 f912 	bl	80048d4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2241      	movs	r2, #65	; 0x41
 80046b4:	5c9b      	ldrb	r3, [r3, r2]
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b60      	cmp	r3, #96	; 0x60
 80046ba:	d003      	beq.n	80046c4 <I2C_ITError+0x8c>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2241      	movs	r2, #65	; 0x41
 80046c0:	2120      	movs	r1, #32
 80046c2:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ce:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d03b      	beq.n	8004750 <I2C_ITError+0x118>
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2b11      	cmp	r3, #17
 80046dc:	d002      	beq.n	80046e4 <I2C_ITError+0xac>
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2b21      	cmp	r3, #33	; 0x21
 80046e2:	d135      	bne.n	8004750 <I2C_ITError+0x118>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	2380      	movs	r3, #128	; 0x80
 80046ec:	01db      	lsls	r3, r3, #7
 80046ee:	401a      	ands	r2, r3
 80046f0:	2380      	movs	r3, #128	; 0x80
 80046f2:	01db      	lsls	r3, r3, #7
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d107      	bne.n	8004708 <I2C_ITError+0xd0>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	493c      	ldr	r1, [pc, #240]	; (80047f4 <I2C_ITError+0x1bc>)
 8004704:	400a      	ands	r2, r1
 8004706:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470c:	0018      	movs	r0, r3
 800470e:	f7ff f8e5 	bl	80038dc <HAL_DMA_GetState>
 8004712:	0003      	movs	r3, r0
 8004714:	2b01      	cmp	r3, #1
 8004716:	d016      	beq.n	8004746 <I2C_ITError+0x10e>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471c:	4a36      	ldr	r2, [pc, #216]	; (80047f8 <I2C_ITError+0x1c0>)
 800471e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2240      	movs	r2, #64	; 0x40
 8004724:	2100      	movs	r1, #0
 8004726:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472c:	0018      	movs	r0, r3
 800472e:	f7fe ffb7 	bl	80036a0 <HAL_DMA_Abort_IT>
 8004732:	1e03      	subs	r3, r0, #0
 8004734:	d051      	beq.n	80047da <I2C_ITError+0x1a2>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004740:	0018      	movs	r0, r3
 8004742:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004744:	e049      	b.n	80047da <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	0018      	movs	r0, r3
 800474a:	f000 f859 	bl	8004800 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800474e:	e044      	b.n	80047da <I2C_ITError+0x1a2>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004754:	2b00      	cmp	r3, #0
 8004756:	d03b      	beq.n	80047d0 <I2C_ITError+0x198>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2b12      	cmp	r3, #18
 800475c:	d002      	beq.n	8004764 <I2C_ITError+0x12c>
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	2b22      	cmp	r3, #34	; 0x22
 8004762:	d135      	bne.n	80047d0 <I2C_ITError+0x198>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	2380      	movs	r3, #128	; 0x80
 800476c:	021b      	lsls	r3, r3, #8
 800476e:	401a      	ands	r2, r3
 8004770:	2380      	movs	r3, #128	; 0x80
 8004772:	021b      	lsls	r3, r3, #8
 8004774:	429a      	cmp	r2, r3
 8004776:	d107      	bne.n	8004788 <I2C_ITError+0x150>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	491e      	ldr	r1, [pc, #120]	; (80047fc <I2C_ITError+0x1c4>)
 8004784:	400a      	ands	r2, r1
 8004786:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478c:	0018      	movs	r0, r3
 800478e:	f7ff f8a5 	bl	80038dc <HAL_DMA_GetState>
 8004792:	0003      	movs	r3, r0
 8004794:	2b01      	cmp	r3, #1
 8004796:	d016      	beq.n	80047c6 <I2C_ITError+0x18e>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479c:	4a16      	ldr	r2, [pc, #88]	; (80047f8 <I2C_ITError+0x1c0>)
 800479e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2240      	movs	r2, #64	; 0x40
 80047a4:	2100      	movs	r1, #0
 80047a6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ac:	0018      	movs	r0, r3
 80047ae:	f7fe ff77 	bl	80036a0 <HAL_DMA_Abort_IT>
 80047b2:	1e03      	subs	r3, r0, #0
 80047b4:	d013      	beq.n	80047de <I2C_ITError+0x1a6>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c0:	0018      	movs	r0, r3
 80047c2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047c4:	e00b      	b.n	80047de <I2C_ITError+0x1a6>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	0018      	movs	r0, r3
 80047ca:	f000 f819 	bl	8004800 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047ce:	e006      	b.n	80047de <I2C_ITError+0x1a6>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	0018      	movs	r0, r3
 80047d4:	f000 f814 	bl	8004800 <I2C_TreatErrorCallback>
  }
}
 80047d8:	e002      	b.n	80047e0 <I2C_ITError+0x1a8>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	e000      	b.n	80047e0 <I2C_ITError+0x1a8>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047de:	46c0      	nop			; (mov r8, r8)
}
 80047e0:	46c0      	nop			; (mov r8, r8)
 80047e2:	46bd      	mov	sp, r7
 80047e4:	b004      	add	sp, #16
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	ffff0000 	.word	0xffff0000
 80047ec:	08003ef1 	.word	0x08003ef1
 80047f0:	00008003 	.word	0x00008003
 80047f4:	ffffbfff 	.word	0xffffbfff
 80047f8:	08004897 	.word	0x08004897
 80047fc:	ffff7fff 	.word	0xffff7fff

08004800 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2241      	movs	r2, #65	; 0x41
 800480c:	5c9b      	ldrb	r3, [r3, r2]
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b60      	cmp	r3, #96	; 0x60
 8004812:	d10f      	bne.n	8004834 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2241      	movs	r2, #65	; 0x41
 8004818:	2120      	movs	r1, #32
 800481a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2240      	movs	r2, #64	; 0x40
 8004826:	2100      	movs	r1, #0
 8004828:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	0018      	movs	r0, r3
 800482e:	f7ff fb57 	bl	8003ee0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004832:	e00a      	b.n	800484a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2240      	movs	r2, #64	; 0x40
 800483e:	2100      	movs	r1, #0
 8004840:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	0018      	movs	r0, r3
 8004846:	f7ff fb43 	bl	8003ed0 <HAL_I2C_ErrorCallback>
}
 800484a:	46c0      	nop			; (mov r8, r8)
 800484c:	46bd      	mov	sp, r7
 800484e:	b002      	add	sp, #8
 8004850:	bd80      	pop	{r7, pc}

08004852 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b082      	sub	sp, #8
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	2202      	movs	r2, #2
 8004862:	4013      	ands	r3, r2
 8004864:	2b02      	cmp	r3, #2
 8004866:	d103      	bne.n	8004870 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2200      	movs	r2, #0
 800486e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	2201      	movs	r2, #1
 8004878:	4013      	ands	r3, r2
 800487a:	2b01      	cmp	r3, #1
 800487c:	d007      	beq.n	800488e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	699a      	ldr	r2, [r3, #24]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2101      	movs	r1, #1
 800488a:	430a      	orrs	r2, r1
 800488c:	619a      	str	r2, [r3, #24]
  }
}
 800488e:	46c0      	nop			; (mov r8, r8)
 8004890:	46bd      	mov	sp, r7
 8004892:	b002      	add	sp, #8
 8004894:	bd80      	pop	{r7, pc}

08004896 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b084      	sub	sp, #16
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b0:	2200      	movs	r2, #0
 80048b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c0:	2200      	movs	r2, #0
 80048c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	0018      	movs	r0, r3
 80048c8:	f7ff ff9a 	bl	8004800 <I2C_TreatErrorCallback>
}
 80048cc:	46c0      	nop			; (mov r8, r8)
 80048ce:	46bd      	mov	sp, r7
 80048d0:	b004      	add	sp, #16
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	000a      	movs	r2, r1
 80048de:	1cbb      	adds	r3, r7, #2
 80048e0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80048e6:	1cbb      	adds	r3, r7, #2
 80048e8:	881b      	ldrh	r3, [r3, #0]
 80048ea:	2201      	movs	r2, #1
 80048ec:	4013      	ands	r3, r2
 80048ee:	d010      	beq.n	8004912 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2242      	movs	r2, #66	; 0x42
 80048f4:	4313      	orrs	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2241      	movs	r2, #65	; 0x41
 80048fc:	5c9b      	ldrb	r3, [r3, r2]
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	001a      	movs	r2, r3
 8004902:	2328      	movs	r3, #40	; 0x28
 8004904:	4013      	ands	r3, r2
 8004906:	2b28      	cmp	r3, #40	; 0x28
 8004908:	d003      	beq.n	8004912 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	22b0      	movs	r2, #176	; 0xb0
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004912:	1cbb      	adds	r3, r7, #2
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	2202      	movs	r2, #2
 8004918:	4013      	ands	r3, r2
 800491a:	d010      	beq.n	800493e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2244      	movs	r2, #68	; 0x44
 8004920:	4313      	orrs	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2241      	movs	r2, #65	; 0x41
 8004928:	5c9b      	ldrb	r3, [r3, r2]
 800492a:	b2db      	uxtb	r3, r3
 800492c:	001a      	movs	r2, r3
 800492e:	2328      	movs	r3, #40	; 0x28
 8004930:	4013      	ands	r3, r2
 8004932:	2b28      	cmp	r3, #40	; 0x28
 8004934:	d003      	beq.n	800493e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	22b0      	movs	r2, #176	; 0xb0
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800493e:	1cbb      	adds	r3, r7, #2
 8004940:	2200      	movs	r2, #0
 8004942:	5e9b      	ldrsh	r3, [r3, r2]
 8004944:	2b00      	cmp	r3, #0
 8004946:	da03      	bge.n	8004950 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	22b8      	movs	r2, #184	; 0xb8
 800494c:	4313      	orrs	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004950:	1cbb      	adds	r3, r7, #2
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	2b10      	cmp	r3, #16
 8004956:	d103      	bne.n	8004960 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2290      	movs	r2, #144	; 0x90
 800495c:	4313      	orrs	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004960:	1cbb      	adds	r3, r7, #2
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	2b20      	cmp	r3, #32
 8004966:	d103      	bne.n	8004970 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2220      	movs	r2, #32
 800496c:	4313      	orrs	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004970:	1cbb      	adds	r3, r7, #2
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	2b40      	cmp	r3, #64	; 0x40
 8004976:	d103      	bne.n	8004980 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2240      	movs	r2, #64	; 0x40
 800497c:	4313      	orrs	r3, r2
 800497e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	43d9      	mvns	r1, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	400a      	ands	r2, r1
 8004990:	601a      	str	r2, [r3, #0]
}
 8004992:	46c0      	nop			; (mov r8, r8)
 8004994:	46bd      	mov	sp, r7
 8004996:	b004      	add	sp, #16
 8004998:	bd80      	pop	{r7, pc}
	...

0800499c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2241      	movs	r2, #65	; 0x41
 80049aa:	5c9b      	ldrb	r3, [r3, r2]
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b20      	cmp	r3, #32
 80049b0:	d138      	bne.n	8004a24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2240      	movs	r2, #64	; 0x40
 80049b6:	5c9b      	ldrb	r3, [r3, r2]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d101      	bne.n	80049c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80049bc:	2302      	movs	r3, #2
 80049be:	e032      	b.n	8004a26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2240      	movs	r2, #64	; 0x40
 80049c4:	2101      	movs	r1, #1
 80049c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2241      	movs	r2, #65	; 0x41
 80049cc:	2124      	movs	r1, #36	; 0x24
 80049ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2101      	movs	r1, #1
 80049dc:	438a      	bics	r2, r1
 80049de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4911      	ldr	r1, [pc, #68]	; (8004a30 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80049ec:	400a      	ands	r2, r1
 80049ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6819      	ldr	r1, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	430a      	orrs	r2, r1
 80049fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2241      	movs	r2, #65	; 0x41
 8004a14:	2120      	movs	r1, #32
 8004a16:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2240      	movs	r2, #64	; 0x40
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a20:	2300      	movs	r3, #0
 8004a22:	e000      	b.n	8004a26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a24:	2302      	movs	r3, #2
  }
}
 8004a26:	0018      	movs	r0, r3
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	b002      	add	sp, #8
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	46c0      	nop			; (mov r8, r8)
 8004a30:	ffffefff 	.word	0xffffefff

08004a34 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2241      	movs	r2, #65	; 0x41
 8004a42:	5c9b      	ldrb	r3, [r3, r2]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b20      	cmp	r3, #32
 8004a48:	d139      	bne.n	8004abe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2240      	movs	r2, #64	; 0x40
 8004a4e:	5c9b      	ldrb	r3, [r3, r2]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d101      	bne.n	8004a58 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a54:	2302      	movs	r3, #2
 8004a56:	e033      	b.n	8004ac0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2240      	movs	r2, #64	; 0x40
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2241      	movs	r2, #65	; 0x41
 8004a64:	2124      	movs	r1, #36	; 0x24
 8004a66:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2101      	movs	r1, #1
 8004a74:	438a      	bics	r2, r1
 8004a76:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4a11      	ldr	r2, [pc, #68]	; (8004ac8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004a84:	4013      	ands	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	021b      	lsls	r3, r3, #8
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2241      	movs	r2, #65	; 0x41
 8004aae:	2120      	movs	r1, #32
 8004ab0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2240      	movs	r2, #64	; 0x40
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	e000      	b.n	8004ac0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004abe:	2302      	movs	r3, #2
  }
}
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	b004      	add	sp, #16
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	fffff0ff 	.word	0xfffff0ff

08004acc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b088      	sub	sp, #32
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e0e5      	b.n	8004caa <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2235      	movs	r2, #53	; 0x35
 8004ae2:	5c9b      	ldrb	r3, [r3, r2]
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d107      	bne.n	8004afa <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2234      	movs	r2, #52	; 0x34
 8004aee:	2100      	movs	r1, #0
 8004af0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	0018      	movs	r0, r3
 8004af6:	f7fd fe2b 	bl	8002750 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2235      	movs	r2, #53	; 0x35
 8004afe:	2102      	movs	r1, #2
 8004b00:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69da      	ldr	r2, [r3, #28]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4969      	ldr	r1, [pc, #420]	; (8004cb4 <HAL_I2S_Init+0x1e8>)
 8004b0e:	400a      	ands	r2, r1
 8004b10:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2202      	movs	r2, #2
 8004b18:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d100      	bne.n	8004b24 <HAL_I2S_Init+0x58>
 8004b22:	e076      	b.n	8004c12 <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d102      	bne.n	8004b32 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004b2c:	2310      	movs	r3, #16
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	e001      	b.n	8004b36 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004b32:	2320      	movs	r3, #32
 8004b34:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	2b20      	cmp	r3, #32
 8004b3c:	d802      	bhi.n	8004b44 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8004b44:	2380      	movs	r3, #128	; 0x80
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f001 f865 	bl	8005c18 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b4e:	0003      	movs	r3, r0
 8004b50:	60fb      	str	r3, [r7, #12]
#endif
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691a      	ldr	r2, [r3, #16]
 8004b56:	2380      	movs	r3, #128	; 0x80
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d131      	bne.n	8004bc2 <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d016      	beq.n	8004b94 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	0019      	movs	r1, r3
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f7fb fac9 	bl	8000104 <__udivsi3>
 8004b72:	0003      	movs	r3, r0
 8004b74:	001a      	movs	r2, r3
 8004b76:	0013      	movs	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	189b      	adds	r3, r3, r2
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	001a      	movs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	0019      	movs	r1, r3
 8004b86:	0010      	movs	r0, r2
 8004b88:	f7fb fabc 	bl	8000104 <__udivsi3>
 8004b8c:	0003      	movs	r3, r0
 8004b8e:	3305      	adds	r3, #5
 8004b90:	613b      	str	r3, [r7, #16]
 8004b92:	e02a      	b.n	8004bea <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	0019      	movs	r1, r3
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f7fb fab2 	bl	8000104 <__udivsi3>
 8004ba0:	0003      	movs	r3, r0
 8004ba2:	001a      	movs	r2, r3
 8004ba4:	0013      	movs	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	189b      	adds	r3, r3, r2
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	001a      	movs	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	0019      	movs	r1, r3
 8004bb4:	0010      	movs	r0, r2
 8004bb6:	f7fb faa5 	bl	8000104 <__udivsi3>
 8004bba:	0003      	movs	r3, r0
 8004bbc:	3305      	adds	r3, #5
 8004bbe:	613b      	str	r3, [r7, #16]
 8004bc0:	e013      	b.n	8004bea <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004bc2:	6979      	ldr	r1, [r7, #20]
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f7fb fa9d 	bl	8000104 <__udivsi3>
 8004bca:	0003      	movs	r3, r0
 8004bcc:	001a      	movs	r2, r3
 8004bce:	0013      	movs	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	189b      	adds	r3, r3, r2
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	001a      	movs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	0019      	movs	r1, r3
 8004bde:	0010      	movs	r0, r2
 8004be0:	f7fb fa90 	bl	8000104 <__udivsi3>
 8004be4:	0003      	movs	r3, r0
 8004be6:	3305      	adds	r3, #5
 8004be8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	210a      	movs	r1, #10
 8004bee:	0018      	movs	r0, r3
 8004bf0:	f7fb fa88 	bl	8000104 <__udivsi3>
 8004bf4:	0003      	movs	r3, r0
 8004bf6:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	085b      	lsrs	r3, r3, #1
 8004c08:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	021b      	lsls	r3, r3, #8
 8004c0e:	61bb      	str	r3, [r7, #24]
 8004c10:	e003      	b.n	8004c1a <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004c12:	2302      	movs	r3, #2
 8004c14:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d902      	bls.n	8004c26 <HAL_I2S_Init+0x15a>
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	2bff      	cmp	r3, #255	; 0xff
 8004c24:	d907      	bls.n	8004c36 <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2a:	2210      	movs	r2, #16
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e039      	b.n	8004caa <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691a      	ldr	r2, [r3, #16]
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	0011      	movs	r1, r2
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	69fa      	ldr	r2, [r7, #28]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69db      	ldr	r3, [r3, #28]
 8004c50:	4a18      	ldr	r2, [pc, #96]	; (8004cb4 <HAL_I2S_Init+0x1e8>)
 8004c52:	401a      	ands	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6859      	ldr	r1, [r3, #4]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	4319      	orrs	r1, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	4319      	orrs	r1, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	430b      	orrs	r3, r1
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2180      	movs	r1, #128	; 0x80
 8004c72:	0109      	lsls	r1, r1, #4
 8004c74:	430a      	orrs	r2, r1
 8004c76:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	2b30      	cmp	r3, #48	; 0x30
 8004c7e:	d003      	beq.n	8004c88 <HAL_I2S_Init+0x1bc>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	2bb0      	cmp	r3, #176	; 0xb0
 8004c86:	d108      	bne.n	8004c9a <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	69da      	ldr	r2, [r3, #28]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2180      	movs	r1, #128	; 0x80
 8004c94:	0149      	lsls	r1, r1, #5
 8004c96:	430a      	orrs	r2, r1
 8004c98:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2235      	movs	r2, #53	; 0x35
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	0018      	movs	r0, r3
 8004cac:	46bd      	mov	sp, r7
 8004cae:	b008      	add	sp, #32
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	46c0      	nop			; (mov r8, r8)
 8004cb4:	fffff040 	.word	0xfffff040

08004cb8 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	099b      	lsrs	r3, r3, #6
 8004cd4:	001a      	movs	r2, r3
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	4013      	ands	r3, r2
 8004cda:	d10e      	bne.n	8004cfa <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8004ce2:	d00a      	beq.n	8004cfa <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	099b      	lsrs	r3, r3, #6
 8004ce8:	001a      	movs	r2, r3
 8004cea:	2301      	movs	r3, #1
 8004cec:	4013      	ands	r3, r2
 8004cee:	d004      	beq.n	8004cfa <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	f000 f892 	bl	8004e1c <I2S_Receive_IT>
    return;
 8004cf8:	e046      	b.n	8004d88 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	085b      	lsrs	r3, r3, #1
 8004cfe:	001a      	movs	r2, r3
 8004d00:	2301      	movs	r3, #1
 8004d02:	4013      	ands	r3, r2
 8004d04:	d00a      	beq.n	8004d1c <HAL_I2S_IRQHandler+0x64>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	09db      	lsrs	r3, r3, #7
 8004d0a:	001a      	movs	r2, r3
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	4013      	ands	r3, r2
 8004d10:	d004      	beq.n	8004d1c <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	0018      	movs	r0, r3
 8004d16:	f000 f852 	bl	8004dbe <I2S_Transmit_IT>
    return;
 8004d1a:	e035      	b.n	8004d88 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	095b      	lsrs	r3, r3, #5
 8004d20:	001a      	movs	r2, r3
 8004d22:	2301      	movs	r3, #1
 8004d24:	4013      	ands	r3, r2
 8004d26:	d02f      	beq.n	8004d88 <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	099b      	lsrs	r3, r3, #6
 8004d2c:	001a      	movs	r2, r3
 8004d2e:	2301      	movs	r3, #1
 8004d30:	4013      	ands	r3, r2
 8004d32:	d00d      	beq.n	8004d50 <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2160      	movs	r1, #96	; 0x60
 8004d40:	438a      	bics	r2, r1
 8004d42:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d48:	2202      	movs	r2, #2
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	08db      	lsrs	r3, r3, #3
 8004d54:	001a      	movs	r2, r3
 8004d56:	2301      	movs	r3, #1
 8004d58:	4013      	ands	r3, r2
 8004d5a:	d00d      	beq.n	8004d78 <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	21a0      	movs	r1, #160	; 0xa0
 8004d68:	438a      	bics	r2, r1
 8004d6a:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d70:	2204      	movs	r2, #4
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2235      	movs	r2, #53	; 0x35
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	0018      	movs	r0, r3
 8004d84:	f000 f813 	bl	8004dae <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	b004      	add	sp, #16
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b082      	sub	sp, #8
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004d96:	46c0      	nop			; (mov r8, r8)
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	b002      	add	sp, #8
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b082      	sub	sp, #8
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	46bd      	mov	sp, r7
 8004daa:	b002      	add	sp, #8
 8004dac:	bd80      	pop	{r7, pc}

08004dae <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b082      	sub	sp, #8
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004db6:	46c0      	nop			; (mov r8, r8)
 8004db8:	46bd      	mov	sp, r7
 8004dba:	b002      	add	sp, #8
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b082      	sub	sp, #8
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	881a      	ldrh	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	1c9a      	adds	r2, r3, #2
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	3b01      	subs	r3, #1
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10f      	bne.n	8004e14 <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	21a0      	movs	r1, #160	; 0xa0
 8004e00:	438a      	bics	r2, r1
 8004e02:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2235      	movs	r2, #53	; 0x35
 8004e08:	2101      	movs	r1, #1
 8004e0a:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	0018      	movs	r0, r3
 8004e10:	f7ff ffbd 	bl	8004d8e <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004e14:	46c0      	nop			; (mov r8, r8)
 8004e16:	46bd      	mov	sp, r7
 8004e18:	b002      	add	sp, #8
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	b292      	uxth	r2, r2
 8004e30:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	1c9a      	adds	r2, r3, #2
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	3b01      	subs	r3, #1
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10f      	bne.n	8004e74 <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2160      	movs	r1, #96	; 0x60
 8004e60:	438a      	bics	r2, r1
 8004e62:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2235      	movs	r2, #53	; 0x35
 8004e68:	2101      	movs	r1, #1
 8004e6a:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	0018      	movs	r0, r3
 8004e70:	f7ff ff95 	bl	8004d9e <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004e74:	46c0      	nop			; (mov r8, r8)
 8004e76:	46bd      	mov	sp, r7
 8004e78:	b002      	add	sp, #8
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004e84:	4b19      	ldr	r3, [pc, #100]	; (8004eec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a19      	ldr	r2, [pc, #100]	; (8004ef0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	0019      	movs	r1, r3
 8004e8e:	4b17      	ldr	r3, [pc, #92]	; (8004eec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	2380      	movs	r3, #128	; 0x80
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d11f      	bne.n	8004ee0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8004ea0:	4b14      	ldr	r3, [pc, #80]	; (8004ef4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	0013      	movs	r3, r2
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	189b      	adds	r3, r3, r2
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	4912      	ldr	r1, [pc, #72]	; (8004ef8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004eae:	0018      	movs	r0, r3
 8004eb0:	f7fb f928 	bl	8000104 <__udivsi3>
 8004eb4:	0003      	movs	r3, r0
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004eba:	e008      	b.n	8004ece <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	e001      	b.n	8004ece <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e009      	b.n	8004ee2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ece:	4b07      	ldr	r3, [pc, #28]	; (8004eec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004ed0:	695a      	ldr	r2, [r3, #20]
 8004ed2:	2380      	movs	r3, #128	; 0x80
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	401a      	ands	r2, r3
 8004ed8:	2380      	movs	r3, #128	; 0x80
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d0ed      	beq.n	8004ebc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	b004      	add	sp, #16
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	40007000 	.word	0x40007000
 8004ef0:	fffff9ff 	.word	0xfffff9ff
 8004ef4:	20003134 	.word	0x20003134
 8004ef8:	000f4240 	.word	0x000f4240

08004efc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004f00:	4b03      	ldr	r3, [pc, #12]	; (8004f10 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	23e0      	movs	r3, #224	; 0xe0
 8004f06:	01db      	lsls	r3, r3, #7
 8004f08:	4013      	ands	r3, r2
}
 8004f0a:	0018      	movs	r0, r3
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40021000 	.word	0x40021000

08004f14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b088      	sub	sp, #32
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e304      	b.n	8005530 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	d100      	bne.n	8004f32 <HAL_RCC_OscConfig+0x1e>
 8004f30:	e07c      	b.n	800502c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f32:	4bc3      	ldr	r3, [pc, #780]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	2238      	movs	r2, #56	; 0x38
 8004f38:	4013      	ands	r3, r2
 8004f3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f3c:	4bc0      	ldr	r3, [pc, #768]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	2203      	movs	r2, #3
 8004f42:	4013      	ands	r3, r2
 8004f44:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	2b10      	cmp	r3, #16
 8004f4a:	d102      	bne.n	8004f52 <HAL_RCC_OscConfig+0x3e>
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	2b03      	cmp	r3, #3
 8004f50:	d002      	beq.n	8004f58 <HAL_RCC_OscConfig+0x44>
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d10b      	bne.n	8004f70 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f58:	4bb9      	ldr	r3, [pc, #740]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	2380      	movs	r3, #128	; 0x80
 8004f5e:	029b      	lsls	r3, r3, #10
 8004f60:	4013      	ands	r3, r2
 8004f62:	d062      	beq.n	800502a <HAL_RCC_OscConfig+0x116>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d15e      	bne.n	800502a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e2df      	b.n	8005530 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	2380      	movs	r3, #128	; 0x80
 8004f76:	025b      	lsls	r3, r3, #9
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d107      	bne.n	8004f8c <HAL_RCC_OscConfig+0x78>
 8004f7c:	4bb0      	ldr	r3, [pc, #704]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	4baf      	ldr	r3, [pc, #700]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 8004f82:	2180      	movs	r1, #128	; 0x80
 8004f84:	0249      	lsls	r1, r1, #9
 8004f86:	430a      	orrs	r2, r1
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	e020      	b.n	8004fce <HAL_RCC_OscConfig+0xba>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	23a0      	movs	r3, #160	; 0xa0
 8004f92:	02db      	lsls	r3, r3, #11
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d10e      	bne.n	8004fb6 <HAL_RCC_OscConfig+0xa2>
 8004f98:	4ba9      	ldr	r3, [pc, #676]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	4ba8      	ldr	r3, [pc, #672]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 8004f9e:	2180      	movs	r1, #128	; 0x80
 8004fa0:	02c9      	lsls	r1, r1, #11
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	4ba6      	ldr	r3, [pc, #664]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	4ba5      	ldr	r3, [pc, #660]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 8004fac:	2180      	movs	r1, #128	; 0x80
 8004fae:	0249      	lsls	r1, r1, #9
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	e00b      	b.n	8004fce <HAL_RCC_OscConfig+0xba>
 8004fb6:	4ba2      	ldr	r3, [pc, #648]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4ba1      	ldr	r3, [pc, #644]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 8004fbc:	49a1      	ldr	r1, [pc, #644]	; (8005244 <HAL_RCC_OscConfig+0x330>)
 8004fbe:	400a      	ands	r2, r1
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	4b9f      	ldr	r3, [pc, #636]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	4b9e      	ldr	r3, [pc, #632]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 8004fc8:	499f      	ldr	r1, [pc, #636]	; (8005248 <HAL_RCC_OscConfig+0x334>)
 8004fca:	400a      	ands	r2, r1
 8004fcc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d014      	beq.n	8005000 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd6:	f7fd ff5b 	bl	8002e90 <HAL_GetTick>
 8004fda:	0003      	movs	r3, r0
 8004fdc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fe0:	f7fd ff56 	bl	8002e90 <HAL_GetTick>
 8004fe4:	0002      	movs	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b64      	cmp	r3, #100	; 0x64
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e29e      	b.n	8005530 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ff2:	4b93      	ldr	r3, [pc, #588]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	2380      	movs	r3, #128	; 0x80
 8004ff8:	029b      	lsls	r3, r3, #10
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	d0f0      	beq.n	8004fe0 <HAL_RCC_OscConfig+0xcc>
 8004ffe:	e015      	b.n	800502c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005000:	f7fd ff46 	bl	8002e90 <HAL_GetTick>
 8005004:	0003      	movs	r3, r0
 8005006:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005008:	e008      	b.n	800501c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800500a:	f7fd ff41 	bl	8002e90 <HAL_GetTick>
 800500e:	0002      	movs	r2, r0
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b64      	cmp	r3, #100	; 0x64
 8005016:	d901      	bls.n	800501c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e289      	b.n	8005530 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800501c:	4b88      	ldr	r3, [pc, #544]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	2380      	movs	r3, #128	; 0x80
 8005022:	029b      	lsls	r3, r3, #10
 8005024:	4013      	ands	r3, r2
 8005026:	d1f0      	bne.n	800500a <HAL_RCC_OscConfig+0xf6>
 8005028:	e000      	b.n	800502c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800502a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2202      	movs	r2, #2
 8005032:	4013      	ands	r3, r2
 8005034:	d100      	bne.n	8005038 <HAL_RCC_OscConfig+0x124>
 8005036:	e099      	b.n	800516c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005038:	4b81      	ldr	r3, [pc, #516]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	2238      	movs	r2, #56	; 0x38
 800503e:	4013      	ands	r3, r2
 8005040:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005042:	4b7f      	ldr	r3, [pc, #508]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	2203      	movs	r2, #3
 8005048:	4013      	ands	r3, r2
 800504a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	2b10      	cmp	r3, #16
 8005050:	d102      	bne.n	8005058 <HAL_RCC_OscConfig+0x144>
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2b02      	cmp	r3, #2
 8005056:	d002      	beq.n	800505e <HAL_RCC_OscConfig+0x14a>
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d135      	bne.n	80050ca <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800505e:	4b78      	ldr	r3, [pc, #480]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	2380      	movs	r3, #128	; 0x80
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	4013      	ands	r3, r2
 8005068:	d005      	beq.n	8005076 <HAL_RCC_OscConfig+0x162>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e25c      	b.n	8005530 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005076:	4b72      	ldr	r3, [pc, #456]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	4a74      	ldr	r2, [pc, #464]	; (800524c <HAL_RCC_OscConfig+0x338>)
 800507c:	4013      	ands	r3, r2
 800507e:	0019      	movs	r1, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	021a      	lsls	r2, r3, #8
 8005086:	4b6e      	ldr	r3, [pc, #440]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 8005088:	430a      	orrs	r2, r1
 800508a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d112      	bne.n	80050b8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005092:	4b6b      	ldr	r3, [pc, #428]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a6e      	ldr	r2, [pc, #440]	; (8005250 <HAL_RCC_OscConfig+0x33c>)
 8005098:	4013      	ands	r3, r2
 800509a:	0019      	movs	r1, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	691a      	ldr	r2, [r3, #16]
 80050a0:	4b67      	ldr	r3, [pc, #412]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 80050a2:	430a      	orrs	r2, r1
 80050a4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80050a6:	4b66      	ldr	r3, [pc, #408]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	0adb      	lsrs	r3, r3, #11
 80050ac:	2207      	movs	r2, #7
 80050ae:	4013      	ands	r3, r2
 80050b0:	4a68      	ldr	r2, [pc, #416]	; (8005254 <HAL_RCC_OscConfig+0x340>)
 80050b2:	40da      	lsrs	r2, r3
 80050b4:	4b68      	ldr	r3, [pc, #416]	; (8005258 <HAL_RCC_OscConfig+0x344>)
 80050b6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80050b8:	4b68      	ldr	r3, [pc, #416]	; (800525c <HAL_RCC_OscConfig+0x348>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	0018      	movs	r0, r3
 80050be:	f7fd fe8b 	bl	8002dd8 <HAL_InitTick>
 80050c2:	1e03      	subs	r3, r0, #0
 80050c4:	d051      	beq.n	800516a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e232      	b.n	8005530 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d030      	beq.n	8005134 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80050d2:	4b5b      	ldr	r3, [pc, #364]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a5e      	ldr	r2, [pc, #376]	; (8005250 <HAL_RCC_OscConfig+0x33c>)
 80050d8:	4013      	ands	r3, r2
 80050da:	0019      	movs	r1, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691a      	ldr	r2, [r3, #16]
 80050e0:	4b57      	ldr	r3, [pc, #348]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 80050e2:	430a      	orrs	r2, r1
 80050e4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80050e6:	4b56      	ldr	r3, [pc, #344]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	4b55      	ldr	r3, [pc, #340]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 80050ec:	2180      	movs	r1, #128	; 0x80
 80050ee:	0049      	lsls	r1, r1, #1
 80050f0:	430a      	orrs	r2, r1
 80050f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f4:	f7fd fecc 	bl	8002e90 <HAL_GetTick>
 80050f8:	0003      	movs	r3, r0
 80050fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050fc:	e008      	b.n	8005110 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050fe:	f7fd fec7 	bl	8002e90 <HAL_GetTick>
 8005102:	0002      	movs	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d901      	bls.n	8005110 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e20f      	b.n	8005530 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005110:	4b4b      	ldr	r3, [pc, #300]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	2380      	movs	r3, #128	; 0x80
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	4013      	ands	r3, r2
 800511a:	d0f0      	beq.n	80050fe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800511c:	4b48      	ldr	r3, [pc, #288]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	4a4a      	ldr	r2, [pc, #296]	; (800524c <HAL_RCC_OscConfig+0x338>)
 8005122:	4013      	ands	r3, r2
 8005124:	0019      	movs	r1, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	021a      	lsls	r2, r3, #8
 800512c:	4b44      	ldr	r3, [pc, #272]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 800512e:	430a      	orrs	r2, r1
 8005130:	605a      	str	r2, [r3, #4]
 8005132:	e01b      	b.n	800516c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005134:	4b42      	ldr	r3, [pc, #264]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	4b41      	ldr	r3, [pc, #260]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 800513a:	4949      	ldr	r1, [pc, #292]	; (8005260 <HAL_RCC_OscConfig+0x34c>)
 800513c:	400a      	ands	r2, r1
 800513e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005140:	f7fd fea6 	bl	8002e90 <HAL_GetTick>
 8005144:	0003      	movs	r3, r0
 8005146:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005148:	e008      	b.n	800515c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800514a:	f7fd fea1 	bl	8002e90 <HAL_GetTick>
 800514e:	0002      	movs	r2, r0
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d901      	bls.n	800515c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e1e9      	b.n	8005530 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800515c:	4b38      	ldr	r3, [pc, #224]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	2380      	movs	r3, #128	; 0x80
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	4013      	ands	r3, r2
 8005166:	d1f0      	bne.n	800514a <HAL_RCC_OscConfig+0x236>
 8005168:	e000      	b.n	800516c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800516a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2208      	movs	r2, #8
 8005172:	4013      	ands	r3, r2
 8005174:	d047      	beq.n	8005206 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005176:	4b32      	ldr	r3, [pc, #200]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	2238      	movs	r2, #56	; 0x38
 800517c:	4013      	ands	r3, r2
 800517e:	2b18      	cmp	r3, #24
 8005180:	d10a      	bne.n	8005198 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005182:	4b2f      	ldr	r3, [pc, #188]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 8005184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005186:	2202      	movs	r2, #2
 8005188:	4013      	ands	r3, r2
 800518a:	d03c      	beq.n	8005206 <HAL_RCC_OscConfig+0x2f2>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d138      	bne.n	8005206 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e1cb      	b.n	8005530 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d019      	beq.n	80051d4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80051a0:	4b27      	ldr	r3, [pc, #156]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 80051a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80051a4:	4b26      	ldr	r3, [pc, #152]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 80051a6:	2101      	movs	r1, #1
 80051a8:	430a      	orrs	r2, r1
 80051aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ac:	f7fd fe70 	bl	8002e90 <HAL_GetTick>
 80051b0:	0003      	movs	r3, r0
 80051b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051b4:	e008      	b.n	80051c8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051b6:	f7fd fe6b 	bl	8002e90 <HAL_GetTick>
 80051ba:	0002      	movs	r2, r0
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e1b3      	b.n	8005530 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051c8:	4b1d      	ldr	r3, [pc, #116]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 80051ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051cc:	2202      	movs	r2, #2
 80051ce:	4013      	ands	r3, r2
 80051d0:	d0f1      	beq.n	80051b6 <HAL_RCC_OscConfig+0x2a2>
 80051d2:	e018      	b.n	8005206 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80051d4:	4b1a      	ldr	r3, [pc, #104]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 80051d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80051d8:	4b19      	ldr	r3, [pc, #100]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 80051da:	2101      	movs	r1, #1
 80051dc:	438a      	bics	r2, r1
 80051de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e0:	f7fd fe56 	bl	8002e90 <HAL_GetTick>
 80051e4:	0003      	movs	r3, r0
 80051e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051e8:	e008      	b.n	80051fc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051ea:	f7fd fe51 	bl	8002e90 <HAL_GetTick>
 80051ee:	0002      	movs	r2, r0
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d901      	bls.n	80051fc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e199      	b.n	8005530 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051fc:	4b10      	ldr	r3, [pc, #64]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 80051fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005200:	2202      	movs	r2, #2
 8005202:	4013      	ands	r3, r2
 8005204:	d1f1      	bne.n	80051ea <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2204      	movs	r2, #4
 800520c:	4013      	ands	r3, r2
 800520e:	d100      	bne.n	8005212 <HAL_RCC_OscConfig+0x2fe>
 8005210:	e0c6      	b.n	80053a0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005212:	231f      	movs	r3, #31
 8005214:	18fb      	adds	r3, r7, r3
 8005216:	2200      	movs	r2, #0
 8005218:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800521a:	4b09      	ldr	r3, [pc, #36]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	2238      	movs	r2, #56	; 0x38
 8005220:	4013      	ands	r3, r2
 8005222:	2b20      	cmp	r3, #32
 8005224:	d11e      	bne.n	8005264 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005226:	4b06      	ldr	r3, [pc, #24]	; (8005240 <HAL_RCC_OscConfig+0x32c>)
 8005228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800522a:	2202      	movs	r2, #2
 800522c:	4013      	ands	r3, r2
 800522e:	d100      	bne.n	8005232 <HAL_RCC_OscConfig+0x31e>
 8005230:	e0b6      	b.n	80053a0 <HAL_RCC_OscConfig+0x48c>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d000      	beq.n	800523c <HAL_RCC_OscConfig+0x328>
 800523a:	e0b1      	b.n	80053a0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e177      	b.n	8005530 <HAL_RCC_OscConfig+0x61c>
 8005240:	40021000 	.word	0x40021000
 8005244:	fffeffff 	.word	0xfffeffff
 8005248:	fffbffff 	.word	0xfffbffff
 800524c:	ffff80ff 	.word	0xffff80ff
 8005250:	ffffc7ff 	.word	0xffffc7ff
 8005254:	00f42400 	.word	0x00f42400
 8005258:	20003134 	.word	0x20003134
 800525c:	20003138 	.word	0x20003138
 8005260:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005264:	4bb4      	ldr	r3, [pc, #720]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 8005266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005268:	2380      	movs	r3, #128	; 0x80
 800526a:	055b      	lsls	r3, r3, #21
 800526c:	4013      	ands	r3, r2
 800526e:	d101      	bne.n	8005274 <HAL_RCC_OscConfig+0x360>
 8005270:	2301      	movs	r3, #1
 8005272:	e000      	b.n	8005276 <HAL_RCC_OscConfig+0x362>
 8005274:	2300      	movs	r3, #0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d011      	beq.n	800529e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800527a:	4baf      	ldr	r3, [pc, #700]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 800527c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800527e:	4bae      	ldr	r3, [pc, #696]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 8005280:	2180      	movs	r1, #128	; 0x80
 8005282:	0549      	lsls	r1, r1, #21
 8005284:	430a      	orrs	r2, r1
 8005286:	63da      	str	r2, [r3, #60]	; 0x3c
 8005288:	4bab      	ldr	r3, [pc, #684]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 800528a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800528c:	2380      	movs	r3, #128	; 0x80
 800528e:	055b      	lsls	r3, r3, #21
 8005290:	4013      	ands	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005296:	231f      	movs	r3, #31
 8005298:	18fb      	adds	r3, r7, r3
 800529a:	2201      	movs	r2, #1
 800529c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800529e:	4ba7      	ldr	r3, [pc, #668]	; (800553c <HAL_RCC_OscConfig+0x628>)
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	2380      	movs	r3, #128	; 0x80
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	4013      	ands	r3, r2
 80052a8:	d11a      	bne.n	80052e0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052aa:	4ba4      	ldr	r3, [pc, #656]	; (800553c <HAL_RCC_OscConfig+0x628>)
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	4ba3      	ldr	r3, [pc, #652]	; (800553c <HAL_RCC_OscConfig+0x628>)
 80052b0:	2180      	movs	r1, #128	; 0x80
 80052b2:	0049      	lsls	r1, r1, #1
 80052b4:	430a      	orrs	r2, r1
 80052b6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80052b8:	f7fd fdea 	bl	8002e90 <HAL_GetTick>
 80052bc:	0003      	movs	r3, r0
 80052be:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052c0:	e008      	b.n	80052d4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052c2:	f7fd fde5 	bl	8002e90 <HAL_GetTick>
 80052c6:	0002      	movs	r2, r0
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e12d      	b.n	8005530 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052d4:	4b99      	ldr	r3, [pc, #612]	; (800553c <HAL_RCC_OscConfig+0x628>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	2380      	movs	r3, #128	; 0x80
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	4013      	ands	r3, r2
 80052de:	d0f0      	beq.n	80052c2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d106      	bne.n	80052f6 <HAL_RCC_OscConfig+0x3e2>
 80052e8:	4b93      	ldr	r3, [pc, #588]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 80052ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052ec:	4b92      	ldr	r3, [pc, #584]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 80052ee:	2101      	movs	r1, #1
 80052f0:	430a      	orrs	r2, r1
 80052f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80052f4:	e01c      	b.n	8005330 <HAL_RCC_OscConfig+0x41c>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	2b05      	cmp	r3, #5
 80052fc:	d10c      	bne.n	8005318 <HAL_RCC_OscConfig+0x404>
 80052fe:	4b8e      	ldr	r3, [pc, #568]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 8005300:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005302:	4b8d      	ldr	r3, [pc, #564]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 8005304:	2104      	movs	r1, #4
 8005306:	430a      	orrs	r2, r1
 8005308:	65da      	str	r2, [r3, #92]	; 0x5c
 800530a:	4b8b      	ldr	r3, [pc, #556]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 800530c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800530e:	4b8a      	ldr	r3, [pc, #552]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 8005310:	2101      	movs	r1, #1
 8005312:	430a      	orrs	r2, r1
 8005314:	65da      	str	r2, [r3, #92]	; 0x5c
 8005316:	e00b      	b.n	8005330 <HAL_RCC_OscConfig+0x41c>
 8005318:	4b87      	ldr	r3, [pc, #540]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 800531a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800531c:	4b86      	ldr	r3, [pc, #536]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 800531e:	2101      	movs	r1, #1
 8005320:	438a      	bics	r2, r1
 8005322:	65da      	str	r2, [r3, #92]	; 0x5c
 8005324:	4b84      	ldr	r3, [pc, #528]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 8005326:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005328:	4b83      	ldr	r3, [pc, #524]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 800532a:	2104      	movs	r1, #4
 800532c:	438a      	bics	r2, r1
 800532e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d014      	beq.n	8005362 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005338:	f7fd fdaa 	bl	8002e90 <HAL_GetTick>
 800533c:	0003      	movs	r3, r0
 800533e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005340:	e009      	b.n	8005356 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005342:	f7fd fda5 	bl	8002e90 <HAL_GetTick>
 8005346:	0002      	movs	r2, r0
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	4a7c      	ldr	r2, [pc, #496]	; (8005540 <HAL_RCC_OscConfig+0x62c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e0ec      	b.n	8005530 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005356:	4b78      	ldr	r3, [pc, #480]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 8005358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800535a:	2202      	movs	r2, #2
 800535c:	4013      	ands	r3, r2
 800535e:	d0f0      	beq.n	8005342 <HAL_RCC_OscConfig+0x42e>
 8005360:	e013      	b.n	800538a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005362:	f7fd fd95 	bl	8002e90 <HAL_GetTick>
 8005366:	0003      	movs	r3, r0
 8005368:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800536a:	e009      	b.n	8005380 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800536c:	f7fd fd90 	bl	8002e90 <HAL_GetTick>
 8005370:	0002      	movs	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	4a72      	ldr	r2, [pc, #456]	; (8005540 <HAL_RCC_OscConfig+0x62c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d901      	bls.n	8005380 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e0d7      	b.n	8005530 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005380:	4b6d      	ldr	r3, [pc, #436]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 8005382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005384:	2202      	movs	r2, #2
 8005386:	4013      	ands	r3, r2
 8005388:	d1f0      	bne.n	800536c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800538a:	231f      	movs	r3, #31
 800538c:	18fb      	adds	r3, r7, r3
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d105      	bne.n	80053a0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005394:	4b68      	ldr	r3, [pc, #416]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 8005396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005398:	4b67      	ldr	r3, [pc, #412]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 800539a:	496a      	ldr	r1, [pc, #424]	; (8005544 <HAL_RCC_OscConfig+0x630>)
 800539c:	400a      	ands	r2, r1
 800539e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d100      	bne.n	80053aa <HAL_RCC_OscConfig+0x496>
 80053a8:	e0c1      	b.n	800552e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053aa:	4b63      	ldr	r3, [pc, #396]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	2238      	movs	r2, #56	; 0x38
 80053b0:	4013      	ands	r3, r2
 80053b2:	2b10      	cmp	r3, #16
 80053b4:	d100      	bne.n	80053b8 <HAL_RCC_OscConfig+0x4a4>
 80053b6:	e081      	b.n	80054bc <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d156      	bne.n	800546e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c0:	4b5d      	ldr	r3, [pc, #372]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	4b5c      	ldr	r3, [pc, #368]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 80053c6:	4960      	ldr	r1, [pc, #384]	; (8005548 <HAL_RCC_OscConfig+0x634>)
 80053c8:	400a      	ands	r2, r1
 80053ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053cc:	f7fd fd60 	bl	8002e90 <HAL_GetTick>
 80053d0:	0003      	movs	r3, r0
 80053d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053d4:	e008      	b.n	80053e8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d6:	f7fd fd5b 	bl	8002e90 <HAL_GetTick>
 80053da:	0002      	movs	r2, r0
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e0a3      	b.n	8005530 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053e8:	4b53      	ldr	r3, [pc, #332]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	2380      	movs	r3, #128	; 0x80
 80053ee:	049b      	lsls	r3, r3, #18
 80053f0:	4013      	ands	r3, r2
 80053f2:	d1f0      	bne.n	80053d6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053f4:	4b50      	ldr	r3, [pc, #320]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	4a54      	ldr	r2, [pc, #336]	; (800554c <HAL_RCC_OscConfig+0x638>)
 80053fa:	4013      	ands	r3, r2
 80053fc:	0019      	movs	r1, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1a      	ldr	r2, [r3, #32]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540c:	021b      	lsls	r3, r3, #8
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005414:	431a      	orrs	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005420:	431a      	orrs	r2, r3
 8005422:	4b45      	ldr	r3, [pc, #276]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 8005424:	430a      	orrs	r2, r1
 8005426:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005428:	4b43      	ldr	r3, [pc, #268]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	4b42      	ldr	r3, [pc, #264]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 800542e:	2180      	movs	r1, #128	; 0x80
 8005430:	0449      	lsls	r1, r1, #17
 8005432:	430a      	orrs	r2, r1
 8005434:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005436:	4b40      	ldr	r3, [pc, #256]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 8005438:	68da      	ldr	r2, [r3, #12]
 800543a:	4b3f      	ldr	r3, [pc, #252]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 800543c:	2180      	movs	r1, #128	; 0x80
 800543e:	0549      	lsls	r1, r1, #21
 8005440:	430a      	orrs	r2, r1
 8005442:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005444:	f7fd fd24 	bl	8002e90 <HAL_GetTick>
 8005448:	0003      	movs	r3, r0
 800544a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800544c:	e008      	b.n	8005460 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800544e:	f7fd fd1f 	bl	8002e90 <HAL_GetTick>
 8005452:	0002      	movs	r2, r0
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b02      	cmp	r3, #2
 800545a:	d901      	bls.n	8005460 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e067      	b.n	8005530 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005460:	4b35      	ldr	r3, [pc, #212]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	2380      	movs	r3, #128	; 0x80
 8005466:	049b      	lsls	r3, r3, #18
 8005468:	4013      	ands	r3, r2
 800546a:	d0f0      	beq.n	800544e <HAL_RCC_OscConfig+0x53a>
 800546c:	e05f      	b.n	800552e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800546e:	4b32      	ldr	r3, [pc, #200]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	4b31      	ldr	r3, [pc, #196]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 8005474:	4934      	ldr	r1, [pc, #208]	; (8005548 <HAL_RCC_OscConfig+0x634>)
 8005476:	400a      	ands	r2, r1
 8005478:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800547a:	4b2f      	ldr	r3, [pc, #188]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 800547c:	68da      	ldr	r2, [r3, #12]
 800547e:	4b2e      	ldr	r3, [pc, #184]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 8005480:	2103      	movs	r1, #3
 8005482:	438a      	bics	r2, r1
 8005484:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005486:	4b2c      	ldr	r3, [pc, #176]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	4b2b      	ldr	r3, [pc, #172]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 800548c:	4930      	ldr	r1, [pc, #192]	; (8005550 <HAL_RCC_OscConfig+0x63c>)
 800548e:	400a      	ands	r2, r1
 8005490:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005492:	f7fd fcfd 	bl	8002e90 <HAL_GetTick>
 8005496:	0003      	movs	r3, r0
 8005498:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800549c:	f7fd fcf8 	bl	8002e90 <HAL_GetTick>
 80054a0:	0002      	movs	r2, r0
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e040      	b.n	8005530 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054ae:	4b22      	ldr	r3, [pc, #136]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	2380      	movs	r3, #128	; 0x80
 80054b4:	049b      	lsls	r3, r3, #18
 80054b6:	4013      	ands	r3, r2
 80054b8:	d1f0      	bne.n	800549c <HAL_RCC_OscConfig+0x588>
 80054ba:	e038      	b.n	800552e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d101      	bne.n	80054c8 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e033      	b.n	8005530 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80054c8:	4b1b      	ldr	r3, [pc, #108]	; (8005538 <HAL_RCC_OscConfig+0x624>)
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	2203      	movs	r2, #3
 80054d2:	401a      	ands	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d126      	bne.n	800552a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	2270      	movs	r2, #112	; 0x70
 80054e0:	401a      	ands	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d11f      	bne.n	800552a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	23fe      	movs	r3, #254	; 0xfe
 80054ee:	01db      	lsls	r3, r3, #7
 80054f0:	401a      	ands	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d116      	bne.n	800552a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	23f8      	movs	r3, #248	; 0xf8
 8005500:	039b      	lsls	r3, r3, #14
 8005502:	401a      	ands	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005508:	429a      	cmp	r2, r3
 800550a:	d10e      	bne.n	800552a <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	23e0      	movs	r3, #224	; 0xe0
 8005510:	051b      	lsls	r3, r3, #20
 8005512:	401a      	ands	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005518:	429a      	cmp	r2, r3
 800551a:	d106      	bne.n	800552a <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	0f5b      	lsrs	r3, r3, #29
 8005520:	075a      	lsls	r2, r3, #29
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005526:	429a      	cmp	r2, r3
 8005528:	d001      	beq.n	800552e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e000      	b.n	8005530 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	0018      	movs	r0, r3
 8005532:	46bd      	mov	sp, r7
 8005534:	b008      	add	sp, #32
 8005536:	bd80      	pop	{r7, pc}
 8005538:	40021000 	.word	0x40021000
 800553c:	40007000 	.word	0x40007000
 8005540:	00001388 	.word	0x00001388
 8005544:	efffffff 	.word	0xefffffff
 8005548:	feffffff 	.word	0xfeffffff
 800554c:	11c1808c 	.word	0x11c1808c
 8005550:	eefeffff 	.word	0xeefeffff

08005554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e0e9      	b.n	800573c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005568:	4b76      	ldr	r3, [pc, #472]	; (8005744 <HAL_RCC_ClockConfig+0x1f0>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2207      	movs	r2, #7
 800556e:	4013      	ands	r3, r2
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	429a      	cmp	r2, r3
 8005574:	d91e      	bls.n	80055b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005576:	4b73      	ldr	r3, [pc, #460]	; (8005744 <HAL_RCC_ClockConfig+0x1f0>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2207      	movs	r2, #7
 800557c:	4393      	bics	r3, r2
 800557e:	0019      	movs	r1, r3
 8005580:	4b70      	ldr	r3, [pc, #448]	; (8005744 <HAL_RCC_ClockConfig+0x1f0>)
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005588:	f7fd fc82 	bl	8002e90 <HAL_GetTick>
 800558c:	0003      	movs	r3, r0
 800558e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005590:	e009      	b.n	80055a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005592:	f7fd fc7d 	bl	8002e90 <HAL_GetTick>
 8005596:	0002      	movs	r2, r0
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	4a6a      	ldr	r2, [pc, #424]	; (8005748 <HAL_RCC_ClockConfig+0x1f4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e0ca      	b.n	800573c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80055a6:	4b67      	ldr	r3, [pc, #412]	; (8005744 <HAL_RCC_ClockConfig+0x1f0>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2207      	movs	r2, #7
 80055ac:	4013      	ands	r3, r2
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d1ee      	bne.n	8005592 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2202      	movs	r2, #2
 80055ba:	4013      	ands	r3, r2
 80055bc:	d015      	beq.n	80055ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2204      	movs	r2, #4
 80055c4:	4013      	ands	r3, r2
 80055c6:	d006      	beq.n	80055d6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80055c8:	4b60      	ldr	r3, [pc, #384]	; (800574c <HAL_RCC_ClockConfig+0x1f8>)
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	4b5f      	ldr	r3, [pc, #380]	; (800574c <HAL_RCC_ClockConfig+0x1f8>)
 80055ce:	21e0      	movs	r1, #224	; 0xe0
 80055d0:	01c9      	lsls	r1, r1, #7
 80055d2:	430a      	orrs	r2, r1
 80055d4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055d6:	4b5d      	ldr	r3, [pc, #372]	; (800574c <HAL_RCC_ClockConfig+0x1f8>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	4a5d      	ldr	r2, [pc, #372]	; (8005750 <HAL_RCC_ClockConfig+0x1fc>)
 80055dc:	4013      	ands	r3, r2
 80055de:	0019      	movs	r1, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	4b59      	ldr	r3, [pc, #356]	; (800574c <HAL_RCC_ClockConfig+0x1f8>)
 80055e6:	430a      	orrs	r2, r1
 80055e8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2201      	movs	r2, #1
 80055f0:	4013      	ands	r3, r2
 80055f2:	d057      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d107      	bne.n	800560c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055fc:	4b53      	ldr	r3, [pc, #332]	; (800574c <HAL_RCC_ClockConfig+0x1f8>)
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	2380      	movs	r3, #128	; 0x80
 8005602:	029b      	lsls	r3, r3, #10
 8005604:	4013      	ands	r3, r2
 8005606:	d12b      	bne.n	8005660 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e097      	b.n	800573c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	2b02      	cmp	r3, #2
 8005612:	d107      	bne.n	8005624 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005614:	4b4d      	ldr	r3, [pc, #308]	; (800574c <HAL_RCC_ClockConfig+0x1f8>)
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	2380      	movs	r3, #128	; 0x80
 800561a:	049b      	lsls	r3, r3, #18
 800561c:	4013      	ands	r3, r2
 800561e:	d11f      	bne.n	8005660 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e08b      	b.n	800573c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d107      	bne.n	800563c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800562c:	4b47      	ldr	r3, [pc, #284]	; (800574c <HAL_RCC_ClockConfig+0x1f8>)
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	2380      	movs	r3, #128	; 0x80
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	4013      	ands	r3, r2
 8005636:	d113      	bne.n	8005660 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e07f      	b.n	800573c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	2b03      	cmp	r3, #3
 8005642:	d106      	bne.n	8005652 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005644:	4b41      	ldr	r3, [pc, #260]	; (800574c <HAL_RCC_ClockConfig+0x1f8>)
 8005646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005648:	2202      	movs	r2, #2
 800564a:	4013      	ands	r3, r2
 800564c:	d108      	bne.n	8005660 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e074      	b.n	800573c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005652:	4b3e      	ldr	r3, [pc, #248]	; (800574c <HAL_RCC_ClockConfig+0x1f8>)
 8005654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005656:	2202      	movs	r2, #2
 8005658:	4013      	ands	r3, r2
 800565a:	d101      	bne.n	8005660 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e06d      	b.n	800573c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005660:	4b3a      	ldr	r3, [pc, #232]	; (800574c <HAL_RCC_ClockConfig+0x1f8>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	2207      	movs	r2, #7
 8005666:	4393      	bics	r3, r2
 8005668:	0019      	movs	r1, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	4b37      	ldr	r3, [pc, #220]	; (800574c <HAL_RCC_ClockConfig+0x1f8>)
 8005670:	430a      	orrs	r2, r1
 8005672:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005674:	f7fd fc0c 	bl	8002e90 <HAL_GetTick>
 8005678:	0003      	movs	r3, r0
 800567a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800567c:	e009      	b.n	8005692 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800567e:	f7fd fc07 	bl	8002e90 <HAL_GetTick>
 8005682:	0002      	movs	r2, r0
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	4a2f      	ldr	r2, [pc, #188]	; (8005748 <HAL_RCC_ClockConfig+0x1f4>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e054      	b.n	800573c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005692:	4b2e      	ldr	r3, [pc, #184]	; (800574c <HAL_RCC_ClockConfig+0x1f8>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	2238      	movs	r2, #56	; 0x38
 8005698:	401a      	ands	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d1ec      	bne.n	800567e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056a4:	4b27      	ldr	r3, [pc, #156]	; (8005744 <HAL_RCC_ClockConfig+0x1f0>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2207      	movs	r2, #7
 80056aa:	4013      	ands	r3, r2
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d21e      	bcs.n	80056f0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056b2:	4b24      	ldr	r3, [pc, #144]	; (8005744 <HAL_RCC_ClockConfig+0x1f0>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2207      	movs	r2, #7
 80056b8:	4393      	bics	r3, r2
 80056ba:	0019      	movs	r1, r3
 80056bc:	4b21      	ldr	r3, [pc, #132]	; (8005744 <HAL_RCC_ClockConfig+0x1f0>)
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80056c4:	f7fd fbe4 	bl	8002e90 <HAL_GetTick>
 80056c8:	0003      	movs	r3, r0
 80056ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80056cc:	e009      	b.n	80056e2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056ce:	f7fd fbdf 	bl	8002e90 <HAL_GetTick>
 80056d2:	0002      	movs	r2, r0
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	4a1b      	ldr	r2, [pc, #108]	; (8005748 <HAL_RCC_ClockConfig+0x1f4>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e02c      	b.n	800573c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80056e2:	4b18      	ldr	r3, [pc, #96]	; (8005744 <HAL_RCC_ClockConfig+0x1f0>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2207      	movs	r2, #7
 80056e8:	4013      	ands	r3, r2
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d1ee      	bne.n	80056ce <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2204      	movs	r2, #4
 80056f6:	4013      	ands	r3, r2
 80056f8:	d009      	beq.n	800570e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80056fa:	4b14      	ldr	r3, [pc, #80]	; (800574c <HAL_RCC_ClockConfig+0x1f8>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	4a15      	ldr	r2, [pc, #84]	; (8005754 <HAL_RCC_ClockConfig+0x200>)
 8005700:	4013      	ands	r3, r2
 8005702:	0019      	movs	r1, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68da      	ldr	r2, [r3, #12]
 8005708:	4b10      	ldr	r3, [pc, #64]	; (800574c <HAL_RCC_ClockConfig+0x1f8>)
 800570a:	430a      	orrs	r2, r1
 800570c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800570e:	f000 f829 	bl	8005764 <HAL_RCC_GetSysClockFreq>
 8005712:	0001      	movs	r1, r0
 8005714:	4b0d      	ldr	r3, [pc, #52]	; (800574c <HAL_RCC_ClockConfig+0x1f8>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	0a1b      	lsrs	r3, r3, #8
 800571a:	220f      	movs	r2, #15
 800571c:	401a      	ands	r2, r3
 800571e:	4b0e      	ldr	r3, [pc, #56]	; (8005758 <HAL_RCC_ClockConfig+0x204>)
 8005720:	0092      	lsls	r2, r2, #2
 8005722:	58d3      	ldr	r3, [r2, r3]
 8005724:	221f      	movs	r2, #31
 8005726:	4013      	ands	r3, r2
 8005728:	000a      	movs	r2, r1
 800572a:	40da      	lsrs	r2, r3
 800572c:	4b0b      	ldr	r3, [pc, #44]	; (800575c <HAL_RCC_ClockConfig+0x208>)
 800572e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005730:	4b0b      	ldr	r3, [pc, #44]	; (8005760 <HAL_RCC_ClockConfig+0x20c>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	0018      	movs	r0, r3
 8005736:	f7fd fb4f 	bl	8002dd8 <HAL_InitTick>
 800573a:	0003      	movs	r3, r0
}
 800573c:	0018      	movs	r0, r3
 800573e:	46bd      	mov	sp, r7
 8005740:	b004      	add	sp, #16
 8005742:	bd80      	pop	{r7, pc}
 8005744:	40022000 	.word	0x40022000
 8005748:	00001388 	.word	0x00001388
 800574c:	40021000 	.word	0x40021000
 8005750:	fffff0ff 	.word	0xfffff0ff
 8005754:	ffff8fff 	.word	0xffff8fff
 8005758:	080099a4 	.word	0x080099a4
 800575c:	20003134 	.word	0x20003134
 8005760:	20003138 	.word	0x20003138

08005764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800576a:	4b3c      	ldr	r3, [pc, #240]	; (800585c <HAL_RCC_GetSysClockFreq+0xf8>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	2238      	movs	r2, #56	; 0x38
 8005770:	4013      	ands	r3, r2
 8005772:	d10f      	bne.n	8005794 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005774:	4b39      	ldr	r3, [pc, #228]	; (800585c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	0adb      	lsrs	r3, r3, #11
 800577a:	2207      	movs	r2, #7
 800577c:	4013      	ands	r3, r2
 800577e:	2201      	movs	r2, #1
 8005780:	409a      	lsls	r2, r3
 8005782:	0013      	movs	r3, r2
 8005784:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005786:	6839      	ldr	r1, [r7, #0]
 8005788:	4835      	ldr	r0, [pc, #212]	; (8005860 <HAL_RCC_GetSysClockFreq+0xfc>)
 800578a:	f7fa fcbb 	bl	8000104 <__udivsi3>
 800578e:	0003      	movs	r3, r0
 8005790:	613b      	str	r3, [r7, #16]
 8005792:	e05d      	b.n	8005850 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005794:	4b31      	ldr	r3, [pc, #196]	; (800585c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	2238      	movs	r2, #56	; 0x38
 800579a:	4013      	ands	r3, r2
 800579c:	2b08      	cmp	r3, #8
 800579e:	d102      	bne.n	80057a6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057a0:	4b30      	ldr	r3, [pc, #192]	; (8005864 <HAL_RCC_GetSysClockFreq+0x100>)
 80057a2:	613b      	str	r3, [r7, #16]
 80057a4:	e054      	b.n	8005850 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057a6:	4b2d      	ldr	r3, [pc, #180]	; (800585c <HAL_RCC_GetSysClockFreq+0xf8>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	2238      	movs	r2, #56	; 0x38
 80057ac:	4013      	ands	r3, r2
 80057ae:	2b10      	cmp	r3, #16
 80057b0:	d138      	bne.n	8005824 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80057b2:	4b2a      	ldr	r3, [pc, #168]	; (800585c <HAL_RCC_GetSysClockFreq+0xf8>)
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	2203      	movs	r2, #3
 80057b8:	4013      	ands	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057bc:	4b27      	ldr	r3, [pc, #156]	; (800585c <HAL_RCC_GetSysClockFreq+0xf8>)
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	091b      	lsrs	r3, r3, #4
 80057c2:	2207      	movs	r2, #7
 80057c4:	4013      	ands	r3, r2
 80057c6:	3301      	adds	r3, #1
 80057c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2b03      	cmp	r3, #3
 80057ce:	d10d      	bne.n	80057ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057d0:	68b9      	ldr	r1, [r7, #8]
 80057d2:	4824      	ldr	r0, [pc, #144]	; (8005864 <HAL_RCC_GetSysClockFreq+0x100>)
 80057d4:	f7fa fc96 	bl	8000104 <__udivsi3>
 80057d8:	0003      	movs	r3, r0
 80057da:	0019      	movs	r1, r3
 80057dc:	4b1f      	ldr	r3, [pc, #124]	; (800585c <HAL_RCC_GetSysClockFreq+0xf8>)
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	0a1b      	lsrs	r3, r3, #8
 80057e2:	227f      	movs	r2, #127	; 0x7f
 80057e4:	4013      	ands	r3, r2
 80057e6:	434b      	muls	r3, r1
 80057e8:	617b      	str	r3, [r7, #20]
        break;
 80057ea:	e00d      	b.n	8005808 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80057ec:	68b9      	ldr	r1, [r7, #8]
 80057ee:	481c      	ldr	r0, [pc, #112]	; (8005860 <HAL_RCC_GetSysClockFreq+0xfc>)
 80057f0:	f7fa fc88 	bl	8000104 <__udivsi3>
 80057f4:	0003      	movs	r3, r0
 80057f6:	0019      	movs	r1, r3
 80057f8:	4b18      	ldr	r3, [pc, #96]	; (800585c <HAL_RCC_GetSysClockFreq+0xf8>)
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	0a1b      	lsrs	r3, r3, #8
 80057fe:	227f      	movs	r2, #127	; 0x7f
 8005800:	4013      	ands	r3, r2
 8005802:	434b      	muls	r3, r1
 8005804:	617b      	str	r3, [r7, #20]
        break;
 8005806:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005808:	4b14      	ldr	r3, [pc, #80]	; (800585c <HAL_RCC_GetSysClockFreq+0xf8>)
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	0f5b      	lsrs	r3, r3, #29
 800580e:	2207      	movs	r2, #7
 8005810:	4013      	ands	r3, r2
 8005812:	3301      	adds	r3, #1
 8005814:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	6978      	ldr	r0, [r7, #20]
 800581a:	f7fa fc73 	bl	8000104 <__udivsi3>
 800581e:	0003      	movs	r3, r0
 8005820:	613b      	str	r3, [r7, #16]
 8005822:	e015      	b.n	8005850 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005824:	4b0d      	ldr	r3, [pc, #52]	; (800585c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	2238      	movs	r2, #56	; 0x38
 800582a:	4013      	ands	r3, r2
 800582c:	2b20      	cmp	r3, #32
 800582e:	d103      	bne.n	8005838 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005830:	2380      	movs	r3, #128	; 0x80
 8005832:	021b      	lsls	r3, r3, #8
 8005834:	613b      	str	r3, [r7, #16]
 8005836:	e00b      	b.n	8005850 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005838:	4b08      	ldr	r3, [pc, #32]	; (800585c <HAL_RCC_GetSysClockFreq+0xf8>)
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	2238      	movs	r2, #56	; 0x38
 800583e:	4013      	ands	r3, r2
 8005840:	2b18      	cmp	r3, #24
 8005842:	d103      	bne.n	800584c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005844:	23fa      	movs	r3, #250	; 0xfa
 8005846:	01db      	lsls	r3, r3, #7
 8005848:	613b      	str	r3, [r7, #16]
 800584a:	e001      	b.n	8005850 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005850:	693b      	ldr	r3, [r7, #16]
}
 8005852:	0018      	movs	r0, r3
 8005854:	46bd      	mov	sp, r7
 8005856:	b006      	add	sp, #24
 8005858:	bd80      	pop	{r7, pc}
 800585a:	46c0      	nop			; (mov r8, r8)
 800585c:	40021000 	.word	0x40021000
 8005860:	00f42400 	.word	0x00f42400
 8005864:	007a1200 	.word	0x007a1200

08005868 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800586c:	4b02      	ldr	r3, [pc, #8]	; (8005878 <HAL_RCC_GetHCLKFreq+0x10>)
 800586e:	681b      	ldr	r3, [r3, #0]
}
 8005870:	0018      	movs	r0, r3
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	46c0      	nop			; (mov r8, r8)
 8005878:	20003134 	.word	0x20003134

0800587c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800587c:	b5b0      	push	{r4, r5, r7, lr}
 800587e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005880:	f7ff fff2 	bl	8005868 <HAL_RCC_GetHCLKFreq>
 8005884:	0004      	movs	r4, r0
 8005886:	f7ff fb39 	bl	8004efc <LL_RCC_GetAPB1Prescaler>
 800588a:	0003      	movs	r3, r0
 800588c:	0b1a      	lsrs	r2, r3, #12
 800588e:	4b05      	ldr	r3, [pc, #20]	; (80058a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005890:	0092      	lsls	r2, r2, #2
 8005892:	58d3      	ldr	r3, [r2, r3]
 8005894:	221f      	movs	r2, #31
 8005896:	4013      	ands	r3, r2
 8005898:	40dc      	lsrs	r4, r3
 800589a:	0023      	movs	r3, r4
}
 800589c:	0018      	movs	r0, r3
 800589e:	46bd      	mov	sp, r7
 80058a0:	bdb0      	pop	{r4, r5, r7, pc}
 80058a2:	46c0      	nop			; (mov r8, r8)
 80058a4:	080099e4 	.word	0x080099e4

080058a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80058b0:	2313      	movs	r3, #19
 80058b2:	18fb      	adds	r3, r7, r3
 80058b4:	2200      	movs	r2, #0
 80058b6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058b8:	2312      	movs	r3, #18
 80058ba:	18fb      	adds	r3, r7, r3
 80058bc:	2200      	movs	r2, #0
 80058be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	2380      	movs	r3, #128	; 0x80
 80058c6:	029b      	lsls	r3, r3, #10
 80058c8:	4013      	ands	r3, r2
 80058ca:	d100      	bne.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x26>
 80058cc:	e0a4      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058ce:	2311      	movs	r3, #17
 80058d0:	18fb      	adds	r3, r7, r3
 80058d2:	2200      	movs	r2, #0
 80058d4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058d6:	4bc3      	ldr	r3, [pc, #780]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058da:	2380      	movs	r3, #128	; 0x80
 80058dc:	055b      	lsls	r3, r3, #21
 80058de:	4013      	ands	r3, r2
 80058e0:	d111      	bne.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058e2:	4bc0      	ldr	r3, [pc, #768]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058e6:	4bbf      	ldr	r3, [pc, #764]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058e8:	2180      	movs	r1, #128	; 0x80
 80058ea:	0549      	lsls	r1, r1, #21
 80058ec:	430a      	orrs	r2, r1
 80058ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80058f0:	4bbc      	ldr	r3, [pc, #752]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058f4:	2380      	movs	r3, #128	; 0x80
 80058f6:	055b      	lsls	r3, r3, #21
 80058f8:	4013      	ands	r3, r2
 80058fa:	60bb      	str	r3, [r7, #8]
 80058fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058fe:	2311      	movs	r3, #17
 8005900:	18fb      	adds	r3, r7, r3
 8005902:	2201      	movs	r2, #1
 8005904:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005906:	4bb8      	ldr	r3, [pc, #736]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	4bb7      	ldr	r3, [pc, #732]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800590c:	2180      	movs	r1, #128	; 0x80
 800590e:	0049      	lsls	r1, r1, #1
 8005910:	430a      	orrs	r2, r1
 8005912:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005914:	f7fd fabc 	bl	8002e90 <HAL_GetTick>
 8005918:	0003      	movs	r3, r0
 800591a:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800591c:	e00b      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800591e:	f7fd fab7 	bl	8002e90 <HAL_GetTick>
 8005922:	0002      	movs	r2, r0
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d904      	bls.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 800592c:	2313      	movs	r3, #19
 800592e:	18fb      	adds	r3, r7, r3
 8005930:	2203      	movs	r2, #3
 8005932:	701a      	strb	r2, [r3, #0]
        break;
 8005934:	e005      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005936:	4bac      	ldr	r3, [pc, #688]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	2380      	movs	r3, #128	; 0x80
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	4013      	ands	r3, r2
 8005940:	d0ed      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8005942:	2313      	movs	r3, #19
 8005944:	18fb      	adds	r3, r7, r3
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d154      	bne.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800594c:	4ba5      	ldr	r3, [pc, #660]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800594e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005950:	23c0      	movs	r3, #192	; 0xc0
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4013      	ands	r3, r2
 8005956:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d019      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xea>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	429a      	cmp	r2, r3
 8005966:	d014      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005968:	4b9e      	ldr	r3, [pc, #632]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800596a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800596c:	4a9f      	ldr	r2, [pc, #636]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800596e:	4013      	ands	r3, r2
 8005970:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005972:	4b9c      	ldr	r3, [pc, #624]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005974:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005976:	4b9b      	ldr	r3, [pc, #620]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005978:	2180      	movs	r1, #128	; 0x80
 800597a:	0249      	lsls	r1, r1, #9
 800597c:	430a      	orrs	r2, r1
 800597e:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005980:	4b98      	ldr	r3, [pc, #608]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005982:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005984:	4b97      	ldr	r3, [pc, #604]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005986:	499a      	ldr	r1, [pc, #616]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005988:	400a      	ands	r2, r1
 800598a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800598c:	4b95      	ldr	r3, [pc, #596]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2201      	movs	r2, #1
 8005996:	4013      	ands	r3, r2
 8005998:	d016      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800599a:	f7fd fa79 	bl	8002e90 <HAL_GetTick>
 800599e:	0003      	movs	r3, r0
 80059a0:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059a2:	e00c      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059a4:	f7fd fa74 	bl	8002e90 <HAL_GetTick>
 80059a8:	0002      	movs	r2, r0
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	4a91      	ldr	r2, [pc, #580]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d904      	bls.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 80059b4:	2313      	movs	r3, #19
 80059b6:	18fb      	adds	r3, r7, r3
 80059b8:	2203      	movs	r2, #3
 80059ba:	701a      	strb	r2, [r3, #0]
            break;
 80059bc:	e004      	b.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059be:	4b89      	ldr	r3, [pc, #548]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c2:	2202      	movs	r2, #2
 80059c4:	4013      	ands	r3, r2
 80059c6:	d0ed      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 80059c8:	2313      	movs	r3, #19
 80059ca:	18fb      	adds	r3, r7, r3
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10a      	bne.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059d2:	4b84      	ldr	r3, [pc, #528]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d6:	4a85      	ldr	r2, [pc, #532]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80059d8:	4013      	ands	r3, r2
 80059da:	0019      	movs	r1, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059e0:	4b80      	ldr	r3, [pc, #512]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059e2:	430a      	orrs	r2, r1
 80059e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80059e6:	e00c      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059e8:	2312      	movs	r3, #18
 80059ea:	18fb      	adds	r3, r7, r3
 80059ec:	2213      	movs	r2, #19
 80059ee:	18ba      	adds	r2, r7, r2
 80059f0:	7812      	ldrb	r2, [r2, #0]
 80059f2:	701a      	strb	r2, [r3, #0]
 80059f4:	e005      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f6:	2312      	movs	r3, #18
 80059f8:	18fb      	adds	r3, r7, r3
 80059fa:	2213      	movs	r2, #19
 80059fc:	18ba      	adds	r2, r7, r2
 80059fe:	7812      	ldrb	r2, [r2, #0]
 8005a00:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a02:	2311      	movs	r3, #17
 8005a04:	18fb      	adds	r3, r7, r3
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d105      	bne.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a0c:	4b75      	ldr	r3, [pc, #468]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a10:	4b74      	ldr	r3, [pc, #464]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a12:	4979      	ldr	r1, [pc, #484]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8005a14:	400a      	ands	r2, r1
 8005a16:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	4013      	ands	r3, r2
 8005a20:	d009      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a22:	4b70      	ldr	r3, [pc, #448]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a26:	2203      	movs	r2, #3
 8005a28:	4393      	bics	r3, r2
 8005a2a:	0019      	movs	r1, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	4b6c      	ldr	r3, [pc, #432]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a32:	430a      	orrs	r2, r1
 8005a34:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	d009      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a40:	4b68      	ldr	r3, [pc, #416]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a44:	220c      	movs	r2, #12
 8005a46:	4393      	bics	r3, r2
 8005a48:	0019      	movs	r1, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	4b65      	ldr	r3, [pc, #404]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a50:	430a      	orrs	r2, r1
 8005a52:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2210      	movs	r2, #16
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	d009      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a5e:	4b61      	ldr	r3, [pc, #388]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a62:	4a66      	ldr	r2, [pc, #408]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8005a64:	4013      	ands	r3, r2
 8005a66:	0019      	movs	r1, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68da      	ldr	r2, [r3, #12]
 8005a6c:	4b5d      	ldr	r3, [pc, #372]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	2380      	movs	r3, #128	; 0x80
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	d009      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a7e:	4b59      	ldr	r3, [pc, #356]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a82:	4a5f      	ldr	r2, [pc, #380]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005a84:	4013      	ands	r3, r2
 8005a86:	0019      	movs	r1, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	699a      	ldr	r2, [r3, #24]
 8005a8c:	4b55      	ldr	r3, [pc, #340]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	2380      	movs	r3, #128	; 0x80
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	d009      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a9e:	4b51      	ldr	r3, [pc, #324]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa2:	4a58      	ldr	r2, [pc, #352]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	0019      	movs	r1, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	69da      	ldr	r2, [r3, #28]
 8005aac:	4b4d      	ldr	r3, [pc, #308]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	4013      	ands	r3, r2
 8005aba:	d009      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005abc:	4b49      	ldr	r3, [pc, #292]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac0:	4a51      	ldr	r2, [pc, #324]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	0019      	movs	r1, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	691a      	ldr	r2, [r3, #16]
 8005aca:	4b46      	ldr	r3, [pc, #280]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005acc:	430a      	orrs	r2, r1
 8005ace:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	2380      	movs	r3, #128	; 0x80
 8005ad6:	01db      	lsls	r3, r3, #7
 8005ad8:	4013      	ands	r3, r2
 8005ada:	d015      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005adc:	4b41      	ldr	r3, [pc, #260]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	0899      	lsrs	r1, r3, #2
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a1a      	ldr	r2, [r3, #32]
 8005ae8:	4b3e      	ldr	r3, [pc, #248]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005aea:	430a      	orrs	r2, r1
 8005aec:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1a      	ldr	r2, [r3, #32]
 8005af2:	2380      	movs	r3, #128	; 0x80
 8005af4:	05db      	lsls	r3, r3, #23
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d106      	bne.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005afa:	4b3a      	ldr	r3, [pc, #232]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	4b39      	ldr	r3, [pc, #228]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b00:	2180      	movs	r1, #128	; 0x80
 8005b02:	0249      	lsls	r1, r1, #9
 8005b04:	430a      	orrs	r2, r1
 8005b06:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	2380      	movs	r3, #128	; 0x80
 8005b0e:	031b      	lsls	r3, r3, #12
 8005b10:	4013      	ands	r3, r2
 8005b12:	d009      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b14:	4b33      	ldr	r3, [pc, #204]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b18:	2240      	movs	r2, #64	; 0x40
 8005b1a:	4393      	bics	r3, r2
 8005b1c:	0019      	movs	r1, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b22:	4b30      	ldr	r3, [pc, #192]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b24:	430a      	orrs	r2, r1
 8005b26:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	2380      	movs	r3, #128	; 0x80
 8005b2e:	039b      	lsls	r3, r3, #14
 8005b30:	4013      	ands	r3, r2
 8005b32:	d016      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005b34:	4b2b      	ldr	r3, [pc, #172]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b38:	4a34      	ldr	r2, [pc, #208]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	0019      	movs	r1, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b42:	4b28      	ldr	r3, [pc, #160]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b44:	430a      	orrs	r2, r1
 8005b46:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b4c:	2380      	movs	r3, #128	; 0x80
 8005b4e:	03db      	lsls	r3, r3, #15
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d106      	bne.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005b54:	4b23      	ldr	r3, [pc, #140]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b56:	68da      	ldr	r2, [r3, #12]
 8005b58:	4b22      	ldr	r3, [pc, #136]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b5a:	2180      	movs	r1, #128	; 0x80
 8005b5c:	0449      	lsls	r1, r1, #17
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	2380      	movs	r3, #128	; 0x80
 8005b68:	03db      	lsls	r3, r3, #15
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	d016      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005b6e:	4b1d      	ldr	r3, [pc, #116]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b72:	4a27      	ldr	r2, [pc, #156]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	0019      	movs	r1, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7c:	4b19      	ldr	r3, [pc, #100]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b86:	2380      	movs	r3, #128	; 0x80
 8005b88:	045b      	lsls	r3, r3, #17
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d106      	bne.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005b8e:	4b15      	ldr	r3, [pc, #84]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	4b14      	ldr	r3, [pc, #80]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b94:	2180      	movs	r1, #128	; 0x80
 8005b96:	0449      	lsls	r1, r1, #17
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	2380      	movs	r3, #128	; 0x80
 8005ba2:	011b      	lsls	r3, r3, #4
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	d016      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005ba8:	4b0e      	ldr	r3, [pc, #56]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bac:	4a19      	ldr	r2, [pc, #100]	; (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005bae:	4013      	ands	r3, r2
 8005bb0:	0019      	movs	r1, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	695a      	ldr	r2, [r3, #20]
 8005bb6:	4b0b      	ldr	r3, [pc, #44]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	695a      	ldr	r2, [r3, #20]
 8005bc0:	2380      	movs	r3, #128	; 0x80
 8005bc2:	01db      	lsls	r3, r3, #7
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d106      	bne.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005bc8:	4b06      	ldr	r3, [pc, #24]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005bca:	68da      	ldr	r2, [r3, #12]
 8005bcc:	4b05      	ldr	r3, [pc, #20]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005bce:	2180      	movs	r1, #128	; 0x80
 8005bd0:	0249      	lsls	r1, r1, #9
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005bd6:	2312      	movs	r3, #18
 8005bd8:	18fb      	adds	r3, r7, r3
 8005bda:	781b      	ldrb	r3, [r3, #0]
}
 8005bdc:	0018      	movs	r0, r3
 8005bde:	46bd      	mov	sp, r7
 8005be0:	b006      	add	sp, #24
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	40021000 	.word	0x40021000
 8005be8:	40007000 	.word	0x40007000
 8005bec:	fffffcff 	.word	0xfffffcff
 8005bf0:	fffeffff 	.word	0xfffeffff
 8005bf4:	00001388 	.word	0x00001388
 8005bf8:	efffffff 	.word	0xefffffff
 8005bfc:	fffff3ff 	.word	0xfffff3ff
 8005c00:	fff3ffff 	.word	0xfff3ffff
 8005c04:	ffcfffff 	.word	0xffcfffff
 8005c08:	ffffcfff 	.word	0xffffcfff
 8005c0c:	ffbfffff 	.word	0xffbfffff
 8005c10:	feffffff 	.word	0xfeffffff
 8005c14:	ffff3fff 	.word	0xffff3fff

08005c18 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005c20:	2300      	movs	r3, #0
 8005c22:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	2380      	movs	r3, #128	; 0x80
 8005c28:	029b      	lsls	r3, r3, #10
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d136      	bne.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005c2e:	4bc6      	ldr	r3, [pc, #792]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005c30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c32:	23c0      	movs	r3, #192	; 0xc0
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4013      	ands	r3, r2
 8005c38:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005c3a:	4bc3      	ldr	r3, [pc, #780]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c3e:	2202      	movs	r2, #2
 8005c40:	4013      	ands	r3, r2
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d108      	bne.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	2380      	movs	r3, #128	; 0x80
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d103      	bne.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8005c50:	2380      	movs	r3, #128	; 0x80
 8005c52:	021b      	lsls	r3, r3, #8
 8005c54:	617b      	str	r3, [r7, #20]
 8005c56:	e2e9      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005c58:	4bbb      	ldr	r3, [pc, #748]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	4013      	ands	r3, r2
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d108      	bne.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	2380      	movs	r3, #128	; 0x80
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d103      	bne.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8005c6e:	23fa      	movs	r3, #250	; 0xfa
 8005c70:	01db      	lsls	r3, r3, #7
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	e2da      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005c76:	4bb4      	ldr	r3, [pc, #720]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	2380      	movs	r3, #128	; 0x80
 8005c7c:	029b      	lsls	r3, r3, #10
 8005c7e:	401a      	ands	r2, r3
 8005c80:	2380      	movs	r3, #128	; 0x80
 8005c82:	029b      	lsls	r3, r3, #10
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d000      	beq.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8005c88:	e2d0      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	23c0      	movs	r3, #192	; 0xc0
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d000      	beq.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8005c94:	e2ca      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = HSE_VALUE / 32U;
 8005c96:	4bad      	ldr	r3, [pc, #692]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 8005c98:	617b      	str	r3, [r7, #20]
 8005c9a:	e2c7      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8005c9c:	4baa      	ldr	r3, [pc, #680]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	2203      	movs	r2, #3
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d102      	bne.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8005ca8:	4ba9      	ldr	r3, [pc, #676]	; (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8005caa:	613b      	str	r3, [r7, #16]
 8005cac:	e00a      	b.n	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 8005cae:	4ba6      	ldr	r3, [pc, #664]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	2203      	movs	r2, #3
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	2b03      	cmp	r3, #3
 8005cb8:	d102      	bne.n	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 8005cba:	4ba6      	ldr	r3, [pc, #664]	; (8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8005cbc:	613b      	str	r3, [r7, #16]
 8005cbe:	e001      	b.n	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005cc4:	4ba0      	ldr	r3, [pc, #640]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	091b      	lsrs	r3, r3, #4
 8005cca:	2207      	movs	r2, #7
 8005ccc:	4013      	ands	r3, r2
 8005cce:	3301      	adds	r3, #1
 8005cd0:	0019      	movs	r1, r3
 8005cd2:	6938      	ldr	r0, [r7, #16]
 8005cd4:	f7fa fa16 	bl	8000104 <__udivsi3>
 8005cd8:	0003      	movs	r3, r0
 8005cda:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2280      	movs	r2, #128	; 0x80
 8005ce0:	00d2      	lsls	r2, r2, #3
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d100      	bne.n	8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8005ce6:	e1ee      	b.n	80060c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8005ce8:	2280      	movs	r2, #128	; 0x80
 8005cea:	00d2      	lsls	r2, r2, #3
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d811      	bhi.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
 8005cf0:	2b10      	cmp	r3, #16
 8005cf2:	d100      	bne.n	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xde>
 8005cf4:	e0b6      	b.n	8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8005cf6:	d804      	bhi.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d02a      	beq.n	8005d52 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d05b      	beq.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8005d00:	e294      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    switch (PeriphClk)
 8005d02:	2b20      	cmp	r3, #32
 8005d04:	d100      	bne.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8005d06:	e129      	b.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
 8005d08:	2280      	movs	r2, #128	; 0x80
 8005d0a:	0092      	lsls	r2, r2, #2
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d100      	bne.n	8005d12 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8005d10:	e199      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
        break;
 8005d12:	e28b      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    switch (PeriphClk)
 8005d14:	2280      	movs	r2, #128	; 0x80
 8005d16:	0312      	lsls	r2, r2, #12
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d100      	bne.n	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0x106>
 8005d1c:	e07f      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8005d1e:	2280      	movs	r2, #128	; 0x80
 8005d20:	0312      	lsls	r2, r2, #12
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d80a      	bhi.n	8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005d26:	2280      	movs	r2, #128	; 0x80
 8005d28:	0112      	lsls	r2, r2, #4
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d100      	bne.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8005d2e:	e140      	b.n	8005fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8005d30:	2280      	movs	r2, #128	; 0x80
 8005d32:	01d2      	lsls	r2, r2, #7
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d100      	bne.n	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005d38:	e0ce      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
        break;
 8005d3a:	e277      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    switch (PeriphClk)
 8005d3c:	2280      	movs	r2, #128	; 0x80
 8005d3e:	0392      	lsls	r2, r2, #14
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d100      	bne.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8005d44:	e1ff      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8005d46:	2280      	movs	r2, #128	; 0x80
 8005d48:	03d2      	lsls	r2, r2, #15
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d100      	bne.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005d4e:	e229      	b.n	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
        break;
 8005d50:	e26c      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005d52:	4b7d      	ldr	r3, [pc, #500]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d56:	2203      	movs	r2, #3
 8005d58:	4013      	ands	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d104      	bne.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d62:	f7ff fd8b 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 8005d66:	0003      	movs	r3, r0
 8005d68:	617b      	str	r3, [r7, #20]
        break;
 8005d6a:	e24a      	b.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d104      	bne.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x164>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d72:	f7ff fcf7 	bl	8005764 <HAL_RCC_GetSysClockFreq>
 8005d76:	0003      	movs	r3, r0
 8005d78:	617b      	str	r3, [r7, #20]
        break;
 8005d7a:	e242      	b.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005d7c:	4b72      	ldr	r3, [pc, #456]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	2380      	movs	r3, #128	; 0x80
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	401a      	ands	r2, r3
 8005d86:	2380      	movs	r3, #128	; 0x80
 8005d88:	00db      	lsls	r3, r3, #3
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d105      	bne.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d102      	bne.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
          frequency = HSI_VALUE;
 8005d94:	4b6e      	ldr	r3, [pc, #440]	; (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8005d96:	617b      	str	r3, [r7, #20]
        break;
 8005d98:	e233      	b.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005d9a:	4b6b      	ldr	r3, [pc, #428]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d9e:	2202      	movs	r2, #2
 8005da0:	4013      	ands	r3, r2
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d000      	beq.n	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8005da6:	e22c      	b.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b03      	cmp	r3, #3
 8005dac:	d000      	beq.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8005dae:	e228      	b.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
          frequency = LSE_VALUE;
 8005db0:	2380      	movs	r3, #128	; 0x80
 8005db2:	021b      	lsls	r3, r3, #8
 8005db4:	617b      	str	r3, [r7, #20]
        break;
 8005db6:	e224      	b.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005db8:	4b63      	ldr	r3, [pc, #396]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dbc:	220c      	movs	r2, #12
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d104      	bne.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005dc8:	f7ff fd58 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 8005dcc:	0003      	movs	r3, r0
 8005dce:	617b      	str	r3, [r7, #20]
        break;
 8005dd0:	e219      	b.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2b04      	cmp	r3, #4
 8005dd6:	d104      	bne.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
          frequency = HAL_RCC_GetSysClockFreq();
 8005dd8:	f7ff fcc4 	bl	8005764 <HAL_RCC_GetSysClockFreq>
 8005ddc:	0003      	movs	r3, r0
 8005dde:	617b      	str	r3, [r7, #20]
        break;
 8005de0:	e211      	b.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005de2:	4b59      	ldr	r3, [pc, #356]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	2380      	movs	r3, #128	; 0x80
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	401a      	ands	r2, r3
 8005dec:	2380      	movs	r3, #128	; 0x80
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d105      	bne.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2b08      	cmp	r3, #8
 8005df8:	d102      	bne.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
          frequency = HSI_VALUE;
 8005dfa:	4b55      	ldr	r3, [pc, #340]	; (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8005dfc:	617b      	str	r3, [r7, #20]
        break;
 8005dfe:	e202      	b.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005e00:	4b51      	ldr	r3, [pc, #324]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e04:	2202      	movs	r2, #2
 8005e06:	4013      	ands	r3, r2
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d000      	beq.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
 8005e0c:	e1fb      	b.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2b0c      	cmp	r3, #12
 8005e12:	d000      	beq.n	8005e16 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
 8005e14:	e1f7      	b.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          frequency = LSE_VALUE;
 8005e16:	2380      	movs	r3, #128	; 0x80
 8005e18:	021b      	lsls	r3, r3, #8
 8005e1a:	617b      	str	r3, [r7, #20]
        break;
 8005e1c:	e1f3      	b.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8005e1e:	4b4a      	ldr	r3, [pc, #296]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e22:	2240      	movs	r2, #64	; 0x40
 8005e24:	4013      	ands	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 8005e28:	4b47      	ldr	r3, [pc, #284]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	2380      	movs	r3, #128	; 0x80
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	401a      	ands	r2, r3
 8005e32:	2380      	movs	r3, #128	; 0x80
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d105      	bne.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d102      	bne.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          frequency = (HSI_VALUE / 488U);
 8005e40:	4b45      	ldr	r3, [pc, #276]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8005e42:	617b      	str	r3, [r7, #20]
        break;
 8005e44:	e1e1      	b.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8005e46:	4b40      	ldr	r3, [pc, #256]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d000      	beq.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 8005e52:	e1da      	b.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2b40      	cmp	r3, #64	; 0x40
 8005e58:	d000      	beq.n	8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005e5a:	e1d6      	b.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          frequency = LSE_VALUE;
 8005e5c:	2380      	movs	r3, #128	; 0x80
 8005e5e:	021b      	lsls	r3, r3, #8
 8005e60:	617b      	str	r3, [r7, #20]
        break;
 8005e62:	e1d2      	b.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005e64:	4b38      	ldr	r3, [pc, #224]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005e66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e68:	23c0      	movs	r3, #192	; 0xc0
 8005e6a:	011b      	lsls	r3, r3, #4
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d104      	bne.n	8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e76:	f7ff fd01 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 8005e7a:	0003      	movs	r3, r0
 8005e7c:	617b      	str	r3, [r7, #20]
        break;
 8005e7e:	e1c6      	b.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	2380      	movs	r3, #128	; 0x80
 8005e84:	00db      	lsls	r3, r3, #3
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d104      	bne.n	8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e8a:	f7ff fc6b 	bl	8005764 <HAL_RCC_GetSysClockFreq>
 8005e8e:	0003      	movs	r3, r0
 8005e90:	617b      	str	r3, [r7, #20]
        break;
 8005e92:	e1bc      	b.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005e94:	4b2c      	ldr	r3, [pc, #176]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	2380      	movs	r3, #128	; 0x80
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	401a      	ands	r2, r3
 8005e9e:	2380      	movs	r3, #128	; 0x80
 8005ea0:	00db      	lsls	r3, r3, #3
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d107      	bne.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	2380      	movs	r3, #128	; 0x80
 8005eaa:	011b      	lsls	r3, r3, #4
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d102      	bne.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
          frequency = HSI_VALUE;
 8005eb0:	4b27      	ldr	r3, [pc, #156]	; (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8005eb2:	617b      	str	r3, [r7, #20]
        break;
 8005eb4:	e1ab      	b.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005eb6:	4b24      	ldr	r3, [pc, #144]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eba:	2202      	movs	r2, #2
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d000      	beq.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 8005ec2:	e1a4      	b.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	23c0      	movs	r3, #192	; 0xc0
 8005ec8:	011b      	lsls	r3, r3, #4
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d000      	beq.n	8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8005ece:	e19e      	b.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          frequency = LSE_VALUE;
 8005ed0:	2380      	movs	r3, #128	; 0x80
 8005ed2:	021b      	lsls	r3, r3, #8
 8005ed4:	617b      	str	r3, [r7, #20]
        break;
 8005ed6:	e19a      	b.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005ed8:	4b1b      	ldr	r3, [pc, #108]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005edc:	0f9b      	lsrs	r3, r3, #30
 8005ede:	079b      	lsls	r3, r3, #30
 8005ee0:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d104      	bne.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ee8:	f7ff fc3c 	bl	8005764 <HAL_RCC_GetSysClockFreq>
 8005eec:	0003      	movs	r3, r0
 8005eee:	617b      	str	r3, [r7, #20]
        break;
 8005ef0:	e18f      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	2380      	movs	r3, #128	; 0x80
 8005ef6:	061b      	lsls	r3, r3, #24
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d102      	bne.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
          frequency = HSI_VALUE;
 8005efc:	4b14      	ldr	r3, [pc, #80]	; (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8005efe:	617b      	str	r3, [r7, #20]
        break;
 8005f00:	e187      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	2380      	movs	r3, #128	; 0x80
 8005f06:	05db      	lsls	r3, r3, #23
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d000      	beq.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8005f0c:	e181      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8005f0e:	4b0e      	ldr	r3, [pc, #56]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005f10:	68da      	ldr	r2, [r3, #12]
 8005f12:	2380      	movs	r3, #128	; 0x80
 8005f14:	025b      	lsls	r3, r3, #9
 8005f16:	4013      	ands	r3, r2
 8005f18:	d100      	bne.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005f1a:	e17a      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005f1c:	4b0a      	ldr	r3, [pc, #40]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	0a1b      	lsrs	r3, r3, #8
 8005f22:	227f      	movs	r2, #127	; 0x7f
 8005f24:	4013      	ands	r3, r2
 8005f26:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	435a      	muls	r2, r3
 8005f2e:	0010      	movs	r0, r2
 8005f30:	4b05      	ldr	r3, [pc, #20]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	0c5b      	lsrs	r3, r3, #17
 8005f36:	221f      	movs	r2, #31
 8005f38:	4013      	ands	r3, r2
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	0019      	movs	r1, r3
 8005f3e:	f7fa f8e1 	bl	8000104 <__udivsi3>
 8005f42:	0003      	movs	r3, r0
 8005f44:	617b      	str	r3, [r7, #20]
        break;
 8005f46:	e164      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 8005f48:	40021000 	.word	0x40021000
 8005f4c:	0003d090 	.word	0x0003d090
 8005f50:	00f42400 	.word	0x00f42400
 8005f54:	007a1200 	.word	0x007a1200
 8005f58:	00008012 	.word	0x00008012
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005f5c:	4bb6      	ldr	r3, [pc, #728]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005f5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f60:	23c0      	movs	r3, #192	; 0xc0
 8005f62:	019b      	lsls	r3, r3, #6
 8005f64:	4013      	ands	r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d104      	bne.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f6e:	f7ff fc85 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 8005f72:	0003      	movs	r3, r0
 8005f74:	617b      	str	r3, [r7, #20]
        break;
 8005f76:	e14e      	b.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	2380      	movs	r3, #128	; 0x80
 8005f7c:	015b      	lsls	r3, r3, #5
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d104      	bne.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x374>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f82:	f7ff fbef 	bl	8005764 <HAL_RCC_GetSysClockFreq>
 8005f86:	0003      	movs	r3, r0
 8005f88:	617b      	str	r3, [r7, #20]
        break;
 8005f8a:	e144      	b.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005f8c:	4baa      	ldr	r3, [pc, #680]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	2380      	movs	r3, #128	; 0x80
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	401a      	ands	r2, r3
 8005f96:	2380      	movs	r3, #128	; 0x80
 8005f98:	00db      	lsls	r3, r3, #3
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d000      	beq.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8005f9e:	e13a      	b.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	2380      	movs	r3, #128	; 0x80
 8005fa4:	019b      	lsls	r3, r3, #6
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d000      	beq.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8005faa:	e134      	b.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          frequency = HSI_VALUE;
 8005fac:	4ba3      	ldr	r3, [pc, #652]	; (800623c <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8005fae:	617b      	str	r3, [r7, #20]
        break;
 8005fb0:	e131      	b.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8005fb2:	4ba1      	ldr	r3, [pc, #644]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005fb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fb6:	23c0      	movs	r3, #192	; 0xc0
 8005fb8:	021b      	lsls	r3, r3, #8
 8005fba:	4013      	ands	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	2380      	movs	r3, #128	; 0x80
 8005fc2:	01db      	lsls	r3, r3, #7
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d11c      	bne.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8005fc8:	4b9b      	ldr	r3, [pc, #620]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005fca:	68da      	ldr	r2, [r3, #12]
 8005fcc:	2380      	movs	r3, #128	; 0x80
 8005fce:	025b      	lsls	r3, r3, #9
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	d100      	bne.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005fd4:	e121      	b.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005fd6:	4b98      	ldr	r3, [pc, #608]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	0a1b      	lsrs	r3, r3, #8
 8005fdc:	227f      	movs	r2, #127	; 0x7f
 8005fde:	4013      	ands	r3, r2
 8005fe0:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	435a      	muls	r2, r3
 8005fe8:	0010      	movs	r0, r2
 8005fea:	4b93      	ldr	r3, [pc, #588]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	0c5b      	lsrs	r3, r3, #17
 8005ff0:	221f      	movs	r2, #31
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	0019      	movs	r1, r3
 8005ff8:	f7fa f884 	bl	8000104 <__udivsi3>
 8005ffc:	0003      	movs	r3, r0
 8005ffe:	617b      	str	r3, [r7, #20]
        break;
 8006000:	e10b      	b.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d104      	bne.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          frequency = HAL_RCC_GetSysClockFreq();
 8006008:	f7ff fbac 	bl	8005764 <HAL_RCC_GetSysClockFreq>
 800600c:	0003      	movs	r3, r0
 800600e:	617b      	str	r3, [r7, #20]
        break;
 8006010:	e103      	b.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8006012:	4b89      	ldr	r3, [pc, #548]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	2380      	movs	r3, #128	; 0x80
 8006018:	00db      	lsls	r3, r3, #3
 800601a:	401a      	ands	r2, r3
 800601c:	2380      	movs	r3, #128	; 0x80
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	429a      	cmp	r2, r3
 8006022:	d107      	bne.n	8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	2380      	movs	r3, #128	; 0x80
 8006028:	021b      	lsls	r3, r3, #8
 800602a:	429a      	cmp	r2, r3
 800602c:	d102      	bne.n	8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          frequency = HSI_VALUE;
 800602e:	4b83      	ldr	r3, [pc, #524]	; (800623c <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8006030:	617b      	str	r3, [r7, #20]
        break;
 8006032:	e0f2      	b.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	23c0      	movs	r3, #192	; 0xc0
 8006038:	021b      	lsls	r3, r3, #8
 800603a:	429a      	cmp	r2, r3
 800603c:	d000      	beq.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
 800603e:	e0ec      	b.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 8006040:	4b7f      	ldr	r3, [pc, #508]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x628>)
 8006042:	617b      	str	r3, [r7, #20]
        break;
 8006044:	e0e9      	b.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006046:	4b7c      	ldr	r3, [pc, #496]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8006048:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800604a:	23c0      	movs	r3, #192	; 0xc0
 800604c:	031b      	lsls	r3, r3, #12
 800604e:	4013      	ands	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d104      	bne.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006058:	f7ff fc10 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 800605c:	0003      	movs	r3, r0
 800605e:	617b      	str	r3, [r7, #20]
        break;
 8006060:	e0dd      	b.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006062:	4b75      	ldr	r3, [pc, #468]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8006064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006066:	2202      	movs	r2, #2
 8006068:	4013      	ands	r3, r2
 800606a:	2b02      	cmp	r3, #2
 800606c:	d108      	bne.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	2380      	movs	r3, #128	; 0x80
 8006072:	02db      	lsls	r3, r3, #11
 8006074:	429a      	cmp	r2, r3
 8006076:	d103      	bne.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          frequency = LSI_VALUE;
 8006078:	23fa      	movs	r3, #250	; 0xfa
 800607a:	01db      	lsls	r3, r3, #7
 800607c:	617b      	str	r3, [r7, #20]
 800607e:	e021      	b.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006080:	4b6d      	ldr	r3, [pc, #436]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	2380      	movs	r3, #128	; 0x80
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	401a      	ands	r2, r3
 800608a:	2380      	movs	r3, #128	; 0x80
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	429a      	cmp	r2, r3
 8006090:	d107      	bne.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	2380      	movs	r3, #128	; 0x80
 8006096:	031b      	lsls	r3, r3, #12
 8006098:	429a      	cmp	r2, r3
 800609a:	d102      	bne.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = HSI_VALUE;
 800609c:	4b67      	ldr	r3, [pc, #412]	; (800623c <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 800609e:	617b      	str	r3, [r7, #20]
 80060a0:	e010      	b.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80060a2:	4b65      	ldr	r3, [pc, #404]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 80060a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060a6:	2202      	movs	r2, #2
 80060a8:	4013      	ands	r3, r2
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d000      	beq.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
 80060ae:	e0b6      	b.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	23c0      	movs	r3, #192	; 0xc0
 80060b4:	031b      	lsls	r3, r3, #12
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d000      	beq.n	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
 80060ba:	e0b0      	b.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
          frequency = LSE_VALUE;
 80060bc:	2380      	movs	r3, #128	; 0x80
 80060be:	021b      	lsls	r3, r3, #8
 80060c0:	617b      	str	r3, [r7, #20]
        break;
 80060c2:	e0ac      	b.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 80060c4:	e0ab      	b.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80060c6:	4b5c      	ldr	r3, [pc, #368]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 80060c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060ca:	23c0      	movs	r3, #192	; 0xc0
 80060cc:	039b      	lsls	r3, r3, #14
 80060ce:	4013      	ands	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d104      	bne.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = HAL_RCC_GetPCLK1Freq();
 80060d8:	f7ff fbd0 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 80060dc:	0003      	movs	r3, r0
 80060de:	617b      	str	r3, [r7, #20]
        break;
 80060e0:	e09f      	b.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80060e2:	4b55      	ldr	r3, [pc, #340]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 80060e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060e6:	2202      	movs	r2, #2
 80060e8:	4013      	ands	r3, r2
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d108      	bne.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	2380      	movs	r3, #128	; 0x80
 80060f2:	035b      	lsls	r3, r3, #13
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d103      	bne.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = LSI_VALUE;
 80060f8:	23fa      	movs	r3, #250	; 0xfa
 80060fa:	01db      	lsls	r3, r3, #7
 80060fc:	617b      	str	r3, [r7, #20]
 80060fe:	e021      	b.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006100:	4b4d      	ldr	r3, [pc, #308]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	2380      	movs	r3, #128	; 0x80
 8006106:	00db      	lsls	r3, r3, #3
 8006108:	401a      	ands	r2, r3
 800610a:	2380      	movs	r3, #128	; 0x80
 800610c:	00db      	lsls	r3, r3, #3
 800610e:	429a      	cmp	r2, r3
 8006110:	d107      	bne.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	2380      	movs	r3, #128	; 0x80
 8006116:	039b      	lsls	r3, r3, #14
 8006118:	429a      	cmp	r2, r3
 800611a:	d102      	bne.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
          frequency = HSI_VALUE;
 800611c:	4b47      	ldr	r3, [pc, #284]	; (800623c <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 800611e:	617b      	str	r3, [r7, #20]
 8006120:	e010      	b.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006122:	4b45      	ldr	r3, [pc, #276]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8006124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006126:	2202      	movs	r2, #2
 8006128:	4013      	ands	r3, r2
 800612a:	2b02      	cmp	r3, #2
 800612c:	d000      	beq.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800612e:	e078      	b.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	23c0      	movs	r3, #192	; 0xc0
 8006134:	039b      	lsls	r3, r3, #14
 8006136:	429a      	cmp	r2, r3
 8006138:	d000      	beq.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 800613a:	e072      	b.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = LSE_VALUE;
 800613c:	2380      	movs	r3, #128	; 0x80
 800613e:	021b      	lsls	r3, r3, #8
 8006140:	617b      	str	r3, [r7, #20]
        break;
 8006142:	e06e      	b.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8006144:	e06d      	b.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 8006146:	4b3c      	ldr	r3, [pc, #240]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8006148:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800614a:	2380      	movs	r3, #128	; 0x80
 800614c:	03db      	lsls	r3, r3, #15
 800614e:	4013      	ands	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	2380      	movs	r3, #128	; 0x80
 8006156:	03db      	lsls	r3, r3, #15
 8006158:	429a      	cmp	r2, r3
 800615a:	d11b      	bne.n	8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 800615c:	4b36      	ldr	r3, [pc, #216]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 800615e:	68da      	ldr	r2, [r3, #12]
 8006160:	2380      	movs	r3, #128	; 0x80
 8006162:	045b      	lsls	r3, r3, #17
 8006164:	4013      	ands	r3, r2
 8006166:	d05e      	beq.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006168:	4b33      	ldr	r3, [pc, #204]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	0a1b      	lsrs	r3, r3, #8
 800616e:	227f      	movs	r2, #127	; 0x7f
 8006170:	4013      	ands	r3, r2
 8006172:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	435a      	muls	r2, r3
 800617a:	0010      	movs	r0, r2
 800617c:	4b2e      	ldr	r3, [pc, #184]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	0e5b      	lsrs	r3, r3, #25
 8006182:	2207      	movs	r2, #7
 8006184:	4013      	ands	r3, r2
 8006186:	3301      	adds	r3, #1
 8006188:	0019      	movs	r1, r3
 800618a:	f7f9 ffbb 	bl	8000104 <__udivsi3>
 800618e:	0003      	movs	r3, r0
 8006190:	617b      	str	r3, [r7, #20]
        break;
 8006192:	e048      	b.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d145      	bne.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800619a:	f7ff fb6f 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 800619e:	0003      	movs	r3, r0
 80061a0:	617b      	str	r3, [r7, #20]
        break;
 80061a2:	e040      	b.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 80061a4:	4b24      	ldr	r3, [pc, #144]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 80061a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061a8:	2380      	movs	r3, #128	; 0x80
 80061aa:	045b      	lsls	r3, r3, #17
 80061ac:	4013      	ands	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	2380      	movs	r3, #128	; 0x80
 80061b4:	045b      	lsls	r3, r3, #17
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d11b      	bne.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 80061ba:	4b1f      	ldr	r3, [pc, #124]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 80061bc:	68da      	ldr	r2, [r3, #12]
 80061be:	2380      	movs	r3, #128	; 0x80
 80061c0:	045b      	lsls	r3, r3, #17
 80061c2:	4013      	ands	r3, r2
 80061c4:	d031      	beq.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80061c6:	4b1c      	ldr	r3, [pc, #112]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	0a1b      	lsrs	r3, r3, #8
 80061cc:	227f      	movs	r2, #127	; 0x7f
 80061ce:	4013      	ands	r3, r2
 80061d0:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	435a      	muls	r2, r3
 80061d8:	0010      	movs	r0, r2
 80061da:	4b17      	ldr	r3, [pc, #92]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	0e5b      	lsrs	r3, r3, #25
 80061e0:	2207      	movs	r2, #7
 80061e2:	4013      	ands	r3, r2
 80061e4:	3301      	adds	r3, #1
 80061e6:	0019      	movs	r1, r3
 80061e8:	f7f9 ff8c 	bl	8000104 <__udivsi3>
 80061ec:	0003      	movs	r3, r0
 80061ee:	617b      	str	r3, [r7, #20]
        break;
 80061f0:	e01b      	b.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d118      	bne.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
          frequency = HAL_RCC_GetPCLK1Freq();
 80061f8:	f7ff fb40 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 80061fc:	0003      	movs	r3, r0
 80061fe:	617b      	str	r3, [r7, #20]
        break;
 8006200:	e013      	b.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
        break;
 8006202:	46c0      	nop			; (mov r8, r8)
 8006204:	e012      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 8006206:	46c0      	nop			; (mov r8, r8)
 8006208:	e010      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 800620a:	46c0      	nop			; (mov r8, r8)
 800620c:	e00e      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 800620e:	46c0      	nop			; (mov r8, r8)
 8006210:	e00c      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 8006212:	46c0      	nop			; (mov r8, r8)
 8006214:	e00a      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 8006216:	46c0      	nop			; (mov r8, r8)
 8006218:	e008      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 800621a:	46c0      	nop			; (mov r8, r8)
 800621c:	e006      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 800621e:	46c0      	nop			; (mov r8, r8)
 8006220:	e004      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 8006222:	46c0      	nop			; (mov r8, r8)
 8006224:	e002      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 8006226:	46c0      	nop			; (mov r8, r8)
 8006228:	e000      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 800622a:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 800622c:	697b      	ldr	r3, [r7, #20]
}
 800622e:	0018      	movs	r0, r3
 8006230:	46bd      	mov	sp, r7
 8006232:	b006      	add	sp, #24
 8006234:	bd80      	pop	{r7, pc}
 8006236:	46c0      	nop			; (mov r8, r8)
 8006238:	40021000 	.word	0x40021000
 800623c:	00f42400 	.word	0x00f42400
 8006240:	0000bb80 	.word	0x0000bb80

08006244 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e0a8      	b.n	80063a8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	2b00      	cmp	r3, #0
 800625c:	d109      	bne.n	8006272 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685a      	ldr	r2, [r3, #4]
 8006262:	2382      	movs	r3, #130	; 0x82
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	429a      	cmp	r2, r3
 8006268:	d009      	beq.n	800627e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	61da      	str	r2, [r3, #28]
 8006270:	e005      	b.n	800627e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	225d      	movs	r2, #93	; 0x5d
 8006288:	5c9b      	ldrb	r3, [r3, r2]
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	d107      	bne.n	80062a0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	225c      	movs	r2, #92	; 0x5c
 8006294:	2100      	movs	r1, #0
 8006296:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	0018      	movs	r0, r3
 800629c:	f7fc fb00 	bl	80028a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	225d      	movs	r2, #93	; 0x5d
 80062a4:	2102      	movs	r1, #2
 80062a6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2140      	movs	r1, #64	; 0x40
 80062b4:	438a      	bics	r2, r1
 80062b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68da      	ldr	r2, [r3, #12]
 80062bc:	23e0      	movs	r3, #224	; 0xe0
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d902      	bls.n	80062ca <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80062c4:	2300      	movs	r3, #0
 80062c6:	60fb      	str	r3, [r7, #12]
 80062c8:	e002      	b.n	80062d0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80062ca:	2380      	movs	r3, #128	; 0x80
 80062cc:	015b      	lsls	r3, r3, #5
 80062ce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68da      	ldr	r2, [r3, #12]
 80062d4:	23f0      	movs	r3, #240	; 0xf0
 80062d6:	011b      	lsls	r3, r3, #4
 80062d8:	429a      	cmp	r2, r3
 80062da:	d008      	beq.n	80062ee <HAL_SPI_Init+0xaa>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68da      	ldr	r2, [r3, #12]
 80062e0:	23e0      	movs	r3, #224	; 0xe0
 80062e2:	00db      	lsls	r3, r3, #3
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d002      	beq.n	80062ee <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	2382      	movs	r3, #130	; 0x82
 80062f4:	005b      	lsls	r3, r3, #1
 80062f6:	401a      	ands	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6899      	ldr	r1, [r3, #8]
 80062fc:	2384      	movs	r3, #132	; 0x84
 80062fe:	021b      	lsls	r3, r3, #8
 8006300:	400b      	ands	r3, r1
 8006302:	431a      	orrs	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	2102      	movs	r1, #2
 800630a:	400b      	ands	r3, r1
 800630c:	431a      	orrs	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	2101      	movs	r1, #1
 8006314:	400b      	ands	r3, r1
 8006316:	431a      	orrs	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6999      	ldr	r1, [r3, #24]
 800631c:	2380      	movs	r3, #128	; 0x80
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	400b      	ands	r3, r1
 8006322:	431a      	orrs	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	2138      	movs	r1, #56	; 0x38
 800632a:	400b      	ands	r3, r1
 800632c:	431a      	orrs	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	2180      	movs	r1, #128	; 0x80
 8006334:	400b      	ands	r3, r1
 8006336:	431a      	orrs	r2, r3
 8006338:	0011      	movs	r1, r2
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800633e:	2380      	movs	r3, #128	; 0x80
 8006340:	019b      	lsls	r3, r3, #6
 8006342:	401a      	ands	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	0c1b      	lsrs	r3, r3, #16
 8006352:	2204      	movs	r2, #4
 8006354:	401a      	ands	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635a:	2110      	movs	r1, #16
 800635c:	400b      	ands	r3, r1
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006364:	2108      	movs	r1, #8
 8006366:	400b      	ands	r3, r1
 8006368:	431a      	orrs	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68d9      	ldr	r1, [r3, #12]
 800636e:	23f0      	movs	r3, #240	; 0xf0
 8006370:	011b      	lsls	r3, r3, #4
 8006372:	400b      	ands	r3, r1
 8006374:	431a      	orrs	r2, r3
 8006376:	0011      	movs	r1, r2
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	2380      	movs	r3, #128	; 0x80
 800637c:	015b      	lsls	r3, r3, #5
 800637e:	401a      	ands	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	69da      	ldr	r2, [r3, #28]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4907      	ldr	r1, [pc, #28]	; (80063b0 <HAL_SPI_Init+0x16c>)
 8006394:	400a      	ands	r2, r1
 8006396:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	225d      	movs	r2, #93	; 0x5d
 80063a2:	2101      	movs	r1, #1
 80063a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	0018      	movs	r0, r3
 80063aa:	46bd      	mov	sp, r7
 80063ac:	b004      	add	sp, #16
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	fffff7ff 	.word	0xfffff7ff

080063b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b088      	sub	sp, #32
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	603b      	str	r3, [r7, #0]
 80063c0:	1dbb      	adds	r3, r7, #6
 80063c2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063c4:	231f      	movs	r3, #31
 80063c6:	18fb      	adds	r3, r7, r3
 80063c8:	2200      	movs	r2, #0
 80063ca:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	225c      	movs	r2, #92	; 0x5c
 80063d0:	5c9b      	ldrb	r3, [r3, r2]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d101      	bne.n	80063da <HAL_SPI_Transmit+0x26>
 80063d6:	2302      	movs	r3, #2
 80063d8:	e140      	b.n	800665c <HAL_SPI_Transmit+0x2a8>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	225c      	movs	r2, #92	; 0x5c
 80063de:	2101      	movs	r1, #1
 80063e0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063e2:	f7fc fd55 	bl	8002e90 <HAL_GetTick>
 80063e6:	0003      	movs	r3, r0
 80063e8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80063ea:	2316      	movs	r3, #22
 80063ec:	18fb      	adds	r3, r7, r3
 80063ee:	1dba      	adds	r2, r7, #6
 80063f0:	8812      	ldrh	r2, [r2, #0]
 80063f2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	225d      	movs	r2, #93	; 0x5d
 80063f8:	5c9b      	ldrb	r3, [r3, r2]
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d004      	beq.n	800640a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006400:	231f      	movs	r3, #31
 8006402:	18fb      	adds	r3, r7, r3
 8006404:	2202      	movs	r2, #2
 8006406:	701a      	strb	r2, [r3, #0]
    goto error;
 8006408:	e11d      	b.n	8006646 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d003      	beq.n	8006418 <HAL_SPI_Transmit+0x64>
 8006410:	1dbb      	adds	r3, r7, #6
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d104      	bne.n	8006422 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006418:	231f      	movs	r3, #31
 800641a:	18fb      	adds	r3, r7, r3
 800641c:	2201      	movs	r2, #1
 800641e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006420:	e111      	b.n	8006646 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	225d      	movs	r2, #93	; 0x5d
 8006426:	2103      	movs	r1, #3
 8006428:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	1dba      	adds	r2, r7, #6
 800643a:	8812      	ldrh	r2, [r2, #0]
 800643c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	1dba      	adds	r2, r7, #6
 8006442:	8812      	ldrh	r2, [r2, #0]
 8006444:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2244      	movs	r2, #68	; 0x44
 8006450:	2100      	movs	r1, #0
 8006452:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2246      	movs	r2, #70	; 0x46
 8006458:	2100      	movs	r1, #0
 800645a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	689a      	ldr	r2, [r3, #8]
 800646c:	2380      	movs	r3, #128	; 0x80
 800646e:	021b      	lsls	r3, r3, #8
 8006470:	429a      	cmp	r2, r3
 8006472:	d110      	bne.n	8006496 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2140      	movs	r1, #64	; 0x40
 8006480:	438a      	bics	r2, r1
 8006482:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2180      	movs	r1, #128	; 0x80
 8006490:	01c9      	lsls	r1, r1, #7
 8006492:	430a      	orrs	r2, r1
 8006494:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2240      	movs	r2, #64	; 0x40
 800649e:	4013      	ands	r3, r2
 80064a0:	2b40      	cmp	r3, #64	; 0x40
 80064a2:	d007      	beq.n	80064b4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2140      	movs	r1, #64	; 0x40
 80064b0:	430a      	orrs	r2, r1
 80064b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	68da      	ldr	r2, [r3, #12]
 80064b8:	23e0      	movs	r3, #224	; 0xe0
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	429a      	cmp	r2, r3
 80064be:	d94e      	bls.n	800655e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d004      	beq.n	80064d2 <HAL_SPI_Transmit+0x11e>
 80064c8:	2316      	movs	r3, #22
 80064ca:	18fb      	adds	r3, r7, r3
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d13f      	bne.n	8006552 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d6:	881a      	ldrh	r2, [r3, #0]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e2:	1c9a      	adds	r2, r3, #2
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	3b01      	subs	r3, #1
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064f6:	e02c      	b.n	8006552 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	2202      	movs	r2, #2
 8006500:	4013      	ands	r3, r2
 8006502:	2b02      	cmp	r3, #2
 8006504:	d112      	bne.n	800652c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650a:	881a      	ldrh	r2, [r3, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006516:	1c9a      	adds	r2, r3, #2
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006520:	b29b      	uxth	r3, r3
 8006522:	3b01      	subs	r3, #1
 8006524:	b29a      	uxth	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	87da      	strh	r2, [r3, #62]	; 0x3e
 800652a:	e012      	b.n	8006552 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800652c:	f7fc fcb0 	bl	8002e90 <HAL_GetTick>
 8006530:	0002      	movs	r2, r0
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	429a      	cmp	r2, r3
 800653a:	d802      	bhi.n	8006542 <HAL_SPI_Transmit+0x18e>
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	3301      	adds	r3, #1
 8006540:	d102      	bne.n	8006548 <HAL_SPI_Transmit+0x194>
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d104      	bne.n	8006552 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8006548:	231f      	movs	r3, #31
 800654a:	18fb      	adds	r3, r7, r3
 800654c:	2203      	movs	r2, #3
 800654e:	701a      	strb	r2, [r3, #0]
          goto error;
 8006550:	e079      	b.n	8006646 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006556:	b29b      	uxth	r3, r3
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1cd      	bne.n	80064f8 <HAL_SPI_Transmit+0x144>
 800655c:	e04f      	b.n	80065fe <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d004      	beq.n	8006570 <HAL_SPI_Transmit+0x1bc>
 8006566:	2316      	movs	r3, #22
 8006568:	18fb      	adds	r3, r7, r3
 800656a:	881b      	ldrh	r3, [r3, #0]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d141      	bne.n	80065f4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	330c      	adds	r3, #12
 800657a:	7812      	ldrb	r2, [r2, #0]
 800657c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006582:	1c5a      	adds	r2, r3, #1
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800658c:	b29b      	uxth	r3, r3
 800658e:	3b01      	subs	r3, #1
 8006590:	b29a      	uxth	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006596:	e02d      	b.n	80065f4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	2202      	movs	r2, #2
 80065a0:	4013      	ands	r3, r2
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d113      	bne.n	80065ce <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	330c      	adds	r3, #12
 80065b0:	7812      	ldrb	r2, [r2, #0]
 80065b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b8:	1c5a      	adds	r2, r3, #1
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	3b01      	subs	r3, #1
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065cc:	e012      	b.n	80065f4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065ce:	f7fc fc5f 	bl	8002e90 <HAL_GetTick>
 80065d2:	0002      	movs	r2, r0
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d802      	bhi.n	80065e4 <HAL_SPI_Transmit+0x230>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	3301      	adds	r3, #1
 80065e2:	d102      	bne.n	80065ea <HAL_SPI_Transmit+0x236>
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d104      	bne.n	80065f4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80065ea:	231f      	movs	r3, #31
 80065ec:	18fb      	adds	r3, r7, r3
 80065ee:	2203      	movs	r2, #3
 80065f0:	701a      	strb	r2, [r3, #0]
          goto error;
 80065f2:	e028      	b.n	8006646 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1cc      	bne.n	8006598 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	6839      	ldr	r1, [r7, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	0018      	movs	r0, r3
 8006606:	f000 fdeb 	bl	80071e0 <SPI_EndRxTxTransaction>
 800660a:	1e03      	subs	r3, r0, #0
 800660c:	d002      	beq.n	8006614 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2220      	movs	r2, #32
 8006612:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10a      	bne.n	8006632 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800661c:	2300      	movs	r3, #0
 800661e:	613b      	str	r3, [r7, #16]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	613b      	str	r3, [r7, #16]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	613b      	str	r3, [r7, #16]
 8006630:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006636:	2b00      	cmp	r3, #0
 8006638:	d004      	beq.n	8006644 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800663a:	231f      	movs	r3, #31
 800663c:	18fb      	adds	r3, r7, r3
 800663e:	2201      	movs	r2, #1
 8006640:	701a      	strb	r2, [r3, #0]
 8006642:	e000      	b.n	8006646 <HAL_SPI_Transmit+0x292>
  }

error:
 8006644:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	225d      	movs	r2, #93	; 0x5d
 800664a:	2101      	movs	r1, #1
 800664c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	225c      	movs	r2, #92	; 0x5c
 8006652:	2100      	movs	r1, #0
 8006654:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006656:	231f      	movs	r3, #31
 8006658:	18fb      	adds	r3, r7, r3
 800665a:	781b      	ldrb	r3, [r3, #0]
}
 800665c:	0018      	movs	r0, r3
 800665e:	46bd      	mov	sp, r7
 8006660:	b008      	add	sp, #32
 8006662:	bd80      	pop	{r7, pc}

08006664 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006664:	b590      	push	{r4, r7, lr}
 8006666:	b089      	sub	sp, #36	; 0x24
 8006668:	af02      	add	r7, sp, #8
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	603b      	str	r3, [r7, #0]
 8006670:	1dbb      	adds	r3, r7, #6
 8006672:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006674:	2317      	movs	r3, #23
 8006676:	18fb      	adds	r3, r7, r3
 8006678:	2200      	movs	r2, #0
 800667a:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	2382      	movs	r3, #130	; 0x82
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	429a      	cmp	r2, r3
 8006686:	d113      	bne.n	80066b0 <HAL_SPI_Receive+0x4c>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10f      	bne.n	80066b0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	225d      	movs	r2, #93	; 0x5d
 8006694:	2104      	movs	r1, #4
 8006696:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006698:	1dbb      	adds	r3, r7, #6
 800669a:	881c      	ldrh	r4, [r3, #0]
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	68b9      	ldr	r1, [r7, #8]
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	0023      	movs	r3, r4
 80066a8:	f000 f928 	bl	80068fc <HAL_SPI_TransmitReceive>
 80066ac:	0003      	movs	r3, r0
 80066ae:	e11c      	b.n	80068ea <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	225c      	movs	r2, #92	; 0x5c
 80066b4:	5c9b      	ldrb	r3, [r3, r2]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d101      	bne.n	80066be <HAL_SPI_Receive+0x5a>
 80066ba:	2302      	movs	r3, #2
 80066bc:	e115      	b.n	80068ea <HAL_SPI_Receive+0x286>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	225c      	movs	r2, #92	; 0x5c
 80066c2:	2101      	movs	r1, #1
 80066c4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066c6:	f7fc fbe3 	bl	8002e90 <HAL_GetTick>
 80066ca:	0003      	movs	r3, r0
 80066cc:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	225d      	movs	r2, #93	; 0x5d
 80066d2:	5c9b      	ldrb	r3, [r3, r2]
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d004      	beq.n	80066e4 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80066da:	2317      	movs	r3, #23
 80066dc:	18fb      	adds	r3, r7, r3
 80066de:	2202      	movs	r2, #2
 80066e0:	701a      	strb	r2, [r3, #0]
    goto error;
 80066e2:	e0f7      	b.n	80068d4 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <HAL_SPI_Receive+0x8e>
 80066ea:	1dbb      	adds	r3, r7, #6
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d104      	bne.n	80066fc <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80066f2:	2317      	movs	r3, #23
 80066f4:	18fb      	adds	r3, r7, r3
 80066f6:	2201      	movs	r2, #1
 80066f8:	701a      	strb	r2, [r3, #0]
    goto error;
 80066fa:	e0eb      	b.n	80068d4 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	225d      	movs	r2, #93	; 0x5d
 8006700:	2104      	movs	r1, #4
 8006702:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	1dba      	adds	r2, r7, #6
 8006714:	2144      	movs	r1, #68	; 0x44
 8006716:	8812      	ldrh	r2, [r2, #0]
 8006718:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	1dba      	adds	r2, r7, #6
 800671e:	2146      	movs	r1, #70	; 0x46
 8006720:	8812      	ldrh	r2, [r2, #0]
 8006722:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	68da      	ldr	r2, [r3, #12]
 8006746:	23e0      	movs	r3, #224	; 0xe0
 8006748:	00db      	lsls	r3, r3, #3
 800674a:	429a      	cmp	r2, r3
 800674c:	d908      	bls.n	8006760 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4966      	ldr	r1, [pc, #408]	; (80068f4 <HAL_SPI_Receive+0x290>)
 800675a:	400a      	ands	r2, r1
 800675c:	605a      	str	r2, [r3, #4]
 800675e:	e008      	b.n	8006772 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2180      	movs	r1, #128	; 0x80
 800676c:	0149      	lsls	r1, r1, #5
 800676e:	430a      	orrs	r2, r1
 8006770:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	689a      	ldr	r2, [r3, #8]
 8006776:	2380      	movs	r3, #128	; 0x80
 8006778:	021b      	lsls	r3, r3, #8
 800677a:	429a      	cmp	r2, r3
 800677c:	d10f      	bne.n	800679e <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2140      	movs	r1, #64	; 0x40
 800678a:	438a      	bics	r2, r1
 800678c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4957      	ldr	r1, [pc, #348]	; (80068f8 <HAL_SPI_Receive+0x294>)
 800679a:	400a      	ands	r2, r1
 800679c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2240      	movs	r2, #64	; 0x40
 80067a6:	4013      	ands	r3, r2
 80067a8:	2b40      	cmp	r3, #64	; 0x40
 80067aa:	d007      	beq.n	80067bc <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2140      	movs	r1, #64	; 0x40
 80067b8:	430a      	orrs	r2, r1
 80067ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	68da      	ldr	r2, [r3, #12]
 80067c0:	23e0      	movs	r3, #224	; 0xe0
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d900      	bls.n	80067ca <HAL_SPI_Receive+0x166>
 80067c8:	e069      	b.n	800689e <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80067ca:	e031      	b.n	8006830 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	2201      	movs	r2, #1
 80067d4:	4013      	ands	r3, r2
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d117      	bne.n	800680a <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	330c      	adds	r3, #12
 80067e0:	001a      	movs	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e6:	7812      	ldrb	r2, [r2, #0]
 80067e8:	b2d2      	uxtb	r2, r2
 80067ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f0:	1c5a      	adds	r2, r3, #1
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2246      	movs	r2, #70	; 0x46
 80067fa:	5a9b      	ldrh	r3, [r3, r2]
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	3b01      	subs	r3, #1
 8006800:	b299      	uxth	r1, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2246      	movs	r2, #70	; 0x46
 8006806:	5299      	strh	r1, [r3, r2]
 8006808:	e012      	b.n	8006830 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800680a:	f7fc fb41 	bl	8002e90 <HAL_GetTick>
 800680e:	0002      	movs	r2, r0
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	429a      	cmp	r2, r3
 8006818:	d802      	bhi.n	8006820 <HAL_SPI_Receive+0x1bc>
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	3301      	adds	r3, #1
 800681e:	d102      	bne.n	8006826 <HAL_SPI_Receive+0x1c2>
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d104      	bne.n	8006830 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8006826:	2317      	movs	r3, #23
 8006828:	18fb      	adds	r3, r7, r3
 800682a:	2203      	movs	r2, #3
 800682c:	701a      	strb	r2, [r3, #0]
          goto error;
 800682e:	e051      	b.n	80068d4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2246      	movs	r2, #70	; 0x46
 8006834:	5a9b      	ldrh	r3, [r3, r2]
 8006836:	b29b      	uxth	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1c7      	bne.n	80067cc <HAL_SPI_Receive+0x168>
 800683c:	e035      	b.n	80068aa <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	2201      	movs	r2, #1
 8006846:	4013      	ands	r3, r2
 8006848:	2b01      	cmp	r3, #1
 800684a:	d115      	bne.n	8006878 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68da      	ldr	r2, [r3, #12]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006856:	b292      	uxth	r2, r2
 8006858:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685e:	1c9a      	adds	r2, r3, #2
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2246      	movs	r2, #70	; 0x46
 8006868:	5a9b      	ldrh	r3, [r3, r2]
 800686a:	b29b      	uxth	r3, r3
 800686c:	3b01      	subs	r3, #1
 800686e:	b299      	uxth	r1, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2246      	movs	r2, #70	; 0x46
 8006874:	5299      	strh	r1, [r3, r2]
 8006876:	e012      	b.n	800689e <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006878:	f7fc fb0a 	bl	8002e90 <HAL_GetTick>
 800687c:	0002      	movs	r2, r0
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	429a      	cmp	r2, r3
 8006886:	d802      	bhi.n	800688e <HAL_SPI_Receive+0x22a>
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	3301      	adds	r3, #1
 800688c:	d102      	bne.n	8006894 <HAL_SPI_Receive+0x230>
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d104      	bne.n	800689e <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8006894:	2317      	movs	r3, #23
 8006896:	18fb      	adds	r3, r7, r3
 8006898:	2203      	movs	r2, #3
 800689a:	701a      	strb	r2, [r3, #0]
          goto error;
 800689c:	e01a      	b.n	80068d4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2246      	movs	r2, #70	; 0x46
 80068a2:	5a9b      	ldrh	r3, [r3, r2]
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1c9      	bne.n	800683e <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	6839      	ldr	r1, [r7, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	0018      	movs	r0, r3
 80068b2:	f000 fc37 	bl	8007124 <SPI_EndRxTransaction>
 80068b6:	1e03      	subs	r3, r0, #0
 80068b8:	d002      	beq.n	80068c0 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2220      	movs	r2, #32
 80068be:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d004      	beq.n	80068d2 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80068c8:	2317      	movs	r3, #23
 80068ca:	18fb      	adds	r3, r7, r3
 80068cc:	2201      	movs	r2, #1
 80068ce:	701a      	strb	r2, [r3, #0]
 80068d0:	e000      	b.n	80068d4 <HAL_SPI_Receive+0x270>
  }

error :
 80068d2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	225d      	movs	r2, #93	; 0x5d
 80068d8:	2101      	movs	r1, #1
 80068da:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	225c      	movs	r2, #92	; 0x5c
 80068e0:	2100      	movs	r1, #0
 80068e2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80068e4:	2317      	movs	r3, #23
 80068e6:	18fb      	adds	r3, r7, r3
 80068e8:	781b      	ldrb	r3, [r3, #0]
}
 80068ea:	0018      	movs	r0, r3
 80068ec:	46bd      	mov	sp, r7
 80068ee:	b007      	add	sp, #28
 80068f0:	bd90      	pop	{r4, r7, pc}
 80068f2:	46c0      	nop			; (mov r8, r8)
 80068f4:	ffffefff 	.word	0xffffefff
 80068f8:	ffffbfff 	.word	0xffffbfff

080068fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b08a      	sub	sp, #40	; 0x28
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
 8006908:	001a      	movs	r2, r3
 800690a:	1cbb      	adds	r3, r7, #2
 800690c:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800690e:	2301      	movs	r3, #1
 8006910:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006912:	2323      	movs	r3, #35	; 0x23
 8006914:	18fb      	adds	r3, r7, r3
 8006916:	2200      	movs	r2, #0
 8006918:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	225c      	movs	r2, #92	; 0x5c
 800691e:	5c9b      	ldrb	r3, [r3, r2]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d101      	bne.n	8006928 <HAL_SPI_TransmitReceive+0x2c>
 8006924:	2302      	movs	r3, #2
 8006926:	e1b6      	b.n	8006c96 <HAL_SPI_TransmitReceive+0x39a>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	225c      	movs	r2, #92	; 0x5c
 800692c:	2101      	movs	r1, #1
 800692e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006930:	f7fc faae 	bl	8002e90 <HAL_GetTick>
 8006934:	0003      	movs	r3, r0
 8006936:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006938:	201b      	movs	r0, #27
 800693a:	183b      	adds	r3, r7, r0
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	215d      	movs	r1, #93	; 0x5d
 8006940:	5c52      	ldrb	r2, [r2, r1]
 8006942:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800694a:	2312      	movs	r3, #18
 800694c:	18fb      	adds	r3, r7, r3
 800694e:	1cba      	adds	r2, r7, #2
 8006950:	8812      	ldrh	r2, [r2, #0]
 8006952:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006954:	183b      	adds	r3, r7, r0
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d012      	beq.n	8006982 <HAL_SPI_TransmitReceive+0x86>
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	2382      	movs	r3, #130	; 0x82
 8006960:	005b      	lsls	r3, r3, #1
 8006962:	429a      	cmp	r2, r3
 8006964:	d108      	bne.n	8006978 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d104      	bne.n	8006978 <HAL_SPI_TransmitReceive+0x7c>
 800696e:	231b      	movs	r3, #27
 8006970:	18fb      	adds	r3, r7, r3
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	2b04      	cmp	r3, #4
 8006976:	d004      	beq.n	8006982 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8006978:	2323      	movs	r3, #35	; 0x23
 800697a:	18fb      	adds	r3, r7, r3
 800697c:	2202      	movs	r2, #2
 800697e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006980:	e17e      	b.n	8006c80 <HAL_SPI_TransmitReceive+0x384>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d006      	beq.n	8006996 <HAL_SPI_TransmitReceive+0x9a>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d003      	beq.n	8006996 <HAL_SPI_TransmitReceive+0x9a>
 800698e:	1cbb      	adds	r3, r7, #2
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d104      	bne.n	80069a0 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 8006996:	2323      	movs	r3, #35	; 0x23
 8006998:	18fb      	adds	r3, r7, r3
 800699a:	2201      	movs	r2, #1
 800699c:	701a      	strb	r2, [r3, #0]
    goto error;
 800699e:	e16f      	b.n	8006c80 <HAL_SPI_TransmitReceive+0x384>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	225d      	movs	r2, #93	; 0x5d
 80069a4:	5c9b      	ldrb	r3, [r3, r2]
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	2b04      	cmp	r3, #4
 80069aa:	d003      	beq.n	80069b4 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	225d      	movs	r2, #93	; 0x5d
 80069b0:	2105      	movs	r1, #5
 80069b2:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	1cba      	adds	r2, r7, #2
 80069c4:	2146      	movs	r1, #70	; 0x46
 80069c6:	8812      	ldrh	r2, [r2, #0]
 80069c8:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	1cba      	adds	r2, r7, #2
 80069ce:	2144      	movs	r1, #68	; 0x44
 80069d0:	8812      	ldrh	r2, [r2, #0]
 80069d2:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	1cba      	adds	r2, r7, #2
 80069de:	8812      	ldrh	r2, [r2, #0]
 80069e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	1cba      	adds	r2, r7, #2
 80069e6:	8812      	ldrh	r2, [r2, #0]
 80069e8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	68da      	ldr	r2, [r3, #12]
 80069fa:	23e0      	movs	r3, #224	; 0xe0
 80069fc:	00db      	lsls	r3, r3, #3
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d908      	bls.n	8006a14 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	49a4      	ldr	r1, [pc, #656]	; (8006ca0 <HAL_SPI_TransmitReceive+0x3a4>)
 8006a0e:	400a      	ands	r2, r1
 8006a10:	605a      	str	r2, [r3, #4]
 8006a12:	e008      	b.n	8006a26 <HAL_SPI_TransmitReceive+0x12a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685a      	ldr	r2, [r3, #4]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2180      	movs	r1, #128	; 0x80
 8006a20:	0149      	lsls	r1, r1, #5
 8006a22:	430a      	orrs	r2, r1
 8006a24:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2240      	movs	r2, #64	; 0x40
 8006a2e:	4013      	ands	r3, r2
 8006a30:	2b40      	cmp	r3, #64	; 0x40
 8006a32:	d007      	beq.n	8006a44 <HAL_SPI_TransmitReceive+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2140      	movs	r1, #64	; 0x40
 8006a40:	430a      	orrs	r2, r1
 8006a42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	68da      	ldr	r2, [r3, #12]
 8006a48:	23e0      	movs	r3, #224	; 0xe0
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d800      	bhi.n	8006a52 <HAL_SPI_TransmitReceive+0x156>
 8006a50:	e07f      	b.n	8006b52 <HAL_SPI_TransmitReceive+0x256>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d005      	beq.n	8006a66 <HAL_SPI_TransmitReceive+0x16a>
 8006a5a:	2312      	movs	r3, #18
 8006a5c:	18fb      	adds	r3, r7, r3
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d000      	beq.n	8006a66 <HAL_SPI_TransmitReceive+0x16a>
 8006a64:	e069      	b.n	8006b3a <HAL_SPI_TransmitReceive+0x23e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6a:	881a      	ldrh	r2, [r3, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a76:	1c9a      	adds	r2, r3, #2
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	3b01      	subs	r3, #1
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a8a:	e056      	b.n	8006b3a <HAL_SPI_TransmitReceive+0x23e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	2202      	movs	r2, #2
 8006a94:	4013      	ands	r3, r2
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d11b      	bne.n	8006ad2 <HAL_SPI_TransmitReceive+0x1d6>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d016      	beq.n	8006ad2 <HAL_SPI_TransmitReceive+0x1d6>
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d113      	bne.n	8006ad2 <HAL_SPI_TransmitReceive+0x1d6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aae:	881a      	ldrh	r2, [r3, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aba:	1c9a      	adds	r2, r3, #2
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	4013      	ands	r3, r2
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d11c      	bne.n	8006b1a <HAL_SPI_TransmitReceive+0x21e>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2246      	movs	r2, #70	; 0x46
 8006ae4:	5a9b      	ldrh	r3, [r3, r2]
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d016      	beq.n	8006b1a <HAL_SPI_TransmitReceive+0x21e>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68da      	ldr	r2, [r3, #12]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af6:	b292      	uxth	r2, r2
 8006af8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afe:	1c9a      	adds	r2, r3, #2
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2246      	movs	r2, #70	; 0x46
 8006b08:	5a9b      	ldrh	r3, [r3, r2]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	b299      	uxth	r1, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2246      	movs	r2, #70	; 0x46
 8006b14:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b16:	2301      	movs	r3, #1
 8006b18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006b1a:	f7fc f9b9 	bl	8002e90 <HAL_GetTick>
 8006b1e:	0002      	movs	r2, r0
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d807      	bhi.n	8006b3a <HAL_SPI_TransmitReceive+0x23e>
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	d004      	beq.n	8006b3a <HAL_SPI_TransmitReceive+0x23e>
      {
        errorcode = HAL_TIMEOUT;
 8006b30:	2323      	movs	r3, #35	; 0x23
 8006b32:	18fb      	adds	r3, r7, r3
 8006b34:	2203      	movs	r2, #3
 8006b36:	701a      	strb	r2, [r3, #0]
        goto error;
 8006b38:	e0a2      	b.n	8006c80 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1a3      	bne.n	8006a8c <HAL_SPI_TransmitReceive+0x190>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2246      	movs	r2, #70	; 0x46
 8006b48:	5a9b      	ldrh	r3, [r3, r2]
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d19d      	bne.n	8006a8c <HAL_SPI_TransmitReceive+0x190>
 8006b50:	e085      	b.n	8006c5e <HAL_SPI_TransmitReceive+0x362>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d005      	beq.n	8006b66 <HAL_SPI_TransmitReceive+0x26a>
 8006b5a:	2312      	movs	r3, #18
 8006b5c:	18fb      	adds	r3, r7, r3
 8006b5e:	881b      	ldrh	r3, [r3, #0]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d000      	beq.n	8006b66 <HAL_SPI_TransmitReceive+0x26a>
 8006b64:	e070      	b.n	8006c48 <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	330c      	adds	r3, #12
 8006b70:	7812      	ldrb	r2, [r2, #0]
 8006b72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b78:	1c5a      	adds	r2, r3, #1
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	3b01      	subs	r3, #1
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b8c:	e05c      	b.n	8006c48 <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	2202      	movs	r2, #2
 8006b96:	4013      	ands	r3, r2
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d11c      	bne.n	8006bd6 <HAL_SPI_TransmitReceive+0x2da>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d017      	beq.n	8006bd6 <HAL_SPI_TransmitReceive+0x2da>
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d114      	bne.n	8006bd6 <HAL_SPI_TransmitReceive+0x2da>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	330c      	adds	r3, #12
 8006bb6:	7812      	ldrb	r2, [r2, #0]
 8006bb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bbe:	1c5a      	adds	r2, r3, #1
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	4013      	ands	r3, r2
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d11e      	bne.n	8006c22 <HAL_SPI_TransmitReceive+0x326>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2246      	movs	r2, #70	; 0x46
 8006be8:	5a9b      	ldrh	r3, [r3, r2]
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d018      	beq.n	8006c22 <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	330c      	adds	r3, #12
 8006bf6:	001a      	movs	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfc:	7812      	ldrb	r2, [r2, #0]
 8006bfe:	b2d2      	uxtb	r2, r2
 8006c00:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c06:	1c5a      	adds	r2, r3, #1
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2246      	movs	r2, #70	; 0x46
 8006c10:	5a9b      	ldrh	r3, [r3, r2]
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	3b01      	subs	r3, #1
 8006c16:	b299      	uxth	r1, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2246      	movs	r2, #70	; 0x46
 8006c1c:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006c22:	f7fc f935 	bl	8002e90 <HAL_GetTick>
 8006c26:	0002      	movs	r2, r0
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d802      	bhi.n	8006c38 <HAL_SPI_TransmitReceive+0x33c>
 8006c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c34:	3301      	adds	r3, #1
 8006c36:	d102      	bne.n	8006c3e <HAL_SPI_TransmitReceive+0x342>
 8006c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d104      	bne.n	8006c48 <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 8006c3e:	2323      	movs	r3, #35	; 0x23
 8006c40:	18fb      	adds	r3, r7, r3
 8006c42:	2203      	movs	r2, #3
 8006c44:	701a      	strb	r2, [r3, #0]
        goto error;
 8006c46:	e01b      	b.n	8006c80 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d19d      	bne.n	8006b8e <HAL_SPI_TransmitReceive+0x292>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2246      	movs	r2, #70	; 0x46
 8006c56:	5a9b      	ldrh	r3, [r3, r2]
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d197      	bne.n	8006b8e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c5e:	69fa      	ldr	r2, [r7, #28]
 8006c60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	0018      	movs	r0, r3
 8006c66:	f000 fabb 	bl	80071e0 <SPI_EndRxTxTransaction>
 8006c6a:	1e03      	subs	r3, r0, #0
 8006c6c:	d007      	beq.n	8006c7e <HAL_SPI_TransmitReceive+0x382>
  {
    errorcode = HAL_ERROR;
 8006c6e:	2323      	movs	r3, #35	; 0x23
 8006c70:	18fb      	adds	r3, r7, r3
 8006c72:	2201      	movs	r2, #1
 8006c74:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2220      	movs	r2, #32
 8006c7a:	661a      	str	r2, [r3, #96]	; 0x60
 8006c7c:	e000      	b.n	8006c80 <HAL_SPI_TransmitReceive+0x384>
  }

error :
 8006c7e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	225d      	movs	r2, #93	; 0x5d
 8006c84:	2101      	movs	r1, #1
 8006c86:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	225c      	movs	r2, #92	; 0x5c
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006c90:	2323      	movs	r3, #35	; 0x23
 8006c92:	18fb      	adds	r3, r7, r3
 8006c94:	781b      	ldrb	r3, [r3, #0]
}
 8006c96:	0018      	movs	r0, r3
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	b00a      	add	sp, #40	; 0x28
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	46c0      	nop			; (mov r8, r8)
 8006ca0:	ffffefff 	.word	0xffffefff

08006ca4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b088      	sub	sp, #32
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	099b      	lsrs	r3, r3, #6
 8006cc0:	001a      	movs	r2, r3
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	d10f      	bne.n	8006ce8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006cce:	d00b      	beq.n	8006ce8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	099b      	lsrs	r3, r3, #6
 8006cd4:	001a      	movs	r2, r3
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	4013      	ands	r3, r2
 8006cda:	d005      	beq.n	8006ce8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	0010      	movs	r0, r2
 8006ce4:	4798      	blx	r3
    return;
 8006ce6:	e0d6      	b.n	8006e96 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	085b      	lsrs	r3, r3, #1
 8006cec:	001a      	movs	r2, r3
 8006cee:	2301      	movs	r3, #1
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	d00b      	beq.n	8006d0c <HAL_SPI_IRQHandler+0x68>
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	09db      	lsrs	r3, r3, #7
 8006cf8:	001a      	movs	r2, r3
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	d005      	beq.n	8006d0c <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	0010      	movs	r0, r2
 8006d08:	4798      	blx	r3
    return;
 8006d0a:	e0c4      	b.n	8006e96 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	095b      	lsrs	r3, r3, #5
 8006d10:	001a      	movs	r2, r3
 8006d12:	2301      	movs	r3, #1
 8006d14:	4013      	ands	r3, r2
 8006d16:	d10c      	bne.n	8006d32 <HAL_SPI_IRQHandler+0x8e>
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	099b      	lsrs	r3, r3, #6
 8006d1c:	001a      	movs	r2, r3
 8006d1e:	2301      	movs	r3, #1
 8006d20:	4013      	ands	r3, r2
 8006d22:	d106      	bne.n	8006d32 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	0a1b      	lsrs	r3, r3, #8
 8006d28:	001a      	movs	r2, r3
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	d100      	bne.n	8006d32 <HAL_SPI_IRQHandler+0x8e>
 8006d30:	e0b1      	b.n	8006e96 <HAL_SPI_IRQHandler+0x1f2>
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	095b      	lsrs	r3, r3, #5
 8006d36:	001a      	movs	r2, r3
 8006d38:	2301      	movs	r3, #1
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	d100      	bne.n	8006d40 <HAL_SPI_IRQHandler+0x9c>
 8006d3e:	e0aa      	b.n	8006e96 <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	099b      	lsrs	r3, r3, #6
 8006d44:	001a      	movs	r2, r3
 8006d46:	2301      	movs	r3, #1
 8006d48:	4013      	ands	r3, r2
 8006d4a:	d023      	beq.n	8006d94 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	225d      	movs	r2, #93	; 0x5d
 8006d50:	5c9b      	ldrb	r3, [r3, r2]
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2b03      	cmp	r3, #3
 8006d56:	d011      	beq.n	8006d7c <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d5c:	2204      	movs	r2, #4
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d64:	2300      	movs	r3, #0
 8006d66:	617b      	str	r3, [r7, #20]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	617b      	str	r3, [r7, #20]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	617b      	str	r3, [r7, #20]
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	e00b      	b.n	8006d94 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	613b      	str	r3, [r7, #16]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	613b      	str	r3, [r7, #16]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	613b      	str	r3, [r7, #16]
 8006d90:	693b      	ldr	r3, [r7, #16]
        return;
 8006d92:	e080      	b.n	8006e96 <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	095b      	lsrs	r3, r3, #5
 8006d98:	001a      	movs	r2, r3
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	d014      	beq.n	8006dca <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006da4:	2201      	movs	r2, #1
 8006da6:	431a      	orrs	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006dac:	2300      	movs	r3, #0
 8006dae:	60fb      	str	r3, [r7, #12]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	60fb      	str	r3, [r7, #12]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2140      	movs	r1, #64	; 0x40
 8006dc4:	438a      	bics	r2, r1
 8006dc6:	601a      	str	r2, [r3, #0]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	0a1b      	lsrs	r3, r3, #8
 8006dce:	001a      	movs	r2, r3
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	d00c      	beq.n	8006df0 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dda:	2208      	movs	r2, #8
 8006ddc:	431a      	orrs	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006de2:	2300      	movs	r3, #0
 8006de4:	60bb      	str	r3, [r7, #8]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	60bb      	str	r3, [r7, #8]
 8006dee:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d04d      	beq.n	8006e94 <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	685a      	ldr	r2, [r3, #4]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	21e0      	movs	r1, #224	; 0xe0
 8006e04:	438a      	bics	r2, r1
 8006e06:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	225d      	movs	r2, #93	; 0x5d
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	2202      	movs	r2, #2
 8006e14:	4013      	ands	r3, r2
 8006e16:	d103      	bne.n	8006e20 <HAL_SPI_IRQHandler+0x17c>
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	d032      	beq.n	8006e86 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2103      	movs	r1, #3
 8006e2c:	438a      	bics	r2, r1
 8006e2e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d010      	beq.n	8006e5a <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e3c:	4a17      	ldr	r2, [pc, #92]	; (8006e9c <HAL_SPI_IRQHandler+0x1f8>)
 8006e3e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e44:	0018      	movs	r0, r3
 8006e46:	f7fc fc2b 	bl	80036a0 <HAL_DMA_Abort_IT>
 8006e4a:	1e03      	subs	r3, r0, #0
 8006e4c:	d005      	beq.n	8006e5a <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e52:	2240      	movs	r2, #64	; 0x40
 8006e54:	431a      	orrs	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d016      	beq.n	8006e90 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e66:	4a0d      	ldr	r2, [pc, #52]	; (8006e9c <HAL_SPI_IRQHandler+0x1f8>)
 8006e68:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e6e:	0018      	movs	r0, r3
 8006e70:	f7fc fc16 	bl	80036a0 <HAL_DMA_Abort_IT>
 8006e74:	1e03      	subs	r3, r0, #0
 8006e76:	d00b      	beq.n	8006e90 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e7c:	2240      	movs	r2, #64	; 0x40
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006e84:	e004      	b.n	8006e90 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	0018      	movs	r0, r3
 8006e8a:	f000 f809 	bl	8006ea0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006e8e:	e000      	b.n	8006e92 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8006e90:	46c0      	nop			; (mov r8, r8)
    return;
 8006e92:	46c0      	nop			; (mov r8, r8)
 8006e94:	46c0      	nop			; (mov r8, r8)
  }
}
 8006e96:	46bd      	mov	sp, r7
 8006e98:	b008      	add	sp, #32
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	08006eb1 	.word	0x08006eb1

08006ea0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006ea8:	46c0      	nop			; (mov r8, r8)
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	b002      	add	sp, #8
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ebc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2246      	movs	r2, #70	; 0x46
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	0018      	movs	r0, r3
 8006ed0:	f7ff ffe6 	bl	8006ea0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ed4:	46c0      	nop			; (mov r8, r8)
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	b004      	add	sp, #16
 8006eda:	bd80      	pop	{r7, pc}

08006edc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b088      	sub	sp, #32
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	603b      	str	r3, [r7, #0]
 8006ee8:	1dfb      	adds	r3, r7, #7
 8006eea:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006eec:	f7fb ffd0 	bl	8002e90 <HAL_GetTick>
 8006ef0:	0002      	movs	r2, r0
 8006ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef4:	1a9b      	subs	r3, r3, r2
 8006ef6:	683a      	ldr	r2, [r7, #0]
 8006ef8:	18d3      	adds	r3, r2, r3
 8006efa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006efc:	f7fb ffc8 	bl	8002e90 <HAL_GetTick>
 8006f00:	0003      	movs	r3, r0
 8006f02:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f04:	4b3a      	ldr	r3, [pc, #232]	; (8006ff0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	015b      	lsls	r3, r3, #5
 8006f0a:	0d1b      	lsrs	r3, r3, #20
 8006f0c:	69fa      	ldr	r2, [r7, #28]
 8006f0e:	4353      	muls	r3, r2
 8006f10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f12:	e058      	b.n	8006fc6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	3301      	adds	r3, #1
 8006f18:	d055      	beq.n	8006fc6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f1a:	f7fb ffb9 	bl	8002e90 <HAL_GetTick>
 8006f1e:	0002      	movs	r2, r0
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	69fa      	ldr	r2, [r7, #28]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d902      	bls.n	8006f30 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d142      	bne.n	8006fb6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	685a      	ldr	r2, [r3, #4]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	21e0      	movs	r1, #224	; 0xe0
 8006f3c:	438a      	bics	r2, r1
 8006f3e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	685a      	ldr	r2, [r3, #4]
 8006f44:	2382      	movs	r3, #130	; 0x82
 8006f46:	005b      	lsls	r3, r3, #1
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d113      	bne.n	8006f74 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	2380      	movs	r3, #128	; 0x80
 8006f52:	021b      	lsls	r3, r3, #8
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d005      	beq.n	8006f64 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	689a      	ldr	r2, [r3, #8]
 8006f5c:	2380      	movs	r3, #128	; 0x80
 8006f5e:	00db      	lsls	r3, r3, #3
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d107      	bne.n	8006f74 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2140      	movs	r1, #64	; 0x40
 8006f70:	438a      	bics	r2, r1
 8006f72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f78:	2380      	movs	r3, #128	; 0x80
 8006f7a:	019b      	lsls	r3, r3, #6
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d110      	bne.n	8006fa2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	491a      	ldr	r1, [pc, #104]	; (8006ff4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006f8c:	400a      	ands	r2, r1
 8006f8e:	601a      	str	r2, [r3, #0]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2180      	movs	r1, #128	; 0x80
 8006f9c:	0189      	lsls	r1, r1, #6
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	225d      	movs	r2, #93	; 0x5d
 8006fa6:	2101      	movs	r1, #1
 8006fa8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	225c      	movs	r2, #92	; 0x5c
 8006fae:	2100      	movs	r1, #0
 8006fb0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e017      	b.n	8006fe6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d101      	bne.n	8006fc0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	4013      	ands	r3, r2
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	425a      	negs	r2, r3
 8006fd6:	4153      	adcs	r3, r2
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	001a      	movs	r2, r3
 8006fdc:	1dfb      	adds	r3, r7, #7
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d197      	bne.n	8006f14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	0018      	movs	r0, r3
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	b008      	add	sp, #32
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	46c0      	nop			; (mov r8, r8)
 8006ff0:	20003134 	.word	0x20003134
 8006ff4:	ffffdfff 	.word	0xffffdfff

08006ff8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b088      	sub	sp, #32
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
 8007004:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007006:	f7fb ff43 	bl	8002e90 <HAL_GetTick>
 800700a:	0002      	movs	r2, r0
 800700c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700e:	1a9b      	subs	r3, r3, r2
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	18d3      	adds	r3, r2, r3
 8007014:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007016:	f7fb ff3b 	bl	8002e90 <HAL_GetTick>
 800701a:	0003      	movs	r3, r0
 800701c:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800701e:	4b3f      	ldr	r3, [pc, #252]	; (800711c <SPI_WaitFifoStateUntilTimeout+0x124>)
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	0013      	movs	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	189b      	adds	r3, r3, r2
 8007028:	00da      	lsls	r2, r3, #3
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	0d1b      	lsrs	r3, r3, #20
 800702e:	69fa      	ldr	r2, [r7, #28]
 8007030:	4353      	muls	r3, r2
 8007032:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8007034:	e064      	b.n	8007100 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	23c0      	movs	r3, #192	; 0xc0
 800703a:	00db      	lsls	r3, r3, #3
 800703c:	429a      	cmp	r2, r3
 800703e:	d106      	bne.n	800704e <SPI_WaitFifoStateUntilTimeout+0x56>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d103      	bne.n	800704e <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	330c      	adds	r3, #12
 800704c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	3301      	adds	r3, #1
 8007052:	d055      	beq.n	8007100 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007054:	f7fb ff1c 	bl	8002e90 <HAL_GetTick>
 8007058:	0002      	movs	r2, r0
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	69fa      	ldr	r2, [r7, #28]
 8007060:	429a      	cmp	r2, r3
 8007062:	d902      	bls.n	800706a <SPI_WaitFifoStateUntilTimeout+0x72>
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d142      	bne.n	80070f0 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	21e0      	movs	r1, #224	; 0xe0
 8007076:	438a      	bics	r2, r1
 8007078:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	685a      	ldr	r2, [r3, #4]
 800707e:	2382      	movs	r3, #130	; 0x82
 8007080:	005b      	lsls	r3, r3, #1
 8007082:	429a      	cmp	r2, r3
 8007084:	d113      	bne.n	80070ae <SPI_WaitFifoStateUntilTimeout+0xb6>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	689a      	ldr	r2, [r3, #8]
 800708a:	2380      	movs	r3, #128	; 0x80
 800708c:	021b      	lsls	r3, r3, #8
 800708e:	429a      	cmp	r2, r3
 8007090:	d005      	beq.n	800709e <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	689a      	ldr	r2, [r3, #8]
 8007096:	2380      	movs	r3, #128	; 0x80
 8007098:	00db      	lsls	r3, r3, #3
 800709a:	429a      	cmp	r2, r3
 800709c:	d107      	bne.n	80070ae <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2140      	movs	r1, #64	; 0x40
 80070aa:	438a      	bics	r2, r1
 80070ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070b2:	2380      	movs	r3, #128	; 0x80
 80070b4:	019b      	lsls	r3, r3, #6
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d110      	bne.n	80070dc <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4916      	ldr	r1, [pc, #88]	; (8007120 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80070c6:	400a      	ands	r2, r1
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2180      	movs	r1, #128	; 0x80
 80070d6:	0189      	lsls	r1, r1, #6
 80070d8:	430a      	orrs	r2, r1
 80070da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	225d      	movs	r2, #93	; 0x5d
 80070e0:	2101      	movs	r1, #1
 80070e2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	225c      	movs	r2, #92	; 0x5c
 80070e8:	2100      	movs	r1, #0
 80070ea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e010      	b.n	8007112 <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 80070f6:	2300      	movs	r3, #0
 80070f8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	3b01      	subs	r3, #1
 80070fe:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	4013      	ands	r3, r2
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	429a      	cmp	r2, r3
 800710e:	d192      	bne.n	8007036 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	0018      	movs	r0, r3
 8007114:	46bd      	mov	sp, r7
 8007116:	b008      	add	sp, #32
 8007118:	bd80      	pop	{r7, pc}
 800711a:	46c0      	nop			; (mov r8, r8)
 800711c:	20003134 	.word	0x20003134
 8007120:	ffffdfff 	.word	0xffffdfff

08007124 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af02      	add	r7, sp, #8
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	685a      	ldr	r2, [r3, #4]
 8007134:	2382      	movs	r3, #130	; 0x82
 8007136:	005b      	lsls	r3, r3, #1
 8007138:	429a      	cmp	r2, r3
 800713a:	d113      	bne.n	8007164 <SPI_EndRxTransaction+0x40>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	689a      	ldr	r2, [r3, #8]
 8007140:	2380      	movs	r3, #128	; 0x80
 8007142:	021b      	lsls	r3, r3, #8
 8007144:	429a      	cmp	r2, r3
 8007146:	d005      	beq.n	8007154 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	689a      	ldr	r2, [r3, #8]
 800714c:	2380      	movs	r3, #128	; 0x80
 800714e:	00db      	lsls	r3, r3, #3
 8007150:	429a      	cmp	r2, r3
 8007152:	d107      	bne.n	8007164 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2140      	movs	r1, #64	; 0x40
 8007160:	438a      	bics	r2, r1
 8007162:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	0013      	movs	r3, r2
 800716e:	2200      	movs	r2, #0
 8007170:	2180      	movs	r1, #128	; 0x80
 8007172:	f7ff feb3 	bl	8006edc <SPI_WaitFlagStateUntilTimeout>
 8007176:	1e03      	subs	r3, r0, #0
 8007178:	d007      	beq.n	800718a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800717e:	2220      	movs	r2, #32
 8007180:	431a      	orrs	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e026      	b.n	80071d8 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	2382      	movs	r3, #130	; 0x82
 8007190:	005b      	lsls	r3, r3, #1
 8007192:	429a      	cmp	r2, r3
 8007194:	d11f      	bne.n	80071d6 <SPI_EndRxTransaction+0xb2>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	689a      	ldr	r2, [r3, #8]
 800719a:	2380      	movs	r3, #128	; 0x80
 800719c:	021b      	lsls	r3, r3, #8
 800719e:	429a      	cmp	r2, r3
 80071a0:	d005      	beq.n	80071ae <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	689a      	ldr	r2, [r3, #8]
 80071a6:	2380      	movs	r3, #128	; 0x80
 80071a8:	00db      	lsls	r3, r3, #3
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d113      	bne.n	80071d6 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	23c0      	movs	r3, #192	; 0xc0
 80071b2:	00d9      	lsls	r1, r3, #3
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	0013      	movs	r3, r2
 80071bc:	2200      	movs	r2, #0
 80071be:	f7ff ff1b 	bl	8006ff8 <SPI_WaitFifoStateUntilTimeout>
 80071c2:	1e03      	subs	r3, r0, #0
 80071c4:	d007      	beq.n	80071d6 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071ca:	2220      	movs	r2, #32
 80071cc:	431a      	orrs	r2, r3
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e000      	b.n	80071d8 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	0018      	movs	r0, r3
 80071da:	46bd      	mov	sp, r7
 80071dc:	b004      	add	sp, #16
 80071de:	bd80      	pop	{r7, pc}

080071e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af02      	add	r7, sp, #8
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	23c0      	movs	r3, #192	; 0xc0
 80071f0:	0159      	lsls	r1, r3, #5
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	0013      	movs	r3, r2
 80071fa:	2200      	movs	r2, #0
 80071fc:	f7ff fefc 	bl	8006ff8 <SPI_WaitFifoStateUntilTimeout>
 8007200:	1e03      	subs	r3, r0, #0
 8007202:	d007      	beq.n	8007214 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007208:	2220      	movs	r2, #32
 800720a:	431a      	orrs	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e027      	b.n	8007264 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007214:	68ba      	ldr	r2, [r7, #8]
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	0013      	movs	r3, r2
 800721e:	2200      	movs	r2, #0
 8007220:	2180      	movs	r1, #128	; 0x80
 8007222:	f7ff fe5b 	bl	8006edc <SPI_WaitFlagStateUntilTimeout>
 8007226:	1e03      	subs	r3, r0, #0
 8007228:	d007      	beq.n	800723a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800722e:	2220      	movs	r2, #32
 8007230:	431a      	orrs	r2, r3
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e014      	b.n	8007264 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	23c0      	movs	r3, #192	; 0xc0
 800723e:	00d9      	lsls	r1, r3, #3
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	0013      	movs	r3, r2
 8007248:	2200      	movs	r2, #0
 800724a:	f7ff fed5 	bl	8006ff8 <SPI_WaitFifoStateUntilTimeout>
 800724e:	1e03      	subs	r3, r0, #0
 8007250:	d007      	beq.n	8007262 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007256:	2220      	movs	r2, #32
 8007258:	431a      	orrs	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e000      	b.n	8007264 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	0018      	movs	r0, r3
 8007266:	46bd      	mov	sp, r7
 8007268:	b004      	add	sp, #16
 800726a:	bd80      	pop	{r7, pc}

0800726c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e04a      	b.n	8007314 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	223d      	movs	r2, #61	; 0x3d
 8007282:	5c9b      	ldrb	r3, [r3, r2]
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d107      	bne.n	800729a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	223c      	movs	r2, #60	; 0x3c
 800728e:	2100      	movs	r1, #0
 8007290:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	0018      	movs	r0, r3
 8007296:	f7fb fb6f 	bl	8002978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	223d      	movs	r2, #61	; 0x3d
 800729e:	2102      	movs	r1, #2
 80072a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	3304      	adds	r3, #4
 80072aa:	0019      	movs	r1, r3
 80072ac:	0010      	movs	r0, r2
 80072ae:	f000 fb35 	bl	800791c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2248      	movs	r2, #72	; 0x48
 80072b6:	2101      	movs	r1, #1
 80072b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	223e      	movs	r2, #62	; 0x3e
 80072be:	2101      	movs	r1, #1
 80072c0:	5499      	strb	r1, [r3, r2]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	223f      	movs	r2, #63	; 0x3f
 80072c6:	2101      	movs	r1, #1
 80072c8:	5499      	strb	r1, [r3, r2]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2240      	movs	r2, #64	; 0x40
 80072ce:	2101      	movs	r1, #1
 80072d0:	5499      	strb	r1, [r3, r2]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2241      	movs	r2, #65	; 0x41
 80072d6:	2101      	movs	r1, #1
 80072d8:	5499      	strb	r1, [r3, r2]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2242      	movs	r2, #66	; 0x42
 80072de:	2101      	movs	r1, #1
 80072e0:	5499      	strb	r1, [r3, r2]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2243      	movs	r2, #67	; 0x43
 80072e6:	2101      	movs	r1, #1
 80072e8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2244      	movs	r2, #68	; 0x44
 80072ee:	2101      	movs	r1, #1
 80072f0:	5499      	strb	r1, [r3, r2]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2245      	movs	r2, #69	; 0x45
 80072f6:	2101      	movs	r1, #1
 80072f8:	5499      	strb	r1, [r3, r2]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2246      	movs	r2, #70	; 0x46
 80072fe:	2101      	movs	r1, #1
 8007300:	5499      	strb	r1, [r3, r2]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2247      	movs	r2, #71	; 0x47
 8007306:	2101      	movs	r1, #1
 8007308:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	223d      	movs	r2, #61	; 0x3d
 800730e:	2101      	movs	r1, #1
 8007310:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	0018      	movs	r0, r3
 8007316:	46bd      	mov	sp, r7
 8007318:	b002      	add	sp, #8
 800731a:	bd80      	pop	{r7, pc}

0800731c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d101      	bne.n	800732e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e04a      	b.n	80073c4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	223d      	movs	r2, #61	; 0x3d
 8007332:	5c9b      	ldrb	r3, [r3, r2]
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b00      	cmp	r3, #0
 8007338:	d107      	bne.n	800734a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	223c      	movs	r2, #60	; 0x3c
 800733e:	2100      	movs	r1, #0
 8007340:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	0018      	movs	r0, r3
 8007346:	f000 f841 	bl	80073cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	223d      	movs	r2, #61	; 0x3d
 800734e:	2102      	movs	r1, #2
 8007350:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	3304      	adds	r3, #4
 800735a:	0019      	movs	r1, r3
 800735c:	0010      	movs	r0, r2
 800735e:	f000 fadd 	bl	800791c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2248      	movs	r2, #72	; 0x48
 8007366:	2101      	movs	r1, #1
 8007368:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	223e      	movs	r2, #62	; 0x3e
 800736e:	2101      	movs	r1, #1
 8007370:	5499      	strb	r1, [r3, r2]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	223f      	movs	r2, #63	; 0x3f
 8007376:	2101      	movs	r1, #1
 8007378:	5499      	strb	r1, [r3, r2]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2240      	movs	r2, #64	; 0x40
 800737e:	2101      	movs	r1, #1
 8007380:	5499      	strb	r1, [r3, r2]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2241      	movs	r2, #65	; 0x41
 8007386:	2101      	movs	r1, #1
 8007388:	5499      	strb	r1, [r3, r2]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2242      	movs	r2, #66	; 0x42
 800738e:	2101      	movs	r1, #1
 8007390:	5499      	strb	r1, [r3, r2]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2243      	movs	r2, #67	; 0x43
 8007396:	2101      	movs	r1, #1
 8007398:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2244      	movs	r2, #68	; 0x44
 800739e:	2101      	movs	r1, #1
 80073a0:	5499      	strb	r1, [r3, r2]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2245      	movs	r2, #69	; 0x45
 80073a6:	2101      	movs	r1, #1
 80073a8:	5499      	strb	r1, [r3, r2]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2246      	movs	r2, #70	; 0x46
 80073ae:	2101      	movs	r1, #1
 80073b0:	5499      	strb	r1, [r3, r2]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2247      	movs	r2, #71	; 0x47
 80073b6:	2101      	movs	r1, #1
 80073b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	223d      	movs	r2, #61	; 0x3d
 80073be:	2101      	movs	r1, #1
 80073c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	0018      	movs	r0, r3
 80073c6:	46bd      	mov	sp, r7
 80073c8:	b002      	add	sp, #8
 80073ca:	bd80      	pop	{r7, pc}

080073cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80073d4:	46c0      	nop			; (mov r8, r8)
 80073d6:	46bd      	mov	sp, r7
 80073d8:	b002      	add	sp, #8
 80073da:	bd80      	pop	{r7, pc}

080073dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d108      	bne.n	80073fe <HAL_TIM_PWM_Start+0x22>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	223e      	movs	r2, #62	; 0x3e
 80073f0:	5c9b      	ldrb	r3, [r3, r2]
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	3b01      	subs	r3, #1
 80073f6:	1e5a      	subs	r2, r3, #1
 80073f8:	4193      	sbcs	r3, r2
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	e037      	b.n	800746e <HAL_TIM_PWM_Start+0x92>
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2b04      	cmp	r3, #4
 8007402:	d108      	bne.n	8007416 <HAL_TIM_PWM_Start+0x3a>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	223f      	movs	r2, #63	; 0x3f
 8007408:	5c9b      	ldrb	r3, [r3, r2]
 800740a:	b2db      	uxtb	r3, r3
 800740c:	3b01      	subs	r3, #1
 800740e:	1e5a      	subs	r2, r3, #1
 8007410:	4193      	sbcs	r3, r2
 8007412:	b2db      	uxtb	r3, r3
 8007414:	e02b      	b.n	800746e <HAL_TIM_PWM_Start+0x92>
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2b08      	cmp	r3, #8
 800741a:	d108      	bne.n	800742e <HAL_TIM_PWM_Start+0x52>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2240      	movs	r2, #64	; 0x40
 8007420:	5c9b      	ldrb	r3, [r3, r2]
 8007422:	b2db      	uxtb	r3, r3
 8007424:	3b01      	subs	r3, #1
 8007426:	1e5a      	subs	r2, r3, #1
 8007428:	4193      	sbcs	r3, r2
 800742a:	b2db      	uxtb	r3, r3
 800742c:	e01f      	b.n	800746e <HAL_TIM_PWM_Start+0x92>
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2b0c      	cmp	r3, #12
 8007432:	d108      	bne.n	8007446 <HAL_TIM_PWM_Start+0x6a>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2241      	movs	r2, #65	; 0x41
 8007438:	5c9b      	ldrb	r3, [r3, r2]
 800743a:	b2db      	uxtb	r3, r3
 800743c:	3b01      	subs	r3, #1
 800743e:	1e5a      	subs	r2, r3, #1
 8007440:	4193      	sbcs	r3, r2
 8007442:	b2db      	uxtb	r3, r3
 8007444:	e013      	b.n	800746e <HAL_TIM_PWM_Start+0x92>
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2b10      	cmp	r3, #16
 800744a:	d108      	bne.n	800745e <HAL_TIM_PWM_Start+0x82>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2242      	movs	r2, #66	; 0x42
 8007450:	5c9b      	ldrb	r3, [r3, r2]
 8007452:	b2db      	uxtb	r3, r3
 8007454:	3b01      	subs	r3, #1
 8007456:	1e5a      	subs	r2, r3, #1
 8007458:	4193      	sbcs	r3, r2
 800745a:	b2db      	uxtb	r3, r3
 800745c:	e007      	b.n	800746e <HAL_TIM_PWM_Start+0x92>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2243      	movs	r2, #67	; 0x43
 8007462:	5c9b      	ldrb	r3, [r3, r2]
 8007464:	b2db      	uxtb	r3, r3
 8007466:	3b01      	subs	r3, #1
 8007468:	1e5a      	subs	r2, r3, #1
 800746a:	4193      	sbcs	r3, r2
 800746c:	b2db      	uxtb	r3, r3
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e08b      	b.n	800758e <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d104      	bne.n	8007486 <HAL_TIM_PWM_Start+0xaa>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	223e      	movs	r2, #62	; 0x3e
 8007480:	2102      	movs	r1, #2
 8007482:	5499      	strb	r1, [r3, r2]
 8007484:	e023      	b.n	80074ce <HAL_TIM_PWM_Start+0xf2>
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b04      	cmp	r3, #4
 800748a:	d104      	bne.n	8007496 <HAL_TIM_PWM_Start+0xba>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	223f      	movs	r2, #63	; 0x3f
 8007490:	2102      	movs	r1, #2
 8007492:	5499      	strb	r1, [r3, r2]
 8007494:	e01b      	b.n	80074ce <HAL_TIM_PWM_Start+0xf2>
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	2b08      	cmp	r3, #8
 800749a:	d104      	bne.n	80074a6 <HAL_TIM_PWM_Start+0xca>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2240      	movs	r2, #64	; 0x40
 80074a0:	2102      	movs	r1, #2
 80074a2:	5499      	strb	r1, [r3, r2]
 80074a4:	e013      	b.n	80074ce <HAL_TIM_PWM_Start+0xf2>
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2b0c      	cmp	r3, #12
 80074aa:	d104      	bne.n	80074b6 <HAL_TIM_PWM_Start+0xda>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2241      	movs	r2, #65	; 0x41
 80074b0:	2102      	movs	r1, #2
 80074b2:	5499      	strb	r1, [r3, r2]
 80074b4:	e00b      	b.n	80074ce <HAL_TIM_PWM_Start+0xf2>
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2b10      	cmp	r3, #16
 80074ba:	d104      	bne.n	80074c6 <HAL_TIM_PWM_Start+0xea>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2242      	movs	r2, #66	; 0x42
 80074c0:	2102      	movs	r1, #2
 80074c2:	5499      	strb	r1, [r3, r2]
 80074c4:	e003      	b.n	80074ce <HAL_TIM_PWM_Start+0xf2>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2243      	movs	r2, #67	; 0x43
 80074ca:	2102      	movs	r1, #2
 80074cc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	2201      	movs	r2, #1
 80074d6:	0018      	movs	r0, r3
 80074d8:	f000 fe00 	bl	80080dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a2d      	ldr	r2, [pc, #180]	; (8007598 <HAL_TIM_PWM_Start+0x1bc>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d00e      	beq.n	8007504 <HAL_TIM_PWM_Start+0x128>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a2c      	ldr	r2, [pc, #176]	; (800759c <HAL_TIM_PWM_Start+0x1c0>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d009      	beq.n	8007504 <HAL_TIM_PWM_Start+0x128>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a2a      	ldr	r2, [pc, #168]	; (80075a0 <HAL_TIM_PWM_Start+0x1c4>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d004      	beq.n	8007504 <HAL_TIM_PWM_Start+0x128>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a29      	ldr	r2, [pc, #164]	; (80075a4 <HAL_TIM_PWM_Start+0x1c8>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d101      	bne.n	8007508 <HAL_TIM_PWM_Start+0x12c>
 8007504:	2301      	movs	r3, #1
 8007506:	e000      	b.n	800750a <HAL_TIM_PWM_Start+0x12e>
 8007508:	2300      	movs	r3, #0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d008      	beq.n	8007520 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2180      	movs	r1, #128	; 0x80
 800751a:	0209      	lsls	r1, r1, #8
 800751c:	430a      	orrs	r2, r1
 800751e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a1c      	ldr	r2, [pc, #112]	; (8007598 <HAL_TIM_PWM_Start+0x1bc>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d00f      	beq.n	800754a <HAL_TIM_PWM_Start+0x16e>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	2380      	movs	r3, #128	; 0x80
 8007530:	05db      	lsls	r3, r3, #23
 8007532:	429a      	cmp	r2, r3
 8007534:	d009      	beq.n	800754a <HAL_TIM_PWM_Start+0x16e>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a1b      	ldr	r2, [pc, #108]	; (80075a8 <HAL_TIM_PWM_Start+0x1cc>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d004      	beq.n	800754a <HAL_TIM_PWM_Start+0x16e>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a15      	ldr	r2, [pc, #84]	; (800759c <HAL_TIM_PWM_Start+0x1c0>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d116      	bne.n	8007578 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	4a16      	ldr	r2, [pc, #88]	; (80075ac <HAL_TIM_PWM_Start+0x1d0>)
 8007552:	4013      	ands	r3, r2
 8007554:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2b06      	cmp	r3, #6
 800755a:	d016      	beq.n	800758a <HAL_TIM_PWM_Start+0x1ae>
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	2380      	movs	r3, #128	; 0x80
 8007560:	025b      	lsls	r3, r3, #9
 8007562:	429a      	cmp	r2, r3
 8007564:	d011      	beq.n	800758a <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2101      	movs	r1, #1
 8007572:	430a      	orrs	r2, r1
 8007574:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007576:	e008      	b.n	800758a <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2101      	movs	r1, #1
 8007584:	430a      	orrs	r2, r1
 8007586:	601a      	str	r2, [r3, #0]
 8007588:	e000      	b.n	800758c <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800758a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	0018      	movs	r0, r3
 8007590:	46bd      	mov	sp, r7
 8007592:	b004      	add	sp, #16
 8007594:	bd80      	pop	{r7, pc}
 8007596:	46c0      	nop			; (mov r8, r8)
 8007598:	40012c00 	.word	0x40012c00
 800759c:	40014000 	.word	0x40014000
 80075a0:	40014400 	.word	0x40014400
 80075a4:	40014800 	.word	0x40014800
 80075a8:	40000400 	.word	0x40000400
 80075ac:	00010007 	.word	0x00010007

080075b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	223c      	movs	r2, #60	; 0x3c
 80075c0:	5c9b      	ldrb	r3, [r3, r2]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d101      	bne.n	80075ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80075c6:	2302      	movs	r3, #2
 80075c8:	e0df      	b.n	800778a <HAL_TIM_PWM_ConfigChannel+0x1da>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	223c      	movs	r2, #60	; 0x3c
 80075ce:	2101      	movs	r1, #1
 80075d0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2b14      	cmp	r3, #20
 80075d6:	d900      	bls.n	80075da <HAL_TIM_PWM_ConfigChannel+0x2a>
 80075d8:	e0d1      	b.n	800777e <HAL_TIM_PWM_ConfigChannel+0x1ce>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	009a      	lsls	r2, r3, #2
 80075de:	4b6d      	ldr	r3, [pc, #436]	; (8007794 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 80075e0:	18d3      	adds	r3, r2, r3
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	0011      	movs	r1, r2
 80075ee:	0018      	movs	r0, r3
 80075f0:	f000 fa14 	bl	8007a1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	699a      	ldr	r2, [r3, #24]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2108      	movs	r1, #8
 8007600:	430a      	orrs	r2, r1
 8007602:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	699a      	ldr	r2, [r3, #24]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2104      	movs	r1, #4
 8007610:	438a      	bics	r2, r1
 8007612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6999      	ldr	r1, [r3, #24]
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	691a      	ldr	r2, [r3, #16]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	430a      	orrs	r2, r1
 8007624:	619a      	str	r2, [r3, #24]
      break;
 8007626:	e0ab      	b.n	8007780 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	0011      	movs	r1, r2
 8007630:	0018      	movs	r0, r3
 8007632:	f000 fa7d 	bl	8007b30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	699a      	ldr	r2, [r3, #24]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2180      	movs	r1, #128	; 0x80
 8007642:	0109      	lsls	r1, r1, #4
 8007644:	430a      	orrs	r2, r1
 8007646:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	699a      	ldr	r2, [r3, #24]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4951      	ldr	r1, [pc, #324]	; (8007798 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8007654:	400a      	ands	r2, r1
 8007656:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6999      	ldr	r1, [r3, #24]
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	021a      	lsls	r2, r3, #8
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	430a      	orrs	r2, r1
 800766a:	619a      	str	r2, [r3, #24]
      break;
 800766c:	e088      	b.n	8007780 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	0011      	movs	r1, r2
 8007676:	0018      	movs	r0, r3
 8007678:	f000 fade 	bl	8007c38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	69da      	ldr	r2, [r3, #28]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2108      	movs	r1, #8
 8007688:	430a      	orrs	r2, r1
 800768a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	69da      	ldr	r2, [r3, #28]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2104      	movs	r1, #4
 8007698:	438a      	bics	r2, r1
 800769a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	69d9      	ldr	r1, [r3, #28]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	691a      	ldr	r2, [r3, #16]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	430a      	orrs	r2, r1
 80076ac:	61da      	str	r2, [r3, #28]
      break;
 80076ae:	e067      	b.n	8007780 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68ba      	ldr	r2, [r7, #8]
 80076b6:	0011      	movs	r1, r2
 80076b8:	0018      	movs	r0, r3
 80076ba:	f000 fb45 	bl	8007d48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	69da      	ldr	r2, [r3, #28]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2180      	movs	r1, #128	; 0x80
 80076ca:	0109      	lsls	r1, r1, #4
 80076cc:	430a      	orrs	r2, r1
 80076ce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	69da      	ldr	r2, [r3, #28]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	492f      	ldr	r1, [pc, #188]	; (8007798 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80076dc:	400a      	ands	r2, r1
 80076de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	69d9      	ldr	r1, [r3, #28]
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	021a      	lsls	r2, r3, #8
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	430a      	orrs	r2, r1
 80076f2:	61da      	str	r2, [r3, #28]
      break;
 80076f4:	e044      	b.n	8007780 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	0011      	movs	r1, r2
 80076fe:	0018      	movs	r0, r3
 8007700:	f000 fb8c 	bl	8007e1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2108      	movs	r1, #8
 8007710:	430a      	orrs	r2, r1
 8007712:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2104      	movs	r1, #4
 8007720:	438a      	bics	r2, r1
 8007722:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	691a      	ldr	r2, [r3, #16]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	430a      	orrs	r2, r1
 8007734:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007736:	e023      	b.n	8007780 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	0011      	movs	r1, r2
 8007740:	0018      	movs	r0, r3
 8007742:	f000 fbcb 	bl	8007edc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2180      	movs	r1, #128	; 0x80
 8007752:	0109      	lsls	r1, r1, #4
 8007754:	430a      	orrs	r2, r1
 8007756:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	490d      	ldr	r1, [pc, #52]	; (8007798 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8007764:	400a      	ands	r2, r1
 8007766:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	021a      	lsls	r2, r3, #8
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	430a      	orrs	r2, r1
 800777a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800777c:	e000      	b.n	8007780 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 800777e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	223c      	movs	r2, #60	; 0x3c
 8007784:	2100      	movs	r1, #0
 8007786:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	0018      	movs	r0, r3
 800778c:	46bd      	mov	sp, r7
 800778e:	b004      	add	sp, #16
 8007790:	bd80      	pop	{r7, pc}
 8007792:	46c0      	nop			; (mov r8, r8)
 8007794:	08009a04 	.word	0x08009a04
 8007798:	fffffbff 	.word	0xfffffbff

0800779c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	223c      	movs	r2, #60	; 0x3c
 80077aa:	5c9b      	ldrb	r3, [r3, r2]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d101      	bne.n	80077b4 <HAL_TIM_ConfigClockSource+0x18>
 80077b0:	2302      	movs	r3, #2
 80077b2:	e0ab      	b.n	800790c <HAL_TIM_ConfigClockSource+0x170>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	223c      	movs	r2, #60	; 0x3c
 80077b8:	2101      	movs	r1, #1
 80077ba:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	223d      	movs	r2, #61	; 0x3d
 80077c0:	2102      	movs	r1, #2
 80077c2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	4a51      	ldr	r2, [pc, #324]	; (8007914 <HAL_TIM_ConfigClockSource+0x178>)
 80077d0:	4013      	ands	r3, r2
 80077d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	4a50      	ldr	r2, [pc, #320]	; (8007918 <HAL_TIM_ConfigClockSource+0x17c>)
 80077d8:	4013      	ands	r3, r2
 80077da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2b40      	cmp	r3, #64	; 0x40
 80077ea:	d100      	bne.n	80077ee <HAL_TIM_ConfigClockSource+0x52>
 80077ec:	e06b      	b.n	80078c6 <HAL_TIM_ConfigClockSource+0x12a>
 80077ee:	d80e      	bhi.n	800780e <HAL_TIM_ConfigClockSource+0x72>
 80077f0:	2b10      	cmp	r3, #16
 80077f2:	d100      	bne.n	80077f6 <HAL_TIM_ConfigClockSource+0x5a>
 80077f4:	e077      	b.n	80078e6 <HAL_TIM_ConfigClockSource+0x14a>
 80077f6:	d803      	bhi.n	8007800 <HAL_TIM_ConfigClockSource+0x64>
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d100      	bne.n	80077fe <HAL_TIM_ConfigClockSource+0x62>
 80077fc:	e073      	b.n	80078e6 <HAL_TIM_ConfigClockSource+0x14a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80077fe:	e07c      	b.n	80078fa <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007800:	2b20      	cmp	r3, #32
 8007802:	d100      	bne.n	8007806 <HAL_TIM_ConfigClockSource+0x6a>
 8007804:	e06f      	b.n	80078e6 <HAL_TIM_ConfigClockSource+0x14a>
 8007806:	2b30      	cmp	r3, #48	; 0x30
 8007808:	d100      	bne.n	800780c <HAL_TIM_ConfigClockSource+0x70>
 800780a:	e06c      	b.n	80078e6 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 800780c:	e075      	b.n	80078fa <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800780e:	2b70      	cmp	r3, #112	; 0x70
 8007810:	d00e      	beq.n	8007830 <HAL_TIM_ConfigClockSource+0x94>
 8007812:	d804      	bhi.n	800781e <HAL_TIM_ConfigClockSource+0x82>
 8007814:	2b50      	cmp	r3, #80	; 0x50
 8007816:	d036      	beq.n	8007886 <HAL_TIM_ConfigClockSource+0xea>
 8007818:	2b60      	cmp	r3, #96	; 0x60
 800781a:	d044      	beq.n	80078a6 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 800781c:	e06d      	b.n	80078fa <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800781e:	2280      	movs	r2, #128	; 0x80
 8007820:	0152      	lsls	r2, r2, #5
 8007822:	4293      	cmp	r3, r2
 8007824:	d068      	beq.n	80078f8 <HAL_TIM_ConfigClockSource+0x15c>
 8007826:	2280      	movs	r2, #128	; 0x80
 8007828:	0192      	lsls	r2, r2, #6
 800782a:	4293      	cmp	r3, r2
 800782c:	d017      	beq.n	800785e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800782e:	e064      	b.n	80078fa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6818      	ldr	r0, [r3, #0]
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	6899      	ldr	r1, [r3, #8]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	685a      	ldr	r2, [r3, #4]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	f000 fc2c 	bl	800809c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2277      	movs	r2, #119	; 0x77
 8007850:	4313      	orrs	r3, r2
 8007852:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	609a      	str	r2, [r3, #8]
      break;
 800785c:	e04d      	b.n	80078fa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6818      	ldr	r0, [r3, #0]
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	6899      	ldr	r1, [r3, #8]
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	685a      	ldr	r2, [r3, #4]
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	f000 fc15 	bl	800809c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	689a      	ldr	r2, [r3, #8]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2180      	movs	r1, #128	; 0x80
 800787e:	01c9      	lsls	r1, r1, #7
 8007880:	430a      	orrs	r2, r1
 8007882:	609a      	str	r2, [r3, #8]
      break;
 8007884:	e039      	b.n	80078fa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6818      	ldr	r0, [r3, #0]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	6859      	ldr	r1, [r3, #4]
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	001a      	movs	r2, r3
 8007894:	f000 fb86 	bl	8007fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2150      	movs	r1, #80	; 0x50
 800789e:	0018      	movs	r0, r3
 80078a0:	f000 fbe0 	bl	8008064 <TIM_ITRx_SetConfig>
      break;
 80078a4:	e029      	b.n	80078fa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6818      	ldr	r0, [r3, #0]
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	6859      	ldr	r1, [r3, #4]
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	001a      	movs	r2, r3
 80078b4:	f000 fba4 	bl	8008000 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2160      	movs	r1, #96	; 0x60
 80078be:	0018      	movs	r0, r3
 80078c0:	f000 fbd0 	bl	8008064 <TIM_ITRx_SetConfig>
      break;
 80078c4:	e019      	b.n	80078fa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6818      	ldr	r0, [r3, #0]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	6859      	ldr	r1, [r3, #4]
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	001a      	movs	r2, r3
 80078d4:	f000 fb66 	bl	8007fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2140      	movs	r1, #64	; 0x40
 80078de:	0018      	movs	r0, r3
 80078e0:	f000 fbc0 	bl	8008064 <TIM_ITRx_SetConfig>
      break;
 80078e4:	e009      	b.n	80078fa <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	0019      	movs	r1, r3
 80078f0:	0010      	movs	r0, r2
 80078f2:	f000 fbb7 	bl	8008064 <TIM_ITRx_SetConfig>
        break;
 80078f6:	e000      	b.n	80078fa <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80078f8:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	223d      	movs	r2, #61	; 0x3d
 80078fe:	2101      	movs	r1, #1
 8007900:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	223c      	movs	r2, #60	; 0x3c
 8007906:	2100      	movs	r1, #0
 8007908:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	0018      	movs	r0, r3
 800790e:	46bd      	mov	sp, r7
 8007910:	b004      	add	sp, #16
 8007912:	bd80      	pop	{r7, pc}
 8007914:	ffceff88 	.word	0xffceff88
 8007918:	ffff00ff 	.word	0xffff00ff

0800791c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a34      	ldr	r2, [pc, #208]	; (8007a00 <TIM_Base_SetConfig+0xe4>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d008      	beq.n	8007946 <TIM_Base_SetConfig+0x2a>
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	2380      	movs	r3, #128	; 0x80
 8007938:	05db      	lsls	r3, r3, #23
 800793a:	429a      	cmp	r2, r3
 800793c:	d003      	beq.n	8007946 <TIM_Base_SetConfig+0x2a>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a30      	ldr	r2, [pc, #192]	; (8007a04 <TIM_Base_SetConfig+0xe8>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d108      	bne.n	8007958 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2270      	movs	r2, #112	; 0x70
 800794a:	4393      	bics	r3, r2
 800794c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	4313      	orrs	r3, r2
 8007956:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a29      	ldr	r2, [pc, #164]	; (8007a00 <TIM_Base_SetConfig+0xe4>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d018      	beq.n	8007992 <TIM_Base_SetConfig+0x76>
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	2380      	movs	r3, #128	; 0x80
 8007964:	05db      	lsls	r3, r3, #23
 8007966:	429a      	cmp	r2, r3
 8007968:	d013      	beq.n	8007992 <TIM_Base_SetConfig+0x76>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a25      	ldr	r2, [pc, #148]	; (8007a04 <TIM_Base_SetConfig+0xe8>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d00f      	beq.n	8007992 <TIM_Base_SetConfig+0x76>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a24      	ldr	r2, [pc, #144]	; (8007a08 <TIM_Base_SetConfig+0xec>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d00b      	beq.n	8007992 <TIM_Base_SetConfig+0x76>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a23      	ldr	r2, [pc, #140]	; (8007a0c <TIM_Base_SetConfig+0xf0>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d007      	beq.n	8007992 <TIM_Base_SetConfig+0x76>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a22      	ldr	r2, [pc, #136]	; (8007a10 <TIM_Base_SetConfig+0xf4>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d003      	beq.n	8007992 <TIM_Base_SetConfig+0x76>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a21      	ldr	r2, [pc, #132]	; (8007a14 <TIM_Base_SetConfig+0xf8>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d108      	bne.n	80079a4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	4a20      	ldr	r2, [pc, #128]	; (8007a18 <TIM_Base_SetConfig+0xfc>)
 8007996:	4013      	ands	r3, r2
 8007998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2280      	movs	r2, #128	; 0x80
 80079a8:	4393      	bics	r3, r2
 80079aa:	001a      	movs	r2, r3
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	695b      	ldr	r3, [r3, #20]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	689a      	ldr	r2, [r3, #8]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a0c      	ldr	r2, [pc, #48]	; (8007a00 <TIM_Base_SetConfig+0xe4>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d00b      	beq.n	80079ea <TIM_Base_SetConfig+0xce>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a0d      	ldr	r2, [pc, #52]	; (8007a0c <TIM_Base_SetConfig+0xf0>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d007      	beq.n	80079ea <TIM_Base_SetConfig+0xce>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a0c      	ldr	r2, [pc, #48]	; (8007a10 <TIM_Base_SetConfig+0xf4>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d003      	beq.n	80079ea <TIM_Base_SetConfig+0xce>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a0b      	ldr	r2, [pc, #44]	; (8007a14 <TIM_Base_SetConfig+0xf8>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d103      	bne.n	80079f2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	691a      	ldr	r2, [r3, #16]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2201      	movs	r2, #1
 80079f6:	615a      	str	r2, [r3, #20]
}
 80079f8:	46c0      	nop			; (mov r8, r8)
 80079fa:	46bd      	mov	sp, r7
 80079fc:	b004      	add	sp, #16
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	40012c00 	.word	0x40012c00
 8007a04:	40000400 	.word	0x40000400
 8007a08:	40002000 	.word	0x40002000
 8007a0c:	40014000 	.word	0x40014000
 8007a10:	40014400 	.word	0x40014400
 8007a14:	40014800 	.word	0x40014800
 8007a18:	fffffcff 	.word	0xfffffcff

08007a1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	4393      	bics	r3, r2
 8007a2e:	001a      	movs	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a1b      	ldr	r3, [r3, #32]
 8007a38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	699b      	ldr	r3, [r3, #24]
 8007a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	4a32      	ldr	r2, [pc, #200]	; (8007b14 <TIM_OC1_SetConfig+0xf8>)
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2203      	movs	r2, #3
 8007a52:	4393      	bics	r3, r2
 8007a54:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	2202      	movs	r2, #2
 8007a64:	4393      	bics	r3, r2
 8007a66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	697a      	ldr	r2, [r7, #20]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a28      	ldr	r2, [pc, #160]	; (8007b18 <TIM_OC1_SetConfig+0xfc>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d00b      	beq.n	8007a92 <TIM_OC1_SetConfig+0x76>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a27      	ldr	r2, [pc, #156]	; (8007b1c <TIM_OC1_SetConfig+0x100>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d007      	beq.n	8007a92 <TIM_OC1_SetConfig+0x76>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a26      	ldr	r2, [pc, #152]	; (8007b20 <TIM_OC1_SetConfig+0x104>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d003      	beq.n	8007a92 <TIM_OC1_SetConfig+0x76>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a25      	ldr	r2, [pc, #148]	; (8007b24 <TIM_OC1_SetConfig+0x108>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d10c      	bne.n	8007aac <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2208      	movs	r2, #8
 8007a96:	4393      	bics	r3, r2
 8007a98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	2204      	movs	r2, #4
 8007aa8:	4393      	bics	r3, r2
 8007aaa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a1a      	ldr	r2, [pc, #104]	; (8007b18 <TIM_OC1_SetConfig+0xfc>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d00b      	beq.n	8007acc <TIM_OC1_SetConfig+0xb0>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a19      	ldr	r2, [pc, #100]	; (8007b1c <TIM_OC1_SetConfig+0x100>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d007      	beq.n	8007acc <TIM_OC1_SetConfig+0xb0>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a18      	ldr	r2, [pc, #96]	; (8007b20 <TIM_OC1_SetConfig+0x104>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d003      	beq.n	8007acc <TIM_OC1_SetConfig+0xb0>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a17      	ldr	r2, [pc, #92]	; (8007b24 <TIM_OC1_SetConfig+0x108>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d111      	bne.n	8007af0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	4a16      	ldr	r2, [pc, #88]	; (8007b28 <TIM_OC1_SetConfig+0x10c>)
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	4a15      	ldr	r2, [pc, #84]	; (8007b2c <TIM_OC1_SetConfig+0x110>)
 8007ad8:	4013      	ands	r3, r2
 8007ada:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	695b      	ldr	r3, [r3, #20]
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	693a      	ldr	r2, [r7, #16]
 8007af4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	685a      	ldr	r2, [r3, #4]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	697a      	ldr	r2, [r7, #20]
 8007b08:	621a      	str	r2, [r3, #32]
}
 8007b0a:	46c0      	nop			; (mov r8, r8)
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	b006      	add	sp, #24
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	46c0      	nop			; (mov r8, r8)
 8007b14:	fffeff8f 	.word	0xfffeff8f
 8007b18:	40012c00 	.word	0x40012c00
 8007b1c:	40014000 	.word	0x40014000
 8007b20:	40014400 	.word	0x40014400
 8007b24:	40014800 	.word	0x40014800
 8007b28:	fffffeff 	.word	0xfffffeff
 8007b2c:	fffffdff 	.word	0xfffffdff

08007b30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a1b      	ldr	r3, [r3, #32]
 8007b3e:	2210      	movs	r2, #16
 8007b40:	4393      	bics	r3, r2
 8007b42:	001a      	movs	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a1b      	ldr	r3, [r3, #32]
 8007b4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	699b      	ldr	r3, [r3, #24]
 8007b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	4a2e      	ldr	r2, [pc, #184]	; (8007c18 <TIM_OC2_SetConfig+0xe8>)
 8007b5e:	4013      	ands	r3, r2
 8007b60:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	4a2d      	ldr	r2, [pc, #180]	; (8007c1c <TIM_OC2_SetConfig+0xec>)
 8007b66:	4013      	ands	r3, r2
 8007b68:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	021b      	lsls	r3, r3, #8
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	2220      	movs	r2, #32
 8007b7a:	4393      	bics	r3, r2
 8007b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	011b      	lsls	r3, r3, #4
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a24      	ldr	r2, [pc, #144]	; (8007c20 <TIM_OC2_SetConfig+0xf0>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d10d      	bne.n	8007bae <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	2280      	movs	r2, #128	; 0x80
 8007b96:	4393      	bics	r3, r2
 8007b98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	011b      	lsls	r3, r3, #4
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	2240      	movs	r2, #64	; 0x40
 8007baa:	4393      	bics	r3, r2
 8007bac:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a1b      	ldr	r2, [pc, #108]	; (8007c20 <TIM_OC2_SetConfig+0xf0>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d00b      	beq.n	8007bce <TIM_OC2_SetConfig+0x9e>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a1a      	ldr	r2, [pc, #104]	; (8007c24 <TIM_OC2_SetConfig+0xf4>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d007      	beq.n	8007bce <TIM_OC2_SetConfig+0x9e>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a19      	ldr	r2, [pc, #100]	; (8007c28 <TIM_OC2_SetConfig+0xf8>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d003      	beq.n	8007bce <TIM_OC2_SetConfig+0x9e>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a18      	ldr	r2, [pc, #96]	; (8007c2c <TIM_OC2_SetConfig+0xfc>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d113      	bne.n	8007bf6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	4a17      	ldr	r2, [pc, #92]	; (8007c30 <TIM_OC2_SetConfig+0x100>)
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	4a16      	ldr	r2, [pc, #88]	; (8007c34 <TIM_OC2_SetConfig+0x104>)
 8007bda:	4013      	ands	r3, r2
 8007bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	693a      	ldr	r2, [r7, #16]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	699b      	ldr	r3, [r3, #24]
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	685a      	ldr	r2, [r3, #4]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	621a      	str	r2, [r3, #32]
}
 8007c10:	46c0      	nop			; (mov r8, r8)
 8007c12:	46bd      	mov	sp, r7
 8007c14:	b006      	add	sp, #24
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	feff8fff 	.word	0xfeff8fff
 8007c1c:	fffffcff 	.word	0xfffffcff
 8007c20:	40012c00 	.word	0x40012c00
 8007c24:	40014000 	.word	0x40014000
 8007c28:	40014400 	.word	0x40014400
 8007c2c:	40014800 	.word	0x40014800
 8007c30:	fffffbff 	.word	0xfffffbff
 8007c34:	fffff7ff 	.word	0xfffff7ff

08007c38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	4a35      	ldr	r2, [pc, #212]	; (8007d1c <TIM_OC3_SetConfig+0xe4>)
 8007c48:	401a      	ands	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	4a2f      	ldr	r2, [pc, #188]	; (8007d20 <TIM_OC3_SetConfig+0xe8>)
 8007c64:	4013      	ands	r3, r2
 8007c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2203      	movs	r2, #3
 8007c6c:	4393      	bics	r3, r2
 8007c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	4a29      	ldr	r2, [pc, #164]	; (8007d24 <TIM_OC3_SetConfig+0xec>)
 8007c7e:	4013      	ands	r3, r2
 8007c80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	021b      	lsls	r3, r3, #8
 8007c88:	697a      	ldr	r2, [r7, #20]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a25      	ldr	r2, [pc, #148]	; (8007d28 <TIM_OC3_SetConfig+0xf0>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d10d      	bne.n	8007cb2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	4a24      	ldr	r2, [pc, #144]	; (8007d2c <TIM_OC3_SetConfig+0xf4>)
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	021b      	lsls	r3, r3, #8
 8007ca4:	697a      	ldr	r2, [r7, #20]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	4a20      	ldr	r2, [pc, #128]	; (8007d30 <TIM_OC3_SetConfig+0xf8>)
 8007cae:	4013      	ands	r3, r2
 8007cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a1c      	ldr	r2, [pc, #112]	; (8007d28 <TIM_OC3_SetConfig+0xf0>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d00b      	beq.n	8007cd2 <TIM_OC3_SetConfig+0x9a>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a1d      	ldr	r2, [pc, #116]	; (8007d34 <TIM_OC3_SetConfig+0xfc>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d007      	beq.n	8007cd2 <TIM_OC3_SetConfig+0x9a>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a1c      	ldr	r2, [pc, #112]	; (8007d38 <TIM_OC3_SetConfig+0x100>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d003      	beq.n	8007cd2 <TIM_OC3_SetConfig+0x9a>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a1b      	ldr	r2, [pc, #108]	; (8007d3c <TIM_OC3_SetConfig+0x104>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d113      	bne.n	8007cfa <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	4a1a      	ldr	r2, [pc, #104]	; (8007d40 <TIM_OC3_SetConfig+0x108>)
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	4a19      	ldr	r2, [pc, #100]	; (8007d44 <TIM_OC3_SetConfig+0x10c>)
 8007cde:	4013      	ands	r3, r2
 8007ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	011b      	lsls	r3, r3, #4
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	699b      	ldr	r3, [r3, #24]
 8007cf2:	011b      	lsls	r3, r3, #4
 8007cf4:	693a      	ldr	r2, [r7, #16]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	693a      	ldr	r2, [r7, #16]
 8007cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	685a      	ldr	r2, [r3, #4]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	697a      	ldr	r2, [r7, #20]
 8007d12:	621a      	str	r2, [r3, #32]
}
 8007d14:	46c0      	nop			; (mov r8, r8)
 8007d16:	46bd      	mov	sp, r7
 8007d18:	b006      	add	sp, #24
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	fffffeff 	.word	0xfffffeff
 8007d20:	fffeff8f 	.word	0xfffeff8f
 8007d24:	fffffdff 	.word	0xfffffdff
 8007d28:	40012c00 	.word	0x40012c00
 8007d2c:	fffff7ff 	.word	0xfffff7ff
 8007d30:	fffffbff 	.word	0xfffffbff
 8007d34:	40014000 	.word	0x40014000
 8007d38:	40014400 	.word	0x40014400
 8007d3c:	40014800 	.word	0x40014800
 8007d40:	ffffefff 	.word	0xffffefff
 8007d44:	ffffdfff 	.word	0xffffdfff

08007d48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	4a28      	ldr	r2, [pc, #160]	; (8007df8 <TIM_OC4_SetConfig+0xb0>)
 8007d58:	401a      	ands	r2, r3
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a1b      	ldr	r3, [r3, #32]
 8007d62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	69db      	ldr	r3, [r3, #28]
 8007d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	4a22      	ldr	r2, [pc, #136]	; (8007dfc <TIM_OC4_SetConfig+0xb4>)
 8007d74:	4013      	ands	r3, r2
 8007d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	4a21      	ldr	r2, [pc, #132]	; (8007e00 <TIM_OC4_SetConfig+0xb8>)
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	021b      	lsls	r3, r3, #8
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	4a1d      	ldr	r2, [pc, #116]	; (8007e04 <TIM_OC4_SetConfig+0xbc>)
 8007d90:	4013      	ands	r3, r2
 8007d92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	031b      	lsls	r3, r3, #12
 8007d9a:	693a      	ldr	r2, [r7, #16]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a19      	ldr	r2, [pc, #100]	; (8007e08 <TIM_OC4_SetConfig+0xc0>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d00b      	beq.n	8007dc0 <TIM_OC4_SetConfig+0x78>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a18      	ldr	r2, [pc, #96]	; (8007e0c <TIM_OC4_SetConfig+0xc4>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d007      	beq.n	8007dc0 <TIM_OC4_SetConfig+0x78>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a17      	ldr	r2, [pc, #92]	; (8007e10 <TIM_OC4_SetConfig+0xc8>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d003      	beq.n	8007dc0 <TIM_OC4_SetConfig+0x78>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a16      	ldr	r2, [pc, #88]	; (8007e14 <TIM_OC4_SetConfig+0xcc>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d109      	bne.n	8007dd4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	4a15      	ldr	r2, [pc, #84]	; (8007e18 <TIM_OC4_SetConfig+0xd0>)
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	695b      	ldr	r3, [r3, #20]
 8007dcc:	019b      	lsls	r3, r3, #6
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	693a      	ldr	r2, [r7, #16]
 8007dec:	621a      	str	r2, [r3, #32]
}
 8007dee:	46c0      	nop			; (mov r8, r8)
 8007df0:	46bd      	mov	sp, r7
 8007df2:	b006      	add	sp, #24
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	46c0      	nop			; (mov r8, r8)
 8007df8:	ffffefff 	.word	0xffffefff
 8007dfc:	feff8fff 	.word	0xfeff8fff
 8007e00:	fffffcff 	.word	0xfffffcff
 8007e04:	ffffdfff 	.word	0xffffdfff
 8007e08:	40012c00 	.word	0x40012c00
 8007e0c:	40014000 	.word	0x40014000
 8007e10:	40014400 	.word	0x40014400
 8007e14:	40014800 	.word	0x40014800
 8007e18:	ffffbfff 	.word	0xffffbfff

08007e1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b086      	sub	sp, #24
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a1b      	ldr	r3, [r3, #32]
 8007e2a:	4a25      	ldr	r2, [pc, #148]	; (8007ec0 <TIM_OC5_SetConfig+0xa4>)
 8007e2c:	401a      	ands	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	4a1f      	ldr	r2, [pc, #124]	; (8007ec4 <TIM_OC5_SetConfig+0xa8>)
 8007e48:	4013      	ands	r3, r2
 8007e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	4a1b      	ldr	r2, [pc, #108]	; (8007ec8 <TIM_OC5_SetConfig+0xac>)
 8007e5a:	4013      	ands	r3, r2
 8007e5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	041b      	lsls	r3, r3, #16
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a17      	ldr	r2, [pc, #92]	; (8007ecc <TIM_OC5_SetConfig+0xb0>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d00b      	beq.n	8007e8a <TIM_OC5_SetConfig+0x6e>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a16      	ldr	r2, [pc, #88]	; (8007ed0 <TIM_OC5_SetConfig+0xb4>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d007      	beq.n	8007e8a <TIM_OC5_SetConfig+0x6e>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a15      	ldr	r2, [pc, #84]	; (8007ed4 <TIM_OC5_SetConfig+0xb8>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d003      	beq.n	8007e8a <TIM_OC5_SetConfig+0x6e>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a14      	ldr	r2, [pc, #80]	; (8007ed8 <TIM_OC5_SetConfig+0xbc>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d109      	bne.n	8007e9e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	4a0c      	ldr	r2, [pc, #48]	; (8007ec0 <TIM_OC5_SetConfig+0xa4>)
 8007e8e:	4013      	ands	r3, r2
 8007e90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	695b      	ldr	r3, [r3, #20]
 8007e96:	021b      	lsls	r3, r3, #8
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	685a      	ldr	r2, [r3, #4]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	621a      	str	r2, [r3, #32]
}
 8007eb8:	46c0      	nop			; (mov r8, r8)
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	b006      	add	sp, #24
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	fffeffff 	.word	0xfffeffff
 8007ec4:	fffeff8f 	.word	0xfffeff8f
 8007ec8:	fffdffff 	.word	0xfffdffff
 8007ecc:	40012c00 	.word	0x40012c00
 8007ed0:	40014000 	.word	0x40014000
 8007ed4:	40014400 	.word	0x40014400
 8007ed8:	40014800 	.word	0x40014800

08007edc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	4a26      	ldr	r2, [pc, #152]	; (8007f84 <TIM_OC6_SetConfig+0xa8>)
 8007eec:	401a      	ands	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a1b      	ldr	r3, [r3, #32]
 8007ef6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	4a20      	ldr	r2, [pc, #128]	; (8007f88 <TIM_OC6_SetConfig+0xac>)
 8007f08:	4013      	ands	r3, r2
 8007f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	021b      	lsls	r3, r3, #8
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	4a1c      	ldr	r2, [pc, #112]	; (8007f8c <TIM_OC6_SetConfig+0xb0>)
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	051b      	lsls	r3, r3, #20
 8007f26:	693a      	ldr	r2, [r7, #16]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a18      	ldr	r2, [pc, #96]	; (8007f90 <TIM_OC6_SetConfig+0xb4>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d00b      	beq.n	8007f4c <TIM_OC6_SetConfig+0x70>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a17      	ldr	r2, [pc, #92]	; (8007f94 <TIM_OC6_SetConfig+0xb8>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d007      	beq.n	8007f4c <TIM_OC6_SetConfig+0x70>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a16      	ldr	r2, [pc, #88]	; (8007f98 <TIM_OC6_SetConfig+0xbc>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d003      	beq.n	8007f4c <TIM_OC6_SetConfig+0x70>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a15      	ldr	r2, [pc, #84]	; (8007f9c <TIM_OC6_SetConfig+0xc0>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d109      	bne.n	8007f60 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	4a14      	ldr	r2, [pc, #80]	; (8007fa0 <TIM_OC6_SetConfig+0xc4>)
 8007f50:	4013      	ands	r3, r2
 8007f52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	695b      	ldr	r3, [r3, #20]
 8007f58:	029b      	lsls	r3, r3, #10
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	685a      	ldr	r2, [r3, #4]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	693a      	ldr	r2, [r7, #16]
 8007f78:	621a      	str	r2, [r3, #32]
}
 8007f7a:	46c0      	nop			; (mov r8, r8)
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	b006      	add	sp, #24
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	46c0      	nop			; (mov r8, r8)
 8007f84:	ffefffff 	.word	0xffefffff
 8007f88:	feff8fff 	.word	0xfeff8fff
 8007f8c:	ffdfffff 	.word	0xffdfffff
 8007f90:	40012c00 	.word	0x40012c00
 8007f94:	40014000 	.word	0x40014000
 8007f98:	40014400 	.word	0x40014400
 8007f9c:	40014800 	.word	0x40014800
 8007fa0:	fffbffff 	.word	0xfffbffff

08007fa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6a1b      	ldr	r3, [r3, #32]
 8007fb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6a1b      	ldr	r3, [r3, #32]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	4393      	bics	r3, r2
 8007fbe:	001a      	movs	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	699b      	ldr	r3, [r3, #24]
 8007fc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	22f0      	movs	r2, #240	; 0xf0
 8007fce:	4393      	bics	r3, r2
 8007fd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	011b      	lsls	r3, r3, #4
 8007fd6:	693a      	ldr	r2, [r7, #16]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	220a      	movs	r2, #10
 8007fe0:	4393      	bics	r3, r2
 8007fe2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fe4:	697a      	ldr	r2, [r7, #20]
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	621a      	str	r2, [r3, #32]
}
 8007ff8:	46c0      	nop			; (mov r8, r8)
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	b006      	add	sp, #24
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6a1b      	ldr	r3, [r3, #32]
 8008010:	2210      	movs	r2, #16
 8008012:	4393      	bics	r3, r2
 8008014:	001a      	movs	r2, r3
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6a1b      	ldr	r3, [r3, #32]
 8008024:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	4a0d      	ldr	r2, [pc, #52]	; (8008060 <TIM_TI2_ConfigInputStage+0x60>)
 800802a:	4013      	ands	r3, r2
 800802c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	031b      	lsls	r3, r3, #12
 8008032:	697a      	ldr	r2, [r7, #20]
 8008034:	4313      	orrs	r3, r2
 8008036:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	22a0      	movs	r2, #160	; 0xa0
 800803c:	4393      	bics	r3, r2
 800803e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	011b      	lsls	r3, r3, #4
 8008044:	693a      	ldr	r2, [r7, #16]
 8008046:	4313      	orrs	r3, r2
 8008048:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	697a      	ldr	r2, [r7, #20]
 800804e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	621a      	str	r2, [r3, #32]
}
 8008056:	46c0      	nop			; (mov r8, r8)
 8008058:	46bd      	mov	sp, r7
 800805a:	b006      	add	sp, #24
 800805c:	bd80      	pop	{r7, pc}
 800805e:	46c0      	nop			; (mov r8, r8)
 8008060:	ffff0fff 	.word	0xffff0fff

08008064 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	4a08      	ldr	r2, [pc, #32]	; (8008098 <TIM_ITRx_SetConfig+0x34>)
 8008078:	4013      	ands	r3, r2
 800807a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800807c:	683a      	ldr	r2, [r7, #0]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	4313      	orrs	r3, r2
 8008082:	2207      	movs	r2, #7
 8008084:	4313      	orrs	r3, r2
 8008086:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	609a      	str	r2, [r3, #8]
}
 800808e:	46c0      	nop			; (mov r8, r8)
 8008090:	46bd      	mov	sp, r7
 8008092:	b004      	add	sp, #16
 8008094:	bd80      	pop	{r7, pc}
 8008096:	46c0      	nop			; (mov r8, r8)
 8008098:	ffcfff8f 	.word	0xffcfff8f

0800809c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
 80080a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	4a09      	ldr	r2, [pc, #36]	; (80080d8 <TIM_ETR_SetConfig+0x3c>)
 80080b4:	4013      	ands	r3, r2
 80080b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	021a      	lsls	r2, r3, #8
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	431a      	orrs	r2, r3
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	697a      	ldr	r2, [r7, #20]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	697a      	ldr	r2, [r7, #20]
 80080ce:	609a      	str	r2, [r3, #8]
}
 80080d0:	46c0      	nop			; (mov r8, r8)
 80080d2:	46bd      	mov	sp, r7
 80080d4:	b006      	add	sp, #24
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	ffff00ff 	.word	0xffff00ff

080080dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b086      	sub	sp, #24
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	221f      	movs	r2, #31
 80080ec:	4013      	ands	r3, r2
 80080ee:	2201      	movs	r2, #1
 80080f0:	409a      	lsls	r2, r3
 80080f2:	0013      	movs	r3, r2
 80080f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6a1b      	ldr	r3, [r3, #32]
 80080fa:	697a      	ldr	r2, [r7, #20]
 80080fc:	43d2      	mvns	r2, r2
 80080fe:	401a      	ands	r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6a1a      	ldr	r2, [r3, #32]
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	211f      	movs	r1, #31
 800810c:	400b      	ands	r3, r1
 800810e:	6879      	ldr	r1, [r7, #4]
 8008110:	4099      	lsls	r1, r3
 8008112:	000b      	movs	r3, r1
 8008114:	431a      	orrs	r2, r3
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	621a      	str	r2, [r3, #32]
}
 800811a:	46c0      	nop			; (mov r8, r8)
 800811c:	46bd      	mov	sp, r7
 800811e:	b006      	add	sp, #24
 8008120:	bd80      	pop	{r7, pc}
	...

08008124 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	223c      	movs	r2, #60	; 0x3c
 8008132:	5c9b      	ldrb	r3, [r3, r2]
 8008134:	2b01      	cmp	r3, #1
 8008136:	d101      	bne.n	800813c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008138:	2302      	movs	r3, #2
 800813a:	e055      	b.n	80081e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	223c      	movs	r2, #60	; 0x3c
 8008140:	2101      	movs	r1, #1
 8008142:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	223d      	movs	r2, #61	; 0x3d
 8008148:	2102      	movs	r1, #2
 800814a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a23      	ldr	r2, [pc, #140]	; (80081f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d108      	bne.n	8008178 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	4a22      	ldr	r2, [pc, #136]	; (80081f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800816a:	4013      	ands	r3, r2
 800816c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	4313      	orrs	r3, r2
 8008176:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2270      	movs	r2, #112	; 0x70
 800817c:	4393      	bics	r3, r2
 800817e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	4313      	orrs	r3, r2
 8008188:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a16      	ldr	r2, [pc, #88]	; (80081f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d00f      	beq.n	80081bc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	2380      	movs	r3, #128	; 0x80
 80081a2:	05db      	lsls	r3, r3, #23
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d009      	beq.n	80081bc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a12      	ldr	r2, [pc, #72]	; (80081f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d004      	beq.n	80081bc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a11      	ldr	r2, [pc, #68]	; (80081fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d10c      	bne.n	80081d6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	2280      	movs	r2, #128	; 0x80
 80081c0:	4393      	bics	r3, r2
 80081c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	68ba      	ldr	r2, [r7, #8]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	223d      	movs	r2, #61	; 0x3d
 80081da:	2101      	movs	r1, #1
 80081dc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	223c      	movs	r2, #60	; 0x3c
 80081e2:	2100      	movs	r1, #0
 80081e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	0018      	movs	r0, r3
 80081ea:	46bd      	mov	sp, r7
 80081ec:	b004      	add	sp, #16
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	40012c00 	.word	0x40012c00
 80081f4:	ff0fffff 	.word	0xff0fffff
 80081f8:	40000400 	.word	0x40000400
 80081fc:	40014000 	.word	0x40014000

08008200 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800820a:	2300      	movs	r3, #0
 800820c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	223c      	movs	r2, #60	; 0x3c
 8008212:	5c9b      	ldrb	r3, [r3, r2]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d101      	bne.n	800821c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008218:	2302      	movs	r3, #2
 800821a:	e079      	b.n	8008310 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	223c      	movs	r2, #60	; 0x3c
 8008220:	2101      	movs	r1, #1
 8008222:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	22ff      	movs	r2, #255	; 0xff
 8008228:	4393      	bics	r3, r2
 800822a:	001a      	movs	r2, r3
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	4313      	orrs	r3, r2
 8008232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	4a38      	ldr	r2, [pc, #224]	; (8008318 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8008238:	401a      	ands	r2, r3
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	4313      	orrs	r3, r2
 8008240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	4a35      	ldr	r2, [pc, #212]	; (800831c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008246:	401a      	ands	r2, r3
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	4313      	orrs	r3, r2
 800824e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	4a33      	ldr	r2, [pc, #204]	; (8008320 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008254:	401a      	ands	r2, r3
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4313      	orrs	r3, r2
 800825c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	4a30      	ldr	r2, [pc, #192]	; (8008324 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008262:	401a      	ands	r2, r3
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	4313      	orrs	r3, r2
 800826a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	4a2e      	ldr	r2, [pc, #184]	; (8008328 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008270:	401a      	ands	r2, r3
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	4313      	orrs	r3, r2
 8008278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	4a2b      	ldr	r2, [pc, #172]	; (800832c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800827e:	401a      	ands	r2, r3
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008284:	4313      	orrs	r3, r2
 8008286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	4a29      	ldr	r2, [pc, #164]	; (8008330 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800828c:	401a      	ands	r2, r3
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	041b      	lsls	r3, r3, #16
 8008294:	4313      	orrs	r3, r2
 8008296:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a25      	ldr	r2, [pc, #148]	; (8008334 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d106      	bne.n	80082b0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	4a24      	ldr	r2, [pc, #144]	; (8008338 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80082a6:	401a      	ands	r2, r3
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	69db      	ldr	r3, [r3, #28]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a1f      	ldr	r2, [pc, #124]	; (8008334 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d121      	bne.n	80082fe <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	4a1f      	ldr	r2, [pc, #124]	; (800833c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80082be:	401a      	ands	r2, r3
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c4:	051b      	lsls	r3, r3, #20
 80082c6:	4313      	orrs	r3, r2
 80082c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	4a1c      	ldr	r2, [pc, #112]	; (8008340 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80082ce:	401a      	ands	r2, r3
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	6a1b      	ldr	r3, [r3, #32]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	4a1a      	ldr	r2, [pc, #104]	; (8008344 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80082dc:	401a      	ands	r2, r3
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e2:	4313      	orrs	r3, r2
 80082e4:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a12      	ldr	r2, [pc, #72]	; (8008334 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d106      	bne.n	80082fe <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	4a15      	ldr	r2, [pc, #84]	; (8008348 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80082f4:	401a      	ands	r2, r3
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fa:	4313      	orrs	r3, r2
 80082fc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	223c      	movs	r2, #60	; 0x3c
 800830a:	2100      	movs	r1, #0
 800830c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	0018      	movs	r0, r3
 8008312:	46bd      	mov	sp, r7
 8008314:	b004      	add	sp, #16
 8008316:	bd80      	pop	{r7, pc}
 8008318:	fffffcff 	.word	0xfffffcff
 800831c:	fffffbff 	.word	0xfffffbff
 8008320:	fffff7ff 	.word	0xfffff7ff
 8008324:	ffffefff 	.word	0xffffefff
 8008328:	ffffdfff 	.word	0xffffdfff
 800832c:	ffffbfff 	.word	0xffffbfff
 8008330:	fff0ffff 	.word	0xfff0ffff
 8008334:	40012c00 	.word	0x40012c00
 8008338:	efffffff 	.word	0xefffffff
 800833c:	ff0fffff 	.word	0xff0fffff
 8008340:	feffffff 	.word	0xfeffffff
 8008344:	fdffffff 	.word	0xfdffffff
 8008348:	dfffffff 	.word	0xdfffffff

0800834c <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800834c:	b580      	push	{r7, lr}
 800834e:	b08a      	sub	sp, #40	; 0x28
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	223c      	movs	r2, #60	; 0x3c
 800835c:	5c9b      	ldrb	r3, [r3, r2]
 800835e:	2b01      	cmp	r3, #1
 8008360:	d101      	bne.n	8008366 <HAL_TIMEx_ConfigBreakInput+0x1a>
 8008362:	2302      	movs	r3, #2
 8008364:	e08b      	b.n	800847e <HAL_TIMEx_ConfigBreakInput+0x132>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	223c      	movs	r2, #60	; 0x3c
 800836a:	2101      	movs	r1, #1
 800836c:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2b02      	cmp	r3, #2
 8008374:	d00d      	beq.n	8008392 <HAL_TIMEx_ConfigBreakInput+0x46>
 8008376:	2b04      	cmp	r3, #4
 8008378:	d015      	beq.n	80083a6 <HAL_TIMEx_ConfigBreakInput+0x5a>
 800837a:	2b01      	cmp	r3, #1
 800837c:	d11d      	bne.n	80083ba <HAL_TIMEx_ConfigBreakInput+0x6e>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800837e:	2301      	movs	r3, #1
 8008380:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8008382:	2300      	movs	r3, #0
 8008384:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8008386:	2380      	movs	r3, #128	; 0x80
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800838c:	2309      	movs	r3, #9
 800838e:	61bb      	str	r3, [r7, #24]
      break;
 8008390:	e01c      	b.n	80083cc <HAL_TIMEx_ConfigBreakInput+0x80>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8008392:	2302      	movs	r3, #2
 8008394:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8008396:	2301      	movs	r3, #1
 8008398:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800839a:	2380      	movs	r3, #128	; 0x80
 800839c:	00db      	lsls	r3, r3, #3
 800839e:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 80083a0:	230a      	movs	r3, #10
 80083a2:	61bb      	str	r3, [r7, #24]
      break;
 80083a4:	e012      	b.n	80083cc <HAL_TIMEx_ConfigBreakInput+0x80>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 80083a6:	2304      	movs	r3, #4
 80083a8:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 80083aa:	2302      	movs	r3, #2
 80083ac:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 80083ae:	2380      	movs	r3, #128	; 0x80
 80083b0:	011b      	lsls	r3, r3, #4
 80083b2:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 80083b4:	230b      	movs	r3, #11
 80083b6:	61bb      	str	r3, [r7, #24]
      break;
 80083b8:	e008      	b.n	80083cc <HAL_TIMEx_ConfigBreakInput+0x80>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 80083ba:	2300      	movs	r3, #0
 80083bc:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_polarity_mask = 0U;
 80083be:	2300      	movs	r3, #0
 80083c0:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = 0U;
 80083c2:	2300      	movs	r3, #0
 80083c4:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 80083c6:	2300      	movs	r3, #0
 80083c8:	61bb      	str	r3, [r7, #24]
      break;
 80083ca:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d002      	beq.n	80083d8 <HAL_TIMEx_ConfigBreakInput+0x8c>
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d027      	beq.n	8008426 <HAL_TIMEx_ConfigBreakInput+0xda>
      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
      break;
    }
    default:
      break;
 80083d6:	e04d      	b.n	8008474 <HAL_TIMEx_ConfigBreakInput+0x128>
      tmporx = htim->Instance->AF1;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083de:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 80083e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e2:	43da      	mvns	r2, r3
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	4013      	ands	r3, r2
 80083e8:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	685a      	ldr	r2, [r3, #4]
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	409a      	lsls	r2, r3
 80083f2:	0013      	movs	r3, r2
 80083f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083f6:	4013      	ands	r3, r2
 80083f8:	697a      	ldr	r2, [r7, #20]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 80083fe:	6a3b      	ldr	r3, [r7, #32]
 8008400:	43da      	mvns	r2, r3
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	4013      	ands	r3, r2
 8008406:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	689a      	ldr	r2, [r3, #8]
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	409a      	lsls	r2, r3
 8008410:	0013      	movs	r3, r2
 8008412:	6a3a      	ldr	r2, [r7, #32]
 8008414:	4013      	ands	r3, r2
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	4313      	orrs	r3, r2
 800841a:	617b      	str	r3, [r7, #20]
      htim->Instance->AF1 = tmporx;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	697a      	ldr	r2, [r7, #20]
 8008422:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 8008424:	e026      	b.n	8008474 <HAL_TIMEx_ConfigBreakInput+0x128>
      tmporx = htim->Instance->AF2;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800842c:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 800842e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008430:	43da      	mvns	r2, r3
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	4013      	ands	r3, r2
 8008436:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685a      	ldr	r2, [r3, #4]
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	409a      	lsls	r2, r3
 8008440:	0013      	movs	r3, r2
 8008442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008444:	4013      	ands	r3, r2
 8008446:	697a      	ldr	r2, [r7, #20]
 8008448:	4313      	orrs	r3, r2
 800844a:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	43da      	mvns	r2, r3
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	4013      	ands	r3, r2
 8008454:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	689a      	ldr	r2, [r3, #8]
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	409a      	lsls	r2, r3
 800845e:	0013      	movs	r3, r2
 8008460:	6a3a      	ldr	r2, [r7, #32]
 8008462:	4013      	ands	r3, r2
 8008464:	697a      	ldr	r2, [r7, #20]
 8008466:	4313      	orrs	r3, r2
 8008468:	617b      	str	r3, [r7, #20]
      htim->Instance->AF2 = tmporx;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8008472:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	223c      	movs	r2, #60	; 0x3c
 8008478:	2100      	movs	r1, #0
 800847a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	0018      	movs	r0, r3
 8008480:	46bd      	mov	sp, r7
 8008482:	b00a      	add	sp, #40	; 0x28
 8008484:	bd80      	pop	{r7, pc}
	...

08008488 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d101      	bne.n	800849a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e03f      	b.n	800851a <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2259      	movs	r2, #89	; 0x59
 800849e:	5c9b      	ldrb	r3, [r3, r2]
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d107      	bne.n	80084b6 <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2258      	movs	r2, #88	; 0x58
 80084aa:	2100      	movs	r1, #0
 80084ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	0018      	movs	r0, r3
 80084b2:	f7fa fabf 	bl	8002a34 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2259      	movs	r2, #89	; 0x59
 80084ba:	2102      	movs	r1, #2
 80084bc:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2101      	movs	r1, #1
 80084ca:	438a      	bics	r2, r1
 80084cc:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	0018      	movs	r0, r3
 80084d2:	f000 fad7 	bl	8008a84 <USART_SetConfig>
 80084d6:	0003      	movs	r3, r0
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d101      	bne.n	80084e0 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e01c      	b.n	800851a <HAL_USART_Init+0x92>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	685a      	ldr	r2, [r3, #4]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	490e      	ldr	r1, [pc, #56]	; (8008524 <HAL_USART_Init+0x9c>)
 80084ec:	400a      	ands	r2, r1
 80084ee:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	689a      	ldr	r2, [r3, #8]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	212a      	movs	r1, #42	; 0x2a
 80084fc:	438a      	bics	r2, r1
 80084fe:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2101      	movs	r1, #1
 800850c:	430a      	orrs	r2, r1
 800850e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	0018      	movs	r0, r3
 8008514:	f000 fd66 	bl	8008fe4 <USART_CheckIdleState>
 8008518:	0003      	movs	r3, r0
}
 800851a:	0018      	movs	r0, r3
 800851c:	46bd      	mov	sp, r7
 800851e:	b002      	add	sp, #8
 8008520:	bd80      	pop	{r7, pc}
 8008522:	46c0      	nop			; (mov r8, r8)
 8008524:	ffffbfff 	.word	0xffffbfff

08008528 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b08a      	sub	sp, #40	; 0x28
 800852c:	af02      	add	r7, sp, #8
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	603b      	str	r3, [r7, #0]
 8008534:	1dbb      	adds	r3, r7, #6
 8008536:	801a      	strh	r2, [r3, #0]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2259      	movs	r2, #89	; 0x59
 800853c:	5c9b      	ldrb	r3, [r3, r2]
 800853e:	b2db      	uxtb	r3, r3
 8008540:	2b01      	cmp	r3, #1
 8008542:	d000      	beq.n	8008546 <HAL_USART_Transmit+0x1e>
 8008544:	e0a9      	b.n	800869a <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d003      	beq.n	8008554 <HAL_USART_Transmit+0x2c>
 800854c:	1dbb      	adds	r3, r7, #6
 800854e:	881b      	ldrh	r3, [r3, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d101      	bne.n	8008558 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	e0a1      	b.n	800869c <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	689a      	ldr	r2, [r3, #8]
 800855c:	2380      	movs	r3, #128	; 0x80
 800855e:	015b      	lsls	r3, r3, #5
 8008560:	429a      	cmp	r2, r3
 8008562:	d109      	bne.n	8008578 <HAL_USART_Transmit+0x50>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d105      	bne.n	8008578 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	2201      	movs	r2, #1
 8008570:	4013      	ands	r3, r2
 8008572:	d001      	beq.n	8008578 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	e091      	b.n	800869c <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2258      	movs	r2, #88	; 0x58
 800857c:	5c9b      	ldrb	r3, [r3, r2]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d101      	bne.n	8008586 <HAL_USART_Transmit+0x5e>
 8008582:	2302      	movs	r3, #2
 8008584:	e08a      	b.n	800869c <HAL_USART_Transmit+0x174>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2258      	movs	r2, #88	; 0x58
 800858a:	2101      	movs	r1, #1
 800858c:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2259      	movs	r2, #89	; 0x59
 8008598:	2112      	movs	r1, #18
 800859a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800859c:	f7fa fc78 	bl	8002e90 <HAL_GetTick>
 80085a0:	0003      	movs	r3, r0
 80085a2:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	1dba      	adds	r2, r7, #6
 80085a8:	8812      	ldrh	r2, [r2, #0]
 80085aa:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	1dba      	adds	r2, r7, #6
 80085b0:	8812      	ldrh	r2, [r2, #0]
 80085b2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	689a      	ldr	r2, [r3, #8]
 80085b8:	2380      	movs	r3, #128	; 0x80
 80085ba:	015b      	lsls	r3, r3, #5
 80085bc:	429a      	cmp	r2, r3
 80085be:	d108      	bne.n	80085d2 <HAL_USART_Transmit+0xaa>
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d104      	bne.n	80085d2 <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 80085c8:	2300      	movs	r3, #0
 80085ca:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	61bb      	str	r3, [r7, #24]
 80085d0:	e003      	b.n	80085da <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 80085d6:	2300      	movs	r3, #0
 80085d8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 80085da:	e02a      	b.n	8008632 <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085dc:	697a      	ldr	r2, [r7, #20]
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	0013      	movs	r3, r2
 80085e6:	2200      	movs	r2, #0
 80085e8:	2180      	movs	r1, #128	; 0x80
 80085ea:	f000 fa16 	bl	8008a1a <USART_WaitOnFlagUntilTimeout>
 80085ee:	1e03      	subs	r3, r0, #0
 80085f0:	d001      	beq.n	80085f6 <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e052      	b.n	800869c <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10b      	bne.n	8008614 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	881b      	ldrh	r3, [r3, #0]
 8008600:	001a      	movs	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	05d2      	lsls	r2, r2, #23
 8008608:	0dd2      	lsrs	r2, r2, #23
 800860a:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	3302      	adds	r3, #2
 8008610:	61bb      	str	r3, [r7, #24]
 8008612:	e007      	b.n	8008624 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	781a      	ldrb	r2, [r3, #0]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	3301      	adds	r3, #1
 8008622:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008628:	b29b      	uxth	r3, r3
 800862a:	3b01      	subs	r3, #1
 800862c:	b29a      	uxth	r2, r3
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008636:	b29b      	uxth	r3, r3
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1cf      	bne.n	80085dc <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800863c:	697a      	ldr	r2, [r7, #20]
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	0013      	movs	r3, r2
 8008646:	2200      	movs	r2, #0
 8008648:	2140      	movs	r1, #64	; 0x40
 800864a:	f000 f9e6 	bl	8008a1a <USART_WaitOnFlagUntilTimeout>
 800864e:	1e03      	subs	r3, r0, #0
 8008650:	d001      	beq.n	8008656 <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 8008652:	2303      	movs	r3, #3
 8008654:	e022      	b.n	800869c <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2240      	movs	r2, #64	; 0x40
 800865c:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2208      	movs	r2, #8
 8008664:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	699a      	ldr	r2, [r3, #24]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2108      	movs	r1, #8
 8008672:	430a      	orrs	r2, r1
 8008674:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	699a      	ldr	r2, [r3, #24]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2110      	movs	r1, #16
 8008682:	430a      	orrs	r2, r1
 8008684:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2259      	movs	r2, #89	; 0x59
 800868a:	2101      	movs	r1, #1
 800868c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2258      	movs	r2, #88	; 0x58
 8008692:	2100      	movs	r1, #0
 8008694:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008696:	2300      	movs	r3, #0
 8008698:	e000      	b.n	800869c <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 800869a:	2302      	movs	r3, #2
  }
}
 800869c:	0018      	movs	r0, r3
 800869e:	46bd      	mov	sp, r7
 80086a0:	b008      	add	sp, #32
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b088      	sub	sp, #32
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	69db      	ldr	r3, [r3, #28]
 80086b2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_UDR));
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	4aab      	ldr	r2, [pc, #684]	; (8008974 <HAL_USART_IRQHandler+0x2d0>)
 80086c8:	4013      	ands	r3, r2
 80086ca:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d117      	bne.n	8008702 <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	2220      	movs	r2, #32
 80086d6:	4013      	ands	r3, r2
 80086d8:	d013      	beq.n	8008702 <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	2220      	movs	r2, #32
 80086de:	4013      	ands	r3, r2
 80086e0:	d104      	bne.n	80086ec <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	2380      	movs	r3, #128	; 0x80
 80086e6:	055b      	lsls	r3, r3, #21
 80086e8:	4013      	ands	r3, r2
 80086ea:	d00a      	beq.n	8008702 <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d100      	bne.n	80086f6 <HAL_USART_IRQHandler+0x52>
 80086f4:	e136      	b.n	8008964 <HAL_USART_IRQHandler+0x2c0>
      {
        husart->RxISR(husart);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	0010      	movs	r0, r2
 80086fe:	4798      	blx	r3
      }
      return;
 8008700:	e130      	b.n	8008964 <HAL_USART_IRQHandler+0x2c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d100      	bne.n	800870a <HAL_USART_IRQHandler+0x66>
 8008708:	e0eb      	b.n	80088e2 <HAL_USART_IRQHandler+0x23e>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	4a9a      	ldr	r2, [pc, #616]	; (8008978 <HAL_USART_IRQHandler+0x2d4>)
 800870e:	4013      	ands	r3, r2
 8008710:	d105      	bne.n	800871e <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 8008712:	69ba      	ldr	r2, [r7, #24]
 8008714:	2390      	movs	r3, #144	; 0x90
 8008716:	005b      	lsls	r3, r3, #1
 8008718:	4013      	ands	r3, r2
 800871a:	d100      	bne.n	800871e <HAL_USART_IRQHandler+0x7a>
 800871c:	e0e1      	b.n	80088e2 <HAL_USART_IRQHandler+0x23e>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	2201      	movs	r2, #1
 8008722:	4013      	ands	r3, r2
 8008724:	d00e      	beq.n	8008744 <HAL_USART_IRQHandler+0xa0>
 8008726:	69ba      	ldr	r2, [r7, #24]
 8008728:	2380      	movs	r3, #128	; 0x80
 800872a:	005b      	lsls	r3, r3, #1
 800872c:	4013      	ands	r3, r2
 800872e:	d009      	beq.n	8008744 <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2201      	movs	r2, #1
 8008736:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800873c:	2201      	movs	r2, #1
 800873e:	431a      	orrs	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	2202      	movs	r2, #2
 8008748:	4013      	ands	r3, r2
 800874a:	d00d      	beq.n	8008768 <HAL_USART_IRQHandler+0xc4>
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	2201      	movs	r2, #1
 8008750:	4013      	ands	r3, r2
 8008752:	d009      	beq.n	8008768 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2202      	movs	r2, #2
 800875a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008760:	2204      	movs	r2, #4
 8008762:	431a      	orrs	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	2204      	movs	r2, #4
 800876c:	4013      	ands	r3, r2
 800876e:	d00d      	beq.n	800878c <HAL_USART_IRQHandler+0xe8>
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	2201      	movs	r2, #1
 8008774:	4013      	ands	r3, r2
 8008776:	d009      	beq.n	800878c <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2204      	movs	r2, #4
 800877e:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008784:	2202      	movs	r2, #2
 8008786:	431a      	orrs	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	2208      	movs	r2, #8
 8008790:	4013      	ands	r3, r2
 8008792:	d011      	beq.n	80087b8 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	2220      	movs	r2, #32
 8008798:	4013      	ands	r3, r2
 800879a:	d103      	bne.n	80087a4 <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	4a76      	ldr	r2, [pc, #472]	; (8008978 <HAL_USART_IRQHandler+0x2d4>)
 80087a0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80087a2:	d009      	beq.n	80087b8 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2208      	movs	r2, #8
 80087aa:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087b0:	2208      	movs	r2, #8
 80087b2:	431a      	orrs	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087b8:	69fa      	ldr	r2, [r7, #28]
 80087ba:	2380      	movs	r3, #128	; 0x80
 80087bc:	019b      	lsls	r3, r3, #6
 80087be:	4013      	ands	r3, r2
 80087c0:	d01a      	beq.n	80087f8 <HAL_USART_IRQHandler+0x154>
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	2201      	movs	r2, #1
 80087c6:	4013      	ands	r3, r2
 80087c8:	d016      	beq.n	80087f8 <HAL_USART_IRQHandler+0x154>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2259      	movs	r2, #89	; 0x59
 80087ce:	5c9b      	ldrb	r3, [r3, r2]
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	2b22      	cmp	r3, #34	; 0x22
 80087d4:	d105      	bne.n	80087e2 <HAL_USART_IRQHandler+0x13e>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2280      	movs	r2, #128	; 0x80
 80087dc:	0192      	lsls	r2, r2, #6
 80087de:	621a      	str	r2, [r3, #32]
        return;
 80087e0:	e0c5      	b.n	800896e <HAL_USART_IRQHandler+0x2ca>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2280      	movs	r2, #128	; 0x80
 80087e8:	0192      	lsls	r2, r2, #6
 80087ea:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087f0:	2220      	movs	r2, #32
 80087f2:	431a      	orrs	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d100      	bne.n	8008802 <HAL_USART_IRQHandler+0x15e>
 8008800:	e0b2      	b.n	8008968 <HAL_USART_IRQHandler+0x2c4>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	2220      	movs	r2, #32
 8008806:	4013      	ands	r3, r2
 8008808:	d011      	beq.n	800882e <HAL_USART_IRQHandler+0x18a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	2220      	movs	r2, #32
 800880e:	4013      	ands	r3, r2
 8008810:	d104      	bne.n	800881c <HAL_USART_IRQHandler+0x178>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008812:	697a      	ldr	r2, [r7, #20]
 8008814:	2380      	movs	r3, #128	; 0x80
 8008816:	055b      	lsls	r3, r3, #21
 8008818:	4013      	ands	r3, r2
 800881a:	d008      	beq.n	800882e <HAL_USART_IRQHandler+0x18a>
      {
        if (husart->RxISR != NULL)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008820:	2b00      	cmp	r3, #0
 8008822:	d004      	beq.n	800882e <HAL_USART_IRQHandler+0x18a>
        {
          husart->RxISR(husart);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	0010      	movs	r0, r2
 800882c:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008832:	2208      	movs	r2, #8
 8008834:	4013      	ands	r3, r2
 8008836:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	2240      	movs	r2, #64	; 0x40
 8008840:	4013      	ands	r3, r2
 8008842:	2b40      	cmp	r3, #64	; 0x40
 8008844:	d002      	beq.n	800884c <HAL_USART_IRQHandler+0x1a8>
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d040      	beq.n	80088ce <HAL_USART_IRQHandler+0x22a>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	0018      	movs	r0, r3
 8008850:	f000 f8ae 	bl	80089b0 <USART_EndTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	2240      	movs	r2, #64	; 0x40
 800885c:	4013      	ands	r3, r2
 800885e:	2b40      	cmp	r3, #64	; 0x40
 8008860:	d130      	bne.n	80088c4 <HAL_USART_IRQHandler+0x220>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	689a      	ldr	r2, [r3, #8]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2140      	movs	r1, #64	; 0x40
 800886e:	438a      	bics	r2, r1
 8008870:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008876:	2b00      	cmp	r3, #0
 8008878:	d008      	beq.n	800888c <HAL_USART_IRQHandler+0x1e8>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800887e:	2200      	movs	r2, #0
 8008880:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008886:	0018      	movs	r0, r3
 8008888:	f7fa ff0a 	bl	80036a0 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008890:	2b00      	cmp	r3, #0
 8008892:	d012      	beq.n	80088ba <HAL_USART_IRQHandler+0x216>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008898:	4a38      	ldr	r2, [pc, #224]	; (800897c <HAL_USART_IRQHandler+0x2d8>)
 800889a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088a0:	0018      	movs	r0, r3
 80088a2:	f7fa fefd 	bl	80036a0 <HAL_DMA_Abort_IT>
 80088a6:	1e03      	subs	r3, r0, #0
 80088a8:	d019      	beq.n	80088de <HAL_USART_IRQHandler+0x23a>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088b4:	0018      	movs	r0, r3
 80088b6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80088b8:	e011      	b.n	80088de <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	0018      	movs	r0, r3
 80088be:	f000 f86f 	bl	80089a0 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80088c2:	e00c      	b.n	80088de <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	0018      	movs	r0, r3
 80088c8:	f000 f86a 	bl	80089a0 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80088cc:	e007      	b.n	80088de <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	0018      	movs	r0, r3
 80088d2:	f000 f865 	bl	80089a0 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 80088dc:	e044      	b.n	8008968 <HAL_USART_IRQHandler+0x2c4>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80088de:	46c0      	nop			; (mov r8, r8)
    return;
 80088e0:	e042      	b.n	8008968 <HAL_USART_IRQHandler+0x2c4>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	2280      	movs	r2, #128	; 0x80
 80088e6:	4013      	ands	r3, r2
 80088e8:	d012      	beq.n	8008910 <HAL_USART_IRQHandler+0x26c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	2280      	movs	r2, #128	; 0x80
 80088ee:	4013      	ands	r3, r2
 80088f0:	d104      	bne.n	80088fc <HAL_USART_IRQHandler+0x258>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80088f2:	697a      	ldr	r2, [r7, #20]
 80088f4:	2380      	movs	r3, #128	; 0x80
 80088f6:	041b      	lsls	r3, r3, #16
 80088f8:	4013      	ands	r3, r2
 80088fa:	d009      	beq.n	8008910 <HAL_USART_IRQHandler+0x26c>
  {
    if (husart->TxISR != NULL)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008900:	2b00      	cmp	r3, #0
 8008902:	d033      	beq.n	800896c <HAL_USART_IRQHandler+0x2c8>
    {
      husart->TxISR(husart);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	0010      	movs	r0, r2
 800890c:	4798      	blx	r3
    }
    return;
 800890e:	e02d      	b.n	800896c <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	2240      	movs	r2, #64	; 0x40
 8008914:	4013      	ands	r3, r2
 8008916:	d008      	beq.n	800892a <HAL_USART_IRQHandler+0x286>
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	2240      	movs	r2, #64	; 0x40
 800891c:	4013      	ands	r3, r2
 800891e:	d004      	beq.n	800892a <HAL_USART_IRQHandler+0x286>
  {
    USART_EndTransmit_IT(husart);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	0018      	movs	r0, r3
 8008924:	f000 fba2 	bl	800906c <USART_EndTransmit_IT>
    return;
 8008928:	e021      	b.n	800896e <HAL_USART_IRQHandler+0x2ca>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800892a:	69fa      	ldr	r2, [r7, #28]
 800892c:	2380      	movs	r3, #128	; 0x80
 800892e:	041b      	lsls	r3, r3, #16
 8008930:	4013      	ands	r3, r2
 8008932:	d009      	beq.n	8008948 <HAL_USART_IRQHandler+0x2a4>
 8008934:	69ba      	ldr	r2, [r7, #24]
 8008936:	2380      	movs	r3, #128	; 0x80
 8008938:	05db      	lsls	r3, r3, #23
 800893a:	4013      	ands	r3, r2
 800893c:	d004      	beq.n	8008948 <HAL_USART_IRQHandler+0x2a4>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	0018      	movs	r0, r3
 8008942:	f000 fbde 	bl	8009102 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 8008946:	e012      	b.n	800896e <HAL_USART_IRQHandler+0x2ca>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008948:	69fa      	ldr	r2, [r7, #28]
 800894a:	2380      	movs	r3, #128	; 0x80
 800894c:	045b      	lsls	r3, r3, #17
 800894e:	4013      	ands	r3, r2
 8008950:	d00d      	beq.n	800896e <HAL_USART_IRQHandler+0x2ca>
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	2b00      	cmp	r3, #0
 8008956:	da0a      	bge.n	800896e <HAL_USART_IRQHandler+0x2ca>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	0018      	movs	r0, r3
 800895c:	f000 fbc9 	bl	80090f2 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 8008960:	46c0      	nop			; (mov r8, r8)
 8008962:	e004      	b.n	800896e <HAL_USART_IRQHandler+0x2ca>
      return;
 8008964:	46c0      	nop			; (mov r8, r8)
 8008966:	e002      	b.n	800896e <HAL_USART_IRQHandler+0x2ca>
    return;
 8008968:	46c0      	nop			; (mov r8, r8)
 800896a:	e000      	b.n	800896e <HAL_USART_IRQHandler+0x2ca>
    return;
 800896c:	46c0      	nop			; (mov r8, r8)
  }
}
 800896e:	46bd      	mov	sp, r7
 8008970:	b008      	add	sp, #32
 8008972:	bd80      	pop	{r7, pc}
 8008974:	0000200f 	.word	0x0000200f
 8008978:	10000001 	.word	0x10000001
 800897c:	080089f1 	.word	0x080089f1

08008980 <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 8008988:	46c0      	nop			; (mov r8, r8)
 800898a:	46bd      	mov	sp, r7
 800898c:	b002      	add	sp, #8
 800898e:	bd80      	pop	{r7, pc}

08008990 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8008998:	46c0      	nop			; (mov r8, r8)
 800899a:	46bd      	mov	sp, r7
 800899c:	b002      	add	sp, #8
 800899e:	bd80      	pop	{r7, pc}

080089a0 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 80089a8:	46c0      	nop			; (mov r8, r8)
 80089aa:	46bd      	mov	sp, r7
 80089ac:	b002      	add	sp, #8
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4909      	ldr	r1, [pc, #36]	; (80089e8 <USART_EndTransfer+0x38>)
 80089c4:	400a      	ands	r2, r1
 80089c6:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	689a      	ldr	r2, [r3, #8]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4906      	ldr	r1, [pc, #24]	; (80089ec <USART_EndTransfer+0x3c>)
 80089d4:	400a      	ands	r2, r1
 80089d6:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2259      	movs	r2, #89	; 0x59
 80089dc:	2101      	movs	r1, #1
 80089de:	5499      	strb	r1, [r3, r2]
}
 80089e0:	46c0      	nop			; (mov r8, r8)
 80089e2:	46bd      	mov	sp, r7
 80089e4:	b002      	add	sp, #8
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	fffffe1f 	.word	0xfffffe1f
 80089ec:	ef7ffffe 	.word	0xef7ffffe

080089f0 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089fc:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2200      	movs	r2, #0
 8008a08:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	0018      	movs	r0, r3
 8008a0e:	f7ff ffc7 	bl	80089a0 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8008a12:	46c0      	nop			; (mov r8, r8)
 8008a14:	46bd      	mov	sp, r7
 8008a16:	b004      	add	sp, #16
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b084      	sub	sp, #16
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	60f8      	str	r0, [r7, #12]
 8008a22:	60b9      	str	r1, [r7, #8]
 8008a24:	603b      	str	r3, [r7, #0]
 8008a26:	1dfb      	adds	r3, r7, #7
 8008a28:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8008a2a:	e017      	b.n	8008a5c <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	d014      	beq.n	8008a5c <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a32:	f7fa fa2d 	bl	8002e90 <HAL_GetTick>
 8008a36:	0002      	movs	r2, r0
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	1ad3      	subs	r3, r2, r3
 8008a3c:	69ba      	ldr	r2, [r7, #24]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d302      	bcc.n	8008a48 <USART_WaitOnFlagUntilTimeout+0x2e>
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d109      	bne.n	8008a5c <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2259      	movs	r2, #89	; 0x59
 8008a4c:	2101      	movs	r1, #1
 8008a4e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2258      	movs	r2, #88	; 0x58
 8008a54:	2100      	movs	r1, #0
 8008a56:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	e00f      	b.n	8008a7c <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	69db      	ldr	r3, [r3, #28]
 8008a62:	68ba      	ldr	r2, [r7, #8]
 8008a64:	4013      	ands	r3, r2
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	425a      	negs	r2, r3
 8008a6c:	4153      	adcs	r3, r2
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	001a      	movs	r2, r3
 8008a72:	1dfb      	adds	r3, r7, #7
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d0d8      	beq.n	8008a2c <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	0018      	movs	r0, r3
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	b004      	add	sp, #16
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b088      	sub	sp, #32
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8008a8c:	231e      	movs	r3, #30
 8008a8e:	18fb      	adds	r3, r7, r3
 8008a90:	2200      	movs	r2, #0
 8008a92:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8008a94:	2300      	movs	r3, #0
 8008a96:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	689a      	ldr	r2, [r3, #8]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	431a      	orrs	r2, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	695b      	ldr	r3, [r3, #20]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	2280      	movs	r2, #128	; 0x80
 8008aaa:	0212      	lsls	r2, r2, #8
 8008aac:	4313      	orrs	r3, r2
 8008aae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4ab6      	ldr	r2, [pc, #728]	; (8008d90 <USART_SetConfig+0x30c>)
 8008ab8:	4013      	ands	r3, r2
 8008aba:	0019      	movs	r1, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	697a      	ldr	r2, [r7, #20]
 8008ac2:	430a      	orrs	r2, r1
 8008ac4:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8008ac6:	2380      	movs	r3, #128	; 0x80
 8008ac8:	011b      	lsls	r3, r3, #4
 8008aca:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6a1b      	ldr	r3, [r3, #32]
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	699a      	ldr	r2, [r3, #24]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	69db      	ldr	r3, [r3, #28]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	697a      	ldr	r2, [r7, #20]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	4aa7      	ldr	r2, [pc, #668]	; (8008d94 <USART_SetConfig+0x310>)
 8008af8:	4013      	ands	r3, r2
 8008afa:	0019      	movs	r1, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	697a      	ldr	r2, [r7, #20]
 8008b02:	430a      	orrs	r2, r1
 8008b04:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0c:	220f      	movs	r2, #15
 8008b0e:	4393      	bics	r3, r2
 8008b10:	0019      	movs	r1, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	430a      	orrs	r2, r1
 8008b1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a9d      	ldr	r2, [pc, #628]	; (8008d98 <USART_SetConfig+0x314>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d125      	bne.n	8008b74 <USART_SetConfig+0xf0>
 8008b28:	4b9c      	ldr	r3, [pc, #624]	; (8008d9c <USART_SetConfig+0x318>)
 8008b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b2c:	2203      	movs	r2, #3
 8008b2e:	4013      	ands	r3, r2
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d00f      	beq.n	8008b54 <USART_SetConfig+0xd0>
 8008b34:	d304      	bcc.n	8008b40 <USART_SetConfig+0xbc>
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d007      	beq.n	8008b4a <USART_SetConfig+0xc6>
 8008b3a:	2b03      	cmp	r3, #3
 8008b3c:	d00f      	beq.n	8008b5e <USART_SetConfig+0xda>
 8008b3e:	e013      	b.n	8008b68 <USART_SetConfig+0xe4>
 8008b40:	231f      	movs	r3, #31
 8008b42:	18fb      	adds	r3, r7, r3
 8008b44:	2200      	movs	r2, #0
 8008b46:	701a      	strb	r2, [r3, #0]
 8008b48:	e05a      	b.n	8008c00 <USART_SetConfig+0x17c>
 8008b4a:	231f      	movs	r3, #31
 8008b4c:	18fb      	adds	r3, r7, r3
 8008b4e:	2202      	movs	r2, #2
 8008b50:	701a      	strb	r2, [r3, #0]
 8008b52:	e055      	b.n	8008c00 <USART_SetConfig+0x17c>
 8008b54:	231f      	movs	r3, #31
 8008b56:	18fb      	adds	r3, r7, r3
 8008b58:	2204      	movs	r2, #4
 8008b5a:	701a      	strb	r2, [r3, #0]
 8008b5c:	e050      	b.n	8008c00 <USART_SetConfig+0x17c>
 8008b5e:	231f      	movs	r3, #31
 8008b60:	18fb      	adds	r3, r7, r3
 8008b62:	2208      	movs	r2, #8
 8008b64:	701a      	strb	r2, [r3, #0]
 8008b66:	e04b      	b.n	8008c00 <USART_SetConfig+0x17c>
 8008b68:	231f      	movs	r3, #31
 8008b6a:	18fb      	adds	r3, r7, r3
 8008b6c:	2210      	movs	r2, #16
 8008b6e:	701a      	strb	r2, [r3, #0]
 8008b70:	46c0      	nop			; (mov r8, r8)
 8008b72:	e045      	b.n	8008c00 <USART_SetConfig+0x17c>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a89      	ldr	r2, [pc, #548]	; (8008da0 <USART_SetConfig+0x31c>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d128      	bne.n	8008bd0 <USART_SetConfig+0x14c>
 8008b7e:	4b87      	ldr	r3, [pc, #540]	; (8008d9c <USART_SetConfig+0x318>)
 8008b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b82:	220c      	movs	r2, #12
 8008b84:	4013      	ands	r3, r2
 8008b86:	2b04      	cmp	r3, #4
 8008b88:	d012      	beq.n	8008bb0 <USART_SetConfig+0x12c>
 8008b8a:	d802      	bhi.n	8008b92 <USART_SetConfig+0x10e>
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d005      	beq.n	8008b9c <USART_SetConfig+0x118>
 8008b90:	e018      	b.n	8008bc4 <USART_SetConfig+0x140>
 8008b92:	2b08      	cmp	r3, #8
 8008b94:	d007      	beq.n	8008ba6 <USART_SetConfig+0x122>
 8008b96:	2b0c      	cmp	r3, #12
 8008b98:	d00f      	beq.n	8008bba <USART_SetConfig+0x136>
 8008b9a:	e013      	b.n	8008bc4 <USART_SetConfig+0x140>
 8008b9c:	231f      	movs	r3, #31
 8008b9e:	18fb      	adds	r3, r7, r3
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	701a      	strb	r2, [r3, #0]
 8008ba4:	e02c      	b.n	8008c00 <USART_SetConfig+0x17c>
 8008ba6:	231f      	movs	r3, #31
 8008ba8:	18fb      	adds	r3, r7, r3
 8008baa:	2202      	movs	r2, #2
 8008bac:	701a      	strb	r2, [r3, #0]
 8008bae:	e027      	b.n	8008c00 <USART_SetConfig+0x17c>
 8008bb0:	231f      	movs	r3, #31
 8008bb2:	18fb      	adds	r3, r7, r3
 8008bb4:	2204      	movs	r2, #4
 8008bb6:	701a      	strb	r2, [r3, #0]
 8008bb8:	e022      	b.n	8008c00 <USART_SetConfig+0x17c>
 8008bba:	231f      	movs	r3, #31
 8008bbc:	18fb      	adds	r3, r7, r3
 8008bbe:	2208      	movs	r2, #8
 8008bc0:	701a      	strb	r2, [r3, #0]
 8008bc2:	e01d      	b.n	8008c00 <USART_SetConfig+0x17c>
 8008bc4:	231f      	movs	r3, #31
 8008bc6:	18fb      	adds	r3, r7, r3
 8008bc8:	2210      	movs	r2, #16
 8008bca:	701a      	strb	r2, [r3, #0]
 8008bcc:	46c0      	nop			; (mov r8, r8)
 8008bce:	e017      	b.n	8008c00 <USART_SetConfig+0x17c>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a73      	ldr	r2, [pc, #460]	; (8008da4 <USART_SetConfig+0x320>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d104      	bne.n	8008be4 <USART_SetConfig+0x160>
 8008bda:	231f      	movs	r3, #31
 8008bdc:	18fb      	adds	r3, r7, r3
 8008bde:	2200      	movs	r2, #0
 8008be0:	701a      	strb	r2, [r3, #0]
 8008be2:	e00d      	b.n	8008c00 <USART_SetConfig+0x17c>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a6f      	ldr	r2, [pc, #444]	; (8008da8 <USART_SetConfig+0x324>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d104      	bne.n	8008bf8 <USART_SetConfig+0x174>
 8008bee:	231f      	movs	r3, #31
 8008bf0:	18fb      	adds	r3, r7, r3
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	701a      	strb	r2, [r3, #0]
 8008bf6:	e003      	b.n	8008c00 <USART_SetConfig+0x17c>
 8008bf8:	231f      	movs	r3, #31
 8008bfa:	18fb      	adds	r3, r7, r3
 8008bfc:	2210      	movs	r2, #16
 8008bfe:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 8008c00:	231f      	movs	r3, #31
 8008c02:	18fb      	adds	r3, r7, r3
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d100      	bne.n	8008c0c <USART_SetConfig+0x188>
 8008c0a:	e06b      	b.n	8008ce4 <USART_SetConfig+0x260>
 8008c0c:	dc02      	bgt.n	8008c14 <USART_SetConfig+0x190>
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d007      	beq.n	8008c22 <USART_SetConfig+0x19e>
 8008c12:	e1a4      	b.n	8008f5e <USART_SetConfig+0x4da>
 8008c14:	2b04      	cmp	r3, #4
 8008c16:	d100      	bne.n	8008c1a <USART_SetConfig+0x196>
 8008c18:	e0e0      	b.n	8008ddc <USART_SetConfig+0x358>
 8008c1a:	2b08      	cmp	r3, #8
 8008c1c:	d100      	bne.n	8008c20 <USART_SetConfig+0x19c>
 8008c1e:	e13e      	b.n	8008e9e <USART_SetConfig+0x41a>
 8008c20:	e19d      	b.n	8008f5e <USART_SetConfig+0x4da>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c22:	f7fc fe2b 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 8008c26:	0003      	movs	r3, r0
 8008c28:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d044      	beq.n	8008cbc <USART_SetConfig+0x238>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d03e      	beq.n	8008cb8 <USART_SetConfig+0x234>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d038      	beq.n	8008cb4 <USART_SetConfig+0x230>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c46:	2b03      	cmp	r3, #3
 8008c48:	d032      	beq.n	8008cb0 <USART_SetConfig+0x22c>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4e:	2b04      	cmp	r3, #4
 8008c50:	d02c      	beq.n	8008cac <USART_SetConfig+0x228>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c56:	2b05      	cmp	r3, #5
 8008c58:	d026      	beq.n	8008ca8 <USART_SetConfig+0x224>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5e:	2b06      	cmp	r3, #6
 8008c60:	d020      	beq.n	8008ca4 <USART_SetConfig+0x220>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c66:	2b07      	cmp	r3, #7
 8008c68:	d01a      	beq.n	8008ca0 <USART_SetConfig+0x21c>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6e:	2b08      	cmp	r3, #8
 8008c70:	d014      	beq.n	8008c9c <USART_SetConfig+0x218>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c76:	2b09      	cmp	r3, #9
 8008c78:	d00e      	beq.n	8008c98 <USART_SetConfig+0x214>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7e:	2b0a      	cmp	r3, #10
 8008c80:	d008      	beq.n	8008c94 <USART_SetConfig+0x210>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c86:	2b0b      	cmp	r3, #11
 8008c88:	d102      	bne.n	8008c90 <USART_SetConfig+0x20c>
 8008c8a:	2380      	movs	r3, #128	; 0x80
 8008c8c:	005b      	lsls	r3, r3, #1
 8008c8e:	e016      	b.n	8008cbe <USART_SetConfig+0x23a>
 8008c90:	2301      	movs	r3, #1
 8008c92:	e014      	b.n	8008cbe <USART_SetConfig+0x23a>
 8008c94:	2380      	movs	r3, #128	; 0x80
 8008c96:	e012      	b.n	8008cbe <USART_SetConfig+0x23a>
 8008c98:	2340      	movs	r3, #64	; 0x40
 8008c9a:	e010      	b.n	8008cbe <USART_SetConfig+0x23a>
 8008c9c:	2320      	movs	r3, #32
 8008c9e:	e00e      	b.n	8008cbe <USART_SetConfig+0x23a>
 8008ca0:	2310      	movs	r3, #16
 8008ca2:	e00c      	b.n	8008cbe <USART_SetConfig+0x23a>
 8008ca4:	230c      	movs	r3, #12
 8008ca6:	e00a      	b.n	8008cbe <USART_SetConfig+0x23a>
 8008ca8:	230a      	movs	r3, #10
 8008caa:	e008      	b.n	8008cbe <USART_SetConfig+0x23a>
 8008cac:	2308      	movs	r3, #8
 8008cae:	e006      	b.n	8008cbe <USART_SetConfig+0x23a>
 8008cb0:	2306      	movs	r3, #6
 8008cb2:	e004      	b.n	8008cbe <USART_SetConfig+0x23a>
 8008cb4:	2304      	movs	r3, #4
 8008cb6:	e002      	b.n	8008cbe <USART_SetConfig+0x23a>
 8008cb8:	2302      	movs	r3, #2
 8008cba:	e000      	b.n	8008cbe <USART_SetConfig+0x23a>
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	0019      	movs	r1, r3
 8008cc0:	6938      	ldr	r0, [r7, #16]
 8008cc2:	f7f7 fa1f 	bl	8000104 <__udivsi3>
 8008cc6:	0003      	movs	r3, r0
 8008cc8:	005a      	lsls	r2, r3, #1
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	085b      	lsrs	r3, r3, #1
 8008cd0:	18d2      	adds	r2, r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	0019      	movs	r1, r3
 8008cd8:	0010      	movs	r0, r2
 8008cda:	f7f7 fa13 	bl	8000104 <__udivsi3>
 8008cde:	0003      	movs	r3, r0
 8008ce0:	61bb      	str	r3, [r7, #24]
      break;
 8008ce2:	e141      	b.n	8008f68 <USART_SetConfig+0x4e4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d043      	beq.n	8008d74 <USART_SetConfig+0x2f0>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d03d      	beq.n	8008d70 <USART_SetConfig+0x2ec>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d037      	beq.n	8008d6c <USART_SetConfig+0x2e8>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d00:	2b03      	cmp	r3, #3
 8008d02:	d031      	beq.n	8008d68 <USART_SetConfig+0x2e4>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d08:	2b04      	cmp	r3, #4
 8008d0a:	d02b      	beq.n	8008d64 <USART_SetConfig+0x2e0>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d10:	2b05      	cmp	r3, #5
 8008d12:	d025      	beq.n	8008d60 <USART_SetConfig+0x2dc>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d18:	2b06      	cmp	r3, #6
 8008d1a:	d01f      	beq.n	8008d5c <USART_SetConfig+0x2d8>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d20:	2b07      	cmp	r3, #7
 8008d22:	d019      	beq.n	8008d58 <USART_SetConfig+0x2d4>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d28:	2b08      	cmp	r3, #8
 8008d2a:	d013      	beq.n	8008d54 <USART_SetConfig+0x2d0>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d30:	2b09      	cmp	r3, #9
 8008d32:	d00d      	beq.n	8008d50 <USART_SetConfig+0x2cc>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d38:	2b0a      	cmp	r3, #10
 8008d3a:	d007      	beq.n	8008d4c <USART_SetConfig+0x2c8>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d40:	2b0b      	cmp	r3, #11
 8008d42:	d101      	bne.n	8008d48 <USART_SetConfig+0x2c4>
 8008d44:	4b19      	ldr	r3, [pc, #100]	; (8008dac <USART_SetConfig+0x328>)
 8008d46:	e016      	b.n	8008d76 <USART_SetConfig+0x2f2>
 8008d48:	4b19      	ldr	r3, [pc, #100]	; (8008db0 <USART_SetConfig+0x32c>)
 8008d4a:	e014      	b.n	8008d76 <USART_SetConfig+0x2f2>
 8008d4c:	4b19      	ldr	r3, [pc, #100]	; (8008db4 <USART_SetConfig+0x330>)
 8008d4e:	e012      	b.n	8008d76 <USART_SetConfig+0x2f2>
 8008d50:	4b19      	ldr	r3, [pc, #100]	; (8008db8 <USART_SetConfig+0x334>)
 8008d52:	e010      	b.n	8008d76 <USART_SetConfig+0x2f2>
 8008d54:	4b19      	ldr	r3, [pc, #100]	; (8008dbc <USART_SetConfig+0x338>)
 8008d56:	e00e      	b.n	8008d76 <USART_SetConfig+0x2f2>
 8008d58:	4b19      	ldr	r3, [pc, #100]	; (8008dc0 <USART_SetConfig+0x33c>)
 8008d5a:	e00c      	b.n	8008d76 <USART_SetConfig+0x2f2>
 8008d5c:	4b19      	ldr	r3, [pc, #100]	; (8008dc4 <USART_SetConfig+0x340>)
 8008d5e:	e00a      	b.n	8008d76 <USART_SetConfig+0x2f2>
 8008d60:	4b19      	ldr	r3, [pc, #100]	; (8008dc8 <USART_SetConfig+0x344>)
 8008d62:	e008      	b.n	8008d76 <USART_SetConfig+0x2f2>
 8008d64:	4b19      	ldr	r3, [pc, #100]	; (8008dcc <USART_SetConfig+0x348>)
 8008d66:	e006      	b.n	8008d76 <USART_SetConfig+0x2f2>
 8008d68:	4b19      	ldr	r3, [pc, #100]	; (8008dd0 <USART_SetConfig+0x34c>)
 8008d6a:	e004      	b.n	8008d76 <USART_SetConfig+0x2f2>
 8008d6c:	4b19      	ldr	r3, [pc, #100]	; (8008dd4 <USART_SetConfig+0x350>)
 8008d6e:	e002      	b.n	8008d76 <USART_SetConfig+0x2f2>
 8008d70:	4b19      	ldr	r3, [pc, #100]	; (8008dd8 <USART_SetConfig+0x354>)
 8008d72:	e000      	b.n	8008d76 <USART_SetConfig+0x2f2>
 8008d74:	4b0e      	ldr	r3, [pc, #56]	; (8008db0 <USART_SetConfig+0x32c>)
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	6852      	ldr	r2, [r2, #4]
 8008d7a:	0852      	lsrs	r2, r2, #1
 8008d7c:	189a      	adds	r2, r3, r2
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	0019      	movs	r1, r3
 8008d84:	0010      	movs	r0, r2
 8008d86:	f7f7 f9bd 	bl	8000104 <__udivsi3>
 8008d8a:	0003      	movs	r3, r0
 8008d8c:	61bb      	str	r3, [r7, #24]
      break;
 8008d8e:	e0eb      	b.n	8008f68 <USART_SetConfig+0x4e4>
 8008d90:	cfff69f3 	.word	0xcfff69f3
 8008d94:	ffffc0f6 	.word	0xffffc0f6
 8008d98:	40013800 	.word	0x40013800
 8008d9c:	40021000 	.word	0x40021000
 8008da0:	40004400 	.word	0x40004400
 8008da4:	40004800 	.word	0x40004800
 8008da8:	40004c00 	.word	0x40004c00
 8008dac:	0001e848 	.word	0x0001e848
 8008db0:	01e84800 	.word	0x01e84800
 8008db4:	0003d090 	.word	0x0003d090
 8008db8:	0007a120 	.word	0x0007a120
 8008dbc:	000f4240 	.word	0x000f4240
 8008dc0:	001e8480 	.word	0x001e8480
 8008dc4:	0028b0aa 	.word	0x0028b0aa
 8008dc8:	0030d400 	.word	0x0030d400
 8008dcc:	003d0900 	.word	0x003d0900
 8008dd0:	00516154 	.word	0x00516154
 8008dd4:	007a1200 	.word	0x007a1200
 8008dd8:	00f42400 	.word	0x00f42400
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8008ddc:	f7fc fcc2 	bl	8005764 <HAL_RCC_GetSysClockFreq>
 8008de0:	0003      	movs	r3, r0
 8008de2:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d044      	beq.n	8008e76 <USART_SetConfig+0x3f2>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d03e      	beq.n	8008e72 <USART_SetConfig+0x3ee>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d038      	beq.n	8008e6e <USART_SetConfig+0x3ea>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e00:	2b03      	cmp	r3, #3
 8008e02:	d032      	beq.n	8008e6a <USART_SetConfig+0x3e6>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e08:	2b04      	cmp	r3, #4
 8008e0a:	d02c      	beq.n	8008e66 <USART_SetConfig+0x3e2>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e10:	2b05      	cmp	r3, #5
 8008e12:	d026      	beq.n	8008e62 <USART_SetConfig+0x3de>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e18:	2b06      	cmp	r3, #6
 8008e1a:	d020      	beq.n	8008e5e <USART_SetConfig+0x3da>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e20:	2b07      	cmp	r3, #7
 8008e22:	d01a      	beq.n	8008e5a <USART_SetConfig+0x3d6>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e28:	2b08      	cmp	r3, #8
 8008e2a:	d014      	beq.n	8008e56 <USART_SetConfig+0x3d2>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e30:	2b09      	cmp	r3, #9
 8008e32:	d00e      	beq.n	8008e52 <USART_SetConfig+0x3ce>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e38:	2b0a      	cmp	r3, #10
 8008e3a:	d008      	beq.n	8008e4e <USART_SetConfig+0x3ca>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e40:	2b0b      	cmp	r3, #11
 8008e42:	d102      	bne.n	8008e4a <USART_SetConfig+0x3c6>
 8008e44:	2380      	movs	r3, #128	; 0x80
 8008e46:	005b      	lsls	r3, r3, #1
 8008e48:	e016      	b.n	8008e78 <USART_SetConfig+0x3f4>
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e014      	b.n	8008e78 <USART_SetConfig+0x3f4>
 8008e4e:	2380      	movs	r3, #128	; 0x80
 8008e50:	e012      	b.n	8008e78 <USART_SetConfig+0x3f4>
 8008e52:	2340      	movs	r3, #64	; 0x40
 8008e54:	e010      	b.n	8008e78 <USART_SetConfig+0x3f4>
 8008e56:	2320      	movs	r3, #32
 8008e58:	e00e      	b.n	8008e78 <USART_SetConfig+0x3f4>
 8008e5a:	2310      	movs	r3, #16
 8008e5c:	e00c      	b.n	8008e78 <USART_SetConfig+0x3f4>
 8008e5e:	230c      	movs	r3, #12
 8008e60:	e00a      	b.n	8008e78 <USART_SetConfig+0x3f4>
 8008e62:	230a      	movs	r3, #10
 8008e64:	e008      	b.n	8008e78 <USART_SetConfig+0x3f4>
 8008e66:	2308      	movs	r3, #8
 8008e68:	e006      	b.n	8008e78 <USART_SetConfig+0x3f4>
 8008e6a:	2306      	movs	r3, #6
 8008e6c:	e004      	b.n	8008e78 <USART_SetConfig+0x3f4>
 8008e6e:	2304      	movs	r3, #4
 8008e70:	e002      	b.n	8008e78 <USART_SetConfig+0x3f4>
 8008e72:	2302      	movs	r3, #2
 8008e74:	e000      	b.n	8008e78 <USART_SetConfig+0x3f4>
 8008e76:	2301      	movs	r3, #1
 8008e78:	0019      	movs	r1, r3
 8008e7a:	6938      	ldr	r0, [r7, #16]
 8008e7c:	f7f7 f942 	bl	8000104 <__udivsi3>
 8008e80:	0003      	movs	r3, r0
 8008e82:	005a      	lsls	r2, r3, #1
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	085b      	lsrs	r3, r3, #1
 8008e8a:	18d2      	adds	r2, r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	0019      	movs	r1, r3
 8008e92:	0010      	movs	r0, r2
 8008e94:	f7f7 f936 	bl	8000104 <__udivsi3>
 8008e98:	0003      	movs	r3, r0
 8008e9a:	61bb      	str	r3, [r7, #24]
      break;
 8008e9c:	e064      	b.n	8008f68 <USART_SetConfig+0x4e4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8((uint32_t)LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d04c      	beq.n	8008f40 <USART_SetConfig+0x4bc>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d045      	beq.n	8008f3a <USART_SetConfig+0x4b6>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb2:	2b02      	cmp	r3, #2
 8008eb4:	d03e      	beq.n	8008f34 <USART_SetConfig+0x4b0>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eba:	2b03      	cmp	r3, #3
 8008ebc:	d038      	beq.n	8008f30 <USART_SetConfig+0x4ac>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec2:	2b04      	cmp	r3, #4
 8008ec4:	d031      	beq.n	8008f2a <USART_SetConfig+0x4a6>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eca:	2b05      	cmp	r3, #5
 8008ecc:	d02b      	beq.n	8008f26 <USART_SetConfig+0x4a2>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed2:	2b06      	cmp	r3, #6
 8008ed4:	d025      	beq.n	8008f22 <USART_SetConfig+0x49e>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eda:	2b07      	cmp	r3, #7
 8008edc:	d01e      	beq.n	8008f1c <USART_SetConfig+0x498>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee2:	2b08      	cmp	r3, #8
 8008ee4:	d017      	beq.n	8008f16 <USART_SetConfig+0x492>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eea:	2b09      	cmp	r3, #9
 8008eec:	d010      	beq.n	8008f10 <USART_SetConfig+0x48c>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef2:	2b0a      	cmp	r3, #10
 8008ef4:	d009      	beq.n	8008f0a <USART_SetConfig+0x486>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efa:	2b0b      	cmp	r3, #11
 8008efc:	d102      	bne.n	8008f04 <USART_SetConfig+0x480>
 8008efe:	2380      	movs	r3, #128	; 0x80
 8008f00:	005b      	lsls	r3, r3, #1
 8008f02:	e01f      	b.n	8008f44 <USART_SetConfig+0x4c0>
 8008f04:	2380      	movs	r3, #128	; 0x80
 8008f06:	025b      	lsls	r3, r3, #9
 8008f08:	e01c      	b.n	8008f44 <USART_SetConfig+0x4c0>
 8008f0a:	2380      	movs	r3, #128	; 0x80
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	e019      	b.n	8008f44 <USART_SetConfig+0x4c0>
 8008f10:	2380      	movs	r3, #128	; 0x80
 8008f12:	00db      	lsls	r3, r3, #3
 8008f14:	e016      	b.n	8008f44 <USART_SetConfig+0x4c0>
 8008f16:	2380      	movs	r3, #128	; 0x80
 8008f18:	011b      	lsls	r3, r3, #4
 8008f1a:	e013      	b.n	8008f44 <USART_SetConfig+0x4c0>
 8008f1c:	2380      	movs	r3, #128	; 0x80
 8008f1e:	015b      	lsls	r3, r3, #5
 8008f20:	e010      	b.n	8008f44 <USART_SetConfig+0x4c0>
 8008f22:	4b2c      	ldr	r3, [pc, #176]	; (8008fd4 <USART_SetConfig+0x550>)
 8008f24:	e00e      	b.n	8008f44 <USART_SetConfig+0x4c0>
 8008f26:	4b2c      	ldr	r3, [pc, #176]	; (8008fd8 <USART_SetConfig+0x554>)
 8008f28:	e00c      	b.n	8008f44 <USART_SetConfig+0x4c0>
 8008f2a:	2380      	movs	r3, #128	; 0x80
 8008f2c:	019b      	lsls	r3, r3, #6
 8008f2e:	e009      	b.n	8008f44 <USART_SetConfig+0x4c0>
 8008f30:	4b2a      	ldr	r3, [pc, #168]	; (8008fdc <USART_SetConfig+0x558>)
 8008f32:	e007      	b.n	8008f44 <USART_SetConfig+0x4c0>
 8008f34:	2380      	movs	r3, #128	; 0x80
 8008f36:	01db      	lsls	r3, r3, #7
 8008f38:	e004      	b.n	8008f44 <USART_SetConfig+0x4c0>
 8008f3a:	2380      	movs	r3, #128	; 0x80
 8008f3c:	021b      	lsls	r3, r3, #8
 8008f3e:	e001      	b.n	8008f44 <USART_SetConfig+0x4c0>
 8008f40:	2380      	movs	r3, #128	; 0x80
 8008f42:	025b      	lsls	r3, r3, #9
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	6852      	ldr	r2, [r2, #4]
 8008f48:	0852      	lsrs	r2, r2, #1
 8008f4a:	189a      	adds	r2, r3, r2
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	0019      	movs	r1, r3
 8008f52:	0010      	movs	r0, r2
 8008f54:	f7f7 f8d6 	bl	8000104 <__udivsi3>
 8008f58:	0003      	movs	r3, r0
 8008f5a:	61bb      	str	r3, [r7, #24]
      break;
 8008f5c:	e004      	b.n	8008f68 <USART_SetConfig+0x4e4>
    default:
      ret = HAL_ERROR;
 8008f5e:	231e      	movs	r3, #30
 8008f60:	18fb      	adds	r3, r7, r3
 8008f62:	2201      	movs	r2, #1
 8008f64:	701a      	strb	r2, [r3, #0]
      break;
 8008f66:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	2b0f      	cmp	r3, #15
 8008f6c:	d91b      	bls.n	8008fa6 <USART_SetConfig+0x522>
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	4a1b      	ldr	r2, [pc, #108]	; (8008fe0 <USART_SetConfig+0x55c>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d817      	bhi.n	8008fa6 <USART_SetConfig+0x522>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	b29a      	uxth	r2, r3
 8008f7a:	200e      	movs	r0, #14
 8008f7c:	183b      	adds	r3, r7, r0
 8008f7e:	210f      	movs	r1, #15
 8008f80:	438a      	bics	r2, r1
 8008f82:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f84:	69bb      	ldr	r3, [r7, #24]
 8008f86:	085b      	lsrs	r3, r3, #1
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	2207      	movs	r2, #7
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	b299      	uxth	r1, r3
 8008f90:	183b      	adds	r3, r7, r0
 8008f92:	183a      	adds	r2, r7, r0
 8008f94:	8812      	ldrh	r2, [r2, #0]
 8008f96:	430a      	orrs	r2, r1
 8008f98:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	183a      	adds	r2, r7, r0
 8008fa0:	8812      	ldrh	r2, [r2, #0]
 8008fa2:	60da      	str	r2, [r3, #12]
 8008fa4:	e003      	b.n	8008fae <USART_SetConfig+0x52a>
  }
  else
  {
    ret = HAL_ERROR;
 8008fa6:	231e      	movs	r3, #30
 8008fa8:	18fb      	adds	r3, r7, r3
 8008faa:	2201      	movs	r2, #1
 8008fac:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8008fc6:	231e      	movs	r3, #30
 8008fc8:	18fb      	adds	r3, r7, r3
 8008fca:	781b      	ldrb	r3, [r3, #0]
}
 8008fcc:	0018      	movs	r0, r3
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	b008      	add	sp, #32
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	00001554 	.word	0x00001554
 8008fd8:	00001998 	.word	0x00001998
 8008fdc:	00002aaa 	.word	0x00002aaa
 8008fe0:	0000ffff 	.word	0x0000ffff

08008fe4 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b086      	sub	sp, #24
 8008fe8:	af02      	add	r7, sp, #8
 8008fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ff2:	f7f9 ff4d 	bl	8002e90 <HAL_GetTick>
 8008ff6:	0003      	movs	r3, r0
 8008ff8:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2208      	movs	r2, #8
 8009002:	4013      	ands	r3, r2
 8009004:	2b08      	cmp	r3, #8
 8009006:	d10e      	bne.n	8009026 <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	2380      	movs	r3, #128	; 0x80
 800900c:	0399      	lsls	r1, r3, #14
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	23fa      	movs	r3, #250	; 0xfa
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	0013      	movs	r3, r2
 8009018:	2200      	movs	r2, #0
 800901a:	f7ff fcfe 	bl	8008a1a <USART_WaitOnFlagUntilTimeout>
 800901e:	1e03      	subs	r3, r0, #0
 8009020:	d001      	beq.n	8009026 <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009022:	2303      	movs	r3, #3
 8009024:	e01e      	b.n	8009064 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2204      	movs	r2, #4
 800902e:	4013      	ands	r3, r2
 8009030:	2b04      	cmp	r3, #4
 8009032:	d10e      	bne.n	8009052 <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	2380      	movs	r3, #128	; 0x80
 8009038:	03d9      	lsls	r1, r3, #15
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	23fa      	movs	r3, #250	; 0xfa
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	9300      	str	r3, [sp, #0]
 8009042:	0013      	movs	r3, r2
 8009044:	2200      	movs	r2, #0
 8009046:	f7ff fce8 	bl	8008a1a <USART_WaitOnFlagUntilTimeout>
 800904a:	1e03      	subs	r3, r0, #0
 800904c:	d001      	beq.n	8009052 <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800904e:	2303      	movs	r3, #3
 8009050:	e008      	b.n	8009064 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2259      	movs	r2, #89	; 0x59
 8009056:	2101      	movs	r1, #1
 8009058:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2258      	movs	r2, #88	; 0x58
 800905e:	2100      	movs	r1, #0
 8009060:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	0018      	movs	r0, r3
 8009066:	46bd      	mov	sp, r7
 8009068:	b004      	add	sp, #16
 800906a:	bd80      	pop	{r7, pc}

0800906c <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2140      	movs	r1, #64	; 0x40
 8009080:	438a      	bics	r2, r1
 8009082:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	689a      	ldr	r2, [r3, #8]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2101      	movs	r1, #1
 8009090:	438a      	bics	r2, r1
 8009092:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2259      	movs	r2, #89	; 0x59
 800909e:	5c9b      	ldrb	r3, [r3, r2]
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	2b12      	cmp	r3, #18
 80090a4:	d114      	bne.n	80090d0 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2208      	movs	r2, #8
 80090ac:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	699a      	ldr	r2, [r3, #24]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2108      	movs	r1, #8
 80090ba:	430a      	orrs	r2, r1
 80090bc:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2259      	movs	r2, #89	; 0x59
 80090c2:	2101      	movs	r1, #1
 80090c4:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	0018      	movs	r0, r3
 80090ca:	f7ff fc59 	bl	8008980 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80090ce:	e00c      	b.n	80090ea <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d107      	bne.n	80090ea <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2259      	movs	r2, #89	; 0x59
 80090de:	2101      	movs	r1, #1
 80090e0:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	0018      	movs	r0, r3
 80090e6:	f7ff fc53 	bl	8008990 <HAL_USART_TxRxCpltCallback>
}
 80090ea:	46c0      	nop			; (mov r8, r8)
 80090ec:	46bd      	mov	sp, r7
 80090ee:	b002      	add	sp, #8
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b082      	sub	sp, #8
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80090fa:	46c0      	nop			; (mov r8, r8)
 80090fc:	46bd      	mov	sp, r7
 80090fe:	b002      	add	sp, #8
 8009100:	bd80      	pop	{r7, pc}

08009102 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b082      	sub	sp, #8
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800910a:	46c0      	nop			; (mov r8, r8)
 800910c:	46bd      	mov	sp, r7
 800910e:	b002      	add	sp, #8
 8009110:	bd80      	pop	{r7, pc}

08009112 <LL_GPIO_SetPinMode>:
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b084      	sub	sp, #16
 8009116:	af00      	add	r7, sp, #0
 8009118:	60f8      	str	r0, [r7, #12]
 800911a:	60b9      	str	r1, [r7, #8]
 800911c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6819      	ldr	r1, [r3, #0]
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	435a      	muls	r2, r3
 8009128:	0013      	movs	r3, r2
 800912a:	005b      	lsls	r3, r3, #1
 800912c:	189b      	adds	r3, r3, r2
 800912e:	43db      	mvns	r3, r3
 8009130:	400b      	ands	r3, r1
 8009132:	001a      	movs	r2, r3
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	68b9      	ldr	r1, [r7, #8]
 8009138:	434b      	muls	r3, r1
 800913a:	6879      	ldr	r1, [r7, #4]
 800913c:	434b      	muls	r3, r1
 800913e:	431a      	orrs	r2, r3
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	601a      	str	r2, [r3, #0]
}
 8009144:	46c0      	nop			; (mov r8, r8)
 8009146:	46bd      	mov	sp, r7
 8009148:	b004      	add	sp, #16
 800914a:	bd80      	pop	{r7, pc}

0800914c <LL_GPIO_SetPinOutputType>:
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	68ba      	ldr	r2, [r7, #8]
 800915e:	43d2      	mvns	r2, r2
 8009160:	401a      	ands	r2, r3
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	6879      	ldr	r1, [r7, #4]
 8009166:	434b      	muls	r3, r1
 8009168:	431a      	orrs	r2, r3
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	605a      	str	r2, [r3, #4]
}
 800916e:	46c0      	nop			; (mov r8, r8)
 8009170:	46bd      	mov	sp, r7
 8009172:	b004      	add	sp, #16
 8009174:	bd80      	pop	{r7, pc}

08009176 <LL_GPIO_SetPinSpeed>:
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b084      	sub	sp, #16
 800917a:	af00      	add	r7, sp, #0
 800917c:	60f8      	str	r0, [r7, #12]
 800917e:	60b9      	str	r1, [r7, #8]
 8009180:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6899      	ldr	r1, [r3, #8]
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	68ba      	ldr	r2, [r7, #8]
 800918a:	435a      	muls	r2, r3
 800918c:	0013      	movs	r3, r2
 800918e:	005b      	lsls	r3, r3, #1
 8009190:	189b      	adds	r3, r3, r2
 8009192:	43db      	mvns	r3, r3
 8009194:	400b      	ands	r3, r1
 8009196:	001a      	movs	r2, r3
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	68b9      	ldr	r1, [r7, #8]
 800919c:	434b      	muls	r3, r1
 800919e:	6879      	ldr	r1, [r7, #4]
 80091a0:	434b      	muls	r3, r1
 80091a2:	431a      	orrs	r2, r3
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	609a      	str	r2, [r3, #8]
}
 80091a8:	46c0      	nop			; (mov r8, r8)
 80091aa:	46bd      	mov	sp, r7
 80091ac:	b004      	add	sp, #16
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <LL_GPIO_SetPinPull>:
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	68d9      	ldr	r1, [r3, #12]
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	435a      	muls	r2, r3
 80091c6:	0013      	movs	r3, r2
 80091c8:	005b      	lsls	r3, r3, #1
 80091ca:	189b      	adds	r3, r3, r2
 80091cc:	43db      	mvns	r3, r3
 80091ce:	400b      	ands	r3, r1
 80091d0:	001a      	movs	r2, r3
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	68b9      	ldr	r1, [r7, #8]
 80091d6:	434b      	muls	r3, r1
 80091d8:	6879      	ldr	r1, [r7, #4]
 80091da:	434b      	muls	r3, r1
 80091dc:	431a      	orrs	r2, r3
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	60da      	str	r2, [r3, #12]
}
 80091e2:	46c0      	nop			; (mov r8, r8)
 80091e4:	46bd      	mov	sp, r7
 80091e6:	b004      	add	sp, #16
 80091e8:	bd80      	pop	{r7, pc}

080091ea <LL_GPIO_SetAFPin_0_7>:
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b084      	sub	sp, #16
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	60f8      	str	r0, [r7, #12]
 80091f2:	60b9      	str	r1, [r7, #8]
 80091f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6a19      	ldr	r1, [r3, #32]
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	68ba      	ldr	r2, [r7, #8]
 80091fe:	4353      	muls	r3, r2
 8009200:	68ba      	ldr	r2, [r7, #8]
 8009202:	4353      	muls	r3, r2
 8009204:	68ba      	ldr	r2, [r7, #8]
 8009206:	435a      	muls	r2, r3
 8009208:	0013      	movs	r3, r2
 800920a:	011b      	lsls	r3, r3, #4
 800920c:	1a9b      	subs	r3, r3, r2
 800920e:	43db      	mvns	r3, r3
 8009210:	400b      	ands	r3, r1
 8009212:	001a      	movs	r2, r3
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	68b9      	ldr	r1, [r7, #8]
 8009218:	434b      	muls	r3, r1
 800921a:	68b9      	ldr	r1, [r7, #8]
 800921c:	434b      	muls	r3, r1
 800921e:	68b9      	ldr	r1, [r7, #8]
 8009220:	434b      	muls	r3, r1
 8009222:	6879      	ldr	r1, [r7, #4]
 8009224:	434b      	muls	r3, r1
 8009226:	431a      	orrs	r2, r3
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	621a      	str	r2, [r3, #32]
}
 800922c:	46c0      	nop			; (mov r8, r8)
 800922e:	46bd      	mov	sp, r7
 8009230:	b004      	add	sp, #16
 8009232:	bd80      	pop	{r7, pc}

08009234 <LL_GPIO_SetAFPin_8_15>:
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	0a1b      	lsrs	r3, r3, #8
 8009248:	68ba      	ldr	r2, [r7, #8]
 800924a:	0a12      	lsrs	r2, r2, #8
 800924c:	4353      	muls	r3, r2
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	0a12      	lsrs	r2, r2, #8
 8009252:	4353      	muls	r3, r2
 8009254:	68ba      	ldr	r2, [r7, #8]
 8009256:	0a12      	lsrs	r2, r2, #8
 8009258:	435a      	muls	r2, r3
 800925a:	0013      	movs	r3, r2
 800925c:	011b      	lsls	r3, r3, #4
 800925e:	1a9b      	subs	r3, r3, r2
 8009260:	43db      	mvns	r3, r3
 8009262:	400b      	ands	r3, r1
 8009264:	001a      	movs	r2, r3
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	0a1b      	lsrs	r3, r3, #8
 800926a:	68b9      	ldr	r1, [r7, #8]
 800926c:	0a09      	lsrs	r1, r1, #8
 800926e:	434b      	muls	r3, r1
 8009270:	68b9      	ldr	r1, [r7, #8]
 8009272:	0a09      	lsrs	r1, r1, #8
 8009274:	434b      	muls	r3, r1
 8009276:	68b9      	ldr	r1, [r7, #8]
 8009278:	0a09      	lsrs	r1, r1, #8
 800927a:	434b      	muls	r3, r1
 800927c:	6879      	ldr	r1, [r7, #4]
 800927e:	434b      	muls	r3, r1
 8009280:	431a      	orrs	r2, r3
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009286:	46c0      	nop			; (mov r8, r8)
 8009288:	46bd      	mov	sp, r7
 800928a:	b004      	add	sp, #16
 800928c:	bd80      	pop	{r7, pc}

0800928e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b084      	sub	sp, #16
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
 8009296:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8009298:	2300      	movs	r3, #0
 800929a:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800929c:	e047      	b.n	800932e <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2101      	movs	r1, #1
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	4091      	lsls	r1, r2
 80092a8:	000a      	movs	r2, r1
 80092aa:	4013      	ands	r3, r2
 80092ac:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d039      	beq.n	8009328 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d003      	beq.n	80092c4 <LL_GPIO_Init+0x36>
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	2b02      	cmp	r3, #2
 80092c2:	d10d      	bne.n	80092e0 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	689a      	ldr	r2, [r3, #8]
 80092c8:	68b9      	ldr	r1, [r7, #8]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	0018      	movs	r0, r3
 80092ce:	f7ff ff52 	bl	8009176 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	68da      	ldr	r2, [r3, #12]
 80092d6:	68b9      	ldr	r1, [r7, #8]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	0018      	movs	r0, r3
 80092dc:	f7ff ff36 	bl	800914c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	691a      	ldr	r2, [r3, #16]
 80092e4:	68b9      	ldr	r1, [r7, #8]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	0018      	movs	r0, r3
 80092ea:	f7ff ff61 	bl	80091b0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	2b02      	cmp	r3, #2
 80092f4:	d111      	bne.n	800931a <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	2bff      	cmp	r3, #255	; 0xff
 80092fa:	d807      	bhi.n	800930c <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	695a      	ldr	r2, [r3, #20]
 8009300:	68b9      	ldr	r1, [r7, #8]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	0018      	movs	r0, r3
 8009306:	f7ff ff70 	bl	80091ea <LL_GPIO_SetAFPin_0_7>
 800930a:	e006      	b.n	800931a <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	695a      	ldr	r2, [r3, #20]
 8009310:	68b9      	ldr	r1, [r7, #8]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	0018      	movs	r0, r3
 8009316:	f7ff ff8d 	bl	8009234 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	685a      	ldr	r2, [r3, #4]
 800931e:	68b9      	ldr	r1, [r7, #8]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	0018      	movs	r0, r3
 8009324:	f7ff fef5 	bl	8009112 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	3301      	adds	r3, #1
 800932c:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	40da      	lsrs	r2, r3
 8009336:	1e13      	subs	r3, r2, #0
 8009338:	d1b1      	bne.n	800929e <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800933a:	2300      	movs	r3, #0
}
 800933c:	0018      	movs	r0, r3
 800933e:	46bd      	mov	sp, r7
 8009340:	b004      	add	sp, #16
 8009342:	bd80      	pop	{r7, pc}

08009344 <LL_RCC_HSI_IsReady>:
{
 8009344:	b580      	push	{r7, lr}
 8009346:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8009348:	4b07      	ldr	r3, [pc, #28]	; (8009368 <LL_RCC_HSI_IsReady+0x24>)
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	2380      	movs	r3, #128	; 0x80
 800934e:	00db      	lsls	r3, r3, #3
 8009350:	401a      	ands	r2, r3
 8009352:	2380      	movs	r3, #128	; 0x80
 8009354:	00db      	lsls	r3, r3, #3
 8009356:	429a      	cmp	r2, r3
 8009358:	d101      	bne.n	800935e <LL_RCC_HSI_IsReady+0x1a>
 800935a:	2301      	movs	r3, #1
 800935c:	e000      	b.n	8009360 <LL_RCC_HSI_IsReady+0x1c>
 800935e:	2300      	movs	r3, #0
}
 8009360:	0018      	movs	r0, r3
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	46c0      	nop			; (mov r8, r8)
 8009368:	40021000 	.word	0x40021000

0800936c <LL_RCC_LSE_IsReady>:
{
 800936c:	b580      	push	{r7, lr}
 800936e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009370:	4b05      	ldr	r3, [pc, #20]	; (8009388 <LL_RCC_LSE_IsReady+0x1c>)
 8009372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009374:	2202      	movs	r2, #2
 8009376:	4013      	ands	r3, r2
 8009378:	2b02      	cmp	r3, #2
 800937a:	d101      	bne.n	8009380 <LL_RCC_LSE_IsReady+0x14>
 800937c:	2301      	movs	r3, #1
 800937e:	e000      	b.n	8009382 <LL_RCC_LSE_IsReady+0x16>
 8009380:	2300      	movs	r3, #0
}
 8009382:	0018      	movs	r0, r3
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	40021000 	.word	0x40021000

0800938c <LL_RCC_GetSysClkSource>:
{
 800938c:	b580      	push	{r7, lr}
 800938e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009390:	4b03      	ldr	r3, [pc, #12]	; (80093a0 <LL_RCC_GetSysClkSource+0x14>)
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	2238      	movs	r2, #56	; 0x38
 8009396:	4013      	ands	r3, r2
}
 8009398:	0018      	movs	r0, r3
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	46c0      	nop			; (mov r8, r8)
 80093a0:	40021000 	.word	0x40021000

080093a4 <LL_RCC_GetAHBPrescaler>:
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80093a8:	4b03      	ldr	r3, [pc, #12]	; (80093b8 <LL_RCC_GetAHBPrescaler+0x14>)
 80093aa:	689a      	ldr	r2, [r3, #8]
 80093ac:	23f0      	movs	r3, #240	; 0xf0
 80093ae:	011b      	lsls	r3, r3, #4
 80093b0:	4013      	ands	r3, r2
}
 80093b2:	0018      	movs	r0, r3
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	40021000 	.word	0x40021000

080093bc <LL_RCC_GetAPB1Prescaler>:
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80093c0:	4b03      	ldr	r3, [pc, #12]	; (80093d0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80093c2:	689a      	ldr	r2, [r3, #8]
 80093c4:	23e0      	movs	r3, #224	; 0xe0
 80093c6:	01db      	lsls	r3, r3, #7
 80093c8:	4013      	ands	r3, r2
}
 80093ca:	0018      	movs	r0, r3
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	40021000 	.word	0x40021000

080093d4 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80093dc:	4b05      	ldr	r3, [pc, #20]	; (80093f4 <LL_RCC_GetUSARTClockSource+0x20>)
 80093de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	401a      	ands	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	041b      	lsls	r3, r3, #16
 80093e8:	4313      	orrs	r3, r2
}
 80093ea:	0018      	movs	r0, r3
 80093ec:	46bd      	mov	sp, r7
 80093ee:	b002      	add	sp, #8
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	46c0      	nop			; (mov r8, r8)
 80093f4:	40021000 	.word	0x40021000

080093f8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80093fc:	4b03      	ldr	r3, [pc, #12]	; (800940c <LL_RCC_PLL_GetN+0x14>)
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	0a1b      	lsrs	r3, r3, #8
 8009402:	227f      	movs	r2, #127	; 0x7f
 8009404:	4013      	ands	r3, r2
}
 8009406:	0018      	movs	r0, r3
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	40021000 	.word	0x40021000

08009410 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8009414:	4b03      	ldr	r3, [pc, #12]	; (8009424 <LL_RCC_PLL_GetR+0x14>)
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	0f5b      	lsrs	r3, r3, #29
 800941a:	075b      	lsls	r3, r3, #29
}
 800941c:	0018      	movs	r0, r3
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	46c0      	nop			; (mov r8, r8)
 8009424:	40021000 	.word	0x40021000

08009428 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800942c:	4b03      	ldr	r3, [pc, #12]	; (800943c <LL_RCC_PLL_GetMainSource+0x14>)
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	2203      	movs	r2, #3
 8009432:	4013      	ands	r3, r2
}
 8009434:	0018      	movs	r0, r3
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	46c0      	nop			; (mov r8, r8)
 800943c:	40021000 	.word	0x40021000

08009440 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8009444:	4b03      	ldr	r3, [pc, #12]	; (8009454 <LL_RCC_PLL_GetDivider+0x14>)
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	2270      	movs	r2, #112	; 0x70
 800944a:	4013      	ands	r3, r2
}
 800944c:	0018      	movs	r0, r3
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	46c0      	nop			; (mov r8, r8)
 8009454:	40021000 	.word	0x40021000

08009458 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8009460:	f000 f8a2 	bl	80095a8 <RCC_GetSystemClockFreq>
 8009464:	0002      	movs	r2, r0
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	0018      	movs	r0, r3
 8009470:	f000 f8c8 	bl	8009604 <RCC_GetHCLKClockFreq>
 8009474:	0002      	movs	r2, r0
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	0018      	movs	r0, r3
 8009480:	f000 f8d8 	bl	8009634 <RCC_GetPCLK1ClockFreq>
 8009484:	0002      	movs	r2, r0
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	609a      	str	r2, [r3, #8]
}
 800948a:	46c0      	nop			; (mov r8, r8)
 800948c:	46bd      	mov	sp, r7
 800948e:	b002      	add	sp, #8
 8009490:	bd80      	pop	{r7, pc}
	...

08009494 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800949c:	2300      	movs	r3, #0
 800949e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2b03      	cmp	r3, #3
 80094a4:	d131      	bne.n	800950a <LL_RCC_GetUSARTClockFreq+0x76>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	0018      	movs	r0, r3
 80094aa:	f7ff ff93 	bl	80093d4 <LL_RCC_GetUSARTClockSource>
 80094ae:	0003      	movs	r3, r0
 80094b0:	4a36      	ldr	r2, [pc, #216]	; (800958c <LL_RCC_GetUSARTClockFreq+0xf8>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d00a      	beq.n	80094cc <LL_RCC_GetUSARTClockFreq+0x38>
 80094b6:	4a36      	ldr	r2, [pc, #216]	; (8009590 <LL_RCC_GetUSARTClockFreq+0xfc>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d00f      	beq.n	80094dc <LL_RCC_GetUSARTClockFreq+0x48>
 80094bc:	4a35      	ldr	r2, [pc, #212]	; (8009594 <LL_RCC_GetUSARTClockFreq+0x100>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d115      	bne.n	80094ee <LL_RCC_GetUSARTClockFreq+0x5a>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80094c2:	f000 f871 	bl	80095a8 <RCC_GetSystemClockFreq>
 80094c6:	0003      	movs	r3, r0
 80094c8:	60fb      	str	r3, [r7, #12]
        break;
 80094ca:	e05a      	b.n	8009582 <LL_RCC_GetUSARTClockFreq+0xee>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 80094cc:	f7ff ff3a 	bl	8009344 <LL_RCC_HSI_IsReady>
 80094d0:	0003      	movs	r3, r0
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d14e      	bne.n	8009574 <LL_RCC_GetUSARTClockFreq+0xe0>
        {
          usart_frequency = HSI_VALUE;
 80094d6:	4b30      	ldr	r3, [pc, #192]	; (8009598 <LL_RCC_GetUSARTClockFreq+0x104>)
 80094d8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80094da:	e04b      	b.n	8009574 <LL_RCC_GetUSARTClockFreq+0xe0>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 80094dc:	f7ff ff46 	bl	800936c <LL_RCC_LSE_IsReady>
 80094e0:	0003      	movs	r3, r0
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d148      	bne.n	8009578 <LL_RCC_GetUSARTClockFreq+0xe4>
        {
          usart_frequency = LSE_VALUE;
 80094e6:	2380      	movs	r3, #128	; 0x80
 80094e8:	021b      	lsls	r3, r3, #8
 80094ea:	60fb      	str	r3, [r7, #12]
        }
        break;
 80094ec:	e044      	b.n	8009578 <LL_RCC_GetUSARTClockFreq+0xe4>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80094ee:	f000 f85b 	bl	80095a8 <RCC_GetSystemClockFreq>
 80094f2:	0003      	movs	r3, r0
 80094f4:	0018      	movs	r0, r3
 80094f6:	f000 f885 	bl	8009604 <RCC_GetHCLKClockFreq>
 80094fa:	0003      	movs	r3, r0
 80094fc:	0018      	movs	r0, r3
 80094fe:	f000 f899 	bl	8009634 <RCC_GetPCLK1ClockFreq>
 8009502:	0003      	movs	r3, r0
 8009504:	60fb      	str	r3, [r7, #12]
        break;
 8009506:	46c0      	nop			; (mov r8, r8)
 8009508:	e03b      	b.n	8009582 <LL_RCC_GetUSARTClockFreq+0xee>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2b0c      	cmp	r3, #12
 800950e:	d138      	bne.n	8009582 <LL_RCC_GetUSARTClockFreq+0xee>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	0018      	movs	r0, r3
 8009514:	f7ff ff5e 	bl	80093d4 <LL_RCC_GetUSARTClockSource>
 8009518:	0003      	movs	r3, r0
 800951a:	4a20      	ldr	r2, [pc, #128]	; (800959c <LL_RCC_GetUSARTClockFreq+0x108>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d00a      	beq.n	8009536 <LL_RCC_GetUSARTClockFreq+0xa2>
 8009520:	4a1f      	ldr	r2, [pc, #124]	; (80095a0 <LL_RCC_GetUSARTClockFreq+0x10c>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d00f      	beq.n	8009546 <LL_RCC_GetUSARTClockFreq+0xb2>
 8009526:	4a1f      	ldr	r2, [pc, #124]	; (80095a4 <LL_RCC_GetUSARTClockFreq+0x110>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d115      	bne.n	8009558 <LL_RCC_GetUSARTClockFreq+0xc4>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800952c:	f000 f83c 	bl	80095a8 <RCC_GetSystemClockFreq>
 8009530:	0003      	movs	r3, r0
 8009532:	60fb      	str	r3, [r7, #12]
        break;
 8009534:	e025      	b.n	8009582 <LL_RCC_GetUSARTClockFreq+0xee>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8009536:	f7ff ff05 	bl	8009344 <LL_RCC_HSI_IsReady>
 800953a:	0003      	movs	r3, r0
 800953c:	2b01      	cmp	r3, #1
 800953e:	d11d      	bne.n	800957c <LL_RCC_GetUSARTClockFreq+0xe8>
        {
          usart_frequency = HSI_VALUE;
 8009540:	4b15      	ldr	r3, [pc, #84]	; (8009598 <LL_RCC_GetUSARTClockFreq+0x104>)
 8009542:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009544:	e01a      	b.n	800957c <LL_RCC_GetUSARTClockFreq+0xe8>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8009546:	f7ff ff11 	bl	800936c <LL_RCC_LSE_IsReady>
 800954a:	0003      	movs	r3, r0
 800954c:	2b01      	cmp	r3, #1
 800954e:	d117      	bne.n	8009580 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = LSE_VALUE;
 8009550:	2380      	movs	r3, #128	; 0x80
 8009552:	021b      	lsls	r3, r3, #8
 8009554:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009556:	e013      	b.n	8009580 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8009558:	f000 f826 	bl	80095a8 <RCC_GetSystemClockFreq>
 800955c:	0003      	movs	r3, r0
 800955e:	0018      	movs	r0, r3
 8009560:	f000 f850 	bl	8009604 <RCC_GetHCLKClockFreq>
 8009564:	0003      	movs	r3, r0
 8009566:	0018      	movs	r0, r3
 8009568:	f000 f864 	bl	8009634 <RCC_GetPCLK1ClockFreq>
 800956c:	0003      	movs	r3, r0
 800956e:	60fb      	str	r3, [r7, #12]
        break;
 8009570:	46c0      	nop			; (mov r8, r8)
 8009572:	e006      	b.n	8009582 <LL_RCC_GetUSARTClockFreq+0xee>
        break;
 8009574:	46c0      	nop			; (mov r8, r8)
 8009576:	e004      	b.n	8009582 <LL_RCC_GetUSARTClockFreq+0xee>
        break;
 8009578:	46c0      	nop			; (mov r8, r8)
 800957a:	e002      	b.n	8009582 <LL_RCC_GetUSARTClockFreq+0xee>
        break;
 800957c:	46c0      	nop			; (mov r8, r8)
 800957e:	e000      	b.n	8009582 <LL_RCC_GetUSARTClockFreq+0xee>
        break;
 8009580:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 8009582:	68fb      	ldr	r3, [r7, #12]
}
 8009584:	0018      	movs	r0, r3
 8009586:	46bd      	mov	sp, r7
 8009588:	b004      	add	sp, #16
 800958a:	bd80      	pop	{r7, pc}
 800958c:	00030002 	.word	0x00030002
 8009590:	00030003 	.word	0x00030003
 8009594:	00030001 	.word	0x00030001
 8009598:	00f42400 	.word	0x00f42400
 800959c:	000c0008 	.word	0x000c0008
 80095a0:	000c000c 	.word	0x000c000c
 80095a4:	000c0004 	.word	0x000c0004

080095a8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80095ae:	f7ff feed 	bl	800938c <LL_RCC_GetSysClkSource>
 80095b2:	0003      	movs	r3, r0
 80095b4:	2b08      	cmp	r3, #8
 80095b6:	d002      	beq.n	80095be <RCC_GetSystemClockFreq+0x16>
 80095b8:	2b10      	cmp	r3, #16
 80095ba:	d003      	beq.n	80095c4 <RCC_GetSystemClockFreq+0x1c>
 80095bc:	e007      	b.n	80095ce <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80095be:	4b0e      	ldr	r3, [pc, #56]	; (80095f8 <RCC_GetSystemClockFreq+0x50>)
 80095c0:	607b      	str	r3, [r7, #4]
      break;
 80095c2:	e014      	b.n	80095ee <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80095c4:	f000 f84c 	bl	8009660 <RCC_PLL_GetFreqDomain_SYS>
 80095c8:	0003      	movs	r3, r0
 80095ca:	607b      	str	r3, [r7, #4]
      break;
 80095cc:	e00f      	b.n	80095ee <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80095ce:	4b0b      	ldr	r3, [pc, #44]	; (80095fc <RCC_GetSystemClockFreq+0x54>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	0adb      	lsrs	r3, r3, #11
 80095d4:	2207      	movs	r2, #7
 80095d6:	4013      	ands	r3, r2
 80095d8:	2201      	movs	r2, #1
 80095da:	409a      	lsls	r2, r3
 80095dc:	0013      	movs	r3, r2
 80095de:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	4807      	ldr	r0, [pc, #28]	; (8009600 <RCC_GetSystemClockFreq+0x58>)
 80095e4:	f7f6 fd8e 	bl	8000104 <__udivsi3>
 80095e8:	0003      	movs	r3, r0
 80095ea:	607b      	str	r3, [r7, #4]
      break;
 80095ec:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 80095ee:	687b      	ldr	r3, [r7, #4]
}
 80095f0:	0018      	movs	r0, r3
 80095f2:	46bd      	mov	sp, r7
 80095f4:	b002      	add	sp, #8
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	007a1200 	.word	0x007a1200
 80095fc:	40021000 	.word	0x40021000
 8009600:	00f42400 	.word	0x00f42400

08009604 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800960c:	f7ff feca 	bl	80093a4 <LL_RCC_GetAHBPrescaler>
 8009610:	0003      	movs	r3, r0
 8009612:	0a1b      	lsrs	r3, r3, #8
 8009614:	220f      	movs	r2, #15
 8009616:	401a      	ands	r2, r3
 8009618:	4b05      	ldr	r3, [pc, #20]	; (8009630 <RCC_GetHCLKClockFreq+0x2c>)
 800961a:	0092      	lsls	r2, r2, #2
 800961c:	58d3      	ldr	r3, [r2, r3]
 800961e:	221f      	movs	r2, #31
 8009620:	4013      	ands	r3, r2
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	40da      	lsrs	r2, r3
 8009626:	0013      	movs	r3, r2
}
 8009628:	0018      	movs	r0, r3
 800962a:	46bd      	mov	sp, r7
 800962c:	b002      	add	sp, #8
 800962e:	bd80      	pop	{r7, pc}
 8009630:	080099a4 	.word	0x080099a4

08009634 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800963c:	f7ff febe 	bl	80093bc <LL_RCC_GetAPB1Prescaler>
 8009640:	0003      	movs	r3, r0
 8009642:	0b1a      	lsrs	r2, r3, #12
 8009644:	4b05      	ldr	r3, [pc, #20]	; (800965c <RCC_GetPCLK1ClockFreq+0x28>)
 8009646:	0092      	lsls	r2, r2, #2
 8009648:	58d3      	ldr	r3, [r2, r3]
 800964a:	221f      	movs	r2, #31
 800964c:	4013      	ands	r3, r2
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	40da      	lsrs	r2, r3
 8009652:	0013      	movs	r3, r2
}
 8009654:	0018      	movs	r0, r3
 8009656:	46bd      	mov	sp, r7
 8009658:	b002      	add	sp, #8
 800965a:	bd80      	pop	{r7, pc}
 800965c:	080099e4 	.word	0x080099e4

08009660 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8009660:	b590      	push	{r4, r7, lr}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8009666:	f7ff fedf 	bl	8009428 <LL_RCC_PLL_GetMainSource>
 800966a:	0003      	movs	r3, r0
 800966c:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	2b02      	cmp	r3, #2
 8009672:	d002      	beq.n	800967a <RCC_PLL_GetFreqDomain_SYS+0x1a>
 8009674:	2b03      	cmp	r3, #3
 8009676:	d003      	beq.n	8009680 <RCC_PLL_GetFreqDomain_SYS+0x20>
 8009678:	e005      	b.n	8009686 <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800967a:	4b14      	ldr	r3, [pc, #80]	; (80096cc <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800967c:	607b      	str	r3, [r7, #4]
      break;
 800967e:	e005      	b.n	800968c <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8009680:	4b13      	ldr	r3, [pc, #76]	; (80096d0 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8009682:	607b      	str	r3, [r7, #4]
      break;
 8009684:	e002      	b.n	800968c <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 8009686:	4b11      	ldr	r3, [pc, #68]	; (80096cc <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8009688:	607b      	str	r3, [r7, #4]
      break;
 800968a:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800968c:	f7ff feb4 	bl	80093f8 <LL_RCC_PLL_GetN>
 8009690:	0002      	movs	r2, r0
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4353      	muls	r3, r2
 8009696:	001c      	movs	r4, r3
 8009698:	f7ff fed2 	bl	8009440 <LL_RCC_PLL_GetDivider>
 800969c:	0003      	movs	r3, r0
 800969e:	091b      	lsrs	r3, r3, #4
 80096a0:	3301      	adds	r3, #1
 80096a2:	0019      	movs	r1, r3
 80096a4:	0020      	movs	r0, r4
 80096a6:	f7f6 fd2d 	bl	8000104 <__udivsi3>
 80096aa:	0003      	movs	r3, r0
 80096ac:	001c      	movs	r4, r3
 80096ae:	f7ff feaf 	bl	8009410 <LL_RCC_PLL_GetR>
 80096b2:	0003      	movs	r3, r0
 80096b4:	0f5b      	lsrs	r3, r3, #29
 80096b6:	3301      	adds	r3, #1
 80096b8:	0019      	movs	r1, r3
 80096ba:	0020      	movs	r0, r4
 80096bc:	f7f6 fd22 	bl	8000104 <__udivsi3>
 80096c0:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80096c2:	0018      	movs	r0, r3
 80096c4:	46bd      	mov	sp, r7
 80096c6:	b003      	add	sp, #12
 80096c8:	bd90      	pop	{r4, r7, pc}
 80096ca:	46c0      	nop			; (mov r8, r8)
 80096cc:	00f42400 	.word	0x00f42400
 80096d0:	007a1200 	.word	0x007a1200

080096d4 <LL_USART_IsEnabled>:
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2201      	movs	r2, #1
 80096e2:	4013      	ands	r3, r2
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d101      	bne.n	80096ec <LL_USART_IsEnabled+0x18>
 80096e8:	2301      	movs	r3, #1
 80096ea:	e000      	b.n	80096ee <LL_USART_IsEnabled+0x1a>
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	0018      	movs	r0, r3
 80096f0:	46bd      	mov	sp, r7
 80096f2:	b002      	add	sp, #8
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <LL_USART_SetPrescaler>:
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b082      	sub	sp, #8
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
 80096fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009704:	220f      	movs	r2, #15
 8009706:	4393      	bics	r3, r2
 8009708:	683a      	ldr	r2, [r7, #0]
 800970a:	b292      	uxth	r2, r2
 800970c:	431a      	orrs	r2, r3
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009712:	46c0      	nop			; (mov r8, r8)
 8009714:	46bd      	mov	sp, r7
 8009716:	b002      	add	sp, #8
 8009718:	bd80      	pop	{r7, pc}
	...

0800971c <LL_USART_SetStopBitsLength>:
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	4a05      	ldr	r2, [pc, #20]	; (8009740 <LL_USART_SetStopBitsLength+0x24>)
 800972c:	401a      	ands	r2, r3
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	431a      	orrs	r2, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	605a      	str	r2, [r3, #4]
}
 8009736:	46c0      	nop			; (mov r8, r8)
 8009738:	46bd      	mov	sp, r7
 800973a:	b002      	add	sp, #8
 800973c:	bd80      	pop	{r7, pc}
 800973e:	46c0      	nop			; (mov r8, r8)
 8009740:	ffffcfff 	.word	0xffffcfff

08009744 <LL_USART_SetHWFlowCtrl>:
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	4a05      	ldr	r2, [pc, #20]	; (8009768 <LL_USART_SetHWFlowCtrl+0x24>)
 8009754:	401a      	ands	r2, r3
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	431a      	orrs	r2, r3
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	609a      	str	r2, [r3, #8]
}
 800975e:	46c0      	nop			; (mov r8, r8)
 8009760:	46bd      	mov	sp, r7
 8009762:	b002      	add	sp, #8
 8009764:	bd80      	pop	{r7, pc}
 8009766:	46c0      	nop			; (mov r8, r8)
 8009768:	fffffcff 	.word	0xfffffcff

0800976c <LL_USART_SetBaudRate>:
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b086      	sub	sp, #24
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
 8009778:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2b0b      	cmp	r3, #11
 800977e:	d843      	bhi.n	8009808 <LL_USART_SetBaudRate+0x9c>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8009780:	683a      	ldr	r2, [r7, #0]
 8009782:	2380      	movs	r3, #128	; 0x80
 8009784:	021b      	lsls	r3, r3, #8
 8009786:	429a      	cmp	r2, r3
 8009788:	d126      	bne.n	80097d8 <LL_USART_SetBaudRate+0x6c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	b2db      	uxtb	r3, r3
 800978e:	001a      	movs	r2, r3
 8009790:	4b1f      	ldr	r3, [pc, #124]	; (8009810 <LL_USART_SetBaudRate+0xa4>)
 8009792:	0092      	lsls	r2, r2, #2
 8009794:	58d3      	ldr	r3, [r2, r3]
 8009796:	0019      	movs	r1, r3
 8009798:	68b8      	ldr	r0, [r7, #8]
 800979a:	f7f6 fcb3 	bl	8000104 <__udivsi3>
 800979e:	0003      	movs	r3, r0
 80097a0:	005a      	lsls	r2, r3, #1
 80097a2:	6a3b      	ldr	r3, [r7, #32]
 80097a4:	085b      	lsrs	r3, r3, #1
 80097a6:	18d3      	adds	r3, r2, r3
 80097a8:	6a39      	ldr	r1, [r7, #32]
 80097aa:	0018      	movs	r0, r3
 80097ac:	f7f6 fcaa 	bl	8000104 <__udivsi3>
 80097b0:	0003      	movs	r3, r0
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	4a16      	ldr	r2, [pc, #88]	; (8009814 <LL_USART_SetBaudRate+0xa8>)
 80097ba:	4013      	ands	r3, r2
 80097bc:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	085b      	lsrs	r3, r3, #1
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	001a      	movs	r2, r3
 80097c6:	2307      	movs	r3, #7
 80097c8:	4013      	ands	r3, r2
 80097ca:	693a      	ldr	r2, [r7, #16]
 80097cc:	4313      	orrs	r3, r2
 80097ce:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	693a      	ldr	r2, [r7, #16]
 80097d4:	60da      	str	r2, [r3, #12]
}
 80097d6:	e017      	b.n	8009808 <LL_USART_SetBaudRate+0x9c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	001a      	movs	r2, r3
 80097de:	4b0c      	ldr	r3, [pc, #48]	; (8009810 <LL_USART_SetBaudRate+0xa4>)
 80097e0:	0092      	lsls	r2, r2, #2
 80097e2:	58d3      	ldr	r3, [r2, r3]
 80097e4:	0019      	movs	r1, r3
 80097e6:	68b8      	ldr	r0, [r7, #8]
 80097e8:	f7f6 fc8c 	bl	8000104 <__udivsi3>
 80097ec:	0003      	movs	r3, r0
 80097ee:	001a      	movs	r2, r3
 80097f0:	6a3b      	ldr	r3, [r7, #32]
 80097f2:	085b      	lsrs	r3, r3, #1
 80097f4:	18d3      	adds	r3, r2, r3
 80097f6:	6a39      	ldr	r1, [r7, #32]
 80097f8:	0018      	movs	r0, r3
 80097fa:	f7f6 fc83 	bl	8000104 <__udivsi3>
 80097fe:	0003      	movs	r3, r0
 8009800:	b29b      	uxth	r3, r3
 8009802:	001a      	movs	r2, r3
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	60da      	str	r2, [r3, #12]
}
 8009808:	46c0      	nop			; (mov r8, r8)
 800980a:	46bd      	mov	sp, r7
 800980c:	b006      	add	sp, #24
 800980e:	bd80      	pop	{r7, pc}
 8009810:	08009a58 	.word	0x08009a58
 8009814:	0000fff0 	.word	0x0000fff0

08009818 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8009818:	b590      	push	{r4, r7, lr}
 800981a:	b08b      	sub	sp, #44	; 0x2c
 800981c:	af02      	add	r7, sp, #8
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8009822:	231f      	movs	r3, #31
 8009824:	18fb      	adds	r3, r7, r3
 8009826:	2201      	movs	r2, #1
 8009828:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800982a:	2300      	movs	r3, #0
 800982c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	0018      	movs	r0, r3
 8009832:	f7ff ff4f 	bl	80096d4 <LL_USART_IsEnabled>
 8009836:	1e03      	subs	r3, r0, #0
 8009838:	d16a      	bne.n	8009910 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a38      	ldr	r2, [pc, #224]	; (8009920 <LL_USART_Init+0x108>)
 8009840:	401a      	ands	r2, r3
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	6899      	ldr	r1, [r3, #8]
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	691b      	ldr	r3, [r3, #16]
 800984a:	4319      	orrs	r1, r3
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	695b      	ldr	r3, [r3, #20]
 8009850:	4319      	orrs	r1, r3
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	69db      	ldr	r3, [r3, #28]
 8009856:	430b      	orrs	r3, r1
 8009858:	431a      	orrs	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	68da      	ldr	r2, [r3, #12]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	0011      	movs	r1, r2
 8009866:	0018      	movs	r0, r3
 8009868:	f7ff ff58 	bl	800971c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	699a      	ldr	r2, [r3, #24]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	0011      	movs	r1, r2
 8009874:	0018      	movs	r0, r3
 8009876:	f7ff ff65 	bl	8009744 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4a29      	ldr	r2, [pc, #164]	; (8009924 <LL_USART_Init+0x10c>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d105      	bne.n	800988e <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8009882:	2003      	movs	r0, #3
 8009884:	f7ff fe06 	bl	8009494 <LL_RCC_GetUSARTClockFreq>
 8009888:	0003      	movs	r3, r0
 800988a:	61bb      	str	r3, [r7, #24]
 800988c:	e022      	b.n	80098d4 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	4a25      	ldr	r2, [pc, #148]	; (8009928 <LL_USART_Init+0x110>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d105      	bne.n	80098a2 <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8009896:	200c      	movs	r0, #12
 8009898:	f7ff fdfc 	bl	8009494 <LL_RCC_GetUSARTClockFreq>
 800989c:	0003      	movs	r3, r0
 800989e:	61bb      	str	r3, [r7, #24]
 80098a0:	e018      	b.n	80098d4 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* RCC_CCIPR_USART2SEL */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4a21      	ldr	r2, [pc, #132]	; (800992c <LL_USART_Init+0x114>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d108      	bne.n	80098bc <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80098aa:	240c      	movs	r4, #12
 80098ac:	193b      	adds	r3, r7, r4
 80098ae:	0018      	movs	r0, r3
 80098b0:	f7ff fdd2 	bl	8009458 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80098b4:	193b      	adds	r3, r7, r4
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	61bb      	str	r3, [r7, #24]
 80098ba:	e00b      	b.n	80098d4 <LL_USART_Init+0xbc>
#endif /* RCC_CCIPR_USART3SEL */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4a1c      	ldr	r2, [pc, #112]	; (8009930 <LL_USART_Init+0x118>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d107      	bne.n	80098d4 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80098c4:	240c      	movs	r4, #12
 80098c6:	193b      	adds	r3, r7, r4
 80098c8:	0018      	movs	r0, r3
 80098ca:	f7ff fdc5 	bl	8009458 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80098ce:	193b      	adds	r3, r7, r4
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d013      	beq.n	8009902 <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00f      	beq.n	8009902 <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 80098e2:	231f      	movs	r3, #31
 80098e4:	18fb      	adds	r3, r7, r3
 80098e6:	2200      	movs	r2, #0
 80098e8:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	69dc      	ldr	r4, [r3, #28]
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	69b9      	ldr	r1, [r7, #24]
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	9300      	str	r3, [sp, #0]
 80098fc:	0023      	movs	r3, r4
 80098fe:	f7ff ff35 	bl	800976c <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	0011      	movs	r1, r2
 800990a:	0018      	movs	r0, r3
 800990c:	f7ff fef3 	bl	80096f6 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8009910:	231f      	movs	r3, #31
 8009912:	18fb      	adds	r3, r7, r3
 8009914:	781b      	ldrb	r3, [r3, #0]
}
 8009916:	0018      	movs	r0, r3
 8009918:	46bd      	mov	sp, r7
 800991a:	b009      	add	sp, #36	; 0x24
 800991c:	bd90      	pop	{r4, r7, pc}
 800991e:	46c0      	nop			; (mov r8, r8)
 8009920:	efff69f3 	.word	0xefff69f3
 8009924:	40013800 	.word	0x40013800
 8009928:	40004400 	.word	0x40004400
 800992c:	40004800 	.word	0x40004800
 8009930:	40004c00 	.word	0x40004c00

08009934 <__libc_init_array>:
 8009934:	b570      	push	{r4, r5, r6, lr}
 8009936:	2600      	movs	r6, #0
 8009938:	4d0c      	ldr	r5, [pc, #48]	; (800996c <__libc_init_array+0x38>)
 800993a:	4c0d      	ldr	r4, [pc, #52]	; (8009970 <__libc_init_array+0x3c>)
 800993c:	1b64      	subs	r4, r4, r5
 800993e:	10a4      	asrs	r4, r4, #2
 8009940:	42a6      	cmp	r6, r4
 8009942:	d109      	bne.n	8009958 <__libc_init_array+0x24>
 8009944:	2600      	movs	r6, #0
 8009946:	f000 f821 	bl	800998c <_init>
 800994a:	4d0a      	ldr	r5, [pc, #40]	; (8009974 <__libc_init_array+0x40>)
 800994c:	4c0a      	ldr	r4, [pc, #40]	; (8009978 <__libc_init_array+0x44>)
 800994e:	1b64      	subs	r4, r4, r5
 8009950:	10a4      	asrs	r4, r4, #2
 8009952:	42a6      	cmp	r6, r4
 8009954:	d105      	bne.n	8009962 <__libc_init_array+0x2e>
 8009956:	bd70      	pop	{r4, r5, r6, pc}
 8009958:	00b3      	lsls	r3, r6, #2
 800995a:	58eb      	ldr	r3, [r5, r3]
 800995c:	4798      	blx	r3
 800995e:	3601      	adds	r6, #1
 8009960:	e7ee      	b.n	8009940 <__libc_init_array+0xc>
 8009962:	00b3      	lsls	r3, r6, #2
 8009964:	58eb      	ldr	r3, [r5, r3]
 8009966:	4798      	blx	r3
 8009968:	3601      	adds	r6, #1
 800996a:	e7f2      	b.n	8009952 <__libc_init_array+0x1e>
 800996c:	08009a88 	.word	0x08009a88
 8009970:	08009a88 	.word	0x08009a88
 8009974:	08009a88 	.word	0x08009a88
 8009978:	08009a8c 	.word	0x08009a8c

0800997c <memset>:
 800997c:	0003      	movs	r3, r0
 800997e:	1812      	adds	r2, r2, r0
 8009980:	4293      	cmp	r3, r2
 8009982:	d100      	bne.n	8009986 <memset+0xa>
 8009984:	4770      	bx	lr
 8009986:	7019      	strb	r1, [r3, #0]
 8009988:	3301      	adds	r3, #1
 800998a:	e7f9      	b.n	8009980 <memset+0x4>

0800998c <_init>:
 800998c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998e:	46c0      	nop			; (mov r8, r8)
 8009990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009992:	bc08      	pop	{r3}
 8009994:	469e      	mov	lr, r3
 8009996:	4770      	bx	lr

08009998 <_fini>:
 8009998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999a:	46c0      	nop			; (mov r8, r8)
 800999c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800999e:	bc08      	pop	{r3}
 80099a0:	469e      	mov	lr, r3
 80099a2:	4770      	bx	lr
