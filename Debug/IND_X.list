
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9bc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000096e8  0800ca78  0800ca78  0001ca78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016160  08016160  00030070  2**0
                  CONTENTS
  4 .ARM          00000000  08016160  08016160  00030070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08016160  08016160  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016160  08016160  00026160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016164  08016164  00026164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08016168  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d0  20000070  080161d8  00030070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001440  080161d8  00031440  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192e6  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003574  00000000  00000000  0004937e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001918  00000000  00000000  0004c8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017a0  00000000  00000000  0004e210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8a7  00000000  00000000  0004f9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c654  00000000  00000000  0006c257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afac2  00000000  00000000  000888ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013836d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c04  00000000  00000000  001383c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800ca60 	.word	0x0800ca60

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	0800ca60 	.word	0x0800ca60

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}

08000348 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <LL_USART_DisableFIFO+0x1c>)
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	dfffffff 	.word	0xdfffffff

08000368 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b086      	sub	sp, #24
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000372:	f3ef 8310 	mrs	r3, PRIMASK
 8000376:	60bb      	str	r3, [r7, #8]
  return(result);
 8000378:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800037a:	617b      	str	r3, [r7, #20]
 800037c:	2301      	movs	r3, #1
 800037e:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f383 8810 	msr	PRIMASK, r3
}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	00db      	lsls	r3, r3, #3
 800038e:	08da      	lsrs	r2, r3, #3
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	075b      	lsls	r3, r3, #29
 8000394:	431a      	orrs	r2, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	697b      	ldr	r3, [r7, #20]
 800039c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800039e:	693b      	ldr	r3, [r7, #16]
 80003a0:	f383 8810 	msr	PRIMASK, r3
}
 80003a4:	46c0      	nop			; (mov r8, r8)
}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	b006      	add	sp, #24
 80003ac:	bd80      	pop	{r7, pc}
	...

080003b0 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80003ba:	f3ef 8310 	mrs	r3, PRIMASK
 80003be:	60bb      	str	r3, [r7, #8]
  return(result);
 80003c0:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80003c2:	617b      	str	r3, [r7, #20]
 80003c4:	2301      	movs	r3, #1
 80003c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f383 8810 	msr	PRIMASK, r3
}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	689b      	ldr	r3, [r3, #8]
 80003d4:	4a08      	ldr	r2, [pc, #32]	; (80003f8 <LL_USART_SetRXFIFOThreshold+0x48>)
 80003d6:	401a      	ands	r2, r3
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	065b      	lsls	r3, r3, #25
 80003dc:	431a      	orrs	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	f383 8810 	msr	PRIMASK, r3
}
 80003ec:	46c0      	nop			; (mov r8, r8)
}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b006      	add	sp, #24
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	f1ffffff 	.word	0xf1ffffff

080003fc <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	4a07      	ldr	r2, [pc, #28]	; (8000428 <LL_USART_ConfigAsyncMode+0x2c>)
 800040a:	401a      	ands	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	689b      	ldr	r3, [r3, #8]
 8000414:	222a      	movs	r2, #42	; 0x2a
 8000416:	4393      	bics	r3, r2
 8000418:	001a      	movs	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	609a      	str	r2, [r3, #8]
}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b002      	add	sp, #8
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffb7ff 	.word	0xffffb7ff

0800042c <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	69da      	ldr	r2, [r3, #28]
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	039b      	lsls	r3, r3, #14
 800043c:	401a      	ands	r2, r3
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	039b      	lsls	r3, r3, #14
 8000442:	429a      	cmp	r2, r3
 8000444:	d101      	bne.n	800044a <LL_USART_IsActiveFlag_TEACK+0x1e>
 8000446:	2301      	movs	r3, #1
 8000448:	e000      	b.n	800044c <LL_USART_IsActiveFlag_TEACK+0x20>
 800044a:	2300      	movs	r3, #0
}
 800044c:	0018      	movs	r0, r3
 800044e:	46bd      	mov	sp, r7
 8000450:	b002      	add	sp, #8
 8000452:	bd80      	pop	{r7, pc}

08000454 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	69da      	ldr	r2, [r3, #28]
 8000460:	2380      	movs	r3, #128	; 0x80
 8000462:	03db      	lsls	r3, r3, #15
 8000464:	401a      	ands	r2, r3
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	03db      	lsls	r3, r3, #15
 800046a:	429a      	cmp	r2, r3
 800046c:	d101      	bne.n	8000472 <LL_USART_IsActiveFlag_REACK+0x1e>
 800046e:	2301      	movs	r3, #1
 8000470:	e000      	b.n	8000474 <LL_USART_IsActiveFlag_REACK+0x20>
 8000472:	2300      	movs	r3, #0
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	b002      	add	sp, #8
 800047a:	bd80      	pop	{r7, pc}

0800047c <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000484:	f3ef 8310 	mrs	r3, PRIMASK
 8000488:	60bb      	str	r3, [r7, #8]
  return(result);
 800048a:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800048c:	617b      	str	r3, [r7, #20]
 800048e:	2301      	movs	r3, #1
 8000490:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	f383 8810 	msr	PRIMASK, r3
}
 8000498:	46c0      	nop			; (mov r8, r8)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2220      	movs	r2, #32
 80004a0:	431a      	orrs	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	f383 8810 	msr	PRIMASK, r3
}
 80004b0:	46c0      	nop			; (mov r8, r8)
}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b006      	add	sp, #24
 80004b8:	bd80      	pop	{r7, pc}

080004ba <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b086      	sub	sp, #24
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80004c2:	f3ef 8310 	mrs	r3, PRIMASK
 80004c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80004c8:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80004ca:	617b      	str	r3, [r7, #20]
 80004cc:	2301      	movs	r3, #1
 80004ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	f383 8810 	msr	PRIMASK, r3
}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	2201      	movs	r2, #1
 80004de:	431a      	orrs	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004e8:	693b      	ldr	r3, [r7, #16]
 80004ea:	f383 8810 	msr	PRIMASK, r3
}
 80004ee:	46c0      	nop			; (mov r8, r8)
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b006      	add	sp, #24
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000504:	b29b      	uxth	r3, r3
 8000506:	05db      	lsls	r3, r3, #23
 8000508:	0ddb      	lsrs	r3, r3, #23
 800050a:	b29b      	uxth	r3, r3
}
 800050c:	0018      	movs	r0, r3
 800050e:	46bd      	mov	sp, r7
 8000510:	b002      	add	sp, #8
 8000512:	bd80      	pop	{r7, pc}

08000514 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 800051c:	4b04      	ldr	r3, [pc, #16]	; (8000530 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 800051e:	6819      	ldr	r1, [r3, #0]
 8000520:	4b03      	ldr	r3, [pc, #12]	; (8000530 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	430a      	orrs	r2, r1
 8000526:	601a      	str	r2, [r3, #0]
}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b002      	add	sp, #8
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40010000 	.word	0x40010000

08000534 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	619a      	str	r2, [r3, #24]
}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b002      	add	sp, #8
 800054a:	bd80      	pop	{r7, pc}

0800054c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	683a      	ldr	r2, [r7, #0]
 800055a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b002      	add	sp, #8
 8000562:	bd80      	pop	{r7, pc}

08000564 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 800056c:	4b07      	ldr	r3, [pc, #28]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 800056e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	430a      	orrs	r2, r1
 8000576:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 800057a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	4013      	ands	r3, r2
 8000580:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000582:	68fb      	ldr	r3, [r7, #12]
}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b004      	add	sp, #16
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40021000 	.word	0x40021000

08000590 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 800059a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	430a      	orrs	r2, r1
 80005a2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 80005a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4013      	ands	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ae:	68fb      	ldr	r3, [r7, #12]
}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b004      	add	sp, #16
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40021000 	.word	0x40021000

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b08d      	sub	sp, #52	; 0x34
 80005c0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 80005c2:	2324      	movs	r3, #36	; 0x24
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	2200      	movs	r2, #0
 80005c8:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 80005ca:	2322      	movs	r3, #34	; 0x22
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	2200      	movs	r2, #0
 80005d0:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 80005d2:	2320      	movs	r3, #32
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	2200      	movs	r2, #0
 80005d8:	801a      	strh	r2, [r3, #0]
	uint16_t beep1 = 0x0000;
 80005da:	231e      	movs	r3, #30
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	2200      	movs	r2, #0
 80005e0:	801a      	strh	r2, [r3, #0]
	uint16_t beep2 = 0xFFFF;
 80005e2:	231c      	movs	r3, #28
 80005e4:	18fb      	adds	r3, r7, r3
 80005e6:	2201      	movs	r2, #1
 80005e8:	4252      	negs	r2, r2
 80005ea:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f004 ff1a 	bl	8005424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f8e4 	bl	80007bc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005f4:	4b69      	ldr	r3, [pc, #420]	; (800079c <main+0x1e0>)
 80005f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005f8:	4b68      	ldr	r3, [pc, #416]	; (800079c <main+0x1e0>)
 80005fa:	2101      	movs	r1, #1
 80005fc:	430a      	orrs	r2, r1
 80005fe:	635a      	str	r2, [r3, #52]	; 0x34
 8000600:	4b66      	ldr	r3, [pc, #408]	; (800079c <main+0x1e0>)
 8000602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000604:	2201      	movs	r2, #1
 8000606:	4013      	ands	r3, r2
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800060c:	4b63      	ldr	r3, [pc, #396]	; (800079c <main+0x1e0>)
 800060e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000610:	4b62      	ldr	r3, [pc, #392]	; (800079c <main+0x1e0>)
 8000612:	2102      	movs	r1, #2
 8000614:	430a      	orrs	r2, r1
 8000616:	635a      	str	r2, [r3, #52]	; 0x34
 8000618:	4b60      	ldr	r3, [pc, #384]	; (800079c <main+0x1e0>)
 800061a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800061c:	2202      	movs	r2, #2
 800061e:	4013      	ands	r3, r2
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000624:	4b5d      	ldr	r3, [pc, #372]	; (800079c <main+0x1e0>)
 8000626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000628:	4b5c      	ldr	r3, [pc, #368]	; (800079c <main+0x1e0>)
 800062a:	2104      	movs	r1, #4
 800062c:	430a      	orrs	r2, r1
 800062e:	635a      	str	r2, [r3, #52]	; 0x34
 8000630:	4b5a      	ldr	r3, [pc, #360]	; (800079c <main+0x1e0>)
 8000632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000634:	2204      	movs	r2, #4
 8000636:	4013      	ands	r3, r2
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 fc1e 	bl	8000e7c <MX_GPIO_Init>
  MX_DMA_Init();
 8000640:	f000 fbee 	bl	8000e20 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000644:	f000 faf2 	bl	8000c2c <MX_USART2_UART_Init>
  MX_COMP1_Init();
 8000648:	f000 f916 	bl	8000878 <MX_COMP1_Init>
  MX_TIM1_Init();
 800064c:	f000 f9f4 	bl	8000a38 <MX_TIM1_Init>
  MX_USART3_Init();
 8000650:	f000 fba2 	bl	8000d98 <MX_USART3_Init>
  MX_I2S1_Init();
 8000654:	f000 f982 	bl	800095c <MX_I2S1_Init>
  MX_I2C1_Init();
 8000658:	f000 f940 	bl	80008dc <MX_I2C1_Init>
  MX_SPI2_Init();
 800065c:	f000 f9a8 	bl	80009b0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 8000660:	4b4f      	ldr	r3, [pc, #316]	; (80007a0 <main+0x1e4>)
 8000662:	0018      	movs	r0, r3
 8000664:	f005 f9ac 	bl	80059c0 <HAL_COMP_Start>
	HAL_Delay(100);
 8000668:	2064      	movs	r0, #100	; 0x64
 800066a:	f004 ff61 	bl	8005530 <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 800066e:	f001 fd77 	bl	8002160 <MEM_Reset>

	weoInit();
 8000672:	f000 fe59 	bl	8001328 <weoInit>
	HAL_Delay(1);
 8000676:	2001      	movs	r0, #1
 8000678:	f004 ff5a 	bl	8005530 <HAL_Delay>
	weoClear();
 800067c:	f000 fef0 	bl	8001460 <weoClear>
	MEM_GetID();
 8000680:	f002 f9f0 	bl	8002a64 <MEM_GetID>
	soundSetup();
 8000684:	f001 f876 	bl	8001774 <soundSetup>
	LIS3DHsetup();
 8000688:	f004 f9d4 	bl	8004a34 <LIS3DHsetup>

	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 800068c:	4b45      	ldr	r3, [pc, #276]	; (80007a4 <main+0x1e8>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b44      	ldr	r3, [pc, #272]	; (80007a4 <main+0x1e8>)
 8000692:	4945      	ldr	r1, [pc, #276]	; (80007a8 <main+0x1ec>)
 8000694:	430a      	orrs	r2, r1
 8000696:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_USART_EnableIT_RXNE(USART2);
 8000698:	4b42      	ldr	r3, [pc, #264]	; (80007a4 <main+0x1e8>)
 800069a:	0018      	movs	r0, r3
 800069c:	f7ff feee 	bl	800047c <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80006a0:	4b40      	ldr	r3, [pc, #256]	; (80007a4 <main+0x1e8>)
 80006a2:	0018      	movs	r0, r3
 80006a4:	f7ff ff09 	bl	80004ba <LL_USART_EnableIT_ERROR>

	USART2->ICR|=USART_ICR_ORECF;
 80006a8:	4b3e      	ldr	r3, [pc, #248]	; (80007a4 <main+0x1e8>)
 80006aa:	6a1a      	ldr	r2, [r3, #32]
 80006ac:	4b3d      	ldr	r3, [pc, #244]	; (80007a4 <main+0x1e8>)
 80006ae:	2108      	movs	r1, #8
 80006b0:	430a      	orrs	r2, r1
 80006b2:	621a      	str	r2, [r3, #32]
//    squeak_triple(signal);
//    soundLoad(3);
//    soundPlay(3);
//    squeak_long();

	uint8_t ASCII_X=0x02;
 80006b4:	231b      	movs	r3, #27
 80006b6:	18fb      	adds	r3, r7, r3
 80006b8:	2202      	movs	r2, #2
 80006ba:	701a      	strb	r2, [r3, #0]
	uint8_t imY=0x04;
 80006bc:	231a      	movs	r3, #26
 80006be:	18fb      	adds	r3, r7, r3
 80006c0:	2204      	movs	r2, #4
 80006c2:	701a      	strb	r2, [r3, #0]
	uint8_t ASCII_height=0x26;
 80006c4:	2319      	movs	r3, #25
 80006c6:	18fb      	adds	r3, r7, r3
 80006c8:	2226      	movs	r2, #38	; 0x26
 80006ca:	701a      	strb	r2, [r3, #0]
	uint8_t X_increment=0x10;
 80006cc:	2318      	movs	r3, #24
 80006ce:	18fb      	adds	r3, r7, r3
 80006d0:	2210      	movs	r2, #16
 80006d2:	701a      	strb	r2, [r3, #0]
	uint8_t decY=1;
 80006d4:	2127      	movs	r1, #39	; 0x27
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2201      	movs	r2, #1
 80006da:	701a      	strb	r2, [r3, #0]
	uint16_t k,j;
	uint8_t fontInfo=0xF1;
 80006dc:	2317      	movs	r3, #23
 80006de:	18fb      	adds	r3, r7, r3
 80006e0:	22f1      	movs	r2, #241	; 0xf1
 80006e2:	701a      	strb	r2, [r3, #0]
	uint8_t fontCur;
	uint8_t curStr=1;
 80006e4:	2316      	movs	r3, #22
 80006e6:	18fb      	adds	r3, r7, r3
 80006e8:	2201      	movs	r2, #1
 80006ea:	701a      	strb	r2, [r3, #0]
//	uint8_t curStr[4]={1,2,3,4};
	uint8_t strLen=4;
 80006ec:	2315      	movs	r3, #21
 80006ee:	18fb      	adds	r3, r7, r3
 80006f0:	2204      	movs	r2, #4
 80006f2:	701a      	strb	r2, [r3, #0]
//					USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//					USART_AS_SPI_sendCMD(0xFF);
//					GPIOA->ODR |= 1 << 7;	//set dc
//					GPIOA->ODR |= 1 << 6;	//set cs

	uint8_t localWidth=0x07;
 80006f4:	2314      	movs	r3, #20
 80006f6:	18fb      	adds	r3, r7, r3
 80006f8:	2207      	movs	r2, #7
 80006fa:	701a      	strb	r2, [r3, #0]
		uint8_t localHeight=0x0E;
 80006fc:	2313      	movs	r3, #19
 80006fe:	18fb      	adds	r3, r7, r3
 8000700:	220e      	movs	r2, #14
 8000702:	701a      	strb	r2, [r3, #0]
		uint8_t x = 0;
 8000704:	2312      	movs	r3, #18
 8000706:	18fb      	adds	r3, r7, r3
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
		uint8_t y = 0;
 800070c:	2011      	movs	r0, #17
 800070e:	183b      	adds	r3, r7, r0
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
				decY=0x01;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
				if(y % 2 !=0){
 800071a:	183b      	adds	r3, r7, r0
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2201      	movs	r2, #1
 8000720:	4013      	ands	r3, r2
 8000722:	b2db      	uxtb	r3, r3
 8000724:	2b00      	cmp	r3, #0
 8000726:	d002      	beq.n	800072e <main+0x172>
					decY=0x02;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2202      	movs	r2, #2
 800072c:	701a      	strb	r2, [r3, #0]
				}
	weoDrawRectangleFilled(x,y,(x+localWidth-1),y+(localHeight-decY),0xFF,aim);
 800072e:	2012      	movs	r0, #18
 8000730:	183a      	adds	r2, r7, r0
 8000732:	2314      	movs	r3, #20
 8000734:	18fb      	adds	r3, r7, r3
 8000736:	7812      	ldrb	r2, [r2, #0]
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	18d3      	adds	r3, r2, r3
 800073c:	b2db      	uxtb	r3, r3
 800073e:	3b01      	subs	r3, #1
 8000740:	b2dc      	uxtb	r4, r3
 8000742:	2313      	movs	r3, #19
 8000744:	18fa      	adds	r2, r7, r3
 8000746:	2327      	movs	r3, #39	; 0x27
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	7812      	ldrb	r2, [r2, #0]
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	1ad3      	subs	r3, r2, r3
 8000750:	b2da      	uxtb	r2, r3
 8000752:	2111      	movs	r1, #17
 8000754:	187b      	adds	r3, r7, r1
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	18d3      	adds	r3, r2, r3
 800075a:	b2da      	uxtb	r2, r3
 800075c:	187b      	adds	r3, r7, r1
 800075e:	7819      	ldrb	r1, [r3, #0]
 8000760:	183b      	adds	r3, r7, r0
 8000762:	7818      	ldrb	r0, [r3, #0]
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <main+0x1f0>)
 8000766:	9301      	str	r3, [sp, #4]
 8000768:	23ff      	movs	r3, #255	; 0xff
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	0013      	movs	r3, r2
 800076e:	0022      	movs	r2, r4
 8000770:	f000 feda 	bl	8001528 <weoDrawRectangleFilled>
//				if(y % 2 !=0){
//					decY=0x02;
//				}
//	weoDrawRectangleFilled(x,y,(x+localWidth-1),(y+localHeight-decY),0xFF,aim);
//    GPIOB->PUPDR &= ~0x3F000;
	GPIOC->ODR |= 1 << 6;
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <main+0x1f4>)
 8000776:	695a      	ldr	r2, [r3, #20]
 8000778:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <main+0x1f4>)
 800077a:	2140      	movs	r1, #64	; 0x40
 800077c:	430a      	orrs	r2, r1
 800077e:	615a      	str	r2, [r3, #20]
	while (1) {
//		weoShowSmallImage(0x02,0x70,0x00);
//		LIS3DHreadData();
		cmdExecute(cmd2Execute);
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <main+0x1f8>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	0018      	movs	r0, r3
 8000786:	f002 f9cf 	bl	8002b28 <cmdExecute>
//		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
//		WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
//		squeak_single(signal);
		soundPlay(0);
 800078a:	2000      	movs	r0, #0
 800078c:	f002 f940 	bl	8002a10 <soundPlay>
		HAL_Delay(21000);
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <main+0x1fc>)
 8000792:	0018      	movs	r0, r3
 8000794:	f004 fecc 	bl	8005530 <HAL_Delay>
		cmdExecute(cmd2Execute);
 8000798:	e7f2      	b.n	8000780 <main+0x1c4>
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	40021000 	.word	0x40021000
 80007a0:	2000008c 	.word	0x2000008c
 80007a4:	40004400 	.word	0x40004400
 80007a8:	1000100d 	.word	0x1000100d
 80007ac:	20000030 	.word	0x20000030
 80007b0:	50000800 	.word	0x50000800
 80007b4:	20000426 	.word	0x20000426
 80007b8:	00005208 	.word	0x00005208

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b590      	push	{r4, r7, lr}
 80007be:	b093      	sub	sp, #76	; 0x4c
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	2410      	movs	r4, #16
 80007c4:	193b      	adds	r3, r7, r4
 80007c6:	0018      	movs	r0, r3
 80007c8:	2338      	movs	r3, #56	; 0x38
 80007ca:	001a      	movs	r2, r3
 80007cc:	2100      	movs	r1, #0
 80007ce:	f00c f93f 	bl	800ca50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d2:	003b      	movs	r3, r7
 80007d4:	0018      	movs	r0, r3
 80007d6:	2310      	movs	r3, #16
 80007d8:	001a      	movs	r2, r3
 80007da:	2100      	movs	r1, #0
 80007dc:	f00c f938 	bl	800ca50 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e0:	2380      	movs	r3, #128	; 0x80
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	0018      	movs	r0, r3
 80007e6:	f007 fb51 	bl	8007e8c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	2202      	movs	r2, #2
 80007ee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	2280      	movs	r2, #128	; 0x80
 80007f4:	0052      	lsls	r2, r2, #1
 80007f6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007f8:	0021      	movs	r1, r4
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2240      	movs	r2, #64	; 0x40
 8000804:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2202      	movs	r2, #2
 800080a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2202      	movs	r2, #2
 8000810:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2200      	movs	r2, #0
 8000816:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2208      	movs	r2, #8
 800081c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	0292      	lsls	r2, r2, #10
 8000824:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2280      	movs	r2, #128	; 0x80
 800082a:	0492      	lsls	r2, r2, #18
 800082c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2280      	movs	r2, #128	; 0x80
 8000832:	0592      	lsls	r2, r2, #22
 8000834:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	187b      	adds	r3, r7, r1
 8000838:	0018      	movs	r0, r3
 800083a:	f007 fb73 	bl	8007f24 <HAL_RCC_OscConfig>
 800083e:	1e03      	subs	r3, r0, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000842:	f004 f929 	bl	8004a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000846:	003b      	movs	r3, r7
 8000848:	2207      	movs	r2, #7
 800084a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084c:	003b      	movs	r3, r7
 800084e:	2202      	movs	r2, #2
 8000850:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	003b      	movs	r3, r7
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000858:	003b      	movs	r3, r7
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800085e:	003b      	movs	r3, r7
 8000860:	2102      	movs	r1, #2
 8000862:	0018      	movs	r0, r3
 8000864:	f007 fe78 	bl	8008558 <HAL_RCC_ClockConfig>
 8000868:	1e03      	subs	r3, r0, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800086c:	f004 f914 	bl	8004a98 <Error_Handler>
  }
}
 8000870:	46c0      	nop			; (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	b013      	add	sp, #76	; 0x4c
 8000876:	bd90      	pop	{r4, r7, pc}

08000878 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800087c:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_COMP1_Init+0x5c>)
 800087e:	4a16      	ldr	r2, [pc, #88]	; (80008d8 <MX_COMP1_Init+0x60>)
 8000880:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_COMP1_Init+0x5c>)
 8000884:	2280      	movs	r2, #128	; 0x80
 8000886:	0052      	lsls	r2, r2, #1
 8000888:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_COMP1_Init+0x5c>)
 800088c:	2230      	movs	r2, #48	; 0x30
 800088e:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000890:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <MX_COMP1_Init+0x5c>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_COMP1_Init+0x5c>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800089c:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <MX_COMP1_Init+0x5c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_COMP1_Init+0x5c>)
 80008a4:	2280      	movs	r2, #128	; 0x80
 80008a6:	0392      	lsls	r2, r2, #14
 80008a8:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <MX_COMP1_Init+0x5c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_COMP1_Init+0x5c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 80008b6:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <MX_COMP1_Init+0x5c>)
 80008b8:	2212      	movs	r2, #18
 80008ba:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <MX_COMP1_Init+0x5c>)
 80008be:	0018      	movs	r0, r3
 80008c0:	f004 ff1c 	bl	80056fc <HAL_COMP_Init>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d001      	beq.n	80008cc <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 80008c8:	f004 f8e6 	bl	8004a98 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	2000008c 	.word	0x2000008c
 80008d8:	40010200 	.word	0x40010200

080008dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <MX_I2C1_Init+0x74>)
 80008e2:	4a1c      	ldr	r2, [pc, #112]	; (8000954 <MX_I2C1_Init+0x78>)
 80008e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_I2C1_Init+0x74>)
 80008e8:	4a1b      	ldr	r2, [pc, #108]	; (8000958 <MX_I2C1_Init+0x7c>)
 80008ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008ec:	4b18      	ldr	r3, [pc, #96]	; (8000950 <MX_I2C1_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008f2:	4b17      	ldr	r3, [pc, #92]	; (8000950 <MX_I2C1_Init+0x74>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f8:	4b15      	ldr	r3, [pc, #84]	; (8000950 <MX_I2C1_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_I2C1_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_I2C1_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_I2C1_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_I2C1_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_I2C1_Init+0x74>)
 8000918:	0018      	movs	r0, r3
 800091a:	f005 fdad 	bl	8006478 <HAL_I2C_Init>
 800091e:	1e03      	subs	r3, r0, #0
 8000920:	d001      	beq.n	8000926 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000922:	f004 f8b9 	bl	8004a98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000926:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <MX_I2C1_Init+0x74>)
 8000928:	2100      	movs	r1, #0
 800092a:	0018      	movs	r0, r3
 800092c:	f006 ff42 	bl	80077b4 <HAL_I2CEx_ConfigAnalogFilter>
 8000930:	1e03      	subs	r3, r0, #0
 8000932:	d001      	beq.n	8000938 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000934:	f004 f8b0 	bl	8004a98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <MX_I2C1_Init+0x74>)
 800093a:	2100      	movs	r1, #0
 800093c:	0018      	movs	r0, r3
 800093e:	f006 ff85 	bl	800784c <HAL_I2CEx_ConfigDigitalFilter>
 8000942:	1e03      	subs	r3, r0, #0
 8000944:	d001      	beq.n	800094a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000946:	f004 f8a7 	bl	8004a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	200000bc 	.word	0x200000bc
 8000954:	40005400 	.word	0x40005400
 8000958:	1094102c 	.word	0x1094102c

0800095c <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_I2S1_Init+0x4c>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <MX_I2S1_Init+0x50>)
 8000964:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_I2S1_Init+0x4c>)
 8000968:	2280      	movs	r2, #128	; 0x80
 800096a:	0092      	lsls	r2, r2, #2
 800096c:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_I2S1_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_I2S1_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_I2S1_Init+0x4c>)
 800097c:	2280      	movs	r2, #128	; 0x80
 800097e:	0092      	lsls	r2, r2, #2
 8000980:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_I2S1_Init+0x4c>)
 8000984:	22fa      	movs	r2, #250	; 0xfa
 8000986:	0192      	lsls	r2, r2, #6
 8000988:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <MX_I2S1_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <MX_I2S1_Init+0x4c>)
 8000992:	0018      	movs	r0, r3
 8000994:	f006 ffa6 	bl	80078e4 <HAL_I2S_Init>
 8000998:	1e03      	subs	r3, r0, #0
 800099a:	d001      	beq.n	80009a0 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 800099c:	f004 f87c 	bl	8004a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80009a0:	46c0      	nop			; (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	20000108 	.word	0x20000108
 80009ac:	40013000 	.word	0x40013000

080009b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80009b4:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <MX_SPI2_Init+0x80>)
 80009b6:	2208      	movs	r2, #8
 80009b8:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009ba:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <MX_SPI2_Init+0x80>)
 80009bc:	4a1d      	ldr	r2, [pc, #116]	; (8000a34 <MX_SPI2_Init+0x84>)
 80009be:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <MX_SPI2_Init+0x80>)
 80009c2:	2282      	movs	r2, #130	; 0x82
 80009c4:	0052      	lsls	r2, r2, #1
 80009c6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009c8:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <MX_SPI2_Init+0x80>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <MX_SPI2_Init+0x80>)
 80009d0:	22e0      	movs	r2, #224	; 0xe0
 80009d2:	00d2      	lsls	r2, r2, #3
 80009d4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009d6:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <MX_SPI2_Init+0x80>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_SPI2_Init+0x80>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_SPI2_Init+0x80>)
 80009e4:	2280      	movs	r2, #128	; 0x80
 80009e6:	0092      	lsls	r2, r2, #2
 80009e8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_SPI2_Init+0x80>)
 80009ec:	2210      	movs	r2, #16
 80009ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_SPI2_Init+0x80>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_SPI2_Init+0x80>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_SPI2_Init+0x80>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_SPI2_Init+0x80>)
 8000a04:	2207      	movs	r2, #7
 8000a06:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_SPI2_Init+0x80>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_SPI2_Init+0x80>)
 8000a10:	2208      	movs	r2, #8
 8000a12:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_SPI2_Init+0x80>)
 8000a16:	0018      	movs	r0, r3
 8000a18:	f008 fc48 	bl	80092ac <HAL_SPI_Init>
 8000a1c:	1e03      	subs	r3, r0, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 8000a20:	f004 f83a 	bl	8004a98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a24:	4b02      	ldr	r3, [pc, #8]	; (8000a30 <MX_SPI2_Init+0x80>)
 8000a26:	2208      	movs	r2, #8
 8000a28:	61da      	str	r2, [r3, #28]
  /* USER CODE END SPI2_Init 2 */

}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200001a0 	.word	0x200001a0
 8000a34:	40003800 	.word	0x40003800

08000a38 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b09e      	sub	sp, #120	; 0x78
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3e:	2368      	movs	r3, #104	; 0x68
 8000a40:	18fb      	adds	r3, r7, r3
 8000a42:	0018      	movs	r0, r3
 8000a44:	2310      	movs	r3, #16
 8000a46:	001a      	movs	r2, r3
 8000a48:	2100      	movs	r1, #0
 8000a4a:	f00c f801 	bl	800ca50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4e:	235c      	movs	r3, #92	; 0x5c
 8000a50:	18fb      	adds	r3, r7, r3
 8000a52:	0018      	movs	r0, r3
 8000a54:	230c      	movs	r3, #12
 8000a56:	001a      	movs	r2, r3
 8000a58:	2100      	movs	r1, #0
 8000a5a:	f00b fff9 	bl	800ca50 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000a5e:	2350      	movs	r3, #80	; 0x50
 8000a60:	18fb      	adds	r3, r7, r3
 8000a62:	0018      	movs	r0, r3
 8000a64:	230c      	movs	r3, #12
 8000a66:	001a      	movs	r2, r3
 8000a68:	2100      	movs	r1, #0
 8000a6a:	f00b fff1 	bl	800ca50 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a6e:	2334      	movs	r3, #52	; 0x34
 8000a70:	18fb      	adds	r3, r7, r3
 8000a72:	0018      	movs	r0, r3
 8000a74:	231c      	movs	r3, #28
 8000a76:	001a      	movs	r2, r3
 8000a78:	2100      	movs	r1, #0
 8000a7a:	f00b ffe9 	bl	800ca50 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a7e:	003b      	movs	r3, r7
 8000a80:	0018      	movs	r0, r3
 8000a82:	2334      	movs	r3, #52	; 0x34
 8000a84:	001a      	movs	r2, r3
 8000a86:	2100      	movs	r1, #0
 8000a88:	f00b ffe2 	bl	800ca50 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a8c:	4b64      	ldr	r3, [pc, #400]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000a8e:	4a65      	ldr	r2, [pc, #404]	; (8000c24 <MX_TIM1_Init+0x1ec>)
 8000a90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a92:	4b63      	ldr	r3, [pc, #396]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a98:	4b61      	ldr	r3, [pc, #388]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 8000a9e:	4b60      	ldr	r3, [pc, #384]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000aa0:	4a61      	ldr	r2, [pc, #388]	; (8000c28 <MX_TIM1_Init+0x1f0>)
 8000aa2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa4:	4b5e      	ldr	r3, [pc, #376]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aaa:	4b5d      	ldr	r3, [pc, #372]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ab0:	4b5b      	ldr	r3, [pc, #364]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000ab2:	2280      	movs	r2, #128	; 0x80
 8000ab4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ab6:	4b5a      	ldr	r3, [pc, #360]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f009 fc15 	bl	800a2e8 <HAL_TIM_Base_Init>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000ac2:	f003 ffe9 	bl	8004a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac6:	2168      	movs	r1, #104	; 0x68
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	2280      	movs	r2, #128	; 0x80
 8000acc:	0152      	lsls	r2, r2, #5
 8000ace:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ad0:	187a      	adds	r2, r7, r1
 8000ad2:	4b53      	ldr	r3, [pc, #332]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000ad4:	0011      	movs	r1, r2
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f009 fea8 	bl	800a82c <HAL_TIM_ConfigClockSource>
 8000adc:	1e03      	subs	r3, r0, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000ae0:	f003 ffda 	bl	8004a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ae4:	4b4e      	ldr	r3, [pc, #312]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f009 fc56 	bl	800a398 <HAL_TIM_PWM_Init>
 8000aec:	1e03      	subs	r3, r0, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000af0:	f003 ffd2 	bl	8004a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af4:	215c      	movs	r1, #92	; 0x5c
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2200      	movs	r2, #0
 8000b00:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b08:	187a      	adds	r2, r7, r1
 8000b0a:	4b45      	ldr	r3, [pc, #276]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000b0c:	0011      	movs	r1, r2
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f00a fb66 	bl	800b1e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b14:	1e03      	subs	r3, r0, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000b18:	f003 ffbe 	bl	8004a98 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8000b1c:	2150      	movs	r1, #80	; 0x50
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	2202      	movs	r2, #2
 8000b22:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	2201      	movs	r2, #1
 8000b28:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000b30:	187a      	adds	r2, r7, r1
 8000b32:	4b3b      	ldr	r3, [pc, #236]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000b34:	2101      	movs	r1, #1
 8000b36:	0018      	movs	r0, r3
 8000b38:	f00a fc66 	bl	800b408 <HAL_TIMEx_ConfigBreakInput>
 8000b3c:	1e03      	subs	r3, r0, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000b40:	f003 ffaa 	bl	8004a98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b44:	2134      	movs	r1, #52	; 0x34
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	2260      	movs	r2, #96	; 0x60
 8000b4a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	2296      	movs	r2, #150	; 0x96
 8000b50:	0052      	lsls	r2, r2, #1
 8000b52:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	2204      	movs	r2, #4
 8000b64:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b72:	1879      	adds	r1, r7, r1
 8000b74:	4b2a      	ldr	r3, [pc, #168]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f009 fd57 	bl	800a62c <HAL_TIM_PWM_ConfigChannel>
 8000b7e:	1e03      	subs	r3, r0, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000b82:	f003 ff89 	bl	8004a98 <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000b86:	2134      	movs	r1, #52	; 0x34
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	2232      	movs	r2, #50	; 0x32
 8000b8c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000b8e:	1879      	adds	r1, r7, r1
 8000b90:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000b92:	2210      	movs	r2, #16
 8000b94:	0018      	movs	r0, r3
 8000b96:	f009 fd49 	bl	800a62c <HAL_TIM_PWM_ConfigChannel>
 8000b9a:	1e03      	subs	r3, r0, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8000b9e:	f003 ff7b 	bl	8004a98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000ba2:	003b      	movs	r3, r7
 8000ba4:	2280      	movs	r2, #128	; 0x80
 8000ba6:	0112      	lsls	r2, r2, #4
 8000ba8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000baa:	003b      	movs	r3, r7
 8000bac:	2280      	movs	r2, #128	; 0x80
 8000bae:	00d2      	lsls	r2, r2, #3
 8000bb0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bb2:	003b      	movs	r3, r7
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bb8:	003b      	movs	r3, r7
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000bbe:	003b      	movs	r3, r7
 8000bc0:	2280      	movs	r2, #128	; 0x80
 8000bc2:	0152      	lsls	r2, r2, #5
 8000bc4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bc6:	003b      	movs	r3, r7
 8000bc8:	2280      	movs	r2, #128	; 0x80
 8000bca:	0192      	lsls	r2, r2, #6
 8000bcc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8000bce:	003b      	movs	r3, r7
 8000bd0:	220a      	movs	r2, #10
 8000bd2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000bd4:	003b      	movs	r3, r7
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bda:	003b      	movs	r3, r7
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000be0:	003b      	movs	r3, r7
 8000be2:	2280      	movs	r2, #128	; 0x80
 8000be4:	0492      	lsls	r2, r2, #18
 8000be6:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000be8:	003b      	movs	r3, r7
 8000bea:	2200      	movs	r2, #0
 8000bec:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000bee:	003b      	movs	r3, r7
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000bf4:	003b      	movs	r3, r7
 8000bf6:	2280      	movs	r2, #128	; 0x80
 8000bf8:	01d2      	lsls	r2, r2, #7
 8000bfa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bfc:	003a      	movs	r2, r7
 8000bfe:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000c00:	0011      	movs	r1, r2
 8000c02:	0018      	movs	r0, r3
 8000c04:	f00a fb5a 	bl	800b2bc <HAL_TIMEx_ConfigBreakDeadTime>
 8000c08:	1e03      	subs	r3, r0, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 8000c0c:	f003 ff44 	bl	8004a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <MX_TIM1_Init+0x1e8>)
 8000c12:	0018      	movs	r0, r3
 8000c14:	f004 f9ca 	bl	8004fac <HAL_TIM_MspPostInit>

}
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b01e      	add	sp, #120	; 0x78
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	200002bc 	.word	0x200002bc
 8000c24:	40012c00 	.word	0x40012c00
 8000c28:	0000027f 	.word	0x0000027f

08000c2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b09d      	sub	sp, #116	; 0x74
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000c32:	2350      	movs	r3, #80	; 0x50
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	0018      	movs	r0, r3
 8000c38:	2320      	movs	r3, #32
 8000c3a:	001a      	movs	r2, r3
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	f00b ff07 	bl	800ca50 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c42:	2338      	movs	r3, #56	; 0x38
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	0018      	movs	r0, r3
 8000c48:	2318      	movs	r3, #24
 8000c4a:	001a      	movs	r2, r3
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	f00b feff 	bl	800ca50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	0018      	movs	r0, r3
 8000c56:	2334      	movs	r3, #52	; 0x34
 8000c58:	001a      	movs	r2, r3
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	f00b fef8 	bl	800ca50 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	2202      	movs	r2, #2
 8000c64:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f007 fe1c 	bl	80088ac <HAL_RCCEx_PeriphCLKConfig>
 8000c74:	1e03      	subs	r3, r0, #0
 8000c76:	d001      	beq.n	8000c7c <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8000c78:	f003 ff0e 	bl	8004a98 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	029b      	lsls	r3, r3, #10
 8000c80:	0018      	movs	r0, r3
 8000c82:	f7ff fc6f 	bl	8000564 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000c86:	2001      	movs	r0, #1
 8000c88:	f7ff fc82 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000c8c:	2438      	movs	r4, #56	; 0x38
 8000c8e:	193b      	adds	r3, r7, r4
 8000c90:	2204      	movs	r2, #4
 8000c92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c94:	193b      	adds	r3, r7, r4
 8000c96:	2202      	movs	r2, #2
 8000c98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ca0:	193b      	adds	r3, r7, r4
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ca6:	193b      	adds	r3, r7, r4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000cac:	193b      	adds	r3, r7, r4
 8000cae:	2201      	movs	r2, #1
 8000cb0:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	193a      	adds	r2, r7, r4
 8000cb4:	23a0      	movs	r3, #160	; 0xa0
 8000cb6:	05db      	lsls	r3, r3, #23
 8000cb8:	0011      	movs	r1, r2
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f00b fb46 	bl	800c34c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000cc0:	0021      	movs	r1, r4
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	2208      	movs	r2, #8
 8000cc6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	2202      	movs	r2, #2
 8000ccc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000cce:	187b      	adds	r3, r7, r1
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	187a      	adds	r2, r7, r1
 8000ce8:	23a0      	movs	r3, #160	; 0xa0
 8000cea:	05db      	lsls	r3, r3, #23
 8000cec:	0011      	movs	r1, r2
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f00b fb2c 	bl	800c34c <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	201c      	movs	r0, #28
 8000cf8:	f7ff faaa 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000cfc:	201c      	movs	r0, #28
 8000cfe:	f7ff fa8d 	bl	800021c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000d02:	2150      	movs	r1, #80	; 0x50
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	22e1      	movs	r2, #225	; 0xe1
 8000d0e:	0212      	lsls	r2, r2, #8
 8000d10:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	2280      	movs	r2, #128	; 0x80
 8000d16:	0152      	lsls	r2, r2, #5
 8000d18:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	220c      	movs	r2, #12
 8000d2a:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	2200      	movs	r2, #0
 8000d30:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	2200      	movs	r2, #0
 8000d36:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	4a16      	ldr	r2, [pc, #88]	; (8000d94 <MX_USART2_UART_Init+0x168>)
 8000d3c:	0019      	movs	r1, r3
 8000d3e:	0010      	movs	r0, r2
 8000d40:	f00b fdd4 	bl	800c8ec <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <MX_USART2_UART_Init+0x168>)
 8000d46:	2100      	movs	r1, #0
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f7ff fb0d 	bl	8000368 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_USART2_UART_Init+0x168>)
 8000d50:	2100      	movs	r1, #0
 8000d52:	0018      	movs	r0, r3
 8000d54:	f7ff fb2c 	bl	80003b0 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_USART2_UART_Init+0x168>)
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f7ff faf4 	bl	8000348 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_USART2_UART_Init+0x168>)
 8000d62:	0018      	movs	r0, r3
 8000d64:	f7ff fb4a 	bl	80003fc <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000d68:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <MX_USART2_UART_Init+0x168>)
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff fade 	bl	800032c <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_USART2_UART_Init+0x168>)
 8000d74:	0018      	movs	r0, r3
 8000d76:	f7ff fb59 	bl	800042c <LL_USART_IsActiveFlag_TEACK>
 8000d7a:	1e03      	subs	r3, r0, #0
 8000d7c:	d0f9      	beq.n	8000d72 <MX_USART2_UART_Init+0x146>
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <MX_USART2_UART_Init+0x168>)
 8000d80:	0018      	movs	r0, r3
 8000d82:	f7ff fb67 	bl	8000454 <LL_USART_IsActiveFlag_REACK>
 8000d86:	1e03      	subs	r3, r0, #0
 8000d88:	d0f3      	beq.n	8000d72 <MX_USART2_UART_Init+0x146>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	46c0      	nop			; (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	b01d      	add	sp, #116	; 0x74
 8000d92:	bd90      	pop	{r4, r7, pc}
 8000d94:	40004400 	.word	0x40004400

08000d98 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8000d9c:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <MX_USART3_Init+0x78>)
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <MX_USART3_Init+0x78>)
 8000da2:	2180      	movs	r1, #128	; 0x80
 8000da4:	0309      	lsls	r1, r1, #12
 8000da6:	430a      	orrs	r2, r1
 8000da8:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000daa:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <MX_USART3_Init+0x7c>)
 8000dac:	4a18      	ldr	r2, [pc, #96]	; (8000e10 <MX_USART3_Init+0x78>)
 8000dae:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 4000000;
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <MX_USART3_Init+0x7c>)
 8000db2:	4a19      	ldr	r2, [pc, #100]	; (8000e18 <MX_USART3_Init+0x80>)
 8000db4:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <MX_USART3_Init+0x7c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000dbc:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <MX_USART3_Init+0x7c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <MX_USART3_Init+0x7c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <MX_USART3_Init+0x7c>)
 8000dca:	2208      	movs	r2, #8
 8000dcc:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <MX_USART3_Init+0x7c>)
 8000dd0:	2280      	movs	r2, #128	; 0x80
 8000dd2:	00d2      	lsls	r2, r2, #3
 8000dd4:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <MX_USART3_Init+0x7c>)
 8000dd8:	2280      	movs	r2, #128	; 0x80
 8000dda:	0092      	lsls	r2, r2, #2
 8000ddc:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <MX_USART3_Init+0x7c>)
 8000de0:	2280      	movs	r2, #128	; 0x80
 8000de2:	0052      	lsls	r2, r2, #1
 8000de4:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <MX_USART3_Init+0x7c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <MX_USART3_Init+0x7c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <MX_USART3_Init+0x7c>)
 8000df4:	0018      	movs	r0, r3
 8000df6:	f00a fbb3 	bl	800b560 <HAL_USART_Init>
 8000dfa:	1e03      	subs	r3, r0, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8000dfe:	f003 fe4b 	bl	8004a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  husart3.Init.BaudRate = 8000000;
 8000e02:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <MX_USART3_Init+0x7c>)
 8000e04:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <MX_USART3_Init+0x84>)
 8000e06:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 2 */

}
 8000e08:	46c0      	nop			; (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	40004800 	.word	0x40004800
 8000e14:	20000308 	.word	0x20000308
 8000e18:	003d0900 	.word	0x003d0900
 8000e1c:	007a1200 	.word	0x007a1200

08000e20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <MX_DMA_Init+0x58>)
 8000e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <MX_DMA_Init+0x58>)
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	639a      	str	r2, [r3, #56]	; 0x38
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <MX_DMA_Init+0x58>)
 8000e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e36:	2201      	movs	r2, #1
 8000e38:	4013      	ands	r3, r2
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2100      	movs	r1, #0
 8000e42:	2009      	movs	r0, #9
 8000e44:	f004 feba 	bl	8005bbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e48:	2009      	movs	r0, #9
 8000e4a:	f004 fecc 	bl	8005be6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2100      	movs	r1, #0
 8000e52:	200a      	movs	r0, #10
 8000e54:	f004 feb2 	bl	8005bbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000e58:	200a      	movs	r0, #10
 8000e5a:	f004 fec4 	bl	8005be6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2100      	movs	r1, #0
 8000e62:	200b      	movs	r0, #11
 8000e64:	f004 feaa 	bl	8005bbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8000e68:	200b      	movs	r0, #11
 8000e6a:	f004 febc 	bl	8005be6 <HAL_NVIC_EnableIRQ>

}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b002      	add	sp, #8
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	40021000 	.word	0x40021000

08000e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e82:	003b      	movs	r3, r7
 8000e84:	0018      	movs	r0, r3
 8000e86:	2318      	movs	r3, #24
 8000e88:	001a      	movs	r2, r3
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	f00b fde0 	bl	800ca50 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000e90:	2002      	movs	r0, #2
 8000e92:	f7ff fb7d 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000e96:	2004      	movs	r0, #4
 8000e98:	f7ff fb7a 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	f7ff fb77 	bl	8000590 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8000ea2:	2380      	movs	r3, #128	; 0x80
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	4a8f      	ldr	r2, [pc, #572]	; (80010e4 <MX_GPIO_Init+0x268>)
 8000ea8:	0019      	movs	r1, r3
 8000eaa:	0010      	movs	r0, r2
 8000eac:	f7ff fb42 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	01db      	lsls	r3, r3, #7
 8000eb4:	4a8c      	ldr	r2, [pc, #560]	; (80010e8 <MX_GPIO_Init+0x26c>)
 8000eb6:	0019      	movs	r1, r3
 8000eb8:	0010      	movs	r0, r2
 8000eba:	f7ff fb3b 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8000ebe:	2380      	movs	r3, #128	; 0x80
 8000ec0:	021b      	lsls	r3, r3, #8
 8000ec2:	4a89      	ldr	r2, [pc, #548]	; (80010e8 <MX_GPIO_Init+0x26c>)
 8000ec4:	0019      	movs	r1, r3
 8000ec6:	0010      	movs	r0, r2
 8000ec8:	f7ff fb34 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8000ecc:	23a0      	movs	r3, #160	; 0xa0
 8000ece:	05db      	lsls	r3, r3, #23
 8000ed0:	2140      	movs	r1, #64	; 0x40
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f7ff fb2e 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8000ed8:	23a0      	movs	r3, #160	; 0xa0
 8000eda:	05db      	lsls	r3, r3, #23
 8000edc:	2180      	movs	r1, #128	; 0x80
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f7ff fb28 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8000ee4:	4b80      	ldr	r3, [pc, #512]	; (80010e8 <MX_GPIO_Init+0x26c>)
 8000ee6:	2140      	movs	r1, #64	; 0x40
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f7ff fb23 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_1_GPIO_Port, TEST_1_Pin);
 8000eee:	2380      	movs	r3, #128	; 0x80
 8000ef0:	011a      	lsls	r2, r3, #4
 8000ef2:	23a0      	movs	r3, #160	; 0xa0
 8000ef4:	05db      	lsls	r3, r3, #23
 8000ef6:	0011      	movs	r1, r2
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f7ff fb27 	bl	800054c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_2_GPIO_Port, TEST_2_Pin);
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	015a      	lsls	r2, r3, #5
 8000f02:	23a0      	movs	r3, #160	; 0xa0
 8000f04:	05db      	lsls	r3, r3, #23
 8000f06:	0011      	movs	r1, r2
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f7ff fb1f 	bl	800054c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8000f0e:	003b      	movs	r3, r7
 8000f10:	2280      	movs	r2, #128	; 0x80
 8000f12:	0092      	lsls	r2, r2, #2
 8000f14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f16:	003b      	movs	r3, r7
 8000f18:	2201      	movs	r2, #1
 8000f1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1c:	003b      	movs	r3, r7
 8000f1e:	2203      	movs	r2, #3
 8000f20:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f22:	003b      	movs	r3, r7
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f28:	003b      	movs	r3, r7
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	003b      	movs	r3, r7
 8000f30:	4a6c      	ldr	r2, [pc, #432]	; (80010e4 <MX_GPIO_Init+0x268>)
 8000f32:	0019      	movs	r1, r3
 8000f34:	0010      	movs	r0, r2
 8000f36:	f00b fa09 	bl	800c34c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8000f3a:	003b      	movs	r3, r7
 8000f3c:	2280      	movs	r2, #128	; 0x80
 8000f3e:	01d2      	lsls	r2, r2, #7
 8000f40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f42:	003b      	movs	r3, r7
 8000f44:	2201      	movs	r2, #1
 8000f46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f48:	003b      	movs	r3, r7
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f4e:	003b      	movs	r3, r7
 8000f50:	2200      	movs	r2, #0
 8000f52:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f54:	003b      	movs	r3, r7
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000f5a:	003b      	movs	r3, r7
 8000f5c:	4a62      	ldr	r2, [pc, #392]	; (80010e8 <MX_GPIO_Init+0x26c>)
 8000f5e:	0019      	movs	r1, r3
 8000f60:	0010      	movs	r0, r2
 8000f62:	f00b f9f3 	bl	800c34c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8000f66:	003b      	movs	r3, r7
 8000f68:	2280      	movs	r2, #128	; 0x80
 8000f6a:	0212      	lsls	r2, r2, #8
 8000f6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f6e:	003b      	movs	r3, r7
 8000f70:	2201      	movs	r2, #1
 8000f72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f74:	003b      	movs	r3, r7
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f7a:	003b      	movs	r3, r7
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f80:	003b      	movs	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000f86:	003b      	movs	r3, r7
 8000f88:	4a57      	ldr	r2, [pc, #348]	; (80010e8 <MX_GPIO_Init+0x26c>)
 8000f8a:	0019      	movs	r1, r3
 8000f8c:	0010      	movs	r0, r2
 8000f8e:	f00b f9dd 	bl	800c34c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8000f92:	003b      	movs	r3, r7
 8000f94:	2201      	movs	r2, #1
 8000f96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f98:	003b      	movs	r3, r7
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f9e:	003b      	movs	r3, r7
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	003a      	movs	r2, r7
 8000fa6:	23a0      	movs	r3, #160	; 0xa0
 8000fa8:	05db      	lsls	r3, r3, #23
 8000faa:	0011      	movs	r1, r2
 8000fac:	0018      	movs	r0, r3
 8000fae:	f00b f9cd 	bl	800c34c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8000fb2:	003b      	movs	r3, r7
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000fb8:	003b      	movs	r3, r7
 8000fba:	2200      	movs	r2, #0
 8000fbc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000fbe:	003b      	movs	r3, r7
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	003a      	movs	r2, r7
 8000fc6:	23a0      	movs	r3, #160	; 0xa0
 8000fc8:	05db      	lsls	r3, r3, #23
 8000fca:	0011      	movs	r1, r2
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f00b f9bd 	bl	800c34c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000fd2:	003b      	movs	r3, r7
 8000fd4:	2210      	movs	r2, #16
 8000fd6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000fd8:	003b      	movs	r3, r7
 8000fda:	2200      	movs	r2, #0
 8000fdc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000fde:	003b      	movs	r3, r7
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	003a      	movs	r2, r7
 8000fe6:	23a0      	movs	r3, #160	; 0xa0
 8000fe8:	05db      	lsls	r3, r3, #23
 8000fea:	0011      	movs	r1, r2
 8000fec:	0018      	movs	r0, r3
 8000fee:	f00b f9ad 	bl	800c34c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000ff2:	003b      	movs	r3, r7
 8000ff4:	2240      	movs	r2, #64	; 0x40
 8000ff6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ff8:	003b      	movs	r3, r7
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffe:	003b      	movs	r3, r7
 8001000:	2203      	movs	r2, #3
 8001002:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001004:	003b      	movs	r3, r7
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800100a:	003b      	movs	r3, r7
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8001010:	003a      	movs	r2, r7
 8001012:	23a0      	movs	r3, #160	; 0xa0
 8001014:	05db      	lsls	r3, r3, #23
 8001016:	0011      	movs	r1, r2
 8001018:	0018      	movs	r0, r3
 800101a:	f00b f997 	bl	800c34c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 800101e:	003b      	movs	r3, r7
 8001020:	2280      	movs	r2, #128	; 0x80
 8001022:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001024:	003b      	movs	r3, r7
 8001026:	2201      	movs	r2, #1
 8001028:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800102a:	003b      	movs	r3, r7
 800102c:	2203      	movs	r2, #3
 800102e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001030:	003b      	movs	r3, r7
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001036:	003b      	movs	r3, r7
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 800103c:	003a      	movs	r2, r7
 800103e:	23a0      	movs	r3, #160	; 0xa0
 8001040:	05db      	lsls	r3, r3, #23
 8001042:	0011      	movs	r1, r2
 8001044:	0018      	movs	r0, r3
 8001046:	f00b f981 	bl	800c34c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 800104a:	003b      	movs	r3, r7
 800104c:	2240      	movs	r2, #64	; 0x40
 800104e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001050:	003b      	movs	r3, r7
 8001052:	2201      	movs	r2, #1
 8001054:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001056:	003b      	movs	r3, r7
 8001058:	2203      	movs	r2, #3
 800105a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800105c:	003b      	movs	r3, r7
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001062:	003b      	movs	r3, r7
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8001068:	003b      	movs	r3, r7
 800106a:	4a1f      	ldr	r2, [pc, #124]	; (80010e8 <MX_GPIO_Init+0x26c>)
 800106c:	0019      	movs	r1, r3
 800106e:	0010      	movs	r0, r2
 8001070:	f00b f96c 	bl	800c34c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_1_Pin;
 8001074:	003b      	movs	r3, r7
 8001076:	2280      	movs	r2, #128	; 0x80
 8001078:	0112      	lsls	r2, r2, #4
 800107a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800107c:	003b      	movs	r3, r7
 800107e:	2201      	movs	r2, #1
 8001080:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001082:	003b      	movs	r3, r7
 8001084:	2203      	movs	r2, #3
 8001086:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001088:	003b      	movs	r3, r7
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800108e:	003b      	movs	r3, r7
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_1_GPIO_Port, &GPIO_InitStruct);
 8001094:	003a      	movs	r2, r7
 8001096:	23a0      	movs	r3, #160	; 0xa0
 8001098:	05db      	lsls	r3, r3, #23
 800109a:	0011      	movs	r1, r2
 800109c:	0018      	movs	r0, r3
 800109e:	f00b f955 	bl	800c34c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_2_Pin;
 80010a2:	003b      	movs	r3, r7
 80010a4:	2280      	movs	r2, #128	; 0x80
 80010a6:	0152      	lsls	r2, r2, #5
 80010a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010aa:	003b      	movs	r3, r7
 80010ac:	2201      	movs	r2, #1
 80010ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	003b      	movs	r3, r7
 80010b2:	2203      	movs	r2, #3
 80010b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010b6:	003b      	movs	r3, r7
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010bc:	003b      	movs	r3, r7
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_2_GPIO_Port, &GPIO_InitStruct);
 80010c2:	003a      	movs	r2, r7
 80010c4:	23a0      	movs	r3, #160	; 0xa0
 80010c6:	05db      	lsls	r3, r3, #23
 80010c8:	0011      	movs	r1, r2
 80010ca:	0018      	movs	r0, r3
 80010cc:	f00b f93e 	bl	800c34c <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	031b      	lsls	r3, r3, #12
 80010d4:	0018      	movs	r0, r3
 80010d6:	f7ff fa1d 	bl	8000514 <LL_SYSCFG_EnableFastModePlus>

}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	46bd      	mov	sp, r7
 80010de:	b006      	add	sp, #24
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	50000400 	.word	0x50000400
 80010e8:	50000800 	.word	0x50000800

080010ec <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <USART2_RX_Callback+0x58>)
 80010f2:	0018      	movs	r0, r3
 80010f4:	f7ff fa00 	bl	80004f8 <LL_USART_ReceiveData9>
 80010f8:	0003      	movs	r3, r0
 80010fa:	001a      	movs	r2, r3
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <USART2_RX_Callback+0x5c>)
 80010fe:	801a      	strh	r2, [r3, #0]
//	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
  ByteReceived=1;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <USART2_RX_Callback+0x60>)
 8001102:	2201      	movs	r2, #1
 8001104:	701a      	strb	r2, [r3, #0]
  if(dt1 & 0x100){
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <USART2_RX_Callback+0x5c>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	001a      	movs	r2, r3
 800110c:	2380      	movs	r3, #128	; 0x80
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4013      	ands	r3, r2
 8001112:	d00a      	beq.n	800112a <USART2_RX_Callback+0x3e>
	  cmd[0]=dt1;
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <USART2_RX_Callback+0x5c>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <USART2_RX_Callback+0x64>)
 800111c:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <USART2_RX_Callback+0x68>)
 8001120:	2200      	movs	r2, #0
 8001122:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <USART2_RX_Callback+0x6c>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <USART2_RX_Callback+0x6c>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d104      	bne.n	800113c <USART2_RX_Callback+0x50>
	  cmdReceive(dt1);
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <USART2_RX_Callback+0x5c>)
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	0018      	movs	r0, r3
 8001138:	f000 f85a 	bl	80011f0 <cmdReceive>
  }
}
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	40004400 	.word	0x40004400
 8001148:	20000422 	.word	0x20000422
 800114c:	20000420 	.word	0x20000420
 8001150:	200003f0 	.word	0x200003f0
 8001154:	20000424 	.word	0x20000424
 8001158:	20000421 	.word	0x20000421

0800115c <HAL_USART_TxCpltCallback>:
//return;
//	}
}
//==============================================================
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart3)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= ~(1 << 7);	//reset dc
 8001164:	23a0      	movs	r3, #160	; 0xa0
 8001166:	05db      	lsls	r3, r3, #23
 8001168:	695a      	ldr	r2, [r3, #20]
 800116a:	23a0      	movs	r3, #160	; 0xa0
 800116c:	05db      	lsls	r3, r3, #23
 800116e:	2180      	movs	r1, #128	; 0x80
 8001170:	438a      	bics	r2, r1
 8001172:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= 1 << 6;	//set cs
 8001174:	23a0      	movs	r3, #160	; 0xa0
 8001176:	05db      	lsls	r3, r3, #23
 8001178:	695a      	ldr	r2, [r3, #20]
 800117a:	23a0      	movs	r3, #160	; 0xa0
 800117c:	05db      	lsls	r3, r3, #23
 800117e:	2140      	movs	r1, #64	; 0x40
 8001180:	430a      	orrs	r2, r1
 8001182:	615a      	str	r2, [r3, #20]
	cmd2Execute=0;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_USART_TxCpltCallback+0x44>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
//	while(BFEN==0){};
	GPIOC->ODR |= 1 << 6;	//set BF
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_USART_TxCpltCallback+0x48>)
 800118c:	695a      	ldr	r2, [r3, #20]
 800118e:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <HAL_USART_TxCpltCallback+0x48>)
 8001190:	2140      	movs	r1, #64	; 0x40
 8001192:	430a      	orrs	r2, r1
 8001194:	615a      	str	r2, [r3, #20]
}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	46bd      	mov	sp, r7
 800119a:	b002      	add	sp, #8
 800119c:	bd80      	pop	{r7, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	20000426 	.word	0x20000426
 80011a4:	50000800 	.word	0x50000800

080011a8 <HAL_I2S_TxHalfCpltCallback>:
//	GPIOA->ODR |= 1 << 6;	//set cs		????????????????????????????????????????????????
	//	cmd2Execute=0;
//	GPIOC->ODR |= 1 << 6;	//set BF
}
//======================================================================================================================
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s1) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	curBuf += 1;
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <HAL_I2S_TxHalfCpltCallback+0x1c>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	3301      	adds	r3, #1
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	4b02      	ldr	r3, [pc, #8]	; (80011c4 <HAL_I2S_TxHalfCpltCallback+0x1c>)
 80011ba:	801a      	strh	r2, [r3, #0]
//		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[1], 1, 50); //send address
//		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[0], 1, 50); //send address
//		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
//		curAddr+=sizeof(MEM_Buffer);
//    }
}
 80011bc:	46c0      	nop			; (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	b002      	add	sp, #8
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000434 	.word	0x20000434

080011c8 <HAL_I2S_TxCpltCallback>:
//======================================================================================================================
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s1) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
//	if(numSound==1){
	soundReady=1;
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <HAL_I2S_TxCpltCallback+0x20>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	701a      	strb	r2, [r3, #0]
	soundLoad(soundNum);
 80011d6:	4b05      	ldr	r3, [pc, #20]	; (80011ec <HAL_I2S_TxCpltCallback+0x24>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	0018      	movs	r0, r3
 80011dc:	f001 fa28 	bl	8002630 <soundLoad>
//		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[1], 1, 50); //send address
//		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[0], 1, 50); //send address
//		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
//		curAddr+=sizeof(MEM_Buffer);
//    }
}
 80011e0:	46c0      	nop			; (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b002      	add	sp, #8
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000061 	.word	0x20000061
 80011ec:	200003c6 	.word	0x200003c6

080011f0 <cmdReceive>:
//=======================================================================================================================
	void cmdReceive (uint16_t dt1)
	{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	0002      	movs	r2, r0
 80011f8:	1dbb      	adds	r3, r7, #6
 80011fa:	801a      	strh	r2, [r3, #0]
//	  uint8_t inputCS=0;
	  uint8_t i=0;
 80011fc:	230f      	movs	r3, #15
 80011fe:	18fb      	adds	r3, r7, r3
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 8001204:	46c0      	nop			; (mov r8, r8)
 8001206:	4b39      	ldr	r3, [pc, #228]	; (80012ec <cmdReceive+0xfc>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0fb      	beq.n	8001206 <cmdReceive+0x16>
	  ByteReceived=0;
 800120e:	4b37      	ldr	r3, [pc, #220]	; (80012ec <cmdReceive+0xfc>)
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 8001214:	4b36      	ldr	r3, [pc, #216]	; (80012f0 <cmdReceive+0x100>)
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	001a      	movs	r2, r3
 800121a:	1dbb      	adds	r3, r7, #6
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	b2d9      	uxtb	r1, r3
 8001220:	4b34      	ldr	r3, [pc, #208]	; (80012f4 <cmdReceive+0x104>)
 8001222:	5499      	strb	r1, [r3, r2]
//	  if(dt1==0x110){
//		  BFEN=0;
//	  }
	  ind++;
 8001224:	4b32      	ldr	r3, [pc, #200]	; (80012f0 <cmdReceive+0x100>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	3301      	adds	r3, #1
 800122a:	b29a      	uxth	r2, r3
 800122c:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <cmdReceive+0x100>)
 800122e:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 8001230:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <cmdReceive+0x100>)
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d04f      	beq.n	80012d8 <cmdReceive+0xe8>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 8001238:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <cmdReceive+0x100>)
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	001a      	movs	r2, r3
 800123e:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <cmdReceive+0x104>)
 8001240:	785b      	ldrb	r3, [r3, #1]
 8001242:	3301      	adds	r3, #1
 8001244:	429a      	cmp	r2, r3
 8001246:	dd47      	ble.n	80012d8 <cmdReceive+0xe8>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 8001248:	230f      	movs	r3, #15
 800124a:	18fb      	adds	r3, r7, r3
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
 8001250:	e00f      	b.n	8001272 <cmdReceive+0x82>
				 inputCS+=cmd[i];
 8001252:	210f      	movs	r1, #15
 8001254:	187b      	adds	r3, r7, r1
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4a26      	ldr	r2, [pc, #152]	; (80012f4 <cmdReceive+0x104>)
 800125a:	5cd2      	ldrb	r2, [r2, r3]
 800125c:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <cmdReceive+0x108>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	18d3      	adds	r3, r2, r3
 8001262:	b2da      	uxtb	r2, r3
 8001264:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <cmdReceive+0x108>)
 8001266:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 8001268:	187b      	adds	r3, r7, r1
 800126a:	781a      	ldrb	r2, [r3, #0]
 800126c:	187b      	adds	r3, r7, r1
 800126e:	3201      	adds	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
 8001272:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <cmdReceive+0x104>)
 8001274:	785b      	ldrb	r3, [r3, #1]
 8001276:	1c5a      	adds	r2, r3, #1
 8001278:	210f      	movs	r1, #15
 800127a:	187b      	adds	r3, r7, r1
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	dae7      	bge.n	8001252 <cmdReceive+0x62>
			 }
			 if(!(inputCS==0x00)&&(ind==cmd[1]+2)){
 8001282:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <cmdReceive+0x108>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d022      	beq.n	80012d0 <cmdReceive+0xe0>
 800128a:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <cmdReceive+0x100>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	001a      	movs	r2, r3
 8001290:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <cmdReceive+0x104>)
 8001292:	785b      	ldrb	r3, [r3, #1]
 8001294:	3302      	adds	r3, #2
 8001296:	429a      	cmp	r2, r3
 8001298:	d11a      	bne.n	80012d0 <cmdReceive+0xe0>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
//				 firstByteReceived=0;
				 firstByteReceived=0;
 800129a:	4b18      	ldr	r3, [pc, #96]	; (80012fc <cmdReceive+0x10c>)
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
				 				 for (i=0;i<cmd[1]+2;i++){
 80012a0:	187b      	adds	r3, r7, r1
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
 80012a6:	e00a      	b.n	80012be <cmdReceive+0xce>
				 					 cmd[i]=0;
 80012a8:	200f      	movs	r0, #15
 80012aa:	183b      	adds	r3, r7, r0
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	4a11      	ldr	r2, [pc, #68]	; (80012f4 <cmdReceive+0x104>)
 80012b0:	2100      	movs	r1, #0
 80012b2:	54d1      	strb	r1, [r2, r3]
				 				 for (i=0;i<cmd[1]+2;i++){
 80012b4:	183b      	adds	r3, r7, r0
 80012b6:	781a      	ldrb	r2, [r3, #0]
 80012b8:	183b      	adds	r3, r7, r0
 80012ba:	3201      	adds	r2, #1
 80012bc:	701a      	strb	r2, [r3, #0]
 80012be:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <cmdReceive+0x104>)
 80012c0:	785b      	ldrb	r3, [r3, #1]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	230f      	movs	r3, #15
 80012c6:	18fb      	adds	r3, r7, r3
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	daec      	bge.n	80012a8 <cmdReceive+0xb8>
			 if(!(inputCS==0x00)&&(ind==cmd[1]+2)){
 80012ce:	e003      	b.n	80012d8 <cmdReceive+0xe8>
				 				 }
			 }
			 else{
				 answer2CPU(cmd);
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <cmdReceive+0x104>)
 80012d2:	0018      	movs	r0, r3
 80012d4:	f000 fad8 	bl	8001888 <answer2CPU>
//				 GPIOC->ODR |= 1 << 6;	//set BF
//			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <cmdReceive+0x110>)
 80012da:	6a1a      	ldr	r2, [r3, #32]
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <cmdReceive+0x110>)
 80012de:	2108      	movs	r1, #8
 80012e0:	430a      	orrs	r2, r1
 80012e2:	621a      	str	r2, [r3, #32]
	}
 80012e4:	46c0      	nop			; (mov r8, r8)
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b004      	add	sp, #16
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000420 	.word	0x20000420
 80012f0:	20000424 	.word	0x20000424
 80012f4:	200003f0 	.word	0x200003f0
 80012f8:	20000428 	.word	0x20000428
 80012fc:	20000421 	.word	0x20000421
 8001300:	40004400 	.word	0x40004400

08001304 <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	0002      	movs	r2, r0
 800130c:	1dfb      	adds	r3, r7, #7
 800130e:	701a      	strb	r2, [r3, #0]
			HAL_USART_Transmit(&husart3, (uint8_t*)&byte, 1, 10);
 8001310:	1df9      	adds	r1, r7, #7
 8001312:	4804      	ldr	r0, [pc, #16]	; (8001324 <USART_AS_SPI_sendCMD+0x20>)
 8001314:	230a      	movs	r3, #10
 8001316:	2201      	movs	r2, #1
 8001318:	f00a f972 	bl	800b600 <HAL_USART_Transmit>
		}
 800131c:	46c0      	nop			; (mov r8, r8)
 800131e:	46bd      	mov	sp, r7
 8001320:	b002      	add	sp, #8
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000308 	.word	0x20000308

08001328 <weoInit>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 10);
	}
	void weoInit(void) {
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0

		USART3->CR1 &= ~(USART_CR1_UE);
 800132c:	4b4a      	ldr	r3, [pc, #296]	; (8001458 <weoInit+0x130>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b49      	ldr	r3, [pc, #292]	; (8001458 <weoInit+0x130>)
 8001332:	2101      	movs	r1, #1
 8001334:	438a      	bics	r2, r1
 8001336:	601a      	str	r2, [r3, #0]
		USART3->CR2 |= USART_CR2_MSBFIRST;
 8001338:	4b47      	ldr	r3, [pc, #284]	; (8001458 <weoInit+0x130>)
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	4b46      	ldr	r3, [pc, #280]	; (8001458 <weoInit+0x130>)
 800133e:	2180      	movs	r1, #128	; 0x80
 8001340:	0309      	lsls	r1, r1, #12
 8001342:	430a      	orrs	r2, r1
 8001344:	605a      	str	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_UE;
 8001346:	4b44      	ldr	r3, [pc, #272]	; (8001458 <weoInit+0x130>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	4b43      	ldr	r3, [pc, #268]	; (8001458 <weoInit+0x130>)
 800134c:	2101      	movs	r1, #1
 800134e:	430a      	orrs	r2, r1
 8001350:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 8001352:	2001      	movs	r0, #1
 8001354:	f004 f8ec 	bl	8005530 <HAL_Delay>
		HAL_Delay(1);
 8001358:	2001      	movs	r0, #1
 800135a:	f004 f8e9 	bl	8005530 <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800135e:	4b3f      	ldr	r3, [pc, #252]	; (800145c <weoInit+0x134>)
 8001360:	2100      	movs	r1, #0
 8001362:	0018      	movs	r0, r3
 8001364:	f009 f878 	bl	800a458 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 8001368:	2001      	movs	r0, #1
 800136a:	f004 f8e1 	bl	8005530 <HAL_Delay>

		GPIOA->ODR &= ~(1 << 6);	//reset cs
 800136e:	23a0      	movs	r3, #160	; 0xa0
 8001370:	05db      	lsls	r3, r3, #23
 8001372:	695a      	ldr	r2, [r3, #20]
 8001374:	23a0      	movs	r3, #160	; 0xa0
 8001376:	05db      	lsls	r3, r3, #23
 8001378:	2140      	movs	r1, #64	; 0x40
 800137a:	438a      	bics	r2, r1
 800137c:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 800137e:	23a0      	movs	r3, #160	; 0xa0
 8001380:	05db      	lsls	r3, r3, #23
 8001382:	695a      	ldr	r2, [r3, #20]
 8001384:	23a0      	movs	r3, #160	; 0xa0
 8001386:	05db      	lsls	r3, r3, #23
 8001388:	2180      	movs	r1, #128	; 0x80
 800138a:	438a      	bics	r2, r1
 800138c:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 800138e:	20af      	movs	r0, #175	; 0xaf
 8001390:	f7ff ffb8 	bl	8001304 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xB8);
 8001394:	20b8      	movs	r0, #184	; 0xb8
 8001396:	f7ff ffb5 	bl	8001304 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0);
 800139a:	2000      	movs	r0, #0
 800139c:	f7ff ffb2 	bl	8001304 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0);
 80013a0:	2000      	movs	r0, #0
 80013a2:	f7ff ffaf 	bl	8001304 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(1);
 80013a6:	2001      	movs	r0, #1
 80013a8:	f7ff ffac 	bl	8001304 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(2);
 80013ac:	2002      	movs	r0, #2
 80013ae:	f7ff ffa9 	bl	8001304 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(4);
 80013b2:	2004      	movs	r0, #4
 80013b4:	f7ff ffa6 	bl	8001304 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(7);
 80013b8:	2007      	movs	r0, #7
 80013ba:	f7ff ffa3 	bl	8001304 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(11);
 80013be:	200b      	movs	r0, #11
 80013c0:	f7ff ffa0 	bl	8001304 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(14);
 80013c4:	200e      	movs	r0, #14
 80013c6:	f7ff ff9d 	bl	8001304 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(18);
 80013ca:	2012      	movs	r0, #18
 80013cc:	f7ff ff9a 	bl	8001304 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(23);
 80013d0:	2017      	movs	r0, #23
 80013d2:	f7ff ff97 	bl	8001304 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(27);
 80013d6:	201b      	movs	r0, #27
 80013d8:	f7ff ff94 	bl	8001304 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(33);
 80013dc:	2021      	movs	r0, #33	; 0x21
 80013de:	f7ff ff91 	bl	8001304 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(40);
 80013e2:	2028      	movs	r0, #40	; 0x28
 80013e4:	f7ff ff8e 	bl	8001304 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(49);
 80013e8:	2031      	movs	r0, #49	; 0x31
 80013ea:	f7ff ff8b 	bl	8001304 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(63);
 80013ee:	203f      	movs	r0, #63	; 0x3f
 80013f0:	f7ff ff88 	bl	8001304 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 80013f4:	20a0      	movs	r0, #160	; 0xa0
 80013f6:	f7ff ff85 	bl	8001304 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0x51);
		USART_AS_SPI_sendCMD(0b01010010);// 0b01010010 = 0x52 is a proper remap 4 my bmp_2_bin converter, but pictures must b turned right @ 90 degrees. 0b01000001 = 0x is good if turn display on 180 degrees.
 80013fa:	2052      	movs	r0, #82	; 0x52
 80013fc:	f7ff ff82 	bl	8001304 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x41); //	0x51 is a proper remap 4 lcd image converter // 0b01010010 is a proper remap 4 left-turned images
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8001400:	2081      	movs	r0, #129	; 0x81
 8001402:	f7ff ff7f 	bl	8001304 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 8001406:	20ff      	movs	r0, #255	; 0xff
 8001408:	f7ff ff7c 	bl	8001304 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 800140c:	20a1      	movs	r0, #161	; 0xa1
 800140e:	f7ff ff79 	bl	8001304 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 8001412:	2000      	movs	r0, #0
 8001414:	f7ff ff76 	bl	8001304 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 8001418:	20a2      	movs	r0, #162	; 0xa2
 800141a:	f7ff ff73 	bl	8001304 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 800141e:	2000      	movs	r0, #0
 8001420:	f7ff ff70 	bl	8001304 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 8001424:	20a8      	movs	r0, #168	; 0xa8
 8001426:	f7ff ff6d 	bl	8001304 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 800142a:	207f      	movs	r0, #127	; 0x7f
 800142c:	f7ff ff6a 	bl	8001304 <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 8001430:	23a0      	movs	r3, #160	; 0xa0
 8001432:	05db      	lsls	r3, r3, #23
 8001434:	695a      	ldr	r2, [r3, #20]
 8001436:	23a0      	movs	r3, #160	; 0xa0
 8001438:	05db      	lsls	r3, r3, #23
 800143a:	2180      	movs	r1, #128	; 0x80
 800143c:	430a      	orrs	r2, r1
 800143e:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 8001440:	23a0      	movs	r3, #160	; 0xa0
 8001442:	05db      	lsls	r3, r3, #23
 8001444:	695a      	ldr	r2, [r3, #20]
 8001446:	23a0      	movs	r3, #160	; 0xa0
 8001448:	05db      	lsls	r3, r3, #23
 800144a:	2140      	movs	r1, #64	; 0x40
 800144c:	430a      	orrs	r2, r1
 800144e:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	40004800 	.word	0x40004800
 800145c:	200002bc 	.word	0x200002bc

08001460 <weoClear>:
	void weoClear(void) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
		uint16_t i;

					GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001466:	23a0      	movs	r3, #160	; 0xa0
 8001468:	05db      	lsls	r3, r3, #23
 800146a:	695a      	ldr	r2, [r3, #20]
 800146c:	23a0      	movs	r3, #160	; 0xa0
 800146e:	05db      	lsls	r3, r3, #23
 8001470:	2140      	movs	r1, #64	; 0x40
 8001472:	438a      	bics	r2, r1
 8001474:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001476:	23a0      	movs	r3, #160	; 0xa0
 8001478:	05db      	lsls	r3, r3, #23
 800147a:	695a      	ldr	r2, [r3, #20]
 800147c:	23a0      	movs	r3, #160	; 0xa0
 800147e:	05db      	lsls	r3, r3, #23
 8001480:	2180      	movs	r1, #128	; 0x80
 8001482:	438a      	bics	r2, r1
 8001484:	615a      	str	r2, [r3, #20]
						USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 8001486:	2075      	movs	r0, #117	; 0x75
 8001488:	f7ff ff3c 	bl	8001304 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 800148c:	2000      	movs	r0, #0
 800148e:	f7ff ff39 	bl	8001304 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 8001492:	207f      	movs	r0, #127	; 0x7f
 8001494:	f7ff ff36 	bl	8001304 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8001498:	2015      	movs	r0, #21
 800149a:	f7ff ff33 	bl	8001304 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 800149e:	2000      	movs	r0, #0
 80014a0:	f7ff ff30 	bl	8001304 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 80014a4:	207f      	movs	r0, #127	; 0x7f
 80014a6:	f7ff ff2d 	bl	8001304 <USART_AS_SPI_sendCMD>
					GPIOA->ODR &= ~(1 << 6);	//reset cs
 80014aa:	23a0      	movs	r3, #160	; 0xa0
 80014ac:	05db      	lsls	r3, r3, #23
 80014ae:	695a      	ldr	r2, [r3, #20]
 80014b0:	23a0      	movs	r3, #160	; 0xa0
 80014b2:	05db      	lsls	r3, r3, #23
 80014b4:	2140      	movs	r1, #64	; 0x40
 80014b6:	438a      	bics	r2, r1
 80014b8:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 7;	// set dc
 80014ba:	23a0      	movs	r3, #160	; 0xa0
 80014bc:	05db      	lsls	r3, r3, #23
 80014be:	695a      	ldr	r2, [r3, #20]
 80014c0:	23a0      	movs	r3, #160	; 0xa0
 80014c2:	05db      	lsls	r3, r3, #23
 80014c4:	2180      	movs	r1, #128	; 0x80
 80014c6:	430a      	orrs	r2, r1
 80014c8:	615a      	str	r2, [r3, #20]
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 80014ca:	1dbb      	adds	r3, r7, #6
 80014cc:	2200      	movs	r2, #0
 80014ce:	801a      	strh	r2, [r3, #0]
 80014d0:	e00d      	b.n	80014ee <weoClear+0x8e>
						while(!(USART3->ISR & USART_ISR_TXE)){};
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <weoClear+0xc0>)
 80014d6:	69db      	ldr	r3, [r3, #28]
 80014d8:	2280      	movs	r2, #128	; 0x80
 80014da:	4013      	ands	r3, r2
 80014dc:	d0fa      	beq.n	80014d4 <weoClear+0x74>
						USART3->TDR = (uint8_t) 0x00;
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <weoClear+0xc0>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 80014e4:	1dbb      	adds	r3, r7, #6
 80014e6:	881a      	ldrh	r2, [r3, #0]
 80014e8:	1dbb      	adds	r3, r7, #6
 80014ea:	3201      	adds	r2, #1
 80014ec:	801a      	strh	r2, [r3, #0]
 80014ee:	1dbb      	adds	r3, r7, #6
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	4a0c      	ldr	r2, [pc, #48]	; (8001524 <weoClear+0xc4>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d9ec      	bls.n	80014d2 <weoClear+0x72>
					}
					GPIOA->ODR &= ~(1 << 7);	//reset dc
 80014f8:	23a0      	movs	r3, #160	; 0xa0
 80014fa:	05db      	lsls	r3, r3, #23
 80014fc:	695a      	ldr	r2, [r3, #20]
 80014fe:	23a0      	movs	r3, #160	; 0xa0
 8001500:	05db      	lsls	r3, r3, #23
 8001502:	2180      	movs	r1, #128	; 0x80
 8001504:	438a      	bics	r2, r1
 8001506:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 8001508:	23a0      	movs	r3, #160	; 0xa0
 800150a:	05db      	lsls	r3, r3, #23
 800150c:	695a      	ldr	r2, [r3, #20]
 800150e:	23a0      	movs	r3, #160	; 0xa0
 8001510:	05db      	lsls	r3, r3, #23
 8001512:	2140      	movs	r1, #64	; 0x40
 8001514:	430a      	orrs	r2, r1
 8001516:	615a      	str	r2, [r3, #20]
	}
 8001518:	46c0      	nop			; (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	b002      	add	sp, #8
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40004800 	.word	0x40004800
 8001524:	00002001 	.word	0x00002001

08001528 <weoDrawRectangleFilled>:
//========================================================================================================================
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char contrast,
				uint8_t MEM_Buffer[]) {
 8001528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	0005      	movs	r5, r0
 8001530:	000c      	movs	r4, r1
 8001532:	0010      	movs	r0, r2
 8001534:	0019      	movs	r1, r3
 8001536:	1dfb      	adds	r3, r7, #7
 8001538:	1c2a      	adds	r2, r5, #0
 800153a:	701a      	strb	r2, [r3, #0]
 800153c:	1dbb      	adds	r3, r7, #6
 800153e:	1c22      	adds	r2, r4, #0
 8001540:	701a      	strb	r2, [r3, #0]
 8001542:	1d7b      	adds	r3, r7, #5
 8001544:	1c02      	adds	r2, r0, #0
 8001546:	701a      	strb	r2, [r3, #0]
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	1c0a      	adds	r2, r1, #0
 800154c:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 800154e:	240e      	movs	r4, #14
 8001550:	193b      	adds	r3, r7, r4
 8001552:	2200      	movs	r2, #0
 8001554:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 8001556:	1dfb      	adds	r3, r7, #7
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	b25b      	sxtb	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	da00      	bge.n	8001562 <weoDrawRectangleFilled+0x3a>
 8001560:	e0c1      	b.n	80016e6 <weoDrawRectangleFilled+0x1be>
 8001562:	1dbb      	adds	r3, r7, #6
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b25b      	sxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	da00      	bge.n	800156e <weoDrawRectangleFilled+0x46>
 800156c:	e0bb      	b.n	80016e6 <weoDrawRectangleFilled+0x1be>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 800156e:	1d7b      	adds	r3, r7, #5
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	b25b      	sxtb	r3, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	da00      	bge.n	800157a <weoDrawRectangleFilled+0x52>
 8001578:	e0b5      	b.n	80016e6 <weoDrawRectangleFilled+0x1be>
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	b25b      	sxtb	r3, r3
 8001580:	2b00      	cmp	r3, #0
 8001582:	da00      	bge.n	8001586 <weoDrawRectangleFilled+0x5e>
 8001584:	e0af      	b.n	80016e6 <weoDrawRectangleFilled+0x1be>
				return;
			}

			start_x_New=start_x;
 8001586:	250d      	movs	r5, #13
 8001588:	197b      	adds	r3, r7, r5
 800158a:	1dfa      	adds	r2, r7, #7
 800158c:	7812      	ldrb	r2, [r2, #0]
 800158e:	701a      	strb	r2, [r3, #0]
			start_y_New=start_y;
 8001590:	260c      	movs	r6, #12
 8001592:	19bb      	adds	r3, r7, r6
 8001594:	1dba      	adds	r2, r7, #6
 8001596:	7812      	ldrb	r2, [r2, #0]
 8001598:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 800159a:	230b      	movs	r3, #11
 800159c:	18fb      	adds	r3, r7, r3
 800159e:	1d7a      	adds	r2, r7, #5
 80015a0:	7812      	ldrb	r2, [r2, #0]
 80015a2:	701a      	strb	r2, [r3, #0]
			end_y_New=end_y;
 80015a4:	220a      	movs	r2, #10
 80015a6:	18bb      	adds	r3, r7, r2
 80015a8:	1d3a      	adds	r2, r7, #4
 80015aa:	7812      	ldrb	r2, [r2, #0]
 80015ac:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80015ae:	23a0      	movs	r3, #160	; 0xa0
 80015b0:	05db      	lsls	r3, r3, #23
 80015b2:	695a      	ldr	r2, [r3, #20]
 80015b4:	23a0      	movs	r3, #160	; 0xa0
 80015b6:	05db      	lsls	r3, r3, #23
 80015b8:	2140      	movs	r1, #64	; 0x40
 80015ba:	438a      	bics	r2, r1
 80015bc:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 80015be:	23a0      	movs	r3, #160	; 0xa0
 80015c0:	05db      	lsls	r3, r3, #23
 80015c2:	695a      	ldr	r2, [r3, #20]
 80015c4:	23a0      	movs	r3, #160	; 0xa0
 80015c6:	05db      	lsls	r3, r3, #23
 80015c8:	2180      	movs	r1, #128	; 0x80
 80015ca:	438a      	bics	r2, r1
 80015cc:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 80015ce:	2075      	movs	r0, #117	; 0x75
 80015d0:	f7ff fe98 	bl	8001304 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 80015d4:	197b      	adds	r3, r7, r5
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	0018      	movs	r0, r3
 80015da:	f7ff fe93 	bl	8001304 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 80015de:	230b      	movs	r3, #11
 80015e0:	18fb      	adds	r3, r7, r3
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	0018      	movs	r0, r3
 80015e6:	f7ff fe8d 	bl	8001304 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 80015ea:	2015      	movs	r0, #21
 80015ec:	f7ff fe8a 	bl	8001304 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 80015f0:	19bb      	adds	r3, r7, r6
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	085b      	lsrs	r3, r3, #1
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	0018      	movs	r0, r3
 80015fa:	f7ff fe83 	bl	8001304 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 80015fe:	220a      	movs	r2, #10
 8001600:	18bb      	adds	r3, r7, r2
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	085b      	lsrs	r3, r3, #1
 8001606:	b2db      	uxtb	r3, r3
 8001608:	0018      	movs	r0, r3
 800160a:	f7ff fe7b 	bl	8001304 <USART_AS_SPI_sendCMD>
//					USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//					USART_AS_SPI_sendCMD(contrast);
			GPIOA->ODR |= 1 << 7;	//set dc
 800160e:	23a0      	movs	r3, #160	; 0xa0
 8001610:	05db      	lsls	r3, r3, #23
 8001612:	695a      	ldr	r2, [r3, #20]
 8001614:	23a0      	movs	r3, #160	; 0xa0
 8001616:	05db      	lsls	r3, r3, #23
 8001618:	2180      	movs	r1, #128	; 0x80
 800161a:	430a      	orrs	r2, r1
 800161c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 800161e:	23a0      	movs	r3, #160	; 0xa0
 8001620:	05db      	lsls	r3, r3, #23
 8001622:	695a      	ldr	r2, [r3, #20]
 8001624:	23a0      	movs	r3, #160	; 0xa0
 8001626:	05db      	lsls	r3, r3, #23
 8001628:	2140      	movs	r1, #64	; 0x40
 800162a:	430a      	orrs	r2, r1
 800162c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 800162e:	23a0      	movs	r3, #160	; 0xa0
 8001630:	05db      	lsls	r3, r3, #23
 8001632:	695a      	ldr	r2, [r3, #20]
 8001634:	23a0      	movs	r3, #160	; 0xa0
 8001636:	05db      	lsls	r3, r3, #23
 8001638:	2140      	movs	r1, #64	; 0x40
 800163a:	438a      	bics	r2, r1
 800163c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 800163e:	23a0      	movs	r3, #160	; 0xa0
 8001640:	05db      	lsls	r3, r3, #23
 8001642:	695a      	ldr	r2, [r3, #20]
 8001644:	23a0      	movs	r3, #160	; 0xa0
 8001646:	05db      	lsls	r3, r3, #23
 8001648:	2180      	movs	r1, #128	; 0x80
 800164a:	430a      	orrs	r2, r1
 800164c:	615a      	str	r2, [r3, #20]

			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 800164e:	193b      	adds	r3, r7, r4
 8001650:	2200      	movs	r2, #0
 8001652:	801a      	strh	r2, [r3, #0]
 8001654:	e012      	b.n	800167c <weoDrawRectangleFilled+0x154>
//			for (i = 0; i < len;i++) {
//				if (i%((end_y-start_y))==0){
//					MEM_Buffer[i] &=0xF0 ;
//				}
				while(!(USART3->ISR & USART_ISR_TXE)){};
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <weoDrawRectangleFilled+0x1c8>)
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	2280      	movs	r2, #128	; 0x80
 800165e:	4013      	ands	r3, r2
 8001660:	d0fa      	beq.n	8001658 <weoDrawRectangleFilled+0x130>
				USART3->TDR =MEM_Buffer[i];
 8001662:	210e      	movs	r1, #14
 8001664:	187b      	adds	r3, r7, r1
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800166a:	18d3      	adds	r3, r2, r3
 800166c:	781a      	ldrb	r2, [r3, #0]
 800166e:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <weoDrawRectangleFilled+0x1c8>)
 8001670:	629a      	str	r2, [r3, #40]	; 0x28
			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 8001672:	187b      	adds	r3, r7, r1
 8001674:	881a      	ldrh	r2, [r3, #0]
 8001676:	187b      	adds	r3, r7, r1
 8001678:	3201      	adds	r2, #1
 800167a:	801a      	strh	r2, [r3, #0]
 800167c:	230e      	movs	r3, #14
 800167e:	18fb      	adds	r3, r7, r3
 8001680:	881a      	ldrh	r2, [r3, #0]
 8001682:	230b      	movs	r3, #11
 8001684:	18fb      	adds	r3, r7, r3
 8001686:	7819      	ldrb	r1, [r3, #0]
 8001688:	230d      	movs	r3, #13
 800168a:	18fb      	adds	r3, r7, r3
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	1acb      	subs	r3, r1, r3
 8001690:	3301      	adds	r3, #1
 8001692:	210a      	movs	r1, #10
 8001694:	1879      	adds	r1, r7, r1
 8001696:	7809      	ldrb	r1, [r1, #0]
 8001698:	0849      	lsrs	r1, r1, #1
 800169a:	b2c9      	uxtb	r1, r1
 800169c:	0008      	movs	r0, r1
 800169e:	210c      	movs	r1, #12
 80016a0:	1879      	adds	r1, r7, r1
 80016a2:	7809      	ldrb	r1, [r1, #0]
 80016a4:	0849      	lsrs	r1, r1, #1
 80016a6:	b2c9      	uxtb	r1, r1
 80016a8:	1a41      	subs	r1, r0, r1
 80016aa:	3101      	adds	r1, #1
 80016ac:	434b      	muls	r3, r1
 80016ae:	429a      	cmp	r2, r3
 80016b0:	dbd1      	blt.n	8001656 <weoDrawRectangleFilled+0x12e>
			}
			while(!(USART3->ISR & USART_ISR_TXE)){};
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <weoDrawRectangleFilled+0x1c8>)
 80016b6:	69db      	ldr	r3, [r3, #28]
 80016b8:	2280      	movs	r2, #128	; 0x80
 80016ba:	4013      	ands	r3, r2
 80016bc:	d0fa      	beq.n	80016b4 <weoDrawRectangleFilled+0x18c>
			HAL_Delay(1);
 80016be:	2001      	movs	r0, #1
 80016c0:	f003 ff36 	bl	8005530 <HAL_Delay>
//			GPIOA->ODR &= ~(1 << 7);	// reset dc
//			USART_AS_SPI_sendCMD(0xBB);	// command for NOP
//			USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//			USART_AS_SPI_sendCMD(0xFF);

			GPIOA->ODR &= ~(1 << 7);	//reset dc
 80016c4:	23a0      	movs	r3, #160	; 0xa0
 80016c6:	05db      	lsls	r3, r3, #23
 80016c8:	695a      	ldr	r2, [r3, #20]
 80016ca:	23a0      	movs	r3, #160	; 0xa0
 80016cc:	05db      	lsls	r3, r3, #23
 80016ce:	2180      	movs	r1, #128	; 0x80
 80016d0:	438a      	bics	r2, r1
 80016d2:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 80016d4:	23a0      	movs	r3, #160	; 0xa0
 80016d6:	05db      	lsls	r3, r3, #23
 80016d8:	695a      	ldr	r2, [r3, #20]
 80016da:	23a0      	movs	r3, #160	; 0xa0
 80016dc:	05db      	lsls	r3, r3, #23
 80016de:	2140      	movs	r1, #64	; 0x40
 80016e0:	430a      	orrs	r2, r1
 80016e2:	615a      	str	r2, [r3, #20]
 80016e4:	e000      	b.n	80016e8 <weoDrawRectangleFilled+0x1c0>
				return;
 80016e6:	46c0      	nop			; (mov r8, r8)
		}
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b005      	add	sp, #20
 80016ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	40004800 	.word	0x40004800

080016f4 <I2C_SOUND_ChangePage>:
//		LL_GPIO_ResetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
//		LL_GPIO_SetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
	}
	void I2C_SOUND_ChangePage(uint8_t pageNum) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af02      	add	r7, sp, #8
 80016fa:	0002      	movs	r2, r0
 80016fc:	1dfb      	adds	r3, r7, #7
 80016fe:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { 0x00, pageNum };
 8001700:	210c      	movs	r1, #12
 8001702:	187b      	adds	r3, r7, r1
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
 8001708:	187b      	adds	r3, r7, r1
 800170a:	1dfa      	adds	r2, r7, #7
 800170c:	7812      	ldrb	r2, [r2, #0]
 800170e:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);
 8001710:	187a      	adds	r2, r7, r1
 8001712:	4806      	ldr	r0, [pc, #24]	; (800172c <I2C_SOUND_ChangePage+0x38>)
 8001714:	23fa      	movs	r3, #250	; 0xfa
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2302      	movs	r3, #2
 800171c:	2130      	movs	r1, #48	; 0x30
 800171e:	f004 ff41 	bl	80065a4 <HAL_I2C_Master_Transmit>
	}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	46bd      	mov	sp, r7
 8001726:	b004      	add	sp, #16
 8001728:	bd80      	pop	{r7, pc}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	200000bc 	.word	0x200000bc

08001730 <WriteReg_I2C_SOUND>:
	void WriteReg_I2C_SOUND(uint8_t reg, uint8_t data) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af02      	add	r7, sp, #8
 8001736:	0002      	movs	r2, r0
 8001738:	1dfb      	adds	r3, r7, #7
 800173a:	701a      	strb	r2, [r3, #0]
 800173c:	1dbb      	adds	r3, r7, #6
 800173e:	1c0a      	adds	r2, r1, #0
 8001740:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 8001742:	210c      	movs	r1, #12
 8001744:	187b      	adds	r3, r7, r1
 8001746:	1dfa      	adds	r2, r7, #7
 8001748:	7812      	ldrb	r2, [r2, #0]
 800174a:	701a      	strb	r2, [r3, #0]
 800174c:	187b      	adds	r3, r7, r1
 800174e:	1dba      	adds	r2, r7, #6
 8001750:	7812      	ldrb	r2, [r2, #0]
 8001752:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);	//(uint8_t*)&
 8001754:	187a      	adds	r2, r7, r1
 8001756:	4806      	ldr	r0, [pc, #24]	; (8001770 <WriteReg_I2C_SOUND+0x40>)
 8001758:	23fa      	movs	r3, #250	; 0xfa
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	2302      	movs	r3, #2
 8001760:	2130      	movs	r1, #48	; 0x30
 8001762:	f004 ff1f 	bl	80065a4 <HAL_I2C_Master_Transmit>
	}
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	46bd      	mov	sp, r7
 800176a:	b004      	add	sp, #16
 800176c:	bd80      	pop	{r7, pc}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	200000bc 	.word	0x200000bc

08001774 <soundSetup>:
	void soundSetup(void) {
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
		I2C_SOUND_ChangePage(0x00);
 8001778:	2000      	movs	r0, #0
 800177a:	f7ff ffbb 	bl	80016f4 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x01);	//Assert Software reset (P0, R1, D0=1)
 800177e:	2101      	movs	r1, #1
 8001780:	2001      	movs	r0, #1
 8001782:	f7ff ffd5 	bl	8001730 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 8001786:	2001      	movs	r0, #1
 8001788:	f7ff ffb4 	bl	80016f4 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x02, 0x00);	//LDO output programmed as 1.8V and Level shifters powered up. (P1, R2, D5-D4=00, D3=0)
 800178c:	2100      	movs	r1, #0
 800178e:	2002      	movs	r0, #2
 8001790:	f7ff ffce 	bl	8001730 <WriteReg_I2C_SOUND>
		HAL_Delay(15);
 8001794:	200f      	movs	r0, #15
 8001796:	f003 fecb 	bl	8005530 <HAL_Delay>
		I2C_SOUND_ChangePage(0x00);
 800179a:	2000      	movs	r0, #0
 800179c:	f7ff ffaa 	bl	80016f4 <I2C_SOUND_ChangePage>
	WriteReg_I2C_SOUND(0x04,0x03);//PLL_clkin = MCLK, codec_clkin = PLL_CLK, MCLK should be 11.2896MHz
 80017a0:	2103      	movs	r1, #3
 80017a2:	2004      	movs	r0, #4
 80017a4:	f7ff ffc4 	bl	8001730 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x05,0x91);//Power up PLL, set P=1, R=1
 80017a8:	2191      	movs	r1, #145	; 0x91
 80017aa:	2005      	movs	r0, #5
 80017ac:	f7ff ffc0 	bl	8001730 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x06,0x04);//Set J = 4
 80017b0:	2104      	movs	r1, #4
 80017b2:	2006      	movs	r0, #6
 80017b4:	f7ff ffbc 	bl	8001730 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x07,0x00);//SET D=0000
 80017b8:	2100      	movs	r1, #0
 80017ba:	2007      	movs	r0, #7
 80017bc:	f7ff ffb8 	bl	8001730 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x08,0x00);//SET D=0000
 80017c0:	2100      	movs	r1, #0
 80017c2:	2008      	movs	r0, #8
 80017c4:	f7ff ffb4 	bl	8001730 <WriteReg_I2C_SOUND>
	HAL_Delay(15);
 80017c8:	200f      	movs	r0, #15
 80017ca:	f003 feb1 	bl	8005530 <HAL_Delay>
	WriteReg_I2C_SOUND(0x0B,0x84);//DAC NDAC Powered up, set NDAC = 4
 80017ce:	2184      	movs	r1, #132	; 0x84
 80017d0:	200b      	movs	r0, #11
 80017d2:	f7ff ffad 	bl	8001730 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0C,0x82);//DAC MDAC Powered up, set MDAC = 2
 80017d6:	2182      	movs	r1, #130	; 0x82
 80017d8:	200c      	movs	r0, #12
 80017da:	f7ff ffa9 	bl	8001730 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0D,0x00);//DAC OSR(9:0)-> DOSR=128
 80017de:	2100      	movs	r1, #0
 80017e0:	200d      	movs	r0, #13
 80017e2:	f7ff ffa5 	bl	8001730 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0E,0x80);//DAC OSR(9:0)
 80017e6:	2180      	movs	r1, #128	; 0x80
 80017e8:	200e      	movs	r0, #14
 80017ea:	f7ff ffa1 	bl	8001730 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x1B, 0x00);	//Codec Interface control Word length = 16bits, BCLK&WCLK inputs, I2S mode. (P0, R27, D7-D6=00, D5-D4=00, D3-D2=00)
 80017ee:	2100      	movs	r1, #0
 80017f0:	201b      	movs	r0, #27
 80017f2:	f7ff ff9d 	bl	8001730 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x1C,0x00);//Data slot offset
 80017f6:	2100      	movs	r1, #0
 80017f8:	201c      	movs	r0, #28
 80017fa:	f7ff ff99 	bl	8001730 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x3c,0x02);//Dac Instruction programming PRB #2 for Mono routing. Type interpolation (x8) and 3 programmable	Biquads. (P0, R60, D4-D0=0010)
 80017fe:	2102      	movs	r1, #2
 8001800:	203c      	movs	r0, #60	; 0x3c
 8001802:	f7ff ff95 	bl	8001730 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 8001806:	2001      	movs	r0, #1
 8001808:	f7ff ff74 	bl	80016f4 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x10);	//Master Reference Powered on (P1, R1, D4=1)
 800180c:	2110      	movs	r1, #16
 800180e:	2001      	movs	r0, #1
 8001810:	f7ff ff8e 	bl	8001730 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x0A, 0x00);	//Output common mode for DAC set to 0.9V (default) (P1, R10)
 8001814:	2100      	movs	r1, #0
 8001816:	200a      	movs	r0, #10
 8001818:	f7ff ff8a 	bl	8001730 <WriteReg_I2C_SOUND>
		////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x0C, 0x00);	// No analog routing to headphone//0x0c,0x15 by SB
 800181c:	2100      	movs	r1, #0
 800181e:	200c      	movs	r0, #12
 8001820:	f7ff ff86 	bl	8001730 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x16, 0x00);	// Headphone volume=0//0x16,0x75 by SB
 8001824:	2100      	movs	r1, #0
 8001826:	2016      	movs	r0, #22
 8001828:	f7ff ff82 	bl	8001730 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x18, 0x00);	//No need to enable Mixer M and Mixer P, AINL Voulme, 0dB Gain 0x18,0x75 by SB
 800182c:	2100      	movs	r1, #0
 800182e:	2018      	movs	r0, #24
 8001830:	f7ff ff7e 	bl	8001730 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x19, 0x00);	//No need to enable Mixer M and Mixer P, AINR Voulme, 0dB Gain 0x19,0x75 by SB
 8001834:	2100      	movs	r1, #0
 8001836:	2019      	movs	r0, #25
 8001838:	f7ff ff7a 	bl	8001730 <WriteReg_I2C_SOUND>
		//////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x09, 0x00);	//AINL,AINR are powered down
 800183c:	2100      	movs	r1, #0
 800183e:	2009      	movs	r0, #9
 8001840:	f7ff ff76 	bl	8001730 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 8001844:	2100      	movs	r1, #0
 8001846:	2010      	movs	r0, #16
 8001848:	f7ff ff72 	bl	8001730 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x00);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000)
 800184c:	2100      	movs	r1, #0
 800184e:	202e      	movs	r0, #46	; 0x2e
 8001850:	f7ff ff6e 	bl	8001730 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x30, 0x10);	//SPK driver Gain=6.0dB (P1, R48, D6-D4=001)
 8001854:	2110      	movs	r1, #16
 8001856:	2030      	movs	r0, #48	; 0x30
 8001858:	f7ff ff6a 	bl	8001730 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2D, 0x02);	//SPK powered up (P1, R45, D1=1)
 800185c:	2102      	movs	r1, #2
 800185e:	202d      	movs	r0, #45	; 0x2d
 8001860:	f7ff ff66 	bl	8001730 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 8001864:	2000      	movs	r0, #0
 8001866:	f7ff ff45 	bl	80016f4 <I2C_SOUND_ChangePage>
		//////////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
 800186a:	2190      	movs	r1, #144	; 0x90
 800186c:	203f      	movs	r0, #63	; 0x3f
 800186e:	f7ff ff5f 	bl	8001730 <WriteReg_I2C_SOUND>
		// 1<<7|1<<4|2 by SB
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000) cnDacValueOn by SB
 8001872:	2100      	movs	r1, #0
 8001874:	2041      	movs	r0, #65	; 0x41
 8001876:	f7ff ff5b 	bl	8001730 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1) 1<<4 by SB
 800187a:	2104      	movs	r1, #4
 800187c:	2040      	movs	r0, #64	; 0x40
 800187e:	f7ff ff57 	bl	8001730 <WriteReg_I2C_SOUND>
	}
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <answer2CPU>:
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 8001890:	230f      	movs	r3, #15
 8001892:	18fb      	adds	r3, r7, r3
 8001894:	22ff      	movs	r2, #255	; 0xff
 8001896:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 8001898:	230d      	movs	r3, #13
 800189a:	18fb      	adds	r3, r7, r3
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		isReceiverDisabled=1;
 80018a0:	4bd9      	ldr	r3, [pc, #868]	; (8001c08 <answer2CPU+0x380>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	701a      	strb	r2, [r3, #0]

		cmd2Execute=0;
 80018a6:	4bd9      	ldr	r3, [pc, #868]	; (8001c0c <answer2CPU+0x384>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
		cmd[0]&=~0x100;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	781a      	ldrb	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	701a      	strb	r2, [r3, #0]
		if ((cmd[0] == 0x11)||(cmd[0] == 0x12)||(cmd[0] == 0x13)||(cmd[0] == 0x14)||(cmd[0] == 0x15)) {GPIOC->ODR &= ~(1 << 6);}//reset BF
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b11      	cmp	r3, #17
 80018ba:	d00f      	beq.n	80018dc <answer2CPU+0x54>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b12      	cmp	r3, #18
 80018c2:	d00b      	beq.n	80018dc <answer2CPU+0x54>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b13      	cmp	r3, #19
 80018ca:	d007      	beq.n	80018dc <answer2CPU+0x54>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b14      	cmp	r3, #20
 80018d2:	d003      	beq.n	80018dc <answer2CPU+0x54>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b15      	cmp	r3, #21
 80018da:	d105      	bne.n	80018e8 <answer2CPU+0x60>
 80018dc:	4bcc      	ldr	r3, [pc, #816]	; (8001c10 <answer2CPU+0x388>)
 80018de:	695a      	ldr	r2, [r3, #20]
 80018e0:	4bcb      	ldr	r3, [pc, #812]	; (8001c10 <answer2CPU+0x388>)
 80018e2:	2140      	movs	r1, #64	; 0x40
 80018e4:	438a      	bics	r2, r1
 80018e6:	615a      	str	r2, [r3, #20]
		if (cmd[0] == 0x11) {
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b11      	cmp	r3, #17
 80018ee:	d105      	bne.n	80018fc <answer2CPU+0x74>
//			GPIOC->ODR &= ~(1 << 6);
			GPIOC->ODR &=~ GPIO_ODR_OD6;
 80018f0:	4bc7      	ldr	r3, [pc, #796]	; (8001c10 <answer2CPU+0x388>)
 80018f2:	695a      	ldr	r2, [r3, #20]
 80018f4:	4bc6      	ldr	r3, [pc, #792]	; (8001c10 <answer2CPU+0x388>)
 80018f6:	2140      	movs	r1, #64	; 0x40
 80018f8:	438a      	bics	r2, r1
 80018fa:	615a      	str	r2, [r3, #20]
		}//reset BF
		ans[0] = cmd[0]|0x80;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2280      	movs	r2, #128	; 0x80
 8001902:	4252      	negs	r2, r2
 8001904:	4313      	orrs	r3, r2
 8001906:	b2db      	uxtb	r3, r3
 8001908:	b29a      	uxth	r2, r3
 800190a:	4bc2      	ldr	r3, [pc, #776]	; (8001c14 <answer2CPU+0x38c>)
 800190c:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b0f      	cmp	r3, #15
 8001914:	d800      	bhi.n	8001918 <answer2CPU+0x90>
 8001916:	e162      	b.n	8001bde <answer2CPU+0x356>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b15      	cmp	r3, #21
 800191e:	d900      	bls.n	8001922 <answer2CPU+0x9a>
 8001920:	e15d      	b.n	8001bde <answer2CPU+0x356>
//		if (cmd[0] != 0x10) {
//			GPIOC->ODR &= ~(1 << 6);
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 8001922:	23a0      	movs	r3, #160	; 0xa0
 8001924:	05db      	lsls	r3, r3, #23
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	2210      	movs	r2, #16
 800192a:	4013      	ands	r3, r2
 800192c:	d106      	bne.n	800193c <answer2CPU+0xb4>
					keyboard &= 0b11111110;
 800192e:	220f      	movs	r2, #15
 8001930:	18bb      	adds	r3, r7, r2
 8001932:	18ba      	adds	r2, r7, r2
 8001934:	7812      	ldrb	r2, [r2, #0]
 8001936:	2101      	movs	r1, #1
 8001938:	438a      	bics	r2, r1
 800193a:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 800193c:	23a0      	movs	r3, #160	; 0xa0
 800193e:	05db      	lsls	r3, r3, #23
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	2202      	movs	r2, #2
 8001944:	4013      	ands	r3, r2
 8001946:	d106      	bne.n	8001956 <answer2CPU+0xce>
					keyboard &= 0b11111101;
 8001948:	220f      	movs	r2, #15
 800194a:	18bb      	adds	r3, r7, r2
 800194c:	18ba      	adds	r2, r7, r2
 800194e:	7812      	ldrb	r2, [r2, #0]
 8001950:	2102      	movs	r1, #2
 8001952:	438a      	bics	r2, r1
 8001954:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 8001956:	23a0      	movs	r3, #160	; 0xa0
 8001958:	05db      	lsls	r3, r3, #23
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	2201      	movs	r2, #1
 800195e:	4013      	ands	r3, r2
 8001960:	d106      	bne.n	8001970 <answer2CPU+0xe8>
					keyboard &= 0b11111011;
 8001962:	220f      	movs	r2, #15
 8001964:	18bb      	adds	r3, r7, r2
 8001966:	18ba      	adds	r2, r7, r2
 8001968:	7812      	ldrb	r2, [r2, #0]
 800196a:	2104      	movs	r1, #4
 800196c:	438a      	bics	r2, r1
 800196e:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 8001970:	23a0      	movs	r3, #160	; 0xa0
 8001972:	05db      	lsls	r3, r3, #23
 8001974:	691a      	ldr	r2, [r3, #16]
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	019b      	lsls	r3, r3, #6
 800197a:	4013      	ands	r3, r2
 800197c:	d106      	bne.n	800198c <answer2CPU+0x104>
					keyboard &= 0b11110111;
 800197e:	220f      	movs	r2, #15
 8001980:	18bb      	adds	r3, r7, r2
 8001982:	18ba      	adds	r2, r7, r2
 8001984:	7812      	ldrb	r2, [r2, #0]
 8001986:	2108      	movs	r1, #8
 8001988:	438a      	bics	r2, r1
 800198a:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 800198c:	23a0      	movs	r3, #160	; 0xa0
 800198e:	05db      	lsls	r3, r3, #23
 8001990:	691a      	ldr	r2, [r3, #16]
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	01db      	lsls	r3, r3, #7
 8001996:	4013      	ands	r3, r2
 8001998:	d106      	bne.n	80019a8 <answer2CPU+0x120>
					keyboard &= 0b11101111;
 800199a:	220f      	movs	r2, #15
 800199c:	18bb      	adds	r3, r7, r2
 800199e:	18ba      	adds	r2, r7, r2
 80019a0:	7812      	ldrb	r2, [r2, #0]
 80019a2:	2110      	movs	r1, #16
 80019a4:	438a      	bics	r2, r1
 80019a6:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 80019a8:	210f      	movs	r1, #15
 80019aa:	187b      	adds	r3, r7, r1
 80019ac:	187a      	adds	r2, r7, r1
 80019ae:	7812      	ldrb	r2, [r2, #0]
 80019b0:	43d2      	mvns	r2, r2
 80019b2:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 80019b4:	200c      	movs	r0, #12
 80019b6:	183b      	adds	r3, r7, r0
 80019b8:	2204      	movs	r2, #4
 80019ba:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 80019bc:	183b      	adds	r3, r7, r0
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	3b02      	subs	r3, #2
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	4b93      	ldr	r3, [pc, #588]	; (8001c14 <answer2CPU+0x38c>)
 80019c8:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 80019ca:	187b      	adds	r3, r7, r1
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	4b90      	ldr	r3, [pc, #576]	; (8001c14 <answer2CPU+0x38c>)
 80019d2:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 80019d4:	230e      	movs	r3, #14
 80019d6:	18fb      	adds	r3, r7, r3
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]
 80019dc:	e011      	b.n	8001a02 <answer2CPU+0x17a>
					myCS = myCS + ans[i];
 80019de:	200e      	movs	r0, #14
 80019e0:	183b      	adds	r3, r7, r0
 80019e2:	781a      	ldrb	r2, [r3, #0]
 80019e4:	4b8b      	ldr	r3, [pc, #556]	; (8001c14 <answer2CPU+0x38c>)
 80019e6:	0052      	lsls	r2, r2, #1
 80019e8:	5ad3      	ldrh	r3, [r2, r3]
 80019ea:	b2d9      	uxtb	r1, r3
 80019ec:	220d      	movs	r2, #13
 80019ee:	18bb      	adds	r3, r7, r2
 80019f0:	18ba      	adds	r2, r7, r2
 80019f2:	7812      	ldrb	r2, [r2, #0]
 80019f4:	188a      	adds	r2, r1, r2
 80019f6:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 80019f8:	183b      	adds	r3, r7, r0
 80019fa:	781a      	ldrb	r2, [r3, #0]
 80019fc:	183b      	adds	r3, r7, r0
 80019fe:	3201      	adds	r2, #1
 8001a00:	701a      	strb	r2, [r3, #0]
 8001a02:	200e      	movs	r0, #14
 8001a04:	183b      	adds	r3, r7, r0
 8001a06:	781a      	ldrb	r2, [r3, #0]
 8001a08:	230c      	movs	r3, #12
 8001a0a:	18fb      	adds	r3, r7, r3
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	429a      	cmp	r2, r3
 8001a12:	dbe4      	blt.n	80019de <answer2CPU+0x156>
				}
				myCS = 0 - myCS;
 8001a14:	210d      	movs	r1, #13
 8001a16:	187b      	adds	r3, r7, r1
 8001a18:	187a      	adds	r2, r7, r1
 8001a1a:	7812      	ldrb	r2, [r2, #0]
 8001a1c:	4252      	negs	r2, r2
 8001a1e:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 8001a20:	187b      	adds	r3, r7, r1
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	4b7b      	ldr	r3, [pc, #492]	; (8001c14 <answer2CPU+0x38c>)
 8001a28:	80da      	strh	r2, [r3, #6]
				i=0;
 8001a2a:	183b      	adds	r3, r7, r0
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================

				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001a30:	46c0      	nop			; (mov r8, r8)
 8001a32:	4b79      	ldr	r3, [pc, #484]	; (8001c18 <answer2CPU+0x390>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	2280      	movs	r2, #128	; 0x80
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d0fa      	beq.n	8001a32 <answer2CPU+0x1aa>
				USART2->TDR = ans[0]|0x0100;
 8001a3c:	4b75      	ldr	r3, [pc, #468]	; (8001c14 <answer2CPU+0x38c>)
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	2280      	movs	r2, #128	; 0x80
 8001a42:	0052      	lsls	r2, r2, #1
 8001a44:	4313      	orrs	r3, r2
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	4b73      	ldr	r3, [pc, #460]	; (8001c18 <answer2CPU+0x390>)
 8001a4a:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001a4c:	230e      	movs	r3, #14
 8001a4e:	18fb      	adds	r3, r7, r3
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
 8001a54:	e013      	b.n	8001a7e <answer2CPU+0x1f6>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	4b6f      	ldr	r3, [pc, #444]	; (8001c18 <answer2CPU+0x390>)
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	2280      	movs	r2, #128	; 0x80
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d0fa      	beq.n	8001a58 <answer2CPU+0x1d0>
				    USART2->TDR = (uint8_t)ans[i];
 8001a62:	210e      	movs	r1, #14
 8001a64:	187b      	adds	r3, r7, r1
 8001a66:	781a      	ldrb	r2, [r3, #0]
 8001a68:	4b6a      	ldr	r3, [pc, #424]	; (8001c14 <answer2CPU+0x38c>)
 8001a6a:	0052      	lsls	r2, r2, #1
 8001a6c:	5ad3      	ldrh	r3, [r2, r3]
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	4b69      	ldr	r3, [pc, #420]	; (8001c18 <answer2CPU+0x390>)
 8001a72:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001a74:	187b      	adds	r3, r7, r1
 8001a76:	781a      	ldrb	r2, [r3, #0]
 8001a78:	187b      	adds	r3, r7, r1
 8001a7a:	3201      	adds	r2, #1
 8001a7c:	701a      	strb	r2, [r3, #0]
 8001a7e:	230e      	movs	r3, #14
 8001a80:	18fa      	adds	r2, r7, r3
 8001a82:	230c      	movs	r3, #12
 8001a84:	18fb      	adds	r3, r7, r3
 8001a86:	7812      	ldrb	r2, [r2, #0]
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d3e3      	bcc.n	8001a56 <answer2CPU+0x1ce>
				  }
//				HAL_Delay(1);
				USART2->CR1 |= USART_CR1_RE;
 8001a8e:	4b62      	ldr	r3, [pc, #392]	; (8001c18 <answer2CPU+0x390>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	4b61      	ldr	r3, [pc, #388]	; (8001c18 <answer2CPU+0x390>)
 8001a94:	2104      	movs	r1, #4
 8001a96:	430a      	orrs	r2, r1
 8001a98:	601a      	str	r2, [r3, #0]
				isReceiverDisabled=0;
 8001a9a:	4b5b      	ldr	r3, [pc, #364]	; (8001c08 <answer2CPU+0x380>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
//				BFEN=1;
//=======================================================================================================================================
				if (cmd[0] == 0x11) {//Show full screen background;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b11      	cmp	r3, #17
 8001aa6:	d109      	bne.n	8001abc <answer2CPU+0x234>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					picNum = cmd[2];
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	789a      	ldrb	r2, [r3, #2]
 8001aac:	4b5b      	ldr	r3, [pc, #364]	; (8001c1c <answer2CPU+0x394>)
 8001aae:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 8001ab0:	4b56      	ldr	r3, [pc, #344]	; (8001c0c <answer2CPU+0x384>)
 8001ab2:	2211      	movs	r2, #17
 8001ab4:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001ab6:	4b5a      	ldr	r3, [pc, #360]	; (8001c20 <answer2CPU+0x398>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b12      	cmp	r3, #18
 8001ac2:	d115      	bne.n	8001af0 <answer2CPU+0x268>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	001a      	movs	r2, r3
 8001acc:	4b55      	ldr	r3, [pc, #340]	; (8001c24 <answer2CPU+0x39c>)
 8001ace:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3303      	adds	r3, #3
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	001a      	movs	r2, r3
 8001ad8:	4b53      	ldr	r3, [pc, #332]	; (8001c28 <answer2CPU+0x3a0>)
 8001ada:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	791a      	ldrb	r2, [r3, #4]
 8001ae0:	4b4e      	ldr	r3, [pc, #312]	; (8001c1c <answer2CPU+0x394>)
 8001ae2:	701a      	strb	r2, [r3, #0]
//					weoShowSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 8001ae4:	4b49      	ldr	r3, [pc, #292]	; (8001c0c <answer2CPU+0x384>)
 8001ae6:	2212      	movs	r2, #18
 8001ae8:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001aea:	4b4d      	ldr	r3, [pc, #308]	; (8001c20 <answer2CPU+0x398>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b13      	cmp	r3, #19
 8001af6:	d140      	bne.n	8001b7a <answer2CPU+0x2f2>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3302      	adds	r3, #2
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	001a      	movs	r2, r3
 8001b00:	4b48      	ldr	r3, [pc, #288]	; (8001c24 <answer2CPU+0x39c>)
 8001b02:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3303      	adds	r3, #3
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	001a      	movs	r2, r3
 8001b0c:	4b46      	ldr	r3, [pc, #280]	; (8001c28 <answer2CPU+0x3a0>)
 8001b0e:	601a      	str	r2, [r3, #0]
					fontInfo= cmd[4];
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	791a      	ldrb	r2, [r3, #4]
 8001b14:	4b45      	ldr	r3, [pc, #276]	; (8001c2c <answer2CPU+0x3a4>)
 8001b16:	701a      	strb	r2, [r3, #0]
					color=fontInfo|0xF0;
 8001b18:	4b44      	ldr	r3, [pc, #272]	; (8001c2c <answer2CPU+0x3a4>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2210      	movs	r2, #16
 8001b1e:	4252      	negs	r2, r2
 8001b20:	4313      	orrs	r3, r2
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	4b42      	ldr	r3, [pc, #264]	; (8001c30 <answer2CPU+0x3a8>)
 8001b26:	701a      	strb	r2, [r3, #0]
					strLen = cmd[1] - 0x04;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	3b04      	subs	r3, #4
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4b40      	ldr	r3, [pc, #256]	; (8001c34 <answer2CPU+0x3ac>)
 8001b34:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 8001b36:	230e      	movs	r3, #14
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]
 8001b3e:	e00f      	b.n	8001b60 <answer2CPU+0x2d8>
					dataASCII[i] = cmd[i+5];
 8001b40:	200e      	movs	r0, #14
 8001b42:	183b      	adds	r3, r7, r0
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	3305      	adds	r3, #5
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	18d2      	adds	r2, r2, r3
 8001b4c:	183b      	adds	r3, r7, r0
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	7811      	ldrb	r1, [r2, #0]
 8001b52:	4a39      	ldr	r2, [pc, #228]	; (8001c38 <answer2CPU+0x3b0>)
 8001b54:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 8001b56:	183b      	adds	r3, r7, r0
 8001b58:	781a      	ldrb	r2, [r3, #0]
 8001b5a:	183b      	adds	r3, r7, r0
 8001b5c:	3201      	adds	r2, #1
 8001b5e:	701a      	strb	r2, [r3, #0]
 8001b60:	4b34      	ldr	r3, [pc, #208]	; (8001c34 <answer2CPU+0x3ac>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	220e      	movs	r2, #14
 8001b66:	18ba      	adds	r2, r7, r2
 8001b68:	7812      	ldrb	r2, [r2, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d3e8      	bcc.n	8001b40 <answer2CPU+0x2b8>
				}
					cmd2Execute=0x13;
 8001b6e:	4b27      	ldr	r3, [pc, #156]	; (8001c0c <answer2CPU+0x384>)
 8001b70:	2213      	movs	r2, #19
 8001b72:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001b74:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <answer2CPU+0x398>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b14      	cmp	r3, #20
 8001b80:	d109      	bne.n	8001b96 <answer2CPU+0x30e>
					soundNum = cmd[2];
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	789a      	ldrb	r2, [r3, #2]
 8001b86:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <answer2CPU+0x3b4>)
 8001b88:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 8001b8a:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <answer2CPU+0x384>)
 8001b8c:	2214      	movs	r2, #20
 8001b8e:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001b90:	4b23      	ldr	r3, [pc, #140]	; (8001c20 <answer2CPU+0x398>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b15      	cmp	r3, #21
 8001b9c:	d10d      	bne.n	8001bba <answer2CPU+0x332>
					volume = cmd[2];
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	789a      	ldrb	r2, [r3, #2]
 8001ba2:	4b27      	ldr	r3, [pc, #156]	; (8001c40 <answer2CPU+0x3b8>)
 8001ba4:	701a      	strb	r2, [r3, #0]
					contrast = cmd[3];
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	78da      	ldrb	r2, [r3, #3]
 8001baa:	4b26      	ldr	r3, [pc, #152]	; (8001c44 <answer2CPU+0x3bc>)
 8001bac:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 8001bae:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <answer2CPU+0x384>)
 8001bb0:	2215      	movs	r2, #21
 8001bb2:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <answer2CPU+0x398>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b16      	cmp	r3, #22
 8001bc0:	d10d      	bne.n	8001bde <answer2CPU+0x356>
					volume = cmd[3];
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	78da      	ldrb	r2, [r3, #3]
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <answer2CPU+0x3b8>)
 8001bc8:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	791a      	ldrb	r2, [r3, #4]
 8001bce:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <answer2CPU+0x3bc>)
 8001bd0:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <answer2CPU+0x384>)
 8001bd4:	2216      	movs	r2, #22
 8001bd6:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <answer2CPU+0x398>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d000      	beq.n	8001be8 <answer2CPU+0x360>
 8001be6:	e09f      	b.n	8001d28 <answer2CPU+0x4a0>
				myLength = 0x14; //20 bytes length answer
 8001be8:	210c      	movs	r1, #12
 8001bea:	187b      	adds	r3, r7, r1
 8001bec:	2214      	movs	r2, #20
 8001bee:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001bf0:	187b      	adds	r3, r7, r1
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	3b02      	subs	r3, #2
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <answer2CPU+0x38c>)
 8001bfc:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001bfe:	230e      	movs	r3, #14
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	2200      	movs	r2, #0
 8001c04:	701a      	strb	r2, [r3, #0]
 8001c06:	e030      	b.n	8001c6a <answer2CPU+0x3e2>
 8001c08:	200003c4 	.word	0x200003c4
 8001c0c:	20000426 	.word	0x20000426
 8001c10:	50000800 	.word	0x50000800
 8001c14:	2000040c 	.word	0x2000040c
 8001c18:	40004400 	.word	0x40004400
 8001c1c:	200003c5 	.word	0x200003c5
 8001c20:	20000427 	.word	0x20000427
 8001c24:	200003cc 	.word	0x200003cc
 8001c28:	200003d0 	.word	0x200003d0
 8001c2c:	20000431 	.word	0x20000431
 8001c30:	20000432 	.word	0x20000432
 8001c34:	200003ca 	.word	0x200003ca
 8001c38:	200003d8 	.word	0x200003d8
 8001c3c:	200003c6 	.word	0x200003c6
 8001c40:	200003c7 	.word	0x200003c7
 8001c44:	200003c8 	.word	0x200003c8
					ans[i + 2] = PCB_type[i];
 8001c48:	200e      	movs	r0, #14
 8001c4a:	183b      	adds	r3, r7, r0
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	4acb      	ldr	r2, [pc, #812]	; (8001f7c <answer2CPU+0x6f4>)
 8001c50:	5cd1      	ldrb	r1, [r2, r3]
 8001c52:	183b      	adds	r3, r7, r0
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	1c9a      	adds	r2, r3, #2
 8001c58:	b289      	uxth	r1, r1
 8001c5a:	4bc9      	ldr	r3, [pc, #804]	; (8001f80 <answer2CPU+0x6f8>)
 8001c5c:	0052      	lsls	r2, r2, #1
 8001c5e:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001c60:	183b      	adds	r3, r7, r0
 8001c62:	781a      	ldrb	r2, [r3, #0]
 8001c64:	183b      	adds	r3, r7, r0
 8001c66:	3201      	adds	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
 8001c6a:	220e      	movs	r2, #14
 8001c6c:	18bb      	adds	r3, r7, r2
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b10      	cmp	r3, #16
 8001c72:	d9e9      	bls.n	8001c48 <answer2CPU+0x3c0>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001c74:	18bb      	adds	r3, r7, r2
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
 8001c7a:	e011      	b.n	8001ca0 <answer2CPU+0x418>
					myCS = myCS + ans[i];
 8001c7c:	200e      	movs	r0, #14
 8001c7e:	183b      	adds	r3, r7, r0
 8001c80:	781a      	ldrb	r2, [r3, #0]
 8001c82:	4bbf      	ldr	r3, [pc, #764]	; (8001f80 <answer2CPU+0x6f8>)
 8001c84:	0052      	lsls	r2, r2, #1
 8001c86:	5ad3      	ldrh	r3, [r2, r3]
 8001c88:	b2d9      	uxtb	r1, r3
 8001c8a:	220d      	movs	r2, #13
 8001c8c:	18bb      	adds	r3, r7, r2
 8001c8e:	18ba      	adds	r2, r7, r2
 8001c90:	7812      	ldrb	r2, [r2, #0]
 8001c92:	188a      	adds	r2, r1, r2
 8001c94:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001c96:	183b      	adds	r3, r7, r0
 8001c98:	781a      	ldrb	r2, [r3, #0]
 8001c9a:	183b      	adds	r3, r7, r0
 8001c9c:	3201      	adds	r2, #1
 8001c9e:	701a      	strb	r2, [r3, #0]
 8001ca0:	230e      	movs	r3, #14
 8001ca2:	18fb      	adds	r3, r7, r3
 8001ca4:	781a      	ldrb	r2, [r3, #0]
 8001ca6:	200c      	movs	r0, #12
 8001ca8:	183b      	adds	r3, r7, r0
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	dbe4      	blt.n	8001c7c <answer2CPU+0x3f4>
				}
				myCS = 0 - myCS;
 8001cb2:	210d      	movs	r1, #13
 8001cb4:	187b      	adds	r3, r7, r1
 8001cb6:	187a      	adds	r2, r7, r1
 8001cb8:	7812      	ldrb	r2, [r2, #0]
 8001cba:	4252      	negs	r2, r2
 8001cbc:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001cbe:	183b      	adds	r3, r7, r0
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	1e5a      	subs	r2, r3, #1
 8001cc4:	187b      	adds	r3, r7, r1
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	b299      	uxth	r1, r3
 8001cca:	4bad      	ldr	r3, [pc, #692]	; (8001f80 <answer2CPU+0x6f8>)
 8001ccc:	0052      	lsls	r2, r2, #1
 8001cce:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001cd0:	46c0      	nop			; (mov r8, r8)
 8001cd2:	4bac      	ldr	r3, [pc, #688]	; (8001f84 <answer2CPU+0x6fc>)
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	2280      	movs	r2, #128	; 0x80
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d0fa      	beq.n	8001cd2 <answer2CPU+0x44a>
				USART2->TDR = ans[0]|0x0100;
 8001cdc:	4ba8      	ldr	r3, [pc, #672]	; (8001f80 <answer2CPU+0x6f8>)
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	2280      	movs	r2, #128	; 0x80
 8001ce2:	0052      	lsls	r2, r2, #1
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	4ba6      	ldr	r3, [pc, #664]	; (8001f84 <answer2CPU+0x6fc>)
 8001cea:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001cec:	e014      	b.n	8001d18 <answer2CPU+0x490>
				  {
				    i++;
 8001cee:	210e      	movs	r1, #14
 8001cf0:	187b      	adds	r3, r7, r1
 8001cf2:	781a      	ldrb	r2, [r3, #0]
 8001cf4:	187b      	adds	r3, r7, r1
 8001cf6:	3201      	adds	r2, #1
 8001cf8:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	4ba1      	ldr	r3, [pc, #644]	; (8001f84 <answer2CPU+0x6fc>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	2280      	movs	r2, #128	; 0x80
 8001d02:	4013      	ands	r3, r2
 8001d04:	d0fa      	beq.n	8001cfc <answer2CPU+0x474>
				    USART2->TDR = (uint8_t)ans[i];
 8001d06:	230e      	movs	r3, #14
 8001d08:	18fb      	adds	r3, r7, r3
 8001d0a:	781a      	ldrb	r2, [r3, #0]
 8001d0c:	4b9c      	ldr	r3, [pc, #624]	; (8001f80 <answer2CPU+0x6f8>)
 8001d0e:	0052      	lsls	r2, r2, #1
 8001d10:	5ad3      	ldrh	r3, [r2, r3]
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	4b9b      	ldr	r3, [pc, #620]	; (8001f84 <answer2CPU+0x6fc>)
 8001d16:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001d18:	230e      	movs	r3, #14
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	781a      	ldrb	r2, [r3, #0]
 8001d1e:	4b98      	ldr	r3, [pc, #608]	; (8001f80 <answer2CPU+0x6f8>)
 8001d20:	0052      	lsls	r2, r2, #1
 8001d22:	5ad3      	ldrh	r3, [r2, r3]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1e2      	bne.n	8001cee <answer2CPU+0x466>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d000      	beq.n	8001d32 <answer2CPU+0x4aa>
 8001d30:	e07f      	b.n	8001e32 <answer2CPU+0x5aa>
				myLength = 0x0B; //19 bytes length answer
 8001d32:	210c      	movs	r1, #12
 8001d34:	187b      	adds	r3, r7, r1
 8001d36:	220b      	movs	r2, #11
 8001d38:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001d3a:	187b      	adds	r3, r7, r1
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	3b02      	subs	r3, #2
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	4b8e      	ldr	r3, [pc, #568]	; (8001f80 <answer2CPU+0x6f8>)
 8001d46:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001d48:	230e      	movs	r3, #14
 8001d4a:	18fb      	adds	r3, r7, r3
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
 8001d50:	e010      	b.n	8001d74 <answer2CPU+0x4ec>
					ans[i + 2] = PCB_rev[i];
 8001d52:	200e      	movs	r0, #14
 8001d54:	183b      	adds	r3, r7, r0
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	4a8b      	ldr	r2, [pc, #556]	; (8001f88 <answer2CPU+0x700>)
 8001d5a:	5cd1      	ldrb	r1, [r2, r3]
 8001d5c:	183b      	adds	r3, r7, r0
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	1c9a      	adds	r2, r3, #2
 8001d62:	b289      	uxth	r1, r1
 8001d64:	4b86      	ldr	r3, [pc, #536]	; (8001f80 <answer2CPU+0x6f8>)
 8001d66:	0052      	lsls	r2, r2, #1
 8001d68:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001d6a:	183b      	adds	r3, r7, r0
 8001d6c:	781a      	ldrb	r2, [r3, #0]
 8001d6e:	183b      	adds	r3, r7, r0
 8001d70:	3201      	adds	r2, #1
 8001d72:	701a      	strb	r2, [r3, #0]
 8001d74:	220e      	movs	r2, #14
 8001d76:	18bb      	adds	r3, r7, r2
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b10      	cmp	r3, #16
 8001d7c:	d9e9      	bls.n	8001d52 <answer2CPU+0x4ca>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001d7e:	18bb      	adds	r3, r7, r2
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
 8001d84:	e011      	b.n	8001daa <answer2CPU+0x522>
					myCS = myCS + ans[i];
 8001d86:	200e      	movs	r0, #14
 8001d88:	183b      	adds	r3, r7, r0
 8001d8a:	781a      	ldrb	r2, [r3, #0]
 8001d8c:	4b7c      	ldr	r3, [pc, #496]	; (8001f80 <answer2CPU+0x6f8>)
 8001d8e:	0052      	lsls	r2, r2, #1
 8001d90:	5ad3      	ldrh	r3, [r2, r3]
 8001d92:	b2d9      	uxtb	r1, r3
 8001d94:	220d      	movs	r2, #13
 8001d96:	18bb      	adds	r3, r7, r2
 8001d98:	18ba      	adds	r2, r7, r2
 8001d9a:	7812      	ldrb	r2, [r2, #0]
 8001d9c:	188a      	adds	r2, r1, r2
 8001d9e:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001da0:	183b      	adds	r3, r7, r0
 8001da2:	781a      	ldrb	r2, [r3, #0]
 8001da4:	183b      	adds	r3, r7, r0
 8001da6:	3201      	adds	r2, #1
 8001da8:	701a      	strb	r2, [r3, #0]
 8001daa:	230e      	movs	r3, #14
 8001dac:	18fb      	adds	r3, r7, r3
 8001dae:	781a      	ldrb	r2, [r3, #0]
 8001db0:	200c      	movs	r0, #12
 8001db2:	183b      	adds	r3, r7, r0
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	429a      	cmp	r2, r3
 8001dba:	dbe4      	blt.n	8001d86 <answer2CPU+0x4fe>
				}
				myCS = 0 - myCS;
 8001dbc:	210d      	movs	r1, #13
 8001dbe:	187b      	adds	r3, r7, r1
 8001dc0:	187a      	adds	r2, r7, r1
 8001dc2:	7812      	ldrb	r2, [r2, #0]
 8001dc4:	4252      	negs	r2, r2
 8001dc6:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001dc8:	183b      	adds	r3, r7, r0
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	1e5a      	subs	r2, r3, #1
 8001dce:	187b      	adds	r3, r7, r1
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	b299      	uxth	r1, r3
 8001dd4:	4b6a      	ldr	r3, [pc, #424]	; (8001f80 <answer2CPU+0x6f8>)
 8001dd6:	0052      	lsls	r2, r2, #1
 8001dd8:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	4b69      	ldr	r3, [pc, #420]	; (8001f84 <answer2CPU+0x6fc>)
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	2280      	movs	r2, #128	; 0x80
 8001de2:	4013      	ands	r3, r2
 8001de4:	d0fa      	beq.n	8001ddc <answer2CPU+0x554>
				USART2->TDR = ans[0]|0x0100;
 8001de6:	4b66      	ldr	r3, [pc, #408]	; (8001f80 <answer2CPU+0x6f8>)
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	2280      	movs	r2, #128	; 0x80
 8001dec:	0052      	lsls	r2, r2, #1
 8001dee:	4313      	orrs	r3, r2
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	4b64      	ldr	r3, [pc, #400]	; (8001f84 <answer2CPU+0x6fc>)
 8001df4:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001df6:	e014      	b.n	8001e22 <answer2CPU+0x59a>
					  {
					    i++;
 8001df8:	210e      	movs	r1, #14
 8001dfa:	187b      	adds	r3, r7, r1
 8001dfc:	781a      	ldrb	r2, [r3, #0]
 8001dfe:	187b      	adds	r3, r7, r1
 8001e00:	3201      	adds	r2, #1
 8001e02:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001e04:	46c0      	nop			; (mov r8, r8)
 8001e06:	4b5f      	ldr	r3, [pc, #380]	; (8001f84 <answer2CPU+0x6fc>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	2280      	movs	r2, #128	; 0x80
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d0fa      	beq.n	8001e06 <answer2CPU+0x57e>
					    USART2->TDR = (uint8_t)ans[i];
 8001e10:	230e      	movs	r3, #14
 8001e12:	18fb      	adds	r3, r7, r3
 8001e14:	781a      	ldrb	r2, [r3, #0]
 8001e16:	4b5a      	ldr	r3, [pc, #360]	; (8001f80 <answer2CPU+0x6f8>)
 8001e18:	0052      	lsls	r2, r2, #1
 8001e1a:	5ad3      	ldrh	r3, [r2, r3]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4b59      	ldr	r3, [pc, #356]	; (8001f84 <answer2CPU+0x6fc>)
 8001e20:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001e22:	230e      	movs	r3, #14
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	781a      	ldrb	r2, [r3, #0]
 8001e28:	4b55      	ldr	r3, [pc, #340]	; (8001f80 <answer2CPU+0x6f8>)
 8001e2a:	0052      	lsls	r2, r2, #1
 8001e2c:	5ad3      	ldrh	r3, [r2, r3]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1e2      	bne.n	8001df8 <answer2CPU+0x570>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d000      	beq.n	8001e3c <answer2CPU+0x5b4>
 8001e3a:	e07f      	b.n	8001f3c <answer2CPU+0x6b4>
				myLength = 0x13; //19 bytes length answer
 8001e3c:	210c      	movs	r1, #12
 8001e3e:	187b      	adds	r3, r7, r1
 8001e40:	2213      	movs	r2, #19
 8001e42:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001e44:	187b      	adds	r3, r7, r1
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	3b02      	subs	r3, #2
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	4b4c      	ldr	r3, [pc, #304]	; (8001f80 <answer2CPU+0x6f8>)
 8001e50:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001e52:	230e      	movs	r3, #14
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
 8001e5a:	e010      	b.n	8001e7e <answer2CPU+0x5f6>
					ans[i + 2] = EmitterSN[i];
 8001e5c:	200e      	movs	r0, #14
 8001e5e:	183b      	adds	r3, r7, r0
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	4a4a      	ldr	r2, [pc, #296]	; (8001f8c <answer2CPU+0x704>)
 8001e64:	5cd1      	ldrb	r1, [r2, r3]
 8001e66:	183b      	adds	r3, r7, r0
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	1c9a      	adds	r2, r3, #2
 8001e6c:	b289      	uxth	r1, r1
 8001e6e:	4b44      	ldr	r3, [pc, #272]	; (8001f80 <answer2CPU+0x6f8>)
 8001e70:	0052      	lsls	r2, r2, #1
 8001e72:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001e74:	183b      	adds	r3, r7, r0
 8001e76:	781a      	ldrb	r2, [r3, #0]
 8001e78:	183b      	adds	r3, r7, r0
 8001e7a:	3201      	adds	r2, #1
 8001e7c:	701a      	strb	r2, [r3, #0]
 8001e7e:	220e      	movs	r2, #14
 8001e80:	18bb      	adds	r3, r7, r2
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b10      	cmp	r3, #16
 8001e86:	d9e9      	bls.n	8001e5c <answer2CPU+0x5d4>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001e88:	18bb      	adds	r3, r7, r2
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
 8001e8e:	e011      	b.n	8001eb4 <answer2CPU+0x62c>
					myCS = myCS + ans[i];
 8001e90:	200e      	movs	r0, #14
 8001e92:	183b      	adds	r3, r7, r0
 8001e94:	781a      	ldrb	r2, [r3, #0]
 8001e96:	4b3a      	ldr	r3, [pc, #232]	; (8001f80 <answer2CPU+0x6f8>)
 8001e98:	0052      	lsls	r2, r2, #1
 8001e9a:	5ad3      	ldrh	r3, [r2, r3]
 8001e9c:	b2d9      	uxtb	r1, r3
 8001e9e:	220d      	movs	r2, #13
 8001ea0:	18bb      	adds	r3, r7, r2
 8001ea2:	18ba      	adds	r2, r7, r2
 8001ea4:	7812      	ldrb	r2, [r2, #0]
 8001ea6:	188a      	adds	r2, r1, r2
 8001ea8:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001eaa:	183b      	adds	r3, r7, r0
 8001eac:	781a      	ldrb	r2, [r3, #0]
 8001eae:	183b      	adds	r3, r7, r0
 8001eb0:	3201      	adds	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
 8001eb4:	230e      	movs	r3, #14
 8001eb6:	18fb      	adds	r3, r7, r3
 8001eb8:	781a      	ldrb	r2, [r3, #0]
 8001eba:	200c      	movs	r0, #12
 8001ebc:	183b      	adds	r3, r7, r0
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	dbe4      	blt.n	8001e90 <answer2CPU+0x608>
				}
				myCS = 0 - myCS;
 8001ec6:	210d      	movs	r1, #13
 8001ec8:	187b      	adds	r3, r7, r1
 8001eca:	187a      	adds	r2, r7, r1
 8001ecc:	7812      	ldrb	r2, [r2, #0]
 8001ece:	4252      	negs	r2, r2
 8001ed0:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001ed2:	183b      	adds	r3, r7, r0
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	1e5a      	subs	r2, r3, #1
 8001ed8:	187b      	adds	r3, r7, r1
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	b299      	uxth	r1, r3
 8001ede:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <answer2CPU+0x6f8>)
 8001ee0:	0052      	lsls	r2, r2, #1
 8001ee2:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001ee4:	46c0      	nop			; (mov r8, r8)
 8001ee6:	4b27      	ldr	r3, [pc, #156]	; (8001f84 <answer2CPU+0x6fc>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	2280      	movs	r2, #128	; 0x80
 8001eec:	4013      	ands	r3, r2
 8001eee:	d0fa      	beq.n	8001ee6 <answer2CPU+0x65e>
				USART2->TDR = ans[0]|0x0100;
 8001ef0:	4b23      	ldr	r3, [pc, #140]	; (8001f80 <answer2CPU+0x6f8>)
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	2280      	movs	r2, #128	; 0x80
 8001ef6:	0052      	lsls	r2, r2, #1
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <answer2CPU+0x6fc>)
 8001efe:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001f00:	e014      	b.n	8001f2c <answer2CPU+0x6a4>
				  {
				    i++;
 8001f02:	210e      	movs	r1, #14
 8001f04:	187b      	adds	r3, r7, r1
 8001f06:	781a      	ldrb	r2, [r3, #0]
 8001f08:	187b      	adds	r3, r7, r1
 8001f0a:	3201      	adds	r2, #1
 8001f0c:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <answer2CPU+0x6fc>)
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	2280      	movs	r2, #128	; 0x80
 8001f16:	4013      	ands	r3, r2
 8001f18:	d0fa      	beq.n	8001f10 <answer2CPU+0x688>
				    	USART2->TDR = (uint8_t)ans[i];
 8001f1a:	230e      	movs	r3, #14
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	781a      	ldrb	r2, [r3, #0]
 8001f20:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <answer2CPU+0x6f8>)
 8001f22:	0052      	lsls	r2, r2, #1
 8001f24:	5ad3      	ldrh	r3, [r2, r3]
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <answer2CPU+0x6fc>)
 8001f2a:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001f2c:	230e      	movs	r3, #14
 8001f2e:	18fb      	adds	r3, r7, r3
 8001f30:	781a      	ldrb	r2, [r3, #0]
 8001f32:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <answer2CPU+0x6f8>)
 8001f34:	0052      	lsls	r2, r2, #1
 8001f36:	5ad3      	ldrh	r3, [r2, r3]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1e2      	bne.n	8001f02 <answer2CPU+0x67a>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d000      	beq.n	8001f46 <answer2CPU+0x6be>
 8001f44:	e07c      	b.n	8002040 <answer2CPU+0x7b8>
				myLength = 0x04; //4 bytes length answer
 8001f46:	210c      	movs	r1, #12
 8001f48:	187b      	adds	r3, r7, r1
 8001f4a:	2204      	movs	r2, #4
 8001f4c:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001f4e:	187b      	adds	r3, r7, r1
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	3b02      	subs	r3, #2
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <answer2CPU+0x6f8>)
 8001f5a:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <answer2CPU+0x708>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <answer2CPU+0x6f8>)
 8001f64:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001f66:	230d      	movs	r3, #13
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <answer2CPU+0x6f8>)
 8001f70:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001f72:	230e      	movs	r3, #14
 8001f74:	18fb      	adds	r3, r7, r3
 8001f76:	2200      	movs	r2, #0
 8001f78:	701a      	strb	r2, [r3, #0]
 8001f7a:	e01d      	b.n	8001fb8 <answer2CPU+0x730>
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	2000040c 	.word	0x2000040c
 8001f84:	40004400 	.word	0x40004400
 8001f88:	20000014 	.word	0x20000014
 8001f8c:	20000020 	.word	0x20000020
 8001f90:	2000001c 	.word	0x2000001c
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001f94:	200e      	movs	r0, #14
 8001f96:	183b      	adds	r3, r7, r0
 8001f98:	781a      	ldrb	r2, [r3, #0]
 8001f9a:	4b6d      	ldr	r3, [pc, #436]	; (8002150 <answer2CPU+0x8c8>)
 8001f9c:	0052      	lsls	r2, r2, #1
 8001f9e:	5ad3      	ldrh	r3, [r2, r3]
 8001fa0:	b2d9      	uxtb	r1, r3
 8001fa2:	220d      	movs	r2, #13
 8001fa4:	18bb      	adds	r3, r7, r2
 8001fa6:	18ba      	adds	r2, r7, r2
 8001fa8:	7812      	ldrb	r2, [r2, #0]
 8001faa:	188a      	adds	r2, r1, r2
 8001fac:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001fae:	183b      	adds	r3, r7, r0
 8001fb0:	781a      	ldrb	r2, [r3, #0]
 8001fb2:	183b      	adds	r3, r7, r0
 8001fb4:	3201      	adds	r2, #1
 8001fb6:	701a      	strb	r2, [r3, #0]
 8001fb8:	230e      	movs	r3, #14
 8001fba:	18fb      	adds	r3, r7, r3
 8001fbc:	781a      	ldrb	r2, [r3, #0]
 8001fbe:	200c      	movs	r0, #12
 8001fc0:	183b      	adds	r3, r7, r0
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	dbe4      	blt.n	8001f94 <answer2CPU+0x70c>
				}
				myCS = 0 - myCS;
 8001fca:	210d      	movs	r1, #13
 8001fcc:	187b      	adds	r3, r7, r1
 8001fce:	187a      	adds	r2, r7, r1
 8001fd0:	7812      	ldrb	r2, [r2, #0]
 8001fd2:	4252      	negs	r2, r2
 8001fd4:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001fd6:	183b      	adds	r3, r7, r0
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	1e5a      	subs	r2, r3, #1
 8001fdc:	187b      	adds	r3, r7, r1
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	b299      	uxth	r1, r3
 8001fe2:	4b5b      	ldr	r3, [pc, #364]	; (8002150 <answer2CPU+0x8c8>)
 8001fe4:	0052      	lsls	r2, r2, #1
 8001fe6:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001fe8:	46c0      	nop			; (mov r8, r8)
 8001fea:	4b5a      	ldr	r3, [pc, #360]	; (8002154 <answer2CPU+0x8cc>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	2280      	movs	r2, #128	; 0x80
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d0fa      	beq.n	8001fea <answer2CPU+0x762>
					USART2->TDR = ans[0]|0x0100;
 8001ff4:	4b56      	ldr	r3, [pc, #344]	; (8002150 <answer2CPU+0x8c8>)
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	2280      	movs	r2, #128	; 0x80
 8001ffa:	0052      	lsls	r2, r2, #1
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	4b54      	ldr	r3, [pc, #336]	; (8002154 <answer2CPU+0x8cc>)
 8002002:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8002004:	e014      	b.n	8002030 <answer2CPU+0x7a8>
						{
						  i++;
 8002006:	210e      	movs	r1, #14
 8002008:	187b      	adds	r3, r7, r1
 800200a:	781a      	ldrb	r2, [r3, #0]
 800200c:	187b      	adds	r3, r7, r1
 800200e:	3201      	adds	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	4b4f      	ldr	r3, [pc, #316]	; (8002154 <answer2CPU+0x8cc>)
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	2280      	movs	r2, #128	; 0x80
 800201a:	4013      	ands	r3, r2
 800201c:	d0fa      	beq.n	8002014 <answer2CPU+0x78c>
						     USART2->TDR = (uint8_t)ans[i];
 800201e:	230e      	movs	r3, #14
 8002020:	18fb      	adds	r3, r7, r3
 8002022:	781a      	ldrb	r2, [r3, #0]
 8002024:	4b4a      	ldr	r3, [pc, #296]	; (8002150 <answer2CPU+0x8c8>)
 8002026:	0052      	lsls	r2, r2, #1
 8002028:	5ad3      	ldrh	r3, [r2, r3]
 800202a:	b2da      	uxtb	r2, r3
 800202c:	4b49      	ldr	r3, [pc, #292]	; (8002154 <answer2CPU+0x8cc>)
 800202e:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8002030:	230e      	movs	r3, #14
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	781a      	ldrb	r2, [r3, #0]
 8002036:	4b46      	ldr	r3, [pc, #280]	; (8002150 <answer2CPU+0x8c8>)
 8002038:	0052      	lsls	r2, r2, #1
 800203a:	5ad3      	ldrh	r3, [r2, r3]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1e2      	bne.n	8002006 <answer2CPU+0x77e>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b04      	cmp	r3, #4
 8002046:	d000      	beq.n	800204a <answer2CPU+0x7c2>
 8002048:	e076      	b.n	8002138 <answer2CPU+0x8b0>
				myLength = 0x04; //4 bytes length answer
 800204a:	210c      	movs	r1, #12
 800204c:	187b      	adds	r3, r7, r1
 800204e:	2204      	movs	r2, #4
 8002050:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8002052:	187b      	adds	r3, r7, r1
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	b29b      	uxth	r3, r3
 8002058:	3b02      	subs	r3, #2
 800205a:	b29a      	uxth	r2, r3
 800205c:	4b3c      	ldr	r3, [pc, #240]	; (8002150 <answer2CPU+0x8c8>)
 800205e:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3302      	adds	r3, #2
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	001a      	movs	r2, r3
 8002068:	4b3b      	ldr	r3, [pc, #236]	; (8002158 <answer2CPU+0x8d0>)
 800206a:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 800206c:	4b3b      	ldr	r3, [pc, #236]	; (800215c <answer2CPU+0x8d4>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	b29a      	uxth	r2, r3
 8002072:	4b37      	ldr	r3, [pc, #220]	; (8002150 <answer2CPU+0x8c8>)
 8002074:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8002076:	230d      	movs	r3, #13
 8002078:	18fb      	adds	r3, r7, r3
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	b29a      	uxth	r2, r3
 800207e:	4b34      	ldr	r3, [pc, #208]	; (8002150 <answer2CPU+0x8c8>)
 8002080:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8002082:	230e      	movs	r3, #14
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
 800208a:	e011      	b.n	80020b0 <answer2CPU+0x828>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 800208c:	200e      	movs	r0, #14
 800208e:	183b      	adds	r3, r7, r0
 8002090:	781a      	ldrb	r2, [r3, #0]
 8002092:	4b2f      	ldr	r3, [pc, #188]	; (8002150 <answer2CPU+0x8c8>)
 8002094:	0052      	lsls	r2, r2, #1
 8002096:	5ad3      	ldrh	r3, [r2, r3]
 8002098:	b2d9      	uxtb	r1, r3
 800209a:	220d      	movs	r2, #13
 800209c:	18bb      	adds	r3, r7, r2
 800209e:	18ba      	adds	r2, r7, r2
 80020a0:	7812      	ldrb	r2, [r2, #0]
 80020a2:	188a      	adds	r2, r1, r2
 80020a4:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 80020a6:	183b      	adds	r3, r7, r0
 80020a8:	781a      	ldrb	r2, [r3, #0]
 80020aa:	183b      	adds	r3, r7, r0
 80020ac:	3201      	adds	r2, #1
 80020ae:	701a      	strb	r2, [r3, #0]
 80020b0:	230e      	movs	r3, #14
 80020b2:	18fb      	adds	r3, r7, r3
 80020b4:	781a      	ldrb	r2, [r3, #0]
 80020b6:	200c      	movs	r0, #12
 80020b8:	183b      	adds	r3, r7, r0
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	3b01      	subs	r3, #1
 80020be:	429a      	cmp	r2, r3
 80020c0:	dbe4      	blt.n	800208c <answer2CPU+0x804>
				}
				myCS = 0 - myCS;
 80020c2:	210d      	movs	r1, #13
 80020c4:	187b      	adds	r3, r7, r1
 80020c6:	187a      	adds	r2, r7, r1
 80020c8:	7812      	ldrb	r2, [r2, #0]
 80020ca:	4252      	negs	r2, r2
 80020cc:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 80020ce:	183b      	adds	r3, r7, r0
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	1e5a      	subs	r2, r3, #1
 80020d4:	187b      	adds	r3, r7, r1
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	b299      	uxth	r1, r3
 80020da:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <answer2CPU+0x8c8>)
 80020dc:	0052      	lsls	r2, r2, #1
 80020de:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 80020e0:	46c0      	nop			; (mov r8, r8)
 80020e2:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <answer2CPU+0x8cc>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	2280      	movs	r2, #128	; 0x80
 80020e8:	4013      	ands	r3, r2
 80020ea:	d0fa      	beq.n	80020e2 <answer2CPU+0x85a>
				USART2->TDR = ans[0]|0x0100;
 80020ec:	4b18      	ldr	r3, [pc, #96]	; (8002150 <answer2CPU+0x8c8>)
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	2280      	movs	r2, #128	; 0x80
 80020f2:	0052      	lsls	r2, r2, #1
 80020f4:	4313      	orrs	r3, r2
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	4b16      	ldr	r3, [pc, #88]	; (8002154 <answer2CPU+0x8cc>)
 80020fa:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 80020fc:	e014      	b.n	8002128 <answer2CPU+0x8a0>
				{
				  i++;
 80020fe:	210e      	movs	r1, #14
 8002100:	187b      	adds	r3, r7, r1
 8002102:	781a      	ldrb	r2, [r3, #0]
 8002104:	187b      	adds	r3, r7, r1
 8002106:	3201      	adds	r2, #1
 8002108:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <answer2CPU+0x8cc>)
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	2280      	movs	r2, #128	; 0x80
 8002112:	4013      	ands	r3, r2
 8002114:	d0fa      	beq.n	800210c <answer2CPU+0x884>
				  USART2->TDR = (uint8_t)ans[i];
 8002116:	230e      	movs	r3, #14
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	781a      	ldrb	r2, [r3, #0]
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <answer2CPU+0x8c8>)
 800211e:	0052      	lsls	r2, r2, #1
 8002120:	5ad3      	ldrh	r3, [r2, r3]
 8002122:	b2da      	uxtb	r2, r3
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <answer2CPU+0x8cc>)
 8002126:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8002128:	230e      	movs	r3, #14
 800212a:	18fb      	adds	r3, r7, r3
 800212c:	781a      	ldrb	r2, [r3, #0]
 800212e:	4b08      	ldr	r3, [pc, #32]	; (8002150 <answer2CPU+0x8c8>)
 8002130:	0052      	lsls	r2, r2, #1
 8002132:	5ad3      	ldrh	r3, [r2, r3]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1e2      	bne.n	80020fe <answer2CPU+0x876>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <answer2CPU+0x8cc>)
 800213a:	6a1a      	ldr	r2, [r3, #32]
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <answer2CPU+0x8cc>)
 800213e:	2108      	movs	r1, #8
 8002140:	430a      	orrs	r2, r1
 8002142:	621a      	str	r2, [r3, #32]
}
 8002144:	46c0      	nop			; (mov r8, r8)
 8002146:	0018      	movs	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	b004      	add	sp, #16
 800214c:	bd80      	pop	{r7, pc}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	2000040c 	.word	0x2000040c
 8002154:	40004400 	.word	0x40004400
 8002158:	200003d4 	.word	0x200003d4
 800215c:	200003c9 	.word	0x200003c9

08002160 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 8002166:	2001      	movs	r0, #1
 8002168:	f003 f9e2 	bl	8005530 <HAL_Delay>
		GPIOB->ODR &= ~(1 << 9); //reset cs
 800216c:	4b28      	ldr	r3, [pc, #160]	; (8002210 <MEM_Reset+0xb0>)
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	4b27      	ldr	r3, [pc, #156]	; (8002210 <MEM_Reset+0xb0>)
 8002172:	4928      	ldr	r1, [pc, #160]	; (8002214 <MEM_Reset+0xb4>)
 8002174:	400a      	ands	r2, r1
 8002176:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 8002178:	1dfb      	adds	r3, r7, #7
 800217a:	2266      	movs	r2, #102	; 0x66
 800217c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 800217e:	1df9      	adds	r1, r7, #7
 8002180:	4825      	ldr	r0, [pc, #148]	; (8002218 <MEM_Reset+0xb8>)
 8002182:	2305      	movs	r3, #5
 8002184:	2201      	movs	r2, #1
 8002186:	f007 f949 	bl	800941c <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 800218a:	4b21      	ldr	r3, [pc, #132]	; (8002210 <MEM_Reset+0xb0>)
 800218c:	695a      	ldr	r2, [r3, #20]
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <MEM_Reset+0xb0>)
 8002190:	2180      	movs	r1, #128	; 0x80
 8002192:	0089      	lsls	r1, r1, #2
 8002194:	430a      	orrs	r2, r1
 8002196:	615a      	str	r2, [r3, #20]
		asm("NOP");
 8002198:	46c0      	nop			; (mov r8, r8)
		__NOP();
 800219a:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 800219c:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 800219e:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 80021a0:	46c0      	nop			; (mov r8, r8)
		__NOP();
 80021a2:	46c0      	nop			; (mov r8, r8)
		GPIOB->ODR &= ~(1 << 9);			//reset cs
 80021a4:	4b1a      	ldr	r3, [pc, #104]	; (8002210 <MEM_Reset+0xb0>)
 80021a6:	695a      	ldr	r2, [r3, #20]
 80021a8:	4b19      	ldr	r3, [pc, #100]	; (8002210 <MEM_Reset+0xb0>)
 80021aa:	491a      	ldr	r1, [pc, #104]	; (8002214 <MEM_Reset+0xb4>)
 80021ac:	400a      	ands	r2, r1
 80021ae:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 80021b0:	1dfb      	adds	r3, r7, #7
 80021b2:	2299      	movs	r2, #153	; 0x99
 80021b4:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 80021b6:	1df9      	adds	r1, r7, #7
 80021b8:	4817      	ldr	r0, [pc, #92]	; (8002218 <MEM_Reset+0xb8>)
 80021ba:	2305      	movs	r3, #5
 80021bc:	2201      	movs	r2, #1
 80021be:	f007 f92d 	bl	800941c <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 80021c2:	4b13      	ldr	r3, [pc, #76]	; (8002210 <MEM_Reset+0xb0>)
 80021c4:	695a      	ldr	r2, [r3, #20]
 80021c6:	4b12      	ldr	r3, [pc, #72]	; (8002210 <MEM_Reset+0xb0>)
 80021c8:	2180      	movs	r1, #128	; 0x80
 80021ca:	0089      	lsls	r1, r1, #2
 80021cc:	430a      	orrs	r2, r1
 80021ce:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 80021d0:	2001      	movs	r0, #1
 80021d2:	f003 f9ad 	bl	8005530 <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 80021d6:	1dfb      	adds	r3, r7, #7
 80021d8:	22b7      	movs	r2, #183	; 0xb7
 80021da:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 << 9); //reset cs
 80021dc:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <MEM_Reset+0xb0>)
 80021de:	695a      	ldr	r2, [r3, #20]
 80021e0:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <MEM_Reset+0xb0>)
 80021e2:	490c      	ldr	r1, [pc, #48]	; (8002214 <MEM_Reset+0xb4>)
 80021e4:	400a      	ands	r2, r1
 80021e6:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 80021e8:	1df9      	adds	r1, r7, #7
 80021ea:	480b      	ldr	r0, [pc, #44]	; (8002218 <MEM_Reset+0xb8>)
 80021ec:	2305      	movs	r3, #5
 80021ee:	2201      	movs	r2, #1
 80021f0:	f007 f914 	bl	800941c <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <MEM_Reset+0xb0>)
 80021f6:	695a      	ldr	r2, [r3, #20]
 80021f8:	4b05      	ldr	r3, [pc, #20]	; (8002210 <MEM_Reset+0xb0>)
 80021fa:	2180      	movs	r1, #128	; 0x80
 80021fc:	0089      	lsls	r1, r1, #2
 80021fe:	430a      	orrs	r2, r1
 8002200:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8002202:	2001      	movs	r0, #1
 8002204:	f003 f994 	bl	8005530 <HAL_Delay>
	}
 8002208:	46c0      	nop			; (mov r8, r8)
 800220a:	46bd      	mov	sp, r7
 800220c:	b002      	add	sp, #8
 800220e:	bd80      	pop	{r7, pc}
 8002210:	50000400 	.word	0x50000400
 8002214:	fffffdff 	.word	0xfffffdff
 8002218:	200001a0 	.word	0x200001a0

0800221c <weoShowFullScreen>:
//==================================================================================================================================
	uint8_t weoShowFullScreen(uint8_t picNum) {
 800221c:	b5b0      	push	{r4, r5, r7, lr}
 800221e:	4c42      	ldr	r4, [pc, #264]	; (8002328 <weoShowFullScreen+0x10c>)
 8002220:	44a5      	add	sp, r4
 8002222:	af02      	add	r7, sp, #8
 8002224:	0002      	movs	r2, r0
 8002226:	4b41      	ldr	r3, [pc, #260]	; (800232c <weoShowFullScreen+0x110>)
 8002228:	4941      	ldr	r1, [pc, #260]	; (8002330 <weoShowFullScreen+0x114>)
 800222a:	185b      	adds	r3, r3, r1
 800222c:	19db      	adds	r3, r3, r7
 800222e:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i, len;
		uint32_t addrInfo,addr,firstImAddr;
		memCMD = 0x13; //read command with 4-byte address
 8002230:	4c40      	ldr	r4, [pc, #256]	; (8002334 <weoShowFullScreen+0x118>)
 8002232:	193b      	adds	r3, r7, r4
 8002234:	2213      	movs	r2, #19
 8002236:	701a      	strb	r2, [r3, #0]
//		picNum=0x02;
		addr=(picNum)*0x2000;
 8002238:	4b3c      	ldr	r3, [pc, #240]	; (800232c <weoShowFullScreen+0x110>)
 800223a:	185b      	adds	r3, r3, r1
 800223c:	19db      	adds	r3, r3, r7
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	035b      	lsls	r3, r3, #13
 8002242:	483d      	ldr	r0, [pc, #244]	; (8002338 <weoShowFullScreen+0x11c>)
 8002244:	183a      	adds	r2, r7, r0
 8002246:	6013      	str	r3, [r2, #0]
//		addr=0x00003800;
		addrArray[0]=addr & 0xFF;
 8002248:	183b      	adds	r3, r7, r0
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4b3b      	ldr	r3, [pc, #236]	; (800233c <weoShowFullScreen+0x120>)
 8002250:	185b      	adds	r3, r3, r1
 8002252:	19db      	adds	r3, r3, r7
 8002254:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8002256:	183b      	adds	r3, r7, r0
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	b2da      	uxtb	r2, r3
 800225e:	4b37      	ldr	r3, [pc, #220]	; (800233c <weoShowFullScreen+0x120>)
 8002260:	185b      	adds	r3, r3, r1
 8002262:	19db      	adds	r3, r3, r7
 8002264:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8002266:	183b      	adds	r3, r7, r0
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	0c1b      	lsrs	r3, r3, #16
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4b33      	ldr	r3, [pc, #204]	; (800233c <weoShowFullScreen+0x120>)
 8002270:	185b      	adds	r3, r3, r1
 8002272:	19db      	adds	r3, r3, r7
 8002274:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8002276:	183b      	adds	r3, r7, r0
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	0e1b      	lsrs	r3, r3, #24
 800227c:	b2da      	uxtb	r2, r3
 800227e:	4b2f      	ldr	r3, [pc, #188]	; (800233c <weoShowFullScreen+0x120>)
 8002280:	185b      	adds	r3, r3, r1
 8002282:	19db      	adds	r3, r3, r7
 8002284:	70da      	strb	r2, [r3, #3]

		GPIOB->ODR &= ~(1 << 9); //reset cs
 8002286:	4b2e      	ldr	r3, [pc, #184]	; (8002340 <weoShowFullScreen+0x124>)
 8002288:	695a      	ldr	r2, [r3, #20]
 800228a:	4b2d      	ldr	r3, [pc, #180]	; (8002340 <weoShowFullScreen+0x124>)
 800228c:	492d      	ldr	r1, [pc, #180]	; (8002344 <weoShowFullScreen+0x128>)
 800228e:	400a      	ands	r2, r1
 8002290:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8002292:	1939      	adds	r1, r7, r4
 8002294:	482c      	ldr	r0, [pc, #176]	; (8002348 <weoShowFullScreen+0x12c>)
 8002296:	2332      	movs	r3, #50	; 0x32
 8002298:	2201      	movs	r2, #1
 800229a:	f007 f8bf 	bl	800941c <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 800229e:	2408      	movs	r4, #8
 80022a0:	193b      	adds	r3, r7, r4
 80022a2:	1cd9      	adds	r1, r3, #3
 80022a4:	4828      	ldr	r0, [pc, #160]	; (8002348 <weoShowFullScreen+0x12c>)
 80022a6:	2332      	movs	r3, #50	; 0x32
 80022a8:	2201      	movs	r2, #1
 80022aa:	f007 f8b7 	bl	800941c <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 80022ae:	193b      	adds	r3, r7, r4
 80022b0:	1c99      	adds	r1, r3, #2
 80022b2:	4825      	ldr	r0, [pc, #148]	; (8002348 <weoShowFullScreen+0x12c>)
 80022b4:	2332      	movs	r3, #50	; 0x32
 80022b6:	2201      	movs	r2, #1
 80022b8:	f007 f8b0 	bl	800941c <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 80022bc:	193b      	adds	r3, r7, r4
 80022be:	1c59      	adds	r1, r3, #1
 80022c0:	4821      	ldr	r0, [pc, #132]	; (8002348 <weoShowFullScreen+0x12c>)
 80022c2:	2332      	movs	r3, #50	; 0x32
 80022c4:	2201      	movs	r2, #1
 80022c6:	f007 f8a9 	bl	800941c <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 80022ca:	1939      	adds	r1, r7, r4
 80022cc:	481e      	ldr	r0, [pc, #120]	; (8002348 <weoShowFullScreen+0x12c>)
 80022ce:	2332      	movs	r3, #50	; 0x32
 80022d0:	2201      	movs	r2, #1
 80022d2:	f007 f8a3 	bl	800941c <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,8192, 5000);
 80022d6:	4c1d      	ldr	r4, [pc, #116]	; (800234c <weoShowFullScreen+0x130>)
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	019a      	lsls	r2, r3, #6
 80022dc:	2510      	movs	r5, #16
 80022de:	1979      	adds	r1, r7, r5
 80022e0:	4819      	ldr	r0, [pc, #100]	; (8002348 <weoShowFullScreen+0x12c>)
 80022e2:	0023      	movs	r3, r4
 80022e4:	f007 f9f2 	bl	80096cc <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9; // set cs
 80022e8:	4b15      	ldr	r3, [pc, #84]	; (8002340 <weoShowFullScreen+0x124>)
 80022ea:	695a      	ldr	r2, [r3, #20]
 80022ec:	4b14      	ldr	r3, [pc, #80]	; (8002340 <weoShowFullScreen+0x124>)
 80022ee:	2180      	movs	r1, #128	; 0x80
 80022f0:	0089      	lsls	r1, r1, #2
 80022f2:	430a      	orrs	r2, r1
 80022f4:	615a      	str	r2, [r3, #20]

		weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, MEM_Buffer); // Здесь ещё работает
 80022f6:	197b      	adds	r3, r7, r5
 80022f8:	9301      	str	r3, [sp, #4]
 80022fa:	23ff      	movs	r3, #255	; 0xff
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	237f      	movs	r3, #127	; 0x7f
 8002300:	227f      	movs	r2, #127	; 0x7f
 8002302:	2100      	movs	r1, #0
 8002304:	2000      	movs	r0, #0
 8002306:	f7ff f90f 	bl	8001528 <weoDrawRectangleFilled>
		cmd2Execute=0;
 800230a:	4b11      	ldr	r3, [pc, #68]	; (8002350 <weoShowFullScreen+0x134>)
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
//		while(BFEN==0){};
		GPIOC->ODR |= 1 << 6;	//set BF
 8002310:	4b10      	ldr	r3, [pc, #64]	; (8002354 <weoShowFullScreen+0x138>)
 8002312:	695a      	ldr	r2, [r3, #20]
 8002314:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <weoShowFullScreen+0x138>)
 8002316:	2140      	movs	r1, #64	; 0x40
 8002318:	430a      	orrs	r2, r1
 800231a:	615a      	str	r2, [r3, #20]
	}
 800231c:	46c0      	nop			; (mov r8, r8)
 800231e:	0018      	movs	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	4b03      	ldr	r3, [pc, #12]	; (8002330 <weoShowFullScreen+0x114>)
 8002324:	449d      	add	sp, r3
 8002326:	bdb0      	pop	{r4, r5, r7, pc}
 8002328:	ffffdfe0 	.word	0xffffdfe0
 800232c:	ffffdfef 	.word	0xffffdfef
 8002330:	00002018 	.word	0x00002018
 8002334:	00002013 	.word	0x00002013
 8002338:	00002014 	.word	0x00002014
 800233c:	ffffdff0 	.word	0xffffdff0
 8002340:	50000400 	.word	0x50000400
 8002344:	fffffdff 	.word	0xfffffdff
 8002348:	200001a0 	.word	0x200001a0
 800234c:	00001388 	.word	0x00001388
 8002350:	20000426 	.word	0x20000426
 8002354:	50000800 	.word	0x50000800

08002358 <weoShowSmallImage>:
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
	}
//==========================================================================================================================
	uint8_t weoShowSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 8002358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800235a:	4c9f      	ldr	r4, [pc, #636]	; (80025d8 <weoShowSmallImage+0x280>)
 800235c:	44a5      	add	sp, r4
 800235e:	af02      	add	r7, sp, #8
 8002360:	0004      	movs	r4, r0
 8002362:	0008      	movs	r0, r1
 8002364:	0011      	movs	r1, r2
 8002366:	4b9d      	ldr	r3, [pc, #628]	; (80025dc <weoShowSmallImage+0x284>)
 8002368:	4d9d      	ldr	r5, [pc, #628]	; (80025e0 <weoShowSmallImage+0x288>)
 800236a:	195b      	adds	r3, r3, r5
 800236c:	19db      	adds	r3, r3, r7
 800236e:	1c22      	adds	r2, r4, #0
 8002370:	701a      	strb	r2, [r3, #0]
 8002372:	4b9c      	ldr	r3, [pc, #624]	; (80025e4 <weoShowSmallImage+0x28c>)
 8002374:	002c      	movs	r4, r5
 8002376:	191b      	adds	r3, r3, r4
 8002378:	19db      	adds	r3, r3, r7
 800237a:	1c02      	adds	r2, r0, #0
 800237c:	701a      	strb	r2, [r3, #0]
 800237e:	4b9a      	ldr	r3, [pc, #616]	; (80025e8 <weoShowSmallImage+0x290>)
 8002380:	0020      	movs	r0, r4
 8002382:	181b      	adds	r3, r3, r0
 8002384:	19db      	adds	r3, r3, r7
 8002386:	1c0a      	adds	r2, r1, #0
 8002388:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192];
		uint8_t imInfo[2],addrArray[4];
		uint16_t i;
		uint32_t addr,addrData;
		addr=0x00000000;
 800238a:	2300      	movs	r3, #0
 800238c:	4c97      	ldr	r4, [pc, #604]	; (80025ec <weoShowSmallImage+0x294>)
 800238e:	193a      	adds	r2, r7, r4
 8002390:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 8002392:	4d97      	ldr	r5, [pc, #604]	; (80025f0 <weoShowSmallImage+0x298>)
 8002394:	197b      	adds	r3, r7, r5
 8002396:	2213      	movs	r2, #19
 8002398:	701a      	strb	r2, [r3, #0]
		//look at info about image
		addr=(picNum*0x2000)+0x200000;// the right path is to multiply picNum * image repeat period!
 800239a:	4b90      	ldr	r3, [pc, #576]	; (80025dc <weoShowSmallImage+0x284>)
 800239c:	0001      	movs	r1, r0
 800239e:	185b      	adds	r3, r3, r1
 80023a0:	19db      	adds	r3, r3, r7
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	3301      	adds	r3, #1
 80023a6:	33ff      	adds	r3, #255	; 0xff
 80023a8:	035b      	lsls	r3, r3, #13
 80023aa:	0026      	movs	r6, r4
 80023ac:	19ba      	adds	r2, r7, r6
 80023ae:	6013      	str	r3, [r2, #0]
//		addr=(picNum*0x2000);

		addrArray[0]=addr & 0xFF;
 80023b0:	19bb      	adds	r3, r7, r6
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4b8f      	ldr	r3, [pc, #572]	; (80025f4 <weoShowSmallImage+0x29c>)
 80023b8:	000c      	movs	r4, r1
 80023ba:	191b      	adds	r3, r3, r4
 80023bc:	19db      	adds	r3, r3, r7
 80023be:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 80023c0:	19bb      	adds	r3, r7, r6
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	0a1b      	lsrs	r3, r3, #8
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	4b8a      	ldr	r3, [pc, #552]	; (80025f4 <weoShowSmallImage+0x29c>)
 80023ca:	191b      	adds	r3, r3, r4
 80023cc:	19db      	adds	r3, r3, r7
 80023ce:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 80023d0:	19bb      	adds	r3, r7, r6
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	0c1b      	lsrs	r3, r3, #16
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	4b86      	ldr	r3, [pc, #536]	; (80025f4 <weoShowSmallImage+0x29c>)
 80023da:	191b      	adds	r3, r3, r4
 80023dc:	19db      	adds	r3, r3, r7
 80023de:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 80023e0:	19bb      	adds	r3, r7, r6
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	0e1b      	lsrs	r3, r3, #24
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	4b82      	ldr	r3, [pc, #520]	; (80025f4 <weoShowSmallImage+0x29c>)
 80023ea:	191b      	adds	r3, r3, r4
 80023ec:	19db      	adds	r3, r3, r7
 80023ee:	70da      	strb	r2, [r3, #3]

		GPIOB->ODR &= ~(1 << 9); //reset cs
 80023f0:	4b81      	ldr	r3, [pc, #516]	; (80025f8 <weoShowSmallImage+0x2a0>)
 80023f2:	695a      	ldr	r2, [r3, #20]
 80023f4:	4b80      	ldr	r3, [pc, #512]	; (80025f8 <weoShowSmallImage+0x2a0>)
 80023f6:	4981      	ldr	r1, [pc, #516]	; (80025fc <weoShowSmallImage+0x2a4>)
 80023f8:	400a      	ands	r2, r1
 80023fa:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 80023fc:	1979      	adds	r1, r7, r5
 80023fe:	4880      	ldr	r0, [pc, #512]	; (8002600 <weoShowSmallImage+0x2a8>)
 8002400:	2332      	movs	r3, #50	; 0x32
 8002402:	2201      	movs	r2, #1
 8002404:	f007 f80a 	bl	800941c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8002408:	2508      	movs	r5, #8
 800240a:	197b      	adds	r3, r7, r5
 800240c:	1cd9      	adds	r1, r3, #3
 800240e:	487c      	ldr	r0, [pc, #496]	; (8002600 <weoShowSmallImage+0x2a8>)
 8002410:	2332      	movs	r3, #50	; 0x32
 8002412:	2201      	movs	r2, #1
 8002414:	f007 f802 	bl	800941c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8002418:	197b      	adds	r3, r7, r5
 800241a:	1c99      	adds	r1, r3, #2
 800241c:	4878      	ldr	r0, [pc, #480]	; (8002600 <weoShowSmallImage+0x2a8>)
 800241e:	2332      	movs	r3, #50	; 0x32
 8002420:	2201      	movs	r2, #1
 8002422:	f006 fffb 	bl	800941c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8002426:	197b      	adds	r3, r7, r5
 8002428:	1c59      	adds	r1, r3, #1
 800242a:	4875      	ldr	r0, [pc, #468]	; (8002600 <weoShowSmallImage+0x2a8>)
 800242c:	2332      	movs	r3, #50	; 0x32
 800242e:	2201      	movs	r2, #1
 8002430:	f006 fff4 	bl	800941c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8002434:	1979      	adds	r1, r7, r5
 8002436:	4872      	ldr	r0, [pc, #456]	; (8002600 <weoShowSmallImage+0x2a8>)
 8002438:	2332      	movs	r3, #50	; 0x32
 800243a:	2201      	movs	r2, #1
 800243c:	f006 ffee 	bl	800941c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 8002440:	4b70      	ldr	r3, [pc, #448]	; (8002604 <weoShowSmallImage+0x2ac>)
 8002442:	220c      	movs	r2, #12
 8002444:	18b9      	adds	r1, r7, r2
 8002446:	486e      	ldr	r0, [pc, #440]	; (8002600 <weoShowSmallImage+0x2a8>)
 8002448:	2202      	movs	r2, #2
 800244a:	f007 f93f 	bl	80096cc <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9; // set cs
 800244e:	4b6a      	ldr	r3, [pc, #424]	; (80025f8 <weoShowSmallImage+0x2a0>)
 8002450:	695a      	ldr	r2, [r3, #20]
 8002452:	4b69      	ldr	r3, [pc, #420]	; (80025f8 <weoShowSmallImage+0x2a0>)
 8002454:	2180      	movs	r1, #128	; 0x80
 8002456:	0089      	lsls	r1, r1, #2
 8002458:	430a      	orrs	r2, r1
 800245a:	615a      	str	r2, [r3, #20]

		width=imInfo[0];
 800245c:	4b6a      	ldr	r3, [pc, #424]	; (8002608 <weoShowSmallImage+0x2b0>)
 800245e:	0018      	movs	r0, r3
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	4a6a      	ldr	r2, [pc, #424]	; (800260c <weoShowSmallImage+0x2b4>)
 8002464:	0021      	movs	r1, r4
 8002466:	1852      	adds	r2, r2, r1
 8002468:	19d2      	adds	r2, r2, r7
 800246a:	7812      	ldrb	r2, [r2, #0]
 800246c:	701a      	strb	r2, [r3, #0]
		height=imInfo[1];
 800246e:	4c68      	ldr	r4, [pc, #416]	; (8002610 <weoShowSmallImage+0x2b8>)
 8002470:	193b      	adds	r3, r7, r4
 8002472:	4a66      	ldr	r2, [pc, #408]	; (800260c <weoShowSmallImage+0x2b4>)
 8002474:	1852      	adds	r2, r2, r1
 8002476:	19d2      	adds	r2, r2, r7
 8002478:	7852      	ldrb	r2, [r2, #1]
 800247a:	701a      	strb	r2, [r3, #0]
//		len=(width*(height/2));

//		if(width % 2 !=0){
//			width-=0x01;
//		}
		len=((width+0)*((height)/2));
 800247c:	0003      	movs	r3, r0
 800247e:	18fb      	adds	r3, r7, r3
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	b29b      	uxth	r3, r3
 8002484:	193a      	adds	r2, r7, r4
 8002486:	7812      	ldrb	r2, [r2, #0]
 8002488:	0852      	lsrs	r2, r2, #1
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	b292      	uxth	r2, r2
 800248e:	4353      	muls	r3, r2
 8002490:	b29a      	uxth	r2, r3
 8002492:	4b60      	ldr	r3, [pc, #384]	; (8002614 <weoShowSmallImage+0x2bc>)
 8002494:	801a      	strh	r2, [r3, #0]

		addrData=addr+0x02;
 8002496:	19ba      	adds	r2, r7, r6
 8002498:	6813      	ldr	r3, [r2, #0]
 800249a:	3302      	adds	r3, #2
 800249c:	485e      	ldr	r0, [pc, #376]	; (8002618 <weoShowSmallImage+0x2c0>)
 800249e:	183a      	adds	r2, r7, r0
 80024a0:	6013      	str	r3, [r2, #0]
		addrArray[0]=addrData & 0xFF;
 80024a2:	183a      	adds	r2, r7, r0
 80024a4:	6813      	ldr	r3, [r2, #0]
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	4b52      	ldr	r3, [pc, #328]	; (80025f4 <weoShowSmallImage+0x29c>)
 80024aa:	000c      	movs	r4, r1
 80024ac:	1919      	adds	r1, r3, r4
 80024ae:	19cb      	adds	r3, r1, r7
 80024b0:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addrData >> 8) & 0xFF;
 80024b2:	0001      	movs	r1, r0
 80024b4:	187a      	adds	r2, r7, r1
 80024b6:	6813      	ldr	r3, [r2, #0]
 80024b8:	0a1b      	lsrs	r3, r3, #8
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	4b4d      	ldr	r3, [pc, #308]	; (80025f4 <weoShowSmallImage+0x29c>)
 80024be:	191e      	adds	r6, r3, r4
 80024c0:	19f3      	adds	r3, r6, r7
 80024c2:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addrData >> 16) & 0xFF;
 80024c4:	187a      	adds	r2, r7, r1
 80024c6:	6813      	ldr	r3, [r2, #0]
 80024c8:	0c1b      	lsrs	r3, r3, #16
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	4b49      	ldr	r3, [pc, #292]	; (80025f4 <weoShowSmallImage+0x29c>)
 80024ce:	191e      	adds	r6, r3, r4
 80024d0:	19f3      	adds	r3, r6, r7
 80024d2:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addrData >> 24) & 0xFF;
 80024d4:	187a      	adds	r2, r7, r1
 80024d6:	6813      	ldr	r3, [r2, #0]
 80024d8:	0e1b      	lsrs	r3, r3, #24
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	4b45      	ldr	r3, [pc, #276]	; (80025f4 <weoShowSmallImage+0x29c>)
 80024de:	1919      	adds	r1, r3, r4
 80024e0:	19cb      	adds	r3, r1, r7
 80024e2:	70da      	strb	r2, [r3, #3]

		USART2->ICR|=USART_ICR_ORECF;
 80024e4:	4b4d      	ldr	r3, [pc, #308]	; (800261c <weoShowSmallImage+0x2c4>)
 80024e6:	6a1a      	ldr	r2, [r3, #32]
 80024e8:	4b4c      	ldr	r3, [pc, #304]	; (800261c <weoShowSmallImage+0x2c4>)
 80024ea:	2108      	movs	r1, #8
 80024ec:	430a      	orrs	r2, r1
 80024ee:	621a      	str	r2, [r3, #32]
		memCMD = 0x13; //read command with 4-byte address
 80024f0:	483f      	ldr	r0, [pc, #252]	; (80025f0 <weoShowSmallImage+0x298>)
 80024f2:	183b      	adds	r3, r7, r0
 80024f4:	2213      	movs	r2, #19
 80024f6:	701a      	strb	r2, [r3, #0]

		GPIOB->ODR &= ~(1 <<9);	//reset cs
 80024f8:	4b3f      	ldr	r3, [pc, #252]	; (80025f8 <weoShowSmallImage+0x2a0>)
 80024fa:	695a      	ldr	r2, [r3, #20]
 80024fc:	4b3e      	ldr	r3, [pc, #248]	; (80025f8 <weoShowSmallImage+0x2a0>)
 80024fe:	493f      	ldr	r1, [pc, #252]	; (80025fc <weoShowSmallImage+0x2a4>)
 8002500:	400a      	ands	r2, r1
 8002502:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 8002504:	1839      	adds	r1, r7, r0
 8002506:	483e      	ldr	r0, [pc, #248]	; (8002600 <weoShowSmallImage+0x2a8>)
 8002508:	2332      	movs	r3, #50	; 0x32
 800250a:	2201      	movs	r2, #1
 800250c:	f006 ff86 	bl	800941c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 8002510:	197b      	adds	r3, r7, r5
 8002512:	1cd9      	adds	r1, r3, #3
 8002514:	483a      	ldr	r0, [pc, #232]	; (8002600 <weoShowSmallImage+0x2a8>)
 8002516:	2332      	movs	r3, #50	; 0x32
 8002518:	2201      	movs	r2, #1
 800251a:	f006 ff7f 	bl	800941c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 800251e:	197b      	adds	r3, r7, r5
 8002520:	1c99      	adds	r1, r3, #2
 8002522:	4837      	ldr	r0, [pc, #220]	; (8002600 <weoShowSmallImage+0x2a8>)
 8002524:	2332      	movs	r3, #50	; 0x32
 8002526:	2201      	movs	r2, #1
 8002528:	f006 ff78 	bl	800941c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 800252c:	197b      	adds	r3, r7, r5
 800252e:	1c59      	adds	r1, r3, #1
 8002530:	4833      	ldr	r0, [pc, #204]	; (8002600 <weoShowSmallImage+0x2a8>)
 8002532:	2332      	movs	r3, #50	; 0x32
 8002534:	2201      	movs	r2, #1
 8002536:	f006 ff71 	bl	800941c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 800253a:	1979      	adds	r1, r7, r5
 800253c:	4830      	ldr	r0, [pc, #192]	; (8002600 <weoShowSmallImage+0x2a8>)
 800253e:	2332      	movs	r3, #50	; 0x32
 8002540:	2201      	movs	r2, #1
 8002542:	f006 ff6b 	bl	800941c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 8002546:	4b33      	ldr	r3, [pc, #204]	; (8002614 <weoShowSmallImage+0x2bc>)
 8002548:	881a      	ldrh	r2, [r3, #0]
 800254a:	4b2e      	ldr	r3, [pc, #184]	; (8002604 <weoShowSmallImage+0x2ac>)
 800254c:	2510      	movs	r5, #16
 800254e:	1979      	adds	r1, r7, r5
 8002550:	482b      	ldr	r0, [pc, #172]	; (8002600 <weoShowSmallImage+0x2a8>)
 8002552:	f007 f8bb 	bl	80096cc <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9;	// set cs
 8002556:	4b28      	ldr	r3, [pc, #160]	; (80025f8 <weoShowSmallImage+0x2a0>)
 8002558:	695a      	ldr	r2, [r3, #20]
 800255a:	4b27      	ldr	r3, [pc, #156]	; (80025f8 <weoShowSmallImage+0x2a0>)
 800255c:	2180      	movs	r1, #128	; 0x80
 800255e:	0089      	lsls	r1, r1, #2
 8002560:	430a      	orrs	r2, r1
 8002562:	615a      	str	r2, [r3, #20]

		decY=1;
 8002564:	4b2e      	ldr	r3, [pc, #184]	; (8002620 <weoShowSmallImage+0x2c8>)
 8002566:	2201      	movs	r2, #1
 8002568:	701a      	strb	r2, [r3, #0]
//			decY=2;
//		}
//		imX = 0;
//		imY = 0;
//		weoDrawRectangleFilled(imX, imY, imX+width-1, imY+height-decY, 0xFF,MEM_Buffer);//classic	// Здесь ещё работает 0xFF - затычка
		weoDrawRectangleFilled(imX, imY, imX + width-1, (imY + height-1), 0xFF, MEM_Buffer);
 800256a:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <weoShowSmallImage+0x28c>)
 800256c:	0021      	movs	r1, r4
 800256e:	185a      	adds	r2, r3, r1
 8002570:	19d2      	adds	r2, r2, r7
 8002572:	4b25      	ldr	r3, [pc, #148]	; (8002608 <weoShowSmallImage+0x2b0>)
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	7812      	ldrb	r2, [r2, #0]
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	18d3      	adds	r3, r2, r3
 800257c:	b2db      	uxtb	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b2dc      	uxtb	r4, r3
 8002582:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <weoShowSmallImage+0x290>)
 8002584:	185a      	adds	r2, r3, r1
 8002586:	19d2      	adds	r2, r2, r7
 8002588:	4b21      	ldr	r3, [pc, #132]	; (8002610 <weoShowSmallImage+0x2b8>)
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	7812      	ldrb	r2, [r2, #0]
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	18d3      	adds	r3, r2, r3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	3b01      	subs	r3, #1
 8002596:	b2da      	uxtb	r2, r3
 8002598:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <weoShowSmallImage+0x290>)
 800259a:	0008      	movs	r0, r1
 800259c:	185b      	adds	r3, r3, r1
 800259e:	19db      	adds	r3, r3, r7
 80025a0:	7819      	ldrb	r1, [r3, #0]
 80025a2:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <weoShowSmallImage+0x28c>)
 80025a4:	181b      	adds	r3, r3, r0
 80025a6:	19db      	adds	r3, r3, r7
 80025a8:	7818      	ldrb	r0, [r3, #0]
 80025aa:	197b      	adds	r3, r7, r5
 80025ac:	9301      	str	r3, [sp, #4]
 80025ae:	23ff      	movs	r3, #255	; 0xff
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	0013      	movs	r3, r2
 80025b4:	0022      	movs	r2, r4
 80025b6:	f7fe ffb7 	bl	8001528 <weoDrawRectangleFilled>
		cmd2Execute=0;
 80025ba:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <weoShowSmallImage+0x2cc>)
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]
//		while(BFEN==0){};
		GPIOC->ODR |= 1 << 6;	//set BF
 80025c0:	4b19      	ldr	r3, [pc, #100]	; (8002628 <weoShowSmallImage+0x2d0>)
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	4b18      	ldr	r3, [pc, #96]	; (8002628 <weoShowSmallImage+0x2d0>)
 80025c6:	2140      	movs	r1, #64	; 0x40
 80025c8:	430a      	orrs	r2, r1
 80025ca:	615a      	str	r2, [r3, #20]
	}
 80025cc:	46c0      	nop			; (mov r8, r8)
 80025ce:	0018      	movs	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	4b16      	ldr	r3, [pc, #88]	; (800262c <weoShowSmallImage+0x2d4>)
 80025d4:	449d      	add	sp, r3
 80025d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025d8:	ffffdfd4 	.word	0xffffdfd4
 80025dc:	ffffdfe7 	.word	0xffffdfe7
 80025e0:	00002020 	.word	0x00002020
 80025e4:	ffffdfe6 	.word	0xffffdfe6
 80025e8:	ffffdfe5 	.word	0xffffdfe5
 80025ec:	0000201c 	.word	0x0000201c
 80025f0:	00002013 	.word	0x00002013
 80025f4:	ffffdfe8 	.word	0xffffdfe8
 80025f8:	50000400 	.word	0x50000400
 80025fc:	fffffdff 	.word	0xfffffdff
 8002600:	200001a0 	.word	0x200001a0
 8002604:	00001388 	.word	0x00001388
 8002608:	0000201b 	.word	0x0000201b
 800260c:	ffffdfec 	.word	0xffffdfec
 8002610:	0000201a 	.word	0x0000201a
 8002614:	2000042a 	.word	0x2000042a
 8002618:	00002014 	.word	0x00002014
 800261c:	40004400 	.word	0x40004400
 8002620:	20000430 	.word	0x20000430
 8002624:	20000426 	.word	0x20000426
 8002628:	50000800 	.word	0x50000800
 800262c:	00002024 	.word	0x00002024

08002630 <soundLoad>:
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	uint8_t soundLoad(uint8_t soundNum) {
 8002630:	b5b0      	push	{r4, r5, r7, lr}
 8002632:	4ce0      	ldr	r4, [pc, #896]	; (80029b4 <soundLoad+0x384>)
 8002634:	44a5      	add	sp, r4
 8002636:	af00      	add	r7, sp, #0
 8002638:	0002      	movs	r2, r0
 800263a:	4bdf      	ldr	r3, [pc, #892]	; (80029b8 <soundLoad+0x388>)
 800263c:	49df      	ldr	r1, [pc, #892]	; (80029bc <soundLoad+0x38c>)
 800263e:	185b      	adds	r3, r3, r1
 8002640:	19db      	adds	r3, r3, r7
 8002642:	701a      	strb	r2, [r3, #0]
			uint8_t memCMD,addr_l,addr_L,addr_h,addr_H;
			uint8_t MEM_Buffer[8192], soundInfo[9],addrINFO[4],addr[4],length[4], addrSound;
			uint16_t i;
			uint32_t addrInfo,firstImAddr;
			memCMD = 0x13; //read command with 4-byte address
 8002644:	48de      	ldr	r0, [pc, #888]	; (80029c0 <soundLoad+0x390>)
 8002646:	183b      	adds	r3, r7, r0
 8002648:	2213      	movs	r2, #19
 800264a:	701a      	strb	r2, [r3, #0]

			if (curBuf == 0){
 800264c:	4bdd      	ldr	r3, [pc, #884]	; (80029c4 <soundLoad+0x394>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d000      	beq.n	8002656 <soundLoad+0x26>
 8002654:	e11b      	b.n	800288e <soundLoad+0x25e>
			address=startAddressForSoundInfo+(soundNum*0x09);
 8002656:	4bd8      	ldr	r3, [pc, #864]	; (80029b8 <soundLoad+0x388>)
 8002658:	185b      	adds	r3, r3, r1
 800265a:	19db      	adds	r3, r3, r7
 800265c:	781a      	ldrb	r2, [r3, #0]
 800265e:	0013      	movs	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	189b      	adds	r3, r3, r2
 8002664:	2280      	movs	r2, #128	; 0x80
 8002666:	03d2      	lsls	r2, r2, #15
 8002668:	4694      	mov	ip, r2
 800266a:	4463      	add	r3, ip
 800266c:	001a      	movs	r2, r3
 800266e:	4bd6      	ldr	r3, [pc, #856]	; (80029c8 <soundLoad+0x398>)
 8002670:	601a      	str	r2, [r3, #0]

			addrINFO[0]=address & 0xFF;
 8002672:	4bd5      	ldr	r3, [pc, #852]	; (80029c8 <soundLoad+0x398>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	b2da      	uxtb	r2, r3
 8002678:	4bd4      	ldr	r3, [pc, #848]	; (80029cc <soundLoad+0x39c>)
 800267a:	000c      	movs	r4, r1
 800267c:	191b      	adds	r3, r3, r4
 800267e:	19db      	adds	r3, r3, r7
 8002680:	701a      	strb	r2, [r3, #0]
			addrINFO[1]=(address >> 8) & 0xFF;
 8002682:	4bd1      	ldr	r3, [pc, #836]	; (80029c8 <soundLoad+0x398>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	0a1b      	lsrs	r3, r3, #8
 8002688:	b2da      	uxtb	r2, r3
 800268a:	4bd0      	ldr	r3, [pc, #832]	; (80029cc <soundLoad+0x39c>)
 800268c:	191b      	adds	r3, r3, r4
 800268e:	19db      	adds	r3, r3, r7
 8002690:	705a      	strb	r2, [r3, #1]
			addrINFO[2]=(address >> 16) & 0xFF;
 8002692:	4bcd      	ldr	r3, [pc, #820]	; (80029c8 <soundLoad+0x398>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	0c1b      	lsrs	r3, r3, #16
 8002698:	b2da      	uxtb	r2, r3
 800269a:	4bcc      	ldr	r3, [pc, #816]	; (80029cc <soundLoad+0x39c>)
 800269c:	191b      	adds	r3, r3, r4
 800269e:	19db      	adds	r3, r3, r7
 80026a0:	709a      	strb	r2, [r3, #2]
			addrINFO[3]=(address >> 24) & 0xFF;
 80026a2:	4bc9      	ldr	r3, [pc, #804]	; (80029c8 <soundLoad+0x398>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	0e1b      	lsrs	r3, r3, #24
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	4bc8      	ldr	r3, [pc, #800]	; (80029cc <soundLoad+0x39c>)
 80026ac:	191b      	adds	r3, r3, r4
 80026ae:	19db      	adds	r3, r3, r7
 80026b0:	70da      	strb	r2, [r3, #3]

			GPIOB->ODR &= ~(1 << 9); //reset cs
 80026b2:	4bc7      	ldr	r3, [pc, #796]	; (80029d0 <soundLoad+0x3a0>)
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	4bc6      	ldr	r3, [pc, #792]	; (80029d0 <soundLoad+0x3a0>)
 80026b8:	49c6      	ldr	r1, [pc, #792]	; (80029d4 <soundLoad+0x3a4>)
 80026ba:	400a      	ands	r2, r1
 80026bc:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 80026be:	1839      	adds	r1, r7, r0
 80026c0:	48c5      	ldr	r0, [pc, #788]	; (80029d8 <soundLoad+0x3a8>)
 80026c2:	2332      	movs	r3, #50	; 0x32
 80026c4:	2201      	movs	r2, #1
 80026c6:	f006 fea9 	bl	800941c <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrINFO[3], 1, 50); //send address
 80026ca:	2510      	movs	r5, #16
 80026cc:	197b      	adds	r3, r7, r5
 80026ce:	1cd9      	adds	r1, r3, #3
 80026d0:	48c1      	ldr	r0, [pc, #772]	; (80029d8 <soundLoad+0x3a8>)
 80026d2:	2332      	movs	r3, #50	; 0x32
 80026d4:	2201      	movs	r2, #1
 80026d6:	f006 fea1 	bl	800941c <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrINFO[2], 1, 50); //send address
 80026da:	197b      	adds	r3, r7, r5
 80026dc:	1c99      	adds	r1, r3, #2
 80026de:	48be      	ldr	r0, [pc, #760]	; (80029d8 <soundLoad+0x3a8>)
 80026e0:	2332      	movs	r3, #50	; 0x32
 80026e2:	2201      	movs	r2, #1
 80026e4:	f006 fe9a 	bl	800941c <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrINFO[1], 1, 50); //send address
 80026e8:	197b      	adds	r3, r7, r5
 80026ea:	1c59      	adds	r1, r3, #1
 80026ec:	48ba      	ldr	r0, [pc, #744]	; (80029d8 <soundLoad+0x3a8>)
 80026ee:	2332      	movs	r3, #50	; 0x32
 80026f0:	2201      	movs	r2, #1
 80026f2:	f006 fe93 	bl	800941c <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrINFO[0], 1, 50); //send address
 80026f6:	1979      	adds	r1, r7, r5
 80026f8:	48b7      	ldr	r0, [pc, #732]	; (80029d8 <soundLoad+0x3a8>)
 80026fa:	2332      	movs	r3, #50	; 0x32
 80026fc:	2201      	movs	r2, #1
 80026fe:	f006 fe8d 	bl	800941c <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi2, (uint8_t*) &soundInfo,9, 5000);//9 bits of soundInfo
 8002702:	4bb6      	ldr	r3, [pc, #728]	; (80029dc <soundLoad+0x3ac>)
 8002704:	2214      	movs	r2, #20
 8002706:	18b9      	adds	r1, r7, r2
 8002708:	48b3      	ldr	r0, [pc, #716]	; (80029d8 <soundLoad+0x3a8>)
 800270a:	2209      	movs	r2, #9
 800270c:	f006 ffde 	bl	80096cc <HAL_SPI_Receive>
			GPIOB->ODR |= 1 << 9; // set cs
 8002710:	4baf      	ldr	r3, [pc, #700]	; (80029d0 <soundLoad+0x3a0>)
 8002712:	695a      	ldr	r2, [r3, #20]
 8002714:	4bae      	ldr	r3, [pc, #696]	; (80029d0 <soundLoad+0x3a0>)
 8002716:	2180      	movs	r1, #128	; 0x80
 8002718:	0089      	lsls	r1, r1, #2
 800271a:	430a      	orrs	r2, r1
 800271c:	615a      	str	r2, [r3, #20]

			addr[0]=soundInfo[4];
 800271e:	4bb0      	ldr	r3, [pc, #704]	; (80029e0 <soundLoad+0x3b0>)
 8002720:	0020      	movs	r0, r4
 8002722:	181b      	adds	r3, r3, r0
 8002724:	19db      	adds	r3, r3, r7
 8002726:	791a      	ldrb	r2, [r3, #4]
 8002728:	4bae      	ldr	r3, [pc, #696]	; (80029e4 <soundLoad+0x3b4>)
 800272a:	181b      	adds	r3, r3, r0
 800272c:	19db      	adds	r3, r3, r7
 800272e:	701a      	strb	r2, [r3, #0]
			addr[1]=soundInfo[3];
 8002730:	4bab      	ldr	r3, [pc, #684]	; (80029e0 <soundLoad+0x3b0>)
 8002732:	181b      	adds	r3, r3, r0
 8002734:	19db      	adds	r3, r3, r7
 8002736:	78da      	ldrb	r2, [r3, #3]
 8002738:	4baa      	ldr	r3, [pc, #680]	; (80029e4 <soundLoad+0x3b4>)
 800273a:	181b      	adds	r3, r3, r0
 800273c:	19db      	adds	r3, r3, r7
 800273e:	705a      	strb	r2, [r3, #1]
			addr[2]=soundInfo[2];
 8002740:	4ba7      	ldr	r3, [pc, #668]	; (80029e0 <soundLoad+0x3b0>)
 8002742:	181b      	adds	r3, r3, r0
 8002744:	19db      	adds	r3, r3, r7
 8002746:	789a      	ldrb	r2, [r3, #2]
 8002748:	4ba6      	ldr	r3, [pc, #664]	; (80029e4 <soundLoad+0x3b4>)
 800274a:	181b      	adds	r3, r3, r0
 800274c:	19db      	adds	r3, r3, r7
 800274e:	709a      	strb	r2, [r3, #2]
			addr[3]=soundInfo[1];
 8002750:	4ba3      	ldr	r3, [pc, #652]	; (80029e0 <soundLoad+0x3b0>)
 8002752:	181b      	adds	r3, r3, r0
 8002754:	19db      	adds	r3, r3, r7
 8002756:	785a      	ldrb	r2, [r3, #1]
 8002758:	4ba2      	ldr	r3, [pc, #648]	; (80029e4 <soundLoad+0x3b4>)
 800275a:	181b      	adds	r3, r3, r0
 800275c:	19db      	adds	r3, r3, r7
 800275e:	70da      	strb	r2, [r3, #3]


			length[0]=soundInfo[8];
 8002760:	4b9f      	ldr	r3, [pc, #636]	; (80029e0 <soundLoad+0x3b0>)
 8002762:	181b      	adds	r3, r3, r0
 8002764:	19db      	adds	r3, r3, r7
 8002766:	7a1a      	ldrb	r2, [r3, #8]
 8002768:	4b9f      	ldr	r3, [pc, #636]	; (80029e8 <soundLoad+0x3b8>)
 800276a:	181b      	adds	r3, r3, r0
 800276c:	19db      	adds	r3, r3, r7
 800276e:	701a      	strb	r2, [r3, #0]
			length[1]=soundInfo[7];
 8002770:	4b9b      	ldr	r3, [pc, #620]	; (80029e0 <soundLoad+0x3b0>)
 8002772:	181b      	adds	r3, r3, r0
 8002774:	19db      	adds	r3, r3, r7
 8002776:	79da      	ldrb	r2, [r3, #7]
 8002778:	4b9b      	ldr	r3, [pc, #620]	; (80029e8 <soundLoad+0x3b8>)
 800277a:	181b      	adds	r3, r3, r0
 800277c:	19db      	adds	r3, r3, r7
 800277e:	705a      	strb	r2, [r3, #1]
			length[2]=soundInfo[6];
 8002780:	4b97      	ldr	r3, [pc, #604]	; (80029e0 <soundLoad+0x3b0>)
 8002782:	181b      	adds	r3, r3, r0
 8002784:	19db      	adds	r3, r3, r7
 8002786:	799a      	ldrb	r2, [r3, #6]
 8002788:	4b97      	ldr	r3, [pc, #604]	; (80029e8 <soundLoad+0x3b8>)
 800278a:	181b      	adds	r3, r3, r0
 800278c:	19db      	adds	r3, r3, r7
 800278e:	709a      	strb	r2, [r3, #2]
			length[3]=soundInfo[5];
 8002790:	4b93      	ldr	r3, [pc, #588]	; (80029e0 <soundLoad+0x3b0>)
 8002792:	181b      	adds	r3, r3, r0
 8002794:	19db      	adds	r3, r3, r7
 8002796:	795a      	ldrb	r2, [r3, #5]
 8002798:	4b93      	ldr	r3, [pc, #588]	; (80029e8 <soundLoad+0x3b8>)
 800279a:	181b      	adds	r3, r3, r0
 800279c:	19db      	adds	r3, r3, r7
 800279e:	70da      	strb	r2, [r3, #3]

			len|=length[3];
 80027a0:	4b91      	ldr	r3, [pc, #580]	; (80029e8 <soundLoad+0x3b8>)
 80027a2:	181b      	adds	r3, r3, r0
 80027a4:	19db      	adds	r3, r3, r7
 80027a6:	78db      	ldrb	r3, [r3, #3]
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	4b90      	ldr	r3, [pc, #576]	; (80029ec <soundLoad+0x3bc>)
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	4b8e      	ldr	r3, [pc, #568]	; (80029ec <soundLoad+0x3bc>)
 80027b4:	801a      	strh	r2, [r3, #0]
			len<<=8;
 80027b6:	4b8d      	ldr	r3, [pc, #564]	; (80029ec <soundLoad+0x3bc>)
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	021b      	lsls	r3, r3, #8
 80027bc:	b29a      	uxth	r2, r3
 80027be:	4b8b      	ldr	r3, [pc, #556]	; (80029ec <soundLoad+0x3bc>)
 80027c0:	801a      	strh	r2, [r3, #0]
			len|=length[2];
 80027c2:	4b89      	ldr	r3, [pc, #548]	; (80029e8 <soundLoad+0x3b8>)
 80027c4:	181b      	adds	r3, r3, r0
 80027c6:	19db      	adds	r3, r3, r7
 80027c8:	789b      	ldrb	r3, [r3, #2]
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	4b87      	ldr	r3, [pc, #540]	; (80029ec <soundLoad+0x3bc>)
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	4b85      	ldr	r3, [pc, #532]	; (80029ec <soundLoad+0x3bc>)
 80027d6:	801a      	strh	r2, [r3, #0]
			len<<=8;
 80027d8:	4b84      	ldr	r3, [pc, #528]	; (80029ec <soundLoad+0x3bc>)
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	021b      	lsls	r3, r3, #8
 80027de:	b29a      	uxth	r2, r3
 80027e0:	4b82      	ldr	r3, [pc, #520]	; (80029ec <soundLoad+0x3bc>)
 80027e2:	801a      	strh	r2, [r3, #0]
			len|=length[1];
 80027e4:	4b80      	ldr	r3, [pc, #512]	; (80029e8 <soundLoad+0x3b8>)
 80027e6:	181b      	adds	r3, r3, r0
 80027e8:	19db      	adds	r3, r3, r7
 80027ea:	785b      	ldrb	r3, [r3, #1]
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	4b7f      	ldr	r3, [pc, #508]	; (80029ec <soundLoad+0x3bc>)
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	4b7d      	ldr	r3, [pc, #500]	; (80029ec <soundLoad+0x3bc>)
 80027f8:	801a      	strh	r2, [r3, #0]
			len<<=8;
 80027fa:	4b7c      	ldr	r3, [pc, #496]	; (80029ec <soundLoad+0x3bc>)
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	021b      	lsls	r3, r3, #8
 8002800:	b29a      	uxth	r2, r3
 8002802:	4b7a      	ldr	r3, [pc, #488]	; (80029ec <soundLoad+0x3bc>)
 8002804:	801a      	strh	r2, [r3, #0]
			len|=length[0];
 8002806:	4b78      	ldr	r3, [pc, #480]	; (80029e8 <soundLoad+0x3b8>)
 8002808:	181b      	adds	r3, r3, r0
 800280a:	19db      	adds	r3, r3, r7
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	b29a      	uxth	r2, r3
 8002810:	4b76      	ldr	r3, [pc, #472]	; (80029ec <soundLoad+0x3bc>)
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	4313      	orrs	r3, r2
 8002816:	b29a      	uxth	r2, r3
 8002818:	4b74      	ldr	r3, [pc, #464]	; (80029ec <soundLoad+0x3bc>)
 800281a:	801a      	strh	r2, [r3, #0]

			addrSound|=addr[3];
 800281c:	4b71      	ldr	r3, [pc, #452]	; (80029e4 <soundLoad+0x3b4>)
 800281e:	181b      	adds	r3, r3, r0
 8002820:	19db      	adds	r3, r3, r7
 8002822:	78d9      	ldrb	r1, [r3, #3]
 8002824:	4c72      	ldr	r4, [pc, #456]	; (80029f0 <soundLoad+0x3c0>)
 8002826:	193b      	adds	r3, r7, r4
 8002828:	193a      	adds	r2, r7, r4
 800282a:	7812      	ldrb	r2, [r2, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	701a      	strb	r2, [r3, #0]
			addrSound<<=8;
 8002830:	193b      	adds	r3, r7, r4
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]
			addrSound|=addr[2];
 8002836:	4b6b      	ldr	r3, [pc, #428]	; (80029e4 <soundLoad+0x3b4>)
 8002838:	181b      	adds	r3, r3, r0
 800283a:	19db      	adds	r3, r3, r7
 800283c:	7899      	ldrb	r1, [r3, #2]
 800283e:	193b      	adds	r3, r7, r4
 8002840:	193a      	adds	r2, r7, r4
 8002842:	7812      	ldrb	r2, [r2, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	701a      	strb	r2, [r3, #0]
			addrSound<<=8;
 8002848:	193b      	adds	r3, r7, r4
 800284a:	2200      	movs	r2, #0
 800284c:	701a      	strb	r2, [r3, #0]
			addrSound|=addr[1];
 800284e:	4b65      	ldr	r3, [pc, #404]	; (80029e4 <soundLoad+0x3b4>)
 8002850:	181b      	adds	r3, r3, r0
 8002852:	19db      	adds	r3, r3, r7
 8002854:	7859      	ldrb	r1, [r3, #1]
 8002856:	193b      	adds	r3, r7, r4
 8002858:	193a      	adds	r2, r7, r4
 800285a:	7812      	ldrb	r2, [r2, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	701a      	strb	r2, [r3, #0]
			addrSound<<=8;
 8002860:	193b      	adds	r3, r7, r4
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]
			addrSound|=addr[0];
 8002866:	4b5f      	ldr	r3, [pc, #380]	; (80029e4 <soundLoad+0x3b4>)
 8002868:	181b      	adds	r3, r3, r0
 800286a:	19db      	adds	r3, r3, r7
 800286c:	7819      	ldrb	r1, [r3, #0]
 800286e:	193b      	adds	r3, r7, r4
 8002870:	193a      	adds	r2, r7, r4
 8002872:	7812      	ldrb	r2, [r2, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	701a      	strb	r2, [r3, #0]

			soundLen = len;
 8002878:	4b5c      	ldr	r3, [pc, #368]	; (80029ec <soundLoad+0x3bc>)
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	001a      	movs	r2, r3
 800287e:	4b5d      	ldr	r3, [pc, #372]	; (80029f4 <soundLoad+0x3c4>)
 8002880:	601a      	str	r2, [r3, #0]
			bufCount = len / bufLen;
 8002882:	4b5a      	ldr	r3, [pc, #360]	; (80029ec <soundLoad+0x3bc>)
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	0a9b      	lsrs	r3, r3, #10
 8002888:	b29a      	uxth	r2, r3
 800288a:	4b5b      	ldr	r3, [pc, #364]	; (80029f8 <soundLoad+0x3c8>)
 800288c:	801a      	strh	r2, [r3, #0]
			}
//			if(curBuf == bufCount + 15){
//				return;
//			}
			addrSound += (bufLen * curBuf);
 800288e:	4858      	ldr	r0, [pc, #352]	; (80029f0 <soundLoad+0x3c0>)
 8002890:	183b      	adds	r3, r7, r0
 8002892:	183a      	adds	r2, r7, r0
 8002894:	7812      	ldrb	r2, [r2, #0]
 8002896:	701a      	strb	r2, [r3, #0]
			if (curBuf != 0){
 8002898:	4b4a      	ldr	r3, [pc, #296]	; (80029c4 <soundLoad+0x394>)
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d015      	beq.n	80028cc <soundLoad+0x29c>
			addr[0]=addrSound & 0xFF;
 80028a0:	4b50      	ldr	r3, [pc, #320]	; (80029e4 <soundLoad+0x3b4>)
 80028a2:	4946      	ldr	r1, [pc, #280]	; (80029bc <soundLoad+0x38c>)
 80028a4:	185b      	adds	r3, r3, r1
 80028a6:	19db      	adds	r3, r3, r7
 80028a8:	183a      	adds	r2, r7, r0
 80028aa:	7812      	ldrb	r2, [r2, #0]
 80028ac:	701a      	strb	r2, [r3, #0]
			addr[1]=(addrSound >> 8) & 0xFF;
 80028ae:	4b4d      	ldr	r3, [pc, #308]	; (80029e4 <soundLoad+0x3b4>)
 80028b0:	185b      	adds	r3, r3, r1
 80028b2:	19db      	adds	r3, r3, r7
 80028b4:	2200      	movs	r2, #0
 80028b6:	705a      	strb	r2, [r3, #1]
			addr[2]=(addrSound >> 16) & 0xFF;
 80028b8:	4b4a      	ldr	r3, [pc, #296]	; (80029e4 <soundLoad+0x3b4>)
 80028ba:	185b      	adds	r3, r3, r1
 80028bc:	19db      	adds	r3, r3, r7
 80028be:	2200      	movs	r2, #0
 80028c0:	709a      	strb	r2, [r3, #2]
			addr[3]=(addrSound >> 24) & 0xFF;
 80028c2:	4b48      	ldr	r3, [pc, #288]	; (80029e4 <soundLoad+0x3b4>)
 80028c4:	185b      	adds	r3, r3, r1
 80028c6:	19db      	adds	r3, r3, r7
 80028c8:	2200      	movs	r2, #0
 80028ca:	70da      	strb	r2, [r3, #3]
			}

//			if(soundReady == 0){
			GPIOB->ODR &= ~(1 << 9); //reset FLASH CS
 80028cc:	4b40      	ldr	r3, [pc, #256]	; (80029d0 <soundLoad+0x3a0>)
 80028ce:	695a      	ldr	r2, [r3, #20]
 80028d0:	4b3f      	ldr	r3, [pc, #252]	; (80029d0 <soundLoad+0x3a0>)
 80028d2:	4940      	ldr	r1, [pc, #256]	; (80029d4 <soundLoad+0x3a4>)
 80028d4:	400a      	ands	r2, r1
 80028d6:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 80028d8:	4b39      	ldr	r3, [pc, #228]	; (80029c0 <soundLoad+0x390>)
 80028da:	18f9      	adds	r1, r7, r3
 80028dc:	483e      	ldr	r0, [pc, #248]	; (80029d8 <soundLoad+0x3a8>)
 80028de:	2332      	movs	r3, #50	; 0x32
 80028e0:	2201      	movs	r2, #1
 80028e2:	f006 fd9b 	bl	800941c <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[3], 1, 50); //send address
 80028e6:	240c      	movs	r4, #12
 80028e8:	193b      	adds	r3, r7, r4
 80028ea:	1cd9      	adds	r1, r3, #3
 80028ec:	483a      	ldr	r0, [pc, #232]	; (80029d8 <soundLoad+0x3a8>)
 80028ee:	2332      	movs	r3, #50	; 0x32
 80028f0:	2201      	movs	r2, #1
 80028f2:	f006 fd93 	bl	800941c <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[2], 1, 50); //send address
 80028f6:	193b      	adds	r3, r7, r4
 80028f8:	1c99      	adds	r1, r3, #2
 80028fa:	4837      	ldr	r0, [pc, #220]	; (80029d8 <soundLoad+0x3a8>)
 80028fc:	2332      	movs	r3, #50	; 0x32
 80028fe:	2201      	movs	r2, #1
 8002900:	f006 fd8c 	bl	800941c <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[1], 1, 50); //send address
 8002904:	193b      	adds	r3, r7, r4
 8002906:	1c59      	adds	r1, r3, #1
 8002908:	4833      	ldr	r0, [pc, #204]	; (80029d8 <soundLoad+0x3a8>)
 800290a:	2332      	movs	r3, #50	; 0x32
 800290c:	2201      	movs	r2, #1
 800290e:	f006 fd85 	bl	800941c <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[0], 1, 50); //send address
 8002912:	1939      	adds	r1, r7, r4
 8002914:	4830      	ldr	r0, [pc, #192]	; (80029d8 <soundLoad+0x3a8>)
 8002916:	2332      	movs	r3, #50	; 0x32
 8002918:	2201      	movs	r2, #1
 800291a:	f006 fd7f 	bl	800941c <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi2, (uint8_t*)SOUND1, bufLen,5000);
 800291e:	4c2f      	ldr	r4, [pc, #188]	; (80029dc <soundLoad+0x3ac>)
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	00da      	lsls	r2, r3, #3
 8002924:	4935      	ldr	r1, [pc, #212]	; (80029fc <soundLoad+0x3cc>)
 8002926:	482c      	ldr	r0, [pc, #176]	; (80029d8 <soundLoad+0x3a8>)
 8002928:	0023      	movs	r3, r4
 800292a:	f006 fecf 	bl	80096cc <HAL_SPI_Receive>
//			GPIOB->ODR |= 1 << 9;	//set FLASH CS
			for (i = 0; i < bufLen; i++){
 800292e:	4b34      	ldr	r3, [pc, #208]	; (8002a00 <soundLoad+0x3d0>)
 8002930:	18fb      	adds	r3, r7, r3
 8002932:	2200      	movs	r2, #0
 8002934:	801a      	strh	r2, [r3, #0]
 8002936:	e00f      	b.n	8002958 <soundLoad+0x328>
				SOUND2[i] = SOUND1[i];
 8002938:	4831      	ldr	r0, [pc, #196]	; (8002a00 <soundLoad+0x3d0>)
 800293a:	183b      	adds	r3, r7, r0
 800293c:	8819      	ldrh	r1, [r3, #0]
 800293e:	183b      	adds	r3, r7, r0
 8002940:	881a      	ldrh	r2, [r3, #0]
 8002942:	4b2e      	ldr	r3, [pc, #184]	; (80029fc <soundLoad+0x3cc>)
 8002944:	0049      	lsls	r1, r1, #1
 8002946:	5ac9      	ldrh	r1, [r1, r3]
 8002948:	4b2e      	ldr	r3, [pc, #184]	; (8002a04 <soundLoad+0x3d4>)
 800294a:	0052      	lsls	r2, r2, #1
 800294c:	52d1      	strh	r1, [r2, r3]
			for (i = 0; i < bufLen; i++){
 800294e:	183b      	adds	r3, r7, r0
 8002950:	881a      	ldrh	r2, [r3, #0]
 8002952:	183b      	adds	r3, r7, r0
 8002954:	3201      	adds	r2, #1
 8002956:	801a      	strh	r2, [r3, #0]
 8002958:	4b29      	ldr	r3, [pc, #164]	; (8002a00 <soundLoad+0x3d0>)
 800295a:	18fb      	adds	r3, r7, r3
 800295c:	881a      	ldrh	r2, [r3, #0]
 800295e:	2380      	movs	r3, #128	; 0x80
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	429a      	cmp	r2, r3
 8002964:	d3e8      	bcc.n	8002938 <soundLoad+0x308>
			}
//			}
//			soundReady = 1;
			if (curBuf == 0){
 8002966:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <soundLoad+0x394>)
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d109      	bne.n	8002982 <soundLoad+0x352>
				HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)SOUND2, bufLen);
 800296e:	2380      	movs	r3, #128	; 0x80
 8002970:	00da      	lsls	r2, r3, #3
 8002972:	4924      	ldr	r1, [pc, #144]	; (8002a04 <soundLoad+0x3d4>)
 8002974:	4b24      	ldr	r3, [pc, #144]	; (8002a08 <soundLoad+0x3d8>)
 8002976:	0018      	movs	r0, r3
 8002978:	f005 f8aa 	bl	8007ad0 <HAL_I2S_Transmit_DMA>
				soundReady = 0;
 800297c:	4b23      	ldr	r3, [pc, #140]	; (8002a0c <soundLoad+0x3dc>)
 800297e:	2200      	movs	r2, #0
 8002980:	701a      	strb	r2, [r3, #0]
//				curBuf = 0;
			}
			while (!soundReady){}
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	4b21      	ldr	r3, [pc, #132]	; (8002a0c <soundLoad+0x3dc>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0fb      	beq.n	8002984 <soundLoad+0x354>
			if (curBuf != 0){
 800298c:	4b0d      	ldr	r3, [pc, #52]	; (80029c4 <soundLoad+0x394>)
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d009      	beq.n	80029a8 <soundLoad+0x378>
			HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)SOUND2, bufLen);
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	00da      	lsls	r2, r3, #3
 8002998:	491a      	ldr	r1, [pc, #104]	; (8002a04 <soundLoad+0x3d4>)
 800299a:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <soundLoad+0x3d8>)
 800299c:	0018      	movs	r0, r3
 800299e:	f005 f897 	bl	8007ad0 <HAL_I2S_Transmit_DMA>
			soundReady = 1;
 80029a2:	4b1a      	ldr	r3, [pc, #104]	; (8002a0c <soundLoad+0x3dc>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	701a      	strb	r2, [r3, #0]
//			curBuf = 0;
			}

//			HAL_Delay(500);
//			SoundPlay();
		}
 80029a8:	46c0      	nop			; (mov r8, r8)
 80029aa:	0018      	movs	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	4b03      	ldr	r3, [pc, #12]	; (80029bc <soundLoad+0x38c>)
 80029b0:	449d      	add	sp, r3
 80029b2:	bdb0      	pop	{r4, r5, r7, pc}
 80029b4:	ffffdfd8 	.word	0xffffdfd8
 80029b8:	ffffdfdf 	.word	0xffffdfdf
 80029bc:	00002028 	.word	0x00002028
 80029c0:	00002023 	.word	0x00002023
 80029c4:	20000434 	.word	0x20000434
 80029c8:	2000042c 	.word	0x2000042c
 80029cc:	ffffdfe8 	.word	0xffffdfe8
 80029d0:	50000400 	.word	0x50000400
 80029d4:	fffffdff 	.word	0xfffffdff
 80029d8:	200001a0 	.word	0x200001a0
 80029dc:	00001388 	.word	0x00001388
 80029e0:	ffffdfec 	.word	0xffffdfec
 80029e4:	ffffdfe4 	.word	0xffffdfe4
 80029e8:	ffffdfe0 	.word	0xffffdfe0
 80029ec:	2000042a 	.word	0x2000042a
 80029f0:	00002027 	.word	0x00002027
 80029f4:	20001438 	.word	0x20001438
 80029f8:	20000436 	.word	0x20000436
 80029fc:	20000438 	.word	0x20000438
 8002a00:	00002024 	.word	0x00002024
 8002a04:	20000c38 	.word	0x20000c38
 8002a08:	20000108 	.word	0x20000108
 8002a0c:	20000061 	.word	0x20000061

08002a10 <soundPlay>:
//=========================================================================================================================
	uint8_t soundPlay(uint8_t soundNum) {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	0002      	movs	r2, r0
 8002a18:	1dfb      	adds	r3, r7, #7
 8002a1a:	701a      	strb	r2, [r3, #0]
//		HAL_Delay(500);

//		HAL_Delay(500);
			I2C_SOUND_ChangePage(0x01);
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	f7fe fe69 	bl	80016f4 <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x01, 0x00);
 8002a22:	2100      	movs	r1, #0
 8002a24:	2001      	movs	r0, #1
 8002a26:	f7fe fe83 	bl	8001730 <WriteReg_I2C_SOUND>
			I2C_SOUND_ChangePage(0x00);
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f7fe fe62 	bl	80016f4 <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x41, 0x30);// 0x81 - 0x30 available
 8002a30:	2130      	movs	r1, #48	; 0x30
 8002a32:	2041      	movs	r0, #65	; 0x41
 8002a34:	f7fe fe7c 	bl	8001730 <WriteReg_I2C_SOUND>
		//	I2C_SOUND_ChangePage(0x00);
			I2C_SOUND_ChangePage(0x01);
 8002a38:	2001      	movs	r0, #1
 8002a3a:	f7fe fe5b 	bl	80016f4 <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 8002a3e:	2100      	movs	r1, #0
 8002a40:	2010      	movs	r0, #16
 8002a42:	f7fe fe75 	bl	8001730 <WriteReg_I2C_SOUND>
			WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 8002a46:	2124      	movs	r1, #36	; 0x24
 8002a48:	202e      	movs	r0, #46	; 0x2e
 8002a4a:	f7fe fe71 	bl	8001730 <WriteReg_I2C_SOUND>
			soundLoad(soundNum);
 8002a4e:	1dfb      	adds	r3, r7, #7
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	0018      	movs	r0, r3
 8002a54:	f7ff fdec 	bl	8002630 <soundLoad>
//			HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)SOUND, 16384/2); //HAL_MAX_DELAY

//			HAL_I2S_Transmit(&hi2s1, (uint16_t*)SOUND,4096,5000);
//		squeak_double(signal);
		}
 8002a58:	46c0      	nop			; (mov r8, r8)
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	b002      	add	sp, #8
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOB->ODR |= 1 << 9;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 8002a6a:	1d3b      	adds	r3, r7, #4
 8002a6c:	4a29      	ldr	r2, [pc, #164]	; (8002b14 <MEM_GetID+0xb0>)
 8002a6e:	7812      	ldrb	r2, [r2, #0]
 8002a70:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 8002a72:	1dfb      	adds	r3, r7, #7
 8002a74:	229e      	movs	r2, #158	; 0x9e
 8002a76:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 <<9);	//reset cs
 8002a78:	4b27      	ldr	r3, [pc, #156]	; (8002b18 <MEM_GetID+0xb4>)
 8002a7a:	695a      	ldr	r2, [r3, #20]
 8002a7c:	4b26      	ldr	r3, [pc, #152]	; (8002b18 <MEM_GetID+0xb4>)
 8002a7e:	4927      	ldr	r1, [pc, #156]	; (8002b1c <MEM_GetID+0xb8>)
 8002a80:	400a      	ands	r2, r1
 8002a82:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 8002a84:	1df9      	adds	r1, r7, #7
 8002a86:	4826      	ldr	r0, [pc, #152]	; (8002b20 <MEM_GetID+0xbc>)
 8002a88:	2332      	movs	r3, #50	; 0x32
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f006 fcc6 	bl	800941c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002a90:	23fa      	movs	r3, #250	; 0xfa
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	1d39      	adds	r1, r7, #4
 8002a96:	4822      	ldr	r0, [pc, #136]	; (8002b20 <MEM_GetID+0xbc>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f006 fe17 	bl	80096cc <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 8002a9e:	1d3b      	adds	r3, r7, #4
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	001a      	movs	r2, r3
 8002aa4:	4b1f      	ldr	r3, [pc, #124]	; (8002b24 <MEM_GetID+0xc0>)
 8002aa6:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 8002aa8:	4b1e      	ldr	r3, [pc, #120]	; (8002b24 <MEM_GetID+0xc0>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	021a      	lsls	r2, r3, #8
 8002aae:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <MEM_GetID+0xc0>)
 8002ab0:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002ab2:	23fa      	movs	r3, #250	; 0xfa
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	1d39      	adds	r1, r7, #4
 8002ab8:	4819      	ldr	r0, [pc, #100]	; (8002b20 <MEM_GetID+0xbc>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	f006 fe06 	bl	80096cc <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002ac0:	1d3b      	adds	r3, r7, #4
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	001a      	movs	r2, r3
 8002ac6:	4b17      	ldr	r3, [pc, #92]	; (8002b24 <MEM_GetID+0xc0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	18d2      	adds	r2, r2, r3
 8002acc:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <MEM_GetID+0xc0>)
 8002ace:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 8002ad0:	4b14      	ldr	r3, [pc, #80]	; (8002b24 <MEM_GetID+0xc0>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	021a      	lsls	r2, r3, #8
 8002ad6:	4b13      	ldr	r3, [pc, #76]	; (8002b24 <MEM_GetID+0xc0>)
 8002ad8:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002ada:	23fa      	movs	r3, #250	; 0xfa
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	1d39      	adds	r1, r7, #4
 8002ae0:	480f      	ldr	r0, [pc, #60]	; (8002b20 <MEM_GetID+0xbc>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f006 fdf2 	bl	80096cc <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002ae8:	1d3b      	adds	r3, r7, #4
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	001a      	movs	r2, r3
 8002aee:	4b0d      	ldr	r3, [pc, #52]	; (8002b24 <MEM_GetID+0xc0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	18d2      	adds	r2, r2, r3
 8002af4:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <MEM_GetID+0xc0>)
 8002af6:	601a      	str	r2, [r3, #0]
		GPIOB->ODR |= 1 << 9;                    			// set cs
 8002af8:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <MEM_GetID+0xb4>)
 8002afa:	695a      	ldr	r2, [r3, #20]
 8002afc:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <MEM_GetID+0xb4>)
 8002afe:	2180      	movs	r1, #128	; 0x80
 8002b00:	0089      	lsls	r1, r1, #2
 8002b02:	430a      	orrs	r2, r1
 8002b04:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 8002b06:	4b07      	ldr	r3, [pc, #28]	; (8002b24 <MEM_GetID+0xc0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
	}
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b002      	add	sp, #8
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	0800ca78 	.word	0x0800ca78
 8002b18:	50000400 	.word	0x50000400
 8002b1c:	fffffdff 	.word	0xfffffdff
 8002b20:	200001a0 	.word	0x200001a0
 8002b24:	200003ec 	.word	0x200003ec

08002b28 <cmdExecute>:
	uint16_t Scount(void){
		LIS3DHreadData();

	}
//====================================================================================================================
	uint8_t cmdExecute(uint8_t cmd2Execute){
 8002b28:	b590      	push	{r4, r7, lr}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af02      	add	r7, sp, #8
 8002b2e:	0002      	movs	r2, r0
 8002b30:	1dfb      	adds	r3, r7, #7
 8002b32:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8002b34:	4b76      	ldr	r3, [pc, #472]	; (8002d10 <cmdExecute+0x1e8>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b10      	cmp	r3, #16
 8002b3a:	d100      	bne.n	8002b3e <cmdExecute+0x16>
 8002b3c:	e0df      	b.n	8002cfe <cmdExecute+0x1d6>
		if(soundReady==0){return;}
 8002b3e:	4b75      	ldr	r3, [pc, #468]	; (8002d14 <cmdExecute+0x1ec>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d100      	bne.n	8002b48 <cmdExecute+0x20>
 8002b46:	e0dc      	b.n	8002d02 <cmdExecute+0x1da>
//		if(cmd[0]==00){return;}
		if (bf4me!=0x00){return;}	// protection against false BF resets
 8002b48:	4b73      	ldr	r3, [pc, #460]	; (8002d18 <cmdExecute+0x1f0>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d000      	beq.n	8002b52 <cmdExecute+0x2a>
 8002b50:	e0d9      	b.n	8002d06 <cmdExecute+0x1de>
		USART2->ICR|=USART_ICR_ORECF;
 8002b52:	4b72      	ldr	r3, [pc, #456]	; (8002d1c <cmdExecute+0x1f4>)
 8002b54:	6a1a      	ldr	r2, [r3, #32]
 8002b56:	4b71      	ldr	r3, [pc, #452]	; (8002d1c <cmdExecute+0x1f4>)
 8002b58:	2108      	movs	r1, #8
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	621a      	str	r2, [r3, #32]

				}
		if(cmd2Execute==0x10){

				}
		if(cmd2Execute==0x11){
 8002b5e:	1dfb      	adds	r3, r7, #7
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b11      	cmp	r3, #17
 8002b64:	d113      	bne.n	8002b8e <cmdExecute+0x66>
			GPIOC->ODR &=~ GPIO_ODR_OD6;
 8002b66:	4b6e      	ldr	r3, [pc, #440]	; (8002d20 <cmdExecute+0x1f8>)
 8002b68:	695a      	ldr	r2, [r3, #20]
 8002b6a:	4b6d      	ldr	r3, [pc, #436]	; (8002d20 <cmdExecute+0x1f8>)
 8002b6c:	2140      	movs	r1, #64	; 0x40
 8002b6e:	438a      	bics	r2, r1
 8002b70:	615a      	str	r2, [r3, #20]
			bf4me=0x11;	//set BF flag 4 me
 8002b72:	4b69      	ldr	r3, [pc, #420]	; (8002d18 <cmdExecute+0x1f0>)
 8002b74:	2211      	movs	r2, #17
 8002b76:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
			weoShowFullScreen(picNum);
 8002b78:	4b6a      	ldr	r3, [pc, #424]	; (8002d24 <cmdExecute+0x1fc>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f7ff fb4d 	bl	800221c <weoShowFullScreen>
//			weoShowFullScreenDMA(picNum);
			USART2->ICR|=USART_ICR_ORECF;
 8002b82:	4b66      	ldr	r3, [pc, #408]	; (8002d1c <cmdExecute+0x1f4>)
 8002b84:	6a1a      	ldr	r2, [r3, #32]
 8002b86:	4b65      	ldr	r3, [pc, #404]	; (8002d1c <cmdExecute+0x1f4>)
 8002b88:	2108      	movs	r1, #8
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	621a      	str	r2, [r3, #32]
				}
		if(cmd2Execute==0x12){
 8002b8e:	1dfb      	adds	r3, r7, #7
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b12      	cmp	r3, #18
 8002b94:	d10d      	bne.n	8002bb2 <cmdExecute+0x8a>
			bf4me=0x12;	//set BF flag 4 me
 8002b96:	4b60      	ldr	r3, [pc, #384]	; (8002d18 <cmdExecute+0x1f0>)
 8002b98:	2212      	movs	r2, #18
 8002b9a:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowSmallImageDMA(picNum,imX,imY);
			weoShowSmallImage(picNum,imX,imY);
 8002b9c:	4b61      	ldr	r3, [pc, #388]	; (8002d24 <cmdExecute+0x1fc>)
 8002b9e:	7818      	ldrb	r0, [r3, #0]
 8002ba0:	4b61      	ldr	r3, [pc, #388]	; (8002d28 <cmdExecute+0x200>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	b2d9      	uxtb	r1, r3
 8002ba6:	4b61      	ldr	r3, [pc, #388]	; (8002d2c <cmdExecute+0x204>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	001a      	movs	r2, r3
 8002bae:	f7ff fbd3 	bl	8002358 <weoShowSmallImage>
				}
		if(cmd2Execute==0x13){
 8002bb2:	1dfb      	adds	r3, r7, #7
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b13      	cmp	r3, #19
 8002bb8:	d111      	bne.n	8002bde <cmdExecute+0xb6>
			bf4me=0x13;	//set BF flag 4 me
 8002bba:	4b57      	ldr	r3, [pc, #348]	; (8002d18 <cmdExecute+0x1f0>)
 8002bbc:	2213      	movs	r2, #19
 8002bbe:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY,strLen,fontInfo,dataASCII);
 8002bc0:	4b59      	ldr	r3, [pc, #356]	; (8002d28 <cmdExecute+0x200>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	b2d8      	uxtb	r0, r3
 8002bc6:	4b59      	ldr	r3, [pc, #356]	; (8002d2c <cmdExecute+0x204>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	b2d9      	uxtb	r1, r3
 8002bcc:	4b58      	ldr	r3, [pc, #352]	; (8002d30 <cmdExecute+0x208>)
 8002bce:	781a      	ldrb	r2, [r3, #0]
 8002bd0:	4b58      	ldr	r3, [pc, #352]	; (8002d34 <cmdExecute+0x20c>)
 8002bd2:	781c      	ldrb	r4, [r3, #0]
 8002bd4:	4b58      	ldr	r3, [pc, #352]	; (8002d38 <cmdExecute+0x210>)
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	0023      	movs	r3, r4
 8002bda:	f000 f8b5 	bl	8002d48 <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 8002bde:	1dfb      	adds	r3, r7, #7
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b14      	cmp	r3, #20
 8002be4:	d122      	bne.n	8002c2c <cmdExecute+0x104>
//			if(soundReady!=1){return;}
			bf4me=0x14;	//set BF flag 4 me
 8002be6:	4b4c      	ldr	r3, [pc, #304]	; (8002d18 <cmdExecute+0x1f0>)
 8002be8:	2214      	movs	r2, #20
 8002bea:	701a      	strb	r2, [r3, #0]
			if(soundNum==0x01){
 8002bec:	4b53      	ldr	r3, [pc, #332]	; (8002d3c <cmdExecute+0x214>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d112      	bne.n	8002c1a <cmdExecute+0xf2>
				if(soundReady!=0){
 8002bf4:	4b47      	ldr	r3, [pc, #284]	; (8002d14 <cmdExecute+0x1ec>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00e      	beq.n	8002c1a <cmdExecute+0xf2>
				soundReady=0;
 8002bfc:	4b45      	ldr	r3, [pc, #276]	; (8002d14 <cmdExecute+0x1ec>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	701a      	strb	r2, [r3, #0]
				USART2->ICR|=USART_ICR_ORECF;
 8002c02:	4b46      	ldr	r3, [pc, #280]	; (8002d1c <cmdExecute+0x1f4>)
 8002c04:	6a1a      	ldr	r2, [r3, #32]
 8002c06:	4b45      	ldr	r3, [pc, #276]	; (8002d1c <cmdExecute+0x1f4>)
 8002c08:	2108      	movs	r1, #8
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	621a      	str	r2, [r3, #32]
//				squeak_single(signal);
				USART2->ICR|=USART_ICR_ORECF;
 8002c0e:	4b43      	ldr	r3, [pc, #268]	; (8002d1c <cmdExecute+0x1f4>)
 8002c10:	6a1a      	ldr	r2, [r3, #32]
 8002c12:	4b42      	ldr	r3, [pc, #264]	; (8002d1c <cmdExecute+0x1f4>)
 8002c14:	2108      	movs	r1, #8
 8002c16:	430a      	orrs	r2, r1
 8002c18:	621a      	str	r2, [r3, #32]
//				squeak_long(signal);
				}
//			if(soundNum!=1){
//			HAL_Delay(500);
//			}
			cmd2Execute=0;
 8002c1a:	1dfb      	adds	r3, r7, #7
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
			GPIOC->ODR |= 1 << 6;	//set BF
 8002c20:	4b3f      	ldr	r3, [pc, #252]	; (8002d20 <cmdExecute+0x1f8>)
 8002c22:	695a      	ldr	r2, [r3, #20]
 8002c24:	4b3e      	ldr	r3, [pc, #248]	; (8002d20 <cmdExecute+0x1f8>)
 8002c26:	2140      	movs	r1, #64	; 0x40
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	615a      	str	r2, [r3, #20]

		}
		if(cmd2Execute==0x15){
 8002c2c:	1dfb      	adds	r3, r7, #7
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b15      	cmp	r3, #21
 8002c32:	d153      	bne.n	8002cdc <cmdExecute+0x1b4>
			bf4me=0x15;	//set BF flag 4 me
 8002c34:	4b38      	ldr	r3, [pc, #224]	; (8002d18 <cmdExecute+0x1f0>)
 8002c36:	2215      	movs	r2, #21
 8002c38:	701a      	strb	r2, [r3, #0]
			I2C_SOUND_ChangePage(0x01);
 8002c3a:	2001      	movs	r0, #1
 8002c3c:	f7fe fd5a 	bl	80016f4 <I2C_SOUND_ChangePage>
//			WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
			if(volume==0x00){
 8002c40:	4b3f      	ldr	r3, [pc, #252]	; (8002d40 <cmdExecute+0x218>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d106      	bne.n	8002c56 <cmdExecute+0x12e>
				I2C_SOUND_ChangePage(0x01);
 8002c48:	2001      	movs	r0, #1
 8002c4a:	f7fe fd53 	bl	80016f4 <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x2E,0xFF);// mute
 8002c4e:	21ff      	movs	r1, #255	; 0xff
 8002c50:	202e      	movs	r0, #46	; 0x2e
 8002c52:	f7fe fd6d 	bl	8001730 <WriteReg_I2C_SOUND>
			}
			I2C_SOUND_ChangePage(0x01);
 8002c56:	2001      	movs	r0, #1
 8002c58:	f7fe fd4c 	bl	80016f4 <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x2E, volume);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 8002c5c:	4b38      	ldr	r3, [pc, #224]	; (8002d40 <cmdExecute+0x218>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	0019      	movs	r1, r3
 8002c62:	202e      	movs	r0, #46	; 0x2e
 8002c64:	f7fe fd64 	bl	8001730 <WriteReg_I2C_SOUND>

			if(contrast==0x00){
 8002c68:	4b36      	ldr	r3, [pc, #216]	; (8002d44 <cmdExecute+0x21c>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d102      	bne.n	8002c76 <cmdExecute+0x14e>
				weoClear();
 8002c70:	f7fe fbf6 	bl	8001460 <weoClear>
 8002c74:	e029      	b.n	8002cca <cmdExecute+0x1a2>
			}
			else{
				GPIOA->ODR &= ~(1 << 6);	//reset cs
 8002c76:	23a0      	movs	r3, #160	; 0xa0
 8002c78:	05db      	lsls	r3, r3, #23
 8002c7a:	695a      	ldr	r2, [r3, #20]
 8002c7c:	23a0      	movs	r3, #160	; 0xa0
 8002c7e:	05db      	lsls	r3, r3, #23
 8002c80:	2140      	movs	r1, #64	; 0x40
 8002c82:	438a      	bics	r2, r1
 8002c84:	615a      	str	r2, [r3, #20]
				GPIOA->ODR &= ~(1 << 7);	// reset dc
 8002c86:	23a0      	movs	r3, #160	; 0xa0
 8002c88:	05db      	lsls	r3, r3, #23
 8002c8a:	695a      	ldr	r2, [r3, #20]
 8002c8c:	23a0      	movs	r3, #160	; 0xa0
 8002c8e:	05db      	lsls	r3, r3, #23
 8002c90:	2180      	movs	r1, #128	; 0x80
 8002c92:	438a      	bics	r2, r1
 8002c94:	615a      	str	r2, [r3, #20]
				USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8002c96:	2081      	movs	r0, #129	; 0x81
 8002c98:	f7fe fb34 	bl	8001304 <USART_AS_SPI_sendCMD>
				USART_AS_SPI_sendCMD(contrast*0x10);
 8002c9c:	4b29      	ldr	r3, [pc, #164]	; (8002d44 <cmdExecute+0x21c>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f7fe fb2d 	bl	8001304 <USART_AS_SPI_sendCMD>
				GPIOA->ODR |= 1 << 7;	//set dc
 8002caa:	23a0      	movs	r3, #160	; 0xa0
 8002cac:	05db      	lsls	r3, r3, #23
 8002cae:	695a      	ldr	r2, [r3, #20]
 8002cb0:	23a0      	movs	r3, #160	; 0xa0
 8002cb2:	05db      	lsls	r3, r3, #23
 8002cb4:	2180      	movs	r1, #128	; 0x80
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= 1 << 6;	//set cs
 8002cba:	23a0      	movs	r3, #160	; 0xa0
 8002cbc:	05db      	lsls	r3, r3, #23
 8002cbe:	695a      	ldr	r2, [r3, #20]
 8002cc0:	23a0      	movs	r3, #160	; 0xa0
 8002cc2:	05db      	lsls	r3, r3, #23
 8002cc4:	2140      	movs	r1, #64	; 0x40
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	615a      	str	r2, [r3, #20]
			}
//			bf4me=0x15;	//set BF flag 4 me
			cmd2Execute=0;
 8002cca:	1dfb      	adds	r3, r7, #7
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
			GPIOC->ODR |= 1 << 6;	//set BF
 8002cd0:	4b13      	ldr	r3, [pc, #76]	; (8002d20 <cmdExecute+0x1f8>)
 8002cd2:	695a      	ldr	r2, [r3, #20]
 8002cd4:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <cmdExecute+0x1f8>)
 8002cd6:	2140      	movs	r1, #64	; 0x40
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	615a      	str	r2, [r3, #20]
		}
		if(cmd2Execute==0x16){
 8002cdc:	1dfb      	adds	r3, r7, #7
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b16      	cmp	r3, #22
 8002ce2:	d102      	bne.n	8002cea <cmdExecute+0x1c2>
			bf4me=0x16;	//set BF flag 4 me
 8002ce4:	4b0c      	ldr	r3, [pc, #48]	; (8002d18 <cmdExecute+0x1f0>)
 8002ce6:	2216      	movs	r2, #22
 8002ce8:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 8002cea:	1dfb      	adds	r3, r7, #7
 8002cec:	2200      	movs	r2, #0
 8002cee:	701a      	strb	r2, [r3, #0]

				}
//			}
//		}
		USART2->ICR|=USART_ICR_ORECF;
 8002cf0:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <cmdExecute+0x1f4>)
 8002cf2:	6a1a      	ldr	r2, [r3, #32]
 8002cf4:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <cmdExecute+0x1f4>)
 8002cf6:	2108      	movs	r1, #8
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	621a      	str	r2, [r3, #32]
 8002cfc:	e004      	b.n	8002d08 <cmdExecute+0x1e0>
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	e002      	b.n	8002d08 <cmdExecute+0x1e0>
		if(soundReady==0){return;}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	e000      	b.n	8002d08 <cmdExecute+0x1e0>
		if (bf4me!=0x00){return;}	// protection against false BF resets
 8002d06:	46c0      	nop			; (mov r8, r8)
	}
 8002d08:	0018      	movs	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b003      	add	sp, #12
 8002d0e:	bd90      	pop	{r4, r7, pc}
 8002d10:	200003f0 	.word	0x200003f0
 8002d14:	20000061 	.word	0x20000061
 8002d18:	20000427 	.word	0x20000427
 8002d1c:	40004400 	.word	0x40004400
 8002d20:	50000800 	.word	0x50000800
 8002d24:	200003c5 	.word	0x200003c5
 8002d28:	200003cc 	.word	0x200003cc
 8002d2c:	200003d0 	.word	0x200003d0
 8002d30:	200003ca 	.word	0x200003ca
 8002d34:	20000431 	.word	0x20000431
 8002d38:	200003d8 	.word	0x200003d8
 8002d3c:	200003c6 	.word	0x200003c6
 8002d40:	200003c7 	.word	0x200003c7
 8002d44:	200003c8 	.word	0x200003c8

08002d48 <printASCIIarray>:
//========================================================================================================================
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t fontInfo,uint8_t dataASCII[]){
 8002d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d4a:	46ce      	mov	lr, r9
 8002d4c:	4647      	mov	r7, r8
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b0e5      	sub	sp, #404	; 0x194
 8002d52:	af02      	add	r7, sp, #8
 8002d54:	0016      	movs	r6, r2
 8002d56:	469c      	mov	ip, r3
 8002d58:	2320      	movs	r3, #32
 8002d5a:	33ff      	adds	r3, #255	; 0xff
 8002d5c:	2208      	movs	r2, #8
 8002d5e:	189b      	adds	r3, r3, r2
 8002d60:	19da      	adds	r2, r3, r7
 8002d62:	1c03      	adds	r3, r0, #0
 8002d64:	7013      	strb	r3, [r2, #0]
 8002d66:	238f      	movs	r3, #143	; 0x8f
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	2208      	movs	r2, #8
 8002d6c:	189b      	adds	r3, r3, r2
 8002d6e:	19da      	adds	r2, r3, r7
 8002d70:	1c0b      	adds	r3, r1, #0
 8002d72:	7013      	strb	r3, [r2, #0]
 8002d74:	221e      	movs	r2, #30
 8002d76:	32ff      	adds	r2, #255	; 0xff
 8002d78:	2308      	movs	r3, #8
 8002d7a:	18d3      	adds	r3, r2, r3
 8002d7c:	19da      	adds	r2, r3, r7
 8002d7e:	1c33      	adds	r3, r6, #0
 8002d80:	7013      	strb	r3, [r2, #0]
 8002d82:	268e      	movs	r6, #142	; 0x8e
 8002d84:	0076      	lsls	r6, r6, #1
 8002d86:	2308      	movs	r3, #8
 8002d88:	18f3      	adds	r3, r6, r3
 8002d8a:	19da      	adds	r2, r3, r7
 8002d8c:	4663      	mov	r3, ip
 8002d8e:	7013      	strb	r3, [r2, #0]
			uint8_t X_increment,ASCII_height,X_width,ASCII_X,decY,fontCur,contrast,contrastH,contrastL;
//			uint8_t weoBuffer1[49],weoBuffer2[49],weoBuffer[49];
			uint16_t i,j,k, symLen;
			ASCII_X=imX;
 8002d90:	235f      	movs	r3, #95	; 0x5f
 8002d92:	218c      	movs	r1, #140	; 0x8c
 8002d94:	0049      	lsls	r1, r1, #1
 8002d96:	185a      	adds	r2, r3, r1
 8002d98:	2308      	movs	r3, #8
 8002d9a:	469c      	mov	ip, r3
 8002d9c:	44bc      	add	ip, r7
 8002d9e:	4462      	add	r2, ip
 8002da0:	2020      	movs	r0, #32
 8002da2:	30ff      	adds	r0, #255	; 0xff
 8002da4:	2308      	movs	r3, #8
 8002da6:	18c3      	adds	r3, r0, r3
 8002da8:	19db      	adds	r3, r3, r7
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	7013      	strb	r3, [r2, #0]

			contrastL = (fontInfo & 0xF0)>>4;
 8002dae:	205e      	movs	r0, #94	; 0x5e
 8002db0:	1842      	adds	r2, r0, r1
 8002db2:	2308      	movs	r3, #8
 8002db4:	469c      	mov	ip, r3
 8002db6:	44bc      	add	ip, r7
 8002db8:	4462      	add	r2, ip
 8002dba:	2308      	movs	r3, #8
 8002dbc:	18f3      	adds	r3, r6, r3
 8002dbe:	19db      	adds	r3, r3, r7
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	091b      	lsrs	r3, r3, #4
 8002dc4:	7013      	strb	r3, [r2, #0]
			contrastH = (contrastL)<<4;
 8002dc6:	265d      	movs	r6, #93	; 0x5d
 8002dc8:	1872      	adds	r2, r6, r1
 8002dca:	2308      	movs	r3, #8
 8002dcc:	469c      	mov	ip, r3
 8002dce:	44bc      	add	ip, r7
 8002dd0:	4462      	add	r2, ip
 8002dd2:	1843      	adds	r3, r0, r1
 8002dd4:	603b      	str	r3, [r7, #0]
 8002dd6:	2308      	movs	r3, #8
 8002dd8:	469c      	mov	ip, r3
 8002dda:	44bc      	add	ip, r7
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	4463      	add	r3, ip
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	7013      	strb	r3, [r2, #0]
			contrast = contrastH|contrastL;
 8002de6:	235c      	movs	r3, #92	; 0x5c
 8002de8:	000a      	movs	r2, r1
 8002dea:	1859      	adds	r1, r3, r1
 8002dec:	2308      	movs	r3, #8
 8002dee:	469c      	mov	ip, r3
 8002df0:	44bc      	add	ip, r7
 8002df2:	4461      	add	r1, ip
 8002df4:	0013      	movs	r3, r2
 8002df6:	18f2      	adds	r2, r6, r3
 8002df8:	2608      	movs	r6, #8
 8002dfa:	46b4      	mov	ip, r6
 8002dfc:	44bc      	add	ip, r7
 8002dfe:	4462      	add	r2, ip
 8002e00:	001e      	movs	r6, r3
 8002e02:	18c0      	adds	r0, r0, r3
 8002e04:	2308      	movs	r3, #8
 8002e06:	18fb      	adds	r3, r7, r3
 8002e08:	18c3      	adds	r3, r0, r3
 8002e0a:	7812      	ldrb	r2, [r2, #0]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	700b      	strb	r3, [r1, #0]
//			contrast = (fontInfo & 0xF0)>>4;
//			contrast=0x33;

			decY=0x01;
 8002e12:	2160      	movs	r1, #96	; 0x60
 8002e14:	0030      	movs	r0, r6
 8002e16:	180a      	adds	r2, r1, r0
 8002e18:	2308      	movs	r3, #8
 8002e1a:	469c      	mov	ip, r3
 8002e1c:	44bc      	add	ip, r7
 8002e1e:	4462      	add	r2, ip
 8002e20:	2301      	movs	r3, #1
 8002e22:	7013      	strb	r3, [r2, #0]
			if(imY % 2 !=0){
 8002e24:	238f      	movs	r3, #143	; 0x8f
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	2208      	movs	r2, #8
 8002e2a:	189b      	adds	r3, r3, r2
 8002e2c:	19db      	adds	r3, r3, r7
 8002e2e:	781a      	ldrb	r2, [r3, #0]
 8002e30:	2301      	movs	r3, #1
 8002e32:	4013      	ands	r3, r2
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d005      	beq.n	8002e46 <printASCIIarray+0xfe>
				decY=0x02;
 8002e3a:	180b      	adds	r3, r1, r0
 8002e3c:	2208      	movs	r2, #8
 8002e3e:	18ba      	adds	r2, r7, r2
 8002e40:	189a      	adds	r2, r3, r2
 8002e42:	2302      	movs	r3, #2
 8002e44:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x00)==0){
				fontCur=0;
 8002e46:	2161      	movs	r1, #97	; 0x61
 8002e48:	208c      	movs	r0, #140	; 0x8c
 8002e4a:	0040      	lsls	r0, r0, #1
 8002e4c:	180b      	adds	r3, r1, r0
 8002e4e:	2208      	movs	r2, #8
 8002e50:	18ba      	adds	r2, r7, r2
 8002e52:	189a      	adds	r2, r3, r2
 8002e54:	2300      	movs	r3, #0
 8002e56:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x01)==1){
 8002e58:	238e      	movs	r3, #142	; 0x8e
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	2208      	movs	r2, #8
 8002e5e:	189b      	adds	r3, r3, r2
 8002e60:	19db      	adds	r3, r3, r7
 8002e62:	781a      	ldrb	r2, [r3, #0]
 8002e64:	2301      	movs	r3, #1
 8002e66:	4013      	ands	r3, r2
 8002e68:	d005      	beq.n	8002e76 <printASCIIarray+0x12e>
				fontCur=1;
 8002e6a:	180b      	adds	r3, r1, r0
 8002e6c:	2208      	movs	r2, #8
 8002e6e:	18ba      	adds	r2, r7, r2
 8002e70:	189a      	adds	r2, r3, r2
 8002e72:	2301      	movs	r3, #1
 8002e74:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x02)==2){
 8002e76:	238e      	movs	r3, #142	; 0x8e
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	2208      	movs	r2, #8
 8002e7c:	189b      	adds	r3, r3, r2
 8002e7e:	19db      	adds	r3, r3, r7
 8002e80:	781a      	ldrb	r2, [r3, #0]
 8002e82:	2302      	movs	r3, #2
 8002e84:	4013      	ands	r3, r2
 8002e86:	d008      	beq.n	8002e9a <printASCIIarray+0x152>
				fontCur=2;
 8002e88:	2361      	movs	r3, #97	; 0x61
 8002e8a:	228c      	movs	r2, #140	; 0x8c
 8002e8c:	0052      	lsls	r2, r2, #1
 8002e8e:	189b      	adds	r3, r3, r2
 8002e90:	2208      	movs	r2, #8
 8002e92:	18ba      	adds	r2, r7, r2
 8002e94:	189a      	adds	r2, r3, r2
 8002e96:	2302      	movs	r3, #2
 8002e98:	7013      	strb	r3, [r2, #0]
			}
//			fontCur=2;
			if(fontCur==0){
 8002e9a:	2361      	movs	r3, #97	; 0x61
 8002e9c:	268c      	movs	r6, #140	; 0x8c
 8002e9e:	0076      	lsls	r6, r6, #1
 8002ea0:	199b      	adds	r3, r3, r6
 8002ea2:	2208      	movs	r2, #8
 8002ea4:	4694      	mov	ip, r2
 8002ea6:	44bc      	add	ip, r7
 8002ea8:	4463      	add	r3, ip
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d000      	beq.n	8002eb2 <printASCIIarray+0x16a>
 8002eb0:	e2a7      	b.n	8003402 <printASCIIarray+0x6ba>
 8002eb2:	466b      	mov	r3, sp
 8002eb4:	4698      	mov	r8, r3
				symLen=49;
 8002eb6:	215a      	movs	r1, #90	; 0x5a
 8002eb8:	198b      	adds	r3, r1, r6
 8002eba:	2208      	movs	r2, #8
 8002ebc:	18ba      	adds	r2, r7, r2
 8002ebe:	189a      	adds	r2, r3, r2
 8002ec0:	2331      	movs	r3, #49	; 0x31
 8002ec2:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 8002ec4:	198b      	adds	r3, r1, r6
 8002ec6:	2208      	movs	r2, #8
 8002ec8:	4694      	mov	ip, r2
 8002eca:	44bc      	add	ip, r7
 8002ecc:	4463      	add	r3, ip
 8002ece:	881a      	ldrh	r2, [r3, #0]
 8002ed0:	0013      	movs	r3, r2
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	21b6      	movs	r1, #182	; 0xb6
 8002ed6:	0049      	lsls	r1, r1, #1
 8002ed8:	2008      	movs	r0, #8
 8002eda:	1809      	adds	r1, r1, r0
 8002edc:	19c9      	adds	r1, r1, r7
 8002ede:	600b      	str	r3, [r1, #0]
 8002ee0:	2188      	movs	r1, #136	; 0x88
 8002ee2:	2308      	movs	r3, #8
 8002ee4:	18cb      	adds	r3, r1, r3
 8002ee6:	19db      	adds	r3, r3, r7
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	2300      	movs	r3, #0
 8002eec:	208c      	movs	r0, #140	; 0x8c
 8002eee:	2608      	movs	r6, #8
 8002ef0:	1980      	adds	r0, r0, r6
 8002ef2:	19c0      	adds	r0, r0, r7
 8002ef4:	6003      	str	r3, [r0, #0]
 8002ef6:	2308      	movs	r3, #8
 8002ef8:	18cb      	adds	r3, r1, r3
 8002efa:	19db      	adds	r3, r3, r7
 8002efc:	6818      	ldr	r0, [r3, #0]
 8002efe:	6859      	ldr	r1, [r3, #4]
 8002f00:	0003      	movs	r3, r0
 8002f02:	0f5b      	lsrs	r3, r3, #29
 8002f04:	000e      	movs	r6, r1
 8002f06:	00f5      	lsls	r5, r6, #3
 8002f08:	431d      	orrs	r5, r3
 8002f0a:	0003      	movs	r3, r0
 8002f0c:	00dc      	lsls	r4, r3, #3
 8002f0e:	2180      	movs	r1, #128	; 0x80
 8002f10:	2308      	movs	r3, #8
 8002f12:	18cb      	adds	r3, r1, r3
 8002f14:	19db      	adds	r3, r3, r7
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	2300      	movs	r3, #0
 8002f1a:	2084      	movs	r0, #132	; 0x84
 8002f1c:	2408      	movs	r4, #8
 8002f1e:	1900      	adds	r0, r0, r4
 8002f20:	19c0      	adds	r0, r0, r7
 8002f22:	6003      	str	r3, [r0, #0]
 8002f24:	2308      	movs	r3, #8
 8002f26:	18cb      	adds	r3, r1, r3
 8002f28:	19db      	adds	r3, r3, r7
 8002f2a:	6818      	ldr	r0, [r3, #0]
 8002f2c:	6859      	ldr	r1, [r3, #4]
 8002f2e:	0003      	movs	r3, r0
 8002f30:	0f5b      	lsrs	r3, r3, #29
 8002f32:	000d      	movs	r5, r1
 8002f34:	00ed      	lsls	r5, r5, #3
 8002f36:	248a      	movs	r4, #138	; 0x8a
 8002f38:	0064      	lsls	r4, r4, #1
 8002f3a:	2608      	movs	r6, #8
 8002f3c:	19a6      	adds	r6, r4, r6
 8002f3e:	19f6      	adds	r6, r6, r7
 8002f40:	6035      	str	r5, [r6, #0]
 8002f42:	2508      	movs	r5, #8
 8002f44:	1965      	adds	r5, r4, r5
 8002f46:	19ed      	adds	r5, r5, r7
 8002f48:	682d      	ldr	r5, [r5, #0]
 8002f4a:	431d      	orrs	r5, r3
 8002f4c:	2308      	movs	r3, #8
 8002f4e:	18e3      	adds	r3, r4, r3
 8002f50:	19db      	adds	r3, r3, r7
 8002f52:	601d      	str	r5, [r3, #0]
 8002f54:	0003      	movs	r3, r0
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	2188      	movs	r1, #136	; 0x88
 8002f5a:	0049      	lsls	r1, r1, #1
 8002f5c:	2008      	movs	r0, #8
 8002f5e:	1809      	adds	r1, r1, r0
 8002f60:	19c9      	adds	r1, r1, r7
 8002f62:	600b      	str	r3, [r1, #0]
 8002f64:	0013      	movs	r3, r2
 8002f66:	3307      	adds	r3, #7
 8002f68:	08db      	lsrs	r3, r3, #3
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	466a      	mov	r2, sp
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	469d      	mov	sp, r3
 8002f72:	ab02      	add	r3, sp, #8
 8002f74:	3300      	adds	r3, #0
 8002f76:	22b4      	movs	r2, #180	; 0xb4
 8002f78:	0052      	lsls	r2, r2, #1
 8002f7a:	2108      	movs	r1, #8
 8002f7c:	1852      	adds	r2, r2, r1
 8002f7e:	19d2      	adds	r2, r2, r7
 8002f80:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer1[symLen];
 8002f82:	245a      	movs	r4, #90	; 0x5a
 8002f84:	2390      	movs	r3, #144	; 0x90
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	18fb      	adds	r3, r7, r3
 8002f8a:	601c      	str	r4, [r3, #0]
 8002f8c:	268c      	movs	r6, #140	; 0x8c
 8002f8e:	0076      	lsls	r6, r6, #1
 8002f90:	19a3      	adds	r3, r4, r6
 8002f92:	2208      	movs	r2, #8
 8002f94:	4694      	mov	ip, r2
 8002f96:	44bc      	add	ip, r7
 8002f98:	4463      	add	r3, ip
 8002f9a:	881a      	ldrh	r2, [r3, #0]
 8002f9c:	0013      	movs	r3, r2
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	21b2      	movs	r1, #178	; 0xb2
 8002fa2:	0049      	lsls	r1, r1, #1
 8002fa4:	2008      	movs	r0, #8
 8002fa6:	1809      	adds	r1, r1, r0
 8002fa8:	19c9      	adds	r1, r1, r7
 8002faa:	600b      	str	r3, [r1, #0]
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	18fb      	adds	r3, r7, r3
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	2184      	movs	r1, #132	; 0x84
 8002fb6:	1879      	adds	r1, r7, r1
 8002fb8:	600b      	str	r3, [r1, #0]
 8002fba:	2380      	movs	r3, #128	; 0x80
 8002fbc:	18fb      	adds	r3, r7, r3
 8002fbe:	6818      	ldr	r0, [r3, #0]
 8002fc0:	6859      	ldr	r1, [r3, #4]
 8002fc2:	0003      	movs	r3, r0
 8002fc4:	0f5b      	lsrs	r3, r3, #29
 8002fc6:	469c      	mov	ip, r3
 8002fc8:	000d      	movs	r5, r1
 8002fca:	00ed      	lsls	r5, r5, #3
 8002fcc:	2486      	movs	r4, #134	; 0x86
 8002fce:	0064      	lsls	r4, r4, #1
 8002fd0:	2308      	movs	r3, #8
 8002fd2:	18e4      	adds	r4, r4, r3
 8002fd4:	19e4      	adds	r4, r4, r7
 8002fd6:	6025      	str	r5, [r4, #0]
 8002fd8:	2586      	movs	r5, #134	; 0x86
 8002fda:	006d      	lsls	r5, r5, #1
 8002fdc:	2308      	movs	r3, #8
 8002fde:	18eb      	adds	r3, r5, r3
 8002fe0:	19dc      	adds	r4, r3, r7
 8002fe2:	6825      	ldr	r5, [r4, #0]
 8002fe4:	4663      	mov	r3, ip
 8002fe6:	431d      	orrs	r5, r3
 8002fe8:	2386      	movs	r3, #134	; 0x86
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	2408      	movs	r4, #8
 8002fee:	191b      	adds	r3, r3, r4
 8002ff0:	19db      	adds	r3, r3, r7
 8002ff2:	601d      	str	r5, [r3, #0]
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	2184      	movs	r1, #132	; 0x84
 8002ffa:	0049      	lsls	r1, r1, #1
 8002ffc:	2008      	movs	r0, #8
 8002ffe:	1809      	adds	r1, r1, r0
 8003000:	19c9      	adds	r1, r1, r7
 8003002:	600b      	str	r3, [r1, #0]
 8003004:	67ba      	str	r2, [r7, #120]	; 0x78
 8003006:	2300      	movs	r3, #0
 8003008:	67fb      	str	r3, [r7, #124]	; 0x7c
 800300a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800300c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800300e:	0003      	movs	r3, r0
 8003010:	0f5b      	lsrs	r3, r3, #29
 8003012:	000d      	movs	r5, r1
 8003014:	00ed      	lsls	r5, r5, #3
 8003016:	2486      	movs	r4, #134	; 0x86
 8003018:	0064      	lsls	r4, r4, #1
 800301a:	193c      	adds	r4, r7, r4
 800301c:	6025      	str	r5, [r4, #0]
 800301e:	2486      	movs	r4, #134	; 0x86
 8003020:	0064      	lsls	r4, r4, #1
 8003022:	193c      	adds	r4, r7, r4
 8003024:	6825      	ldr	r5, [r4, #0]
 8003026:	431d      	orrs	r5, r3
 8003028:	2386      	movs	r3, #134	; 0x86
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	18fb      	adds	r3, r7, r3
 800302e:	601d      	str	r5, [r3, #0]
 8003030:	0003      	movs	r3, r0
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	2184      	movs	r1, #132	; 0x84
 8003036:	0049      	lsls	r1, r1, #1
 8003038:	1879      	adds	r1, r7, r1
 800303a:	600b      	str	r3, [r1, #0]
 800303c:	0013      	movs	r3, r2
 800303e:	3307      	adds	r3, #7
 8003040:	08db      	lsrs	r3, r3, #3
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	466a      	mov	r2, sp
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	469d      	mov	sp, r3
 800304a:	ab02      	add	r3, sp, #8
 800304c:	3300      	adds	r3, #0
 800304e:	22b0      	movs	r2, #176	; 0xb0
 8003050:	0052      	lsls	r2, r2, #1
 8003052:	2108      	movs	r1, #8
 8003054:	1852      	adds	r2, r2, r1
 8003056:	19d2      	adds	r2, r2, r7
 8003058:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer2[symLen];
 800305a:	2390      	movs	r3, #144	; 0x90
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	18fb      	adds	r3, r7, r3
 8003060:	681c      	ldr	r4, [r3, #0]
 8003062:	0035      	movs	r5, r6
 8003064:	1963      	adds	r3, r4, r5
 8003066:	2208      	movs	r2, #8
 8003068:	4694      	mov	ip, r2
 800306a:	44bc      	add	ip, r7
 800306c:	4463      	add	r3, ip
 800306e:	881a      	ldrh	r2, [r3, #0]
 8003070:	0013      	movs	r3, r2
 8003072:	3b01      	subs	r3, #1
 8003074:	21ae      	movs	r1, #174	; 0xae
 8003076:	0049      	lsls	r1, r1, #1
 8003078:	2008      	movs	r0, #8
 800307a:	1809      	adds	r1, r1, r0
 800307c:	19c9      	adds	r1, r1, r7
 800307e:	600b      	str	r3, [r1, #0]
 8003080:	673a      	str	r2, [r7, #112]	; 0x70
 8003082:	2300      	movs	r3, #0
 8003084:	677b      	str	r3, [r7, #116]	; 0x74
 8003086:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003088:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800308a:	0003      	movs	r3, r0
 800308c:	0f5b      	lsrs	r3, r3, #29
 800308e:	000c      	movs	r4, r1
 8003090:	00e4      	lsls	r4, r4, #3
 8003092:	26fc      	movs	r6, #252	; 0xfc
 8003094:	2508      	movs	r5, #8
 8003096:	1975      	adds	r5, r6, r5
 8003098:	19ed      	adds	r5, r5, r7
 800309a:	602c      	str	r4, [r5, #0]
 800309c:	2408      	movs	r4, #8
 800309e:	1934      	adds	r4, r6, r4
 80030a0:	19e4      	adds	r4, r4, r7
 80030a2:	6824      	ldr	r4, [r4, #0]
 80030a4:	431c      	orrs	r4, r3
 80030a6:	2308      	movs	r3, #8
 80030a8:	18f3      	adds	r3, r6, r3
 80030aa:	19db      	adds	r3, r3, r7
 80030ac:	601c      	str	r4, [r3, #0]
 80030ae:	0003      	movs	r3, r0
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	21f8      	movs	r1, #248	; 0xf8
 80030b4:	2008      	movs	r0, #8
 80030b6:	1809      	adds	r1, r1, r0
 80030b8:	19c9      	adds	r1, r1, r7
 80030ba:	600b      	str	r3, [r1, #0]
 80030bc:	66ba      	str	r2, [r7, #104]	; 0x68
 80030be:	2300      	movs	r3, #0
 80030c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030c2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80030c4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80030c6:	0003      	movs	r3, r0
 80030c8:	0f5b      	lsrs	r3, r3, #29
 80030ca:	000c      	movs	r4, r1
 80030cc:	00e4      	lsls	r4, r4, #3
 80030ce:	26f4      	movs	r6, #244	; 0xf4
 80030d0:	2508      	movs	r5, #8
 80030d2:	1975      	adds	r5, r6, r5
 80030d4:	19ed      	adds	r5, r5, r7
 80030d6:	602c      	str	r4, [r5, #0]
 80030d8:	2408      	movs	r4, #8
 80030da:	1934      	adds	r4, r6, r4
 80030dc:	19e4      	adds	r4, r4, r7
 80030de:	6824      	ldr	r4, [r4, #0]
 80030e0:	431c      	orrs	r4, r3
 80030e2:	2308      	movs	r3, #8
 80030e4:	18f3      	adds	r3, r6, r3
 80030e6:	19db      	adds	r3, r3, r7
 80030e8:	601c      	str	r4, [r3, #0]
 80030ea:	0003      	movs	r3, r0
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	21f0      	movs	r1, #240	; 0xf0
 80030f0:	2008      	movs	r0, #8
 80030f2:	1809      	adds	r1, r1, r0
 80030f4:	19c9      	adds	r1, r1, r7
 80030f6:	600b      	str	r3, [r1, #0]
 80030f8:	0013      	movs	r3, r2
 80030fa:	3307      	adds	r3, #7
 80030fc:	08db      	lsrs	r3, r3, #3
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	466a      	mov	r2, sp
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	469d      	mov	sp, r3
 8003106:	ab02      	add	r3, sp, #8
 8003108:	3300      	adds	r3, #0
 800310a:	22ac      	movs	r2, #172	; 0xac
 800310c:	0052      	lsls	r2, r2, #1
 800310e:	2108      	movs	r1, #8
 8003110:	1852      	adds	r2, r2, r1
 8003112:	19d2      	adds	r2, r2, r7
 8003114:	6013      	str	r3, [r2, #0]
				X_increment=0x07;
 8003116:	233f      	movs	r3, #63	; 0x3f
 8003118:	258c      	movs	r5, #140	; 0x8c
 800311a:	006d      	lsls	r5, r5, #1
 800311c:	195b      	adds	r3, r3, r5
 800311e:	2208      	movs	r2, #8
 8003120:	18ba      	adds	r2, r7, r2
 8003122:	189a      	adds	r2, r3, r2
 8003124:	2307      	movs	r3, #7
 8003126:	7013      	strb	r3, [r2, #0]
				ASCII_height=0x0E;
 8003128:	233e      	movs	r3, #62	; 0x3e
 800312a:	195b      	adds	r3, r3, r5
 800312c:	2208      	movs	r2, #8
 800312e:	18ba      	adds	r2, r7, r2
 8003130:	189a      	adds	r2, r3, r2
 8003132:	230e      	movs	r3, #14
 8003134:	7013      	strb	r3, [r2, #0]
				for(i=0;i<strLen;i++){
 8003136:	2362      	movs	r3, #98	; 0x62
 8003138:	195b      	adds	r3, r3, r5
 800313a:	2208      	movs	r2, #8
 800313c:	18ba      	adds	r2, r7, r2
 800313e:	189a      	adds	r2, r3, r2
 8003140:	2300      	movs	r3, #0
 8003142:	8013      	strh	r3, [r2, #0]
 8003144:	e110      	b.n	8003368 <printASCIIarray+0x620>
					for(j=0;j<symLen;j++){
 8003146:	2364      	movs	r3, #100	; 0x64
 8003148:	228c      	movs	r2, #140	; 0x8c
 800314a:	0052      	lsls	r2, r2, #1
 800314c:	189b      	adds	r3, r3, r2
 800314e:	2208      	movs	r2, #8
 8003150:	18ba      	adds	r2, r7, r2
 8003152:	189a      	adds	r2, r3, r2
 8003154:	2300      	movs	r3, #0
 8003156:	8013      	strh	r3, [r2, #0]
 8003158:	e042      	b.n	80031e0 <printASCIIarray+0x498>
						weoBuffer[j]=F1[dataASCII[i]][j];
 800315a:	2362      	movs	r3, #98	; 0x62
 800315c:	218c      	movs	r1, #140	; 0x8c
 800315e:	0049      	lsls	r1, r1, #1
 8003160:	185b      	adds	r3, r3, r1
 8003162:	2208      	movs	r2, #8
 8003164:	4694      	mov	ip, r2
 8003166:	44bc      	add	ip, r7
 8003168:	4463      	add	r3, ip
 800316a:	881a      	ldrh	r2, [r3, #0]
 800316c:	2380      	movs	r3, #128	; 0x80
 800316e:	185b      	adds	r3, r3, r1
 8003170:	2008      	movs	r0, #8
 8003172:	4684      	mov	ip, r0
 8003174:	2008      	movs	r0, #8
 8003176:	4681      	mov	r9, r0
 8003178:	44b9      	add	r9, r7
 800317a:	44cc      	add	ip, r9
 800317c:	4463      	add	r3, ip
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	189b      	adds	r3, r3, r2
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	001d      	movs	r5, r3
 8003186:	2264      	movs	r2, #100	; 0x64
 8003188:	1853      	adds	r3, r2, r1
 800318a:	2008      	movs	r0, #8
 800318c:	4684      	mov	ip, r0
 800318e:	44bc      	add	ip, r7
 8003190:	4463      	add	r3, ip
 8003192:	8818      	ldrh	r0, [r3, #0]
 8003194:	0016      	movs	r6, r2
 8003196:	1853      	adds	r3, r2, r1
 8003198:	2208      	movs	r2, #8
 800319a:	4694      	mov	ip, r2
 800319c:	44bc      	add	ip, r7
 800319e:	4463      	add	r3, ip
 80031a0:	881c      	ldrh	r4, [r3, #0]
 80031a2:	497e      	ldr	r1, [pc, #504]	; (800339c <printASCIIarray+0x654>)
 80031a4:	002a      	movs	r2, r5
 80031a6:	00d2      	lsls	r2, r2, #3
 80031a8:	1b52      	subs	r2, r2, r5
 80031aa:	00d3      	lsls	r3, r2, #3
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	18cb      	adds	r3, r1, r3
 80031b0:	5c1b      	ldrb	r3, [r3, r0]
 80031b2:	22b4      	movs	r2, #180	; 0xb4
 80031b4:	0052      	lsls	r2, r2, #1
 80031b6:	2108      	movs	r1, #8
 80031b8:	1852      	adds	r2, r2, r1
 80031ba:	19d2      	adds	r2, r2, r7
 80031bc:	6812      	ldr	r2, [r2, #0]
 80031be:	5513      	strb	r3, [r2, r4]
					for(j=0;j<symLen;j++){
 80031c0:	0032      	movs	r2, r6
 80031c2:	218c      	movs	r1, #140	; 0x8c
 80031c4:	0049      	lsls	r1, r1, #1
 80031c6:	1853      	adds	r3, r2, r1
 80031c8:	2008      	movs	r0, #8
 80031ca:	4684      	mov	ip, r0
 80031cc:	44bc      	add	ip, r7
 80031ce:	4463      	add	r3, ip
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	1852      	adds	r2, r2, r1
 80031d4:	2108      	movs	r1, #8
 80031d6:	468c      	mov	ip, r1
 80031d8:	44bc      	add	ip, r7
 80031da:	4462      	add	r2, ip
 80031dc:	3301      	adds	r3, #1
 80031de:	8013      	strh	r3, [r2, #0]
 80031e0:	2364      	movs	r3, #100	; 0x64
 80031e2:	218c      	movs	r1, #140	; 0x8c
 80031e4:	0049      	lsls	r1, r1, #1
 80031e6:	185b      	adds	r3, r3, r1
 80031e8:	2208      	movs	r2, #8
 80031ea:	18ba      	adds	r2, r7, r2
 80031ec:	189a      	adds	r2, r3, r2
 80031ee:	235a      	movs	r3, #90	; 0x5a
 80031f0:	185b      	adds	r3, r3, r1
 80031f2:	2008      	movs	r0, #8
 80031f4:	4684      	mov	ip, r0
 80031f6:	44bc      	add	ip, r7
 80031f8:	4463      	add	r3, ip
 80031fa:	8812      	ldrh	r2, [r2, #0]
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d3ab      	bcc.n	800315a <printASCIIarray+0x412>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 8003202:	2366      	movs	r3, #102	; 0x66
 8003204:	185b      	adds	r3, r3, r1
 8003206:	2208      	movs	r2, #8
 8003208:	18ba      	adds	r2, r7, r2
 800320a:	189a      	adds	r2, r3, r2
 800320c:	2300      	movs	r3, #0
 800320e:	8013      	strh	r3, [r2, #0]
 8003210:	e030      	b.n	8003274 <printASCIIarray+0x52c>
						weoBuffer[k]=weoBuffer[k] & contrast;
 8003212:	2066      	movs	r0, #102	; 0x66
 8003214:	248c      	movs	r4, #140	; 0x8c
 8003216:	0064      	lsls	r4, r4, #1
 8003218:	1903      	adds	r3, r0, r4
 800321a:	2208      	movs	r2, #8
 800321c:	4694      	mov	ip, r2
 800321e:	44bc      	add	ip, r7
 8003220:	4463      	add	r3, ip
 8003222:	881a      	ldrh	r2, [r3, #0]
 8003224:	25b4      	movs	r5, #180	; 0xb4
 8003226:	006d      	lsls	r5, r5, #1
 8003228:	2308      	movs	r3, #8
 800322a:	18eb      	adds	r3, r5, r3
 800322c:	19db      	adds	r3, r3, r7
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	5c9a      	ldrb	r2, [r3, r2]
 8003232:	1903      	adds	r3, r0, r4
 8003234:	2108      	movs	r1, #8
 8003236:	468c      	mov	ip, r1
 8003238:	44bc      	add	ip, r7
 800323a:	4463      	add	r3, ip
 800323c:	8819      	ldrh	r1, [r3, #0]
 800323e:	235c      	movs	r3, #92	; 0x5c
 8003240:	191b      	adds	r3, r3, r4
 8003242:	2608      	movs	r6, #8
 8003244:	46b4      	mov	ip, r6
 8003246:	44bc      	add	ip, r7
 8003248:	4463      	add	r3, ip
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	4013      	ands	r3, r2
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2208      	movs	r2, #8
 8003252:	18aa      	adds	r2, r5, r2
 8003254:	19d2      	adds	r2, r2, r7
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	5453      	strb	r3, [r2, r1]
					for (k=0;k<symLen;k++){
 800325a:	1903      	adds	r3, r0, r4
 800325c:	2208      	movs	r2, #8
 800325e:	4694      	mov	ip, r2
 8003260:	44bc      	add	ip, r7
 8003262:	4463      	add	r3, ip
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	1902      	adds	r2, r0, r4
 8003268:	2108      	movs	r1, #8
 800326a:	468c      	mov	ip, r1
 800326c:	44bc      	add	ip, r7
 800326e:	4462      	add	r2, ip
 8003270:	3301      	adds	r3, #1
 8003272:	8013      	strh	r3, [r2, #0]
 8003274:	2366      	movs	r3, #102	; 0x66
 8003276:	258c      	movs	r5, #140	; 0x8c
 8003278:	006d      	lsls	r5, r5, #1
 800327a:	195b      	adds	r3, r3, r5
 800327c:	2208      	movs	r2, #8
 800327e:	18ba      	adds	r2, r7, r2
 8003280:	189a      	adds	r2, r3, r2
 8003282:	235a      	movs	r3, #90	; 0x5a
 8003284:	195b      	adds	r3, r3, r5
 8003286:	2108      	movs	r1, #8
 8003288:	468c      	mov	ip, r1
 800328a:	44bc      	add	ip, r7
 800328c:	4463      	add	r3, ip
 800328e:	8812      	ldrh	r2, [r2, #0]
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	429a      	cmp	r2, r3
 8003294:	d3bd      	bcc.n	8003212 <printASCIIarray+0x4ca>
					}
				weoDrawRectangleFilled(ASCII_X, imY, (ASCII_X+X_increment-1), imY + ASCII_height - decY, 0xFF, weoBuffer);
 8003296:	205f      	movs	r0, #95	; 0x5f
 8003298:	1943      	adds	r3, r0, r5
 800329a:	2208      	movs	r2, #8
 800329c:	18ba      	adds	r2, r7, r2
 800329e:	189a      	adds	r2, r3, r2
 80032a0:	233f      	movs	r3, #63	; 0x3f
 80032a2:	001e      	movs	r6, r3
 80032a4:	195b      	adds	r3, r3, r5
 80032a6:	2108      	movs	r1, #8
 80032a8:	468c      	mov	ip, r1
 80032aa:	44bc      	add	ip, r7
 80032ac:	4463      	add	r3, ip
 80032ae:	7812      	ldrb	r2, [r2, #0]
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	18d3      	adds	r3, r2, r3
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b2dc      	uxtb	r4, r3
 80032ba:	218f      	movs	r1, #143	; 0x8f
 80032bc:	0049      	lsls	r1, r1, #1
 80032be:	2308      	movs	r3, #8
 80032c0:	18cb      	adds	r3, r1, r3
 80032c2:	19da      	adds	r2, r3, r7
 80032c4:	213e      	movs	r1, #62	; 0x3e
 80032c6:	194b      	adds	r3, r1, r5
 80032c8:	2108      	movs	r1, #8
 80032ca:	468c      	mov	ip, r1
 80032cc:	44bc      	add	ip, r7
 80032ce:	4463      	add	r3, ip
 80032d0:	7812      	ldrb	r2, [r2, #0]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	18d3      	adds	r3, r2, r3
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	2160      	movs	r1, #96	; 0x60
 80032da:	194b      	adds	r3, r1, r5
 80032dc:	2108      	movs	r1, #8
 80032de:	468c      	mov	ip, r1
 80032e0:	44bc      	add	ip, r7
 80032e2:	4463      	add	r3, ip
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	4699      	mov	r9, r3
 80032ec:	218f      	movs	r1, #143	; 0x8f
 80032ee:	0049      	lsls	r1, r1, #1
 80032f0:	2308      	movs	r3, #8
 80032f2:	18cb      	adds	r3, r1, r3
 80032f4:	19db      	adds	r3, r3, r7
 80032f6:	7819      	ldrb	r1, [r3, #0]
 80032f8:	0005      	movs	r5, r0
 80032fa:	238c      	movs	r3, #140	; 0x8c
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	18c3      	adds	r3, r0, r3
 8003300:	2208      	movs	r2, #8
 8003302:	4694      	mov	ip, r2
 8003304:	44bc      	add	ip, r7
 8003306:	4463      	add	r3, ip
 8003308:	7818      	ldrb	r0, [r3, #0]
 800330a:	23b4      	movs	r3, #180	; 0xb4
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	2208      	movs	r2, #8
 8003310:	189b      	adds	r3, r3, r2
 8003312:	19db      	adds	r3, r3, r7
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	9301      	str	r3, [sp, #4]
 8003318:	23ff      	movs	r3, #255	; 0xff
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	464b      	mov	r3, r9
 800331e:	0022      	movs	r2, r4
 8003320:	f7fe f902 	bl	8001528 <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 8003324:	208c      	movs	r0, #140	; 0x8c
 8003326:	0040      	lsls	r0, r0, #1
 8003328:	182b      	adds	r3, r5, r0
 800332a:	2208      	movs	r2, #8
 800332c:	18ba      	adds	r2, r7, r2
 800332e:	1899      	adds	r1, r3, r2
 8003330:	182b      	adds	r3, r5, r0
 8003332:	2208      	movs	r2, #8
 8003334:	18ba      	adds	r2, r7, r2
 8003336:	189a      	adds	r2, r3, r2
 8003338:	0033      	movs	r3, r6
 800333a:	181b      	adds	r3, r3, r0
 800333c:	2408      	movs	r4, #8
 800333e:	46a4      	mov	ip, r4
 8003340:	44bc      	add	ip, r7
 8003342:	4463      	add	r3, ip
 8003344:	7812      	ldrb	r2, [r2, #0]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	18d3      	adds	r3, r2, r3
 800334a:	700b      	strb	r3, [r1, #0]
				for(i=0;i<strLen;i++){
 800334c:	2262      	movs	r2, #98	; 0x62
 800334e:	1813      	adds	r3, r2, r0
 8003350:	2108      	movs	r1, #8
 8003352:	468c      	mov	ip, r1
 8003354:	44bc      	add	ip, r7
 8003356:	4463      	add	r3, ip
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	1812      	adds	r2, r2, r0
 800335c:	2108      	movs	r1, #8
 800335e:	468c      	mov	ip, r1
 8003360:	44bc      	add	ip, r7
 8003362:	4462      	add	r2, ip
 8003364:	3301      	adds	r3, #1
 8003366:	8013      	strh	r3, [r2, #0]
 8003368:	231e      	movs	r3, #30
 800336a:	33ff      	adds	r3, #255	; 0xff
 800336c:	2208      	movs	r2, #8
 800336e:	189b      	adds	r3, r3, r2
 8003370:	19db      	adds	r3, r3, r7
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	b29a      	uxth	r2, r3
 8003376:	2162      	movs	r1, #98	; 0x62
 8003378:	208c      	movs	r0, #140	; 0x8c
 800337a:	0040      	lsls	r0, r0, #1
 800337c:	180b      	adds	r3, r1, r0
 800337e:	2408      	movs	r4, #8
 8003380:	46a4      	mov	ip, r4
 8003382:	44bc      	add	ip, r7
 8003384:	4463      	add	r3, ip
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	4293      	cmp	r3, r2
 800338a:	d200      	bcs.n	800338e <printASCIIarray+0x646>
 800338c:	e6db      	b.n	8003146 <printASCIIarray+0x3fe>
				}
				for(i=0;i<symLen;i++){
 800338e:	180b      	adds	r3, r1, r0
 8003390:	2208      	movs	r2, #8
 8003392:	18ba      	adds	r2, r7, r2
 8003394:	189a      	adds	r2, r3, r2
 8003396:	2300      	movs	r3, #0
 8003398:	8013      	strh	r3, [r2, #0]
 800339a:	e020      	b.n	80033de <printASCIIarray+0x696>
 800339c:	0800ca7c 	.word	0x0800ca7c
									weoBuffer[j]=0x00;
 80033a0:	2364      	movs	r3, #100	; 0x64
 80033a2:	208c      	movs	r0, #140	; 0x8c
 80033a4:	0040      	lsls	r0, r0, #1
 80033a6:	181b      	adds	r3, r3, r0
 80033a8:	2208      	movs	r2, #8
 80033aa:	4694      	mov	ip, r2
 80033ac:	44bc      	add	ip, r7
 80033ae:	4463      	add	r3, ip
 80033b0:	8819      	ldrh	r1, [r3, #0]
 80033b2:	23b4      	movs	r3, #180	; 0xb4
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	2208      	movs	r2, #8
 80033b8:	189b      	adds	r3, r3, r2
 80033ba:	19db      	adds	r3, r3, r7
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	2300      	movs	r3, #0
 80033c0:	5453      	strb	r3, [r2, r1]
				for(i=0;i<symLen;i++){
 80033c2:	2262      	movs	r2, #98	; 0x62
 80033c4:	1813      	adds	r3, r2, r0
 80033c6:	2108      	movs	r1, #8
 80033c8:	468c      	mov	ip, r1
 80033ca:	44bc      	add	ip, r7
 80033cc:	4463      	add	r3, ip
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	1812      	adds	r2, r2, r0
 80033d2:	2108      	movs	r1, #8
 80033d4:	468c      	mov	ip, r1
 80033d6:	44bc      	add	ip, r7
 80033d8:	4462      	add	r2, ip
 80033da:	3301      	adds	r3, #1
 80033dc:	8013      	strh	r3, [r2, #0]
 80033de:	2362      	movs	r3, #98	; 0x62
 80033e0:	218c      	movs	r1, #140	; 0x8c
 80033e2:	0049      	lsls	r1, r1, #1
 80033e4:	185b      	adds	r3, r3, r1
 80033e6:	2208      	movs	r2, #8
 80033e8:	18ba      	adds	r2, r7, r2
 80033ea:	189a      	adds	r2, r3, r2
 80033ec:	235a      	movs	r3, #90	; 0x5a
 80033ee:	185b      	adds	r3, r3, r1
 80033f0:	2108      	movs	r1, #8
 80033f2:	468c      	mov	ip, r1
 80033f4:	44bc      	add	ip, r7
 80033f6:	4463      	add	r3, ip
 80033f8:	8812      	ldrh	r2, [r2, #0]
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d3cf      	bcc.n	80033a0 <printASCIIarray+0x658>
 8003400:	46c5      	mov	sp, r8
							}
			}
			if(fontCur==1){
 8003402:	2361      	movs	r3, #97	; 0x61
 8003404:	228c      	movs	r2, #140	; 0x8c
 8003406:	0052      	lsls	r2, r2, #1
 8003408:	189b      	adds	r3, r3, r2
 800340a:	2108      	movs	r1, #8
 800340c:	468c      	mov	ip, r1
 800340e:	44bc      	add	ip, r7
 8003410:	4463      	add	r3, ip
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d000      	beq.n	800341a <printASCIIarray+0x6d2>
 8003418:	e29b      	b.n	8003952 <printASCIIarray+0xc0a>
 800341a:	466b      	mov	r3, sp
 800341c:	4698      	mov	r8, r3
				symLen=63;
 800341e:	245a      	movs	r4, #90	; 0x5a
 8003420:	0016      	movs	r6, r2
 8003422:	18a3      	adds	r3, r4, r2
 8003424:	2208      	movs	r2, #8
 8003426:	18ba      	adds	r2, r7, r2
 8003428:	189a      	adds	r2, r3, r2
 800342a:	233f      	movs	r3, #63	; 0x3f
 800342c:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 800342e:	2390      	movs	r3, #144	; 0x90
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	18fb      	adds	r3, r7, r3
 8003434:	601c      	str	r4, [r3, #0]
 8003436:	19a3      	adds	r3, r4, r6
 8003438:	2208      	movs	r2, #8
 800343a:	4694      	mov	ip, r2
 800343c:	44bc      	add	ip, r7
 800343e:	4463      	add	r3, ip
 8003440:	881a      	ldrh	r2, [r3, #0]
 8003442:	0013      	movs	r3, r2
 8003444:	3b01      	subs	r3, #1
 8003446:	21a8      	movs	r1, #168	; 0xa8
 8003448:	0049      	lsls	r1, r1, #1
 800344a:	2008      	movs	r0, #8
 800344c:	1809      	adds	r1, r1, r0
 800344e:	19c9      	adds	r1, r1, r7
 8003450:	600b      	str	r3, [r1, #0]
 8003452:	663a      	str	r2, [r7, #96]	; 0x60
 8003454:	2300      	movs	r3, #0
 8003456:	667b      	str	r3, [r7, #100]	; 0x64
 8003458:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800345a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800345c:	0003      	movs	r3, r0
 800345e:	0f5b      	lsrs	r3, r3, #29
 8003460:	000e      	movs	r6, r1
 8003462:	00f6      	lsls	r6, r6, #3
 8003464:	25ec      	movs	r5, #236	; 0xec
 8003466:	2408      	movs	r4, #8
 8003468:	192c      	adds	r4, r5, r4
 800346a:	19e4      	adds	r4, r4, r7
 800346c:	6026      	str	r6, [r4, #0]
 800346e:	2408      	movs	r4, #8
 8003470:	192c      	adds	r4, r5, r4
 8003472:	19e4      	adds	r4, r4, r7
 8003474:	6826      	ldr	r6, [r4, #0]
 8003476:	431e      	orrs	r6, r3
 8003478:	2308      	movs	r3, #8
 800347a:	18eb      	adds	r3, r5, r3
 800347c:	19db      	adds	r3, r3, r7
 800347e:	601e      	str	r6, [r3, #0]
 8003480:	0003      	movs	r3, r0
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	21e8      	movs	r1, #232	; 0xe8
 8003486:	2008      	movs	r0, #8
 8003488:	1809      	adds	r1, r1, r0
 800348a:	19c9      	adds	r1, r1, r7
 800348c:	600b      	str	r3, [r1, #0]
 800348e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003490:	2300      	movs	r3, #0
 8003492:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003494:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003496:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003498:	0003      	movs	r3, r0
 800349a:	0f5b      	lsrs	r3, r3, #29
 800349c:	000e      	movs	r6, r1
 800349e:	00f6      	lsls	r6, r6, #3
 80034a0:	25e4      	movs	r5, #228	; 0xe4
 80034a2:	2408      	movs	r4, #8
 80034a4:	192c      	adds	r4, r5, r4
 80034a6:	19e4      	adds	r4, r4, r7
 80034a8:	6026      	str	r6, [r4, #0]
 80034aa:	2408      	movs	r4, #8
 80034ac:	192c      	adds	r4, r5, r4
 80034ae:	19e6      	adds	r6, r4, r7
 80034b0:	6836      	ldr	r6, [r6, #0]
 80034b2:	431e      	orrs	r6, r3
 80034b4:	2308      	movs	r3, #8
 80034b6:	18eb      	adds	r3, r5, r3
 80034b8:	19db      	adds	r3, r3, r7
 80034ba:	601e      	str	r6, [r3, #0]
 80034bc:	0003      	movs	r3, r0
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	21e0      	movs	r1, #224	; 0xe0
 80034c2:	2008      	movs	r0, #8
 80034c4:	1809      	adds	r1, r1, r0
 80034c6:	19c9      	adds	r1, r1, r7
 80034c8:	600b      	str	r3, [r1, #0]
 80034ca:	0013      	movs	r3, r2
 80034cc:	3307      	adds	r3, #7
 80034ce:	08db      	lsrs	r3, r3, #3
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	466a      	mov	r2, sp
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	469d      	mov	sp, r3
 80034d8:	ab02      	add	r3, sp, #8
 80034da:	3300      	adds	r3, #0
 80034dc:	21a6      	movs	r1, #166	; 0xa6
 80034de:	0049      	lsls	r1, r1, #1
 80034e0:	2208      	movs	r2, #8
 80034e2:	188a      	adds	r2, r1, r2
 80034e4:	19d1      	adds	r1, r2, r7
 80034e6:	600b      	str	r3, [r1, #0]
				uint8_t weoBuffer1[symLen];
 80034e8:	2390      	movs	r3, #144	; 0x90
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	18fb      	adds	r3, r7, r3
 80034ee:	681c      	ldr	r4, [r3, #0]
 80034f0:	2390      	movs	r3, #144	; 0x90
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	18fb      	adds	r3, r7, r3
 80034f6:	601c      	str	r4, [r3, #0]
 80034f8:	268c      	movs	r6, #140	; 0x8c
 80034fa:	0076      	lsls	r6, r6, #1
 80034fc:	19a3      	adds	r3, r4, r6
 80034fe:	2208      	movs	r2, #8
 8003500:	4694      	mov	ip, r2
 8003502:	44bc      	add	ip, r7
 8003504:	4463      	add	r3, ip
 8003506:	881a      	ldrh	r2, [r3, #0]
 8003508:	0013      	movs	r3, r2
 800350a:	3b01      	subs	r3, #1
 800350c:	21a4      	movs	r1, #164	; 0xa4
 800350e:	0049      	lsls	r1, r1, #1
 8003510:	2008      	movs	r0, #8
 8003512:	1809      	adds	r1, r1, r0
 8003514:	19c9      	adds	r1, r1, r7
 8003516:	600b      	str	r3, [r1, #0]
 8003518:	653a      	str	r2, [r7, #80]	; 0x50
 800351a:	2300      	movs	r3, #0
 800351c:	657b      	str	r3, [r7, #84]	; 0x54
 800351e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003520:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003522:	0003      	movs	r3, r0
 8003524:	0f5b      	lsrs	r3, r3, #29
 8003526:	000e      	movs	r6, r1
 8003528:	00f6      	lsls	r6, r6, #3
 800352a:	25dc      	movs	r5, #220	; 0xdc
 800352c:	2408      	movs	r4, #8
 800352e:	192c      	adds	r4, r5, r4
 8003530:	19e4      	adds	r4, r4, r7
 8003532:	6026      	str	r6, [r4, #0]
 8003534:	2408      	movs	r4, #8
 8003536:	192c      	adds	r4, r5, r4
 8003538:	19e4      	adds	r4, r4, r7
 800353a:	6826      	ldr	r6, [r4, #0]
 800353c:	431e      	orrs	r6, r3
 800353e:	2308      	movs	r3, #8
 8003540:	18eb      	adds	r3, r5, r3
 8003542:	19db      	adds	r3, r3, r7
 8003544:	601e      	str	r6, [r3, #0]
 8003546:	0003      	movs	r3, r0
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	21d8      	movs	r1, #216	; 0xd8
 800354c:	2008      	movs	r0, #8
 800354e:	1809      	adds	r1, r1, r0
 8003550:	19c9      	adds	r1, r1, r7
 8003552:	600b      	str	r3, [r1, #0]
 8003554:	64ba      	str	r2, [r7, #72]	; 0x48
 8003556:	2300      	movs	r3, #0
 8003558:	64fb      	str	r3, [r7, #76]	; 0x4c
 800355a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800355c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800355e:	0003      	movs	r3, r0
 8003560:	0f5b      	lsrs	r3, r3, #29
 8003562:	000e      	movs	r6, r1
 8003564:	00f6      	lsls	r6, r6, #3
 8003566:	25d4      	movs	r5, #212	; 0xd4
 8003568:	2408      	movs	r4, #8
 800356a:	192c      	adds	r4, r5, r4
 800356c:	19e4      	adds	r4, r4, r7
 800356e:	6026      	str	r6, [r4, #0]
 8003570:	2408      	movs	r4, #8
 8003572:	192c      	adds	r4, r5, r4
 8003574:	19e6      	adds	r6, r4, r7
 8003576:	6836      	ldr	r6, [r6, #0]
 8003578:	431e      	orrs	r6, r3
 800357a:	2308      	movs	r3, #8
 800357c:	18eb      	adds	r3, r5, r3
 800357e:	19db      	adds	r3, r3, r7
 8003580:	601e      	str	r6, [r3, #0]
 8003582:	0003      	movs	r3, r0
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	21d0      	movs	r1, #208	; 0xd0
 8003588:	2008      	movs	r0, #8
 800358a:	1809      	adds	r1, r1, r0
 800358c:	19c9      	adds	r1, r1, r7
 800358e:	600b      	str	r3, [r1, #0]
 8003590:	0013      	movs	r3, r2
 8003592:	3307      	adds	r3, #7
 8003594:	08db      	lsrs	r3, r3, #3
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	466a      	mov	r2, sp
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	469d      	mov	sp, r3
 800359e:	ab02      	add	r3, sp, #8
 80035a0:	3300      	adds	r3, #0
 80035a2:	21a2      	movs	r1, #162	; 0xa2
 80035a4:	0049      	lsls	r1, r1, #1
 80035a6:	2208      	movs	r2, #8
 80035a8:	188a      	adds	r2, r1, r2
 80035aa:	19d1      	adds	r1, r2, r7
 80035ac:	600b      	str	r3, [r1, #0]
				uint8_t weoBuffer2[symLen];
 80035ae:	2390      	movs	r3, #144	; 0x90
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	18fb      	adds	r3, r7, r3
 80035b4:	681c      	ldr	r4, [r3, #0]
 80035b6:	268c      	movs	r6, #140	; 0x8c
 80035b8:	0076      	lsls	r6, r6, #1
 80035ba:	19a3      	adds	r3, r4, r6
 80035bc:	2208      	movs	r2, #8
 80035be:	4694      	mov	ip, r2
 80035c0:	44bc      	add	ip, r7
 80035c2:	4463      	add	r3, ip
 80035c4:	881a      	ldrh	r2, [r3, #0]
 80035c6:	0013      	movs	r3, r2
 80035c8:	3b01      	subs	r3, #1
 80035ca:	21a0      	movs	r1, #160	; 0xa0
 80035cc:	0049      	lsls	r1, r1, #1
 80035ce:	2008      	movs	r0, #8
 80035d0:	1809      	adds	r1, r1, r0
 80035d2:	19c9      	adds	r1, r1, r7
 80035d4:	600b      	str	r3, [r1, #0]
 80035d6:	643a      	str	r2, [r7, #64]	; 0x40
 80035d8:	2300      	movs	r3, #0
 80035da:	647b      	str	r3, [r7, #68]	; 0x44
 80035dc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80035de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80035e0:	0003      	movs	r3, r0
 80035e2:	0f5b      	lsrs	r3, r3, #29
 80035e4:	000c      	movs	r4, r1
 80035e6:	00e4      	lsls	r4, r4, #3
 80035e8:	25cc      	movs	r5, #204	; 0xcc
 80035ea:	2608      	movs	r6, #8
 80035ec:	19ae      	adds	r6, r5, r6
 80035ee:	19f6      	adds	r6, r6, r7
 80035f0:	6034      	str	r4, [r6, #0]
 80035f2:	2408      	movs	r4, #8
 80035f4:	192c      	adds	r4, r5, r4
 80035f6:	19e4      	adds	r4, r4, r7
 80035f8:	6824      	ldr	r4, [r4, #0]
 80035fa:	431c      	orrs	r4, r3
 80035fc:	2308      	movs	r3, #8
 80035fe:	18eb      	adds	r3, r5, r3
 8003600:	19db      	adds	r3, r3, r7
 8003602:	601c      	str	r4, [r3, #0]
 8003604:	0003      	movs	r3, r0
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	21c8      	movs	r1, #200	; 0xc8
 800360a:	2008      	movs	r0, #8
 800360c:	1809      	adds	r1, r1, r0
 800360e:	19c9      	adds	r1, r1, r7
 8003610:	600b      	str	r3, [r1, #0]
 8003612:	63ba      	str	r2, [r7, #56]	; 0x38
 8003614:	2300      	movs	r3, #0
 8003616:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003618:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800361a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800361c:	0003      	movs	r3, r0
 800361e:	0f5b      	lsrs	r3, r3, #29
 8003620:	469c      	mov	ip, r3
 8003622:	000c      	movs	r4, r1
 8003624:	00e4      	lsls	r4, r4, #3
 8003626:	25c4      	movs	r5, #196	; 0xc4
 8003628:	002e      	movs	r6, r5
 800362a:	2308      	movs	r3, #8
 800362c:	18ed      	adds	r5, r5, r3
 800362e:	19ed      	adds	r5, r5, r7
 8003630:	602c      	str	r4, [r5, #0]
 8003632:	0034      	movs	r4, r6
 8003634:	0026      	movs	r6, r4
 8003636:	2308      	movs	r3, #8
 8003638:	18e3      	adds	r3, r4, r3
 800363a:	19dd      	adds	r5, r3, r7
 800363c:	682c      	ldr	r4, [r5, #0]
 800363e:	4663      	mov	r3, ip
 8003640:	431c      	orrs	r4, r3
 8003642:	0033      	movs	r3, r6
 8003644:	2508      	movs	r5, #8
 8003646:	195b      	adds	r3, r3, r5
 8003648:	19db      	adds	r3, r3, r7
 800364a:	601c      	str	r4, [r3, #0]
 800364c:	0003      	movs	r3, r0
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	21c0      	movs	r1, #192	; 0xc0
 8003652:	2008      	movs	r0, #8
 8003654:	1809      	adds	r1, r1, r0
 8003656:	19c9      	adds	r1, r1, r7
 8003658:	600b      	str	r3, [r1, #0]
 800365a:	0013      	movs	r3, r2
 800365c:	3307      	adds	r3, #7
 800365e:	08db      	lsrs	r3, r3, #3
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	466a      	mov	r2, sp
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	469d      	mov	sp, r3
 8003668:	ab02      	add	r3, sp, #8
 800366a:	3300      	adds	r3, #0
 800366c:	229e      	movs	r2, #158	; 0x9e
 800366e:	0052      	lsls	r2, r2, #1
 8003670:	2108      	movs	r1, #8
 8003672:	1852      	adds	r2, r2, r1
 8003674:	19d2      	adds	r2, r2, r7
 8003676:	6013      	str	r3, [r2, #0]
				X_increment=0x07;
 8003678:	233f      	movs	r3, #63	; 0x3f
 800367a:	268c      	movs	r6, #140	; 0x8c
 800367c:	0076      	lsls	r6, r6, #1
 800367e:	199b      	adds	r3, r3, r6
 8003680:	2208      	movs	r2, #8
 8003682:	18ba      	adds	r2, r7, r2
 8003684:	189a      	adds	r2, r3, r2
 8003686:	2307      	movs	r3, #7
 8003688:	7013      	strb	r3, [r2, #0]
				ASCII_height=0x12;
 800368a:	233e      	movs	r3, #62	; 0x3e
 800368c:	199b      	adds	r3, r3, r6
 800368e:	2208      	movs	r2, #8
 8003690:	18ba      	adds	r2, r7, r2
 8003692:	189a      	adds	r2, r3, r2
 8003694:	2312      	movs	r3, #18
 8003696:	7013      	strb	r3, [r2, #0]
				for(i=0;i<strLen;i++){
 8003698:	2362      	movs	r3, #98	; 0x62
 800369a:	199b      	adds	r3, r3, r6
 800369c:	2208      	movs	r2, #8
 800369e:	18ba      	adds	r2, r7, r2
 80036a0:	189a      	adds	r2, r3, r2
 80036a2:	2300      	movs	r3, #0
 80036a4:	8013      	strh	r3, [r2, #0]
 80036a6:	e107      	b.n	80038b8 <printASCIIarray+0xb70>
					for(j=0;j<symLen;j++){
 80036a8:	2364      	movs	r3, #100	; 0x64
 80036aa:	228c      	movs	r2, #140	; 0x8c
 80036ac:	0052      	lsls	r2, r2, #1
 80036ae:	189b      	adds	r3, r3, r2
 80036b0:	2208      	movs	r2, #8
 80036b2:	18ba      	adds	r2, r7, r2
 80036b4:	189a      	adds	r2, r3, r2
 80036b6:	2300      	movs	r3, #0
 80036b8:	8013      	strh	r3, [r2, #0]
 80036ba:	e03f      	b.n	800373c <printASCIIarray+0x9f4>
						weoBuffer[j]=F2[dataASCII[i]][j];
 80036bc:	2362      	movs	r3, #98	; 0x62
 80036be:	218c      	movs	r1, #140	; 0x8c
 80036c0:	0049      	lsls	r1, r1, #1
 80036c2:	185b      	adds	r3, r3, r1
 80036c4:	2208      	movs	r2, #8
 80036c6:	4694      	mov	ip, r2
 80036c8:	44bc      	add	ip, r7
 80036ca:	4463      	add	r3, ip
 80036cc:	881a      	ldrh	r2, [r3, #0]
 80036ce:	2380      	movs	r3, #128	; 0x80
 80036d0:	185b      	adds	r3, r3, r1
 80036d2:	2008      	movs	r0, #8
 80036d4:	4684      	mov	ip, r0
 80036d6:	2008      	movs	r0, #8
 80036d8:	4681      	mov	r9, r0
 80036da:	44b9      	add	r9, r7
 80036dc:	44cc      	add	ip, r9
 80036de:	4463      	add	r3, ip
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	189b      	adds	r3, r3, r2
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	001c      	movs	r4, r3
 80036e8:	2664      	movs	r6, #100	; 0x64
 80036ea:	000a      	movs	r2, r1
 80036ec:	1873      	adds	r3, r6, r1
 80036ee:	2108      	movs	r1, #8
 80036f0:	468c      	mov	ip, r1
 80036f2:	44bc      	add	ip, r7
 80036f4:	4463      	add	r3, ip
 80036f6:	8819      	ldrh	r1, [r3, #0]
 80036f8:	0015      	movs	r5, r2
 80036fa:	18b3      	adds	r3, r6, r2
 80036fc:	2208      	movs	r2, #8
 80036fe:	4694      	mov	ip, r2
 8003700:	44bc      	add	ip, r7
 8003702:	4463      	add	r3, ip
 8003704:	8818      	ldrh	r0, [r3, #0]
 8003706:	4a79      	ldr	r2, [pc, #484]	; (80038ec <printASCIIarray+0xba4>)
 8003708:	0023      	movs	r3, r4
 800370a:	019b      	lsls	r3, r3, #6
 800370c:	1b1b      	subs	r3, r3, r4
 800370e:	18d3      	adds	r3, r2, r3
 8003710:	5c5b      	ldrb	r3, [r3, r1]
 8003712:	24a6      	movs	r4, #166	; 0xa6
 8003714:	0064      	lsls	r4, r4, #1
 8003716:	2208      	movs	r2, #8
 8003718:	18a2      	adds	r2, r4, r2
 800371a:	19d4      	adds	r4, r2, r7
 800371c:	6822      	ldr	r2, [r4, #0]
 800371e:	5413      	strb	r3, [r2, r0]
					for(j=0;j<symLen;j++){
 8003720:	0029      	movs	r1, r5
 8003722:	1873      	adds	r3, r6, r1
 8003724:	2208      	movs	r2, #8
 8003726:	4694      	mov	ip, r2
 8003728:	44bc      	add	ip, r7
 800372a:	4463      	add	r3, ip
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	1872      	adds	r2, r6, r1
 8003730:	2108      	movs	r1, #8
 8003732:	468c      	mov	ip, r1
 8003734:	44bc      	add	ip, r7
 8003736:	4462      	add	r2, ip
 8003738:	3301      	adds	r3, #1
 800373a:	8013      	strh	r3, [r2, #0]
 800373c:	2364      	movs	r3, #100	; 0x64
 800373e:	218c      	movs	r1, #140	; 0x8c
 8003740:	0049      	lsls	r1, r1, #1
 8003742:	185b      	adds	r3, r3, r1
 8003744:	2208      	movs	r2, #8
 8003746:	18ba      	adds	r2, r7, r2
 8003748:	189a      	adds	r2, r3, r2
 800374a:	235a      	movs	r3, #90	; 0x5a
 800374c:	185b      	adds	r3, r3, r1
 800374e:	2008      	movs	r0, #8
 8003750:	4684      	mov	ip, r0
 8003752:	44bc      	add	ip, r7
 8003754:	4463      	add	r3, ip
 8003756:	8812      	ldrh	r2, [r2, #0]
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d3ae      	bcc.n	80036bc <printASCIIarray+0x974>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 800375e:	2366      	movs	r3, #102	; 0x66
 8003760:	185b      	adds	r3, r3, r1
 8003762:	2208      	movs	r2, #8
 8003764:	18ba      	adds	r2, r7, r2
 8003766:	189a      	adds	r2, r3, r2
 8003768:	2300      	movs	r3, #0
 800376a:	8013      	strh	r3, [r2, #0]
 800376c:	e030      	b.n	80037d0 <printASCIIarray+0xa88>
						weoBuffer[k]=weoBuffer[k] & contrast;
 800376e:	2066      	movs	r0, #102	; 0x66
 8003770:	248c      	movs	r4, #140	; 0x8c
 8003772:	0064      	lsls	r4, r4, #1
 8003774:	1903      	adds	r3, r0, r4
 8003776:	2208      	movs	r2, #8
 8003778:	4694      	mov	ip, r2
 800377a:	44bc      	add	ip, r7
 800377c:	4463      	add	r3, ip
 800377e:	881a      	ldrh	r2, [r3, #0]
 8003780:	25a6      	movs	r5, #166	; 0xa6
 8003782:	006d      	lsls	r5, r5, #1
 8003784:	2308      	movs	r3, #8
 8003786:	18eb      	adds	r3, r5, r3
 8003788:	19db      	adds	r3, r3, r7
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	5c9a      	ldrb	r2, [r3, r2]
 800378e:	1903      	adds	r3, r0, r4
 8003790:	2108      	movs	r1, #8
 8003792:	468c      	mov	ip, r1
 8003794:	44bc      	add	ip, r7
 8003796:	4463      	add	r3, ip
 8003798:	8819      	ldrh	r1, [r3, #0]
 800379a:	235c      	movs	r3, #92	; 0x5c
 800379c:	191b      	adds	r3, r3, r4
 800379e:	2608      	movs	r6, #8
 80037a0:	46b4      	mov	ip, r6
 80037a2:	44bc      	add	ip, r7
 80037a4:	4463      	add	r3, ip
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	4013      	ands	r3, r2
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2208      	movs	r2, #8
 80037ae:	18aa      	adds	r2, r5, r2
 80037b0:	19d2      	adds	r2, r2, r7
 80037b2:	6812      	ldr	r2, [r2, #0]
 80037b4:	5453      	strb	r3, [r2, r1]
					for (k=0;k<symLen;k++){
 80037b6:	1903      	adds	r3, r0, r4
 80037b8:	2208      	movs	r2, #8
 80037ba:	4694      	mov	ip, r2
 80037bc:	44bc      	add	ip, r7
 80037be:	4463      	add	r3, ip
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	1902      	adds	r2, r0, r4
 80037c4:	2108      	movs	r1, #8
 80037c6:	468c      	mov	ip, r1
 80037c8:	44bc      	add	ip, r7
 80037ca:	4462      	add	r2, ip
 80037cc:	3301      	adds	r3, #1
 80037ce:	8013      	strh	r3, [r2, #0]
 80037d0:	2366      	movs	r3, #102	; 0x66
 80037d2:	268c      	movs	r6, #140	; 0x8c
 80037d4:	0076      	lsls	r6, r6, #1
 80037d6:	199b      	adds	r3, r3, r6
 80037d8:	2208      	movs	r2, #8
 80037da:	18ba      	adds	r2, r7, r2
 80037dc:	189a      	adds	r2, r3, r2
 80037de:	235a      	movs	r3, #90	; 0x5a
 80037e0:	199b      	adds	r3, r3, r6
 80037e2:	2108      	movs	r1, #8
 80037e4:	468c      	mov	ip, r1
 80037e6:	44bc      	add	ip, r7
 80037e8:	4463      	add	r3, ip
 80037ea:	8812      	ldrh	r2, [r2, #0]
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d3bd      	bcc.n	800376e <printASCIIarray+0xa26>
					}
				weoDrawRectangleFilled(ASCII_X, imY, (ASCII_X+X_increment-1), imY + ASCII_height - decY, 0xFF, weoBuffer);
 80037f2:	205f      	movs	r0, #95	; 0x5f
 80037f4:	1983      	adds	r3, r0, r6
 80037f6:	2208      	movs	r2, #8
 80037f8:	18ba      	adds	r2, r7, r2
 80037fa:	189a      	adds	r2, r3, r2
 80037fc:	233f      	movs	r3, #63	; 0x3f
 80037fe:	199b      	adds	r3, r3, r6
 8003800:	2108      	movs	r1, #8
 8003802:	468c      	mov	ip, r1
 8003804:	44bc      	add	ip, r7
 8003806:	4463      	add	r3, ip
 8003808:	7812      	ldrb	r2, [r2, #0]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	18d3      	adds	r3, r2, r3
 800380e:	b2db      	uxtb	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b2dc      	uxtb	r4, r3
 8003814:	258f      	movs	r5, #143	; 0x8f
 8003816:	006d      	lsls	r5, r5, #1
 8003818:	2308      	movs	r3, #8
 800381a:	18eb      	adds	r3, r5, r3
 800381c:	19da      	adds	r2, r3, r7
 800381e:	213e      	movs	r1, #62	; 0x3e
 8003820:	198b      	adds	r3, r1, r6
 8003822:	2108      	movs	r1, #8
 8003824:	468c      	mov	ip, r1
 8003826:	44bc      	add	ip, r7
 8003828:	4463      	add	r3, ip
 800382a:	7812      	ldrb	r2, [r2, #0]
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	18d3      	adds	r3, r2, r3
 8003830:	b2da      	uxtb	r2, r3
 8003832:	2160      	movs	r1, #96	; 0x60
 8003834:	1989      	adds	r1, r1, r6
 8003836:	2308      	movs	r3, #8
 8003838:	18fb      	adds	r3, r7, r3
 800383a:	18cb      	adds	r3, r1, r3
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	b2da      	uxtb	r2, r3
 8003842:	2308      	movs	r3, #8
 8003844:	18eb      	adds	r3, r5, r3
 8003846:	19db      	adds	r3, r3, r7
 8003848:	7819      	ldrb	r1, [r3, #0]
 800384a:	0006      	movs	r6, r0
 800384c:	238c      	movs	r3, #140	; 0x8c
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	18c5      	adds	r5, r0, r3
 8003852:	2308      	movs	r3, #8
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	18eb      	adds	r3, r5, r3
 8003858:	7818      	ldrb	r0, [r3, #0]
 800385a:	25a6      	movs	r5, #166	; 0xa6
 800385c:	006d      	lsls	r5, r5, #1
 800385e:	2308      	movs	r3, #8
 8003860:	18eb      	adds	r3, r5, r3
 8003862:	19dd      	adds	r5, r3, r7
 8003864:	682b      	ldr	r3, [r5, #0]
 8003866:	9301      	str	r3, [sp, #4]
 8003868:	23ff      	movs	r3, #255	; 0xff
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	0013      	movs	r3, r2
 800386e:	0022      	movs	r2, r4
 8003870:	f7fd fe5a 	bl	8001528 <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 8003874:	208c      	movs	r0, #140	; 0x8c
 8003876:	0040      	lsls	r0, r0, #1
 8003878:	1833      	adds	r3, r6, r0
 800387a:	2208      	movs	r2, #8
 800387c:	18ba      	adds	r2, r7, r2
 800387e:	1899      	adds	r1, r3, r2
 8003880:	1833      	adds	r3, r6, r0
 8003882:	2208      	movs	r2, #8
 8003884:	18ba      	adds	r2, r7, r2
 8003886:	189a      	adds	r2, r3, r2
 8003888:	233f      	movs	r3, #63	; 0x3f
 800388a:	181b      	adds	r3, r3, r0
 800388c:	2408      	movs	r4, #8
 800388e:	46a4      	mov	ip, r4
 8003890:	44bc      	add	ip, r7
 8003892:	4463      	add	r3, ip
 8003894:	7812      	ldrb	r2, [r2, #0]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	18d3      	adds	r3, r2, r3
 800389a:	700b      	strb	r3, [r1, #0]
				for(i=0;i<strLen;i++){
 800389c:	2262      	movs	r2, #98	; 0x62
 800389e:	1813      	adds	r3, r2, r0
 80038a0:	2108      	movs	r1, #8
 80038a2:	468c      	mov	ip, r1
 80038a4:	44bc      	add	ip, r7
 80038a6:	4463      	add	r3, ip
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	1812      	adds	r2, r2, r0
 80038ac:	2108      	movs	r1, #8
 80038ae:	468c      	mov	ip, r1
 80038b0:	44bc      	add	ip, r7
 80038b2:	4462      	add	r2, ip
 80038b4:	3301      	adds	r3, #1
 80038b6:	8013      	strh	r3, [r2, #0]
 80038b8:	231e      	movs	r3, #30
 80038ba:	33ff      	adds	r3, #255	; 0xff
 80038bc:	2208      	movs	r2, #8
 80038be:	189b      	adds	r3, r3, r2
 80038c0:	19db      	adds	r3, r3, r7
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	2162      	movs	r1, #98	; 0x62
 80038c8:	208c      	movs	r0, #140	; 0x8c
 80038ca:	0040      	lsls	r0, r0, #1
 80038cc:	180b      	adds	r3, r1, r0
 80038ce:	2408      	movs	r4, #8
 80038d0:	46a4      	mov	ip, r4
 80038d2:	44bc      	add	ip, r7
 80038d4:	4463      	add	r3, ip
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	4293      	cmp	r3, r2
 80038da:	d200      	bcs.n	80038de <printASCIIarray+0xb96>
 80038dc:	e6e4      	b.n	80036a8 <printASCIIarray+0x960>
				}
				for(i=0;i<symLen;i++){
 80038de:	180b      	adds	r3, r1, r0
 80038e0:	2208      	movs	r2, #8
 80038e2:	18ba      	adds	r2, r7, r2
 80038e4:	189a      	adds	r2, r3, r2
 80038e6:	2300      	movs	r3, #0
 80038e8:	8013      	strh	r3, [r2, #0]
 80038ea:	e020      	b.n	800392e <printASCIIarray+0xbe6>
 80038ec:	0800fb7c 	.word	0x0800fb7c
									weoBuffer[j]=0x00;
 80038f0:	2364      	movs	r3, #100	; 0x64
 80038f2:	208c      	movs	r0, #140	; 0x8c
 80038f4:	0040      	lsls	r0, r0, #1
 80038f6:	181b      	adds	r3, r3, r0
 80038f8:	2208      	movs	r2, #8
 80038fa:	4694      	mov	ip, r2
 80038fc:	44bc      	add	ip, r7
 80038fe:	4463      	add	r3, ip
 8003900:	8819      	ldrh	r1, [r3, #0]
 8003902:	23a6      	movs	r3, #166	; 0xa6
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	2208      	movs	r2, #8
 8003908:	189b      	adds	r3, r3, r2
 800390a:	19db      	adds	r3, r3, r7
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	2300      	movs	r3, #0
 8003910:	5453      	strb	r3, [r2, r1]
				for(i=0;i<symLen;i++){
 8003912:	2262      	movs	r2, #98	; 0x62
 8003914:	1813      	adds	r3, r2, r0
 8003916:	2108      	movs	r1, #8
 8003918:	468c      	mov	ip, r1
 800391a:	44bc      	add	ip, r7
 800391c:	4463      	add	r3, ip
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	1812      	adds	r2, r2, r0
 8003922:	2108      	movs	r1, #8
 8003924:	468c      	mov	ip, r1
 8003926:	44bc      	add	ip, r7
 8003928:	4462      	add	r2, ip
 800392a:	3301      	adds	r3, #1
 800392c:	8013      	strh	r3, [r2, #0]
 800392e:	2362      	movs	r3, #98	; 0x62
 8003930:	218c      	movs	r1, #140	; 0x8c
 8003932:	0049      	lsls	r1, r1, #1
 8003934:	185b      	adds	r3, r3, r1
 8003936:	2208      	movs	r2, #8
 8003938:	18ba      	adds	r2, r7, r2
 800393a:	189a      	adds	r2, r3, r2
 800393c:	235a      	movs	r3, #90	; 0x5a
 800393e:	185b      	adds	r3, r3, r1
 8003940:	2108      	movs	r1, #8
 8003942:	468c      	mov	ip, r1
 8003944:	44bc      	add	ip, r7
 8003946:	4463      	add	r3, ip
 8003948:	8812      	ldrh	r2, [r2, #0]
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d3cf      	bcc.n	80038f0 <printASCIIarray+0xba8>
 8003950:	46c5      	mov	sp, r8
							}
			}
			if(fontCur==2){
 8003952:	2361      	movs	r3, #97	; 0x61
 8003954:	268c      	movs	r6, #140	; 0x8c
 8003956:	0076      	lsls	r6, r6, #1
 8003958:	199b      	adds	r3, r3, r6
 800395a:	2208      	movs	r2, #8
 800395c:	4694      	mov	ip, r2
 800395e:	44bc      	add	ip, r7
 8003960:	4463      	add	r3, ip
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b02      	cmp	r3, #2
 8003966:	d001      	beq.n	800396c <printASCIIarray+0xc24>
 8003968:	f001 f82b 	bl	80049c2 <printASCIIarray+0x1c7a>
 800396c:	466b      	mov	r3, sp
 800396e:	001d      	movs	r5, r3
				symLen=304;
 8003970:	245a      	movs	r4, #90	; 0x5a
 8003972:	19a3      	adds	r3, r4, r6
 8003974:	2208      	movs	r2, #8
 8003976:	18ba      	adds	r2, r7, r2
 8003978:	189a      	adds	r2, r3, r2
 800397a:	2398      	movs	r3, #152	; 0x98
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 8003980:	607c      	str	r4, [r7, #4]
 8003982:	19a3      	adds	r3, r4, r6
 8003984:	2208      	movs	r2, #8
 8003986:	4694      	mov	ip, r2
 8003988:	44bc      	add	ip, r7
 800398a:	4463      	add	r3, ip
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	2290      	movs	r2, #144	; 0x90
 8003990:	0052      	lsls	r2, r2, #1
 8003992:	18ba      	adds	r2, r7, r2
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	2390      	movs	r3, #144	; 0x90
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	18fb      	adds	r3, r7, r3
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3b01      	subs	r3, #1
 80039a0:	219c      	movs	r1, #156	; 0x9c
 80039a2:	0049      	lsls	r1, r1, #1
 80039a4:	2208      	movs	r2, #8
 80039a6:	188a      	adds	r2, r1, r2
 80039a8:	19d1      	adds	r1, r2, r7
 80039aa:	600b      	str	r3, [r1, #0]
 80039ac:	2390      	movs	r3, #144	; 0x90
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	18fb      	adds	r3, r7, r3
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	633b      	str	r3, [r7, #48]	; 0x30
 80039b6:	2300      	movs	r3, #0
 80039b8:	637b      	str	r3, [r7, #52]	; 0x34
 80039ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80039be:	0003      	movs	r3, r0
 80039c0:	0f5b      	lsrs	r3, r3, #29
 80039c2:	000e      	movs	r6, r1
 80039c4:	00f6      	lsls	r6, r6, #3
 80039c6:	24bc      	movs	r4, #188	; 0xbc
 80039c8:	2208      	movs	r2, #8
 80039ca:	18a2      	adds	r2, r4, r2
 80039cc:	19d2      	adds	r2, r2, r7
 80039ce:	6016      	str	r6, [r2, #0]
 80039d0:	2208      	movs	r2, #8
 80039d2:	18a2      	adds	r2, r4, r2
 80039d4:	19d6      	adds	r6, r2, r7
 80039d6:	6836      	ldr	r6, [r6, #0]
 80039d8:	431e      	orrs	r6, r3
 80039da:	2308      	movs	r3, #8
 80039dc:	18e3      	adds	r3, r4, r3
 80039de:	19db      	adds	r3, r3, r7
 80039e0:	601e      	str	r6, [r3, #0]
 80039e2:	0003      	movs	r3, r0
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	21b8      	movs	r1, #184	; 0xb8
 80039e8:	2208      	movs	r2, #8
 80039ea:	188a      	adds	r2, r1, r2
 80039ec:	19d1      	adds	r1, r2, r7
 80039ee:	600b      	str	r3, [r1, #0]
 80039f0:	2390      	movs	r3, #144	; 0x90
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	18fb      	adds	r3, r7, r3
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039fa:	2300      	movs	r3, #0
 80039fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a02:	0003      	movs	r3, r0
 8003a04:	0f5b      	lsrs	r3, r3, #29
 8003a06:	469c      	mov	ip, r3
 8003a08:	000e      	movs	r6, r1
 8003a0a:	00f6      	lsls	r6, r6, #3
 8003a0c:	24b4      	movs	r4, #180	; 0xb4
 8003a0e:	0022      	movs	r2, r4
 8003a10:	2308      	movs	r3, #8
 8003a12:	18e4      	adds	r4, r4, r3
 8003a14:	19e4      	adds	r4, r4, r7
 8003a16:	6026      	str	r6, [r4, #0]
 8003a18:	0016      	movs	r6, r2
 8003a1a:	0032      	movs	r2, r6
 8003a1c:	2308      	movs	r3, #8
 8003a1e:	18f3      	adds	r3, r6, r3
 8003a20:	19dc      	adds	r4, r3, r7
 8003a22:	6826      	ldr	r6, [r4, #0]
 8003a24:	4663      	mov	r3, ip
 8003a26:	431e      	orrs	r6, r3
 8003a28:	0013      	movs	r3, r2
 8003a2a:	2208      	movs	r2, #8
 8003a2c:	189b      	adds	r3, r3, r2
 8003a2e:	19db      	adds	r3, r3, r7
 8003a30:	601e      	str	r6, [r3, #0]
 8003a32:	0003      	movs	r3, r0
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	21b0      	movs	r1, #176	; 0xb0
 8003a38:	2208      	movs	r2, #8
 8003a3a:	188a      	adds	r2, r1, r2
 8003a3c:	19d1      	adds	r1, r2, r7
 8003a3e:	600b      	str	r3, [r1, #0]
 8003a40:	2390      	movs	r3, #144	; 0x90
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	18fb      	adds	r3, r7, r3
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3307      	adds	r3, #7
 8003a4a:	08db      	lsrs	r3, r3, #3
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	466a      	mov	r2, sp
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	469d      	mov	sp, r3
 8003a54:	ab02      	add	r3, sp, #8
 8003a56:	3300      	adds	r3, #0
 8003a58:	229a      	movs	r2, #154	; 0x9a
 8003a5a:	0052      	lsls	r2, r2, #1
 8003a5c:	2108      	movs	r1, #8
 8003a5e:	1852      	adds	r2, r2, r1
 8003a60:	19d2      	adds	r2, r2, r7
 8003a62:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer1[symLen];
 8003a64:	687c      	ldr	r4, [r7, #4]
 8003a66:	607c      	str	r4, [r7, #4]
 8003a68:	268c      	movs	r6, #140	; 0x8c
 8003a6a:	0076      	lsls	r6, r6, #1
 8003a6c:	19a3      	adds	r3, r4, r6
 8003a6e:	2208      	movs	r2, #8
 8003a70:	4694      	mov	ip, r2
 8003a72:	44bc      	add	ip, r7
 8003a74:	4463      	add	r3, ip
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	2290      	movs	r2, #144	; 0x90
 8003a7a:	0052      	lsls	r2, r2, #1
 8003a7c:	18ba      	adds	r2, r7, r2
 8003a7e:	6013      	str	r3, [r2, #0]
 8003a80:	2390      	movs	r3, #144	; 0x90
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	18fb      	adds	r3, r7, r3
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	2198      	movs	r1, #152	; 0x98
 8003a8c:	0049      	lsls	r1, r1, #1
 8003a8e:	2208      	movs	r2, #8
 8003a90:	188a      	adds	r2, r1, r2
 8003a92:	19d1      	adds	r1, r2, r7
 8003a94:	600b      	str	r3, [r1, #0]
 8003a96:	2390      	movs	r3, #144	; 0x90
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	18fb      	adds	r3, r7, r3
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	623b      	str	r3, [r7, #32]
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa4:	6a38      	ldr	r0, [r7, #32]
 8003aa6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003aa8:	0003      	movs	r3, r0
 8003aaa:	0f5b      	lsrs	r3, r3, #29
 8003aac:	000e      	movs	r6, r1
 8003aae:	00f6      	lsls	r6, r6, #3
 8003ab0:	24ac      	movs	r4, #172	; 0xac
 8003ab2:	2208      	movs	r2, #8
 8003ab4:	18a2      	adds	r2, r4, r2
 8003ab6:	19d2      	adds	r2, r2, r7
 8003ab8:	6016      	str	r6, [r2, #0]
 8003aba:	2208      	movs	r2, #8
 8003abc:	18a2      	adds	r2, r4, r2
 8003abe:	19d6      	adds	r6, r2, r7
 8003ac0:	6836      	ldr	r6, [r6, #0]
 8003ac2:	431e      	orrs	r6, r3
 8003ac4:	2308      	movs	r3, #8
 8003ac6:	18e3      	adds	r3, r4, r3
 8003ac8:	19db      	adds	r3, r3, r7
 8003aca:	601e      	str	r6, [r3, #0]
 8003acc:	0003      	movs	r3, r0
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	21a8      	movs	r1, #168	; 0xa8
 8003ad2:	2208      	movs	r2, #8
 8003ad4:	188a      	adds	r2, r1, r2
 8003ad6:	19d1      	adds	r1, r2, r7
 8003ad8:	600b      	str	r3, [r1, #0]
 8003ada:	2390      	movs	r3, #144	; 0x90
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	18fb      	adds	r3, r7, r3
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	61bb      	str	r3, [r7, #24]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61fb      	str	r3, [r7, #28]
 8003ae8:	69b8      	ldr	r0, [r7, #24]
 8003aea:	69f9      	ldr	r1, [r7, #28]
 8003aec:	0003      	movs	r3, r0
 8003aee:	0f5b      	lsrs	r3, r3, #29
 8003af0:	469c      	mov	ip, r3
 8003af2:	000e      	movs	r6, r1
 8003af4:	00f6      	lsls	r6, r6, #3
 8003af6:	24a4      	movs	r4, #164	; 0xa4
 8003af8:	0022      	movs	r2, r4
 8003afa:	2308      	movs	r3, #8
 8003afc:	18e4      	adds	r4, r4, r3
 8003afe:	19e4      	adds	r4, r4, r7
 8003b00:	6026      	str	r6, [r4, #0]
 8003b02:	0016      	movs	r6, r2
 8003b04:	0032      	movs	r2, r6
 8003b06:	2308      	movs	r3, #8
 8003b08:	18f3      	adds	r3, r6, r3
 8003b0a:	19dc      	adds	r4, r3, r7
 8003b0c:	6826      	ldr	r6, [r4, #0]
 8003b0e:	4663      	mov	r3, ip
 8003b10:	431e      	orrs	r6, r3
 8003b12:	0013      	movs	r3, r2
 8003b14:	2208      	movs	r2, #8
 8003b16:	189b      	adds	r3, r3, r2
 8003b18:	19db      	adds	r3, r3, r7
 8003b1a:	601e      	str	r6, [r3, #0]
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	21a0      	movs	r1, #160	; 0xa0
 8003b22:	2208      	movs	r2, #8
 8003b24:	188a      	adds	r2, r1, r2
 8003b26:	19d1      	adds	r1, r2, r7
 8003b28:	600b      	str	r3, [r1, #0]
 8003b2a:	2390      	movs	r3, #144	; 0x90
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	18fb      	adds	r3, r7, r3
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	3307      	adds	r3, #7
 8003b34:	08db      	lsrs	r3, r3, #3
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	466a      	mov	r2, sp
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	469d      	mov	sp, r3
 8003b3e:	ab02      	add	r3, sp, #8
 8003b40:	3300      	adds	r3, #0
 8003b42:	2296      	movs	r2, #150	; 0x96
 8003b44:	0052      	lsls	r2, r2, #1
 8003b46:	2108      	movs	r1, #8
 8003b48:	1852      	adds	r2, r2, r1
 8003b4a:	19d2      	adds	r2, r2, r7
 8003b4c:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer2[symLen];
 8003b4e:	687c      	ldr	r4, [r7, #4]
 8003b50:	268c      	movs	r6, #140	; 0x8c
 8003b52:	0076      	lsls	r6, r6, #1
 8003b54:	19a3      	adds	r3, r4, r6
 8003b56:	2208      	movs	r2, #8
 8003b58:	4694      	mov	ip, r2
 8003b5a:	44bc      	add	ip, r7
 8003b5c:	4463      	add	r3, ip
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	2290      	movs	r2, #144	; 0x90
 8003b62:	0052      	lsls	r2, r2, #1
 8003b64:	18ba      	adds	r2, r7, r2
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	2390      	movs	r3, #144	; 0x90
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	18fb      	adds	r3, r7, r3
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	3a01      	subs	r2, #1
 8003b72:	2194      	movs	r1, #148	; 0x94
 8003b74:	0049      	lsls	r1, r1, #1
 8003b76:	2308      	movs	r3, #8
 8003b78:	18cb      	adds	r3, r1, r3
 8003b7a:	19d9      	adds	r1, r3, r7
 8003b7c:	600a      	str	r2, [r1, #0]
 8003b7e:	2390      	movs	r3, #144	; 0x90
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	18fb      	adds	r3, r7, r3
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	617a      	str	r2, [r7, #20]
 8003b8c:	6938      	ldr	r0, [r7, #16]
 8003b8e:	6979      	ldr	r1, [r7, #20]
 8003b90:	0002      	movs	r2, r0
 8003b92:	0f52      	lsrs	r2, r2, #29
 8003b94:	000c      	movs	r4, r1
 8003b96:	00e4      	lsls	r4, r4, #3
 8003b98:	269c      	movs	r6, #156	; 0x9c
 8003b9a:	2308      	movs	r3, #8
 8003b9c:	18f3      	adds	r3, r6, r3
 8003b9e:	19db      	adds	r3, r3, r7
 8003ba0:	601c      	str	r4, [r3, #0]
 8003ba2:	2308      	movs	r3, #8
 8003ba4:	18f3      	adds	r3, r6, r3
 8003ba6:	19dc      	adds	r4, r3, r7
 8003ba8:	6824      	ldr	r4, [r4, #0]
 8003baa:	4314      	orrs	r4, r2
 8003bac:	2308      	movs	r3, #8
 8003bae:	18f3      	adds	r3, r6, r3
 8003bb0:	19da      	adds	r2, r3, r7
 8003bb2:	6014      	str	r4, [r2, #0]
 8003bb4:	0002      	movs	r2, r0
 8003bb6:	00d2      	lsls	r2, r2, #3
 8003bb8:	2198      	movs	r1, #152	; 0x98
 8003bba:	2308      	movs	r3, #8
 8003bbc:	18cb      	adds	r3, r1, r3
 8003bbe:	19d9      	adds	r1, r3, r7
 8003bc0:	600a      	str	r2, [r1, #0]
 8003bc2:	2390      	movs	r3, #144	; 0x90
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	18fb      	adds	r3, r7, r3
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	60bb      	str	r3, [r7, #8]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	60fa      	str	r2, [r7, #12]
 8003bd0:	68b8      	ldr	r0, [r7, #8]
 8003bd2:	68f9      	ldr	r1, [r7, #12]
 8003bd4:	0002      	movs	r2, r0
 8003bd6:	0f52      	lsrs	r2, r2, #29
 8003bd8:	000c      	movs	r4, r1
 8003bda:	00e4      	lsls	r4, r4, #3
 8003bdc:	2694      	movs	r6, #148	; 0x94
 8003bde:	603e      	str	r6, [r7, #0]
 8003be0:	2308      	movs	r3, #8
 8003be2:	18f6      	adds	r6, r6, r3
 8003be4:	19f6      	adds	r6, r6, r7
 8003be6:	6034      	str	r4, [r6, #0]
 8003be8:	683c      	ldr	r4, [r7, #0]
 8003bea:	0023      	movs	r3, r4
 8003bec:	2608      	movs	r6, #8
 8003bee:	19a4      	adds	r4, r4, r6
 8003bf0:	19e6      	adds	r6, r4, r7
 8003bf2:	6834      	ldr	r4, [r6, #0]
 8003bf4:	4314      	orrs	r4, r2
 8003bf6:	001a      	movs	r2, r3
 8003bf8:	2308      	movs	r3, #8
 8003bfa:	18d3      	adds	r3, r2, r3
 8003bfc:	19da      	adds	r2, r3, r7
 8003bfe:	6014      	str	r4, [r2, #0]
 8003c00:	0002      	movs	r2, r0
 8003c02:	00d2      	lsls	r2, r2, #3
 8003c04:	2190      	movs	r1, #144	; 0x90
 8003c06:	2308      	movs	r3, #8
 8003c08:	18cb      	adds	r3, r1, r3
 8003c0a:	19d9      	adds	r1, r3, r7
 8003c0c:	600a      	str	r2, [r1, #0]
 8003c0e:	2390      	movs	r3, #144	; 0x90
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	18fb      	adds	r3, r7, r3
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3307      	adds	r3, #7
 8003c18:	08db      	lsrs	r3, r3, #3
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	466a      	mov	r2, sp
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	469d      	mov	sp, r3
 8003c22:	ab02      	add	r3, sp, #8
 8003c24:	3300      	adds	r3, #0
 8003c26:	2292      	movs	r2, #146	; 0x92
 8003c28:	0052      	lsls	r2, r2, #1
 8003c2a:	2108      	movs	r1, #8
 8003c2c:	1852      	adds	r2, r2, r1
 8003c2e:	19d2      	adds	r2, r2, r7
 8003c30:	6013      	str	r3, [r2, #0]
				X_increment=0x10;
 8003c32:	233f      	movs	r3, #63	; 0x3f
 8003c34:	268c      	movs	r6, #140	; 0x8c
 8003c36:	0076      	lsls	r6, r6, #1
 8003c38:	199b      	adds	r3, r3, r6
 8003c3a:	2208      	movs	r2, #8
 8003c3c:	4694      	mov	ip, r2
 8003c3e:	44bc      	add	ip, r7
 8003c40:	4463      	add	r3, ip
 8003c42:	2210      	movs	r2, #16
 8003c44:	701a      	strb	r2, [r3, #0]
				ASCII_height=0x26;
 8003c46:	233e      	movs	r3, #62	; 0x3e
 8003c48:	199b      	adds	r3, r3, r6
 8003c4a:	2208      	movs	r2, #8
 8003c4c:	4694      	mov	ip, r2
 8003c4e:	44bc      	add	ip, r7
 8003c50:	4463      	add	r3, ip
 8003c52:	2226      	movs	r2, #38	; 0x26
 8003c54:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 8003c56:	2362      	movs	r3, #98	; 0x62
 8003c58:	199b      	adds	r3, r3, r6
 8003c5a:	2208      	movs	r2, #8
 8003c5c:	4694      	mov	ip, r2
 8003c5e:	44bc      	add	ip, r7
 8003c60:	4463      	add	r3, ip
 8003c62:	2200      	movs	r2, #0
 8003c64:	801a      	strh	r2, [r3, #0]
 8003c66:	f000 fd30 	bl	80046ca <printASCIIarray+0x1982>
					if(dataASCII[i]==0x20){dataASCII[i]=0x00;}
 8003c6a:	2162      	movs	r1, #98	; 0x62
 8003c6c:	248c      	movs	r4, #140	; 0x8c
 8003c6e:	0064      	lsls	r4, r4, #1
 8003c70:	190b      	adds	r3, r1, r4
 8003c72:	2208      	movs	r2, #8
 8003c74:	4694      	mov	ip, r2
 8003c76:	44bc      	add	ip, r7
 8003c78:	4463      	add	r3, ip
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	2080      	movs	r0, #128	; 0x80
 8003c7e:	1902      	adds	r2, r0, r4
 8003c80:	2608      	movs	r6, #8
 8003c82:	46b4      	mov	ip, r6
 8003c84:	2608      	movs	r6, #8
 8003c86:	46b0      	mov	r8, r6
 8003c88:	44b8      	add	r8, r7
 8003c8a:	44c4      	add	ip, r8
 8003c8c:	4462      	add	r2, ip
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	18d3      	adds	r3, r2, r3
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	d111      	bne.n	8003cbc <printASCIIarray+0xf74>
 8003c98:	190b      	adds	r3, r1, r4
 8003c9a:	2208      	movs	r2, #8
 8003c9c:	4694      	mov	ip, r2
 8003c9e:	44bc      	add	ip, r7
 8003ca0:	4463      	add	r3, ip
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	1902      	adds	r2, r0, r4
 8003ca6:	2108      	movs	r1, #8
 8003ca8:	468c      	mov	ip, r1
 8003caa:	2108      	movs	r1, #8
 8003cac:	4688      	mov	r8, r1
 8003cae:	44b8      	add	r8, r7
 8003cb0:	44c4      	add	ip, r8
 8003cb2:	4462      	add	r2, ip
 8003cb4:	6812      	ldr	r2, [r2, #0]
 8003cb6:	18d3      	adds	r3, r2, r3
 8003cb8:	2200      	movs	r2, #0
 8003cba:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x21){dataASCII[i]=0x01;}
 8003cbc:	2162      	movs	r1, #98	; 0x62
 8003cbe:	248c      	movs	r4, #140	; 0x8c
 8003cc0:	0064      	lsls	r4, r4, #1
 8003cc2:	190b      	adds	r3, r1, r4
 8003cc4:	2208      	movs	r2, #8
 8003cc6:	4694      	mov	ip, r2
 8003cc8:	44bc      	add	ip, r7
 8003cca:	4463      	add	r3, ip
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	2080      	movs	r0, #128	; 0x80
 8003cd0:	1902      	adds	r2, r0, r4
 8003cd2:	2608      	movs	r6, #8
 8003cd4:	46b4      	mov	ip, r6
 8003cd6:	2608      	movs	r6, #8
 8003cd8:	46b0      	mov	r8, r6
 8003cda:	44b8      	add	r8, r7
 8003cdc:	44c4      	add	ip, r8
 8003cde:	4462      	add	r2, ip
 8003ce0:	6812      	ldr	r2, [r2, #0]
 8003ce2:	18d3      	adds	r3, r2, r3
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2b21      	cmp	r3, #33	; 0x21
 8003ce8:	d111      	bne.n	8003d0e <printASCIIarray+0xfc6>
 8003cea:	190b      	adds	r3, r1, r4
 8003cec:	2208      	movs	r2, #8
 8003cee:	4694      	mov	ip, r2
 8003cf0:	44bc      	add	ip, r7
 8003cf2:	4463      	add	r3, ip
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	1902      	adds	r2, r0, r4
 8003cf8:	2108      	movs	r1, #8
 8003cfa:	468c      	mov	ip, r1
 8003cfc:	2108      	movs	r1, #8
 8003cfe:	4688      	mov	r8, r1
 8003d00:	44b8      	add	r8, r7
 8003d02:	44c4      	add	ip, r8
 8003d04:	4462      	add	r2, ip
 8003d06:	6812      	ldr	r2, [r2, #0]
 8003d08:	18d3      	adds	r3, r2, r3
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x25){dataASCII[i]=0x02;}
 8003d0e:	2162      	movs	r1, #98	; 0x62
 8003d10:	248c      	movs	r4, #140	; 0x8c
 8003d12:	0064      	lsls	r4, r4, #1
 8003d14:	190b      	adds	r3, r1, r4
 8003d16:	2208      	movs	r2, #8
 8003d18:	4694      	mov	ip, r2
 8003d1a:	44bc      	add	ip, r7
 8003d1c:	4463      	add	r3, ip
 8003d1e:	881b      	ldrh	r3, [r3, #0]
 8003d20:	2080      	movs	r0, #128	; 0x80
 8003d22:	1902      	adds	r2, r0, r4
 8003d24:	2608      	movs	r6, #8
 8003d26:	46b4      	mov	ip, r6
 8003d28:	2608      	movs	r6, #8
 8003d2a:	46b0      	mov	r8, r6
 8003d2c:	44b8      	add	r8, r7
 8003d2e:	44c4      	add	ip, r8
 8003d30:	4462      	add	r2, ip
 8003d32:	6812      	ldr	r2, [r2, #0]
 8003d34:	18d3      	adds	r3, r2, r3
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b25      	cmp	r3, #37	; 0x25
 8003d3a:	d111      	bne.n	8003d60 <printASCIIarray+0x1018>
 8003d3c:	190b      	adds	r3, r1, r4
 8003d3e:	2208      	movs	r2, #8
 8003d40:	4694      	mov	ip, r2
 8003d42:	44bc      	add	ip, r7
 8003d44:	4463      	add	r3, ip
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	1902      	adds	r2, r0, r4
 8003d4a:	2108      	movs	r1, #8
 8003d4c:	468c      	mov	ip, r1
 8003d4e:	2108      	movs	r1, #8
 8003d50:	4688      	mov	r8, r1
 8003d52:	44b8      	add	r8, r7
 8003d54:	44c4      	add	ip, r8
 8003d56:	4462      	add	r2, ip
 8003d58:	6812      	ldr	r2, [r2, #0]
 8003d5a:	18d3      	adds	r3, r2, r3
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x28){dataASCII[i]=0x03;}
 8003d60:	2162      	movs	r1, #98	; 0x62
 8003d62:	248c      	movs	r4, #140	; 0x8c
 8003d64:	0064      	lsls	r4, r4, #1
 8003d66:	190b      	adds	r3, r1, r4
 8003d68:	2208      	movs	r2, #8
 8003d6a:	4694      	mov	ip, r2
 8003d6c:	44bc      	add	ip, r7
 8003d6e:	4463      	add	r3, ip
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	2080      	movs	r0, #128	; 0x80
 8003d74:	1902      	adds	r2, r0, r4
 8003d76:	2608      	movs	r6, #8
 8003d78:	46b4      	mov	ip, r6
 8003d7a:	2608      	movs	r6, #8
 8003d7c:	46b0      	mov	r8, r6
 8003d7e:	44b8      	add	r8, r7
 8003d80:	44c4      	add	ip, r8
 8003d82:	4462      	add	r2, ip
 8003d84:	6812      	ldr	r2, [r2, #0]
 8003d86:	18d3      	adds	r3, r2, r3
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b28      	cmp	r3, #40	; 0x28
 8003d8c:	d111      	bne.n	8003db2 <printASCIIarray+0x106a>
 8003d8e:	190b      	adds	r3, r1, r4
 8003d90:	2208      	movs	r2, #8
 8003d92:	4694      	mov	ip, r2
 8003d94:	44bc      	add	ip, r7
 8003d96:	4463      	add	r3, ip
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	1902      	adds	r2, r0, r4
 8003d9c:	2108      	movs	r1, #8
 8003d9e:	468c      	mov	ip, r1
 8003da0:	2108      	movs	r1, #8
 8003da2:	4688      	mov	r8, r1
 8003da4:	44b8      	add	r8, r7
 8003da6:	44c4      	add	ip, r8
 8003da8:	4462      	add	r2, ip
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	18d3      	adds	r3, r2, r3
 8003dae:	2203      	movs	r2, #3
 8003db0:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x29){dataASCII[i]=0x04;}
 8003db2:	2162      	movs	r1, #98	; 0x62
 8003db4:	248c      	movs	r4, #140	; 0x8c
 8003db6:	0064      	lsls	r4, r4, #1
 8003db8:	190b      	adds	r3, r1, r4
 8003dba:	2208      	movs	r2, #8
 8003dbc:	4694      	mov	ip, r2
 8003dbe:	44bc      	add	ip, r7
 8003dc0:	4463      	add	r3, ip
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	2080      	movs	r0, #128	; 0x80
 8003dc6:	1902      	adds	r2, r0, r4
 8003dc8:	2608      	movs	r6, #8
 8003dca:	46b4      	mov	ip, r6
 8003dcc:	2608      	movs	r6, #8
 8003dce:	46b0      	mov	r8, r6
 8003dd0:	44b8      	add	r8, r7
 8003dd2:	44c4      	add	ip, r8
 8003dd4:	4462      	add	r2, ip
 8003dd6:	6812      	ldr	r2, [r2, #0]
 8003dd8:	18d3      	adds	r3, r2, r3
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	2b29      	cmp	r3, #41	; 0x29
 8003dde:	d111      	bne.n	8003e04 <printASCIIarray+0x10bc>
 8003de0:	190b      	adds	r3, r1, r4
 8003de2:	2208      	movs	r2, #8
 8003de4:	4694      	mov	ip, r2
 8003de6:	44bc      	add	ip, r7
 8003de8:	4463      	add	r3, ip
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	1902      	adds	r2, r0, r4
 8003dee:	2108      	movs	r1, #8
 8003df0:	468c      	mov	ip, r1
 8003df2:	2108      	movs	r1, #8
 8003df4:	4688      	mov	r8, r1
 8003df6:	44b8      	add	r8, r7
 8003df8:	44c4      	add	ip, r8
 8003dfa:	4462      	add	r2, ip
 8003dfc:	6812      	ldr	r2, [r2, #0]
 8003dfe:	18d3      	adds	r3, r2, r3
 8003e00:	2204      	movs	r2, #4
 8003e02:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2a){dataASCII[i]=0x05;}
 8003e04:	2162      	movs	r1, #98	; 0x62
 8003e06:	248c      	movs	r4, #140	; 0x8c
 8003e08:	0064      	lsls	r4, r4, #1
 8003e0a:	190b      	adds	r3, r1, r4
 8003e0c:	2208      	movs	r2, #8
 8003e0e:	4694      	mov	ip, r2
 8003e10:	44bc      	add	ip, r7
 8003e12:	4463      	add	r3, ip
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	2080      	movs	r0, #128	; 0x80
 8003e18:	1902      	adds	r2, r0, r4
 8003e1a:	2608      	movs	r6, #8
 8003e1c:	46b4      	mov	ip, r6
 8003e1e:	2608      	movs	r6, #8
 8003e20:	46b0      	mov	r8, r6
 8003e22:	44b8      	add	r8, r7
 8003e24:	44c4      	add	ip, r8
 8003e26:	4462      	add	r2, ip
 8003e28:	6812      	ldr	r2, [r2, #0]
 8003e2a:	18d3      	adds	r3, r2, r3
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8003e30:	d111      	bne.n	8003e56 <printASCIIarray+0x110e>
 8003e32:	190b      	adds	r3, r1, r4
 8003e34:	2208      	movs	r2, #8
 8003e36:	4694      	mov	ip, r2
 8003e38:	44bc      	add	ip, r7
 8003e3a:	4463      	add	r3, ip
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	1902      	adds	r2, r0, r4
 8003e40:	2108      	movs	r1, #8
 8003e42:	468c      	mov	ip, r1
 8003e44:	2108      	movs	r1, #8
 8003e46:	4688      	mov	r8, r1
 8003e48:	44b8      	add	r8, r7
 8003e4a:	44c4      	add	ip, r8
 8003e4c:	4462      	add	r2, ip
 8003e4e:	6812      	ldr	r2, [r2, #0]
 8003e50:	18d3      	adds	r3, r2, r3
 8003e52:	2205      	movs	r2, #5
 8003e54:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2b){dataASCII[i]=0x06;}
 8003e56:	2162      	movs	r1, #98	; 0x62
 8003e58:	248c      	movs	r4, #140	; 0x8c
 8003e5a:	0064      	lsls	r4, r4, #1
 8003e5c:	190b      	adds	r3, r1, r4
 8003e5e:	2208      	movs	r2, #8
 8003e60:	4694      	mov	ip, r2
 8003e62:	44bc      	add	ip, r7
 8003e64:	4463      	add	r3, ip
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	2080      	movs	r0, #128	; 0x80
 8003e6a:	1902      	adds	r2, r0, r4
 8003e6c:	2608      	movs	r6, #8
 8003e6e:	46b4      	mov	ip, r6
 8003e70:	2608      	movs	r6, #8
 8003e72:	46b0      	mov	r8, r6
 8003e74:	44b8      	add	r8, r7
 8003e76:	44c4      	add	ip, r8
 8003e78:	4462      	add	r2, ip
 8003e7a:	6812      	ldr	r2, [r2, #0]
 8003e7c:	18d3      	adds	r3, r2, r3
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2b2b      	cmp	r3, #43	; 0x2b
 8003e82:	d111      	bne.n	8003ea8 <printASCIIarray+0x1160>
 8003e84:	190b      	adds	r3, r1, r4
 8003e86:	2208      	movs	r2, #8
 8003e88:	4694      	mov	ip, r2
 8003e8a:	44bc      	add	ip, r7
 8003e8c:	4463      	add	r3, ip
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	1902      	adds	r2, r0, r4
 8003e92:	2108      	movs	r1, #8
 8003e94:	468c      	mov	ip, r1
 8003e96:	2108      	movs	r1, #8
 8003e98:	4688      	mov	r8, r1
 8003e9a:	44b8      	add	r8, r7
 8003e9c:	44c4      	add	ip, r8
 8003e9e:	4462      	add	r2, ip
 8003ea0:	6812      	ldr	r2, [r2, #0]
 8003ea2:	18d3      	adds	r3, r2, r3
 8003ea4:	2206      	movs	r2, #6
 8003ea6:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2c){dataASCII[i]=0x07;}
 8003ea8:	2162      	movs	r1, #98	; 0x62
 8003eaa:	248c      	movs	r4, #140	; 0x8c
 8003eac:	0064      	lsls	r4, r4, #1
 8003eae:	190b      	adds	r3, r1, r4
 8003eb0:	2208      	movs	r2, #8
 8003eb2:	4694      	mov	ip, r2
 8003eb4:	44bc      	add	ip, r7
 8003eb6:	4463      	add	r3, ip
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	2080      	movs	r0, #128	; 0x80
 8003ebc:	1902      	adds	r2, r0, r4
 8003ebe:	2608      	movs	r6, #8
 8003ec0:	46b4      	mov	ip, r6
 8003ec2:	2608      	movs	r6, #8
 8003ec4:	46b0      	mov	r8, r6
 8003ec6:	44b8      	add	r8, r7
 8003ec8:	44c4      	add	ip, r8
 8003eca:	4462      	add	r2, ip
 8003ecc:	6812      	ldr	r2, [r2, #0]
 8003ece:	18d3      	adds	r3, r2, r3
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	2b2c      	cmp	r3, #44	; 0x2c
 8003ed4:	d111      	bne.n	8003efa <printASCIIarray+0x11b2>
 8003ed6:	190b      	adds	r3, r1, r4
 8003ed8:	2208      	movs	r2, #8
 8003eda:	4694      	mov	ip, r2
 8003edc:	44bc      	add	ip, r7
 8003ede:	4463      	add	r3, ip
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	1902      	adds	r2, r0, r4
 8003ee4:	2108      	movs	r1, #8
 8003ee6:	468c      	mov	ip, r1
 8003ee8:	2108      	movs	r1, #8
 8003eea:	4688      	mov	r8, r1
 8003eec:	44b8      	add	r8, r7
 8003eee:	44c4      	add	ip, r8
 8003ef0:	4462      	add	r2, ip
 8003ef2:	6812      	ldr	r2, [r2, #0]
 8003ef4:	18d3      	adds	r3, r2, r3
 8003ef6:	2207      	movs	r2, #7
 8003ef8:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2d){dataASCII[i]=0x08;}
 8003efa:	2162      	movs	r1, #98	; 0x62
 8003efc:	248c      	movs	r4, #140	; 0x8c
 8003efe:	0064      	lsls	r4, r4, #1
 8003f00:	190b      	adds	r3, r1, r4
 8003f02:	2208      	movs	r2, #8
 8003f04:	4694      	mov	ip, r2
 8003f06:	44bc      	add	ip, r7
 8003f08:	4463      	add	r3, ip
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	2080      	movs	r0, #128	; 0x80
 8003f0e:	1902      	adds	r2, r0, r4
 8003f10:	2608      	movs	r6, #8
 8003f12:	46b4      	mov	ip, r6
 8003f14:	2608      	movs	r6, #8
 8003f16:	46b0      	mov	r8, r6
 8003f18:	44b8      	add	r8, r7
 8003f1a:	44c4      	add	ip, r8
 8003f1c:	4462      	add	r2, ip
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	18d3      	adds	r3, r2, r3
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b2d      	cmp	r3, #45	; 0x2d
 8003f26:	d111      	bne.n	8003f4c <printASCIIarray+0x1204>
 8003f28:	190b      	adds	r3, r1, r4
 8003f2a:	2208      	movs	r2, #8
 8003f2c:	4694      	mov	ip, r2
 8003f2e:	44bc      	add	ip, r7
 8003f30:	4463      	add	r3, ip
 8003f32:	881b      	ldrh	r3, [r3, #0]
 8003f34:	1902      	adds	r2, r0, r4
 8003f36:	2108      	movs	r1, #8
 8003f38:	468c      	mov	ip, r1
 8003f3a:	2108      	movs	r1, #8
 8003f3c:	4688      	mov	r8, r1
 8003f3e:	44b8      	add	r8, r7
 8003f40:	44c4      	add	ip, r8
 8003f42:	4462      	add	r2, ip
 8003f44:	6812      	ldr	r2, [r2, #0]
 8003f46:	18d3      	adds	r3, r2, r3
 8003f48:	2208      	movs	r2, #8
 8003f4a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2e){dataASCII[i]=0x09;}
 8003f4c:	2162      	movs	r1, #98	; 0x62
 8003f4e:	248c      	movs	r4, #140	; 0x8c
 8003f50:	0064      	lsls	r4, r4, #1
 8003f52:	190b      	adds	r3, r1, r4
 8003f54:	2208      	movs	r2, #8
 8003f56:	4694      	mov	ip, r2
 8003f58:	44bc      	add	ip, r7
 8003f5a:	4463      	add	r3, ip
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	2080      	movs	r0, #128	; 0x80
 8003f60:	1902      	adds	r2, r0, r4
 8003f62:	2608      	movs	r6, #8
 8003f64:	46b4      	mov	ip, r6
 8003f66:	2608      	movs	r6, #8
 8003f68:	46b0      	mov	r8, r6
 8003f6a:	44b8      	add	r8, r7
 8003f6c:	44c4      	add	ip, r8
 8003f6e:	4462      	add	r2, ip
 8003f70:	6812      	ldr	r2, [r2, #0]
 8003f72:	18d3      	adds	r3, r2, r3
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	2b2e      	cmp	r3, #46	; 0x2e
 8003f78:	d111      	bne.n	8003f9e <printASCIIarray+0x1256>
 8003f7a:	190b      	adds	r3, r1, r4
 8003f7c:	2208      	movs	r2, #8
 8003f7e:	4694      	mov	ip, r2
 8003f80:	44bc      	add	ip, r7
 8003f82:	4463      	add	r3, ip
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	1902      	adds	r2, r0, r4
 8003f88:	2108      	movs	r1, #8
 8003f8a:	468c      	mov	ip, r1
 8003f8c:	2108      	movs	r1, #8
 8003f8e:	4688      	mov	r8, r1
 8003f90:	44b8      	add	r8, r7
 8003f92:	44c4      	add	ip, r8
 8003f94:	4462      	add	r2, ip
 8003f96:	6812      	ldr	r2, [r2, #0]
 8003f98:	18d3      	adds	r3, r2, r3
 8003f9a:	2209      	movs	r2, #9
 8003f9c:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2f){dataASCII[i]=0x0a;}
 8003f9e:	2162      	movs	r1, #98	; 0x62
 8003fa0:	248c      	movs	r4, #140	; 0x8c
 8003fa2:	0064      	lsls	r4, r4, #1
 8003fa4:	190b      	adds	r3, r1, r4
 8003fa6:	2208      	movs	r2, #8
 8003fa8:	4694      	mov	ip, r2
 8003faa:	44bc      	add	ip, r7
 8003fac:	4463      	add	r3, ip
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	2080      	movs	r0, #128	; 0x80
 8003fb2:	1902      	adds	r2, r0, r4
 8003fb4:	2608      	movs	r6, #8
 8003fb6:	46b4      	mov	ip, r6
 8003fb8:	2608      	movs	r6, #8
 8003fba:	46b0      	mov	r8, r6
 8003fbc:	44b8      	add	r8, r7
 8003fbe:	44c4      	add	ip, r8
 8003fc0:	4462      	add	r2, ip
 8003fc2:	6812      	ldr	r2, [r2, #0]
 8003fc4:	18d3      	adds	r3, r2, r3
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b2f      	cmp	r3, #47	; 0x2f
 8003fca:	d111      	bne.n	8003ff0 <printASCIIarray+0x12a8>
 8003fcc:	190b      	adds	r3, r1, r4
 8003fce:	2208      	movs	r2, #8
 8003fd0:	4694      	mov	ip, r2
 8003fd2:	44bc      	add	ip, r7
 8003fd4:	4463      	add	r3, ip
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	1902      	adds	r2, r0, r4
 8003fda:	2108      	movs	r1, #8
 8003fdc:	468c      	mov	ip, r1
 8003fde:	2108      	movs	r1, #8
 8003fe0:	4688      	mov	r8, r1
 8003fe2:	44b8      	add	r8, r7
 8003fe4:	44c4      	add	ip, r8
 8003fe6:	4462      	add	r2, ip
 8003fe8:	6812      	ldr	r2, [r2, #0]
 8003fea:	18d3      	adds	r3, r2, r3
 8003fec:	220a      	movs	r2, #10
 8003fee:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x30){dataASCII[i]=0x0b;}
 8003ff0:	2162      	movs	r1, #98	; 0x62
 8003ff2:	248c      	movs	r4, #140	; 0x8c
 8003ff4:	0064      	lsls	r4, r4, #1
 8003ff6:	190b      	adds	r3, r1, r4
 8003ff8:	2208      	movs	r2, #8
 8003ffa:	4694      	mov	ip, r2
 8003ffc:	44bc      	add	ip, r7
 8003ffe:	4463      	add	r3, ip
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	2080      	movs	r0, #128	; 0x80
 8004004:	1902      	adds	r2, r0, r4
 8004006:	2608      	movs	r6, #8
 8004008:	46b4      	mov	ip, r6
 800400a:	2608      	movs	r6, #8
 800400c:	46b0      	mov	r8, r6
 800400e:	44b8      	add	r8, r7
 8004010:	44c4      	add	ip, r8
 8004012:	4462      	add	r2, ip
 8004014:	6812      	ldr	r2, [r2, #0]
 8004016:	18d3      	adds	r3, r2, r3
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	2b30      	cmp	r3, #48	; 0x30
 800401c:	d111      	bne.n	8004042 <printASCIIarray+0x12fa>
 800401e:	190b      	adds	r3, r1, r4
 8004020:	2208      	movs	r2, #8
 8004022:	4694      	mov	ip, r2
 8004024:	44bc      	add	ip, r7
 8004026:	4463      	add	r3, ip
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	1902      	adds	r2, r0, r4
 800402c:	2108      	movs	r1, #8
 800402e:	468c      	mov	ip, r1
 8004030:	2108      	movs	r1, #8
 8004032:	4688      	mov	r8, r1
 8004034:	44b8      	add	r8, r7
 8004036:	44c4      	add	ip, r8
 8004038:	4462      	add	r2, ip
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	18d3      	adds	r3, r2, r3
 800403e:	220b      	movs	r2, #11
 8004040:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x31){dataASCII[i]=0x0c;}
 8004042:	2162      	movs	r1, #98	; 0x62
 8004044:	248c      	movs	r4, #140	; 0x8c
 8004046:	0064      	lsls	r4, r4, #1
 8004048:	190b      	adds	r3, r1, r4
 800404a:	2208      	movs	r2, #8
 800404c:	4694      	mov	ip, r2
 800404e:	44bc      	add	ip, r7
 8004050:	4463      	add	r3, ip
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	2080      	movs	r0, #128	; 0x80
 8004056:	1902      	adds	r2, r0, r4
 8004058:	2608      	movs	r6, #8
 800405a:	46b4      	mov	ip, r6
 800405c:	2608      	movs	r6, #8
 800405e:	46b0      	mov	r8, r6
 8004060:	44b8      	add	r8, r7
 8004062:	44c4      	add	ip, r8
 8004064:	4462      	add	r2, ip
 8004066:	6812      	ldr	r2, [r2, #0]
 8004068:	18d3      	adds	r3, r2, r3
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b31      	cmp	r3, #49	; 0x31
 800406e:	d111      	bne.n	8004094 <printASCIIarray+0x134c>
 8004070:	190b      	adds	r3, r1, r4
 8004072:	2208      	movs	r2, #8
 8004074:	4694      	mov	ip, r2
 8004076:	44bc      	add	ip, r7
 8004078:	4463      	add	r3, ip
 800407a:	881b      	ldrh	r3, [r3, #0]
 800407c:	1902      	adds	r2, r0, r4
 800407e:	2108      	movs	r1, #8
 8004080:	468c      	mov	ip, r1
 8004082:	2108      	movs	r1, #8
 8004084:	4688      	mov	r8, r1
 8004086:	44b8      	add	r8, r7
 8004088:	44c4      	add	ip, r8
 800408a:	4462      	add	r2, ip
 800408c:	6812      	ldr	r2, [r2, #0]
 800408e:	18d3      	adds	r3, r2, r3
 8004090:	220c      	movs	r2, #12
 8004092:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x32){dataASCII[i]=0x0d;}
 8004094:	2162      	movs	r1, #98	; 0x62
 8004096:	248c      	movs	r4, #140	; 0x8c
 8004098:	0064      	lsls	r4, r4, #1
 800409a:	190b      	adds	r3, r1, r4
 800409c:	2208      	movs	r2, #8
 800409e:	4694      	mov	ip, r2
 80040a0:	44bc      	add	ip, r7
 80040a2:	4463      	add	r3, ip
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	2080      	movs	r0, #128	; 0x80
 80040a8:	1902      	adds	r2, r0, r4
 80040aa:	2608      	movs	r6, #8
 80040ac:	46b4      	mov	ip, r6
 80040ae:	2608      	movs	r6, #8
 80040b0:	46b0      	mov	r8, r6
 80040b2:	44b8      	add	r8, r7
 80040b4:	44c4      	add	ip, r8
 80040b6:	4462      	add	r2, ip
 80040b8:	6812      	ldr	r2, [r2, #0]
 80040ba:	18d3      	adds	r3, r2, r3
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b32      	cmp	r3, #50	; 0x32
 80040c0:	d111      	bne.n	80040e6 <printASCIIarray+0x139e>
 80040c2:	190b      	adds	r3, r1, r4
 80040c4:	2208      	movs	r2, #8
 80040c6:	4694      	mov	ip, r2
 80040c8:	44bc      	add	ip, r7
 80040ca:	4463      	add	r3, ip
 80040cc:	881b      	ldrh	r3, [r3, #0]
 80040ce:	1902      	adds	r2, r0, r4
 80040d0:	2108      	movs	r1, #8
 80040d2:	468c      	mov	ip, r1
 80040d4:	2108      	movs	r1, #8
 80040d6:	4688      	mov	r8, r1
 80040d8:	44b8      	add	r8, r7
 80040da:	44c4      	add	ip, r8
 80040dc:	4462      	add	r2, ip
 80040de:	6812      	ldr	r2, [r2, #0]
 80040e0:	18d3      	adds	r3, r2, r3
 80040e2:	220d      	movs	r2, #13
 80040e4:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x33){dataASCII[i]=0x0e;}
 80040e6:	2162      	movs	r1, #98	; 0x62
 80040e8:	248c      	movs	r4, #140	; 0x8c
 80040ea:	0064      	lsls	r4, r4, #1
 80040ec:	190b      	adds	r3, r1, r4
 80040ee:	2208      	movs	r2, #8
 80040f0:	4694      	mov	ip, r2
 80040f2:	44bc      	add	ip, r7
 80040f4:	4463      	add	r3, ip
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	2080      	movs	r0, #128	; 0x80
 80040fa:	1902      	adds	r2, r0, r4
 80040fc:	2608      	movs	r6, #8
 80040fe:	46b4      	mov	ip, r6
 8004100:	2608      	movs	r6, #8
 8004102:	46b0      	mov	r8, r6
 8004104:	44b8      	add	r8, r7
 8004106:	44c4      	add	ip, r8
 8004108:	4462      	add	r2, ip
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	18d3      	adds	r3, r2, r3
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b33      	cmp	r3, #51	; 0x33
 8004112:	d111      	bne.n	8004138 <printASCIIarray+0x13f0>
 8004114:	190b      	adds	r3, r1, r4
 8004116:	2208      	movs	r2, #8
 8004118:	4694      	mov	ip, r2
 800411a:	44bc      	add	ip, r7
 800411c:	4463      	add	r3, ip
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	1902      	adds	r2, r0, r4
 8004122:	2108      	movs	r1, #8
 8004124:	468c      	mov	ip, r1
 8004126:	2108      	movs	r1, #8
 8004128:	4688      	mov	r8, r1
 800412a:	44b8      	add	r8, r7
 800412c:	44c4      	add	ip, r8
 800412e:	4462      	add	r2, ip
 8004130:	6812      	ldr	r2, [r2, #0]
 8004132:	18d3      	adds	r3, r2, r3
 8004134:	220e      	movs	r2, #14
 8004136:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x34){dataASCII[i]=0x0f;}
 8004138:	2162      	movs	r1, #98	; 0x62
 800413a:	248c      	movs	r4, #140	; 0x8c
 800413c:	0064      	lsls	r4, r4, #1
 800413e:	190b      	adds	r3, r1, r4
 8004140:	2208      	movs	r2, #8
 8004142:	4694      	mov	ip, r2
 8004144:	44bc      	add	ip, r7
 8004146:	4463      	add	r3, ip
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	2080      	movs	r0, #128	; 0x80
 800414c:	1902      	adds	r2, r0, r4
 800414e:	2608      	movs	r6, #8
 8004150:	46b4      	mov	ip, r6
 8004152:	2608      	movs	r6, #8
 8004154:	46b0      	mov	r8, r6
 8004156:	44b8      	add	r8, r7
 8004158:	44c4      	add	ip, r8
 800415a:	4462      	add	r2, ip
 800415c:	6812      	ldr	r2, [r2, #0]
 800415e:	18d3      	adds	r3, r2, r3
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b34      	cmp	r3, #52	; 0x34
 8004164:	d111      	bne.n	800418a <printASCIIarray+0x1442>
 8004166:	190b      	adds	r3, r1, r4
 8004168:	2208      	movs	r2, #8
 800416a:	4694      	mov	ip, r2
 800416c:	44bc      	add	ip, r7
 800416e:	4463      	add	r3, ip
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	1902      	adds	r2, r0, r4
 8004174:	2108      	movs	r1, #8
 8004176:	468c      	mov	ip, r1
 8004178:	2108      	movs	r1, #8
 800417a:	4688      	mov	r8, r1
 800417c:	44b8      	add	r8, r7
 800417e:	44c4      	add	ip, r8
 8004180:	4462      	add	r2, ip
 8004182:	6812      	ldr	r2, [r2, #0]
 8004184:	18d3      	adds	r3, r2, r3
 8004186:	220f      	movs	r2, #15
 8004188:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x35){dataASCII[i]=0x10;}
 800418a:	2162      	movs	r1, #98	; 0x62
 800418c:	248c      	movs	r4, #140	; 0x8c
 800418e:	0064      	lsls	r4, r4, #1
 8004190:	190b      	adds	r3, r1, r4
 8004192:	2208      	movs	r2, #8
 8004194:	4694      	mov	ip, r2
 8004196:	44bc      	add	ip, r7
 8004198:	4463      	add	r3, ip
 800419a:	881b      	ldrh	r3, [r3, #0]
 800419c:	2080      	movs	r0, #128	; 0x80
 800419e:	1902      	adds	r2, r0, r4
 80041a0:	2608      	movs	r6, #8
 80041a2:	46b4      	mov	ip, r6
 80041a4:	2608      	movs	r6, #8
 80041a6:	46b0      	mov	r8, r6
 80041a8:	44b8      	add	r8, r7
 80041aa:	44c4      	add	ip, r8
 80041ac:	4462      	add	r2, ip
 80041ae:	6812      	ldr	r2, [r2, #0]
 80041b0:	18d3      	adds	r3, r2, r3
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2b35      	cmp	r3, #53	; 0x35
 80041b6:	d111      	bne.n	80041dc <printASCIIarray+0x1494>
 80041b8:	190b      	adds	r3, r1, r4
 80041ba:	2208      	movs	r2, #8
 80041bc:	4694      	mov	ip, r2
 80041be:	44bc      	add	ip, r7
 80041c0:	4463      	add	r3, ip
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	1902      	adds	r2, r0, r4
 80041c6:	2108      	movs	r1, #8
 80041c8:	468c      	mov	ip, r1
 80041ca:	2108      	movs	r1, #8
 80041cc:	4688      	mov	r8, r1
 80041ce:	44b8      	add	r8, r7
 80041d0:	44c4      	add	ip, r8
 80041d2:	4462      	add	r2, ip
 80041d4:	6812      	ldr	r2, [r2, #0]
 80041d6:	18d3      	adds	r3, r2, r3
 80041d8:	2210      	movs	r2, #16
 80041da:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x36){dataASCII[i]=0x11;}
 80041dc:	2162      	movs	r1, #98	; 0x62
 80041de:	248c      	movs	r4, #140	; 0x8c
 80041e0:	0064      	lsls	r4, r4, #1
 80041e2:	190b      	adds	r3, r1, r4
 80041e4:	2208      	movs	r2, #8
 80041e6:	4694      	mov	ip, r2
 80041e8:	44bc      	add	ip, r7
 80041ea:	4463      	add	r3, ip
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	2080      	movs	r0, #128	; 0x80
 80041f0:	1902      	adds	r2, r0, r4
 80041f2:	2608      	movs	r6, #8
 80041f4:	46b4      	mov	ip, r6
 80041f6:	2608      	movs	r6, #8
 80041f8:	46b0      	mov	r8, r6
 80041fa:	44b8      	add	r8, r7
 80041fc:	44c4      	add	ip, r8
 80041fe:	4462      	add	r2, ip
 8004200:	6812      	ldr	r2, [r2, #0]
 8004202:	18d3      	adds	r3, r2, r3
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	2b36      	cmp	r3, #54	; 0x36
 8004208:	d111      	bne.n	800422e <printASCIIarray+0x14e6>
 800420a:	190b      	adds	r3, r1, r4
 800420c:	2208      	movs	r2, #8
 800420e:	4694      	mov	ip, r2
 8004210:	44bc      	add	ip, r7
 8004212:	4463      	add	r3, ip
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	1902      	adds	r2, r0, r4
 8004218:	2108      	movs	r1, #8
 800421a:	468c      	mov	ip, r1
 800421c:	2108      	movs	r1, #8
 800421e:	4688      	mov	r8, r1
 8004220:	44b8      	add	r8, r7
 8004222:	44c4      	add	ip, r8
 8004224:	4462      	add	r2, ip
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	18d3      	adds	r3, r2, r3
 800422a:	2211      	movs	r2, #17
 800422c:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x37){dataASCII[i]=0x12;}
 800422e:	2162      	movs	r1, #98	; 0x62
 8004230:	248c      	movs	r4, #140	; 0x8c
 8004232:	0064      	lsls	r4, r4, #1
 8004234:	190b      	adds	r3, r1, r4
 8004236:	2208      	movs	r2, #8
 8004238:	4694      	mov	ip, r2
 800423a:	44bc      	add	ip, r7
 800423c:	4463      	add	r3, ip
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	2080      	movs	r0, #128	; 0x80
 8004242:	1902      	adds	r2, r0, r4
 8004244:	2608      	movs	r6, #8
 8004246:	46b4      	mov	ip, r6
 8004248:	2608      	movs	r6, #8
 800424a:	46b0      	mov	r8, r6
 800424c:	44b8      	add	r8, r7
 800424e:	44c4      	add	ip, r8
 8004250:	4462      	add	r2, ip
 8004252:	6812      	ldr	r2, [r2, #0]
 8004254:	18d3      	adds	r3, r2, r3
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2b37      	cmp	r3, #55	; 0x37
 800425a:	d111      	bne.n	8004280 <printASCIIarray+0x1538>
 800425c:	190b      	adds	r3, r1, r4
 800425e:	2208      	movs	r2, #8
 8004260:	4694      	mov	ip, r2
 8004262:	44bc      	add	ip, r7
 8004264:	4463      	add	r3, ip
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	1902      	adds	r2, r0, r4
 800426a:	2108      	movs	r1, #8
 800426c:	468c      	mov	ip, r1
 800426e:	2108      	movs	r1, #8
 8004270:	4688      	mov	r8, r1
 8004272:	44b8      	add	r8, r7
 8004274:	44c4      	add	ip, r8
 8004276:	4462      	add	r2, ip
 8004278:	6812      	ldr	r2, [r2, #0]
 800427a:	18d3      	adds	r3, r2, r3
 800427c:	2212      	movs	r2, #18
 800427e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x38){dataASCII[i]=0x13;}
 8004280:	2162      	movs	r1, #98	; 0x62
 8004282:	248c      	movs	r4, #140	; 0x8c
 8004284:	0064      	lsls	r4, r4, #1
 8004286:	190b      	adds	r3, r1, r4
 8004288:	2208      	movs	r2, #8
 800428a:	4694      	mov	ip, r2
 800428c:	44bc      	add	ip, r7
 800428e:	4463      	add	r3, ip
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	2080      	movs	r0, #128	; 0x80
 8004294:	1902      	adds	r2, r0, r4
 8004296:	2608      	movs	r6, #8
 8004298:	46b4      	mov	ip, r6
 800429a:	2608      	movs	r6, #8
 800429c:	46b0      	mov	r8, r6
 800429e:	44b8      	add	r8, r7
 80042a0:	44c4      	add	ip, r8
 80042a2:	4462      	add	r2, ip
 80042a4:	6812      	ldr	r2, [r2, #0]
 80042a6:	18d3      	adds	r3, r2, r3
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b38      	cmp	r3, #56	; 0x38
 80042ac:	d111      	bne.n	80042d2 <printASCIIarray+0x158a>
 80042ae:	190b      	adds	r3, r1, r4
 80042b0:	2208      	movs	r2, #8
 80042b2:	4694      	mov	ip, r2
 80042b4:	44bc      	add	ip, r7
 80042b6:	4463      	add	r3, ip
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	1902      	adds	r2, r0, r4
 80042bc:	2108      	movs	r1, #8
 80042be:	468c      	mov	ip, r1
 80042c0:	2108      	movs	r1, #8
 80042c2:	4688      	mov	r8, r1
 80042c4:	44b8      	add	r8, r7
 80042c6:	44c4      	add	ip, r8
 80042c8:	4462      	add	r2, ip
 80042ca:	6812      	ldr	r2, [r2, #0]
 80042cc:	18d3      	adds	r3, r2, r3
 80042ce:	2213      	movs	r2, #19
 80042d0:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x39){dataASCII[i]=0x14;}
 80042d2:	2162      	movs	r1, #98	; 0x62
 80042d4:	248c      	movs	r4, #140	; 0x8c
 80042d6:	0064      	lsls	r4, r4, #1
 80042d8:	190b      	adds	r3, r1, r4
 80042da:	2208      	movs	r2, #8
 80042dc:	4694      	mov	ip, r2
 80042de:	44bc      	add	ip, r7
 80042e0:	4463      	add	r3, ip
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	2080      	movs	r0, #128	; 0x80
 80042e6:	1902      	adds	r2, r0, r4
 80042e8:	2608      	movs	r6, #8
 80042ea:	46b4      	mov	ip, r6
 80042ec:	2608      	movs	r6, #8
 80042ee:	46b0      	mov	r8, r6
 80042f0:	44b8      	add	r8, r7
 80042f2:	44c4      	add	ip, r8
 80042f4:	4462      	add	r2, ip
 80042f6:	6812      	ldr	r2, [r2, #0]
 80042f8:	18d3      	adds	r3, r2, r3
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2b39      	cmp	r3, #57	; 0x39
 80042fe:	d111      	bne.n	8004324 <printASCIIarray+0x15dc>
 8004300:	190b      	adds	r3, r1, r4
 8004302:	2208      	movs	r2, #8
 8004304:	4694      	mov	ip, r2
 8004306:	44bc      	add	ip, r7
 8004308:	4463      	add	r3, ip
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	1902      	adds	r2, r0, r4
 800430e:	2108      	movs	r1, #8
 8004310:	468c      	mov	ip, r1
 8004312:	2108      	movs	r1, #8
 8004314:	4688      	mov	r8, r1
 8004316:	44b8      	add	r8, r7
 8004318:	44c4      	add	ip, r8
 800431a:	4462      	add	r2, ip
 800431c:	6812      	ldr	r2, [r2, #0]
 800431e:	18d3      	adds	r3, r2, r3
 8004320:	2214      	movs	r2, #20
 8004322:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3a){dataASCII[i]=0x15;}
 8004324:	2162      	movs	r1, #98	; 0x62
 8004326:	248c      	movs	r4, #140	; 0x8c
 8004328:	0064      	lsls	r4, r4, #1
 800432a:	190b      	adds	r3, r1, r4
 800432c:	2208      	movs	r2, #8
 800432e:	4694      	mov	ip, r2
 8004330:	44bc      	add	ip, r7
 8004332:	4463      	add	r3, ip
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	2080      	movs	r0, #128	; 0x80
 8004338:	1902      	adds	r2, r0, r4
 800433a:	2608      	movs	r6, #8
 800433c:	46b4      	mov	ip, r6
 800433e:	2608      	movs	r6, #8
 8004340:	46b0      	mov	r8, r6
 8004342:	44b8      	add	r8, r7
 8004344:	44c4      	add	ip, r8
 8004346:	4462      	add	r2, ip
 8004348:	6812      	ldr	r2, [r2, #0]
 800434a:	18d3      	adds	r3, r2, r3
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b3a      	cmp	r3, #58	; 0x3a
 8004350:	d111      	bne.n	8004376 <printASCIIarray+0x162e>
 8004352:	190b      	adds	r3, r1, r4
 8004354:	2208      	movs	r2, #8
 8004356:	4694      	mov	ip, r2
 8004358:	44bc      	add	ip, r7
 800435a:	4463      	add	r3, ip
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	1902      	adds	r2, r0, r4
 8004360:	2108      	movs	r1, #8
 8004362:	468c      	mov	ip, r1
 8004364:	2108      	movs	r1, #8
 8004366:	4688      	mov	r8, r1
 8004368:	44b8      	add	r8, r7
 800436a:	44c4      	add	ip, r8
 800436c:	4462      	add	r2, ip
 800436e:	6812      	ldr	r2, [r2, #0]
 8004370:	18d3      	adds	r3, r2, r3
 8004372:	2215      	movs	r2, #21
 8004374:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3b){dataASCII[i]=0x16;}
 8004376:	2162      	movs	r1, #98	; 0x62
 8004378:	248c      	movs	r4, #140	; 0x8c
 800437a:	0064      	lsls	r4, r4, #1
 800437c:	190b      	adds	r3, r1, r4
 800437e:	2208      	movs	r2, #8
 8004380:	4694      	mov	ip, r2
 8004382:	44bc      	add	ip, r7
 8004384:	4463      	add	r3, ip
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	2080      	movs	r0, #128	; 0x80
 800438a:	1902      	adds	r2, r0, r4
 800438c:	2608      	movs	r6, #8
 800438e:	46b4      	mov	ip, r6
 8004390:	2608      	movs	r6, #8
 8004392:	46b0      	mov	r8, r6
 8004394:	44b8      	add	r8, r7
 8004396:	44c4      	add	ip, r8
 8004398:	4462      	add	r2, ip
 800439a:	6812      	ldr	r2, [r2, #0]
 800439c:	18d3      	adds	r3, r2, r3
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	2b3b      	cmp	r3, #59	; 0x3b
 80043a2:	d111      	bne.n	80043c8 <printASCIIarray+0x1680>
 80043a4:	190b      	adds	r3, r1, r4
 80043a6:	2208      	movs	r2, #8
 80043a8:	4694      	mov	ip, r2
 80043aa:	44bc      	add	ip, r7
 80043ac:	4463      	add	r3, ip
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	1902      	adds	r2, r0, r4
 80043b2:	2108      	movs	r1, #8
 80043b4:	468c      	mov	ip, r1
 80043b6:	2108      	movs	r1, #8
 80043b8:	4688      	mov	r8, r1
 80043ba:	44b8      	add	r8, r7
 80043bc:	44c4      	add	ip, r8
 80043be:	4462      	add	r2, ip
 80043c0:	6812      	ldr	r2, [r2, #0]
 80043c2:	18d3      	adds	r3, r2, r3
 80043c4:	2216      	movs	r2, #22
 80043c6:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3c){dataASCII[i]=0x17;}
 80043c8:	2162      	movs	r1, #98	; 0x62
 80043ca:	248c      	movs	r4, #140	; 0x8c
 80043cc:	0064      	lsls	r4, r4, #1
 80043ce:	190b      	adds	r3, r1, r4
 80043d0:	2208      	movs	r2, #8
 80043d2:	4694      	mov	ip, r2
 80043d4:	44bc      	add	ip, r7
 80043d6:	4463      	add	r3, ip
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	2080      	movs	r0, #128	; 0x80
 80043dc:	1902      	adds	r2, r0, r4
 80043de:	2608      	movs	r6, #8
 80043e0:	46b4      	mov	ip, r6
 80043e2:	2608      	movs	r6, #8
 80043e4:	46b0      	mov	r8, r6
 80043e6:	44b8      	add	r8, r7
 80043e8:	44c4      	add	ip, r8
 80043ea:	4462      	add	r2, ip
 80043ec:	6812      	ldr	r2, [r2, #0]
 80043ee:	18d3      	adds	r3, r2, r3
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	2b3c      	cmp	r3, #60	; 0x3c
 80043f4:	d111      	bne.n	800441a <printASCIIarray+0x16d2>
 80043f6:	190b      	adds	r3, r1, r4
 80043f8:	2208      	movs	r2, #8
 80043fa:	4694      	mov	ip, r2
 80043fc:	44bc      	add	ip, r7
 80043fe:	4463      	add	r3, ip
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	1902      	adds	r2, r0, r4
 8004404:	2108      	movs	r1, #8
 8004406:	468c      	mov	ip, r1
 8004408:	2108      	movs	r1, #8
 800440a:	4688      	mov	r8, r1
 800440c:	44b8      	add	r8, r7
 800440e:	44c4      	add	ip, r8
 8004410:	4462      	add	r2, ip
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	18d3      	adds	r3, r2, r3
 8004416:	2217      	movs	r2, #23
 8004418:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3d){dataASCII[i]=0x18;}
 800441a:	2162      	movs	r1, #98	; 0x62
 800441c:	248c      	movs	r4, #140	; 0x8c
 800441e:	0064      	lsls	r4, r4, #1
 8004420:	190b      	adds	r3, r1, r4
 8004422:	2208      	movs	r2, #8
 8004424:	4694      	mov	ip, r2
 8004426:	44bc      	add	ip, r7
 8004428:	4463      	add	r3, ip
 800442a:	881b      	ldrh	r3, [r3, #0]
 800442c:	2080      	movs	r0, #128	; 0x80
 800442e:	1902      	adds	r2, r0, r4
 8004430:	2608      	movs	r6, #8
 8004432:	46b4      	mov	ip, r6
 8004434:	2608      	movs	r6, #8
 8004436:	46b0      	mov	r8, r6
 8004438:	44b8      	add	r8, r7
 800443a:	44c4      	add	ip, r8
 800443c:	4462      	add	r2, ip
 800443e:	6812      	ldr	r2, [r2, #0]
 8004440:	18d3      	adds	r3, r2, r3
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b3d      	cmp	r3, #61	; 0x3d
 8004446:	d111      	bne.n	800446c <printASCIIarray+0x1724>
 8004448:	190b      	adds	r3, r1, r4
 800444a:	2208      	movs	r2, #8
 800444c:	4694      	mov	ip, r2
 800444e:	44bc      	add	ip, r7
 8004450:	4463      	add	r3, ip
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	1902      	adds	r2, r0, r4
 8004456:	2108      	movs	r1, #8
 8004458:	468c      	mov	ip, r1
 800445a:	2108      	movs	r1, #8
 800445c:	4688      	mov	r8, r1
 800445e:	44b8      	add	r8, r7
 8004460:	44c4      	add	ip, r8
 8004462:	4462      	add	r2, ip
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	18d3      	adds	r3, r2, r3
 8004468:	2218      	movs	r2, #24
 800446a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3e){dataASCII[i]=0x19;}
 800446c:	2162      	movs	r1, #98	; 0x62
 800446e:	248c      	movs	r4, #140	; 0x8c
 8004470:	0064      	lsls	r4, r4, #1
 8004472:	190b      	adds	r3, r1, r4
 8004474:	2208      	movs	r2, #8
 8004476:	4694      	mov	ip, r2
 8004478:	44bc      	add	ip, r7
 800447a:	4463      	add	r3, ip
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	2080      	movs	r0, #128	; 0x80
 8004480:	1902      	adds	r2, r0, r4
 8004482:	2608      	movs	r6, #8
 8004484:	46b4      	mov	ip, r6
 8004486:	2608      	movs	r6, #8
 8004488:	46b0      	mov	r8, r6
 800448a:	44b8      	add	r8, r7
 800448c:	44c4      	add	ip, r8
 800448e:	4462      	add	r2, ip
 8004490:	6812      	ldr	r2, [r2, #0]
 8004492:	18d3      	adds	r3, r2, r3
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	2b3e      	cmp	r3, #62	; 0x3e
 8004498:	d111      	bne.n	80044be <printASCIIarray+0x1776>
 800449a:	190b      	adds	r3, r1, r4
 800449c:	2208      	movs	r2, #8
 800449e:	4694      	mov	ip, r2
 80044a0:	44bc      	add	ip, r7
 80044a2:	4463      	add	r3, ip
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	1902      	adds	r2, r0, r4
 80044a8:	2108      	movs	r1, #8
 80044aa:	468c      	mov	ip, r1
 80044ac:	2108      	movs	r1, #8
 80044ae:	4688      	mov	r8, r1
 80044b0:	44b8      	add	r8, r7
 80044b2:	44c4      	add	ip, r8
 80044b4:	4462      	add	r2, ip
 80044b6:	6812      	ldr	r2, [r2, #0]
 80044b8:	18d3      	adds	r3, r2, r3
 80044ba:	2219      	movs	r2, #25
 80044bc:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3f){dataASCII[i]=0x1a;}
 80044be:	2162      	movs	r1, #98	; 0x62
 80044c0:	248c      	movs	r4, #140	; 0x8c
 80044c2:	0064      	lsls	r4, r4, #1
 80044c4:	190b      	adds	r3, r1, r4
 80044c6:	2208      	movs	r2, #8
 80044c8:	4694      	mov	ip, r2
 80044ca:	44bc      	add	ip, r7
 80044cc:	4463      	add	r3, ip
 80044ce:	881b      	ldrh	r3, [r3, #0]
 80044d0:	2080      	movs	r0, #128	; 0x80
 80044d2:	1902      	adds	r2, r0, r4
 80044d4:	2608      	movs	r6, #8
 80044d6:	46b4      	mov	ip, r6
 80044d8:	2608      	movs	r6, #8
 80044da:	46b0      	mov	r8, r6
 80044dc:	44b8      	add	r8, r7
 80044de:	44c4      	add	ip, r8
 80044e0:	4462      	add	r2, ip
 80044e2:	6812      	ldr	r2, [r2, #0]
 80044e4:	18d3      	adds	r3, r2, r3
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b3f      	cmp	r3, #63	; 0x3f
 80044ea:	d111      	bne.n	8004510 <printASCIIarray+0x17c8>
 80044ec:	190b      	adds	r3, r1, r4
 80044ee:	2208      	movs	r2, #8
 80044f0:	4694      	mov	ip, r2
 80044f2:	44bc      	add	ip, r7
 80044f4:	4463      	add	r3, ip
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	1902      	adds	r2, r0, r4
 80044fa:	2108      	movs	r1, #8
 80044fc:	468c      	mov	ip, r1
 80044fe:	2108      	movs	r1, #8
 8004500:	4688      	mov	r8, r1
 8004502:	44b8      	add	r8, r7
 8004504:	44c4      	add	ip, r8
 8004506:	4462      	add	r2, ip
 8004508:	6812      	ldr	r2, [r2, #0]
 800450a:	18d3      	adds	r3, r2, r3
 800450c:	221a      	movs	r2, #26
 800450e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5b){dataASCII[i]=0x1b;}
 8004510:	2162      	movs	r1, #98	; 0x62
 8004512:	248c      	movs	r4, #140	; 0x8c
 8004514:	0064      	lsls	r4, r4, #1
 8004516:	190b      	adds	r3, r1, r4
 8004518:	2208      	movs	r2, #8
 800451a:	4694      	mov	ip, r2
 800451c:	44bc      	add	ip, r7
 800451e:	4463      	add	r3, ip
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	2080      	movs	r0, #128	; 0x80
 8004524:	1902      	adds	r2, r0, r4
 8004526:	2608      	movs	r6, #8
 8004528:	46b4      	mov	ip, r6
 800452a:	2608      	movs	r6, #8
 800452c:	46b0      	mov	r8, r6
 800452e:	44b8      	add	r8, r7
 8004530:	44c4      	add	ip, r8
 8004532:	4462      	add	r2, ip
 8004534:	6812      	ldr	r2, [r2, #0]
 8004536:	18d3      	adds	r3, r2, r3
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2b5b      	cmp	r3, #91	; 0x5b
 800453c:	d111      	bne.n	8004562 <printASCIIarray+0x181a>
 800453e:	190b      	adds	r3, r1, r4
 8004540:	2208      	movs	r2, #8
 8004542:	4694      	mov	ip, r2
 8004544:	44bc      	add	ip, r7
 8004546:	4463      	add	r3, ip
 8004548:	881b      	ldrh	r3, [r3, #0]
 800454a:	1902      	adds	r2, r0, r4
 800454c:	2108      	movs	r1, #8
 800454e:	468c      	mov	ip, r1
 8004550:	2108      	movs	r1, #8
 8004552:	4688      	mov	r8, r1
 8004554:	44b8      	add	r8, r7
 8004556:	44c4      	add	ip, r8
 8004558:	4462      	add	r2, ip
 800455a:	6812      	ldr	r2, [r2, #0]
 800455c:	18d3      	adds	r3, r2, r3
 800455e:	221b      	movs	r2, #27
 8004560:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5c){dataASCII[i]=0x1c;}
 8004562:	2162      	movs	r1, #98	; 0x62
 8004564:	248c      	movs	r4, #140	; 0x8c
 8004566:	0064      	lsls	r4, r4, #1
 8004568:	190b      	adds	r3, r1, r4
 800456a:	2208      	movs	r2, #8
 800456c:	4694      	mov	ip, r2
 800456e:	44bc      	add	ip, r7
 8004570:	4463      	add	r3, ip
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	2080      	movs	r0, #128	; 0x80
 8004576:	1902      	adds	r2, r0, r4
 8004578:	2608      	movs	r6, #8
 800457a:	46b4      	mov	ip, r6
 800457c:	2608      	movs	r6, #8
 800457e:	46b0      	mov	r8, r6
 8004580:	44b8      	add	r8, r7
 8004582:	44c4      	add	ip, r8
 8004584:	4462      	add	r2, ip
 8004586:	6812      	ldr	r2, [r2, #0]
 8004588:	18d3      	adds	r3, r2, r3
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	2b5c      	cmp	r3, #92	; 0x5c
 800458e:	d111      	bne.n	80045b4 <printASCIIarray+0x186c>
 8004590:	190b      	adds	r3, r1, r4
 8004592:	2208      	movs	r2, #8
 8004594:	4694      	mov	ip, r2
 8004596:	44bc      	add	ip, r7
 8004598:	4463      	add	r3, ip
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	1902      	adds	r2, r0, r4
 800459e:	2108      	movs	r1, #8
 80045a0:	468c      	mov	ip, r1
 80045a2:	2108      	movs	r1, #8
 80045a4:	4688      	mov	r8, r1
 80045a6:	44b8      	add	r8, r7
 80045a8:	44c4      	add	ip, r8
 80045aa:	4462      	add	r2, ip
 80045ac:	6812      	ldr	r2, [r2, #0]
 80045ae:	18d3      	adds	r3, r2, r3
 80045b0:	221c      	movs	r2, #28
 80045b2:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5d){dataASCII[i]=0x1d;}
 80045b4:	2162      	movs	r1, #98	; 0x62
 80045b6:	248c      	movs	r4, #140	; 0x8c
 80045b8:	0064      	lsls	r4, r4, #1
 80045ba:	190b      	adds	r3, r1, r4
 80045bc:	2208      	movs	r2, #8
 80045be:	4694      	mov	ip, r2
 80045c0:	44bc      	add	ip, r7
 80045c2:	4463      	add	r3, ip
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	2080      	movs	r0, #128	; 0x80
 80045c8:	1902      	adds	r2, r0, r4
 80045ca:	2608      	movs	r6, #8
 80045cc:	46b4      	mov	ip, r6
 80045ce:	2608      	movs	r6, #8
 80045d0:	46b0      	mov	r8, r6
 80045d2:	44b8      	add	r8, r7
 80045d4:	44c4      	add	ip, r8
 80045d6:	4462      	add	r2, ip
 80045d8:	6812      	ldr	r2, [r2, #0]
 80045da:	18d3      	adds	r3, r2, r3
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b5d      	cmp	r3, #93	; 0x5d
 80045e0:	d111      	bne.n	8004606 <printASCIIarray+0x18be>
 80045e2:	190b      	adds	r3, r1, r4
 80045e4:	2208      	movs	r2, #8
 80045e6:	4694      	mov	ip, r2
 80045e8:	44bc      	add	ip, r7
 80045ea:	4463      	add	r3, ip
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	1902      	adds	r2, r0, r4
 80045f0:	2108      	movs	r1, #8
 80045f2:	468c      	mov	ip, r1
 80045f4:	2108      	movs	r1, #8
 80045f6:	4688      	mov	r8, r1
 80045f8:	44b8      	add	r8, r7
 80045fa:	44c4      	add	ip, r8
 80045fc:	4462      	add	r2, ip
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	18d3      	adds	r3, r2, r3
 8004602:	221d      	movs	r2, #29
 8004604:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5f){dataASCII[i]=0x1e;}
 8004606:	2162      	movs	r1, #98	; 0x62
 8004608:	248c      	movs	r4, #140	; 0x8c
 800460a:	0064      	lsls	r4, r4, #1
 800460c:	190b      	adds	r3, r1, r4
 800460e:	2208      	movs	r2, #8
 8004610:	4694      	mov	ip, r2
 8004612:	44bc      	add	ip, r7
 8004614:	4463      	add	r3, ip
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	2080      	movs	r0, #128	; 0x80
 800461a:	1902      	adds	r2, r0, r4
 800461c:	2608      	movs	r6, #8
 800461e:	46b4      	mov	ip, r6
 8004620:	2608      	movs	r6, #8
 8004622:	46b0      	mov	r8, r6
 8004624:	44b8      	add	r8, r7
 8004626:	44c4      	add	ip, r8
 8004628:	4462      	add	r2, ip
 800462a:	6812      	ldr	r2, [r2, #0]
 800462c:	18d3      	adds	r3, r2, r3
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	2b5f      	cmp	r3, #95	; 0x5f
 8004632:	d111      	bne.n	8004658 <printASCIIarray+0x1910>
 8004634:	190b      	adds	r3, r1, r4
 8004636:	2208      	movs	r2, #8
 8004638:	4694      	mov	ip, r2
 800463a:	44bc      	add	ip, r7
 800463c:	4463      	add	r3, ip
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	1902      	adds	r2, r0, r4
 8004642:	2108      	movs	r1, #8
 8004644:	468c      	mov	ip, r1
 8004646:	2108      	movs	r1, #8
 8004648:	4688      	mov	r8, r1
 800464a:	44b8      	add	r8, r7
 800464c:	44c4      	add	ip, r8
 800464e:	4462      	add	r2, ip
 8004650:	6812      	ldr	r2, [r2, #0]
 8004652:	18d3      	adds	r3, r2, r3
 8004654:	221e      	movs	r2, #30
 8004656:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x7c){dataASCII[i]=0x1f;}
 8004658:	2162      	movs	r1, #98	; 0x62
 800465a:	248c      	movs	r4, #140	; 0x8c
 800465c:	0064      	lsls	r4, r4, #1
 800465e:	190b      	adds	r3, r1, r4
 8004660:	2208      	movs	r2, #8
 8004662:	4694      	mov	ip, r2
 8004664:	44bc      	add	ip, r7
 8004666:	4463      	add	r3, ip
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	2080      	movs	r0, #128	; 0x80
 800466c:	1902      	adds	r2, r0, r4
 800466e:	2608      	movs	r6, #8
 8004670:	46b4      	mov	ip, r6
 8004672:	2608      	movs	r6, #8
 8004674:	46b0      	mov	r8, r6
 8004676:	44b8      	add	r8, r7
 8004678:	44c4      	add	ip, r8
 800467a:	4462      	add	r2, ip
 800467c:	6812      	ldr	r2, [r2, #0]
 800467e:	18d3      	adds	r3, r2, r3
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b7c      	cmp	r3, #124	; 0x7c
 8004684:	d111      	bne.n	80046aa <printASCIIarray+0x1962>
 8004686:	190b      	adds	r3, r1, r4
 8004688:	2208      	movs	r2, #8
 800468a:	4694      	mov	ip, r2
 800468c:	44bc      	add	ip, r7
 800468e:	4463      	add	r3, ip
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	1902      	adds	r2, r0, r4
 8004694:	2108      	movs	r1, #8
 8004696:	468c      	mov	ip, r1
 8004698:	2108      	movs	r1, #8
 800469a:	4688      	mov	r8, r1
 800469c:	44b8      	add	r8, r7
 800469e:	44c4      	add	ip, r8
 80046a0:	4462      	add	r2, ip
 80046a2:	6812      	ldr	r2, [r2, #0]
 80046a4:	18d3      	adds	r3, r2, r3
 80046a6:	221f      	movs	r2, #31
 80046a8:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 80046aa:	2162      	movs	r1, #98	; 0x62
 80046ac:	208c      	movs	r0, #140	; 0x8c
 80046ae:	0040      	lsls	r0, r0, #1
 80046b0:	180b      	adds	r3, r1, r0
 80046b2:	2208      	movs	r2, #8
 80046b4:	4694      	mov	ip, r2
 80046b6:	44bc      	add	ip, r7
 80046b8:	4463      	add	r3, ip
 80046ba:	881a      	ldrh	r2, [r3, #0]
 80046bc:	180b      	adds	r3, r1, r0
 80046be:	2108      	movs	r1, #8
 80046c0:	468c      	mov	ip, r1
 80046c2:	44bc      	add	ip, r7
 80046c4:	4463      	add	r3, ip
 80046c6:	3201      	adds	r2, #1
 80046c8:	801a      	strh	r2, [r3, #0]
 80046ca:	231e      	movs	r3, #30
 80046cc:	33ff      	adds	r3, #255	; 0xff
 80046ce:	2208      	movs	r2, #8
 80046d0:	189b      	adds	r3, r3, r2
 80046d2:	19db      	adds	r3, r3, r7
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2162      	movs	r1, #98	; 0x62
 80046da:	208c      	movs	r0, #140	; 0x8c
 80046dc:	0040      	lsls	r0, r0, #1
 80046de:	180a      	adds	r2, r1, r0
 80046e0:	2408      	movs	r4, #8
 80046e2:	46a4      	mov	ip, r4
 80046e4:	44bc      	add	ip, r7
 80046e6:	4462      	add	r2, ip
 80046e8:	8812      	ldrh	r2, [r2, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d201      	bcs.n	80046f2 <printASCIIarray+0x19aa>
 80046ee:	f7ff fabc 	bl	8003c6a <printASCIIarray+0xf22>
				}
				for(i=0;i<strLen;i++){
 80046f2:	180b      	adds	r3, r1, r0
 80046f4:	2208      	movs	r2, #8
 80046f6:	4694      	mov	ip, r2
 80046f8:	44bc      	add	ip, r7
 80046fa:	4463      	add	r3, ip
 80046fc:	2200      	movs	r2, #0
 80046fe:	801a      	strh	r2, [r3, #0]
 8004700:	e113      	b.n	800492a <printASCIIarray+0x1be2>
					for(j=0;j<symLen;j++){
 8004702:	2364      	movs	r3, #100	; 0x64
 8004704:	228c      	movs	r2, #140	; 0x8c
 8004706:	0052      	lsls	r2, r2, #1
 8004708:	189b      	adds	r3, r3, r2
 800470a:	2208      	movs	r2, #8
 800470c:	4694      	mov	ip, r2
 800470e:	44bc      	add	ip, r7
 8004710:	4463      	add	r3, ip
 8004712:	2200      	movs	r2, #0
 8004714:	801a      	strh	r2, [r3, #0]
 8004716:	e041      	b.n	800479c <printASCIIarray+0x1a54>
						weoBuffer[j]=F3[dataASCII[i]][j];
 8004718:	2362      	movs	r3, #98	; 0x62
 800471a:	218c      	movs	r1, #140	; 0x8c
 800471c:	0049      	lsls	r1, r1, #1
 800471e:	185b      	adds	r3, r3, r1
 8004720:	2208      	movs	r2, #8
 8004722:	4694      	mov	ip, r2
 8004724:	44bc      	add	ip, r7
 8004726:	4463      	add	r3, ip
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	2280      	movs	r2, #128	; 0x80
 800472c:	1852      	adds	r2, r2, r1
 800472e:	2008      	movs	r0, #8
 8004730:	4684      	mov	ip, r0
 8004732:	2008      	movs	r0, #8
 8004734:	4680      	mov	r8, r0
 8004736:	44b8      	add	r8, r7
 8004738:	44c4      	add	ip, r8
 800473a:	4462      	add	r2, ip
 800473c:	6812      	ldr	r2, [r2, #0]
 800473e:	18d3      	adds	r3, r2, r3
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	001a      	movs	r2, r3
 8004744:	2664      	movs	r6, #100	; 0x64
 8004746:	1873      	adds	r3, r6, r1
 8004748:	2008      	movs	r0, #8
 800474a:	4684      	mov	ip, r0
 800474c:	44bc      	add	ip, r7
 800474e:	4463      	add	r3, ip
 8004750:	8818      	ldrh	r0, [r3, #0]
 8004752:	1873      	adds	r3, r6, r1
 8004754:	2108      	movs	r1, #8
 8004756:	468c      	mov	ip, r1
 8004758:	44bc      	add	ip, r7
 800475a:	4463      	add	r3, ip
 800475c:	8819      	ldrh	r1, [r3, #0]
 800475e:	4ca1      	ldr	r4, [pc, #644]	; (80049e4 <printASCIIarray+0x1c9c>)
 8004760:	0013      	movs	r3, r2
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	189b      	adds	r3, r3, r2
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	189b      	adds	r3, r3, r2
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	18e3      	adds	r3, r4, r3
 800476e:	5c1a      	ldrb	r2, [r3, r0]
 8004770:	239a      	movs	r3, #154	; 0x9a
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	2008      	movs	r0, #8
 8004776:	181b      	adds	r3, r3, r0
 8004778:	19db      	adds	r3, r3, r7
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	545a      	strb	r2, [r3, r1]
					for(j=0;j<symLen;j++){
 800477e:	218c      	movs	r1, #140	; 0x8c
 8004780:	0049      	lsls	r1, r1, #1
 8004782:	1873      	adds	r3, r6, r1
 8004784:	2208      	movs	r2, #8
 8004786:	4694      	mov	ip, r2
 8004788:	44bc      	add	ip, r7
 800478a:	4463      	add	r3, ip
 800478c:	881a      	ldrh	r2, [r3, #0]
 800478e:	1873      	adds	r3, r6, r1
 8004790:	2108      	movs	r1, #8
 8004792:	468c      	mov	ip, r1
 8004794:	44bc      	add	ip, r7
 8004796:	4463      	add	r3, ip
 8004798:	3201      	adds	r2, #1
 800479a:	801a      	strh	r2, [r3, #0]
 800479c:	2364      	movs	r3, #100	; 0x64
 800479e:	218c      	movs	r1, #140	; 0x8c
 80047a0:	0049      	lsls	r1, r1, #1
 80047a2:	185b      	adds	r3, r3, r1
 80047a4:	2208      	movs	r2, #8
 80047a6:	18ba      	adds	r2, r7, r2
 80047a8:	189a      	adds	r2, r3, r2
 80047aa:	235a      	movs	r3, #90	; 0x5a
 80047ac:	185b      	adds	r3, r3, r1
 80047ae:	2008      	movs	r0, #8
 80047b0:	4684      	mov	ip, r0
 80047b2:	44bc      	add	ip, r7
 80047b4:	4463      	add	r3, ip
 80047b6:	8812      	ldrh	r2, [r2, #0]
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d3ac      	bcc.n	8004718 <printASCIIarray+0x19d0>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 80047be:	2366      	movs	r3, #102	; 0x66
 80047c0:	185b      	adds	r3, r3, r1
 80047c2:	2208      	movs	r2, #8
 80047c4:	4694      	mov	ip, r2
 80047c6:	44bc      	add	ip, r7
 80047c8:	4463      	add	r3, ip
 80047ca:	2200      	movs	r2, #0
 80047cc:	801a      	strh	r2, [r3, #0]
 80047ce:	e032      	b.n	8004836 <printASCIIarray+0x1aee>
						weoBuffer[k]=weoBuffer[k] & contrast;
 80047d0:	2066      	movs	r0, #102	; 0x66
 80047d2:	248c      	movs	r4, #140	; 0x8c
 80047d4:	0064      	lsls	r4, r4, #1
 80047d6:	1903      	adds	r3, r0, r4
 80047d8:	2208      	movs	r2, #8
 80047da:	4694      	mov	ip, r2
 80047dc:	44bc      	add	ip, r7
 80047de:	4463      	add	r3, ip
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	269a      	movs	r6, #154	; 0x9a
 80047e4:	0076      	lsls	r6, r6, #1
 80047e6:	2208      	movs	r2, #8
 80047e8:	18b2      	adds	r2, r6, r2
 80047ea:	19d2      	adds	r2, r2, r7
 80047ec:	6812      	ldr	r2, [r2, #0]
 80047ee:	5cd2      	ldrb	r2, [r2, r3]
 80047f0:	1903      	adds	r3, r0, r4
 80047f2:	2108      	movs	r1, #8
 80047f4:	468c      	mov	ip, r1
 80047f6:	44bc      	add	ip, r7
 80047f8:	4463      	add	r3, ip
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	4698      	mov	r8, r3
 80047fe:	215c      	movs	r1, #92	; 0x5c
 8004800:	1909      	adds	r1, r1, r4
 8004802:	2308      	movs	r3, #8
 8004804:	469c      	mov	ip, r3
 8004806:	44bc      	add	ip, r7
 8004808:	4461      	add	r1, ip
 800480a:	7809      	ldrb	r1, [r1, #0]
 800480c:	400a      	ands	r2, r1
 800480e:	b2d1      	uxtb	r1, r2
 8004810:	2208      	movs	r2, #8
 8004812:	18b2      	adds	r2, r6, r2
 8004814:	19d2      	adds	r2, r2, r7
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	4643      	mov	r3, r8
 800481a:	54d1      	strb	r1, [r2, r3]
					for (k=0;k<symLen;k++){
 800481c:	1903      	adds	r3, r0, r4
 800481e:	2208      	movs	r2, #8
 8004820:	4694      	mov	ip, r2
 8004822:	44bc      	add	ip, r7
 8004824:	4463      	add	r3, ip
 8004826:	881a      	ldrh	r2, [r3, #0]
 8004828:	1903      	adds	r3, r0, r4
 800482a:	2108      	movs	r1, #8
 800482c:	468c      	mov	ip, r1
 800482e:	44bc      	add	ip, r7
 8004830:	4463      	add	r3, ip
 8004832:	3201      	adds	r2, #1
 8004834:	801a      	strh	r2, [r3, #0]
 8004836:	2366      	movs	r3, #102	; 0x66
 8004838:	268c      	movs	r6, #140	; 0x8c
 800483a:	0076      	lsls	r6, r6, #1
 800483c:	199b      	adds	r3, r3, r6
 800483e:	2208      	movs	r2, #8
 8004840:	18ba      	adds	r2, r7, r2
 8004842:	189a      	adds	r2, r3, r2
 8004844:	235a      	movs	r3, #90	; 0x5a
 8004846:	199b      	adds	r3, r3, r6
 8004848:	2108      	movs	r1, #8
 800484a:	468c      	mov	ip, r1
 800484c:	44bc      	add	ip, r7
 800484e:	4463      	add	r3, ip
 8004850:	8812      	ldrh	r2, [r2, #0]
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	429a      	cmp	r2, r3
 8004856:	d3bb      	bcc.n	80047d0 <printASCIIarray+0x1a88>
					}
				weoDrawRectangleFilled(ASCII_X, imY, ASCII_X+X_increment-1, imY + ASCII_height - decY, 0xFF, weoBuffer);
 8004858:	205f      	movs	r0, #95	; 0x5f
 800485a:	1983      	adds	r3, r0, r6
 800485c:	2208      	movs	r2, #8
 800485e:	18ba      	adds	r2, r7, r2
 8004860:	189a      	adds	r2, r3, r2
 8004862:	233f      	movs	r3, #63	; 0x3f
 8004864:	199b      	adds	r3, r3, r6
 8004866:	2108      	movs	r1, #8
 8004868:	468c      	mov	ip, r1
 800486a:	44bc      	add	ip, r7
 800486c:	4463      	add	r3, ip
 800486e:	7812      	ldrb	r2, [r2, #0]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	18d3      	adds	r3, r2, r3
 8004874:	b2db      	uxtb	r3, r3
 8004876:	3b01      	subs	r3, #1
 8004878:	b2dc      	uxtb	r4, r3
 800487a:	218f      	movs	r1, #143	; 0x8f
 800487c:	0049      	lsls	r1, r1, #1
 800487e:	2308      	movs	r3, #8
 8004880:	18cb      	adds	r3, r1, r3
 8004882:	19da      	adds	r2, r3, r7
 8004884:	213e      	movs	r1, #62	; 0x3e
 8004886:	198b      	adds	r3, r1, r6
 8004888:	2108      	movs	r1, #8
 800488a:	468c      	mov	ip, r1
 800488c:	44bc      	add	ip, r7
 800488e:	4463      	add	r3, ip
 8004890:	7812      	ldrb	r2, [r2, #0]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	18d3      	adds	r3, r2, r3
 8004896:	b2da      	uxtb	r2, r3
 8004898:	2160      	movs	r1, #96	; 0x60
 800489a:	198b      	adds	r3, r1, r6
 800489c:	2108      	movs	r1, #8
 800489e:	468c      	mov	ip, r1
 80048a0:	44bc      	add	ip, r7
 80048a2:	4463      	add	r3, ip
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	4698      	mov	r8, r3
 80048ac:	218f      	movs	r1, #143	; 0x8f
 80048ae:	0049      	lsls	r1, r1, #1
 80048b0:	2308      	movs	r3, #8
 80048b2:	18cb      	adds	r3, r1, r3
 80048b4:	19db      	adds	r3, r3, r7
 80048b6:	7819      	ldrb	r1, [r3, #0]
 80048b8:	0006      	movs	r6, r0
 80048ba:	238c      	movs	r3, #140	; 0x8c
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	18c3      	adds	r3, r0, r3
 80048c0:	2208      	movs	r2, #8
 80048c2:	4694      	mov	ip, r2
 80048c4:	44bc      	add	ip, r7
 80048c6:	4463      	add	r3, ip
 80048c8:	7818      	ldrb	r0, [r3, #0]
 80048ca:	239a      	movs	r3, #154	; 0x9a
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	2208      	movs	r2, #8
 80048d0:	189b      	adds	r3, r3, r2
 80048d2:	19db      	adds	r3, r3, r7
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	9301      	str	r3, [sp, #4]
 80048d8:	23ff      	movs	r3, #255	; 0xff
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	4643      	mov	r3, r8
 80048de:	0022      	movs	r2, r4
 80048e0:	f7fc fe22 	bl	8001528 <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 80048e4:	208c      	movs	r0, #140	; 0x8c
 80048e6:	0040      	lsls	r0, r0, #1
 80048e8:	1833      	adds	r3, r6, r0
 80048ea:	2208      	movs	r2, #8
 80048ec:	4694      	mov	ip, r2
 80048ee:	44bc      	add	ip, r7
 80048f0:	4463      	add	r3, ip
 80048f2:	1832      	adds	r2, r6, r0
 80048f4:	2108      	movs	r1, #8
 80048f6:	1879      	adds	r1, r7, r1
 80048f8:	1851      	adds	r1, r2, r1
 80048fa:	223f      	movs	r2, #63	; 0x3f
 80048fc:	1812      	adds	r2, r2, r0
 80048fe:	2408      	movs	r4, #8
 8004900:	46a4      	mov	ip, r4
 8004902:	44bc      	add	ip, r7
 8004904:	4462      	add	r2, ip
 8004906:	7809      	ldrb	r1, [r1, #0]
 8004908:	7812      	ldrb	r2, [r2, #0]
 800490a:	188a      	adds	r2, r1, r2
 800490c:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 800490e:	2162      	movs	r1, #98	; 0x62
 8004910:	180b      	adds	r3, r1, r0
 8004912:	2208      	movs	r2, #8
 8004914:	4694      	mov	ip, r2
 8004916:	44bc      	add	ip, r7
 8004918:	4463      	add	r3, ip
 800491a:	881a      	ldrh	r2, [r3, #0]
 800491c:	180b      	adds	r3, r1, r0
 800491e:	2108      	movs	r1, #8
 8004920:	468c      	mov	ip, r1
 8004922:	44bc      	add	ip, r7
 8004924:	4463      	add	r3, ip
 8004926:	3201      	adds	r2, #1
 8004928:	801a      	strh	r2, [r3, #0]
 800492a:	231e      	movs	r3, #30
 800492c:	33ff      	adds	r3, #255	; 0xff
 800492e:	2208      	movs	r2, #8
 8004930:	189b      	adds	r3, r3, r2
 8004932:	19db      	adds	r3, r3, r7
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	b29b      	uxth	r3, r3
 8004938:	2162      	movs	r1, #98	; 0x62
 800493a:	208c      	movs	r0, #140	; 0x8c
 800493c:	0040      	lsls	r0, r0, #1
 800493e:	180a      	adds	r2, r1, r0
 8004940:	2408      	movs	r4, #8
 8004942:	46a4      	mov	ip, r4
 8004944:	44bc      	add	ip, r7
 8004946:	4462      	add	r2, ip
 8004948:	8812      	ldrh	r2, [r2, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d200      	bcs.n	8004950 <printASCIIarray+0x1c08>
 800494e:	e6d8      	b.n	8004702 <printASCIIarray+0x19ba>
				}
				for(i=0;i<symLen;i++){
 8004950:	180b      	adds	r3, r1, r0
 8004952:	2208      	movs	r2, #8
 8004954:	4694      	mov	ip, r2
 8004956:	44bc      	add	ip, r7
 8004958:	4463      	add	r3, ip
 800495a:	2200      	movs	r2, #0
 800495c:	801a      	strh	r2, [r3, #0]
 800495e:	e01e      	b.n	800499e <printASCIIarray+0x1c56>
									weoBuffer[j]=0x00;
 8004960:	2364      	movs	r3, #100	; 0x64
 8004962:	208c      	movs	r0, #140	; 0x8c
 8004964:	0040      	lsls	r0, r0, #1
 8004966:	181b      	adds	r3, r3, r0
 8004968:	2208      	movs	r2, #8
 800496a:	4694      	mov	ip, r2
 800496c:	44bc      	add	ip, r7
 800496e:	4463      	add	r3, ip
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	229a      	movs	r2, #154	; 0x9a
 8004974:	0052      	lsls	r2, r2, #1
 8004976:	2108      	movs	r1, #8
 8004978:	1852      	adds	r2, r2, r1
 800497a:	19d2      	adds	r2, r2, r7
 800497c:	6812      	ldr	r2, [r2, #0]
 800497e:	2100      	movs	r1, #0
 8004980:	54d1      	strb	r1, [r2, r3]
				for(i=0;i<symLen;i++){
 8004982:	2162      	movs	r1, #98	; 0x62
 8004984:	180b      	adds	r3, r1, r0
 8004986:	2208      	movs	r2, #8
 8004988:	4694      	mov	ip, r2
 800498a:	44bc      	add	ip, r7
 800498c:	4463      	add	r3, ip
 800498e:	881a      	ldrh	r2, [r3, #0]
 8004990:	180b      	adds	r3, r1, r0
 8004992:	2108      	movs	r1, #8
 8004994:	468c      	mov	ip, r1
 8004996:	44bc      	add	ip, r7
 8004998:	4463      	add	r3, ip
 800499a:	3201      	adds	r2, #1
 800499c:	801a      	strh	r2, [r3, #0]
 800499e:	2362      	movs	r3, #98	; 0x62
 80049a0:	218c      	movs	r1, #140	; 0x8c
 80049a2:	0049      	lsls	r1, r1, #1
 80049a4:	185b      	adds	r3, r3, r1
 80049a6:	2208      	movs	r2, #8
 80049a8:	18ba      	adds	r2, r7, r2
 80049aa:	189a      	adds	r2, r3, r2
 80049ac:	235a      	movs	r3, #90	; 0x5a
 80049ae:	185b      	adds	r3, r3, r1
 80049b0:	2108      	movs	r1, #8
 80049b2:	468c      	mov	ip, r1
 80049b4:	44bc      	add	ip, r7
 80049b6:	4463      	add	r3, ip
 80049b8:	8812      	ldrh	r2, [r2, #0]
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d3cf      	bcc.n	8004960 <printASCIIarray+0x1c18>
 80049c0:	46ad      	mov	sp, r5
							}
			}
			cmd2Execute=0;
 80049c2:	4b09      	ldr	r3, [pc, #36]	; (80049e8 <printASCIIarray+0x1ca0>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
			GPIOC->ODR |= 1 << 6;	//set BF
 80049c8:	4b08      	ldr	r3, [pc, #32]	; (80049ec <printASCIIarray+0x1ca4>)
 80049ca:	695a      	ldr	r2, [r3, #20]
 80049cc:	4b07      	ldr	r3, [pc, #28]	; (80049ec <printASCIIarray+0x1ca4>)
 80049ce:	2140      	movs	r1, #64	; 0x40
 80049d0:	430a      	orrs	r2, r1
 80049d2:	615a      	str	r2, [r3, #20]

	}
 80049d4:	46c0      	nop			; (mov r8, r8)
 80049d6:	0018      	movs	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	b063      	add	sp, #396	; 0x18c
 80049dc:	bcc0      	pop	{r6, r7}
 80049de:	46b9      	mov	r9, r7
 80049e0:	46b0      	mov	r8, r6
 80049e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049e4:	08013a7c 	.word	0x08013a7c
 80049e8:	20000426 	.word	0x20000426
 80049ec:	50000800 	.word	0x50000800

080049f0 <LIS3DHsendCMD>:
//		HAL_Delay(500);
//		GPIOC->ODR |= 1 << 6;	//set BF
//		cmd2Execute=0;
	}
//=============================================================================================================
	void LIS3DHsendCMD(uint8_t reg, uint8_t data) {
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af02      	add	r7, sp, #8
 80049f6:	0002      	movs	r2, r0
 80049f8:	1dfb      	adds	r3, r7, #7
 80049fa:	701a      	strb	r2, [r3, #0]
 80049fc:	1dbb      	adds	r3, r7, #6
 80049fe:	1c0a      	adds	r2, r1, #0
 8004a00:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 8004a02:	210c      	movs	r1, #12
 8004a04:	187b      	adds	r3, r7, r1
 8004a06:	1dfa      	adds	r2, r7, #7
 8004a08:	7812      	ldrb	r2, [r2, #0]
 8004a0a:	701a      	strb	r2, [r3, #0]
 8004a0c:	187b      	adds	r3, r7, r1
 8004a0e:	1dba      	adds	r2, r7, #6
 8004a10:	7812      	ldrb	r2, [r2, #0]
 8004a12:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x32, buf, 2, 1000);	//32h - address for writing
 8004a14:	187a      	adds	r2, r7, r1
 8004a16:	4806      	ldr	r0, [pc, #24]	; (8004a30 <LIS3DHsendCMD+0x40>)
 8004a18:	23fa      	movs	r3, #250	; 0xfa
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	2302      	movs	r3, #2
 8004a20:	2132      	movs	r1, #50	; 0x32
 8004a22:	f001 fdbf 	bl	80065a4 <HAL_I2C_Master_Transmit>
	}
 8004a26:	46c0      	nop			; (mov r8, r8)
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	b004      	add	sp, #16
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	46c0      	nop			; (mov r8, r8)
 8004a30:	200000bc 	.word	0x200000bc

08004a34 <LIS3DHsetup>:
//	  xVal = buffer[0];
//	  yVal = buffer[1];
//	  zVal = buffer[2];
//	}
//=============================================================================================================
	void LIS3DHsetup(void){
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
		uint8_t CTRL_REG1_val=0x00;
 8004a3a:	1dfb      	adds	r3, r7, #7
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG4_val=0x00;
 8004a40:	1dbb      	adds	r3, r7, #6
 8004a42:	2200      	movs	r2, #0
 8004a44:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG5_val=0x00;
 8004a46:	1d7b      	adds	r3, r7, #5
 8004a48:	2200      	movs	r2, #0
 8004a4a:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG6_val=0x00;
 8004a4c:	1d3b      	adds	r3, r7, #4
 8004a4e:	2200      	movs	r2, #0
 8004a50:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_CTRL_REG_val=0x00;
 8004a52:	1cfb      	adds	r3, r7, #3
 8004a54:	2200      	movs	r2, #0
 8004a56:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_SRC_REG_val=0x00;
 8004a58:	1cbb      	adds	r3, r7, #2
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_CFG_val=0x00;
 8004a5e:	1c7b      	adds	r3, r7, #1
 8004a60:	2200      	movs	r2, #0
 8004a62:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_SRC_val=0x00;
 8004a64:	003b      	movs	r3, r7
 8004a66:	2200      	movs	r2, #0
 8004a68:	701a      	strb	r2, [r3, #0]

		LIS3DHsendCMD(CTRL_REG1,(CTRL_REG1_val|accelDataRate_25_Hz|Xen|Yen|Zen));//data rate selection
 8004a6a:	1dfb      	adds	r3, r7, #7
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	2237      	movs	r2, #55	; 0x37
 8004a70:	4313      	orrs	r3, r2
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	0019      	movs	r1, r3
 8004a76:	2020      	movs	r0, #32
 8004a78:	f7ff ffba 	bl	80049f0 <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG2,);//HPFilter
//		LIS3DHsendCMD(CTRL_REG3,);
		LIS3DHsendCMD(CTRL_REG4,(CTRL_REG4_val|BDU|FULL_SCALE_2G|HR));
 8004a7c:	1dbb      	adds	r3, r7, #6
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	227c      	movs	r2, #124	; 0x7c
 8004a82:	4252      	negs	r2, r2
 8004a84:	4313      	orrs	r3, r2
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	0019      	movs	r1, r3
 8004a8a:	2023      	movs	r0, #35	; 0x23
 8004a8c:	f7ff ffb0 	bl	80049f0 <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG6,);
//		LIS3DHsendCMD(FIFO_CTRL_REG,FIFO_CTRL_REG_val);	//	2B configured
//		LIS3DHsendCMD(FIFO_SRC_REG,FIFO_SRC_REG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_CFG,INT_1_CFG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_SRC_val,INT_1_SRC_val);	//	2B configured
	}
 8004a90:	46c0      	nop			; (mov r8, r8)
 8004a92:	46bd      	mov	sp, r7
 8004a94:	b002      	add	sp, #8
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004a9c:	46c0      	nop			; (mov r8, r8)
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004aa4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aaa:	4b11      	ldr	r3, [pc, #68]	; (8004af0 <HAL_MspInit+0x4c>)
 8004aac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aae:	4b10      	ldr	r3, [pc, #64]	; (8004af0 <HAL_MspInit+0x4c>)
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	641a      	str	r2, [r3, #64]	; 0x40
 8004ab6:	4b0e      	ldr	r3, [pc, #56]	; (8004af0 <HAL_MspInit+0x4c>)
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	2201      	movs	r2, #1
 8004abc:	4013      	ands	r3, r2
 8004abe:	607b      	str	r3, [r7, #4]
 8004ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ac2:	4b0b      	ldr	r3, [pc, #44]	; (8004af0 <HAL_MspInit+0x4c>)
 8004ac4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ac6:	4b0a      	ldr	r3, [pc, #40]	; (8004af0 <HAL_MspInit+0x4c>)
 8004ac8:	2180      	movs	r1, #128	; 0x80
 8004aca:	0549      	lsls	r1, r1, #21
 8004acc:	430a      	orrs	r2, r1
 8004ace:	63da      	str	r2, [r3, #60]	; 0x3c
 8004ad0:	4b07      	ldr	r3, [pc, #28]	; (8004af0 <HAL_MspInit+0x4c>)
 8004ad2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ad4:	2380      	movs	r3, #128	; 0x80
 8004ad6:	055b      	lsls	r3, r3, #21
 8004ad8:	4013      	ands	r3, r2
 8004ada:	603b      	str	r3, [r7, #0]
 8004adc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8004ade:	2380      	movs	r3, #128	; 0x80
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	0018      	movs	r0, r3
 8004ae4:	f000 fd48 	bl	8005578 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ae8:	46c0      	nop			; (mov r8, r8)
 8004aea:	46bd      	mov	sp, r7
 8004aec:	b002      	add	sp, #8
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40021000 	.word	0x40021000

08004af4 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8004af4:	b590      	push	{r4, r7, lr}
 8004af6:	b089      	sub	sp, #36	; 0x24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004afc:	240c      	movs	r4, #12
 8004afe:	193b      	adds	r3, r7, r4
 8004b00:	0018      	movs	r0, r3
 8004b02:	2314      	movs	r3, #20
 8004b04:	001a      	movs	r2, r3
 8004b06:	2100      	movs	r1, #0
 8004b08:	f007 ffa2 	bl	800ca50 <memset>
  if(hcomp->Instance==COMP1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a10      	ldr	r2, [pc, #64]	; (8004b54 <HAL_COMP_MspInit+0x60>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d11a      	bne.n	8004b4c <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b16:	4b10      	ldr	r3, [pc, #64]	; (8004b58 <HAL_COMP_MspInit+0x64>)
 8004b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b1a:	4b0f      	ldr	r3, [pc, #60]	; (8004b58 <HAL_COMP_MspInit+0x64>)
 8004b1c:	2102      	movs	r1, #2
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	635a      	str	r2, [r3, #52]	; 0x34
 8004b22:	4b0d      	ldr	r3, [pc, #52]	; (8004b58 <HAL_COMP_MspInit+0x64>)
 8004b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b26:	2202      	movs	r2, #2
 8004b28:	4013      	ands	r3, r2
 8004b2a:	60bb      	str	r3, [r7, #8]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004b2e:	193b      	adds	r3, r7, r4
 8004b30:	2204      	movs	r2, #4
 8004b32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b34:	193b      	adds	r3, r7, r4
 8004b36:	2203      	movs	r2, #3
 8004b38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b3a:	193b      	adds	r3, r7, r4
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b40:	193b      	adds	r3, r7, r4
 8004b42:	4a06      	ldr	r2, [pc, #24]	; (8004b5c <HAL_COMP_MspInit+0x68>)
 8004b44:	0019      	movs	r1, r3
 8004b46:	0010      	movs	r0, r2
 8004b48:	f001 fb32 	bl	80061b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8004b4c:	46c0      	nop			; (mov r8, r8)
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	b009      	add	sp, #36	; 0x24
 8004b52:	bd90      	pop	{r4, r7, pc}
 8004b54:	40010200 	.word	0x40010200
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	50000400 	.word	0x50000400

08004b60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004b60:	b590      	push	{r4, r7, lr}
 8004b62:	b097      	sub	sp, #92	; 0x5c
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b68:	2344      	movs	r3, #68	; 0x44
 8004b6a:	18fb      	adds	r3, r7, r3
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	2314      	movs	r3, #20
 8004b70:	001a      	movs	r2, r3
 8004b72:	2100      	movs	r1, #0
 8004b74:	f007 ff6c 	bl	800ca50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b78:	2410      	movs	r4, #16
 8004b7a:	193b      	adds	r3, r7, r4
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	2334      	movs	r3, #52	; 0x34
 8004b80:	001a      	movs	r2, r3
 8004b82:	2100      	movs	r1, #0
 8004b84:	f007 ff64 	bl	800ca50 <memset>
  if(hi2c->Instance==I2C1)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a27      	ldr	r2, [pc, #156]	; (8004c2c <HAL_I2C_MspInit+0xcc>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d147      	bne.n	8004c22 <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004b92:	193b      	adds	r3, r7, r4
 8004b94:	2220      	movs	r2, #32
 8004b96:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004b98:	193b      	adds	r3, r7, r4
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b9e:	193b      	adds	r3, r7, r4
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	f003 fe83 	bl	80088ac <HAL_RCCEx_PeriphCLKConfig>
 8004ba6:	1e03      	subs	r3, r0, #0
 8004ba8:	d001      	beq.n	8004bae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004baa:	f7ff ff75 	bl	8004a98 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bae:	4b20      	ldr	r3, [pc, #128]	; (8004c30 <HAL_I2C_MspInit+0xd0>)
 8004bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bb2:	4b1f      	ldr	r3, [pc, #124]	; (8004c30 <HAL_I2C_MspInit+0xd0>)
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	635a      	str	r2, [r3, #52]	; 0x34
 8004bba:	4b1d      	ldr	r3, [pc, #116]	; (8004c30 <HAL_I2C_MspInit+0xd0>)
 8004bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004bc6:	2144      	movs	r1, #68	; 0x44
 8004bc8:	187b      	adds	r3, r7, r1
 8004bca:	22c0      	movs	r2, #192	; 0xc0
 8004bcc:	00d2      	lsls	r2, r2, #3
 8004bce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004bd0:	187b      	adds	r3, r7, r1
 8004bd2:	2212      	movs	r2, #18
 8004bd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bd6:	187b      	adds	r3, r7, r1
 8004bd8:	2201      	movs	r2, #1
 8004bda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bdc:	187b      	adds	r3, r7, r1
 8004bde:	2200      	movs	r2, #0
 8004be0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8004be2:	187b      	adds	r3, r7, r1
 8004be4:	2206      	movs	r2, #6
 8004be6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004be8:	187a      	adds	r2, r7, r1
 8004bea:	23a0      	movs	r3, #160	; 0xa0
 8004bec:	05db      	lsls	r3, r3, #23
 8004bee:	0011      	movs	r1, r2
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	f001 fadd 	bl	80061b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004bf6:	4b0e      	ldr	r3, [pc, #56]	; (8004c30 <HAL_I2C_MspInit+0xd0>)
 8004bf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bfa:	4b0d      	ldr	r3, [pc, #52]	; (8004c30 <HAL_I2C_MspInit+0xd0>)
 8004bfc:	2180      	movs	r1, #128	; 0x80
 8004bfe:	0389      	lsls	r1, r1, #14
 8004c00:	430a      	orrs	r2, r1
 8004c02:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c04:	4b0a      	ldr	r3, [pc, #40]	; (8004c30 <HAL_I2C_MspInit+0xd0>)
 8004c06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c08:	2380      	movs	r3, #128	; 0x80
 8004c0a:	039b      	lsls	r3, r3, #14
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	60bb      	str	r3, [r7, #8]
 8004c10:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8004c12:	2200      	movs	r2, #0
 8004c14:	2100      	movs	r1, #0
 8004c16:	2017      	movs	r0, #23
 8004c18:	f000 ffd0 	bl	8005bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8004c1c:	2017      	movs	r0, #23
 8004c1e:	f000 ffe2 	bl	8005be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004c22:	46c0      	nop			; (mov r8, r8)
 8004c24:	46bd      	mov	sp, r7
 8004c26:	b017      	add	sp, #92	; 0x5c
 8004c28:	bd90      	pop	{r4, r7, pc}
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	40005400 	.word	0x40005400
 8004c30:	40021000 	.word	0x40021000

08004c34 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8004c34:	b590      	push	{r4, r7, lr}
 8004c36:	b099      	sub	sp, #100	; 0x64
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c3c:	234c      	movs	r3, #76	; 0x4c
 8004c3e:	18fb      	adds	r3, r7, r3
 8004c40:	0018      	movs	r0, r3
 8004c42:	2314      	movs	r3, #20
 8004c44:	001a      	movs	r2, r3
 8004c46:	2100      	movs	r1, #0
 8004c48:	f007 ff02 	bl	800ca50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c4c:	2418      	movs	r4, #24
 8004c4e:	193b      	adds	r3, r7, r4
 8004c50:	0018      	movs	r0, r3
 8004c52:	2334      	movs	r3, #52	; 0x34
 8004c54:	001a      	movs	r2, r3
 8004c56:	2100      	movs	r1, #0
 8004c58:	f007 fefa 	bl	800ca50 <memset>
  if(hi2s->Instance==SPI1)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a4f      	ldr	r2, [pc, #316]	; (8004da0 <HAL_I2S_MspInit+0x16c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d000      	beq.n	8004c68 <HAL_I2S_MspInit+0x34>
 8004c66:	e097      	b.n	8004d98 <HAL_I2S_MspInit+0x164>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8004c68:	193b      	adds	r3, r7, r4
 8004c6a:	2280      	movs	r2, #128	; 0x80
 8004c6c:	0112      	lsls	r2, r2, #4
 8004c6e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8004c70:	193b      	adds	r3, r7, r4
 8004c72:	2200      	movs	r2, #0
 8004c74:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c76:	193b      	adds	r3, r7, r4
 8004c78:	0018      	movs	r0, r3
 8004c7a:	f003 fe17 	bl	80088ac <HAL_RCCEx_PeriphCLKConfig>
 8004c7e:	1e03      	subs	r3, r0, #0
 8004c80:	d001      	beq.n	8004c86 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8004c82:	f7ff ff09 	bl	8004a98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004c86:	4b47      	ldr	r3, [pc, #284]	; (8004da4 <HAL_I2S_MspInit+0x170>)
 8004c88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c8a:	4b46      	ldr	r3, [pc, #280]	; (8004da4 <HAL_I2S_MspInit+0x170>)
 8004c8c:	2180      	movs	r1, #128	; 0x80
 8004c8e:	0149      	lsls	r1, r1, #5
 8004c90:	430a      	orrs	r2, r1
 8004c92:	641a      	str	r2, [r3, #64]	; 0x40
 8004c94:	4b43      	ldr	r3, [pc, #268]	; (8004da4 <HAL_I2S_MspInit+0x170>)
 8004c96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c98:	2380      	movs	r3, #128	; 0x80
 8004c9a:	015b      	lsls	r3, r3, #5
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]
 8004ca0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ca2:	4b40      	ldr	r3, [pc, #256]	; (8004da4 <HAL_I2S_MspInit+0x170>)
 8004ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ca6:	4b3f      	ldr	r3, [pc, #252]	; (8004da4 <HAL_I2S_MspInit+0x170>)
 8004ca8:	2101      	movs	r1, #1
 8004caa:	430a      	orrs	r2, r1
 8004cac:	635a      	str	r2, [r3, #52]	; 0x34
 8004cae:	4b3d      	ldr	r3, [pc, #244]	; (8004da4 <HAL_I2S_MspInit+0x170>)
 8004cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]
 8004cb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cba:	4b3a      	ldr	r3, [pc, #232]	; (8004da4 <HAL_I2S_MspInit+0x170>)
 8004cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cbe:	4b39      	ldr	r3, [pc, #228]	; (8004da4 <HAL_I2S_MspInit+0x170>)
 8004cc0:	2102      	movs	r1, #2
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	635a      	str	r2, [r3, #52]	; 0x34
 8004cc6:	4b37      	ldr	r3, [pc, #220]	; (8004da4 <HAL_I2S_MspInit+0x170>)
 8004cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cca:	2202      	movs	r2, #2
 8004ccc:	4013      	ands	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004cd2:	214c      	movs	r1, #76	; 0x4c
 8004cd4:	187b      	adds	r3, r7, r1
 8004cd6:	2280      	movs	r2, #128	; 0x80
 8004cd8:	0212      	lsls	r2, r2, #8
 8004cda:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cdc:	000c      	movs	r4, r1
 8004cde:	193b      	adds	r3, r7, r4
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce4:	193b      	adds	r3, r7, r4
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cea:	193b      	adds	r3, r7, r4
 8004cec:	2200      	movs	r2, #0
 8004cee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004cf0:	193b      	adds	r3, r7, r4
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cf6:	193a      	adds	r2, r7, r4
 8004cf8:	23a0      	movs	r3, #160	; 0xa0
 8004cfa:	05db      	lsls	r3, r3, #23
 8004cfc:	0011      	movs	r1, r2
 8004cfe:	0018      	movs	r0, r3
 8004d00:	f001 fa56 	bl	80061b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004d04:	0021      	movs	r1, r4
 8004d06:	187b      	adds	r3, r7, r1
 8004d08:	2238      	movs	r2, #56	; 0x38
 8004d0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d0c:	187b      	adds	r3, r7, r1
 8004d0e:	2202      	movs	r2, #2
 8004d10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d12:	187b      	adds	r3, r7, r1
 8004d14:	2200      	movs	r2, #0
 8004d16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d18:	187b      	adds	r3, r7, r1
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004d1e:	187b      	adds	r3, r7, r1
 8004d20:	2200      	movs	r2, #0
 8004d22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d24:	187b      	adds	r3, r7, r1
 8004d26:	4a20      	ldr	r2, [pc, #128]	; (8004da8 <HAL_I2S_MspInit+0x174>)
 8004d28:	0019      	movs	r1, r3
 8004d2a:	0010      	movs	r0, r2
 8004d2c:	f001 fa40 	bl	80061b0 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8004d30:	4b1e      	ldr	r3, [pc, #120]	; (8004dac <HAL_I2S_MspInit+0x178>)
 8004d32:	4a1f      	ldr	r2, [pc, #124]	; (8004db0 <HAL_I2S_MspInit+0x17c>)
 8004d34:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8004d36:	4b1d      	ldr	r3, [pc, #116]	; (8004dac <HAL_I2S_MspInit+0x178>)
 8004d38:	2211      	movs	r2, #17
 8004d3a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d3c:	4b1b      	ldr	r3, [pc, #108]	; (8004dac <HAL_I2S_MspInit+0x178>)
 8004d3e:	2210      	movs	r2, #16
 8004d40:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d42:	4b1a      	ldr	r3, [pc, #104]	; (8004dac <HAL_I2S_MspInit+0x178>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d48:	4b18      	ldr	r3, [pc, #96]	; (8004dac <HAL_I2S_MspInit+0x178>)
 8004d4a:	2280      	movs	r2, #128	; 0x80
 8004d4c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004d4e:	4b17      	ldr	r3, [pc, #92]	; (8004dac <HAL_I2S_MspInit+0x178>)
 8004d50:	2280      	movs	r2, #128	; 0x80
 8004d52:	0052      	lsls	r2, r2, #1
 8004d54:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004d56:	4b15      	ldr	r3, [pc, #84]	; (8004dac <HAL_I2S_MspInit+0x178>)
 8004d58:	2280      	movs	r2, #128	; 0x80
 8004d5a:	00d2      	lsls	r2, r2, #3
 8004d5c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004d5e:	4b13      	ldr	r3, [pc, #76]	; (8004dac <HAL_I2S_MspInit+0x178>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004d64:	4b11      	ldr	r3, [pc, #68]	; (8004dac <HAL_I2S_MspInit+0x178>)
 8004d66:	22c0      	movs	r2, #192	; 0xc0
 8004d68:	0192      	lsls	r2, r2, #6
 8004d6a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004d6c:	4b0f      	ldr	r3, [pc, #60]	; (8004dac <HAL_I2S_MspInit+0x178>)
 8004d6e:	0018      	movs	r0, r3
 8004d70:	f000 ff56 	bl	8005c20 <HAL_DMA_Init>
 8004d74:	1e03      	subs	r3, r0, #0
 8004d76:	d001      	beq.n	8004d7c <HAL_I2S_MspInit+0x148>
    {
      Error_Handler();
 8004d78:	f7ff fe8e 	bl	8004a98 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a0b      	ldr	r2, [pc, #44]	; (8004dac <HAL_I2S_MspInit+0x178>)
 8004d80:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d82:	4b0a      	ldr	r3, [pc, #40]	; (8004dac <HAL_I2S_MspInit+0x178>)
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	2019      	movs	r0, #25
 8004d8e:	f000 ff15 	bl	8005bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004d92:	2019      	movs	r0, #25
 8004d94:	f000 ff27 	bl	8005be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004d98:	46c0      	nop			; (mov r8, r8)
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	b019      	add	sp, #100	; 0x64
 8004d9e:	bd90      	pop	{r4, r7, pc}
 8004da0:	40013000 	.word	0x40013000
 8004da4:	40021000 	.word	0x40021000
 8004da8:	50000400 	.word	0x50000400
 8004dac:	20000144 	.word	0x20000144
 8004db0:	40020008 	.word	0x40020008

08004db4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004db4:	b590      	push	{r4, r7, lr}
 8004db6:	b08b      	sub	sp, #44	; 0x2c
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dbc:	2414      	movs	r4, #20
 8004dbe:	193b      	adds	r3, r7, r4
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	2314      	movs	r3, #20
 8004dc4:	001a      	movs	r2, r3
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	f007 fe42 	bl	800ca50 <memset>
  if(hspi->Instance==SPI2)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a54      	ldr	r2, [pc, #336]	; (8004f24 <HAL_SPI_MspInit+0x170>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d000      	beq.n	8004dd8 <HAL_SPI_MspInit+0x24>
 8004dd6:	e0a0      	b.n	8004f1a <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004dd8:	4b53      	ldr	r3, [pc, #332]	; (8004f28 <HAL_SPI_MspInit+0x174>)
 8004dda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ddc:	4b52      	ldr	r3, [pc, #328]	; (8004f28 <HAL_SPI_MspInit+0x174>)
 8004dde:	2180      	movs	r1, #128	; 0x80
 8004de0:	01c9      	lsls	r1, r1, #7
 8004de2:	430a      	orrs	r2, r1
 8004de4:	63da      	str	r2, [r3, #60]	; 0x3c
 8004de6:	4b50      	ldr	r3, [pc, #320]	; (8004f28 <HAL_SPI_MspInit+0x174>)
 8004de8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dea:	2380      	movs	r3, #128	; 0x80
 8004dec:	01db      	lsls	r3, r3, #7
 8004dee:	4013      	ands	r3, r2
 8004df0:	613b      	str	r3, [r7, #16]
 8004df2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004df4:	4b4c      	ldr	r3, [pc, #304]	; (8004f28 <HAL_SPI_MspInit+0x174>)
 8004df6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004df8:	4b4b      	ldr	r3, [pc, #300]	; (8004f28 <HAL_SPI_MspInit+0x174>)
 8004dfa:	2102      	movs	r1, #2
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	635a      	str	r2, [r3, #52]	; 0x34
 8004e00:	4b49      	ldr	r3, [pc, #292]	; (8004f28 <HAL_SPI_MspInit+0x174>)
 8004e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e04:	2202      	movs	r2, #2
 8004e06:	4013      	ands	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004e0c:	193b      	adds	r3, r7, r4
 8004e0e:	2240      	movs	r2, #64	; 0x40
 8004e10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e12:	193b      	adds	r3, r7, r4
 8004e14:	2202      	movs	r2, #2
 8004e16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e18:	193b      	adds	r3, r7, r4
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e1e:	193b      	adds	r3, r7, r4
 8004e20:	2200      	movs	r2, #0
 8004e22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8004e24:	193b      	adds	r3, r7, r4
 8004e26:	2204      	movs	r2, #4
 8004e28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e2a:	193b      	adds	r3, r7, r4
 8004e2c:	4a3f      	ldr	r2, [pc, #252]	; (8004f2c <HAL_SPI_MspInit+0x178>)
 8004e2e:	0019      	movs	r1, r3
 8004e30:	0010      	movs	r0, r2
 8004e32:	f001 f9bd 	bl	80061b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004e36:	0021      	movs	r1, r4
 8004e38:	187b      	adds	r3, r7, r1
 8004e3a:	22c0      	movs	r2, #192	; 0xc0
 8004e3c:	0052      	lsls	r2, r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e40:	187b      	adds	r3, r7, r1
 8004e42:	2202      	movs	r2, #2
 8004e44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e46:	187b      	adds	r3, r7, r1
 8004e48:	2200      	movs	r2, #0
 8004e4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e4c:	187b      	adds	r3, r7, r1
 8004e4e:	2200      	movs	r2, #0
 8004e50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8004e52:	187b      	adds	r3, r7, r1
 8004e54:	2201      	movs	r2, #1
 8004e56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e58:	187b      	adds	r3, r7, r1
 8004e5a:	4a34      	ldr	r2, [pc, #208]	; (8004f2c <HAL_SPI_MspInit+0x178>)
 8004e5c:	0019      	movs	r1, r3
 8004e5e:	0010      	movs	r0, r2
 8004e60:	f001 f9a6 	bl	80061b0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel2;
 8004e64:	4b32      	ldr	r3, [pc, #200]	; (8004f30 <HAL_SPI_MspInit+0x17c>)
 8004e66:	4a33      	ldr	r2, [pc, #204]	; (8004f34 <HAL_SPI_MspInit+0x180>)
 8004e68:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8004e6a:	4b31      	ldr	r3, [pc, #196]	; (8004f30 <HAL_SPI_MspInit+0x17c>)
 8004e6c:	2212      	movs	r2, #18
 8004e6e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e70:	4b2f      	ldr	r3, [pc, #188]	; (8004f30 <HAL_SPI_MspInit+0x17c>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e76:	4b2e      	ldr	r3, [pc, #184]	; (8004f30 <HAL_SPI_MspInit+0x17c>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e7c:	4b2c      	ldr	r3, [pc, #176]	; (8004f30 <HAL_SPI_MspInit+0x17c>)
 8004e7e:	2280      	movs	r2, #128	; 0x80
 8004e80:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e82:	4b2b      	ldr	r3, [pc, #172]	; (8004f30 <HAL_SPI_MspInit+0x17c>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e88:	4b29      	ldr	r3, [pc, #164]	; (8004f30 <HAL_SPI_MspInit+0x17c>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8004e8e:	4b28      	ldr	r3, [pc, #160]	; (8004f30 <HAL_SPI_MspInit+0x17c>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004e94:	4b26      	ldr	r3, [pc, #152]	; (8004f30 <HAL_SPI_MspInit+0x17c>)
 8004e96:	2280      	movs	r2, #128	; 0x80
 8004e98:	0192      	lsls	r2, r2, #6
 8004e9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004e9c:	4b24      	ldr	r3, [pc, #144]	; (8004f30 <HAL_SPI_MspInit+0x17c>)
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	f000 febe 	bl	8005c20 <HAL_DMA_Init>
 8004ea4:	1e03      	subs	r3, r0, #0
 8004ea6:	d001      	beq.n	8004eac <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 8004ea8:	f7ff fdf6 	bl	8004a98 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a20      	ldr	r2, [pc, #128]	; (8004f30 <HAL_SPI_MspInit+0x17c>)
 8004eb0:	659a      	str	r2, [r3, #88]	; 0x58
 8004eb2:	4b1f      	ldr	r3, [pc, #124]	; (8004f30 <HAL_SPI_MspInit+0x17c>)
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel3;
 8004eb8:	4b1f      	ldr	r3, [pc, #124]	; (8004f38 <HAL_SPI_MspInit+0x184>)
 8004eba:	4a20      	ldr	r2, [pc, #128]	; (8004f3c <HAL_SPI_MspInit+0x188>)
 8004ebc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8004ebe:	4b1e      	ldr	r3, [pc, #120]	; (8004f38 <HAL_SPI_MspInit+0x184>)
 8004ec0:	2213      	movs	r2, #19
 8004ec2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ec4:	4b1c      	ldr	r3, [pc, #112]	; (8004f38 <HAL_SPI_MspInit+0x184>)
 8004ec6:	2210      	movs	r2, #16
 8004ec8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004eca:	4b1b      	ldr	r3, [pc, #108]	; (8004f38 <HAL_SPI_MspInit+0x184>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004ed0:	4b19      	ldr	r3, [pc, #100]	; (8004f38 <HAL_SPI_MspInit+0x184>)
 8004ed2:	2280      	movs	r2, #128	; 0x80
 8004ed4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ed6:	4b18      	ldr	r3, [pc, #96]	; (8004f38 <HAL_SPI_MspInit+0x184>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004edc:	4b16      	ldr	r3, [pc, #88]	; (8004f38 <HAL_SPI_MspInit+0x184>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004ee2:	4b15      	ldr	r3, [pc, #84]	; (8004f38 <HAL_SPI_MspInit+0x184>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004ee8:	4b13      	ldr	r3, [pc, #76]	; (8004f38 <HAL_SPI_MspInit+0x184>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004eee:	4b12      	ldr	r3, [pc, #72]	; (8004f38 <HAL_SPI_MspInit+0x184>)
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	f000 fe95 	bl	8005c20 <HAL_DMA_Init>
 8004ef6:	1e03      	subs	r3, r0, #0
 8004ef8:	d001      	beq.n	8004efe <HAL_SPI_MspInit+0x14a>
    {
      Error_Handler();
 8004efa:	f7ff fdcd 	bl	8004a98 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a0d      	ldr	r2, [pc, #52]	; (8004f38 <HAL_SPI_MspInit+0x184>)
 8004f02:	655a      	str	r2, [r3, #84]	; 0x54
 8004f04:	4b0c      	ldr	r3, [pc, #48]	; (8004f38 <HAL_SPI_MspInit+0x184>)
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	201a      	movs	r0, #26
 8004f10:	f000 fe54 	bl	8005bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004f14:	201a      	movs	r0, #26
 8004f16:	f000 fe66 	bl	8005be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004f1a:	46c0      	nop			; (mov r8, r8)
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	b00b      	add	sp, #44	; 0x2c
 8004f20:	bd90      	pop	{r4, r7, pc}
 8004f22:	46c0      	nop			; (mov r8, r8)
 8004f24:	40003800 	.word	0x40003800
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	50000400 	.word	0x50000400
 8004f30:	20000204 	.word	0x20000204
 8004f34:	4002001c 	.word	0x4002001c
 8004f38:	20000260 	.word	0x20000260
 8004f3c:	40020030 	.word	0x40020030

08004f40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f40:	b590      	push	{r4, r7, lr}
 8004f42:	b091      	sub	sp, #68	; 0x44
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f48:	240c      	movs	r4, #12
 8004f4a:	193b      	adds	r3, r7, r4
 8004f4c:	0018      	movs	r0, r3
 8004f4e:	2334      	movs	r3, #52	; 0x34
 8004f50:	001a      	movs	r2, r3
 8004f52:	2100      	movs	r1, #0
 8004f54:	f007 fd7c 	bl	800ca50 <memset>
  if(htim_base->Instance==TIM1)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a11      	ldr	r2, [pc, #68]	; (8004fa4 <HAL_TIM_Base_MspInit+0x64>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d11c      	bne.n	8004f9c <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8004f62:	193b      	adds	r3, r7, r4
 8004f64:	2280      	movs	r2, #128	; 0x80
 8004f66:	0392      	lsls	r2, r2, #14
 8004f68:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8004f6a:	193b      	adds	r3, r7, r4
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f70:	193b      	adds	r3, r7, r4
 8004f72:	0018      	movs	r0, r3
 8004f74:	f003 fc9a 	bl	80088ac <HAL_RCCEx_PeriphCLKConfig>
 8004f78:	1e03      	subs	r3, r0, #0
 8004f7a:	d001      	beq.n	8004f80 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8004f7c:	f7ff fd8c 	bl	8004a98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004f80:	4b09      	ldr	r3, [pc, #36]	; (8004fa8 <HAL_TIM_Base_MspInit+0x68>)
 8004f82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f84:	4b08      	ldr	r3, [pc, #32]	; (8004fa8 <HAL_TIM_Base_MspInit+0x68>)
 8004f86:	2180      	movs	r1, #128	; 0x80
 8004f88:	0109      	lsls	r1, r1, #4
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	641a      	str	r2, [r3, #64]	; 0x40
 8004f8e:	4b06      	ldr	r3, [pc, #24]	; (8004fa8 <HAL_TIM_Base_MspInit+0x68>)
 8004f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f92:	2380      	movs	r3, #128	; 0x80
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	4013      	ands	r3, r2
 8004f98:	60bb      	str	r3, [r7, #8]
 8004f9a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004f9c:	46c0      	nop			; (mov r8, r8)
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	b011      	add	sp, #68	; 0x44
 8004fa2:	bd90      	pop	{r4, r7, pc}
 8004fa4:	40012c00 	.word	0x40012c00
 8004fa8:	40021000 	.word	0x40021000

08004fac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004fac:	b590      	push	{r4, r7, lr}
 8004fae:	b089      	sub	sp, #36	; 0x24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fb4:	240c      	movs	r4, #12
 8004fb6:	193b      	adds	r3, r7, r4
 8004fb8:	0018      	movs	r0, r3
 8004fba:	2314      	movs	r3, #20
 8004fbc:	001a      	movs	r2, r3
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	f007 fd46 	bl	800ca50 <memset>
  if(htim->Instance==TIM1)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a15      	ldr	r2, [pc, #84]	; (8005020 <HAL_TIM_MspPostInit+0x74>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d123      	bne.n	8005016 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fce:	4b15      	ldr	r3, [pc, #84]	; (8005024 <HAL_TIM_MspPostInit+0x78>)
 8004fd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fd2:	4b14      	ldr	r3, [pc, #80]	; (8005024 <HAL_TIM_MspPostInit+0x78>)
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	635a      	str	r2, [r3, #52]	; 0x34
 8004fda:	4b12      	ldr	r3, [pc, #72]	; (8005024 <HAL_TIM_MspPostInit+0x78>)
 8004fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fde:	2201      	movs	r2, #1
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	60bb      	str	r3, [r7, #8]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004fe6:	193b      	adds	r3, r7, r4
 8004fe8:	2280      	movs	r2, #128	; 0x80
 8004fea:	0052      	lsls	r2, r2, #1
 8004fec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fee:	0021      	movs	r1, r4
 8004ff0:	187b      	adds	r3, r7, r1
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004ff6:	187b      	adds	r3, r7, r1
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ffc:	187b      	adds	r3, r7, r1
 8004ffe:	2203      	movs	r2, #3
 8005000:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005002:	187b      	adds	r3, r7, r1
 8005004:	2202      	movs	r2, #2
 8005006:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005008:	187a      	adds	r2, r7, r1
 800500a:	23a0      	movs	r3, #160	; 0xa0
 800500c:	05db      	lsls	r3, r3, #23
 800500e:	0011      	movs	r1, r2
 8005010:	0018      	movs	r0, r3
 8005012:	f001 f8cd 	bl	80061b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005016:	46c0      	nop			; (mov r8, r8)
 8005018:	46bd      	mov	sp, r7
 800501a:	b009      	add	sp, #36	; 0x24
 800501c:	bd90      	pop	{r4, r7, pc}
 800501e:	46c0      	nop			; (mov r8, r8)
 8005020:	40012c00 	.word	0x40012c00
 8005024:	40021000 	.word	0x40021000

08005028 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8005028:	b590      	push	{r4, r7, lr}
 800502a:	b08b      	sub	sp, #44	; 0x2c
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005030:	2414      	movs	r4, #20
 8005032:	193b      	adds	r3, r7, r4
 8005034:	0018      	movs	r0, r3
 8005036:	2314      	movs	r3, #20
 8005038:	001a      	movs	r2, r3
 800503a:	2100      	movs	r1, #0
 800503c:	f007 fd08 	bl	800ca50 <memset>
  if(husart->Instance==USART3)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a45      	ldr	r2, [pc, #276]	; (800515c <HAL_USART_MspInit+0x134>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d000      	beq.n	800504c <HAL_USART_MspInit+0x24>
 800504a:	e083      	b.n	8005154 <HAL_USART_MspInit+0x12c>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800504c:	4b44      	ldr	r3, [pc, #272]	; (8005160 <HAL_USART_MspInit+0x138>)
 800504e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005050:	4b43      	ldr	r3, [pc, #268]	; (8005160 <HAL_USART_MspInit+0x138>)
 8005052:	2180      	movs	r1, #128	; 0x80
 8005054:	02c9      	lsls	r1, r1, #11
 8005056:	430a      	orrs	r2, r1
 8005058:	63da      	str	r2, [r3, #60]	; 0x3c
 800505a:	4b41      	ldr	r3, [pc, #260]	; (8005160 <HAL_USART_MspInit+0x138>)
 800505c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800505e:	2380      	movs	r3, #128	; 0x80
 8005060:	02db      	lsls	r3, r3, #11
 8005062:	4013      	ands	r3, r2
 8005064:	613b      	str	r3, [r7, #16]
 8005066:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005068:	4b3d      	ldr	r3, [pc, #244]	; (8005160 <HAL_USART_MspInit+0x138>)
 800506a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800506c:	4b3c      	ldr	r3, [pc, #240]	; (8005160 <HAL_USART_MspInit+0x138>)
 800506e:	2101      	movs	r1, #1
 8005070:	430a      	orrs	r2, r1
 8005072:	635a      	str	r2, [r3, #52]	; 0x34
 8005074:	4b3a      	ldr	r3, [pc, #232]	; (8005160 <HAL_USART_MspInit+0x138>)
 8005076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005078:	2201      	movs	r2, #1
 800507a:	4013      	ands	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]
 800507e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005080:	4b37      	ldr	r3, [pc, #220]	; (8005160 <HAL_USART_MspInit+0x138>)
 8005082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005084:	4b36      	ldr	r3, [pc, #216]	; (8005160 <HAL_USART_MspInit+0x138>)
 8005086:	2102      	movs	r1, #2
 8005088:	430a      	orrs	r2, r1
 800508a:	635a      	str	r2, [r3, #52]	; 0x34
 800508c:	4b34      	ldr	r3, [pc, #208]	; (8005160 <HAL_USART_MspInit+0x138>)
 800508e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005090:	2202      	movs	r2, #2
 8005092:	4013      	ands	r3, r2
 8005094:	60bb      	str	r3, [r7, #8]
 8005096:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005098:	193b      	adds	r3, r7, r4
 800509a:	2220      	movs	r2, #32
 800509c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800509e:	193b      	adds	r3, r7, r4
 80050a0:	2202      	movs	r2, #2
 80050a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a4:	193b      	adds	r3, r7, r4
 80050a6:	2200      	movs	r2, #0
 80050a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050aa:	193b      	adds	r3, r7, r4
 80050ac:	2203      	movs	r2, #3
 80050ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80050b0:	193b      	adds	r3, r7, r4
 80050b2:	2204      	movs	r2, #4
 80050b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050b6:	193a      	adds	r2, r7, r4
 80050b8:	23a0      	movs	r3, #160	; 0xa0
 80050ba:	05db      	lsls	r3, r3, #23
 80050bc:	0011      	movs	r1, r2
 80050be:	0018      	movs	r0, r3
 80050c0:	f001 f876 	bl	80061b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80050c4:	0021      	movs	r1, r4
 80050c6:	187b      	adds	r3, r7, r1
 80050c8:	2203      	movs	r2, #3
 80050ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050cc:	187b      	adds	r3, r7, r1
 80050ce:	2202      	movs	r2, #2
 80050d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d2:	187b      	adds	r3, r7, r1
 80050d4:	2200      	movs	r2, #0
 80050d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050d8:	187b      	adds	r3, r7, r1
 80050da:	2203      	movs	r2, #3
 80050dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80050de:	187b      	adds	r3, r7, r1
 80050e0:	2204      	movs	r2, #4
 80050e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050e4:	187b      	adds	r3, r7, r1
 80050e6:	4a1f      	ldr	r2, [pc, #124]	; (8005164 <HAL_USART_MspInit+0x13c>)
 80050e8:	0019      	movs	r1, r3
 80050ea:	0010      	movs	r0, r2
 80050ec:	f001 f860 	bl	80061b0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel4;
 80050f0:	4b1d      	ldr	r3, [pc, #116]	; (8005168 <HAL_USART_MspInit+0x140>)
 80050f2:	4a1e      	ldr	r2, [pc, #120]	; (800516c <HAL_USART_MspInit+0x144>)
 80050f4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80050f6:	4b1c      	ldr	r3, [pc, #112]	; (8005168 <HAL_USART_MspInit+0x140>)
 80050f8:	2237      	movs	r2, #55	; 0x37
 80050fa:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050fc:	4b1a      	ldr	r3, [pc, #104]	; (8005168 <HAL_USART_MspInit+0x140>)
 80050fe:	2210      	movs	r2, #16
 8005100:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005102:	4b19      	ldr	r3, [pc, #100]	; (8005168 <HAL_USART_MspInit+0x140>)
 8005104:	2200      	movs	r2, #0
 8005106:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005108:	4b17      	ldr	r3, [pc, #92]	; (8005168 <HAL_USART_MspInit+0x140>)
 800510a:	2280      	movs	r2, #128	; 0x80
 800510c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800510e:	4b16      	ldr	r3, [pc, #88]	; (8005168 <HAL_USART_MspInit+0x140>)
 8005110:	2200      	movs	r2, #0
 8005112:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005114:	4b14      	ldr	r3, [pc, #80]	; (8005168 <HAL_USART_MspInit+0x140>)
 8005116:	2200      	movs	r2, #0
 8005118:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800511a:	4b13      	ldr	r3, [pc, #76]	; (8005168 <HAL_USART_MspInit+0x140>)
 800511c:	2200      	movs	r2, #0
 800511e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005120:	4b11      	ldr	r3, [pc, #68]	; (8005168 <HAL_USART_MspInit+0x140>)
 8005122:	2280      	movs	r2, #128	; 0x80
 8005124:	0192      	lsls	r2, r2, #6
 8005126:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005128:	4b0f      	ldr	r3, [pc, #60]	; (8005168 <HAL_USART_MspInit+0x140>)
 800512a:	0018      	movs	r0, r3
 800512c:	f000 fd78 	bl	8005c20 <HAL_DMA_Init>
 8005130:	1e03      	subs	r3, r0, #0
 8005132:	d001      	beq.n	8005138 <HAL_USART_MspInit+0x110>
    {
      Error_Handler();
 8005134:	f7ff fcb0 	bl	8004a98 <Error_Handler>
    }

    __HAL_LINKDMA(husart,hdmatx,hdma_usart3_tx);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a0b      	ldr	r2, [pc, #44]	; (8005168 <HAL_USART_MspInit+0x140>)
 800513c:	651a      	str	r2, [r3, #80]	; 0x50
 800513e:	4b0a      	ldr	r3, [pc, #40]	; (8005168 <HAL_USART_MspInit+0x140>)
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8005144:	2200      	movs	r2, #0
 8005146:	2100      	movs	r1, #0
 8005148:	201d      	movs	r0, #29
 800514a:	f000 fd37 	bl	8005bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 800514e:	201d      	movs	r0, #29
 8005150:	f000 fd49 	bl	8005be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005154:	46c0      	nop			; (mov r8, r8)
 8005156:	46bd      	mov	sp, r7
 8005158:	b00b      	add	sp, #44	; 0x2c
 800515a:	bd90      	pop	{r4, r7, pc}
 800515c:	40004800 	.word	0x40004800
 8005160:	40021000 	.word	0x40021000
 8005164:	50000400 	.word	0x50000400
 8005168:	20000368 	.word	0x20000368
 800516c:	40020044 	.word	0x40020044

08005170 <LL_USART_IsActiveFlag_FE>:
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	2202      	movs	r2, #2
 800517e:	4013      	ands	r3, r2
 8005180:	2b02      	cmp	r3, #2
 8005182:	d101      	bne.n	8005188 <LL_USART_IsActiveFlag_FE+0x18>
 8005184:	2301      	movs	r3, #1
 8005186:	e000      	b.n	800518a <LL_USART_IsActiveFlag_FE+0x1a>
 8005188:	2300      	movs	r3, #0
}
 800518a:	0018      	movs	r0, r3
 800518c:	46bd      	mov	sp, r7
 800518e:	b002      	add	sp, #8
 8005190:	bd80      	pop	{r7, pc}

08005192 <LL_USART_IsActiveFlag_NE>:
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b082      	sub	sp, #8
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	2204      	movs	r2, #4
 80051a0:	4013      	ands	r3, r2
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	d101      	bne.n	80051aa <LL_USART_IsActiveFlag_NE+0x18>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e000      	b.n	80051ac <LL_USART_IsActiveFlag_NE+0x1a>
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	0018      	movs	r0, r3
 80051ae:	46bd      	mov	sp, r7
 80051b0:	b002      	add	sp, #8
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <LL_USART_IsActiveFlag_ORE>:
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	69db      	ldr	r3, [r3, #28]
 80051c0:	2208      	movs	r2, #8
 80051c2:	4013      	ands	r3, r2
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d101      	bne.n	80051cc <LL_USART_IsActiveFlag_ORE+0x18>
 80051c8:	2301      	movs	r3, #1
 80051ca:	e000      	b.n	80051ce <LL_USART_IsActiveFlag_ORE+0x1a>
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	0018      	movs	r0, r3
 80051d0:	46bd      	mov	sp, r7
 80051d2:	b002      	add	sp, #8
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b082      	sub	sp, #8
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	2220      	movs	r2, #32
 80051e4:	4013      	ands	r3, r2
 80051e6:	2b20      	cmp	r3, #32
 80051e8:	d101      	bne.n	80051ee <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 80051ea:	2301      	movs	r3, #1
 80051ec:	e000      	b.n	80051f0 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	0018      	movs	r0, r3
 80051f2:	46bd      	mov	sp, r7
 80051f4:	b002      	add	sp, #8
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2220      	movs	r2, #32
 8005206:	4013      	ands	r3, r2
 8005208:	2b20      	cmp	r3, #32
 800520a:	d101      	bne.n	8005210 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 800520c:	2301      	movs	r3, #1
 800520e:	e000      	b.n	8005212 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8005210:	2300      	movs	r3, #0
}
 8005212:	0018      	movs	r0, r3
 8005214:	46bd      	mov	sp, r7
 8005216:	b002      	add	sp, #8
 8005218:	bd80      	pop	{r7, pc}

0800521a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800521e:	46c0      	nop			; (mov r8, r8)
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005228:	e7fe      	b.n	8005228 <HardFault_Handler+0x4>

0800522a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800522e:	46c0      	nop			; (mov r8, r8)
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005238:	46c0      	nop			; (mov r8, r8)
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005242:	f000 f959 	bl	80054f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005246:	46c0      	nop			; (mov r8, r8)
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005250:	4b03      	ldr	r3, [pc, #12]	; (8005260 <DMA1_Channel1_IRQHandler+0x14>)
 8005252:	0018      	movs	r0, r3
 8005254:	f000 fe5e 	bl	8005f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005258:	46c0      	nop			; (mov r8, r8)
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	46c0      	nop			; (mov r8, r8)
 8005260:	20000144 	.word	0x20000144

08005264 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

//	HAL_SPI_RxCpltCallback(&hspi2);
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005268:	4b05      	ldr	r3, [pc, #20]	; (8005280 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800526a:	0018      	movs	r0, r3
 800526c:	f000 fe52 	bl	8005f14 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005270:	4b04      	ldr	r3, [pc, #16]	; (8005284 <DMA1_Channel2_3_IRQHandler+0x20>)
 8005272:	0018      	movs	r0, r3
 8005274:	f000 fe4e 	bl	8005f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8005278:	46c0      	nop			; (mov r8, r8)
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	46c0      	nop			; (mov r8, r8)
 8005280:	20000204 	.word	0x20000204
 8005284:	20000260 	.word	0x20000260

08005288 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
//		GPIOA->ODR |= 1 << 11;	//set test 1
//		GPIOA->ODR &= ~(1 << 11);	//reset test 1
  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800528c:	4b03      	ldr	r3, [pc, #12]	; (800529c <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 800528e:	0018      	movs	r0, r3
 8005290:	f000 fe40 	bl	8005f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8005294:	46c0      	nop			; (mov r8, r8)
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	20000368 	.word	0x20000368

080052a0 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80052a4:	4b09      	ldr	r3, [pc, #36]	; (80052cc <I2C1_IRQHandler+0x2c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699a      	ldr	r2, [r3, #24]
 80052aa:	23e0      	movs	r3, #224	; 0xe0
 80052ac:	00db      	lsls	r3, r3, #3
 80052ae:	4013      	ands	r3, r2
 80052b0:	d004      	beq.n	80052bc <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80052b2:	4b06      	ldr	r3, [pc, #24]	; (80052cc <I2C1_IRQHandler+0x2c>)
 80052b4:	0018      	movs	r0, r3
 80052b6:	f001 fa97 	bl	80067e8 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80052ba:	e003      	b.n	80052c4 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80052bc:	4b03      	ldr	r3, [pc, #12]	; (80052cc <I2C1_IRQHandler+0x2c>)
 80052be:	0018      	movs	r0, r3
 80052c0:	f001 fa78 	bl	80067b4 <HAL_I2C_EV_IRQHandler>
}
 80052c4:	46c0      	nop			; (mov r8, r8)
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	200000bc 	.word	0x200000bc

080052d0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 80052d4:	4b03      	ldr	r3, [pc, #12]	; (80052e4 <SPI1_IRQHandler+0x14>)
 80052d6:	0018      	movs	r0, r3
 80052d8:	f002 fca6 	bl	8007c28 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80052dc:	46c0      	nop			; (mov r8, r8)
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	46c0      	nop			; (mov r8, r8)
 80052e4:	20000108 	.word	0x20000108

080052e8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80052ec:	4b03      	ldr	r3, [pc, #12]	; (80052fc <SPI2_IRQHandler+0x14>)
 80052ee:	0018      	movs	r0, r3
 80052f0:	f004 fd0a 	bl	8009d08 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80052f4:	46c0      	nop			; (mov r8, r8)
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	46c0      	nop			; (mov r8, r8)
 80052fc:	200001a0 	.word	0x200001a0

08005300 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 8005304:	4b25      	ldr	r3, [pc, #148]	; (800539c <USART2_IRQHandler+0x9c>)
 8005306:	6a1a      	ldr	r2, [r3, #32]
 8005308:	4b24      	ldr	r3, [pc, #144]	; (800539c <USART2_IRQHandler+0x9c>)
 800530a:	2108      	movs	r1, #8
 800530c:	430a      	orrs	r2, r1
 800530e:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 8005310:	4b22      	ldr	r3, [pc, #136]	; (800539c <USART2_IRQHandler+0x9c>)
 8005312:	6a1a      	ldr	r2, [r3, #32]
 8005314:	4b21      	ldr	r3, [pc, #132]	; (800539c <USART2_IRQHandler+0x9c>)
 8005316:	2102      	movs	r1, #2
 8005318:	430a      	orrs	r2, r1
 800531a:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 800531c:	4b1f      	ldr	r3, [pc, #124]	; (800539c <USART2_IRQHandler+0x9c>)
 800531e:	6a1a      	ldr	r2, [r3, #32]
 8005320:	4b1e      	ldr	r3, [pc, #120]	; (800539c <USART2_IRQHandler+0x9c>)
 8005322:	2104      	movs	r1, #4
 8005324:	430a      	orrs	r2, r1
 8005326:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 8005328:	4b1c      	ldr	r3, [pc, #112]	; (800539c <USART2_IRQHandler+0x9c>)
 800532a:	0018      	movs	r0, r3
 800532c:	f7ff ff53 	bl	80051d6 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8005330:	1e03      	subs	r3, r0, #0
 8005332:	d009      	beq.n	8005348 <USART2_IRQHandler+0x48>
 8005334:	4b19      	ldr	r3, [pc, #100]	; (800539c <USART2_IRQHandler+0x9c>)
 8005336:	0018      	movs	r0, r3
 8005338:	f7ff ff5e 	bl	80051f8 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 800533c:	1e03      	subs	r3, r0, #0
 800533e:	d003      	beq.n	8005348 <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 8005340:	f7fb fed4 	bl	80010ec <USART2_RX_Callback>
	  {
 8005344:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005346:	e025      	b.n	8005394 <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 8005348:	4b14      	ldr	r3, [pc, #80]	; (800539c <USART2_IRQHandler+0x9c>)
 800534a:	6a1a      	ldr	r2, [r3, #32]
 800534c:	4b13      	ldr	r3, [pc, #76]	; (800539c <USART2_IRQHandler+0x9c>)
 800534e:	2108      	movs	r1, #8
 8005350:	430a      	orrs	r2, r1
 8005352:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 8005354:	4b11      	ldr	r3, [pc, #68]	; (800539c <USART2_IRQHandler+0x9c>)
 8005356:	0018      	movs	r0, r3
 8005358:	f7ff ff2c 	bl	80051b4 <LL_USART_IsActiveFlag_ORE>
 800535c:	1e03      	subs	r3, r0, #0
 800535e:	d008      	beq.n	8005372 <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 8005360:	4b0e      	ldr	r3, [pc, #56]	; (800539c <USART2_IRQHandler+0x9c>)
 8005362:	6a1a      	ldr	r2, [r3, #32]
 8005364:	4b0d      	ldr	r3, [pc, #52]	; (800539c <USART2_IRQHandler+0x9c>)
 8005366:	2108      	movs	r1, #8
 8005368:	430a      	orrs	r2, r1
 800536a:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 800536c:	4b0b      	ldr	r3, [pc, #44]	; (800539c <USART2_IRQHandler+0x9c>)
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8005370:	e010      	b.n	8005394 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 8005372:	4b0a      	ldr	r3, [pc, #40]	; (800539c <USART2_IRQHandler+0x9c>)
 8005374:	0018      	movs	r0, r3
 8005376:	f7ff fefb 	bl	8005170 <LL_USART_IsActiveFlag_FE>
 800537a:	1e03      	subs	r3, r0, #0
 800537c:	d002      	beq.n	8005384 <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 800537e:	4b07      	ldr	r3, [pc, #28]	; (800539c <USART2_IRQHandler+0x9c>)
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8005382:	e007      	b.n	8005394 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 8005384:	4b05      	ldr	r3, [pc, #20]	; (800539c <USART2_IRQHandler+0x9c>)
 8005386:	0018      	movs	r0, r3
 8005388:	f7ff ff03 	bl	8005192 <LL_USART_IsActiveFlag_NE>
 800538c:	1e03      	subs	r3, r0, #0
 800538e:	d001      	beq.n	8005394 <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 8005390:	4b02      	ldr	r3, [pc, #8]	; (800539c <USART2_IRQHandler+0x9c>)
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8005394:	46c0      	nop			; (mov r8, r8)
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	46c0      	nop			; (mov r8, r8)
 800539c:	40004400 	.word	0x40004400

080053a0 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 80053a4:	4b03      	ldr	r3, [pc, #12]	; (80053b4 <USART3_4_LPUART1_IRQHandler+0x14>)
 80053a6:	0018      	movs	r0, r3
 80053a8:	f006 f9e8 	bl	800b77c <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 80053ac:	46c0      	nop			; (mov r8, r8)
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	46c0      	nop			; (mov r8, r8)
 80053b4:	20000308 	.word	0x20000308

080053b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80053bc:	4b03      	ldr	r3, [pc, #12]	; (80053cc <SystemInit+0x14>)
 80053be:	2280      	movs	r2, #128	; 0x80
 80053c0:	0512      	lsls	r2, r2, #20
 80053c2:	609a      	str	r2, [r3, #8]
#endif
}
 80053c4:	46c0      	nop			; (mov r8, r8)
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	46c0      	nop			; (mov r8, r8)
 80053cc:	e000ed00 	.word	0xe000ed00

080053d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80053d0:	480d      	ldr	r0, [pc, #52]	; (8005408 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80053d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80053d4:	f7ff fff0 	bl	80053b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80053d8:	480c      	ldr	r0, [pc, #48]	; (800540c <LoopForever+0x6>)
  ldr r1, =_edata
 80053da:	490d      	ldr	r1, [pc, #52]	; (8005410 <LoopForever+0xa>)
  ldr r2, =_sidata
 80053dc:	4a0d      	ldr	r2, [pc, #52]	; (8005414 <LoopForever+0xe>)
  movs r3, #0
 80053de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80053e0:	e002      	b.n	80053e8 <LoopCopyDataInit>

080053e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80053e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80053e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80053e6:	3304      	adds	r3, #4

080053e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80053e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80053ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80053ec:	d3f9      	bcc.n	80053e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80053ee:	4a0a      	ldr	r2, [pc, #40]	; (8005418 <LoopForever+0x12>)
  ldr r4, =_ebss
 80053f0:	4c0a      	ldr	r4, [pc, #40]	; (800541c <LoopForever+0x16>)
  movs r3, #0
 80053f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80053f4:	e001      	b.n	80053fa <LoopFillZerobss>

080053f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80053f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80053f8:	3204      	adds	r2, #4

080053fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80053fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80053fc:	d3fb      	bcc.n	80053f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80053fe:	f007 fb03 	bl	800ca08 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005402:	f7fb f8db 	bl	80005bc <main>

08005406 <LoopForever>:

LoopForever:
  b LoopForever
 8005406:	e7fe      	b.n	8005406 <LoopForever>
  ldr   r0, =_estack
 8005408:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800540c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005410:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8005414:	08016168 	.word	0x08016168
  ldr r2, =_sbss
 8005418:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800541c:	20001440 	.word	0x20001440

08005420 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005420:	e7fe      	b.n	8005420 <ADC1_COMP_IRQHandler>
	...

08005424 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800542a:	1dfb      	adds	r3, r7, #7
 800542c:	2200      	movs	r2, #0
 800542e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005430:	4b0b      	ldr	r3, [pc, #44]	; (8005460 <HAL_Init+0x3c>)
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	4b0a      	ldr	r3, [pc, #40]	; (8005460 <HAL_Init+0x3c>)
 8005436:	2180      	movs	r1, #128	; 0x80
 8005438:	0049      	lsls	r1, r1, #1
 800543a:	430a      	orrs	r2, r1
 800543c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800543e:	2000      	movs	r0, #0
 8005440:	f000 f810 	bl	8005464 <HAL_InitTick>
 8005444:	1e03      	subs	r3, r0, #0
 8005446:	d003      	beq.n	8005450 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005448:	1dfb      	adds	r3, r7, #7
 800544a:	2201      	movs	r2, #1
 800544c:	701a      	strb	r2, [r3, #0]
 800544e:	e001      	b.n	8005454 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005450:	f7ff fb28 	bl	8004aa4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005454:	1dfb      	adds	r3, r7, #7
 8005456:	781b      	ldrb	r3, [r3, #0]
}
 8005458:	0018      	movs	r0, r3
 800545a:	46bd      	mov	sp, r7
 800545c:	b002      	add	sp, #8
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40022000 	.word	0x40022000

08005464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005464:	b590      	push	{r4, r7, lr}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800546c:	230f      	movs	r3, #15
 800546e:	18fb      	adds	r3, r7, r3
 8005470:	2200      	movs	r2, #0
 8005472:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005474:	4b1d      	ldr	r3, [pc, #116]	; (80054ec <HAL_InitTick+0x88>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d02b      	beq.n	80054d4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800547c:	4b1c      	ldr	r3, [pc, #112]	; (80054f0 <HAL_InitTick+0x8c>)
 800547e:	681c      	ldr	r4, [r3, #0]
 8005480:	4b1a      	ldr	r3, [pc, #104]	; (80054ec <HAL_InitTick+0x88>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	0019      	movs	r1, r3
 8005486:	23fa      	movs	r3, #250	; 0xfa
 8005488:	0098      	lsls	r0, r3, #2
 800548a:	f7fa fe3b 	bl	8000104 <__udivsi3>
 800548e:	0003      	movs	r3, r0
 8005490:	0019      	movs	r1, r3
 8005492:	0020      	movs	r0, r4
 8005494:	f7fa fe36 	bl	8000104 <__udivsi3>
 8005498:	0003      	movs	r3, r0
 800549a:	0018      	movs	r0, r3
 800549c:	f000 fbb3 	bl	8005c06 <HAL_SYSTICK_Config>
 80054a0:	1e03      	subs	r3, r0, #0
 80054a2:	d112      	bne.n	80054ca <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b03      	cmp	r3, #3
 80054a8:	d80a      	bhi.n	80054c0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054aa:	6879      	ldr	r1, [r7, #4]
 80054ac:	2301      	movs	r3, #1
 80054ae:	425b      	negs	r3, r3
 80054b0:	2200      	movs	r2, #0
 80054b2:	0018      	movs	r0, r3
 80054b4:	f000 fb82 	bl	8005bbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80054b8:	4b0e      	ldr	r3, [pc, #56]	; (80054f4 <HAL_InitTick+0x90>)
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	601a      	str	r2, [r3, #0]
 80054be:	e00d      	b.n	80054dc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80054c0:	230f      	movs	r3, #15
 80054c2:	18fb      	adds	r3, r7, r3
 80054c4:	2201      	movs	r2, #1
 80054c6:	701a      	strb	r2, [r3, #0]
 80054c8:	e008      	b.n	80054dc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80054ca:	230f      	movs	r3, #15
 80054cc:	18fb      	adds	r3, r7, r3
 80054ce:	2201      	movs	r2, #1
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	e003      	b.n	80054dc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80054d4:	230f      	movs	r3, #15
 80054d6:	18fb      	adds	r3, r7, r3
 80054d8:	2201      	movs	r2, #1
 80054da:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80054dc:	230f      	movs	r3, #15
 80054de:	18fb      	adds	r3, r7, r3
 80054e0:	781b      	ldrb	r3, [r3, #0]
}
 80054e2:	0018      	movs	r0, r3
 80054e4:	46bd      	mov	sp, r7
 80054e6:	b005      	add	sp, #20
 80054e8:	bd90      	pop	{r4, r7, pc}
 80054ea:	46c0      	nop			; (mov r8, r8)
 80054ec:	2000006c 	.word	0x2000006c
 80054f0:	20000064 	.word	0x20000064
 80054f4:	20000068 	.word	0x20000068

080054f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80054fc:	4b05      	ldr	r3, [pc, #20]	; (8005514 <HAL_IncTick+0x1c>)
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	001a      	movs	r2, r3
 8005502:	4b05      	ldr	r3, [pc, #20]	; (8005518 <HAL_IncTick+0x20>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	18d2      	adds	r2, r2, r3
 8005508:	4b03      	ldr	r3, [pc, #12]	; (8005518 <HAL_IncTick+0x20>)
 800550a:	601a      	str	r2, [r3, #0]
}
 800550c:	46c0      	nop			; (mov r8, r8)
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	46c0      	nop			; (mov r8, r8)
 8005514:	2000006c 	.word	0x2000006c
 8005518:	2000143c 	.word	0x2000143c

0800551c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
  return uwTick;
 8005520:	4b02      	ldr	r3, [pc, #8]	; (800552c <HAL_GetTick+0x10>)
 8005522:	681b      	ldr	r3, [r3, #0]
}
 8005524:	0018      	movs	r0, r3
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	46c0      	nop			; (mov r8, r8)
 800552c:	2000143c 	.word	0x2000143c

08005530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005538:	f7ff fff0 	bl	800551c <HAL_GetTick>
 800553c:	0003      	movs	r3, r0
 800553e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	3301      	adds	r3, #1
 8005548:	d005      	beq.n	8005556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800554a:	4b0a      	ldr	r3, [pc, #40]	; (8005574 <HAL_Delay+0x44>)
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	001a      	movs	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	189b      	adds	r3, r3, r2
 8005554:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005556:	46c0      	nop			; (mov r8, r8)
 8005558:	f7ff ffe0 	bl	800551c <HAL_GetTick>
 800555c:	0002      	movs	r2, r0
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	429a      	cmp	r2, r3
 8005566:	d8f7      	bhi.n	8005558 <HAL_Delay+0x28>
  {
  }
}
 8005568:	46c0      	nop			; (mov r8, r8)
 800556a:	46c0      	nop			; (mov r8, r8)
 800556c:	46bd      	mov	sp, r7
 800556e:	b004      	add	sp, #16
 8005570:	bd80      	pop	{r7, pc}
 8005572:	46c0      	nop			; (mov r8, r8)
 8005574:	2000006c 	.word	0x2000006c

08005578 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8005580:	4b06      	ldr	r3, [pc, #24]	; (800559c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a06      	ldr	r2, [pc, #24]	; (80055a0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8005586:	4013      	ands	r3, r2
 8005588:	0019      	movs	r1, r3
 800558a:	4b04      	ldr	r3, [pc, #16]	; (800559c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	430a      	orrs	r2, r1
 8005590:	601a      	str	r2, [r3, #0]
}
 8005592:	46c0      	nop			; (mov r8, r8)
 8005594:	46bd      	mov	sp, r7
 8005596:	b002      	add	sp, #8
 8005598:	bd80      	pop	{r7, pc}
 800559a:	46c0      	nop			; (mov r8, r8)
 800559c:	40010000 	.word	0x40010000
 80055a0:	fffff9ff 	.word	0xfffff9ff

080055a4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80055ac:	4a05      	ldr	r2, [pc, #20]	; (80055c4 <LL_EXTI_EnableIT_0_31+0x20>)
 80055ae:	2380      	movs	r3, #128	; 0x80
 80055b0:	58d2      	ldr	r2, [r2, r3]
 80055b2:	4904      	ldr	r1, [pc, #16]	; (80055c4 <LL_EXTI_EnableIT_0_31+0x20>)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	2280      	movs	r2, #128	; 0x80
 80055ba:	508b      	str	r3, [r1, r2]
}
 80055bc:	46c0      	nop			; (mov r8, r8)
 80055be:	46bd      	mov	sp, r7
 80055c0:	b002      	add	sp, #8
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	40021800 	.word	0x40021800

080055c8 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80055d0:	4a06      	ldr	r2, [pc, #24]	; (80055ec <LL_EXTI_DisableIT_0_31+0x24>)
 80055d2:	2380      	movs	r3, #128	; 0x80
 80055d4:	58d3      	ldr	r3, [r2, r3]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	43d2      	mvns	r2, r2
 80055da:	4904      	ldr	r1, [pc, #16]	; (80055ec <LL_EXTI_DisableIT_0_31+0x24>)
 80055dc:	4013      	ands	r3, r2
 80055de:	2280      	movs	r2, #128	; 0x80
 80055e0:	508b      	str	r3, [r1, r2]
}
 80055e2:	46c0      	nop			; (mov r8, r8)
 80055e4:	46bd      	mov	sp, r7
 80055e6:	b002      	add	sp, #8
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	46c0      	nop			; (mov r8, r8)
 80055ec:	40021800 	.word	0x40021800

080055f0 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80055f8:	4a05      	ldr	r2, [pc, #20]	; (8005610 <LL_EXTI_EnableEvent_0_31+0x20>)
 80055fa:	2384      	movs	r3, #132	; 0x84
 80055fc:	58d2      	ldr	r2, [r2, r3]
 80055fe:	4904      	ldr	r1, [pc, #16]	; (8005610 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4313      	orrs	r3, r2
 8005604:	2284      	movs	r2, #132	; 0x84
 8005606:	508b      	str	r3, [r1, r2]

}
 8005608:	46c0      	nop			; (mov r8, r8)
 800560a:	46bd      	mov	sp, r7
 800560c:	b002      	add	sp, #8
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40021800 	.word	0x40021800

08005614 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800561c:	4a06      	ldr	r2, [pc, #24]	; (8005638 <LL_EXTI_DisableEvent_0_31+0x24>)
 800561e:	2384      	movs	r3, #132	; 0x84
 8005620:	58d3      	ldr	r3, [r2, r3]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	43d2      	mvns	r2, r2
 8005626:	4904      	ldr	r1, [pc, #16]	; (8005638 <LL_EXTI_DisableEvent_0_31+0x24>)
 8005628:	4013      	ands	r3, r2
 800562a:	2284      	movs	r2, #132	; 0x84
 800562c:	508b      	str	r3, [r1, r2]
}
 800562e:	46c0      	nop			; (mov r8, r8)
 8005630:	46bd      	mov	sp, r7
 8005632:	b002      	add	sp, #8
 8005634:	bd80      	pop	{r7, pc}
 8005636:	46c0      	nop			; (mov r8, r8)
 8005638:	40021800 	.word	0x40021800

0800563c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005644:	4b04      	ldr	r3, [pc, #16]	; (8005658 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8005646:	6819      	ldr	r1, [r3, #0]
 8005648:	4b03      	ldr	r3, [pc, #12]	; (8005658 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	430a      	orrs	r2, r1
 800564e:	601a      	str	r2, [r3, #0]

}
 8005650:	46c0      	nop			; (mov r8, r8)
 8005652:	46bd      	mov	sp, r7
 8005654:	b002      	add	sp, #8
 8005656:	bd80      	pop	{r7, pc}
 8005658:	40021800 	.word	0x40021800

0800565c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005664:	4b05      	ldr	r3, [pc, #20]	; (800567c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	43d9      	mvns	r1, r3
 800566c:	4b03      	ldr	r3, [pc, #12]	; (800567c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800566e:	400a      	ands	r2, r1
 8005670:	601a      	str	r2, [r3, #0]

}
 8005672:	46c0      	nop			; (mov r8, r8)
 8005674:	46bd      	mov	sp, r7
 8005676:	b002      	add	sp, #8
 8005678:	bd80      	pop	{r7, pc}
 800567a:	46c0      	nop			; (mov r8, r8)
 800567c:	40021800 	.word	0x40021800

08005680 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005688:	4b04      	ldr	r3, [pc, #16]	; (800569c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800568a:	6859      	ldr	r1, [r3, #4]
 800568c:	4b03      	ldr	r3, [pc, #12]	; (800569c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	430a      	orrs	r2, r1
 8005692:	605a      	str	r2, [r3, #4]
}
 8005694:	46c0      	nop			; (mov r8, r8)
 8005696:	46bd      	mov	sp, r7
 8005698:	b002      	add	sp, #8
 800569a:	bd80      	pop	{r7, pc}
 800569c:	40021800 	.word	0x40021800

080056a0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80056a8:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	43d9      	mvns	r1, r3
 80056b0:	4b03      	ldr	r3, [pc, #12]	; (80056c0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80056b2:	400a      	ands	r2, r1
 80056b4:	605a      	str	r2, [r3, #4]
}
 80056b6:	46c0      	nop			; (mov r8, r8)
 80056b8:	46bd      	mov	sp, r7
 80056ba:	b002      	add	sp, #8
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	46c0      	nop			; (mov r8, r8)
 80056c0:	40021800 	.word	0x40021800

080056c4 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 80056cc:	4b03      	ldr	r3, [pc, #12]	; (80056dc <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	611a      	str	r2, [r3, #16]
}
 80056d2:	46c0      	nop			; (mov r8, r8)
 80056d4:	46bd      	mov	sp, r7
 80056d6:	b002      	add	sp, #8
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	46c0      	nop			; (mov r8, r8)
 80056dc:	40021800 	.word	0x40021800

080056e0 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 80056e8:	4b03      	ldr	r3, [pc, #12]	; (80056f8 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	60da      	str	r2, [r3, #12]
}
 80056ee:	46c0      	nop			; (mov r8, r8)
 80056f0:	46bd      	mov	sp, r7
 80056f2:	b002      	add	sp, #8
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	46c0      	nop			; (mov r8, r8)
 80056f8:	40021800 	.word	0x40021800

080056fc <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b088      	sub	sp, #32
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8005704:	2300      	movs	r3, #0
 8005706:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005708:	211f      	movs	r1, #31
 800570a:	187b      	adds	r3, r7, r1
 800570c:	2200      	movs	r2, #0
 800570e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif /* COMP3 */

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d103      	bne.n	800571e <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 8005716:	187b      	adds	r3, r7, r1
 8005718:	2201      	movs	r2, #1
 800571a:	701a      	strb	r2, [r3, #0]
 800571c:	e13d      	b.n	800599a <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	0fdb      	lsrs	r3, r3, #31
 8005726:	07da      	lsls	r2, r3, #31
 8005728:	2380      	movs	r3, #128	; 0x80
 800572a:	061b      	lsls	r3, r3, #24
 800572c:	429a      	cmp	r2, r3
 800572e:	d104      	bne.n	800573a <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 8005730:	231f      	movs	r3, #31
 8005732:	18fb      	adds	r3, r7, r3
 8005734:	2201      	movs	r2, #1
 8005736:	701a      	strb	r2, [r3, #0]
 8005738:	e12f      	b.n	800599a <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2229      	movs	r2, #41	; 0x29
 800573e:	5c9b      	ldrb	r3, [r3, r2]
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10a      	bne.n	800575c <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2228      	movs	r2, #40	; 0x28
 800574a:	2100      	movs	r1, #0
 800574c:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	0018      	movs	r0, r3
 8005758:	f7ff f9cc 	bl	8004af4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2230      	movs	r2, #48	; 0x30
 8005764:	4013      	ands	r3, r2
 8005766:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 8005788:	4313      	orrs	r3, r2
 800578a:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a85      	ldr	r2, [pc, #532]	; (80059a8 <HAL_COMP_Init+0x2ac>)
 8005794:	4013      	ands	r3, r2
 8005796:	0019      	movs	r1, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	430a      	orrs	r2, r1
 80057a0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	2380      	movs	r3, #128	; 0x80
 80057a8:	011b      	lsls	r3, r3, #4
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d10d      	bne.n	80057ca <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80057ae:	4b7f      	ldr	r3, [pc, #508]	; (80059ac <HAL_COMP_Init+0x2b0>)
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	4b7e      	ldr	r3, [pc, #504]	; (80059ac <HAL_COMP_Init+0x2b0>)
 80057b4:	497e      	ldr	r1, [pc, #504]	; (80059b0 <HAL_COMP_Init+0x2b4>)
 80057b6:	400a      	ands	r2, r1
 80057b8:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80057ba:	4b7c      	ldr	r3, [pc, #496]	; (80059ac <HAL_COMP_Init+0x2b0>)
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	4b7b      	ldr	r3, [pc, #492]	; (80059ac <HAL_COMP_Init+0x2b0>)
 80057c0:	2180      	movs	r1, #128	; 0x80
 80057c2:	0109      	lsls	r1, r1, #4
 80057c4:	430a      	orrs	r2, r1
 80057c6:	605a      	str	r2, [r3, #4]
 80057c8:	e01f      	b.n	800580a <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	23c0      	movs	r3, #192	; 0xc0
 80057d0:	015b      	lsls	r3, r3, #5
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d10d      	bne.n	80057f2 <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80057d6:	4b75      	ldr	r3, [pc, #468]	; (80059ac <HAL_COMP_Init+0x2b0>)
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	4b74      	ldr	r3, [pc, #464]	; (80059ac <HAL_COMP_Init+0x2b0>)
 80057dc:	2180      	movs	r1, #128	; 0x80
 80057de:	0109      	lsls	r1, r1, #4
 80057e0:	430a      	orrs	r2, r1
 80057e2:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80057e4:	4b71      	ldr	r3, [pc, #452]	; (80059ac <HAL_COMP_Init+0x2b0>)
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	4b70      	ldr	r3, [pc, #448]	; (80059ac <HAL_COMP_Init+0x2b0>)
 80057ea:	4971      	ldr	r1, [pc, #452]	; (80059b0 <HAL_COMP_Init+0x2b4>)
 80057ec:	400a      	ands	r2, r1
 80057ee:	605a      	str	r2, [r3, #4]
 80057f0:	e00b      	b.n	800580a <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80057f2:	4b6e      	ldr	r3, [pc, #440]	; (80059ac <HAL_COMP_Init+0x2b0>)
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	4b6d      	ldr	r3, [pc, #436]	; (80059ac <HAL_COMP_Init+0x2b0>)
 80057f8:	496d      	ldr	r1, [pc, #436]	; (80059b0 <HAL_COMP_Init+0x2b4>)
 80057fa:	400a      	ands	r2, r1
 80057fc:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80057fe:	4b6b      	ldr	r3, [pc, #428]	; (80059ac <HAL_COMP_Init+0x2b0>)
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	4b6a      	ldr	r3, [pc, #424]	; (80059ac <HAL_COMP_Init+0x2b0>)
 8005804:	496a      	ldr	r1, [pc, #424]	; (80059b0 <HAL_COMP_Init+0x2b4>)
 8005806:	400a      	ands	r2, r1
 8005808:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	22a0      	movs	r2, #160	; 0xa0
 8005810:	01d2      	lsls	r2, r2, #7
 8005812:	4293      	cmp	r3, r2
 8005814:	d017      	beq.n	8005846 <HAL_COMP_Init+0x14a>
 8005816:	22a0      	movs	r2, #160	; 0xa0
 8005818:	01d2      	lsls	r2, r2, #7
 800581a:	4293      	cmp	r3, r2
 800581c:	d830      	bhi.n	8005880 <HAL_COMP_Init+0x184>
 800581e:	2b01      	cmp	r3, #1
 8005820:	d01f      	beq.n	8005862 <HAL_COMP_Init+0x166>
 8005822:	2280      	movs	r2, #128	; 0x80
 8005824:	01d2      	lsls	r2, r2, #7
 8005826:	4293      	cmp	r3, r2
 8005828:	d12a      	bne.n	8005880 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800582a:	4b60      	ldr	r3, [pc, #384]	; (80059ac <HAL_COMP_Init+0x2b0>)
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	4b5f      	ldr	r3, [pc, #380]	; (80059ac <HAL_COMP_Init+0x2b0>)
 8005830:	2180      	movs	r1, #128	; 0x80
 8005832:	01c9      	lsls	r1, r1, #7
 8005834:	430a      	orrs	r2, r1
 8005836:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8005838:	4b5c      	ldr	r3, [pc, #368]	; (80059ac <HAL_COMP_Init+0x2b0>)
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	4b5b      	ldr	r3, [pc, #364]	; (80059ac <HAL_COMP_Init+0x2b0>)
 800583e:	495d      	ldr	r1, [pc, #372]	; (80059b4 <HAL_COMP_Init+0x2b8>)
 8005840:	400a      	ands	r2, r1
 8005842:	605a      	str	r2, [r3, #4]
        break;
 8005844:	e029      	b.n	800589a <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8005846:	4b59      	ldr	r3, [pc, #356]	; (80059ac <HAL_COMP_Init+0x2b0>)
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	4b58      	ldr	r3, [pc, #352]	; (80059ac <HAL_COMP_Init+0x2b0>)
 800584c:	4959      	ldr	r1, [pc, #356]	; (80059b4 <HAL_COMP_Init+0x2b8>)
 800584e:	400a      	ands	r2, r1
 8005850:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8005852:	4b56      	ldr	r3, [pc, #344]	; (80059ac <HAL_COMP_Init+0x2b0>)
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	4b55      	ldr	r3, [pc, #340]	; (80059ac <HAL_COMP_Init+0x2b0>)
 8005858:	2180      	movs	r1, #128	; 0x80
 800585a:	01c9      	lsls	r1, r1, #7
 800585c:	430a      	orrs	r2, r1
 800585e:	605a      	str	r2, [r3, #4]
        break;
 8005860:	e01b      	b.n	800589a <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8005862:	4b52      	ldr	r3, [pc, #328]	; (80059ac <HAL_COMP_Init+0x2b0>)
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	4b51      	ldr	r3, [pc, #324]	; (80059ac <HAL_COMP_Init+0x2b0>)
 8005868:	2180      	movs	r1, #128	; 0x80
 800586a:	01c9      	lsls	r1, r1, #7
 800586c:	430a      	orrs	r2, r1
 800586e:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8005870:	4b4e      	ldr	r3, [pc, #312]	; (80059ac <HAL_COMP_Init+0x2b0>)
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	4b4d      	ldr	r3, [pc, #308]	; (80059ac <HAL_COMP_Init+0x2b0>)
 8005876:	2180      	movs	r1, #128	; 0x80
 8005878:	01c9      	lsls	r1, r1, #7
 800587a:	430a      	orrs	r2, r1
 800587c:	605a      	str	r2, [r3, #4]
        break;
 800587e:	e00c      	b.n	800589a <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8005880:	4b4a      	ldr	r3, [pc, #296]	; (80059ac <HAL_COMP_Init+0x2b0>)
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	4b49      	ldr	r3, [pc, #292]	; (80059ac <HAL_COMP_Init+0x2b0>)
 8005886:	494b      	ldr	r1, [pc, #300]	; (80059b4 <HAL_COMP_Init+0x2b8>)
 8005888:	400a      	ands	r2, r1
 800588a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800588c:	4b47      	ldr	r3, [pc, #284]	; (80059ac <HAL_COMP_Init+0x2b0>)
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	4b46      	ldr	r3, [pc, #280]	; (80059ac <HAL_COMP_Init+0x2b0>)
 8005892:	4948      	ldr	r1, [pc, #288]	; (80059b4 <HAL_COMP_Init+0x2b8>)
 8005894:	400a      	ands	r2, r1
 8005896:	605a      	str	r2, [r3, #4]
        break;
 8005898:	46c0      	nop			; (mov r8, r8)
    }
#endif /* COMP3 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2230      	movs	r2, #48	; 0x30
 80058a2:	4013      	ands	r3, r2
 80058a4:	d016      	beq.n	80058d4 <HAL_COMP_Init+0x1d8>
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d113      	bne.n	80058d4 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80058ac:	4b42      	ldr	r3, [pc, #264]	; (80059b8 <HAL_COMP_Init+0x2bc>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4942      	ldr	r1, [pc, #264]	; (80059bc <HAL_COMP_Init+0x2c0>)
 80058b2:	0018      	movs	r0, r3
 80058b4:	f7fa fc26 	bl	8000104 <__udivsi3>
 80058b8:	0003      	movs	r3, r0
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	0013      	movs	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	189b      	adds	r3, r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80058c6:	e002      	b.n	80058ce <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	3b01      	subs	r3, #1
 80058cc:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1f9      	bne.n	80058c8 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a34      	ldr	r2, [pc, #208]	; (80059ac <HAL_COMP_Init+0x2b0>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d102      	bne.n	80058e4 <HAL_COMP_Init+0x1e8>
 80058de:	2380      	movs	r3, #128	; 0x80
 80058e0:	029b      	lsls	r3, r3, #10
 80058e2:	e001      	b.n	80058e8 <HAL_COMP_Init+0x1ec>
 80058e4:	2380      	movs	r3, #128	; 0x80
 80058e6:	02db      	lsls	r3, r3, #11
 80058e8:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	2203      	movs	r2, #3
 80058f0:	4013      	ands	r3, r2
 80058f2:	d040      	beq.n	8005976 <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	2210      	movs	r2, #16
 80058fa:	4013      	ands	r3, r2
 80058fc:	d004      	beq.n	8005908 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	0018      	movs	r0, r3
 8005902:	f7ff fe9b 	bl	800563c <LL_EXTI_EnableRisingTrig_0_31>
 8005906:	e003      	b.n	8005910 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	0018      	movs	r0, r3
 800590c:	f7ff fea6 	bl	800565c <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	2220      	movs	r2, #32
 8005916:	4013      	ands	r3, r2
 8005918:	d004      	beq.n	8005924 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	0018      	movs	r0, r3
 800591e:	f7ff feaf 	bl	8005680 <LL_EXTI_EnableFallingTrig_0_31>
 8005922:	e003      	b.n	800592c <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	0018      	movs	r0, r3
 8005928:	f7ff feba 	bl	80056a0 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	0018      	movs	r0, r3
 8005930:	f7ff fed6 	bl	80056e0 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	0018      	movs	r0, r3
 8005938:	f7ff fec4 	bl	80056c4 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005940:	2202      	movs	r2, #2
 8005942:	4013      	ands	r3, r2
 8005944:	d004      	beq.n	8005950 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	0018      	movs	r0, r3
 800594a:	f7ff fe51 	bl	80055f0 <LL_EXTI_EnableEvent_0_31>
 800594e:	e003      	b.n	8005958 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	0018      	movs	r0, r3
 8005954:	f7ff fe5e 	bl	8005614 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	2201      	movs	r2, #1
 800595e:	4013      	ands	r3, r2
 8005960:	d004      	beq.n	800596c <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	0018      	movs	r0, r3
 8005966:	f7ff fe1d 	bl	80055a4 <LL_EXTI_EnableIT_0_31>
 800596a:	e00c      	b.n	8005986 <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	0018      	movs	r0, r3
 8005970:	f7ff fe2a 	bl	80055c8 <LL_EXTI_DisableIT_0_31>
 8005974:	e007      	b.n	8005986 <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	0018      	movs	r0, r3
 800597a:	f7ff fe4b 	bl	8005614 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	0018      	movs	r0, r3
 8005982:	f7ff fe21 	bl	80055c8 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2229      	movs	r2, #41	; 0x29
 800598a:	5c9b      	ldrb	r3, [r3, r2]
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d103      	bne.n	800599a <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2229      	movs	r2, #41	; 0x29
 8005996:	2101      	movs	r1, #1
 8005998:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800599a:	231f      	movs	r3, #31
 800599c:	18fb      	adds	r3, r7, r3
 800599e:	781b      	ldrb	r3, [r3, #0]
}
 80059a0:	0018      	movs	r0, r3
 80059a2:	46bd      	mov	sp, r7
 80059a4:	b008      	add	sp, #32
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	fe00740f 	.word	0xfe00740f
 80059ac:	40010200 	.word	0x40010200
 80059b0:	fffff7ff 	.word	0xfffff7ff
 80059b4:	ffffbfff 	.word	0xffffbfff
 80059b8:	20000064 	.word	0x20000064
 80059bc:	00030d40 	.word	0x00030d40

080059c0 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 80059c8:	2300      	movs	r3, #0
 80059ca:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80059cc:	210f      	movs	r1, #15
 80059ce:	187b      	adds	r3, r7, r1
 80059d0:	2200      	movs	r2, #0
 80059d2:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d103      	bne.n	80059e2 <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 80059da:	187b      	adds	r3, r7, r1
 80059dc:	2201      	movs	r2, #1
 80059de:	701a      	strb	r2, [r3, #0]
 80059e0:	e035      	b.n	8005a4e <HAL_COMP_Start+0x8e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	0fdb      	lsrs	r3, r3, #31
 80059ea:	07da      	lsls	r2, r3, #31
 80059ec:	2380      	movs	r3, #128	; 0x80
 80059ee:	061b      	lsls	r3, r3, #24
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d104      	bne.n	80059fe <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 80059f4:	230f      	movs	r3, #15
 80059f6:	18fb      	adds	r3, r7, r3
 80059f8:	2201      	movs	r2, #1
 80059fa:	701a      	strb	r2, [r3, #0]
 80059fc:	e027      	b.n	8005a4e <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2229      	movs	r2, #41	; 0x29
 8005a02:	5c9b      	ldrb	r3, [r3, r2]
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d11d      	bne.n	8005a46 <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2101      	movs	r1, #1
 8005a16:	430a      	orrs	r2, r1
 8005a18:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2229      	movs	r2, #41	; 0x29
 8005a1e:	2102      	movs	r1, #2
 8005a20:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a22:	4b0e      	ldr	r3, [pc, #56]	; (8005a5c <HAL_COMP_Start+0x9c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	490e      	ldr	r1, [pc, #56]	; (8005a60 <HAL_COMP_Start+0xa0>)
 8005a28:	0018      	movs	r0, r3
 8005a2a:	f7fa fb6b 	bl	8000104 <__udivsi3>
 8005a2e:	0003      	movs	r3, r0
 8005a30:	3301      	adds	r3, #1
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005a36:	e002      	b.n	8005a3e <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1f9      	bne.n	8005a38 <HAL_COMP_Start+0x78>
 8005a44:	e003      	b.n	8005a4e <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005a46:	230f      	movs	r3, #15
 8005a48:	18fb      	adds	r3, r7, r3
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8005a4e:	230f      	movs	r3, #15
 8005a50:	18fb      	adds	r3, r7, r3
 8005a52:	781b      	ldrb	r3, [r3, #0]
}
 8005a54:	0018      	movs	r0, r3
 8005a56:	46bd      	mov	sp, r7
 8005a58:	b004      	add	sp, #16
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	20000064 	.word	0x20000064
 8005a60:	00030d40 	.word	0x00030d40

08005a64 <__NVIC_EnableIRQ>:
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	0002      	movs	r2, r0
 8005a6c:	1dfb      	adds	r3, r7, #7
 8005a6e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005a70:	1dfb      	adds	r3, r7, #7
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	2b7f      	cmp	r3, #127	; 0x7f
 8005a76:	d809      	bhi.n	8005a8c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a78:	1dfb      	adds	r3, r7, #7
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	001a      	movs	r2, r3
 8005a7e:	231f      	movs	r3, #31
 8005a80:	401a      	ands	r2, r3
 8005a82:	4b04      	ldr	r3, [pc, #16]	; (8005a94 <__NVIC_EnableIRQ+0x30>)
 8005a84:	2101      	movs	r1, #1
 8005a86:	4091      	lsls	r1, r2
 8005a88:	000a      	movs	r2, r1
 8005a8a:	601a      	str	r2, [r3, #0]
}
 8005a8c:	46c0      	nop			; (mov r8, r8)
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	b002      	add	sp, #8
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	e000e100 	.word	0xe000e100

08005a98 <__NVIC_SetPriority>:
{
 8005a98:	b590      	push	{r4, r7, lr}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	0002      	movs	r2, r0
 8005aa0:	6039      	str	r1, [r7, #0]
 8005aa2:	1dfb      	adds	r3, r7, #7
 8005aa4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005aa6:	1dfb      	adds	r3, r7, #7
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b7f      	cmp	r3, #127	; 0x7f
 8005aac:	d828      	bhi.n	8005b00 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005aae:	4a2f      	ldr	r2, [pc, #188]	; (8005b6c <__NVIC_SetPriority+0xd4>)
 8005ab0:	1dfb      	adds	r3, r7, #7
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	b25b      	sxtb	r3, r3
 8005ab6:	089b      	lsrs	r3, r3, #2
 8005ab8:	33c0      	adds	r3, #192	; 0xc0
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	589b      	ldr	r3, [r3, r2]
 8005abe:	1dfa      	adds	r2, r7, #7
 8005ac0:	7812      	ldrb	r2, [r2, #0]
 8005ac2:	0011      	movs	r1, r2
 8005ac4:	2203      	movs	r2, #3
 8005ac6:	400a      	ands	r2, r1
 8005ac8:	00d2      	lsls	r2, r2, #3
 8005aca:	21ff      	movs	r1, #255	; 0xff
 8005acc:	4091      	lsls	r1, r2
 8005ace:	000a      	movs	r2, r1
 8005ad0:	43d2      	mvns	r2, r2
 8005ad2:	401a      	ands	r2, r3
 8005ad4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	019b      	lsls	r3, r3, #6
 8005ada:	22ff      	movs	r2, #255	; 0xff
 8005adc:	401a      	ands	r2, r3
 8005ade:	1dfb      	adds	r3, r7, #7
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	0018      	movs	r0, r3
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	4003      	ands	r3, r0
 8005ae8:	00db      	lsls	r3, r3, #3
 8005aea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005aec:	481f      	ldr	r0, [pc, #124]	; (8005b6c <__NVIC_SetPriority+0xd4>)
 8005aee:	1dfb      	adds	r3, r7, #7
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	b25b      	sxtb	r3, r3
 8005af4:	089b      	lsrs	r3, r3, #2
 8005af6:	430a      	orrs	r2, r1
 8005af8:	33c0      	adds	r3, #192	; 0xc0
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	501a      	str	r2, [r3, r0]
}
 8005afe:	e031      	b.n	8005b64 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005b00:	4a1b      	ldr	r2, [pc, #108]	; (8005b70 <__NVIC_SetPriority+0xd8>)
 8005b02:	1dfb      	adds	r3, r7, #7
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	0019      	movs	r1, r3
 8005b08:	230f      	movs	r3, #15
 8005b0a:	400b      	ands	r3, r1
 8005b0c:	3b08      	subs	r3, #8
 8005b0e:	089b      	lsrs	r3, r3, #2
 8005b10:	3306      	adds	r3, #6
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	18d3      	adds	r3, r2, r3
 8005b16:	3304      	adds	r3, #4
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	1dfa      	adds	r2, r7, #7
 8005b1c:	7812      	ldrb	r2, [r2, #0]
 8005b1e:	0011      	movs	r1, r2
 8005b20:	2203      	movs	r2, #3
 8005b22:	400a      	ands	r2, r1
 8005b24:	00d2      	lsls	r2, r2, #3
 8005b26:	21ff      	movs	r1, #255	; 0xff
 8005b28:	4091      	lsls	r1, r2
 8005b2a:	000a      	movs	r2, r1
 8005b2c:	43d2      	mvns	r2, r2
 8005b2e:	401a      	ands	r2, r3
 8005b30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	019b      	lsls	r3, r3, #6
 8005b36:	22ff      	movs	r2, #255	; 0xff
 8005b38:	401a      	ands	r2, r3
 8005b3a:	1dfb      	adds	r3, r7, #7
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	0018      	movs	r0, r3
 8005b40:	2303      	movs	r3, #3
 8005b42:	4003      	ands	r3, r0
 8005b44:	00db      	lsls	r3, r3, #3
 8005b46:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005b48:	4809      	ldr	r0, [pc, #36]	; (8005b70 <__NVIC_SetPriority+0xd8>)
 8005b4a:	1dfb      	adds	r3, r7, #7
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	001c      	movs	r4, r3
 8005b50:	230f      	movs	r3, #15
 8005b52:	4023      	ands	r3, r4
 8005b54:	3b08      	subs	r3, #8
 8005b56:	089b      	lsrs	r3, r3, #2
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	3306      	adds	r3, #6
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	18c3      	adds	r3, r0, r3
 8005b60:	3304      	adds	r3, #4
 8005b62:	601a      	str	r2, [r3, #0]
}
 8005b64:	46c0      	nop			; (mov r8, r8)
 8005b66:	46bd      	mov	sp, r7
 8005b68:	b003      	add	sp, #12
 8005b6a:	bd90      	pop	{r4, r7, pc}
 8005b6c:	e000e100 	.word	0xe000e100
 8005b70:	e000ed00 	.word	0xe000ed00

08005b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	1e5a      	subs	r2, r3, #1
 8005b80:	2380      	movs	r3, #128	; 0x80
 8005b82:	045b      	lsls	r3, r3, #17
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d301      	bcc.n	8005b8c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e010      	b.n	8005bae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b8c:	4b0a      	ldr	r3, [pc, #40]	; (8005bb8 <SysTick_Config+0x44>)
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	3a01      	subs	r2, #1
 8005b92:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b94:	2301      	movs	r3, #1
 8005b96:	425b      	negs	r3, r3
 8005b98:	2103      	movs	r1, #3
 8005b9a:	0018      	movs	r0, r3
 8005b9c:	f7ff ff7c 	bl	8005a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ba0:	4b05      	ldr	r3, [pc, #20]	; (8005bb8 <SysTick_Config+0x44>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ba6:	4b04      	ldr	r3, [pc, #16]	; (8005bb8 <SysTick_Config+0x44>)
 8005ba8:	2207      	movs	r2, #7
 8005baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	0018      	movs	r0, r3
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	b002      	add	sp, #8
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	46c0      	nop			; (mov r8, r8)
 8005bb8:	e000e010 	.word	0xe000e010

08005bbc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60b9      	str	r1, [r7, #8]
 8005bc4:	607a      	str	r2, [r7, #4]
 8005bc6:	210f      	movs	r1, #15
 8005bc8:	187b      	adds	r3, r7, r1
 8005bca:	1c02      	adds	r2, r0, #0
 8005bcc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	187b      	adds	r3, r7, r1
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	b25b      	sxtb	r3, r3
 8005bd6:	0011      	movs	r1, r2
 8005bd8:	0018      	movs	r0, r3
 8005bda:	f7ff ff5d 	bl	8005a98 <__NVIC_SetPriority>
}
 8005bde:	46c0      	nop			; (mov r8, r8)
 8005be0:	46bd      	mov	sp, r7
 8005be2:	b004      	add	sp, #16
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b082      	sub	sp, #8
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	0002      	movs	r2, r0
 8005bee:	1dfb      	adds	r3, r7, #7
 8005bf0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bf2:	1dfb      	adds	r3, r7, #7
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	b25b      	sxtb	r3, r3
 8005bf8:	0018      	movs	r0, r3
 8005bfa:	f7ff ff33 	bl	8005a64 <__NVIC_EnableIRQ>
}
 8005bfe:	46c0      	nop			; (mov r8, r8)
 8005c00:	46bd      	mov	sp, r7
 8005c02:	b002      	add	sp, #8
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b082      	sub	sp, #8
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	0018      	movs	r0, r3
 8005c12:	f7ff ffaf 	bl	8005b74 <SysTick_Config>
 8005c16:	0003      	movs	r3, r0
}
 8005c18:	0018      	movs	r0, r3
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	b002      	add	sp, #8
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e077      	b.n	8005d22 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a3d      	ldr	r2, [pc, #244]	; (8005d2c <HAL_DMA_Init+0x10c>)
 8005c38:	4694      	mov	ip, r2
 8005c3a:	4463      	add	r3, ip
 8005c3c:	2114      	movs	r1, #20
 8005c3e:	0018      	movs	r0, r3
 8005c40:	f7fa fa60 	bl	8000104 <__udivsi3>
 8005c44:	0003      	movs	r3, r0
 8005c46:	009a      	lsls	r2, r3, #2
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2225      	movs	r2, #37	; 0x25
 8005c50:	2102      	movs	r1, #2
 8005c52:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4934      	ldr	r1, [pc, #208]	; (8005d30 <HAL_DMA_Init+0x110>)
 8005c60:	400a      	ands	r2, r1
 8005c62:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6819      	ldr	r1, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	689a      	ldr	r2, [r3, #8]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	431a      	orrs	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	431a      	orrs	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	431a      	orrs	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	0018      	movs	r0, r3
 8005c9e:	f000 fa37 	bl	8006110 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	689a      	ldr	r2, [r3, #8]
 8005ca6:	2380      	movs	r3, #128	; 0x80
 8005ca8:	01db      	lsls	r3, r3, #7
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d102      	bne.n	8005cb4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cbc:	213f      	movs	r1, #63	; 0x3f
 8005cbe:	400a      	ands	r2, r1
 8005cc0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005cca:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d011      	beq.n	8005cf8 <HAL_DMA_Init+0xd8>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	d80d      	bhi.n	8005cf8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	0018      	movs	r0, r3
 8005ce0:	f000 fa42 	bl	8006168 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005cf4:	605a      	str	r2, [r3, #4]
 8005cf6:	e008      	b.n	8005d0a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2225      	movs	r2, #37	; 0x25
 8005d14:	2101      	movs	r1, #1
 8005d16:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2224      	movs	r2, #36	; 0x24
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	0018      	movs	r0, r3
 8005d24:	46bd      	mov	sp, r7
 8005d26:	b002      	add	sp, #8
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	46c0      	nop			; (mov r8, r8)
 8005d2c:	bffdfff8 	.word	0xbffdfff8
 8005d30:	ffff800f 	.word	0xffff800f

08005d34 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
 8005d40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d42:	2317      	movs	r3, #23
 8005d44:	18fb      	adds	r3, r7, r3
 8005d46:	2200      	movs	r2, #0
 8005d48:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2224      	movs	r2, #36	; 0x24
 8005d4e:	5c9b      	ldrb	r3, [r3, r2]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d101      	bne.n	8005d58 <HAL_DMA_Start_IT+0x24>
 8005d54:	2302      	movs	r3, #2
 8005d56:	e06f      	b.n	8005e38 <HAL_DMA_Start_IT+0x104>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2224      	movs	r2, #36	; 0x24
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2225      	movs	r2, #37	; 0x25
 8005d64:	5c9b      	ldrb	r3, [r3, r2]
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d157      	bne.n	8005e1c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2225      	movs	r2, #37	; 0x25
 8005d70:	2102      	movs	r1, #2
 8005d72:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2101      	movs	r1, #1
 8005d86:	438a      	bics	r2, r1
 8005d88:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	68b9      	ldr	r1, [r7, #8]
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f000 f97d 	bl	8006090 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d008      	beq.n	8005db0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	210e      	movs	r1, #14
 8005daa:	430a      	orrs	r2, r1
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	e00f      	b.n	8005dd0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2104      	movs	r1, #4
 8005dbc:	438a      	bics	r2, r1
 8005dbe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	210a      	movs	r1, #10
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	2380      	movs	r3, #128	; 0x80
 8005dd8:	025b      	lsls	r3, r3, #9
 8005dda:	4013      	ands	r3, r2
 8005ddc:	d008      	beq.n	8005df0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de8:	2180      	movs	r1, #128	; 0x80
 8005dea:	0049      	lsls	r1, r1, #1
 8005dec:	430a      	orrs	r2, r1
 8005dee:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d008      	beq.n	8005e0a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e02:	2180      	movs	r1, #128	; 0x80
 8005e04:	0049      	lsls	r1, r1, #1
 8005e06:	430a      	orrs	r2, r1
 8005e08:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2101      	movs	r1, #1
 8005e16:	430a      	orrs	r2, r1
 8005e18:	601a      	str	r2, [r3, #0]
 8005e1a:	e00a      	b.n	8005e32 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2280      	movs	r2, #128	; 0x80
 8005e20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2224      	movs	r2, #36	; 0x24
 8005e26:	2100      	movs	r1, #0
 8005e28:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8005e2a:	2317      	movs	r3, #23
 8005e2c:	18fb      	adds	r3, r7, r3
 8005e2e:	2201      	movs	r2, #1
 8005e30:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005e32:	2317      	movs	r3, #23
 8005e34:	18fb      	adds	r3, r7, r3
 8005e36:	781b      	ldrb	r3, [r3, #0]
}
 8005e38:	0018      	movs	r0, r3
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	b006      	add	sp, #24
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e48:	210f      	movs	r1, #15
 8005e4a:	187b      	adds	r3, r7, r1
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2225      	movs	r2, #37	; 0x25
 8005e54:	5c9b      	ldrb	r3, [r3, r2]
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d006      	beq.n	8005e6a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2204      	movs	r2, #4
 8005e60:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005e62:	187b      	adds	r3, r7, r1
 8005e64:	2201      	movs	r2, #1
 8005e66:	701a      	strb	r2, [r3, #0]
 8005e68:	e049      	b.n	8005efe <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	210e      	movs	r1, #14
 8005e76:	438a      	bics	r2, r1
 8005e78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2101      	movs	r1, #1
 8005e86:	438a      	bics	r2, r1
 8005e88:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e94:	491d      	ldr	r1, [pc, #116]	; (8005f0c <HAL_DMA_Abort_IT+0xcc>)
 8005e96:	400a      	ands	r2, r1
 8005e98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8005e9a:	4b1d      	ldr	r3, [pc, #116]	; (8005f10 <HAL_DMA_Abort_IT+0xd0>)
 8005e9c:	6859      	ldr	r1, [r3, #4]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	221c      	movs	r2, #28
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	409a      	lsls	r2, r3
 8005eaa:	4b19      	ldr	r3, [pc, #100]	; (8005f10 <HAL_DMA_Abort_IT+0xd0>)
 8005eac:	430a      	orrs	r2, r1
 8005eae:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005eb8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00c      	beq.n	8005edc <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ecc:	490f      	ldr	r1, [pc, #60]	; (8005f0c <HAL_DMA_Abort_IT+0xcc>)
 8005ece:	400a      	ands	r2, r1
 8005ed0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005eda:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2225      	movs	r2, #37	; 0x25
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2224      	movs	r2, #36	; 0x24
 8005ee8:	2100      	movs	r1, #0
 8005eea:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d004      	beq.n	8005efe <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	0010      	movs	r0, r2
 8005efc:	4798      	blx	r3
    }
  }
  return status;
 8005efe:	230f      	movs	r3, #15
 8005f00:	18fb      	adds	r3, r7, r3
 8005f02:	781b      	ldrb	r3, [r3, #0]
}
 8005f04:	0018      	movs	r0, r3
 8005f06:	46bd      	mov	sp, r7
 8005f08:	b004      	add	sp, #16
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	fffffeff 	.word	0xfffffeff
 8005f10:	40020000 	.word	0x40020000

08005f14 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8005f1c:	4b55      	ldr	r3, [pc, #340]	; (8006074 <HAL_DMA_IRQHandler+0x160>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	221c      	movs	r2, #28
 8005f30:	4013      	ands	r3, r2
 8005f32:	2204      	movs	r2, #4
 8005f34:	409a      	lsls	r2, r3
 8005f36:	0013      	movs	r3, r2
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	d027      	beq.n	8005f8e <HAL_DMA_IRQHandler+0x7a>
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	2204      	movs	r2, #4
 8005f42:	4013      	ands	r3, r2
 8005f44:	d023      	beq.n	8005f8e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	4013      	ands	r3, r2
 8005f50:	d107      	bne.n	8005f62 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2104      	movs	r1, #4
 8005f5e:	438a      	bics	r2, r1
 8005f60:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8005f62:	4b44      	ldr	r3, [pc, #272]	; (8006074 <HAL_DMA_IRQHandler+0x160>)
 8005f64:	6859      	ldr	r1, [r3, #4]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6a:	221c      	movs	r2, #28
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	2204      	movs	r2, #4
 8005f70:	409a      	lsls	r2, r3
 8005f72:	4b40      	ldr	r3, [pc, #256]	; (8006074 <HAL_DMA_IRQHandler+0x160>)
 8005f74:	430a      	orrs	r2, r1
 8005f76:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d100      	bne.n	8005f82 <HAL_DMA_IRQHandler+0x6e>
 8005f80:	e073      	b.n	800606a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	0010      	movs	r0, r2
 8005f8a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005f8c:	e06d      	b.n	800606a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	221c      	movs	r2, #28
 8005f94:	4013      	ands	r3, r2
 8005f96:	2202      	movs	r2, #2
 8005f98:	409a      	lsls	r2, r3
 8005f9a:	0013      	movs	r3, r2
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	d02e      	beq.n	8006000 <HAL_DMA_IRQHandler+0xec>
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2202      	movs	r2, #2
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	d02a      	beq.n	8006000 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	d10b      	bne.n	8005fce <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	210a      	movs	r1, #10
 8005fc2:	438a      	bics	r2, r1
 8005fc4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2225      	movs	r2, #37	; 0x25
 8005fca:	2101      	movs	r1, #1
 8005fcc:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005fce:	4b29      	ldr	r3, [pc, #164]	; (8006074 <HAL_DMA_IRQHandler+0x160>)
 8005fd0:	6859      	ldr	r1, [r3, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	221c      	movs	r2, #28
 8005fd8:	4013      	ands	r3, r2
 8005fda:	2202      	movs	r2, #2
 8005fdc:	409a      	lsls	r2, r3
 8005fde:	4b25      	ldr	r3, [pc, #148]	; (8006074 <HAL_DMA_IRQHandler+0x160>)
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2224      	movs	r2, #36	; 0x24
 8005fe8:	2100      	movs	r1, #0
 8005fea:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d03a      	beq.n	800606a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	0010      	movs	r0, r2
 8005ffc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005ffe:	e034      	b.n	800606a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006004:	221c      	movs	r2, #28
 8006006:	4013      	ands	r3, r2
 8006008:	2208      	movs	r2, #8
 800600a:	409a      	lsls	r2, r3
 800600c:	0013      	movs	r3, r2
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	4013      	ands	r3, r2
 8006012:	d02b      	beq.n	800606c <HAL_DMA_IRQHandler+0x158>
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2208      	movs	r2, #8
 8006018:	4013      	ands	r3, r2
 800601a:	d027      	beq.n	800606c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	210e      	movs	r1, #14
 8006028:	438a      	bics	r2, r1
 800602a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800602c:	4b11      	ldr	r3, [pc, #68]	; (8006074 <HAL_DMA_IRQHandler+0x160>)
 800602e:	6859      	ldr	r1, [r3, #4]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006034:	221c      	movs	r2, #28
 8006036:	4013      	ands	r3, r2
 8006038:	2201      	movs	r2, #1
 800603a:	409a      	lsls	r2, r3
 800603c:	4b0d      	ldr	r3, [pc, #52]	; (8006074 <HAL_DMA_IRQHandler+0x160>)
 800603e:	430a      	orrs	r2, r1
 8006040:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2225      	movs	r2, #37	; 0x25
 800604c:	2101      	movs	r1, #1
 800604e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2224      	movs	r2, #36	; 0x24
 8006054:	2100      	movs	r1, #0
 8006056:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605c:	2b00      	cmp	r3, #0
 800605e:	d005      	beq.n	800606c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	0010      	movs	r0, r2
 8006068:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800606a:	46c0      	nop			; (mov r8, r8)
 800606c:	46c0      	nop			; (mov r8, r8)
}
 800606e:	46bd      	mov	sp, r7
 8006070:	b004      	add	sp, #16
 8006072:	bd80      	pop	{r7, pc}
 8006074:	40020000 	.word	0x40020000

08006078 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2225      	movs	r2, #37	; 0x25
 8006084:	5c9b      	ldrb	r3, [r3, r2]
 8006086:	b2db      	uxtb	r3, r3
}
 8006088:	0018      	movs	r0, r3
 800608a:	46bd      	mov	sp, r7
 800608c:	b002      	add	sp, #8
 800608e:	bd80      	pop	{r7, pc}

08006090 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
 800609c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80060a6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d004      	beq.n	80060ba <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80060b8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80060ba:	4b14      	ldr	r3, [pc, #80]	; (800610c <DMA_SetConfig+0x7c>)
 80060bc:	6859      	ldr	r1, [r3, #4]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c2:	221c      	movs	r2, #28
 80060c4:	4013      	ands	r3, r2
 80060c6:	2201      	movs	r2, #1
 80060c8:	409a      	lsls	r2, r3
 80060ca:	4b10      	ldr	r3, [pc, #64]	; (800610c <DMA_SetConfig+0x7c>)
 80060cc:	430a      	orrs	r2, r1
 80060ce:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	683a      	ldr	r2, [r7, #0]
 80060d6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	2b10      	cmp	r3, #16
 80060de:	d108      	bne.n	80060f2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80060f0:	e007      	b.n	8006102 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	60da      	str	r2, [r3, #12]
}
 8006102:	46c0      	nop			; (mov r8, r8)
 8006104:	46bd      	mov	sp, r7
 8006106:	b004      	add	sp, #16
 8006108:	bd80      	pop	{r7, pc}
 800610a:	46c0      	nop			; (mov r8, r8)
 800610c:	40020000 	.word	0x40020000

08006110 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611c:	089b      	lsrs	r3, r3, #2
 800611e:	4a10      	ldr	r2, [pc, #64]	; (8006160 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8006120:	4694      	mov	ip, r2
 8006122:	4463      	add	r3, ip
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	001a      	movs	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	001a      	movs	r2, r3
 8006132:	23ff      	movs	r3, #255	; 0xff
 8006134:	4013      	ands	r3, r2
 8006136:	3b08      	subs	r3, #8
 8006138:	2114      	movs	r1, #20
 800613a:	0018      	movs	r0, r3
 800613c:	f7f9 ffe2 	bl	8000104 <__udivsi3>
 8006140:	0003      	movs	r3, r0
 8006142:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a07      	ldr	r2, [pc, #28]	; (8006164 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8006148:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	221f      	movs	r2, #31
 800614e:	4013      	ands	r3, r2
 8006150:	2201      	movs	r2, #1
 8006152:	409a      	lsls	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8006158:	46c0      	nop			; (mov r8, r8)
 800615a:	46bd      	mov	sp, r7
 800615c:	b004      	add	sp, #16
 800615e:	bd80      	pop	{r7, pc}
 8006160:	10008200 	.word	0x10008200
 8006164:	40020880 	.word	0x40020880

08006168 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	223f      	movs	r2, #63	; 0x3f
 8006176:	4013      	ands	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	4a0a      	ldr	r2, [pc, #40]	; (80061a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800617e:	4694      	mov	ip, r2
 8006180:	4463      	add	r3, ip
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	001a      	movs	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a07      	ldr	r2, [pc, #28]	; (80061ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800618e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	3b01      	subs	r3, #1
 8006194:	2203      	movs	r2, #3
 8006196:	4013      	ands	r3, r2
 8006198:	2201      	movs	r2, #1
 800619a:	409a      	lsls	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	659a      	str	r2, [r3, #88]	; 0x58
}
 80061a0:	46c0      	nop			; (mov r8, r8)
 80061a2:	46bd      	mov	sp, r7
 80061a4:	b004      	add	sp, #16
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	1000823f 	.word	0x1000823f
 80061ac:	40020940 	.word	0x40020940

080061b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80061ba:	2300      	movs	r3, #0
 80061bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061be:	e147      	b.n	8006450 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2101      	movs	r1, #1
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	4091      	lsls	r1, r2
 80061ca:	000a      	movs	r2, r1
 80061cc:	4013      	ands	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d100      	bne.n	80061d8 <HAL_GPIO_Init+0x28>
 80061d6:	e138      	b.n	800644a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	2203      	movs	r2, #3
 80061de:	4013      	ands	r3, r2
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d005      	beq.n	80061f0 <HAL_GPIO_Init+0x40>
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	2203      	movs	r2, #3
 80061ea:	4013      	ands	r3, r2
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d130      	bne.n	8006252 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	2203      	movs	r2, #3
 80061fc:	409a      	lsls	r2, r3
 80061fe:	0013      	movs	r3, r2
 8006200:	43da      	mvns	r2, r3
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	4013      	ands	r3, r2
 8006206:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	68da      	ldr	r2, [r3, #12]
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	409a      	lsls	r2, r3
 8006212:	0013      	movs	r3, r2
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	4313      	orrs	r3, r2
 8006218:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006226:	2201      	movs	r2, #1
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	409a      	lsls	r2, r3
 800622c:	0013      	movs	r3, r2
 800622e:	43da      	mvns	r2, r3
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	4013      	ands	r3, r2
 8006234:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	091b      	lsrs	r3, r3, #4
 800623c:	2201      	movs	r2, #1
 800623e:	401a      	ands	r2, r3
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	409a      	lsls	r2, r3
 8006244:	0013      	movs	r3, r2
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	4313      	orrs	r3, r2
 800624a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	2203      	movs	r2, #3
 8006258:	4013      	ands	r3, r2
 800625a:	2b03      	cmp	r3, #3
 800625c:	d017      	beq.n	800628e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	005b      	lsls	r3, r3, #1
 8006268:	2203      	movs	r2, #3
 800626a:	409a      	lsls	r2, r3
 800626c:	0013      	movs	r3, r2
 800626e:	43da      	mvns	r2, r3
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	4013      	ands	r3, r2
 8006274:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	689a      	ldr	r2, [r3, #8]
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	005b      	lsls	r3, r3, #1
 800627e:	409a      	lsls	r2, r3
 8006280:	0013      	movs	r3, r2
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	4313      	orrs	r3, r2
 8006286:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	2203      	movs	r2, #3
 8006294:	4013      	ands	r3, r2
 8006296:	2b02      	cmp	r3, #2
 8006298:	d123      	bne.n	80062e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	08da      	lsrs	r2, r3, #3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	3208      	adds	r2, #8
 80062a2:	0092      	lsls	r2, r2, #2
 80062a4:	58d3      	ldr	r3, [r2, r3]
 80062a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	2207      	movs	r2, #7
 80062ac:	4013      	ands	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	220f      	movs	r2, #15
 80062b2:	409a      	lsls	r2, r3
 80062b4:	0013      	movs	r3, r2
 80062b6:	43da      	mvns	r2, r3
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	4013      	ands	r3, r2
 80062bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	691a      	ldr	r2, [r3, #16]
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2107      	movs	r1, #7
 80062c6:	400b      	ands	r3, r1
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	409a      	lsls	r2, r3
 80062cc:	0013      	movs	r3, r2
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	08da      	lsrs	r2, r3, #3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	3208      	adds	r2, #8
 80062dc:	0092      	lsls	r2, r2, #2
 80062de:	6939      	ldr	r1, [r7, #16]
 80062e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	005b      	lsls	r3, r3, #1
 80062ec:	2203      	movs	r2, #3
 80062ee:	409a      	lsls	r2, r3
 80062f0:	0013      	movs	r3, r2
 80062f2:	43da      	mvns	r2, r3
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	4013      	ands	r3, r2
 80062f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	2203      	movs	r2, #3
 8006300:	401a      	ands	r2, r3
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	005b      	lsls	r3, r3, #1
 8006306:	409a      	lsls	r2, r3
 8006308:	0013      	movs	r3, r2
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	4313      	orrs	r3, r2
 800630e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	23c0      	movs	r3, #192	; 0xc0
 800631c:	029b      	lsls	r3, r3, #10
 800631e:	4013      	ands	r3, r2
 8006320:	d100      	bne.n	8006324 <HAL_GPIO_Init+0x174>
 8006322:	e092      	b.n	800644a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8006324:	4a50      	ldr	r2, [pc, #320]	; (8006468 <HAL_GPIO_Init+0x2b8>)
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	089b      	lsrs	r3, r3, #2
 800632a:	3318      	adds	r3, #24
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	589b      	ldr	r3, [r3, r2]
 8006330:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	2203      	movs	r2, #3
 8006336:	4013      	ands	r3, r2
 8006338:	00db      	lsls	r3, r3, #3
 800633a:	220f      	movs	r2, #15
 800633c:	409a      	lsls	r2, r3
 800633e:	0013      	movs	r3, r2
 8006340:	43da      	mvns	r2, r3
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	4013      	ands	r3, r2
 8006346:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	23a0      	movs	r3, #160	; 0xa0
 800634c:	05db      	lsls	r3, r3, #23
 800634e:	429a      	cmp	r2, r3
 8006350:	d013      	beq.n	800637a <HAL_GPIO_Init+0x1ca>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a45      	ldr	r2, [pc, #276]	; (800646c <HAL_GPIO_Init+0x2bc>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d00d      	beq.n	8006376 <HAL_GPIO_Init+0x1c6>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a44      	ldr	r2, [pc, #272]	; (8006470 <HAL_GPIO_Init+0x2c0>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d007      	beq.n	8006372 <HAL_GPIO_Init+0x1c2>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a43      	ldr	r2, [pc, #268]	; (8006474 <HAL_GPIO_Init+0x2c4>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d101      	bne.n	800636e <HAL_GPIO_Init+0x1be>
 800636a:	2303      	movs	r3, #3
 800636c:	e006      	b.n	800637c <HAL_GPIO_Init+0x1cc>
 800636e:	2305      	movs	r3, #5
 8006370:	e004      	b.n	800637c <HAL_GPIO_Init+0x1cc>
 8006372:	2302      	movs	r3, #2
 8006374:	e002      	b.n	800637c <HAL_GPIO_Init+0x1cc>
 8006376:	2301      	movs	r3, #1
 8006378:	e000      	b.n	800637c <HAL_GPIO_Init+0x1cc>
 800637a:	2300      	movs	r3, #0
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	2103      	movs	r1, #3
 8006380:	400a      	ands	r2, r1
 8006382:	00d2      	lsls	r2, r2, #3
 8006384:	4093      	lsls	r3, r2
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	4313      	orrs	r3, r2
 800638a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800638c:	4936      	ldr	r1, [pc, #216]	; (8006468 <HAL_GPIO_Init+0x2b8>)
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	089b      	lsrs	r3, r3, #2
 8006392:	3318      	adds	r3, #24
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800639a:	4b33      	ldr	r3, [pc, #204]	; (8006468 <HAL_GPIO_Init+0x2b8>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	43da      	mvns	r2, r3
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	4013      	ands	r3, r2
 80063a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	685a      	ldr	r2, [r3, #4]
 80063ae:	2380      	movs	r3, #128	; 0x80
 80063b0:	035b      	lsls	r3, r3, #13
 80063b2:	4013      	ands	r3, r2
 80063b4:	d003      	beq.n	80063be <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80063be:	4b2a      	ldr	r3, [pc, #168]	; (8006468 <HAL_GPIO_Init+0x2b8>)
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80063c4:	4b28      	ldr	r3, [pc, #160]	; (8006468 <HAL_GPIO_Init+0x2b8>)
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	43da      	mvns	r2, r3
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	4013      	ands	r3, r2
 80063d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	2380      	movs	r3, #128	; 0x80
 80063da:	039b      	lsls	r3, r3, #14
 80063dc:	4013      	ands	r3, r2
 80063de:	d003      	beq.n	80063e8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80063e8:	4b1f      	ldr	r3, [pc, #124]	; (8006468 <HAL_GPIO_Init+0x2b8>)
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80063ee:	4a1e      	ldr	r2, [pc, #120]	; (8006468 <HAL_GPIO_Init+0x2b8>)
 80063f0:	2384      	movs	r3, #132	; 0x84
 80063f2:	58d3      	ldr	r3, [r2, r3]
 80063f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	43da      	mvns	r2, r3
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	4013      	ands	r3, r2
 80063fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	2380      	movs	r3, #128	; 0x80
 8006406:	029b      	lsls	r3, r3, #10
 8006408:	4013      	ands	r3, r2
 800640a:	d003      	beq.n	8006414 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	4313      	orrs	r3, r2
 8006412:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006414:	4914      	ldr	r1, [pc, #80]	; (8006468 <HAL_GPIO_Init+0x2b8>)
 8006416:	2284      	movs	r2, #132	; 0x84
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800641c:	4a12      	ldr	r2, [pc, #72]	; (8006468 <HAL_GPIO_Init+0x2b8>)
 800641e:	2380      	movs	r3, #128	; 0x80
 8006420:	58d3      	ldr	r3, [r2, r3]
 8006422:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	43da      	mvns	r2, r3
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	4013      	ands	r3, r2
 800642c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	2380      	movs	r3, #128	; 0x80
 8006434:	025b      	lsls	r3, r3, #9
 8006436:	4013      	ands	r3, r2
 8006438:	d003      	beq.n	8006442 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	4313      	orrs	r3, r2
 8006440:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006442:	4909      	ldr	r1, [pc, #36]	; (8006468 <HAL_GPIO_Init+0x2b8>)
 8006444:	2280      	movs	r2, #128	; 0x80
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	3301      	adds	r3, #1
 800644e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	40da      	lsrs	r2, r3
 8006458:	1e13      	subs	r3, r2, #0
 800645a:	d000      	beq.n	800645e <HAL_GPIO_Init+0x2ae>
 800645c:	e6b0      	b.n	80061c0 <HAL_GPIO_Init+0x10>
  }
}
 800645e:	46c0      	nop			; (mov r8, r8)
 8006460:	46c0      	nop			; (mov r8, r8)
 8006462:	46bd      	mov	sp, r7
 8006464:	b006      	add	sp, #24
 8006466:	bd80      	pop	{r7, pc}
 8006468:	40021800 	.word	0x40021800
 800646c:	50000400 	.word	0x50000400
 8006470:	50000800 	.word	0x50000800
 8006474:	50000c00 	.word	0x50000c00

08006478 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e082      	b.n	8006590 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2241      	movs	r2, #65	; 0x41
 800648e:	5c9b      	ldrb	r3, [r3, r2]
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d107      	bne.n	80064a6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2240      	movs	r2, #64	; 0x40
 800649a:	2100      	movs	r1, #0
 800649c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	0018      	movs	r0, r3
 80064a2:	f7fe fb5d 	bl	8004b60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2241      	movs	r2, #65	; 0x41
 80064aa:	2124      	movs	r1, #36	; 0x24
 80064ac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2101      	movs	r1, #1
 80064ba:	438a      	bics	r2, r1
 80064bc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4934      	ldr	r1, [pc, #208]	; (8006598 <HAL_I2C_Init+0x120>)
 80064c8:	400a      	ands	r2, r1
 80064ca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689a      	ldr	r2, [r3, #8]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4931      	ldr	r1, [pc, #196]	; (800659c <HAL_I2C_Init+0x124>)
 80064d8:	400a      	ands	r2, r1
 80064da:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d108      	bne.n	80064f6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2180      	movs	r1, #128	; 0x80
 80064ee:	0209      	lsls	r1, r1, #8
 80064f0:	430a      	orrs	r2, r1
 80064f2:	609a      	str	r2, [r3, #8]
 80064f4:	e007      	b.n	8006506 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689a      	ldr	r2, [r3, #8]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2184      	movs	r1, #132	; 0x84
 8006500:	0209      	lsls	r1, r1, #8
 8006502:	430a      	orrs	r2, r1
 8006504:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	2b02      	cmp	r3, #2
 800650c:	d104      	bne.n	8006518 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2280      	movs	r2, #128	; 0x80
 8006514:	0112      	lsls	r2, r2, #4
 8006516:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	491f      	ldr	r1, [pc, #124]	; (80065a0 <HAL_I2C_Init+0x128>)
 8006524:	430a      	orrs	r2, r1
 8006526:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68da      	ldr	r2, [r3, #12]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	491a      	ldr	r1, [pc, #104]	; (800659c <HAL_I2C_Init+0x124>)
 8006534:	400a      	ands	r2, r1
 8006536:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	691a      	ldr	r2, [r3, #16]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	695b      	ldr	r3, [r3, #20]
 8006540:	431a      	orrs	r2, r3
 8006542:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	69d9      	ldr	r1, [r3, #28]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a1a      	ldr	r2, [r3, #32]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2101      	movs	r1, #1
 800656e:	430a      	orrs	r2, r1
 8006570:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2241      	movs	r2, #65	; 0x41
 800657c:	2120      	movs	r1, #32
 800657e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2242      	movs	r2, #66	; 0x42
 800658a:	2100      	movs	r1, #0
 800658c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	0018      	movs	r0, r3
 8006592:	46bd      	mov	sp, r7
 8006594:	b002      	add	sp, #8
 8006596:	bd80      	pop	{r7, pc}
 8006598:	f0ffffff 	.word	0xf0ffffff
 800659c:	ffff7fff 	.word	0xffff7fff
 80065a0:	02008000 	.word	0x02008000

080065a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80065a4:	b590      	push	{r4, r7, lr}
 80065a6:	b089      	sub	sp, #36	; 0x24
 80065a8:	af02      	add	r7, sp, #8
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	0008      	movs	r0, r1
 80065ae:	607a      	str	r2, [r7, #4]
 80065b0:	0019      	movs	r1, r3
 80065b2:	230a      	movs	r3, #10
 80065b4:	18fb      	adds	r3, r7, r3
 80065b6:	1c02      	adds	r2, r0, #0
 80065b8:	801a      	strh	r2, [r3, #0]
 80065ba:	2308      	movs	r3, #8
 80065bc:	18fb      	adds	r3, r7, r3
 80065be:	1c0a      	adds	r2, r1, #0
 80065c0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2241      	movs	r2, #65	; 0x41
 80065c6:	5c9b      	ldrb	r3, [r3, r2]
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b20      	cmp	r3, #32
 80065cc:	d000      	beq.n	80065d0 <HAL_I2C_Master_Transmit+0x2c>
 80065ce:	e0e7      	b.n	80067a0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2240      	movs	r2, #64	; 0x40
 80065d4:	5c9b      	ldrb	r3, [r3, r2]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d101      	bne.n	80065de <HAL_I2C_Master_Transmit+0x3a>
 80065da:	2302      	movs	r3, #2
 80065dc:	e0e1      	b.n	80067a2 <HAL_I2C_Master_Transmit+0x1fe>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2240      	movs	r2, #64	; 0x40
 80065e2:	2101      	movs	r1, #1
 80065e4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80065e6:	f7fe ff99 	bl	800551c <HAL_GetTick>
 80065ea:	0003      	movs	r3, r0
 80065ec:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80065ee:	2380      	movs	r3, #128	; 0x80
 80065f0:	0219      	lsls	r1, r3, #8
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	2319      	movs	r3, #25
 80065fa:	2201      	movs	r2, #1
 80065fc:	f000 fe76 	bl	80072ec <I2C_WaitOnFlagUntilTimeout>
 8006600:	1e03      	subs	r3, r0, #0
 8006602:	d001      	beq.n	8006608 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e0cc      	b.n	80067a2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2241      	movs	r2, #65	; 0x41
 800660c:	2121      	movs	r1, #33	; 0x21
 800660e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2242      	movs	r2, #66	; 0x42
 8006614:	2110      	movs	r1, #16
 8006616:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2208      	movs	r2, #8
 8006628:	18ba      	adds	r2, r7, r2
 800662a:	8812      	ldrh	r2, [r2, #0]
 800662c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006638:	b29b      	uxth	r3, r3
 800663a:	2bff      	cmp	r3, #255	; 0xff
 800663c:	d911      	bls.n	8006662 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	22ff      	movs	r2, #255	; 0xff
 8006642:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006648:	b2da      	uxtb	r2, r3
 800664a:	2380      	movs	r3, #128	; 0x80
 800664c:	045c      	lsls	r4, r3, #17
 800664e:	230a      	movs	r3, #10
 8006650:	18fb      	adds	r3, r7, r3
 8006652:	8819      	ldrh	r1, [r3, #0]
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	4b55      	ldr	r3, [pc, #340]	; (80067ac <HAL_I2C_Master_Transmit+0x208>)
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	0023      	movs	r3, r4
 800665c:	f001 f80c 	bl	8007678 <I2C_TransferConfig>
 8006660:	e075      	b.n	800674e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006666:	b29a      	uxth	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006670:	b2da      	uxtb	r2, r3
 8006672:	2380      	movs	r3, #128	; 0x80
 8006674:	049c      	lsls	r4, r3, #18
 8006676:	230a      	movs	r3, #10
 8006678:	18fb      	adds	r3, r7, r3
 800667a:	8819      	ldrh	r1, [r3, #0]
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	4b4b      	ldr	r3, [pc, #300]	; (80067ac <HAL_I2C_Master_Transmit+0x208>)
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	0023      	movs	r3, r4
 8006684:	f000 fff8 	bl	8007678 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006688:	e061      	b.n	800674e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	0018      	movs	r0, r3
 8006692:	f000 fe6a 	bl	800736a <I2C_WaitOnTXISFlagUntilTimeout>
 8006696:	1e03      	subs	r3, r0, #0
 8006698:	d001      	beq.n	800669e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e081      	b.n	80067a2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	781a      	ldrb	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ae:	1c5a      	adds	r2, r3, #1
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	3b01      	subs	r3, #1
 80066bc:	b29a      	uxth	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066c6:	3b01      	subs	r3, #1
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d03a      	beq.n	800674e <HAL_I2C_Master_Transmit+0x1aa>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d136      	bne.n	800674e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80066e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	0013      	movs	r3, r2
 80066ea:	2200      	movs	r2, #0
 80066ec:	2180      	movs	r1, #128	; 0x80
 80066ee:	f000 fdfd 	bl	80072ec <I2C_WaitOnFlagUntilTimeout>
 80066f2:	1e03      	subs	r3, r0, #0
 80066f4:	d001      	beq.n	80066fa <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e053      	b.n	80067a2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066fe:	b29b      	uxth	r3, r3
 8006700:	2bff      	cmp	r3, #255	; 0xff
 8006702:	d911      	bls.n	8006728 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	22ff      	movs	r2, #255	; 0xff
 8006708:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800670e:	b2da      	uxtb	r2, r3
 8006710:	2380      	movs	r3, #128	; 0x80
 8006712:	045c      	lsls	r4, r3, #17
 8006714:	230a      	movs	r3, #10
 8006716:	18fb      	adds	r3, r7, r3
 8006718:	8819      	ldrh	r1, [r3, #0]
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	2300      	movs	r3, #0
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	0023      	movs	r3, r4
 8006722:	f000 ffa9 	bl	8007678 <I2C_TransferConfig>
 8006726:	e012      	b.n	800674e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800672c:	b29a      	uxth	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006736:	b2da      	uxtb	r2, r3
 8006738:	2380      	movs	r3, #128	; 0x80
 800673a:	049c      	lsls	r4, r3, #18
 800673c:	230a      	movs	r3, #10
 800673e:	18fb      	adds	r3, r7, r3
 8006740:	8819      	ldrh	r1, [r3, #0]
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	2300      	movs	r3, #0
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	0023      	movs	r3, r4
 800674a:	f000 ff95 	bl	8007678 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006752:	b29b      	uxth	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	d198      	bne.n	800668a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	0018      	movs	r0, r3
 8006760:	f000 fe42 	bl	80073e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006764:	1e03      	subs	r3, r0, #0
 8006766:	d001      	beq.n	800676c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e01a      	b.n	80067a2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2220      	movs	r2, #32
 8006772:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	490c      	ldr	r1, [pc, #48]	; (80067b0 <HAL_I2C_Master_Transmit+0x20c>)
 8006780:	400a      	ands	r2, r1
 8006782:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2241      	movs	r2, #65	; 0x41
 8006788:	2120      	movs	r1, #32
 800678a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2242      	movs	r2, #66	; 0x42
 8006790:	2100      	movs	r1, #0
 8006792:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2240      	movs	r2, #64	; 0x40
 8006798:	2100      	movs	r1, #0
 800679a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800679c:	2300      	movs	r3, #0
 800679e:	e000      	b.n	80067a2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80067a0:	2302      	movs	r3, #2
  }
}
 80067a2:	0018      	movs	r0, r3
 80067a4:	46bd      	mov	sp, r7
 80067a6:	b007      	add	sp, #28
 80067a8:	bd90      	pop	{r4, r7, pc}
 80067aa:	46c0      	nop			; (mov r8, r8)
 80067ac:	80002000 	.word	0x80002000
 80067b0:	fe00e800 	.word	0xfe00e800

080067b4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d005      	beq.n	80067e0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	68f9      	ldr	r1, [r7, #12]
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	4798      	blx	r3
  }
}
 80067e0:	46c0      	nop			; (mov r8, r8)
 80067e2:	46bd      	mov	sp, r7
 80067e4:	b004      	add	sp, #16
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	0a1b      	lsrs	r3, r3, #8
 8006804:	001a      	movs	r2, r3
 8006806:	2301      	movs	r3, #1
 8006808:	4013      	ands	r3, r2
 800680a:	d010      	beq.n	800682e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	09db      	lsrs	r3, r3, #7
 8006810:	001a      	movs	r2, r3
 8006812:	2301      	movs	r3, #1
 8006814:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006816:	d00a      	beq.n	800682e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800681c:	2201      	movs	r2, #1
 800681e:	431a      	orrs	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2280      	movs	r2, #128	; 0x80
 800682a:	0052      	lsls	r2, r2, #1
 800682c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	0a9b      	lsrs	r3, r3, #10
 8006832:	001a      	movs	r2, r3
 8006834:	2301      	movs	r3, #1
 8006836:	4013      	ands	r3, r2
 8006838:	d010      	beq.n	800685c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	09db      	lsrs	r3, r3, #7
 800683e:	001a      	movs	r2, r3
 8006840:	2301      	movs	r3, #1
 8006842:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006844:	d00a      	beq.n	800685c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684a:	2208      	movs	r2, #8
 800684c:	431a      	orrs	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2280      	movs	r2, #128	; 0x80
 8006858:	00d2      	lsls	r2, r2, #3
 800685a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	0a5b      	lsrs	r3, r3, #9
 8006860:	001a      	movs	r2, r3
 8006862:	2301      	movs	r3, #1
 8006864:	4013      	ands	r3, r2
 8006866:	d010      	beq.n	800688a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	09db      	lsrs	r3, r3, #7
 800686c:	001a      	movs	r2, r3
 800686e:	2301      	movs	r3, #1
 8006870:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006872:	d00a      	beq.n	800688a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006878:	2202      	movs	r2, #2
 800687a:	431a      	orrs	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2280      	movs	r2, #128	; 0x80
 8006886:	0092      	lsls	r2, r2, #2
 8006888:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	220b      	movs	r2, #11
 8006894:	4013      	ands	r3, r2
 8006896:	d005      	beq.n	80068a4 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	0011      	movs	r1, r2
 800689e:	0018      	movs	r0, r3
 80068a0:	f000 fbd8 	bl	8007054 <I2C_ITError>
  }
}
 80068a4:	46c0      	nop			; (mov r8, r8)
 80068a6:	46bd      	mov	sp, r7
 80068a8:	b006      	add	sp, #24
 80068aa:	bd80      	pop	{r7, pc}

080068ac <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80068b4:	46c0      	nop			; (mov r8, r8)
 80068b6:	46bd      	mov	sp, r7
 80068b8:	b002      	add	sp, #8
 80068ba:	bd80      	pop	{r7, pc}

080068bc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80068c4:	46c0      	nop			; (mov r8, r8)
 80068c6:	46bd      	mov	sp, r7
 80068c8:	b002      	add	sp, #8
 80068ca:	bd80      	pop	{r7, pc}

080068cc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	0008      	movs	r0, r1
 80068d6:	0011      	movs	r1, r2
 80068d8:	1cfb      	adds	r3, r7, #3
 80068da:	1c02      	adds	r2, r0, #0
 80068dc:	701a      	strb	r2, [r3, #0]
 80068de:	003b      	movs	r3, r7
 80068e0:	1c0a      	adds	r2, r1, #0
 80068e2:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80068e4:	46c0      	nop			; (mov r8, r8)
 80068e6:	46bd      	mov	sp, r7
 80068e8:	b002      	add	sp, #8
 80068ea:	bd80      	pop	{r7, pc}

080068ec <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80068f4:	46c0      	nop			; (mov r8, r8)
 80068f6:	46bd      	mov	sp, r7
 80068f8:	b002      	add	sp, #8
 80068fa:	bd80      	pop	{r7, pc}

080068fc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006904:	46c0      	nop			; (mov r8, r8)
 8006906:	46bd      	mov	sp, r7
 8006908:	b002      	add	sp, #8
 800690a:	bd80      	pop	{r7, pc}

0800690c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006914:	46c0      	nop			; (mov r8, r8)
 8006916:	46bd      	mov	sp, r7
 8006918:	b002      	add	sp, #8
 800691a:	bd80      	pop	{r7, pc}

0800691c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2240      	movs	r2, #64	; 0x40
 8006936:	5c9b      	ldrb	r3, [r3, r2]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d101      	bne.n	8006940 <I2C_Slave_ISR_IT+0x24>
 800693c:	2302      	movs	r3, #2
 800693e:	e0fa      	b.n	8006b36 <I2C_Slave_ISR_IT+0x21a>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2240      	movs	r2, #64	; 0x40
 8006944:	2101      	movs	r1, #1
 8006946:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	095b      	lsrs	r3, r3, #5
 800694c:	001a      	movs	r2, r3
 800694e:	2301      	movs	r3, #1
 8006950:	4013      	ands	r3, r2
 8006952:	d00b      	beq.n	800696c <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	095b      	lsrs	r3, r3, #5
 8006958:	001a      	movs	r2, r3
 800695a:	2301      	movs	r3, #1
 800695c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800695e:	d005      	beq.n	800696c <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	0011      	movs	r1, r2
 8006966:	0018      	movs	r0, r3
 8006968:	f000 f9f6 	bl	8006d58 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	091b      	lsrs	r3, r3, #4
 8006970:	001a      	movs	r2, r3
 8006972:	2301      	movs	r3, #1
 8006974:	4013      	ands	r3, r2
 8006976:	d054      	beq.n	8006a22 <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	091b      	lsrs	r3, r3, #4
 800697c:	001a      	movs	r2, r3
 800697e:	2301      	movs	r3, #1
 8006980:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006982:	d04e      	beq.n	8006a22 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006988:	b29b      	uxth	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d12d      	bne.n	80069ea <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2241      	movs	r2, #65	; 0x41
 8006992:	5c9b      	ldrb	r3, [r3, r2]
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b28      	cmp	r3, #40	; 0x28
 8006998:	d10b      	bne.n	80069b2 <I2C_Slave_ISR_IT+0x96>
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	2380      	movs	r3, #128	; 0x80
 800699e:	049b      	lsls	r3, r3, #18
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d106      	bne.n	80069b2 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	0011      	movs	r1, r2
 80069aa:	0018      	movs	r0, r3
 80069ac:	f000 faf8 	bl	8006fa0 <I2C_ITListenCplt>
 80069b0:	e036      	b.n	8006a20 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2241      	movs	r2, #65	; 0x41
 80069b6:	5c9b      	ldrb	r3, [r3, r2]
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b29      	cmp	r3, #41	; 0x29
 80069bc:	d110      	bne.n	80069e0 <I2C_Slave_ISR_IT+0xc4>
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	4a5f      	ldr	r2, [pc, #380]	; (8006b40 <I2C_Slave_ISR_IT+0x224>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d00c      	beq.n	80069e0 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2210      	movs	r2, #16
 80069cc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	0018      	movs	r0, r3
 80069d2:	f000 fc4a 	bl	800726a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	0018      	movs	r0, r3
 80069da:	f000 f957 	bl	8006c8c <I2C_ITSlaveSeqCplt>
 80069de:	e01f      	b.n	8006a20 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2210      	movs	r2, #16
 80069e6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80069e8:	e09d      	b.n	8006b26 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2210      	movs	r2, #16
 80069f0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f6:	2204      	movs	r2, #4
 80069f8:	431a      	orrs	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d005      	beq.n	8006a10 <I2C_Slave_ISR_IT+0xf4>
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	2380      	movs	r3, #128	; 0x80
 8006a08:	045b      	lsls	r3, r3, #17
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d000      	beq.n	8006a10 <I2C_Slave_ISR_IT+0xf4>
 8006a0e:	e08a      	b.n	8006b26 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	0011      	movs	r1, r2
 8006a18:	0018      	movs	r0, r3
 8006a1a:	f000 fb1b 	bl	8007054 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006a1e:	e082      	b.n	8006b26 <I2C_Slave_ISR_IT+0x20a>
 8006a20:	e081      	b.n	8006b26 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	089b      	lsrs	r3, r3, #2
 8006a26:	001a      	movs	r2, r3
 8006a28:	2301      	movs	r3, #1
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	d031      	beq.n	8006a92 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	089b      	lsrs	r3, r3, #2
 8006a32:	001a      	movs	r2, r3
 8006a34:	2301      	movs	r3, #1
 8006a36:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006a38:	d02b      	beq.n	8006a92 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d018      	beq.n	8006a76 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	b2d2      	uxtb	r2, r2
 8006a50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a56:	1c5a      	adds	r2, r3, #1
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a60:	3b01      	subs	r3, #1
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d154      	bne.n	8006b2a <I2C_Slave_ISR_IT+0x20e>
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	4a2f      	ldr	r2, [pc, #188]	; (8006b40 <I2C_Slave_ISR_IT+0x224>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d050      	beq.n	8006b2a <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	f000 f8fe 	bl	8006c8c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006a90:	e04b      	b.n	8006b2a <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	08db      	lsrs	r3, r3, #3
 8006a96:	001a      	movs	r2, r3
 8006a98:	2301      	movs	r3, #1
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	d00c      	beq.n	8006ab8 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	08db      	lsrs	r3, r3, #3
 8006aa2:	001a      	movs	r2, r3
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006aa8:	d006      	beq.n	8006ab8 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	0011      	movs	r1, r2
 8006ab0:	0018      	movs	r0, r3
 8006ab2:	f000 f847 	bl	8006b44 <I2C_ITAddrCplt>
 8006ab6:	e039      	b.n	8006b2c <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	085b      	lsrs	r3, r3, #1
 8006abc:	001a      	movs	r2, r3
 8006abe:	2301      	movs	r3, #1
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	d033      	beq.n	8006b2c <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	085b      	lsrs	r3, r3, #1
 8006ac8:	001a      	movs	r2, r3
 8006aca:	2301      	movs	r3, #1
 8006acc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006ace:	d02d      	beq.n	8006b2c <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d018      	beq.n	8006b0c <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ade:	781a      	ldrb	r2, [r3, #0]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	1c5a      	adds	r2, r3, #1
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	3b01      	subs	r3, #1
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b02:	3b01      	subs	r3, #1
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	851a      	strh	r2, [r3, #40]	; 0x28
 8006b0a:	e00f      	b.n	8006b2c <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	2380      	movs	r3, #128	; 0x80
 8006b10:	045b      	lsls	r3, r3, #17
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d002      	beq.n	8006b1c <I2C_Slave_ISR_IT+0x200>
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d107      	bne.n	8006b2c <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	0018      	movs	r0, r3
 8006b20:	f000 f8b4 	bl	8006c8c <I2C_ITSlaveSeqCplt>
 8006b24:	e002      	b.n	8006b2c <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8006b26:	46c0      	nop			; (mov r8, r8)
 8006b28:	e000      	b.n	8006b2c <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8006b2a:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2240      	movs	r2, #64	; 0x40
 8006b30:	2100      	movs	r1, #0
 8006b32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	0018      	movs	r0, r3
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	b006      	add	sp, #24
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	46c0      	nop			; (mov r8, r8)
 8006b40:	ffff0000 	.word	0xffff0000

08006b44 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006b44:	b5b0      	push	{r4, r5, r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2241      	movs	r2, #65	; 0x41
 8006b52:	5c9b      	ldrb	r3, [r3, r2]
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	001a      	movs	r2, r3
 8006b58:	2328      	movs	r3, #40	; 0x28
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	2b28      	cmp	r3, #40	; 0x28
 8006b5e:	d000      	beq.n	8006b62 <I2C_ITAddrCplt+0x1e>
 8006b60:	e088      	b.n	8006c74 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	0c1b      	lsrs	r3, r3, #16
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	250f      	movs	r5, #15
 8006b6e:	197b      	adds	r3, r7, r5
 8006b70:	2101      	movs	r1, #1
 8006b72:	400a      	ands	r2, r1
 8006b74:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	0c1b      	lsrs	r3, r3, #16
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	200c      	movs	r0, #12
 8006b82:	183b      	adds	r3, r7, r0
 8006b84:	21fe      	movs	r1, #254	; 0xfe
 8006b86:	400a      	ands	r2, r1
 8006b88:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	240a      	movs	r4, #10
 8006b94:	193b      	adds	r3, r7, r4
 8006b96:	0592      	lsls	r2, r2, #22
 8006b98:	0d92      	lsrs	r2, r2, #22
 8006b9a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	2308      	movs	r3, #8
 8006ba6:	18fb      	adds	r3, r7, r3
 8006ba8:	21fe      	movs	r1, #254	; 0xfe
 8006baa:	400a      	ands	r2, r1
 8006bac:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d148      	bne.n	8006c48 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006bb6:	0021      	movs	r1, r4
 8006bb8:	187b      	adds	r3, r7, r1
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	09db      	lsrs	r3, r3, #7
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	183b      	adds	r3, r7, r0
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	4053      	eors	r3, r2
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	001a      	movs	r2, r3
 8006bca:	2306      	movs	r3, #6
 8006bcc:	4013      	ands	r3, r2
 8006bce:	d120      	bne.n	8006c12 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8006bd0:	183b      	adds	r3, r7, r0
 8006bd2:	187a      	adds	r2, r7, r1
 8006bd4:	8812      	ldrh	r2, [r2, #0]
 8006bd6:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bdc:	1c5a      	adds	r2, r3, #1
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d14c      	bne.n	8006c84 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2208      	movs	r2, #8
 8006bf6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2240      	movs	r2, #64	; 0x40
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006c00:	183b      	adds	r3, r7, r0
 8006c02:	881a      	ldrh	r2, [r3, #0]
 8006c04:	197b      	adds	r3, r7, r5
 8006c06:	7819      	ldrb	r1, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	0018      	movs	r0, r3
 8006c0c:	f7ff fe5e 	bl	80068cc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006c10:	e038      	b.n	8006c84 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8006c12:	240c      	movs	r4, #12
 8006c14:	193b      	adds	r3, r7, r4
 8006c16:	2208      	movs	r2, #8
 8006c18:	18ba      	adds	r2, r7, r2
 8006c1a:	8812      	ldrh	r2, [r2, #0]
 8006c1c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006c1e:	2380      	movs	r3, #128	; 0x80
 8006c20:	021a      	lsls	r2, r3, #8
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	0011      	movs	r1, r2
 8006c26:	0018      	movs	r0, r3
 8006c28:	f000 fd60 	bl	80076ec <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2240      	movs	r2, #64	; 0x40
 8006c30:	2100      	movs	r1, #0
 8006c32:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006c34:	193b      	adds	r3, r7, r4
 8006c36:	881a      	ldrh	r2, [r3, #0]
 8006c38:	230f      	movs	r3, #15
 8006c3a:	18fb      	adds	r3, r7, r3
 8006c3c:	7819      	ldrb	r1, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	0018      	movs	r0, r3
 8006c42:	f7ff fe43 	bl	80068cc <HAL_I2C_AddrCallback>
}
 8006c46:	e01d      	b.n	8006c84 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006c48:	2380      	movs	r3, #128	; 0x80
 8006c4a:	021a      	lsls	r2, r3, #8
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	0011      	movs	r1, r2
 8006c50:	0018      	movs	r0, r3
 8006c52:	f000 fd4b 	bl	80076ec <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2240      	movs	r2, #64	; 0x40
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006c5e:	230c      	movs	r3, #12
 8006c60:	18fb      	adds	r3, r7, r3
 8006c62:	881a      	ldrh	r2, [r3, #0]
 8006c64:	230f      	movs	r3, #15
 8006c66:	18fb      	adds	r3, r7, r3
 8006c68:	7819      	ldrb	r1, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	0018      	movs	r0, r3
 8006c6e:	f7ff fe2d 	bl	80068cc <HAL_I2C_AddrCallback>
}
 8006c72:	e007      	b.n	8006c84 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2208      	movs	r2, #8
 8006c7a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2240      	movs	r2, #64	; 0x40
 8006c80:	2100      	movs	r1, #0
 8006c82:	5499      	strb	r1, [r3, r2]
}
 8006c84:	46c0      	nop			; (mov r8, r8)
 8006c86:	46bd      	mov	sp, r7
 8006c88:	b004      	add	sp, #16
 8006c8a:	bdb0      	pop	{r4, r5, r7, pc}

08006c8c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2242      	movs	r2, #66	; 0x42
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	0b9b      	lsrs	r3, r3, #14
 8006ca8:	001a      	movs	r2, r3
 8006caa:	2301      	movs	r3, #1
 8006cac:	4013      	ands	r3, r2
 8006cae:	d008      	beq.n	8006cc2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4925      	ldr	r1, [pc, #148]	; (8006d50 <I2C_ITSlaveSeqCplt+0xc4>)
 8006cbc:	400a      	ands	r2, r1
 8006cbe:	601a      	str	r2, [r3, #0]
 8006cc0:	e00d      	b.n	8006cde <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	0bdb      	lsrs	r3, r3, #15
 8006cc6:	001a      	movs	r2, r3
 8006cc8:	2301      	movs	r3, #1
 8006cca:	4013      	ands	r3, r2
 8006ccc:	d007      	beq.n	8006cde <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	491e      	ldr	r1, [pc, #120]	; (8006d54 <I2C_ITSlaveSeqCplt+0xc8>)
 8006cda:	400a      	ands	r2, r1
 8006cdc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2241      	movs	r2, #65	; 0x41
 8006ce2:	5c9b      	ldrb	r3, [r3, r2]
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b29      	cmp	r3, #41	; 0x29
 8006ce8:	d114      	bne.n	8006d14 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2241      	movs	r2, #65	; 0x41
 8006cee:	2128      	movs	r1, #40	; 0x28
 8006cf0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2221      	movs	r2, #33	; 0x21
 8006cf6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2101      	movs	r1, #1
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	f000 fcf5 	bl	80076ec <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2240      	movs	r2, #64	; 0x40
 8006d06:	2100      	movs	r1, #0
 8006d08:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	0018      	movs	r0, r3
 8006d0e:	f7ff fdcd 	bl	80068ac <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006d12:	e019      	b.n	8006d48 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2241      	movs	r2, #65	; 0x41
 8006d18:	5c9b      	ldrb	r3, [r3, r2]
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b2a      	cmp	r3, #42	; 0x2a
 8006d1e:	d113      	bne.n	8006d48 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2241      	movs	r2, #65	; 0x41
 8006d24:	2128      	movs	r1, #40	; 0x28
 8006d26:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2222      	movs	r2, #34	; 0x22
 8006d2c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2102      	movs	r1, #2
 8006d32:	0018      	movs	r0, r3
 8006d34:	f000 fcda 	bl	80076ec <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2240      	movs	r2, #64	; 0x40
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	0018      	movs	r0, r3
 8006d44:	f7ff fdba 	bl	80068bc <HAL_I2C_SlaveRxCpltCallback>
}
 8006d48:	46c0      	nop			; (mov r8, r8)
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	b004      	add	sp, #16
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	ffffbfff 	.word	0xffffbfff
 8006d54:	ffff7fff 	.word	0xffff7fff

08006d58 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006d6e:	200f      	movs	r0, #15
 8006d70:	183b      	adds	r3, r7, r0
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	2141      	movs	r1, #65	; 0x41
 8006d76:	5c52      	ldrb	r2, [r2, r1]
 8006d78:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006d82:	183b      	adds	r3, r7, r0
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	2b21      	cmp	r3, #33	; 0x21
 8006d88:	d003      	beq.n	8006d92 <I2C_ITSlaveCplt+0x3a>
 8006d8a:	183b      	adds	r3, r7, r0
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	2b29      	cmp	r3, #41	; 0x29
 8006d90:	d109      	bne.n	8006da6 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006d92:	4a7d      	ldr	r2, [pc, #500]	; (8006f88 <I2C_ITSlaveCplt+0x230>)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	0011      	movs	r1, r2
 8006d98:	0018      	movs	r0, r3
 8006d9a:	f000 fca7 	bl	80076ec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2221      	movs	r2, #33	; 0x21
 8006da2:	631a      	str	r2, [r3, #48]	; 0x30
 8006da4:	e011      	b.n	8006dca <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006da6:	220f      	movs	r2, #15
 8006da8:	18bb      	adds	r3, r7, r2
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	2b22      	cmp	r3, #34	; 0x22
 8006dae:	d003      	beq.n	8006db8 <I2C_ITSlaveCplt+0x60>
 8006db0:	18bb      	adds	r3, r7, r2
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	2b2a      	cmp	r3, #42	; 0x2a
 8006db6:	d108      	bne.n	8006dca <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006db8:	4a74      	ldr	r2, [pc, #464]	; (8006f8c <I2C_ITSlaveCplt+0x234>)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	0011      	movs	r1, r2
 8006dbe:	0018      	movs	r0, r3
 8006dc0:	f000 fc94 	bl	80076ec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2222      	movs	r2, #34	; 0x22
 8006dc8:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2180      	movs	r1, #128	; 0x80
 8006dd6:	0209      	lsls	r1, r1, #8
 8006dd8:	430a      	orrs	r2, r1
 8006dda:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	496a      	ldr	r1, [pc, #424]	; (8006f90 <I2C_ITSlaveCplt+0x238>)
 8006de8:	400a      	ands	r2, r1
 8006dea:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	0018      	movs	r0, r3
 8006df0:	f000 fa3b 	bl	800726a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	0b9b      	lsrs	r3, r3, #14
 8006df8:	001a      	movs	r2, r3
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	d013      	beq.n	8006e28 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4962      	ldr	r1, [pc, #392]	; (8006f94 <I2C_ITSlaveCplt+0x23c>)
 8006e0c:	400a      	ands	r2, r1
 8006e0e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d020      	beq.n	8006e5a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e26:	e018      	b.n	8006e5a <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	0bdb      	lsrs	r3, r3, #15
 8006e2c:	001a      	movs	r2, r3
 8006e2e:	2301      	movs	r3, #1
 8006e30:	4013      	ands	r3, r2
 8006e32:	d012      	beq.n	8006e5a <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4956      	ldr	r1, [pc, #344]	; (8006f98 <I2C_ITSlaveCplt+0x240>)
 8006e40:	400a      	ands	r2, r1
 8006e42:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d006      	beq.n	8006e5a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	089b      	lsrs	r3, r3, #2
 8006e5e:	001a      	movs	r2, r3
 8006e60:	2301      	movs	r3, #1
 8006e62:	4013      	ands	r3, r2
 8006e64:	d020      	beq.n	8006ea8 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	2204      	movs	r2, #4
 8006e6a:	4393      	bics	r3, r2
 8006e6c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e78:	b2d2      	uxtb	r2, r2
 8006e7a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e80:	1c5a      	adds	r2, r3, #1
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00c      	beq.n	8006ea8 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e92:	3b01      	subs	r3, #1
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d005      	beq.n	8006ebe <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb6:	2204      	movs	r2, #4
 8006eb8:	431a      	orrs	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2242      	movs	r2, #66	; 0x42
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d013      	beq.n	8006efc <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	0011      	movs	r1, r2
 8006edc:	0018      	movs	r0, r3
 8006ede:	f000 f8b9 	bl	8007054 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2241      	movs	r2, #65	; 0x41
 8006ee6:	5c9b      	ldrb	r3, [r3, r2]
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b28      	cmp	r3, #40	; 0x28
 8006eec:	d147      	bne.n	8006f7e <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	0011      	movs	r1, r2
 8006ef4:	0018      	movs	r0, r3
 8006ef6:	f000 f853 	bl	8006fa0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006efa:	e040      	b.n	8006f7e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f00:	4a26      	ldr	r2, [pc, #152]	; (8006f9c <I2C_ITSlaveCplt+0x244>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d016      	beq.n	8006f34 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	0018      	movs	r0, r3
 8006f0a:	f7ff febf 	bl	8006c8c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a22      	ldr	r2, [pc, #136]	; (8006f9c <I2C_ITSlaveCplt+0x244>)
 8006f12:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2241      	movs	r2, #65	; 0x41
 8006f18:	2120      	movs	r1, #32
 8006f1a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2240      	movs	r2, #64	; 0x40
 8006f26:	2100      	movs	r1, #0
 8006f28:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	0018      	movs	r0, r3
 8006f2e:	f7ff fcdd 	bl	80068ec <HAL_I2C_ListenCpltCallback>
}
 8006f32:	e024      	b.n	8006f7e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2241      	movs	r2, #65	; 0x41
 8006f38:	5c9b      	ldrb	r3, [r3, r2]
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	2b22      	cmp	r3, #34	; 0x22
 8006f3e:	d10f      	bne.n	8006f60 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2241      	movs	r2, #65	; 0x41
 8006f44:	2120      	movs	r1, #32
 8006f46:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2240      	movs	r2, #64	; 0x40
 8006f52:	2100      	movs	r1, #0
 8006f54:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	0018      	movs	r0, r3
 8006f5a:	f7ff fcaf 	bl	80068bc <HAL_I2C_SlaveRxCpltCallback>
}
 8006f5e:	e00e      	b.n	8006f7e <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2241      	movs	r2, #65	; 0x41
 8006f64:	2120      	movs	r1, #32
 8006f66:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2240      	movs	r2, #64	; 0x40
 8006f72:	2100      	movs	r1, #0
 8006f74:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	0018      	movs	r0, r3
 8006f7a:	f7ff fc97 	bl	80068ac <HAL_I2C_SlaveTxCpltCallback>
}
 8006f7e:	46c0      	nop			; (mov r8, r8)
 8006f80:	46bd      	mov	sp, r7
 8006f82:	b006      	add	sp, #24
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	46c0      	nop			; (mov r8, r8)
 8006f88:	00008001 	.word	0x00008001
 8006f8c:	00008002 	.word	0x00008002
 8006f90:	fe00e800 	.word	0xfe00e800
 8006f94:	ffffbfff 	.word	0xffffbfff
 8006f98:	ffff7fff 	.word	0xffff7fff
 8006f9c:	ffff0000 	.word	0xffff0000

08006fa0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a27      	ldr	r2, [pc, #156]	; (800704c <I2C_ITListenCplt+0xac>)
 8006fae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2241      	movs	r2, #65	; 0x41
 8006fba:	2120      	movs	r1, #32
 8006fbc:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2242      	movs	r2, #66	; 0x42
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	089b      	lsrs	r3, r3, #2
 8006fd0:	001a      	movs	r2, r3
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	d022      	beq.n	800701e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe2:	b2d2      	uxtb	r2, r2
 8006fe4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fea:	1c5a      	adds	r2, r3, #1
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d012      	beq.n	800701e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007008:	b29b      	uxth	r3, r3
 800700a:	3b01      	subs	r3, #1
 800700c:	b29a      	uxth	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007016:	2204      	movs	r2, #4
 8007018:	431a      	orrs	r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800701e:	4a0c      	ldr	r2, [pc, #48]	; (8007050 <I2C_ITListenCplt+0xb0>)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	0011      	movs	r1, r2
 8007024:	0018      	movs	r0, r3
 8007026:	f000 fb61 	bl	80076ec <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2210      	movs	r2, #16
 8007030:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2240      	movs	r2, #64	; 0x40
 8007036:	2100      	movs	r1, #0
 8007038:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	0018      	movs	r0, r3
 800703e:	f7ff fc55 	bl	80068ec <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	46bd      	mov	sp, r7
 8007046:	b002      	add	sp, #8
 8007048:	bd80      	pop	{r7, pc}
 800704a:	46c0      	nop			; (mov r8, r8)
 800704c:	ffff0000 	.word	0xffff0000
 8007050:	00008003 	.word	0x00008003

08007054 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800705e:	200f      	movs	r0, #15
 8007060:	183b      	adds	r3, r7, r0
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	2141      	movs	r1, #65	; 0x41
 8007066:	5c52      	ldrb	r2, [r2, r1]
 8007068:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2242      	movs	r2, #66	; 0x42
 800706e:	2100      	movs	r1, #0
 8007070:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a62      	ldr	r2, [pc, #392]	; (8007200 <I2C_ITError+0x1ac>)
 8007076:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	431a      	orrs	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800708a:	183b      	adds	r3, r7, r0
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	2b28      	cmp	r3, #40	; 0x28
 8007090:	d007      	beq.n	80070a2 <I2C_ITError+0x4e>
 8007092:	183b      	adds	r3, r7, r0
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	2b29      	cmp	r3, #41	; 0x29
 8007098:	d003      	beq.n	80070a2 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800709a:	183b      	adds	r3, r7, r0
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	2b2a      	cmp	r3, #42	; 0x2a
 80070a0:	d10c      	bne.n	80070bc <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2103      	movs	r1, #3
 80070a6:	0018      	movs	r0, r3
 80070a8:	f000 fb20 	bl	80076ec <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2241      	movs	r2, #65	; 0x41
 80070b0:	2128      	movs	r1, #40	; 0x28
 80070b2:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a53      	ldr	r2, [pc, #332]	; (8007204 <I2C_ITError+0x1b0>)
 80070b8:	635a      	str	r2, [r3, #52]	; 0x34
 80070ba:	e012      	b.n	80070e2 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80070bc:	4a52      	ldr	r2, [pc, #328]	; (8007208 <I2C_ITError+0x1b4>)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	0011      	movs	r1, r2
 80070c2:	0018      	movs	r0, r3
 80070c4:	f000 fb12 	bl	80076ec <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2241      	movs	r2, #65	; 0x41
 80070cc:	5c9b      	ldrb	r3, [r3, r2]
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b60      	cmp	r3, #96	; 0x60
 80070d2:	d003      	beq.n	80070dc <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2241      	movs	r2, #65	; 0x41
 80070d8:	2120      	movs	r1, #32
 80070da:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e6:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d03b      	beq.n	8007168 <I2C_ITError+0x114>
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	2b11      	cmp	r3, #17
 80070f4:	d002      	beq.n	80070fc <I2C_ITError+0xa8>
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	2b21      	cmp	r3, #33	; 0x21
 80070fa:	d135      	bne.n	8007168 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	2380      	movs	r3, #128	; 0x80
 8007104:	01db      	lsls	r3, r3, #7
 8007106:	401a      	ands	r2, r3
 8007108:	2380      	movs	r3, #128	; 0x80
 800710a:	01db      	lsls	r3, r3, #7
 800710c:	429a      	cmp	r2, r3
 800710e:	d107      	bne.n	8007120 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	493c      	ldr	r1, [pc, #240]	; (800720c <I2C_ITError+0x1b8>)
 800711c:	400a      	ands	r2, r1
 800711e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007124:	0018      	movs	r0, r3
 8007126:	f7fe ffa7 	bl	8006078 <HAL_DMA_GetState>
 800712a:	0003      	movs	r3, r0
 800712c:	2b01      	cmp	r3, #1
 800712e:	d016      	beq.n	800715e <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007134:	4a36      	ldr	r2, [pc, #216]	; (8007210 <I2C_ITError+0x1bc>)
 8007136:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2240      	movs	r2, #64	; 0x40
 800713c:	2100      	movs	r1, #0
 800713e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007144:	0018      	movs	r0, r3
 8007146:	f7fe fe7b 	bl	8005e40 <HAL_DMA_Abort_IT>
 800714a:	1e03      	subs	r3, r0, #0
 800714c:	d051      	beq.n	80071f2 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007152:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007158:	0018      	movs	r0, r3
 800715a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800715c:	e049      	b.n	80071f2 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	0018      	movs	r0, r3
 8007162:	f000 f859 	bl	8007218 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007166:	e044      	b.n	80071f2 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716c:	2b00      	cmp	r3, #0
 800716e:	d03b      	beq.n	80071e8 <I2C_ITError+0x194>
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	2b12      	cmp	r3, #18
 8007174:	d002      	beq.n	800717c <I2C_ITError+0x128>
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	2b22      	cmp	r3, #34	; 0x22
 800717a:	d135      	bne.n	80071e8 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	2380      	movs	r3, #128	; 0x80
 8007184:	021b      	lsls	r3, r3, #8
 8007186:	401a      	ands	r2, r3
 8007188:	2380      	movs	r3, #128	; 0x80
 800718a:	021b      	lsls	r3, r3, #8
 800718c:	429a      	cmp	r2, r3
 800718e:	d107      	bne.n	80071a0 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	491e      	ldr	r1, [pc, #120]	; (8007214 <I2C_ITError+0x1c0>)
 800719c:	400a      	ands	r2, r1
 800719e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a4:	0018      	movs	r0, r3
 80071a6:	f7fe ff67 	bl	8006078 <HAL_DMA_GetState>
 80071aa:	0003      	movs	r3, r0
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d016      	beq.n	80071de <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b4:	4a16      	ldr	r2, [pc, #88]	; (8007210 <I2C_ITError+0x1bc>)
 80071b6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2240      	movs	r2, #64	; 0x40
 80071bc:	2100      	movs	r1, #0
 80071be:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071c4:	0018      	movs	r0, r3
 80071c6:	f7fe fe3b 	bl	8005e40 <HAL_DMA_Abort_IT>
 80071ca:	1e03      	subs	r3, r0, #0
 80071cc:	d013      	beq.n	80071f6 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d8:	0018      	movs	r0, r3
 80071da:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071dc:	e00b      	b.n	80071f6 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	0018      	movs	r0, r3
 80071e2:	f000 f819 	bl	8007218 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071e6:	e006      	b.n	80071f6 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	0018      	movs	r0, r3
 80071ec:	f000 f814 	bl	8007218 <I2C_TreatErrorCallback>
  }
}
 80071f0:	e002      	b.n	80071f8 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80071f2:	46c0      	nop			; (mov r8, r8)
 80071f4:	e000      	b.n	80071f8 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071f6:	46c0      	nop			; (mov r8, r8)
}
 80071f8:	46c0      	nop			; (mov r8, r8)
 80071fa:	46bd      	mov	sp, r7
 80071fc:	b004      	add	sp, #16
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	ffff0000 	.word	0xffff0000
 8007204:	0800691d 	.word	0x0800691d
 8007208:	00008003 	.word	0x00008003
 800720c:	ffffbfff 	.word	0xffffbfff
 8007210:	080072af 	.word	0x080072af
 8007214:	ffff7fff 	.word	0xffff7fff

08007218 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2241      	movs	r2, #65	; 0x41
 8007224:	5c9b      	ldrb	r3, [r3, r2]
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b60      	cmp	r3, #96	; 0x60
 800722a:	d10f      	bne.n	800724c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2241      	movs	r2, #65	; 0x41
 8007230:	2120      	movs	r1, #32
 8007232:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2240      	movs	r2, #64	; 0x40
 800723e:	2100      	movs	r1, #0
 8007240:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	0018      	movs	r0, r3
 8007246:	f7ff fb61 	bl	800690c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800724a:	e00a      	b.n	8007262 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2240      	movs	r2, #64	; 0x40
 8007256:	2100      	movs	r1, #0
 8007258:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	0018      	movs	r0, r3
 800725e:	f7ff fb4d 	bl	80068fc <HAL_I2C_ErrorCallback>
}
 8007262:	46c0      	nop			; (mov r8, r8)
 8007264:	46bd      	mov	sp, r7
 8007266:	b002      	add	sp, #8
 8007268:	bd80      	pop	{r7, pc}

0800726a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b082      	sub	sp, #8
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	2202      	movs	r2, #2
 800727a:	4013      	ands	r3, r2
 800727c:	2b02      	cmp	r3, #2
 800727e:	d103      	bne.n	8007288 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2200      	movs	r2, #0
 8007286:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	2201      	movs	r2, #1
 8007290:	4013      	ands	r3, r2
 8007292:	2b01      	cmp	r3, #1
 8007294:	d007      	beq.n	80072a6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	699a      	ldr	r2, [r3, #24]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2101      	movs	r1, #1
 80072a2:	430a      	orrs	r2, r1
 80072a4:	619a      	str	r2, [r3, #24]
  }
}
 80072a6:	46c0      	nop			; (mov r8, r8)
 80072a8:	46bd      	mov	sp, r7
 80072aa:	b002      	add	sp, #8
 80072ac:	bd80      	pop	{r7, pc}

080072ae <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b084      	sub	sp, #16
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d003      	beq.n	80072cc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c8:	2200      	movs	r2, #0
 80072ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d8:	2200      	movs	r2, #0
 80072da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	0018      	movs	r0, r3
 80072e0:	f7ff ff9a 	bl	8007218 <I2C_TreatErrorCallback>
}
 80072e4:	46c0      	nop			; (mov r8, r8)
 80072e6:	46bd      	mov	sp, r7
 80072e8:	b004      	add	sp, #16
 80072ea:	bd80      	pop	{r7, pc}

080072ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	603b      	str	r3, [r7, #0]
 80072f8:	1dfb      	adds	r3, r7, #7
 80072fa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072fc:	e021      	b.n	8007342 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	3301      	adds	r3, #1
 8007302:	d01e      	beq.n	8007342 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007304:	f7fe f90a 	bl	800551c <HAL_GetTick>
 8007308:	0002      	movs	r2, r0
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	429a      	cmp	r2, r3
 8007312:	d302      	bcc.n	800731a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d113      	bne.n	8007342 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731e:	2220      	movs	r2, #32
 8007320:	431a      	orrs	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2241      	movs	r2, #65	; 0x41
 800732a:	2120      	movs	r1, #32
 800732c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2242      	movs	r2, #66	; 0x42
 8007332:	2100      	movs	r1, #0
 8007334:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2240      	movs	r2, #64	; 0x40
 800733a:	2100      	movs	r1, #0
 800733c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e00f      	b.n	8007362 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	4013      	ands	r3, r2
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	425a      	negs	r2, r3
 8007352:	4153      	adcs	r3, r2
 8007354:	b2db      	uxtb	r3, r3
 8007356:	001a      	movs	r2, r3
 8007358:	1dfb      	adds	r3, r7, #7
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	429a      	cmp	r2, r3
 800735e:	d0ce      	beq.n	80072fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	0018      	movs	r0, r3
 8007364:	46bd      	mov	sp, r7
 8007366:	b004      	add	sp, #16
 8007368:	bd80      	pop	{r7, pc}

0800736a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b084      	sub	sp, #16
 800736e:	af00      	add	r7, sp, #0
 8007370:	60f8      	str	r0, [r7, #12]
 8007372:	60b9      	str	r1, [r7, #8]
 8007374:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007376:	e02b      	b.n	80073d0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	68b9      	ldr	r1, [r7, #8]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	0018      	movs	r0, r3
 8007380:	f000 f86e 	bl	8007460 <I2C_IsErrorOccurred>
 8007384:	1e03      	subs	r3, r0, #0
 8007386:	d001      	beq.n	800738c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e029      	b.n	80073e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	3301      	adds	r3, #1
 8007390:	d01e      	beq.n	80073d0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007392:	f7fe f8c3 	bl	800551c <HAL_GetTick>
 8007396:	0002      	movs	r2, r0
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d302      	bcc.n	80073a8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d113      	bne.n	80073d0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ac:	2220      	movs	r2, #32
 80073ae:	431a      	orrs	r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2241      	movs	r2, #65	; 0x41
 80073b8:	2120      	movs	r1, #32
 80073ba:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2242      	movs	r2, #66	; 0x42
 80073c0:	2100      	movs	r1, #0
 80073c2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2240      	movs	r2, #64	; 0x40
 80073c8:	2100      	movs	r1, #0
 80073ca:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e007      	b.n	80073e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	2202      	movs	r2, #2
 80073d8:	4013      	ands	r3, r2
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d1cc      	bne.n	8007378 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	0018      	movs	r0, r3
 80073e2:	46bd      	mov	sp, r7
 80073e4:	b004      	add	sp, #16
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80073f4:	e028      	b.n	8007448 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	68b9      	ldr	r1, [r7, #8]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	0018      	movs	r0, r3
 80073fe:	f000 f82f 	bl	8007460 <I2C_IsErrorOccurred>
 8007402:	1e03      	subs	r3, r0, #0
 8007404:	d001      	beq.n	800740a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e026      	b.n	8007458 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800740a:	f7fe f887 	bl	800551c <HAL_GetTick>
 800740e:	0002      	movs	r2, r0
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	429a      	cmp	r2, r3
 8007418:	d302      	bcc.n	8007420 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d113      	bne.n	8007448 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007424:	2220      	movs	r2, #32
 8007426:	431a      	orrs	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2241      	movs	r2, #65	; 0x41
 8007430:	2120      	movs	r1, #32
 8007432:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2242      	movs	r2, #66	; 0x42
 8007438:	2100      	movs	r1, #0
 800743a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2240      	movs	r2, #64	; 0x40
 8007440:	2100      	movs	r1, #0
 8007442:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e007      	b.n	8007458 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	2220      	movs	r2, #32
 8007450:	4013      	ands	r3, r2
 8007452:	2b20      	cmp	r3, #32
 8007454:	d1cf      	bne.n	80073f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	0018      	movs	r0, r3
 800745a:	46bd      	mov	sp, r7
 800745c:	b004      	add	sp, #16
 800745e:	bd80      	pop	{r7, pc}

08007460 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007460:	b590      	push	{r4, r7, lr}
 8007462:	b08b      	sub	sp, #44	; 0x2c
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800746c:	2327      	movs	r3, #39	; 0x27
 800746e:	18fb      	adds	r3, r7, r3
 8007470:	2200      	movs	r2, #0
 8007472:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800747c:	2300      	movs	r3, #0
 800747e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	2210      	movs	r2, #16
 8007488:	4013      	ands	r3, r2
 800748a:	d100      	bne.n	800748e <I2C_IsErrorOccurred+0x2e>
 800748c:	e08e      	b.n	80075ac <I2C_IsErrorOccurred+0x14c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2210      	movs	r2, #16
 8007494:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007496:	e06c      	b.n	8007572 <I2C_IsErrorOccurred+0x112>
 8007498:	2427      	movs	r4, #39	; 0x27
 800749a:	193b      	adds	r3, r7, r4
 800749c:	193a      	adds	r2, r7, r4
 800749e:	7812      	ldrb	r2, [r2, #0]
 80074a0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	3301      	adds	r3, #1
 80074a6:	d064      	beq.n	8007572 <I2C_IsErrorOccurred+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80074a8:	f7fe f838 	bl	800551c <HAL_GetTick>
 80074ac:	0002      	movs	r2, r0
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d306      	bcc.n	80074c6 <I2C_IsErrorOccurred+0x66>
 80074b8:	193b      	adds	r3, r7, r4
 80074ba:	193a      	adds	r2, r7, r4
 80074bc:	7812      	ldrb	r2, [r2, #0]
 80074be:	701a      	strb	r2, [r3, #0]
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d155      	bne.n	8007572 <I2C_IsErrorOccurred+0x112>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	2380      	movs	r3, #128	; 0x80
 80074ce:	01db      	lsls	r3, r3, #7
 80074d0:	4013      	ands	r3, r2
 80074d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80074d4:	2013      	movs	r0, #19
 80074d6:	183b      	adds	r3, r7, r0
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	2142      	movs	r1, #66	; 0x42
 80074dc:	5c52      	ldrb	r2, [r2, r1]
 80074de:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	699a      	ldr	r2, [r3, #24]
 80074e6:	2380      	movs	r3, #128	; 0x80
 80074e8:	021b      	lsls	r3, r3, #8
 80074ea:	401a      	ands	r2, r3
 80074ec:	2380      	movs	r3, #128	; 0x80
 80074ee:	021b      	lsls	r3, r3, #8
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d137      	bne.n	8007564 <I2C_IsErrorOccurred+0x104>
 80074f4:	697a      	ldr	r2, [r7, #20]
 80074f6:	2380      	movs	r3, #128	; 0x80
 80074f8:	01db      	lsls	r3, r3, #7
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d032      	beq.n	8007564 <I2C_IsErrorOccurred+0x104>
              (tmp1 != I2C_CR2_STOP) && \
 80074fe:	183b      	adds	r3, r7, r0
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	2b20      	cmp	r3, #32
 8007504:	d02e      	beq.n	8007564 <I2C_IsErrorOccurred+0x104>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2180      	movs	r1, #128	; 0x80
 8007512:	01c9      	lsls	r1, r1, #7
 8007514:	430a      	orrs	r2, r1
 8007516:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007518:	f7fe f800 	bl	800551c <HAL_GetTick>
 800751c:	0003      	movs	r3, r0
 800751e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007520:	e020      	b.n	8007564 <I2C_IsErrorOccurred+0x104>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007522:	f7fd fffb 	bl	800551c <HAL_GetTick>
 8007526:	0002      	movs	r2, r0
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	2027      	movs	r0, #39	; 0x27
 800752e:	183a      	adds	r2, r7, r0
 8007530:	1839      	adds	r1, r7, r0
 8007532:	7809      	ldrb	r1, [r1, #0]
 8007534:	7011      	strb	r1, [r2, #0]
 8007536:	2b19      	cmp	r3, #25
 8007538:	d914      	bls.n	8007564 <I2C_IsErrorOccurred+0x104>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800753e:	2220      	movs	r2, #32
 8007540:	431a      	orrs	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2241      	movs	r2, #65	; 0x41
 800754a:	2120      	movs	r1, #32
 800754c:	5499      	strb	r1, [r3, r2]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2242      	movs	r2, #66	; 0x42
 8007552:	2100      	movs	r1, #0
 8007554:	5499      	strb	r1, [r3, r2]

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2240      	movs	r2, #64	; 0x40
 800755a:	2100      	movs	r1, #0
 800755c:	5499      	strb	r1, [r3, r2]

              status = HAL_ERROR;
 800755e:	183b      	adds	r3, r7, r0
 8007560:	2201      	movs	r2, #1
 8007562:	701a      	strb	r2, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	2220      	movs	r2, #32
 800756c:	4013      	ands	r3, r2
 800756e:	2b20      	cmp	r3, #32
 8007570:	d1d7      	bne.n	8007522 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	2220      	movs	r2, #32
 800757a:	4013      	ands	r3, r2
 800757c:	2b20      	cmp	r3, #32
 800757e:	d004      	beq.n	800758a <I2C_IsErrorOccurred+0x12a>
 8007580:	2327      	movs	r3, #39	; 0x27
 8007582:	18fb      	adds	r3, r7, r3
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d086      	beq.n	8007498 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800758a:	2327      	movs	r3, #39	; 0x27
 800758c:	18fb      	adds	r3, r7, r3
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d103      	bne.n	800759c <I2C_IsErrorOccurred+0x13c>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2220      	movs	r2, #32
 800759a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800759c:	6a3b      	ldr	r3, [r7, #32]
 800759e:	2204      	movs	r2, #4
 80075a0:	4313      	orrs	r3, r2
 80075a2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80075a4:	2327      	movs	r3, #39	; 0x27
 80075a6:	18fb      	adds	r3, r7, r3
 80075a8:	2201      	movs	r2, #1
 80075aa:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	699b      	ldr	r3, [r3, #24]
 80075b2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80075b4:	69ba      	ldr	r2, [r7, #24]
 80075b6:	2380      	movs	r3, #128	; 0x80
 80075b8:	005b      	lsls	r3, r3, #1
 80075ba:	4013      	ands	r3, r2
 80075bc:	d00c      	beq.n	80075d8 <I2C_IsErrorOccurred+0x178>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80075be:	6a3b      	ldr	r3, [r7, #32]
 80075c0:	2201      	movs	r2, #1
 80075c2:	4313      	orrs	r3, r2
 80075c4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2280      	movs	r2, #128	; 0x80
 80075cc:	0052      	lsls	r2, r2, #1
 80075ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80075d0:	2327      	movs	r3, #39	; 0x27
 80075d2:	18fb      	adds	r3, r7, r3
 80075d4:	2201      	movs	r2, #1
 80075d6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80075d8:	69ba      	ldr	r2, [r7, #24]
 80075da:	2380      	movs	r3, #128	; 0x80
 80075dc:	00db      	lsls	r3, r3, #3
 80075de:	4013      	ands	r3, r2
 80075e0:	d00c      	beq.n	80075fc <I2C_IsErrorOccurred+0x19c>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80075e2:	6a3b      	ldr	r3, [r7, #32]
 80075e4:	2208      	movs	r2, #8
 80075e6:	4313      	orrs	r3, r2
 80075e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2280      	movs	r2, #128	; 0x80
 80075f0:	00d2      	lsls	r2, r2, #3
 80075f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80075f4:	2327      	movs	r3, #39	; 0x27
 80075f6:	18fb      	adds	r3, r7, r3
 80075f8:	2201      	movs	r2, #1
 80075fa:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80075fc:	69ba      	ldr	r2, [r7, #24]
 80075fe:	2380      	movs	r3, #128	; 0x80
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	4013      	ands	r3, r2
 8007604:	d00c      	beq.n	8007620 <I2C_IsErrorOccurred+0x1c0>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007606:	6a3b      	ldr	r3, [r7, #32]
 8007608:	2202      	movs	r2, #2
 800760a:	4313      	orrs	r3, r2
 800760c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2280      	movs	r2, #128	; 0x80
 8007614:	0092      	lsls	r2, r2, #2
 8007616:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007618:	2327      	movs	r3, #39	; 0x27
 800761a:	18fb      	adds	r3, r7, r3
 800761c:	2201      	movs	r2, #1
 800761e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8007620:	2327      	movs	r3, #39	; 0x27
 8007622:	18fb      	adds	r3, r7, r3
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d01d      	beq.n	8007666 <I2C_IsErrorOccurred+0x206>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	0018      	movs	r0, r3
 800762e:	f7ff fe1c 	bl	800726a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	685a      	ldr	r2, [r3, #4]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	490d      	ldr	r1, [pc, #52]	; (8007674 <I2C_IsErrorOccurred+0x214>)
 800763e:	400a      	ands	r2, r1
 8007640:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007646:	6a3b      	ldr	r3, [r7, #32]
 8007648:	431a      	orrs	r2, r3
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2241      	movs	r2, #65	; 0x41
 8007652:	2120      	movs	r1, #32
 8007654:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2242      	movs	r2, #66	; 0x42
 800765a:	2100      	movs	r1, #0
 800765c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2240      	movs	r2, #64	; 0x40
 8007662:	2100      	movs	r1, #0
 8007664:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8007666:	2327      	movs	r3, #39	; 0x27
 8007668:	18fb      	adds	r3, r7, r3
 800766a:	781b      	ldrb	r3, [r3, #0]
}
 800766c:	0018      	movs	r0, r3
 800766e:	46bd      	mov	sp, r7
 8007670:	b00b      	add	sp, #44	; 0x2c
 8007672:	bd90      	pop	{r4, r7, pc}
 8007674:	fe00e800 	.word	0xfe00e800

08007678 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007678:	b590      	push	{r4, r7, lr}
 800767a:	b087      	sub	sp, #28
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	0008      	movs	r0, r1
 8007682:	0011      	movs	r1, r2
 8007684:	607b      	str	r3, [r7, #4]
 8007686:	240a      	movs	r4, #10
 8007688:	193b      	adds	r3, r7, r4
 800768a:	1c02      	adds	r2, r0, #0
 800768c:	801a      	strh	r2, [r3, #0]
 800768e:	2009      	movs	r0, #9
 8007690:	183b      	adds	r3, r7, r0
 8007692:	1c0a      	adds	r2, r1, #0
 8007694:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007696:	193b      	adds	r3, r7, r4
 8007698:	881b      	ldrh	r3, [r3, #0]
 800769a:	059b      	lsls	r3, r3, #22
 800769c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800769e:	183b      	adds	r3, r7, r0
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	0419      	lsls	r1, r3, #16
 80076a4:	23ff      	movs	r3, #255	; 0xff
 80076a6:	041b      	lsls	r3, r3, #16
 80076a8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80076aa:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80076b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b2:	4313      	orrs	r3, r2
 80076b4:	005b      	lsls	r3, r3, #1
 80076b6:	085b      	lsrs	r3, r3, #1
 80076b8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076c2:	0d51      	lsrs	r1, r2, #21
 80076c4:	2280      	movs	r2, #128	; 0x80
 80076c6:	00d2      	lsls	r2, r2, #3
 80076c8:	400a      	ands	r2, r1
 80076ca:	4907      	ldr	r1, [pc, #28]	; (80076e8 <I2C_TransferConfig+0x70>)
 80076cc:	430a      	orrs	r2, r1
 80076ce:	43d2      	mvns	r2, r2
 80076d0:	401a      	ands	r2, r3
 80076d2:	0011      	movs	r1, r2
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	697a      	ldr	r2, [r7, #20]
 80076da:	430a      	orrs	r2, r1
 80076dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80076de:	46c0      	nop			; (mov r8, r8)
 80076e0:	46bd      	mov	sp, r7
 80076e2:	b007      	add	sp, #28
 80076e4:	bd90      	pop	{r4, r7, pc}
 80076e6:	46c0      	nop			; (mov r8, r8)
 80076e8:	03ff63ff 	.word	0x03ff63ff

080076ec <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	000a      	movs	r2, r1
 80076f6:	1cbb      	adds	r3, r7, #2
 80076f8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80076fa:	2300      	movs	r3, #0
 80076fc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80076fe:	1cbb      	adds	r3, r7, #2
 8007700:	881b      	ldrh	r3, [r3, #0]
 8007702:	2201      	movs	r2, #1
 8007704:	4013      	ands	r3, r2
 8007706:	d010      	beq.n	800772a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2242      	movs	r2, #66	; 0x42
 800770c:	4313      	orrs	r3, r2
 800770e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2241      	movs	r2, #65	; 0x41
 8007714:	5c9b      	ldrb	r3, [r3, r2]
 8007716:	b2db      	uxtb	r3, r3
 8007718:	001a      	movs	r2, r3
 800771a:	2328      	movs	r3, #40	; 0x28
 800771c:	4013      	ands	r3, r2
 800771e:	2b28      	cmp	r3, #40	; 0x28
 8007720:	d003      	beq.n	800772a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	22b0      	movs	r2, #176	; 0xb0
 8007726:	4313      	orrs	r3, r2
 8007728:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800772a:	1cbb      	adds	r3, r7, #2
 800772c:	881b      	ldrh	r3, [r3, #0]
 800772e:	2202      	movs	r2, #2
 8007730:	4013      	ands	r3, r2
 8007732:	d010      	beq.n	8007756 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2244      	movs	r2, #68	; 0x44
 8007738:	4313      	orrs	r3, r2
 800773a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2241      	movs	r2, #65	; 0x41
 8007740:	5c9b      	ldrb	r3, [r3, r2]
 8007742:	b2db      	uxtb	r3, r3
 8007744:	001a      	movs	r2, r3
 8007746:	2328      	movs	r3, #40	; 0x28
 8007748:	4013      	ands	r3, r2
 800774a:	2b28      	cmp	r3, #40	; 0x28
 800774c:	d003      	beq.n	8007756 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	22b0      	movs	r2, #176	; 0xb0
 8007752:	4313      	orrs	r3, r2
 8007754:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007756:	1cbb      	adds	r3, r7, #2
 8007758:	2200      	movs	r2, #0
 800775a:	5e9b      	ldrsh	r3, [r3, r2]
 800775c:	2b00      	cmp	r3, #0
 800775e:	da03      	bge.n	8007768 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	22b8      	movs	r2, #184	; 0xb8
 8007764:	4313      	orrs	r3, r2
 8007766:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007768:	1cbb      	adds	r3, r7, #2
 800776a:	881b      	ldrh	r3, [r3, #0]
 800776c:	2b10      	cmp	r3, #16
 800776e:	d103      	bne.n	8007778 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2290      	movs	r2, #144	; 0x90
 8007774:	4313      	orrs	r3, r2
 8007776:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007778:	1cbb      	adds	r3, r7, #2
 800777a:	881b      	ldrh	r3, [r3, #0]
 800777c:	2b20      	cmp	r3, #32
 800777e:	d103      	bne.n	8007788 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2220      	movs	r2, #32
 8007784:	4313      	orrs	r3, r2
 8007786:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007788:	1cbb      	adds	r3, r7, #2
 800778a:	881b      	ldrh	r3, [r3, #0]
 800778c:	2b40      	cmp	r3, #64	; 0x40
 800778e:	d103      	bne.n	8007798 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2240      	movs	r2, #64	; 0x40
 8007794:	4313      	orrs	r3, r2
 8007796:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	43d9      	mvns	r1, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	400a      	ands	r2, r1
 80077a8:	601a      	str	r2, [r3, #0]
}
 80077aa:	46c0      	nop			; (mov r8, r8)
 80077ac:	46bd      	mov	sp, r7
 80077ae:	b004      	add	sp, #16
 80077b0:	bd80      	pop	{r7, pc}
	...

080077b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2241      	movs	r2, #65	; 0x41
 80077c2:	5c9b      	ldrb	r3, [r3, r2]
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b20      	cmp	r3, #32
 80077c8:	d138      	bne.n	800783c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2240      	movs	r2, #64	; 0x40
 80077ce:	5c9b      	ldrb	r3, [r3, r2]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d101      	bne.n	80077d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80077d4:	2302      	movs	r3, #2
 80077d6:	e032      	b.n	800783e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2240      	movs	r2, #64	; 0x40
 80077dc:	2101      	movs	r1, #1
 80077de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2241      	movs	r2, #65	; 0x41
 80077e4:	2124      	movs	r1, #36	; 0x24
 80077e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2101      	movs	r1, #1
 80077f4:	438a      	bics	r2, r1
 80077f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4911      	ldr	r1, [pc, #68]	; (8007848 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007804:	400a      	ands	r2, r1
 8007806:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	6819      	ldr	r1, [r3, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	683a      	ldr	r2, [r7, #0]
 8007814:	430a      	orrs	r2, r1
 8007816:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2101      	movs	r1, #1
 8007824:	430a      	orrs	r2, r1
 8007826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2241      	movs	r2, #65	; 0x41
 800782c:	2120      	movs	r1, #32
 800782e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2240      	movs	r2, #64	; 0x40
 8007834:	2100      	movs	r1, #0
 8007836:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	e000      	b.n	800783e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800783c:	2302      	movs	r3, #2
  }
}
 800783e:	0018      	movs	r0, r3
 8007840:	46bd      	mov	sp, r7
 8007842:	b002      	add	sp, #8
 8007844:	bd80      	pop	{r7, pc}
 8007846:	46c0      	nop			; (mov r8, r8)
 8007848:	ffffefff 	.word	0xffffefff

0800784c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2241      	movs	r2, #65	; 0x41
 800785a:	5c9b      	ldrb	r3, [r3, r2]
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b20      	cmp	r3, #32
 8007860:	d139      	bne.n	80078d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2240      	movs	r2, #64	; 0x40
 8007866:	5c9b      	ldrb	r3, [r3, r2]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d101      	bne.n	8007870 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800786c:	2302      	movs	r3, #2
 800786e:	e033      	b.n	80078d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2240      	movs	r2, #64	; 0x40
 8007874:	2101      	movs	r1, #1
 8007876:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2241      	movs	r2, #65	; 0x41
 800787c:	2124      	movs	r1, #36	; 0x24
 800787e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2101      	movs	r1, #1
 800788c:	438a      	bics	r2, r1
 800788e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	4a11      	ldr	r2, [pc, #68]	; (80078e0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800789c:	4013      	ands	r3, r2
 800789e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	021b      	lsls	r3, r3, #8
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2101      	movs	r1, #1
 80078be:	430a      	orrs	r2, r1
 80078c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2241      	movs	r2, #65	; 0x41
 80078c6:	2120      	movs	r1, #32
 80078c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2240      	movs	r2, #64	; 0x40
 80078ce:	2100      	movs	r1, #0
 80078d0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80078d2:	2300      	movs	r3, #0
 80078d4:	e000      	b.n	80078d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80078d6:	2302      	movs	r3, #2
  }
}
 80078d8:	0018      	movs	r0, r3
 80078da:	46bd      	mov	sp, r7
 80078dc:	b004      	add	sp, #16
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	fffff0ff 	.word	0xfffff0ff

080078e4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b088      	sub	sp, #32
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d101      	bne.n	80078f6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e0e5      	b.n	8007ac2 <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2235      	movs	r2, #53	; 0x35
 80078fa:	5c9b      	ldrb	r3, [r3, r2]
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d107      	bne.n	8007912 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2234      	movs	r2, #52	; 0x34
 8007906:	2100      	movs	r1, #0
 8007908:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	0018      	movs	r0, r3
 800790e:	f7fd f991 	bl	8004c34 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2235      	movs	r2, #53	; 0x35
 8007916:	2102      	movs	r1, #2
 8007918:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	69da      	ldr	r2, [r3, #28]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4969      	ldr	r1, [pc, #420]	; (8007acc <HAL_I2S_Init+0x1e8>)
 8007926:	400a      	ands	r2, r1
 8007928:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2202      	movs	r2, #2
 8007930:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	2b02      	cmp	r3, #2
 8007938:	d100      	bne.n	800793c <HAL_I2S_Init+0x58>
 800793a:	e076      	b.n	8007a2a <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d102      	bne.n	800794a <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8007944:	2310      	movs	r3, #16
 8007946:	617b      	str	r3, [r7, #20]
 8007948:	e001      	b.n	800794e <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800794a:	2320      	movs	r3, #32
 800794c:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	2b20      	cmp	r3, #32
 8007954:	d802      	bhi.n	800795c <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	005b      	lsls	r3, r3, #1
 800795a:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 800795c:	2380      	movs	r3, #128	; 0x80
 800795e:	011b      	lsls	r3, r3, #4
 8007960:	0018      	movs	r0, r3
 8007962:	f001 f95b 	bl	8008c1c <HAL_RCCEx_GetPeriphCLKFreq>
 8007966:	0003      	movs	r3, r0
 8007968:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	691a      	ldr	r2, [r3, #16]
 800796e:	2380      	movs	r3, #128	; 0x80
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	429a      	cmp	r2, r3
 8007974:	d131      	bne.n	80079da <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d016      	beq.n	80079ac <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	0019      	movs	r1, r3
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f7f8 fbbd 	bl	8000104 <__udivsi3>
 800798a:	0003      	movs	r3, r0
 800798c:	001a      	movs	r2, r3
 800798e:	0013      	movs	r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	189b      	adds	r3, r3, r2
 8007994:	005b      	lsls	r3, r3, #1
 8007996:	001a      	movs	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	695b      	ldr	r3, [r3, #20]
 800799c:	0019      	movs	r1, r3
 800799e:	0010      	movs	r0, r2
 80079a0:	f7f8 fbb0 	bl	8000104 <__udivsi3>
 80079a4:	0003      	movs	r3, r0
 80079a6:	3305      	adds	r3, #5
 80079a8:	613b      	str	r3, [r7, #16]
 80079aa:	e02a      	b.n	8007a02 <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	00db      	lsls	r3, r3, #3
 80079b0:	0019      	movs	r1, r3
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f7f8 fba6 	bl	8000104 <__udivsi3>
 80079b8:	0003      	movs	r3, r0
 80079ba:	001a      	movs	r2, r3
 80079bc:	0013      	movs	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	189b      	adds	r3, r3, r2
 80079c2:	005b      	lsls	r3, r3, #1
 80079c4:	001a      	movs	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	695b      	ldr	r3, [r3, #20]
 80079ca:	0019      	movs	r1, r3
 80079cc:	0010      	movs	r0, r2
 80079ce:	f7f8 fb99 	bl	8000104 <__udivsi3>
 80079d2:	0003      	movs	r3, r0
 80079d4:	3305      	adds	r3, #5
 80079d6:	613b      	str	r3, [r7, #16]
 80079d8:	e013      	b.n	8007a02 <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80079da:	6979      	ldr	r1, [r7, #20]
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f7f8 fb91 	bl	8000104 <__udivsi3>
 80079e2:	0003      	movs	r3, r0
 80079e4:	001a      	movs	r2, r3
 80079e6:	0013      	movs	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	189b      	adds	r3, r3, r2
 80079ec:	005b      	lsls	r3, r3, #1
 80079ee:	001a      	movs	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	695b      	ldr	r3, [r3, #20]
 80079f4:	0019      	movs	r1, r3
 80079f6:	0010      	movs	r0, r2
 80079f8:	f7f8 fb84 	bl	8000104 <__udivsi3>
 80079fc:	0003      	movs	r3, r0
 80079fe:	3305      	adds	r3, #5
 8007a00:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	210a      	movs	r1, #10
 8007a06:	0018      	movs	r0, r3
 8007a08:	f7f8 fb7c 	bl	8000104 <__udivsi3>
 8007a0c:	0003      	movs	r3, r0
 8007a0e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	2201      	movs	r2, #1
 8007a14:	4013      	ands	r3, r2
 8007a16:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	085b      	lsrs	r3, r3, #1
 8007a20:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	021b      	lsls	r3, r3, #8
 8007a26:	61bb      	str	r3, [r7, #24]
 8007a28:	e003      	b.n	8007a32 <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8007a2a:	2302      	movs	r3, #2
 8007a2c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d902      	bls.n	8007a3e <HAL_I2S_Init+0x15a>
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	2bff      	cmp	r3, #255	; 0xff
 8007a3c:	d907      	bls.n	8007a4e <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a42:	2210      	movs	r2, #16
 8007a44:	431a      	orrs	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e039      	b.n	8007ac2 <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	691a      	ldr	r2, [r3, #16]
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	431a      	orrs	r2, r3
 8007a56:	0011      	movs	r1, r2
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	69fa      	ldr	r2, [r7, #28]
 8007a5e:	430a      	orrs	r2, r1
 8007a60:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	69db      	ldr	r3, [r3, #28]
 8007a68:	4a18      	ldr	r2, [pc, #96]	; (8007acc <HAL_I2S_Init+0x1e8>)
 8007a6a:	401a      	ands	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6859      	ldr	r1, [r3, #4]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	4319      	orrs	r1, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	4319      	orrs	r1, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	430b      	orrs	r3, r1
 8007a82:	431a      	orrs	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2180      	movs	r1, #128	; 0x80
 8007a8a:	0109      	lsls	r1, r1, #4
 8007a8c:	430a      	orrs	r2, r1
 8007a8e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	2b30      	cmp	r3, #48	; 0x30
 8007a96:	d003      	beq.n	8007aa0 <HAL_I2S_Init+0x1bc>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	2bb0      	cmp	r3, #176	; 0xb0
 8007a9e:	d108      	bne.n	8007ab2 <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	69da      	ldr	r2, [r3, #28]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2180      	movs	r1, #128	; 0x80
 8007aac:	0149      	lsls	r1, r1, #5
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2235      	movs	r2, #53	; 0x35
 8007abc:	2101      	movs	r1, #1
 8007abe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	0018      	movs	r0, r3
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	b008      	add	sp, #32
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	46c0      	nop			; (mov r8, r8)
 8007acc:	fffff040 	.word	0xfffff040

08007ad0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	1dbb      	adds	r3, r7, #6
 8007adc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d003      	beq.n	8007aec <HAL_I2S_Transmit_DMA+0x1c>
 8007ae4:	1dbb      	adds	r3, r7, #6
 8007ae6:	881b      	ldrh	r3, [r3, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d101      	bne.n	8007af0 <HAL_I2S_Transmit_DMA+0x20>
  {
    return  HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e091      	b.n	8007c14 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2234      	movs	r2, #52	; 0x34
 8007af4:	5c9b      	ldrb	r3, [r3, r2]
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d101      	bne.n	8007b00 <HAL_I2S_Transmit_DMA+0x30>
 8007afc:	2302      	movs	r3, #2
 8007afe:	e089      	b.n	8007c14 <HAL_I2S_Transmit_DMA+0x144>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2234      	movs	r2, #52	; 0x34
 8007b04:	2101      	movs	r1, #1
 8007b06:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2235      	movs	r2, #53	; 0x35
 8007b0c:	5c9b      	ldrb	r3, [r3, r2]
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d005      	beq.n	8007b20 <HAL_I2S_Transmit_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2234      	movs	r2, #52	; 0x34
 8007b18:	2100      	movs	r1, #0
 8007b1a:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	e079      	b.n	8007c14 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2235      	movs	r2, #53	; 0x35
 8007b24:	2103      	movs	r1, #3
 8007b26:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	69db      	ldr	r3, [r3, #28]
 8007b3a:	2207      	movs	r2, #7
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	2b03      	cmp	r3, #3
 8007b44:	d002      	beq.n	8007b4c <HAL_I2S_Transmit_DMA+0x7c>
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	2b05      	cmp	r3, #5
 8007b4a:	d10c      	bne.n	8007b66 <HAL_I2S_Transmit_DMA+0x96>
  {
    hi2s->TxXferSize = (Size << 1U);
 8007b4c:	1dbb      	adds	r3, r7, #6
 8007b4e:	881b      	ldrh	r3, [r3, #0]
 8007b50:	18db      	adds	r3, r3, r3
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8007b58:	1dbb      	adds	r3, r7, #6
 8007b5a:	881b      	ldrh	r3, [r3, #0]
 8007b5c:	18db      	adds	r3, r3, r3
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	845a      	strh	r2, [r3, #34]	; 0x22
 8007b64:	e007      	b.n	8007b76 <HAL_I2S_Transmit_DMA+0xa6>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	1dba      	adds	r2, r7, #6
 8007b6a:	8812      	ldrh	r2, [r2, #0]
 8007b6c:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	1dba      	adds	r2, r7, #6
 8007b72:	8812      	ldrh	r2, [r2, #0]
 8007b74:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7a:	4a28      	ldr	r2, [pc, #160]	; (8007c1c <HAL_I2S_Transmit_DMA+0x14c>)
 8007b7c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b82:	4a27      	ldr	r2, [pc, #156]	; (8007c20 <HAL_I2S_Transmit_DMA+0x150>)
 8007b84:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8a:	4a26      	ldr	r2, [pc, #152]	; (8007c24 <HAL_I2S_Transmit_DMA+0x154>)
 8007b8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007b96:	0019      	movs	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007b9e:	001a      	movs	r2, r3
                                 hi2s->TxXferSize))
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	8c1b      	ldrh	r3, [r3, #32]
 8007ba4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007ba6:	f7fe f8c5 	bl	8005d34 <HAL_DMA_Start_IT>
 8007baa:	1e03      	subs	r3, r0, #0
 8007bac:	d00f      	beq.n	8007bce <HAL_I2S_Transmit_DMA+0xfe>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb2:	2208      	movs	r2, #8
 8007bb4:	431a      	orrs	r2, r3
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2235      	movs	r2, #53	; 0x35
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2234      	movs	r2, #52	; 0x34
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e022      	b.n	8007c14 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	69da      	ldr	r2, [r3, #28]
 8007bd4:	2380      	movs	r3, #128	; 0x80
 8007bd6:	00db      	lsls	r3, r3, #3
 8007bd8:	4013      	ands	r3, r2
 8007bda:	d108      	bne.n	8007bee <HAL_I2S_Transmit_DMA+0x11e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	69da      	ldr	r2, [r3, #28]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2180      	movs	r1, #128	; 0x80
 8007be8:	00c9      	lsls	r1, r1, #3
 8007bea:	430a      	orrs	r2, r1
 8007bec:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	2202      	movs	r2, #2
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	d107      	bne.n	8007c0a <HAL_I2S_Transmit_DMA+0x13a>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	685a      	ldr	r2, [r3, #4]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2102      	movs	r1, #2
 8007c06:	430a      	orrs	r2, r1
 8007c08:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2234      	movs	r2, #52	; 0x34
 8007c0e:	2100      	movs	r1, #0
 8007c10:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	0018      	movs	r0, r3
 8007c16:	46bd      	mov	sp, r7
 8007c18:	b006      	add	sp, #24
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	08007d63 	.word	0x08007d63
 8007c20:	08007d1f 	.word	0x08007d1f
 8007c24:	08007d81 	.word	0x08007d81

08007c28 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	099b      	lsrs	r3, r3, #6
 8007c44:	001a      	movs	r2, r3
 8007c46:	2301      	movs	r3, #1
 8007c48:	4013      	ands	r3, r2
 8007c4a:	d10e      	bne.n	8007c6a <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8007c52:	d00a      	beq.n	8007c6a <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	099b      	lsrs	r3, r3, #6
 8007c58:	001a      	movs	r2, r3
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	d004      	beq.n	8007c6a <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	0018      	movs	r0, r3
 8007c64:	f000 f8e2 	bl	8007e2c <I2S_Receive_IT>
    return;
 8007c68:	e046      	b.n	8007cf8 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	085b      	lsrs	r3, r3, #1
 8007c6e:	001a      	movs	r2, r3
 8007c70:	2301      	movs	r3, #1
 8007c72:	4013      	ands	r3, r2
 8007c74:	d00a      	beq.n	8007c8c <HAL_I2S_IRQHandler+0x64>
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	09db      	lsrs	r3, r3, #7
 8007c7a:	001a      	movs	r2, r3
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	4013      	ands	r3, r2
 8007c80:	d004      	beq.n	8007c8c <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	0018      	movs	r0, r3
 8007c86:	f000 f8a2 	bl	8007dce <I2S_Transmit_IT>
    return;
 8007c8a:	e035      	b.n	8007cf8 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	095b      	lsrs	r3, r3, #5
 8007c90:	001a      	movs	r2, r3
 8007c92:	2301      	movs	r3, #1
 8007c94:	4013      	ands	r3, r2
 8007c96:	d02f      	beq.n	8007cf8 <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	099b      	lsrs	r3, r3, #6
 8007c9c:	001a      	movs	r2, r3
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	d00d      	beq.n	8007cc0 <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	685a      	ldr	r2, [r3, #4]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2160      	movs	r1, #96	; 0x60
 8007cb0:	438a      	bics	r2, r1
 8007cb2:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb8:	2202      	movs	r2, #2
 8007cba:	431a      	orrs	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	08db      	lsrs	r3, r3, #3
 8007cc4:	001a      	movs	r2, r3
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	4013      	ands	r3, r2
 8007cca:	d00d      	beq.n	8007ce8 <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	685a      	ldr	r2, [r3, #4]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	21a0      	movs	r1, #160	; 0xa0
 8007cd8:	438a      	bics	r2, r1
 8007cda:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce0:	2204      	movs	r2, #4
 8007ce2:	431a      	orrs	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2235      	movs	r2, #53	; 0x35
 8007cec:	2101      	movs	r1, #1
 8007cee:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	0018      	movs	r0, r3
 8007cf4:	f000 f80b 	bl	8007d0e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	b004      	add	sp, #16
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b082      	sub	sp, #8
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8007d06:	46c0      	nop			; (mov r8, r8)
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	b002      	add	sp, #8
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b082      	sub	sp, #8
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8007d16:	46c0      	nop			; (mov r8, r8)
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	b002      	add	sp, #8
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b084      	sub	sp, #16
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	69db      	ldr	r3, [r3, #28]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10e      	bne.n	8007d52 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	685a      	ldr	r2, [r3, #4]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2102      	movs	r1, #2
 8007d40:	438a      	bics	r2, r1
 8007d42:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2200      	movs	r2, #0
 8007d48:	845a      	strh	r2, [r3, #34]	; 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2235      	movs	r2, #53	; 0x35
 8007d4e:	2101      	movs	r1, #1
 8007d50:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	0018      	movs	r0, r3
 8007d56:	f7f9 fa37 	bl	80011c8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007d5a:	46c0      	nop			; (mov r8, r8)
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	b004      	add	sp, #16
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b084      	sub	sp, #16
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	0018      	movs	r0, r3
 8007d74:	f7f9 fa18 	bl	80011a8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007d78:	46c0      	nop			; (mov r8, r8)
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	b004      	add	sp, #16
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d8c:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	685a      	ldr	r2, [r3, #4]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2103      	movs	r1, #3
 8007d9a:	438a      	bics	r2, r1
 8007d9c:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	845a      	strh	r2, [r3, #34]	; 0x22
  hi2s->RxXferCount = 0U;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	855a      	strh	r2, [r3, #42]	; 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2235      	movs	r2, #53	; 0x35
 8007dae:	2101      	movs	r1, #1
 8007db0:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db6:	2208      	movs	r2, #8
 8007db8:	431a      	orrs	r2, r3
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	639a      	str	r2, [r3, #56]	; 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	0018      	movs	r0, r3
 8007dc2:	f7ff ffa4 	bl	8007d0e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007dc6:	46c0      	nop			; (mov r8, r8)
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	b004      	add	sp, #16
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b082      	sub	sp, #8
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	881a      	ldrh	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	69db      	ldr	r3, [r3, #28]
 8007de6:	1c9a      	adds	r2, r3, #2
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	3b01      	subs	r3, #1
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d10f      	bne.n	8007e24 <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	685a      	ldr	r2, [r3, #4]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	21a0      	movs	r1, #160	; 0xa0
 8007e10:	438a      	bics	r2, r1
 8007e12:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2235      	movs	r2, #53	; 0x35
 8007e18:	2101      	movs	r1, #1
 8007e1a:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	0018      	movs	r0, r3
 8007e20:	f7f9 f9d2 	bl	80011c8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007e24:	46c0      	nop			; (mov r8, r8)
 8007e26:	46bd      	mov	sp, r7
 8007e28:	b002      	add	sp, #8
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68da      	ldr	r2, [r3, #12]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3e:	b292      	uxth	r2, r2
 8007e40:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e46:	1c9a      	adds	r2, r3, #2
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	3b01      	subs	r3, #1
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10f      	bne.n	8007e84 <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	685a      	ldr	r2, [r3, #4]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2160      	movs	r1, #96	; 0x60
 8007e70:	438a      	bics	r2, r1
 8007e72:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2235      	movs	r2, #53	; 0x35
 8007e78:	2101      	movs	r1, #1
 8007e7a:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	0018      	movs	r0, r3
 8007e80:	f7ff ff3d 	bl	8007cfe <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007e84:	46c0      	nop			; (mov r8, r8)
 8007e86:	46bd      	mov	sp, r7
 8007e88:	b002      	add	sp, #8
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007e94:	4b19      	ldr	r3, [pc, #100]	; (8007efc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a19      	ldr	r2, [pc, #100]	; (8007f00 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	0019      	movs	r1, r3
 8007e9e:	4b17      	ldr	r3, [pc, #92]	; (8007efc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	2380      	movs	r3, #128	; 0x80
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d11f      	bne.n	8007ef0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8007eb0:	4b14      	ldr	r3, [pc, #80]	; (8007f04 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	0013      	movs	r3, r2
 8007eb6:	005b      	lsls	r3, r3, #1
 8007eb8:	189b      	adds	r3, r3, r2
 8007eba:	005b      	lsls	r3, r3, #1
 8007ebc:	4912      	ldr	r1, [pc, #72]	; (8007f08 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8007ebe:	0018      	movs	r0, r3
 8007ec0:	f7f8 f920 	bl	8000104 <__udivsi3>
 8007ec4:	0003      	movs	r3, r0
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007eca:	e008      	b.n	8007ede <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	60fb      	str	r3, [r7, #12]
 8007ed8:	e001      	b.n	8007ede <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007eda:	2303      	movs	r3, #3
 8007edc:	e009      	b.n	8007ef2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007ede:	4b07      	ldr	r3, [pc, #28]	; (8007efc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007ee0:	695a      	ldr	r2, [r3, #20]
 8007ee2:	2380      	movs	r3, #128	; 0x80
 8007ee4:	00db      	lsls	r3, r3, #3
 8007ee6:	401a      	ands	r2, r3
 8007ee8:	2380      	movs	r3, #128	; 0x80
 8007eea:	00db      	lsls	r3, r3, #3
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d0ed      	beq.n	8007ecc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	0018      	movs	r0, r3
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	b004      	add	sp, #16
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	46c0      	nop			; (mov r8, r8)
 8007efc:	40007000 	.word	0x40007000
 8007f00:	fffff9ff 	.word	0xfffff9ff
 8007f04:	20000064 	.word	0x20000064
 8007f08:	000f4240 	.word	0x000f4240

08007f0c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007f10:	4b03      	ldr	r3, [pc, #12]	; (8007f20 <LL_RCC_GetAPB1Prescaler+0x14>)
 8007f12:	689a      	ldr	r2, [r3, #8]
 8007f14:	23e0      	movs	r3, #224	; 0xe0
 8007f16:	01db      	lsls	r3, r3, #7
 8007f18:	4013      	ands	r3, r2
}
 8007f1a:	0018      	movs	r0, r3
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	40021000 	.word	0x40021000

08007f24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b088      	sub	sp, #32
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e2fe      	b.n	8008534 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	d100      	bne.n	8007f42 <HAL_RCC_OscConfig+0x1e>
 8007f40:	e07c      	b.n	800803c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f42:	4bc3      	ldr	r3, [pc, #780]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	2238      	movs	r2, #56	; 0x38
 8007f48:	4013      	ands	r3, r2
 8007f4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f4c:	4bc0      	ldr	r3, [pc, #768]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	2203      	movs	r2, #3
 8007f52:	4013      	ands	r3, r2
 8007f54:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	2b10      	cmp	r3, #16
 8007f5a:	d102      	bne.n	8007f62 <HAL_RCC_OscConfig+0x3e>
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	2b03      	cmp	r3, #3
 8007f60:	d002      	beq.n	8007f68 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	2b08      	cmp	r3, #8
 8007f66:	d10b      	bne.n	8007f80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f68:	4bb9      	ldr	r3, [pc, #740]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	2380      	movs	r3, #128	; 0x80
 8007f6e:	029b      	lsls	r3, r3, #10
 8007f70:	4013      	ands	r3, r2
 8007f72:	d062      	beq.n	800803a <HAL_RCC_OscConfig+0x116>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d15e      	bne.n	800803a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e2d9      	b.n	8008534 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685a      	ldr	r2, [r3, #4]
 8007f84:	2380      	movs	r3, #128	; 0x80
 8007f86:	025b      	lsls	r3, r3, #9
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d107      	bne.n	8007f9c <HAL_RCC_OscConfig+0x78>
 8007f8c:	4bb0      	ldr	r3, [pc, #704]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	4baf      	ldr	r3, [pc, #700]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 8007f92:	2180      	movs	r1, #128	; 0x80
 8007f94:	0249      	lsls	r1, r1, #9
 8007f96:	430a      	orrs	r2, r1
 8007f98:	601a      	str	r2, [r3, #0]
 8007f9a:	e020      	b.n	8007fde <HAL_RCC_OscConfig+0xba>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685a      	ldr	r2, [r3, #4]
 8007fa0:	23a0      	movs	r3, #160	; 0xa0
 8007fa2:	02db      	lsls	r3, r3, #11
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d10e      	bne.n	8007fc6 <HAL_RCC_OscConfig+0xa2>
 8007fa8:	4ba9      	ldr	r3, [pc, #676]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	4ba8      	ldr	r3, [pc, #672]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 8007fae:	2180      	movs	r1, #128	; 0x80
 8007fb0:	02c9      	lsls	r1, r1, #11
 8007fb2:	430a      	orrs	r2, r1
 8007fb4:	601a      	str	r2, [r3, #0]
 8007fb6:	4ba6      	ldr	r3, [pc, #664]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	4ba5      	ldr	r3, [pc, #660]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 8007fbc:	2180      	movs	r1, #128	; 0x80
 8007fbe:	0249      	lsls	r1, r1, #9
 8007fc0:	430a      	orrs	r2, r1
 8007fc2:	601a      	str	r2, [r3, #0]
 8007fc4:	e00b      	b.n	8007fde <HAL_RCC_OscConfig+0xba>
 8007fc6:	4ba2      	ldr	r3, [pc, #648]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	4ba1      	ldr	r3, [pc, #644]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 8007fcc:	49a1      	ldr	r1, [pc, #644]	; (8008254 <HAL_RCC_OscConfig+0x330>)
 8007fce:	400a      	ands	r2, r1
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	4b9f      	ldr	r3, [pc, #636]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	4b9e      	ldr	r3, [pc, #632]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 8007fd8:	499f      	ldr	r1, [pc, #636]	; (8008258 <HAL_RCC_OscConfig+0x334>)
 8007fda:	400a      	ands	r2, r1
 8007fdc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d014      	beq.n	8008010 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fe6:	f7fd fa99 	bl	800551c <HAL_GetTick>
 8007fea:	0003      	movs	r3, r0
 8007fec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007fee:	e008      	b.n	8008002 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ff0:	f7fd fa94 	bl	800551c <HAL_GetTick>
 8007ff4:	0002      	movs	r2, r0
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	2b64      	cmp	r3, #100	; 0x64
 8007ffc:	d901      	bls.n	8008002 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e298      	b.n	8008534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008002:	4b93      	ldr	r3, [pc, #588]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	2380      	movs	r3, #128	; 0x80
 8008008:	029b      	lsls	r3, r3, #10
 800800a:	4013      	ands	r3, r2
 800800c:	d0f0      	beq.n	8007ff0 <HAL_RCC_OscConfig+0xcc>
 800800e:	e015      	b.n	800803c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008010:	f7fd fa84 	bl	800551c <HAL_GetTick>
 8008014:	0003      	movs	r3, r0
 8008016:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008018:	e008      	b.n	800802c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800801a:	f7fd fa7f 	bl	800551c <HAL_GetTick>
 800801e:	0002      	movs	r2, r0
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	2b64      	cmp	r3, #100	; 0x64
 8008026:	d901      	bls.n	800802c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8008028:	2303      	movs	r3, #3
 800802a:	e283      	b.n	8008534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800802c:	4b88      	ldr	r3, [pc, #544]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	2380      	movs	r3, #128	; 0x80
 8008032:	029b      	lsls	r3, r3, #10
 8008034:	4013      	ands	r3, r2
 8008036:	d1f0      	bne.n	800801a <HAL_RCC_OscConfig+0xf6>
 8008038:	e000      	b.n	800803c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800803a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2202      	movs	r2, #2
 8008042:	4013      	ands	r3, r2
 8008044:	d100      	bne.n	8008048 <HAL_RCC_OscConfig+0x124>
 8008046:	e099      	b.n	800817c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008048:	4b81      	ldr	r3, [pc, #516]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	2238      	movs	r2, #56	; 0x38
 800804e:	4013      	ands	r3, r2
 8008050:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008052:	4b7f      	ldr	r3, [pc, #508]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	2203      	movs	r2, #3
 8008058:	4013      	ands	r3, r2
 800805a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	2b10      	cmp	r3, #16
 8008060:	d102      	bne.n	8008068 <HAL_RCC_OscConfig+0x144>
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	2b02      	cmp	r3, #2
 8008066:	d002      	beq.n	800806e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d135      	bne.n	80080da <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800806e:	4b78      	ldr	r3, [pc, #480]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	2380      	movs	r3, #128	; 0x80
 8008074:	00db      	lsls	r3, r3, #3
 8008076:	4013      	ands	r3, r2
 8008078:	d005      	beq.n	8008086 <HAL_RCC_OscConfig+0x162>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d101      	bne.n	8008086 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e256      	b.n	8008534 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008086:	4b72      	ldr	r3, [pc, #456]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	4a74      	ldr	r2, [pc, #464]	; (800825c <HAL_RCC_OscConfig+0x338>)
 800808c:	4013      	ands	r3, r2
 800808e:	0019      	movs	r1, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	695b      	ldr	r3, [r3, #20]
 8008094:	021a      	lsls	r2, r3, #8
 8008096:	4b6e      	ldr	r3, [pc, #440]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 8008098:	430a      	orrs	r2, r1
 800809a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d112      	bne.n	80080c8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80080a2:	4b6b      	ldr	r3, [pc, #428]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a6e      	ldr	r2, [pc, #440]	; (8008260 <HAL_RCC_OscConfig+0x33c>)
 80080a8:	4013      	ands	r3, r2
 80080aa:	0019      	movs	r1, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	691a      	ldr	r2, [r3, #16]
 80080b0:	4b67      	ldr	r3, [pc, #412]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 80080b2:	430a      	orrs	r2, r1
 80080b4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80080b6:	4b66      	ldr	r3, [pc, #408]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	0adb      	lsrs	r3, r3, #11
 80080bc:	2207      	movs	r2, #7
 80080be:	4013      	ands	r3, r2
 80080c0:	4a68      	ldr	r2, [pc, #416]	; (8008264 <HAL_RCC_OscConfig+0x340>)
 80080c2:	40da      	lsrs	r2, r3
 80080c4:	4b68      	ldr	r3, [pc, #416]	; (8008268 <HAL_RCC_OscConfig+0x344>)
 80080c6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80080c8:	4b68      	ldr	r3, [pc, #416]	; (800826c <HAL_RCC_OscConfig+0x348>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	0018      	movs	r0, r3
 80080ce:	f7fd f9c9 	bl	8005464 <HAL_InitTick>
 80080d2:	1e03      	subs	r3, r0, #0
 80080d4:	d051      	beq.n	800817a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e22c      	b.n	8008534 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d030      	beq.n	8008144 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80080e2:	4b5b      	ldr	r3, [pc, #364]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a5e      	ldr	r2, [pc, #376]	; (8008260 <HAL_RCC_OscConfig+0x33c>)
 80080e8:	4013      	ands	r3, r2
 80080ea:	0019      	movs	r1, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	691a      	ldr	r2, [r3, #16]
 80080f0:	4b57      	ldr	r3, [pc, #348]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 80080f2:	430a      	orrs	r2, r1
 80080f4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80080f6:	4b56      	ldr	r3, [pc, #344]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	4b55      	ldr	r3, [pc, #340]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 80080fc:	2180      	movs	r1, #128	; 0x80
 80080fe:	0049      	lsls	r1, r1, #1
 8008100:	430a      	orrs	r2, r1
 8008102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008104:	f7fd fa0a 	bl	800551c <HAL_GetTick>
 8008108:	0003      	movs	r3, r0
 800810a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800810c:	e008      	b.n	8008120 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800810e:	f7fd fa05 	bl	800551c <HAL_GetTick>
 8008112:	0002      	movs	r2, r0
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	2b02      	cmp	r3, #2
 800811a:	d901      	bls.n	8008120 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e209      	b.n	8008534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008120:	4b4b      	ldr	r3, [pc, #300]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	2380      	movs	r3, #128	; 0x80
 8008126:	00db      	lsls	r3, r3, #3
 8008128:	4013      	ands	r3, r2
 800812a:	d0f0      	beq.n	800810e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800812c:	4b48      	ldr	r3, [pc, #288]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	4a4a      	ldr	r2, [pc, #296]	; (800825c <HAL_RCC_OscConfig+0x338>)
 8008132:	4013      	ands	r3, r2
 8008134:	0019      	movs	r1, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	021a      	lsls	r2, r3, #8
 800813c:	4b44      	ldr	r3, [pc, #272]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 800813e:	430a      	orrs	r2, r1
 8008140:	605a      	str	r2, [r3, #4]
 8008142:	e01b      	b.n	800817c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8008144:	4b42      	ldr	r3, [pc, #264]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	4b41      	ldr	r3, [pc, #260]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 800814a:	4949      	ldr	r1, [pc, #292]	; (8008270 <HAL_RCC_OscConfig+0x34c>)
 800814c:	400a      	ands	r2, r1
 800814e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008150:	f7fd f9e4 	bl	800551c <HAL_GetTick>
 8008154:	0003      	movs	r3, r0
 8008156:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008158:	e008      	b.n	800816c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800815a:	f7fd f9df 	bl	800551c <HAL_GetTick>
 800815e:	0002      	movs	r2, r0
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	2b02      	cmp	r3, #2
 8008166:	d901      	bls.n	800816c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008168:	2303      	movs	r3, #3
 800816a:	e1e3      	b.n	8008534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800816c:	4b38      	ldr	r3, [pc, #224]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	2380      	movs	r3, #128	; 0x80
 8008172:	00db      	lsls	r3, r3, #3
 8008174:	4013      	ands	r3, r2
 8008176:	d1f0      	bne.n	800815a <HAL_RCC_OscConfig+0x236>
 8008178:	e000      	b.n	800817c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800817a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2208      	movs	r2, #8
 8008182:	4013      	ands	r3, r2
 8008184:	d047      	beq.n	8008216 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008186:	4b32      	ldr	r3, [pc, #200]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	2238      	movs	r2, #56	; 0x38
 800818c:	4013      	ands	r3, r2
 800818e:	2b18      	cmp	r3, #24
 8008190:	d10a      	bne.n	80081a8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8008192:	4b2f      	ldr	r3, [pc, #188]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 8008194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008196:	2202      	movs	r2, #2
 8008198:	4013      	ands	r3, r2
 800819a:	d03c      	beq.n	8008216 <HAL_RCC_OscConfig+0x2f2>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d138      	bne.n	8008216 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	e1c5      	b.n	8008534 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d019      	beq.n	80081e4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80081b0:	4b27      	ldr	r3, [pc, #156]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 80081b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80081b4:	4b26      	ldr	r3, [pc, #152]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 80081b6:	2101      	movs	r1, #1
 80081b8:	430a      	orrs	r2, r1
 80081ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081bc:	f7fd f9ae 	bl	800551c <HAL_GetTick>
 80081c0:	0003      	movs	r3, r0
 80081c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80081c4:	e008      	b.n	80081d8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80081c6:	f7fd f9a9 	bl	800551c <HAL_GetTick>
 80081ca:	0002      	movs	r2, r0
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	2b02      	cmp	r3, #2
 80081d2:	d901      	bls.n	80081d8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80081d4:	2303      	movs	r3, #3
 80081d6:	e1ad      	b.n	8008534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80081d8:	4b1d      	ldr	r3, [pc, #116]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 80081da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081dc:	2202      	movs	r2, #2
 80081de:	4013      	ands	r3, r2
 80081e0:	d0f1      	beq.n	80081c6 <HAL_RCC_OscConfig+0x2a2>
 80081e2:	e018      	b.n	8008216 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80081e4:	4b1a      	ldr	r3, [pc, #104]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 80081e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80081e8:	4b19      	ldr	r3, [pc, #100]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 80081ea:	2101      	movs	r1, #1
 80081ec:	438a      	bics	r2, r1
 80081ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081f0:	f7fd f994 	bl	800551c <HAL_GetTick>
 80081f4:	0003      	movs	r3, r0
 80081f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80081f8:	e008      	b.n	800820c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80081fa:	f7fd f98f 	bl	800551c <HAL_GetTick>
 80081fe:	0002      	movs	r2, r0
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	2b02      	cmp	r3, #2
 8008206:	d901      	bls.n	800820c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8008208:	2303      	movs	r3, #3
 800820a:	e193      	b.n	8008534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800820c:	4b10      	ldr	r3, [pc, #64]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 800820e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008210:	2202      	movs	r2, #2
 8008212:	4013      	ands	r3, r2
 8008214:	d1f1      	bne.n	80081fa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2204      	movs	r2, #4
 800821c:	4013      	ands	r3, r2
 800821e:	d100      	bne.n	8008222 <HAL_RCC_OscConfig+0x2fe>
 8008220:	e0c6      	b.n	80083b0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008222:	231f      	movs	r3, #31
 8008224:	18fb      	adds	r3, r7, r3
 8008226:	2200      	movs	r2, #0
 8008228:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800822a:	4b09      	ldr	r3, [pc, #36]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	2238      	movs	r2, #56	; 0x38
 8008230:	4013      	ands	r3, r2
 8008232:	2b20      	cmp	r3, #32
 8008234:	d11e      	bne.n	8008274 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8008236:	4b06      	ldr	r3, [pc, #24]	; (8008250 <HAL_RCC_OscConfig+0x32c>)
 8008238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800823a:	2202      	movs	r2, #2
 800823c:	4013      	ands	r3, r2
 800823e:	d100      	bne.n	8008242 <HAL_RCC_OscConfig+0x31e>
 8008240:	e0b6      	b.n	80083b0 <HAL_RCC_OscConfig+0x48c>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d000      	beq.n	800824c <HAL_RCC_OscConfig+0x328>
 800824a:	e0b1      	b.n	80083b0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	e171      	b.n	8008534 <HAL_RCC_OscConfig+0x610>
 8008250:	40021000 	.word	0x40021000
 8008254:	fffeffff 	.word	0xfffeffff
 8008258:	fffbffff 	.word	0xfffbffff
 800825c:	ffff80ff 	.word	0xffff80ff
 8008260:	ffffc7ff 	.word	0xffffc7ff
 8008264:	00f42400 	.word	0x00f42400
 8008268:	20000064 	.word	0x20000064
 800826c:	20000068 	.word	0x20000068
 8008270:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008274:	4bb1      	ldr	r3, [pc, #708]	; (800853c <HAL_RCC_OscConfig+0x618>)
 8008276:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008278:	2380      	movs	r3, #128	; 0x80
 800827a:	055b      	lsls	r3, r3, #21
 800827c:	4013      	ands	r3, r2
 800827e:	d101      	bne.n	8008284 <HAL_RCC_OscConfig+0x360>
 8008280:	2301      	movs	r3, #1
 8008282:	e000      	b.n	8008286 <HAL_RCC_OscConfig+0x362>
 8008284:	2300      	movs	r3, #0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d011      	beq.n	80082ae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800828a:	4bac      	ldr	r3, [pc, #688]	; (800853c <HAL_RCC_OscConfig+0x618>)
 800828c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800828e:	4bab      	ldr	r3, [pc, #684]	; (800853c <HAL_RCC_OscConfig+0x618>)
 8008290:	2180      	movs	r1, #128	; 0x80
 8008292:	0549      	lsls	r1, r1, #21
 8008294:	430a      	orrs	r2, r1
 8008296:	63da      	str	r2, [r3, #60]	; 0x3c
 8008298:	4ba8      	ldr	r3, [pc, #672]	; (800853c <HAL_RCC_OscConfig+0x618>)
 800829a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800829c:	2380      	movs	r3, #128	; 0x80
 800829e:	055b      	lsls	r3, r3, #21
 80082a0:	4013      	ands	r3, r2
 80082a2:	60fb      	str	r3, [r7, #12]
 80082a4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80082a6:	231f      	movs	r3, #31
 80082a8:	18fb      	adds	r3, r7, r3
 80082aa:	2201      	movs	r2, #1
 80082ac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80082ae:	4ba4      	ldr	r3, [pc, #656]	; (8008540 <HAL_RCC_OscConfig+0x61c>)
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	2380      	movs	r3, #128	; 0x80
 80082b4:	005b      	lsls	r3, r3, #1
 80082b6:	4013      	ands	r3, r2
 80082b8:	d11a      	bne.n	80082f0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80082ba:	4ba1      	ldr	r3, [pc, #644]	; (8008540 <HAL_RCC_OscConfig+0x61c>)
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	4ba0      	ldr	r3, [pc, #640]	; (8008540 <HAL_RCC_OscConfig+0x61c>)
 80082c0:	2180      	movs	r1, #128	; 0x80
 80082c2:	0049      	lsls	r1, r1, #1
 80082c4:	430a      	orrs	r2, r1
 80082c6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80082c8:	f7fd f928 	bl	800551c <HAL_GetTick>
 80082cc:	0003      	movs	r3, r0
 80082ce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80082d0:	e008      	b.n	80082e4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082d2:	f7fd f923 	bl	800551c <HAL_GetTick>
 80082d6:	0002      	movs	r2, r0
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d901      	bls.n	80082e4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e127      	b.n	8008534 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80082e4:	4b96      	ldr	r3, [pc, #600]	; (8008540 <HAL_RCC_OscConfig+0x61c>)
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	2380      	movs	r3, #128	; 0x80
 80082ea:	005b      	lsls	r3, r3, #1
 80082ec:	4013      	ands	r3, r2
 80082ee:	d0f0      	beq.n	80082d2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d106      	bne.n	8008306 <HAL_RCC_OscConfig+0x3e2>
 80082f8:	4b90      	ldr	r3, [pc, #576]	; (800853c <HAL_RCC_OscConfig+0x618>)
 80082fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80082fc:	4b8f      	ldr	r3, [pc, #572]	; (800853c <HAL_RCC_OscConfig+0x618>)
 80082fe:	2101      	movs	r1, #1
 8008300:	430a      	orrs	r2, r1
 8008302:	65da      	str	r2, [r3, #92]	; 0x5c
 8008304:	e01c      	b.n	8008340 <HAL_RCC_OscConfig+0x41c>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	2b05      	cmp	r3, #5
 800830c:	d10c      	bne.n	8008328 <HAL_RCC_OscConfig+0x404>
 800830e:	4b8b      	ldr	r3, [pc, #556]	; (800853c <HAL_RCC_OscConfig+0x618>)
 8008310:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008312:	4b8a      	ldr	r3, [pc, #552]	; (800853c <HAL_RCC_OscConfig+0x618>)
 8008314:	2104      	movs	r1, #4
 8008316:	430a      	orrs	r2, r1
 8008318:	65da      	str	r2, [r3, #92]	; 0x5c
 800831a:	4b88      	ldr	r3, [pc, #544]	; (800853c <HAL_RCC_OscConfig+0x618>)
 800831c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800831e:	4b87      	ldr	r3, [pc, #540]	; (800853c <HAL_RCC_OscConfig+0x618>)
 8008320:	2101      	movs	r1, #1
 8008322:	430a      	orrs	r2, r1
 8008324:	65da      	str	r2, [r3, #92]	; 0x5c
 8008326:	e00b      	b.n	8008340 <HAL_RCC_OscConfig+0x41c>
 8008328:	4b84      	ldr	r3, [pc, #528]	; (800853c <HAL_RCC_OscConfig+0x618>)
 800832a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800832c:	4b83      	ldr	r3, [pc, #524]	; (800853c <HAL_RCC_OscConfig+0x618>)
 800832e:	2101      	movs	r1, #1
 8008330:	438a      	bics	r2, r1
 8008332:	65da      	str	r2, [r3, #92]	; 0x5c
 8008334:	4b81      	ldr	r3, [pc, #516]	; (800853c <HAL_RCC_OscConfig+0x618>)
 8008336:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008338:	4b80      	ldr	r3, [pc, #512]	; (800853c <HAL_RCC_OscConfig+0x618>)
 800833a:	2104      	movs	r1, #4
 800833c:	438a      	bics	r2, r1
 800833e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d014      	beq.n	8008372 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008348:	f7fd f8e8 	bl	800551c <HAL_GetTick>
 800834c:	0003      	movs	r3, r0
 800834e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008350:	e009      	b.n	8008366 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008352:	f7fd f8e3 	bl	800551c <HAL_GetTick>
 8008356:	0002      	movs	r2, r0
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	1ad3      	subs	r3, r2, r3
 800835c:	4a79      	ldr	r2, [pc, #484]	; (8008544 <HAL_RCC_OscConfig+0x620>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d901      	bls.n	8008366 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e0e6      	b.n	8008534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008366:	4b75      	ldr	r3, [pc, #468]	; (800853c <HAL_RCC_OscConfig+0x618>)
 8008368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800836a:	2202      	movs	r2, #2
 800836c:	4013      	ands	r3, r2
 800836e:	d0f0      	beq.n	8008352 <HAL_RCC_OscConfig+0x42e>
 8008370:	e013      	b.n	800839a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008372:	f7fd f8d3 	bl	800551c <HAL_GetTick>
 8008376:	0003      	movs	r3, r0
 8008378:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800837a:	e009      	b.n	8008390 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800837c:	f7fd f8ce 	bl	800551c <HAL_GetTick>
 8008380:	0002      	movs	r2, r0
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	4a6f      	ldr	r2, [pc, #444]	; (8008544 <HAL_RCC_OscConfig+0x620>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d901      	bls.n	8008390 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	e0d1      	b.n	8008534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008390:	4b6a      	ldr	r3, [pc, #424]	; (800853c <HAL_RCC_OscConfig+0x618>)
 8008392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008394:	2202      	movs	r2, #2
 8008396:	4013      	ands	r3, r2
 8008398:	d1f0      	bne.n	800837c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800839a:	231f      	movs	r3, #31
 800839c:	18fb      	adds	r3, r7, r3
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d105      	bne.n	80083b0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80083a4:	4b65      	ldr	r3, [pc, #404]	; (800853c <HAL_RCC_OscConfig+0x618>)
 80083a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083a8:	4b64      	ldr	r3, [pc, #400]	; (800853c <HAL_RCC_OscConfig+0x618>)
 80083aa:	4967      	ldr	r1, [pc, #412]	; (8008548 <HAL_RCC_OscConfig+0x624>)
 80083ac:	400a      	ands	r2, r1
 80083ae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	69db      	ldr	r3, [r3, #28]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d100      	bne.n	80083ba <HAL_RCC_OscConfig+0x496>
 80083b8:	e0bb      	b.n	8008532 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80083ba:	4b60      	ldr	r3, [pc, #384]	; (800853c <HAL_RCC_OscConfig+0x618>)
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	2238      	movs	r2, #56	; 0x38
 80083c0:	4013      	ands	r3, r2
 80083c2:	2b10      	cmp	r3, #16
 80083c4:	d100      	bne.n	80083c8 <HAL_RCC_OscConfig+0x4a4>
 80083c6:	e07b      	b.n	80084c0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	69db      	ldr	r3, [r3, #28]
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d156      	bne.n	800847e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083d0:	4b5a      	ldr	r3, [pc, #360]	; (800853c <HAL_RCC_OscConfig+0x618>)
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	4b59      	ldr	r3, [pc, #356]	; (800853c <HAL_RCC_OscConfig+0x618>)
 80083d6:	495d      	ldr	r1, [pc, #372]	; (800854c <HAL_RCC_OscConfig+0x628>)
 80083d8:	400a      	ands	r2, r1
 80083da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083dc:	f7fd f89e 	bl	800551c <HAL_GetTick>
 80083e0:	0003      	movs	r3, r0
 80083e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083e4:	e008      	b.n	80083f8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083e6:	f7fd f899 	bl	800551c <HAL_GetTick>
 80083ea:	0002      	movs	r2, r0
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	1ad3      	subs	r3, r2, r3
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d901      	bls.n	80083f8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80083f4:	2303      	movs	r3, #3
 80083f6:	e09d      	b.n	8008534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083f8:	4b50      	ldr	r3, [pc, #320]	; (800853c <HAL_RCC_OscConfig+0x618>)
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	2380      	movs	r3, #128	; 0x80
 80083fe:	049b      	lsls	r3, r3, #18
 8008400:	4013      	ands	r3, r2
 8008402:	d1f0      	bne.n	80083e6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008404:	4b4d      	ldr	r3, [pc, #308]	; (800853c <HAL_RCC_OscConfig+0x618>)
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	4a51      	ldr	r2, [pc, #324]	; (8008550 <HAL_RCC_OscConfig+0x62c>)
 800840a:	4013      	ands	r3, r2
 800840c:	0019      	movs	r1, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a1a      	ldr	r2, [r3, #32]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008416:	431a      	orrs	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800841c:	021b      	lsls	r3, r3, #8
 800841e:	431a      	orrs	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008424:	431a      	orrs	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842a:	431a      	orrs	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008430:	431a      	orrs	r2, r3
 8008432:	4b42      	ldr	r3, [pc, #264]	; (800853c <HAL_RCC_OscConfig+0x618>)
 8008434:	430a      	orrs	r2, r1
 8008436:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008438:	4b40      	ldr	r3, [pc, #256]	; (800853c <HAL_RCC_OscConfig+0x618>)
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	4b3f      	ldr	r3, [pc, #252]	; (800853c <HAL_RCC_OscConfig+0x618>)
 800843e:	2180      	movs	r1, #128	; 0x80
 8008440:	0449      	lsls	r1, r1, #17
 8008442:	430a      	orrs	r2, r1
 8008444:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8008446:	4b3d      	ldr	r3, [pc, #244]	; (800853c <HAL_RCC_OscConfig+0x618>)
 8008448:	68da      	ldr	r2, [r3, #12]
 800844a:	4b3c      	ldr	r3, [pc, #240]	; (800853c <HAL_RCC_OscConfig+0x618>)
 800844c:	2180      	movs	r1, #128	; 0x80
 800844e:	0549      	lsls	r1, r1, #21
 8008450:	430a      	orrs	r2, r1
 8008452:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008454:	f7fd f862 	bl	800551c <HAL_GetTick>
 8008458:	0003      	movs	r3, r0
 800845a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800845c:	e008      	b.n	8008470 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800845e:	f7fd f85d 	bl	800551c <HAL_GetTick>
 8008462:	0002      	movs	r2, r0
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	1ad3      	subs	r3, r2, r3
 8008468:	2b02      	cmp	r3, #2
 800846a:	d901      	bls.n	8008470 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800846c:	2303      	movs	r3, #3
 800846e:	e061      	b.n	8008534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008470:	4b32      	ldr	r3, [pc, #200]	; (800853c <HAL_RCC_OscConfig+0x618>)
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	2380      	movs	r3, #128	; 0x80
 8008476:	049b      	lsls	r3, r3, #18
 8008478:	4013      	ands	r3, r2
 800847a:	d0f0      	beq.n	800845e <HAL_RCC_OscConfig+0x53a>
 800847c:	e059      	b.n	8008532 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800847e:	4b2f      	ldr	r3, [pc, #188]	; (800853c <HAL_RCC_OscConfig+0x618>)
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	4b2e      	ldr	r3, [pc, #184]	; (800853c <HAL_RCC_OscConfig+0x618>)
 8008484:	4931      	ldr	r1, [pc, #196]	; (800854c <HAL_RCC_OscConfig+0x628>)
 8008486:	400a      	ands	r2, r1
 8008488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800848a:	f7fd f847 	bl	800551c <HAL_GetTick>
 800848e:	0003      	movs	r3, r0
 8008490:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008492:	e008      	b.n	80084a6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008494:	f7fd f842 	bl	800551c <HAL_GetTick>
 8008498:	0002      	movs	r2, r0
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d901      	bls.n	80084a6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80084a2:	2303      	movs	r3, #3
 80084a4:	e046      	b.n	8008534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80084a6:	4b25      	ldr	r3, [pc, #148]	; (800853c <HAL_RCC_OscConfig+0x618>)
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	2380      	movs	r3, #128	; 0x80
 80084ac:	049b      	lsls	r3, r3, #18
 80084ae:	4013      	ands	r3, r2
 80084b0:	d1f0      	bne.n	8008494 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80084b2:	4b22      	ldr	r3, [pc, #136]	; (800853c <HAL_RCC_OscConfig+0x618>)
 80084b4:	68da      	ldr	r2, [r3, #12]
 80084b6:	4b21      	ldr	r3, [pc, #132]	; (800853c <HAL_RCC_OscConfig+0x618>)
 80084b8:	4926      	ldr	r1, [pc, #152]	; (8008554 <HAL_RCC_OscConfig+0x630>)
 80084ba:	400a      	ands	r2, r1
 80084bc:	60da      	str	r2, [r3, #12]
 80084be:	e038      	b.n	8008532 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	69db      	ldr	r3, [r3, #28]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d101      	bne.n	80084cc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e033      	b.n	8008534 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80084cc:	4b1b      	ldr	r3, [pc, #108]	; (800853c <HAL_RCC_OscConfig+0x618>)
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	2203      	movs	r2, #3
 80084d6:	401a      	ands	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6a1b      	ldr	r3, [r3, #32]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d126      	bne.n	800852e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	2270      	movs	r2, #112	; 0x70
 80084e4:	401a      	ands	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d11f      	bne.n	800852e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80084ee:	697a      	ldr	r2, [r7, #20]
 80084f0:	23fe      	movs	r3, #254	; 0xfe
 80084f2:	01db      	lsls	r3, r3, #7
 80084f4:	401a      	ands	r2, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084fa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d116      	bne.n	800852e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008500:	697a      	ldr	r2, [r7, #20]
 8008502:	23f8      	movs	r3, #248	; 0xf8
 8008504:	039b      	lsls	r3, r3, #14
 8008506:	401a      	ands	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800850c:	429a      	cmp	r2, r3
 800850e:	d10e      	bne.n	800852e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008510:	697a      	ldr	r2, [r7, #20]
 8008512:	23e0      	movs	r3, #224	; 0xe0
 8008514:	051b      	lsls	r3, r3, #20
 8008516:	401a      	ands	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800851c:	429a      	cmp	r2, r3
 800851e:	d106      	bne.n	800852e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	0f5b      	lsrs	r3, r3, #29
 8008524:	075a      	lsls	r2, r3, #29
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800852a:	429a      	cmp	r2, r3
 800852c:	d001      	beq.n	8008532 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e000      	b.n	8008534 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	0018      	movs	r0, r3
 8008536:	46bd      	mov	sp, r7
 8008538:	b008      	add	sp, #32
 800853a:	bd80      	pop	{r7, pc}
 800853c:	40021000 	.word	0x40021000
 8008540:	40007000 	.word	0x40007000
 8008544:	00001388 	.word	0x00001388
 8008548:	efffffff 	.word	0xefffffff
 800854c:	feffffff 	.word	0xfeffffff
 8008550:	11c1808c 	.word	0x11c1808c
 8008554:	eefefffc 	.word	0xeefefffc

08008558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	e0e9      	b.n	8008740 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800856c:	4b76      	ldr	r3, [pc, #472]	; (8008748 <HAL_RCC_ClockConfig+0x1f0>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2207      	movs	r2, #7
 8008572:	4013      	ands	r3, r2
 8008574:	683a      	ldr	r2, [r7, #0]
 8008576:	429a      	cmp	r2, r3
 8008578:	d91e      	bls.n	80085b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800857a:	4b73      	ldr	r3, [pc, #460]	; (8008748 <HAL_RCC_ClockConfig+0x1f0>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2207      	movs	r2, #7
 8008580:	4393      	bics	r3, r2
 8008582:	0019      	movs	r1, r3
 8008584:	4b70      	ldr	r3, [pc, #448]	; (8008748 <HAL_RCC_ClockConfig+0x1f0>)
 8008586:	683a      	ldr	r2, [r7, #0]
 8008588:	430a      	orrs	r2, r1
 800858a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800858c:	f7fc ffc6 	bl	800551c <HAL_GetTick>
 8008590:	0003      	movs	r3, r0
 8008592:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008594:	e009      	b.n	80085aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008596:	f7fc ffc1 	bl	800551c <HAL_GetTick>
 800859a:	0002      	movs	r2, r0
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	4a6a      	ldr	r2, [pc, #424]	; (800874c <HAL_RCC_ClockConfig+0x1f4>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d901      	bls.n	80085aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e0ca      	b.n	8008740 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80085aa:	4b67      	ldr	r3, [pc, #412]	; (8008748 <HAL_RCC_ClockConfig+0x1f0>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2207      	movs	r2, #7
 80085b0:	4013      	ands	r3, r2
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d1ee      	bne.n	8008596 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2202      	movs	r2, #2
 80085be:	4013      	ands	r3, r2
 80085c0:	d015      	beq.n	80085ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2204      	movs	r2, #4
 80085c8:	4013      	ands	r3, r2
 80085ca:	d006      	beq.n	80085da <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80085cc:	4b60      	ldr	r3, [pc, #384]	; (8008750 <HAL_RCC_ClockConfig+0x1f8>)
 80085ce:	689a      	ldr	r2, [r3, #8]
 80085d0:	4b5f      	ldr	r3, [pc, #380]	; (8008750 <HAL_RCC_ClockConfig+0x1f8>)
 80085d2:	21e0      	movs	r1, #224	; 0xe0
 80085d4:	01c9      	lsls	r1, r1, #7
 80085d6:	430a      	orrs	r2, r1
 80085d8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085da:	4b5d      	ldr	r3, [pc, #372]	; (8008750 <HAL_RCC_ClockConfig+0x1f8>)
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	4a5d      	ldr	r2, [pc, #372]	; (8008754 <HAL_RCC_ClockConfig+0x1fc>)
 80085e0:	4013      	ands	r3, r2
 80085e2:	0019      	movs	r1, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	689a      	ldr	r2, [r3, #8]
 80085e8:	4b59      	ldr	r3, [pc, #356]	; (8008750 <HAL_RCC_ClockConfig+0x1f8>)
 80085ea:	430a      	orrs	r2, r1
 80085ec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2201      	movs	r2, #1
 80085f4:	4013      	ands	r3, r2
 80085f6:	d057      	beq.n	80086a8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d107      	bne.n	8008610 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008600:	4b53      	ldr	r3, [pc, #332]	; (8008750 <HAL_RCC_ClockConfig+0x1f8>)
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	2380      	movs	r3, #128	; 0x80
 8008606:	029b      	lsls	r3, r3, #10
 8008608:	4013      	ands	r3, r2
 800860a:	d12b      	bne.n	8008664 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e097      	b.n	8008740 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	2b02      	cmp	r3, #2
 8008616:	d107      	bne.n	8008628 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008618:	4b4d      	ldr	r3, [pc, #308]	; (8008750 <HAL_RCC_ClockConfig+0x1f8>)
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	2380      	movs	r3, #128	; 0x80
 800861e:	049b      	lsls	r3, r3, #18
 8008620:	4013      	ands	r3, r2
 8008622:	d11f      	bne.n	8008664 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e08b      	b.n	8008740 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d107      	bne.n	8008640 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008630:	4b47      	ldr	r3, [pc, #284]	; (8008750 <HAL_RCC_ClockConfig+0x1f8>)
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	2380      	movs	r3, #128	; 0x80
 8008636:	00db      	lsls	r3, r3, #3
 8008638:	4013      	ands	r3, r2
 800863a:	d113      	bne.n	8008664 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	e07f      	b.n	8008740 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	2b03      	cmp	r3, #3
 8008646:	d106      	bne.n	8008656 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008648:	4b41      	ldr	r3, [pc, #260]	; (8008750 <HAL_RCC_ClockConfig+0x1f8>)
 800864a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800864c:	2202      	movs	r2, #2
 800864e:	4013      	ands	r3, r2
 8008650:	d108      	bne.n	8008664 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	e074      	b.n	8008740 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008656:	4b3e      	ldr	r3, [pc, #248]	; (8008750 <HAL_RCC_ClockConfig+0x1f8>)
 8008658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800865a:	2202      	movs	r2, #2
 800865c:	4013      	ands	r3, r2
 800865e:	d101      	bne.n	8008664 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	e06d      	b.n	8008740 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008664:	4b3a      	ldr	r3, [pc, #232]	; (8008750 <HAL_RCC_ClockConfig+0x1f8>)
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	2207      	movs	r2, #7
 800866a:	4393      	bics	r3, r2
 800866c:	0019      	movs	r1, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	685a      	ldr	r2, [r3, #4]
 8008672:	4b37      	ldr	r3, [pc, #220]	; (8008750 <HAL_RCC_ClockConfig+0x1f8>)
 8008674:	430a      	orrs	r2, r1
 8008676:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008678:	f7fc ff50 	bl	800551c <HAL_GetTick>
 800867c:	0003      	movs	r3, r0
 800867e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008680:	e009      	b.n	8008696 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008682:	f7fc ff4b 	bl	800551c <HAL_GetTick>
 8008686:	0002      	movs	r2, r0
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	4a2f      	ldr	r2, [pc, #188]	; (800874c <HAL_RCC_ClockConfig+0x1f4>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d901      	bls.n	8008696 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e054      	b.n	8008740 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008696:	4b2e      	ldr	r3, [pc, #184]	; (8008750 <HAL_RCC_ClockConfig+0x1f8>)
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	2238      	movs	r2, #56	; 0x38
 800869c:	401a      	ands	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	00db      	lsls	r3, r3, #3
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d1ec      	bne.n	8008682 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80086a8:	4b27      	ldr	r3, [pc, #156]	; (8008748 <HAL_RCC_ClockConfig+0x1f0>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2207      	movs	r2, #7
 80086ae:	4013      	ands	r3, r2
 80086b0:	683a      	ldr	r2, [r7, #0]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d21e      	bcs.n	80086f4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086b6:	4b24      	ldr	r3, [pc, #144]	; (8008748 <HAL_RCC_ClockConfig+0x1f0>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2207      	movs	r2, #7
 80086bc:	4393      	bics	r3, r2
 80086be:	0019      	movs	r1, r3
 80086c0:	4b21      	ldr	r3, [pc, #132]	; (8008748 <HAL_RCC_ClockConfig+0x1f0>)
 80086c2:	683a      	ldr	r2, [r7, #0]
 80086c4:	430a      	orrs	r2, r1
 80086c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80086c8:	f7fc ff28 	bl	800551c <HAL_GetTick>
 80086cc:	0003      	movs	r3, r0
 80086ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80086d0:	e009      	b.n	80086e6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086d2:	f7fc ff23 	bl	800551c <HAL_GetTick>
 80086d6:	0002      	movs	r2, r0
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	4a1b      	ldr	r2, [pc, #108]	; (800874c <HAL_RCC_ClockConfig+0x1f4>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d901      	bls.n	80086e6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e02c      	b.n	8008740 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80086e6:	4b18      	ldr	r3, [pc, #96]	; (8008748 <HAL_RCC_ClockConfig+0x1f0>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2207      	movs	r2, #7
 80086ec:	4013      	ands	r3, r2
 80086ee:	683a      	ldr	r2, [r7, #0]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d1ee      	bne.n	80086d2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2204      	movs	r2, #4
 80086fa:	4013      	ands	r3, r2
 80086fc:	d009      	beq.n	8008712 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80086fe:	4b14      	ldr	r3, [pc, #80]	; (8008750 <HAL_RCC_ClockConfig+0x1f8>)
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	4a15      	ldr	r2, [pc, #84]	; (8008758 <HAL_RCC_ClockConfig+0x200>)
 8008704:	4013      	ands	r3, r2
 8008706:	0019      	movs	r1, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	68da      	ldr	r2, [r3, #12]
 800870c:	4b10      	ldr	r3, [pc, #64]	; (8008750 <HAL_RCC_ClockConfig+0x1f8>)
 800870e:	430a      	orrs	r2, r1
 8008710:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008712:	f000 f829 	bl	8008768 <HAL_RCC_GetSysClockFreq>
 8008716:	0001      	movs	r1, r0
 8008718:	4b0d      	ldr	r3, [pc, #52]	; (8008750 <HAL_RCC_ClockConfig+0x1f8>)
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	0a1b      	lsrs	r3, r3, #8
 800871e:	220f      	movs	r2, #15
 8008720:	401a      	ands	r2, r3
 8008722:	4b0e      	ldr	r3, [pc, #56]	; (800875c <HAL_RCC_ClockConfig+0x204>)
 8008724:	0092      	lsls	r2, r2, #2
 8008726:	58d3      	ldr	r3, [r2, r3]
 8008728:	221f      	movs	r2, #31
 800872a:	4013      	ands	r3, r2
 800872c:	000a      	movs	r2, r1
 800872e:	40da      	lsrs	r2, r3
 8008730:	4b0b      	ldr	r3, [pc, #44]	; (8008760 <HAL_RCC_ClockConfig+0x208>)
 8008732:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008734:	4b0b      	ldr	r3, [pc, #44]	; (8008764 <HAL_RCC_ClockConfig+0x20c>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	0018      	movs	r0, r3
 800873a:	f7fc fe93 	bl	8005464 <HAL_InitTick>
 800873e:	0003      	movs	r3, r0
}
 8008740:	0018      	movs	r0, r3
 8008742:	46bd      	mov	sp, r7
 8008744:	b004      	add	sp, #16
 8008746:	bd80      	pop	{r7, pc}
 8008748:	40022000 	.word	0x40022000
 800874c:	00001388 	.word	0x00001388
 8008750:	40021000 	.word	0x40021000
 8008754:	fffff0ff 	.word	0xfffff0ff
 8008758:	ffff8fff 	.word	0xffff8fff
 800875c:	0801607c 	.word	0x0801607c
 8008760:	20000064 	.word	0x20000064
 8008764:	20000068 	.word	0x20000068

08008768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b086      	sub	sp, #24
 800876c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800876e:	4b3c      	ldr	r3, [pc, #240]	; (8008860 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	2238      	movs	r2, #56	; 0x38
 8008774:	4013      	ands	r3, r2
 8008776:	d10f      	bne.n	8008798 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008778:	4b39      	ldr	r3, [pc, #228]	; (8008860 <HAL_RCC_GetSysClockFreq+0xf8>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	0adb      	lsrs	r3, r3, #11
 800877e:	2207      	movs	r2, #7
 8008780:	4013      	ands	r3, r2
 8008782:	2201      	movs	r2, #1
 8008784:	409a      	lsls	r2, r3
 8008786:	0013      	movs	r3, r2
 8008788:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	4835      	ldr	r0, [pc, #212]	; (8008864 <HAL_RCC_GetSysClockFreq+0xfc>)
 800878e:	f7f7 fcb9 	bl	8000104 <__udivsi3>
 8008792:	0003      	movs	r3, r0
 8008794:	613b      	str	r3, [r7, #16]
 8008796:	e05d      	b.n	8008854 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008798:	4b31      	ldr	r3, [pc, #196]	; (8008860 <HAL_RCC_GetSysClockFreq+0xf8>)
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	2238      	movs	r2, #56	; 0x38
 800879e:	4013      	ands	r3, r2
 80087a0:	2b08      	cmp	r3, #8
 80087a2:	d102      	bne.n	80087aa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80087a4:	4b30      	ldr	r3, [pc, #192]	; (8008868 <HAL_RCC_GetSysClockFreq+0x100>)
 80087a6:	613b      	str	r3, [r7, #16]
 80087a8:	e054      	b.n	8008854 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80087aa:	4b2d      	ldr	r3, [pc, #180]	; (8008860 <HAL_RCC_GetSysClockFreq+0xf8>)
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	2238      	movs	r2, #56	; 0x38
 80087b0:	4013      	ands	r3, r2
 80087b2:	2b10      	cmp	r3, #16
 80087b4:	d138      	bne.n	8008828 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80087b6:	4b2a      	ldr	r3, [pc, #168]	; (8008860 <HAL_RCC_GetSysClockFreq+0xf8>)
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	2203      	movs	r2, #3
 80087bc:	4013      	ands	r3, r2
 80087be:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80087c0:	4b27      	ldr	r3, [pc, #156]	; (8008860 <HAL_RCC_GetSysClockFreq+0xf8>)
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	091b      	lsrs	r3, r3, #4
 80087c6:	2207      	movs	r2, #7
 80087c8:	4013      	ands	r3, r2
 80087ca:	3301      	adds	r3, #1
 80087cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2b03      	cmp	r3, #3
 80087d2:	d10d      	bne.n	80087f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80087d4:	68b9      	ldr	r1, [r7, #8]
 80087d6:	4824      	ldr	r0, [pc, #144]	; (8008868 <HAL_RCC_GetSysClockFreq+0x100>)
 80087d8:	f7f7 fc94 	bl	8000104 <__udivsi3>
 80087dc:	0003      	movs	r3, r0
 80087de:	0019      	movs	r1, r3
 80087e0:	4b1f      	ldr	r3, [pc, #124]	; (8008860 <HAL_RCC_GetSysClockFreq+0xf8>)
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	0a1b      	lsrs	r3, r3, #8
 80087e6:	227f      	movs	r2, #127	; 0x7f
 80087e8:	4013      	ands	r3, r2
 80087ea:	434b      	muls	r3, r1
 80087ec:	617b      	str	r3, [r7, #20]
        break;
 80087ee:	e00d      	b.n	800880c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80087f0:	68b9      	ldr	r1, [r7, #8]
 80087f2:	481c      	ldr	r0, [pc, #112]	; (8008864 <HAL_RCC_GetSysClockFreq+0xfc>)
 80087f4:	f7f7 fc86 	bl	8000104 <__udivsi3>
 80087f8:	0003      	movs	r3, r0
 80087fa:	0019      	movs	r1, r3
 80087fc:	4b18      	ldr	r3, [pc, #96]	; (8008860 <HAL_RCC_GetSysClockFreq+0xf8>)
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	0a1b      	lsrs	r3, r3, #8
 8008802:	227f      	movs	r2, #127	; 0x7f
 8008804:	4013      	ands	r3, r2
 8008806:	434b      	muls	r3, r1
 8008808:	617b      	str	r3, [r7, #20]
        break;
 800880a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800880c:	4b14      	ldr	r3, [pc, #80]	; (8008860 <HAL_RCC_GetSysClockFreq+0xf8>)
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	0f5b      	lsrs	r3, r3, #29
 8008812:	2207      	movs	r2, #7
 8008814:	4013      	ands	r3, r2
 8008816:	3301      	adds	r3, #1
 8008818:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800881a:	6879      	ldr	r1, [r7, #4]
 800881c:	6978      	ldr	r0, [r7, #20]
 800881e:	f7f7 fc71 	bl	8000104 <__udivsi3>
 8008822:	0003      	movs	r3, r0
 8008824:	613b      	str	r3, [r7, #16]
 8008826:	e015      	b.n	8008854 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008828:	4b0d      	ldr	r3, [pc, #52]	; (8008860 <HAL_RCC_GetSysClockFreq+0xf8>)
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	2238      	movs	r2, #56	; 0x38
 800882e:	4013      	ands	r3, r2
 8008830:	2b20      	cmp	r3, #32
 8008832:	d103      	bne.n	800883c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008834:	2380      	movs	r3, #128	; 0x80
 8008836:	021b      	lsls	r3, r3, #8
 8008838:	613b      	str	r3, [r7, #16]
 800883a:	e00b      	b.n	8008854 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800883c:	4b08      	ldr	r3, [pc, #32]	; (8008860 <HAL_RCC_GetSysClockFreq+0xf8>)
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	2238      	movs	r2, #56	; 0x38
 8008842:	4013      	ands	r3, r2
 8008844:	2b18      	cmp	r3, #24
 8008846:	d103      	bne.n	8008850 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008848:	23fa      	movs	r3, #250	; 0xfa
 800884a:	01db      	lsls	r3, r3, #7
 800884c:	613b      	str	r3, [r7, #16]
 800884e:	e001      	b.n	8008854 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8008850:	2300      	movs	r3, #0
 8008852:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008854:	693b      	ldr	r3, [r7, #16]
}
 8008856:	0018      	movs	r0, r3
 8008858:	46bd      	mov	sp, r7
 800885a:	b006      	add	sp, #24
 800885c:	bd80      	pop	{r7, pc}
 800885e:	46c0      	nop			; (mov r8, r8)
 8008860:	40021000 	.word	0x40021000
 8008864:	00f42400 	.word	0x00f42400
 8008868:	007a1200 	.word	0x007a1200

0800886c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008870:	4b02      	ldr	r3, [pc, #8]	; (800887c <HAL_RCC_GetHCLKFreq+0x10>)
 8008872:	681b      	ldr	r3, [r3, #0]
}
 8008874:	0018      	movs	r0, r3
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	46c0      	nop			; (mov r8, r8)
 800887c:	20000064 	.word	0x20000064

08008880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008880:	b5b0      	push	{r4, r5, r7, lr}
 8008882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008884:	f7ff fff2 	bl	800886c <HAL_RCC_GetHCLKFreq>
 8008888:	0004      	movs	r4, r0
 800888a:	f7ff fb3f 	bl	8007f0c <LL_RCC_GetAPB1Prescaler>
 800888e:	0003      	movs	r3, r0
 8008890:	0b1a      	lsrs	r2, r3, #12
 8008892:	4b05      	ldr	r3, [pc, #20]	; (80088a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008894:	0092      	lsls	r2, r2, #2
 8008896:	58d3      	ldr	r3, [r2, r3]
 8008898:	221f      	movs	r2, #31
 800889a:	4013      	ands	r3, r2
 800889c:	40dc      	lsrs	r4, r3
 800889e:	0023      	movs	r3, r4
}
 80088a0:	0018      	movs	r0, r3
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bdb0      	pop	{r4, r5, r7, pc}
 80088a6:	46c0      	nop			; (mov r8, r8)
 80088a8:	080160bc 	.word	0x080160bc

080088ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b086      	sub	sp, #24
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80088b4:	2313      	movs	r3, #19
 80088b6:	18fb      	adds	r3, r7, r3
 80088b8:	2200      	movs	r2, #0
 80088ba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80088bc:	2312      	movs	r3, #18
 80088be:	18fb      	adds	r3, r7, r3
 80088c0:	2200      	movs	r2, #0
 80088c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	2380      	movs	r3, #128	; 0x80
 80088ca:	029b      	lsls	r3, r3, #10
 80088cc:	4013      	ands	r3, r2
 80088ce:	d100      	bne.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80088d0:	e0a3      	b.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80088d2:	2011      	movs	r0, #17
 80088d4:	183b      	adds	r3, r7, r0
 80088d6:	2200      	movs	r2, #0
 80088d8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80088da:	4bc3      	ldr	r3, [pc, #780]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088de:	2380      	movs	r3, #128	; 0x80
 80088e0:	055b      	lsls	r3, r3, #21
 80088e2:	4013      	ands	r3, r2
 80088e4:	d110      	bne.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80088e6:	4bc0      	ldr	r3, [pc, #768]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088ea:	4bbf      	ldr	r3, [pc, #764]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088ec:	2180      	movs	r1, #128	; 0x80
 80088ee:	0549      	lsls	r1, r1, #21
 80088f0:	430a      	orrs	r2, r1
 80088f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80088f4:	4bbc      	ldr	r3, [pc, #752]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088f8:	2380      	movs	r3, #128	; 0x80
 80088fa:	055b      	lsls	r3, r3, #21
 80088fc:	4013      	ands	r3, r2
 80088fe:	60bb      	str	r3, [r7, #8]
 8008900:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008902:	183b      	adds	r3, r7, r0
 8008904:	2201      	movs	r2, #1
 8008906:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008908:	4bb8      	ldr	r3, [pc, #736]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	4bb7      	ldr	r3, [pc, #732]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800890e:	2180      	movs	r1, #128	; 0x80
 8008910:	0049      	lsls	r1, r1, #1
 8008912:	430a      	orrs	r2, r1
 8008914:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008916:	f7fc fe01 	bl	800551c <HAL_GetTick>
 800891a:	0003      	movs	r3, r0
 800891c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800891e:	e00b      	b.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008920:	f7fc fdfc 	bl	800551c <HAL_GetTick>
 8008924:	0002      	movs	r2, r0
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	1ad3      	subs	r3, r2, r3
 800892a:	2b02      	cmp	r3, #2
 800892c:	d904      	bls.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800892e:	2313      	movs	r3, #19
 8008930:	18fb      	adds	r3, r7, r3
 8008932:	2203      	movs	r2, #3
 8008934:	701a      	strb	r2, [r3, #0]
        break;
 8008936:	e005      	b.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008938:	4bac      	ldr	r3, [pc, #688]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	2380      	movs	r3, #128	; 0x80
 800893e:	005b      	lsls	r3, r3, #1
 8008940:	4013      	ands	r3, r2
 8008942:	d0ed      	beq.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8008944:	2313      	movs	r3, #19
 8008946:	18fb      	adds	r3, r7, r3
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d154      	bne.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800894e:	4ba6      	ldr	r3, [pc, #664]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008950:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008952:	23c0      	movs	r3, #192	; 0xc0
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	4013      	ands	r3, r2
 8008958:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d019      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008964:	697a      	ldr	r2, [r7, #20]
 8008966:	429a      	cmp	r2, r3
 8008968:	d014      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800896a:	4b9f      	ldr	r3, [pc, #636]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800896c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800896e:	4aa0      	ldr	r2, [pc, #640]	; (8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8008970:	4013      	ands	r3, r2
 8008972:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008974:	4b9c      	ldr	r3, [pc, #624]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008976:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008978:	4b9b      	ldr	r3, [pc, #620]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800897a:	2180      	movs	r1, #128	; 0x80
 800897c:	0249      	lsls	r1, r1, #9
 800897e:	430a      	orrs	r2, r1
 8008980:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008982:	4b99      	ldr	r3, [pc, #612]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008984:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008986:	4b98      	ldr	r3, [pc, #608]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008988:	499a      	ldr	r1, [pc, #616]	; (8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800898a:	400a      	ands	r2, r1
 800898c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800898e:	4b96      	ldr	r3, [pc, #600]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008990:	697a      	ldr	r2, [r7, #20]
 8008992:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	2201      	movs	r2, #1
 8008998:	4013      	ands	r3, r2
 800899a:	d016      	beq.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800899c:	f7fc fdbe 	bl	800551c <HAL_GetTick>
 80089a0:	0003      	movs	r3, r0
 80089a2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089a4:	e00c      	b.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089a6:	f7fc fdb9 	bl	800551c <HAL_GetTick>
 80089aa:	0002      	movs	r2, r0
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	4a91      	ldr	r2, [pc, #580]	; (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d904      	bls.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80089b6:	2313      	movs	r3, #19
 80089b8:	18fb      	adds	r3, r7, r3
 80089ba:	2203      	movs	r2, #3
 80089bc:	701a      	strb	r2, [r3, #0]
            break;
 80089be:	e004      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089c0:	4b89      	ldr	r3, [pc, #548]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089c4:	2202      	movs	r2, #2
 80089c6:	4013      	ands	r3, r2
 80089c8:	d0ed      	beq.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80089ca:	2313      	movs	r3, #19
 80089cc:	18fb      	adds	r3, r7, r3
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10a      	bne.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089d4:	4b84      	ldr	r3, [pc, #528]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089d8:	4a85      	ldr	r2, [pc, #532]	; (8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80089da:	4013      	ands	r3, r2
 80089dc:	0019      	movs	r1, r3
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089e2:	4b81      	ldr	r3, [pc, #516]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089e4:	430a      	orrs	r2, r1
 80089e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80089e8:	e00c      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80089ea:	2312      	movs	r3, #18
 80089ec:	18fb      	adds	r3, r7, r3
 80089ee:	2213      	movs	r2, #19
 80089f0:	18ba      	adds	r2, r7, r2
 80089f2:	7812      	ldrb	r2, [r2, #0]
 80089f4:	701a      	strb	r2, [r3, #0]
 80089f6:	e005      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089f8:	2312      	movs	r3, #18
 80089fa:	18fb      	adds	r3, r7, r3
 80089fc:	2213      	movs	r2, #19
 80089fe:	18ba      	adds	r2, r7, r2
 8008a00:	7812      	ldrb	r2, [r2, #0]
 8008a02:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008a04:	2311      	movs	r3, #17
 8008a06:	18fb      	adds	r3, r7, r3
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d105      	bne.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a0e:	4b76      	ldr	r3, [pc, #472]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a12:	4b75      	ldr	r3, [pc, #468]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a14:	4979      	ldr	r1, [pc, #484]	; (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8008a16:	400a      	ands	r2, r1
 8008a18:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	4013      	ands	r3, r2
 8008a22:	d009      	beq.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008a24:	4b70      	ldr	r3, [pc, #448]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a28:	2203      	movs	r2, #3
 8008a2a:	4393      	bics	r3, r2
 8008a2c:	0019      	movs	r1, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	685a      	ldr	r2, [r3, #4]
 8008a32:	4b6d      	ldr	r3, [pc, #436]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a34:	430a      	orrs	r2, r1
 8008a36:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2202      	movs	r2, #2
 8008a3e:	4013      	ands	r3, r2
 8008a40:	d009      	beq.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008a42:	4b69      	ldr	r3, [pc, #420]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a46:	220c      	movs	r2, #12
 8008a48:	4393      	bics	r3, r2
 8008a4a:	0019      	movs	r1, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	689a      	ldr	r2, [r3, #8]
 8008a50:	4b65      	ldr	r3, [pc, #404]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a52:	430a      	orrs	r2, r1
 8008a54:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2210      	movs	r2, #16
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	d009      	beq.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a60:	4b61      	ldr	r3, [pc, #388]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a64:	4a66      	ldr	r2, [pc, #408]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8008a66:	4013      	ands	r3, r2
 8008a68:	0019      	movs	r1, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	68da      	ldr	r2, [r3, #12]
 8008a6e:	4b5e      	ldr	r3, [pc, #376]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a70:	430a      	orrs	r2, r1
 8008a72:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	2380      	movs	r3, #128	; 0x80
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	d009      	beq.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008a80:	4b59      	ldr	r3, [pc, #356]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a84:	4a5f      	ldr	r2, [pc, #380]	; (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008a86:	4013      	ands	r3, r2
 8008a88:	0019      	movs	r1, r3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	699a      	ldr	r2, [r3, #24]
 8008a8e:	4b56      	ldr	r3, [pc, #344]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a90:	430a      	orrs	r2, r1
 8008a92:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	2380      	movs	r3, #128	; 0x80
 8008a9a:	00db      	lsls	r3, r3, #3
 8008a9c:	4013      	ands	r3, r2
 8008a9e:	d009      	beq.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008aa0:	4b51      	ldr	r3, [pc, #324]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aa4:	4a58      	ldr	r2, [pc, #352]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008aa6:	4013      	ands	r3, r2
 8008aa8:	0019      	movs	r1, r3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	69da      	ldr	r2, [r3, #28]
 8008aae:	4b4e      	ldr	r3, [pc, #312]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ab0:	430a      	orrs	r2, r1
 8008ab2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2220      	movs	r2, #32
 8008aba:	4013      	ands	r3, r2
 8008abc:	d009      	beq.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008abe:	4b4a      	ldr	r3, [pc, #296]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ac2:	4a52      	ldr	r2, [pc, #328]	; (8008c0c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	0019      	movs	r1, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	691a      	ldr	r2, [r3, #16]
 8008acc:	4b46      	ldr	r3, [pc, #280]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ace:	430a      	orrs	r2, r1
 8008ad0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	2380      	movs	r3, #128	; 0x80
 8008ad8:	01db      	lsls	r3, r3, #7
 8008ada:	4013      	ands	r3, r2
 8008adc:	d015      	beq.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008ade:	4b42      	ldr	r3, [pc, #264]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	0899      	lsrs	r1, r3, #2
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a1a      	ldr	r2, [r3, #32]
 8008aea:	4b3f      	ldr	r3, [pc, #252]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008aec:	430a      	orrs	r2, r1
 8008aee:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a1a      	ldr	r2, [r3, #32]
 8008af4:	2380      	movs	r3, #128	; 0x80
 8008af6:	05db      	lsls	r3, r3, #23
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d106      	bne.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008afc:	4b3a      	ldr	r3, [pc, #232]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008afe:	68da      	ldr	r2, [r3, #12]
 8008b00:	4b39      	ldr	r3, [pc, #228]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b02:	2180      	movs	r1, #128	; 0x80
 8008b04:	0249      	lsls	r1, r1, #9
 8008b06:	430a      	orrs	r2, r1
 8008b08:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	2380      	movs	r3, #128	; 0x80
 8008b10:	031b      	lsls	r3, r3, #12
 8008b12:	4013      	ands	r3, r2
 8008b14:	d009      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008b16:	4b34      	ldr	r3, [pc, #208]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b1a:	2240      	movs	r2, #64	; 0x40
 8008b1c:	4393      	bics	r3, r2
 8008b1e:	0019      	movs	r1, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b24:	4b30      	ldr	r3, [pc, #192]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b26:	430a      	orrs	r2, r1
 8008b28:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	2380      	movs	r3, #128	; 0x80
 8008b30:	039b      	lsls	r3, r3, #14
 8008b32:	4013      	ands	r3, r2
 8008b34:	d016      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008b36:	4b2c      	ldr	r3, [pc, #176]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b3a:	4a35      	ldr	r2, [pc, #212]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	0019      	movs	r1, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b44:	4b28      	ldr	r3, [pc, #160]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b46:	430a      	orrs	r2, r1
 8008b48:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b4e:	2380      	movs	r3, #128	; 0x80
 8008b50:	03db      	lsls	r3, r3, #15
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d106      	bne.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008b56:	4b24      	ldr	r3, [pc, #144]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b58:	68da      	ldr	r2, [r3, #12]
 8008b5a:	4b23      	ldr	r3, [pc, #140]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b5c:	2180      	movs	r1, #128	; 0x80
 8008b5e:	0449      	lsls	r1, r1, #17
 8008b60:	430a      	orrs	r2, r1
 8008b62:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	2380      	movs	r3, #128	; 0x80
 8008b6a:	03db      	lsls	r3, r3, #15
 8008b6c:	4013      	ands	r3, r2
 8008b6e:	d016      	beq.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008b70:	4b1d      	ldr	r3, [pc, #116]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b74:	4a27      	ldr	r2, [pc, #156]	; (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8008b76:	4013      	ands	r3, r2
 8008b78:	0019      	movs	r1, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b7e:	4b1a      	ldr	r3, [pc, #104]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b80:	430a      	orrs	r2, r1
 8008b82:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b88:	2380      	movs	r3, #128	; 0x80
 8008b8a:	045b      	lsls	r3, r3, #17
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d106      	bne.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008b90:	4b15      	ldr	r3, [pc, #84]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b92:	68da      	ldr	r2, [r3, #12]
 8008b94:	4b14      	ldr	r3, [pc, #80]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b96:	2180      	movs	r1, #128	; 0x80
 8008b98:	0449      	lsls	r1, r1, #17
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	2380      	movs	r3, #128	; 0x80
 8008ba4:	011b      	lsls	r3, r3, #4
 8008ba6:	4013      	ands	r3, r2
 8008ba8:	d016      	beq.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008baa:	4b0f      	ldr	r3, [pc, #60]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bae:	4a1a      	ldr	r2, [pc, #104]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	0019      	movs	r1, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	695a      	ldr	r2, [r3, #20]
 8008bb8:	4b0b      	ldr	r3, [pc, #44]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008bba:	430a      	orrs	r2, r1
 8008bbc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	695a      	ldr	r2, [r3, #20]
 8008bc2:	2380      	movs	r3, #128	; 0x80
 8008bc4:	01db      	lsls	r3, r3, #7
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d106      	bne.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008bca:	4b07      	ldr	r3, [pc, #28]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008bcc:	68da      	ldr	r2, [r3, #12]
 8008bce:	4b06      	ldr	r3, [pc, #24]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008bd0:	2180      	movs	r1, #128	; 0x80
 8008bd2:	0249      	lsls	r1, r1, #9
 8008bd4:	430a      	orrs	r2, r1
 8008bd6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8008bd8:	2312      	movs	r3, #18
 8008bda:	18fb      	adds	r3, r7, r3
 8008bdc:	781b      	ldrb	r3, [r3, #0]
}
 8008bde:	0018      	movs	r0, r3
 8008be0:	46bd      	mov	sp, r7
 8008be2:	b006      	add	sp, #24
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	46c0      	nop			; (mov r8, r8)
 8008be8:	40021000 	.word	0x40021000
 8008bec:	40007000 	.word	0x40007000
 8008bf0:	fffffcff 	.word	0xfffffcff
 8008bf4:	fffeffff 	.word	0xfffeffff
 8008bf8:	00001388 	.word	0x00001388
 8008bfc:	efffffff 	.word	0xefffffff
 8008c00:	fffff3ff 	.word	0xfffff3ff
 8008c04:	fff3ffff 	.word	0xfff3ffff
 8008c08:	ffcfffff 	.word	0xffcfffff
 8008c0c:	ffffcfff 	.word	0xffffcfff
 8008c10:	ffbfffff 	.word	0xffbfffff
 8008c14:	feffffff 	.word	0xfeffffff
 8008c18:	ffff3fff 	.word	0xffff3fff

08008c1c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b086      	sub	sp, #24
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8008c24:	2300      	movs	r3, #0
 8008c26:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	2380      	movs	r3, #128	; 0x80
 8008c2c:	029b      	lsls	r3, r3, #10
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d136      	bne.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008c32:	4bcd      	ldr	r3, [pc, #820]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008c34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008c36:	23c0      	movs	r3, #192	; 0xc0
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4013      	ands	r3, r2
 8008c3c:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008c3e:	4bca      	ldr	r3, [pc, #808]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c42:	2202      	movs	r2, #2
 8008c44:	4013      	ands	r3, r2
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d108      	bne.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	2380      	movs	r3, #128	; 0x80
 8008c4e:	005b      	lsls	r3, r3, #1
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d103      	bne.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8008c54:	2380      	movs	r3, #128	; 0x80
 8008c56:	021b      	lsls	r3, r3, #8
 8008c58:	617b      	str	r3, [r7, #20]
 8008c5a:	e31c      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008c5c:	4bc2      	ldr	r3, [pc, #776]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c60:	2202      	movs	r2, #2
 8008c62:	4013      	ands	r3, r2
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d108      	bne.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	2380      	movs	r3, #128	; 0x80
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d103      	bne.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8008c72:	23fa      	movs	r3, #250	; 0xfa
 8008c74:	01db      	lsls	r3, r3, #7
 8008c76:	617b      	str	r3, [r7, #20]
 8008c78:	e30d      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008c7a:	4bbb      	ldr	r3, [pc, #748]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	2380      	movs	r3, #128	; 0x80
 8008c80:	029b      	lsls	r3, r3, #10
 8008c82:	401a      	ands	r2, r3
 8008c84:	2380      	movs	r3, #128	; 0x80
 8008c86:	029b      	lsls	r3, r3, #10
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d000      	beq.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8008c8c:	e303      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	23c0      	movs	r3, #192	; 0xc0
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d000      	beq.n	8008c9a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8008c98:	e2fd      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 8008c9a:	4bb4      	ldr	r3, [pc, #720]	; (8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8008c9c:	617b      	str	r3, [r7, #20]
 8008c9e:	e2fa      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8008ca0:	4bb1      	ldr	r3, [pc, #708]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	2203      	movs	r2, #3
 8008ca6:	4013      	ands	r3, r2
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	d102      	bne.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8008cac:	4bb0      	ldr	r3, [pc, #704]	; (8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008cae:	613b      	str	r3, [r7, #16]
 8008cb0:	e00a      	b.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 8008cb2:	4bad      	ldr	r3, [pc, #692]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	2203      	movs	r2, #3
 8008cb8:	4013      	ands	r3, r2
 8008cba:	2b03      	cmp	r3, #3
 8008cbc:	d102      	bne.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 8008cbe:	4bad      	ldr	r3, [pc, #692]	; (8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8008cc0:	613b      	str	r3, [r7, #16]
 8008cc2:	e001      	b.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008cc8:	4ba7      	ldr	r3, [pc, #668]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	091b      	lsrs	r3, r3, #4
 8008cce:	2207      	movs	r2, #7
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	0019      	movs	r1, r3
 8008cd6:	6938      	ldr	r0, [r7, #16]
 8008cd8:	f7f7 fa14 	bl	8000104 <__udivsi3>
 8008cdc:	0003      	movs	r3, r0
 8008cde:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	2380      	movs	r3, #128	; 0x80
 8008ce4:	03db      	lsls	r3, r3, #15
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d100      	bne.n	8008cec <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8008cea:	e28e      	b.n	800920a <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	2380      	movs	r3, #128	; 0x80
 8008cf0:	03db      	lsls	r3, r3, #15
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d900      	bls.n	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8008cf6:	e2b7      	b.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	2380      	movs	r3, #128	; 0x80
 8008cfc:	039b      	lsls	r3, r3, #14
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d100      	bne.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008d02:	e253      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	2380      	movs	r3, #128	; 0x80
 8008d08:	039b      	lsls	r3, r3, #14
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d900      	bls.n	8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008d0e:	e2ab      	b.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	2380      	movs	r3, #128	; 0x80
 8008d14:	031b      	lsls	r3, r3, #12
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d100      	bne.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8008d1a:	e0b2      	b.n	8008e82 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	2380      	movs	r3, #128	; 0x80
 8008d20:	031b      	lsls	r3, r3, #12
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d900      	bls.n	8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8008d26:	e29f      	b.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	2380      	movs	r3, #128	; 0x80
 8008d2c:	01db      	lsls	r3, r3, #7
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d100      	bne.n	8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8008d32:	e103      	b.n	8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	2380      	movs	r3, #128	; 0x80
 8008d38:	01db      	lsls	r3, r3, #7
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d900      	bls.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008d3e:	e293      	b.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	2380      	movs	r3, #128	; 0x80
 8008d44:	011b      	lsls	r3, r3, #4
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d100      	bne.n	8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8008d4a:	e165      	b.n	8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	2380      	movs	r3, #128	; 0x80
 8008d50:	011b      	lsls	r3, r3, #4
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d900      	bls.n	8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8008d56:	e287      	b.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	2380      	movs	r3, #128	; 0x80
 8008d5c:	00db      	lsls	r3, r3, #3
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d100      	bne.n	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8008d62:	e1e3      	b.n	800912c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	2380      	movs	r3, #128	; 0x80
 8008d68:	00db      	lsls	r3, r3, #3
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d900      	bls.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8008d6e:	e27b      	b.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	2380      	movs	r3, #128	; 0x80
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d100      	bne.n	8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8008d7a:	e197      	b.n	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	2380      	movs	r3, #128	; 0x80
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d900      	bls.n	8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8008d86:	e26f      	b.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2b20      	cmp	r3, #32
 8008d8c:	d100      	bne.n	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8008d8e:	e118      	b.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2b20      	cmp	r3, #32
 8008d94:	d900      	bls.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 8008d96:	e267      	b.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b10      	cmp	r3, #16
 8008d9c:	d100      	bne.n	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8008d9e:	e093      	b.n	8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2b10      	cmp	r3, #16
 8008da4:	d900      	bls.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8008da6:	e25f      	b.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d003      	beq.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2b02      	cmp	r3, #2
 8008db2:	d033      	beq.n	8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8008db4:	e258      	b.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008db6:	4b6c      	ldr	r3, [pc, #432]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dba:	2203      	movs	r2, #3
 8008dbc:	4013      	ands	r3, r2
 8008dbe:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d104      	bne.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008dc6:	f7ff fd5b 	bl	8008880 <HAL_RCC_GetPCLK1Freq>
 8008dca:	0003      	movs	r3, r0
 8008dcc:	617b      	str	r3, [r7, #20]
        break;
 8008dce:	e24d      	b.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d104      	bne.n	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 8008dd6:	f7ff fcc7 	bl	8008768 <HAL_RCC_GetSysClockFreq>
 8008dda:	0003      	movs	r3, r0
 8008ddc:	617b      	str	r3, [r7, #20]
        break;
 8008dde:	e245      	b.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008de0:	4b61      	ldr	r3, [pc, #388]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	2380      	movs	r3, #128	; 0x80
 8008de6:	00db      	lsls	r3, r3, #3
 8008de8:	401a      	ands	r2, r3
 8008dea:	2380      	movs	r3, #128	; 0x80
 8008dec:	00db      	lsls	r3, r3, #3
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d105      	bne.n	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d102      	bne.n	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 8008df8:	4b5d      	ldr	r3, [pc, #372]	; (8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008dfa:	617b      	str	r3, [r7, #20]
        break;
 8008dfc:	e236      	b.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008dfe:	4b5a      	ldr	r3, [pc, #360]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e02:	2202      	movs	r2, #2
 8008e04:	4013      	ands	r3, r2
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d000      	beq.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 8008e0a:	e22f      	b.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2b03      	cmp	r3, #3
 8008e10:	d000      	beq.n	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 8008e12:	e22b      	b.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 8008e14:	2380      	movs	r3, #128	; 0x80
 8008e16:	021b      	lsls	r3, r3, #8
 8008e18:	617b      	str	r3, [r7, #20]
        break;
 8008e1a:	e227      	b.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008e1c:	4b52      	ldr	r3, [pc, #328]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e20:	220c      	movs	r2, #12
 8008e22:	4013      	ands	r3, r2
 8008e24:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d104      	bne.n	8008e36 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e2c:	f7ff fd28 	bl	8008880 <HAL_RCC_GetPCLK1Freq>
 8008e30:	0003      	movs	r3, r0
 8008e32:	617b      	str	r3, [r7, #20]
        break;
 8008e34:	e21c      	b.n	8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2b04      	cmp	r3, #4
 8008e3a:	d104      	bne.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008e3c:	f7ff fc94 	bl	8008768 <HAL_RCC_GetSysClockFreq>
 8008e40:	0003      	movs	r3, r0
 8008e42:	617b      	str	r3, [r7, #20]
        break;
 8008e44:	e214      	b.n	8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008e46:	4b48      	ldr	r3, [pc, #288]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	2380      	movs	r3, #128	; 0x80
 8008e4c:	00db      	lsls	r3, r3, #3
 8008e4e:	401a      	ands	r2, r3
 8008e50:	2380      	movs	r3, #128	; 0x80
 8008e52:	00db      	lsls	r3, r3, #3
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d105      	bne.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2b08      	cmp	r3, #8
 8008e5c:	d102      	bne.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 8008e5e:	4b44      	ldr	r3, [pc, #272]	; (8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008e60:	617b      	str	r3, [r7, #20]
        break;
 8008e62:	e205      	b.n	8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008e64:	4b40      	ldr	r3, [pc, #256]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e68:	2202      	movs	r2, #2
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d000      	beq.n	8008e72 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008e70:	e1fe      	b.n	8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2b0c      	cmp	r3, #12
 8008e76:	d000      	beq.n	8008e7a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8008e78:	e1fa      	b.n	8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 8008e7a:	2380      	movs	r3, #128	; 0x80
 8008e7c:	021b      	lsls	r3, r3, #8
 8008e7e:	617b      	str	r3, [r7, #20]
        break;
 8008e80:	e1f6      	b.n	8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8008e82:	4b39      	ldr	r3, [pc, #228]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e86:	2240      	movs	r2, #64	; 0x40
 8008e88:	4013      	ands	r3, r2
 8008e8a:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 8008e8c:	4b36      	ldr	r3, [pc, #216]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	2380      	movs	r3, #128	; 0x80
 8008e92:	00db      	lsls	r3, r3, #3
 8008e94:	401a      	ands	r2, r3
 8008e96:	2380      	movs	r3, #128	; 0x80
 8008e98:	00db      	lsls	r3, r3, #3
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d105      	bne.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d102      	bne.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 8008ea4:	4b34      	ldr	r3, [pc, #208]	; (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8008ea6:	617b      	str	r3, [r7, #20]
        break;
 8008ea8:	e1e4      	b.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8008eaa:	4b2f      	ldr	r3, [pc, #188]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eae:	2202      	movs	r2, #2
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	2b02      	cmp	r3, #2
 8008eb4:	d000      	beq.n	8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8008eb6:	e1dd      	b.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2b40      	cmp	r3, #64	; 0x40
 8008ebc:	d000      	beq.n	8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8008ebe:	e1d9      	b.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 8008ec0:	2380      	movs	r3, #128	; 0x80
 8008ec2:	021b      	lsls	r3, r3, #8
 8008ec4:	617b      	str	r3, [r7, #20]
        break;
 8008ec6:	e1d5      	b.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008ec8:	4b27      	ldr	r3, [pc, #156]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008eca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ecc:	23c0      	movs	r3, #192	; 0xc0
 8008ece:	011b      	lsls	r3, r3, #4
 8008ed0:	4013      	ands	r3, r2
 8008ed2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d104      	bne.n	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008eda:	f7ff fcd1 	bl	8008880 <HAL_RCC_GetPCLK1Freq>
 8008ede:	0003      	movs	r3, r0
 8008ee0:	617b      	str	r3, [r7, #20]
        break;
 8008ee2:	e1c9      	b.n	8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	2380      	movs	r3, #128	; 0x80
 8008ee8:	00db      	lsls	r3, r3, #3
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d104      	bne.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8008eee:	f7ff fc3b 	bl	8008768 <HAL_RCC_GetSysClockFreq>
 8008ef2:	0003      	movs	r3, r0
 8008ef4:	617b      	str	r3, [r7, #20]
        break;
 8008ef6:	e1bf      	b.n	8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008ef8:	4b1b      	ldr	r3, [pc, #108]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	2380      	movs	r3, #128	; 0x80
 8008efe:	00db      	lsls	r3, r3, #3
 8008f00:	401a      	ands	r2, r3
 8008f02:	2380      	movs	r3, #128	; 0x80
 8008f04:	00db      	lsls	r3, r3, #3
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d107      	bne.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	2380      	movs	r3, #128	; 0x80
 8008f0e:	011b      	lsls	r3, r3, #4
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d102      	bne.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 8008f14:	4b16      	ldr	r3, [pc, #88]	; (8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008f16:	617b      	str	r3, [r7, #20]
        break;
 8008f18:	e1ae      	b.n	8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008f1a:	4b13      	ldr	r3, [pc, #76]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f1e:	2202      	movs	r2, #2
 8008f20:	4013      	ands	r3, r2
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d000      	beq.n	8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8008f26:	e1a7      	b.n	8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8008f28:	68fa      	ldr	r2, [r7, #12]
 8008f2a:	23c0      	movs	r3, #192	; 0xc0
 8008f2c:	011b      	lsls	r3, r3, #4
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d000      	beq.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008f32:	e1a1      	b.n	8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 8008f34:	2380      	movs	r3, #128	; 0x80
 8008f36:	021b      	lsls	r3, r3, #8
 8008f38:	617b      	str	r3, [r7, #20]
        break;
 8008f3a:	e19d      	b.n	8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008f3c:	4b0a      	ldr	r3, [pc, #40]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f40:	0f9b      	lsrs	r3, r3, #30
 8008f42:	079b      	lsls	r3, r3, #30
 8008f44:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d104      	bne.n	8008f56 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008f4c:	f7ff fc0c 	bl	8008768 <HAL_RCC_GetSysClockFreq>
 8008f50:	0003      	movs	r3, r0
 8008f52:	617b      	str	r3, [r7, #20]
        break;
 8008f54:	e192      	b.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	2380      	movs	r3, #128	; 0x80
 8008f5a:	061b      	lsls	r3, r3, #24
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d10d      	bne.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 8008f60:	4b03      	ldr	r3, [pc, #12]	; (8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008f62:	617b      	str	r3, [r7, #20]
        break;
 8008f64:	e18a      	b.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008f66:	46c0      	nop			; (mov r8, r8)
 8008f68:	40021000 	.word	0x40021000
 8008f6c:	0003d090 	.word	0x0003d090
 8008f70:	00f42400 	.word	0x00f42400
 8008f74:	007a1200 	.word	0x007a1200
 8008f78:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	2380      	movs	r3, #128	; 0x80
 8008f80:	05db      	lsls	r3, r3, #23
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d000      	beq.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 8008f86:	e179      	b.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8008f88:	4bc5      	ldr	r3, [pc, #788]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f8a:	68da      	ldr	r2, [r3, #12]
 8008f8c:	2380      	movs	r3, #128	; 0x80
 8008f8e:	025b      	lsls	r3, r3, #9
 8008f90:	4013      	ands	r3, r2
 8008f92:	d100      	bne.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8008f94:	e172      	b.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008f96:	4bc2      	ldr	r3, [pc, #776]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	0a1b      	lsrs	r3, r3, #8
 8008f9c:	227f      	movs	r2, #127	; 0x7f
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	435a      	muls	r2, r3
 8008fa8:	4bbd      	ldr	r3, [pc, #756]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	0c5b      	lsrs	r3, r3, #17
 8008fae:	211f      	movs	r1, #31
 8008fb0:	400b      	ands	r3, r1
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	0019      	movs	r1, r3
 8008fb6:	0010      	movs	r0, r2
 8008fb8:	f7f7 f8a4 	bl	8000104 <__udivsi3>
 8008fbc:	0003      	movs	r3, r0
 8008fbe:	617b      	str	r3, [r7, #20]
        break;
 8008fc0:	e15c      	b.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008fc2:	4bb7      	ldr	r3, [pc, #732]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008fc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008fc6:	23c0      	movs	r3, #192	; 0xc0
 8008fc8:	019b      	lsls	r3, r3, #6
 8008fca:	4013      	ands	r3, r2
 8008fcc:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d104      	bne.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008fd4:	f7ff fc54 	bl	8008880 <HAL_RCC_GetPCLK1Freq>
 8008fd8:	0003      	movs	r3, r0
 8008fda:	617b      	str	r3, [r7, #20]
        break;
 8008fdc:	e150      	b.n	8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8008fde:	68fa      	ldr	r2, [r7, #12]
 8008fe0:	2380      	movs	r3, #128	; 0x80
 8008fe2:	015b      	lsls	r3, r3, #5
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d104      	bne.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 8008fe8:	f7ff fbbe 	bl	8008768 <HAL_RCC_GetSysClockFreq>
 8008fec:	0003      	movs	r3, r0
 8008fee:	617b      	str	r3, [r7, #20]
        break;
 8008ff0:	e146      	b.n	8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008ff2:	4bab      	ldr	r3, [pc, #684]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	2380      	movs	r3, #128	; 0x80
 8008ff8:	00db      	lsls	r3, r3, #3
 8008ffa:	401a      	ands	r2, r3
 8008ffc:	2380      	movs	r3, #128	; 0x80
 8008ffe:	00db      	lsls	r3, r3, #3
 8009000:	429a      	cmp	r2, r3
 8009002:	d000      	beq.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8009004:	e13c      	b.n	8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	2380      	movs	r3, #128	; 0x80
 800900a:	019b      	lsls	r3, r3, #6
 800900c:	429a      	cmp	r2, r3
 800900e:	d000      	beq.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8009010:	e136      	b.n	8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 8009012:	4ba4      	ldr	r3, [pc, #656]	; (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8009014:	617b      	str	r3, [r7, #20]
        break;
 8009016:	e133      	b.n	8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8009018:	4ba1      	ldr	r3, [pc, #644]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800901a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800901c:	23c0      	movs	r3, #192	; 0xc0
 800901e:	021b      	lsls	r3, r3, #8
 8009020:	4013      	ands	r3, r2
 8009022:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	2380      	movs	r3, #128	; 0x80
 8009028:	01db      	lsls	r3, r3, #7
 800902a:	429a      	cmp	r2, r3
 800902c:	d11c      	bne.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 800902e:	4b9c      	ldr	r3, [pc, #624]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009030:	68da      	ldr	r2, [r3, #12]
 8009032:	2380      	movs	r3, #128	; 0x80
 8009034:	025b      	lsls	r3, r3, #9
 8009036:	4013      	ands	r3, r2
 8009038:	d100      	bne.n	800903c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 800903a:	e123      	b.n	8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800903c:	4b98      	ldr	r3, [pc, #608]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	0a1b      	lsrs	r3, r3, #8
 8009042:	227f      	movs	r2, #127	; 0x7f
 8009044:	4013      	ands	r3, r2
 8009046:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	435a      	muls	r2, r3
 800904e:	4b94      	ldr	r3, [pc, #592]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	0c5b      	lsrs	r3, r3, #17
 8009054:	211f      	movs	r1, #31
 8009056:	400b      	ands	r3, r1
 8009058:	3301      	adds	r3, #1
 800905a:	0019      	movs	r1, r3
 800905c:	0010      	movs	r0, r2
 800905e:	f7f7 f851 	bl	8000104 <__udivsi3>
 8009062:	0003      	movs	r3, r0
 8009064:	617b      	str	r3, [r7, #20]
        break;
 8009066:	e10d      	b.n	8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d104      	bne.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 800906e:	f7ff fb7b 	bl	8008768 <HAL_RCC_GetSysClockFreq>
 8009072:	0003      	movs	r3, r0
 8009074:	617b      	str	r3, [r7, #20]
        break;
 8009076:	e105      	b.n	8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8009078:	4b89      	ldr	r3, [pc, #548]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	2380      	movs	r3, #128	; 0x80
 800907e:	00db      	lsls	r3, r3, #3
 8009080:	401a      	ands	r2, r3
 8009082:	2380      	movs	r3, #128	; 0x80
 8009084:	00db      	lsls	r3, r3, #3
 8009086:	429a      	cmp	r2, r3
 8009088:	d107      	bne.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	2380      	movs	r3, #128	; 0x80
 800908e:	021b      	lsls	r3, r3, #8
 8009090:	429a      	cmp	r2, r3
 8009092:	d102      	bne.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 8009094:	4b83      	ldr	r3, [pc, #524]	; (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8009096:	617b      	str	r3, [r7, #20]
        break;
 8009098:	e0f4      	b.n	8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	23c0      	movs	r3, #192	; 0xc0
 800909e:	021b      	lsls	r3, r3, #8
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d000      	beq.n	80090a6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80090a4:	e0ee      	b.n	8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 80090a6:	4b80      	ldr	r3, [pc, #512]	; (80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 80090a8:	617b      	str	r3, [r7, #20]
        break;
 80090aa:	e0eb      	b.n	8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80090ac:	4b7c      	ldr	r3, [pc, #496]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80090ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090b0:	23c0      	movs	r3, #192	; 0xc0
 80090b2:	031b      	lsls	r3, r3, #12
 80090b4:	4013      	ands	r3, r2
 80090b6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d104      	bne.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 80090be:	f7ff fbdf 	bl	8008880 <HAL_RCC_GetPCLK1Freq>
 80090c2:	0003      	movs	r3, r0
 80090c4:	617b      	str	r3, [r7, #20]
        break;
 80090c6:	e0df      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80090c8:	4b75      	ldr	r3, [pc, #468]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80090ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090cc:	2202      	movs	r2, #2
 80090ce:	4013      	ands	r3, r2
 80090d0:	2b02      	cmp	r3, #2
 80090d2:	d108      	bne.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 80090d4:	68fa      	ldr	r2, [r7, #12]
 80090d6:	2380      	movs	r3, #128	; 0x80
 80090d8:	02db      	lsls	r3, r3, #11
 80090da:	429a      	cmp	r2, r3
 80090dc:	d103      	bne.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 80090de:	23fa      	movs	r3, #250	; 0xfa
 80090e0:	01db      	lsls	r3, r3, #7
 80090e2:	617b      	str	r3, [r7, #20]
 80090e4:	e021      	b.n	800912a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80090e6:	4b6e      	ldr	r3, [pc, #440]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	2380      	movs	r3, #128	; 0x80
 80090ec:	00db      	lsls	r3, r3, #3
 80090ee:	401a      	ands	r2, r3
 80090f0:	2380      	movs	r3, #128	; 0x80
 80090f2:	00db      	lsls	r3, r3, #3
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d107      	bne.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	2380      	movs	r3, #128	; 0x80
 80090fc:	031b      	lsls	r3, r3, #12
 80090fe:	429a      	cmp	r2, r3
 8009100:	d102      	bne.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 8009102:	4b68      	ldr	r3, [pc, #416]	; (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8009104:	617b      	str	r3, [r7, #20]
 8009106:	e010      	b.n	800912a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8009108:	4b65      	ldr	r3, [pc, #404]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800910a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800910c:	2202      	movs	r2, #2
 800910e:	4013      	ands	r3, r2
 8009110:	2b02      	cmp	r3, #2
 8009112:	d000      	beq.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009114:	e0b8      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8009116:	68fa      	ldr	r2, [r7, #12]
 8009118:	23c0      	movs	r3, #192	; 0xc0
 800911a:	031b      	lsls	r3, r3, #12
 800911c:	429a      	cmp	r2, r3
 800911e:	d000      	beq.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009120:	e0b2      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 8009122:	2380      	movs	r3, #128	; 0x80
 8009124:	021b      	lsls	r3, r3, #8
 8009126:	617b      	str	r3, [r7, #20]
        break;
 8009128:	e0ae      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800912a:	e0ad      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800912c:	4b5c      	ldr	r3, [pc, #368]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800912e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009130:	23c0      	movs	r3, #192	; 0xc0
 8009132:	039b      	lsls	r3, r3, #14
 8009134:	4013      	ands	r3, r2
 8009136:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d104      	bne.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800913e:	f7ff fb9f 	bl	8008880 <HAL_RCC_GetPCLK1Freq>
 8009142:	0003      	movs	r3, r0
 8009144:	617b      	str	r3, [r7, #20]
        break;
 8009146:	e0a1      	b.n	800928c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8009148:	4b55      	ldr	r3, [pc, #340]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800914a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800914c:	2202      	movs	r2, #2
 800914e:	4013      	ands	r3, r2
 8009150:	2b02      	cmp	r3, #2
 8009152:	d108      	bne.n	8009166 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	2380      	movs	r3, #128	; 0x80
 8009158:	035b      	lsls	r3, r3, #13
 800915a:	429a      	cmp	r2, r3
 800915c:	d103      	bne.n	8009166 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 800915e:	23fa      	movs	r3, #250	; 0xfa
 8009160:	01db      	lsls	r3, r3, #7
 8009162:	617b      	str	r3, [r7, #20]
 8009164:	e021      	b.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8009166:	4b4e      	ldr	r3, [pc, #312]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	2380      	movs	r3, #128	; 0x80
 800916c:	00db      	lsls	r3, r3, #3
 800916e:	401a      	ands	r2, r3
 8009170:	2380      	movs	r3, #128	; 0x80
 8009172:	00db      	lsls	r3, r3, #3
 8009174:	429a      	cmp	r2, r3
 8009176:	d107      	bne.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 8009178:	68fa      	ldr	r2, [r7, #12]
 800917a:	2380      	movs	r3, #128	; 0x80
 800917c:	039b      	lsls	r3, r3, #14
 800917e:	429a      	cmp	r2, r3
 8009180:	d102      	bne.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 8009182:	4b48      	ldr	r3, [pc, #288]	; (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8009184:	617b      	str	r3, [r7, #20]
 8009186:	e010      	b.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8009188:	4b45      	ldr	r3, [pc, #276]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800918a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800918c:	2202      	movs	r2, #2
 800918e:	4013      	ands	r3, r2
 8009190:	2b02      	cmp	r3, #2
 8009192:	d000      	beq.n	8009196 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8009194:	e07a      	b.n	800928c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	23c0      	movs	r3, #192	; 0xc0
 800919a:	039b      	lsls	r3, r3, #14
 800919c:	429a      	cmp	r2, r3
 800919e:	d000      	beq.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 80091a0:	e074      	b.n	800928c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 80091a2:	2380      	movs	r3, #128	; 0x80
 80091a4:	021b      	lsls	r3, r3, #8
 80091a6:	617b      	str	r3, [r7, #20]
        break;
 80091a8:	e070      	b.n	800928c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 80091aa:	e06f      	b.n	800928c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 80091ac:	4b3c      	ldr	r3, [pc, #240]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80091ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091b0:	2380      	movs	r3, #128	; 0x80
 80091b2:	03db      	lsls	r3, r3, #15
 80091b4:	4013      	ands	r3, r2
 80091b6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	2380      	movs	r3, #128	; 0x80
 80091bc:	03db      	lsls	r3, r3, #15
 80091be:	429a      	cmp	r2, r3
 80091c0:	d11b      	bne.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 80091c2:	4b37      	ldr	r3, [pc, #220]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80091c4:	68da      	ldr	r2, [r3, #12]
 80091c6:	2380      	movs	r3, #128	; 0x80
 80091c8:	045b      	lsls	r3, r3, #17
 80091ca:	4013      	ands	r3, r2
 80091cc:	d060      	beq.n	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80091ce:	4b34      	ldr	r3, [pc, #208]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	0a1b      	lsrs	r3, r3, #8
 80091d4:	227f      	movs	r2, #127	; 0x7f
 80091d6:	4013      	ands	r3, r2
 80091d8:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	68ba      	ldr	r2, [r7, #8]
 80091de:	435a      	muls	r2, r3
 80091e0:	4b2f      	ldr	r3, [pc, #188]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	0e5b      	lsrs	r3, r3, #25
 80091e6:	2107      	movs	r1, #7
 80091e8:	400b      	ands	r3, r1
 80091ea:	3301      	adds	r3, #1
 80091ec:	0019      	movs	r1, r3
 80091ee:	0010      	movs	r0, r2
 80091f0:	f7f6 ff88 	bl	8000104 <__udivsi3>
 80091f4:	0003      	movs	r3, r0
 80091f6:	617b      	str	r3, [r7, #20]
        break;
 80091f8:	e04a      	b.n	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d147      	bne.n	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009200:	f7ff fb3e 	bl	8008880 <HAL_RCC_GetPCLK1Freq>
 8009204:	0003      	movs	r3, r0
 8009206:	617b      	str	r3, [r7, #20]
        break;
 8009208:	e042      	b.n	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 800920a:	4b25      	ldr	r3, [pc, #148]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800920c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800920e:	2380      	movs	r3, #128	; 0x80
 8009210:	045b      	lsls	r3, r3, #17
 8009212:	4013      	ands	r3, r2
 8009214:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 8009216:	68fa      	ldr	r2, [r7, #12]
 8009218:	2380      	movs	r3, #128	; 0x80
 800921a:	045b      	lsls	r3, r3, #17
 800921c:	429a      	cmp	r2, r3
 800921e:	d11b      	bne.n	8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8009220:	4b1f      	ldr	r3, [pc, #124]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009222:	68da      	ldr	r2, [r3, #12]
 8009224:	2380      	movs	r3, #128	; 0x80
 8009226:	045b      	lsls	r3, r3, #17
 8009228:	4013      	ands	r3, r2
 800922a:	d033      	beq.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800922c:	4b1c      	ldr	r3, [pc, #112]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	0a1b      	lsrs	r3, r3, #8
 8009232:	227f      	movs	r2, #127	; 0x7f
 8009234:	4013      	ands	r3, r2
 8009236:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	435a      	muls	r2, r3
 800923e:	4b18      	ldr	r3, [pc, #96]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	0e5b      	lsrs	r3, r3, #25
 8009244:	2107      	movs	r1, #7
 8009246:	400b      	ands	r3, r1
 8009248:	3301      	adds	r3, #1
 800924a:	0019      	movs	r1, r3
 800924c:	0010      	movs	r0, r2
 800924e:	f7f6 ff59 	bl	8000104 <__udivsi3>
 8009252:	0003      	movs	r3, r0
 8009254:	617b      	str	r3, [r7, #20]
        break;
 8009256:	e01d      	b.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d11a      	bne.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 800925e:	f7ff fb0f 	bl	8008880 <HAL_RCC_GetPCLK1Freq>
 8009262:	0003      	movs	r3, r0
 8009264:	617b      	str	r3, [r7, #20]
        break;
 8009266:	e015      	b.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 8009268:	46c0      	nop			; (mov r8, r8)
 800926a:	e014      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800926c:	46c0      	nop			; (mov r8, r8)
 800926e:	e012      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009270:	46c0      	nop			; (mov r8, r8)
 8009272:	e010      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009274:	46c0      	nop			; (mov r8, r8)
 8009276:	e00e      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009278:	46c0      	nop			; (mov r8, r8)
 800927a:	e00c      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800927c:	46c0      	nop			; (mov r8, r8)
 800927e:	e00a      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009280:	46c0      	nop			; (mov r8, r8)
 8009282:	e008      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009284:	46c0      	nop			; (mov r8, r8)
 8009286:	e006      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009288:	46c0      	nop			; (mov r8, r8)
 800928a:	e004      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800928c:	46c0      	nop			; (mov r8, r8)
 800928e:	e002      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009290:	46c0      	nop			; (mov r8, r8)
 8009292:	e000      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009294:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 8009296:	697b      	ldr	r3, [r7, #20]
}
 8009298:	0018      	movs	r0, r3
 800929a:	46bd      	mov	sp, r7
 800929c:	b006      	add	sp, #24
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	40021000 	.word	0x40021000
 80092a4:	00f42400 	.word	0x00f42400
 80092a8:	0000bb80 	.word	0x0000bb80

080092ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d101      	bne.n	80092be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	e0a8      	b.n	8009410 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d109      	bne.n	80092da <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	685a      	ldr	r2, [r3, #4]
 80092ca:	2382      	movs	r3, #130	; 0x82
 80092cc:	005b      	lsls	r3, r3, #1
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d009      	beq.n	80092e6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	61da      	str	r2, [r3, #28]
 80092d8:	e005      	b.n	80092e6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	225d      	movs	r2, #93	; 0x5d
 80092f0:	5c9b      	ldrb	r3, [r3, r2]
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d107      	bne.n	8009308 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	225c      	movs	r2, #92	; 0x5c
 80092fc:	2100      	movs	r1, #0
 80092fe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	0018      	movs	r0, r3
 8009304:	f7fb fd56 	bl	8004db4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	225d      	movs	r2, #93	; 0x5d
 800930c:	2102      	movs	r1, #2
 800930e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2140      	movs	r1, #64	; 0x40
 800931c:	438a      	bics	r2, r1
 800931e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	68da      	ldr	r2, [r3, #12]
 8009324:	23e0      	movs	r3, #224	; 0xe0
 8009326:	00db      	lsls	r3, r3, #3
 8009328:	429a      	cmp	r2, r3
 800932a:	d902      	bls.n	8009332 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800932c:	2300      	movs	r3, #0
 800932e:	60fb      	str	r3, [r7, #12]
 8009330:	e002      	b.n	8009338 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009332:	2380      	movs	r3, #128	; 0x80
 8009334:	015b      	lsls	r3, r3, #5
 8009336:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	68da      	ldr	r2, [r3, #12]
 800933c:	23f0      	movs	r3, #240	; 0xf0
 800933e:	011b      	lsls	r3, r3, #4
 8009340:	429a      	cmp	r2, r3
 8009342:	d008      	beq.n	8009356 <HAL_SPI_Init+0xaa>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	68da      	ldr	r2, [r3, #12]
 8009348:	23e0      	movs	r3, #224	; 0xe0
 800934a:	00db      	lsls	r3, r3, #3
 800934c:	429a      	cmp	r2, r3
 800934e:	d002      	beq.n	8009356 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	685a      	ldr	r2, [r3, #4]
 800935a:	2382      	movs	r3, #130	; 0x82
 800935c:	005b      	lsls	r3, r3, #1
 800935e:	401a      	ands	r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6899      	ldr	r1, [r3, #8]
 8009364:	2384      	movs	r3, #132	; 0x84
 8009366:	021b      	lsls	r3, r3, #8
 8009368:	400b      	ands	r3, r1
 800936a:	431a      	orrs	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	2102      	movs	r1, #2
 8009372:	400b      	ands	r3, r1
 8009374:	431a      	orrs	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	695b      	ldr	r3, [r3, #20]
 800937a:	2101      	movs	r1, #1
 800937c:	400b      	ands	r3, r1
 800937e:	431a      	orrs	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6999      	ldr	r1, [r3, #24]
 8009384:	2380      	movs	r3, #128	; 0x80
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	400b      	ands	r3, r1
 800938a:	431a      	orrs	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	69db      	ldr	r3, [r3, #28]
 8009390:	2138      	movs	r1, #56	; 0x38
 8009392:	400b      	ands	r3, r1
 8009394:	431a      	orrs	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6a1b      	ldr	r3, [r3, #32]
 800939a:	2180      	movs	r1, #128	; 0x80
 800939c:	400b      	ands	r3, r1
 800939e:	431a      	orrs	r2, r3
 80093a0:	0011      	movs	r1, r2
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093a6:	2380      	movs	r3, #128	; 0x80
 80093a8:	019b      	lsls	r3, r3, #6
 80093aa:	401a      	ands	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	430a      	orrs	r2, r1
 80093b2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	0c1b      	lsrs	r3, r3, #16
 80093ba:	2204      	movs	r2, #4
 80093bc:	401a      	ands	r2, r3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c2:	2110      	movs	r1, #16
 80093c4:	400b      	ands	r3, r1
 80093c6:	431a      	orrs	r2, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093cc:	2108      	movs	r1, #8
 80093ce:	400b      	ands	r3, r1
 80093d0:	431a      	orrs	r2, r3
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	68d9      	ldr	r1, [r3, #12]
 80093d6:	23f0      	movs	r3, #240	; 0xf0
 80093d8:	011b      	lsls	r3, r3, #4
 80093da:	400b      	ands	r3, r1
 80093dc:	431a      	orrs	r2, r3
 80093de:	0011      	movs	r1, r2
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	2380      	movs	r3, #128	; 0x80
 80093e4:	015b      	lsls	r3, r3, #5
 80093e6:	401a      	ands	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	430a      	orrs	r2, r1
 80093ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	69da      	ldr	r2, [r3, #28]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4907      	ldr	r1, [pc, #28]	; (8009418 <HAL_SPI_Init+0x16c>)
 80093fc:	400a      	ands	r2, r1
 80093fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	225d      	movs	r2, #93	; 0x5d
 800940a:	2101      	movs	r1, #1
 800940c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	0018      	movs	r0, r3
 8009412:	46bd      	mov	sp, r7
 8009414:	b004      	add	sp, #16
 8009416:	bd80      	pop	{r7, pc}
 8009418:	fffff7ff 	.word	0xfffff7ff

0800941c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b088      	sub	sp, #32
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	603b      	str	r3, [r7, #0]
 8009428:	1dbb      	adds	r3, r7, #6
 800942a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800942c:	231f      	movs	r3, #31
 800942e:	18fb      	adds	r3, r7, r3
 8009430:	2200      	movs	r2, #0
 8009432:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	225c      	movs	r2, #92	; 0x5c
 8009438:	5c9b      	ldrb	r3, [r3, r2]
 800943a:	2b01      	cmp	r3, #1
 800943c:	d101      	bne.n	8009442 <HAL_SPI_Transmit+0x26>
 800943e:	2302      	movs	r3, #2
 8009440:	e140      	b.n	80096c4 <HAL_SPI_Transmit+0x2a8>
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	225c      	movs	r2, #92	; 0x5c
 8009446:	2101      	movs	r1, #1
 8009448:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800944a:	f7fc f867 	bl	800551c <HAL_GetTick>
 800944e:	0003      	movs	r3, r0
 8009450:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009452:	2316      	movs	r3, #22
 8009454:	18fb      	adds	r3, r7, r3
 8009456:	1dba      	adds	r2, r7, #6
 8009458:	8812      	ldrh	r2, [r2, #0]
 800945a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	225d      	movs	r2, #93	; 0x5d
 8009460:	5c9b      	ldrb	r3, [r3, r2]
 8009462:	b2db      	uxtb	r3, r3
 8009464:	2b01      	cmp	r3, #1
 8009466:	d004      	beq.n	8009472 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8009468:	231f      	movs	r3, #31
 800946a:	18fb      	adds	r3, r7, r3
 800946c:	2202      	movs	r2, #2
 800946e:	701a      	strb	r2, [r3, #0]
    goto error;
 8009470:	e11d      	b.n	80096ae <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d003      	beq.n	8009480 <HAL_SPI_Transmit+0x64>
 8009478:	1dbb      	adds	r3, r7, #6
 800947a:	881b      	ldrh	r3, [r3, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d104      	bne.n	800948a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8009480:	231f      	movs	r3, #31
 8009482:	18fb      	adds	r3, r7, r3
 8009484:	2201      	movs	r2, #1
 8009486:	701a      	strb	r2, [r3, #0]
    goto error;
 8009488:	e111      	b.n	80096ae <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	225d      	movs	r2, #93	; 0x5d
 800948e:	2103      	movs	r1, #3
 8009490:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2200      	movs	r2, #0
 8009496:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	68ba      	ldr	r2, [r7, #8]
 800949c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	1dba      	adds	r2, r7, #6
 80094a2:	8812      	ldrh	r2, [r2, #0]
 80094a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	1dba      	adds	r2, r7, #6
 80094aa:	8812      	ldrh	r2, [r2, #0]
 80094ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2200      	movs	r2, #0
 80094b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2244      	movs	r2, #68	; 0x44
 80094b8:	2100      	movs	r1, #0
 80094ba:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2246      	movs	r2, #70	; 0x46
 80094c0:	2100      	movs	r1, #0
 80094c2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2200      	movs	r2, #0
 80094c8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2200      	movs	r2, #0
 80094ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	689a      	ldr	r2, [r3, #8]
 80094d4:	2380      	movs	r3, #128	; 0x80
 80094d6:	021b      	lsls	r3, r3, #8
 80094d8:	429a      	cmp	r2, r3
 80094da:	d110      	bne.n	80094fe <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2140      	movs	r1, #64	; 0x40
 80094e8:	438a      	bics	r2, r1
 80094ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2180      	movs	r1, #128	; 0x80
 80094f8:	01c9      	lsls	r1, r1, #7
 80094fa:	430a      	orrs	r2, r1
 80094fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2240      	movs	r2, #64	; 0x40
 8009506:	4013      	ands	r3, r2
 8009508:	2b40      	cmp	r3, #64	; 0x40
 800950a:	d007      	beq.n	800951c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2140      	movs	r1, #64	; 0x40
 8009518:	430a      	orrs	r2, r1
 800951a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	68da      	ldr	r2, [r3, #12]
 8009520:	23e0      	movs	r3, #224	; 0xe0
 8009522:	00db      	lsls	r3, r3, #3
 8009524:	429a      	cmp	r2, r3
 8009526:	d94e      	bls.n	80095c6 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d004      	beq.n	800953a <HAL_SPI_Transmit+0x11e>
 8009530:	2316      	movs	r3, #22
 8009532:	18fb      	adds	r3, r7, r3
 8009534:	881b      	ldrh	r3, [r3, #0]
 8009536:	2b01      	cmp	r3, #1
 8009538:	d13f      	bne.n	80095ba <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953e:	881a      	ldrh	r2, [r3, #0]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800954a:	1c9a      	adds	r2, r3, #2
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009554:	b29b      	uxth	r3, r3
 8009556:	3b01      	subs	r3, #1
 8009558:	b29a      	uxth	r2, r3
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800955e:	e02c      	b.n	80095ba <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	2202      	movs	r2, #2
 8009568:	4013      	ands	r3, r2
 800956a:	2b02      	cmp	r3, #2
 800956c:	d112      	bne.n	8009594 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009572:	881a      	ldrh	r2, [r3, #0]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800957e:	1c9a      	adds	r2, r3, #2
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009588:	b29b      	uxth	r3, r3
 800958a:	3b01      	subs	r3, #1
 800958c:	b29a      	uxth	r2, r3
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009592:	e012      	b.n	80095ba <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009594:	f7fb ffc2 	bl	800551c <HAL_GetTick>
 8009598:	0002      	movs	r2, r0
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	683a      	ldr	r2, [r7, #0]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d802      	bhi.n	80095aa <HAL_SPI_Transmit+0x18e>
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	3301      	adds	r3, #1
 80095a8:	d102      	bne.n	80095b0 <HAL_SPI_Transmit+0x194>
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d104      	bne.n	80095ba <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80095b0:	231f      	movs	r3, #31
 80095b2:	18fb      	adds	r3, r7, r3
 80095b4:	2203      	movs	r2, #3
 80095b6:	701a      	strb	r2, [r3, #0]
          goto error;
 80095b8:	e079      	b.n	80096ae <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095be:	b29b      	uxth	r3, r3
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d1cd      	bne.n	8009560 <HAL_SPI_Transmit+0x144>
 80095c4:	e04f      	b.n	8009666 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d004      	beq.n	80095d8 <HAL_SPI_Transmit+0x1bc>
 80095ce:	2316      	movs	r3, #22
 80095d0:	18fb      	adds	r3, r7, r3
 80095d2:	881b      	ldrh	r3, [r3, #0]
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d141      	bne.n	800965c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	330c      	adds	r3, #12
 80095e2:	7812      	ldrb	r2, [r2, #0]
 80095e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ea:	1c5a      	adds	r2, r3, #1
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	3b01      	subs	r3, #1
 80095f8:	b29a      	uxth	r2, r3
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80095fe:	e02d      	b.n	800965c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	2202      	movs	r2, #2
 8009608:	4013      	ands	r3, r2
 800960a:	2b02      	cmp	r3, #2
 800960c:	d113      	bne.n	8009636 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	330c      	adds	r3, #12
 8009618:	7812      	ldrb	r2, [r2, #0]
 800961a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009620:	1c5a      	adds	r2, r3, #1
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800962a:	b29b      	uxth	r3, r3
 800962c:	3b01      	subs	r3, #1
 800962e:	b29a      	uxth	r2, r3
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009634:	e012      	b.n	800965c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009636:	f7fb ff71 	bl	800551c <HAL_GetTick>
 800963a:	0002      	movs	r2, r0
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	1ad3      	subs	r3, r2, r3
 8009640:	683a      	ldr	r2, [r7, #0]
 8009642:	429a      	cmp	r2, r3
 8009644:	d802      	bhi.n	800964c <HAL_SPI_Transmit+0x230>
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	3301      	adds	r3, #1
 800964a:	d102      	bne.n	8009652 <HAL_SPI_Transmit+0x236>
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d104      	bne.n	800965c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8009652:	231f      	movs	r3, #31
 8009654:	18fb      	adds	r3, r7, r3
 8009656:	2203      	movs	r2, #3
 8009658:	701a      	strb	r2, [r3, #0]
          goto error;
 800965a:	e028      	b.n	80096ae <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009660:	b29b      	uxth	r3, r3
 8009662:	2b00      	cmp	r3, #0
 8009664:	d1cc      	bne.n	8009600 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009666:	69ba      	ldr	r2, [r7, #24]
 8009668:	6839      	ldr	r1, [r7, #0]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	0018      	movs	r0, r3
 800966e:	f000 fdf5 	bl	800a25c <SPI_EndRxTxTransaction>
 8009672:	1e03      	subs	r3, r0, #0
 8009674:	d002      	beq.n	800967c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2220      	movs	r2, #32
 800967a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10a      	bne.n	800969a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009684:	2300      	movs	r3, #0
 8009686:	613b      	str	r3, [r7, #16]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	613b      	str	r3, [r7, #16]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	613b      	str	r3, [r7, #16]
 8009698:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d004      	beq.n	80096ac <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80096a2:	231f      	movs	r3, #31
 80096a4:	18fb      	adds	r3, r7, r3
 80096a6:	2201      	movs	r2, #1
 80096a8:	701a      	strb	r2, [r3, #0]
 80096aa:	e000      	b.n	80096ae <HAL_SPI_Transmit+0x292>
  }

error:
 80096ac:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	225d      	movs	r2, #93	; 0x5d
 80096b2:	2101      	movs	r1, #1
 80096b4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	225c      	movs	r2, #92	; 0x5c
 80096ba:	2100      	movs	r1, #0
 80096bc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80096be:	231f      	movs	r3, #31
 80096c0:	18fb      	adds	r3, r7, r3
 80096c2:	781b      	ldrb	r3, [r3, #0]
}
 80096c4:	0018      	movs	r0, r3
 80096c6:	46bd      	mov	sp, r7
 80096c8:	b008      	add	sp, #32
 80096ca:	bd80      	pop	{r7, pc}

080096cc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096cc:	b590      	push	{r4, r7, lr}
 80096ce:	b089      	sub	sp, #36	; 0x24
 80096d0:	af02      	add	r7, sp, #8
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	60b9      	str	r1, [r7, #8]
 80096d6:	603b      	str	r3, [r7, #0]
 80096d8:	1dbb      	adds	r3, r7, #6
 80096da:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80096dc:	2317      	movs	r3, #23
 80096de:	18fb      	adds	r3, r7, r3
 80096e0:	2200      	movs	r2, #0
 80096e2:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	685a      	ldr	r2, [r3, #4]
 80096e8:	2382      	movs	r3, #130	; 0x82
 80096ea:	005b      	lsls	r3, r3, #1
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d113      	bne.n	8009718 <HAL_SPI_Receive+0x4c>
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d10f      	bne.n	8009718 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	225d      	movs	r2, #93	; 0x5d
 80096fc:	2104      	movs	r1, #4
 80096fe:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009700:	1dbb      	adds	r3, r7, #6
 8009702:	881c      	ldrh	r4, [r3, #0]
 8009704:	68ba      	ldr	r2, [r7, #8]
 8009706:	68b9      	ldr	r1, [r7, #8]
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	9300      	str	r3, [sp, #0]
 800970e:	0023      	movs	r3, r4
 8009710:	f000 f928 	bl	8009964 <HAL_SPI_TransmitReceive>
 8009714:	0003      	movs	r3, r0
 8009716:	e11c      	b.n	8009952 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	225c      	movs	r2, #92	; 0x5c
 800971c:	5c9b      	ldrb	r3, [r3, r2]
 800971e:	2b01      	cmp	r3, #1
 8009720:	d101      	bne.n	8009726 <HAL_SPI_Receive+0x5a>
 8009722:	2302      	movs	r3, #2
 8009724:	e115      	b.n	8009952 <HAL_SPI_Receive+0x286>
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	225c      	movs	r2, #92	; 0x5c
 800972a:	2101      	movs	r1, #1
 800972c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800972e:	f7fb fef5 	bl	800551c <HAL_GetTick>
 8009732:	0003      	movs	r3, r0
 8009734:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	225d      	movs	r2, #93	; 0x5d
 800973a:	5c9b      	ldrb	r3, [r3, r2]
 800973c:	b2db      	uxtb	r3, r3
 800973e:	2b01      	cmp	r3, #1
 8009740:	d004      	beq.n	800974c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8009742:	2317      	movs	r3, #23
 8009744:	18fb      	adds	r3, r7, r3
 8009746:	2202      	movs	r2, #2
 8009748:	701a      	strb	r2, [r3, #0]
    goto error;
 800974a:	e0f7      	b.n	800993c <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d003      	beq.n	800975a <HAL_SPI_Receive+0x8e>
 8009752:	1dbb      	adds	r3, r7, #6
 8009754:	881b      	ldrh	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d104      	bne.n	8009764 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800975a:	2317      	movs	r3, #23
 800975c:	18fb      	adds	r3, r7, r3
 800975e:	2201      	movs	r2, #1
 8009760:	701a      	strb	r2, [r3, #0]
    goto error;
 8009762:	e0eb      	b.n	800993c <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	225d      	movs	r2, #93	; 0x5d
 8009768:	2104      	movs	r1, #4
 800976a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2200      	movs	r2, #0
 8009770:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	68ba      	ldr	r2, [r7, #8]
 8009776:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	1dba      	adds	r2, r7, #6
 800977c:	2144      	movs	r1, #68	; 0x44
 800977e:	8812      	ldrh	r2, [r2, #0]
 8009780:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	1dba      	adds	r2, r7, #6
 8009786:	2146      	movs	r1, #70	; 0x46
 8009788:	8812      	ldrh	r2, [r2, #0]
 800978a:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2200      	movs	r2, #0
 8009790:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2200      	movs	r2, #0
 8009796:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2200      	movs	r2, #0
 800979c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2200      	movs	r2, #0
 80097a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	68da      	ldr	r2, [r3, #12]
 80097ae:	23e0      	movs	r3, #224	; 0xe0
 80097b0:	00db      	lsls	r3, r3, #3
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d908      	bls.n	80097c8 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	685a      	ldr	r2, [r3, #4]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4966      	ldr	r1, [pc, #408]	; (800995c <HAL_SPI_Receive+0x290>)
 80097c2:	400a      	ands	r2, r1
 80097c4:	605a      	str	r2, [r3, #4]
 80097c6:	e008      	b.n	80097da <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	685a      	ldr	r2, [r3, #4]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2180      	movs	r1, #128	; 0x80
 80097d4:	0149      	lsls	r1, r1, #5
 80097d6:	430a      	orrs	r2, r1
 80097d8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	689a      	ldr	r2, [r3, #8]
 80097de:	2380      	movs	r3, #128	; 0x80
 80097e0:	021b      	lsls	r3, r3, #8
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d10f      	bne.n	8009806 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2140      	movs	r1, #64	; 0x40
 80097f2:	438a      	bics	r2, r1
 80097f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4957      	ldr	r1, [pc, #348]	; (8009960 <HAL_SPI_Receive+0x294>)
 8009802:	400a      	ands	r2, r1
 8009804:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2240      	movs	r2, #64	; 0x40
 800980e:	4013      	ands	r3, r2
 8009810:	2b40      	cmp	r3, #64	; 0x40
 8009812:	d007      	beq.n	8009824 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2140      	movs	r1, #64	; 0x40
 8009820:	430a      	orrs	r2, r1
 8009822:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	68da      	ldr	r2, [r3, #12]
 8009828:	23e0      	movs	r3, #224	; 0xe0
 800982a:	00db      	lsls	r3, r3, #3
 800982c:	429a      	cmp	r2, r3
 800982e:	d900      	bls.n	8009832 <HAL_SPI_Receive+0x166>
 8009830:	e069      	b.n	8009906 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009832:	e031      	b.n	8009898 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	2201      	movs	r2, #1
 800983c:	4013      	ands	r3, r2
 800983e:	2b01      	cmp	r3, #1
 8009840:	d117      	bne.n	8009872 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	330c      	adds	r3, #12
 8009848:	001a      	movs	r2, r3
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800984e:	7812      	ldrb	r2, [r2, #0]
 8009850:	b2d2      	uxtb	r2, r2
 8009852:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009858:	1c5a      	adds	r2, r3, #1
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2246      	movs	r2, #70	; 0x46
 8009862:	5a9b      	ldrh	r3, [r3, r2]
 8009864:	b29b      	uxth	r3, r3
 8009866:	3b01      	subs	r3, #1
 8009868:	b299      	uxth	r1, r3
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2246      	movs	r2, #70	; 0x46
 800986e:	5299      	strh	r1, [r3, r2]
 8009870:	e012      	b.n	8009898 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009872:	f7fb fe53 	bl	800551c <HAL_GetTick>
 8009876:	0002      	movs	r2, r0
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	1ad3      	subs	r3, r2, r3
 800987c:	683a      	ldr	r2, [r7, #0]
 800987e:	429a      	cmp	r2, r3
 8009880:	d802      	bhi.n	8009888 <HAL_SPI_Receive+0x1bc>
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	3301      	adds	r3, #1
 8009886:	d102      	bne.n	800988e <HAL_SPI_Receive+0x1c2>
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d104      	bne.n	8009898 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800988e:	2317      	movs	r3, #23
 8009890:	18fb      	adds	r3, r7, r3
 8009892:	2203      	movs	r2, #3
 8009894:	701a      	strb	r2, [r3, #0]
          goto error;
 8009896:	e051      	b.n	800993c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2246      	movs	r2, #70	; 0x46
 800989c:	5a9b      	ldrh	r3, [r3, r2]
 800989e:	b29b      	uxth	r3, r3
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1c7      	bne.n	8009834 <HAL_SPI_Receive+0x168>
 80098a4:	e035      	b.n	8009912 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	2201      	movs	r2, #1
 80098ae:	4013      	ands	r3, r2
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d115      	bne.n	80098e0 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	68da      	ldr	r2, [r3, #12]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098be:	b292      	uxth	r2, r2
 80098c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c6:	1c9a      	adds	r2, r3, #2
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2246      	movs	r2, #70	; 0x46
 80098d0:	5a9b      	ldrh	r3, [r3, r2]
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	3b01      	subs	r3, #1
 80098d6:	b299      	uxth	r1, r3
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2246      	movs	r2, #70	; 0x46
 80098dc:	5299      	strh	r1, [r3, r2]
 80098de:	e012      	b.n	8009906 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098e0:	f7fb fe1c 	bl	800551c <HAL_GetTick>
 80098e4:	0002      	movs	r2, r0
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	1ad3      	subs	r3, r2, r3
 80098ea:	683a      	ldr	r2, [r7, #0]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d802      	bhi.n	80098f6 <HAL_SPI_Receive+0x22a>
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	3301      	adds	r3, #1
 80098f4:	d102      	bne.n	80098fc <HAL_SPI_Receive+0x230>
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d104      	bne.n	8009906 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80098fc:	2317      	movs	r3, #23
 80098fe:	18fb      	adds	r3, r7, r3
 8009900:	2203      	movs	r2, #3
 8009902:	701a      	strb	r2, [r3, #0]
          goto error;
 8009904:	e01a      	b.n	800993c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2246      	movs	r2, #70	; 0x46
 800990a:	5a9b      	ldrh	r3, [r3, r2]
 800990c:	b29b      	uxth	r3, r3
 800990e:	2b00      	cmp	r3, #0
 8009910:	d1c9      	bne.n	80098a6 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009912:	693a      	ldr	r2, [r7, #16]
 8009914:	6839      	ldr	r1, [r7, #0]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	0018      	movs	r0, r3
 800991a:	f000 fc41 	bl	800a1a0 <SPI_EndRxTransaction>
 800991e:	1e03      	subs	r3, r0, #0
 8009920:	d002      	beq.n	8009928 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2220      	movs	r2, #32
 8009926:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800992c:	2b00      	cmp	r3, #0
 800992e:	d004      	beq.n	800993a <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8009930:	2317      	movs	r3, #23
 8009932:	18fb      	adds	r3, r7, r3
 8009934:	2201      	movs	r2, #1
 8009936:	701a      	strb	r2, [r3, #0]
 8009938:	e000      	b.n	800993c <HAL_SPI_Receive+0x270>
  }

error :
 800993a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	225d      	movs	r2, #93	; 0x5d
 8009940:	2101      	movs	r1, #1
 8009942:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	225c      	movs	r2, #92	; 0x5c
 8009948:	2100      	movs	r1, #0
 800994a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800994c:	2317      	movs	r3, #23
 800994e:	18fb      	adds	r3, r7, r3
 8009950:	781b      	ldrb	r3, [r3, #0]
}
 8009952:	0018      	movs	r0, r3
 8009954:	46bd      	mov	sp, r7
 8009956:	b007      	add	sp, #28
 8009958:	bd90      	pop	{r4, r7, pc}
 800995a:	46c0      	nop			; (mov r8, r8)
 800995c:	ffffefff 	.word	0xffffefff
 8009960:	ffffbfff 	.word	0xffffbfff

08009964 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b08a      	sub	sp, #40	; 0x28
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
 8009970:	001a      	movs	r2, r3
 8009972:	1cbb      	adds	r3, r7, #2
 8009974:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009976:	2301      	movs	r3, #1
 8009978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800997a:	2323      	movs	r3, #35	; 0x23
 800997c:	18fb      	adds	r3, r7, r3
 800997e:	2200      	movs	r2, #0
 8009980:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	225c      	movs	r2, #92	; 0x5c
 8009986:	5c9b      	ldrb	r3, [r3, r2]
 8009988:	2b01      	cmp	r3, #1
 800998a:	d101      	bne.n	8009990 <HAL_SPI_TransmitReceive+0x2c>
 800998c:	2302      	movs	r3, #2
 800998e:	e1b5      	b.n	8009cfc <HAL_SPI_TransmitReceive+0x398>
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	225c      	movs	r2, #92	; 0x5c
 8009994:	2101      	movs	r1, #1
 8009996:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009998:	f7fb fdc0 	bl	800551c <HAL_GetTick>
 800999c:	0003      	movs	r3, r0
 800999e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80099a0:	201b      	movs	r0, #27
 80099a2:	183b      	adds	r3, r7, r0
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	215d      	movs	r1, #93	; 0x5d
 80099a8:	5c52      	ldrb	r2, [r2, r1]
 80099aa:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80099b2:	2312      	movs	r3, #18
 80099b4:	18fb      	adds	r3, r7, r3
 80099b6:	1cba      	adds	r2, r7, #2
 80099b8:	8812      	ldrh	r2, [r2, #0]
 80099ba:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80099bc:	183b      	adds	r3, r7, r0
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d011      	beq.n	80099e8 <HAL_SPI_TransmitReceive+0x84>
 80099c4:	697a      	ldr	r2, [r7, #20]
 80099c6:	2382      	movs	r3, #130	; 0x82
 80099c8:	005b      	lsls	r3, r3, #1
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d107      	bne.n	80099de <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d103      	bne.n	80099de <HAL_SPI_TransmitReceive+0x7a>
 80099d6:	183b      	adds	r3, r7, r0
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	2b04      	cmp	r3, #4
 80099dc:	d004      	beq.n	80099e8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80099de:	2323      	movs	r3, #35	; 0x23
 80099e0:	18fb      	adds	r3, r7, r3
 80099e2:	2202      	movs	r2, #2
 80099e4:	701a      	strb	r2, [r3, #0]
    goto error;
 80099e6:	e17e      	b.n	8009ce6 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d006      	beq.n	80099fc <HAL_SPI_TransmitReceive+0x98>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d003      	beq.n	80099fc <HAL_SPI_TransmitReceive+0x98>
 80099f4:	1cbb      	adds	r3, r7, #2
 80099f6:	881b      	ldrh	r3, [r3, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d104      	bne.n	8009a06 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80099fc:	2323      	movs	r3, #35	; 0x23
 80099fe:	18fb      	adds	r3, r7, r3
 8009a00:	2201      	movs	r2, #1
 8009a02:	701a      	strb	r2, [r3, #0]
    goto error;
 8009a04:	e16f      	b.n	8009ce6 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	225d      	movs	r2, #93	; 0x5d
 8009a0a:	5c9b      	ldrb	r3, [r3, r2]
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	2b04      	cmp	r3, #4
 8009a10:	d003      	beq.n	8009a1a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	225d      	movs	r2, #93	; 0x5d
 8009a16:	2105      	movs	r1, #5
 8009a18:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	1cba      	adds	r2, r7, #2
 8009a2a:	2146      	movs	r1, #70	; 0x46
 8009a2c:	8812      	ldrh	r2, [r2, #0]
 8009a2e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	1cba      	adds	r2, r7, #2
 8009a34:	2144      	movs	r1, #68	; 0x44
 8009a36:	8812      	ldrh	r2, [r2, #0]
 8009a38:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	68ba      	ldr	r2, [r7, #8]
 8009a3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	1cba      	adds	r2, r7, #2
 8009a44:	8812      	ldrh	r2, [r2, #0]
 8009a46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	1cba      	adds	r2, r7, #2
 8009a4c:	8812      	ldrh	r2, [r2, #0]
 8009a4e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2200      	movs	r2, #0
 8009a54:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	68da      	ldr	r2, [r3, #12]
 8009a60:	23e0      	movs	r3, #224	; 0xe0
 8009a62:	00db      	lsls	r3, r3, #3
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d908      	bls.n	8009a7a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	685a      	ldr	r2, [r3, #4]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	49a4      	ldr	r1, [pc, #656]	; (8009d04 <HAL_SPI_TransmitReceive+0x3a0>)
 8009a74:	400a      	ands	r2, r1
 8009a76:	605a      	str	r2, [r3, #4]
 8009a78:	e008      	b.n	8009a8c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	685a      	ldr	r2, [r3, #4]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2180      	movs	r1, #128	; 0x80
 8009a86:	0149      	lsls	r1, r1, #5
 8009a88:	430a      	orrs	r2, r1
 8009a8a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2240      	movs	r2, #64	; 0x40
 8009a94:	4013      	ands	r3, r2
 8009a96:	2b40      	cmp	r3, #64	; 0x40
 8009a98:	d007      	beq.n	8009aaa <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2140      	movs	r1, #64	; 0x40
 8009aa6:	430a      	orrs	r2, r1
 8009aa8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	68da      	ldr	r2, [r3, #12]
 8009aae:	23e0      	movs	r3, #224	; 0xe0
 8009ab0:	00db      	lsls	r3, r3, #3
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d800      	bhi.n	8009ab8 <HAL_SPI_TransmitReceive+0x154>
 8009ab6:	e07f      	b.n	8009bb8 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d005      	beq.n	8009acc <HAL_SPI_TransmitReceive+0x168>
 8009ac0:	2312      	movs	r3, #18
 8009ac2:	18fb      	adds	r3, r7, r3
 8009ac4:	881b      	ldrh	r3, [r3, #0]
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d000      	beq.n	8009acc <HAL_SPI_TransmitReceive+0x168>
 8009aca:	e069      	b.n	8009ba0 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad0:	881a      	ldrh	r2, [r3, #0]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009adc:	1c9a      	adds	r2, r3, #2
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009af0:	e056      	b.n	8009ba0 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	2202      	movs	r2, #2
 8009afa:	4013      	ands	r3, r2
 8009afc:	2b02      	cmp	r3, #2
 8009afe:	d11b      	bne.n	8009b38 <HAL_SPI_TransmitReceive+0x1d4>
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d016      	beq.n	8009b38 <HAL_SPI_TransmitReceive+0x1d4>
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d113      	bne.n	8009b38 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b14:	881a      	ldrh	r2, [r3, #0]
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b20:	1c9a      	adds	r2, r3, #2
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	3b01      	subs	r3, #1
 8009b2e:	b29a      	uxth	r2, r3
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b34:	2300      	movs	r3, #0
 8009b36:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	4013      	ands	r3, r2
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d11c      	bne.n	8009b80 <HAL_SPI_TransmitReceive+0x21c>
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2246      	movs	r2, #70	; 0x46
 8009b4a:	5a9b      	ldrh	r3, [r3, r2]
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d016      	beq.n	8009b80 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68da      	ldr	r2, [r3, #12]
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b5c:	b292      	uxth	r2, r2
 8009b5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b64:	1c9a      	adds	r2, r3, #2
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2246      	movs	r2, #70	; 0x46
 8009b6e:	5a9b      	ldrh	r3, [r3, r2]
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	3b01      	subs	r3, #1
 8009b74:	b299      	uxth	r1, r3
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2246      	movs	r2, #70	; 0x46
 8009b7a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009b80:	f7fb fccc 	bl	800551c <HAL_GetTick>
 8009b84:	0002      	movs	r2, r0
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d807      	bhi.n	8009ba0 <HAL_SPI_TransmitReceive+0x23c>
 8009b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b92:	3301      	adds	r3, #1
 8009b94:	d004      	beq.n	8009ba0 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8009b96:	2323      	movs	r3, #35	; 0x23
 8009b98:	18fb      	adds	r3, r7, r3
 8009b9a:	2203      	movs	r2, #3
 8009b9c:	701a      	strb	r2, [r3, #0]
        goto error;
 8009b9e:	e0a2      	b.n	8009ce6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1a3      	bne.n	8009af2 <HAL_SPI_TransmitReceive+0x18e>
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2246      	movs	r2, #70	; 0x46
 8009bae:	5a9b      	ldrh	r3, [r3, r2]
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d19d      	bne.n	8009af2 <HAL_SPI_TransmitReceive+0x18e>
 8009bb6:	e085      	b.n	8009cc4 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d005      	beq.n	8009bcc <HAL_SPI_TransmitReceive+0x268>
 8009bc0:	2312      	movs	r3, #18
 8009bc2:	18fb      	adds	r3, r7, r3
 8009bc4:	881b      	ldrh	r3, [r3, #0]
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d000      	beq.n	8009bcc <HAL_SPI_TransmitReceive+0x268>
 8009bca:	e070      	b.n	8009cae <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	330c      	adds	r3, #12
 8009bd6:	7812      	ldrb	r2, [r2, #0]
 8009bd8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bde:	1c5a      	adds	r2, r3, #1
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	3b01      	subs	r3, #1
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009bf2:	e05c      	b.n	8009cae <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	2202      	movs	r2, #2
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	2b02      	cmp	r3, #2
 8009c00:	d11c      	bne.n	8009c3c <HAL_SPI_TransmitReceive+0x2d8>
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d017      	beq.n	8009c3c <HAL_SPI_TransmitReceive+0x2d8>
 8009c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d114      	bne.n	8009c3c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	330c      	adds	r3, #12
 8009c1c:	7812      	ldrb	r2, [r2, #0]
 8009c1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c24:	1c5a      	adds	r2, r3, #1
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	3b01      	subs	r3, #1
 8009c32:	b29a      	uxth	r2, r3
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	2201      	movs	r2, #1
 8009c44:	4013      	ands	r3, r2
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d11e      	bne.n	8009c88 <HAL_SPI_TransmitReceive+0x324>
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2246      	movs	r2, #70	; 0x46
 8009c4e:	5a9b      	ldrh	r3, [r3, r2]
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d018      	beq.n	8009c88 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	330c      	adds	r3, #12
 8009c5c:	001a      	movs	r2, r3
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c62:	7812      	ldrb	r2, [r2, #0]
 8009c64:	b2d2      	uxtb	r2, r2
 8009c66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c6c:	1c5a      	adds	r2, r3, #1
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2246      	movs	r2, #70	; 0x46
 8009c76:	5a9b      	ldrh	r3, [r3, r2]
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	b299      	uxth	r1, r3
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2246      	movs	r2, #70	; 0x46
 8009c82:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009c84:	2301      	movs	r3, #1
 8009c86:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009c88:	f7fb fc48 	bl	800551c <HAL_GetTick>
 8009c8c:	0002      	movs	r2, r0
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d802      	bhi.n	8009c9e <HAL_SPI_TransmitReceive+0x33a>
 8009c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	d102      	bne.n	8009ca4 <HAL_SPI_TransmitReceive+0x340>
 8009c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d104      	bne.n	8009cae <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8009ca4:	2323      	movs	r3, #35	; 0x23
 8009ca6:	18fb      	adds	r3, r7, r3
 8009ca8:	2203      	movs	r2, #3
 8009caa:	701a      	strb	r2, [r3, #0]
        goto error;
 8009cac:	e01b      	b.n	8009ce6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d19d      	bne.n	8009bf4 <HAL_SPI_TransmitReceive+0x290>
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2246      	movs	r2, #70	; 0x46
 8009cbc:	5a9b      	ldrh	r3, [r3, r2]
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d197      	bne.n	8009bf4 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009cc4:	69fa      	ldr	r2, [r7, #28]
 8009cc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	0018      	movs	r0, r3
 8009ccc:	f000 fac6 	bl	800a25c <SPI_EndRxTxTransaction>
 8009cd0:	1e03      	subs	r3, r0, #0
 8009cd2:	d007      	beq.n	8009ce4 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8009cd4:	2323      	movs	r3, #35	; 0x23
 8009cd6:	18fb      	adds	r3, r7, r3
 8009cd8:	2201      	movs	r2, #1
 8009cda:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2220      	movs	r2, #32
 8009ce0:	661a      	str	r2, [r3, #96]	; 0x60
 8009ce2:	e000      	b.n	8009ce6 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8009ce4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	225d      	movs	r2, #93	; 0x5d
 8009cea:	2101      	movs	r1, #1
 8009cec:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	225c      	movs	r2, #92	; 0x5c
 8009cf2:	2100      	movs	r1, #0
 8009cf4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009cf6:	2323      	movs	r3, #35	; 0x23
 8009cf8:	18fb      	adds	r3, r7, r3
 8009cfa:	781b      	ldrb	r3, [r3, #0]
}
 8009cfc:	0018      	movs	r0, r3
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	b00a      	add	sp, #40	; 0x28
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	ffffefff 	.word	0xffffefff

08009d08 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b088      	sub	sp, #32
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	099b      	lsrs	r3, r3, #6
 8009d24:	001a      	movs	r2, r3
 8009d26:	2301      	movs	r3, #1
 8009d28:	4013      	ands	r3, r2
 8009d2a:	d10f      	bne.n	8009d4c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009d2c:	69bb      	ldr	r3, [r7, #24]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009d32:	d00b      	beq.n	8009d4c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	099b      	lsrs	r3, r3, #6
 8009d38:	001a      	movs	r2, r3
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	4013      	ands	r3, r2
 8009d3e:	d005      	beq.n	8009d4c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	0010      	movs	r0, r2
 8009d48:	4798      	blx	r3
    return;
 8009d4a:	e0d5      	b.n	8009ef8 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	085b      	lsrs	r3, r3, #1
 8009d50:	001a      	movs	r2, r3
 8009d52:	2301      	movs	r3, #1
 8009d54:	4013      	ands	r3, r2
 8009d56:	d00b      	beq.n	8009d70 <HAL_SPI_IRQHandler+0x68>
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	09db      	lsrs	r3, r3, #7
 8009d5c:	001a      	movs	r2, r3
 8009d5e:	2301      	movs	r3, #1
 8009d60:	4013      	ands	r3, r2
 8009d62:	d005      	beq.n	8009d70 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	0010      	movs	r0, r2
 8009d6c:	4798      	blx	r3
    return;
 8009d6e:	e0c3      	b.n	8009ef8 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	095b      	lsrs	r3, r3, #5
 8009d74:	001a      	movs	r2, r3
 8009d76:	2301      	movs	r3, #1
 8009d78:	4013      	ands	r3, r2
 8009d7a:	d10c      	bne.n	8009d96 <HAL_SPI_IRQHandler+0x8e>
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	099b      	lsrs	r3, r3, #6
 8009d80:	001a      	movs	r2, r3
 8009d82:	2301      	movs	r3, #1
 8009d84:	4013      	ands	r3, r2
 8009d86:	d106      	bne.n	8009d96 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	0a1b      	lsrs	r3, r3, #8
 8009d8c:	001a      	movs	r2, r3
 8009d8e:	2301      	movs	r3, #1
 8009d90:	4013      	ands	r3, r2
 8009d92:	d100      	bne.n	8009d96 <HAL_SPI_IRQHandler+0x8e>
 8009d94:	e0b0      	b.n	8009ef8 <HAL_SPI_IRQHandler+0x1f0>
 8009d96:	69fb      	ldr	r3, [r7, #28]
 8009d98:	095b      	lsrs	r3, r3, #5
 8009d9a:	001a      	movs	r2, r3
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	4013      	ands	r3, r2
 8009da0:	d100      	bne.n	8009da4 <HAL_SPI_IRQHandler+0x9c>
 8009da2:	e0a9      	b.n	8009ef8 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009da4:	69bb      	ldr	r3, [r7, #24]
 8009da6:	099b      	lsrs	r3, r3, #6
 8009da8:	001a      	movs	r2, r3
 8009daa:	2301      	movs	r3, #1
 8009dac:	4013      	ands	r3, r2
 8009dae:	d023      	beq.n	8009df8 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	225d      	movs	r2, #93	; 0x5d
 8009db4:	5c9b      	ldrb	r3, [r3, r2]
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	2b03      	cmp	r3, #3
 8009dba:	d011      	beq.n	8009de0 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dc0:	2204      	movs	r2, #4
 8009dc2:	431a      	orrs	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009dc8:	2300      	movs	r3, #0
 8009dca:	617b      	str	r3, [r7, #20]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	617b      	str	r3, [r7, #20]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	689b      	ldr	r3, [r3, #8]
 8009dda:	617b      	str	r3, [r7, #20]
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	e00b      	b.n	8009df8 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009de0:	2300      	movs	r3, #0
 8009de2:	613b      	str	r3, [r7, #16]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	613b      	str	r3, [r7, #16]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	613b      	str	r3, [r7, #16]
 8009df4:	693b      	ldr	r3, [r7, #16]
        return;
 8009df6:	e07f      	b.n	8009ef8 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009df8:	69bb      	ldr	r3, [r7, #24]
 8009dfa:	095b      	lsrs	r3, r3, #5
 8009dfc:	001a      	movs	r2, r3
 8009dfe:	2301      	movs	r3, #1
 8009e00:	4013      	ands	r3, r2
 8009e02:	d014      	beq.n	8009e2e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e08:	2201      	movs	r2, #1
 8009e0a:	431a      	orrs	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009e10:	2300      	movs	r3, #0
 8009e12:	60fb      	str	r3, [r7, #12]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	60fb      	str	r3, [r7, #12]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2140      	movs	r1, #64	; 0x40
 8009e28:	438a      	bics	r2, r1
 8009e2a:	601a      	str	r2, [r3, #0]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	0a1b      	lsrs	r3, r3, #8
 8009e32:	001a      	movs	r2, r3
 8009e34:	2301      	movs	r3, #1
 8009e36:	4013      	ands	r3, r2
 8009e38:	d00c      	beq.n	8009e54 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e3e:	2208      	movs	r2, #8
 8009e40:	431a      	orrs	r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009e46:	2300      	movs	r3, #0
 8009e48:	60bb      	str	r3, [r7, #8]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	60bb      	str	r3, [r7, #8]
 8009e52:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d04c      	beq.n	8009ef6 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	685a      	ldr	r2, [r3, #4]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	21e0      	movs	r1, #224	; 0xe0
 8009e68:	438a      	bics	r2, r1
 8009e6a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	225d      	movs	r2, #93	; 0x5d
 8009e70:	2101      	movs	r1, #1
 8009e72:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	2202      	movs	r2, #2
 8009e78:	4013      	ands	r3, r2
 8009e7a:	d103      	bne.n	8009e84 <HAL_SPI_IRQHandler+0x17c>
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	4013      	ands	r3, r2
 8009e82:	d032      	beq.n	8009eea <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	685a      	ldr	r2, [r3, #4]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2103      	movs	r1, #3
 8009e90:	438a      	bics	r2, r1
 8009e92:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d010      	beq.n	8009ebe <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ea0:	4a17      	ldr	r2, [pc, #92]	; (8009f00 <HAL_SPI_IRQHandler+0x1f8>)
 8009ea2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ea8:	0018      	movs	r0, r3
 8009eaa:	f7fb ffc9 	bl	8005e40 <HAL_DMA_Abort_IT>
 8009eae:	1e03      	subs	r3, r0, #0
 8009eb0:	d005      	beq.n	8009ebe <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009eb6:	2240      	movs	r2, #64	; 0x40
 8009eb8:	431a      	orrs	r2, r3
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d016      	beq.n	8009ef4 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eca:	4a0d      	ldr	r2, [pc, #52]	; (8009f00 <HAL_SPI_IRQHandler+0x1f8>)
 8009ecc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ed2:	0018      	movs	r0, r3
 8009ed4:	f7fb ffb4 	bl	8005e40 <HAL_DMA_Abort_IT>
 8009ed8:	1e03      	subs	r3, r0, #0
 8009eda:	d00b      	beq.n	8009ef4 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ee0:	2240      	movs	r2, #64	; 0x40
 8009ee2:	431a      	orrs	r2, r3
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009ee8:	e004      	b.n	8009ef4 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	0018      	movs	r0, r3
 8009eee:	f000 f809 	bl	8009f04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009ef2:	e000      	b.n	8009ef6 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8009ef4:	46c0      	nop			; (mov r8, r8)
    return;
 8009ef6:	46c0      	nop			; (mov r8, r8)
  }
}
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	b008      	add	sp, #32
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	46c0      	nop			; (mov r8, r8)
 8009f00:	08009f15 	.word	0x08009f15

08009f04 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009f0c:	46c0      	nop			; (mov r8, r8)
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	b002      	add	sp, #8
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f20:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2246      	movs	r2, #70	; 0x46
 8009f26:	2100      	movs	r1, #0
 8009f28:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	0018      	movs	r0, r3
 8009f34:	f7ff ffe6 	bl	8009f04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009f38:	46c0      	nop			; (mov r8, r8)
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	b004      	add	sp, #16
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b088      	sub	sp, #32
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	603b      	str	r3, [r7, #0]
 8009f4c:	1dfb      	adds	r3, r7, #7
 8009f4e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009f50:	f7fb fae4 	bl	800551c <HAL_GetTick>
 8009f54:	0002      	movs	r2, r0
 8009f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f58:	1a9b      	subs	r3, r3, r2
 8009f5a:	683a      	ldr	r2, [r7, #0]
 8009f5c:	18d3      	adds	r3, r2, r3
 8009f5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009f60:	f7fb fadc 	bl	800551c <HAL_GetTick>
 8009f64:	0003      	movs	r3, r0
 8009f66:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009f68:	4b3a      	ldr	r3, [pc, #232]	; (800a054 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	015b      	lsls	r3, r3, #5
 8009f6e:	0d1b      	lsrs	r3, r3, #20
 8009f70:	69fa      	ldr	r2, [r7, #28]
 8009f72:	4353      	muls	r3, r2
 8009f74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009f76:	e058      	b.n	800a02a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	d055      	beq.n	800a02a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009f7e:	f7fb facd 	bl	800551c <HAL_GetTick>
 8009f82:	0002      	movs	r2, r0
 8009f84:	69bb      	ldr	r3, [r7, #24]
 8009f86:	1ad3      	subs	r3, r2, r3
 8009f88:	69fa      	ldr	r2, [r7, #28]
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d902      	bls.n	8009f94 <SPI_WaitFlagStateUntilTimeout+0x54>
 8009f8e:	69fb      	ldr	r3, [r7, #28]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d142      	bne.n	800a01a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	685a      	ldr	r2, [r3, #4]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	21e0      	movs	r1, #224	; 0xe0
 8009fa0:	438a      	bics	r2, r1
 8009fa2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	685a      	ldr	r2, [r3, #4]
 8009fa8:	2382      	movs	r3, #130	; 0x82
 8009faa:	005b      	lsls	r3, r3, #1
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d113      	bne.n	8009fd8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	689a      	ldr	r2, [r3, #8]
 8009fb4:	2380      	movs	r3, #128	; 0x80
 8009fb6:	021b      	lsls	r3, r3, #8
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d005      	beq.n	8009fc8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	689a      	ldr	r2, [r3, #8]
 8009fc0:	2380      	movs	r3, #128	; 0x80
 8009fc2:	00db      	lsls	r3, r3, #3
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d107      	bne.n	8009fd8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	2140      	movs	r1, #64	; 0x40
 8009fd4:	438a      	bics	r2, r1
 8009fd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009fdc:	2380      	movs	r3, #128	; 0x80
 8009fde:	019b      	lsls	r3, r3, #6
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d110      	bne.n	800a006 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	491a      	ldr	r1, [pc, #104]	; (800a058 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8009ff0:	400a      	ands	r2, r1
 8009ff2:	601a      	str	r2, [r3, #0]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2180      	movs	r1, #128	; 0x80
 800a000:	0189      	lsls	r1, r1, #6
 800a002:	430a      	orrs	r2, r1
 800a004:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	225d      	movs	r2, #93	; 0x5d
 800a00a:	2101      	movs	r1, #1
 800a00c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	225c      	movs	r2, #92	; 0x5c
 800a012:	2100      	movs	r1, #0
 800a014:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a016:	2303      	movs	r3, #3
 800a018:	e017      	b.n	800a04a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d101      	bne.n	800a024 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800a020:	2300      	movs	r3, #0
 800a022:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	3b01      	subs	r3, #1
 800a028:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	68ba      	ldr	r2, [r7, #8]
 800a032:	4013      	ands	r3, r2
 800a034:	68ba      	ldr	r2, [r7, #8]
 800a036:	1ad3      	subs	r3, r2, r3
 800a038:	425a      	negs	r2, r3
 800a03a:	4153      	adcs	r3, r2
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	001a      	movs	r2, r3
 800a040:	1dfb      	adds	r3, r7, #7
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	429a      	cmp	r2, r3
 800a046:	d197      	bne.n	8009f78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a048:	2300      	movs	r3, #0
}
 800a04a:	0018      	movs	r0, r3
 800a04c:	46bd      	mov	sp, r7
 800a04e:	b008      	add	sp, #32
 800a050:	bd80      	pop	{r7, pc}
 800a052:	46c0      	nop			; (mov r8, r8)
 800a054:	20000064 	.word	0x20000064
 800a058:	ffffdfff 	.word	0xffffdfff

0800a05c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b08a      	sub	sp, #40	; 0x28
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	607a      	str	r2, [r7, #4]
 800a068:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a06a:	2317      	movs	r3, #23
 800a06c:	18fb      	adds	r3, r7, r3
 800a06e:	2200      	movs	r2, #0
 800a070:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a072:	f7fb fa53 	bl	800551c <HAL_GetTick>
 800a076:	0002      	movs	r2, r0
 800a078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07a:	1a9b      	subs	r3, r3, r2
 800a07c:	683a      	ldr	r2, [r7, #0]
 800a07e:	18d3      	adds	r3, r2, r3
 800a080:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800a082:	f7fb fa4b 	bl	800551c <HAL_GetTick>
 800a086:	0003      	movs	r3, r0
 800a088:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	330c      	adds	r3, #12
 800a090:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a092:	4b41      	ldr	r3, [pc, #260]	; (800a198 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	0013      	movs	r3, r2
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	189b      	adds	r3, r3, r2
 800a09c:	00da      	lsls	r2, r3, #3
 800a09e:	1ad3      	subs	r3, r2, r3
 800a0a0:	0d1b      	lsrs	r3, r3, #20
 800a0a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0a4:	4353      	muls	r3, r2
 800a0a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a0a8:	e068      	b.n	800a17c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a0aa:	68ba      	ldr	r2, [r7, #8]
 800a0ac:	23c0      	movs	r3, #192	; 0xc0
 800a0ae:	00db      	lsls	r3, r3, #3
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d10a      	bne.n	800a0ca <SPI_WaitFifoStateUntilTimeout+0x6e>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d107      	bne.n	800a0ca <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	b2da      	uxtb	r2, r3
 800a0c0:	2117      	movs	r1, #23
 800a0c2:	187b      	adds	r3, r7, r1
 800a0c4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a0c6:	187b      	adds	r3, r7, r1
 800a0c8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	d055      	beq.n	800a17c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a0d0:	f7fb fa24 	bl	800551c <HAL_GetTick>
 800a0d4:	0002      	movs	r2, r0
 800a0d6:	6a3b      	ldr	r3, [r7, #32]
 800a0d8:	1ad3      	subs	r3, r2, r3
 800a0da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d902      	bls.n	800a0e6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800a0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d142      	bne.n	800a16c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	685a      	ldr	r2, [r3, #4]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	21e0      	movs	r1, #224	; 0xe0
 800a0f2:	438a      	bics	r2, r1
 800a0f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	685a      	ldr	r2, [r3, #4]
 800a0fa:	2382      	movs	r3, #130	; 0x82
 800a0fc:	005b      	lsls	r3, r3, #1
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d113      	bne.n	800a12a <SPI_WaitFifoStateUntilTimeout+0xce>
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	689a      	ldr	r2, [r3, #8]
 800a106:	2380      	movs	r3, #128	; 0x80
 800a108:	021b      	lsls	r3, r3, #8
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d005      	beq.n	800a11a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	689a      	ldr	r2, [r3, #8]
 800a112:	2380      	movs	r3, #128	; 0x80
 800a114:	00db      	lsls	r3, r3, #3
 800a116:	429a      	cmp	r2, r3
 800a118:	d107      	bne.n	800a12a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	2140      	movs	r1, #64	; 0x40
 800a126:	438a      	bics	r2, r1
 800a128:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a12e:	2380      	movs	r3, #128	; 0x80
 800a130:	019b      	lsls	r3, r3, #6
 800a132:	429a      	cmp	r2, r3
 800a134:	d110      	bne.n	800a158 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4916      	ldr	r1, [pc, #88]	; (800a19c <SPI_WaitFifoStateUntilTimeout+0x140>)
 800a142:	400a      	ands	r2, r1
 800a144:	601a      	str	r2, [r3, #0]
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	2180      	movs	r1, #128	; 0x80
 800a152:	0189      	lsls	r1, r1, #6
 800a154:	430a      	orrs	r2, r1
 800a156:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	225d      	movs	r2, #93	; 0x5d
 800a15c:	2101      	movs	r1, #1
 800a15e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	225c      	movs	r2, #92	; 0x5c
 800a164:	2100      	movs	r1, #0
 800a166:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a168:	2303      	movs	r3, #3
 800a16a:	e010      	b.n	800a18e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d101      	bne.n	800a176 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800a172:	2300      	movs	r3, #0
 800a174:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	3b01      	subs	r3, #1
 800a17a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	68ba      	ldr	r2, [r7, #8]
 800a184:	4013      	ands	r3, r2
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	429a      	cmp	r2, r3
 800a18a:	d18e      	bne.n	800a0aa <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	0018      	movs	r0, r3
 800a190:	46bd      	mov	sp, r7
 800a192:	b00a      	add	sp, #40	; 0x28
 800a194:	bd80      	pop	{r7, pc}
 800a196:	46c0      	nop			; (mov r8, r8)
 800a198:	20000064 	.word	0x20000064
 800a19c:	ffffdfff 	.word	0xffffdfff

0800a1a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b086      	sub	sp, #24
 800a1a4:	af02      	add	r7, sp, #8
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	685a      	ldr	r2, [r3, #4]
 800a1b0:	2382      	movs	r3, #130	; 0x82
 800a1b2:	005b      	lsls	r3, r3, #1
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d113      	bne.n	800a1e0 <SPI_EndRxTransaction+0x40>
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	689a      	ldr	r2, [r3, #8]
 800a1bc:	2380      	movs	r3, #128	; 0x80
 800a1be:	021b      	lsls	r3, r3, #8
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d005      	beq.n	800a1d0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	689a      	ldr	r2, [r3, #8]
 800a1c8:	2380      	movs	r3, #128	; 0x80
 800a1ca:	00db      	lsls	r3, r3, #3
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d107      	bne.n	800a1e0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2140      	movs	r1, #64	; 0x40
 800a1dc:	438a      	bics	r2, r1
 800a1de:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a1e0:	68ba      	ldr	r2, [r7, #8]
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	9300      	str	r3, [sp, #0]
 800a1e8:	0013      	movs	r3, r2
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	2180      	movs	r1, #128	; 0x80
 800a1ee:	f7ff fea7 	bl	8009f40 <SPI_WaitFlagStateUntilTimeout>
 800a1f2:	1e03      	subs	r3, r0, #0
 800a1f4:	d007      	beq.n	800a206 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1fa:	2220      	movs	r2, #32
 800a1fc:	431a      	orrs	r2, r3
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a202:	2303      	movs	r3, #3
 800a204:	e026      	b.n	800a254 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	685a      	ldr	r2, [r3, #4]
 800a20a:	2382      	movs	r3, #130	; 0x82
 800a20c:	005b      	lsls	r3, r3, #1
 800a20e:	429a      	cmp	r2, r3
 800a210:	d11f      	bne.n	800a252 <SPI_EndRxTransaction+0xb2>
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	689a      	ldr	r2, [r3, #8]
 800a216:	2380      	movs	r3, #128	; 0x80
 800a218:	021b      	lsls	r3, r3, #8
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d005      	beq.n	800a22a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	689a      	ldr	r2, [r3, #8]
 800a222:	2380      	movs	r3, #128	; 0x80
 800a224:	00db      	lsls	r3, r3, #3
 800a226:	429a      	cmp	r2, r3
 800a228:	d113      	bne.n	800a252 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a22a:	68ba      	ldr	r2, [r7, #8]
 800a22c:	23c0      	movs	r3, #192	; 0xc0
 800a22e:	00d9      	lsls	r1, r3, #3
 800a230:	68f8      	ldr	r0, [r7, #12]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	9300      	str	r3, [sp, #0]
 800a236:	0013      	movs	r3, r2
 800a238:	2200      	movs	r2, #0
 800a23a:	f7ff ff0f 	bl	800a05c <SPI_WaitFifoStateUntilTimeout>
 800a23e:	1e03      	subs	r3, r0, #0
 800a240:	d007      	beq.n	800a252 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a246:	2220      	movs	r2, #32
 800a248:	431a      	orrs	r2, r3
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a24e:	2303      	movs	r3, #3
 800a250:	e000      	b.n	800a254 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800a252:	2300      	movs	r3, #0
}
 800a254:	0018      	movs	r0, r3
 800a256:	46bd      	mov	sp, r7
 800a258:	b004      	add	sp, #16
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b086      	sub	sp, #24
 800a260:	af02      	add	r7, sp, #8
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a268:	68ba      	ldr	r2, [r7, #8]
 800a26a:	23c0      	movs	r3, #192	; 0xc0
 800a26c:	0159      	lsls	r1, r3, #5
 800a26e:	68f8      	ldr	r0, [r7, #12]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	9300      	str	r3, [sp, #0]
 800a274:	0013      	movs	r3, r2
 800a276:	2200      	movs	r2, #0
 800a278:	f7ff fef0 	bl	800a05c <SPI_WaitFifoStateUntilTimeout>
 800a27c:	1e03      	subs	r3, r0, #0
 800a27e:	d007      	beq.n	800a290 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a284:	2220      	movs	r2, #32
 800a286:	431a      	orrs	r2, r3
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a28c:	2303      	movs	r3, #3
 800a28e:	e027      	b.n	800a2e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a290:	68ba      	ldr	r2, [r7, #8]
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	9300      	str	r3, [sp, #0]
 800a298:	0013      	movs	r3, r2
 800a29a:	2200      	movs	r2, #0
 800a29c:	2180      	movs	r1, #128	; 0x80
 800a29e:	f7ff fe4f 	bl	8009f40 <SPI_WaitFlagStateUntilTimeout>
 800a2a2:	1e03      	subs	r3, r0, #0
 800a2a4:	d007      	beq.n	800a2b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2aa:	2220      	movs	r2, #32
 800a2ac:	431a      	orrs	r2, r3
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a2b2:	2303      	movs	r3, #3
 800a2b4:	e014      	b.n	800a2e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	23c0      	movs	r3, #192	; 0xc0
 800a2ba:	00d9      	lsls	r1, r3, #3
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	9300      	str	r3, [sp, #0]
 800a2c2:	0013      	movs	r3, r2
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f7ff fec9 	bl	800a05c <SPI_WaitFifoStateUntilTimeout>
 800a2ca:	1e03      	subs	r3, r0, #0
 800a2cc:	d007      	beq.n	800a2de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2d2:	2220      	movs	r2, #32
 800a2d4:	431a      	orrs	r2, r3
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a2da:	2303      	movs	r3, #3
 800a2dc:	e000      	b.n	800a2e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	0018      	movs	r0, r3
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	b004      	add	sp, #16
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d101      	bne.n	800a2fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e04a      	b.n	800a390 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	223d      	movs	r2, #61	; 0x3d
 800a2fe:	5c9b      	ldrb	r3, [r3, r2]
 800a300:	b2db      	uxtb	r3, r3
 800a302:	2b00      	cmp	r3, #0
 800a304:	d107      	bne.n	800a316 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	223c      	movs	r2, #60	; 0x3c
 800a30a:	2100      	movs	r1, #0
 800a30c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	0018      	movs	r0, r3
 800a312:	f7fa fe15 	bl	8004f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	223d      	movs	r2, #61	; 0x3d
 800a31a:	2102      	movs	r1, #2
 800a31c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	3304      	adds	r3, #4
 800a326:	0019      	movs	r1, r3
 800a328:	0010      	movs	r0, r2
 800a32a:	f000 fb55 	bl	800a9d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2248      	movs	r2, #72	; 0x48
 800a332:	2101      	movs	r1, #1
 800a334:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	223e      	movs	r2, #62	; 0x3e
 800a33a:	2101      	movs	r1, #1
 800a33c:	5499      	strb	r1, [r3, r2]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	223f      	movs	r2, #63	; 0x3f
 800a342:	2101      	movs	r1, #1
 800a344:	5499      	strb	r1, [r3, r2]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2240      	movs	r2, #64	; 0x40
 800a34a:	2101      	movs	r1, #1
 800a34c:	5499      	strb	r1, [r3, r2]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2241      	movs	r2, #65	; 0x41
 800a352:	2101      	movs	r1, #1
 800a354:	5499      	strb	r1, [r3, r2]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2242      	movs	r2, #66	; 0x42
 800a35a:	2101      	movs	r1, #1
 800a35c:	5499      	strb	r1, [r3, r2]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2243      	movs	r2, #67	; 0x43
 800a362:	2101      	movs	r1, #1
 800a364:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2244      	movs	r2, #68	; 0x44
 800a36a:	2101      	movs	r1, #1
 800a36c:	5499      	strb	r1, [r3, r2]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2245      	movs	r2, #69	; 0x45
 800a372:	2101      	movs	r1, #1
 800a374:	5499      	strb	r1, [r3, r2]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2246      	movs	r2, #70	; 0x46
 800a37a:	2101      	movs	r1, #1
 800a37c:	5499      	strb	r1, [r3, r2]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2247      	movs	r2, #71	; 0x47
 800a382:	2101      	movs	r1, #1
 800a384:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	223d      	movs	r2, #61	; 0x3d
 800a38a:	2101      	movs	r1, #1
 800a38c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a38e:	2300      	movs	r3, #0
}
 800a390:	0018      	movs	r0, r3
 800a392:	46bd      	mov	sp, r7
 800a394:	b002      	add	sp, #8
 800a396:	bd80      	pop	{r7, pc}

0800a398 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d101      	bne.n	800a3aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e04a      	b.n	800a440 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	223d      	movs	r2, #61	; 0x3d
 800a3ae:	5c9b      	ldrb	r3, [r3, r2]
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d107      	bne.n	800a3c6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	223c      	movs	r2, #60	; 0x3c
 800a3ba:	2100      	movs	r1, #0
 800a3bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	0018      	movs	r0, r3
 800a3c2:	f000 f841 	bl	800a448 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	223d      	movs	r2, #61	; 0x3d
 800a3ca:	2102      	movs	r1, #2
 800a3cc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	3304      	adds	r3, #4
 800a3d6:	0019      	movs	r1, r3
 800a3d8:	0010      	movs	r0, r2
 800a3da:	f000 fafd 	bl	800a9d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2248      	movs	r2, #72	; 0x48
 800a3e2:	2101      	movs	r1, #1
 800a3e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	223e      	movs	r2, #62	; 0x3e
 800a3ea:	2101      	movs	r1, #1
 800a3ec:	5499      	strb	r1, [r3, r2]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	223f      	movs	r2, #63	; 0x3f
 800a3f2:	2101      	movs	r1, #1
 800a3f4:	5499      	strb	r1, [r3, r2]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2240      	movs	r2, #64	; 0x40
 800a3fa:	2101      	movs	r1, #1
 800a3fc:	5499      	strb	r1, [r3, r2]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2241      	movs	r2, #65	; 0x41
 800a402:	2101      	movs	r1, #1
 800a404:	5499      	strb	r1, [r3, r2]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2242      	movs	r2, #66	; 0x42
 800a40a:	2101      	movs	r1, #1
 800a40c:	5499      	strb	r1, [r3, r2]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2243      	movs	r2, #67	; 0x43
 800a412:	2101      	movs	r1, #1
 800a414:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2244      	movs	r2, #68	; 0x44
 800a41a:	2101      	movs	r1, #1
 800a41c:	5499      	strb	r1, [r3, r2]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2245      	movs	r2, #69	; 0x45
 800a422:	2101      	movs	r1, #1
 800a424:	5499      	strb	r1, [r3, r2]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2246      	movs	r2, #70	; 0x46
 800a42a:	2101      	movs	r1, #1
 800a42c:	5499      	strb	r1, [r3, r2]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2247      	movs	r2, #71	; 0x47
 800a432:	2101      	movs	r1, #1
 800a434:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	223d      	movs	r2, #61	; 0x3d
 800a43a:	2101      	movs	r1, #1
 800a43c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	0018      	movs	r0, r3
 800a442:	46bd      	mov	sp, r7
 800a444:	b002      	add	sp, #8
 800a446:	bd80      	pop	{r7, pc}

0800a448 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a450:	46c0      	nop			; (mov r8, r8)
 800a452:	46bd      	mov	sp, r7
 800a454:	b002      	add	sp, #8
 800a456:	bd80      	pop	{r7, pc}

0800a458 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d108      	bne.n	800a47a <HAL_TIM_PWM_Start+0x22>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	223e      	movs	r2, #62	; 0x3e
 800a46c:	5c9b      	ldrb	r3, [r3, r2]
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	3b01      	subs	r3, #1
 800a472:	1e5a      	subs	r2, r3, #1
 800a474:	4193      	sbcs	r3, r2
 800a476:	b2db      	uxtb	r3, r3
 800a478:	e037      	b.n	800a4ea <HAL_TIM_PWM_Start+0x92>
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	2b04      	cmp	r3, #4
 800a47e:	d108      	bne.n	800a492 <HAL_TIM_PWM_Start+0x3a>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	223f      	movs	r2, #63	; 0x3f
 800a484:	5c9b      	ldrb	r3, [r3, r2]
 800a486:	b2db      	uxtb	r3, r3
 800a488:	3b01      	subs	r3, #1
 800a48a:	1e5a      	subs	r2, r3, #1
 800a48c:	4193      	sbcs	r3, r2
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	e02b      	b.n	800a4ea <HAL_TIM_PWM_Start+0x92>
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	2b08      	cmp	r3, #8
 800a496:	d108      	bne.n	800a4aa <HAL_TIM_PWM_Start+0x52>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2240      	movs	r2, #64	; 0x40
 800a49c:	5c9b      	ldrb	r3, [r3, r2]
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	3b01      	subs	r3, #1
 800a4a2:	1e5a      	subs	r2, r3, #1
 800a4a4:	4193      	sbcs	r3, r2
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	e01f      	b.n	800a4ea <HAL_TIM_PWM_Start+0x92>
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	2b0c      	cmp	r3, #12
 800a4ae:	d108      	bne.n	800a4c2 <HAL_TIM_PWM_Start+0x6a>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2241      	movs	r2, #65	; 0x41
 800a4b4:	5c9b      	ldrb	r3, [r3, r2]
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	1e5a      	subs	r2, r3, #1
 800a4bc:	4193      	sbcs	r3, r2
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	e013      	b.n	800a4ea <HAL_TIM_PWM_Start+0x92>
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	2b10      	cmp	r3, #16
 800a4c6:	d108      	bne.n	800a4da <HAL_TIM_PWM_Start+0x82>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2242      	movs	r2, #66	; 0x42
 800a4cc:	5c9b      	ldrb	r3, [r3, r2]
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	3b01      	subs	r3, #1
 800a4d2:	1e5a      	subs	r2, r3, #1
 800a4d4:	4193      	sbcs	r3, r2
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	e007      	b.n	800a4ea <HAL_TIM_PWM_Start+0x92>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2243      	movs	r2, #67	; 0x43
 800a4de:	5c9b      	ldrb	r3, [r3, r2]
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	3b01      	subs	r3, #1
 800a4e4:	1e5a      	subs	r2, r3, #1
 800a4e6:	4193      	sbcs	r3, r2
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d001      	beq.n	800a4f2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	e08b      	b.n	800a60a <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d104      	bne.n	800a502 <HAL_TIM_PWM_Start+0xaa>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	223e      	movs	r2, #62	; 0x3e
 800a4fc:	2102      	movs	r1, #2
 800a4fe:	5499      	strb	r1, [r3, r2]
 800a500:	e023      	b.n	800a54a <HAL_TIM_PWM_Start+0xf2>
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	2b04      	cmp	r3, #4
 800a506:	d104      	bne.n	800a512 <HAL_TIM_PWM_Start+0xba>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	223f      	movs	r2, #63	; 0x3f
 800a50c:	2102      	movs	r1, #2
 800a50e:	5499      	strb	r1, [r3, r2]
 800a510:	e01b      	b.n	800a54a <HAL_TIM_PWM_Start+0xf2>
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	2b08      	cmp	r3, #8
 800a516:	d104      	bne.n	800a522 <HAL_TIM_PWM_Start+0xca>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2240      	movs	r2, #64	; 0x40
 800a51c:	2102      	movs	r1, #2
 800a51e:	5499      	strb	r1, [r3, r2]
 800a520:	e013      	b.n	800a54a <HAL_TIM_PWM_Start+0xf2>
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	2b0c      	cmp	r3, #12
 800a526:	d104      	bne.n	800a532 <HAL_TIM_PWM_Start+0xda>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2241      	movs	r2, #65	; 0x41
 800a52c:	2102      	movs	r1, #2
 800a52e:	5499      	strb	r1, [r3, r2]
 800a530:	e00b      	b.n	800a54a <HAL_TIM_PWM_Start+0xf2>
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	2b10      	cmp	r3, #16
 800a536:	d104      	bne.n	800a542 <HAL_TIM_PWM_Start+0xea>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2242      	movs	r2, #66	; 0x42
 800a53c:	2102      	movs	r1, #2
 800a53e:	5499      	strb	r1, [r3, r2]
 800a540:	e003      	b.n	800a54a <HAL_TIM_PWM_Start+0xf2>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2243      	movs	r2, #67	; 0x43
 800a546:	2102      	movs	r1, #2
 800a548:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	6839      	ldr	r1, [r7, #0]
 800a550:	2201      	movs	r2, #1
 800a552:	0018      	movs	r0, r3
 800a554:	f000 fe20 	bl	800b198 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a2d      	ldr	r2, [pc, #180]	; (800a614 <HAL_TIM_PWM_Start+0x1bc>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d00e      	beq.n	800a580 <HAL_TIM_PWM_Start+0x128>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a2c      	ldr	r2, [pc, #176]	; (800a618 <HAL_TIM_PWM_Start+0x1c0>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d009      	beq.n	800a580 <HAL_TIM_PWM_Start+0x128>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a2a      	ldr	r2, [pc, #168]	; (800a61c <HAL_TIM_PWM_Start+0x1c4>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d004      	beq.n	800a580 <HAL_TIM_PWM_Start+0x128>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a29      	ldr	r2, [pc, #164]	; (800a620 <HAL_TIM_PWM_Start+0x1c8>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d101      	bne.n	800a584 <HAL_TIM_PWM_Start+0x12c>
 800a580:	2301      	movs	r3, #1
 800a582:	e000      	b.n	800a586 <HAL_TIM_PWM_Start+0x12e>
 800a584:	2300      	movs	r3, #0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d008      	beq.n	800a59c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	2180      	movs	r1, #128	; 0x80
 800a596:	0209      	lsls	r1, r1, #8
 800a598:	430a      	orrs	r2, r1
 800a59a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a1c      	ldr	r2, [pc, #112]	; (800a614 <HAL_TIM_PWM_Start+0x1bc>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d00f      	beq.n	800a5c6 <HAL_TIM_PWM_Start+0x16e>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	2380      	movs	r3, #128	; 0x80
 800a5ac:	05db      	lsls	r3, r3, #23
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d009      	beq.n	800a5c6 <HAL_TIM_PWM_Start+0x16e>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a1b      	ldr	r2, [pc, #108]	; (800a624 <HAL_TIM_PWM_Start+0x1cc>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d004      	beq.n	800a5c6 <HAL_TIM_PWM_Start+0x16e>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a15      	ldr	r2, [pc, #84]	; (800a618 <HAL_TIM_PWM_Start+0x1c0>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d116      	bne.n	800a5f4 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	4a16      	ldr	r2, [pc, #88]	; (800a628 <HAL_TIM_PWM_Start+0x1d0>)
 800a5ce:	4013      	ands	r3, r2
 800a5d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2b06      	cmp	r3, #6
 800a5d6:	d016      	beq.n	800a606 <HAL_TIM_PWM_Start+0x1ae>
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	2380      	movs	r3, #128	; 0x80
 800a5dc:	025b      	lsls	r3, r3, #9
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d011      	beq.n	800a606 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	681a      	ldr	r2, [r3, #0]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	2101      	movs	r1, #1
 800a5ee:	430a      	orrs	r2, r1
 800a5f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5f2:	e008      	b.n	800a606 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2101      	movs	r1, #1
 800a600:	430a      	orrs	r2, r1
 800a602:	601a      	str	r2, [r3, #0]
 800a604:	e000      	b.n	800a608 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a606:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	0018      	movs	r0, r3
 800a60c:	46bd      	mov	sp, r7
 800a60e:	b004      	add	sp, #16
 800a610:	bd80      	pop	{r7, pc}
 800a612:	46c0      	nop			; (mov r8, r8)
 800a614:	40012c00 	.word	0x40012c00
 800a618:	40014000 	.word	0x40014000
 800a61c:	40014400 	.word	0x40014400
 800a620:	40014800 	.word	0x40014800
 800a624:	40000400 	.word	0x40000400
 800a628:	00010007 	.word	0x00010007

0800a62c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b086      	sub	sp, #24
 800a630:	af00      	add	r7, sp, #0
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a638:	2317      	movs	r3, #23
 800a63a:	18fb      	adds	r3, r7, r3
 800a63c:	2200      	movs	r2, #0
 800a63e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	223c      	movs	r2, #60	; 0x3c
 800a644:	5c9b      	ldrb	r3, [r3, r2]
 800a646:	2b01      	cmp	r3, #1
 800a648:	d101      	bne.n	800a64e <HAL_TIM_PWM_ConfigChannel+0x22>
 800a64a:	2302      	movs	r3, #2
 800a64c:	e0e5      	b.n	800a81a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	223c      	movs	r2, #60	; 0x3c
 800a652:	2101      	movs	r1, #1
 800a654:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2b14      	cmp	r3, #20
 800a65a:	d900      	bls.n	800a65e <HAL_TIM_PWM_ConfigChannel+0x32>
 800a65c:	e0d1      	b.n	800a802 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	009a      	lsls	r2, r3, #2
 800a662:	4b70      	ldr	r3, [pc, #448]	; (800a824 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800a664:	18d3      	adds	r3, r2, r3
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	68ba      	ldr	r2, [r7, #8]
 800a670:	0011      	movs	r1, r2
 800a672:	0018      	movs	r0, r3
 800a674:	f000 fa30 	bl	800aad8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	699a      	ldr	r2, [r3, #24]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2108      	movs	r1, #8
 800a684:	430a      	orrs	r2, r1
 800a686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	699a      	ldr	r2, [r3, #24]
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	2104      	movs	r1, #4
 800a694:	438a      	bics	r2, r1
 800a696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	6999      	ldr	r1, [r3, #24]
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	691a      	ldr	r2, [r3, #16]
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	430a      	orrs	r2, r1
 800a6a8:	619a      	str	r2, [r3, #24]
      break;
 800a6aa:	e0af      	b.n	800a80c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	68ba      	ldr	r2, [r7, #8]
 800a6b2:	0011      	movs	r1, r2
 800a6b4:	0018      	movs	r0, r3
 800a6b6:	f000 fa99 	bl	800abec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	699a      	ldr	r2, [r3, #24]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	2180      	movs	r1, #128	; 0x80
 800a6c6:	0109      	lsls	r1, r1, #4
 800a6c8:	430a      	orrs	r2, r1
 800a6ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	699a      	ldr	r2, [r3, #24]
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4954      	ldr	r1, [pc, #336]	; (800a828 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a6d8:	400a      	ands	r2, r1
 800a6da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	6999      	ldr	r1, [r3, #24]
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	021a      	lsls	r2, r3, #8
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	430a      	orrs	r2, r1
 800a6ee:	619a      	str	r2, [r3, #24]
      break;
 800a6f0:	e08c      	b.n	800a80c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	68ba      	ldr	r2, [r7, #8]
 800a6f8:	0011      	movs	r1, r2
 800a6fa:	0018      	movs	r0, r3
 800a6fc:	f000 fafa 	bl	800acf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	69da      	ldr	r2, [r3, #28]
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	2108      	movs	r1, #8
 800a70c:	430a      	orrs	r2, r1
 800a70e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	69da      	ldr	r2, [r3, #28]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2104      	movs	r1, #4
 800a71c:	438a      	bics	r2, r1
 800a71e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	69d9      	ldr	r1, [r3, #28]
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	691a      	ldr	r2, [r3, #16]
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	430a      	orrs	r2, r1
 800a730:	61da      	str	r2, [r3, #28]
      break;
 800a732:	e06b      	b.n	800a80c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	68ba      	ldr	r2, [r7, #8]
 800a73a:	0011      	movs	r1, r2
 800a73c:	0018      	movs	r0, r3
 800a73e:	f000 fb61 	bl	800ae04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	69da      	ldr	r2, [r3, #28]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	2180      	movs	r1, #128	; 0x80
 800a74e:	0109      	lsls	r1, r1, #4
 800a750:	430a      	orrs	r2, r1
 800a752:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	69da      	ldr	r2, [r3, #28]
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4932      	ldr	r1, [pc, #200]	; (800a828 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a760:	400a      	ands	r2, r1
 800a762:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	69d9      	ldr	r1, [r3, #28]
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	691b      	ldr	r3, [r3, #16]
 800a76e:	021a      	lsls	r2, r3, #8
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	430a      	orrs	r2, r1
 800a776:	61da      	str	r2, [r3, #28]
      break;
 800a778:	e048      	b.n	800a80c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	68ba      	ldr	r2, [r7, #8]
 800a780:	0011      	movs	r1, r2
 800a782:	0018      	movs	r0, r3
 800a784:	f000 fba8 	bl	800aed8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	2108      	movs	r1, #8
 800a794:	430a      	orrs	r2, r1
 800a796:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2104      	movs	r1, #4
 800a7a4:	438a      	bics	r2, r1
 800a7a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	691a      	ldr	r2, [r3, #16]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	430a      	orrs	r2, r1
 800a7b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a7ba:	e027      	b.n	800a80c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	68ba      	ldr	r2, [r7, #8]
 800a7c2:	0011      	movs	r1, r2
 800a7c4:	0018      	movs	r0, r3
 800a7c6:	f000 fbe7 	bl	800af98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2180      	movs	r1, #128	; 0x80
 800a7d6:	0109      	lsls	r1, r1, #4
 800a7d8:	430a      	orrs	r2, r1
 800a7da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4910      	ldr	r1, [pc, #64]	; (800a828 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a7e8:	400a      	ands	r2, r1
 800a7ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	691b      	ldr	r3, [r3, #16]
 800a7f6:	021a      	lsls	r2, r3, #8
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	430a      	orrs	r2, r1
 800a7fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a800:	e004      	b.n	800a80c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800a802:	2317      	movs	r3, #23
 800a804:	18fb      	adds	r3, r7, r3
 800a806:	2201      	movs	r2, #1
 800a808:	701a      	strb	r2, [r3, #0]
      break;
 800a80a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	223c      	movs	r2, #60	; 0x3c
 800a810:	2100      	movs	r1, #0
 800a812:	5499      	strb	r1, [r3, r2]

  return status;
 800a814:	2317      	movs	r3, #23
 800a816:	18fb      	adds	r3, r7, r3
 800a818:	781b      	ldrb	r3, [r3, #0]
}
 800a81a:	0018      	movs	r0, r3
 800a81c:	46bd      	mov	sp, r7
 800a81e:	b006      	add	sp, #24
 800a820:	bd80      	pop	{r7, pc}
 800a822:	46c0      	nop			; (mov r8, r8)
 800a824:	080160dc 	.word	0x080160dc
 800a828:	fffffbff 	.word	0xfffffbff

0800a82c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a836:	230f      	movs	r3, #15
 800a838:	18fb      	adds	r3, r7, r3
 800a83a:	2200      	movs	r2, #0
 800a83c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	223c      	movs	r2, #60	; 0x3c
 800a842:	5c9b      	ldrb	r3, [r3, r2]
 800a844:	2b01      	cmp	r3, #1
 800a846:	d101      	bne.n	800a84c <HAL_TIM_ConfigClockSource+0x20>
 800a848:	2302      	movs	r3, #2
 800a84a:	e0bc      	b.n	800a9c6 <HAL_TIM_ConfigClockSource+0x19a>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	223c      	movs	r2, #60	; 0x3c
 800a850:	2101      	movs	r1, #1
 800a852:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	223d      	movs	r2, #61	; 0x3d
 800a858:	2102      	movs	r1, #2
 800a85a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	4a5a      	ldr	r2, [pc, #360]	; (800a9d0 <HAL_TIM_ConfigClockSource+0x1a4>)
 800a868:	4013      	ands	r3, r2
 800a86a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	4a59      	ldr	r2, [pc, #356]	; (800a9d4 <HAL_TIM_ConfigClockSource+0x1a8>)
 800a870:	4013      	ands	r3, r2
 800a872:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	68ba      	ldr	r2, [r7, #8]
 800a87a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	2280      	movs	r2, #128	; 0x80
 800a882:	0192      	lsls	r2, r2, #6
 800a884:	4293      	cmp	r3, r2
 800a886:	d040      	beq.n	800a90a <HAL_TIM_ConfigClockSource+0xde>
 800a888:	2280      	movs	r2, #128	; 0x80
 800a88a:	0192      	lsls	r2, r2, #6
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d900      	bls.n	800a892 <HAL_TIM_ConfigClockSource+0x66>
 800a890:	e088      	b.n	800a9a4 <HAL_TIM_ConfigClockSource+0x178>
 800a892:	2280      	movs	r2, #128	; 0x80
 800a894:	0152      	lsls	r2, r2, #5
 800a896:	4293      	cmp	r3, r2
 800a898:	d100      	bne.n	800a89c <HAL_TIM_ConfigClockSource+0x70>
 800a89a:	e088      	b.n	800a9ae <HAL_TIM_ConfigClockSource+0x182>
 800a89c:	2280      	movs	r2, #128	; 0x80
 800a89e:	0152      	lsls	r2, r2, #5
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d900      	bls.n	800a8a6 <HAL_TIM_ConfigClockSource+0x7a>
 800a8a4:	e07e      	b.n	800a9a4 <HAL_TIM_ConfigClockSource+0x178>
 800a8a6:	2b70      	cmp	r3, #112	; 0x70
 800a8a8:	d018      	beq.n	800a8dc <HAL_TIM_ConfigClockSource+0xb0>
 800a8aa:	d900      	bls.n	800a8ae <HAL_TIM_ConfigClockSource+0x82>
 800a8ac:	e07a      	b.n	800a9a4 <HAL_TIM_ConfigClockSource+0x178>
 800a8ae:	2b60      	cmp	r3, #96	; 0x60
 800a8b0:	d04f      	beq.n	800a952 <HAL_TIM_ConfigClockSource+0x126>
 800a8b2:	d900      	bls.n	800a8b6 <HAL_TIM_ConfigClockSource+0x8a>
 800a8b4:	e076      	b.n	800a9a4 <HAL_TIM_ConfigClockSource+0x178>
 800a8b6:	2b50      	cmp	r3, #80	; 0x50
 800a8b8:	d03b      	beq.n	800a932 <HAL_TIM_ConfigClockSource+0x106>
 800a8ba:	d900      	bls.n	800a8be <HAL_TIM_ConfigClockSource+0x92>
 800a8bc:	e072      	b.n	800a9a4 <HAL_TIM_ConfigClockSource+0x178>
 800a8be:	2b40      	cmp	r3, #64	; 0x40
 800a8c0:	d057      	beq.n	800a972 <HAL_TIM_ConfigClockSource+0x146>
 800a8c2:	d900      	bls.n	800a8c6 <HAL_TIM_ConfigClockSource+0x9a>
 800a8c4:	e06e      	b.n	800a9a4 <HAL_TIM_ConfigClockSource+0x178>
 800a8c6:	2b30      	cmp	r3, #48	; 0x30
 800a8c8:	d063      	beq.n	800a992 <HAL_TIM_ConfigClockSource+0x166>
 800a8ca:	d86b      	bhi.n	800a9a4 <HAL_TIM_ConfigClockSource+0x178>
 800a8cc:	2b20      	cmp	r3, #32
 800a8ce:	d060      	beq.n	800a992 <HAL_TIM_ConfigClockSource+0x166>
 800a8d0:	d868      	bhi.n	800a9a4 <HAL_TIM_ConfigClockSource+0x178>
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d05d      	beq.n	800a992 <HAL_TIM_ConfigClockSource+0x166>
 800a8d6:	2b10      	cmp	r3, #16
 800a8d8:	d05b      	beq.n	800a992 <HAL_TIM_ConfigClockSource+0x166>
 800a8da:	e063      	b.n	800a9a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6818      	ldr	r0, [r3, #0]
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	6899      	ldr	r1, [r3, #8]
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	685a      	ldr	r2, [r3, #4]
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	68db      	ldr	r3, [r3, #12]
 800a8ec:	f000 fc34 	bl	800b158 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	2277      	movs	r2, #119	; 0x77
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	68ba      	ldr	r2, [r7, #8]
 800a906:	609a      	str	r2, [r3, #8]
      break;
 800a908:	e052      	b.n	800a9b0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6818      	ldr	r0, [r3, #0]
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	6899      	ldr	r1, [r3, #8]
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	685a      	ldr	r2, [r3, #4]
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	f000 fc1d 	bl	800b158 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	689a      	ldr	r2, [r3, #8]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	2180      	movs	r1, #128	; 0x80
 800a92a:	01c9      	lsls	r1, r1, #7
 800a92c:	430a      	orrs	r2, r1
 800a92e:	609a      	str	r2, [r3, #8]
      break;
 800a930:	e03e      	b.n	800a9b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6818      	ldr	r0, [r3, #0]
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	6859      	ldr	r1, [r3, #4]
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	68db      	ldr	r3, [r3, #12]
 800a93e:	001a      	movs	r2, r3
 800a940:	f000 fb8e 	bl	800b060 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	2150      	movs	r1, #80	; 0x50
 800a94a:	0018      	movs	r0, r3
 800a94c:	f000 fbe8 	bl	800b120 <TIM_ITRx_SetConfig>
      break;
 800a950:	e02e      	b.n	800a9b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6818      	ldr	r0, [r3, #0]
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	6859      	ldr	r1, [r3, #4]
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	001a      	movs	r2, r3
 800a960:	f000 fbac 	bl	800b0bc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	2160      	movs	r1, #96	; 0x60
 800a96a:	0018      	movs	r0, r3
 800a96c:	f000 fbd8 	bl	800b120 <TIM_ITRx_SetConfig>
      break;
 800a970:	e01e      	b.n	800a9b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6818      	ldr	r0, [r3, #0]
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	6859      	ldr	r1, [r3, #4]
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	68db      	ldr	r3, [r3, #12]
 800a97e:	001a      	movs	r2, r3
 800a980:	f000 fb6e 	bl	800b060 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	2140      	movs	r1, #64	; 0x40
 800a98a:	0018      	movs	r0, r3
 800a98c:	f000 fbc8 	bl	800b120 <TIM_ITRx_SetConfig>
      break;
 800a990:	e00e      	b.n	800a9b0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	0019      	movs	r1, r3
 800a99c:	0010      	movs	r0, r2
 800a99e:	f000 fbbf 	bl	800b120 <TIM_ITRx_SetConfig>
      break;
 800a9a2:	e005      	b.n	800a9b0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800a9a4:	230f      	movs	r3, #15
 800a9a6:	18fb      	adds	r3, r7, r3
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	701a      	strb	r2, [r3, #0]
      break;
 800a9ac:	e000      	b.n	800a9b0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800a9ae:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	223d      	movs	r2, #61	; 0x3d
 800a9b4:	2101      	movs	r1, #1
 800a9b6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	223c      	movs	r2, #60	; 0x3c
 800a9bc:	2100      	movs	r1, #0
 800a9be:	5499      	strb	r1, [r3, r2]

  return status;
 800a9c0:	230f      	movs	r3, #15
 800a9c2:	18fb      	adds	r3, r7, r3
 800a9c4:	781b      	ldrb	r3, [r3, #0]
}
 800a9c6:	0018      	movs	r0, r3
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	b004      	add	sp, #16
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	46c0      	nop			; (mov r8, r8)
 800a9d0:	ffceff88 	.word	0xffceff88
 800a9d4:	ffff00ff 	.word	0xffff00ff

0800a9d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	4a34      	ldr	r2, [pc, #208]	; (800aabc <TIM_Base_SetConfig+0xe4>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d008      	beq.n	800aa02 <TIM_Base_SetConfig+0x2a>
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	2380      	movs	r3, #128	; 0x80
 800a9f4:	05db      	lsls	r3, r3, #23
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d003      	beq.n	800aa02 <TIM_Base_SetConfig+0x2a>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4a30      	ldr	r2, [pc, #192]	; (800aac0 <TIM_Base_SetConfig+0xe8>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d108      	bne.n	800aa14 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2270      	movs	r2, #112	; 0x70
 800aa06:	4393      	bics	r3, r2
 800aa08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	68fa      	ldr	r2, [r7, #12]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	4a29      	ldr	r2, [pc, #164]	; (800aabc <TIM_Base_SetConfig+0xe4>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d018      	beq.n	800aa4e <TIM_Base_SetConfig+0x76>
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	2380      	movs	r3, #128	; 0x80
 800aa20:	05db      	lsls	r3, r3, #23
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d013      	beq.n	800aa4e <TIM_Base_SetConfig+0x76>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	4a25      	ldr	r2, [pc, #148]	; (800aac0 <TIM_Base_SetConfig+0xe8>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d00f      	beq.n	800aa4e <TIM_Base_SetConfig+0x76>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4a24      	ldr	r2, [pc, #144]	; (800aac4 <TIM_Base_SetConfig+0xec>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d00b      	beq.n	800aa4e <TIM_Base_SetConfig+0x76>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4a23      	ldr	r2, [pc, #140]	; (800aac8 <TIM_Base_SetConfig+0xf0>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d007      	beq.n	800aa4e <TIM_Base_SetConfig+0x76>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4a22      	ldr	r2, [pc, #136]	; (800aacc <TIM_Base_SetConfig+0xf4>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d003      	beq.n	800aa4e <TIM_Base_SetConfig+0x76>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a21      	ldr	r2, [pc, #132]	; (800aad0 <TIM_Base_SetConfig+0xf8>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d108      	bne.n	800aa60 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	4a20      	ldr	r2, [pc, #128]	; (800aad4 <TIM_Base_SetConfig+0xfc>)
 800aa52:	4013      	ands	r3, r2
 800aa54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	68db      	ldr	r3, [r3, #12]
 800aa5a:	68fa      	ldr	r2, [r7, #12]
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2280      	movs	r2, #128	; 0x80
 800aa64:	4393      	bics	r3, r2
 800aa66:	001a      	movs	r2, r3
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	695b      	ldr	r3, [r3, #20]
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	68fa      	ldr	r2, [r7, #12]
 800aa74:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	689a      	ldr	r2, [r3, #8]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4a0c      	ldr	r2, [pc, #48]	; (800aabc <TIM_Base_SetConfig+0xe4>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d00b      	beq.n	800aaa6 <TIM_Base_SetConfig+0xce>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4a0d      	ldr	r2, [pc, #52]	; (800aac8 <TIM_Base_SetConfig+0xf0>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d007      	beq.n	800aaa6 <TIM_Base_SetConfig+0xce>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4a0c      	ldr	r2, [pc, #48]	; (800aacc <TIM_Base_SetConfig+0xf4>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d003      	beq.n	800aaa6 <TIM_Base_SetConfig+0xce>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	4a0b      	ldr	r2, [pc, #44]	; (800aad0 <TIM_Base_SetConfig+0xf8>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d103      	bne.n	800aaae <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	691a      	ldr	r2, [r3, #16]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2201      	movs	r2, #1
 800aab2:	615a      	str	r2, [r3, #20]
}
 800aab4:	46c0      	nop			; (mov r8, r8)
 800aab6:	46bd      	mov	sp, r7
 800aab8:	b004      	add	sp, #16
 800aaba:	bd80      	pop	{r7, pc}
 800aabc:	40012c00 	.word	0x40012c00
 800aac0:	40000400 	.word	0x40000400
 800aac4:	40002000 	.word	0x40002000
 800aac8:	40014000 	.word	0x40014000
 800aacc:	40014400 	.word	0x40014400
 800aad0:	40014800 	.word	0x40014800
 800aad4:	fffffcff 	.word	0xfffffcff

0800aad8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b086      	sub	sp, #24
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6a1b      	ldr	r3, [r3, #32]
 800aae6:	2201      	movs	r2, #1
 800aae8:	4393      	bics	r3, r2
 800aaea:	001a      	movs	r2, r3
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6a1b      	ldr	r3, [r3, #32]
 800aaf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	699b      	ldr	r3, [r3, #24]
 800ab00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	4a32      	ldr	r2, [pc, #200]	; (800abd0 <TIM_OC1_SetConfig+0xf8>)
 800ab06:	4013      	ands	r3, r2
 800ab08:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2203      	movs	r2, #3
 800ab0e:	4393      	bics	r3, r2
 800ab10:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	2202      	movs	r2, #2
 800ab20:	4393      	bics	r3, r2
 800ab22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	697a      	ldr	r2, [r7, #20]
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	4a28      	ldr	r2, [pc, #160]	; (800abd4 <TIM_OC1_SetConfig+0xfc>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d00b      	beq.n	800ab4e <TIM_OC1_SetConfig+0x76>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	4a27      	ldr	r2, [pc, #156]	; (800abd8 <TIM_OC1_SetConfig+0x100>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d007      	beq.n	800ab4e <TIM_OC1_SetConfig+0x76>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	4a26      	ldr	r2, [pc, #152]	; (800abdc <TIM_OC1_SetConfig+0x104>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d003      	beq.n	800ab4e <TIM_OC1_SetConfig+0x76>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	4a25      	ldr	r2, [pc, #148]	; (800abe0 <TIM_OC1_SetConfig+0x108>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d10c      	bne.n	800ab68 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	2208      	movs	r2, #8
 800ab52:	4393      	bics	r3, r2
 800ab54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	697a      	ldr	r2, [r7, #20]
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	2204      	movs	r2, #4
 800ab64:	4393      	bics	r3, r2
 800ab66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	4a1a      	ldr	r2, [pc, #104]	; (800abd4 <TIM_OC1_SetConfig+0xfc>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d00b      	beq.n	800ab88 <TIM_OC1_SetConfig+0xb0>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4a19      	ldr	r2, [pc, #100]	; (800abd8 <TIM_OC1_SetConfig+0x100>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d007      	beq.n	800ab88 <TIM_OC1_SetConfig+0xb0>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	4a18      	ldr	r2, [pc, #96]	; (800abdc <TIM_OC1_SetConfig+0x104>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d003      	beq.n	800ab88 <TIM_OC1_SetConfig+0xb0>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a17      	ldr	r2, [pc, #92]	; (800abe0 <TIM_OC1_SetConfig+0x108>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d111      	bne.n	800abac <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	4a16      	ldr	r2, [pc, #88]	; (800abe4 <TIM_OC1_SetConfig+0x10c>)
 800ab8c:	4013      	ands	r3, r2
 800ab8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	4a15      	ldr	r2, [pc, #84]	; (800abe8 <TIM_OC1_SetConfig+0x110>)
 800ab94:	4013      	ands	r3, r2
 800ab96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	695b      	ldr	r3, [r3, #20]
 800ab9c:	693a      	ldr	r2, [r7, #16]
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	699b      	ldr	r3, [r3, #24]
 800aba6:	693a      	ldr	r2, [r7, #16]
 800aba8:	4313      	orrs	r3, r2
 800abaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	693a      	ldr	r2, [r7, #16]
 800abb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	68fa      	ldr	r2, [r7, #12]
 800abb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	685a      	ldr	r2, [r3, #4]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	697a      	ldr	r2, [r7, #20]
 800abc4:	621a      	str	r2, [r3, #32]
}
 800abc6:	46c0      	nop			; (mov r8, r8)
 800abc8:	46bd      	mov	sp, r7
 800abca:	b006      	add	sp, #24
 800abcc:	bd80      	pop	{r7, pc}
 800abce:	46c0      	nop			; (mov r8, r8)
 800abd0:	fffeff8f 	.word	0xfffeff8f
 800abd4:	40012c00 	.word	0x40012c00
 800abd8:	40014000 	.word	0x40014000
 800abdc:	40014400 	.word	0x40014400
 800abe0:	40014800 	.word	0x40014800
 800abe4:	fffffeff 	.word	0xfffffeff
 800abe8:	fffffdff 	.word	0xfffffdff

0800abec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b086      	sub	sp, #24
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6a1b      	ldr	r3, [r3, #32]
 800abfa:	2210      	movs	r2, #16
 800abfc:	4393      	bics	r3, r2
 800abfe:	001a      	movs	r2, r3
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6a1b      	ldr	r3, [r3, #32]
 800ac08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	699b      	ldr	r3, [r3, #24]
 800ac14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	4a2e      	ldr	r2, [pc, #184]	; (800acd4 <TIM_OC2_SetConfig+0xe8>)
 800ac1a:	4013      	ands	r3, r2
 800ac1c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	4a2d      	ldr	r2, [pc, #180]	; (800acd8 <TIM_OC2_SetConfig+0xec>)
 800ac22:	4013      	ands	r3, r2
 800ac24:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	021b      	lsls	r3, r3, #8
 800ac2c:	68fa      	ldr	r2, [r7, #12]
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	2220      	movs	r2, #32
 800ac36:	4393      	bics	r3, r2
 800ac38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	689b      	ldr	r3, [r3, #8]
 800ac3e:	011b      	lsls	r3, r3, #4
 800ac40:	697a      	ldr	r2, [r7, #20]
 800ac42:	4313      	orrs	r3, r2
 800ac44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	4a24      	ldr	r2, [pc, #144]	; (800acdc <TIM_OC2_SetConfig+0xf0>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d10d      	bne.n	800ac6a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	2280      	movs	r2, #128	; 0x80
 800ac52:	4393      	bics	r3, r2
 800ac54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	68db      	ldr	r3, [r3, #12]
 800ac5a:	011b      	lsls	r3, r3, #4
 800ac5c:	697a      	ldr	r2, [r7, #20]
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	2240      	movs	r2, #64	; 0x40
 800ac66:	4393      	bics	r3, r2
 800ac68:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	4a1b      	ldr	r2, [pc, #108]	; (800acdc <TIM_OC2_SetConfig+0xf0>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d00b      	beq.n	800ac8a <TIM_OC2_SetConfig+0x9e>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	4a1a      	ldr	r2, [pc, #104]	; (800ace0 <TIM_OC2_SetConfig+0xf4>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d007      	beq.n	800ac8a <TIM_OC2_SetConfig+0x9e>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	4a19      	ldr	r2, [pc, #100]	; (800ace4 <TIM_OC2_SetConfig+0xf8>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d003      	beq.n	800ac8a <TIM_OC2_SetConfig+0x9e>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	4a18      	ldr	r2, [pc, #96]	; (800ace8 <TIM_OC2_SetConfig+0xfc>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d113      	bne.n	800acb2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	4a17      	ldr	r2, [pc, #92]	; (800acec <TIM_OC2_SetConfig+0x100>)
 800ac8e:	4013      	ands	r3, r2
 800ac90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	4a16      	ldr	r2, [pc, #88]	; (800acf0 <TIM_OC2_SetConfig+0x104>)
 800ac96:	4013      	ands	r3, r2
 800ac98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	695b      	ldr	r3, [r3, #20]
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	693a      	ldr	r2, [r7, #16]
 800aca2:	4313      	orrs	r3, r2
 800aca4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	699b      	ldr	r3, [r3, #24]
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	693a      	ldr	r2, [r7, #16]
 800acae:	4313      	orrs	r3, r2
 800acb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	693a      	ldr	r2, [r7, #16]
 800acb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	68fa      	ldr	r2, [r7, #12]
 800acbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	685a      	ldr	r2, [r3, #4]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	697a      	ldr	r2, [r7, #20]
 800acca:	621a      	str	r2, [r3, #32]
}
 800accc:	46c0      	nop			; (mov r8, r8)
 800acce:	46bd      	mov	sp, r7
 800acd0:	b006      	add	sp, #24
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	feff8fff 	.word	0xfeff8fff
 800acd8:	fffffcff 	.word	0xfffffcff
 800acdc:	40012c00 	.word	0x40012c00
 800ace0:	40014000 	.word	0x40014000
 800ace4:	40014400 	.word	0x40014400
 800ace8:	40014800 	.word	0x40014800
 800acec:	fffffbff 	.word	0xfffffbff
 800acf0:	fffff7ff 	.word	0xfffff7ff

0800acf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b086      	sub	sp, #24
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6a1b      	ldr	r3, [r3, #32]
 800ad02:	4a35      	ldr	r2, [pc, #212]	; (800add8 <TIM_OC3_SetConfig+0xe4>)
 800ad04:	401a      	ands	r2, r3
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6a1b      	ldr	r3, [r3, #32]
 800ad0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	69db      	ldr	r3, [r3, #28]
 800ad1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	4a2f      	ldr	r2, [pc, #188]	; (800addc <TIM_OC3_SetConfig+0xe8>)
 800ad20:	4013      	ands	r3, r2
 800ad22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2203      	movs	r2, #3
 800ad28:	4393      	bics	r3, r2
 800ad2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	68fa      	ldr	r2, [r7, #12]
 800ad32:	4313      	orrs	r3, r2
 800ad34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	4a29      	ldr	r2, [pc, #164]	; (800ade0 <TIM_OC3_SetConfig+0xec>)
 800ad3a:	4013      	ands	r3, r2
 800ad3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	021b      	lsls	r3, r3, #8
 800ad44:	697a      	ldr	r2, [r7, #20]
 800ad46:	4313      	orrs	r3, r2
 800ad48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	4a25      	ldr	r2, [pc, #148]	; (800ade4 <TIM_OC3_SetConfig+0xf0>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d10d      	bne.n	800ad6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	4a24      	ldr	r2, [pc, #144]	; (800ade8 <TIM_OC3_SetConfig+0xf4>)
 800ad56:	4013      	ands	r3, r2
 800ad58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	021b      	lsls	r3, r3, #8
 800ad60:	697a      	ldr	r2, [r7, #20]
 800ad62:	4313      	orrs	r3, r2
 800ad64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	4a20      	ldr	r2, [pc, #128]	; (800adec <TIM_OC3_SetConfig+0xf8>)
 800ad6a:	4013      	ands	r3, r2
 800ad6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	4a1c      	ldr	r2, [pc, #112]	; (800ade4 <TIM_OC3_SetConfig+0xf0>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d00b      	beq.n	800ad8e <TIM_OC3_SetConfig+0x9a>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	4a1d      	ldr	r2, [pc, #116]	; (800adf0 <TIM_OC3_SetConfig+0xfc>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d007      	beq.n	800ad8e <TIM_OC3_SetConfig+0x9a>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	4a1c      	ldr	r2, [pc, #112]	; (800adf4 <TIM_OC3_SetConfig+0x100>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d003      	beq.n	800ad8e <TIM_OC3_SetConfig+0x9a>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	4a1b      	ldr	r2, [pc, #108]	; (800adf8 <TIM_OC3_SetConfig+0x104>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d113      	bne.n	800adb6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	4a1a      	ldr	r2, [pc, #104]	; (800adfc <TIM_OC3_SetConfig+0x108>)
 800ad92:	4013      	ands	r3, r2
 800ad94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	4a19      	ldr	r2, [pc, #100]	; (800ae00 <TIM_OC3_SetConfig+0x10c>)
 800ad9a:	4013      	ands	r3, r2
 800ad9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	695b      	ldr	r3, [r3, #20]
 800ada2:	011b      	lsls	r3, r3, #4
 800ada4:	693a      	ldr	r2, [r7, #16]
 800ada6:	4313      	orrs	r3, r2
 800ada8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	699b      	ldr	r3, [r3, #24]
 800adae:	011b      	lsls	r3, r3, #4
 800adb0:	693a      	ldr	r2, [r7, #16]
 800adb2:	4313      	orrs	r3, r2
 800adb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	693a      	ldr	r2, [r7, #16]
 800adba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	68fa      	ldr	r2, [r7, #12]
 800adc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	685a      	ldr	r2, [r3, #4]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	697a      	ldr	r2, [r7, #20]
 800adce:	621a      	str	r2, [r3, #32]
}
 800add0:	46c0      	nop			; (mov r8, r8)
 800add2:	46bd      	mov	sp, r7
 800add4:	b006      	add	sp, #24
 800add6:	bd80      	pop	{r7, pc}
 800add8:	fffffeff 	.word	0xfffffeff
 800addc:	fffeff8f 	.word	0xfffeff8f
 800ade0:	fffffdff 	.word	0xfffffdff
 800ade4:	40012c00 	.word	0x40012c00
 800ade8:	fffff7ff 	.word	0xfffff7ff
 800adec:	fffffbff 	.word	0xfffffbff
 800adf0:	40014000 	.word	0x40014000
 800adf4:	40014400 	.word	0x40014400
 800adf8:	40014800 	.word	0x40014800
 800adfc:	ffffefff 	.word	0xffffefff
 800ae00:	ffffdfff 	.word	0xffffdfff

0800ae04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b086      	sub	sp, #24
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6a1b      	ldr	r3, [r3, #32]
 800ae12:	4a28      	ldr	r2, [pc, #160]	; (800aeb4 <TIM_OC4_SetConfig+0xb0>)
 800ae14:	401a      	ands	r2, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6a1b      	ldr	r3, [r3, #32]
 800ae1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	69db      	ldr	r3, [r3, #28]
 800ae2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	4a22      	ldr	r2, [pc, #136]	; (800aeb8 <TIM_OC4_SetConfig+0xb4>)
 800ae30:	4013      	ands	r3, r2
 800ae32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	4a21      	ldr	r2, [pc, #132]	; (800aebc <TIM_OC4_SetConfig+0xb8>)
 800ae38:	4013      	ands	r3, r2
 800ae3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	021b      	lsls	r3, r3, #8
 800ae42:	68fa      	ldr	r2, [r7, #12]
 800ae44:	4313      	orrs	r3, r2
 800ae46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	4a1d      	ldr	r2, [pc, #116]	; (800aec0 <TIM_OC4_SetConfig+0xbc>)
 800ae4c:	4013      	ands	r3, r2
 800ae4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	031b      	lsls	r3, r3, #12
 800ae56:	693a      	ldr	r2, [r7, #16]
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	4a19      	ldr	r2, [pc, #100]	; (800aec4 <TIM_OC4_SetConfig+0xc0>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d00b      	beq.n	800ae7c <TIM_OC4_SetConfig+0x78>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4a18      	ldr	r2, [pc, #96]	; (800aec8 <TIM_OC4_SetConfig+0xc4>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d007      	beq.n	800ae7c <TIM_OC4_SetConfig+0x78>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	4a17      	ldr	r2, [pc, #92]	; (800aecc <TIM_OC4_SetConfig+0xc8>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d003      	beq.n	800ae7c <TIM_OC4_SetConfig+0x78>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4a16      	ldr	r2, [pc, #88]	; (800aed0 <TIM_OC4_SetConfig+0xcc>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d109      	bne.n	800ae90 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	4a15      	ldr	r2, [pc, #84]	; (800aed4 <TIM_OC4_SetConfig+0xd0>)
 800ae80:	4013      	ands	r3, r2
 800ae82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	695b      	ldr	r3, [r3, #20]
 800ae88:	019b      	lsls	r3, r3, #6
 800ae8a:	697a      	ldr	r2, [r7, #20]
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	697a      	ldr	r2, [r7, #20]
 800ae94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	68fa      	ldr	r2, [r7, #12]
 800ae9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	685a      	ldr	r2, [r3, #4]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	693a      	ldr	r2, [r7, #16]
 800aea8:	621a      	str	r2, [r3, #32]
}
 800aeaa:	46c0      	nop			; (mov r8, r8)
 800aeac:	46bd      	mov	sp, r7
 800aeae:	b006      	add	sp, #24
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	46c0      	nop			; (mov r8, r8)
 800aeb4:	ffffefff 	.word	0xffffefff
 800aeb8:	feff8fff 	.word	0xfeff8fff
 800aebc:	fffffcff 	.word	0xfffffcff
 800aec0:	ffffdfff 	.word	0xffffdfff
 800aec4:	40012c00 	.word	0x40012c00
 800aec8:	40014000 	.word	0x40014000
 800aecc:	40014400 	.word	0x40014400
 800aed0:	40014800 	.word	0x40014800
 800aed4:	ffffbfff 	.word	0xffffbfff

0800aed8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b086      	sub	sp, #24
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6a1b      	ldr	r3, [r3, #32]
 800aee6:	4a25      	ldr	r2, [pc, #148]	; (800af7c <TIM_OC5_SetConfig+0xa4>)
 800aee8:	401a      	ands	r2, r3
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6a1b      	ldr	r3, [r3, #32]
 800aef2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aefe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	4a1f      	ldr	r2, [pc, #124]	; (800af80 <TIM_OC5_SetConfig+0xa8>)
 800af04:	4013      	ands	r3, r2
 800af06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	4313      	orrs	r3, r2
 800af10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	4a1b      	ldr	r2, [pc, #108]	; (800af84 <TIM_OC5_SetConfig+0xac>)
 800af16:	4013      	ands	r3, r2
 800af18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	041b      	lsls	r3, r3, #16
 800af20:	693a      	ldr	r2, [r7, #16]
 800af22:	4313      	orrs	r3, r2
 800af24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	4a17      	ldr	r2, [pc, #92]	; (800af88 <TIM_OC5_SetConfig+0xb0>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d00b      	beq.n	800af46 <TIM_OC5_SetConfig+0x6e>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4a16      	ldr	r2, [pc, #88]	; (800af8c <TIM_OC5_SetConfig+0xb4>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d007      	beq.n	800af46 <TIM_OC5_SetConfig+0x6e>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4a15      	ldr	r2, [pc, #84]	; (800af90 <TIM_OC5_SetConfig+0xb8>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d003      	beq.n	800af46 <TIM_OC5_SetConfig+0x6e>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	4a14      	ldr	r2, [pc, #80]	; (800af94 <TIM_OC5_SetConfig+0xbc>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d109      	bne.n	800af5a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	4a0c      	ldr	r2, [pc, #48]	; (800af7c <TIM_OC5_SetConfig+0xa4>)
 800af4a:	4013      	ands	r3, r2
 800af4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	695b      	ldr	r3, [r3, #20]
 800af52:	021b      	lsls	r3, r3, #8
 800af54:	697a      	ldr	r2, [r7, #20]
 800af56:	4313      	orrs	r3, r2
 800af58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	697a      	ldr	r2, [r7, #20]
 800af5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	68fa      	ldr	r2, [r7, #12]
 800af64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	685a      	ldr	r2, [r3, #4]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	693a      	ldr	r2, [r7, #16]
 800af72:	621a      	str	r2, [r3, #32]
}
 800af74:	46c0      	nop			; (mov r8, r8)
 800af76:	46bd      	mov	sp, r7
 800af78:	b006      	add	sp, #24
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	fffeffff 	.word	0xfffeffff
 800af80:	fffeff8f 	.word	0xfffeff8f
 800af84:	fffdffff 	.word	0xfffdffff
 800af88:	40012c00 	.word	0x40012c00
 800af8c:	40014000 	.word	0x40014000
 800af90:	40014400 	.word	0x40014400
 800af94:	40014800 	.word	0x40014800

0800af98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b086      	sub	sp, #24
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6a1b      	ldr	r3, [r3, #32]
 800afa6:	4a26      	ldr	r2, [pc, #152]	; (800b040 <TIM_OC6_SetConfig+0xa8>)
 800afa8:	401a      	ands	r2, r3
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6a1b      	ldr	r3, [r3, #32]
 800afb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	4a20      	ldr	r2, [pc, #128]	; (800b044 <TIM_OC6_SetConfig+0xac>)
 800afc4:	4013      	ands	r3, r2
 800afc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	021b      	lsls	r3, r3, #8
 800afce:	68fa      	ldr	r2, [r7, #12]
 800afd0:	4313      	orrs	r3, r2
 800afd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	4a1c      	ldr	r2, [pc, #112]	; (800b048 <TIM_OC6_SetConfig+0xb0>)
 800afd8:	4013      	ands	r3, r2
 800afda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	689b      	ldr	r3, [r3, #8]
 800afe0:	051b      	lsls	r3, r3, #20
 800afe2:	693a      	ldr	r2, [r7, #16]
 800afe4:	4313      	orrs	r3, r2
 800afe6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	4a18      	ldr	r2, [pc, #96]	; (800b04c <TIM_OC6_SetConfig+0xb4>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d00b      	beq.n	800b008 <TIM_OC6_SetConfig+0x70>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	4a17      	ldr	r2, [pc, #92]	; (800b050 <TIM_OC6_SetConfig+0xb8>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d007      	beq.n	800b008 <TIM_OC6_SetConfig+0x70>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	4a16      	ldr	r2, [pc, #88]	; (800b054 <TIM_OC6_SetConfig+0xbc>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d003      	beq.n	800b008 <TIM_OC6_SetConfig+0x70>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	4a15      	ldr	r2, [pc, #84]	; (800b058 <TIM_OC6_SetConfig+0xc0>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d109      	bne.n	800b01c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	4a14      	ldr	r2, [pc, #80]	; (800b05c <TIM_OC6_SetConfig+0xc4>)
 800b00c:	4013      	ands	r3, r2
 800b00e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	695b      	ldr	r3, [r3, #20]
 800b014:	029b      	lsls	r3, r3, #10
 800b016:	697a      	ldr	r2, [r7, #20]
 800b018:	4313      	orrs	r3, r2
 800b01a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	697a      	ldr	r2, [r7, #20]
 800b020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	68fa      	ldr	r2, [r7, #12]
 800b026:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	685a      	ldr	r2, [r3, #4]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	693a      	ldr	r2, [r7, #16]
 800b034:	621a      	str	r2, [r3, #32]
}
 800b036:	46c0      	nop			; (mov r8, r8)
 800b038:	46bd      	mov	sp, r7
 800b03a:	b006      	add	sp, #24
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	46c0      	nop			; (mov r8, r8)
 800b040:	ffefffff 	.word	0xffefffff
 800b044:	feff8fff 	.word	0xfeff8fff
 800b048:	ffdfffff 	.word	0xffdfffff
 800b04c:	40012c00 	.word	0x40012c00
 800b050:	40014000 	.word	0x40014000
 800b054:	40014400 	.word	0x40014400
 800b058:	40014800 	.word	0x40014800
 800b05c:	fffbffff 	.word	0xfffbffff

0800b060 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b086      	sub	sp, #24
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	6a1b      	ldr	r3, [r3, #32]
 800b070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	6a1b      	ldr	r3, [r3, #32]
 800b076:	2201      	movs	r2, #1
 800b078:	4393      	bics	r3, r2
 800b07a:	001a      	movs	r2, r3
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	699b      	ldr	r3, [r3, #24]
 800b084:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	22f0      	movs	r2, #240	; 0xf0
 800b08a:	4393      	bics	r3, r2
 800b08c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	011b      	lsls	r3, r3, #4
 800b092:	693a      	ldr	r2, [r7, #16]
 800b094:	4313      	orrs	r3, r2
 800b096:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	220a      	movs	r2, #10
 800b09c:	4393      	bics	r3, r2
 800b09e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b0a0:	697a      	ldr	r2, [r7, #20]
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	693a      	ldr	r2, [r7, #16]
 800b0ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	697a      	ldr	r2, [r7, #20]
 800b0b2:	621a      	str	r2, [r3, #32]
}
 800b0b4:	46c0      	nop			; (mov r8, r8)
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	b006      	add	sp, #24
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b086      	sub	sp, #24
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	6a1b      	ldr	r3, [r3, #32]
 800b0cc:	2210      	movs	r2, #16
 800b0ce:	4393      	bics	r3, r2
 800b0d0:	001a      	movs	r2, r3
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	699b      	ldr	r3, [r3, #24]
 800b0da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	6a1b      	ldr	r3, [r3, #32]
 800b0e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	4a0d      	ldr	r2, [pc, #52]	; (800b11c <TIM_TI2_ConfigInputStage+0x60>)
 800b0e6:	4013      	ands	r3, r2
 800b0e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	031b      	lsls	r3, r3, #12
 800b0ee:	697a      	ldr	r2, [r7, #20]
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	22a0      	movs	r2, #160	; 0xa0
 800b0f8:	4393      	bics	r3, r2
 800b0fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	011b      	lsls	r3, r3, #4
 800b100:	693a      	ldr	r2, [r7, #16]
 800b102:	4313      	orrs	r3, r2
 800b104:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	697a      	ldr	r2, [r7, #20]
 800b10a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	693a      	ldr	r2, [r7, #16]
 800b110:	621a      	str	r2, [r3, #32]
}
 800b112:	46c0      	nop			; (mov r8, r8)
 800b114:	46bd      	mov	sp, r7
 800b116:	b006      	add	sp, #24
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	46c0      	nop			; (mov r8, r8)
 800b11c:	ffff0fff 	.word	0xffff0fff

0800b120 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	689b      	ldr	r3, [r3, #8]
 800b12e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	4a08      	ldr	r2, [pc, #32]	; (800b154 <TIM_ITRx_SetConfig+0x34>)
 800b134:	4013      	ands	r3, r2
 800b136:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b138:	683a      	ldr	r2, [r7, #0]
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	4313      	orrs	r3, r2
 800b13e:	2207      	movs	r2, #7
 800b140:	4313      	orrs	r3, r2
 800b142:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	68fa      	ldr	r2, [r7, #12]
 800b148:	609a      	str	r2, [r3, #8]
}
 800b14a:	46c0      	nop			; (mov r8, r8)
 800b14c:	46bd      	mov	sp, r7
 800b14e:	b004      	add	sp, #16
 800b150:	bd80      	pop	{r7, pc}
 800b152:	46c0      	nop			; (mov r8, r8)
 800b154:	ffcfff8f 	.word	0xffcfff8f

0800b158 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b086      	sub	sp, #24
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	607a      	str	r2, [r7, #4]
 800b164:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	689b      	ldr	r3, [r3, #8]
 800b16a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	4a09      	ldr	r2, [pc, #36]	; (800b194 <TIM_ETR_SetConfig+0x3c>)
 800b170:	4013      	ands	r3, r2
 800b172:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	021a      	lsls	r2, r3, #8
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	431a      	orrs	r2, r3
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	4313      	orrs	r3, r2
 800b180:	697a      	ldr	r2, [r7, #20]
 800b182:	4313      	orrs	r3, r2
 800b184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	697a      	ldr	r2, [r7, #20]
 800b18a:	609a      	str	r2, [r3, #8]
}
 800b18c:	46c0      	nop			; (mov r8, r8)
 800b18e:	46bd      	mov	sp, r7
 800b190:	b006      	add	sp, #24
 800b192:	bd80      	pop	{r7, pc}
 800b194:	ffff00ff 	.word	0xffff00ff

0800b198 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b086      	sub	sp, #24
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	221f      	movs	r2, #31
 800b1a8:	4013      	ands	r3, r2
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	409a      	lsls	r2, r3
 800b1ae:	0013      	movs	r3, r2
 800b1b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	6a1b      	ldr	r3, [r3, #32]
 800b1b6:	697a      	ldr	r2, [r7, #20]
 800b1b8:	43d2      	mvns	r2, r2
 800b1ba:	401a      	ands	r2, r3
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	6a1a      	ldr	r2, [r3, #32]
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	211f      	movs	r1, #31
 800b1c8:	400b      	ands	r3, r1
 800b1ca:	6879      	ldr	r1, [r7, #4]
 800b1cc:	4099      	lsls	r1, r3
 800b1ce:	000b      	movs	r3, r1
 800b1d0:	431a      	orrs	r2, r3
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	621a      	str	r2, [r3, #32]
}
 800b1d6:	46c0      	nop			; (mov r8, r8)
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	b006      	add	sp, #24
 800b1dc:	bd80      	pop	{r7, pc}
	...

0800b1e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	223c      	movs	r2, #60	; 0x3c
 800b1ee:	5c9b      	ldrb	r3, [r3, r2]
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d101      	bne.n	800b1f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b1f4:	2302      	movs	r3, #2
 800b1f6:	e055      	b.n	800b2a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	223c      	movs	r2, #60	; 0x3c
 800b1fc:	2101      	movs	r1, #1
 800b1fe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	223d      	movs	r2, #61	; 0x3d
 800b204:	2102      	movs	r1, #2
 800b206:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	685b      	ldr	r3, [r3, #4]
 800b20e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	689b      	ldr	r3, [r3, #8]
 800b216:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4a23      	ldr	r2, [pc, #140]	; (800b2ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d108      	bne.n	800b234 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	4a22      	ldr	r2, [pc, #136]	; (800b2b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b226:	4013      	ands	r3, r2
 800b228:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	68fa      	ldr	r2, [r7, #12]
 800b230:	4313      	orrs	r3, r2
 800b232:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2270      	movs	r2, #112	; 0x70
 800b238:	4393      	bics	r3, r2
 800b23a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	68fa      	ldr	r2, [r7, #12]
 800b242:	4313      	orrs	r3, r2
 800b244:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	68fa      	ldr	r2, [r7, #12]
 800b24c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4a16      	ldr	r2, [pc, #88]	; (800b2ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d00f      	beq.n	800b278 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681a      	ldr	r2, [r3, #0]
 800b25c:	2380      	movs	r3, #128	; 0x80
 800b25e:	05db      	lsls	r3, r3, #23
 800b260:	429a      	cmp	r2, r3
 800b262:	d009      	beq.n	800b278 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4a12      	ldr	r2, [pc, #72]	; (800b2b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d004      	beq.n	800b278 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4a11      	ldr	r2, [pc, #68]	; (800b2b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d10c      	bne.n	800b292 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	2280      	movs	r2, #128	; 0x80
 800b27c:	4393      	bics	r3, r2
 800b27e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	68ba      	ldr	r2, [r7, #8]
 800b286:	4313      	orrs	r3, r2
 800b288:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	68ba      	ldr	r2, [r7, #8]
 800b290:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	223d      	movs	r2, #61	; 0x3d
 800b296:	2101      	movs	r1, #1
 800b298:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	223c      	movs	r2, #60	; 0x3c
 800b29e:	2100      	movs	r1, #0
 800b2a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b2a2:	2300      	movs	r3, #0
}
 800b2a4:	0018      	movs	r0, r3
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	b004      	add	sp, #16
 800b2aa:	bd80      	pop	{r7, pc}
 800b2ac:	40012c00 	.word	0x40012c00
 800b2b0:	ff0fffff 	.word	0xff0fffff
 800b2b4:	40000400 	.word	0x40000400
 800b2b8:	40014000 	.word	0x40014000

0800b2bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b084      	sub	sp, #16
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	223c      	movs	r2, #60	; 0x3c
 800b2ce:	5c9b      	ldrb	r3, [r3, r2]
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d101      	bne.n	800b2d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b2d4:	2302      	movs	r3, #2
 800b2d6:	e079      	b.n	800b3cc <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	223c      	movs	r2, #60	; 0x3c
 800b2dc:	2101      	movs	r1, #1
 800b2de:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	22ff      	movs	r2, #255	; 0xff
 800b2e4:	4393      	bics	r3, r2
 800b2e6:	001a      	movs	r2, r3
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	4a38      	ldr	r2, [pc, #224]	; (800b3d4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800b2f4:	401a      	ands	r2, r3
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	4a35      	ldr	r2, [pc, #212]	; (800b3d8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b302:	401a      	ands	r2, r3
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	4313      	orrs	r3, r2
 800b30a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	4a33      	ldr	r2, [pc, #204]	; (800b3dc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b310:	401a      	ands	r2, r3
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4313      	orrs	r3, r2
 800b318:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	4a30      	ldr	r2, [pc, #192]	; (800b3e0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b31e:	401a      	ands	r2, r3
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	691b      	ldr	r3, [r3, #16]
 800b324:	4313      	orrs	r3, r2
 800b326:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	4a2e      	ldr	r2, [pc, #184]	; (800b3e4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800b32c:	401a      	ands	r2, r3
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	695b      	ldr	r3, [r3, #20]
 800b332:	4313      	orrs	r3, r2
 800b334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	4a2b      	ldr	r2, [pc, #172]	; (800b3e8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800b33a:	401a      	ands	r2, r3
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b340:	4313      	orrs	r3, r2
 800b342:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	4a29      	ldr	r2, [pc, #164]	; (800b3ec <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800b348:	401a      	ands	r2, r3
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	699b      	ldr	r3, [r3, #24]
 800b34e:	041b      	lsls	r3, r3, #16
 800b350:	4313      	orrs	r3, r2
 800b352:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4a25      	ldr	r2, [pc, #148]	; (800b3f0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d106      	bne.n	800b36c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	4a24      	ldr	r2, [pc, #144]	; (800b3f4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b362:	401a      	ands	r2, r3
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	69db      	ldr	r3, [r3, #28]
 800b368:	4313      	orrs	r3, r2
 800b36a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4a1f      	ldr	r2, [pc, #124]	; (800b3f0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d121      	bne.n	800b3ba <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	4a1f      	ldr	r2, [pc, #124]	; (800b3f8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b37a:	401a      	ands	r2, r3
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b380:	051b      	lsls	r3, r3, #20
 800b382:	4313      	orrs	r3, r2
 800b384:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	4a1c      	ldr	r2, [pc, #112]	; (800b3fc <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800b38a:	401a      	ands	r2, r3
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	6a1b      	ldr	r3, [r3, #32]
 800b390:	4313      	orrs	r3, r2
 800b392:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	4a1a      	ldr	r2, [pc, #104]	; (800b400 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800b398:	401a      	ands	r2, r3
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4a12      	ldr	r2, [pc, #72]	; (800b3f0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d106      	bne.n	800b3ba <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	4a15      	ldr	r2, [pc, #84]	; (800b404 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800b3b0:	401a      	ands	r2, r3
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	68fa      	ldr	r2, [r7, #12]
 800b3c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	223c      	movs	r2, #60	; 0x3c
 800b3c6:	2100      	movs	r1, #0
 800b3c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b3ca:	2300      	movs	r3, #0
}
 800b3cc:	0018      	movs	r0, r3
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	b004      	add	sp, #16
 800b3d2:	bd80      	pop	{r7, pc}
 800b3d4:	fffffcff 	.word	0xfffffcff
 800b3d8:	fffffbff 	.word	0xfffffbff
 800b3dc:	fffff7ff 	.word	0xfffff7ff
 800b3e0:	ffffefff 	.word	0xffffefff
 800b3e4:	ffffdfff 	.word	0xffffdfff
 800b3e8:	ffffbfff 	.word	0xffffbfff
 800b3ec:	fff0ffff 	.word	0xfff0ffff
 800b3f0:	40012c00 	.word	0x40012c00
 800b3f4:	efffffff 	.word	0xefffffff
 800b3f8:	ff0fffff 	.word	0xff0fffff
 800b3fc:	feffffff 	.word	0xfeffffff
 800b400:	fdffffff 	.word	0xfdffffff
 800b404:	dfffffff 	.word	0xdfffffff

0800b408 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b08a      	sub	sp, #40	; 0x28
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b414:	2327      	movs	r3, #39	; 0x27
 800b416:	18fb      	adds	r3, r7, r3
 800b418:	2200      	movs	r2, #0
 800b41a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	223c      	movs	r2, #60	; 0x3c
 800b420:	5c9b      	ldrb	r3, [r3, r2]
 800b422:	2b01      	cmp	r3, #1
 800b424:	d101      	bne.n	800b42a <HAL_TIMEx_ConfigBreakInput+0x22>
 800b426:	2302      	movs	r3, #2
 800b428:	e095      	b.n	800b556 <HAL_TIMEx_ConfigBreakInput+0x14e>
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	223c      	movs	r2, #60	; 0x3c
 800b42e:	2101      	movs	r1, #1
 800b430:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	2b04      	cmp	r3, #4
 800b438:	d019      	beq.n	800b46e <HAL_TIMEx_ConfigBreakInput+0x66>
 800b43a:	d822      	bhi.n	800b482 <HAL_TIMEx_ConfigBreakInput+0x7a>
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d002      	beq.n	800b446 <HAL_TIMEx_ConfigBreakInput+0x3e>
 800b440:	2b02      	cmp	r3, #2
 800b442:	d00a      	beq.n	800b45a <HAL_TIMEx_ConfigBreakInput+0x52>
 800b444:	e01d      	b.n	800b482 <HAL_TIMEx_ConfigBreakInput+0x7a>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800b446:	2301      	movs	r3, #1
 800b448:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800b44a:	2300      	movs	r3, #0
 800b44c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800b44e:	2380      	movs	r3, #128	; 0x80
 800b450:	009b      	lsls	r3, r3, #2
 800b452:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800b454:	2309      	movs	r3, #9
 800b456:	617b      	str	r3, [r7, #20]
      break;
 800b458:	e01c      	b.n	800b494 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800b45a:	2302      	movs	r3, #2
 800b45c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800b45e:	2301      	movs	r3, #1
 800b460:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800b462:	2380      	movs	r3, #128	; 0x80
 800b464:	00db      	lsls	r3, r3, #3
 800b466:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800b468:	230a      	movs	r3, #10
 800b46a:	617b      	str	r3, [r7, #20]
      break;
 800b46c:	e012      	b.n	800b494 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800b46e:	2304      	movs	r3, #4
 800b470:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800b472:	2302      	movs	r3, #2
 800b474:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800b476:	2380      	movs	r3, #128	; 0x80
 800b478:	011b      	lsls	r3, r3, #4
 800b47a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800b47c:	230b      	movs	r3, #11
 800b47e:	617b      	str	r3, [r7, #20]
      break;
 800b480:	e008      	b.n	800b494 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 800b482:	2300      	movs	r3, #0
 800b484:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 800b486:	2300      	movs	r3, #0
 800b488:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 800b48a:	2300      	movs	r3, #0
 800b48c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800b48e:	2300      	movs	r3, #0
 800b490:	617b      	str	r3, [r7, #20]
      break;
 800b492:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	2b01      	cmp	r3, #1
 800b498:	d003      	beq.n	800b4a2 <HAL_TIMEx_ConfigBreakInput+0x9a>
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	2b02      	cmp	r3, #2
 800b49e:	d027      	beq.n	800b4f0 <HAL_TIMEx_ConfigBreakInput+0xe8>
 800b4a0:	e04d      	b.n	800b53e <HAL_TIMEx_ConfigBreakInput+0x136>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b4a8:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800b4aa:	6a3b      	ldr	r3, [r7, #32]
 800b4ac:	43da      	mvns	r2, r3
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	4013      	ands	r3, r2
 800b4b2:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	685a      	ldr	r2, [r3, #4]
 800b4b8:	69bb      	ldr	r3, [r7, #24]
 800b4ba:	409a      	lsls	r2, r3
 800b4bc:	0013      	movs	r3, r2
 800b4be:	6a3a      	ldr	r2, [r7, #32]
 800b4c0:	4013      	ands	r3, r2
 800b4c2:	693a      	ldr	r2, [r7, #16]
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800b4c8:	69fb      	ldr	r3, [r7, #28]
 800b4ca:	43da      	mvns	r2, r3
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	4013      	ands	r3, r2
 800b4d0:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	689a      	ldr	r2, [r3, #8]
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	409a      	lsls	r2, r3
 800b4da:	0013      	movs	r3, r2
 800b4dc:	69fa      	ldr	r2, [r7, #28]
 800b4de:	4013      	ands	r3, r2
 800b4e0:	693a      	ldr	r2, [r7, #16]
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	693a      	ldr	r2, [r7, #16]
 800b4ec:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800b4ee:	e02b      	b.n	800b548 <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4f6:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800b4f8:	6a3b      	ldr	r3, [r7, #32]
 800b4fa:	43da      	mvns	r2, r3
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	4013      	ands	r3, r2
 800b500:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	685a      	ldr	r2, [r3, #4]
 800b506:	69bb      	ldr	r3, [r7, #24]
 800b508:	409a      	lsls	r2, r3
 800b50a:	0013      	movs	r3, r2
 800b50c:	6a3a      	ldr	r2, [r7, #32]
 800b50e:	4013      	ands	r3, r2
 800b510:	693a      	ldr	r2, [r7, #16]
 800b512:	4313      	orrs	r3, r2
 800b514:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800b516:	69fb      	ldr	r3, [r7, #28]
 800b518:	43da      	mvns	r2, r3
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	4013      	ands	r3, r2
 800b51e:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	689a      	ldr	r2, [r3, #8]
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	409a      	lsls	r2, r3
 800b528:	0013      	movs	r3, r2
 800b52a:	69fa      	ldr	r2, [r7, #28]
 800b52c:	4013      	ands	r3, r2
 800b52e:	693a      	ldr	r2, [r7, #16]
 800b530:	4313      	orrs	r3, r2
 800b532:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	693a      	ldr	r2, [r7, #16]
 800b53a:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800b53c:	e004      	b.n	800b548 <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    default:
      status = HAL_ERROR;
 800b53e:	2327      	movs	r3, #39	; 0x27
 800b540:	18fb      	adds	r3, r7, r3
 800b542:	2201      	movs	r2, #1
 800b544:	701a      	strb	r2, [r3, #0]
      break;
 800b546:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	223c      	movs	r2, #60	; 0x3c
 800b54c:	2100      	movs	r1, #0
 800b54e:	5499      	strb	r1, [r3, r2]

  return status;
 800b550:	2327      	movs	r3, #39	; 0x27
 800b552:	18fb      	adds	r3, r7, r3
 800b554:	781b      	ldrb	r3, [r3, #0]
}
 800b556:	0018      	movs	r0, r3
 800b558:	46bd      	mov	sp, r7
 800b55a:	b00a      	add	sp, #40	; 0x28
 800b55c:	bd80      	pop	{r7, pc}
	...

0800b560 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d101      	bne.n	800b572 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800b56e:	2301      	movs	r3, #1
 800b570:	e03f      	b.n	800b5f2 <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2259      	movs	r2, #89	; 0x59
 800b576:	5c9b      	ldrb	r3, [r3, r2]
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d107      	bne.n	800b58e <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2258      	movs	r2, #88	; 0x58
 800b582:	2100      	movs	r1, #0
 800b584:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	0018      	movs	r0, r3
 800b58a:	f7f9 fd4d 	bl	8005028 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2259      	movs	r2, #89	; 0x59
 800b592:	2102      	movs	r1, #2
 800b594:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	681a      	ldr	r2, [r3, #0]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	2101      	movs	r1, #1
 800b5a2:	438a      	bics	r2, r1
 800b5a4:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	0018      	movs	r0, r3
 800b5aa:	f000 fae3 	bl	800bb74 <USART_SetConfig>
 800b5ae:	0003      	movs	r3, r0
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d101      	bne.n	800b5b8 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	e01c      	b.n	800b5f2 <HAL_USART_Init+0x92>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	685a      	ldr	r2, [r3, #4]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	490e      	ldr	r1, [pc, #56]	; (800b5fc <HAL_USART_Init+0x9c>)
 800b5c4:	400a      	ands	r2, r1
 800b5c6:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	689a      	ldr	r2, [r3, #8]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	212a      	movs	r1, #42	; 0x2a
 800b5d4:	438a      	bics	r2, r1
 800b5d6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	681a      	ldr	r2, [r3, #0]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	2101      	movs	r1, #1
 800b5e4:	430a      	orrs	r2, r1
 800b5e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	0018      	movs	r0, r3
 800b5ec:	f000 fd5e 	bl	800c0ac <USART_CheckIdleState>
 800b5f0:	0003      	movs	r3, r0
}
 800b5f2:	0018      	movs	r0, r3
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	b002      	add	sp, #8
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	46c0      	nop			; (mov r8, r8)
 800b5fc:	ffffbfff 	.word	0xffffbfff

0800b600 <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b08a      	sub	sp, #40	; 0x28
 800b604:	af02      	add	r7, sp, #8
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	603b      	str	r3, [r7, #0]
 800b60c:	1dbb      	adds	r3, r7, #6
 800b60e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2259      	movs	r2, #89	; 0x59
 800b614:	5c9b      	ldrb	r3, [r3, r2]
 800b616:	b2db      	uxtb	r3, r3
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d000      	beq.n	800b61e <HAL_USART_Transmit+0x1e>
 800b61c:	e0a9      	b.n	800b772 <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d003      	beq.n	800b62c <HAL_USART_Transmit+0x2c>
 800b624:	1dbb      	adds	r3, r7, #6
 800b626:	881b      	ldrh	r3, [r3, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d101      	bne.n	800b630 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b62c:	2301      	movs	r3, #1
 800b62e:	e0a1      	b.n	800b774 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	689a      	ldr	r2, [r3, #8]
 800b634:	2380      	movs	r3, #128	; 0x80
 800b636:	015b      	lsls	r3, r3, #5
 800b638:	429a      	cmp	r2, r3
 800b63a:	d109      	bne.n	800b650 <HAL_USART_Transmit+0x50>
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	691b      	ldr	r3, [r3, #16]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d105      	bne.n	800b650 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	2201      	movs	r2, #1
 800b648:	4013      	ands	r3, r2
 800b64a:	d001      	beq.n	800b650 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 800b64c:	2301      	movs	r3, #1
 800b64e:	e091      	b.n	800b774 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	2258      	movs	r2, #88	; 0x58
 800b654:	5c9b      	ldrb	r3, [r3, r2]
 800b656:	2b01      	cmp	r3, #1
 800b658:	d101      	bne.n	800b65e <HAL_USART_Transmit+0x5e>
 800b65a:	2302      	movs	r3, #2
 800b65c:	e08a      	b.n	800b774 <HAL_USART_Transmit+0x174>
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2258      	movs	r2, #88	; 0x58
 800b662:	2101      	movs	r1, #1
 800b664:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2200      	movs	r2, #0
 800b66a:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2259      	movs	r2, #89	; 0x59
 800b670:	2112      	movs	r1, #18
 800b672:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b674:	f7f9 ff52 	bl	800551c <HAL_GetTick>
 800b678:	0003      	movs	r3, r0
 800b67a:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	1dba      	adds	r2, r7, #6
 800b680:	8812      	ldrh	r2, [r2, #0]
 800b682:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	1dba      	adds	r2, r7, #6
 800b688:	8812      	ldrh	r2, [r2, #0]
 800b68a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	689a      	ldr	r2, [r3, #8]
 800b690:	2380      	movs	r3, #128	; 0x80
 800b692:	015b      	lsls	r3, r3, #5
 800b694:	429a      	cmp	r2, r3
 800b696:	d108      	bne.n	800b6aa <HAL_USART_Transmit+0xaa>
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	691b      	ldr	r3, [r3, #16]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d104      	bne.n	800b6aa <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	61bb      	str	r3, [r7, #24]
 800b6a8:	e003      	b.n	800b6b2 <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800b6b2:	e02a      	b.n	800b70a <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b6b4:	697a      	ldr	r2, [r7, #20]
 800b6b6:	68f8      	ldr	r0, [r7, #12]
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	9300      	str	r3, [sp, #0]
 800b6bc:	0013      	movs	r3, r2
 800b6be:	2200      	movs	r2, #0
 800b6c0:	2180      	movs	r1, #128	; 0x80
 800b6c2:	f000 fa22 	bl	800bb0a <USART_WaitOnFlagUntilTimeout>
 800b6c6:	1e03      	subs	r3, r0, #0
 800b6c8:	d001      	beq.n	800b6ce <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800b6ca:	2303      	movs	r3, #3
 800b6cc:	e052      	b.n	800b774 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 800b6ce:	69fb      	ldr	r3, [r7, #28]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d10b      	bne.n	800b6ec <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 800b6d4:	69bb      	ldr	r3, [r7, #24]
 800b6d6:	881b      	ldrh	r3, [r3, #0]
 800b6d8:	001a      	movs	r2, r3
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	05d2      	lsls	r2, r2, #23
 800b6e0:	0dd2      	lsrs	r2, r2, #23
 800b6e2:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 800b6e4:	69bb      	ldr	r3, [r7, #24]
 800b6e6:	3302      	adds	r3, #2
 800b6e8:	61bb      	str	r3, [r7, #24]
 800b6ea:	e007      	b.n	800b6fc <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800b6ec:	69fb      	ldr	r3, [r7, #28]
 800b6ee:	781a      	ldrb	r2, [r3, #0]
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 800b6f6:	69fb      	ldr	r3, [r7, #28]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b700:	b29b      	uxth	r3, r3
 800b702:	3b01      	subs	r3, #1
 800b704:	b29a      	uxth	r2, r3
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b70e:	b29b      	uxth	r3, r3
 800b710:	2b00      	cmp	r3, #0
 800b712:	d1cf      	bne.n	800b6b4 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b714:	697a      	ldr	r2, [r7, #20]
 800b716:	68f8      	ldr	r0, [r7, #12]
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	9300      	str	r3, [sp, #0]
 800b71c:	0013      	movs	r3, r2
 800b71e:	2200      	movs	r2, #0
 800b720:	2140      	movs	r1, #64	; 0x40
 800b722:	f000 f9f2 	bl	800bb0a <USART_WaitOnFlagUntilTimeout>
 800b726:	1e03      	subs	r3, r0, #0
 800b728:	d001      	beq.n	800b72e <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 800b72a:	2303      	movs	r3, #3
 800b72c:	e022      	b.n	800b774 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	2240      	movs	r2, #64	; 0x40
 800b734:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2208      	movs	r2, #8
 800b73c:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	699a      	ldr	r2, [r3, #24]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2108      	movs	r1, #8
 800b74a:	430a      	orrs	r2, r1
 800b74c:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	699a      	ldr	r2, [r3, #24]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	2110      	movs	r1, #16
 800b75a:	430a      	orrs	r2, r1
 800b75c:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2259      	movs	r2, #89	; 0x59
 800b762:	2101      	movs	r1, #1
 800b764:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2258      	movs	r2, #88	; 0x58
 800b76a:	2100      	movs	r1, #0
 800b76c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800b76e:	2300      	movs	r3, #0
 800b770:	e000      	b.n	800b774 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b772:	2302      	movs	r3, #2
  }
}
 800b774:	0018      	movs	r0, r3
 800b776:	46bd      	mov	sp, r7
 800b778:	b008      	add	sp, #32
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b088      	sub	sp, #32
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	69db      	ldr	r3, [r3, #28]
 800b78a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	689b      	ldr	r3, [r3, #8]
 800b79a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	4ab3      	ldr	r2, [pc, #716]	; (800ba6c <HAL_USART_IRQHandler+0x2f0>)
 800b7a0:	4013      	ands	r3, r2
 800b7a2:	613b      	str	r3, [r7, #16]
                                      USART_ISR_UDR));
  if (errorflags == 0U)
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d117      	bne.n	800b7da <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b7aa:	69fb      	ldr	r3, [r7, #28]
 800b7ac:	2220      	movs	r2, #32
 800b7ae:	4013      	ands	r3, r2
 800b7b0:	d013      	beq.n	800b7da <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	2220      	movs	r2, #32
 800b7b6:	4013      	ands	r3, r2
 800b7b8:	d104      	bne.n	800b7c4 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b7ba:	697a      	ldr	r2, [r7, #20]
 800b7bc:	2380      	movs	r3, #128	; 0x80
 800b7be:	055b      	lsls	r3, r3, #21
 800b7c0:	4013      	ands	r3, r2
 800b7c2:	d00a      	beq.n	800b7da <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d100      	bne.n	800b7ce <HAL_USART_IRQHandler+0x52>
 800b7cc:	e14a      	b.n	800ba64 <HAL_USART_IRQHandler+0x2e8>
      {
        husart->RxISR(husart);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	0010      	movs	r0, r2
 800b7d6:	4798      	blx	r3
      }
      return;
 800b7d8:	e144      	b.n	800ba64 <HAL_USART_IRQHandler+0x2e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d100      	bne.n	800b7e2 <HAL_USART_IRQHandler+0x66>
 800b7e0:	e100      	b.n	800b9e4 <HAL_USART_IRQHandler+0x268>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	4aa2      	ldr	r2, [pc, #648]	; (800ba70 <HAL_USART_IRQHandler+0x2f4>)
 800b7e6:	4013      	ands	r3, r2
 800b7e8:	d105      	bne.n	800b7f6 <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 800b7ea:	69ba      	ldr	r2, [r7, #24]
 800b7ec:	2390      	movs	r3, #144	; 0x90
 800b7ee:	005b      	lsls	r3, r3, #1
 800b7f0:	4013      	ands	r3, r2
 800b7f2:	d100      	bne.n	800b7f6 <HAL_USART_IRQHandler+0x7a>
 800b7f4:	e0f6      	b.n	800b9e4 <HAL_USART_IRQHandler+0x268>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b7f6:	69fb      	ldr	r3, [r7, #28]
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	4013      	ands	r3, r2
 800b7fc:	d00e      	beq.n	800b81c <HAL_USART_IRQHandler+0xa0>
 800b7fe:	69ba      	ldr	r2, [r7, #24]
 800b800:	2380      	movs	r3, #128	; 0x80
 800b802:	005b      	lsls	r3, r3, #1
 800b804:	4013      	ands	r3, r2
 800b806:	d009      	beq.n	800b81c <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	2201      	movs	r2, #1
 800b80e:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b814:	2201      	movs	r2, #1
 800b816:	431a      	orrs	r2, r3
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b81c:	69fb      	ldr	r3, [r7, #28]
 800b81e:	2202      	movs	r2, #2
 800b820:	4013      	ands	r3, r2
 800b822:	d00d      	beq.n	800b840 <HAL_USART_IRQHandler+0xc4>
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	2201      	movs	r2, #1
 800b828:	4013      	ands	r3, r2
 800b82a:	d009      	beq.n	800b840 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2202      	movs	r2, #2
 800b832:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b838:	2204      	movs	r2, #4
 800b83a:	431a      	orrs	r2, r3
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b840:	69fb      	ldr	r3, [r7, #28]
 800b842:	2204      	movs	r2, #4
 800b844:	4013      	ands	r3, r2
 800b846:	d00d      	beq.n	800b864 <HAL_USART_IRQHandler+0xe8>
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	2201      	movs	r2, #1
 800b84c:	4013      	ands	r3, r2
 800b84e:	d009      	beq.n	800b864 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2204      	movs	r2, #4
 800b856:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b85c:	2202      	movs	r2, #2
 800b85e:	431a      	orrs	r2, r3
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b864:	69fb      	ldr	r3, [r7, #28]
 800b866:	2208      	movs	r2, #8
 800b868:	4013      	ands	r3, r2
 800b86a:	d011      	beq.n	800b890 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b86c:	69bb      	ldr	r3, [r7, #24]
 800b86e:	2220      	movs	r2, #32
 800b870:	4013      	ands	r3, r2
 800b872:	d103      	bne.n	800b87c <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	4a7e      	ldr	r2, [pc, #504]	; (800ba70 <HAL_USART_IRQHandler+0x2f4>)
 800b878:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b87a:	d009      	beq.n	800b890 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2208      	movs	r2, #8
 800b882:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b888:	2208      	movs	r2, #8
 800b88a:	431a      	orrs	r2, r3
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b890:	69fa      	ldr	r2, [r7, #28]
 800b892:	2380      	movs	r3, #128	; 0x80
 800b894:	011b      	lsls	r3, r3, #4
 800b896:	4013      	ands	r3, r2
 800b898:	d00f      	beq.n	800b8ba <HAL_USART_IRQHandler+0x13e>
 800b89a:	69ba      	ldr	r2, [r7, #24]
 800b89c:	2380      	movs	r3, #128	; 0x80
 800b89e:	04db      	lsls	r3, r3, #19
 800b8a0:	4013      	ands	r3, r2
 800b8a2:	d00a      	beq.n	800b8ba <HAL_USART_IRQHandler+0x13e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	2280      	movs	r2, #128	; 0x80
 800b8aa:	0112      	lsls	r2, r2, #4
 800b8ac:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8b2:	2280      	movs	r2, #128	; 0x80
 800b8b4:	431a      	orrs	r2, r3
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b8ba:	69fa      	ldr	r2, [r7, #28]
 800b8bc:	2380      	movs	r3, #128	; 0x80
 800b8be:	019b      	lsls	r3, r3, #6
 800b8c0:	4013      	ands	r3, r2
 800b8c2:	d01a      	beq.n	800b8fa <HAL_USART_IRQHandler+0x17e>
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	4013      	ands	r3, r2
 800b8ca:	d016      	beq.n	800b8fa <HAL_USART_IRQHandler+0x17e>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2259      	movs	r2, #89	; 0x59
 800b8d0:	5c9b      	ldrb	r3, [r3, r2]
 800b8d2:	b2db      	uxtb	r3, r3
 800b8d4:	2b22      	cmp	r3, #34	; 0x22
 800b8d6:	d105      	bne.n	800b8e4 <HAL_USART_IRQHandler+0x168>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	2280      	movs	r2, #128	; 0x80
 800b8de:	0192      	lsls	r2, r2, #6
 800b8e0:	621a      	str	r2, [r3, #32]
        return;
 800b8e2:	e0ca      	b.n	800ba7a <HAL_USART_IRQHandler+0x2fe>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	2280      	movs	r2, #128	; 0x80
 800b8ea:	0192      	lsls	r2, r2, #6
 800b8ec:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8f2:	2220      	movs	r2, #32
 800b8f4:	431a      	orrs	r2, r3
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d100      	bne.n	800b904 <HAL_USART_IRQHandler+0x188>
 800b902:	e0b1      	b.n	800ba68 <HAL_USART_IRQHandler+0x2ec>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b904:	69fb      	ldr	r3, [r7, #28]
 800b906:	2220      	movs	r2, #32
 800b908:	4013      	ands	r3, r2
 800b90a:	d011      	beq.n	800b930 <HAL_USART_IRQHandler+0x1b4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b90c:	69bb      	ldr	r3, [r7, #24]
 800b90e:	2220      	movs	r2, #32
 800b910:	4013      	ands	r3, r2
 800b912:	d104      	bne.n	800b91e <HAL_USART_IRQHandler+0x1a2>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b914:	697a      	ldr	r2, [r7, #20]
 800b916:	2380      	movs	r3, #128	; 0x80
 800b918:	055b      	lsls	r3, r3, #21
 800b91a:	4013      	ands	r3, r2
 800b91c:	d008      	beq.n	800b930 <HAL_USART_IRQHandler+0x1b4>
      {
        if (husart->RxISR != NULL)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b922:	2b00      	cmp	r3, #0
 800b924:	d004      	beq.n	800b930 <HAL_USART_IRQHandler+0x1b4>
        {
          husart->RxISR(husart);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b92a:	687a      	ldr	r2, [r7, #4]
 800b92c:	0010      	movs	r0, r2
 800b92e:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b934:	2208      	movs	r2, #8
 800b936:	4013      	ands	r3, r2
 800b938:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	689b      	ldr	r3, [r3, #8]
 800b940:	2240      	movs	r2, #64	; 0x40
 800b942:	4013      	ands	r3, r2
 800b944:	2b40      	cmp	r3, #64	; 0x40
 800b946:	d002      	beq.n	800b94e <HAL_USART_IRQHandler+0x1d2>
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d040      	beq.n	800b9d0 <HAL_USART_IRQHandler+0x254>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	0018      	movs	r0, r3
 800b952:	f000 f8a5 	bl	800baa0 <USART_EndTransfer>

        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	689b      	ldr	r3, [r3, #8]
 800b95c:	2240      	movs	r2, #64	; 0x40
 800b95e:	4013      	ands	r3, r2
 800b960:	2b40      	cmp	r3, #64	; 0x40
 800b962:	d130      	bne.n	800b9c6 <HAL_USART_IRQHandler+0x24a>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	689a      	ldr	r2, [r3, #8]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2140      	movs	r1, #64	; 0x40
 800b970:	438a      	bics	r2, r1
 800b972:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d008      	beq.n	800b98e <HAL_USART_IRQHandler+0x212>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b980:	2200      	movs	r2, #0
 800b982:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b988:	0018      	movs	r0, r3
 800b98a:	f7fa fa59 	bl	8005e40 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b992:	2b00      	cmp	r3, #0
 800b994:	d012      	beq.n	800b9bc <HAL_USART_IRQHandler+0x240>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b99a:	4a36      	ldr	r2, [pc, #216]	; (800ba74 <HAL_USART_IRQHandler+0x2f8>)
 800b99c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9a2:	0018      	movs	r0, r3
 800b9a4:	f7fa fa4c 	bl	8005e40 <HAL_DMA_Abort_IT>
 800b9a8:	1e03      	subs	r3, r0, #0
 800b9aa:	d019      	beq.n	800b9e0 <HAL_USART_IRQHandler+0x264>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9b6:	0018      	movs	r0, r3
 800b9b8:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b9ba:	e011      	b.n	800b9e0 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	0018      	movs	r0, r3
 800b9c0:	f000 f866 	bl	800ba90 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b9c4:	e00c      	b.n	800b9e0 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	0018      	movs	r0, r3
 800b9ca:	f000 f861 	bl	800ba90 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b9ce:	e007      	b.n	800b9e0 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	0018      	movs	r0, r3
 800b9d4:	f000 f85c 	bl	800ba90 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 800b9de:	e043      	b.n	800ba68 <HAL_USART_IRQHandler+0x2ec>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b9e0:	46c0      	nop			; (mov r8, r8)
    return;
 800b9e2:	e041      	b.n	800ba68 <HAL_USART_IRQHandler+0x2ec>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	2280      	movs	r2, #128	; 0x80
 800b9e8:	4013      	ands	r3, r2
 800b9ea:	d012      	beq.n	800ba12 <HAL_USART_IRQHandler+0x296>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b9ec:	69bb      	ldr	r3, [r7, #24]
 800b9ee:	2280      	movs	r2, #128	; 0x80
 800b9f0:	4013      	ands	r3, r2
 800b9f2:	d104      	bne.n	800b9fe <HAL_USART_IRQHandler+0x282>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b9f4:	697a      	ldr	r2, [r7, #20]
 800b9f6:	2380      	movs	r3, #128	; 0x80
 800b9f8:	041b      	lsls	r3, r3, #16
 800b9fa:	4013      	ands	r3, r2
 800b9fc:	d009      	beq.n	800ba12 <HAL_USART_IRQHandler+0x296>
  {
    if (husart->TxISR != NULL)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d038      	beq.n	800ba78 <HAL_USART_IRQHandler+0x2fc>
    {
      husart->TxISR(husart);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	0010      	movs	r0, r2
 800ba0e:	4798      	blx	r3
    }
    return;
 800ba10:	e032      	b.n	800ba78 <HAL_USART_IRQHandler+0x2fc>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ba12:	69fb      	ldr	r3, [r7, #28]
 800ba14:	2240      	movs	r2, #64	; 0x40
 800ba16:	4013      	ands	r3, r2
 800ba18:	d008      	beq.n	800ba2c <HAL_USART_IRQHandler+0x2b0>
 800ba1a:	69bb      	ldr	r3, [r7, #24]
 800ba1c:	2240      	movs	r2, #64	; 0x40
 800ba1e:	4013      	ands	r3, r2
 800ba20:	d004      	beq.n	800ba2c <HAL_USART_IRQHandler+0x2b0>
  {
    USART_EndTransmit_IT(husart);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	0018      	movs	r0, r3
 800ba26:	f000 fb85 	bl	800c134 <USART_EndTransmit_IT>
    return;
 800ba2a:	e026      	b.n	800ba7a <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ba2c:	69fa      	ldr	r2, [r7, #28]
 800ba2e:	2380      	movs	r3, #128	; 0x80
 800ba30:	041b      	lsls	r3, r3, #16
 800ba32:	4013      	ands	r3, r2
 800ba34:	d009      	beq.n	800ba4a <HAL_USART_IRQHandler+0x2ce>
 800ba36:	69ba      	ldr	r2, [r7, #24]
 800ba38:	2380      	movs	r3, #128	; 0x80
 800ba3a:	05db      	lsls	r3, r3, #23
 800ba3c:	4013      	ands	r3, r2
 800ba3e:	d004      	beq.n	800ba4a <HAL_USART_IRQHandler+0x2ce>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	0018      	movs	r0, r3
 800ba44:	f000 fbc1 	bl	800c1ca <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800ba48:	e017      	b.n	800ba7a <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ba4a:	69fa      	ldr	r2, [r7, #28]
 800ba4c:	2380      	movs	r3, #128	; 0x80
 800ba4e:	045b      	lsls	r3, r3, #17
 800ba50:	4013      	ands	r3, r2
 800ba52:	d012      	beq.n	800ba7a <HAL_USART_IRQHandler+0x2fe>
 800ba54:	69bb      	ldr	r3, [r7, #24]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	da0f      	bge.n	800ba7a <HAL_USART_IRQHandler+0x2fe>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	0018      	movs	r0, r3
 800ba5e:	f000 fbac 	bl	800c1ba <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800ba62:	e00a      	b.n	800ba7a <HAL_USART_IRQHandler+0x2fe>
      return;
 800ba64:	46c0      	nop			; (mov r8, r8)
 800ba66:	e008      	b.n	800ba7a <HAL_USART_IRQHandler+0x2fe>
    return;
 800ba68:	46c0      	nop			; (mov r8, r8)
 800ba6a:	e006      	b.n	800ba7a <HAL_USART_IRQHandler+0x2fe>
 800ba6c:	0000280f 	.word	0x0000280f
 800ba70:	10000001 	.word	0x10000001
 800ba74:	0800bae1 	.word	0x0800bae1
    return;
 800ba78:	46c0      	nop			; (mov r8, r8)
  }
}
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	b008      	add	sp, #32
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 800ba88:	46c0      	nop			; (mov r8, r8)
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	b002      	add	sp, #8
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 800ba98:	46c0      	nop			; (mov r8, r8)
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	b002      	add	sp, #8
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	681a      	ldr	r2, [r3, #0]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4909      	ldr	r1, [pc, #36]	; (800bad8 <USART_EndTransfer+0x38>)
 800bab4:	400a      	ands	r2, r1
 800bab6:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	689a      	ldr	r2, [r3, #8]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4906      	ldr	r1, [pc, #24]	; (800badc <USART_EndTransfer+0x3c>)
 800bac4:	400a      	ands	r2, r1
 800bac6:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2259      	movs	r2, #89	; 0x59
 800bacc:	2101      	movs	r1, #1
 800bace:	5499      	strb	r1, [r3, r2]
}
 800bad0:	46c0      	nop			; (mov r8, r8)
 800bad2:	46bd      	mov	sp, r7
 800bad4:	b002      	add	sp, #8
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	fffffe1f 	.word	0xfffffe1f
 800badc:	ef7ffffe 	.word	0xef7ffffe

0800bae0 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baec:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2200      	movs	r2, #0
 800baf2:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2200      	movs	r2, #0
 800baf8:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	0018      	movs	r0, r3
 800bafe:	f7ff ffc7 	bl	800ba90 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800bb02:	46c0      	nop			; (mov r8, r8)
 800bb04:	46bd      	mov	sp, r7
 800bb06:	b004      	add	sp, #16
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800bb0a:	b580      	push	{r7, lr}
 800bb0c:	b084      	sub	sp, #16
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	60f8      	str	r0, [r7, #12]
 800bb12:	60b9      	str	r1, [r7, #8]
 800bb14:	603b      	str	r3, [r7, #0]
 800bb16:	1dfb      	adds	r3, r7, #7
 800bb18:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800bb1a:	e017      	b.n	800bb4c <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb1c:	69bb      	ldr	r3, [r7, #24]
 800bb1e:	3301      	adds	r3, #1
 800bb20:	d014      	beq.n	800bb4c <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb22:	f7f9 fcfb 	bl	800551c <HAL_GetTick>
 800bb26:	0002      	movs	r2, r0
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	1ad3      	subs	r3, r2, r3
 800bb2c:	69ba      	ldr	r2, [r7, #24]
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d302      	bcc.n	800bb38 <USART_WaitOnFlagUntilTimeout+0x2e>
 800bb32:	69bb      	ldr	r3, [r7, #24]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d109      	bne.n	800bb4c <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2259      	movs	r2, #89	; 0x59
 800bb3c:	2101      	movs	r1, #1
 800bb3e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2258      	movs	r2, #88	; 0x58
 800bb44:	2100      	movs	r1, #0
 800bb46:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800bb48:	2303      	movs	r3, #3
 800bb4a:	e00f      	b.n	800bb6c <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	69db      	ldr	r3, [r3, #28]
 800bb52:	68ba      	ldr	r2, [r7, #8]
 800bb54:	4013      	ands	r3, r2
 800bb56:	68ba      	ldr	r2, [r7, #8]
 800bb58:	1ad3      	subs	r3, r2, r3
 800bb5a:	425a      	negs	r2, r3
 800bb5c:	4153      	adcs	r3, r2
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	001a      	movs	r2, r3
 800bb62:	1dfb      	adds	r3, r7, #7
 800bb64:	781b      	ldrb	r3, [r3, #0]
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d0d8      	beq.n	800bb1c <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bb6a:	2300      	movs	r3, #0
}
 800bb6c:	0018      	movs	r0, r3
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	b004      	add	sp, #16
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b088      	sub	sp, #32
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800bb7c:	231e      	movs	r3, #30
 800bb7e:	18fb      	adds	r3, r7, r3
 800bb80:	2200      	movs	r2, #0
 800bb82:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800bb84:	2300      	movs	r3, #0
 800bb86:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	689a      	ldr	r2, [r3, #8]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	691b      	ldr	r3, [r3, #16]
 800bb90:	431a      	orrs	r2, r3
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	695b      	ldr	r3, [r3, #20]
 800bb96:	4313      	orrs	r3, r2
 800bb98:	2280      	movs	r2, #128	; 0x80
 800bb9a:	0212      	lsls	r2, r2, #8
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	4ab1      	ldr	r2, [pc, #708]	; (800be6c <USART_SetConfig+0x2f8>)
 800bba8:	4013      	ands	r3, r2
 800bbaa:	0019      	movs	r1, r3
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	697a      	ldr	r2, [r7, #20]
 800bbb2:	430a      	orrs	r2, r1
 800bbb4:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800bbb6:	2380      	movs	r3, #128	; 0x80
 800bbb8:	011b      	lsls	r3, r3, #4
 800bbba:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6a1b      	ldr	r3, [r3, #32]
 800bbc0:	697a      	ldr	r2, [r7, #20]
 800bbc2:	4313      	orrs	r3, r2
 800bbc4:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	699a      	ldr	r2, [r3, #24]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	69db      	ldr	r3, [r3, #28]
 800bbce:	4313      	orrs	r3, r2
 800bbd0:	697a      	ldr	r2, [r7, #20]
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	68db      	ldr	r3, [r3, #12]
 800bbda:	697a      	ldr	r2, [r7, #20]
 800bbdc:	4313      	orrs	r3, r2
 800bbde:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	4aa2      	ldr	r2, [pc, #648]	; (800be70 <USART_SetConfig+0x2fc>)
 800bbe8:	4013      	ands	r3, r2
 800bbea:	0019      	movs	r1, r3
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	697a      	ldr	r2, [r7, #20]
 800bbf2:	430a      	orrs	r2, r1
 800bbf4:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbfc:	220f      	movs	r2, #15
 800bbfe:	4393      	bics	r3, r2
 800bc00:	0019      	movs	r1, r3
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	430a      	orrs	r2, r1
 800bc0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	4a98      	ldr	r2, [pc, #608]	; (800be74 <USART_SetConfig+0x300>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d127      	bne.n	800bc68 <USART_SetConfig+0xf4>
 800bc18:	4b97      	ldr	r3, [pc, #604]	; (800be78 <USART_SetConfig+0x304>)
 800bc1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc1c:	2203      	movs	r2, #3
 800bc1e:	4013      	ands	r3, r2
 800bc20:	2b03      	cmp	r3, #3
 800bc22:	d017      	beq.n	800bc54 <USART_SetConfig+0xe0>
 800bc24:	d81b      	bhi.n	800bc5e <USART_SetConfig+0xea>
 800bc26:	2b02      	cmp	r3, #2
 800bc28:	d00a      	beq.n	800bc40 <USART_SetConfig+0xcc>
 800bc2a:	d818      	bhi.n	800bc5e <USART_SetConfig+0xea>
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d002      	beq.n	800bc36 <USART_SetConfig+0xc2>
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d00a      	beq.n	800bc4a <USART_SetConfig+0xd6>
 800bc34:	e013      	b.n	800bc5e <USART_SetConfig+0xea>
 800bc36:	231f      	movs	r3, #31
 800bc38:	18fb      	adds	r3, r7, r3
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	701a      	strb	r2, [r3, #0]
 800bc3e:	e058      	b.n	800bcf2 <USART_SetConfig+0x17e>
 800bc40:	231f      	movs	r3, #31
 800bc42:	18fb      	adds	r3, r7, r3
 800bc44:	2202      	movs	r2, #2
 800bc46:	701a      	strb	r2, [r3, #0]
 800bc48:	e053      	b.n	800bcf2 <USART_SetConfig+0x17e>
 800bc4a:	231f      	movs	r3, #31
 800bc4c:	18fb      	adds	r3, r7, r3
 800bc4e:	2204      	movs	r2, #4
 800bc50:	701a      	strb	r2, [r3, #0]
 800bc52:	e04e      	b.n	800bcf2 <USART_SetConfig+0x17e>
 800bc54:	231f      	movs	r3, #31
 800bc56:	18fb      	adds	r3, r7, r3
 800bc58:	2208      	movs	r2, #8
 800bc5a:	701a      	strb	r2, [r3, #0]
 800bc5c:	e049      	b.n	800bcf2 <USART_SetConfig+0x17e>
 800bc5e:	231f      	movs	r3, #31
 800bc60:	18fb      	adds	r3, r7, r3
 800bc62:	2210      	movs	r2, #16
 800bc64:	701a      	strb	r2, [r3, #0]
 800bc66:	e044      	b.n	800bcf2 <USART_SetConfig+0x17e>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4a83      	ldr	r2, [pc, #524]	; (800be7c <USART_SetConfig+0x308>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d127      	bne.n	800bcc2 <USART_SetConfig+0x14e>
 800bc72:	4b81      	ldr	r3, [pc, #516]	; (800be78 <USART_SetConfig+0x304>)
 800bc74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc76:	220c      	movs	r2, #12
 800bc78:	4013      	ands	r3, r2
 800bc7a:	2b0c      	cmp	r3, #12
 800bc7c:	d017      	beq.n	800bcae <USART_SetConfig+0x13a>
 800bc7e:	d81b      	bhi.n	800bcb8 <USART_SetConfig+0x144>
 800bc80:	2b08      	cmp	r3, #8
 800bc82:	d00a      	beq.n	800bc9a <USART_SetConfig+0x126>
 800bc84:	d818      	bhi.n	800bcb8 <USART_SetConfig+0x144>
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d002      	beq.n	800bc90 <USART_SetConfig+0x11c>
 800bc8a:	2b04      	cmp	r3, #4
 800bc8c:	d00a      	beq.n	800bca4 <USART_SetConfig+0x130>
 800bc8e:	e013      	b.n	800bcb8 <USART_SetConfig+0x144>
 800bc90:	231f      	movs	r3, #31
 800bc92:	18fb      	adds	r3, r7, r3
 800bc94:	2200      	movs	r2, #0
 800bc96:	701a      	strb	r2, [r3, #0]
 800bc98:	e02b      	b.n	800bcf2 <USART_SetConfig+0x17e>
 800bc9a:	231f      	movs	r3, #31
 800bc9c:	18fb      	adds	r3, r7, r3
 800bc9e:	2202      	movs	r2, #2
 800bca0:	701a      	strb	r2, [r3, #0]
 800bca2:	e026      	b.n	800bcf2 <USART_SetConfig+0x17e>
 800bca4:	231f      	movs	r3, #31
 800bca6:	18fb      	adds	r3, r7, r3
 800bca8:	2204      	movs	r2, #4
 800bcaa:	701a      	strb	r2, [r3, #0]
 800bcac:	e021      	b.n	800bcf2 <USART_SetConfig+0x17e>
 800bcae:	231f      	movs	r3, #31
 800bcb0:	18fb      	adds	r3, r7, r3
 800bcb2:	2208      	movs	r2, #8
 800bcb4:	701a      	strb	r2, [r3, #0]
 800bcb6:	e01c      	b.n	800bcf2 <USART_SetConfig+0x17e>
 800bcb8:	231f      	movs	r3, #31
 800bcba:	18fb      	adds	r3, r7, r3
 800bcbc:	2210      	movs	r2, #16
 800bcbe:	701a      	strb	r2, [r3, #0]
 800bcc0:	e017      	b.n	800bcf2 <USART_SetConfig+0x17e>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a6e      	ldr	r2, [pc, #440]	; (800be80 <USART_SetConfig+0x30c>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d104      	bne.n	800bcd6 <USART_SetConfig+0x162>
 800bccc:	231f      	movs	r3, #31
 800bcce:	18fb      	adds	r3, r7, r3
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	701a      	strb	r2, [r3, #0]
 800bcd4:	e00d      	b.n	800bcf2 <USART_SetConfig+0x17e>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4a6a      	ldr	r2, [pc, #424]	; (800be84 <USART_SetConfig+0x310>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d104      	bne.n	800bcea <USART_SetConfig+0x176>
 800bce0:	231f      	movs	r3, #31
 800bce2:	18fb      	adds	r3, r7, r3
 800bce4:	2200      	movs	r2, #0
 800bce6:	701a      	strb	r2, [r3, #0]
 800bce8:	e003      	b.n	800bcf2 <USART_SetConfig+0x17e>
 800bcea:	231f      	movs	r3, #31
 800bcec:	18fb      	adds	r3, r7, r3
 800bcee:	2210      	movs	r2, #16
 800bcf0:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 800bcf2:	231f      	movs	r3, #31
 800bcf4:	18fb      	adds	r3, r7, r3
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	2b08      	cmp	r3, #8
 800bcfa:	d100      	bne.n	800bcfe <USART_SetConfig+0x18a>
 800bcfc:	e139      	b.n	800bf72 <USART_SetConfig+0x3fe>
 800bcfe:	dd00      	ble.n	800bd02 <USART_SetConfig+0x18e>
 800bd00:	e195      	b.n	800c02e <USART_SetConfig+0x4ba>
 800bd02:	2b04      	cmp	r3, #4
 800bd04:	d100      	bne.n	800bd08 <USART_SetConfig+0x194>
 800bd06:	e0d3      	b.n	800beb0 <USART_SetConfig+0x33c>
 800bd08:	dd00      	ble.n	800bd0c <USART_SetConfig+0x198>
 800bd0a:	e190      	b.n	800c02e <USART_SetConfig+0x4ba>
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d003      	beq.n	800bd18 <USART_SetConfig+0x1a4>
 800bd10:	2b02      	cmp	r3, #2
 800bd12:	d100      	bne.n	800bd16 <USART_SetConfig+0x1a2>
 800bd14:	e061      	b.n	800bdda <USART_SetConfig+0x266>
 800bd16:	e18a      	b.n	800c02e <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800bd18:	f7fc fdb2 	bl	8008880 <HAL_RCC_GetPCLK1Freq>
 800bd1c:	0003      	movs	r3, r0
 800bd1e:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d044      	beq.n	800bdb2 <USART_SetConfig+0x23e>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d03e      	beq.n	800bdae <USART_SetConfig+0x23a>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd34:	2b02      	cmp	r3, #2
 800bd36:	d038      	beq.n	800bdaa <USART_SetConfig+0x236>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd3c:	2b03      	cmp	r3, #3
 800bd3e:	d032      	beq.n	800bda6 <USART_SetConfig+0x232>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd44:	2b04      	cmp	r3, #4
 800bd46:	d02c      	beq.n	800bda2 <USART_SetConfig+0x22e>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd4c:	2b05      	cmp	r3, #5
 800bd4e:	d026      	beq.n	800bd9e <USART_SetConfig+0x22a>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd54:	2b06      	cmp	r3, #6
 800bd56:	d020      	beq.n	800bd9a <USART_SetConfig+0x226>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd5c:	2b07      	cmp	r3, #7
 800bd5e:	d01a      	beq.n	800bd96 <USART_SetConfig+0x222>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd64:	2b08      	cmp	r3, #8
 800bd66:	d014      	beq.n	800bd92 <USART_SetConfig+0x21e>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd6c:	2b09      	cmp	r3, #9
 800bd6e:	d00e      	beq.n	800bd8e <USART_SetConfig+0x21a>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd74:	2b0a      	cmp	r3, #10
 800bd76:	d008      	beq.n	800bd8a <USART_SetConfig+0x216>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd7c:	2b0b      	cmp	r3, #11
 800bd7e:	d102      	bne.n	800bd86 <USART_SetConfig+0x212>
 800bd80:	2380      	movs	r3, #128	; 0x80
 800bd82:	005b      	lsls	r3, r3, #1
 800bd84:	e016      	b.n	800bdb4 <USART_SetConfig+0x240>
 800bd86:	2301      	movs	r3, #1
 800bd88:	e014      	b.n	800bdb4 <USART_SetConfig+0x240>
 800bd8a:	2380      	movs	r3, #128	; 0x80
 800bd8c:	e012      	b.n	800bdb4 <USART_SetConfig+0x240>
 800bd8e:	2340      	movs	r3, #64	; 0x40
 800bd90:	e010      	b.n	800bdb4 <USART_SetConfig+0x240>
 800bd92:	2320      	movs	r3, #32
 800bd94:	e00e      	b.n	800bdb4 <USART_SetConfig+0x240>
 800bd96:	2310      	movs	r3, #16
 800bd98:	e00c      	b.n	800bdb4 <USART_SetConfig+0x240>
 800bd9a:	230c      	movs	r3, #12
 800bd9c:	e00a      	b.n	800bdb4 <USART_SetConfig+0x240>
 800bd9e:	230a      	movs	r3, #10
 800bda0:	e008      	b.n	800bdb4 <USART_SetConfig+0x240>
 800bda2:	2308      	movs	r3, #8
 800bda4:	e006      	b.n	800bdb4 <USART_SetConfig+0x240>
 800bda6:	2306      	movs	r3, #6
 800bda8:	e004      	b.n	800bdb4 <USART_SetConfig+0x240>
 800bdaa:	2304      	movs	r3, #4
 800bdac:	e002      	b.n	800bdb4 <USART_SetConfig+0x240>
 800bdae:	2302      	movs	r3, #2
 800bdb0:	e000      	b.n	800bdb4 <USART_SetConfig+0x240>
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	0019      	movs	r1, r3
 800bdb6:	6938      	ldr	r0, [r7, #16]
 800bdb8:	f7f4 f9a4 	bl	8000104 <__udivsi3>
 800bdbc:	0003      	movs	r3, r0
 800bdbe:	005a      	lsls	r2, r3, #1
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	085b      	lsrs	r3, r3, #1
 800bdc6:	18d2      	adds	r2, r2, r3
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	0019      	movs	r1, r3
 800bdce:	0010      	movs	r0, r2
 800bdd0:	f7f4 f998 	bl	8000104 <__udivsi3>
 800bdd4:	0003      	movs	r3, r0
 800bdd6:	61bb      	str	r3, [r7, #24]
      break;
 800bdd8:	e12e      	b.n	800c038 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d052      	beq.n	800be88 <USART_SetConfig+0x314>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	d03e      	beq.n	800be68 <USART_SetConfig+0x2f4>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdee:	2b02      	cmp	r3, #2
 800bdf0:	d038      	beq.n	800be64 <USART_SetConfig+0x2f0>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf6:	2b03      	cmp	r3, #3
 800bdf8:	d032      	beq.n	800be60 <USART_SetConfig+0x2ec>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdfe:	2b04      	cmp	r3, #4
 800be00:	d02c      	beq.n	800be5c <USART_SetConfig+0x2e8>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be06:	2b05      	cmp	r3, #5
 800be08:	d026      	beq.n	800be58 <USART_SetConfig+0x2e4>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be0e:	2b06      	cmp	r3, #6
 800be10:	d020      	beq.n	800be54 <USART_SetConfig+0x2e0>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be16:	2b07      	cmp	r3, #7
 800be18:	d01a      	beq.n	800be50 <USART_SetConfig+0x2dc>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be1e:	2b08      	cmp	r3, #8
 800be20:	d014      	beq.n	800be4c <USART_SetConfig+0x2d8>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be26:	2b09      	cmp	r3, #9
 800be28:	d00e      	beq.n	800be48 <USART_SetConfig+0x2d4>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be2e:	2b0a      	cmp	r3, #10
 800be30:	d008      	beq.n	800be44 <USART_SetConfig+0x2d0>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be36:	2b0b      	cmp	r3, #11
 800be38:	d102      	bne.n	800be40 <USART_SetConfig+0x2cc>
 800be3a:	2380      	movs	r3, #128	; 0x80
 800be3c:	005b      	lsls	r3, r3, #1
 800be3e:	e024      	b.n	800be8a <USART_SetConfig+0x316>
 800be40:	2301      	movs	r3, #1
 800be42:	e022      	b.n	800be8a <USART_SetConfig+0x316>
 800be44:	2380      	movs	r3, #128	; 0x80
 800be46:	e020      	b.n	800be8a <USART_SetConfig+0x316>
 800be48:	2340      	movs	r3, #64	; 0x40
 800be4a:	e01e      	b.n	800be8a <USART_SetConfig+0x316>
 800be4c:	2320      	movs	r3, #32
 800be4e:	e01c      	b.n	800be8a <USART_SetConfig+0x316>
 800be50:	2310      	movs	r3, #16
 800be52:	e01a      	b.n	800be8a <USART_SetConfig+0x316>
 800be54:	230c      	movs	r3, #12
 800be56:	e018      	b.n	800be8a <USART_SetConfig+0x316>
 800be58:	230a      	movs	r3, #10
 800be5a:	e016      	b.n	800be8a <USART_SetConfig+0x316>
 800be5c:	2308      	movs	r3, #8
 800be5e:	e014      	b.n	800be8a <USART_SetConfig+0x316>
 800be60:	2306      	movs	r3, #6
 800be62:	e012      	b.n	800be8a <USART_SetConfig+0x316>
 800be64:	2304      	movs	r3, #4
 800be66:	e010      	b.n	800be8a <USART_SetConfig+0x316>
 800be68:	2302      	movs	r3, #2
 800be6a:	e00e      	b.n	800be8a <USART_SetConfig+0x316>
 800be6c:	cfff69f3 	.word	0xcfff69f3
 800be70:	ffffc0f6 	.word	0xffffc0f6
 800be74:	40013800 	.word	0x40013800
 800be78:	40021000 	.word	0x40021000
 800be7c:	40004400 	.word	0x40004400
 800be80:	40004800 	.word	0x40004800
 800be84:	40004c00 	.word	0x40004c00
 800be88:	2301      	movs	r3, #1
 800be8a:	0019      	movs	r1, r3
 800be8c:	4886      	ldr	r0, [pc, #536]	; (800c0a8 <USART_SetConfig+0x534>)
 800be8e:	f7f4 f939 	bl	8000104 <__udivsi3>
 800be92:	0003      	movs	r3, r0
 800be94:	005a      	lsls	r2, r3, #1
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	085b      	lsrs	r3, r3, #1
 800be9c:	18d2      	adds	r2, r2, r3
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	0019      	movs	r1, r3
 800bea4:	0010      	movs	r0, r2
 800bea6:	f7f4 f92d 	bl	8000104 <__udivsi3>
 800beaa:	0003      	movs	r3, r0
 800beac:	61bb      	str	r3, [r7, #24]
      break;
 800beae:	e0c3      	b.n	800c038 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800beb0:	f7fc fc5a 	bl	8008768 <HAL_RCC_GetSysClockFreq>
 800beb4:	0003      	movs	r3, r0
 800beb6:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d044      	beq.n	800bf4a <USART_SetConfig+0x3d6>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bec4:	2b01      	cmp	r3, #1
 800bec6:	d03e      	beq.n	800bf46 <USART_SetConfig+0x3d2>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800becc:	2b02      	cmp	r3, #2
 800bece:	d038      	beq.n	800bf42 <USART_SetConfig+0x3ce>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed4:	2b03      	cmp	r3, #3
 800bed6:	d032      	beq.n	800bf3e <USART_SetConfig+0x3ca>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bedc:	2b04      	cmp	r3, #4
 800bede:	d02c      	beq.n	800bf3a <USART_SetConfig+0x3c6>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee4:	2b05      	cmp	r3, #5
 800bee6:	d026      	beq.n	800bf36 <USART_SetConfig+0x3c2>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beec:	2b06      	cmp	r3, #6
 800beee:	d020      	beq.n	800bf32 <USART_SetConfig+0x3be>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef4:	2b07      	cmp	r3, #7
 800bef6:	d01a      	beq.n	800bf2e <USART_SetConfig+0x3ba>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befc:	2b08      	cmp	r3, #8
 800befe:	d014      	beq.n	800bf2a <USART_SetConfig+0x3b6>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf04:	2b09      	cmp	r3, #9
 800bf06:	d00e      	beq.n	800bf26 <USART_SetConfig+0x3b2>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf0c:	2b0a      	cmp	r3, #10
 800bf0e:	d008      	beq.n	800bf22 <USART_SetConfig+0x3ae>
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf14:	2b0b      	cmp	r3, #11
 800bf16:	d102      	bne.n	800bf1e <USART_SetConfig+0x3aa>
 800bf18:	2380      	movs	r3, #128	; 0x80
 800bf1a:	005b      	lsls	r3, r3, #1
 800bf1c:	e016      	b.n	800bf4c <USART_SetConfig+0x3d8>
 800bf1e:	2301      	movs	r3, #1
 800bf20:	e014      	b.n	800bf4c <USART_SetConfig+0x3d8>
 800bf22:	2380      	movs	r3, #128	; 0x80
 800bf24:	e012      	b.n	800bf4c <USART_SetConfig+0x3d8>
 800bf26:	2340      	movs	r3, #64	; 0x40
 800bf28:	e010      	b.n	800bf4c <USART_SetConfig+0x3d8>
 800bf2a:	2320      	movs	r3, #32
 800bf2c:	e00e      	b.n	800bf4c <USART_SetConfig+0x3d8>
 800bf2e:	2310      	movs	r3, #16
 800bf30:	e00c      	b.n	800bf4c <USART_SetConfig+0x3d8>
 800bf32:	230c      	movs	r3, #12
 800bf34:	e00a      	b.n	800bf4c <USART_SetConfig+0x3d8>
 800bf36:	230a      	movs	r3, #10
 800bf38:	e008      	b.n	800bf4c <USART_SetConfig+0x3d8>
 800bf3a:	2308      	movs	r3, #8
 800bf3c:	e006      	b.n	800bf4c <USART_SetConfig+0x3d8>
 800bf3e:	2306      	movs	r3, #6
 800bf40:	e004      	b.n	800bf4c <USART_SetConfig+0x3d8>
 800bf42:	2304      	movs	r3, #4
 800bf44:	e002      	b.n	800bf4c <USART_SetConfig+0x3d8>
 800bf46:	2302      	movs	r3, #2
 800bf48:	e000      	b.n	800bf4c <USART_SetConfig+0x3d8>
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	0019      	movs	r1, r3
 800bf4e:	6938      	ldr	r0, [r7, #16]
 800bf50:	f7f4 f8d8 	bl	8000104 <__udivsi3>
 800bf54:	0003      	movs	r3, r0
 800bf56:	005a      	lsls	r2, r3, #1
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	685b      	ldr	r3, [r3, #4]
 800bf5c:	085b      	lsrs	r3, r3, #1
 800bf5e:	18d2      	adds	r2, r2, r3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	0019      	movs	r1, r3
 800bf66:	0010      	movs	r0, r2
 800bf68:	f7f4 f8cc 	bl	8000104 <__udivsi3>
 800bf6c:	0003      	movs	r3, r0
 800bf6e:	61bb      	str	r3, [r7, #24]
      break;
 800bf70:	e062      	b.n	800c038 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d044      	beq.n	800c004 <USART_SetConfig+0x490>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	d03e      	beq.n	800c000 <USART_SetConfig+0x48c>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf86:	2b02      	cmp	r3, #2
 800bf88:	d038      	beq.n	800bffc <USART_SetConfig+0x488>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf8e:	2b03      	cmp	r3, #3
 800bf90:	d032      	beq.n	800bff8 <USART_SetConfig+0x484>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf96:	2b04      	cmp	r3, #4
 800bf98:	d02c      	beq.n	800bff4 <USART_SetConfig+0x480>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf9e:	2b05      	cmp	r3, #5
 800bfa0:	d026      	beq.n	800bff0 <USART_SetConfig+0x47c>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa6:	2b06      	cmp	r3, #6
 800bfa8:	d020      	beq.n	800bfec <USART_SetConfig+0x478>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfae:	2b07      	cmp	r3, #7
 800bfb0:	d01a      	beq.n	800bfe8 <USART_SetConfig+0x474>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb6:	2b08      	cmp	r3, #8
 800bfb8:	d014      	beq.n	800bfe4 <USART_SetConfig+0x470>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfbe:	2b09      	cmp	r3, #9
 800bfc0:	d00e      	beq.n	800bfe0 <USART_SetConfig+0x46c>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc6:	2b0a      	cmp	r3, #10
 800bfc8:	d008      	beq.n	800bfdc <USART_SetConfig+0x468>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfce:	2b0b      	cmp	r3, #11
 800bfd0:	d102      	bne.n	800bfd8 <USART_SetConfig+0x464>
 800bfd2:	2380      	movs	r3, #128	; 0x80
 800bfd4:	005b      	lsls	r3, r3, #1
 800bfd6:	e016      	b.n	800c006 <USART_SetConfig+0x492>
 800bfd8:	2301      	movs	r3, #1
 800bfda:	e014      	b.n	800c006 <USART_SetConfig+0x492>
 800bfdc:	2380      	movs	r3, #128	; 0x80
 800bfde:	e012      	b.n	800c006 <USART_SetConfig+0x492>
 800bfe0:	2340      	movs	r3, #64	; 0x40
 800bfe2:	e010      	b.n	800c006 <USART_SetConfig+0x492>
 800bfe4:	2320      	movs	r3, #32
 800bfe6:	e00e      	b.n	800c006 <USART_SetConfig+0x492>
 800bfe8:	2310      	movs	r3, #16
 800bfea:	e00c      	b.n	800c006 <USART_SetConfig+0x492>
 800bfec:	230c      	movs	r3, #12
 800bfee:	e00a      	b.n	800c006 <USART_SetConfig+0x492>
 800bff0:	230a      	movs	r3, #10
 800bff2:	e008      	b.n	800c006 <USART_SetConfig+0x492>
 800bff4:	2308      	movs	r3, #8
 800bff6:	e006      	b.n	800c006 <USART_SetConfig+0x492>
 800bff8:	2306      	movs	r3, #6
 800bffa:	e004      	b.n	800c006 <USART_SetConfig+0x492>
 800bffc:	2304      	movs	r3, #4
 800bffe:	e002      	b.n	800c006 <USART_SetConfig+0x492>
 800c000:	2302      	movs	r3, #2
 800c002:	e000      	b.n	800c006 <USART_SetConfig+0x492>
 800c004:	2301      	movs	r3, #1
 800c006:	0019      	movs	r1, r3
 800c008:	2380      	movs	r3, #128	; 0x80
 800c00a:	0218      	lsls	r0, r3, #8
 800c00c:	f7f4 f87a 	bl	8000104 <__udivsi3>
 800c010:	0003      	movs	r3, r0
 800c012:	005a      	lsls	r2, r3, #1
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	085b      	lsrs	r3, r3, #1
 800c01a:	18d2      	adds	r2, r2, r3
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	0019      	movs	r1, r3
 800c022:	0010      	movs	r0, r2
 800c024:	f7f4 f86e 	bl	8000104 <__udivsi3>
 800c028:	0003      	movs	r3, r0
 800c02a:	61bb      	str	r3, [r7, #24]
      break;
 800c02c:	e004      	b.n	800c038 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 800c02e:	231e      	movs	r3, #30
 800c030:	18fb      	adds	r3, r7, r3
 800c032:	2201      	movs	r2, #1
 800c034:	701a      	strb	r2, [r3, #0]
      break;
 800c036:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800c038:	69bb      	ldr	r3, [r7, #24]
 800c03a:	2b0f      	cmp	r3, #15
 800c03c:	d91c      	bls.n	800c078 <USART_SetConfig+0x504>
 800c03e:	69ba      	ldr	r2, [r7, #24]
 800c040:	2380      	movs	r3, #128	; 0x80
 800c042:	025b      	lsls	r3, r3, #9
 800c044:	429a      	cmp	r2, r3
 800c046:	d217      	bcs.n	800c078 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c048:	69bb      	ldr	r3, [r7, #24]
 800c04a:	b29a      	uxth	r2, r3
 800c04c:	200e      	movs	r0, #14
 800c04e:	183b      	adds	r3, r7, r0
 800c050:	210f      	movs	r1, #15
 800c052:	438a      	bics	r2, r1
 800c054:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c056:	69bb      	ldr	r3, [r7, #24]
 800c058:	085b      	lsrs	r3, r3, #1
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	2207      	movs	r2, #7
 800c05e:	4013      	ands	r3, r2
 800c060:	b299      	uxth	r1, r3
 800c062:	183b      	adds	r3, r7, r0
 800c064:	183a      	adds	r2, r7, r0
 800c066:	8812      	ldrh	r2, [r2, #0]
 800c068:	430a      	orrs	r2, r1
 800c06a:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	183a      	adds	r2, r7, r0
 800c072:	8812      	ldrh	r2, [r2, #0]
 800c074:	60da      	str	r2, [r3, #12]
 800c076:	e003      	b.n	800c080 <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 800c078:	231e      	movs	r3, #30
 800c07a:	18fb      	adds	r3, r7, r3
 800c07c:	2201      	movs	r2, #1
 800c07e:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2201      	movs	r2, #1
 800c084:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2201      	movs	r2, #1
 800c08a:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2200      	movs	r2, #0
 800c090:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2200      	movs	r2, #0
 800c096:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 800c098:	231e      	movs	r3, #30
 800c09a:	18fb      	adds	r3, r7, r3
 800c09c:	781b      	ldrb	r3, [r3, #0]
}
 800c09e:	0018      	movs	r0, r3
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	b008      	add	sp, #32
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	46c0      	nop			; (mov r8, r8)
 800c0a8:	00f42400 	.word	0x00f42400

0800c0ac <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b086      	sub	sp, #24
 800c0b0:	af02      	add	r7, sp, #8
 800c0b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c0ba:	f7f9 fa2f 	bl	800551c <HAL_GetTick>
 800c0be:	0003      	movs	r3, r0
 800c0c0:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	2208      	movs	r2, #8
 800c0ca:	4013      	ands	r3, r2
 800c0cc:	2b08      	cmp	r3, #8
 800c0ce:	d10e      	bne.n	800c0ee <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800c0d0:	68fa      	ldr	r2, [r7, #12]
 800c0d2:	2380      	movs	r3, #128	; 0x80
 800c0d4:	0399      	lsls	r1, r3, #14
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	23fa      	movs	r3, #250	; 0xfa
 800c0da:	009b      	lsls	r3, r3, #2
 800c0dc:	9300      	str	r3, [sp, #0]
 800c0de:	0013      	movs	r3, r2
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	f7ff fd12 	bl	800bb0a <USART_WaitOnFlagUntilTimeout>
 800c0e6:	1e03      	subs	r3, r0, #0
 800c0e8:	d001      	beq.n	800c0ee <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c0ea:	2303      	movs	r3, #3
 800c0ec:	e01e      	b.n	800c12c <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	2204      	movs	r2, #4
 800c0f6:	4013      	ands	r3, r2
 800c0f8:	2b04      	cmp	r3, #4
 800c0fa:	d10e      	bne.n	800c11a <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800c0fc:	68fa      	ldr	r2, [r7, #12]
 800c0fe:	2380      	movs	r3, #128	; 0x80
 800c100:	03d9      	lsls	r1, r3, #15
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	23fa      	movs	r3, #250	; 0xfa
 800c106:	009b      	lsls	r3, r3, #2
 800c108:	9300      	str	r3, [sp, #0]
 800c10a:	0013      	movs	r3, r2
 800c10c:	2200      	movs	r2, #0
 800c10e:	f7ff fcfc 	bl	800bb0a <USART_WaitOnFlagUntilTimeout>
 800c112:	1e03      	subs	r3, r0, #0
 800c114:	d001      	beq.n	800c11a <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c116:	2303      	movs	r3, #3
 800c118:	e008      	b.n	800c12c <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2259      	movs	r2, #89	; 0x59
 800c11e:	2101      	movs	r1, #1
 800c120:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2258      	movs	r2, #88	; 0x58
 800c126:	2100      	movs	r1, #0
 800c128:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c12a:	2300      	movs	r3, #0
}
 800c12c:	0018      	movs	r0, r3
 800c12e:	46bd      	mov	sp, r7
 800c130:	b004      	add	sp, #16
 800c132:	bd80      	pop	{r7, pc}

0800c134 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	681a      	ldr	r2, [r3, #0]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2140      	movs	r1, #64	; 0x40
 800c148:	438a      	bics	r2, r1
 800c14a:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	689a      	ldr	r2, [r3, #8]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	2101      	movs	r1, #1
 800c158:	438a      	bics	r2, r1
 800c15a:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2200      	movs	r2, #0
 800c160:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2259      	movs	r2, #89	; 0x59
 800c166:	5c9b      	ldrb	r3, [r3, r2]
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	2b12      	cmp	r3, #18
 800c16c:	d114      	bne.n	800c198 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2208      	movs	r2, #8
 800c174:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	699a      	ldr	r2, [r3, #24]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	2108      	movs	r1, #8
 800c182:	430a      	orrs	r2, r1
 800c184:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2259      	movs	r2, #89	; 0x59
 800c18a:	2101      	movs	r1, #1
 800c18c:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	0018      	movs	r0, r3
 800c192:	f7f4 ffe3 	bl	800115c <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c196:	e00c      	b.n	800c1b2 <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d107      	bne.n	800c1b2 <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2259      	movs	r2, #89	; 0x59
 800c1a6:	2101      	movs	r1, #1
 800c1a8:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	0018      	movs	r0, r3
 800c1ae:	f7ff fc67 	bl	800ba80 <HAL_USART_TxRxCpltCallback>
}
 800c1b2:	46c0      	nop			; (mov r8, r8)
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	b002      	add	sp, #8
 800c1b8:	bd80      	pop	{r7, pc}

0800c1ba <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 800c1ba:	b580      	push	{r7, lr}
 800c1bc:	b082      	sub	sp, #8
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c1c2:	46c0      	nop			; (mov r8, r8)
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	b002      	add	sp, #8
 800c1c8:	bd80      	pop	{r7, pc}

0800c1ca <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 800c1ca:	b580      	push	{r7, lr}
 800c1cc:	b082      	sub	sp, #8
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c1d2:	46c0      	nop			; (mov r8, r8)
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	b002      	add	sp, #8
 800c1d8:	bd80      	pop	{r7, pc}

0800c1da <LL_GPIO_SetPinMode>:
{
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b084      	sub	sp, #16
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	60f8      	str	r0, [r7, #12]
 800c1e2:	60b9      	str	r1, [r7, #8]
 800c1e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	6819      	ldr	r1, [r3, #0]
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	435b      	muls	r3, r3
 800c1ee:	001a      	movs	r2, r3
 800c1f0:	0013      	movs	r3, r2
 800c1f2:	005b      	lsls	r3, r3, #1
 800c1f4:	189b      	adds	r3, r3, r2
 800c1f6:	43db      	mvns	r3, r3
 800c1f8:	400b      	ands	r3, r1
 800c1fa:	001a      	movs	r2, r3
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	435b      	muls	r3, r3
 800c200:	6879      	ldr	r1, [r7, #4]
 800c202:	434b      	muls	r3, r1
 800c204:	431a      	orrs	r2, r3
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	601a      	str	r2, [r3, #0]
}
 800c20a:	46c0      	nop			; (mov r8, r8)
 800c20c:	46bd      	mov	sp, r7
 800c20e:	b004      	add	sp, #16
 800c210:	bd80      	pop	{r7, pc}

0800c212 <LL_GPIO_SetPinOutputType>:
{
 800c212:	b580      	push	{r7, lr}
 800c214:	b084      	sub	sp, #16
 800c216:	af00      	add	r7, sp, #0
 800c218:	60f8      	str	r0, [r7, #12]
 800c21a:	60b9      	str	r1, [r7, #8]
 800c21c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	68ba      	ldr	r2, [r7, #8]
 800c224:	43d2      	mvns	r2, r2
 800c226:	401a      	ands	r2, r3
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	6879      	ldr	r1, [r7, #4]
 800c22c:	434b      	muls	r3, r1
 800c22e:	431a      	orrs	r2, r3
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	605a      	str	r2, [r3, #4]
}
 800c234:	46c0      	nop			; (mov r8, r8)
 800c236:	46bd      	mov	sp, r7
 800c238:	b004      	add	sp, #16
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <LL_GPIO_SetPinSpeed>:
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b084      	sub	sp, #16
 800c240:	af00      	add	r7, sp, #0
 800c242:	60f8      	str	r0, [r7, #12]
 800c244:	60b9      	str	r1, [r7, #8]
 800c246:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	6899      	ldr	r1, [r3, #8]
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	435b      	muls	r3, r3
 800c250:	001a      	movs	r2, r3
 800c252:	0013      	movs	r3, r2
 800c254:	005b      	lsls	r3, r3, #1
 800c256:	189b      	adds	r3, r3, r2
 800c258:	43db      	mvns	r3, r3
 800c25a:	400b      	ands	r3, r1
 800c25c:	001a      	movs	r2, r3
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	435b      	muls	r3, r3
 800c262:	6879      	ldr	r1, [r7, #4]
 800c264:	434b      	muls	r3, r1
 800c266:	431a      	orrs	r2, r3
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	609a      	str	r2, [r3, #8]
}
 800c26c:	46c0      	nop			; (mov r8, r8)
 800c26e:	46bd      	mov	sp, r7
 800c270:	b004      	add	sp, #16
 800c272:	bd80      	pop	{r7, pc}

0800c274 <LL_GPIO_SetPinPull>:
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b084      	sub	sp, #16
 800c278:	af00      	add	r7, sp, #0
 800c27a:	60f8      	str	r0, [r7, #12]
 800c27c:	60b9      	str	r1, [r7, #8]
 800c27e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	68d9      	ldr	r1, [r3, #12]
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	435b      	muls	r3, r3
 800c288:	001a      	movs	r2, r3
 800c28a:	0013      	movs	r3, r2
 800c28c:	005b      	lsls	r3, r3, #1
 800c28e:	189b      	adds	r3, r3, r2
 800c290:	43db      	mvns	r3, r3
 800c292:	400b      	ands	r3, r1
 800c294:	001a      	movs	r2, r3
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	435b      	muls	r3, r3
 800c29a:	6879      	ldr	r1, [r7, #4]
 800c29c:	434b      	muls	r3, r1
 800c29e:	431a      	orrs	r2, r3
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	60da      	str	r2, [r3, #12]
}
 800c2a4:	46c0      	nop			; (mov r8, r8)
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	b004      	add	sp, #16
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <LL_GPIO_SetAFPin_0_7>:
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b084      	sub	sp, #16
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	60f8      	str	r0, [r7, #12]
 800c2b4:	60b9      	str	r1, [r7, #8]
 800c2b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	6a19      	ldr	r1, [r3, #32]
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	435b      	muls	r3, r3
 800c2c0:	68ba      	ldr	r2, [r7, #8]
 800c2c2:	4353      	muls	r3, r2
 800c2c4:	68ba      	ldr	r2, [r7, #8]
 800c2c6:	435a      	muls	r2, r3
 800c2c8:	0013      	movs	r3, r2
 800c2ca:	011b      	lsls	r3, r3, #4
 800c2cc:	1a9b      	subs	r3, r3, r2
 800c2ce:	43db      	mvns	r3, r3
 800c2d0:	400b      	ands	r3, r1
 800c2d2:	001a      	movs	r2, r3
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	435b      	muls	r3, r3
 800c2d8:	68b9      	ldr	r1, [r7, #8]
 800c2da:	434b      	muls	r3, r1
 800c2dc:	68b9      	ldr	r1, [r7, #8]
 800c2de:	434b      	muls	r3, r1
 800c2e0:	6879      	ldr	r1, [r7, #4]
 800c2e2:	434b      	muls	r3, r1
 800c2e4:	431a      	orrs	r2, r3
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	621a      	str	r2, [r3, #32]
}
 800c2ea:	46c0      	nop			; (mov r8, r8)
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	b004      	add	sp, #16
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <LL_GPIO_SetAFPin_8_15>:
{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b084      	sub	sp, #16
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	60f8      	str	r0, [r7, #12]
 800c2fa:	60b9      	str	r1, [r7, #8]
 800c2fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	0a1b      	lsrs	r3, r3, #8
 800c306:	68ba      	ldr	r2, [r7, #8]
 800c308:	0a12      	lsrs	r2, r2, #8
 800c30a:	4353      	muls	r3, r2
 800c30c:	68ba      	ldr	r2, [r7, #8]
 800c30e:	0a12      	lsrs	r2, r2, #8
 800c310:	4353      	muls	r3, r2
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	0a12      	lsrs	r2, r2, #8
 800c316:	435a      	muls	r2, r3
 800c318:	0013      	movs	r3, r2
 800c31a:	011b      	lsls	r3, r3, #4
 800c31c:	1a9b      	subs	r3, r3, r2
 800c31e:	43db      	mvns	r3, r3
 800c320:	400b      	ands	r3, r1
 800c322:	001a      	movs	r2, r3
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	0a1b      	lsrs	r3, r3, #8
 800c328:	68b9      	ldr	r1, [r7, #8]
 800c32a:	0a09      	lsrs	r1, r1, #8
 800c32c:	434b      	muls	r3, r1
 800c32e:	68b9      	ldr	r1, [r7, #8]
 800c330:	0a09      	lsrs	r1, r1, #8
 800c332:	434b      	muls	r3, r1
 800c334:	68b9      	ldr	r1, [r7, #8]
 800c336:	0a09      	lsrs	r1, r1, #8
 800c338:	434b      	muls	r3, r1
 800c33a:	6879      	ldr	r1, [r7, #4]
 800c33c:	434b      	muls	r3, r1
 800c33e:	431a      	orrs	r2, r3
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c344:	46c0      	nop			; (mov r8, r8)
 800c346:	46bd      	mov	sp, r7
 800c348:	b004      	add	sp, #16
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800c356:	2300      	movs	r3, #0
 800c358:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800c35a:	e047      	b.n	800c3ec <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2101      	movs	r1, #1
 800c362:	68fa      	ldr	r2, [r7, #12]
 800c364:	4091      	lsls	r1, r2
 800c366:	000a      	movs	r2, r1
 800c368:	4013      	ands	r3, r2
 800c36a:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d039      	beq.n	800c3e6 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	685b      	ldr	r3, [r3, #4]
 800c376:	2b01      	cmp	r3, #1
 800c378:	d003      	beq.n	800c382 <LL_GPIO_Init+0x36>
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	685b      	ldr	r3, [r3, #4]
 800c37e:	2b02      	cmp	r3, #2
 800c380:	d10d      	bne.n	800c39e <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	689a      	ldr	r2, [r3, #8]
 800c386:	68b9      	ldr	r1, [r7, #8]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	0018      	movs	r0, r3
 800c38c:	f7ff ff56 	bl	800c23c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	68da      	ldr	r2, [r3, #12]
 800c394:	68b9      	ldr	r1, [r7, #8]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	0018      	movs	r0, r3
 800c39a:	f7ff ff3a 	bl	800c212 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	691a      	ldr	r2, [r3, #16]
 800c3a2:	68b9      	ldr	r1, [r7, #8]
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	0018      	movs	r0, r3
 800c3a8:	f7ff ff64 	bl	800c274 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	2b02      	cmp	r3, #2
 800c3b2:	d111      	bne.n	800c3d8 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	2bff      	cmp	r3, #255	; 0xff
 800c3b8:	d807      	bhi.n	800c3ca <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	695a      	ldr	r2, [r3, #20]
 800c3be:	68b9      	ldr	r1, [r7, #8]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	0018      	movs	r0, r3
 800c3c4:	f7ff ff72 	bl	800c2ac <LL_GPIO_SetAFPin_0_7>
 800c3c8:	e006      	b.n	800c3d8 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	695a      	ldr	r2, [r3, #20]
 800c3ce:	68b9      	ldr	r1, [r7, #8]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	0018      	movs	r0, r3
 800c3d4:	f7ff ff8d 	bl	800c2f2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	685a      	ldr	r2, [r3, #4]
 800c3dc:	68b9      	ldr	r1, [r7, #8]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	0018      	movs	r0, r3
 800c3e2:	f7ff fefa 	bl	800c1da <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	681a      	ldr	r2, [r3, #0]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	40da      	lsrs	r2, r3
 800c3f4:	1e13      	subs	r3, r2, #0
 800c3f6:	d1b1      	bne.n	800c35c <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800c3f8:	2300      	movs	r3, #0
}
 800c3fa:	0018      	movs	r0, r3
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	b004      	add	sp, #16
 800c400:	bd80      	pop	{r7, pc}
	...

0800c404 <LL_RCC_HSI_IsReady>:
{
 800c404:	b580      	push	{r7, lr}
 800c406:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800c408:	4b07      	ldr	r3, [pc, #28]	; (800c428 <LL_RCC_HSI_IsReady+0x24>)
 800c40a:	681a      	ldr	r2, [r3, #0]
 800c40c:	2380      	movs	r3, #128	; 0x80
 800c40e:	00db      	lsls	r3, r3, #3
 800c410:	401a      	ands	r2, r3
 800c412:	2380      	movs	r3, #128	; 0x80
 800c414:	00db      	lsls	r3, r3, #3
 800c416:	429a      	cmp	r2, r3
 800c418:	d101      	bne.n	800c41e <LL_RCC_HSI_IsReady+0x1a>
 800c41a:	2301      	movs	r3, #1
 800c41c:	e000      	b.n	800c420 <LL_RCC_HSI_IsReady+0x1c>
 800c41e:	2300      	movs	r3, #0
}
 800c420:	0018      	movs	r0, r3
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
 800c426:	46c0      	nop			; (mov r8, r8)
 800c428:	40021000 	.word	0x40021000

0800c42c <LL_RCC_LSE_IsReady>:
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c430:	4b05      	ldr	r3, [pc, #20]	; (800c448 <LL_RCC_LSE_IsReady+0x1c>)
 800c432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c434:	2202      	movs	r2, #2
 800c436:	4013      	ands	r3, r2
 800c438:	2b02      	cmp	r3, #2
 800c43a:	d101      	bne.n	800c440 <LL_RCC_LSE_IsReady+0x14>
 800c43c:	2301      	movs	r3, #1
 800c43e:	e000      	b.n	800c442 <LL_RCC_LSE_IsReady+0x16>
 800c440:	2300      	movs	r3, #0
}
 800c442:	0018      	movs	r0, r3
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}
 800c448:	40021000 	.word	0x40021000

0800c44c <LL_RCC_GetSysClkSource>:
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c450:	4b03      	ldr	r3, [pc, #12]	; (800c460 <LL_RCC_GetSysClkSource+0x14>)
 800c452:	689b      	ldr	r3, [r3, #8]
 800c454:	2238      	movs	r2, #56	; 0x38
 800c456:	4013      	ands	r3, r2
}
 800c458:	0018      	movs	r0, r3
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}
 800c45e:	46c0      	nop			; (mov r8, r8)
 800c460:	40021000 	.word	0x40021000

0800c464 <LL_RCC_GetAHBPrescaler>:
{
 800c464:	b580      	push	{r7, lr}
 800c466:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c468:	4b03      	ldr	r3, [pc, #12]	; (800c478 <LL_RCC_GetAHBPrescaler+0x14>)
 800c46a:	689a      	ldr	r2, [r3, #8]
 800c46c:	23f0      	movs	r3, #240	; 0xf0
 800c46e:	011b      	lsls	r3, r3, #4
 800c470:	4013      	ands	r3, r2
}
 800c472:	0018      	movs	r0, r3
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}
 800c478:	40021000 	.word	0x40021000

0800c47c <LL_RCC_GetAPB1Prescaler>:
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800c480:	4b03      	ldr	r3, [pc, #12]	; (800c490 <LL_RCC_GetAPB1Prescaler+0x14>)
 800c482:	689a      	ldr	r2, [r3, #8]
 800c484:	23e0      	movs	r3, #224	; 0xe0
 800c486:	01db      	lsls	r3, r3, #7
 800c488:	4013      	ands	r3, r2
}
 800c48a:	0018      	movs	r0, r3
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}
 800c490:	40021000 	.word	0x40021000

0800c494 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b082      	sub	sp, #8
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800c49c:	4b05      	ldr	r3, [pc, #20]	; (800c4b4 <LL_RCC_GetUSARTClockSource+0x20>)
 800c49e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	401a      	ands	r2, r3
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	041b      	lsls	r3, r3, #16
 800c4a8:	4313      	orrs	r3, r2
}
 800c4aa:	0018      	movs	r0, r3
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	b002      	add	sp, #8
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	46c0      	nop			; (mov r8, r8)
 800c4b4:	40021000 	.word	0x40021000

0800c4b8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800c4bc:	4b03      	ldr	r3, [pc, #12]	; (800c4cc <LL_RCC_PLL_GetN+0x14>)
 800c4be:	68db      	ldr	r3, [r3, #12]
 800c4c0:	0a1b      	lsrs	r3, r3, #8
 800c4c2:	227f      	movs	r2, #127	; 0x7f
 800c4c4:	4013      	ands	r3, r2
}
 800c4c6:	0018      	movs	r0, r3
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}
 800c4cc:	40021000 	.word	0x40021000

0800c4d0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800c4d4:	4b03      	ldr	r3, [pc, #12]	; (800c4e4 <LL_RCC_PLL_GetR+0x14>)
 800c4d6:	68db      	ldr	r3, [r3, #12]
 800c4d8:	0f5b      	lsrs	r3, r3, #29
 800c4da:	075b      	lsls	r3, r3, #29
}
 800c4dc:	0018      	movs	r0, r3
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	46c0      	nop			; (mov r8, r8)
 800c4e4:	40021000 	.word	0x40021000

0800c4e8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c4ec:	4b03      	ldr	r3, [pc, #12]	; (800c4fc <LL_RCC_PLL_GetMainSource+0x14>)
 800c4ee:	68db      	ldr	r3, [r3, #12]
 800c4f0:	2203      	movs	r2, #3
 800c4f2:	4013      	ands	r3, r2
}
 800c4f4:	0018      	movs	r0, r3
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	46c0      	nop			; (mov r8, r8)
 800c4fc:	40021000 	.word	0x40021000

0800c500 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800c504:	4b03      	ldr	r3, [pc, #12]	; (800c514 <LL_RCC_PLL_GetDivider+0x14>)
 800c506:	68db      	ldr	r3, [r3, #12]
 800c508:	2270      	movs	r2, #112	; 0x70
 800c50a:	4013      	ands	r3, r2
}
 800c50c:	0018      	movs	r0, r3
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
 800c512:	46c0      	nop			; (mov r8, r8)
 800c514:	40021000 	.word	0x40021000

0800c518 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800c520:	f000 f8a8 	bl	800c674 <RCC_GetSystemClockFreq>
 800c524:	0002      	movs	r2, r0
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	0018      	movs	r0, r3
 800c530:	f000 f8ce 	bl	800c6d0 <RCC_GetHCLKClockFreq>
 800c534:	0002      	movs	r2, r0
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	0018      	movs	r0, r3
 800c540:	f000 f8de 	bl	800c700 <RCC_GetPCLK1ClockFreq>
 800c544:	0002      	movs	r2, r0
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	609a      	str	r2, [r3, #8]
}
 800c54a:	46c0      	nop			; (mov r8, r8)
 800c54c:	46bd      	mov	sp, r7
 800c54e:	b002      	add	sp, #8
 800c550:	bd80      	pop	{r7, pc}
	...

0800c554 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800c55c:	2300      	movs	r3, #0
 800c55e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2b03      	cmp	r3, #3
 800c564:	d134      	bne.n	800c5d0 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	0018      	movs	r0, r3
 800c56a:	f7ff ff93 	bl	800c494 <LL_RCC_GetUSARTClockSource>
 800c56e:	0003      	movs	r3, r0
 800c570:	4a39      	ldr	r2, [pc, #228]	; (800c658 <LL_RCC_GetUSARTClockFreq+0x104>)
 800c572:	4293      	cmp	r3, r2
 800c574:	d016      	beq.n	800c5a4 <LL_RCC_GetUSARTClockFreq+0x50>
 800c576:	4a38      	ldr	r2, [pc, #224]	; (800c658 <LL_RCC_GetUSARTClockFreq+0x104>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d81c      	bhi.n	800c5b6 <LL_RCC_GetUSARTClockFreq+0x62>
 800c57c:	4a37      	ldr	r2, [pc, #220]	; (800c65c <LL_RCC_GetUSARTClockFreq+0x108>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d003      	beq.n	800c58a <LL_RCC_GetUSARTClockFreq+0x36>
 800c582:	4a37      	ldr	r2, [pc, #220]	; (800c660 <LL_RCC_GetUSARTClockFreq+0x10c>)
 800c584:	4293      	cmp	r3, r2
 800c586:	d005      	beq.n	800c594 <LL_RCC_GetUSARTClockFreq+0x40>
 800c588:	e015      	b.n	800c5b6 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800c58a:	f000 f873 	bl	800c674 <RCC_GetSystemClockFreq>
 800c58e:	0003      	movs	r3, r0
 800c590:	60fb      	str	r3, [r7, #12]
        break;
 800c592:	e05c      	b.n	800c64e <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800c594:	f7ff ff36 	bl	800c404 <LL_RCC_HSI_IsReady>
 800c598:	0003      	movs	r3, r0
 800c59a:	2b01      	cmp	r3, #1
 800c59c:	d150      	bne.n	800c640 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 800c59e:	4b31      	ldr	r3, [pc, #196]	; (800c664 <LL_RCC_GetUSARTClockFreq+0x110>)
 800c5a0:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c5a2:	e04d      	b.n	800c640 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800c5a4:	f7ff ff42 	bl	800c42c <LL_RCC_LSE_IsReady>
 800c5a8:	0003      	movs	r3, r0
 800c5aa:	2b01      	cmp	r3, #1
 800c5ac:	d14a      	bne.n	800c644 <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 800c5ae:	2380      	movs	r3, #128	; 0x80
 800c5b0:	021b      	lsls	r3, r3, #8
 800c5b2:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c5b4:	e046      	b.n	800c644 <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800c5b6:	f000 f85d 	bl	800c674 <RCC_GetSystemClockFreq>
 800c5ba:	0003      	movs	r3, r0
 800c5bc:	0018      	movs	r0, r3
 800c5be:	f000 f887 	bl	800c6d0 <RCC_GetHCLKClockFreq>
 800c5c2:	0003      	movs	r3, r0
 800c5c4:	0018      	movs	r0, r3
 800c5c6:	f000 f89b 	bl	800c700 <RCC_GetPCLK1ClockFreq>
 800c5ca:	0003      	movs	r3, r0
 800c5cc:	60fb      	str	r3, [r7, #12]
        break;
 800c5ce:	e03e      	b.n	800c64e <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2b0c      	cmp	r3, #12
 800c5d4:	d13b      	bne.n	800c64e <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	0018      	movs	r0, r3
 800c5da:	f7ff ff5b 	bl	800c494 <LL_RCC_GetUSARTClockSource>
 800c5de:	0003      	movs	r3, r0
 800c5e0:	4a21      	ldr	r2, [pc, #132]	; (800c668 <LL_RCC_GetUSARTClockFreq+0x114>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d016      	beq.n	800c614 <LL_RCC_GetUSARTClockFreq+0xc0>
 800c5e6:	4a20      	ldr	r2, [pc, #128]	; (800c668 <LL_RCC_GetUSARTClockFreq+0x114>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d81c      	bhi.n	800c626 <LL_RCC_GetUSARTClockFreq+0xd2>
 800c5ec:	4a1f      	ldr	r2, [pc, #124]	; (800c66c <LL_RCC_GetUSARTClockFreq+0x118>)
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	d003      	beq.n	800c5fa <LL_RCC_GetUSARTClockFreq+0xa6>
 800c5f2:	4a1f      	ldr	r2, [pc, #124]	; (800c670 <LL_RCC_GetUSARTClockFreq+0x11c>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d005      	beq.n	800c604 <LL_RCC_GetUSARTClockFreq+0xb0>
 800c5f8:	e015      	b.n	800c626 <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800c5fa:	f000 f83b 	bl	800c674 <RCC_GetSystemClockFreq>
 800c5fe:	0003      	movs	r3, r0
 800c600:	60fb      	str	r3, [r7, #12]
        break;
 800c602:	e024      	b.n	800c64e <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800c604:	f7ff fefe 	bl	800c404 <LL_RCC_HSI_IsReady>
 800c608:	0003      	movs	r3, r0
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d11c      	bne.n	800c648 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800c60e:	4b15      	ldr	r3, [pc, #84]	; (800c664 <LL_RCC_GetUSARTClockFreq+0x110>)
 800c610:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c612:	e019      	b.n	800c648 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800c614:	f7ff ff0a 	bl	800c42c <LL_RCC_LSE_IsReady>
 800c618:	0003      	movs	r3, r0
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d116      	bne.n	800c64c <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800c61e:	2380      	movs	r3, #128	; 0x80
 800c620:	021b      	lsls	r3, r3, #8
 800c622:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c624:	e012      	b.n	800c64c <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800c626:	f000 f825 	bl	800c674 <RCC_GetSystemClockFreq>
 800c62a:	0003      	movs	r3, r0
 800c62c:	0018      	movs	r0, r3
 800c62e:	f000 f84f 	bl	800c6d0 <RCC_GetHCLKClockFreq>
 800c632:	0003      	movs	r3, r0
 800c634:	0018      	movs	r0, r3
 800c636:	f000 f863 	bl	800c700 <RCC_GetPCLK1ClockFreq>
 800c63a:	0003      	movs	r3, r0
 800c63c:	60fb      	str	r3, [r7, #12]
        break;
 800c63e:	e006      	b.n	800c64e <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c640:	46c0      	nop			; (mov r8, r8)
 800c642:	e004      	b.n	800c64e <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c644:	46c0      	nop			; (mov r8, r8)
 800c646:	e002      	b.n	800c64e <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c648:	46c0      	nop			; (mov r8, r8)
 800c64a:	e000      	b.n	800c64e <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c64c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800c64e:	68fb      	ldr	r3, [r7, #12]
}
 800c650:	0018      	movs	r0, r3
 800c652:	46bd      	mov	sp, r7
 800c654:	b004      	add	sp, #16
 800c656:	bd80      	pop	{r7, pc}
 800c658:	00030003 	.word	0x00030003
 800c65c:	00030001 	.word	0x00030001
 800c660:	00030002 	.word	0x00030002
 800c664:	00f42400 	.word	0x00f42400
 800c668:	000c000c 	.word	0x000c000c
 800c66c:	000c0004 	.word	0x000c0004
 800c670:	000c0008 	.word	0x000c0008

0800c674 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800c67a:	f7ff fee7 	bl	800c44c <LL_RCC_GetSysClkSource>
 800c67e:	0003      	movs	r3, r0
 800c680:	2b08      	cmp	r3, #8
 800c682:	d002      	beq.n	800c68a <RCC_GetSystemClockFreq+0x16>
 800c684:	2b10      	cmp	r3, #16
 800c686:	d003      	beq.n	800c690 <RCC_GetSystemClockFreq+0x1c>
 800c688:	e007      	b.n	800c69a <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800c68a:	4b0e      	ldr	r3, [pc, #56]	; (800c6c4 <RCC_GetSystemClockFreq+0x50>)
 800c68c:	607b      	str	r3, [r7, #4]
      break;
 800c68e:	e014      	b.n	800c6ba <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800c690:	f000 f84c 	bl	800c72c <RCC_PLL_GetFreqDomain_SYS>
 800c694:	0003      	movs	r3, r0
 800c696:	607b      	str	r3, [r7, #4]
      break;
 800c698:	e00f      	b.n	800c6ba <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800c69a:	4b0b      	ldr	r3, [pc, #44]	; (800c6c8 <RCC_GetSystemClockFreq+0x54>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	0adb      	lsrs	r3, r3, #11
 800c6a0:	2207      	movs	r2, #7
 800c6a2:	4013      	ands	r3, r2
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	409a      	lsls	r2, r3
 800c6a8:	0013      	movs	r3, r2
 800c6aa:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800c6ac:	6839      	ldr	r1, [r7, #0]
 800c6ae:	4807      	ldr	r0, [pc, #28]	; (800c6cc <RCC_GetSystemClockFreq+0x58>)
 800c6b0:	f7f3 fd28 	bl	8000104 <__udivsi3>
 800c6b4:	0003      	movs	r3, r0
 800c6b6:	607b      	str	r3, [r7, #4]
      break;
 800c6b8:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800c6ba:	687b      	ldr	r3, [r7, #4]
}
 800c6bc:	0018      	movs	r0, r3
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	b002      	add	sp, #8
 800c6c2:	bd80      	pop	{r7, pc}
 800c6c4:	007a1200 	.word	0x007a1200
 800c6c8:	40021000 	.word	0x40021000
 800c6cc:	00f42400 	.word	0x00f42400

0800c6d0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800c6d8:	f7ff fec4 	bl	800c464 <LL_RCC_GetAHBPrescaler>
 800c6dc:	0003      	movs	r3, r0
 800c6de:	0a1b      	lsrs	r3, r3, #8
 800c6e0:	220f      	movs	r2, #15
 800c6e2:	401a      	ands	r2, r3
 800c6e4:	4b05      	ldr	r3, [pc, #20]	; (800c6fc <RCC_GetHCLKClockFreq+0x2c>)
 800c6e6:	0092      	lsls	r2, r2, #2
 800c6e8:	58d3      	ldr	r3, [r2, r3]
 800c6ea:	221f      	movs	r2, #31
 800c6ec:	4013      	ands	r3, r2
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	40da      	lsrs	r2, r3
 800c6f2:	0013      	movs	r3, r2
}
 800c6f4:	0018      	movs	r0, r3
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	b002      	add	sp, #8
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	0801607c 	.word	0x0801607c

0800c700 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b082      	sub	sp, #8
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800c708:	f7ff feb8 	bl	800c47c <LL_RCC_GetAPB1Prescaler>
 800c70c:	0003      	movs	r3, r0
 800c70e:	0b1a      	lsrs	r2, r3, #12
 800c710:	4b05      	ldr	r3, [pc, #20]	; (800c728 <RCC_GetPCLK1ClockFreq+0x28>)
 800c712:	0092      	lsls	r2, r2, #2
 800c714:	58d3      	ldr	r3, [r2, r3]
 800c716:	221f      	movs	r2, #31
 800c718:	4013      	ands	r3, r2
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	40da      	lsrs	r2, r3
 800c71e:	0013      	movs	r3, r2
}
 800c720:	0018      	movs	r0, r3
 800c722:	46bd      	mov	sp, r7
 800c724:	b002      	add	sp, #8
 800c726:	bd80      	pop	{r7, pc}
 800c728:	080160bc 	.word	0x080160bc

0800c72c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800c72c:	b590      	push	{r4, r7, lr}
 800c72e:	b083      	sub	sp, #12
 800c730:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800c732:	f7ff fed9 	bl	800c4e8 <LL_RCC_PLL_GetMainSource>
 800c736:	0003      	movs	r3, r0
 800c738:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	2b02      	cmp	r3, #2
 800c73e:	d003      	beq.n	800c748 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	2b03      	cmp	r3, #3
 800c744:	d003      	beq.n	800c74e <RCC_PLL_GetFreqDomain_SYS+0x22>
 800c746:	e005      	b.n	800c754 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800c748:	4b13      	ldr	r3, [pc, #76]	; (800c798 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800c74a:	607b      	str	r3, [r7, #4]
      break;
 800c74c:	e005      	b.n	800c75a <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800c74e:	4b13      	ldr	r3, [pc, #76]	; (800c79c <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800c750:	607b      	str	r3, [r7, #4]
      break;
 800c752:	e002      	b.n	800c75a <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800c754:	4b10      	ldr	r3, [pc, #64]	; (800c798 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800c756:	607b      	str	r3, [r7, #4]
      break;
 800c758:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800c75a:	f7ff fead 	bl	800c4b8 <LL_RCC_PLL_GetN>
 800c75e:	0002      	movs	r2, r0
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	4353      	muls	r3, r2
 800c764:	001c      	movs	r4, r3
 800c766:	f7ff fecb 	bl	800c500 <LL_RCC_PLL_GetDivider>
 800c76a:	0003      	movs	r3, r0
 800c76c:	091b      	lsrs	r3, r3, #4
 800c76e:	3301      	adds	r3, #1
 800c770:	0019      	movs	r1, r3
 800c772:	0020      	movs	r0, r4
 800c774:	f7f3 fcc6 	bl	8000104 <__udivsi3>
 800c778:	0003      	movs	r3, r0
 800c77a:	001c      	movs	r4, r3
 800c77c:	f7ff fea8 	bl	800c4d0 <LL_RCC_PLL_GetR>
 800c780:	0003      	movs	r3, r0
 800c782:	0f5b      	lsrs	r3, r3, #29
 800c784:	3301      	adds	r3, #1
 800c786:	0019      	movs	r1, r3
 800c788:	0020      	movs	r0, r4
 800c78a:	f7f3 fcbb 	bl	8000104 <__udivsi3>
 800c78e:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800c790:	0018      	movs	r0, r3
 800c792:	46bd      	mov	sp, r7
 800c794:	b003      	add	sp, #12
 800c796:	bd90      	pop	{r4, r7, pc}
 800c798:	00f42400 	.word	0x00f42400
 800c79c:	007a1200 	.word	0x007a1200

0800c7a0 <LL_USART_IsEnabled>:
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	2201      	movs	r2, #1
 800c7ae:	4013      	ands	r3, r2
 800c7b0:	2b01      	cmp	r3, #1
 800c7b2:	d101      	bne.n	800c7b8 <LL_USART_IsEnabled+0x18>
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	e000      	b.n	800c7ba <LL_USART_IsEnabled+0x1a>
 800c7b8:	2300      	movs	r3, #0
}
 800c7ba:	0018      	movs	r0, r3
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	b002      	add	sp, #8
 800c7c0:	bd80      	pop	{r7, pc}

0800c7c2 <LL_USART_SetPrescaler>:
{
 800c7c2:	b580      	push	{r7, lr}
 800c7c4:	b082      	sub	sp, #8
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
 800c7ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7d0:	220f      	movs	r2, #15
 800c7d2:	4393      	bics	r3, r2
 800c7d4:	683a      	ldr	r2, [r7, #0]
 800c7d6:	b292      	uxth	r2, r2
 800c7d8:	431a      	orrs	r2, r3
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800c7de:	46c0      	nop			; (mov r8, r8)
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	b002      	add	sp, #8
 800c7e4:	bd80      	pop	{r7, pc}
	...

0800c7e8 <LL_USART_SetStopBitsLength>:
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	4a05      	ldr	r2, [pc, #20]	; (800c80c <LL_USART_SetStopBitsLength+0x24>)
 800c7f8:	401a      	ands	r2, r3
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	431a      	orrs	r2, r3
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	605a      	str	r2, [r3, #4]
}
 800c802:	46c0      	nop			; (mov r8, r8)
 800c804:	46bd      	mov	sp, r7
 800c806:	b002      	add	sp, #8
 800c808:	bd80      	pop	{r7, pc}
 800c80a:	46c0      	nop			; (mov r8, r8)
 800c80c:	ffffcfff 	.word	0xffffcfff

0800c810 <LL_USART_SetHWFlowCtrl>:
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b082      	sub	sp, #8
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	689b      	ldr	r3, [r3, #8]
 800c81e:	4a05      	ldr	r2, [pc, #20]	; (800c834 <LL_USART_SetHWFlowCtrl+0x24>)
 800c820:	401a      	ands	r2, r3
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	431a      	orrs	r2, r3
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	609a      	str	r2, [r3, #8]
}
 800c82a:	46c0      	nop			; (mov r8, r8)
 800c82c:	46bd      	mov	sp, r7
 800c82e:	b002      	add	sp, #8
 800c830:	bd80      	pop	{r7, pc}
 800c832:	46c0      	nop			; (mov r8, r8)
 800c834:	fffffcff 	.word	0xfffffcff

0800c838 <LL_USART_SetBaudRate>:
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b086      	sub	sp, #24
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	60f8      	str	r0, [r7, #12]
 800c840:	60b9      	str	r1, [r7, #8]
 800c842:	607a      	str	r2, [r7, #4]
 800c844:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2b0b      	cmp	r3, #11
 800c84a:	d846      	bhi.n	800c8da <LL_USART_SetBaudRate+0xa2>
  else if (BaudRate == 0U)
 800c84c:	6a3b      	ldr	r3, [r7, #32]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d043      	beq.n	800c8da <LL_USART_SetBaudRate+0xa2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800c852:	683a      	ldr	r2, [r7, #0]
 800c854:	2380      	movs	r3, #128	; 0x80
 800c856:	021b      	lsls	r3, r3, #8
 800c858:	429a      	cmp	r2, r3
 800c85a:	d126      	bne.n	800c8aa <LL_USART_SetBaudRate+0x72>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	b2db      	uxtb	r3, r3
 800c860:	001a      	movs	r2, r3
 800c862:	4b20      	ldr	r3, [pc, #128]	; (800c8e4 <LL_USART_SetBaudRate+0xac>)
 800c864:	0092      	lsls	r2, r2, #2
 800c866:	58d3      	ldr	r3, [r2, r3]
 800c868:	0019      	movs	r1, r3
 800c86a:	68b8      	ldr	r0, [r7, #8]
 800c86c:	f7f3 fc4a 	bl	8000104 <__udivsi3>
 800c870:	0003      	movs	r3, r0
 800c872:	005a      	lsls	r2, r3, #1
 800c874:	6a3b      	ldr	r3, [r7, #32]
 800c876:	085b      	lsrs	r3, r3, #1
 800c878:	18d3      	adds	r3, r2, r3
 800c87a:	6a39      	ldr	r1, [r7, #32]
 800c87c:	0018      	movs	r0, r3
 800c87e:	f7f3 fc41 	bl	8000104 <__udivsi3>
 800c882:	0003      	movs	r3, r0
 800c884:	b29b      	uxth	r3, r3
 800c886:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	4a17      	ldr	r2, [pc, #92]	; (800c8e8 <LL_USART_SetBaudRate+0xb0>)
 800c88c:	4013      	ands	r3, r2
 800c88e:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	085b      	lsrs	r3, r3, #1
 800c894:	b29b      	uxth	r3, r3
 800c896:	001a      	movs	r2, r3
 800c898:	2307      	movs	r3, #7
 800c89a:	4013      	ands	r3, r2
 800c89c:	693a      	ldr	r2, [r7, #16]
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	693a      	ldr	r2, [r7, #16]
 800c8a6:	60da      	str	r2, [r3, #12]
}
 800c8a8:	e017      	b.n	800c8da <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	b2db      	uxtb	r3, r3
 800c8ae:	001a      	movs	r2, r3
 800c8b0:	4b0c      	ldr	r3, [pc, #48]	; (800c8e4 <LL_USART_SetBaudRate+0xac>)
 800c8b2:	0092      	lsls	r2, r2, #2
 800c8b4:	58d3      	ldr	r3, [r2, r3]
 800c8b6:	0019      	movs	r1, r3
 800c8b8:	68b8      	ldr	r0, [r7, #8]
 800c8ba:	f7f3 fc23 	bl	8000104 <__udivsi3>
 800c8be:	0003      	movs	r3, r0
 800c8c0:	001a      	movs	r2, r3
 800c8c2:	6a3b      	ldr	r3, [r7, #32]
 800c8c4:	085b      	lsrs	r3, r3, #1
 800c8c6:	18d3      	adds	r3, r2, r3
 800c8c8:	6a39      	ldr	r1, [r7, #32]
 800c8ca:	0018      	movs	r0, r3
 800c8cc:	f7f3 fc1a 	bl	8000104 <__udivsi3>
 800c8d0:	0003      	movs	r3, r0
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	001a      	movs	r2, r3
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	60da      	str	r2, [r3, #12]
}
 800c8da:	46c0      	nop			; (mov r8, r8)
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	b006      	add	sp, #24
 800c8e0:	bd80      	pop	{r7, pc}
 800c8e2:	46c0      	nop			; (mov r8, r8)
 800c8e4:	08016130 	.word	0x08016130
 800c8e8:	0000fff0 	.word	0x0000fff0

0800c8ec <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800c8ec:	b590      	push	{r4, r7, lr}
 800c8ee:	b08b      	sub	sp, #44	; 0x2c
 800c8f0:	af02      	add	r7, sp, #8
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800c8f6:	231f      	movs	r3, #31
 800c8f8:	18fb      	adds	r3, r7, r3
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800c8fe:	2300      	movs	r3, #0
 800c900:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	0018      	movs	r0, r3
 800c906:	f7ff ff4b 	bl	800c7a0 <LL_USART_IsEnabled>
 800c90a:	1e03      	subs	r3, r0, #0
 800c90c:	d16a      	bne.n	800c9e4 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	4a38      	ldr	r2, [pc, #224]	; (800c9f4 <LL_USART_Init+0x108>)
 800c914:	401a      	ands	r2, r3
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	6899      	ldr	r1, [r3, #8]
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	691b      	ldr	r3, [r3, #16]
 800c91e:	4319      	orrs	r1, r3
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	695b      	ldr	r3, [r3, #20]
 800c924:	4319      	orrs	r1, r3
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	69db      	ldr	r3, [r3, #28]
 800c92a:	430b      	orrs	r3, r1
 800c92c:	431a      	orrs	r2, r3
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	68da      	ldr	r2, [r3, #12]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	0011      	movs	r1, r2
 800c93a:	0018      	movs	r0, r3
 800c93c:	f7ff ff54 	bl	800c7e8 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	699a      	ldr	r2, [r3, #24]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	0011      	movs	r1, r2
 800c948:	0018      	movs	r0, r3
 800c94a:	f7ff ff61 	bl	800c810 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	4a29      	ldr	r2, [pc, #164]	; (800c9f8 <LL_USART_Init+0x10c>)
 800c952:	4293      	cmp	r3, r2
 800c954:	d105      	bne.n	800c962 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800c956:	2003      	movs	r0, #3
 800c958:	f7ff fdfc 	bl	800c554 <LL_RCC_GetUSARTClockFreq>
 800c95c:	0003      	movs	r3, r0
 800c95e:	61bb      	str	r3, [r7, #24]
 800c960:	e022      	b.n	800c9a8 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	4a25      	ldr	r2, [pc, #148]	; (800c9fc <LL_USART_Init+0x110>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d105      	bne.n	800c976 <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800c96a:	200c      	movs	r0, #12
 800c96c:	f7ff fdf2 	bl	800c554 <LL_RCC_GetUSARTClockFreq>
 800c970:	0003      	movs	r3, r0
 800c972:	61bb      	str	r3, [r7, #24]
 800c974:	e018      	b.n	800c9a8 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	4a21      	ldr	r2, [pc, #132]	; (800ca00 <LL_USART_Init+0x114>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d108      	bne.n	800c990 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800c97e:	240c      	movs	r4, #12
 800c980:	193b      	adds	r3, r7, r4
 800c982:	0018      	movs	r0, r3
 800c984:	f7ff fdc8 	bl	800c518 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800c988:	193b      	adds	r3, r7, r4
 800c98a:	689b      	ldr	r3, [r3, #8]
 800c98c:	61bb      	str	r3, [r7, #24]
 800c98e:	e00b      	b.n	800c9a8 <LL_USART_Init+0xbc>
#endif
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	4a1c      	ldr	r2, [pc, #112]	; (800ca04 <LL_USART_Init+0x118>)
 800c994:	4293      	cmp	r3, r2
 800c996:	d107      	bne.n	800c9a8 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800c998:	240c      	movs	r4, #12
 800c99a:	193b      	adds	r3, r7, r4
 800c99c:	0018      	movs	r0, r3
 800c99e:	f7ff fdbb 	bl	800c518 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800c9a2:	193b      	adds	r3, r7, r4
 800c9a4:	689b      	ldr	r3, [r3, #8]
 800c9a6:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800c9a8:	69bb      	ldr	r3, [r7, #24]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d013      	beq.n	800c9d6 <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	685b      	ldr	r3, [r3, #4]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d00f      	beq.n	800c9d6 <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800c9b6:	231f      	movs	r3, #31
 800c9b8:	18fb      	adds	r3, r7, r3
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	681a      	ldr	r2, [r3, #0]
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	69dc      	ldr	r4, [r3, #28]
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	69b9      	ldr	r1, [r7, #24]
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	9300      	str	r3, [sp, #0]
 800c9d0:	0023      	movs	r3, r4
 800c9d2:	f7ff ff31 	bl	800c838 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	681a      	ldr	r2, [r3, #0]
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	0011      	movs	r1, r2
 800c9de:	0018      	movs	r0, r3
 800c9e0:	f7ff feef 	bl	800c7c2 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800c9e4:	231f      	movs	r3, #31
 800c9e6:	18fb      	adds	r3, r7, r3
 800c9e8:	781b      	ldrb	r3, [r3, #0]
}
 800c9ea:	0018      	movs	r0, r3
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	b009      	add	sp, #36	; 0x24
 800c9f0:	bd90      	pop	{r4, r7, pc}
 800c9f2:	46c0      	nop			; (mov r8, r8)
 800c9f4:	efff69f3 	.word	0xefff69f3
 800c9f8:	40013800 	.word	0x40013800
 800c9fc:	40004400 	.word	0x40004400
 800ca00:	40004800 	.word	0x40004800
 800ca04:	40004c00 	.word	0x40004c00

0800ca08 <__libc_init_array>:
 800ca08:	b570      	push	{r4, r5, r6, lr}
 800ca0a:	2600      	movs	r6, #0
 800ca0c:	4d0c      	ldr	r5, [pc, #48]	; (800ca40 <__libc_init_array+0x38>)
 800ca0e:	4c0d      	ldr	r4, [pc, #52]	; (800ca44 <__libc_init_array+0x3c>)
 800ca10:	1b64      	subs	r4, r4, r5
 800ca12:	10a4      	asrs	r4, r4, #2
 800ca14:	42a6      	cmp	r6, r4
 800ca16:	d109      	bne.n	800ca2c <__libc_init_array+0x24>
 800ca18:	2600      	movs	r6, #0
 800ca1a:	f000 f821 	bl	800ca60 <_init>
 800ca1e:	4d0a      	ldr	r5, [pc, #40]	; (800ca48 <__libc_init_array+0x40>)
 800ca20:	4c0a      	ldr	r4, [pc, #40]	; (800ca4c <__libc_init_array+0x44>)
 800ca22:	1b64      	subs	r4, r4, r5
 800ca24:	10a4      	asrs	r4, r4, #2
 800ca26:	42a6      	cmp	r6, r4
 800ca28:	d105      	bne.n	800ca36 <__libc_init_array+0x2e>
 800ca2a:	bd70      	pop	{r4, r5, r6, pc}
 800ca2c:	00b3      	lsls	r3, r6, #2
 800ca2e:	58eb      	ldr	r3, [r5, r3]
 800ca30:	4798      	blx	r3
 800ca32:	3601      	adds	r6, #1
 800ca34:	e7ee      	b.n	800ca14 <__libc_init_array+0xc>
 800ca36:	00b3      	lsls	r3, r6, #2
 800ca38:	58eb      	ldr	r3, [r5, r3]
 800ca3a:	4798      	blx	r3
 800ca3c:	3601      	adds	r6, #1
 800ca3e:	e7f2      	b.n	800ca26 <__libc_init_array+0x1e>
 800ca40:	08016160 	.word	0x08016160
 800ca44:	08016160 	.word	0x08016160
 800ca48:	08016160 	.word	0x08016160
 800ca4c:	08016164 	.word	0x08016164

0800ca50 <memset>:
 800ca50:	0003      	movs	r3, r0
 800ca52:	1882      	adds	r2, r0, r2
 800ca54:	4293      	cmp	r3, r2
 800ca56:	d100      	bne.n	800ca5a <memset+0xa>
 800ca58:	4770      	bx	lr
 800ca5a:	7019      	strb	r1, [r3, #0]
 800ca5c:	3301      	adds	r3, #1
 800ca5e:	e7f9      	b.n	800ca54 <memset+0x4>

0800ca60 <_init>:
 800ca60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca62:	46c0      	nop			; (mov r8, r8)
 800ca64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca66:	bc08      	pop	{r3}
 800ca68:	469e      	mov	lr, r3
 800ca6a:	4770      	bx	lr

0800ca6c <_fini>:
 800ca6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca6e:	46c0      	nop			; (mov r8, r8)
 800ca70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca72:	bc08      	pop	{r3}
 800ca74:	469e      	mov	lr, r3
 800ca76:	4770      	bx	lr
