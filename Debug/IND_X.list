
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbb8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000bd40  0800fc78  0800fc78  0001fc78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b9b8  0801b9b8  00030044  2**0
                  CONTENTS
  4 .ARM          00000000  0801b9b8  0801b9b8  00030044  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801b9b8  0801b9b8  00030044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b9b8  0801b9b8  0002b9b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b9bc  0801b9bc  0002b9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  0801b9c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034e8  20000044  0801ba04  00030044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000352c  0801ba04  0003352c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030044  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a465  00000000  00000000  0003006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d3  00000000  00000000  0004a4d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e0  00000000  00000000  0004d9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001768  00000000  00000000  0004f288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c568  00000000  00000000  000509f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001db23  00000000  00000000  0006cf58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae81d  00000000  00000000  0008aa7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00139298  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005efc  00000000  00000000  001392ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000044 	.word	0x20000044
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800fc5c 	.word	0x0800fc5c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000048 	.word	0x20000048
 8000100:	0800fc5c 	.word	0x0800fc5c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cdrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	1c10      	adds	r0, r2, #0
 80003f4:	4662      	mov	r2, ip
 80003f6:	468c      	mov	ip, r1
 80003f8:	1c19      	adds	r1, r3, #0
 80003fa:	4663      	mov	r3, ip
 80003fc:	e000      	b.n	8000400 <__aeabi_cdcmpeq>
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cdcmpeq>:
 8000400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000402:	f000 ff51 	bl	80012a8 <__ledf2>
 8000406:	2800      	cmp	r0, #0
 8000408:	d401      	bmi.n	800040e <__aeabi_cdcmpeq+0xe>
 800040a:	2100      	movs	r1, #0
 800040c:	42c8      	cmn	r0, r1
 800040e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000410 <__aeabi_dcmpeq>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f000 fe9b 	bl	800114c <__eqdf2>
 8000416:	4240      	negs	r0, r0
 8000418:	3001      	adds	r0, #1
 800041a:	bd10      	pop	{r4, pc}

0800041c <__aeabi_dcmplt>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f000 ff43 	bl	80012a8 <__ledf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	db01      	blt.n	800042a <__aeabi_dcmplt+0xe>
 8000426:	2000      	movs	r0, #0
 8000428:	bd10      	pop	{r4, pc}
 800042a:	2001      	movs	r0, #1
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_dcmple>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 ff39 	bl	80012a8 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	dd01      	ble.n	800043e <__aeabi_dcmple+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmpgt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 febd 	bl	80011c4 <__gedf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dc01      	bgt.n	8000452 <__aeabi_dcmpgt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpge>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 feb3 	bl	80011c4 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	da01      	bge.n	8000466 <__aeabi_dcmpge+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_d2uiz>:
 800046c:	b570      	push	{r4, r5, r6, lr}
 800046e:	2200      	movs	r2, #0
 8000470:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <__aeabi_d2uiz+0x38>)
 8000472:	0004      	movs	r4, r0
 8000474:	000d      	movs	r5, r1
 8000476:	f7ff ffef 	bl	8000458 <__aeabi_dcmpge>
 800047a:	2800      	cmp	r0, #0
 800047c:	d104      	bne.n	8000488 <__aeabi_d2uiz+0x1c>
 800047e:	0020      	movs	r0, r4
 8000480:	0029      	movs	r1, r5
 8000482:	f001 fd7f 	bl	8001f84 <__aeabi_d2iz>
 8000486:	bd70      	pop	{r4, r5, r6, pc}
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <__aeabi_d2uiz+0x38>)
 800048a:	2200      	movs	r2, #0
 800048c:	0020      	movs	r0, r4
 800048e:	0029      	movs	r1, r5
 8000490:	f001 f9e6 	bl	8001860 <__aeabi_dsub>
 8000494:	f001 fd76 	bl	8001f84 <__aeabi_d2iz>
 8000498:	2380      	movs	r3, #128	; 0x80
 800049a:	061b      	lsls	r3, r3, #24
 800049c:	469c      	mov	ip, r3
 800049e:	4460      	add	r0, ip
 80004a0:	e7f1      	b.n	8000486 <__aeabi_d2uiz+0x1a>
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	41e00000 	.word	0x41e00000

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	46d6      	mov	lr, sl
 80004ae:	4646      	mov	r6, r8
 80004b0:	000d      	movs	r5, r1
 80004b2:	0001      	movs	r1, r0
 80004b4:	0018      	movs	r0, r3
 80004b6:	b5c0      	push	{r6, r7, lr}
 80004b8:	0017      	movs	r7, r2
 80004ba:	032b      	lsls	r3, r5, #12
 80004bc:	0a5a      	lsrs	r2, r3, #9
 80004be:	0f4b      	lsrs	r3, r1, #29
 80004c0:	4313      	orrs	r3, r2
 80004c2:	00ca      	lsls	r2, r1, #3
 80004c4:	4691      	mov	r9, r2
 80004c6:	0302      	lsls	r2, r0, #12
 80004c8:	006e      	lsls	r6, r5, #1
 80004ca:	0041      	lsls	r1, r0, #1
 80004cc:	0a52      	lsrs	r2, r2, #9
 80004ce:	0fec      	lsrs	r4, r5, #31
 80004d0:	0f7d      	lsrs	r5, r7, #29
 80004d2:	4315      	orrs	r5, r2
 80004d4:	0d76      	lsrs	r6, r6, #21
 80004d6:	0d49      	lsrs	r1, r1, #21
 80004d8:	0fc0      	lsrs	r0, r0, #31
 80004da:	4682      	mov	sl, r0
 80004dc:	46ac      	mov	ip, r5
 80004de:	00ff      	lsls	r7, r7, #3
 80004e0:	1a72      	subs	r2, r6, r1
 80004e2:	4284      	cmp	r4, r0
 80004e4:	d100      	bne.n	80004e8 <__aeabi_dadd+0x40>
 80004e6:	e098      	b.n	800061a <__aeabi_dadd+0x172>
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	dc00      	bgt.n	80004ee <__aeabi_dadd+0x46>
 80004ec:	e081      	b.n	80005f2 <__aeabi_dadd+0x14a>
 80004ee:	2900      	cmp	r1, #0
 80004f0:	d100      	bne.n	80004f4 <__aeabi_dadd+0x4c>
 80004f2:	e0b6      	b.n	8000662 <__aeabi_dadd+0x1ba>
 80004f4:	49c9      	ldr	r1, [pc, #804]	; (800081c <__aeabi_dadd+0x374>)
 80004f6:	428e      	cmp	r6, r1
 80004f8:	d100      	bne.n	80004fc <__aeabi_dadd+0x54>
 80004fa:	e172      	b.n	80007e2 <__aeabi_dadd+0x33a>
 80004fc:	2180      	movs	r1, #128	; 0x80
 80004fe:	0028      	movs	r0, r5
 8000500:	0409      	lsls	r1, r1, #16
 8000502:	4308      	orrs	r0, r1
 8000504:	4684      	mov	ip, r0
 8000506:	2a38      	cmp	r2, #56	; 0x38
 8000508:	dd00      	ble.n	800050c <__aeabi_dadd+0x64>
 800050a:	e15e      	b.n	80007ca <__aeabi_dadd+0x322>
 800050c:	2a1f      	cmp	r2, #31
 800050e:	dd00      	ble.n	8000512 <__aeabi_dadd+0x6a>
 8000510:	e1ee      	b.n	80008f0 <__aeabi_dadd+0x448>
 8000512:	2020      	movs	r0, #32
 8000514:	0039      	movs	r1, r7
 8000516:	4665      	mov	r5, ip
 8000518:	1a80      	subs	r0, r0, r2
 800051a:	4087      	lsls	r7, r0
 800051c:	40d1      	lsrs	r1, r2
 800051e:	4085      	lsls	r5, r0
 8000520:	430d      	orrs	r5, r1
 8000522:	0039      	movs	r1, r7
 8000524:	1e4f      	subs	r7, r1, #1
 8000526:	41b9      	sbcs	r1, r7
 8000528:	4667      	mov	r7, ip
 800052a:	40d7      	lsrs	r7, r2
 800052c:	4329      	orrs	r1, r5
 800052e:	1bdb      	subs	r3, r3, r7
 8000530:	464a      	mov	r2, r9
 8000532:	1a55      	subs	r5, r2, r1
 8000534:	45a9      	cmp	r9, r5
 8000536:	4189      	sbcs	r1, r1
 8000538:	4249      	negs	r1, r1
 800053a:	1a5b      	subs	r3, r3, r1
 800053c:	4698      	mov	r8, r3
 800053e:	4643      	mov	r3, r8
 8000540:	021b      	lsls	r3, r3, #8
 8000542:	d400      	bmi.n	8000546 <__aeabi_dadd+0x9e>
 8000544:	e0cc      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000546:	4643      	mov	r3, r8
 8000548:	025b      	lsls	r3, r3, #9
 800054a:	0a5b      	lsrs	r3, r3, #9
 800054c:	4698      	mov	r8, r3
 800054e:	4643      	mov	r3, r8
 8000550:	2b00      	cmp	r3, #0
 8000552:	d100      	bne.n	8000556 <__aeabi_dadd+0xae>
 8000554:	e12c      	b.n	80007b0 <__aeabi_dadd+0x308>
 8000556:	4640      	mov	r0, r8
 8000558:	f001 fda0 	bl	800209c <__clzsi2>
 800055c:	0001      	movs	r1, r0
 800055e:	3908      	subs	r1, #8
 8000560:	2220      	movs	r2, #32
 8000562:	0028      	movs	r0, r5
 8000564:	4643      	mov	r3, r8
 8000566:	1a52      	subs	r2, r2, r1
 8000568:	408b      	lsls	r3, r1
 800056a:	40d0      	lsrs	r0, r2
 800056c:	408d      	lsls	r5, r1
 800056e:	4303      	orrs	r3, r0
 8000570:	428e      	cmp	r6, r1
 8000572:	dd00      	ble.n	8000576 <__aeabi_dadd+0xce>
 8000574:	e117      	b.n	80007a6 <__aeabi_dadd+0x2fe>
 8000576:	1b8e      	subs	r6, r1, r6
 8000578:	1c72      	adds	r2, r6, #1
 800057a:	2a1f      	cmp	r2, #31
 800057c:	dd00      	ble.n	8000580 <__aeabi_dadd+0xd8>
 800057e:	e1a7      	b.n	80008d0 <__aeabi_dadd+0x428>
 8000580:	2120      	movs	r1, #32
 8000582:	0018      	movs	r0, r3
 8000584:	002e      	movs	r6, r5
 8000586:	1a89      	subs	r1, r1, r2
 8000588:	408d      	lsls	r5, r1
 800058a:	4088      	lsls	r0, r1
 800058c:	40d6      	lsrs	r6, r2
 800058e:	40d3      	lsrs	r3, r2
 8000590:	1e69      	subs	r1, r5, #1
 8000592:	418d      	sbcs	r5, r1
 8000594:	4330      	orrs	r0, r6
 8000596:	4698      	mov	r8, r3
 8000598:	2600      	movs	r6, #0
 800059a:	4305      	orrs	r5, r0
 800059c:	076b      	lsls	r3, r5, #29
 800059e:	d009      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a0:	230f      	movs	r3, #15
 80005a2:	402b      	ands	r3, r5
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	d005      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a8:	1d2b      	adds	r3, r5, #4
 80005aa:	42ab      	cmp	r3, r5
 80005ac:	41ad      	sbcs	r5, r5
 80005ae:	426d      	negs	r5, r5
 80005b0:	44a8      	add	r8, r5
 80005b2:	001d      	movs	r5, r3
 80005b4:	4643      	mov	r3, r8
 80005b6:	021b      	lsls	r3, r3, #8
 80005b8:	d400      	bmi.n	80005bc <__aeabi_dadd+0x114>
 80005ba:	e094      	b.n	80006e6 <__aeabi_dadd+0x23e>
 80005bc:	4b97      	ldr	r3, [pc, #604]	; (800081c <__aeabi_dadd+0x374>)
 80005be:	1c72      	adds	r2, r6, #1
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d100      	bne.n	80005c6 <__aeabi_dadd+0x11e>
 80005c4:	e09d      	b.n	8000702 <__aeabi_dadd+0x25a>
 80005c6:	4641      	mov	r1, r8
 80005c8:	4b95      	ldr	r3, [pc, #596]	; (8000820 <__aeabi_dadd+0x378>)
 80005ca:	08ed      	lsrs	r5, r5, #3
 80005cc:	4019      	ands	r1, r3
 80005ce:	000b      	movs	r3, r1
 80005d0:	0552      	lsls	r2, r2, #21
 80005d2:	0749      	lsls	r1, r1, #29
 80005d4:	025b      	lsls	r3, r3, #9
 80005d6:	4329      	orrs	r1, r5
 80005d8:	0b1b      	lsrs	r3, r3, #12
 80005da:	0d52      	lsrs	r2, r2, #21
 80005dc:	0512      	lsls	r2, r2, #20
 80005de:	4313      	orrs	r3, r2
 80005e0:	07e4      	lsls	r4, r4, #31
 80005e2:	4323      	orrs	r3, r4
 80005e4:	0008      	movs	r0, r1
 80005e6:	0019      	movs	r1, r3
 80005e8:	bce0      	pop	{r5, r6, r7}
 80005ea:	46ba      	mov	sl, r7
 80005ec:	46b1      	mov	r9, r6
 80005ee:	46a8      	mov	r8, r5
 80005f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f2:	2a00      	cmp	r2, #0
 80005f4:	d043      	beq.n	800067e <__aeabi_dadd+0x1d6>
 80005f6:	1b8a      	subs	r2, r1, r6
 80005f8:	2e00      	cmp	r6, #0
 80005fa:	d000      	beq.n	80005fe <__aeabi_dadd+0x156>
 80005fc:	e12a      	b.n	8000854 <__aeabi_dadd+0x3ac>
 80005fe:	464c      	mov	r4, r9
 8000600:	431c      	orrs	r4, r3
 8000602:	d100      	bne.n	8000606 <__aeabi_dadd+0x15e>
 8000604:	e1d1      	b.n	80009aa <__aeabi_dadd+0x502>
 8000606:	1e54      	subs	r4, r2, #1
 8000608:	2a01      	cmp	r2, #1
 800060a:	d100      	bne.n	800060e <__aeabi_dadd+0x166>
 800060c:	e21f      	b.n	8000a4e <__aeabi_dadd+0x5a6>
 800060e:	4d83      	ldr	r5, [pc, #524]	; (800081c <__aeabi_dadd+0x374>)
 8000610:	42aa      	cmp	r2, r5
 8000612:	d100      	bne.n	8000616 <__aeabi_dadd+0x16e>
 8000614:	e272      	b.n	8000afc <__aeabi_dadd+0x654>
 8000616:	0022      	movs	r2, r4
 8000618:	e123      	b.n	8000862 <__aeabi_dadd+0x3ba>
 800061a:	2a00      	cmp	r2, #0
 800061c:	dc00      	bgt.n	8000620 <__aeabi_dadd+0x178>
 800061e:	e098      	b.n	8000752 <__aeabi_dadd+0x2aa>
 8000620:	2900      	cmp	r1, #0
 8000622:	d042      	beq.n	80006aa <__aeabi_dadd+0x202>
 8000624:	497d      	ldr	r1, [pc, #500]	; (800081c <__aeabi_dadd+0x374>)
 8000626:	428e      	cmp	r6, r1
 8000628:	d100      	bne.n	800062c <__aeabi_dadd+0x184>
 800062a:	e0da      	b.n	80007e2 <__aeabi_dadd+0x33a>
 800062c:	2180      	movs	r1, #128	; 0x80
 800062e:	0028      	movs	r0, r5
 8000630:	0409      	lsls	r1, r1, #16
 8000632:	4308      	orrs	r0, r1
 8000634:	4684      	mov	ip, r0
 8000636:	2a38      	cmp	r2, #56	; 0x38
 8000638:	dd00      	ble.n	800063c <__aeabi_dadd+0x194>
 800063a:	e129      	b.n	8000890 <__aeabi_dadd+0x3e8>
 800063c:	2a1f      	cmp	r2, #31
 800063e:	dc00      	bgt.n	8000642 <__aeabi_dadd+0x19a>
 8000640:	e187      	b.n	8000952 <__aeabi_dadd+0x4aa>
 8000642:	0011      	movs	r1, r2
 8000644:	4665      	mov	r5, ip
 8000646:	3920      	subs	r1, #32
 8000648:	40cd      	lsrs	r5, r1
 800064a:	2a20      	cmp	r2, #32
 800064c:	d004      	beq.n	8000658 <__aeabi_dadd+0x1b0>
 800064e:	2040      	movs	r0, #64	; 0x40
 8000650:	4661      	mov	r1, ip
 8000652:	1a82      	subs	r2, r0, r2
 8000654:	4091      	lsls	r1, r2
 8000656:	430f      	orrs	r7, r1
 8000658:	0039      	movs	r1, r7
 800065a:	1e4f      	subs	r7, r1, #1
 800065c:	41b9      	sbcs	r1, r7
 800065e:	430d      	orrs	r5, r1
 8000660:	e11b      	b.n	800089a <__aeabi_dadd+0x3f2>
 8000662:	0029      	movs	r1, r5
 8000664:	4339      	orrs	r1, r7
 8000666:	d100      	bne.n	800066a <__aeabi_dadd+0x1c2>
 8000668:	e0b5      	b.n	80007d6 <__aeabi_dadd+0x32e>
 800066a:	1e51      	subs	r1, r2, #1
 800066c:	2a01      	cmp	r2, #1
 800066e:	d100      	bne.n	8000672 <__aeabi_dadd+0x1ca>
 8000670:	e1ab      	b.n	80009ca <__aeabi_dadd+0x522>
 8000672:	486a      	ldr	r0, [pc, #424]	; (800081c <__aeabi_dadd+0x374>)
 8000674:	4282      	cmp	r2, r0
 8000676:	d100      	bne.n	800067a <__aeabi_dadd+0x1d2>
 8000678:	e1b2      	b.n	80009e0 <__aeabi_dadd+0x538>
 800067a:	000a      	movs	r2, r1
 800067c:	e743      	b.n	8000506 <__aeabi_dadd+0x5e>
 800067e:	4969      	ldr	r1, [pc, #420]	; (8000824 <__aeabi_dadd+0x37c>)
 8000680:	1c75      	adds	r5, r6, #1
 8000682:	420d      	tst	r5, r1
 8000684:	d000      	beq.n	8000688 <__aeabi_dadd+0x1e0>
 8000686:	e0cf      	b.n	8000828 <__aeabi_dadd+0x380>
 8000688:	2e00      	cmp	r6, #0
 800068a:	d000      	beq.n	800068e <__aeabi_dadd+0x1e6>
 800068c:	e193      	b.n	80009b6 <__aeabi_dadd+0x50e>
 800068e:	4649      	mov	r1, r9
 8000690:	4319      	orrs	r1, r3
 8000692:	d100      	bne.n	8000696 <__aeabi_dadd+0x1ee>
 8000694:	e1d1      	b.n	8000a3a <__aeabi_dadd+0x592>
 8000696:	4661      	mov	r1, ip
 8000698:	4339      	orrs	r1, r7
 800069a:	d000      	beq.n	800069e <__aeabi_dadd+0x1f6>
 800069c:	e1e3      	b.n	8000a66 <__aeabi_dadd+0x5be>
 800069e:	4649      	mov	r1, r9
 80006a0:	0758      	lsls	r0, r3, #29
 80006a2:	08c9      	lsrs	r1, r1, #3
 80006a4:	4301      	orrs	r1, r0
 80006a6:	08db      	lsrs	r3, r3, #3
 80006a8:	e026      	b.n	80006f8 <__aeabi_dadd+0x250>
 80006aa:	0029      	movs	r1, r5
 80006ac:	4339      	orrs	r1, r7
 80006ae:	d100      	bne.n	80006b2 <__aeabi_dadd+0x20a>
 80006b0:	e091      	b.n	80007d6 <__aeabi_dadd+0x32e>
 80006b2:	1e51      	subs	r1, r2, #1
 80006b4:	2a01      	cmp	r2, #1
 80006b6:	d005      	beq.n	80006c4 <__aeabi_dadd+0x21c>
 80006b8:	4858      	ldr	r0, [pc, #352]	; (800081c <__aeabi_dadd+0x374>)
 80006ba:	4282      	cmp	r2, r0
 80006bc:	d100      	bne.n	80006c0 <__aeabi_dadd+0x218>
 80006be:	e18f      	b.n	80009e0 <__aeabi_dadd+0x538>
 80006c0:	000a      	movs	r2, r1
 80006c2:	e7b8      	b.n	8000636 <__aeabi_dadd+0x18e>
 80006c4:	003d      	movs	r5, r7
 80006c6:	444d      	add	r5, r9
 80006c8:	454d      	cmp	r5, r9
 80006ca:	4189      	sbcs	r1, r1
 80006cc:	4463      	add	r3, ip
 80006ce:	4698      	mov	r8, r3
 80006d0:	4249      	negs	r1, r1
 80006d2:	4488      	add	r8, r1
 80006d4:	4643      	mov	r3, r8
 80006d6:	2602      	movs	r6, #2
 80006d8:	021b      	lsls	r3, r3, #8
 80006da:	d500      	bpl.n	80006de <__aeabi_dadd+0x236>
 80006dc:	e0eb      	b.n	80008b6 <__aeabi_dadd+0x40e>
 80006de:	3e01      	subs	r6, #1
 80006e0:	076b      	lsls	r3, r5, #29
 80006e2:	d000      	beq.n	80006e6 <__aeabi_dadd+0x23e>
 80006e4:	e75c      	b.n	80005a0 <__aeabi_dadd+0xf8>
 80006e6:	4643      	mov	r3, r8
 80006e8:	08e9      	lsrs	r1, r5, #3
 80006ea:	075a      	lsls	r2, r3, #29
 80006ec:	4311      	orrs	r1, r2
 80006ee:	0032      	movs	r2, r6
 80006f0:	08db      	lsrs	r3, r3, #3
 80006f2:	484a      	ldr	r0, [pc, #296]	; (800081c <__aeabi_dadd+0x374>)
 80006f4:	4282      	cmp	r2, r0
 80006f6:	d021      	beq.n	800073c <__aeabi_dadd+0x294>
 80006f8:	031b      	lsls	r3, r3, #12
 80006fa:	0552      	lsls	r2, r2, #21
 80006fc:	0b1b      	lsrs	r3, r3, #12
 80006fe:	0d52      	lsrs	r2, r2, #21
 8000700:	e76c      	b.n	80005dc <__aeabi_dadd+0x134>
 8000702:	2300      	movs	r3, #0
 8000704:	2100      	movs	r1, #0
 8000706:	e769      	b.n	80005dc <__aeabi_dadd+0x134>
 8000708:	002a      	movs	r2, r5
 800070a:	433a      	orrs	r2, r7
 800070c:	d069      	beq.n	80007e2 <__aeabi_dadd+0x33a>
 800070e:	464a      	mov	r2, r9
 8000710:	0758      	lsls	r0, r3, #29
 8000712:	08d1      	lsrs	r1, r2, #3
 8000714:	08da      	lsrs	r2, r3, #3
 8000716:	2380      	movs	r3, #128	; 0x80
 8000718:	031b      	lsls	r3, r3, #12
 800071a:	4308      	orrs	r0, r1
 800071c:	421a      	tst	r2, r3
 800071e:	d007      	beq.n	8000730 <__aeabi_dadd+0x288>
 8000720:	0029      	movs	r1, r5
 8000722:	08ed      	lsrs	r5, r5, #3
 8000724:	421d      	tst	r5, r3
 8000726:	d103      	bne.n	8000730 <__aeabi_dadd+0x288>
 8000728:	002a      	movs	r2, r5
 800072a:	08ff      	lsrs	r7, r7, #3
 800072c:	0748      	lsls	r0, r1, #29
 800072e:	4338      	orrs	r0, r7
 8000730:	0f43      	lsrs	r3, r0, #29
 8000732:	00c1      	lsls	r1, r0, #3
 8000734:	075b      	lsls	r3, r3, #29
 8000736:	08c9      	lsrs	r1, r1, #3
 8000738:	4319      	orrs	r1, r3
 800073a:	0013      	movs	r3, r2
 800073c:	000a      	movs	r2, r1
 800073e:	431a      	orrs	r2, r3
 8000740:	d100      	bne.n	8000744 <__aeabi_dadd+0x29c>
 8000742:	e213      	b.n	8000b6c <__aeabi_dadd+0x6c4>
 8000744:	2280      	movs	r2, #128	; 0x80
 8000746:	0312      	lsls	r2, r2, #12
 8000748:	4313      	orrs	r3, r2
 800074a:	031b      	lsls	r3, r3, #12
 800074c:	4a33      	ldr	r2, [pc, #204]	; (800081c <__aeabi_dadd+0x374>)
 800074e:	0b1b      	lsrs	r3, r3, #12
 8000750:	e744      	b.n	80005dc <__aeabi_dadd+0x134>
 8000752:	2a00      	cmp	r2, #0
 8000754:	d04b      	beq.n	80007ee <__aeabi_dadd+0x346>
 8000756:	1b8a      	subs	r2, r1, r6
 8000758:	2e00      	cmp	r6, #0
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x2b6>
 800075c:	e0e7      	b.n	800092e <__aeabi_dadd+0x486>
 800075e:	482f      	ldr	r0, [pc, #188]	; (800081c <__aeabi_dadd+0x374>)
 8000760:	4281      	cmp	r1, r0
 8000762:	d100      	bne.n	8000766 <__aeabi_dadd+0x2be>
 8000764:	e195      	b.n	8000a92 <__aeabi_dadd+0x5ea>
 8000766:	2080      	movs	r0, #128	; 0x80
 8000768:	0400      	lsls	r0, r0, #16
 800076a:	4303      	orrs	r3, r0
 800076c:	2a38      	cmp	r2, #56	; 0x38
 800076e:	dd00      	ble.n	8000772 <__aeabi_dadd+0x2ca>
 8000770:	e143      	b.n	80009fa <__aeabi_dadd+0x552>
 8000772:	2a1f      	cmp	r2, #31
 8000774:	dd00      	ble.n	8000778 <__aeabi_dadd+0x2d0>
 8000776:	e1db      	b.n	8000b30 <__aeabi_dadd+0x688>
 8000778:	2020      	movs	r0, #32
 800077a:	001d      	movs	r5, r3
 800077c:	464e      	mov	r6, r9
 800077e:	1a80      	subs	r0, r0, r2
 8000780:	4085      	lsls	r5, r0
 8000782:	40d6      	lsrs	r6, r2
 8000784:	4335      	orrs	r5, r6
 8000786:	464e      	mov	r6, r9
 8000788:	4086      	lsls	r6, r0
 800078a:	0030      	movs	r0, r6
 800078c:	40d3      	lsrs	r3, r2
 800078e:	1e46      	subs	r6, r0, #1
 8000790:	41b0      	sbcs	r0, r6
 8000792:	449c      	add	ip, r3
 8000794:	4305      	orrs	r5, r0
 8000796:	19ed      	adds	r5, r5, r7
 8000798:	42bd      	cmp	r5, r7
 800079a:	419b      	sbcs	r3, r3
 800079c:	425b      	negs	r3, r3
 800079e:	4463      	add	r3, ip
 80007a0:	4698      	mov	r8, r3
 80007a2:	000e      	movs	r6, r1
 80007a4:	e07f      	b.n	80008a6 <__aeabi_dadd+0x3fe>
 80007a6:	4a1e      	ldr	r2, [pc, #120]	; (8000820 <__aeabi_dadd+0x378>)
 80007a8:	1a76      	subs	r6, r6, r1
 80007aa:	4013      	ands	r3, r2
 80007ac:	4698      	mov	r8, r3
 80007ae:	e6f5      	b.n	800059c <__aeabi_dadd+0xf4>
 80007b0:	0028      	movs	r0, r5
 80007b2:	f001 fc73 	bl	800209c <__clzsi2>
 80007b6:	0001      	movs	r1, r0
 80007b8:	3118      	adds	r1, #24
 80007ba:	291f      	cmp	r1, #31
 80007bc:	dc00      	bgt.n	80007c0 <__aeabi_dadd+0x318>
 80007be:	e6cf      	b.n	8000560 <__aeabi_dadd+0xb8>
 80007c0:	002b      	movs	r3, r5
 80007c2:	3808      	subs	r0, #8
 80007c4:	4083      	lsls	r3, r0
 80007c6:	2500      	movs	r5, #0
 80007c8:	e6d2      	b.n	8000570 <__aeabi_dadd+0xc8>
 80007ca:	4662      	mov	r2, ip
 80007cc:	433a      	orrs	r2, r7
 80007ce:	0011      	movs	r1, r2
 80007d0:	1e4f      	subs	r7, r1, #1
 80007d2:	41b9      	sbcs	r1, r7
 80007d4:	e6ac      	b.n	8000530 <__aeabi_dadd+0x88>
 80007d6:	4649      	mov	r1, r9
 80007d8:	0758      	lsls	r0, r3, #29
 80007da:	08c9      	lsrs	r1, r1, #3
 80007dc:	4301      	orrs	r1, r0
 80007de:	08db      	lsrs	r3, r3, #3
 80007e0:	e787      	b.n	80006f2 <__aeabi_dadd+0x24a>
 80007e2:	4649      	mov	r1, r9
 80007e4:	075a      	lsls	r2, r3, #29
 80007e6:	08c9      	lsrs	r1, r1, #3
 80007e8:	4311      	orrs	r1, r2
 80007ea:	08db      	lsrs	r3, r3, #3
 80007ec:	e7a6      	b.n	800073c <__aeabi_dadd+0x294>
 80007ee:	490d      	ldr	r1, [pc, #52]	; (8000824 <__aeabi_dadd+0x37c>)
 80007f0:	1c70      	adds	r0, r6, #1
 80007f2:	4208      	tst	r0, r1
 80007f4:	d000      	beq.n	80007f8 <__aeabi_dadd+0x350>
 80007f6:	e0bb      	b.n	8000970 <__aeabi_dadd+0x4c8>
 80007f8:	2e00      	cmp	r6, #0
 80007fa:	d000      	beq.n	80007fe <__aeabi_dadd+0x356>
 80007fc:	e114      	b.n	8000a28 <__aeabi_dadd+0x580>
 80007fe:	4649      	mov	r1, r9
 8000800:	4319      	orrs	r1, r3
 8000802:	d100      	bne.n	8000806 <__aeabi_dadd+0x35e>
 8000804:	e175      	b.n	8000af2 <__aeabi_dadd+0x64a>
 8000806:	0029      	movs	r1, r5
 8000808:	4339      	orrs	r1, r7
 800080a:	d000      	beq.n	800080e <__aeabi_dadd+0x366>
 800080c:	e17e      	b.n	8000b0c <__aeabi_dadd+0x664>
 800080e:	4649      	mov	r1, r9
 8000810:	0758      	lsls	r0, r3, #29
 8000812:	08c9      	lsrs	r1, r1, #3
 8000814:	4301      	orrs	r1, r0
 8000816:	08db      	lsrs	r3, r3, #3
 8000818:	e76e      	b.n	80006f8 <__aeabi_dadd+0x250>
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	000007ff 	.word	0x000007ff
 8000820:	ff7fffff 	.word	0xff7fffff
 8000824:	000007fe 	.word	0x000007fe
 8000828:	4649      	mov	r1, r9
 800082a:	1bcd      	subs	r5, r1, r7
 800082c:	4661      	mov	r1, ip
 800082e:	1a58      	subs	r0, r3, r1
 8000830:	45a9      	cmp	r9, r5
 8000832:	4189      	sbcs	r1, r1
 8000834:	4249      	negs	r1, r1
 8000836:	4688      	mov	r8, r1
 8000838:	0001      	movs	r1, r0
 800083a:	4640      	mov	r0, r8
 800083c:	1a09      	subs	r1, r1, r0
 800083e:	4688      	mov	r8, r1
 8000840:	0209      	lsls	r1, r1, #8
 8000842:	d500      	bpl.n	8000846 <__aeabi_dadd+0x39e>
 8000844:	e0a6      	b.n	8000994 <__aeabi_dadd+0x4ec>
 8000846:	4641      	mov	r1, r8
 8000848:	4329      	orrs	r1, r5
 800084a:	d000      	beq.n	800084e <__aeabi_dadd+0x3a6>
 800084c:	e67f      	b.n	800054e <__aeabi_dadd+0xa6>
 800084e:	2300      	movs	r3, #0
 8000850:	2400      	movs	r4, #0
 8000852:	e751      	b.n	80006f8 <__aeabi_dadd+0x250>
 8000854:	4cc7      	ldr	r4, [pc, #796]	; (8000b74 <__aeabi_dadd+0x6cc>)
 8000856:	42a1      	cmp	r1, r4
 8000858:	d100      	bne.n	800085c <__aeabi_dadd+0x3b4>
 800085a:	e0c7      	b.n	80009ec <__aeabi_dadd+0x544>
 800085c:	2480      	movs	r4, #128	; 0x80
 800085e:	0424      	lsls	r4, r4, #16
 8000860:	4323      	orrs	r3, r4
 8000862:	2a38      	cmp	r2, #56	; 0x38
 8000864:	dc54      	bgt.n	8000910 <__aeabi_dadd+0x468>
 8000866:	2a1f      	cmp	r2, #31
 8000868:	dd00      	ble.n	800086c <__aeabi_dadd+0x3c4>
 800086a:	e0cc      	b.n	8000a06 <__aeabi_dadd+0x55e>
 800086c:	2420      	movs	r4, #32
 800086e:	4648      	mov	r0, r9
 8000870:	1aa4      	subs	r4, r4, r2
 8000872:	001d      	movs	r5, r3
 8000874:	464e      	mov	r6, r9
 8000876:	40a0      	lsls	r0, r4
 8000878:	40d6      	lsrs	r6, r2
 800087a:	40a5      	lsls	r5, r4
 800087c:	0004      	movs	r4, r0
 800087e:	40d3      	lsrs	r3, r2
 8000880:	4662      	mov	r2, ip
 8000882:	4335      	orrs	r5, r6
 8000884:	1e66      	subs	r6, r4, #1
 8000886:	41b4      	sbcs	r4, r6
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	469c      	mov	ip, r3
 800088c:	4325      	orrs	r5, r4
 800088e:	e044      	b.n	800091a <__aeabi_dadd+0x472>
 8000890:	4662      	mov	r2, ip
 8000892:	433a      	orrs	r2, r7
 8000894:	0015      	movs	r5, r2
 8000896:	1e6f      	subs	r7, r5, #1
 8000898:	41bd      	sbcs	r5, r7
 800089a:	444d      	add	r5, r9
 800089c:	454d      	cmp	r5, r9
 800089e:	4189      	sbcs	r1, r1
 80008a0:	4249      	negs	r1, r1
 80008a2:	4688      	mov	r8, r1
 80008a4:	4498      	add	r8, r3
 80008a6:	4643      	mov	r3, r8
 80008a8:	021b      	lsls	r3, r3, #8
 80008aa:	d400      	bmi.n	80008ae <__aeabi_dadd+0x406>
 80008ac:	e718      	b.n	80006e0 <__aeabi_dadd+0x238>
 80008ae:	4bb1      	ldr	r3, [pc, #708]	; (8000b74 <__aeabi_dadd+0x6cc>)
 80008b0:	3601      	adds	r6, #1
 80008b2:	429e      	cmp	r6, r3
 80008b4:	d049      	beq.n	800094a <__aeabi_dadd+0x4a2>
 80008b6:	4642      	mov	r2, r8
 80008b8:	4baf      	ldr	r3, [pc, #700]	; (8000b78 <__aeabi_dadd+0x6d0>)
 80008ba:	2101      	movs	r1, #1
 80008bc:	401a      	ands	r2, r3
 80008be:	0013      	movs	r3, r2
 80008c0:	086a      	lsrs	r2, r5, #1
 80008c2:	400d      	ands	r5, r1
 80008c4:	4315      	orrs	r5, r2
 80008c6:	07d9      	lsls	r1, r3, #31
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	4698      	mov	r8, r3
 80008cc:	430d      	orrs	r5, r1
 80008ce:	e665      	b.n	800059c <__aeabi_dadd+0xf4>
 80008d0:	0018      	movs	r0, r3
 80008d2:	3e1f      	subs	r6, #31
 80008d4:	40f0      	lsrs	r0, r6
 80008d6:	2a20      	cmp	r2, #32
 80008d8:	d003      	beq.n	80008e2 <__aeabi_dadd+0x43a>
 80008da:	2140      	movs	r1, #64	; 0x40
 80008dc:	1a8a      	subs	r2, r1, r2
 80008de:	4093      	lsls	r3, r2
 80008e0:	431d      	orrs	r5, r3
 80008e2:	1e69      	subs	r1, r5, #1
 80008e4:	418d      	sbcs	r5, r1
 80008e6:	2300      	movs	r3, #0
 80008e8:	2600      	movs	r6, #0
 80008ea:	4698      	mov	r8, r3
 80008ec:	4305      	orrs	r5, r0
 80008ee:	e6f7      	b.n	80006e0 <__aeabi_dadd+0x238>
 80008f0:	0011      	movs	r1, r2
 80008f2:	4665      	mov	r5, ip
 80008f4:	3920      	subs	r1, #32
 80008f6:	40cd      	lsrs	r5, r1
 80008f8:	2a20      	cmp	r2, #32
 80008fa:	d004      	beq.n	8000906 <__aeabi_dadd+0x45e>
 80008fc:	2040      	movs	r0, #64	; 0x40
 80008fe:	4661      	mov	r1, ip
 8000900:	1a82      	subs	r2, r0, r2
 8000902:	4091      	lsls	r1, r2
 8000904:	430f      	orrs	r7, r1
 8000906:	0039      	movs	r1, r7
 8000908:	1e4f      	subs	r7, r1, #1
 800090a:	41b9      	sbcs	r1, r7
 800090c:	4329      	orrs	r1, r5
 800090e:	e60f      	b.n	8000530 <__aeabi_dadd+0x88>
 8000910:	464a      	mov	r2, r9
 8000912:	4313      	orrs	r3, r2
 8000914:	001d      	movs	r5, r3
 8000916:	1e6b      	subs	r3, r5, #1
 8000918:	419d      	sbcs	r5, r3
 800091a:	1b7d      	subs	r5, r7, r5
 800091c:	42af      	cmp	r7, r5
 800091e:	419b      	sbcs	r3, r3
 8000920:	4662      	mov	r2, ip
 8000922:	425b      	negs	r3, r3
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	4698      	mov	r8, r3
 8000928:	4654      	mov	r4, sl
 800092a:	000e      	movs	r6, r1
 800092c:	e607      	b.n	800053e <__aeabi_dadd+0x96>
 800092e:	4648      	mov	r0, r9
 8000930:	4318      	orrs	r0, r3
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x48e>
 8000934:	e0b3      	b.n	8000a9e <__aeabi_dadd+0x5f6>
 8000936:	1e50      	subs	r0, r2, #1
 8000938:	2a01      	cmp	r2, #1
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x496>
 800093c:	e10d      	b.n	8000b5a <__aeabi_dadd+0x6b2>
 800093e:	4d8d      	ldr	r5, [pc, #564]	; (8000b74 <__aeabi_dadd+0x6cc>)
 8000940:	42aa      	cmp	r2, r5
 8000942:	d100      	bne.n	8000946 <__aeabi_dadd+0x49e>
 8000944:	e0a5      	b.n	8000a92 <__aeabi_dadd+0x5ea>
 8000946:	0002      	movs	r2, r0
 8000948:	e710      	b.n	800076c <__aeabi_dadd+0x2c4>
 800094a:	0032      	movs	r2, r6
 800094c:	2300      	movs	r3, #0
 800094e:	2100      	movs	r1, #0
 8000950:	e644      	b.n	80005dc <__aeabi_dadd+0x134>
 8000952:	2120      	movs	r1, #32
 8000954:	0038      	movs	r0, r7
 8000956:	1a89      	subs	r1, r1, r2
 8000958:	4665      	mov	r5, ip
 800095a:	408f      	lsls	r7, r1
 800095c:	408d      	lsls	r5, r1
 800095e:	40d0      	lsrs	r0, r2
 8000960:	1e79      	subs	r1, r7, #1
 8000962:	418f      	sbcs	r7, r1
 8000964:	4305      	orrs	r5, r0
 8000966:	433d      	orrs	r5, r7
 8000968:	4667      	mov	r7, ip
 800096a:	40d7      	lsrs	r7, r2
 800096c:	19db      	adds	r3, r3, r7
 800096e:	e794      	b.n	800089a <__aeabi_dadd+0x3f2>
 8000970:	4a80      	ldr	r2, [pc, #512]	; (8000b74 <__aeabi_dadd+0x6cc>)
 8000972:	4290      	cmp	r0, r2
 8000974:	d100      	bne.n	8000978 <__aeabi_dadd+0x4d0>
 8000976:	e0ec      	b.n	8000b52 <__aeabi_dadd+0x6aa>
 8000978:	0039      	movs	r1, r7
 800097a:	4449      	add	r1, r9
 800097c:	4549      	cmp	r1, r9
 800097e:	4192      	sbcs	r2, r2
 8000980:	4463      	add	r3, ip
 8000982:	4252      	negs	r2, r2
 8000984:	189b      	adds	r3, r3, r2
 8000986:	07dd      	lsls	r5, r3, #31
 8000988:	0849      	lsrs	r1, r1, #1
 800098a:	085b      	lsrs	r3, r3, #1
 800098c:	4698      	mov	r8, r3
 800098e:	0006      	movs	r6, r0
 8000990:	430d      	orrs	r5, r1
 8000992:	e6a5      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000994:	464a      	mov	r2, r9
 8000996:	1abd      	subs	r5, r7, r2
 8000998:	42af      	cmp	r7, r5
 800099a:	4189      	sbcs	r1, r1
 800099c:	4662      	mov	r2, ip
 800099e:	4249      	negs	r1, r1
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	1a5b      	subs	r3, r3, r1
 80009a4:	4698      	mov	r8, r3
 80009a6:	4654      	mov	r4, sl
 80009a8:	e5d1      	b.n	800054e <__aeabi_dadd+0xa6>
 80009aa:	076c      	lsls	r4, r5, #29
 80009ac:	08f9      	lsrs	r1, r7, #3
 80009ae:	4321      	orrs	r1, r4
 80009b0:	08eb      	lsrs	r3, r5, #3
 80009b2:	0004      	movs	r4, r0
 80009b4:	e69d      	b.n	80006f2 <__aeabi_dadd+0x24a>
 80009b6:	464a      	mov	r2, r9
 80009b8:	431a      	orrs	r2, r3
 80009ba:	d175      	bne.n	8000aa8 <__aeabi_dadd+0x600>
 80009bc:	4661      	mov	r1, ip
 80009be:	4339      	orrs	r1, r7
 80009c0:	d114      	bne.n	80009ec <__aeabi_dadd+0x544>
 80009c2:	2380      	movs	r3, #128	; 0x80
 80009c4:	2400      	movs	r4, #0
 80009c6:	031b      	lsls	r3, r3, #12
 80009c8:	e6bc      	b.n	8000744 <__aeabi_dadd+0x29c>
 80009ca:	464a      	mov	r2, r9
 80009cc:	1bd5      	subs	r5, r2, r7
 80009ce:	45a9      	cmp	r9, r5
 80009d0:	4189      	sbcs	r1, r1
 80009d2:	4662      	mov	r2, ip
 80009d4:	4249      	negs	r1, r1
 80009d6:	1a9b      	subs	r3, r3, r2
 80009d8:	1a5b      	subs	r3, r3, r1
 80009da:	4698      	mov	r8, r3
 80009dc:	2601      	movs	r6, #1
 80009de:	e5ae      	b.n	800053e <__aeabi_dadd+0x96>
 80009e0:	464a      	mov	r2, r9
 80009e2:	08d1      	lsrs	r1, r2, #3
 80009e4:	075a      	lsls	r2, r3, #29
 80009e6:	4311      	orrs	r1, r2
 80009e8:	08db      	lsrs	r3, r3, #3
 80009ea:	e6a7      	b.n	800073c <__aeabi_dadd+0x294>
 80009ec:	4663      	mov	r3, ip
 80009ee:	08f9      	lsrs	r1, r7, #3
 80009f0:	075a      	lsls	r2, r3, #29
 80009f2:	4654      	mov	r4, sl
 80009f4:	4311      	orrs	r1, r2
 80009f6:	08db      	lsrs	r3, r3, #3
 80009f8:	e6a0      	b.n	800073c <__aeabi_dadd+0x294>
 80009fa:	464a      	mov	r2, r9
 80009fc:	4313      	orrs	r3, r2
 80009fe:	001d      	movs	r5, r3
 8000a00:	1e6b      	subs	r3, r5, #1
 8000a02:	419d      	sbcs	r5, r3
 8000a04:	e6c7      	b.n	8000796 <__aeabi_dadd+0x2ee>
 8000a06:	0014      	movs	r4, r2
 8000a08:	001e      	movs	r6, r3
 8000a0a:	3c20      	subs	r4, #32
 8000a0c:	40e6      	lsrs	r6, r4
 8000a0e:	2a20      	cmp	r2, #32
 8000a10:	d005      	beq.n	8000a1e <__aeabi_dadd+0x576>
 8000a12:	2440      	movs	r4, #64	; 0x40
 8000a14:	1aa2      	subs	r2, r4, r2
 8000a16:	4093      	lsls	r3, r2
 8000a18:	464a      	mov	r2, r9
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	4691      	mov	r9, r2
 8000a1e:	464d      	mov	r5, r9
 8000a20:	1e6b      	subs	r3, r5, #1
 8000a22:	419d      	sbcs	r5, r3
 8000a24:	4335      	orrs	r5, r6
 8000a26:	e778      	b.n	800091a <__aeabi_dadd+0x472>
 8000a28:	464a      	mov	r2, r9
 8000a2a:	431a      	orrs	r2, r3
 8000a2c:	d000      	beq.n	8000a30 <__aeabi_dadd+0x588>
 8000a2e:	e66b      	b.n	8000708 <__aeabi_dadd+0x260>
 8000a30:	076b      	lsls	r3, r5, #29
 8000a32:	08f9      	lsrs	r1, r7, #3
 8000a34:	4319      	orrs	r1, r3
 8000a36:	08eb      	lsrs	r3, r5, #3
 8000a38:	e680      	b.n	800073c <__aeabi_dadd+0x294>
 8000a3a:	4661      	mov	r1, ip
 8000a3c:	4339      	orrs	r1, r7
 8000a3e:	d054      	beq.n	8000aea <__aeabi_dadd+0x642>
 8000a40:	4663      	mov	r3, ip
 8000a42:	08f9      	lsrs	r1, r7, #3
 8000a44:	075c      	lsls	r4, r3, #29
 8000a46:	4321      	orrs	r1, r4
 8000a48:	08db      	lsrs	r3, r3, #3
 8000a4a:	0004      	movs	r4, r0
 8000a4c:	e654      	b.n	80006f8 <__aeabi_dadd+0x250>
 8000a4e:	464a      	mov	r2, r9
 8000a50:	1abd      	subs	r5, r7, r2
 8000a52:	42af      	cmp	r7, r5
 8000a54:	4189      	sbcs	r1, r1
 8000a56:	4662      	mov	r2, ip
 8000a58:	4249      	negs	r1, r1
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	1a5b      	subs	r3, r3, r1
 8000a5e:	4698      	mov	r8, r3
 8000a60:	0004      	movs	r4, r0
 8000a62:	2601      	movs	r6, #1
 8000a64:	e56b      	b.n	800053e <__aeabi_dadd+0x96>
 8000a66:	464a      	mov	r2, r9
 8000a68:	1bd5      	subs	r5, r2, r7
 8000a6a:	45a9      	cmp	r9, r5
 8000a6c:	4189      	sbcs	r1, r1
 8000a6e:	4662      	mov	r2, ip
 8000a70:	4249      	negs	r1, r1
 8000a72:	1a9a      	subs	r2, r3, r2
 8000a74:	1a52      	subs	r2, r2, r1
 8000a76:	4690      	mov	r8, r2
 8000a78:	0212      	lsls	r2, r2, #8
 8000a7a:	d532      	bpl.n	8000ae2 <__aeabi_dadd+0x63a>
 8000a7c:	464a      	mov	r2, r9
 8000a7e:	1abd      	subs	r5, r7, r2
 8000a80:	42af      	cmp	r7, r5
 8000a82:	4189      	sbcs	r1, r1
 8000a84:	4662      	mov	r2, ip
 8000a86:	4249      	negs	r1, r1
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	1a5b      	subs	r3, r3, r1
 8000a8c:	4698      	mov	r8, r3
 8000a8e:	0004      	movs	r4, r0
 8000a90:	e584      	b.n	800059c <__aeabi_dadd+0xf4>
 8000a92:	4663      	mov	r3, ip
 8000a94:	08f9      	lsrs	r1, r7, #3
 8000a96:	075a      	lsls	r2, r3, #29
 8000a98:	4311      	orrs	r1, r2
 8000a9a:	08db      	lsrs	r3, r3, #3
 8000a9c:	e64e      	b.n	800073c <__aeabi_dadd+0x294>
 8000a9e:	08f9      	lsrs	r1, r7, #3
 8000aa0:	0768      	lsls	r0, r5, #29
 8000aa2:	4301      	orrs	r1, r0
 8000aa4:	08eb      	lsrs	r3, r5, #3
 8000aa6:	e624      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000aa8:	4662      	mov	r2, ip
 8000aaa:	433a      	orrs	r2, r7
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_dadd+0x608>
 8000aae:	e698      	b.n	80007e2 <__aeabi_dadd+0x33a>
 8000ab0:	464a      	mov	r2, r9
 8000ab2:	08d1      	lsrs	r1, r2, #3
 8000ab4:	075a      	lsls	r2, r3, #29
 8000ab6:	4311      	orrs	r1, r2
 8000ab8:	08da      	lsrs	r2, r3, #3
 8000aba:	2380      	movs	r3, #128	; 0x80
 8000abc:	031b      	lsls	r3, r3, #12
 8000abe:	421a      	tst	r2, r3
 8000ac0:	d008      	beq.n	8000ad4 <__aeabi_dadd+0x62c>
 8000ac2:	4660      	mov	r0, ip
 8000ac4:	08c5      	lsrs	r5, r0, #3
 8000ac6:	421d      	tst	r5, r3
 8000ac8:	d104      	bne.n	8000ad4 <__aeabi_dadd+0x62c>
 8000aca:	4654      	mov	r4, sl
 8000acc:	002a      	movs	r2, r5
 8000ace:	08f9      	lsrs	r1, r7, #3
 8000ad0:	0743      	lsls	r3, r0, #29
 8000ad2:	4319      	orrs	r1, r3
 8000ad4:	0f4b      	lsrs	r3, r1, #29
 8000ad6:	00c9      	lsls	r1, r1, #3
 8000ad8:	075b      	lsls	r3, r3, #29
 8000ada:	08c9      	lsrs	r1, r1, #3
 8000adc:	4319      	orrs	r1, r3
 8000ade:	0013      	movs	r3, r2
 8000ae0:	e62c      	b.n	800073c <__aeabi_dadd+0x294>
 8000ae2:	4641      	mov	r1, r8
 8000ae4:	4329      	orrs	r1, r5
 8000ae6:	d000      	beq.n	8000aea <__aeabi_dadd+0x642>
 8000ae8:	e5fa      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000aea:	2300      	movs	r3, #0
 8000aec:	000a      	movs	r2, r1
 8000aee:	2400      	movs	r4, #0
 8000af0:	e602      	b.n	80006f8 <__aeabi_dadd+0x250>
 8000af2:	076b      	lsls	r3, r5, #29
 8000af4:	08f9      	lsrs	r1, r7, #3
 8000af6:	4319      	orrs	r1, r3
 8000af8:	08eb      	lsrs	r3, r5, #3
 8000afa:	e5fd      	b.n	80006f8 <__aeabi_dadd+0x250>
 8000afc:	4663      	mov	r3, ip
 8000afe:	08f9      	lsrs	r1, r7, #3
 8000b00:	075b      	lsls	r3, r3, #29
 8000b02:	4319      	orrs	r1, r3
 8000b04:	4663      	mov	r3, ip
 8000b06:	0004      	movs	r4, r0
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	e617      	b.n	800073c <__aeabi_dadd+0x294>
 8000b0c:	003d      	movs	r5, r7
 8000b0e:	444d      	add	r5, r9
 8000b10:	4463      	add	r3, ip
 8000b12:	454d      	cmp	r5, r9
 8000b14:	4189      	sbcs	r1, r1
 8000b16:	4698      	mov	r8, r3
 8000b18:	4249      	negs	r1, r1
 8000b1a:	4488      	add	r8, r1
 8000b1c:	4643      	mov	r3, r8
 8000b1e:	021b      	lsls	r3, r3, #8
 8000b20:	d400      	bmi.n	8000b24 <__aeabi_dadd+0x67c>
 8000b22:	e5dd      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000b24:	4642      	mov	r2, r8
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <__aeabi_dadd+0x6d0>)
 8000b28:	2601      	movs	r6, #1
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	4690      	mov	r8, r2
 8000b2e:	e5d7      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000b30:	0010      	movs	r0, r2
 8000b32:	001e      	movs	r6, r3
 8000b34:	3820      	subs	r0, #32
 8000b36:	40c6      	lsrs	r6, r0
 8000b38:	2a20      	cmp	r2, #32
 8000b3a:	d005      	beq.n	8000b48 <__aeabi_dadd+0x6a0>
 8000b3c:	2040      	movs	r0, #64	; 0x40
 8000b3e:	1a82      	subs	r2, r0, r2
 8000b40:	4093      	lsls	r3, r2
 8000b42:	464a      	mov	r2, r9
 8000b44:	431a      	orrs	r2, r3
 8000b46:	4691      	mov	r9, r2
 8000b48:	464d      	mov	r5, r9
 8000b4a:	1e6b      	subs	r3, r5, #1
 8000b4c:	419d      	sbcs	r5, r3
 8000b4e:	4335      	orrs	r5, r6
 8000b50:	e621      	b.n	8000796 <__aeabi_dadd+0x2ee>
 8000b52:	0002      	movs	r2, r0
 8000b54:	2300      	movs	r3, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	e540      	b.n	80005dc <__aeabi_dadd+0x134>
 8000b5a:	464a      	mov	r2, r9
 8000b5c:	19d5      	adds	r5, r2, r7
 8000b5e:	42bd      	cmp	r5, r7
 8000b60:	4189      	sbcs	r1, r1
 8000b62:	4463      	add	r3, ip
 8000b64:	4698      	mov	r8, r3
 8000b66:	4249      	negs	r1, r1
 8000b68:	4488      	add	r8, r1
 8000b6a:	e5b3      	b.n	80006d4 <__aeabi_dadd+0x22c>
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4a01      	ldr	r2, [pc, #4]	; (8000b74 <__aeabi_dadd+0x6cc>)
 8000b70:	000b      	movs	r3, r1
 8000b72:	e533      	b.n	80005dc <__aeabi_dadd+0x134>
 8000b74:	000007ff 	.word	0x000007ff
 8000b78:	ff7fffff 	.word	0xff7fffff

08000b7c <__aeabi_ddiv>:
 8000b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7e:	4657      	mov	r7, sl
 8000b80:	464e      	mov	r6, r9
 8000b82:	4645      	mov	r5, r8
 8000b84:	46de      	mov	lr, fp
 8000b86:	b5e0      	push	{r5, r6, r7, lr}
 8000b88:	4681      	mov	r9, r0
 8000b8a:	0005      	movs	r5, r0
 8000b8c:	030c      	lsls	r4, r1, #12
 8000b8e:	0048      	lsls	r0, r1, #1
 8000b90:	4692      	mov	sl, r2
 8000b92:	001f      	movs	r7, r3
 8000b94:	b085      	sub	sp, #20
 8000b96:	0b24      	lsrs	r4, r4, #12
 8000b98:	0d40      	lsrs	r0, r0, #21
 8000b9a:	0fce      	lsrs	r6, r1, #31
 8000b9c:	2800      	cmp	r0, #0
 8000b9e:	d059      	beq.n	8000c54 <__aeabi_ddiv+0xd8>
 8000ba0:	4b87      	ldr	r3, [pc, #540]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_ddiv+0x2c>
 8000ba6:	e098      	b.n	8000cda <__aeabi_ddiv+0x15e>
 8000ba8:	0f6b      	lsrs	r3, r5, #29
 8000baa:	00e4      	lsls	r4, r4, #3
 8000bac:	431c      	orrs	r4, r3
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	041b      	lsls	r3, r3, #16
 8000bb2:	4323      	orrs	r3, r4
 8000bb4:	4698      	mov	r8, r3
 8000bb6:	4b83      	ldr	r3, [pc, #524]	; (8000dc4 <__aeabi_ddiv+0x248>)
 8000bb8:	00ed      	lsls	r5, r5, #3
 8000bba:	469b      	mov	fp, r3
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	4699      	mov	r9, r3
 8000bc0:	4483      	add	fp, r0
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	033c      	lsls	r4, r7, #12
 8000bc6:	007b      	lsls	r3, r7, #1
 8000bc8:	4650      	mov	r0, sl
 8000bca:	0b24      	lsrs	r4, r4, #12
 8000bcc:	0d5b      	lsrs	r3, r3, #21
 8000bce:	0fff      	lsrs	r7, r7, #31
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d067      	beq.n	8000ca4 <__aeabi_ddiv+0x128>
 8000bd4:	4a7a      	ldr	r2, [pc, #488]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d018      	beq.n	8000c0c <__aeabi_ddiv+0x90>
 8000bda:	497a      	ldr	r1, [pc, #488]	; (8000dc4 <__aeabi_ddiv+0x248>)
 8000bdc:	0f42      	lsrs	r2, r0, #29
 8000bde:	468c      	mov	ip, r1
 8000be0:	00e4      	lsls	r4, r4, #3
 8000be2:	4659      	mov	r1, fp
 8000be4:	4314      	orrs	r4, r2
 8000be6:	2280      	movs	r2, #128	; 0x80
 8000be8:	4463      	add	r3, ip
 8000bea:	0412      	lsls	r2, r2, #16
 8000bec:	1acb      	subs	r3, r1, r3
 8000bee:	4314      	orrs	r4, r2
 8000bf0:	469b      	mov	fp, r3
 8000bf2:	00c2      	lsls	r2, r0, #3
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	0033      	movs	r3, r6
 8000bf8:	407b      	eors	r3, r7
 8000bfa:	469a      	mov	sl, r3
 8000bfc:	464b      	mov	r3, r9
 8000bfe:	2b0f      	cmp	r3, #15
 8000c00:	d900      	bls.n	8000c04 <__aeabi_ddiv+0x88>
 8000c02:	e0ef      	b.n	8000de4 <__aeabi_ddiv+0x268>
 8000c04:	4970      	ldr	r1, [pc, #448]	; (8000dc8 <__aeabi_ddiv+0x24c>)
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	58cb      	ldr	r3, [r1, r3]
 8000c0a:	469f      	mov	pc, r3
 8000c0c:	4b6f      	ldr	r3, [pc, #444]	; (8000dcc <__aeabi_ddiv+0x250>)
 8000c0e:	4652      	mov	r2, sl
 8000c10:	469c      	mov	ip, r3
 8000c12:	4322      	orrs	r2, r4
 8000c14:	44e3      	add	fp, ip
 8000c16:	2a00      	cmp	r2, #0
 8000c18:	d000      	beq.n	8000c1c <__aeabi_ddiv+0xa0>
 8000c1a:	e095      	b.n	8000d48 <__aeabi_ddiv+0x1cc>
 8000c1c:	4649      	mov	r1, r9
 8000c1e:	2302      	movs	r3, #2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	4689      	mov	r9, r1
 8000c24:	2400      	movs	r4, #0
 8000c26:	2002      	movs	r0, #2
 8000c28:	e7e5      	b.n	8000bf6 <__aeabi_ddiv+0x7a>
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2400      	movs	r4, #0
 8000c2e:	2500      	movs	r5, #0
 8000c30:	4652      	mov	r2, sl
 8000c32:	051b      	lsls	r3, r3, #20
 8000c34:	4323      	orrs	r3, r4
 8000c36:	07d2      	lsls	r2, r2, #31
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	0028      	movs	r0, r5
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	b005      	add	sp, #20
 8000c40:	bcf0      	pop	{r4, r5, r6, r7}
 8000c42:	46bb      	mov	fp, r7
 8000c44:	46b2      	mov	sl, r6
 8000c46:	46a9      	mov	r9, r5
 8000c48:	46a0      	mov	r8, r4
 8000c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4c:	2400      	movs	r4, #0
 8000c4e:	2500      	movs	r5, #0
 8000c50:	4b5b      	ldr	r3, [pc, #364]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000c52:	e7ed      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000c54:	464b      	mov	r3, r9
 8000c56:	4323      	orrs	r3, r4
 8000c58:	4698      	mov	r8, r3
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_ddiv+0xe2>
 8000c5c:	e089      	b.n	8000d72 <__aeabi_ddiv+0x1f6>
 8000c5e:	2c00      	cmp	r4, #0
 8000c60:	d100      	bne.n	8000c64 <__aeabi_ddiv+0xe8>
 8000c62:	e1e0      	b.n	8001026 <__aeabi_ddiv+0x4aa>
 8000c64:	0020      	movs	r0, r4
 8000c66:	f001 fa19 	bl	800209c <__clzsi2>
 8000c6a:	0001      	movs	r1, r0
 8000c6c:	0002      	movs	r2, r0
 8000c6e:	390b      	subs	r1, #11
 8000c70:	231d      	movs	r3, #29
 8000c72:	1a5b      	subs	r3, r3, r1
 8000c74:	4649      	mov	r1, r9
 8000c76:	0010      	movs	r0, r2
 8000c78:	40d9      	lsrs	r1, r3
 8000c7a:	3808      	subs	r0, #8
 8000c7c:	4084      	lsls	r4, r0
 8000c7e:	000b      	movs	r3, r1
 8000c80:	464d      	mov	r5, r9
 8000c82:	4323      	orrs	r3, r4
 8000c84:	4698      	mov	r8, r3
 8000c86:	4085      	lsls	r5, r0
 8000c88:	4851      	ldr	r0, [pc, #324]	; (8000dd0 <__aeabi_ddiv+0x254>)
 8000c8a:	033c      	lsls	r4, r7, #12
 8000c8c:	1a83      	subs	r3, r0, r2
 8000c8e:	469b      	mov	fp, r3
 8000c90:	2300      	movs	r3, #0
 8000c92:	4699      	mov	r9, r3
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	007b      	lsls	r3, r7, #1
 8000c98:	4650      	mov	r0, sl
 8000c9a:	0b24      	lsrs	r4, r4, #12
 8000c9c:	0d5b      	lsrs	r3, r3, #21
 8000c9e:	0fff      	lsrs	r7, r7, #31
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d197      	bne.n	8000bd4 <__aeabi_ddiv+0x58>
 8000ca4:	4652      	mov	r2, sl
 8000ca6:	4322      	orrs	r2, r4
 8000ca8:	d055      	beq.n	8000d56 <__aeabi_ddiv+0x1da>
 8000caa:	2c00      	cmp	r4, #0
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_ddiv+0x134>
 8000cae:	e1ca      	b.n	8001046 <__aeabi_ddiv+0x4ca>
 8000cb0:	0020      	movs	r0, r4
 8000cb2:	f001 f9f3 	bl	800209c <__clzsi2>
 8000cb6:	0002      	movs	r2, r0
 8000cb8:	3a0b      	subs	r2, #11
 8000cba:	231d      	movs	r3, #29
 8000cbc:	0001      	movs	r1, r0
 8000cbe:	1a9b      	subs	r3, r3, r2
 8000cc0:	4652      	mov	r2, sl
 8000cc2:	3908      	subs	r1, #8
 8000cc4:	40da      	lsrs	r2, r3
 8000cc6:	408c      	lsls	r4, r1
 8000cc8:	4314      	orrs	r4, r2
 8000cca:	4652      	mov	r2, sl
 8000ccc:	408a      	lsls	r2, r1
 8000cce:	4b41      	ldr	r3, [pc, #260]	; (8000dd4 <__aeabi_ddiv+0x258>)
 8000cd0:	4458      	add	r0, fp
 8000cd2:	469b      	mov	fp, r3
 8000cd4:	4483      	add	fp, r0
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	e78d      	b.n	8000bf6 <__aeabi_ddiv+0x7a>
 8000cda:	464b      	mov	r3, r9
 8000cdc:	4323      	orrs	r3, r4
 8000cde:	4698      	mov	r8, r3
 8000ce0:	d140      	bne.n	8000d64 <__aeabi_ddiv+0x1e8>
 8000ce2:	2308      	movs	r3, #8
 8000ce4:	4699      	mov	r9, r3
 8000ce6:	3b06      	subs	r3, #6
 8000ce8:	2500      	movs	r5, #0
 8000cea:	4683      	mov	fp, r0
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	e769      	b.n	8000bc4 <__aeabi_ddiv+0x48>
 8000cf0:	46b2      	mov	sl, r6
 8000cf2:	9b00      	ldr	r3, [sp, #0]
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0a9      	beq.n	8000c4c <__aeabi_ddiv+0xd0>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d100      	bne.n	8000cfe <__aeabi_ddiv+0x182>
 8000cfc:	e211      	b.n	8001122 <__aeabi_ddiv+0x5a6>
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d093      	beq.n	8000c2a <__aeabi_ddiv+0xae>
 8000d02:	4a35      	ldr	r2, [pc, #212]	; (8000dd8 <__aeabi_ddiv+0x25c>)
 8000d04:	445a      	add	r2, fp
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	dc00      	bgt.n	8000d0c <__aeabi_ddiv+0x190>
 8000d0a:	e13c      	b.n	8000f86 <__aeabi_ddiv+0x40a>
 8000d0c:	076b      	lsls	r3, r5, #29
 8000d0e:	d000      	beq.n	8000d12 <__aeabi_ddiv+0x196>
 8000d10:	e1a7      	b.n	8001062 <__aeabi_ddiv+0x4e6>
 8000d12:	08ed      	lsrs	r5, r5, #3
 8000d14:	4643      	mov	r3, r8
 8000d16:	01db      	lsls	r3, r3, #7
 8000d18:	d506      	bpl.n	8000d28 <__aeabi_ddiv+0x1ac>
 8000d1a:	4642      	mov	r2, r8
 8000d1c:	4b2f      	ldr	r3, [pc, #188]	; (8000ddc <__aeabi_ddiv+0x260>)
 8000d1e:	401a      	ands	r2, r3
 8000d20:	4690      	mov	r8, r2
 8000d22:	2280      	movs	r2, #128	; 0x80
 8000d24:	00d2      	lsls	r2, r2, #3
 8000d26:	445a      	add	r2, fp
 8000d28:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <__aeabi_ddiv+0x264>)
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	dc8e      	bgt.n	8000c4c <__aeabi_ddiv+0xd0>
 8000d2e:	4643      	mov	r3, r8
 8000d30:	0552      	lsls	r2, r2, #21
 8000d32:	0758      	lsls	r0, r3, #29
 8000d34:	025c      	lsls	r4, r3, #9
 8000d36:	4305      	orrs	r5, r0
 8000d38:	0b24      	lsrs	r4, r4, #12
 8000d3a:	0d53      	lsrs	r3, r2, #21
 8000d3c:	e778      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000d3e:	46ba      	mov	sl, r7
 8000d40:	46a0      	mov	r8, r4
 8000d42:	0015      	movs	r5, r2
 8000d44:	9000      	str	r0, [sp, #0]
 8000d46:	e7d4      	b.n	8000cf2 <__aeabi_ddiv+0x176>
 8000d48:	464a      	mov	r2, r9
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	4691      	mov	r9, r2
 8000d50:	2003      	movs	r0, #3
 8000d52:	4652      	mov	r2, sl
 8000d54:	e74f      	b.n	8000bf6 <__aeabi_ddiv+0x7a>
 8000d56:	4649      	mov	r1, r9
 8000d58:	2301      	movs	r3, #1
 8000d5a:	4319      	orrs	r1, r3
 8000d5c:	4689      	mov	r9, r1
 8000d5e:	2400      	movs	r4, #0
 8000d60:	2001      	movs	r0, #1
 8000d62:	e748      	b.n	8000bf6 <__aeabi_ddiv+0x7a>
 8000d64:	230c      	movs	r3, #12
 8000d66:	4699      	mov	r9, r3
 8000d68:	3b09      	subs	r3, #9
 8000d6a:	46a0      	mov	r8, r4
 8000d6c:	4683      	mov	fp, r0
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	e728      	b.n	8000bc4 <__aeabi_ddiv+0x48>
 8000d72:	2304      	movs	r3, #4
 8000d74:	4699      	mov	r9, r3
 8000d76:	2300      	movs	r3, #0
 8000d78:	469b      	mov	fp, r3
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	2500      	movs	r5, #0
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	e720      	b.n	8000bc4 <__aeabi_ddiv+0x48>
 8000d82:	2300      	movs	r3, #0
 8000d84:	2480      	movs	r4, #128	; 0x80
 8000d86:	469a      	mov	sl, r3
 8000d88:	2500      	movs	r5, #0
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000d8c:	0324      	lsls	r4, r4, #12
 8000d8e:	e74f      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	4641      	mov	r1, r8
 8000d94:	031b      	lsls	r3, r3, #12
 8000d96:	4219      	tst	r1, r3
 8000d98:	d008      	beq.n	8000dac <__aeabi_ddiv+0x230>
 8000d9a:	421c      	tst	r4, r3
 8000d9c:	d106      	bne.n	8000dac <__aeabi_ddiv+0x230>
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	0324      	lsls	r4, r4, #12
 8000da2:	46ba      	mov	sl, r7
 8000da4:	0015      	movs	r5, r2
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000da8:	0b24      	lsrs	r4, r4, #12
 8000daa:	e741      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000dac:	2480      	movs	r4, #128	; 0x80
 8000dae:	4643      	mov	r3, r8
 8000db0:	0324      	lsls	r4, r4, #12
 8000db2:	431c      	orrs	r4, r3
 8000db4:	0324      	lsls	r4, r4, #12
 8000db6:	46b2      	mov	sl, r6
 8000db8:	4b01      	ldr	r3, [pc, #4]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000dba:	0b24      	lsrs	r4, r4, #12
 8000dbc:	e738      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	000007ff 	.word	0x000007ff
 8000dc4:	fffffc01 	.word	0xfffffc01
 8000dc8:	0800fc7c 	.word	0x0800fc7c
 8000dcc:	fffff801 	.word	0xfffff801
 8000dd0:	fffffc0d 	.word	0xfffffc0d
 8000dd4:	000003f3 	.word	0x000003f3
 8000dd8:	000003ff 	.word	0x000003ff
 8000ddc:	feffffff 	.word	0xfeffffff
 8000de0:	000007fe 	.word	0x000007fe
 8000de4:	4544      	cmp	r4, r8
 8000de6:	d200      	bcs.n	8000dea <__aeabi_ddiv+0x26e>
 8000de8:	e116      	b.n	8001018 <__aeabi_ddiv+0x49c>
 8000dea:	d100      	bne.n	8000dee <__aeabi_ddiv+0x272>
 8000dec:	e111      	b.n	8001012 <__aeabi_ddiv+0x496>
 8000dee:	2301      	movs	r3, #1
 8000df0:	425b      	negs	r3, r3
 8000df2:	469c      	mov	ip, r3
 8000df4:	002e      	movs	r6, r5
 8000df6:	4640      	mov	r0, r8
 8000df8:	2500      	movs	r5, #0
 8000dfa:	44e3      	add	fp, ip
 8000dfc:	0223      	lsls	r3, r4, #8
 8000dfe:	0e14      	lsrs	r4, r2, #24
 8000e00:	431c      	orrs	r4, r3
 8000e02:	0c1b      	lsrs	r3, r3, #16
 8000e04:	4699      	mov	r9, r3
 8000e06:	0423      	lsls	r3, r4, #16
 8000e08:	0c1f      	lsrs	r7, r3, #16
 8000e0a:	0212      	lsls	r2, r2, #8
 8000e0c:	4649      	mov	r1, r9
 8000e0e:	9200      	str	r2, [sp, #0]
 8000e10:	9701      	str	r7, [sp, #4]
 8000e12:	f7ff f9fd 	bl	8000210 <__aeabi_uidivmod>
 8000e16:	0002      	movs	r2, r0
 8000e18:	437a      	muls	r2, r7
 8000e1a:	040b      	lsls	r3, r1, #16
 8000e1c:	0c31      	lsrs	r1, r6, #16
 8000e1e:	4680      	mov	r8, r0
 8000e20:	4319      	orrs	r1, r3
 8000e22:	428a      	cmp	r2, r1
 8000e24:	d90b      	bls.n	8000e3e <__aeabi_ddiv+0x2c2>
 8000e26:	2301      	movs	r3, #1
 8000e28:	425b      	negs	r3, r3
 8000e2a:	469c      	mov	ip, r3
 8000e2c:	1909      	adds	r1, r1, r4
 8000e2e:	44e0      	add	r8, ip
 8000e30:	428c      	cmp	r4, r1
 8000e32:	d804      	bhi.n	8000e3e <__aeabi_ddiv+0x2c2>
 8000e34:	428a      	cmp	r2, r1
 8000e36:	d902      	bls.n	8000e3e <__aeabi_ddiv+0x2c2>
 8000e38:	1e83      	subs	r3, r0, #2
 8000e3a:	4698      	mov	r8, r3
 8000e3c:	1909      	adds	r1, r1, r4
 8000e3e:	1a88      	subs	r0, r1, r2
 8000e40:	4649      	mov	r1, r9
 8000e42:	f7ff f9e5 	bl	8000210 <__aeabi_uidivmod>
 8000e46:	0409      	lsls	r1, r1, #16
 8000e48:	468c      	mov	ip, r1
 8000e4a:	0431      	lsls	r1, r6, #16
 8000e4c:	4666      	mov	r6, ip
 8000e4e:	9a01      	ldr	r2, [sp, #4]
 8000e50:	0c09      	lsrs	r1, r1, #16
 8000e52:	4342      	muls	r2, r0
 8000e54:	0003      	movs	r3, r0
 8000e56:	4331      	orrs	r1, r6
 8000e58:	428a      	cmp	r2, r1
 8000e5a:	d904      	bls.n	8000e66 <__aeabi_ddiv+0x2ea>
 8000e5c:	1909      	adds	r1, r1, r4
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	428c      	cmp	r4, r1
 8000e62:	d800      	bhi.n	8000e66 <__aeabi_ddiv+0x2ea>
 8000e64:	e111      	b.n	800108a <__aeabi_ddiv+0x50e>
 8000e66:	1a89      	subs	r1, r1, r2
 8000e68:	4642      	mov	r2, r8
 8000e6a:	9e00      	ldr	r6, [sp, #0]
 8000e6c:	0412      	lsls	r2, r2, #16
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	0c33      	lsrs	r3, r6, #16
 8000e72:	001f      	movs	r7, r3
 8000e74:	0c10      	lsrs	r0, r2, #16
 8000e76:	4690      	mov	r8, r2
 8000e78:	9302      	str	r3, [sp, #8]
 8000e7a:	0413      	lsls	r3, r2, #16
 8000e7c:	0432      	lsls	r2, r6, #16
 8000e7e:	0c16      	lsrs	r6, r2, #16
 8000e80:	0032      	movs	r2, r6
 8000e82:	0c1b      	lsrs	r3, r3, #16
 8000e84:	435a      	muls	r2, r3
 8000e86:	9603      	str	r6, [sp, #12]
 8000e88:	437b      	muls	r3, r7
 8000e8a:	4346      	muls	r6, r0
 8000e8c:	4378      	muls	r0, r7
 8000e8e:	0c17      	lsrs	r7, r2, #16
 8000e90:	46bc      	mov	ip, r7
 8000e92:	199b      	adds	r3, r3, r6
 8000e94:	4463      	add	r3, ip
 8000e96:	429e      	cmp	r6, r3
 8000e98:	d903      	bls.n	8000ea2 <__aeabi_ddiv+0x326>
 8000e9a:	2680      	movs	r6, #128	; 0x80
 8000e9c:	0276      	lsls	r6, r6, #9
 8000e9e:	46b4      	mov	ip, r6
 8000ea0:	4460      	add	r0, ip
 8000ea2:	0c1e      	lsrs	r6, r3, #16
 8000ea4:	1830      	adds	r0, r6, r0
 8000ea6:	0416      	lsls	r6, r2, #16
 8000ea8:	041b      	lsls	r3, r3, #16
 8000eaa:	0c36      	lsrs	r6, r6, #16
 8000eac:	199e      	adds	r6, r3, r6
 8000eae:	4281      	cmp	r1, r0
 8000eb0:	d200      	bcs.n	8000eb4 <__aeabi_ddiv+0x338>
 8000eb2:	e09c      	b.n	8000fee <__aeabi_ddiv+0x472>
 8000eb4:	d100      	bne.n	8000eb8 <__aeabi_ddiv+0x33c>
 8000eb6:	e097      	b.n	8000fe8 <__aeabi_ddiv+0x46c>
 8000eb8:	1bae      	subs	r6, r5, r6
 8000eba:	1a09      	subs	r1, r1, r0
 8000ebc:	42b5      	cmp	r5, r6
 8000ebe:	4180      	sbcs	r0, r0
 8000ec0:	4240      	negs	r0, r0
 8000ec2:	1a08      	subs	r0, r1, r0
 8000ec4:	4284      	cmp	r4, r0
 8000ec6:	d100      	bne.n	8000eca <__aeabi_ddiv+0x34e>
 8000ec8:	e111      	b.n	80010ee <__aeabi_ddiv+0x572>
 8000eca:	4649      	mov	r1, r9
 8000ecc:	f7ff f9a0 	bl	8000210 <__aeabi_uidivmod>
 8000ed0:	9a01      	ldr	r2, [sp, #4]
 8000ed2:	040b      	lsls	r3, r1, #16
 8000ed4:	4342      	muls	r2, r0
 8000ed6:	0c31      	lsrs	r1, r6, #16
 8000ed8:	0005      	movs	r5, r0
 8000eda:	4319      	orrs	r1, r3
 8000edc:	428a      	cmp	r2, r1
 8000ede:	d907      	bls.n	8000ef0 <__aeabi_ddiv+0x374>
 8000ee0:	1909      	adds	r1, r1, r4
 8000ee2:	3d01      	subs	r5, #1
 8000ee4:	428c      	cmp	r4, r1
 8000ee6:	d803      	bhi.n	8000ef0 <__aeabi_ddiv+0x374>
 8000ee8:	428a      	cmp	r2, r1
 8000eea:	d901      	bls.n	8000ef0 <__aeabi_ddiv+0x374>
 8000eec:	1e85      	subs	r5, r0, #2
 8000eee:	1909      	adds	r1, r1, r4
 8000ef0:	1a88      	subs	r0, r1, r2
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	f7ff f98c 	bl	8000210 <__aeabi_uidivmod>
 8000ef8:	0409      	lsls	r1, r1, #16
 8000efa:	468c      	mov	ip, r1
 8000efc:	0431      	lsls	r1, r6, #16
 8000efe:	4666      	mov	r6, ip
 8000f00:	9a01      	ldr	r2, [sp, #4]
 8000f02:	0c09      	lsrs	r1, r1, #16
 8000f04:	4342      	muls	r2, r0
 8000f06:	0003      	movs	r3, r0
 8000f08:	4331      	orrs	r1, r6
 8000f0a:	428a      	cmp	r2, r1
 8000f0c:	d907      	bls.n	8000f1e <__aeabi_ddiv+0x3a2>
 8000f0e:	1909      	adds	r1, r1, r4
 8000f10:	3b01      	subs	r3, #1
 8000f12:	428c      	cmp	r4, r1
 8000f14:	d803      	bhi.n	8000f1e <__aeabi_ddiv+0x3a2>
 8000f16:	428a      	cmp	r2, r1
 8000f18:	d901      	bls.n	8000f1e <__aeabi_ddiv+0x3a2>
 8000f1a:	1e83      	subs	r3, r0, #2
 8000f1c:	1909      	adds	r1, r1, r4
 8000f1e:	9e03      	ldr	r6, [sp, #12]
 8000f20:	1a89      	subs	r1, r1, r2
 8000f22:	0032      	movs	r2, r6
 8000f24:	042d      	lsls	r5, r5, #16
 8000f26:	431d      	orrs	r5, r3
 8000f28:	9f02      	ldr	r7, [sp, #8]
 8000f2a:	042b      	lsls	r3, r5, #16
 8000f2c:	0c1b      	lsrs	r3, r3, #16
 8000f2e:	435a      	muls	r2, r3
 8000f30:	437b      	muls	r3, r7
 8000f32:	469c      	mov	ip, r3
 8000f34:	0c28      	lsrs	r0, r5, #16
 8000f36:	4346      	muls	r6, r0
 8000f38:	0c13      	lsrs	r3, r2, #16
 8000f3a:	44b4      	add	ip, r6
 8000f3c:	4463      	add	r3, ip
 8000f3e:	4378      	muls	r0, r7
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d903      	bls.n	8000f4c <__aeabi_ddiv+0x3d0>
 8000f44:	2680      	movs	r6, #128	; 0x80
 8000f46:	0276      	lsls	r6, r6, #9
 8000f48:	46b4      	mov	ip, r6
 8000f4a:	4460      	add	r0, ip
 8000f4c:	0c1e      	lsrs	r6, r3, #16
 8000f4e:	0412      	lsls	r2, r2, #16
 8000f50:	041b      	lsls	r3, r3, #16
 8000f52:	0c12      	lsrs	r2, r2, #16
 8000f54:	1830      	adds	r0, r6, r0
 8000f56:	189b      	adds	r3, r3, r2
 8000f58:	4281      	cmp	r1, r0
 8000f5a:	d306      	bcc.n	8000f6a <__aeabi_ddiv+0x3ee>
 8000f5c:	d002      	beq.n	8000f64 <__aeabi_ddiv+0x3e8>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	431d      	orrs	r5, r3
 8000f62:	e6ce      	b.n	8000d02 <__aeabi_ddiv+0x186>
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d100      	bne.n	8000f6a <__aeabi_ddiv+0x3ee>
 8000f68:	e6cb      	b.n	8000d02 <__aeabi_ddiv+0x186>
 8000f6a:	1861      	adds	r1, r4, r1
 8000f6c:	1e6e      	subs	r6, r5, #1
 8000f6e:	42a1      	cmp	r1, r4
 8000f70:	d200      	bcs.n	8000f74 <__aeabi_ddiv+0x3f8>
 8000f72:	e0a4      	b.n	80010be <__aeabi_ddiv+0x542>
 8000f74:	4281      	cmp	r1, r0
 8000f76:	d200      	bcs.n	8000f7a <__aeabi_ddiv+0x3fe>
 8000f78:	e0c9      	b.n	800110e <__aeabi_ddiv+0x592>
 8000f7a:	d100      	bne.n	8000f7e <__aeabi_ddiv+0x402>
 8000f7c:	e0d9      	b.n	8001132 <__aeabi_ddiv+0x5b6>
 8000f7e:	0035      	movs	r5, r6
 8000f80:	e7ed      	b.n	8000f5e <__aeabi_ddiv+0x3e2>
 8000f82:	2501      	movs	r5, #1
 8000f84:	426d      	negs	r5, r5
 8000f86:	2101      	movs	r1, #1
 8000f88:	1a89      	subs	r1, r1, r2
 8000f8a:	2938      	cmp	r1, #56	; 0x38
 8000f8c:	dd00      	ble.n	8000f90 <__aeabi_ddiv+0x414>
 8000f8e:	e64c      	b.n	8000c2a <__aeabi_ddiv+0xae>
 8000f90:	291f      	cmp	r1, #31
 8000f92:	dc00      	bgt.n	8000f96 <__aeabi_ddiv+0x41a>
 8000f94:	e07f      	b.n	8001096 <__aeabi_ddiv+0x51a>
 8000f96:	231f      	movs	r3, #31
 8000f98:	425b      	negs	r3, r3
 8000f9a:	1a9a      	subs	r2, r3, r2
 8000f9c:	4643      	mov	r3, r8
 8000f9e:	40d3      	lsrs	r3, r2
 8000fa0:	2920      	cmp	r1, #32
 8000fa2:	d004      	beq.n	8000fae <__aeabi_ddiv+0x432>
 8000fa4:	4644      	mov	r4, r8
 8000fa6:	4a65      	ldr	r2, [pc, #404]	; (800113c <__aeabi_ddiv+0x5c0>)
 8000fa8:	445a      	add	r2, fp
 8000faa:	4094      	lsls	r4, r2
 8000fac:	4325      	orrs	r5, r4
 8000fae:	1e6a      	subs	r2, r5, #1
 8000fb0:	4195      	sbcs	r5, r2
 8000fb2:	2207      	movs	r2, #7
 8000fb4:	432b      	orrs	r3, r5
 8000fb6:	0015      	movs	r5, r2
 8000fb8:	2400      	movs	r4, #0
 8000fba:	401d      	ands	r5, r3
 8000fbc:	421a      	tst	r2, r3
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_ddiv+0x446>
 8000fc0:	e0a1      	b.n	8001106 <__aeabi_ddiv+0x58a>
 8000fc2:	220f      	movs	r2, #15
 8000fc4:	2400      	movs	r4, #0
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	2a04      	cmp	r2, #4
 8000fca:	d100      	bne.n	8000fce <__aeabi_ddiv+0x452>
 8000fcc:	e098      	b.n	8001100 <__aeabi_ddiv+0x584>
 8000fce:	1d1a      	adds	r2, r3, #4
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	419b      	sbcs	r3, r3
 8000fd4:	425b      	negs	r3, r3
 8000fd6:	18e4      	adds	r4, r4, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	0222      	lsls	r2, r4, #8
 8000fdc:	d400      	bmi.n	8000fe0 <__aeabi_ddiv+0x464>
 8000fde:	e08f      	b.n	8001100 <__aeabi_ddiv+0x584>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	2400      	movs	r4, #0
 8000fe4:	2500      	movs	r5, #0
 8000fe6:	e623      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000fe8:	42b5      	cmp	r5, r6
 8000fea:	d300      	bcc.n	8000fee <__aeabi_ddiv+0x472>
 8000fec:	e764      	b.n	8000eb8 <__aeabi_ddiv+0x33c>
 8000fee:	4643      	mov	r3, r8
 8000ff0:	1e5a      	subs	r2, r3, #1
 8000ff2:	9b00      	ldr	r3, [sp, #0]
 8000ff4:	469c      	mov	ip, r3
 8000ff6:	4465      	add	r5, ip
 8000ff8:	001f      	movs	r7, r3
 8000ffa:	429d      	cmp	r5, r3
 8000ffc:	419b      	sbcs	r3, r3
 8000ffe:	425b      	negs	r3, r3
 8001000:	191b      	adds	r3, r3, r4
 8001002:	18c9      	adds	r1, r1, r3
 8001004:	428c      	cmp	r4, r1
 8001006:	d23a      	bcs.n	800107e <__aeabi_ddiv+0x502>
 8001008:	4288      	cmp	r0, r1
 800100a:	d863      	bhi.n	80010d4 <__aeabi_ddiv+0x558>
 800100c:	d060      	beq.n	80010d0 <__aeabi_ddiv+0x554>
 800100e:	4690      	mov	r8, r2
 8001010:	e752      	b.n	8000eb8 <__aeabi_ddiv+0x33c>
 8001012:	42aa      	cmp	r2, r5
 8001014:	d900      	bls.n	8001018 <__aeabi_ddiv+0x49c>
 8001016:	e6ea      	b.n	8000dee <__aeabi_ddiv+0x272>
 8001018:	4643      	mov	r3, r8
 800101a:	07de      	lsls	r6, r3, #31
 800101c:	0858      	lsrs	r0, r3, #1
 800101e:	086b      	lsrs	r3, r5, #1
 8001020:	431e      	orrs	r6, r3
 8001022:	07ed      	lsls	r5, r5, #31
 8001024:	e6ea      	b.n	8000dfc <__aeabi_ddiv+0x280>
 8001026:	4648      	mov	r0, r9
 8001028:	f001 f838 	bl	800209c <__clzsi2>
 800102c:	0001      	movs	r1, r0
 800102e:	0002      	movs	r2, r0
 8001030:	3115      	adds	r1, #21
 8001032:	3220      	adds	r2, #32
 8001034:	291c      	cmp	r1, #28
 8001036:	dc00      	bgt.n	800103a <__aeabi_ddiv+0x4be>
 8001038:	e61a      	b.n	8000c70 <__aeabi_ddiv+0xf4>
 800103a:	464b      	mov	r3, r9
 800103c:	3808      	subs	r0, #8
 800103e:	4083      	lsls	r3, r0
 8001040:	2500      	movs	r5, #0
 8001042:	4698      	mov	r8, r3
 8001044:	e620      	b.n	8000c88 <__aeabi_ddiv+0x10c>
 8001046:	f001 f829 	bl	800209c <__clzsi2>
 800104a:	0003      	movs	r3, r0
 800104c:	001a      	movs	r2, r3
 800104e:	3215      	adds	r2, #21
 8001050:	3020      	adds	r0, #32
 8001052:	2a1c      	cmp	r2, #28
 8001054:	dc00      	bgt.n	8001058 <__aeabi_ddiv+0x4dc>
 8001056:	e630      	b.n	8000cba <__aeabi_ddiv+0x13e>
 8001058:	4654      	mov	r4, sl
 800105a:	3b08      	subs	r3, #8
 800105c:	2200      	movs	r2, #0
 800105e:	409c      	lsls	r4, r3
 8001060:	e635      	b.n	8000cce <__aeabi_ddiv+0x152>
 8001062:	230f      	movs	r3, #15
 8001064:	402b      	ands	r3, r5
 8001066:	2b04      	cmp	r3, #4
 8001068:	d100      	bne.n	800106c <__aeabi_ddiv+0x4f0>
 800106a:	e652      	b.n	8000d12 <__aeabi_ddiv+0x196>
 800106c:	2305      	movs	r3, #5
 800106e:	425b      	negs	r3, r3
 8001070:	42ab      	cmp	r3, r5
 8001072:	419b      	sbcs	r3, r3
 8001074:	3504      	adds	r5, #4
 8001076:	425b      	negs	r3, r3
 8001078:	08ed      	lsrs	r5, r5, #3
 800107a:	4498      	add	r8, r3
 800107c:	e64a      	b.n	8000d14 <__aeabi_ddiv+0x198>
 800107e:	428c      	cmp	r4, r1
 8001080:	d1c5      	bne.n	800100e <__aeabi_ddiv+0x492>
 8001082:	42af      	cmp	r7, r5
 8001084:	d9c0      	bls.n	8001008 <__aeabi_ddiv+0x48c>
 8001086:	4690      	mov	r8, r2
 8001088:	e716      	b.n	8000eb8 <__aeabi_ddiv+0x33c>
 800108a:	428a      	cmp	r2, r1
 800108c:	d800      	bhi.n	8001090 <__aeabi_ddiv+0x514>
 800108e:	e6ea      	b.n	8000e66 <__aeabi_ddiv+0x2ea>
 8001090:	1e83      	subs	r3, r0, #2
 8001092:	1909      	adds	r1, r1, r4
 8001094:	e6e7      	b.n	8000e66 <__aeabi_ddiv+0x2ea>
 8001096:	4a2a      	ldr	r2, [pc, #168]	; (8001140 <__aeabi_ddiv+0x5c4>)
 8001098:	0028      	movs	r0, r5
 800109a:	445a      	add	r2, fp
 800109c:	4643      	mov	r3, r8
 800109e:	4095      	lsls	r5, r2
 80010a0:	4093      	lsls	r3, r2
 80010a2:	40c8      	lsrs	r0, r1
 80010a4:	1e6a      	subs	r2, r5, #1
 80010a6:	4195      	sbcs	r5, r2
 80010a8:	4644      	mov	r4, r8
 80010aa:	4303      	orrs	r3, r0
 80010ac:	432b      	orrs	r3, r5
 80010ae:	40cc      	lsrs	r4, r1
 80010b0:	075a      	lsls	r2, r3, #29
 80010b2:	d092      	beq.n	8000fda <__aeabi_ddiv+0x45e>
 80010b4:	220f      	movs	r2, #15
 80010b6:	401a      	ands	r2, r3
 80010b8:	2a04      	cmp	r2, #4
 80010ba:	d188      	bne.n	8000fce <__aeabi_ddiv+0x452>
 80010bc:	e78d      	b.n	8000fda <__aeabi_ddiv+0x45e>
 80010be:	0035      	movs	r5, r6
 80010c0:	4281      	cmp	r1, r0
 80010c2:	d000      	beq.n	80010c6 <__aeabi_ddiv+0x54a>
 80010c4:	e74b      	b.n	8000f5e <__aeabi_ddiv+0x3e2>
 80010c6:	9a00      	ldr	r2, [sp, #0]
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d000      	beq.n	80010ce <__aeabi_ddiv+0x552>
 80010cc:	e747      	b.n	8000f5e <__aeabi_ddiv+0x3e2>
 80010ce:	e618      	b.n	8000d02 <__aeabi_ddiv+0x186>
 80010d0:	42ae      	cmp	r6, r5
 80010d2:	d99c      	bls.n	800100e <__aeabi_ddiv+0x492>
 80010d4:	2302      	movs	r3, #2
 80010d6:	425b      	negs	r3, r3
 80010d8:	469c      	mov	ip, r3
 80010da:	9b00      	ldr	r3, [sp, #0]
 80010dc:	44e0      	add	r8, ip
 80010de:	469c      	mov	ip, r3
 80010e0:	4465      	add	r5, ip
 80010e2:	429d      	cmp	r5, r3
 80010e4:	419b      	sbcs	r3, r3
 80010e6:	425b      	negs	r3, r3
 80010e8:	191b      	adds	r3, r3, r4
 80010ea:	18c9      	adds	r1, r1, r3
 80010ec:	e6e4      	b.n	8000eb8 <__aeabi_ddiv+0x33c>
 80010ee:	4a15      	ldr	r2, [pc, #84]	; (8001144 <__aeabi_ddiv+0x5c8>)
 80010f0:	445a      	add	r2, fp
 80010f2:	2a00      	cmp	r2, #0
 80010f4:	dc00      	bgt.n	80010f8 <__aeabi_ddiv+0x57c>
 80010f6:	e744      	b.n	8000f82 <__aeabi_ddiv+0x406>
 80010f8:	2301      	movs	r3, #1
 80010fa:	2500      	movs	r5, #0
 80010fc:	4498      	add	r8, r3
 80010fe:	e609      	b.n	8000d14 <__aeabi_ddiv+0x198>
 8001100:	0765      	lsls	r5, r4, #29
 8001102:	0264      	lsls	r4, r4, #9
 8001104:	0b24      	lsrs	r4, r4, #12
 8001106:	08db      	lsrs	r3, r3, #3
 8001108:	431d      	orrs	r5, r3
 800110a:	2300      	movs	r3, #0
 800110c:	e590      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 800110e:	9e00      	ldr	r6, [sp, #0]
 8001110:	3d02      	subs	r5, #2
 8001112:	0072      	lsls	r2, r6, #1
 8001114:	42b2      	cmp	r2, r6
 8001116:	41bf      	sbcs	r7, r7
 8001118:	427f      	negs	r7, r7
 800111a:	193c      	adds	r4, r7, r4
 800111c:	1909      	adds	r1, r1, r4
 800111e:	9200      	str	r2, [sp, #0]
 8001120:	e7ce      	b.n	80010c0 <__aeabi_ddiv+0x544>
 8001122:	2480      	movs	r4, #128	; 0x80
 8001124:	4643      	mov	r3, r8
 8001126:	0324      	lsls	r4, r4, #12
 8001128:	431c      	orrs	r4, r3
 800112a:	0324      	lsls	r4, r4, #12
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <__aeabi_ddiv+0x5cc>)
 800112e:	0b24      	lsrs	r4, r4, #12
 8001130:	e57e      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8001132:	9a00      	ldr	r2, [sp, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	d3ea      	bcc.n	800110e <__aeabi_ddiv+0x592>
 8001138:	0035      	movs	r5, r6
 800113a:	e7c4      	b.n	80010c6 <__aeabi_ddiv+0x54a>
 800113c:	0000043e 	.word	0x0000043e
 8001140:	0000041e 	.word	0x0000041e
 8001144:	000003ff 	.word	0x000003ff
 8001148:	000007ff 	.word	0x000007ff

0800114c <__eqdf2>:
 800114c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114e:	464f      	mov	r7, r9
 8001150:	4646      	mov	r6, r8
 8001152:	46d6      	mov	lr, sl
 8001154:	4694      	mov	ip, r2
 8001156:	4691      	mov	r9, r2
 8001158:	031a      	lsls	r2, r3, #12
 800115a:	0b12      	lsrs	r2, r2, #12
 800115c:	4d18      	ldr	r5, [pc, #96]	; (80011c0 <__eqdf2+0x74>)
 800115e:	b5c0      	push	{r6, r7, lr}
 8001160:	004c      	lsls	r4, r1, #1
 8001162:	030f      	lsls	r7, r1, #12
 8001164:	4692      	mov	sl, r2
 8001166:	005a      	lsls	r2, r3, #1
 8001168:	0006      	movs	r6, r0
 800116a:	4680      	mov	r8, r0
 800116c:	0b3f      	lsrs	r7, r7, #12
 800116e:	2001      	movs	r0, #1
 8001170:	0d64      	lsrs	r4, r4, #21
 8001172:	0fc9      	lsrs	r1, r1, #31
 8001174:	0d52      	lsrs	r2, r2, #21
 8001176:	0fdb      	lsrs	r3, r3, #31
 8001178:	42ac      	cmp	r4, r5
 800117a:	d00a      	beq.n	8001192 <__eqdf2+0x46>
 800117c:	42aa      	cmp	r2, r5
 800117e:	d003      	beq.n	8001188 <__eqdf2+0x3c>
 8001180:	4294      	cmp	r4, r2
 8001182:	d101      	bne.n	8001188 <__eqdf2+0x3c>
 8001184:	4557      	cmp	r7, sl
 8001186:	d00d      	beq.n	80011a4 <__eqdf2+0x58>
 8001188:	bce0      	pop	{r5, r6, r7}
 800118a:	46ba      	mov	sl, r7
 800118c:	46b1      	mov	r9, r6
 800118e:	46a8      	mov	r8, r5
 8001190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001192:	003d      	movs	r5, r7
 8001194:	4335      	orrs	r5, r6
 8001196:	d1f7      	bne.n	8001188 <__eqdf2+0x3c>
 8001198:	42a2      	cmp	r2, r4
 800119a:	d1f5      	bne.n	8001188 <__eqdf2+0x3c>
 800119c:	4652      	mov	r2, sl
 800119e:	4665      	mov	r5, ip
 80011a0:	432a      	orrs	r2, r5
 80011a2:	d1f1      	bne.n	8001188 <__eqdf2+0x3c>
 80011a4:	2001      	movs	r0, #1
 80011a6:	45c8      	cmp	r8, r9
 80011a8:	d1ee      	bne.n	8001188 <__eqdf2+0x3c>
 80011aa:	4299      	cmp	r1, r3
 80011ac:	d006      	beq.n	80011bc <__eqdf2+0x70>
 80011ae:	2c00      	cmp	r4, #0
 80011b0:	d1ea      	bne.n	8001188 <__eqdf2+0x3c>
 80011b2:	433e      	orrs	r6, r7
 80011b4:	0030      	movs	r0, r6
 80011b6:	1e46      	subs	r6, r0, #1
 80011b8:	41b0      	sbcs	r0, r6
 80011ba:	e7e5      	b.n	8001188 <__eqdf2+0x3c>
 80011bc:	2000      	movs	r0, #0
 80011be:	e7e3      	b.n	8001188 <__eqdf2+0x3c>
 80011c0:	000007ff 	.word	0x000007ff

080011c4 <__gedf2>:
 80011c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c6:	464e      	mov	r6, r9
 80011c8:	4645      	mov	r5, r8
 80011ca:	4657      	mov	r7, sl
 80011cc:	46de      	mov	lr, fp
 80011ce:	0004      	movs	r4, r0
 80011d0:	0018      	movs	r0, r3
 80011d2:	b5e0      	push	{r5, r6, r7, lr}
 80011d4:	0016      	movs	r6, r2
 80011d6:	031b      	lsls	r3, r3, #12
 80011d8:	0b1b      	lsrs	r3, r3, #12
 80011da:	4d32      	ldr	r5, [pc, #200]	; (80012a4 <__gedf2+0xe0>)
 80011dc:	030f      	lsls	r7, r1, #12
 80011de:	004a      	lsls	r2, r1, #1
 80011e0:	4699      	mov	r9, r3
 80011e2:	0043      	lsls	r3, r0, #1
 80011e4:	46a4      	mov	ip, r4
 80011e6:	46b0      	mov	r8, r6
 80011e8:	0b3f      	lsrs	r7, r7, #12
 80011ea:	0d52      	lsrs	r2, r2, #21
 80011ec:	0fc9      	lsrs	r1, r1, #31
 80011ee:	0d5b      	lsrs	r3, r3, #21
 80011f0:	0fc0      	lsrs	r0, r0, #31
 80011f2:	42aa      	cmp	r2, r5
 80011f4:	d029      	beq.n	800124a <__gedf2+0x86>
 80011f6:	42ab      	cmp	r3, r5
 80011f8:	d018      	beq.n	800122c <__gedf2+0x68>
 80011fa:	2a00      	cmp	r2, #0
 80011fc:	d12a      	bne.n	8001254 <__gedf2+0x90>
 80011fe:	433c      	orrs	r4, r7
 8001200:	46a3      	mov	fp, r4
 8001202:	4265      	negs	r5, r4
 8001204:	4165      	adcs	r5, r4
 8001206:	2b00      	cmp	r3, #0
 8001208:	d102      	bne.n	8001210 <__gedf2+0x4c>
 800120a:	464c      	mov	r4, r9
 800120c:	4326      	orrs	r6, r4
 800120e:	d027      	beq.n	8001260 <__gedf2+0x9c>
 8001210:	2d00      	cmp	r5, #0
 8001212:	d115      	bne.n	8001240 <__gedf2+0x7c>
 8001214:	4281      	cmp	r1, r0
 8001216:	d028      	beq.n	800126a <__gedf2+0xa6>
 8001218:	2002      	movs	r0, #2
 800121a:	3901      	subs	r1, #1
 800121c:	4008      	ands	r0, r1
 800121e:	3801      	subs	r0, #1
 8001220:	bcf0      	pop	{r4, r5, r6, r7}
 8001222:	46bb      	mov	fp, r7
 8001224:	46b2      	mov	sl, r6
 8001226:	46a9      	mov	r9, r5
 8001228:	46a0      	mov	r8, r4
 800122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122c:	464d      	mov	r5, r9
 800122e:	432e      	orrs	r6, r5
 8001230:	d12f      	bne.n	8001292 <__gedf2+0xce>
 8001232:	2a00      	cmp	r2, #0
 8001234:	d1ee      	bne.n	8001214 <__gedf2+0x50>
 8001236:	433c      	orrs	r4, r7
 8001238:	4265      	negs	r5, r4
 800123a:	4165      	adcs	r5, r4
 800123c:	2d00      	cmp	r5, #0
 800123e:	d0e9      	beq.n	8001214 <__gedf2+0x50>
 8001240:	2800      	cmp	r0, #0
 8001242:	d1ed      	bne.n	8001220 <__gedf2+0x5c>
 8001244:	2001      	movs	r0, #1
 8001246:	4240      	negs	r0, r0
 8001248:	e7ea      	b.n	8001220 <__gedf2+0x5c>
 800124a:	003d      	movs	r5, r7
 800124c:	4325      	orrs	r5, r4
 800124e:	d120      	bne.n	8001292 <__gedf2+0xce>
 8001250:	4293      	cmp	r3, r2
 8001252:	d0eb      	beq.n	800122c <__gedf2+0x68>
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1dd      	bne.n	8001214 <__gedf2+0x50>
 8001258:	464c      	mov	r4, r9
 800125a:	4326      	orrs	r6, r4
 800125c:	d1da      	bne.n	8001214 <__gedf2+0x50>
 800125e:	e7db      	b.n	8001218 <__gedf2+0x54>
 8001260:	465b      	mov	r3, fp
 8001262:	2000      	movs	r0, #0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0db      	beq.n	8001220 <__gedf2+0x5c>
 8001268:	e7d6      	b.n	8001218 <__gedf2+0x54>
 800126a:	429a      	cmp	r2, r3
 800126c:	dc0a      	bgt.n	8001284 <__gedf2+0xc0>
 800126e:	dbe7      	blt.n	8001240 <__gedf2+0x7c>
 8001270:	454f      	cmp	r7, r9
 8001272:	d8d1      	bhi.n	8001218 <__gedf2+0x54>
 8001274:	d010      	beq.n	8001298 <__gedf2+0xd4>
 8001276:	2000      	movs	r0, #0
 8001278:	454f      	cmp	r7, r9
 800127a:	d2d1      	bcs.n	8001220 <__gedf2+0x5c>
 800127c:	2900      	cmp	r1, #0
 800127e:	d0e1      	beq.n	8001244 <__gedf2+0x80>
 8001280:	0008      	movs	r0, r1
 8001282:	e7cd      	b.n	8001220 <__gedf2+0x5c>
 8001284:	4243      	negs	r3, r0
 8001286:	4158      	adcs	r0, r3
 8001288:	2302      	movs	r3, #2
 800128a:	4240      	negs	r0, r0
 800128c:	4018      	ands	r0, r3
 800128e:	3801      	subs	r0, #1
 8001290:	e7c6      	b.n	8001220 <__gedf2+0x5c>
 8001292:	2002      	movs	r0, #2
 8001294:	4240      	negs	r0, r0
 8001296:	e7c3      	b.n	8001220 <__gedf2+0x5c>
 8001298:	45c4      	cmp	ip, r8
 800129a:	d8bd      	bhi.n	8001218 <__gedf2+0x54>
 800129c:	2000      	movs	r0, #0
 800129e:	45c4      	cmp	ip, r8
 80012a0:	d2be      	bcs.n	8001220 <__gedf2+0x5c>
 80012a2:	e7eb      	b.n	800127c <__gedf2+0xb8>
 80012a4:	000007ff 	.word	0x000007ff

080012a8 <__ledf2>:
 80012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012aa:	464e      	mov	r6, r9
 80012ac:	4645      	mov	r5, r8
 80012ae:	4657      	mov	r7, sl
 80012b0:	46de      	mov	lr, fp
 80012b2:	0004      	movs	r4, r0
 80012b4:	0018      	movs	r0, r3
 80012b6:	b5e0      	push	{r5, r6, r7, lr}
 80012b8:	0016      	movs	r6, r2
 80012ba:	031b      	lsls	r3, r3, #12
 80012bc:	0b1b      	lsrs	r3, r3, #12
 80012be:	4d31      	ldr	r5, [pc, #196]	; (8001384 <__ledf2+0xdc>)
 80012c0:	030f      	lsls	r7, r1, #12
 80012c2:	004a      	lsls	r2, r1, #1
 80012c4:	4699      	mov	r9, r3
 80012c6:	0043      	lsls	r3, r0, #1
 80012c8:	46a4      	mov	ip, r4
 80012ca:	46b0      	mov	r8, r6
 80012cc:	0b3f      	lsrs	r7, r7, #12
 80012ce:	0d52      	lsrs	r2, r2, #21
 80012d0:	0fc9      	lsrs	r1, r1, #31
 80012d2:	0d5b      	lsrs	r3, r3, #21
 80012d4:	0fc0      	lsrs	r0, r0, #31
 80012d6:	42aa      	cmp	r2, r5
 80012d8:	d011      	beq.n	80012fe <__ledf2+0x56>
 80012da:	42ab      	cmp	r3, r5
 80012dc:	d014      	beq.n	8001308 <__ledf2+0x60>
 80012de:	2a00      	cmp	r2, #0
 80012e0:	d12f      	bne.n	8001342 <__ledf2+0x9a>
 80012e2:	433c      	orrs	r4, r7
 80012e4:	46a3      	mov	fp, r4
 80012e6:	4265      	negs	r5, r4
 80012e8:	4165      	adcs	r5, r4
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d114      	bne.n	8001318 <__ledf2+0x70>
 80012ee:	464c      	mov	r4, r9
 80012f0:	4326      	orrs	r6, r4
 80012f2:	d111      	bne.n	8001318 <__ledf2+0x70>
 80012f4:	465b      	mov	r3, fp
 80012f6:	2000      	movs	r0, #0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d017      	beq.n	800132c <__ledf2+0x84>
 80012fc:	e010      	b.n	8001320 <__ledf2+0x78>
 80012fe:	003d      	movs	r5, r7
 8001300:	4325      	orrs	r5, r4
 8001302:	d112      	bne.n	800132a <__ledf2+0x82>
 8001304:	4293      	cmp	r3, r2
 8001306:	d11c      	bne.n	8001342 <__ledf2+0x9a>
 8001308:	464d      	mov	r5, r9
 800130a:	432e      	orrs	r6, r5
 800130c:	d10d      	bne.n	800132a <__ledf2+0x82>
 800130e:	2a00      	cmp	r2, #0
 8001310:	d104      	bne.n	800131c <__ledf2+0x74>
 8001312:	433c      	orrs	r4, r7
 8001314:	4265      	negs	r5, r4
 8001316:	4165      	adcs	r5, r4
 8001318:	2d00      	cmp	r5, #0
 800131a:	d10d      	bne.n	8001338 <__ledf2+0x90>
 800131c:	4281      	cmp	r1, r0
 800131e:	d016      	beq.n	800134e <__ledf2+0xa6>
 8001320:	2002      	movs	r0, #2
 8001322:	3901      	subs	r1, #1
 8001324:	4008      	ands	r0, r1
 8001326:	3801      	subs	r0, #1
 8001328:	e000      	b.n	800132c <__ledf2+0x84>
 800132a:	2002      	movs	r0, #2
 800132c:	bcf0      	pop	{r4, r5, r6, r7}
 800132e:	46bb      	mov	fp, r7
 8001330:	46b2      	mov	sl, r6
 8001332:	46a9      	mov	r9, r5
 8001334:	46a0      	mov	r8, r4
 8001336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001338:	2800      	cmp	r0, #0
 800133a:	d1f7      	bne.n	800132c <__ledf2+0x84>
 800133c:	2001      	movs	r0, #1
 800133e:	4240      	negs	r0, r0
 8001340:	e7f4      	b.n	800132c <__ledf2+0x84>
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1ea      	bne.n	800131c <__ledf2+0x74>
 8001346:	464c      	mov	r4, r9
 8001348:	4326      	orrs	r6, r4
 800134a:	d1e7      	bne.n	800131c <__ledf2+0x74>
 800134c:	e7e8      	b.n	8001320 <__ledf2+0x78>
 800134e:	429a      	cmp	r2, r3
 8001350:	dd06      	ble.n	8001360 <__ledf2+0xb8>
 8001352:	4243      	negs	r3, r0
 8001354:	4158      	adcs	r0, r3
 8001356:	2302      	movs	r3, #2
 8001358:	4240      	negs	r0, r0
 800135a:	4018      	ands	r0, r3
 800135c:	3801      	subs	r0, #1
 800135e:	e7e5      	b.n	800132c <__ledf2+0x84>
 8001360:	429a      	cmp	r2, r3
 8001362:	dbe9      	blt.n	8001338 <__ledf2+0x90>
 8001364:	454f      	cmp	r7, r9
 8001366:	d8db      	bhi.n	8001320 <__ledf2+0x78>
 8001368:	d006      	beq.n	8001378 <__ledf2+0xd0>
 800136a:	2000      	movs	r0, #0
 800136c:	454f      	cmp	r7, r9
 800136e:	d2dd      	bcs.n	800132c <__ledf2+0x84>
 8001370:	2900      	cmp	r1, #0
 8001372:	d0e3      	beq.n	800133c <__ledf2+0x94>
 8001374:	0008      	movs	r0, r1
 8001376:	e7d9      	b.n	800132c <__ledf2+0x84>
 8001378:	45c4      	cmp	ip, r8
 800137a:	d8d1      	bhi.n	8001320 <__ledf2+0x78>
 800137c:	2000      	movs	r0, #0
 800137e:	45c4      	cmp	ip, r8
 8001380:	d2d4      	bcs.n	800132c <__ledf2+0x84>
 8001382:	e7f5      	b.n	8001370 <__ledf2+0xc8>
 8001384:	000007ff 	.word	0x000007ff

08001388 <__aeabi_dmul>:
 8001388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138a:	4657      	mov	r7, sl
 800138c:	464e      	mov	r6, r9
 800138e:	4645      	mov	r5, r8
 8001390:	46de      	mov	lr, fp
 8001392:	b5e0      	push	{r5, r6, r7, lr}
 8001394:	4698      	mov	r8, r3
 8001396:	030c      	lsls	r4, r1, #12
 8001398:	004b      	lsls	r3, r1, #1
 800139a:	0006      	movs	r6, r0
 800139c:	4692      	mov	sl, r2
 800139e:	b087      	sub	sp, #28
 80013a0:	0b24      	lsrs	r4, r4, #12
 80013a2:	0d5b      	lsrs	r3, r3, #21
 80013a4:	0fcf      	lsrs	r7, r1, #31
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d06c      	beq.n	8001484 <__aeabi_dmul+0xfc>
 80013aa:	4add      	ldr	r2, [pc, #884]	; (8001720 <__aeabi_dmul+0x398>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d100      	bne.n	80013b2 <__aeabi_dmul+0x2a>
 80013b0:	e086      	b.n	80014c0 <__aeabi_dmul+0x138>
 80013b2:	0f42      	lsrs	r2, r0, #29
 80013b4:	00e4      	lsls	r4, r4, #3
 80013b6:	4314      	orrs	r4, r2
 80013b8:	2280      	movs	r2, #128	; 0x80
 80013ba:	0412      	lsls	r2, r2, #16
 80013bc:	4314      	orrs	r4, r2
 80013be:	4ad9      	ldr	r2, [pc, #868]	; (8001724 <__aeabi_dmul+0x39c>)
 80013c0:	00c5      	lsls	r5, r0, #3
 80013c2:	4694      	mov	ip, r2
 80013c4:	4463      	add	r3, ip
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2300      	movs	r3, #0
 80013ca:	4699      	mov	r9, r3
 80013cc:	469b      	mov	fp, r3
 80013ce:	4643      	mov	r3, r8
 80013d0:	4642      	mov	r2, r8
 80013d2:	031e      	lsls	r6, r3, #12
 80013d4:	0fd2      	lsrs	r2, r2, #31
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4650      	mov	r0, sl
 80013da:	4690      	mov	r8, r2
 80013dc:	0b36      	lsrs	r6, r6, #12
 80013de:	0d5b      	lsrs	r3, r3, #21
 80013e0:	d100      	bne.n	80013e4 <__aeabi_dmul+0x5c>
 80013e2:	e078      	b.n	80014d6 <__aeabi_dmul+0x14e>
 80013e4:	4ace      	ldr	r2, [pc, #824]	; (8001720 <__aeabi_dmul+0x398>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d01d      	beq.n	8001426 <__aeabi_dmul+0x9e>
 80013ea:	49ce      	ldr	r1, [pc, #824]	; (8001724 <__aeabi_dmul+0x39c>)
 80013ec:	0f42      	lsrs	r2, r0, #29
 80013ee:	468c      	mov	ip, r1
 80013f0:	9900      	ldr	r1, [sp, #0]
 80013f2:	4463      	add	r3, ip
 80013f4:	00f6      	lsls	r6, r6, #3
 80013f6:	468c      	mov	ip, r1
 80013f8:	4316      	orrs	r6, r2
 80013fa:	2280      	movs	r2, #128	; 0x80
 80013fc:	449c      	add	ip, r3
 80013fe:	0412      	lsls	r2, r2, #16
 8001400:	4663      	mov	r3, ip
 8001402:	4316      	orrs	r6, r2
 8001404:	00c2      	lsls	r2, r0, #3
 8001406:	2000      	movs	r0, #0
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	9900      	ldr	r1, [sp, #0]
 800140c:	4643      	mov	r3, r8
 800140e:	3101      	adds	r1, #1
 8001410:	468c      	mov	ip, r1
 8001412:	4649      	mov	r1, r9
 8001414:	407b      	eors	r3, r7
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	290f      	cmp	r1, #15
 800141a:	d900      	bls.n	800141e <__aeabi_dmul+0x96>
 800141c:	e07e      	b.n	800151c <__aeabi_dmul+0x194>
 800141e:	4bc2      	ldr	r3, [pc, #776]	; (8001728 <__aeabi_dmul+0x3a0>)
 8001420:	0089      	lsls	r1, r1, #2
 8001422:	5859      	ldr	r1, [r3, r1]
 8001424:	468f      	mov	pc, r1
 8001426:	4652      	mov	r2, sl
 8001428:	9b00      	ldr	r3, [sp, #0]
 800142a:	4332      	orrs	r2, r6
 800142c:	d000      	beq.n	8001430 <__aeabi_dmul+0xa8>
 800142e:	e156      	b.n	80016de <__aeabi_dmul+0x356>
 8001430:	49bb      	ldr	r1, [pc, #748]	; (8001720 <__aeabi_dmul+0x398>)
 8001432:	2600      	movs	r6, #0
 8001434:	468c      	mov	ip, r1
 8001436:	4463      	add	r3, ip
 8001438:	4649      	mov	r1, r9
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	2302      	movs	r3, #2
 800143e:	4319      	orrs	r1, r3
 8001440:	4689      	mov	r9, r1
 8001442:	2002      	movs	r0, #2
 8001444:	e7e1      	b.n	800140a <__aeabi_dmul+0x82>
 8001446:	4643      	mov	r3, r8
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	0034      	movs	r4, r6
 800144c:	0015      	movs	r5, r2
 800144e:	4683      	mov	fp, r0
 8001450:	465b      	mov	r3, fp
 8001452:	2b02      	cmp	r3, #2
 8001454:	d05e      	beq.n	8001514 <__aeabi_dmul+0x18c>
 8001456:	2b03      	cmp	r3, #3
 8001458:	d100      	bne.n	800145c <__aeabi_dmul+0xd4>
 800145a:	e1f3      	b.n	8001844 <__aeabi_dmul+0x4bc>
 800145c:	2b01      	cmp	r3, #1
 800145e:	d000      	beq.n	8001462 <__aeabi_dmul+0xda>
 8001460:	e118      	b.n	8001694 <__aeabi_dmul+0x30c>
 8001462:	2200      	movs	r2, #0
 8001464:	2400      	movs	r4, #0
 8001466:	2500      	movs	r5, #0
 8001468:	9b01      	ldr	r3, [sp, #4]
 800146a:	0512      	lsls	r2, r2, #20
 800146c:	4322      	orrs	r2, r4
 800146e:	07db      	lsls	r3, r3, #31
 8001470:	431a      	orrs	r2, r3
 8001472:	0028      	movs	r0, r5
 8001474:	0011      	movs	r1, r2
 8001476:	b007      	add	sp, #28
 8001478:	bcf0      	pop	{r4, r5, r6, r7}
 800147a:	46bb      	mov	fp, r7
 800147c:	46b2      	mov	sl, r6
 800147e:	46a9      	mov	r9, r5
 8001480:	46a0      	mov	r8, r4
 8001482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001484:	0025      	movs	r5, r4
 8001486:	4305      	orrs	r5, r0
 8001488:	d100      	bne.n	800148c <__aeabi_dmul+0x104>
 800148a:	e141      	b.n	8001710 <__aeabi_dmul+0x388>
 800148c:	2c00      	cmp	r4, #0
 800148e:	d100      	bne.n	8001492 <__aeabi_dmul+0x10a>
 8001490:	e1ad      	b.n	80017ee <__aeabi_dmul+0x466>
 8001492:	0020      	movs	r0, r4
 8001494:	f000 fe02 	bl	800209c <__clzsi2>
 8001498:	0001      	movs	r1, r0
 800149a:	0002      	movs	r2, r0
 800149c:	390b      	subs	r1, #11
 800149e:	231d      	movs	r3, #29
 80014a0:	0010      	movs	r0, r2
 80014a2:	1a5b      	subs	r3, r3, r1
 80014a4:	0031      	movs	r1, r6
 80014a6:	0035      	movs	r5, r6
 80014a8:	3808      	subs	r0, #8
 80014aa:	4084      	lsls	r4, r0
 80014ac:	40d9      	lsrs	r1, r3
 80014ae:	4085      	lsls	r5, r0
 80014b0:	430c      	orrs	r4, r1
 80014b2:	489e      	ldr	r0, [pc, #632]	; (800172c <__aeabi_dmul+0x3a4>)
 80014b4:	1a83      	subs	r3, r0, r2
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2300      	movs	r3, #0
 80014ba:	4699      	mov	r9, r3
 80014bc:	469b      	mov	fp, r3
 80014be:	e786      	b.n	80013ce <__aeabi_dmul+0x46>
 80014c0:	0005      	movs	r5, r0
 80014c2:	4325      	orrs	r5, r4
 80014c4:	d000      	beq.n	80014c8 <__aeabi_dmul+0x140>
 80014c6:	e11c      	b.n	8001702 <__aeabi_dmul+0x37a>
 80014c8:	2208      	movs	r2, #8
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2302      	movs	r3, #2
 80014ce:	2400      	movs	r4, #0
 80014d0:	4691      	mov	r9, r2
 80014d2:	469b      	mov	fp, r3
 80014d4:	e77b      	b.n	80013ce <__aeabi_dmul+0x46>
 80014d6:	4652      	mov	r2, sl
 80014d8:	4332      	orrs	r2, r6
 80014da:	d100      	bne.n	80014de <__aeabi_dmul+0x156>
 80014dc:	e10a      	b.n	80016f4 <__aeabi_dmul+0x36c>
 80014de:	2e00      	cmp	r6, #0
 80014e0:	d100      	bne.n	80014e4 <__aeabi_dmul+0x15c>
 80014e2:	e176      	b.n	80017d2 <__aeabi_dmul+0x44a>
 80014e4:	0030      	movs	r0, r6
 80014e6:	f000 fdd9 	bl	800209c <__clzsi2>
 80014ea:	0002      	movs	r2, r0
 80014ec:	3a0b      	subs	r2, #11
 80014ee:	231d      	movs	r3, #29
 80014f0:	0001      	movs	r1, r0
 80014f2:	1a9b      	subs	r3, r3, r2
 80014f4:	4652      	mov	r2, sl
 80014f6:	3908      	subs	r1, #8
 80014f8:	40da      	lsrs	r2, r3
 80014fa:	408e      	lsls	r6, r1
 80014fc:	4316      	orrs	r6, r2
 80014fe:	4652      	mov	r2, sl
 8001500:	408a      	lsls	r2, r1
 8001502:	9b00      	ldr	r3, [sp, #0]
 8001504:	4989      	ldr	r1, [pc, #548]	; (800172c <__aeabi_dmul+0x3a4>)
 8001506:	1a18      	subs	r0, r3, r0
 8001508:	0003      	movs	r3, r0
 800150a:	468c      	mov	ip, r1
 800150c:	4463      	add	r3, ip
 800150e:	2000      	movs	r0, #0
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	e77a      	b.n	800140a <__aeabi_dmul+0x82>
 8001514:	2400      	movs	r4, #0
 8001516:	2500      	movs	r5, #0
 8001518:	4a81      	ldr	r2, [pc, #516]	; (8001720 <__aeabi_dmul+0x398>)
 800151a:	e7a5      	b.n	8001468 <__aeabi_dmul+0xe0>
 800151c:	0c2f      	lsrs	r7, r5, #16
 800151e:	042d      	lsls	r5, r5, #16
 8001520:	0c2d      	lsrs	r5, r5, #16
 8001522:	002b      	movs	r3, r5
 8001524:	0c11      	lsrs	r1, r2, #16
 8001526:	0412      	lsls	r2, r2, #16
 8001528:	0c12      	lsrs	r2, r2, #16
 800152a:	4353      	muls	r3, r2
 800152c:	4698      	mov	r8, r3
 800152e:	0013      	movs	r3, r2
 8001530:	0028      	movs	r0, r5
 8001532:	437b      	muls	r3, r7
 8001534:	4699      	mov	r9, r3
 8001536:	4348      	muls	r0, r1
 8001538:	4448      	add	r0, r9
 800153a:	4683      	mov	fp, r0
 800153c:	4640      	mov	r0, r8
 800153e:	000b      	movs	r3, r1
 8001540:	0c00      	lsrs	r0, r0, #16
 8001542:	4682      	mov	sl, r0
 8001544:	4658      	mov	r0, fp
 8001546:	437b      	muls	r3, r7
 8001548:	4450      	add	r0, sl
 800154a:	9302      	str	r3, [sp, #8]
 800154c:	4581      	cmp	r9, r0
 800154e:	d906      	bls.n	800155e <__aeabi_dmul+0x1d6>
 8001550:	469a      	mov	sl, r3
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	025b      	lsls	r3, r3, #9
 8001556:	4699      	mov	r9, r3
 8001558:	44ca      	add	sl, r9
 800155a:	4653      	mov	r3, sl
 800155c:	9302      	str	r3, [sp, #8]
 800155e:	0c03      	lsrs	r3, r0, #16
 8001560:	469b      	mov	fp, r3
 8001562:	4643      	mov	r3, r8
 8001564:	041b      	lsls	r3, r3, #16
 8001566:	0400      	lsls	r0, r0, #16
 8001568:	0c1b      	lsrs	r3, r3, #16
 800156a:	4698      	mov	r8, r3
 800156c:	0003      	movs	r3, r0
 800156e:	4443      	add	r3, r8
 8001570:	9304      	str	r3, [sp, #16]
 8001572:	0c33      	lsrs	r3, r6, #16
 8001574:	4699      	mov	r9, r3
 8001576:	002b      	movs	r3, r5
 8001578:	0436      	lsls	r6, r6, #16
 800157a:	0c36      	lsrs	r6, r6, #16
 800157c:	4373      	muls	r3, r6
 800157e:	4698      	mov	r8, r3
 8001580:	0033      	movs	r3, r6
 8001582:	437b      	muls	r3, r7
 8001584:	469a      	mov	sl, r3
 8001586:	464b      	mov	r3, r9
 8001588:	435d      	muls	r5, r3
 800158a:	435f      	muls	r7, r3
 800158c:	4643      	mov	r3, r8
 800158e:	4455      	add	r5, sl
 8001590:	0c18      	lsrs	r0, r3, #16
 8001592:	1940      	adds	r0, r0, r5
 8001594:	4582      	cmp	sl, r0
 8001596:	d903      	bls.n	80015a0 <__aeabi_dmul+0x218>
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	025b      	lsls	r3, r3, #9
 800159c:	469a      	mov	sl, r3
 800159e:	4457      	add	r7, sl
 80015a0:	0c05      	lsrs	r5, r0, #16
 80015a2:	19eb      	adds	r3, r5, r7
 80015a4:	9305      	str	r3, [sp, #20]
 80015a6:	4643      	mov	r3, r8
 80015a8:	041d      	lsls	r5, r3, #16
 80015aa:	0c2d      	lsrs	r5, r5, #16
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	1940      	adds	r0, r0, r5
 80015b0:	0c25      	lsrs	r5, r4, #16
 80015b2:	0424      	lsls	r4, r4, #16
 80015b4:	0c24      	lsrs	r4, r4, #16
 80015b6:	0027      	movs	r7, r4
 80015b8:	4357      	muls	r7, r2
 80015ba:	436a      	muls	r2, r5
 80015bc:	4690      	mov	r8, r2
 80015be:	002a      	movs	r2, r5
 80015c0:	0c3b      	lsrs	r3, r7, #16
 80015c2:	469a      	mov	sl, r3
 80015c4:	434a      	muls	r2, r1
 80015c6:	4361      	muls	r1, r4
 80015c8:	4441      	add	r1, r8
 80015ca:	4451      	add	r1, sl
 80015cc:	4483      	add	fp, r0
 80015ce:	4588      	cmp	r8, r1
 80015d0:	d903      	bls.n	80015da <__aeabi_dmul+0x252>
 80015d2:	2380      	movs	r3, #128	; 0x80
 80015d4:	025b      	lsls	r3, r3, #9
 80015d6:	4698      	mov	r8, r3
 80015d8:	4442      	add	r2, r8
 80015da:	043f      	lsls	r7, r7, #16
 80015dc:	0c0b      	lsrs	r3, r1, #16
 80015de:	0c3f      	lsrs	r7, r7, #16
 80015e0:	0409      	lsls	r1, r1, #16
 80015e2:	19c9      	adds	r1, r1, r7
 80015e4:	0027      	movs	r7, r4
 80015e6:	4698      	mov	r8, r3
 80015e8:	464b      	mov	r3, r9
 80015ea:	4377      	muls	r7, r6
 80015ec:	435c      	muls	r4, r3
 80015ee:	436e      	muls	r6, r5
 80015f0:	435d      	muls	r5, r3
 80015f2:	0c3b      	lsrs	r3, r7, #16
 80015f4:	4699      	mov	r9, r3
 80015f6:	19a4      	adds	r4, r4, r6
 80015f8:	444c      	add	r4, r9
 80015fa:	4442      	add	r2, r8
 80015fc:	9503      	str	r5, [sp, #12]
 80015fe:	42a6      	cmp	r6, r4
 8001600:	d904      	bls.n	800160c <__aeabi_dmul+0x284>
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	025b      	lsls	r3, r3, #9
 8001606:	4698      	mov	r8, r3
 8001608:	4445      	add	r5, r8
 800160a:	9503      	str	r5, [sp, #12]
 800160c:	9b02      	ldr	r3, [sp, #8]
 800160e:	043f      	lsls	r7, r7, #16
 8001610:	445b      	add	r3, fp
 8001612:	001e      	movs	r6, r3
 8001614:	4283      	cmp	r3, r0
 8001616:	4180      	sbcs	r0, r0
 8001618:	0423      	lsls	r3, r4, #16
 800161a:	4698      	mov	r8, r3
 800161c:	9b05      	ldr	r3, [sp, #20]
 800161e:	0c3f      	lsrs	r7, r7, #16
 8001620:	4447      	add	r7, r8
 8001622:	4698      	mov	r8, r3
 8001624:	1876      	adds	r6, r6, r1
 8001626:	428e      	cmp	r6, r1
 8001628:	4189      	sbcs	r1, r1
 800162a:	4447      	add	r7, r8
 800162c:	4240      	negs	r0, r0
 800162e:	183d      	adds	r5, r7, r0
 8001630:	46a8      	mov	r8, r5
 8001632:	4693      	mov	fp, r2
 8001634:	4249      	negs	r1, r1
 8001636:	468a      	mov	sl, r1
 8001638:	44c3      	add	fp, r8
 800163a:	429f      	cmp	r7, r3
 800163c:	41bf      	sbcs	r7, r7
 800163e:	4580      	cmp	r8, r0
 8001640:	4180      	sbcs	r0, r0
 8001642:	9b03      	ldr	r3, [sp, #12]
 8001644:	44da      	add	sl, fp
 8001646:	4698      	mov	r8, r3
 8001648:	4653      	mov	r3, sl
 800164a:	4240      	negs	r0, r0
 800164c:	427f      	negs	r7, r7
 800164e:	4307      	orrs	r7, r0
 8001650:	0c24      	lsrs	r4, r4, #16
 8001652:	4593      	cmp	fp, r2
 8001654:	4192      	sbcs	r2, r2
 8001656:	458a      	cmp	sl, r1
 8001658:	4189      	sbcs	r1, r1
 800165a:	193f      	adds	r7, r7, r4
 800165c:	0ddc      	lsrs	r4, r3, #23
 800165e:	9b04      	ldr	r3, [sp, #16]
 8001660:	0275      	lsls	r5, r6, #9
 8001662:	431d      	orrs	r5, r3
 8001664:	1e68      	subs	r0, r5, #1
 8001666:	4185      	sbcs	r5, r0
 8001668:	4653      	mov	r3, sl
 800166a:	4252      	negs	r2, r2
 800166c:	4249      	negs	r1, r1
 800166e:	430a      	orrs	r2, r1
 8001670:	18bf      	adds	r7, r7, r2
 8001672:	4447      	add	r7, r8
 8001674:	0df6      	lsrs	r6, r6, #23
 8001676:	027f      	lsls	r7, r7, #9
 8001678:	4335      	orrs	r5, r6
 800167a:	025a      	lsls	r2, r3, #9
 800167c:	433c      	orrs	r4, r7
 800167e:	4315      	orrs	r5, r2
 8001680:	01fb      	lsls	r3, r7, #7
 8001682:	d400      	bmi.n	8001686 <__aeabi_dmul+0x2fe>
 8001684:	e0c1      	b.n	800180a <__aeabi_dmul+0x482>
 8001686:	2101      	movs	r1, #1
 8001688:	086a      	lsrs	r2, r5, #1
 800168a:	400d      	ands	r5, r1
 800168c:	4315      	orrs	r5, r2
 800168e:	07e2      	lsls	r2, r4, #31
 8001690:	4315      	orrs	r5, r2
 8001692:	0864      	lsrs	r4, r4, #1
 8001694:	4926      	ldr	r1, [pc, #152]	; (8001730 <__aeabi_dmul+0x3a8>)
 8001696:	4461      	add	r1, ip
 8001698:	2900      	cmp	r1, #0
 800169a:	dd56      	ble.n	800174a <__aeabi_dmul+0x3c2>
 800169c:	076b      	lsls	r3, r5, #29
 800169e:	d009      	beq.n	80016b4 <__aeabi_dmul+0x32c>
 80016a0:	220f      	movs	r2, #15
 80016a2:	402a      	ands	r2, r5
 80016a4:	2a04      	cmp	r2, #4
 80016a6:	d005      	beq.n	80016b4 <__aeabi_dmul+0x32c>
 80016a8:	1d2a      	adds	r2, r5, #4
 80016aa:	42aa      	cmp	r2, r5
 80016ac:	41ad      	sbcs	r5, r5
 80016ae:	426d      	negs	r5, r5
 80016b0:	1964      	adds	r4, r4, r5
 80016b2:	0015      	movs	r5, r2
 80016b4:	01e3      	lsls	r3, r4, #7
 80016b6:	d504      	bpl.n	80016c2 <__aeabi_dmul+0x33a>
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	4a1e      	ldr	r2, [pc, #120]	; (8001734 <__aeabi_dmul+0x3ac>)
 80016bc:	00c9      	lsls	r1, r1, #3
 80016be:	4014      	ands	r4, r2
 80016c0:	4461      	add	r1, ip
 80016c2:	4a1d      	ldr	r2, [pc, #116]	; (8001738 <__aeabi_dmul+0x3b0>)
 80016c4:	4291      	cmp	r1, r2
 80016c6:	dd00      	ble.n	80016ca <__aeabi_dmul+0x342>
 80016c8:	e724      	b.n	8001514 <__aeabi_dmul+0x18c>
 80016ca:	0762      	lsls	r2, r4, #29
 80016cc:	08ed      	lsrs	r5, r5, #3
 80016ce:	0264      	lsls	r4, r4, #9
 80016d0:	0549      	lsls	r1, r1, #21
 80016d2:	4315      	orrs	r5, r2
 80016d4:	0b24      	lsrs	r4, r4, #12
 80016d6:	0d4a      	lsrs	r2, r1, #21
 80016d8:	e6c6      	b.n	8001468 <__aeabi_dmul+0xe0>
 80016da:	9701      	str	r7, [sp, #4]
 80016dc:	e6b8      	b.n	8001450 <__aeabi_dmul+0xc8>
 80016de:	4a10      	ldr	r2, [pc, #64]	; (8001720 <__aeabi_dmul+0x398>)
 80016e0:	2003      	movs	r0, #3
 80016e2:	4694      	mov	ip, r2
 80016e4:	4463      	add	r3, ip
 80016e6:	464a      	mov	r2, r9
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2303      	movs	r3, #3
 80016ec:	431a      	orrs	r2, r3
 80016ee:	4691      	mov	r9, r2
 80016f0:	4652      	mov	r2, sl
 80016f2:	e68a      	b.n	800140a <__aeabi_dmul+0x82>
 80016f4:	4649      	mov	r1, r9
 80016f6:	2301      	movs	r3, #1
 80016f8:	4319      	orrs	r1, r3
 80016fa:	4689      	mov	r9, r1
 80016fc:	2600      	movs	r6, #0
 80016fe:	2001      	movs	r0, #1
 8001700:	e683      	b.n	800140a <__aeabi_dmul+0x82>
 8001702:	220c      	movs	r2, #12
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	2303      	movs	r3, #3
 8001708:	0005      	movs	r5, r0
 800170a:	4691      	mov	r9, r2
 800170c:	469b      	mov	fp, r3
 800170e:	e65e      	b.n	80013ce <__aeabi_dmul+0x46>
 8001710:	2304      	movs	r3, #4
 8001712:	4699      	mov	r9, r3
 8001714:	2300      	movs	r3, #0
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	3301      	adds	r3, #1
 800171a:	2400      	movs	r4, #0
 800171c:	469b      	mov	fp, r3
 800171e:	e656      	b.n	80013ce <__aeabi_dmul+0x46>
 8001720:	000007ff 	.word	0x000007ff
 8001724:	fffffc01 	.word	0xfffffc01
 8001728:	0800fcbc 	.word	0x0800fcbc
 800172c:	fffffc0d 	.word	0xfffffc0d
 8001730:	000003ff 	.word	0x000003ff
 8001734:	feffffff 	.word	0xfeffffff
 8001738:	000007fe 	.word	0x000007fe
 800173c:	2300      	movs	r3, #0
 800173e:	2480      	movs	r4, #128	; 0x80
 8001740:	2500      	movs	r5, #0
 8001742:	4a44      	ldr	r2, [pc, #272]	; (8001854 <__aeabi_dmul+0x4cc>)
 8001744:	9301      	str	r3, [sp, #4]
 8001746:	0324      	lsls	r4, r4, #12
 8001748:	e68e      	b.n	8001468 <__aeabi_dmul+0xe0>
 800174a:	2001      	movs	r0, #1
 800174c:	1a40      	subs	r0, r0, r1
 800174e:	2838      	cmp	r0, #56	; 0x38
 8001750:	dd00      	ble.n	8001754 <__aeabi_dmul+0x3cc>
 8001752:	e686      	b.n	8001462 <__aeabi_dmul+0xda>
 8001754:	281f      	cmp	r0, #31
 8001756:	dd5b      	ble.n	8001810 <__aeabi_dmul+0x488>
 8001758:	221f      	movs	r2, #31
 800175a:	0023      	movs	r3, r4
 800175c:	4252      	negs	r2, r2
 800175e:	1a51      	subs	r1, r2, r1
 8001760:	40cb      	lsrs	r3, r1
 8001762:	0019      	movs	r1, r3
 8001764:	2820      	cmp	r0, #32
 8001766:	d003      	beq.n	8001770 <__aeabi_dmul+0x3e8>
 8001768:	4a3b      	ldr	r2, [pc, #236]	; (8001858 <__aeabi_dmul+0x4d0>)
 800176a:	4462      	add	r2, ip
 800176c:	4094      	lsls	r4, r2
 800176e:	4325      	orrs	r5, r4
 8001770:	1e6a      	subs	r2, r5, #1
 8001772:	4195      	sbcs	r5, r2
 8001774:	002a      	movs	r2, r5
 8001776:	430a      	orrs	r2, r1
 8001778:	2107      	movs	r1, #7
 800177a:	000d      	movs	r5, r1
 800177c:	2400      	movs	r4, #0
 800177e:	4015      	ands	r5, r2
 8001780:	4211      	tst	r1, r2
 8001782:	d05b      	beq.n	800183c <__aeabi_dmul+0x4b4>
 8001784:	210f      	movs	r1, #15
 8001786:	2400      	movs	r4, #0
 8001788:	4011      	ands	r1, r2
 800178a:	2904      	cmp	r1, #4
 800178c:	d053      	beq.n	8001836 <__aeabi_dmul+0x4ae>
 800178e:	1d11      	adds	r1, r2, #4
 8001790:	4291      	cmp	r1, r2
 8001792:	4192      	sbcs	r2, r2
 8001794:	4252      	negs	r2, r2
 8001796:	18a4      	adds	r4, r4, r2
 8001798:	000a      	movs	r2, r1
 800179a:	0223      	lsls	r3, r4, #8
 800179c:	d54b      	bpl.n	8001836 <__aeabi_dmul+0x4ae>
 800179e:	2201      	movs	r2, #1
 80017a0:	2400      	movs	r4, #0
 80017a2:	2500      	movs	r5, #0
 80017a4:	e660      	b.n	8001468 <__aeabi_dmul+0xe0>
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	031b      	lsls	r3, r3, #12
 80017aa:	421c      	tst	r4, r3
 80017ac:	d009      	beq.n	80017c2 <__aeabi_dmul+0x43a>
 80017ae:	421e      	tst	r6, r3
 80017b0:	d107      	bne.n	80017c2 <__aeabi_dmul+0x43a>
 80017b2:	4333      	orrs	r3, r6
 80017b4:	031c      	lsls	r4, r3, #12
 80017b6:	4643      	mov	r3, r8
 80017b8:	0015      	movs	r5, r2
 80017ba:	0b24      	lsrs	r4, r4, #12
 80017bc:	4a25      	ldr	r2, [pc, #148]	; (8001854 <__aeabi_dmul+0x4cc>)
 80017be:	9301      	str	r3, [sp, #4]
 80017c0:	e652      	b.n	8001468 <__aeabi_dmul+0xe0>
 80017c2:	2280      	movs	r2, #128	; 0x80
 80017c4:	0312      	lsls	r2, r2, #12
 80017c6:	4314      	orrs	r4, r2
 80017c8:	0324      	lsls	r4, r4, #12
 80017ca:	4a22      	ldr	r2, [pc, #136]	; (8001854 <__aeabi_dmul+0x4cc>)
 80017cc:	0b24      	lsrs	r4, r4, #12
 80017ce:	9701      	str	r7, [sp, #4]
 80017d0:	e64a      	b.n	8001468 <__aeabi_dmul+0xe0>
 80017d2:	f000 fc63 	bl	800209c <__clzsi2>
 80017d6:	0003      	movs	r3, r0
 80017d8:	001a      	movs	r2, r3
 80017da:	3215      	adds	r2, #21
 80017dc:	3020      	adds	r0, #32
 80017de:	2a1c      	cmp	r2, #28
 80017e0:	dc00      	bgt.n	80017e4 <__aeabi_dmul+0x45c>
 80017e2:	e684      	b.n	80014ee <__aeabi_dmul+0x166>
 80017e4:	4656      	mov	r6, sl
 80017e6:	3b08      	subs	r3, #8
 80017e8:	2200      	movs	r2, #0
 80017ea:	409e      	lsls	r6, r3
 80017ec:	e689      	b.n	8001502 <__aeabi_dmul+0x17a>
 80017ee:	f000 fc55 	bl	800209c <__clzsi2>
 80017f2:	0001      	movs	r1, r0
 80017f4:	0002      	movs	r2, r0
 80017f6:	3115      	adds	r1, #21
 80017f8:	3220      	adds	r2, #32
 80017fa:	291c      	cmp	r1, #28
 80017fc:	dc00      	bgt.n	8001800 <__aeabi_dmul+0x478>
 80017fe:	e64e      	b.n	800149e <__aeabi_dmul+0x116>
 8001800:	0034      	movs	r4, r6
 8001802:	3808      	subs	r0, #8
 8001804:	2500      	movs	r5, #0
 8001806:	4084      	lsls	r4, r0
 8001808:	e653      	b.n	80014b2 <__aeabi_dmul+0x12a>
 800180a:	9b00      	ldr	r3, [sp, #0]
 800180c:	469c      	mov	ip, r3
 800180e:	e741      	b.n	8001694 <__aeabi_dmul+0x30c>
 8001810:	4912      	ldr	r1, [pc, #72]	; (800185c <__aeabi_dmul+0x4d4>)
 8001812:	0022      	movs	r2, r4
 8001814:	4461      	add	r1, ip
 8001816:	002e      	movs	r6, r5
 8001818:	408d      	lsls	r5, r1
 800181a:	408a      	lsls	r2, r1
 800181c:	40c6      	lsrs	r6, r0
 800181e:	1e69      	subs	r1, r5, #1
 8001820:	418d      	sbcs	r5, r1
 8001822:	4332      	orrs	r2, r6
 8001824:	432a      	orrs	r2, r5
 8001826:	40c4      	lsrs	r4, r0
 8001828:	0753      	lsls	r3, r2, #29
 800182a:	d0b6      	beq.n	800179a <__aeabi_dmul+0x412>
 800182c:	210f      	movs	r1, #15
 800182e:	4011      	ands	r1, r2
 8001830:	2904      	cmp	r1, #4
 8001832:	d1ac      	bne.n	800178e <__aeabi_dmul+0x406>
 8001834:	e7b1      	b.n	800179a <__aeabi_dmul+0x412>
 8001836:	0765      	lsls	r5, r4, #29
 8001838:	0264      	lsls	r4, r4, #9
 800183a:	0b24      	lsrs	r4, r4, #12
 800183c:	08d2      	lsrs	r2, r2, #3
 800183e:	4315      	orrs	r5, r2
 8001840:	2200      	movs	r2, #0
 8001842:	e611      	b.n	8001468 <__aeabi_dmul+0xe0>
 8001844:	2280      	movs	r2, #128	; 0x80
 8001846:	0312      	lsls	r2, r2, #12
 8001848:	4314      	orrs	r4, r2
 800184a:	0324      	lsls	r4, r4, #12
 800184c:	4a01      	ldr	r2, [pc, #4]	; (8001854 <__aeabi_dmul+0x4cc>)
 800184e:	0b24      	lsrs	r4, r4, #12
 8001850:	e60a      	b.n	8001468 <__aeabi_dmul+0xe0>
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	000007ff 	.word	0x000007ff
 8001858:	0000043e 	.word	0x0000043e
 800185c:	0000041e 	.word	0x0000041e

08001860 <__aeabi_dsub>:
 8001860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001862:	4657      	mov	r7, sl
 8001864:	464e      	mov	r6, r9
 8001866:	4645      	mov	r5, r8
 8001868:	46de      	mov	lr, fp
 800186a:	0004      	movs	r4, r0
 800186c:	b5e0      	push	{r5, r6, r7, lr}
 800186e:	001f      	movs	r7, r3
 8001870:	0010      	movs	r0, r2
 8001872:	030b      	lsls	r3, r1, #12
 8001874:	0f62      	lsrs	r2, r4, #29
 8001876:	004e      	lsls	r6, r1, #1
 8001878:	0fcd      	lsrs	r5, r1, #31
 800187a:	0a5b      	lsrs	r3, r3, #9
 800187c:	0339      	lsls	r1, r7, #12
 800187e:	4313      	orrs	r3, r2
 8001880:	0a49      	lsrs	r1, r1, #9
 8001882:	00e2      	lsls	r2, r4, #3
 8001884:	0f44      	lsrs	r4, r0, #29
 8001886:	4321      	orrs	r1, r4
 8001888:	4cc2      	ldr	r4, [pc, #776]	; (8001b94 <__aeabi_dsub+0x334>)
 800188a:	4691      	mov	r9, r2
 800188c:	4692      	mov	sl, r2
 800188e:	00c0      	lsls	r0, r0, #3
 8001890:	007a      	lsls	r2, r7, #1
 8001892:	4680      	mov	r8, r0
 8001894:	0d76      	lsrs	r6, r6, #21
 8001896:	0d52      	lsrs	r2, r2, #21
 8001898:	0fff      	lsrs	r7, r7, #31
 800189a:	42a2      	cmp	r2, r4
 800189c:	d100      	bne.n	80018a0 <__aeabi_dsub+0x40>
 800189e:	e0b4      	b.n	8001a0a <__aeabi_dsub+0x1aa>
 80018a0:	2401      	movs	r4, #1
 80018a2:	4067      	eors	r7, r4
 80018a4:	46bb      	mov	fp, r7
 80018a6:	42bd      	cmp	r5, r7
 80018a8:	d100      	bne.n	80018ac <__aeabi_dsub+0x4c>
 80018aa:	e088      	b.n	80019be <__aeabi_dsub+0x15e>
 80018ac:	1ab4      	subs	r4, r6, r2
 80018ae:	46a4      	mov	ip, r4
 80018b0:	2c00      	cmp	r4, #0
 80018b2:	dc00      	bgt.n	80018b6 <__aeabi_dsub+0x56>
 80018b4:	e0b2      	b.n	8001a1c <__aeabi_dsub+0x1bc>
 80018b6:	2a00      	cmp	r2, #0
 80018b8:	d100      	bne.n	80018bc <__aeabi_dsub+0x5c>
 80018ba:	e0c5      	b.n	8001a48 <__aeabi_dsub+0x1e8>
 80018bc:	4ab5      	ldr	r2, [pc, #724]	; (8001b94 <__aeabi_dsub+0x334>)
 80018be:	4296      	cmp	r6, r2
 80018c0:	d100      	bne.n	80018c4 <__aeabi_dsub+0x64>
 80018c2:	e28b      	b.n	8001ddc <__aeabi_dsub+0x57c>
 80018c4:	2280      	movs	r2, #128	; 0x80
 80018c6:	0412      	lsls	r2, r2, #16
 80018c8:	4311      	orrs	r1, r2
 80018ca:	4662      	mov	r2, ip
 80018cc:	2a38      	cmp	r2, #56	; 0x38
 80018ce:	dd00      	ble.n	80018d2 <__aeabi_dsub+0x72>
 80018d0:	e1a1      	b.n	8001c16 <__aeabi_dsub+0x3b6>
 80018d2:	2a1f      	cmp	r2, #31
 80018d4:	dd00      	ble.n	80018d8 <__aeabi_dsub+0x78>
 80018d6:	e216      	b.n	8001d06 <__aeabi_dsub+0x4a6>
 80018d8:	2720      	movs	r7, #32
 80018da:	000c      	movs	r4, r1
 80018dc:	1abf      	subs	r7, r7, r2
 80018de:	40bc      	lsls	r4, r7
 80018e0:	0002      	movs	r2, r0
 80018e2:	46a0      	mov	r8, r4
 80018e4:	4664      	mov	r4, ip
 80018e6:	40b8      	lsls	r0, r7
 80018e8:	40e2      	lsrs	r2, r4
 80018ea:	4644      	mov	r4, r8
 80018ec:	4314      	orrs	r4, r2
 80018ee:	0002      	movs	r2, r0
 80018f0:	1e50      	subs	r0, r2, #1
 80018f2:	4182      	sbcs	r2, r0
 80018f4:	4660      	mov	r0, ip
 80018f6:	40c1      	lsrs	r1, r0
 80018f8:	4322      	orrs	r2, r4
 80018fa:	1a5b      	subs	r3, r3, r1
 80018fc:	4649      	mov	r1, r9
 80018fe:	1a8c      	subs	r4, r1, r2
 8001900:	45a1      	cmp	r9, r4
 8001902:	4192      	sbcs	r2, r2
 8001904:	4252      	negs	r2, r2
 8001906:	1a9b      	subs	r3, r3, r2
 8001908:	4698      	mov	r8, r3
 800190a:	4643      	mov	r3, r8
 800190c:	021b      	lsls	r3, r3, #8
 800190e:	d400      	bmi.n	8001912 <__aeabi_dsub+0xb2>
 8001910:	e117      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001912:	4643      	mov	r3, r8
 8001914:	025b      	lsls	r3, r3, #9
 8001916:	0a5b      	lsrs	r3, r3, #9
 8001918:	4698      	mov	r8, r3
 800191a:	4643      	mov	r3, r8
 800191c:	2b00      	cmp	r3, #0
 800191e:	d100      	bne.n	8001922 <__aeabi_dsub+0xc2>
 8001920:	e16c      	b.n	8001bfc <__aeabi_dsub+0x39c>
 8001922:	4640      	mov	r0, r8
 8001924:	f000 fbba 	bl	800209c <__clzsi2>
 8001928:	0002      	movs	r2, r0
 800192a:	3a08      	subs	r2, #8
 800192c:	2120      	movs	r1, #32
 800192e:	0020      	movs	r0, r4
 8001930:	4643      	mov	r3, r8
 8001932:	1a89      	subs	r1, r1, r2
 8001934:	4093      	lsls	r3, r2
 8001936:	40c8      	lsrs	r0, r1
 8001938:	4094      	lsls	r4, r2
 800193a:	4303      	orrs	r3, r0
 800193c:	4296      	cmp	r6, r2
 800193e:	dd00      	ble.n	8001942 <__aeabi_dsub+0xe2>
 8001940:	e157      	b.n	8001bf2 <__aeabi_dsub+0x392>
 8001942:	1b96      	subs	r6, r2, r6
 8001944:	1c71      	adds	r1, r6, #1
 8001946:	291f      	cmp	r1, #31
 8001948:	dd00      	ble.n	800194c <__aeabi_dsub+0xec>
 800194a:	e1cb      	b.n	8001ce4 <__aeabi_dsub+0x484>
 800194c:	2220      	movs	r2, #32
 800194e:	0018      	movs	r0, r3
 8001950:	0026      	movs	r6, r4
 8001952:	1a52      	subs	r2, r2, r1
 8001954:	4094      	lsls	r4, r2
 8001956:	4090      	lsls	r0, r2
 8001958:	40ce      	lsrs	r6, r1
 800195a:	40cb      	lsrs	r3, r1
 800195c:	1e62      	subs	r2, r4, #1
 800195e:	4194      	sbcs	r4, r2
 8001960:	4330      	orrs	r0, r6
 8001962:	4698      	mov	r8, r3
 8001964:	2600      	movs	r6, #0
 8001966:	4304      	orrs	r4, r0
 8001968:	0763      	lsls	r3, r4, #29
 800196a:	d009      	beq.n	8001980 <__aeabi_dsub+0x120>
 800196c:	230f      	movs	r3, #15
 800196e:	4023      	ands	r3, r4
 8001970:	2b04      	cmp	r3, #4
 8001972:	d005      	beq.n	8001980 <__aeabi_dsub+0x120>
 8001974:	1d23      	adds	r3, r4, #4
 8001976:	42a3      	cmp	r3, r4
 8001978:	41a4      	sbcs	r4, r4
 800197a:	4264      	negs	r4, r4
 800197c:	44a0      	add	r8, r4
 800197e:	001c      	movs	r4, r3
 8001980:	4643      	mov	r3, r8
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	d400      	bmi.n	8001988 <__aeabi_dsub+0x128>
 8001986:	e0df      	b.n	8001b48 <__aeabi_dsub+0x2e8>
 8001988:	4b82      	ldr	r3, [pc, #520]	; (8001b94 <__aeabi_dsub+0x334>)
 800198a:	3601      	adds	r6, #1
 800198c:	429e      	cmp	r6, r3
 800198e:	d100      	bne.n	8001992 <__aeabi_dsub+0x132>
 8001990:	e0fb      	b.n	8001b8a <__aeabi_dsub+0x32a>
 8001992:	4642      	mov	r2, r8
 8001994:	4b80      	ldr	r3, [pc, #512]	; (8001b98 <__aeabi_dsub+0x338>)
 8001996:	08e4      	lsrs	r4, r4, #3
 8001998:	401a      	ands	r2, r3
 800199a:	0013      	movs	r3, r2
 800199c:	0571      	lsls	r1, r6, #21
 800199e:	0752      	lsls	r2, r2, #29
 80019a0:	025b      	lsls	r3, r3, #9
 80019a2:	4322      	orrs	r2, r4
 80019a4:	0b1b      	lsrs	r3, r3, #12
 80019a6:	0d49      	lsrs	r1, r1, #21
 80019a8:	0509      	lsls	r1, r1, #20
 80019aa:	07ed      	lsls	r5, r5, #31
 80019ac:	4319      	orrs	r1, r3
 80019ae:	4329      	orrs	r1, r5
 80019b0:	0010      	movs	r0, r2
 80019b2:	bcf0      	pop	{r4, r5, r6, r7}
 80019b4:	46bb      	mov	fp, r7
 80019b6:	46b2      	mov	sl, r6
 80019b8:	46a9      	mov	r9, r5
 80019ba:	46a0      	mov	r8, r4
 80019bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019be:	1ab4      	subs	r4, r6, r2
 80019c0:	46a4      	mov	ip, r4
 80019c2:	2c00      	cmp	r4, #0
 80019c4:	dd58      	ble.n	8001a78 <__aeabi_dsub+0x218>
 80019c6:	2a00      	cmp	r2, #0
 80019c8:	d100      	bne.n	80019cc <__aeabi_dsub+0x16c>
 80019ca:	e09e      	b.n	8001b0a <__aeabi_dsub+0x2aa>
 80019cc:	4a71      	ldr	r2, [pc, #452]	; (8001b94 <__aeabi_dsub+0x334>)
 80019ce:	4296      	cmp	r6, r2
 80019d0:	d100      	bne.n	80019d4 <__aeabi_dsub+0x174>
 80019d2:	e13b      	b.n	8001c4c <__aeabi_dsub+0x3ec>
 80019d4:	2280      	movs	r2, #128	; 0x80
 80019d6:	0412      	lsls	r2, r2, #16
 80019d8:	4311      	orrs	r1, r2
 80019da:	4662      	mov	r2, ip
 80019dc:	2a38      	cmp	r2, #56	; 0x38
 80019de:	dd00      	ble.n	80019e2 <__aeabi_dsub+0x182>
 80019e0:	e0c1      	b.n	8001b66 <__aeabi_dsub+0x306>
 80019e2:	2a1f      	cmp	r2, #31
 80019e4:	dc00      	bgt.n	80019e8 <__aeabi_dsub+0x188>
 80019e6:	e1bb      	b.n	8001d60 <__aeabi_dsub+0x500>
 80019e8:	000c      	movs	r4, r1
 80019ea:	3a20      	subs	r2, #32
 80019ec:	40d4      	lsrs	r4, r2
 80019ee:	0022      	movs	r2, r4
 80019f0:	4664      	mov	r4, ip
 80019f2:	2c20      	cmp	r4, #32
 80019f4:	d004      	beq.n	8001a00 <__aeabi_dsub+0x1a0>
 80019f6:	2740      	movs	r7, #64	; 0x40
 80019f8:	1b3f      	subs	r7, r7, r4
 80019fa:	40b9      	lsls	r1, r7
 80019fc:	4308      	orrs	r0, r1
 80019fe:	4680      	mov	r8, r0
 8001a00:	4644      	mov	r4, r8
 8001a02:	1e61      	subs	r1, r4, #1
 8001a04:	418c      	sbcs	r4, r1
 8001a06:	4314      	orrs	r4, r2
 8001a08:	e0b1      	b.n	8001b6e <__aeabi_dsub+0x30e>
 8001a0a:	000c      	movs	r4, r1
 8001a0c:	4304      	orrs	r4, r0
 8001a0e:	d02a      	beq.n	8001a66 <__aeabi_dsub+0x206>
 8001a10:	46bb      	mov	fp, r7
 8001a12:	42bd      	cmp	r5, r7
 8001a14:	d02d      	beq.n	8001a72 <__aeabi_dsub+0x212>
 8001a16:	4c61      	ldr	r4, [pc, #388]	; (8001b9c <__aeabi_dsub+0x33c>)
 8001a18:	46a4      	mov	ip, r4
 8001a1a:	44b4      	add	ip, r6
 8001a1c:	4664      	mov	r4, ip
 8001a1e:	2c00      	cmp	r4, #0
 8001a20:	d05c      	beq.n	8001adc <__aeabi_dsub+0x27c>
 8001a22:	1b94      	subs	r4, r2, r6
 8001a24:	46a4      	mov	ip, r4
 8001a26:	2e00      	cmp	r6, #0
 8001a28:	d000      	beq.n	8001a2c <__aeabi_dsub+0x1cc>
 8001a2a:	e115      	b.n	8001c58 <__aeabi_dsub+0x3f8>
 8001a2c:	464d      	mov	r5, r9
 8001a2e:	431d      	orrs	r5, r3
 8001a30:	d100      	bne.n	8001a34 <__aeabi_dsub+0x1d4>
 8001a32:	e1c3      	b.n	8001dbc <__aeabi_dsub+0x55c>
 8001a34:	1e65      	subs	r5, r4, #1
 8001a36:	2c01      	cmp	r4, #1
 8001a38:	d100      	bne.n	8001a3c <__aeabi_dsub+0x1dc>
 8001a3a:	e20c      	b.n	8001e56 <__aeabi_dsub+0x5f6>
 8001a3c:	4e55      	ldr	r6, [pc, #340]	; (8001b94 <__aeabi_dsub+0x334>)
 8001a3e:	42b4      	cmp	r4, r6
 8001a40:	d100      	bne.n	8001a44 <__aeabi_dsub+0x1e4>
 8001a42:	e1f8      	b.n	8001e36 <__aeabi_dsub+0x5d6>
 8001a44:	46ac      	mov	ip, r5
 8001a46:	e10e      	b.n	8001c66 <__aeabi_dsub+0x406>
 8001a48:	000a      	movs	r2, r1
 8001a4a:	4302      	orrs	r2, r0
 8001a4c:	d100      	bne.n	8001a50 <__aeabi_dsub+0x1f0>
 8001a4e:	e136      	b.n	8001cbe <__aeabi_dsub+0x45e>
 8001a50:	0022      	movs	r2, r4
 8001a52:	3a01      	subs	r2, #1
 8001a54:	2c01      	cmp	r4, #1
 8001a56:	d100      	bne.n	8001a5a <__aeabi_dsub+0x1fa>
 8001a58:	e1c6      	b.n	8001de8 <__aeabi_dsub+0x588>
 8001a5a:	4c4e      	ldr	r4, [pc, #312]	; (8001b94 <__aeabi_dsub+0x334>)
 8001a5c:	45a4      	cmp	ip, r4
 8001a5e:	d100      	bne.n	8001a62 <__aeabi_dsub+0x202>
 8001a60:	e0f4      	b.n	8001c4c <__aeabi_dsub+0x3ec>
 8001a62:	4694      	mov	ip, r2
 8001a64:	e731      	b.n	80018ca <__aeabi_dsub+0x6a>
 8001a66:	2401      	movs	r4, #1
 8001a68:	4067      	eors	r7, r4
 8001a6a:	46bb      	mov	fp, r7
 8001a6c:	42bd      	cmp	r5, r7
 8001a6e:	d000      	beq.n	8001a72 <__aeabi_dsub+0x212>
 8001a70:	e71c      	b.n	80018ac <__aeabi_dsub+0x4c>
 8001a72:	4c4a      	ldr	r4, [pc, #296]	; (8001b9c <__aeabi_dsub+0x33c>)
 8001a74:	46a4      	mov	ip, r4
 8001a76:	44b4      	add	ip, r6
 8001a78:	4664      	mov	r4, ip
 8001a7a:	2c00      	cmp	r4, #0
 8001a7c:	d100      	bne.n	8001a80 <__aeabi_dsub+0x220>
 8001a7e:	e0cf      	b.n	8001c20 <__aeabi_dsub+0x3c0>
 8001a80:	1b94      	subs	r4, r2, r6
 8001a82:	46a4      	mov	ip, r4
 8001a84:	2e00      	cmp	r6, #0
 8001a86:	d100      	bne.n	8001a8a <__aeabi_dsub+0x22a>
 8001a88:	e15c      	b.n	8001d44 <__aeabi_dsub+0x4e4>
 8001a8a:	4e42      	ldr	r6, [pc, #264]	; (8001b94 <__aeabi_dsub+0x334>)
 8001a8c:	42b2      	cmp	r2, r6
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dsub+0x232>
 8001a90:	e1ec      	b.n	8001e6c <__aeabi_dsub+0x60c>
 8001a92:	2680      	movs	r6, #128	; 0x80
 8001a94:	0436      	lsls	r6, r6, #16
 8001a96:	4333      	orrs	r3, r6
 8001a98:	4664      	mov	r4, ip
 8001a9a:	2c38      	cmp	r4, #56	; 0x38
 8001a9c:	dd00      	ble.n	8001aa0 <__aeabi_dsub+0x240>
 8001a9e:	e1b3      	b.n	8001e08 <__aeabi_dsub+0x5a8>
 8001aa0:	2c1f      	cmp	r4, #31
 8001aa2:	dd00      	ble.n	8001aa6 <__aeabi_dsub+0x246>
 8001aa4:	e238      	b.n	8001f18 <__aeabi_dsub+0x6b8>
 8001aa6:	2620      	movs	r6, #32
 8001aa8:	1b36      	subs	r6, r6, r4
 8001aaa:	001c      	movs	r4, r3
 8001aac:	40b4      	lsls	r4, r6
 8001aae:	464f      	mov	r7, r9
 8001ab0:	46a0      	mov	r8, r4
 8001ab2:	4664      	mov	r4, ip
 8001ab4:	40e7      	lsrs	r7, r4
 8001ab6:	4644      	mov	r4, r8
 8001ab8:	433c      	orrs	r4, r7
 8001aba:	464f      	mov	r7, r9
 8001abc:	40b7      	lsls	r7, r6
 8001abe:	003e      	movs	r6, r7
 8001ac0:	1e77      	subs	r7, r6, #1
 8001ac2:	41be      	sbcs	r6, r7
 8001ac4:	4334      	orrs	r4, r6
 8001ac6:	4666      	mov	r6, ip
 8001ac8:	40f3      	lsrs	r3, r6
 8001aca:	18c9      	adds	r1, r1, r3
 8001acc:	1824      	adds	r4, r4, r0
 8001ace:	4284      	cmp	r4, r0
 8001ad0:	419b      	sbcs	r3, r3
 8001ad2:	425b      	negs	r3, r3
 8001ad4:	4698      	mov	r8, r3
 8001ad6:	0016      	movs	r6, r2
 8001ad8:	4488      	add	r8, r1
 8001ada:	e04e      	b.n	8001b7a <__aeabi_dsub+0x31a>
 8001adc:	4a30      	ldr	r2, [pc, #192]	; (8001ba0 <__aeabi_dsub+0x340>)
 8001ade:	1c74      	adds	r4, r6, #1
 8001ae0:	4214      	tst	r4, r2
 8001ae2:	d000      	beq.n	8001ae6 <__aeabi_dsub+0x286>
 8001ae4:	e0d6      	b.n	8001c94 <__aeabi_dsub+0x434>
 8001ae6:	464a      	mov	r2, r9
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	2e00      	cmp	r6, #0
 8001aec:	d000      	beq.n	8001af0 <__aeabi_dsub+0x290>
 8001aee:	e15b      	b.n	8001da8 <__aeabi_dsub+0x548>
 8001af0:	2a00      	cmp	r2, #0
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dsub+0x296>
 8001af4:	e1a5      	b.n	8001e42 <__aeabi_dsub+0x5e2>
 8001af6:	000a      	movs	r2, r1
 8001af8:	4302      	orrs	r2, r0
 8001afa:	d000      	beq.n	8001afe <__aeabi_dsub+0x29e>
 8001afc:	e1bb      	b.n	8001e76 <__aeabi_dsub+0x616>
 8001afe:	464a      	mov	r2, r9
 8001b00:	0759      	lsls	r1, r3, #29
 8001b02:	08d2      	lsrs	r2, r2, #3
 8001b04:	430a      	orrs	r2, r1
 8001b06:	08db      	lsrs	r3, r3, #3
 8001b08:	e027      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001b0a:	000a      	movs	r2, r1
 8001b0c:	4302      	orrs	r2, r0
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_dsub+0x2b2>
 8001b10:	e174      	b.n	8001dfc <__aeabi_dsub+0x59c>
 8001b12:	0022      	movs	r2, r4
 8001b14:	3a01      	subs	r2, #1
 8001b16:	2c01      	cmp	r4, #1
 8001b18:	d005      	beq.n	8001b26 <__aeabi_dsub+0x2c6>
 8001b1a:	4c1e      	ldr	r4, [pc, #120]	; (8001b94 <__aeabi_dsub+0x334>)
 8001b1c:	45a4      	cmp	ip, r4
 8001b1e:	d100      	bne.n	8001b22 <__aeabi_dsub+0x2c2>
 8001b20:	e094      	b.n	8001c4c <__aeabi_dsub+0x3ec>
 8001b22:	4694      	mov	ip, r2
 8001b24:	e759      	b.n	80019da <__aeabi_dsub+0x17a>
 8001b26:	4448      	add	r0, r9
 8001b28:	4548      	cmp	r0, r9
 8001b2a:	4192      	sbcs	r2, r2
 8001b2c:	185b      	adds	r3, r3, r1
 8001b2e:	4698      	mov	r8, r3
 8001b30:	0004      	movs	r4, r0
 8001b32:	4252      	negs	r2, r2
 8001b34:	4490      	add	r8, r2
 8001b36:	4643      	mov	r3, r8
 8001b38:	2602      	movs	r6, #2
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	d500      	bpl.n	8001b40 <__aeabi_dsub+0x2e0>
 8001b3e:	e0c4      	b.n	8001cca <__aeabi_dsub+0x46a>
 8001b40:	3e01      	subs	r6, #1
 8001b42:	0763      	lsls	r3, r4, #29
 8001b44:	d000      	beq.n	8001b48 <__aeabi_dsub+0x2e8>
 8001b46:	e711      	b.n	800196c <__aeabi_dsub+0x10c>
 8001b48:	4643      	mov	r3, r8
 8001b4a:	46b4      	mov	ip, r6
 8001b4c:	0759      	lsls	r1, r3, #29
 8001b4e:	08e2      	lsrs	r2, r4, #3
 8001b50:	430a      	orrs	r2, r1
 8001b52:	08db      	lsrs	r3, r3, #3
 8001b54:	490f      	ldr	r1, [pc, #60]	; (8001b94 <__aeabi_dsub+0x334>)
 8001b56:	458c      	cmp	ip, r1
 8001b58:	d040      	beq.n	8001bdc <__aeabi_dsub+0x37c>
 8001b5a:	4661      	mov	r1, ip
 8001b5c:	031b      	lsls	r3, r3, #12
 8001b5e:	0549      	lsls	r1, r1, #21
 8001b60:	0b1b      	lsrs	r3, r3, #12
 8001b62:	0d49      	lsrs	r1, r1, #21
 8001b64:	e720      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001b66:	4301      	orrs	r1, r0
 8001b68:	000c      	movs	r4, r1
 8001b6a:	1e61      	subs	r1, r4, #1
 8001b6c:	418c      	sbcs	r4, r1
 8001b6e:	444c      	add	r4, r9
 8001b70:	454c      	cmp	r4, r9
 8001b72:	4192      	sbcs	r2, r2
 8001b74:	4252      	negs	r2, r2
 8001b76:	4690      	mov	r8, r2
 8001b78:	4498      	add	r8, r3
 8001b7a:	4643      	mov	r3, r8
 8001b7c:	021b      	lsls	r3, r3, #8
 8001b7e:	d5e0      	bpl.n	8001b42 <__aeabi_dsub+0x2e2>
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <__aeabi_dsub+0x334>)
 8001b82:	3601      	adds	r6, #1
 8001b84:	429e      	cmp	r6, r3
 8001b86:	d000      	beq.n	8001b8a <__aeabi_dsub+0x32a>
 8001b88:	e09f      	b.n	8001cca <__aeabi_dsub+0x46a>
 8001b8a:	0031      	movs	r1, r6
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	2200      	movs	r2, #0
 8001b90:	e70a      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	000007ff 	.word	0x000007ff
 8001b98:	ff7fffff 	.word	0xff7fffff
 8001b9c:	fffff801 	.word	0xfffff801
 8001ba0:	000007fe 	.word	0x000007fe
 8001ba4:	2a00      	cmp	r2, #0
 8001ba6:	d100      	bne.n	8001baa <__aeabi_dsub+0x34a>
 8001ba8:	e160      	b.n	8001e6c <__aeabi_dsub+0x60c>
 8001baa:	000a      	movs	r2, r1
 8001bac:	4302      	orrs	r2, r0
 8001bae:	d04d      	beq.n	8001c4c <__aeabi_dsub+0x3ec>
 8001bb0:	464a      	mov	r2, r9
 8001bb2:	075c      	lsls	r4, r3, #29
 8001bb4:	08d2      	lsrs	r2, r2, #3
 8001bb6:	4322      	orrs	r2, r4
 8001bb8:	2480      	movs	r4, #128	; 0x80
 8001bba:	08db      	lsrs	r3, r3, #3
 8001bbc:	0324      	lsls	r4, r4, #12
 8001bbe:	4223      	tst	r3, r4
 8001bc0:	d007      	beq.n	8001bd2 <__aeabi_dsub+0x372>
 8001bc2:	08ce      	lsrs	r6, r1, #3
 8001bc4:	4226      	tst	r6, r4
 8001bc6:	d104      	bne.n	8001bd2 <__aeabi_dsub+0x372>
 8001bc8:	465d      	mov	r5, fp
 8001bca:	0033      	movs	r3, r6
 8001bcc:	08c2      	lsrs	r2, r0, #3
 8001bce:	0749      	lsls	r1, r1, #29
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	0f51      	lsrs	r1, r2, #29
 8001bd4:	00d2      	lsls	r2, r2, #3
 8001bd6:	08d2      	lsrs	r2, r2, #3
 8001bd8:	0749      	lsls	r1, r1, #29
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	0011      	movs	r1, r2
 8001bde:	4319      	orrs	r1, r3
 8001be0:	d100      	bne.n	8001be4 <__aeabi_dsub+0x384>
 8001be2:	e1c8      	b.n	8001f76 <__aeabi_dsub+0x716>
 8001be4:	2180      	movs	r1, #128	; 0x80
 8001be6:	0309      	lsls	r1, r1, #12
 8001be8:	430b      	orrs	r3, r1
 8001bea:	031b      	lsls	r3, r3, #12
 8001bec:	49d5      	ldr	r1, [pc, #852]	; (8001f44 <__aeabi_dsub+0x6e4>)
 8001bee:	0b1b      	lsrs	r3, r3, #12
 8001bf0:	e6da      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001bf2:	49d5      	ldr	r1, [pc, #852]	; (8001f48 <__aeabi_dsub+0x6e8>)
 8001bf4:	1ab6      	subs	r6, r6, r2
 8001bf6:	400b      	ands	r3, r1
 8001bf8:	4698      	mov	r8, r3
 8001bfa:	e6b5      	b.n	8001968 <__aeabi_dsub+0x108>
 8001bfc:	0020      	movs	r0, r4
 8001bfe:	f000 fa4d 	bl	800209c <__clzsi2>
 8001c02:	0002      	movs	r2, r0
 8001c04:	3218      	adds	r2, #24
 8001c06:	2a1f      	cmp	r2, #31
 8001c08:	dc00      	bgt.n	8001c0c <__aeabi_dsub+0x3ac>
 8001c0a:	e68f      	b.n	800192c <__aeabi_dsub+0xcc>
 8001c0c:	0023      	movs	r3, r4
 8001c0e:	3808      	subs	r0, #8
 8001c10:	4083      	lsls	r3, r0
 8001c12:	2400      	movs	r4, #0
 8001c14:	e692      	b.n	800193c <__aeabi_dsub+0xdc>
 8001c16:	4308      	orrs	r0, r1
 8001c18:	0002      	movs	r2, r0
 8001c1a:	1e50      	subs	r0, r2, #1
 8001c1c:	4182      	sbcs	r2, r0
 8001c1e:	e66d      	b.n	80018fc <__aeabi_dsub+0x9c>
 8001c20:	4cca      	ldr	r4, [pc, #808]	; (8001f4c <__aeabi_dsub+0x6ec>)
 8001c22:	1c72      	adds	r2, r6, #1
 8001c24:	4222      	tst	r2, r4
 8001c26:	d000      	beq.n	8001c2a <__aeabi_dsub+0x3ca>
 8001c28:	e0ad      	b.n	8001d86 <__aeabi_dsub+0x526>
 8001c2a:	464a      	mov	r2, r9
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	2e00      	cmp	r6, #0
 8001c30:	d1b8      	bne.n	8001ba4 <__aeabi_dsub+0x344>
 8001c32:	2a00      	cmp	r2, #0
 8001c34:	d100      	bne.n	8001c38 <__aeabi_dsub+0x3d8>
 8001c36:	e158      	b.n	8001eea <__aeabi_dsub+0x68a>
 8001c38:	000a      	movs	r2, r1
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	d000      	beq.n	8001c40 <__aeabi_dsub+0x3e0>
 8001c3e:	e159      	b.n	8001ef4 <__aeabi_dsub+0x694>
 8001c40:	464a      	mov	r2, r9
 8001c42:	0759      	lsls	r1, r3, #29
 8001c44:	08d2      	lsrs	r2, r2, #3
 8001c46:	430a      	orrs	r2, r1
 8001c48:	08db      	lsrs	r3, r3, #3
 8001c4a:	e786      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001c4c:	464a      	mov	r2, r9
 8001c4e:	0759      	lsls	r1, r3, #29
 8001c50:	08d2      	lsrs	r2, r2, #3
 8001c52:	430a      	orrs	r2, r1
 8001c54:	08db      	lsrs	r3, r3, #3
 8001c56:	e7c1      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001c58:	4dba      	ldr	r5, [pc, #744]	; (8001f44 <__aeabi_dsub+0x6e4>)
 8001c5a:	42aa      	cmp	r2, r5
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0x400>
 8001c5e:	e11e      	b.n	8001e9e <__aeabi_dsub+0x63e>
 8001c60:	2580      	movs	r5, #128	; 0x80
 8001c62:	042d      	lsls	r5, r5, #16
 8001c64:	432b      	orrs	r3, r5
 8001c66:	4664      	mov	r4, ip
 8001c68:	2c38      	cmp	r4, #56	; 0x38
 8001c6a:	dc5d      	bgt.n	8001d28 <__aeabi_dsub+0x4c8>
 8001c6c:	2c1f      	cmp	r4, #31
 8001c6e:	dd00      	ble.n	8001c72 <__aeabi_dsub+0x412>
 8001c70:	e0d0      	b.n	8001e14 <__aeabi_dsub+0x5b4>
 8001c72:	2520      	movs	r5, #32
 8001c74:	4667      	mov	r7, ip
 8001c76:	1b2d      	subs	r5, r5, r4
 8001c78:	464e      	mov	r6, r9
 8001c7a:	001c      	movs	r4, r3
 8001c7c:	40fe      	lsrs	r6, r7
 8001c7e:	40ac      	lsls	r4, r5
 8001c80:	4334      	orrs	r4, r6
 8001c82:	464e      	mov	r6, r9
 8001c84:	40ae      	lsls	r6, r5
 8001c86:	0035      	movs	r5, r6
 8001c88:	40fb      	lsrs	r3, r7
 8001c8a:	1e6e      	subs	r6, r5, #1
 8001c8c:	41b5      	sbcs	r5, r6
 8001c8e:	1ac9      	subs	r1, r1, r3
 8001c90:	432c      	orrs	r4, r5
 8001c92:	e04e      	b.n	8001d32 <__aeabi_dsub+0x4d2>
 8001c94:	464a      	mov	r2, r9
 8001c96:	1a14      	subs	r4, r2, r0
 8001c98:	45a1      	cmp	r9, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	4252      	negs	r2, r2
 8001c9e:	4690      	mov	r8, r2
 8001ca0:	1a5f      	subs	r7, r3, r1
 8001ca2:	003a      	movs	r2, r7
 8001ca4:	4647      	mov	r7, r8
 8001ca6:	1bd2      	subs	r2, r2, r7
 8001ca8:	4690      	mov	r8, r2
 8001caa:	0212      	lsls	r2, r2, #8
 8001cac:	d500      	bpl.n	8001cb0 <__aeabi_dsub+0x450>
 8001cae:	e08b      	b.n	8001dc8 <__aeabi_dsub+0x568>
 8001cb0:	4642      	mov	r2, r8
 8001cb2:	4322      	orrs	r2, r4
 8001cb4:	d000      	beq.n	8001cb8 <__aeabi_dsub+0x458>
 8001cb6:	e630      	b.n	800191a <__aeabi_dsub+0xba>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	2500      	movs	r5, #0
 8001cbc:	e74d      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001cbe:	464a      	mov	r2, r9
 8001cc0:	0759      	lsls	r1, r3, #29
 8001cc2:	08d2      	lsrs	r2, r2, #3
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	08db      	lsrs	r3, r3, #3
 8001cc8:	e744      	b.n	8001b54 <__aeabi_dsub+0x2f4>
 8001cca:	4642      	mov	r2, r8
 8001ccc:	4b9e      	ldr	r3, [pc, #632]	; (8001f48 <__aeabi_dsub+0x6e8>)
 8001cce:	0861      	lsrs	r1, r4, #1
 8001cd0:	401a      	ands	r2, r3
 8001cd2:	0013      	movs	r3, r2
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	4014      	ands	r4, r2
 8001cd8:	430c      	orrs	r4, r1
 8001cda:	07da      	lsls	r2, r3, #31
 8001cdc:	085b      	lsrs	r3, r3, #1
 8001cde:	4698      	mov	r8, r3
 8001ce0:	4314      	orrs	r4, r2
 8001ce2:	e641      	b.n	8001968 <__aeabi_dsub+0x108>
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	3e1f      	subs	r6, #31
 8001ce8:	40f2      	lsrs	r2, r6
 8001cea:	0016      	movs	r6, r2
 8001cec:	2920      	cmp	r1, #32
 8001cee:	d003      	beq.n	8001cf8 <__aeabi_dsub+0x498>
 8001cf0:	2240      	movs	r2, #64	; 0x40
 8001cf2:	1a51      	subs	r1, r2, r1
 8001cf4:	408b      	lsls	r3, r1
 8001cf6:	431c      	orrs	r4, r3
 8001cf8:	1e62      	subs	r2, r4, #1
 8001cfa:	4194      	sbcs	r4, r2
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	4334      	orrs	r4, r6
 8001d00:	4698      	mov	r8, r3
 8001d02:	2600      	movs	r6, #0
 8001d04:	e71d      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001d06:	000c      	movs	r4, r1
 8001d08:	3a20      	subs	r2, #32
 8001d0a:	40d4      	lsrs	r4, r2
 8001d0c:	0022      	movs	r2, r4
 8001d0e:	4664      	mov	r4, ip
 8001d10:	2c20      	cmp	r4, #32
 8001d12:	d004      	beq.n	8001d1e <__aeabi_dsub+0x4be>
 8001d14:	2740      	movs	r7, #64	; 0x40
 8001d16:	1b3f      	subs	r7, r7, r4
 8001d18:	40b9      	lsls	r1, r7
 8001d1a:	4308      	orrs	r0, r1
 8001d1c:	4680      	mov	r8, r0
 8001d1e:	4644      	mov	r4, r8
 8001d20:	1e61      	subs	r1, r4, #1
 8001d22:	418c      	sbcs	r4, r1
 8001d24:	4322      	orrs	r2, r4
 8001d26:	e5e9      	b.n	80018fc <__aeabi_dsub+0x9c>
 8001d28:	464c      	mov	r4, r9
 8001d2a:	4323      	orrs	r3, r4
 8001d2c:	001c      	movs	r4, r3
 8001d2e:	1e63      	subs	r3, r4, #1
 8001d30:	419c      	sbcs	r4, r3
 8001d32:	1b04      	subs	r4, r0, r4
 8001d34:	42a0      	cmp	r0, r4
 8001d36:	419b      	sbcs	r3, r3
 8001d38:	425b      	negs	r3, r3
 8001d3a:	1acb      	subs	r3, r1, r3
 8001d3c:	4698      	mov	r8, r3
 8001d3e:	465d      	mov	r5, fp
 8001d40:	0016      	movs	r6, r2
 8001d42:	e5e2      	b.n	800190a <__aeabi_dsub+0xaa>
 8001d44:	464e      	mov	r6, r9
 8001d46:	431e      	orrs	r6, r3
 8001d48:	d100      	bne.n	8001d4c <__aeabi_dsub+0x4ec>
 8001d4a:	e0ae      	b.n	8001eaa <__aeabi_dsub+0x64a>
 8001d4c:	1e66      	subs	r6, r4, #1
 8001d4e:	2c01      	cmp	r4, #1
 8001d50:	d100      	bne.n	8001d54 <__aeabi_dsub+0x4f4>
 8001d52:	e0fd      	b.n	8001f50 <__aeabi_dsub+0x6f0>
 8001d54:	4f7b      	ldr	r7, [pc, #492]	; (8001f44 <__aeabi_dsub+0x6e4>)
 8001d56:	42bc      	cmp	r4, r7
 8001d58:	d100      	bne.n	8001d5c <__aeabi_dsub+0x4fc>
 8001d5a:	e107      	b.n	8001f6c <__aeabi_dsub+0x70c>
 8001d5c:	46b4      	mov	ip, r6
 8001d5e:	e69b      	b.n	8001a98 <__aeabi_dsub+0x238>
 8001d60:	4664      	mov	r4, ip
 8001d62:	2220      	movs	r2, #32
 8001d64:	1b12      	subs	r2, r2, r4
 8001d66:	000c      	movs	r4, r1
 8001d68:	4094      	lsls	r4, r2
 8001d6a:	0007      	movs	r7, r0
 8001d6c:	4090      	lsls	r0, r2
 8001d6e:	46a0      	mov	r8, r4
 8001d70:	4664      	mov	r4, ip
 8001d72:	1e42      	subs	r2, r0, #1
 8001d74:	4190      	sbcs	r0, r2
 8001d76:	4662      	mov	r2, ip
 8001d78:	40e7      	lsrs	r7, r4
 8001d7a:	4644      	mov	r4, r8
 8001d7c:	40d1      	lsrs	r1, r2
 8001d7e:	433c      	orrs	r4, r7
 8001d80:	4304      	orrs	r4, r0
 8001d82:	185b      	adds	r3, r3, r1
 8001d84:	e6f3      	b.n	8001b6e <__aeabi_dsub+0x30e>
 8001d86:	4c6f      	ldr	r4, [pc, #444]	; (8001f44 <__aeabi_dsub+0x6e4>)
 8001d88:	42a2      	cmp	r2, r4
 8001d8a:	d100      	bne.n	8001d8e <__aeabi_dsub+0x52e>
 8001d8c:	e0d5      	b.n	8001f3a <__aeabi_dsub+0x6da>
 8001d8e:	4448      	add	r0, r9
 8001d90:	185b      	adds	r3, r3, r1
 8001d92:	4548      	cmp	r0, r9
 8001d94:	4189      	sbcs	r1, r1
 8001d96:	4249      	negs	r1, r1
 8001d98:	185b      	adds	r3, r3, r1
 8001d9a:	07dc      	lsls	r4, r3, #31
 8001d9c:	0840      	lsrs	r0, r0, #1
 8001d9e:	085b      	lsrs	r3, r3, #1
 8001da0:	4698      	mov	r8, r3
 8001da2:	0016      	movs	r6, r2
 8001da4:	4304      	orrs	r4, r0
 8001da6:	e6cc      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001da8:	2a00      	cmp	r2, #0
 8001daa:	d000      	beq.n	8001dae <__aeabi_dsub+0x54e>
 8001dac:	e082      	b.n	8001eb4 <__aeabi_dsub+0x654>
 8001dae:	000a      	movs	r2, r1
 8001db0:	4302      	orrs	r2, r0
 8001db2:	d140      	bne.n	8001e36 <__aeabi_dsub+0x5d6>
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	2500      	movs	r5, #0
 8001db8:	031b      	lsls	r3, r3, #12
 8001dba:	e713      	b.n	8001be4 <__aeabi_dsub+0x384>
 8001dbc:	074b      	lsls	r3, r1, #29
 8001dbe:	08c2      	lsrs	r2, r0, #3
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	465d      	mov	r5, fp
 8001dc4:	08cb      	lsrs	r3, r1, #3
 8001dc6:	e6c5      	b.n	8001b54 <__aeabi_dsub+0x2f4>
 8001dc8:	464a      	mov	r2, r9
 8001dca:	1a84      	subs	r4, r0, r2
 8001dcc:	42a0      	cmp	r0, r4
 8001dce:	4192      	sbcs	r2, r2
 8001dd0:	1acb      	subs	r3, r1, r3
 8001dd2:	4252      	negs	r2, r2
 8001dd4:	1a9b      	subs	r3, r3, r2
 8001dd6:	4698      	mov	r8, r3
 8001dd8:	465d      	mov	r5, fp
 8001dda:	e59e      	b.n	800191a <__aeabi_dsub+0xba>
 8001ddc:	464a      	mov	r2, r9
 8001dde:	0759      	lsls	r1, r3, #29
 8001de0:	08d2      	lsrs	r2, r2, #3
 8001de2:	430a      	orrs	r2, r1
 8001de4:	08db      	lsrs	r3, r3, #3
 8001de6:	e6f9      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001de8:	464a      	mov	r2, r9
 8001dea:	1a14      	subs	r4, r2, r0
 8001dec:	45a1      	cmp	r9, r4
 8001dee:	4192      	sbcs	r2, r2
 8001df0:	1a5b      	subs	r3, r3, r1
 8001df2:	4252      	negs	r2, r2
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	4698      	mov	r8, r3
 8001df8:	2601      	movs	r6, #1
 8001dfa:	e586      	b.n	800190a <__aeabi_dsub+0xaa>
 8001dfc:	464a      	mov	r2, r9
 8001dfe:	0759      	lsls	r1, r3, #29
 8001e00:	08d2      	lsrs	r2, r2, #3
 8001e02:	430a      	orrs	r2, r1
 8001e04:	08db      	lsrs	r3, r3, #3
 8001e06:	e6a5      	b.n	8001b54 <__aeabi_dsub+0x2f4>
 8001e08:	464c      	mov	r4, r9
 8001e0a:	4323      	orrs	r3, r4
 8001e0c:	001c      	movs	r4, r3
 8001e0e:	1e63      	subs	r3, r4, #1
 8001e10:	419c      	sbcs	r4, r3
 8001e12:	e65b      	b.n	8001acc <__aeabi_dsub+0x26c>
 8001e14:	4665      	mov	r5, ip
 8001e16:	001e      	movs	r6, r3
 8001e18:	3d20      	subs	r5, #32
 8001e1a:	40ee      	lsrs	r6, r5
 8001e1c:	2c20      	cmp	r4, #32
 8001e1e:	d005      	beq.n	8001e2c <__aeabi_dsub+0x5cc>
 8001e20:	2540      	movs	r5, #64	; 0x40
 8001e22:	1b2d      	subs	r5, r5, r4
 8001e24:	40ab      	lsls	r3, r5
 8001e26:	464c      	mov	r4, r9
 8001e28:	431c      	orrs	r4, r3
 8001e2a:	46a2      	mov	sl, r4
 8001e2c:	4654      	mov	r4, sl
 8001e2e:	1e63      	subs	r3, r4, #1
 8001e30:	419c      	sbcs	r4, r3
 8001e32:	4334      	orrs	r4, r6
 8001e34:	e77d      	b.n	8001d32 <__aeabi_dsub+0x4d2>
 8001e36:	074b      	lsls	r3, r1, #29
 8001e38:	08c2      	lsrs	r2, r0, #3
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	465d      	mov	r5, fp
 8001e3e:	08cb      	lsrs	r3, r1, #3
 8001e40:	e6cc      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001e42:	000a      	movs	r2, r1
 8001e44:	4302      	orrs	r2, r0
 8001e46:	d100      	bne.n	8001e4a <__aeabi_dsub+0x5ea>
 8001e48:	e736      	b.n	8001cb8 <__aeabi_dsub+0x458>
 8001e4a:	074b      	lsls	r3, r1, #29
 8001e4c:	08c2      	lsrs	r2, r0, #3
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	465d      	mov	r5, fp
 8001e52:	08cb      	lsrs	r3, r1, #3
 8001e54:	e681      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001e56:	464a      	mov	r2, r9
 8001e58:	1a84      	subs	r4, r0, r2
 8001e5a:	42a0      	cmp	r0, r4
 8001e5c:	4192      	sbcs	r2, r2
 8001e5e:	1acb      	subs	r3, r1, r3
 8001e60:	4252      	negs	r2, r2
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	4698      	mov	r8, r3
 8001e66:	465d      	mov	r5, fp
 8001e68:	2601      	movs	r6, #1
 8001e6a:	e54e      	b.n	800190a <__aeabi_dsub+0xaa>
 8001e6c:	074b      	lsls	r3, r1, #29
 8001e6e:	08c2      	lsrs	r2, r0, #3
 8001e70:	431a      	orrs	r2, r3
 8001e72:	08cb      	lsrs	r3, r1, #3
 8001e74:	e6b2      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001e76:	464a      	mov	r2, r9
 8001e78:	1a14      	subs	r4, r2, r0
 8001e7a:	45a1      	cmp	r9, r4
 8001e7c:	4192      	sbcs	r2, r2
 8001e7e:	1a5f      	subs	r7, r3, r1
 8001e80:	4252      	negs	r2, r2
 8001e82:	1aba      	subs	r2, r7, r2
 8001e84:	4690      	mov	r8, r2
 8001e86:	0212      	lsls	r2, r2, #8
 8001e88:	d56b      	bpl.n	8001f62 <__aeabi_dsub+0x702>
 8001e8a:	464a      	mov	r2, r9
 8001e8c:	1a84      	subs	r4, r0, r2
 8001e8e:	42a0      	cmp	r0, r4
 8001e90:	4192      	sbcs	r2, r2
 8001e92:	1acb      	subs	r3, r1, r3
 8001e94:	4252      	negs	r2, r2
 8001e96:	1a9b      	subs	r3, r3, r2
 8001e98:	4698      	mov	r8, r3
 8001e9a:	465d      	mov	r5, fp
 8001e9c:	e564      	b.n	8001968 <__aeabi_dsub+0x108>
 8001e9e:	074b      	lsls	r3, r1, #29
 8001ea0:	08c2      	lsrs	r2, r0, #3
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	465d      	mov	r5, fp
 8001ea6:	08cb      	lsrs	r3, r1, #3
 8001ea8:	e698      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001eaa:	074b      	lsls	r3, r1, #29
 8001eac:	08c2      	lsrs	r2, r0, #3
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	08cb      	lsrs	r3, r1, #3
 8001eb2:	e64f      	b.n	8001b54 <__aeabi_dsub+0x2f4>
 8001eb4:	000a      	movs	r2, r1
 8001eb6:	4302      	orrs	r2, r0
 8001eb8:	d090      	beq.n	8001ddc <__aeabi_dsub+0x57c>
 8001eba:	464a      	mov	r2, r9
 8001ebc:	075c      	lsls	r4, r3, #29
 8001ebe:	08d2      	lsrs	r2, r2, #3
 8001ec0:	4314      	orrs	r4, r2
 8001ec2:	2280      	movs	r2, #128	; 0x80
 8001ec4:	08db      	lsrs	r3, r3, #3
 8001ec6:	0312      	lsls	r2, r2, #12
 8001ec8:	4213      	tst	r3, r2
 8001eca:	d008      	beq.n	8001ede <__aeabi_dsub+0x67e>
 8001ecc:	08ce      	lsrs	r6, r1, #3
 8001ece:	4216      	tst	r6, r2
 8001ed0:	d105      	bne.n	8001ede <__aeabi_dsub+0x67e>
 8001ed2:	08c0      	lsrs	r0, r0, #3
 8001ed4:	0749      	lsls	r1, r1, #29
 8001ed6:	4308      	orrs	r0, r1
 8001ed8:	0004      	movs	r4, r0
 8001eda:	465d      	mov	r5, fp
 8001edc:	0033      	movs	r3, r6
 8001ede:	0f61      	lsrs	r1, r4, #29
 8001ee0:	00e2      	lsls	r2, r4, #3
 8001ee2:	0749      	lsls	r1, r1, #29
 8001ee4:	08d2      	lsrs	r2, r2, #3
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	e678      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001eea:	074b      	lsls	r3, r1, #29
 8001eec:	08c2      	lsrs	r2, r0, #3
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	08cb      	lsrs	r3, r1, #3
 8001ef2:	e632      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001ef4:	4448      	add	r0, r9
 8001ef6:	185b      	adds	r3, r3, r1
 8001ef8:	4548      	cmp	r0, r9
 8001efa:	4192      	sbcs	r2, r2
 8001efc:	4698      	mov	r8, r3
 8001efe:	4252      	negs	r2, r2
 8001f00:	4490      	add	r8, r2
 8001f02:	4643      	mov	r3, r8
 8001f04:	0004      	movs	r4, r0
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	d400      	bmi.n	8001f0c <__aeabi_dsub+0x6ac>
 8001f0a:	e61a      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001f0c:	4642      	mov	r2, r8
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <__aeabi_dsub+0x6e8>)
 8001f10:	2601      	movs	r6, #1
 8001f12:	401a      	ands	r2, r3
 8001f14:	4690      	mov	r8, r2
 8001f16:	e614      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001f18:	4666      	mov	r6, ip
 8001f1a:	001f      	movs	r7, r3
 8001f1c:	3e20      	subs	r6, #32
 8001f1e:	40f7      	lsrs	r7, r6
 8001f20:	2c20      	cmp	r4, #32
 8001f22:	d005      	beq.n	8001f30 <__aeabi_dsub+0x6d0>
 8001f24:	2640      	movs	r6, #64	; 0x40
 8001f26:	1b36      	subs	r6, r6, r4
 8001f28:	40b3      	lsls	r3, r6
 8001f2a:	464c      	mov	r4, r9
 8001f2c:	431c      	orrs	r4, r3
 8001f2e:	46a2      	mov	sl, r4
 8001f30:	4654      	mov	r4, sl
 8001f32:	1e63      	subs	r3, r4, #1
 8001f34:	419c      	sbcs	r4, r3
 8001f36:	433c      	orrs	r4, r7
 8001f38:	e5c8      	b.n	8001acc <__aeabi_dsub+0x26c>
 8001f3a:	0011      	movs	r1, r2
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	2200      	movs	r2, #0
 8001f40:	e532      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	000007ff 	.word	0x000007ff
 8001f48:	ff7fffff 	.word	0xff7fffff
 8001f4c:	000007fe 	.word	0x000007fe
 8001f50:	464a      	mov	r2, r9
 8001f52:	1814      	adds	r4, r2, r0
 8001f54:	4284      	cmp	r4, r0
 8001f56:	4192      	sbcs	r2, r2
 8001f58:	185b      	adds	r3, r3, r1
 8001f5a:	4698      	mov	r8, r3
 8001f5c:	4252      	negs	r2, r2
 8001f5e:	4490      	add	r8, r2
 8001f60:	e5e9      	b.n	8001b36 <__aeabi_dsub+0x2d6>
 8001f62:	4642      	mov	r2, r8
 8001f64:	4322      	orrs	r2, r4
 8001f66:	d100      	bne.n	8001f6a <__aeabi_dsub+0x70a>
 8001f68:	e6a6      	b.n	8001cb8 <__aeabi_dsub+0x458>
 8001f6a:	e5ea      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001f6c:	074b      	lsls	r3, r1, #29
 8001f6e:	08c2      	lsrs	r2, r0, #3
 8001f70:	431a      	orrs	r2, r3
 8001f72:	08cb      	lsrs	r3, r1, #3
 8001f74:	e632      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001f76:	2200      	movs	r2, #0
 8001f78:	4901      	ldr	r1, [pc, #4]	; (8001f80 <__aeabi_dsub+0x720>)
 8001f7a:	0013      	movs	r3, r2
 8001f7c:	e514      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	000007ff 	.word	0x000007ff

08001f84 <__aeabi_d2iz>:
 8001f84:	000a      	movs	r2, r1
 8001f86:	b530      	push	{r4, r5, lr}
 8001f88:	4c13      	ldr	r4, [pc, #76]	; (8001fd8 <__aeabi_d2iz+0x54>)
 8001f8a:	0053      	lsls	r3, r2, #1
 8001f8c:	0309      	lsls	r1, r1, #12
 8001f8e:	0005      	movs	r5, r0
 8001f90:	0b09      	lsrs	r1, r1, #12
 8001f92:	2000      	movs	r0, #0
 8001f94:	0d5b      	lsrs	r3, r3, #21
 8001f96:	0fd2      	lsrs	r2, r2, #31
 8001f98:	42a3      	cmp	r3, r4
 8001f9a:	dd04      	ble.n	8001fa6 <__aeabi_d2iz+0x22>
 8001f9c:	480f      	ldr	r0, [pc, #60]	; (8001fdc <__aeabi_d2iz+0x58>)
 8001f9e:	4283      	cmp	r3, r0
 8001fa0:	dd02      	ble.n	8001fa8 <__aeabi_d2iz+0x24>
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <__aeabi_d2iz+0x5c>)
 8001fa4:	18d0      	adds	r0, r2, r3
 8001fa6:	bd30      	pop	{r4, r5, pc}
 8001fa8:	2080      	movs	r0, #128	; 0x80
 8001faa:	0340      	lsls	r0, r0, #13
 8001fac:	4301      	orrs	r1, r0
 8001fae:	480d      	ldr	r0, [pc, #52]	; (8001fe4 <__aeabi_d2iz+0x60>)
 8001fb0:	1ac0      	subs	r0, r0, r3
 8001fb2:	281f      	cmp	r0, #31
 8001fb4:	dd08      	ble.n	8001fc8 <__aeabi_d2iz+0x44>
 8001fb6:	480c      	ldr	r0, [pc, #48]	; (8001fe8 <__aeabi_d2iz+0x64>)
 8001fb8:	1ac3      	subs	r3, r0, r3
 8001fba:	40d9      	lsrs	r1, r3
 8001fbc:	000b      	movs	r3, r1
 8001fbe:	4258      	negs	r0, r3
 8001fc0:	2a00      	cmp	r2, #0
 8001fc2:	d1f0      	bne.n	8001fa6 <__aeabi_d2iz+0x22>
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	e7ee      	b.n	8001fa6 <__aeabi_d2iz+0x22>
 8001fc8:	4c08      	ldr	r4, [pc, #32]	; (8001fec <__aeabi_d2iz+0x68>)
 8001fca:	40c5      	lsrs	r5, r0
 8001fcc:	46a4      	mov	ip, r4
 8001fce:	4463      	add	r3, ip
 8001fd0:	4099      	lsls	r1, r3
 8001fd2:	000b      	movs	r3, r1
 8001fd4:	432b      	orrs	r3, r5
 8001fd6:	e7f2      	b.n	8001fbe <__aeabi_d2iz+0x3a>
 8001fd8:	000003fe 	.word	0x000003fe
 8001fdc:	0000041d 	.word	0x0000041d
 8001fe0:	7fffffff 	.word	0x7fffffff
 8001fe4:	00000433 	.word	0x00000433
 8001fe8:	00000413 	.word	0x00000413
 8001fec:	fffffbed 	.word	0xfffffbed

08001ff0 <__aeabi_i2d>:
 8001ff0:	b570      	push	{r4, r5, r6, lr}
 8001ff2:	2800      	cmp	r0, #0
 8001ff4:	d016      	beq.n	8002024 <__aeabi_i2d+0x34>
 8001ff6:	17c3      	asrs	r3, r0, #31
 8001ff8:	18c5      	adds	r5, r0, r3
 8001ffa:	405d      	eors	r5, r3
 8001ffc:	0fc4      	lsrs	r4, r0, #31
 8001ffe:	0028      	movs	r0, r5
 8002000:	f000 f84c 	bl	800209c <__clzsi2>
 8002004:	4a11      	ldr	r2, [pc, #68]	; (800204c <__aeabi_i2d+0x5c>)
 8002006:	1a12      	subs	r2, r2, r0
 8002008:	280a      	cmp	r0, #10
 800200a:	dc16      	bgt.n	800203a <__aeabi_i2d+0x4a>
 800200c:	0003      	movs	r3, r0
 800200e:	002e      	movs	r6, r5
 8002010:	3315      	adds	r3, #21
 8002012:	409e      	lsls	r6, r3
 8002014:	230b      	movs	r3, #11
 8002016:	1a18      	subs	r0, r3, r0
 8002018:	40c5      	lsrs	r5, r0
 800201a:	0553      	lsls	r3, r2, #21
 800201c:	032d      	lsls	r5, r5, #12
 800201e:	0b2d      	lsrs	r5, r5, #12
 8002020:	0d5b      	lsrs	r3, r3, #21
 8002022:	e003      	b.n	800202c <__aeabi_i2d+0x3c>
 8002024:	2400      	movs	r4, #0
 8002026:	2300      	movs	r3, #0
 8002028:	2500      	movs	r5, #0
 800202a:	2600      	movs	r6, #0
 800202c:	051b      	lsls	r3, r3, #20
 800202e:	432b      	orrs	r3, r5
 8002030:	07e4      	lsls	r4, r4, #31
 8002032:	4323      	orrs	r3, r4
 8002034:	0030      	movs	r0, r6
 8002036:	0019      	movs	r1, r3
 8002038:	bd70      	pop	{r4, r5, r6, pc}
 800203a:	380b      	subs	r0, #11
 800203c:	4085      	lsls	r5, r0
 800203e:	0553      	lsls	r3, r2, #21
 8002040:	032d      	lsls	r5, r5, #12
 8002042:	2600      	movs	r6, #0
 8002044:	0b2d      	lsrs	r5, r5, #12
 8002046:	0d5b      	lsrs	r3, r3, #21
 8002048:	e7f0      	b.n	800202c <__aeabi_i2d+0x3c>
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	0000041e 	.word	0x0000041e

08002050 <__aeabi_ui2d>:
 8002050:	b510      	push	{r4, lr}
 8002052:	1e04      	subs	r4, r0, #0
 8002054:	d010      	beq.n	8002078 <__aeabi_ui2d+0x28>
 8002056:	f000 f821 	bl	800209c <__clzsi2>
 800205a:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <__aeabi_ui2d+0x48>)
 800205c:	1a1b      	subs	r3, r3, r0
 800205e:	280a      	cmp	r0, #10
 8002060:	dc11      	bgt.n	8002086 <__aeabi_ui2d+0x36>
 8002062:	220b      	movs	r2, #11
 8002064:	0021      	movs	r1, r4
 8002066:	1a12      	subs	r2, r2, r0
 8002068:	40d1      	lsrs	r1, r2
 800206a:	3015      	adds	r0, #21
 800206c:	030a      	lsls	r2, r1, #12
 800206e:	055b      	lsls	r3, r3, #21
 8002070:	4084      	lsls	r4, r0
 8002072:	0b12      	lsrs	r2, r2, #12
 8002074:	0d5b      	lsrs	r3, r3, #21
 8002076:	e001      	b.n	800207c <__aeabi_ui2d+0x2c>
 8002078:	2300      	movs	r3, #0
 800207a:	2200      	movs	r2, #0
 800207c:	051b      	lsls	r3, r3, #20
 800207e:	4313      	orrs	r3, r2
 8002080:	0020      	movs	r0, r4
 8002082:	0019      	movs	r1, r3
 8002084:	bd10      	pop	{r4, pc}
 8002086:	0022      	movs	r2, r4
 8002088:	380b      	subs	r0, #11
 800208a:	4082      	lsls	r2, r0
 800208c:	055b      	lsls	r3, r3, #21
 800208e:	0312      	lsls	r2, r2, #12
 8002090:	2400      	movs	r4, #0
 8002092:	0b12      	lsrs	r2, r2, #12
 8002094:	0d5b      	lsrs	r3, r3, #21
 8002096:	e7f1      	b.n	800207c <__aeabi_ui2d+0x2c>
 8002098:	0000041e 	.word	0x0000041e

0800209c <__clzsi2>:
 800209c:	211c      	movs	r1, #28
 800209e:	2301      	movs	r3, #1
 80020a0:	041b      	lsls	r3, r3, #16
 80020a2:	4298      	cmp	r0, r3
 80020a4:	d301      	bcc.n	80020aa <__clzsi2+0xe>
 80020a6:	0c00      	lsrs	r0, r0, #16
 80020a8:	3910      	subs	r1, #16
 80020aa:	0a1b      	lsrs	r3, r3, #8
 80020ac:	4298      	cmp	r0, r3
 80020ae:	d301      	bcc.n	80020b4 <__clzsi2+0x18>
 80020b0:	0a00      	lsrs	r0, r0, #8
 80020b2:	3908      	subs	r1, #8
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	4298      	cmp	r0, r3
 80020b8:	d301      	bcc.n	80020be <__clzsi2+0x22>
 80020ba:	0900      	lsrs	r0, r0, #4
 80020bc:	3904      	subs	r1, #4
 80020be:	a202      	add	r2, pc, #8	; (adr r2, 80020c8 <__clzsi2+0x2c>)
 80020c0:	5c10      	ldrb	r0, [r2, r0]
 80020c2:	1840      	adds	r0, r0, r1
 80020c4:	4770      	bx	lr
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	02020304 	.word	0x02020304
 80020cc:	01010101 	.word	0x01010101
	...

080020d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	0002      	movs	r2, r0
 80020e0:	1dfb      	adds	r3, r7, #7
 80020e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020e4:	1dfb      	adds	r3, r7, #7
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b7f      	cmp	r3, #127	; 0x7f
 80020ea:	d809      	bhi.n	8002100 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ec:	1dfb      	adds	r3, r7, #7
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	001a      	movs	r2, r3
 80020f2:	231f      	movs	r3, #31
 80020f4:	401a      	ands	r2, r3
 80020f6:	4b04      	ldr	r3, [pc, #16]	; (8002108 <__NVIC_EnableIRQ+0x30>)
 80020f8:	2101      	movs	r1, #1
 80020fa:	4091      	lsls	r1, r2
 80020fc:	000a      	movs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002100:	46c0      	nop			; (mov r8, r8)
 8002102:	46bd      	mov	sp, r7
 8002104:	b002      	add	sp, #8
 8002106:	bd80      	pop	{r7, pc}
 8002108:	e000e100 	.word	0xe000e100

0800210c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	0002      	movs	r2, r0
 8002114:	6039      	str	r1, [r7, #0]
 8002116:	1dfb      	adds	r3, r7, #7
 8002118:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800211a:	1dfb      	adds	r3, r7, #7
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b7f      	cmp	r3, #127	; 0x7f
 8002120:	d828      	bhi.n	8002174 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002122:	4a2f      	ldr	r2, [pc, #188]	; (80021e0 <__NVIC_SetPriority+0xd4>)
 8002124:	1dfb      	adds	r3, r7, #7
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	b25b      	sxtb	r3, r3
 800212a:	089b      	lsrs	r3, r3, #2
 800212c:	33c0      	adds	r3, #192	; 0xc0
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	589b      	ldr	r3, [r3, r2]
 8002132:	1dfa      	adds	r2, r7, #7
 8002134:	7812      	ldrb	r2, [r2, #0]
 8002136:	0011      	movs	r1, r2
 8002138:	2203      	movs	r2, #3
 800213a:	400a      	ands	r2, r1
 800213c:	00d2      	lsls	r2, r2, #3
 800213e:	21ff      	movs	r1, #255	; 0xff
 8002140:	4091      	lsls	r1, r2
 8002142:	000a      	movs	r2, r1
 8002144:	43d2      	mvns	r2, r2
 8002146:	401a      	ands	r2, r3
 8002148:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	019b      	lsls	r3, r3, #6
 800214e:	22ff      	movs	r2, #255	; 0xff
 8002150:	401a      	ands	r2, r3
 8002152:	1dfb      	adds	r3, r7, #7
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	0018      	movs	r0, r3
 8002158:	2303      	movs	r3, #3
 800215a:	4003      	ands	r3, r0
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002160:	481f      	ldr	r0, [pc, #124]	; (80021e0 <__NVIC_SetPriority+0xd4>)
 8002162:	1dfb      	adds	r3, r7, #7
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	b25b      	sxtb	r3, r3
 8002168:	089b      	lsrs	r3, r3, #2
 800216a:	430a      	orrs	r2, r1
 800216c:	33c0      	adds	r3, #192	; 0xc0
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002172:	e031      	b.n	80021d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002174:	4a1b      	ldr	r2, [pc, #108]	; (80021e4 <__NVIC_SetPriority+0xd8>)
 8002176:	1dfb      	adds	r3, r7, #7
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	0019      	movs	r1, r3
 800217c:	230f      	movs	r3, #15
 800217e:	400b      	ands	r3, r1
 8002180:	3b08      	subs	r3, #8
 8002182:	089b      	lsrs	r3, r3, #2
 8002184:	3306      	adds	r3, #6
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	18d3      	adds	r3, r2, r3
 800218a:	3304      	adds	r3, #4
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	1dfa      	adds	r2, r7, #7
 8002190:	7812      	ldrb	r2, [r2, #0]
 8002192:	0011      	movs	r1, r2
 8002194:	2203      	movs	r2, #3
 8002196:	400a      	ands	r2, r1
 8002198:	00d2      	lsls	r2, r2, #3
 800219a:	21ff      	movs	r1, #255	; 0xff
 800219c:	4091      	lsls	r1, r2
 800219e:	000a      	movs	r2, r1
 80021a0:	43d2      	mvns	r2, r2
 80021a2:	401a      	ands	r2, r3
 80021a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	019b      	lsls	r3, r3, #6
 80021aa:	22ff      	movs	r2, #255	; 0xff
 80021ac:	401a      	ands	r2, r3
 80021ae:	1dfb      	adds	r3, r7, #7
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	0018      	movs	r0, r3
 80021b4:	2303      	movs	r3, #3
 80021b6:	4003      	ands	r3, r0
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021bc:	4809      	ldr	r0, [pc, #36]	; (80021e4 <__NVIC_SetPriority+0xd8>)
 80021be:	1dfb      	adds	r3, r7, #7
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	001c      	movs	r4, r3
 80021c4:	230f      	movs	r3, #15
 80021c6:	4023      	ands	r3, r4
 80021c8:	3b08      	subs	r3, #8
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	430a      	orrs	r2, r1
 80021ce:	3306      	adds	r3, #6
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	18c3      	adds	r3, r0, r3
 80021d4:	3304      	adds	r3, #4
 80021d6:	601a      	str	r2, [r3, #0]
}
 80021d8:	46c0      	nop			; (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	b003      	add	sp, #12
 80021de:	bd90      	pop	{r4, r7, pc}
 80021e0:	e000e100 	.word	0xe000e100
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2201      	movs	r2, #1
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	601a      	str	r2, [r3, #0]
}
 80021fc:	46c0      	nop			; (mov r8, r8)
 80021fe:	46bd      	mov	sp, r7
 8002200:	b002      	add	sp, #8
 8002202:	bd80      	pop	{r7, pc}

08002204 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a03      	ldr	r2, [pc, #12]	; (8002220 <LL_USART_DisableFIFO+0x1c>)
 8002212:	401a      	ands	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	601a      	str	r2, [r3, #0]
}
 8002218:	46c0      	nop			; (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	b002      	add	sp, #8
 800221e:	bd80      	pop	{r7, pc}
 8002220:	dfffffff 	.word	0xdfffffff

08002224 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	08da      	lsrs	r2, r3, #3
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	075b      	lsls	r3, r3, #29
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	609a      	str	r2, [r3, #8]
}
 8002240:	46c0      	nop			; (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	b002      	add	sp, #8
 8002246:	bd80      	pop	{r7, pc}

08002248 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	4a05      	ldr	r2, [pc, #20]	; (800226c <LL_USART_SetRXFIFOThreshold+0x24>)
 8002258:	401a      	ands	r2, r3
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	065b      	lsls	r3, r3, #25
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	609a      	str	r2, [r3, #8]
}
 8002264:	46c0      	nop			; (mov r8, r8)
 8002266:	46bd      	mov	sp, r7
 8002268:	b002      	add	sp, #8
 800226a:	bd80      	pop	{r7, pc}
 800226c:	f1ffffff 	.word	0xf1ffffff

08002270 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4a07      	ldr	r2, [pc, #28]	; (800229c <LL_USART_ConfigAsyncMode+0x2c>)
 800227e:	401a      	ands	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	222a      	movs	r2, #42	; 0x2a
 800228a:	4393      	bics	r3, r2
 800228c:	001a      	movs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	609a      	str	r2, [r3, #8]
}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	46bd      	mov	sp, r7
 8002296:	b002      	add	sp, #8
 8002298:	bd80      	pop	{r7, pc}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	ffffb7ff 	.word	0xffffb7ff

080022a0 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69da      	ldr	r2, [r3, #28]
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	039b      	lsls	r3, r3, #14
 80022b0:	401a      	ands	r2, r3
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	039b      	lsls	r3, r3, #14
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d101      	bne.n	80022be <LL_USART_IsActiveFlag_TEACK+0x1e>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <LL_USART_IsActiveFlag_TEACK+0x20>
 80022be:	2300      	movs	r3, #0
}
 80022c0:	0018      	movs	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	b002      	add	sp, #8
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69da      	ldr	r2, [r3, #28]
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	03db      	lsls	r3, r3, #15
 80022d8:	401a      	ands	r2, r3
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	03db      	lsls	r3, r3, #15
 80022de:	429a      	cmp	r2, r3
 80022e0:	d101      	bne.n	80022e6 <LL_USART_IsActiveFlag_REACK+0x1e>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <LL_USART_IsActiveFlag_REACK+0x20>
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	0018      	movs	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b002      	add	sp, #8
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2220      	movs	r2, #32
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	601a      	str	r2, [r3, #0]
}
 8002304:	46c0      	nop			; (mov r8, r8)
 8002306:	46bd      	mov	sp, r7
 8002308:	b002      	add	sp, #8
 800230a:	bd80      	pop	{r7, pc}

0800230c <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	2201      	movs	r2, #1
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	609a      	str	r2, [r3, #8]
}
 8002320:	46c0      	nop			; (mov r8, r8)
 8002322:	46bd      	mov	sp, r7
 8002324:	b002      	add	sp, #8
 8002326:	bd80      	pop	{r7, pc}

08002328 <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	b29b      	uxth	r3, r3
 8002336:	05db      	lsls	r3, r3, #23
 8002338:	0ddb      	lsrs	r3, r3, #23
 800233a:	b29b      	uxth	r3, r3
}
 800233c:	0018      	movs	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	b002      	add	sp, #8
 8002342:	bd80      	pop	{r7, pc}

08002344 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 800234c:	4b04      	ldr	r3, [pc, #16]	; (8002360 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 800234e:	6819      	ldr	r1, [r3, #0]
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	430a      	orrs	r2, r1
 8002356:	601a      	str	r2, [r3, #0]
}
 8002358:	46c0      	nop			; (mov r8, r8)
 800235a:	46bd      	mov	sp, r7
 800235c:	b002      	add	sp, #8
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40010000 	.word	0x40010000

08002364 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	619a      	str	r2, [r3, #24]
}
 8002374:	46c0      	nop			; (mov r8, r8)
 8002376:	46bd      	mov	sp, r7
 8002378:	b002      	add	sp, #8
 800237a:	bd80      	pop	{r7, pc}

0800237c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800238c:	46c0      	nop			; (mov r8, r8)
 800238e:	46bd      	mov	sp, r7
 8002390:	b002      	add	sp, #8
 8002392:	bd80      	pop	{r7, pc}

08002394 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 800239c:	4b07      	ldr	r3, [pc, #28]	; (80023bc <LL_APB1_GRP1_EnableClock+0x28>)
 800239e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <LL_APB1_GRP1_EnableClock+0x28>)
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80023a8:	4b04      	ldr	r3, [pc, #16]	; (80023bc <LL_APB1_GRP1_EnableClock+0x28>)
 80023aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	4013      	ands	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023b2:	68fb      	ldr	r3, [r7, #12]
}
 80023b4:	46c0      	nop			; (mov r8, r8)
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b004      	add	sp, #16
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000

080023c0 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80023c8:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <LL_IOP_GRP1_EnableClock+0x28>)
 80023ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <LL_IOP_GRP1_EnableClock+0x28>)
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <LL_IOP_GRP1_EnableClock+0x28>)
 80023d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	4013      	ands	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023de:	68fb      	ldr	r3, [r7, #12]
}
 80023e0:	46c0      	nop			; (mov r8, r8)
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b004      	add	sp, #16
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000

080023ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ee:	b097      	sub	sp, #92	; 0x5c
 80023f0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 80023f2:	2330      	movs	r3, #48	; 0x30
 80023f4:	2218      	movs	r2, #24
 80023f6:	4694      	mov	ip, r2
 80023f8:	44bc      	add	ip, r7
 80023fa:	4463      	add	r3, ip
 80023fc:	2200      	movs	r2, #0
 80023fe:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 8002400:	232e      	movs	r3, #46	; 0x2e
 8002402:	2218      	movs	r2, #24
 8002404:	4694      	mov	ip, r2
 8002406:	44bc      	add	ip, r7
 8002408:	4463      	add	r3, ip
 800240a:	2200      	movs	r2, #0
 800240c:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 800240e:	232c      	movs	r3, #44	; 0x2c
 8002410:	2218      	movs	r2, #24
 8002412:	4694      	mov	ip, r2
 8002414:	44bc      	add	ip, r7
 8002416:	4463      	add	r3, ip
 8002418:	2200      	movs	r2, #0
 800241a:	801a      	strh	r2, [r3, #0]
	uint16_t beep1 = 0x0000;
 800241c:	232a      	movs	r3, #42	; 0x2a
 800241e:	2218      	movs	r2, #24
 8002420:	4694      	mov	ip, r2
 8002422:	44bc      	add	ip, r7
 8002424:	4463      	add	r3, ip
 8002426:	2200      	movs	r2, #0
 8002428:	801a      	strh	r2, [r3, #0]
	uint16_t beep2 = 0xFFFF;
 800242a:	2328      	movs	r3, #40	; 0x28
 800242c:	2218      	movs	r2, #24
 800242e:	4694      	mov	ip, r2
 8002430:	44bc      	add	ip, r7
 8002432:	4463      	add	r3, ip
 8002434:	2201      	movs	r2, #1
 8002436:	4252      	negs	r2, r2
 8002438:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800243a:	f005 f889 	bl	8007550 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800243e:	f000 f97f 	bl	8002740 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002442:	4bb4      	ldr	r3, [pc, #720]	; (8002714 <main+0x328>)
 8002444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002446:	4bb3      	ldr	r3, [pc, #716]	; (8002714 <main+0x328>)
 8002448:	2101      	movs	r1, #1
 800244a:	430a      	orrs	r2, r1
 800244c:	635a      	str	r2, [r3, #52]	; 0x34
 800244e:	4bb1      	ldr	r3, [pc, #708]	; (8002714 <main+0x328>)
 8002450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002452:	2201      	movs	r2, #1
 8002454:	4013      	ands	r3, r2
 8002456:	623b      	str	r3, [r7, #32]
 8002458:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800245a:	4bae      	ldr	r3, [pc, #696]	; (8002714 <main+0x328>)
 800245c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800245e:	4bad      	ldr	r3, [pc, #692]	; (8002714 <main+0x328>)
 8002460:	2102      	movs	r1, #2
 8002462:	430a      	orrs	r2, r1
 8002464:	635a      	str	r2, [r3, #52]	; 0x34
 8002466:	4bab      	ldr	r3, [pc, #684]	; (8002714 <main+0x328>)
 8002468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246a:	2202      	movs	r2, #2
 800246c:	4013      	ands	r3, r2
 800246e:	61fb      	str	r3, [r7, #28]
 8002470:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002472:	4ba8      	ldr	r3, [pc, #672]	; (8002714 <main+0x328>)
 8002474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002476:	4ba7      	ldr	r3, [pc, #668]	; (8002714 <main+0x328>)
 8002478:	2104      	movs	r1, #4
 800247a:	430a      	orrs	r2, r1
 800247c:	635a      	str	r2, [r3, #52]	; 0x34
 800247e:	4ba5      	ldr	r3, [pc, #660]	; (8002714 <main+0x328>)
 8002480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002482:	2204      	movs	r2, #4
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
 8002488:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800248a:	f000 fcc1 	bl	8002e10 <MX_GPIO_Init>
  MX_DMA_Init();
 800248e:	f000 fc91 	bl	8002db4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002492:	f000 fbaf 	bl	8002bf4 <MX_USART2_UART_Init>
  MX_COMP1_Init();
 8002496:	f000 f9d3 	bl	8002840 <MX_COMP1_Init>
  MX_TIM1_Init();
 800249a:	f000 fab1 	bl	8002a00 <MX_TIM1_Init>
  MX_USART3_Init();
 800249e:	f000 fc47 	bl	8002d30 <MX_USART3_Init>
  MX_I2S1_Init();
 80024a2:	f000 fa3f 	bl	8002924 <MX_I2S1_Init>
  MX_I2C1_Init();
 80024a6:	f000 f9fd 	bl	80028a4 <MX_I2C1_Init>
  MX_SPI2_Init();
 80024aa:	f000 fa65 	bl	8002978 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 80024ae:	4b9a      	ldr	r3, [pc, #616]	; (8002718 <main+0x32c>)
 80024b0:	0018      	movs	r0, r3
 80024b2:	f005 fb1b 	bl	8007aec <HAL_COMP_Start>
	HAL_Delay(100);
 80024b6:	2064      	movs	r0, #100	; 0x64
 80024b8:	f005 f8d0 	bl	800765c <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 80024bc:	f001 fddc 	bl	8004078 <MEM_Reset>

	weoInit();
 80024c0:	f000 feee 	bl	80032a0 <weoInit>
	HAL_Delay(1);
 80024c4:	2001      	movs	r0, #1
 80024c6:	f005 f8c9 	bl	800765c <HAL_Delay>
	weoClear();
 80024ca:	f000 ff55 	bl	8003378 <weoClear>
	MEM_GetID();
 80024ce:	f002 f871 	bl	80045b4 <MEM_GetID>
	soundSetup();
 80024d2:	f001 f8d9 	bl	8003688 <soundSetup>
	LIS3DHsetup();
 80024d6:	f004 fb87 	bl	8006be8 <LIS3DHsetup>

	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 80024da:	4b90      	ldr	r3, [pc, #576]	; (800271c <main+0x330>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	4b8f      	ldr	r3, [pc, #572]	; (800271c <main+0x330>)
 80024e0:	498f      	ldr	r1, [pc, #572]	; (8002720 <main+0x334>)
 80024e2:	430a      	orrs	r2, r1
 80024e4:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_USART_EnableIT_RXNE(USART2);
 80024e6:	4b8d      	ldr	r3, [pc, #564]	; (800271c <main+0x330>)
 80024e8:	0018      	movs	r0, r3
 80024ea:	f7ff ff01 	bl	80022f0 <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80024ee:	4b8b      	ldr	r3, [pc, #556]	; (800271c <main+0x330>)
 80024f0:	0018      	movs	r0, r3
 80024f2:	f7ff ff0b 	bl	800230c <LL_USART_EnableIT_ERROR>

	USART2->ICR|=USART_ICR_ORECF;
 80024f6:	4b89      	ldr	r3, [pc, #548]	; (800271c <main+0x330>)
 80024f8:	6a1a      	ldr	r2, [r3, #32]
 80024fa:	4b88      	ldr	r3, [pc, #544]	; (800271c <main+0x330>)
 80024fc:	2108      	movs	r1, #8
 80024fe:	430a      	orrs	r2, r1
 8002500:	621a      	str	r2, [r3, #32]

	squeak_generate();
 8002502:	f004 f9bb 	bl	800687c <squeak_generate>

	I2C_SOUND_ChangePage(0x01);
 8002506:	2001      	movs	r0, #1
 8002508:	f001 f87e 	bl	8003608 <I2C_SOUND_ChangePage>
	WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 800250c:	2100      	movs	r1, #0
 800250e:	2010      	movs	r0, #16
 8002510:	f001 f898 	bl	8003644 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 8002514:	2124      	movs	r1, #36	; 0x24
 8002516:	202e      	movs	r0, #46	; 0x2e
 8002518:	f001 f894 	bl	8003644 <WriteReg_I2C_SOUND>
    squeak_triple(signal);
 800251c:	4b81      	ldr	r3, [pc, #516]	; (8002724 <main+0x338>)
 800251e:	0018      	movs	r0, r3
 8002520:	f004 fb00 	bl	8006b24 <squeak_triple>
//    squeak_long();

	uint8_t ASCII_X=0x02;
 8002524:	2333      	movs	r3, #51	; 0x33
 8002526:	2218      	movs	r2, #24
 8002528:	4694      	mov	ip, r2
 800252a:	44bc      	add	ip, r7
 800252c:	4463      	add	r3, ip
 800252e:	2202      	movs	r2, #2
 8002530:	701a      	strb	r2, [r3, #0]
	uint8_t imY=0x04;
 8002532:	2327      	movs	r3, #39	; 0x27
 8002534:	2218      	movs	r2, #24
 8002536:	4694      	mov	ip, r2
 8002538:	44bc      	add	ip, r7
 800253a:	4463      	add	r3, ip
 800253c:	2204      	movs	r2, #4
 800253e:	701a      	strb	r2, [r3, #0]
//	uint8_t ASCII_height=0x26;
//	uint8_t X_increment=0x10;
	uint8_t decY=1;
 8002540:	2326      	movs	r3, #38	; 0x26
 8002542:	2218      	movs	r2, #24
 8002544:	4694      	mov	ip, r2
 8002546:	44bc      	add	ip, r7
 8002548:	4463      	add	r3, ip
 800254a:	2201      	movs	r2, #1
 800254c:	701a      	strb	r2, [r3, #0]
	uint16_t k,j;
//	uint8_t fontInfo=0xF1;
//	uint8_t fontCur;
//	uint8_t curStr=1;
	uint8_t curStr[4]={1,2,3,4};
 800254e:	230c      	movs	r3, #12
 8002550:	2218      	movs	r2, #24
 8002552:	4694      	mov	ip, r2
 8002554:	44bc      	add	ip, r7
 8002556:	4463      	add	r3, ip
 8002558:	4a73      	ldr	r2, [pc, #460]	; (8002728 <main+0x33c>)
 800255a:	601a      	str	r2, [r3, #0]
	uint8_t strLen=4;
 800255c:	2325      	movs	r3, #37	; 0x25
 800255e:	2218      	movs	r2, #24
 8002560:	4694      	mov	ip, r2
 8002562:	44bc      	add	ip, r7
 8002564:	4463      	add	r3, ip
 8002566:	2204      	movs	r2, #4
 8002568:	701a      	strb	r2, [r3, #0]
//	}
//	if((fontInfo & 0x01)==1){
//		fontCur=1;
//	}
//	if(fontCur==0){
		symLen=304;
 800256a:	2122      	movs	r1, #34	; 0x22
 800256c:	2018      	movs	r0, #24
 800256e:	183b      	adds	r3, r7, r0
 8002570:	185b      	adds	r3, r3, r1
 8002572:	2298      	movs	r2, #152	; 0x98
 8002574:	0052      	lsls	r2, r2, #1
 8002576:	801a      	strh	r2, [r3, #0]
		uint8_t weoBuffer[symLen];
 8002578:	183b      	adds	r3, r7, r0
 800257a:	185b      	adds	r3, r3, r1
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	001a      	movs	r2, r3
 8002580:	3a01      	subs	r2, #1
 8002582:	637a      	str	r2, [r7, #52]	; 0x34
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	2200      	movs	r2, #0
 8002588:	60fa      	str	r2, [r7, #12]
 800258a:	68b8      	ldr	r0, [r7, #8]
 800258c:	68f9      	ldr	r1, [r7, #12]
 800258e:	0002      	movs	r2, r0
 8002590:	0f52      	lsrs	r2, r2, #29
 8002592:	000e      	movs	r6, r1
 8002594:	00f6      	lsls	r6, r6, #3
 8002596:	617e      	str	r6, [r7, #20]
 8002598:	697e      	ldr	r6, [r7, #20]
 800259a:	4316      	orrs	r6, r2
 800259c:	617e      	str	r6, [r7, #20]
 800259e:	0002      	movs	r2, r0
 80025a0:	00d2      	lsls	r2, r2, #3
 80025a2:	613a      	str	r2, [r7, #16]
 80025a4:	603b      	str	r3, [r7, #0]
 80025a6:	2200      	movs	r2, #0
 80025a8:	607a      	str	r2, [r7, #4]
 80025aa:	6838      	ldr	r0, [r7, #0]
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	0002      	movs	r2, r0
 80025b0:	0f52      	lsrs	r2, r2, #29
 80025b2:	000e      	movs	r6, r1
 80025b4:	00f5      	lsls	r5, r6, #3
 80025b6:	4315      	orrs	r5, r2
 80025b8:	0002      	movs	r2, r0
 80025ba:	00d4      	lsls	r4, r2, #3
 80025bc:	3307      	adds	r3, #7
 80025be:	08db      	lsrs	r3, r3, #3
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	466a      	mov	r2, sp
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	469d      	mov	sp, r3
 80025c8:	ab02      	add	r3, sp, #8
 80025ca:	3300      	adds	r3, #0
 80025cc:	633b      	str	r3, [r7, #48]	; 0x30
		X_increment=0x10;
 80025ce:	4b57      	ldr	r3, [pc, #348]	; (800272c <main+0x340>)
 80025d0:	2210      	movs	r2, #16
 80025d2:	701a      	strb	r2, [r3, #0]
		ASCII_height=0x26;
 80025d4:	4b56      	ldr	r3, [pc, #344]	; (8002730 <main+0x344>)
 80025d6:	2226      	movs	r2, #38	; 0x26
 80025d8:	701a      	strb	r2, [r3, #0]
		for(k=0;k<strLen;k++){
 80025da:	2334      	movs	r3, #52	; 0x34
 80025dc:	2218      	movs	r2, #24
 80025de:	4694      	mov	ip, r2
 80025e0:	44bc      	add	ip, r7
 80025e2:	4463      	add	r3, ip
 80025e4:	2200      	movs	r2, #0
 80025e6:	801a      	strh	r2, [r3, #0]
 80025e8:	e077      	b.n	80026da <main+0x2ee>
			for(j=0;j<symLen;j++){
 80025ea:	2336      	movs	r3, #54	; 0x36
 80025ec:	2218      	movs	r2, #24
 80025ee:	4694      	mov	ip, r2
 80025f0:	44bc      	add	ip, r7
 80025f2:	4463      	add	r3, ip
 80025f4:	2200      	movs	r2, #0
 80025f6:	801a      	strh	r2, [r3, #0]
 80025f8:	e026      	b.n	8002648 <main+0x25c>
			weoBuffer[j]=F3[curStr[k]][j];
 80025fa:	2334      	movs	r3, #52	; 0x34
 80025fc:	2218      	movs	r2, #24
 80025fe:	4694      	mov	ip, r2
 8002600:	44bc      	add	ip, r7
 8002602:	4463      	add	r3, ip
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	220c      	movs	r2, #12
 8002608:	2118      	movs	r1, #24
 800260a:	468c      	mov	ip, r1
 800260c:	44bc      	add	ip, r7
 800260e:	4462      	add	r2, ip
 8002610:	5cd3      	ldrb	r3, [r2, r3]
 8002612:	001a      	movs	r2, r3
 8002614:	2536      	movs	r5, #54	; 0x36
 8002616:	2618      	movs	r6, #24
 8002618:	19bb      	adds	r3, r7, r6
 800261a:	195b      	adds	r3, r3, r5
 800261c:	8818      	ldrh	r0, [r3, #0]
 800261e:	19bb      	adds	r3, r7, r6
 8002620:	195b      	adds	r3, r3, r5
 8002622:	8819      	ldrh	r1, [r3, #0]
 8002624:	4c43      	ldr	r4, [pc, #268]	; (8002734 <main+0x348>)
 8002626:	0013      	movs	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	189b      	adds	r3, r3, r2
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	189b      	adds	r3, r3, r2
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	18e3      	adds	r3, r4, r3
 8002634:	5c1a      	ldrb	r2, [r3, r0]
 8002636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002638:	545a      	strb	r2, [r3, r1]
			for(j=0;j<symLen;j++){
 800263a:	19bb      	adds	r3, r7, r6
 800263c:	195b      	adds	r3, r3, r5
 800263e:	881a      	ldrh	r2, [r3, #0]
 8002640:	19bb      	adds	r3, r7, r6
 8002642:	195b      	adds	r3, r3, r5
 8002644:	3201      	adds	r2, #1
 8002646:	801a      	strh	r2, [r3, #0]
 8002648:	2336      	movs	r3, #54	; 0x36
 800264a:	2618      	movs	r6, #24
 800264c:	19ba      	adds	r2, r7, r6
 800264e:	18d2      	adds	r2, r2, r3
 8002650:	2322      	movs	r3, #34	; 0x22
 8002652:	2118      	movs	r1, #24
 8002654:	468c      	mov	ip, r1
 8002656:	44bc      	add	ip, r7
 8002658:	4463      	add	r3, ip
 800265a:	8812      	ldrh	r2, [r2, #0]
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d3cb      	bcc.n	80025fa <main+0x20e>
			}
		weoDrawRectangleFilled(ASCII_X, imY, ASCII_X+X_increment-1, imY + ASCII_height - decY, 0xFF, weoBuffer);
 8002662:	4b32      	ldr	r3, [pc, #200]	; (800272c <main+0x340>)
 8002664:	781a      	ldrb	r2, [r3, #0]
 8002666:	2033      	movs	r0, #51	; 0x33
 8002668:	19bb      	adds	r3, r7, r6
 800266a:	181b      	adds	r3, r3, r0
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	18d3      	adds	r3, r2, r3
 8002670:	b2db      	uxtb	r3, r3
 8002672:	3b01      	subs	r3, #1
 8002674:	b2dc      	uxtb	r4, r3
 8002676:	4b2e      	ldr	r3, [pc, #184]	; (8002730 <main+0x344>)
 8002678:	781a      	ldrb	r2, [r3, #0]
 800267a:	2127      	movs	r1, #39	; 0x27
 800267c:	19bb      	adds	r3, r7, r6
 800267e:	185b      	adds	r3, r3, r1
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	18d3      	adds	r3, r2, r3
 8002684:	b2da      	uxtb	r2, r3
 8002686:	2326      	movs	r3, #38	; 0x26
 8002688:	2518      	movs	r5, #24
 800268a:	46ac      	mov	ip, r5
 800268c:	44bc      	add	ip, r7
 800268e:	4463      	add	r3, ip
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	b2dd      	uxtb	r5, r3
 8002696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002698:	19ba      	adds	r2, r7, r6
 800269a:	1852      	adds	r2, r2, r1
 800269c:	7811      	ldrb	r1, [r2, #0]
 800269e:	0006      	movs	r6, r0
 80026a0:	2218      	movs	r2, #24
 80026a2:	18ba      	adds	r2, r7, r2
 80026a4:	1812      	adds	r2, r2, r0
 80026a6:	7810      	ldrb	r0, [r2, #0]
 80026a8:	9301      	str	r3, [sp, #4]
 80026aa:	23ff      	movs	r3, #255	; 0xff
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	002b      	movs	r3, r5
 80026b0:	0022      	movs	r2, r4
 80026b2:	f000 fec5 	bl	8003440 <weoDrawRectangleFilled>
		ASCII_X += X_increment+0;
 80026b6:	4b1d      	ldr	r3, [pc, #116]	; (800272c <main+0x340>)
 80026b8:	7819      	ldrb	r1, [r3, #0]
 80026ba:	2018      	movs	r0, #24
 80026bc:	183b      	adds	r3, r7, r0
 80026be:	199b      	adds	r3, r3, r6
 80026c0:	183a      	adds	r2, r7, r0
 80026c2:	1992      	adds	r2, r2, r6
 80026c4:	7812      	ldrb	r2, [r2, #0]
 80026c6:	188a      	adds	r2, r1, r2
 80026c8:	701a      	strb	r2, [r3, #0]
		for(k=0;k<strLen;k++){
 80026ca:	2134      	movs	r1, #52	; 0x34
 80026cc:	183b      	adds	r3, r7, r0
 80026ce:	185b      	adds	r3, r3, r1
 80026d0:	881a      	ldrh	r2, [r3, #0]
 80026d2:	183b      	adds	r3, r7, r0
 80026d4:	185b      	adds	r3, r3, r1
 80026d6:	3201      	adds	r2, #1
 80026d8:	801a      	strh	r2, [r3, #0]
 80026da:	2325      	movs	r3, #37	; 0x25
 80026dc:	2218      	movs	r2, #24
 80026de:	4694      	mov	ip, r2
 80026e0:	44bc      	add	ip, r7
 80026e2:	4463      	add	r3, ip
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2234      	movs	r2, #52	; 0x34
 80026ea:	2118      	movs	r1, #24
 80026ec:	468c      	mov	ip, r1
 80026ee:	44bc      	add	ip, r7
 80026f0:	4462      	add	r2, ip
 80026f2:	8812      	ldrh	r2, [r2, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d200      	bcs.n	80026fa <main+0x30e>
 80026f8:	e777      	b.n	80025ea <main+0x1fe>
//				if(y % 2 !=0){
//					decY=0x02;
//				}
//	weoDrawRectangleFilled(x,y,(x+localWidth-1),(y+localHeight-decY),0xFF,aim);

	GPIOC->ODR |= 1 << 6;
 80026fa:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <main+0x34c>)
 80026fc:	695a      	ldr	r2, [r3, #20]
 80026fe:	4b0e      	ldr	r3, [pc, #56]	; (8002738 <main+0x34c>)
 8002700:	2140      	movs	r1, #64	; 0x40
 8002702:	430a      	orrs	r2, r1
 8002704:	615a      	str	r2, [r3, #20]
	while (1) {
//		LIS3DHreadData();
		cmdExecute(cmd2Execute);
 8002706:	4b0d      	ldr	r3, [pc, #52]	; (800273c <main+0x350>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	0018      	movs	r0, r3
 800270c:	f001 ffb4 	bl	8004678 <cmdExecute>
 8002710:	e7f9      	b.n	8002706 <main+0x31a>
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	40021000 	.word	0x40021000
 8002718:	20000264 	.word	0x20000264
 800271c:	40004400 	.word	0x40004400
 8002720:	1000100d 	.word	0x1000100d
 8002724:	20000314 	.word	0x20000314
 8002728:	04030201 	.word	0x04030201
 800272c:	20000030 	.word	0x20000030
 8002730:	20000031 	.word	0x20000031
 8002734:	080190fc 	.word	0x080190fc
 8002738:	50000800 	.word	0x50000800
 800273c:	2000137b 	.word	0x2000137b

08002740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002740:	b590      	push	{r4, r7, lr}
 8002742:	b0a1      	sub	sp, #132	; 0x84
 8002744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002746:	2448      	movs	r4, #72	; 0x48
 8002748:	193b      	adds	r3, r7, r4
 800274a:	0018      	movs	r0, r3
 800274c:	2338      	movs	r3, #56	; 0x38
 800274e:	001a      	movs	r2, r3
 8002750:	2100      	movs	r1, #0
 8002752:	f00c fa65 	bl	800ec20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002756:	2338      	movs	r3, #56	; 0x38
 8002758:	18fb      	adds	r3, r7, r3
 800275a:	0018      	movs	r0, r3
 800275c:	2310      	movs	r3, #16
 800275e:	001a      	movs	r2, r3
 8002760:	2100      	movs	r1, #0
 8002762:	f00c fa5d 	bl	800ec20 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002766:	1d3b      	adds	r3, r7, #4
 8002768:	0018      	movs	r0, r3
 800276a:	2334      	movs	r3, #52	; 0x34
 800276c:	001a      	movs	r2, r3
 800276e:	2100      	movs	r1, #0
 8002770:	f00c fa56 	bl	800ec20 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002774:	2380      	movs	r3, #128	; 0x80
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	0018      	movs	r0, r3
 800277a:	f007 fcad 	bl	800a0d8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800277e:	193b      	adds	r3, r7, r4
 8002780:	2202      	movs	r2, #2
 8002782:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002784:	193b      	adds	r3, r7, r4
 8002786:	2280      	movs	r2, #128	; 0x80
 8002788:	0052      	lsls	r2, r2, #1
 800278a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800278c:	0021      	movs	r1, r4
 800278e:	187b      	adds	r3, r7, r1
 8002790:	2200      	movs	r2, #0
 8002792:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002794:	187b      	adds	r3, r7, r1
 8002796:	2240      	movs	r2, #64	; 0x40
 8002798:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800279a:	187b      	adds	r3, r7, r1
 800279c:	2202      	movs	r2, #2
 800279e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027a0:	187b      	adds	r3, r7, r1
 80027a2:	2202      	movs	r2, #2
 80027a4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80027a6:	187b      	adds	r3, r7, r1
 80027a8:	2200      	movs	r2, #0
 80027aa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80027ac:	187b      	adds	r3, r7, r1
 80027ae:	2208      	movs	r2, #8
 80027b0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027b2:	187b      	adds	r3, r7, r1
 80027b4:	2280      	movs	r2, #128	; 0x80
 80027b6:	0292      	lsls	r2, r2, #10
 80027b8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80027ba:	187b      	adds	r3, r7, r1
 80027bc:	2280      	movs	r2, #128	; 0x80
 80027be:	0492      	lsls	r2, r2, #18
 80027c0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80027c2:	187b      	adds	r3, r7, r1
 80027c4:	2280      	movs	r2, #128	; 0x80
 80027c6:	0592      	lsls	r2, r2, #22
 80027c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027ca:	187b      	adds	r3, r7, r1
 80027cc:	0018      	movs	r0, r3
 80027ce:	f007 fccf 	bl	800a170 <HAL_RCC_OscConfig>
 80027d2:	1e03      	subs	r3, r0, #0
 80027d4:	d001      	beq.n	80027da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80027d6:	f004 fa39 	bl	8006c4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027da:	2138      	movs	r1, #56	; 0x38
 80027dc:	187b      	adds	r3, r7, r1
 80027de:	2207      	movs	r2, #7
 80027e0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027e2:	187b      	adds	r3, r7, r1
 80027e4:	2202      	movs	r2, #2
 80027e6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027e8:	187b      	adds	r3, r7, r1
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027ee:	187b      	adds	r3, r7, r1
 80027f0:	2200      	movs	r2, #0
 80027f2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027f4:	187b      	adds	r3, r7, r1
 80027f6:	2102      	movs	r1, #2
 80027f8:	0018      	movs	r0, r3
 80027fa:	f007 ffd9 	bl	800a7b0 <HAL_RCC_ClockConfig>
 80027fe:	1e03      	subs	r3, r0, #0
 8002800:	d001      	beq.n	8002806 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002802:	f004 fa23 	bl	8006c4c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8002806:	1d3b      	adds	r3, r7, #4
 8002808:	4a0c      	ldr	r2, [pc, #48]	; (800283c <SystemClock_Config+0xfc>)
 800280a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2S1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800280c:	1d3b      	adds	r3, r7, #4
 800280e:	2200      	movs	r2, #0
 8002810:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002812:	1d3b      	adds	r3, r7, #4
 8002814:	2200      	movs	r2, #0
 8002816:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8002818:	1d3b      	adds	r3, r7, #4
 800281a:	2200      	movs	r2, #0
 800281c:	615a      	str	r2, [r3, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800281e:	1d3b      	adds	r3, r7, #4
 8002820:	2200      	movs	r2, #0
 8002822:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002824:	1d3b      	adds	r3, r7, #4
 8002826:	0018      	movs	r0, r3
 8002828:	f008 f96c 	bl	800ab04 <HAL_RCCEx_PeriphCLKConfig>
 800282c:	1e03      	subs	r3, r0, #0
 800282e:	d001      	beq.n	8002834 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8002830:	f004 fa0c 	bl	8006c4c <Error_Handler>
  }
}
 8002834:	46c0      	nop			; (mov r8, r8)
 8002836:	46bd      	mov	sp, r7
 8002838:	b021      	add	sp, #132	; 0x84
 800283a:	bd90      	pop	{r4, r7, pc}
 800283c:	00200822 	.word	0x00200822

08002840 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8002844:	4b15      	ldr	r3, [pc, #84]	; (800289c <MX_COMP1_Init+0x5c>)
 8002846:	4a16      	ldr	r2, [pc, #88]	; (80028a0 <MX_COMP1_Init+0x60>)
 8002848:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 800284a:	4b14      	ldr	r3, [pc, #80]	; (800289c <MX_COMP1_Init+0x5c>)
 800284c:	2280      	movs	r2, #128	; 0x80
 800284e:	0052      	lsls	r2, r2, #1
 8002850:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8002852:	4b12      	ldr	r3, [pc, #72]	; (800289c <MX_COMP1_Init+0x5c>)
 8002854:	2230      	movs	r2, #48	; 0x30
 8002856:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002858:	4b10      	ldr	r3, [pc, #64]	; (800289c <MX_COMP1_Init+0x5c>)
 800285a:	2200      	movs	r2, #0
 800285c:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 800285e:	4b0f      	ldr	r3, [pc, #60]	; (800289c <MX_COMP1_Init+0x5c>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002864:	4b0d      	ldr	r3, [pc, #52]	; (800289c <MX_COMP1_Init+0x5c>)
 8002866:	2200      	movs	r2, #0
 8002868:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 800286a:	4b0c      	ldr	r3, [pc, #48]	; (800289c <MX_COMP1_Init+0x5c>)
 800286c:	2280      	movs	r2, #128	; 0x80
 800286e:	0392      	lsls	r2, r2, #14
 8002870:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8002872:	4b0a      	ldr	r3, [pc, #40]	; (800289c <MX_COMP1_Init+0x5c>)
 8002874:	2200      	movs	r2, #0
 8002876:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002878:	4b08      	ldr	r3, [pc, #32]	; (800289c <MX_COMP1_Init+0x5c>)
 800287a:	2200      	movs	r2, #0
 800287c:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 800287e:	4b07      	ldr	r3, [pc, #28]	; (800289c <MX_COMP1_Init+0x5c>)
 8002880:	2212      	movs	r2, #18
 8002882:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8002884:	4b05      	ldr	r3, [pc, #20]	; (800289c <MX_COMP1_Init+0x5c>)
 8002886:	0018      	movs	r0, r3
 8002888:	f004 ffce 	bl	8007828 <HAL_COMP_Init>
 800288c:	1e03      	subs	r3, r0, #0
 800288e:	d001      	beq.n	8002894 <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 8002890:	f004 f9dc 	bl	8006c4c <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8002894:	46c0      	nop			; (mov r8, r8)
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	20000264 	.word	0x20000264
 80028a0:	40010200 	.word	0x40010200

080028a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028a8:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <MX_I2C1_Init+0x74>)
 80028aa:	4a1c      	ldr	r2, [pc, #112]	; (800291c <MX_I2C1_Init+0x78>)
 80028ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 80028ae:	4b1a      	ldr	r3, [pc, #104]	; (8002918 <MX_I2C1_Init+0x74>)
 80028b0:	4a1b      	ldr	r2, [pc, #108]	; (8002920 <MX_I2C1_Init+0x7c>)
 80028b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80028b4:	4b18      	ldr	r3, [pc, #96]	; (8002918 <MX_I2C1_Init+0x74>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028ba:	4b17      	ldr	r3, [pc, #92]	; (8002918 <MX_I2C1_Init+0x74>)
 80028bc:	2201      	movs	r2, #1
 80028be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028c0:	4b15      	ldr	r3, [pc, #84]	; (8002918 <MX_I2C1_Init+0x74>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80028c6:	4b14      	ldr	r3, [pc, #80]	; (8002918 <MX_I2C1_Init+0x74>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80028cc:	4b12      	ldr	r3, [pc, #72]	; (8002918 <MX_I2C1_Init+0x74>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028d2:	4b11      	ldr	r3, [pc, #68]	; (8002918 <MX_I2C1_Init+0x74>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028d8:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <MX_I2C1_Init+0x74>)
 80028da:	2200      	movs	r2, #0
 80028dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028de:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <MX_I2C1_Init+0x74>)
 80028e0:	0018      	movs	r0, r3
 80028e2:	f005 fe5f 	bl	80085a4 <HAL_I2C_Init>
 80028e6:	1e03      	subs	r3, r0, #0
 80028e8:	d001      	beq.n	80028ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80028ea:	f004 f9af 	bl	8006c4c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80028ee:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <MX_I2C1_Init+0x74>)
 80028f0:	2100      	movs	r1, #0
 80028f2:	0018      	movs	r0, r3
 80028f4:	f006 ff4a 	bl	800978c <HAL_I2CEx_ConfigAnalogFilter>
 80028f8:	1e03      	subs	r3, r0, #0
 80028fa:	d001      	beq.n	8002900 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80028fc:	f004 f9a6 	bl	8006c4c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <MX_I2C1_Init+0x74>)
 8002902:	2100      	movs	r1, #0
 8002904:	0018      	movs	r0, r3
 8002906:	f006 ff8d 	bl	8009824 <HAL_I2CEx_ConfigDigitalFilter>
 800290a:	1e03      	subs	r3, r0, #0
 800290c:	d001      	beq.n	8002912 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800290e:	f004 f99d 	bl	8006c4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20000144 	.word	0x20000144
 800291c:	40005400 	.word	0x40005400
 8002920:	1094102c 	.word	0x1094102c

08002924 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <MX_I2S1_Init+0x4c>)
 800292a:	4a12      	ldr	r2, [pc, #72]	; (8002974 <MX_I2S1_Init+0x50>)
 800292c:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800292e:	4b10      	ldr	r3, [pc, #64]	; (8002970 <MX_I2S1_Init+0x4c>)
 8002930:	2280      	movs	r2, #128	; 0x80
 8002932:	0092      	lsls	r2, r2, #2
 8002934:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8002936:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <MX_I2S1_Init+0x4c>)
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 800293c:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <MX_I2S1_Init+0x4c>)
 800293e:	2200      	movs	r2, #0
 8002940:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002942:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <MX_I2S1_Init+0x4c>)
 8002944:	2280      	movs	r2, #128	; 0x80
 8002946:	0092      	lsls	r2, r2, #2
 8002948:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <MX_I2S1_Init+0x4c>)
 800294c:	22fa      	movs	r2, #250	; 0xfa
 800294e:	0192      	lsls	r2, r2, #6
 8002950:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8002952:	4b07      	ldr	r3, [pc, #28]	; (8002970 <MX_I2S1_Init+0x4c>)
 8002954:	2200      	movs	r2, #0
 8002956:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8002958:	4b05      	ldr	r3, [pc, #20]	; (8002970 <MX_I2S1_Init+0x4c>)
 800295a:	0018      	movs	r0, r3
 800295c:	f006 ffae 	bl	80098bc <HAL_I2S_Init>
 8002960:	1e03      	subs	r3, r0, #0
 8002962:	d001      	beq.n	8002968 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 8002964:	f004 f972 	bl	8006c4c <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8002968:	46c0      	nop			; (mov r8, r8)
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	20001380 	.word	0x20001380
 8002974:	40013000 	.word	0x40013000

08002978 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800297c:	4b1e      	ldr	r3, [pc, #120]	; (80029f8 <MX_SPI2_Init+0x80>)
 800297e:	2208      	movs	r2, #8
 8002980:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002982:	4b1d      	ldr	r3, [pc, #116]	; (80029f8 <MX_SPI2_Init+0x80>)
 8002984:	4a1d      	ldr	r2, [pc, #116]	; (80029fc <MX_SPI2_Init+0x84>)
 8002986:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002988:	4b1b      	ldr	r3, [pc, #108]	; (80029f8 <MX_SPI2_Init+0x80>)
 800298a:	2282      	movs	r2, #130	; 0x82
 800298c:	0052      	lsls	r2, r2, #1
 800298e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002990:	4b19      	ldr	r3, [pc, #100]	; (80029f8 <MX_SPI2_Init+0x80>)
 8002992:	2200      	movs	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002996:	4b18      	ldr	r3, [pc, #96]	; (80029f8 <MX_SPI2_Init+0x80>)
 8002998:	22e0      	movs	r2, #224	; 0xe0
 800299a:	00d2      	lsls	r2, r2, #3
 800299c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800299e:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <MX_SPI2_Init+0x80>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029a4:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <MX_SPI2_Init+0x80>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80029aa:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <MX_SPI2_Init+0x80>)
 80029ac:	2280      	movs	r2, #128	; 0x80
 80029ae:	0092      	lsls	r2, r2, #2
 80029b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80029b2:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <MX_SPI2_Init+0x80>)
 80029b4:	2210      	movs	r2, #16
 80029b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029b8:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <MX_SPI2_Init+0x80>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80029be:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <MX_SPI2_Init+0x80>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029c4:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <MX_SPI2_Init+0x80>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80029ca:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <MX_SPI2_Init+0x80>)
 80029cc:	2207      	movs	r2, #7
 80029ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80029d0:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <MX_SPI2_Init+0x80>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80029d6:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <MX_SPI2_Init+0x80>)
 80029d8:	2208      	movs	r2, #8
 80029da:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <MX_SPI2_Init+0x80>)
 80029de:	0018      	movs	r0, r3
 80029e0:	f008 fd90 	bl	800b504 <HAL_SPI_Init>
 80029e4:	1e03      	subs	r3, r0, #0
 80029e6:	d001      	beq.n	80029ec <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 80029e8:	f004 f930 	bl	8006c4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80029ec:	4b02      	ldr	r3, [pc, #8]	; (80029f8 <MX_SPI2_Init+0x80>)
 80029ee:	2208      	movs	r2, #8
 80029f0:	61da      	str	r2, [r3, #28]
  /* USER CODE END SPI2_Init 2 */

}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	200000b4 	.word	0x200000b4
 80029fc:	40003800 	.word	0x40003800

08002a00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b09e      	sub	sp, #120	; 0x78
 8002a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a06:	2368      	movs	r3, #104	; 0x68
 8002a08:	18fb      	adds	r3, r7, r3
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	2310      	movs	r3, #16
 8002a0e:	001a      	movs	r2, r3
 8002a10:	2100      	movs	r1, #0
 8002a12:	f00c f905 	bl	800ec20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a16:	235c      	movs	r3, #92	; 0x5c
 8002a18:	18fb      	adds	r3, r7, r3
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	230c      	movs	r3, #12
 8002a1e:	001a      	movs	r2, r3
 8002a20:	2100      	movs	r1, #0
 8002a22:	f00c f8fd 	bl	800ec20 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8002a26:	2350      	movs	r3, #80	; 0x50
 8002a28:	18fb      	adds	r3, r7, r3
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	230c      	movs	r3, #12
 8002a2e:	001a      	movs	r2, r3
 8002a30:	2100      	movs	r1, #0
 8002a32:	f00c f8f5 	bl	800ec20 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a36:	2334      	movs	r3, #52	; 0x34
 8002a38:	18fb      	adds	r3, r7, r3
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	231c      	movs	r3, #28
 8002a3e:	001a      	movs	r2, r3
 8002a40:	2100      	movs	r1, #0
 8002a42:	f00c f8ed 	bl	800ec20 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a46:	003b      	movs	r3, r7
 8002a48:	0018      	movs	r0, r3
 8002a4a:	2334      	movs	r3, #52	; 0x34
 8002a4c:	001a      	movs	r2, r3
 8002a4e:	2100      	movs	r1, #0
 8002a50:	f00c f8e6 	bl	800ec20 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a54:	4b64      	ldr	r3, [pc, #400]	; (8002be8 <MX_TIM1_Init+0x1e8>)
 8002a56:	4a65      	ldr	r2, [pc, #404]	; (8002bec <MX_TIM1_Init+0x1ec>)
 8002a58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002a5a:	4b63      	ldr	r3, [pc, #396]	; (8002be8 <MX_TIM1_Init+0x1e8>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a60:	4b61      	ldr	r3, [pc, #388]	; (8002be8 <MX_TIM1_Init+0x1e8>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 8002a66:	4b60      	ldr	r3, [pc, #384]	; (8002be8 <MX_TIM1_Init+0x1e8>)
 8002a68:	4a61      	ldr	r2, [pc, #388]	; (8002bf0 <MX_TIM1_Init+0x1f0>)
 8002a6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a6c:	4b5e      	ldr	r3, [pc, #376]	; (8002be8 <MX_TIM1_Init+0x1e8>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a72:	4b5d      	ldr	r3, [pc, #372]	; (8002be8 <MX_TIM1_Init+0x1e8>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a78:	4b5b      	ldr	r3, [pc, #364]	; (8002be8 <MX_TIM1_Init+0x1e8>)
 8002a7a:	2280      	movs	r2, #128	; 0x80
 8002a7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a7e:	4b5a      	ldr	r3, [pc, #360]	; (8002be8 <MX_TIM1_Init+0x1e8>)
 8002a80:	0018      	movs	r0, r3
 8002a82:	f009 fd51 	bl	800c528 <HAL_TIM_Base_Init>
 8002a86:	1e03      	subs	r3, r0, #0
 8002a88:	d001      	beq.n	8002a8e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8002a8a:	f004 f8df 	bl	8006c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a8e:	2168      	movs	r1, #104	; 0x68
 8002a90:	187b      	adds	r3, r7, r1
 8002a92:	2280      	movs	r2, #128	; 0x80
 8002a94:	0152      	lsls	r2, r2, #5
 8002a96:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a98:	187a      	adds	r2, r7, r1
 8002a9a:	4b53      	ldr	r3, [pc, #332]	; (8002be8 <MX_TIM1_Init+0x1e8>)
 8002a9c:	0011      	movs	r1, r2
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f009 ffda 	bl	800ca58 <HAL_TIM_ConfigClockSource>
 8002aa4:	1e03      	subs	r3, r0, #0
 8002aa6:	d001      	beq.n	8002aac <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8002aa8:	f004 f8d0 	bl	8006c4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002aac:	4b4e      	ldr	r3, [pc, #312]	; (8002be8 <MX_TIM1_Init+0x1e8>)
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f009 fd92 	bl	800c5d8 <HAL_TIM_PWM_Init>
 8002ab4:	1e03      	subs	r3, r0, #0
 8002ab6:	d001      	beq.n	8002abc <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8002ab8:	f004 f8c8 	bl	8006c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002abc:	215c      	movs	r1, #92	; 0x5c
 8002abe:	187b      	adds	r3, r7, r1
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002ac4:	187b      	adds	r3, r7, r1
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aca:	187b      	adds	r3, r7, r1
 8002acc:	2200      	movs	r2, #0
 8002ace:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ad0:	187a      	adds	r2, r7, r1
 8002ad2:	4b45      	ldr	r3, [pc, #276]	; (8002be8 <MX_TIM1_Init+0x1e8>)
 8002ad4:	0011      	movs	r1, r2
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f00a fc8e 	bl	800d3f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002adc:	1e03      	subs	r3, r0, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8002ae0:	f004 f8b4 	bl	8006c4c <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8002ae4:	2150      	movs	r1, #80	; 0x50
 8002ae6:	187b      	adds	r3, r7, r1
 8002ae8:	2202      	movs	r2, #2
 8002aea:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8002aec:	187b      	adds	r3, r7, r1
 8002aee:	2201      	movs	r2, #1
 8002af0:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8002af2:	187b      	adds	r3, r7, r1
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8002af8:	187a      	adds	r2, r7, r1
 8002afa:	4b3b      	ldr	r3, [pc, #236]	; (8002be8 <MX_TIM1_Init+0x1e8>)
 8002afc:	2101      	movs	r1, #1
 8002afe:	0018      	movs	r0, r3
 8002b00:	f00a fd8e 	bl	800d620 <HAL_TIMEx_ConfigBreakInput>
 8002b04:	1e03      	subs	r3, r0, #0
 8002b06:	d001      	beq.n	8002b0c <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8002b08:	f004 f8a0 	bl	8006c4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b0c:	2134      	movs	r1, #52	; 0x34
 8002b0e:	187b      	adds	r3, r7, r1
 8002b10:	2260      	movs	r2, #96	; 0x60
 8002b12:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 8002b14:	187b      	adds	r3, r7, r1
 8002b16:	2296      	movs	r2, #150	; 0x96
 8002b18:	0052      	lsls	r2, r2, #1
 8002b1a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b1c:	187b      	adds	r3, r7, r1
 8002b1e:	2200      	movs	r2, #0
 8002b20:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b22:	187b      	adds	r3, r7, r1
 8002b24:	2200      	movs	r2, #0
 8002b26:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002b28:	187b      	adds	r3, r7, r1
 8002b2a:	2204      	movs	r2, #4
 8002b2c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b2e:	187b      	adds	r3, r7, r1
 8002b30:	2200      	movs	r2, #0
 8002b32:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b34:	187b      	adds	r3, r7, r1
 8002b36:	2200      	movs	r2, #0
 8002b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b3a:	1879      	adds	r1, r7, r1
 8002b3c:	4b2a      	ldr	r3, [pc, #168]	; (8002be8 <MX_TIM1_Init+0x1e8>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	0018      	movs	r0, r3
 8002b42:	f009 fe93 	bl	800c86c <HAL_TIM_PWM_ConfigChannel>
 8002b46:	1e03      	subs	r3, r0, #0
 8002b48:	d001      	beq.n	8002b4e <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8002b4a:	f004 f87f 	bl	8006c4c <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8002b4e:	2134      	movs	r1, #52	; 0x34
 8002b50:	187b      	adds	r3, r7, r1
 8002b52:	2232      	movs	r2, #50	; 0x32
 8002b54:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8002b56:	1879      	adds	r1, r7, r1
 8002b58:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <MX_TIM1_Init+0x1e8>)
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f009 fe85 	bl	800c86c <HAL_TIM_PWM_ConfigChannel>
 8002b62:	1e03      	subs	r3, r0, #0
 8002b64:	d001      	beq.n	8002b6a <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8002b66:	f004 f871 	bl	8006c4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8002b6a:	003b      	movs	r3, r7
 8002b6c:	2280      	movs	r2, #128	; 0x80
 8002b6e:	0112      	lsls	r2, r2, #4
 8002b70:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8002b72:	003b      	movs	r3, r7
 8002b74:	2280      	movs	r2, #128	; 0x80
 8002b76:	00d2      	lsls	r2, r2, #3
 8002b78:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b7a:	003b      	movs	r3, r7
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b80:	003b      	movs	r3, r7
 8002b82:	2200      	movs	r2, #0
 8002b84:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8002b86:	003b      	movs	r3, r7
 8002b88:	2280      	movs	r2, #128	; 0x80
 8002b8a:	0152      	lsls	r2, r2, #5
 8002b8c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b8e:	003b      	movs	r3, r7
 8002b90:	2280      	movs	r2, #128	; 0x80
 8002b92:	0192      	lsls	r2, r2, #6
 8002b94:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8002b96:	003b      	movs	r3, r7
 8002b98:	220a      	movs	r2, #10
 8002b9a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002b9c:	003b      	movs	r3, r7
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002ba2:	003b      	movs	r3, r7
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002ba8:	003b      	movs	r3, r7
 8002baa:	2280      	movs	r2, #128	; 0x80
 8002bac:	0492      	lsls	r2, r2, #18
 8002bae:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002bb0:	003b      	movs	r3, r7
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002bb6:	003b      	movs	r3, r7
 8002bb8:	2200      	movs	r2, #0
 8002bba:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8002bbc:	003b      	movs	r3, r7
 8002bbe:	2280      	movs	r2, #128	; 0x80
 8002bc0:	01d2      	lsls	r2, r2, #7
 8002bc2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002bc4:	003a      	movs	r2, r7
 8002bc6:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <MX_TIM1_Init+0x1e8>)
 8002bc8:	0011      	movs	r1, r2
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f00a fc82 	bl	800d4d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002bd0:	1e03      	subs	r3, r0, #0
 8002bd2:	d001      	beq.n	8002bd8 <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 8002bd4:	f004 f83a 	bl	8006c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002bd8:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <MX_TIM1_Init+0x1e8>)
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f004 fa7c 	bl	80070d8 <HAL_TIM_MspPostInit>

}
 8002be0:	46c0      	nop			; (mov r8, r8)
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b01e      	add	sp, #120	; 0x78
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	20001320 	.word	0x20001320
 8002bec:	40012c00 	.word	0x40012c00
 8002bf0:	0000027f 	.word	0x0000027f

08002bf4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002bf4:	b590      	push	{r4, r7, lr}
 8002bf6:	b08f      	sub	sp, #60	; 0x3c
 8002bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002bfa:	2418      	movs	r4, #24
 8002bfc:	193b      	adds	r3, r7, r4
 8002bfe:	0018      	movs	r0, r3
 8002c00:	2320      	movs	r3, #32
 8002c02:	001a      	movs	r2, r3
 8002c04:	2100      	movs	r1, #0
 8002c06:	f00c f80b 	bl	800ec20 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0a:	003b      	movs	r3, r7
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	2318      	movs	r3, #24
 8002c10:	001a      	movs	r2, r3
 8002c12:	2100      	movs	r1, #0
 8002c14:	f00c f804 	bl	800ec20 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002c18:	2380      	movs	r3, #128	; 0x80
 8002c1a:	029b      	lsls	r3, r3, #10
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f7ff fbb9 	bl	8002394 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8002c22:	2001      	movs	r0, #1
 8002c24:	f7ff fbcc 	bl	80023c0 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8002c28:	003b      	movs	r3, r7
 8002c2a:	2204      	movs	r2, #4
 8002c2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002c2e:	003b      	movs	r3, r7
 8002c30:	2202      	movs	r2, #2
 8002c32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002c34:	003b      	movs	r3, r7
 8002c36:	2200      	movs	r2, #0
 8002c38:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c3a:	003b      	movs	r3, r7
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c40:	003b      	movs	r3, r7
 8002c42:	2200      	movs	r2, #0
 8002c44:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002c46:	003b      	movs	r3, r7
 8002c48:	2201      	movs	r2, #1
 8002c4a:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4c:	003a      	movs	r2, r7
 8002c4e:	23a0      	movs	r3, #160	; 0xa0
 8002c50:	05db      	lsls	r3, r3, #23
 8002c52:	0011      	movs	r1, r2
 8002c54:	0018      	movs	r0, r3
 8002c56:	f00b fc65 	bl	800e524 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8002c5a:	003b      	movs	r3, r7
 8002c5c:	2208      	movs	r2, #8
 8002c5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002c60:	003b      	movs	r3, r7
 8002c62:	2202      	movs	r2, #2
 8002c64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002c66:	003b      	movs	r3, r7
 8002c68:	2200      	movs	r2, #0
 8002c6a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c6c:	003b      	movs	r3, r7
 8002c6e:	2200      	movs	r2, #0
 8002c70:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c72:	003b      	movs	r3, r7
 8002c74:	2200      	movs	r2, #0
 8002c76:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002c78:	003b      	movs	r3, r7
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c7e:	003a      	movs	r2, r7
 8002c80:	23a0      	movs	r3, #160	; 0xa0
 8002c82:	05db      	lsls	r3, r3, #23
 8002c84:	0011      	movs	r1, r2
 8002c86:	0018      	movs	r0, r3
 8002c88:	f00b fc4c 	bl	800e524 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	201c      	movs	r0, #28
 8002c90:	f7ff fa3c 	bl	800210c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8002c94:	201c      	movs	r0, #28
 8002c96:	f7ff fa1f 	bl	80020d8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8002c9a:	193b      	adds	r3, r7, r4
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8002ca0:	193b      	adds	r3, r7, r4
 8002ca2:	22e1      	movs	r2, #225	; 0xe1
 8002ca4:	0212      	lsls	r2, r2, #8
 8002ca6:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8002ca8:	193b      	adds	r3, r7, r4
 8002caa:	2280      	movs	r2, #128	; 0x80
 8002cac:	0152      	lsls	r2, r2, #5
 8002cae:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002cb0:	0021      	movs	r1, r4
 8002cb2:	187b      	adds	r3, r7, r1
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002cb8:	187b      	adds	r3, r7, r1
 8002cba:	2200      	movs	r2, #0
 8002cbc:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002cbe:	187b      	adds	r3, r7, r1
 8002cc0:	220c      	movs	r2, #12
 8002cc2:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002cc4:	187b      	adds	r3, r7, r1
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002cca:	187b      	adds	r3, r7, r1
 8002ccc:	2200      	movs	r2, #0
 8002cce:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8002cd0:	187b      	adds	r3, r7, r1
 8002cd2:	4a16      	ldr	r2, [pc, #88]	; (8002d2c <MX_USART2_UART_Init+0x138>)
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	0010      	movs	r0, r2
 8002cd8:	f00b fef0 	bl	800eabc <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8002cdc:	4b13      	ldr	r3, [pc, #76]	; (8002d2c <MX_USART2_UART_Init+0x138>)
 8002cde:	2100      	movs	r1, #0
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f7ff fa9f 	bl	8002224 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8002ce6:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <MX_USART2_UART_Init+0x138>)
 8002ce8:	2100      	movs	r1, #0
 8002cea:	0018      	movs	r0, r3
 8002cec:	f7ff faac 	bl	8002248 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8002cf0:	4b0e      	ldr	r3, [pc, #56]	; (8002d2c <MX_USART2_UART_Init+0x138>)
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f7ff fa86 	bl	8002204 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <MX_USART2_UART_Init+0x138>)
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f7ff fab8 	bl	8002270 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8002d00:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <MX_USART2_UART_Init+0x138>)
 8002d02:	0018      	movs	r0, r3
 8002d04:	f7ff fa70 	bl	80021e8 <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8002d08:	46c0      	nop			; (mov r8, r8)
 8002d0a:	4b08      	ldr	r3, [pc, #32]	; (8002d2c <MX_USART2_UART_Init+0x138>)
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f7ff fac7 	bl	80022a0 <LL_USART_IsActiveFlag_TEACK>
 8002d12:	1e03      	subs	r3, r0, #0
 8002d14:	d0f9      	beq.n	8002d0a <MX_USART2_UART_Init+0x116>
 8002d16:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <MX_USART2_UART_Init+0x138>)
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f7ff fad5 	bl	80022c8 <LL_USART_IsActiveFlag_REACK>
 8002d1e:	1e03      	subs	r3, r0, #0
 8002d20:	d0f3      	beq.n	8002d0a <MX_USART2_UART_Init+0x116>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	46c0      	nop			; (mov r8, r8)
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b00f      	add	sp, #60	; 0x3c
 8002d2a:	bd90      	pop	{r4, r7, pc}
 8002d2c:	40004400 	.word	0x40004400

08002d30 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8002d34:	4b1c      	ldr	r3, [pc, #112]	; (8002da8 <MX_USART3_Init+0x78>)
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	4b1b      	ldr	r3, [pc, #108]	; (8002da8 <MX_USART3_Init+0x78>)
 8002d3a:	2180      	movs	r1, #128	; 0x80
 8002d3c:	0309      	lsls	r1, r1, #12
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8002d42:	4b1a      	ldr	r3, [pc, #104]	; (8002dac <MX_USART3_Init+0x7c>)
 8002d44:	4a18      	ldr	r2, [pc, #96]	; (8002da8 <MX_USART3_Init+0x78>)
 8002d46:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8000000;
 8002d48:	4b18      	ldr	r3, [pc, #96]	; (8002dac <MX_USART3_Init+0x7c>)
 8002d4a:	4a19      	ldr	r2, [pc, #100]	; (8002db0 <MX_USART3_Init+0x80>)
 8002d4c:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8002d4e:	4b17      	ldr	r3, [pc, #92]	; (8002dac <MX_USART3_Init+0x7c>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8002d54:	4b15      	ldr	r3, [pc, #84]	; (8002dac <MX_USART3_Init+0x7c>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8002d5a:	4b14      	ldr	r3, [pc, #80]	; (8002dac <MX_USART3_Init+0x7c>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8002d60:	4b12      	ldr	r3, [pc, #72]	; (8002dac <MX_USART3_Init+0x7c>)
 8002d62:	2208      	movs	r2, #8
 8002d64:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8002d66:	4b11      	ldr	r3, [pc, #68]	; (8002dac <MX_USART3_Init+0x7c>)
 8002d68:	2280      	movs	r2, #128	; 0x80
 8002d6a:	00d2      	lsls	r2, r2, #3
 8002d6c:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8002d6e:	4b0f      	ldr	r3, [pc, #60]	; (8002dac <MX_USART3_Init+0x7c>)
 8002d70:	2280      	movs	r2, #128	; 0x80
 8002d72:	0092      	lsls	r2, r2, #2
 8002d74:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8002d76:	4b0d      	ldr	r3, [pc, #52]	; (8002dac <MX_USART3_Init+0x7c>)
 8002d78:	2280      	movs	r2, #128	; 0x80
 8002d7a:	0052      	lsls	r2, r2, #1
 8002d7c:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8002d7e:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <MX_USART3_Init+0x7c>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8002d84:	4b09      	ldr	r3, [pc, #36]	; (8002dac <MX_USART3_Init+0x7c>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8002d8a:	4b08      	ldr	r3, [pc, #32]	; (8002dac <MX_USART3_Init+0x7c>)
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f00a fce7 	bl	800d760 <HAL_USART_Init>
 8002d92:	1e03      	subs	r3, r0, #0
 8002d94:	d001      	beq.n	8002d9a <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8002d96:	f003 ff59 	bl	8006c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  husart3.Init.BaudRate = 8000000;
 8002d9a:	4b04      	ldr	r3, [pc, #16]	; (8002dac <MX_USART3_Init+0x7c>)
 8002d9c:	4a04      	ldr	r2, [pc, #16]	; (8002db0 <MX_USART3_Init+0x80>)
 8002d9e:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 2 */

}
 8002da0:	46c0      	nop			; (mov r8, r8)
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	40004800 	.word	0x40004800
 8002dac:	200002a4 	.word	0x200002a4
 8002db0:	007a1200 	.word	0x007a1200

08002db4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002dba:	4b14      	ldr	r3, [pc, #80]	; (8002e0c <MX_DMA_Init+0x58>)
 8002dbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dbe:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <MX_DMA_Init+0x58>)
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	639a      	str	r2, [r3, #56]	; 0x38
 8002dc6:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <MX_DMA_Init+0x58>)
 8002dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dca:	2201      	movs	r2, #1
 8002dcc:	4013      	ands	r3, r2
 8002dce:	607b      	str	r3, [r7, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	2009      	movs	r0, #9
 8002dd8:	f004 ff86 	bl	8007ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002ddc:	2009      	movs	r0, #9
 8002dde:	f004 ff98 	bl	8007d12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002de2:	2200      	movs	r2, #0
 8002de4:	2100      	movs	r1, #0
 8002de6:	200a      	movs	r0, #10
 8002de8:	f004 ff7e 	bl	8007ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002dec:	200a      	movs	r0, #10
 8002dee:	f004 ff90 	bl	8007d12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8002df2:	2200      	movs	r2, #0
 8002df4:	2100      	movs	r1, #0
 8002df6:	200b      	movs	r0, #11
 8002df8:	f004 ff76 	bl	8007ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8002dfc:	200b      	movs	r0, #11
 8002dfe:	f004 ff88 	bl	8007d12 <HAL_NVIC_EnableIRQ>

}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	46bd      	mov	sp, r7
 8002e06:	b002      	add	sp, #8
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	40021000 	.word	0x40021000

08002e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e16:	003b      	movs	r3, r7
 8002e18:	0018      	movs	r0, r3
 8002e1a:	2318      	movs	r3, #24
 8002e1c:	001a      	movs	r2, r3
 8002e1e:	2100      	movs	r1, #0
 8002e20:	f00b fefe 	bl	800ec20 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8002e24:	2002      	movs	r0, #2
 8002e26:	f7ff facb 	bl	80023c0 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8002e2a:	2004      	movs	r0, #4
 8002e2c:	f7ff fac8 	bl	80023c0 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8002e30:	2001      	movs	r0, #1
 8002e32:	f7ff fac5 	bl	80023c0 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8002e36:	2380      	movs	r3, #128	; 0x80
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4aa0      	ldr	r2, [pc, #640]	; (80030bc <MX_GPIO_Init+0x2ac>)
 8002e3c:	0019      	movs	r1, r3
 8002e3e:	0010      	movs	r0, r2
 8002e40:	f7ff fa90 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8002e44:	2380      	movs	r3, #128	; 0x80
 8002e46:	01db      	lsls	r3, r3, #7
 8002e48:	4a9d      	ldr	r2, [pc, #628]	; (80030c0 <MX_GPIO_Init+0x2b0>)
 8002e4a:	0019      	movs	r1, r3
 8002e4c:	0010      	movs	r0, r2
 8002e4e:	f7ff fa89 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8002e52:	2380      	movs	r3, #128	; 0x80
 8002e54:	021b      	lsls	r3, r3, #8
 8002e56:	4a9a      	ldr	r2, [pc, #616]	; (80030c0 <MX_GPIO_Init+0x2b0>)
 8002e58:	0019      	movs	r1, r3
 8002e5a:	0010      	movs	r0, r2
 8002e5c:	f7ff fa82 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8002e60:	23a0      	movs	r3, #160	; 0xa0
 8002e62:	05db      	lsls	r3, r3, #23
 8002e64:	2140      	movs	r1, #64	; 0x40
 8002e66:	0018      	movs	r0, r3
 8002e68:	f7ff fa7c 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8002e6c:	23a0      	movs	r3, #160	; 0xa0
 8002e6e:	05db      	lsls	r3, r3, #23
 8002e70:	2180      	movs	r1, #128	; 0x80
 8002e72:	0018      	movs	r0, r3
 8002e74:	f7ff fa76 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8002e78:	4b91      	ldr	r3, [pc, #580]	; (80030c0 <MX_GPIO_Init+0x2b0>)
 8002e7a:	2140      	movs	r1, #64	; 0x40
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f7ff fa71 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_1_GPIO_Port, TEST_1_Pin);
 8002e82:	2380      	movs	r3, #128	; 0x80
 8002e84:	011a      	lsls	r2, r3, #4
 8002e86:	23a0      	movs	r3, #160	; 0xa0
 8002e88:	05db      	lsls	r3, r3, #23
 8002e8a:	0011      	movs	r1, r2
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f7ff fa75 	bl	800237c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_2_GPIO_Port, TEST_2_Pin);
 8002e92:	2380      	movs	r3, #128	; 0x80
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	23a0      	movs	r3, #160	; 0xa0
 8002e98:	05db      	lsls	r3, r3, #23
 8002e9a:	0011      	movs	r1, r2
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f7ff fa6d 	bl	800237c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8002ea2:	003b      	movs	r3, r7
 8002ea4:	2280      	movs	r2, #128	; 0x80
 8002ea6:	0092      	lsls	r2, r2, #2
 8002ea8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002eaa:	003b      	movs	r3, r7
 8002eac:	2201      	movs	r2, #1
 8002eae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb0:	003b      	movs	r3, r7
 8002eb2:	2203      	movs	r2, #3
 8002eb4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002eb6:	003b      	movs	r3, r7
 8002eb8:	2200      	movs	r2, #0
 8002eba:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ebc:	003b      	movs	r3, r7
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8002ec2:	003b      	movs	r3, r7
 8002ec4:	4a7d      	ldr	r2, [pc, #500]	; (80030bc <MX_GPIO_Init+0x2ac>)
 8002ec6:	0019      	movs	r1, r3
 8002ec8:	0010      	movs	r0, r2
 8002eca:	f00b fb2b 	bl	800e524 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8002ece:	003b      	movs	r3, r7
 8002ed0:	2280      	movs	r2, #128	; 0x80
 8002ed2:	01d2      	lsls	r2, r2, #7
 8002ed4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002ed6:	003b      	movs	r3, r7
 8002ed8:	2201      	movs	r2, #1
 8002eda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002edc:	003b      	movs	r3, r7
 8002ede:	2200      	movs	r2, #0
 8002ee0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ee2:	003b      	movs	r3, r7
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ee8:	003b      	movs	r3, r7
 8002eea:	2200      	movs	r2, #0
 8002eec:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8002eee:	003b      	movs	r3, r7
 8002ef0:	4a73      	ldr	r2, [pc, #460]	; (80030c0 <MX_GPIO_Init+0x2b0>)
 8002ef2:	0019      	movs	r1, r3
 8002ef4:	0010      	movs	r0, r2
 8002ef6:	f00b fb15 	bl	800e524 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8002efa:	003b      	movs	r3, r7
 8002efc:	2280      	movs	r2, #128	; 0x80
 8002efe:	0212      	lsls	r2, r2, #8
 8002f00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002f02:	003b      	movs	r3, r7
 8002f04:	2201      	movs	r2, #1
 8002f06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002f08:	003b      	movs	r3, r7
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f0e:	003b      	movs	r3, r7
 8002f10:	2200      	movs	r2, #0
 8002f12:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002f14:	003b      	movs	r3, r7
 8002f16:	2200      	movs	r2, #0
 8002f18:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8002f1a:	003b      	movs	r3, r7
 8002f1c:	4a68      	ldr	r2, [pc, #416]	; (80030c0 <MX_GPIO_Init+0x2b0>)
 8002f1e:	0019      	movs	r1, r3
 8002f20:	0010      	movs	r0, r2
 8002f22:	f00b faff 	bl	800e524 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8002f26:	003b      	movs	r3, r7
 8002f28:	2201      	movs	r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002f2c:	003b      	movs	r3, r7
 8002f2e:	2200      	movs	r2, #0
 8002f30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002f32:	003b      	movs	r3, r7
 8002f34:	2201      	movs	r2, #1
 8002f36:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8002f38:	003a      	movs	r2, r7
 8002f3a:	23a0      	movs	r3, #160	; 0xa0
 8002f3c:	05db      	lsls	r3, r3, #23
 8002f3e:	0011      	movs	r1, r2
 8002f40:	0018      	movs	r0, r3
 8002f42:	f00b faef 	bl	800e524 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8002f46:	003b      	movs	r3, r7
 8002f48:	2202      	movs	r2, #2
 8002f4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002f4c:	003b      	movs	r3, r7
 8002f4e:	2200      	movs	r2, #0
 8002f50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002f52:	003b      	movs	r3, r7
 8002f54:	2201      	movs	r2, #1
 8002f56:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8002f58:	003a      	movs	r2, r7
 8002f5a:	23a0      	movs	r3, #160	; 0xa0
 8002f5c:	05db      	lsls	r3, r3, #23
 8002f5e:	0011      	movs	r1, r2
 8002f60:	0018      	movs	r0, r3
 8002f62:	f00b fadf 	bl	800e524 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8002f66:	003b      	movs	r3, r7
 8002f68:	2210      	movs	r2, #16
 8002f6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002f6c:	003b      	movs	r3, r7
 8002f6e:	2200      	movs	r2, #0
 8002f70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002f72:	003b      	movs	r3, r7
 8002f74:	2201      	movs	r2, #1
 8002f76:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8002f78:	003a      	movs	r2, r7
 8002f7a:	23a0      	movs	r3, #160	; 0xa0
 8002f7c:	05db      	lsls	r3, r3, #23
 8002f7e:	0011      	movs	r1, r2
 8002f80:	0018      	movs	r0, r3
 8002f82:	f00b facf 	bl	800e524 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8002f86:	003b      	movs	r3, r7
 8002f88:	2240      	movs	r2, #64	; 0x40
 8002f8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002f8c:	003b      	movs	r3, r7
 8002f8e:	2201      	movs	r2, #1
 8002f90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002f92:	003b      	movs	r3, r7
 8002f94:	2203      	movs	r2, #3
 8002f96:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f98:	003b      	movs	r3, r7
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002f9e:	003b      	movs	r3, r7
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8002fa4:	003a      	movs	r2, r7
 8002fa6:	23a0      	movs	r3, #160	; 0xa0
 8002fa8:	05db      	lsls	r3, r3, #23
 8002faa:	0011      	movs	r1, r2
 8002fac:	0018      	movs	r0, r3
 8002fae:	f00b fab9 	bl	800e524 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8002fb2:	003b      	movs	r3, r7
 8002fb4:	2280      	movs	r2, #128	; 0x80
 8002fb6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002fb8:	003b      	movs	r3, r7
 8002fba:	2201      	movs	r2, #1
 8002fbc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002fbe:	003b      	movs	r3, r7
 8002fc0:	2203      	movs	r2, #3
 8002fc2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002fc4:	003b      	movs	r3, r7
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002fca:	003b      	movs	r3, r7
 8002fcc:	2200      	movs	r2, #0
 8002fce:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8002fd0:	003a      	movs	r2, r7
 8002fd2:	23a0      	movs	r3, #160	; 0xa0
 8002fd4:	05db      	lsls	r3, r3, #23
 8002fd6:	0011      	movs	r1, r2
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f00b faa3 	bl	800e524 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8002fde:	003b      	movs	r3, r7
 8002fe0:	2240      	movs	r2, #64	; 0x40
 8002fe2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002fe4:	003b      	movs	r3, r7
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002fea:	003b      	movs	r3, r7
 8002fec:	2203      	movs	r2, #3
 8002fee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ff0:	003b      	movs	r3, r7
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ff6:	003b      	movs	r3, r7
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8002ffc:	003b      	movs	r3, r7
 8002ffe:	4a30      	ldr	r2, [pc, #192]	; (80030c0 <MX_GPIO_Init+0x2b0>)
 8003000:	0019      	movs	r1, r3
 8003002:	0010      	movs	r0, r2
 8003004:	f00b fa8e 	bl	800e524 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_1_Pin;
 8003008:	003b      	movs	r3, r7
 800300a:	2280      	movs	r2, #128	; 0x80
 800300c:	0112      	lsls	r2, r2, #4
 800300e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003010:	003b      	movs	r3, r7
 8003012:	2201      	movs	r2, #1
 8003014:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003016:	003b      	movs	r3, r7
 8003018:	2203      	movs	r2, #3
 800301a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800301c:	003b      	movs	r3, r7
 800301e:	2200      	movs	r2, #0
 8003020:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003022:	003b      	movs	r3, r7
 8003024:	2200      	movs	r2, #0
 8003026:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_1_GPIO_Port, &GPIO_InitStruct);
 8003028:	003a      	movs	r2, r7
 800302a:	23a0      	movs	r3, #160	; 0xa0
 800302c:	05db      	lsls	r3, r3, #23
 800302e:	0011      	movs	r1, r2
 8003030:	0018      	movs	r0, r3
 8003032:	f00b fa77 	bl	800e524 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_2_Pin;
 8003036:	003b      	movs	r3, r7
 8003038:	2280      	movs	r2, #128	; 0x80
 800303a:	0152      	lsls	r2, r2, #5
 800303c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800303e:	003b      	movs	r3, r7
 8003040:	2201      	movs	r2, #1
 8003042:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003044:	003b      	movs	r3, r7
 8003046:	2203      	movs	r2, #3
 8003048:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800304a:	003b      	movs	r3, r7
 800304c:	2200      	movs	r2, #0
 800304e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003050:	003b      	movs	r3, r7
 8003052:	2200      	movs	r2, #0
 8003054:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_2_GPIO_Port, &GPIO_InitStruct);
 8003056:	003a      	movs	r2, r7
 8003058:	23a0      	movs	r3, #160	; 0xa0
 800305a:	05db      	lsls	r3, r3, #23
 800305c:	0011      	movs	r1, r2
 800305e:	0018      	movs	r0, r3
 8003060:	f00b fa60 	bl	800e524 <LL_GPIO_Init>

  	  GPIO_InitStruct.Pin = KEY_4_Pin;
 8003064:	003b      	movs	r3, r7
 8003066:	2280      	movs	r2, #128	; 0x80
 8003068:	0192      	lsls	r2, r2, #6
 800306a:	601a      	str	r2, [r3, #0]
  	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800306c:	003b      	movs	r3, r7
 800306e:	2200      	movs	r2, #0
 8003070:	605a      	str	r2, [r3, #4]
  	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8003072:	003b      	movs	r3, r7
 8003074:	2201      	movs	r2, #1
 8003076:	611a      	str	r2, [r3, #16]
  	  LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8003078:	003a      	movs	r2, r7
 800307a:	23a0      	movs	r3, #160	; 0xa0
 800307c:	05db      	lsls	r3, r3, #23
 800307e:	0011      	movs	r1, r2
 8003080:	0018      	movs	r0, r3
 8003082:	f00b fa4f 	bl	800e524 <LL_GPIO_Init>
  	  /**/
  	    GPIO_InitStruct.Pin = KEY_5_Pin;
 8003086:	003b      	movs	r3, r7
 8003088:	2280      	movs	r2, #128	; 0x80
 800308a:	01d2      	lsls	r2, r2, #7
 800308c:	601a      	str	r2, [r3, #0]
  	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800308e:	003b      	movs	r3, r7
 8003090:	2200      	movs	r2, #0
 8003092:	605a      	str	r2, [r3, #4]
  	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8003094:	003b      	movs	r3, r7
 8003096:	2201      	movs	r2, #1
 8003098:	611a      	str	r2, [r3, #16]
  	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 800309a:	003a      	movs	r2, r7
 800309c:	23a0      	movs	r3, #160	; 0xa0
 800309e:	05db      	lsls	r3, r3, #23
 80030a0:	0011      	movs	r1, r2
 80030a2:	0018      	movs	r0, r3
 80030a4:	f00b fa3e 	bl	800e524 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 80030a8:	2380      	movs	r3, #128	; 0x80
 80030aa:	031b      	lsls	r3, r3, #12
 80030ac:	0018      	movs	r0, r3
 80030ae:	f7ff f949 	bl	8002344 <LL_SYSCFG_EnableFastModePlus>

}
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	46bd      	mov	sp, r7
 80030b6:	b006      	add	sp, #24
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	50000400 	.word	0x50000400
 80030c0:	50000800 	.word	0x50000800

080030c4 <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0

  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 80030c8:	4b16      	ldr	r3, [pc, #88]	; (8003124 <USART2_RX_Callback+0x60>)
 80030ca:	0018      	movs	r0, r3
 80030cc:	f7ff f92c 	bl	8002328 <LL_USART_ReceiveData9>
 80030d0:	0003      	movs	r3, r0
 80030d2:	001a      	movs	r2, r3
 80030d4:	4b14      	ldr	r3, [pc, #80]	; (8003128 <USART2_RX_Callback+0x64>)
 80030d6:	801a      	strh	r2, [r3, #0]
	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
 80030d8:	4b12      	ldr	r3, [pc, #72]	; (8003124 <USART2_RX_Callback+0x60>)
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	b29b      	uxth	r3, r3
 80030de:	05db      	lsls	r3, r3, #23
 80030e0:	0ddb      	lsrs	r3, r3, #23
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	4b10      	ldr	r3, [pc, #64]	; (8003128 <USART2_RX_Callback+0x64>)
 80030e6:	801a      	strh	r2, [r3, #0]
  ByteReceived=1;
 80030e8:	4b10      	ldr	r3, [pc, #64]	; (800312c <USART2_RX_Callback+0x68>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	701a      	strb	r2, [r3, #0]
  if(dt1>0xFF){
 80030ee:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <USART2_RX_Callback+0x64>)
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	2bff      	cmp	r3, #255	; 0xff
 80030f4:	d90a      	bls.n	800310c <USART2_RX_Callback+0x48>
	  cmd[0]=dt1;
 80030f6:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <USART2_RX_Callback+0x64>)
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <USART2_RX_Callback+0x6c>)
 80030fe:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 8003100:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <USART2_RX_Callback+0x70>)
 8003102:	2200      	movs	r2, #0
 8003104:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 8003106:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <USART2_RX_Callback+0x74>)
 8003108:	2201      	movs	r2, #1
 800310a:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 800310c:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <USART2_RX_Callback+0x74>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d104      	bne.n	800311e <USART2_RX_Callback+0x5a>
	  cmdReceive(dt1);
 8003114:	4b04      	ldr	r3, [pc, #16]	; (8003128 <USART2_RX_Callback+0x64>)
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	0018      	movs	r0, r3
 800311a:	f000 f843 	bl	80031a4 <cmdReceive>
  }
}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40004400 	.word	0x40004400
 8003128:	20001506 	.word	0x20001506
 800312c:	20000064 	.word	0x20000064
 8003130:	2000350c 	.word	0x2000350c
 8003134:	20000066 	.word	0x20000066
 8003138:	20000065 	.word	0x20000065

0800313c <HAL_USART_TxCpltCallback>:
//return;
//	}
}
//==============================================================
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart3)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= ~(1 << 7);	//reset dc
 8003144:	23a0      	movs	r3, #160	; 0xa0
 8003146:	05db      	lsls	r3, r3, #23
 8003148:	695a      	ldr	r2, [r3, #20]
 800314a:	23a0      	movs	r3, #160	; 0xa0
 800314c:	05db      	lsls	r3, r3, #23
 800314e:	2180      	movs	r1, #128	; 0x80
 8003150:	438a      	bics	r2, r1
 8003152:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= 1 << 6;	//set cs
 8003154:	23a0      	movs	r3, #160	; 0xa0
 8003156:	05db      	lsls	r3, r3, #23
 8003158:	695a      	ldr	r2, [r3, #20]
 800315a:	23a0      	movs	r3, #160	; 0xa0
 800315c:	05db      	lsls	r3, r3, #23
 800315e:	2140      	movs	r1, #64	; 0x40
 8003160:	430a      	orrs	r2, r1
 8003162:	615a      	str	r2, [r3, #20]
	cmd2Execute=0;
 8003164:	4b06      	ldr	r3, [pc, #24]	; (8003180 <HAL_USART_TxCpltCallback+0x44>)
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
//	while(BFEN==0){};
	GPIOC->ODR |= 1 << 6;	//set BF
 800316a:	4b06      	ldr	r3, [pc, #24]	; (8003184 <HAL_USART_TxCpltCallback+0x48>)
 800316c:	695a      	ldr	r2, [r3, #20]
 800316e:	4b05      	ldr	r3, [pc, #20]	; (8003184 <HAL_USART_TxCpltCallback+0x48>)
 8003170:	2140      	movs	r1, #64	; 0x40
 8003172:	430a      	orrs	r2, r1
 8003174:	615a      	str	r2, [r3, #20]
}
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	46bd      	mov	sp, r7
 800317a:	b002      	add	sp, #8
 800317c:	bd80      	pop	{r7, pc}
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	2000137b 	.word	0x2000137b
 8003184:	50000800 	.word	0x50000800

08003188 <HAL_I2S_TxCpltCallback>:
//	GPIOA->ODR |= 1 << 6;	//set cs		????????????????????????????????????????????????
	//	cmd2Execute=0;
//	GPIOC->ODR |= 1 << 6;	//set BF
}
//======================================================================================================================
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s1) {
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
//	if(numSound==1){
	soundReady=1;
 8003190:	4b03      	ldr	r3, [pc, #12]	; (80031a0 <HAL_I2S_TxCpltCallback+0x18>)
 8003192:	2201      	movs	r2, #1
 8003194:	701a      	strb	r2, [r3, #0]
//		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[1], 1, 50); //send address
//		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[0], 1, 50); //send address
//		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
//		curAddr+=sizeof(MEM_Buffer);
//    }
}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	46bd      	mov	sp, r7
 800319a:	b002      	add	sp, #8
 800319c:	bd80      	pop	{r7, pc}
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	20000034 	.word	0x20000034

080031a4 <cmdReceive>:
//=======================================================================================================================
	void cmdReceive (uint16_t dt1)
	{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	0002      	movs	r2, r0
 80031ac:	1dbb      	adds	r3, r7, #6
 80031ae:	801a      	strh	r2, [r3, #0]
//	  uint8_t inputCS=0;
	  uint8_t i=0;
 80031b0:	230f      	movs	r3, #15
 80031b2:	18fb      	adds	r3, r7, r3
 80031b4:	2200      	movs	r2, #0
 80031b6:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 80031b8:	46c0      	nop			; (mov r8, r8)
 80031ba:	4b2b      	ldr	r3, [pc, #172]	; (8003268 <cmdReceive+0xc4>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0fb      	beq.n	80031ba <cmdReceive+0x16>
	  ByteReceived=0;
 80031c2:	4b29      	ldr	r3, [pc, #164]	; (8003268 <cmdReceive+0xc4>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 80031c8:	4b28      	ldr	r3, [pc, #160]	; (800326c <cmdReceive+0xc8>)
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	001a      	movs	r2, r3
 80031ce:	1dbb      	adds	r3, r7, #6
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	b2d9      	uxtb	r1, r3
 80031d4:	4b26      	ldr	r3, [pc, #152]	; (8003270 <cmdReceive+0xcc>)
 80031d6:	5499      	strb	r1, [r3, r2]
//	  if(dt1==0x110){
//		  BFEN=0;
//	  }
	  ind++;
 80031d8:	4b24      	ldr	r3, [pc, #144]	; (800326c <cmdReceive+0xc8>)
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	3301      	adds	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	4b22      	ldr	r3, [pc, #136]	; (800326c <cmdReceive+0xc8>)
 80031e2:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 80031e4:	4b21      	ldr	r3, [pc, #132]	; (800326c <cmdReceive+0xc8>)
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d033      	beq.n	8003254 <cmdReceive+0xb0>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 80031ec:	4b1f      	ldr	r3, [pc, #124]	; (800326c <cmdReceive+0xc8>)
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	001a      	movs	r2, r3
 80031f2:	4b1f      	ldr	r3, [pc, #124]	; (8003270 <cmdReceive+0xcc>)
 80031f4:	785b      	ldrb	r3, [r3, #1]
 80031f6:	3301      	adds	r3, #1
 80031f8:	429a      	cmp	r2, r3
 80031fa:	dd2b      	ble.n	8003254 <cmdReceive+0xb0>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 80031fc:	230f      	movs	r3, #15
 80031fe:	18fb      	adds	r3, r7, r3
 8003200:	2200      	movs	r2, #0
 8003202:	701a      	strb	r2, [r3, #0]
 8003204:	e00f      	b.n	8003226 <cmdReceive+0x82>
				 inputCS+=cmd[i];
 8003206:	210f      	movs	r1, #15
 8003208:	187b      	adds	r3, r7, r1
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	4a18      	ldr	r2, [pc, #96]	; (8003270 <cmdReceive+0xcc>)
 800320e:	5cd2      	ldrb	r2, [r2, r3]
 8003210:	4b18      	ldr	r3, [pc, #96]	; (8003274 <cmdReceive+0xd0>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	18d3      	adds	r3, r2, r3
 8003216:	b2da      	uxtb	r2, r3
 8003218:	4b16      	ldr	r3, [pc, #88]	; (8003274 <cmdReceive+0xd0>)
 800321a:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 800321c:	187b      	adds	r3, r7, r1
 800321e:	781a      	ldrb	r2, [r3, #0]
 8003220:	187b      	adds	r3, r7, r1
 8003222:	3201      	adds	r2, #1
 8003224:	701a      	strb	r2, [r3, #0]
 8003226:	4b12      	ldr	r3, [pc, #72]	; (8003270 <cmdReceive+0xcc>)
 8003228:	785b      	ldrb	r3, [r3, #1]
 800322a:	1c5a      	adds	r2, r3, #1
 800322c:	210f      	movs	r1, #15
 800322e:	187b      	adds	r3, r7, r1
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	dae7      	bge.n	8003206 <cmdReceive+0x62>
			 }
			 if((inputCS==0)&&(i==cmd[1]+2)){
 8003236:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <cmdReceive+0xd0>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10a      	bne.n	8003254 <cmdReceive+0xb0>
 800323e:	187b      	adds	r3, r7, r1
 8003240:	781a      	ldrb	r2, [r3, #0]
 8003242:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <cmdReceive+0xcc>)
 8003244:	785b      	ldrb	r3, [r3, #1]
 8003246:	3302      	adds	r3, #2
 8003248:	429a      	cmp	r2, r3
 800324a:	d103      	bne.n	8003254 <cmdReceive+0xb0>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 	answer2CPU(cmd);
 800324c:	4b08      	ldr	r3, [pc, #32]	; (8003270 <cmdReceive+0xcc>)
 800324e:	0018      	movs	r0, r3
 8003250:	f000 faa4 	bl	800379c <answer2CPU>
//				 GPIOC->ODR |= 1 << 6;	//set BF
//			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 8003254:	4b08      	ldr	r3, [pc, #32]	; (8003278 <cmdReceive+0xd4>)
 8003256:	6a1a      	ldr	r2, [r3, #32]
 8003258:	4b07      	ldr	r3, [pc, #28]	; (8003278 <cmdReceive+0xd4>)
 800325a:	2108      	movs	r1, #8
 800325c:	430a      	orrs	r2, r1
 800325e:	621a      	str	r2, [r3, #32]
	}
 8003260:	46c0      	nop			; (mov r8, r8)
 8003262:	46bd      	mov	sp, r7
 8003264:	b004      	add	sp, #16
 8003266:	bd80      	pop	{r7, pc}
 8003268:	20000064 	.word	0x20000064
 800326c:	20000066 	.word	0x20000066
 8003270:	2000350c 	.word	0x2000350c
 8003274:	20000068 	.word	0x20000068
 8003278:	40004400 	.word	0x40004400

0800327c <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	0002      	movs	r2, r0
 8003284:	1dfb      	adds	r3, r7, #7
 8003286:	701a      	strb	r2, [r3, #0]
			HAL_USART_Transmit(&husart3, (uint8_t*)&byte, 1, 10);
 8003288:	1df9      	adds	r1, r7, #7
 800328a:	4804      	ldr	r0, [pc, #16]	; (800329c <USART_AS_SPI_sendCMD+0x20>)
 800328c:	230a      	movs	r3, #10
 800328e:	2201      	movs	r2, #1
 8003290:	f00a fab6 	bl	800d800 <HAL_USART_Transmit>
		}
 8003294:	46c0      	nop			; (mov r8, r8)
 8003296:	46bd      	mov	sp, r7
 8003298:	b002      	add	sp, #8
 800329a:	bd80      	pop	{r7, pc}
 800329c:	200002a4 	.word	0x200002a4

080032a0 <weoInit>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 10);
	}
	void weoInit(void) {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0

		USART3->CR1 &= ~(USART_CR1_UE);
 80032a4:	4b32      	ldr	r3, [pc, #200]	; (8003370 <weoInit+0xd0>)
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	4b31      	ldr	r3, [pc, #196]	; (8003370 <weoInit+0xd0>)
 80032aa:	2101      	movs	r1, #1
 80032ac:	438a      	bics	r2, r1
 80032ae:	601a      	str	r2, [r3, #0]
		USART3->CR2 |= USART_CR2_MSBFIRST;
 80032b0:	4b2f      	ldr	r3, [pc, #188]	; (8003370 <weoInit+0xd0>)
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	4b2e      	ldr	r3, [pc, #184]	; (8003370 <weoInit+0xd0>)
 80032b6:	2180      	movs	r1, #128	; 0x80
 80032b8:	0309      	lsls	r1, r1, #12
 80032ba:	430a      	orrs	r2, r1
 80032bc:	605a      	str	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_UE;
 80032be:	4b2c      	ldr	r3, [pc, #176]	; (8003370 <weoInit+0xd0>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	4b2b      	ldr	r3, [pc, #172]	; (8003370 <weoInit+0xd0>)
 80032c4:	2101      	movs	r1, #1
 80032c6:	430a      	orrs	r2, r1
 80032c8:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 80032ca:	2001      	movs	r0, #1
 80032cc:	f004 f9c6 	bl	800765c <HAL_Delay>
		HAL_Delay(1);
 80032d0:	2001      	movs	r0, #1
 80032d2:	f004 f9c3 	bl	800765c <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80032d6:	4b27      	ldr	r3, [pc, #156]	; (8003374 <weoInit+0xd4>)
 80032d8:	2100      	movs	r1, #0
 80032da:	0018      	movs	r0, r3
 80032dc:	f009 f9dc 	bl	800c698 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 80032e0:	2001      	movs	r0, #1
 80032e2:	f004 f9bb 	bl	800765c <HAL_Delay>

		GPIOA->ODR &= ~(1 << 6);	//reset cs
 80032e6:	23a0      	movs	r3, #160	; 0xa0
 80032e8:	05db      	lsls	r3, r3, #23
 80032ea:	695a      	ldr	r2, [r3, #20]
 80032ec:	23a0      	movs	r3, #160	; 0xa0
 80032ee:	05db      	lsls	r3, r3, #23
 80032f0:	2140      	movs	r1, #64	; 0x40
 80032f2:	438a      	bics	r2, r1
 80032f4:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 80032f6:	23a0      	movs	r3, #160	; 0xa0
 80032f8:	05db      	lsls	r3, r3, #23
 80032fa:	695a      	ldr	r2, [r3, #20]
 80032fc:	23a0      	movs	r3, #160	; 0xa0
 80032fe:	05db      	lsls	r3, r3, #23
 8003300:	2180      	movs	r1, #128	; 0x80
 8003302:	438a      	bics	r2, r1
 8003304:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 8003306:	20af      	movs	r0, #175	; 0xaf
 8003308:	f7ff ffb8 	bl	800327c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 800330c:	20a0      	movs	r0, #160	; 0xa0
 800330e:	f7ff ffb5 	bl	800327c <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0b00010100);
		USART_AS_SPI_sendCMD(0x51); //	0x51 is a proper remap!
 8003312:	2051      	movs	r0, #81	; 0x51
 8003314:	f7ff ffb2 	bl	800327c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8003318:	2081      	movs	r0, #129	; 0x81
 800331a:	f7ff ffaf 	bl	800327c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 800331e:	20ff      	movs	r0, #255	; 0xff
 8003320:	f7ff ffac 	bl	800327c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 8003324:	20a1      	movs	r0, #161	; 0xa1
 8003326:	f7ff ffa9 	bl	800327c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 800332a:	2000      	movs	r0, #0
 800332c:	f7ff ffa6 	bl	800327c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 8003330:	20a2      	movs	r0, #162	; 0xa2
 8003332:	f7ff ffa3 	bl	800327c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 8003336:	2000      	movs	r0, #0
 8003338:	f7ff ffa0 	bl	800327c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 800333c:	20a8      	movs	r0, #168	; 0xa8
 800333e:	f7ff ff9d 	bl	800327c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 8003342:	207f      	movs	r0, #127	; 0x7f
 8003344:	f7ff ff9a 	bl	800327c <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 8003348:	23a0      	movs	r3, #160	; 0xa0
 800334a:	05db      	lsls	r3, r3, #23
 800334c:	695a      	ldr	r2, [r3, #20]
 800334e:	23a0      	movs	r3, #160	; 0xa0
 8003350:	05db      	lsls	r3, r3, #23
 8003352:	2180      	movs	r1, #128	; 0x80
 8003354:	430a      	orrs	r2, r1
 8003356:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 8003358:	23a0      	movs	r3, #160	; 0xa0
 800335a:	05db      	lsls	r3, r3, #23
 800335c:	695a      	ldr	r2, [r3, #20]
 800335e:	23a0      	movs	r3, #160	; 0xa0
 8003360:	05db      	lsls	r3, r3, #23
 8003362:	2140      	movs	r1, #64	; 0x40
 8003364:	430a      	orrs	r2, r1
 8003366:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 8003368:	46c0      	nop			; (mov r8, r8)
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	40004800 	.word	0x40004800
 8003374:	20001320 	.word	0x20001320

08003378 <weoClear>:
	void weoClear(void) {
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
		uint16_t i;

					GPIOA->ODR &= ~(1 << 6);	//reset cs
 800337e:	23a0      	movs	r3, #160	; 0xa0
 8003380:	05db      	lsls	r3, r3, #23
 8003382:	695a      	ldr	r2, [r3, #20]
 8003384:	23a0      	movs	r3, #160	; 0xa0
 8003386:	05db      	lsls	r3, r3, #23
 8003388:	2140      	movs	r1, #64	; 0x40
 800338a:	438a      	bics	r2, r1
 800338c:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 7);	// reset dc
 800338e:	23a0      	movs	r3, #160	; 0xa0
 8003390:	05db      	lsls	r3, r3, #23
 8003392:	695a      	ldr	r2, [r3, #20]
 8003394:	23a0      	movs	r3, #160	; 0xa0
 8003396:	05db      	lsls	r3, r3, #23
 8003398:	2180      	movs	r1, #128	; 0x80
 800339a:	438a      	bics	r2, r1
 800339c:	615a      	str	r2, [r3, #20]
						USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 800339e:	2075      	movs	r0, #117	; 0x75
 80033a0:	f7ff ff6c 	bl	800327c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 80033a4:	2000      	movs	r0, #0
 80033a6:	f7ff ff69 	bl	800327c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 80033aa:	207f      	movs	r0, #127	; 0x7f
 80033ac:	f7ff ff66 	bl	800327c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 80033b0:	2015      	movs	r0, #21
 80033b2:	f7ff ff63 	bl	800327c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 80033b6:	2000      	movs	r0, #0
 80033b8:	f7ff ff60 	bl	800327c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 80033bc:	207f      	movs	r0, #127	; 0x7f
 80033be:	f7ff ff5d 	bl	800327c <USART_AS_SPI_sendCMD>
					GPIOA->ODR &= ~(1 << 6);	//reset cs
 80033c2:	23a0      	movs	r3, #160	; 0xa0
 80033c4:	05db      	lsls	r3, r3, #23
 80033c6:	695a      	ldr	r2, [r3, #20]
 80033c8:	23a0      	movs	r3, #160	; 0xa0
 80033ca:	05db      	lsls	r3, r3, #23
 80033cc:	2140      	movs	r1, #64	; 0x40
 80033ce:	438a      	bics	r2, r1
 80033d0:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 7;	// set dc
 80033d2:	23a0      	movs	r3, #160	; 0xa0
 80033d4:	05db      	lsls	r3, r3, #23
 80033d6:	695a      	ldr	r2, [r3, #20]
 80033d8:	23a0      	movs	r3, #160	; 0xa0
 80033da:	05db      	lsls	r3, r3, #23
 80033dc:	2180      	movs	r1, #128	; 0x80
 80033de:	430a      	orrs	r2, r1
 80033e0:	615a      	str	r2, [r3, #20]
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 80033e2:	1dbb      	adds	r3, r7, #6
 80033e4:	2200      	movs	r2, #0
 80033e6:	801a      	strh	r2, [r3, #0]
 80033e8:	e00d      	b.n	8003406 <weoClear+0x8e>
						while(!(USART3->ISR & USART_ISR_TXE)){};
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	4b12      	ldr	r3, [pc, #72]	; (8003438 <weoClear+0xc0>)
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	2280      	movs	r2, #128	; 0x80
 80033f2:	4013      	ands	r3, r2
 80033f4:	d0fa      	beq.n	80033ec <weoClear+0x74>
						USART3->TDR = (uint8_t) 0x00;
 80033f6:	4b10      	ldr	r3, [pc, #64]	; (8003438 <weoClear+0xc0>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	629a      	str	r2, [r3, #40]	; 0x28
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 80033fc:	1dbb      	adds	r3, r7, #6
 80033fe:	881a      	ldrh	r2, [r3, #0]
 8003400:	1dbb      	adds	r3, r7, #6
 8003402:	3201      	adds	r2, #1
 8003404:	801a      	strh	r2, [r3, #0]
 8003406:	1dbb      	adds	r3, r7, #6
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	4a0c      	ldr	r2, [pc, #48]	; (800343c <weoClear+0xc4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d9ec      	bls.n	80033ea <weoClear+0x72>
					}
					GPIOA->ODR &= ~(1 << 7);	//reset dc
 8003410:	23a0      	movs	r3, #160	; 0xa0
 8003412:	05db      	lsls	r3, r3, #23
 8003414:	695a      	ldr	r2, [r3, #20]
 8003416:	23a0      	movs	r3, #160	; 0xa0
 8003418:	05db      	lsls	r3, r3, #23
 800341a:	2180      	movs	r1, #128	; 0x80
 800341c:	438a      	bics	r2, r1
 800341e:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 8003420:	23a0      	movs	r3, #160	; 0xa0
 8003422:	05db      	lsls	r3, r3, #23
 8003424:	695a      	ldr	r2, [r3, #20]
 8003426:	23a0      	movs	r3, #160	; 0xa0
 8003428:	05db      	lsls	r3, r3, #23
 800342a:	2140      	movs	r1, #64	; 0x40
 800342c:	430a      	orrs	r2, r1
 800342e:	615a      	str	r2, [r3, #20]
	}
 8003430:	46c0      	nop			; (mov r8, r8)
 8003432:	46bd      	mov	sp, r7
 8003434:	b002      	add	sp, #8
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40004800 	.word	0x40004800
 800343c:	00002001 	.word	0x00002001

08003440 <weoDrawRectangleFilled>:
//========================================================================================================================
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char contrast,
				uint8_t MEM_Buffer[]) {
 8003440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	0005      	movs	r5, r0
 8003448:	000c      	movs	r4, r1
 800344a:	0010      	movs	r0, r2
 800344c:	0019      	movs	r1, r3
 800344e:	1dfb      	adds	r3, r7, #7
 8003450:	1c2a      	adds	r2, r5, #0
 8003452:	701a      	strb	r2, [r3, #0]
 8003454:	1dbb      	adds	r3, r7, #6
 8003456:	1c22      	adds	r2, r4, #0
 8003458:	701a      	strb	r2, [r3, #0]
 800345a:	1d7b      	adds	r3, r7, #5
 800345c:	1c02      	adds	r2, r0, #0
 800345e:	701a      	strb	r2, [r3, #0]
 8003460:	1d3b      	adds	r3, r7, #4
 8003462:	1c0a      	adds	r2, r1, #0
 8003464:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 8003466:	240e      	movs	r4, #14
 8003468:	193b      	adds	r3, r7, r4
 800346a:	2200      	movs	r2, #0
 800346c:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 800346e:	1dfb      	adds	r3, r7, #7
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	b25b      	sxtb	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	da00      	bge.n	800347a <weoDrawRectangleFilled+0x3a>
 8003478:	e0bf      	b.n	80035fa <weoDrawRectangleFilled+0x1ba>
 800347a:	1dbb      	adds	r3, r7, #6
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	b25b      	sxtb	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	da00      	bge.n	8003486 <weoDrawRectangleFilled+0x46>
 8003484:	e0b9      	b.n	80035fa <weoDrawRectangleFilled+0x1ba>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 8003486:	1d7b      	adds	r3, r7, #5
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	b25b      	sxtb	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	da00      	bge.n	8003492 <weoDrawRectangleFilled+0x52>
 8003490:	e0b3      	b.n	80035fa <weoDrawRectangleFilled+0x1ba>
 8003492:	1d3b      	adds	r3, r7, #4
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	b25b      	sxtb	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	da00      	bge.n	800349e <weoDrawRectangleFilled+0x5e>
 800349c:	e0ad      	b.n	80035fa <weoDrawRectangleFilled+0x1ba>
				return;
			}

			start_x_New=start_x;
 800349e:	250d      	movs	r5, #13
 80034a0:	197b      	adds	r3, r7, r5
 80034a2:	1dfa      	adds	r2, r7, #7
 80034a4:	7812      	ldrb	r2, [r2, #0]
 80034a6:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 80034a8:	260c      	movs	r6, #12
 80034aa:	19bb      	adds	r3, r7, r6
 80034ac:	1d3a      	adds	r2, r7, #4
 80034ae:	7812      	ldrb	r2, [r2, #0]
 80034b0:	217f      	movs	r1, #127	; 0x7f
 80034b2:	1a8a      	subs	r2, r1, r2
 80034b4:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 80034b6:	230b      	movs	r3, #11
 80034b8:	18fb      	adds	r3, r7, r3
 80034ba:	1d7a      	adds	r2, r7, #5
 80034bc:	7812      	ldrb	r2, [r2, #0]
 80034be:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 80034c0:	220a      	movs	r2, #10
 80034c2:	18bb      	adds	r3, r7, r2
 80034c4:	1dba      	adds	r2, r7, #6
 80034c6:	7812      	ldrb	r2, [r2, #0]
 80034c8:	217f      	movs	r1, #127	; 0x7f
 80034ca:	1a8a      	subs	r2, r1, r2
 80034cc:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80034ce:	23a0      	movs	r3, #160	; 0xa0
 80034d0:	05db      	lsls	r3, r3, #23
 80034d2:	695a      	ldr	r2, [r3, #20]
 80034d4:	23a0      	movs	r3, #160	; 0xa0
 80034d6:	05db      	lsls	r3, r3, #23
 80034d8:	2140      	movs	r1, #64	; 0x40
 80034da:	438a      	bics	r2, r1
 80034dc:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 80034de:	23a0      	movs	r3, #160	; 0xa0
 80034e0:	05db      	lsls	r3, r3, #23
 80034e2:	695a      	ldr	r2, [r3, #20]
 80034e4:	23a0      	movs	r3, #160	; 0xa0
 80034e6:	05db      	lsls	r3, r3, #23
 80034e8:	2180      	movs	r1, #128	; 0x80
 80034ea:	438a      	bics	r2, r1
 80034ec:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 80034ee:	2075      	movs	r0, #117	; 0x75
 80034f0:	f7ff fec4 	bl	800327c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 80034f4:	197b      	adds	r3, r7, r5
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	0018      	movs	r0, r3
 80034fa:	f7ff febf 	bl	800327c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 80034fe:	230b      	movs	r3, #11
 8003500:	18fb      	adds	r3, r7, r3
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	0018      	movs	r0, r3
 8003506:	f7ff feb9 	bl	800327c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 800350a:	2015      	movs	r0, #21
 800350c:	f7ff feb6 	bl	800327c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 8003510:	19bb      	adds	r3, r7, r6
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	085b      	lsrs	r3, r3, #1
 8003516:	b2db      	uxtb	r3, r3
 8003518:	0018      	movs	r0, r3
 800351a:	f7ff feaf 	bl	800327c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 800351e:	220a      	movs	r2, #10
 8003520:	18bb      	adds	r3, r7, r2
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	085b      	lsrs	r3, r3, #1
 8003526:	b2db      	uxtb	r3, r3
 8003528:	0018      	movs	r0, r3
 800352a:	f7ff fea7 	bl	800327c <USART_AS_SPI_sendCMD>
//					USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//					USART_AS_SPI_sendCMD(contrast);
			GPIOA->ODR |= 1 << 7;	//set dc
 800352e:	23a0      	movs	r3, #160	; 0xa0
 8003530:	05db      	lsls	r3, r3, #23
 8003532:	695a      	ldr	r2, [r3, #20]
 8003534:	23a0      	movs	r3, #160	; 0xa0
 8003536:	05db      	lsls	r3, r3, #23
 8003538:	2180      	movs	r1, #128	; 0x80
 800353a:	430a      	orrs	r2, r1
 800353c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 800353e:	23a0      	movs	r3, #160	; 0xa0
 8003540:	05db      	lsls	r3, r3, #23
 8003542:	695a      	ldr	r2, [r3, #20]
 8003544:	23a0      	movs	r3, #160	; 0xa0
 8003546:	05db      	lsls	r3, r3, #23
 8003548:	2140      	movs	r1, #64	; 0x40
 800354a:	430a      	orrs	r2, r1
 800354c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 800354e:	23a0      	movs	r3, #160	; 0xa0
 8003550:	05db      	lsls	r3, r3, #23
 8003552:	695a      	ldr	r2, [r3, #20]
 8003554:	23a0      	movs	r3, #160	; 0xa0
 8003556:	05db      	lsls	r3, r3, #23
 8003558:	2140      	movs	r1, #64	; 0x40
 800355a:	438a      	bics	r2, r1
 800355c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 800355e:	23a0      	movs	r3, #160	; 0xa0
 8003560:	05db      	lsls	r3, r3, #23
 8003562:	695a      	ldr	r2, [r3, #20]
 8003564:	23a0      	movs	r3, #160	; 0xa0
 8003566:	05db      	lsls	r3, r3, #23
 8003568:	2180      	movs	r1, #128	; 0x80
 800356a:	430a      	orrs	r2, r1
 800356c:	615a      	str	r2, [r3, #20]

			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 800356e:	193b      	adds	r3, r7, r4
 8003570:	2200      	movs	r2, #0
 8003572:	801a      	strh	r2, [r3, #0]
 8003574:	e012      	b.n	800359c <weoDrawRectangleFilled+0x15c>
//			for (i = 0; i < len;i++) {
				while(!(USART3->ISR & USART_ISR_TXE)){};
 8003576:	46c0      	nop			; (mov r8, r8)
 8003578:	4b22      	ldr	r3, [pc, #136]	; (8003604 <weoDrawRectangleFilled+0x1c4>)
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	2280      	movs	r2, #128	; 0x80
 800357e:	4013      	ands	r3, r2
 8003580:	d0fa      	beq.n	8003578 <weoDrawRectangleFilled+0x138>
				USART3->TDR =MEM_Buffer[i];
 8003582:	210e      	movs	r1, #14
 8003584:	187b      	adds	r3, r7, r1
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800358a:	18d3      	adds	r3, r2, r3
 800358c:	781a      	ldrb	r2, [r3, #0]
 800358e:	4b1d      	ldr	r3, [pc, #116]	; (8003604 <weoDrawRectangleFilled+0x1c4>)
 8003590:	629a      	str	r2, [r3, #40]	; 0x28
			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 8003592:	187b      	adds	r3, r7, r1
 8003594:	881a      	ldrh	r2, [r3, #0]
 8003596:	187b      	adds	r3, r7, r1
 8003598:	3201      	adds	r2, #1
 800359a:	801a      	strh	r2, [r3, #0]
 800359c:	230e      	movs	r3, #14
 800359e:	18fb      	adds	r3, r7, r3
 80035a0:	881a      	ldrh	r2, [r3, #0]
 80035a2:	230b      	movs	r3, #11
 80035a4:	18fb      	adds	r3, r7, r3
 80035a6:	7819      	ldrb	r1, [r3, #0]
 80035a8:	230d      	movs	r3, #13
 80035aa:	18fb      	adds	r3, r7, r3
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	1acb      	subs	r3, r1, r3
 80035b0:	3301      	adds	r3, #1
 80035b2:	210a      	movs	r1, #10
 80035b4:	1879      	adds	r1, r7, r1
 80035b6:	7809      	ldrb	r1, [r1, #0]
 80035b8:	0849      	lsrs	r1, r1, #1
 80035ba:	b2c9      	uxtb	r1, r1
 80035bc:	0008      	movs	r0, r1
 80035be:	210c      	movs	r1, #12
 80035c0:	1879      	adds	r1, r7, r1
 80035c2:	7809      	ldrb	r1, [r1, #0]
 80035c4:	0849      	lsrs	r1, r1, #1
 80035c6:	b2c9      	uxtb	r1, r1
 80035c8:	1a41      	subs	r1, r0, r1
 80035ca:	3101      	adds	r1, #1
 80035cc:	434b      	muls	r3, r1
 80035ce:	429a      	cmp	r2, r3
 80035d0:	dbd1      	blt.n	8003576 <weoDrawRectangleFilled+0x136>
			}
//			while(!(USART3->ISR & USART_ISR_TXE)){};
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 80035d2:	23a0      	movs	r3, #160	; 0xa0
 80035d4:	05db      	lsls	r3, r3, #23
 80035d6:	695a      	ldr	r2, [r3, #20]
 80035d8:	23a0      	movs	r3, #160	; 0xa0
 80035da:	05db      	lsls	r3, r3, #23
 80035dc:	2180      	movs	r1, #128	; 0x80
 80035de:	438a      	bics	r2, r1
 80035e0:	615a      	str	r2, [r3, #20]
//			USART_AS_SPI_sendCMD(0xBB);	// command for NOP
//			USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//			USART_AS_SPI_sendCMD(0xFF);
			HAL_Delay(1);
 80035e2:	2001      	movs	r0, #1
 80035e4:	f004 f83a 	bl	800765c <HAL_Delay>
//			GPIOA->ODR &= ~(1 << 7);	//reset dc
			GPIOA->ODR |= 1 << 6;	//set cs
 80035e8:	23a0      	movs	r3, #160	; 0xa0
 80035ea:	05db      	lsls	r3, r3, #23
 80035ec:	695a      	ldr	r2, [r3, #20]
 80035ee:	23a0      	movs	r3, #160	; 0xa0
 80035f0:	05db      	lsls	r3, r3, #23
 80035f2:	2140      	movs	r1, #64	; 0x40
 80035f4:	430a      	orrs	r2, r1
 80035f6:	615a      	str	r2, [r3, #20]
 80035f8:	e000      	b.n	80035fc <weoDrawRectangleFilled+0x1bc>
				return;
 80035fa:	46c0      	nop			; (mov r8, r8)
		}
 80035fc:	46bd      	mov	sp, r7
 80035fe:	b005      	add	sp, #20
 8003600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	40004800 	.word	0x40004800

08003608 <I2C_SOUND_ChangePage>:
//		LL_GPIO_ResetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
//		LL_GPIO_SetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
	}
	void I2C_SOUND_ChangePage(uint8_t pageNum) {
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af02      	add	r7, sp, #8
 800360e:	0002      	movs	r2, r0
 8003610:	1dfb      	adds	r3, r7, #7
 8003612:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { 0x00, pageNum };
 8003614:	210c      	movs	r1, #12
 8003616:	187b      	adds	r3, r7, r1
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
 800361c:	187b      	adds	r3, r7, r1
 800361e:	1dfa      	adds	r2, r7, #7
 8003620:	7812      	ldrb	r2, [r2, #0]
 8003622:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);
 8003624:	187a      	adds	r2, r7, r1
 8003626:	4806      	ldr	r0, [pc, #24]	; (8003640 <I2C_SOUND_ChangePage+0x38>)
 8003628:	23fa      	movs	r3, #250	; 0xfa
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	2302      	movs	r3, #2
 8003630:	2130      	movs	r1, #48	; 0x30
 8003632:	f005 f84d 	bl	80086d0 <HAL_I2C_Master_Transmit>
	}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	46bd      	mov	sp, r7
 800363a:	b004      	add	sp, #16
 800363c:	bd80      	pop	{r7, pc}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	20000144 	.word	0x20000144

08003644 <WriteReg_I2C_SOUND>:
	void WriteReg_I2C_SOUND(uint8_t reg, uint8_t data) {
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af02      	add	r7, sp, #8
 800364a:	0002      	movs	r2, r0
 800364c:	1dfb      	adds	r3, r7, #7
 800364e:	701a      	strb	r2, [r3, #0]
 8003650:	1dbb      	adds	r3, r7, #6
 8003652:	1c0a      	adds	r2, r1, #0
 8003654:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 8003656:	210c      	movs	r1, #12
 8003658:	187b      	adds	r3, r7, r1
 800365a:	1dfa      	adds	r2, r7, #7
 800365c:	7812      	ldrb	r2, [r2, #0]
 800365e:	701a      	strb	r2, [r3, #0]
 8003660:	187b      	adds	r3, r7, r1
 8003662:	1dba      	adds	r2, r7, #6
 8003664:	7812      	ldrb	r2, [r2, #0]
 8003666:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);	//(uint8_t*)&
 8003668:	187a      	adds	r2, r7, r1
 800366a:	4806      	ldr	r0, [pc, #24]	; (8003684 <WriteReg_I2C_SOUND+0x40>)
 800366c:	23fa      	movs	r3, #250	; 0xfa
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	2302      	movs	r3, #2
 8003674:	2130      	movs	r1, #48	; 0x30
 8003676:	f005 f82b 	bl	80086d0 <HAL_I2C_Master_Transmit>
	}
 800367a:	46c0      	nop			; (mov r8, r8)
 800367c:	46bd      	mov	sp, r7
 800367e:	b004      	add	sp, #16
 8003680:	bd80      	pop	{r7, pc}
 8003682:	46c0      	nop			; (mov r8, r8)
 8003684:	20000144 	.word	0x20000144

08003688 <soundSetup>:
	void soundSetup(void) {
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
		I2C_SOUND_ChangePage(0x00);
 800368c:	2000      	movs	r0, #0
 800368e:	f7ff ffbb 	bl	8003608 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x01);	//Assert Software reset (P0, R1, D0=1)
 8003692:	2101      	movs	r1, #1
 8003694:	2001      	movs	r0, #1
 8003696:	f7ff ffd5 	bl	8003644 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 800369a:	2001      	movs	r0, #1
 800369c:	f7ff ffb4 	bl	8003608 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x02, 0x00);	//LDO output programmed as 1.8V and Level shifters powered up. (P1, R2, D5-D4=00, D3=0)
 80036a0:	2100      	movs	r1, #0
 80036a2:	2002      	movs	r0, #2
 80036a4:	f7ff ffce 	bl	8003644 <WriteReg_I2C_SOUND>
		HAL_Delay(15);
 80036a8:	200f      	movs	r0, #15
 80036aa:	f003 ffd7 	bl	800765c <HAL_Delay>
		I2C_SOUND_ChangePage(0x00);
 80036ae:	2000      	movs	r0, #0
 80036b0:	f7ff ffaa 	bl	8003608 <I2C_SOUND_ChangePage>
	WriteReg_I2C_SOUND(0x04,0x03);//PLL_clkin = MCLK, codec_clkin = PLL_CLK, MCLK should be 11.2896MHz
 80036b4:	2103      	movs	r1, #3
 80036b6:	2004      	movs	r0, #4
 80036b8:	f7ff ffc4 	bl	8003644 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x05,0x91);//Power up PLL, set P=1, R=1
 80036bc:	2191      	movs	r1, #145	; 0x91
 80036be:	2005      	movs	r0, #5
 80036c0:	f7ff ffc0 	bl	8003644 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x06,0x04);//Set J = 4
 80036c4:	2104      	movs	r1, #4
 80036c6:	2006      	movs	r0, #6
 80036c8:	f7ff ffbc 	bl	8003644 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x07,0x00);//SET D=0000
 80036cc:	2100      	movs	r1, #0
 80036ce:	2007      	movs	r0, #7
 80036d0:	f7ff ffb8 	bl	8003644 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x08,0x00);//SET D=0000
 80036d4:	2100      	movs	r1, #0
 80036d6:	2008      	movs	r0, #8
 80036d8:	f7ff ffb4 	bl	8003644 <WriteReg_I2C_SOUND>
	HAL_Delay(15);
 80036dc:	200f      	movs	r0, #15
 80036de:	f003 ffbd 	bl	800765c <HAL_Delay>
	WriteReg_I2C_SOUND(0x0B,0x84);//DAC NDAC Powered up, set NDAC = 4
 80036e2:	2184      	movs	r1, #132	; 0x84
 80036e4:	200b      	movs	r0, #11
 80036e6:	f7ff ffad 	bl	8003644 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0C,0x82);//DAC MDAC Powered up, set MDAC = 2
 80036ea:	2182      	movs	r1, #130	; 0x82
 80036ec:	200c      	movs	r0, #12
 80036ee:	f7ff ffa9 	bl	8003644 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0D,0x00);//DAC OSR(9:0)-> DOSR=128
 80036f2:	2100      	movs	r1, #0
 80036f4:	200d      	movs	r0, #13
 80036f6:	f7ff ffa5 	bl	8003644 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0E,0x80);//DAC OSR(9:0)
 80036fa:	2180      	movs	r1, #128	; 0x80
 80036fc:	200e      	movs	r0, #14
 80036fe:	f7ff ffa1 	bl	8003644 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x1B, 0x00);	//Codec Interface control Word length = 16bits, BCLK&WCLK inputs, I2S mode. (P0, R27, D7-D6=00, D5-D4=00, D3-D2=00)
 8003702:	2100      	movs	r1, #0
 8003704:	201b      	movs	r0, #27
 8003706:	f7ff ff9d 	bl	8003644 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x1C,0x00);//Data slot offset
 800370a:	2100      	movs	r1, #0
 800370c:	201c      	movs	r0, #28
 800370e:	f7ff ff99 	bl	8003644 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x3c,0x02);//Dac Instruction programming PRB #2 for Mono routing. Type interpolation (x8) and 3 programmable	Biquads. (P0, R60, D4-D0=0010)
 8003712:	2102      	movs	r1, #2
 8003714:	203c      	movs	r0, #60	; 0x3c
 8003716:	f7ff ff95 	bl	8003644 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 800371a:	2001      	movs	r0, #1
 800371c:	f7ff ff74 	bl	8003608 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x10);	//Master Reference Powered on (P1, R1, D4=1)
 8003720:	2110      	movs	r1, #16
 8003722:	2001      	movs	r0, #1
 8003724:	f7ff ff8e 	bl	8003644 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x0A, 0x00);	//Output common mode for DAC set to 0.9V (default) (P1, R10)
 8003728:	2100      	movs	r1, #0
 800372a:	200a      	movs	r0, #10
 800372c:	f7ff ff8a 	bl	8003644 <WriteReg_I2C_SOUND>
		////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x0C, 0x00);	// No analog routing to headphone//0x0c,0x15 by SB
 8003730:	2100      	movs	r1, #0
 8003732:	200c      	movs	r0, #12
 8003734:	f7ff ff86 	bl	8003644 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x16, 0x00);	// Headphone volume=0//0x16,0x75 by SB
 8003738:	2100      	movs	r1, #0
 800373a:	2016      	movs	r0, #22
 800373c:	f7ff ff82 	bl	8003644 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x18, 0x00);	//No need to enable Mixer M and Mixer P, AINL Voulme, 0dB Gain 0x18,0x75 by SB
 8003740:	2100      	movs	r1, #0
 8003742:	2018      	movs	r0, #24
 8003744:	f7ff ff7e 	bl	8003644 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x19, 0x00);	//No need to enable Mixer M and Mixer P, AINR Voulme, 0dB Gain 0x19,0x75 by SB
 8003748:	2100      	movs	r1, #0
 800374a:	2019      	movs	r0, #25
 800374c:	f7ff ff7a 	bl	8003644 <WriteReg_I2C_SOUND>
		//////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x09, 0x00);	//AINL,AINR are powered down
 8003750:	2100      	movs	r1, #0
 8003752:	2009      	movs	r0, #9
 8003754:	f7ff ff76 	bl	8003644 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 8003758:	2100      	movs	r1, #0
 800375a:	2010      	movs	r0, #16
 800375c:	f7ff ff72 	bl	8003644 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x00);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000)
 8003760:	2100      	movs	r1, #0
 8003762:	202e      	movs	r0, #46	; 0x2e
 8003764:	f7ff ff6e 	bl	8003644 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x30, 0x10);	//SPK driver Gain=6.0dB (P1, R48, D6-D4=001)
 8003768:	2110      	movs	r1, #16
 800376a:	2030      	movs	r0, #48	; 0x30
 800376c:	f7ff ff6a 	bl	8003644 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2D, 0x02);	//SPK powered up (P1, R45, D1=1)
 8003770:	2102      	movs	r1, #2
 8003772:	202d      	movs	r0, #45	; 0x2d
 8003774:	f7ff ff66 	bl	8003644 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 8003778:	2000      	movs	r0, #0
 800377a:	f7ff ff45 	bl	8003608 <I2C_SOUND_ChangePage>
		//////////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
 800377e:	2190      	movs	r1, #144	; 0x90
 8003780:	203f      	movs	r0, #63	; 0x3f
 8003782:	f7ff ff5f 	bl	8003644 <WriteReg_I2C_SOUND>
		// 1<<7|1<<4|2 by SB
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000) cnDacValueOn by SB
 8003786:	2100      	movs	r1, #0
 8003788:	2041      	movs	r0, #65	; 0x41
 800378a:	f7ff ff5b 	bl	8003644 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1) 1<<4 by SB
 800378e:	2104      	movs	r1, #4
 8003790:	2040      	movs	r0, #64	; 0x40
 8003792:	f7ff ff57 	bl	8003644 <WriteReg_I2C_SOUND>
	}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <answer2CPU>:
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 80037a4:	230f      	movs	r3, #15
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	22ff      	movs	r2, #255	; 0xff
 80037aa:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 80037ac:	230d      	movs	r3, #13
 80037ae:	18fb      	adds	r3, r7, r3
 80037b0:	2200      	movs	r2, #0
 80037b2:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		uint16_t ind = 0;
 80037b4:	230a      	movs	r3, #10
 80037b6:	18fb      	adds	r3, r7, r3
 80037b8:	2200      	movs	r2, #0
 80037ba:	801a      	strh	r2, [r3, #0]

		cmd2Execute=0;
 80037bc:	4bd9      	ldr	r3, [pc, #868]	; (8003b24 <answer2CPU+0x388>)
 80037be:	2200      	movs	r2, #0
 80037c0:	701a      	strb	r2, [r3, #0]
		cmd[0]&=~0x100;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	781a      	ldrb	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	701a      	strb	r2, [r3, #0]
		if ((cmd[0] == 0x11)||(cmd[0] == 0x12)||(cmd[0] == 0x13)||(cmd[0] == 0x14)||(cmd[0] == 0x15)) {GPIOC->ODR &= ~(1 << 6);}//reset BF
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b11      	cmp	r3, #17
 80037d0:	d00f      	beq.n	80037f2 <answer2CPU+0x56>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b12      	cmp	r3, #18
 80037d8:	d00b      	beq.n	80037f2 <answer2CPU+0x56>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b13      	cmp	r3, #19
 80037e0:	d007      	beq.n	80037f2 <answer2CPU+0x56>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b14      	cmp	r3, #20
 80037e8:	d003      	beq.n	80037f2 <answer2CPU+0x56>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b15      	cmp	r3, #21
 80037f0:	d105      	bne.n	80037fe <answer2CPU+0x62>
 80037f2:	4bcd      	ldr	r3, [pc, #820]	; (8003b28 <answer2CPU+0x38c>)
 80037f4:	695a      	ldr	r2, [r3, #20]
 80037f6:	4bcc      	ldr	r3, [pc, #816]	; (8003b28 <answer2CPU+0x38c>)
 80037f8:	2140      	movs	r1, #64	; 0x40
 80037fa:	438a      	bics	r2, r1
 80037fc:	615a      	str	r2, [r3, #20]
		if (cmd[0] == 0x11) {
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	2b11      	cmp	r3, #17
 8003804:	d105      	bne.n	8003812 <answer2CPU+0x76>
//			GPIOC->ODR &= ~(1 << 6);
			GPIOC->ODR &=~ GPIO_ODR_OD6;
 8003806:	4bc8      	ldr	r3, [pc, #800]	; (8003b28 <answer2CPU+0x38c>)
 8003808:	695a      	ldr	r2, [r3, #20]
 800380a:	4bc7      	ldr	r3, [pc, #796]	; (8003b28 <answer2CPU+0x38c>)
 800380c:	2140      	movs	r1, #64	; 0x40
 800380e:	438a      	bics	r2, r1
 8003810:	615a      	str	r2, [r3, #20]
		}//reset BF
		ans[0] = cmd[0]|0x80;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2280      	movs	r2, #128	; 0x80
 8003818:	4252      	negs	r2, r2
 800381a:	4313      	orrs	r3, r2
 800381c:	b2db      	uxtb	r3, r3
 800381e:	b29a      	uxth	r2, r3
 8003820:	4bc2      	ldr	r3, [pc, #776]	; (8003b2c <answer2CPU+0x390>)
 8003822:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b0f      	cmp	r3, #15
 800382a:	d800      	bhi.n	800382e <answer2CPU+0x92>
 800382c:	e165      	b.n	8003afa <answer2CPU+0x35e>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b15      	cmp	r3, #21
 8003834:	d900      	bls.n	8003838 <answer2CPU+0x9c>
 8003836:	e160      	b.n	8003afa <answer2CPU+0x35e>
//		if (cmd[0] != 0x10) {
//			GPIOC->ODR &= ~(1 << 6);
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 8003838:	23a0      	movs	r3, #160	; 0xa0
 800383a:	05db      	lsls	r3, r3, #23
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	2210      	movs	r2, #16
 8003840:	4013      	ands	r3, r2
 8003842:	d106      	bne.n	8003852 <answer2CPU+0xb6>
					keyboard &= 0b11111110;
 8003844:	220f      	movs	r2, #15
 8003846:	18bb      	adds	r3, r7, r2
 8003848:	18ba      	adds	r2, r7, r2
 800384a:	7812      	ldrb	r2, [r2, #0]
 800384c:	2101      	movs	r1, #1
 800384e:	438a      	bics	r2, r1
 8003850:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 8003852:	23a0      	movs	r3, #160	; 0xa0
 8003854:	05db      	lsls	r3, r3, #23
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	2202      	movs	r2, #2
 800385a:	4013      	ands	r3, r2
 800385c:	d106      	bne.n	800386c <answer2CPU+0xd0>
					keyboard &= 0b11111101;
 800385e:	220f      	movs	r2, #15
 8003860:	18bb      	adds	r3, r7, r2
 8003862:	18ba      	adds	r2, r7, r2
 8003864:	7812      	ldrb	r2, [r2, #0]
 8003866:	2102      	movs	r1, #2
 8003868:	438a      	bics	r2, r1
 800386a:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 800386c:	23a0      	movs	r3, #160	; 0xa0
 800386e:	05db      	lsls	r3, r3, #23
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	2201      	movs	r2, #1
 8003874:	4013      	ands	r3, r2
 8003876:	d106      	bne.n	8003886 <answer2CPU+0xea>
					keyboard &= 0b11111011;
 8003878:	220f      	movs	r2, #15
 800387a:	18bb      	adds	r3, r7, r2
 800387c:	18ba      	adds	r2, r7, r2
 800387e:	7812      	ldrb	r2, [r2, #0]
 8003880:	2104      	movs	r1, #4
 8003882:	438a      	bics	r2, r1
 8003884:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 8003886:	23a0      	movs	r3, #160	; 0xa0
 8003888:	05db      	lsls	r3, r3, #23
 800388a:	691a      	ldr	r2, [r3, #16]
 800388c:	2380      	movs	r3, #128	; 0x80
 800388e:	019b      	lsls	r3, r3, #6
 8003890:	4013      	ands	r3, r2
 8003892:	d106      	bne.n	80038a2 <answer2CPU+0x106>
					keyboard &= 0b11110111;
 8003894:	220f      	movs	r2, #15
 8003896:	18bb      	adds	r3, r7, r2
 8003898:	18ba      	adds	r2, r7, r2
 800389a:	7812      	ldrb	r2, [r2, #0]
 800389c:	2108      	movs	r1, #8
 800389e:	438a      	bics	r2, r1
 80038a0:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 80038a2:	23a0      	movs	r3, #160	; 0xa0
 80038a4:	05db      	lsls	r3, r3, #23
 80038a6:	691a      	ldr	r2, [r3, #16]
 80038a8:	2380      	movs	r3, #128	; 0x80
 80038aa:	01db      	lsls	r3, r3, #7
 80038ac:	4013      	ands	r3, r2
 80038ae:	d106      	bne.n	80038be <answer2CPU+0x122>
					keyboard &= 0b11101111;
 80038b0:	220f      	movs	r2, #15
 80038b2:	18bb      	adds	r3, r7, r2
 80038b4:	18ba      	adds	r2, r7, r2
 80038b6:	7812      	ldrb	r2, [r2, #0]
 80038b8:	2110      	movs	r1, #16
 80038ba:	438a      	bics	r2, r1
 80038bc:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 80038be:	210f      	movs	r1, #15
 80038c0:	187b      	adds	r3, r7, r1
 80038c2:	187a      	adds	r2, r7, r1
 80038c4:	7812      	ldrb	r2, [r2, #0]
 80038c6:	43d2      	mvns	r2, r2
 80038c8:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 80038ca:	2009      	movs	r0, #9
 80038cc:	183b      	adds	r3, r7, r0
 80038ce:	2204      	movs	r2, #4
 80038d0:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 80038d2:	183b      	adds	r3, r7, r0
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	3b02      	subs	r3, #2
 80038da:	b29a      	uxth	r2, r3
 80038dc:	4b93      	ldr	r3, [pc, #588]	; (8003b2c <answer2CPU+0x390>)
 80038de:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 80038e0:	187b      	adds	r3, r7, r1
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	4b91      	ldr	r3, [pc, #580]	; (8003b2c <answer2CPU+0x390>)
 80038e8:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 80038ea:	230e      	movs	r3, #14
 80038ec:	18fb      	adds	r3, r7, r3
 80038ee:	2200      	movs	r2, #0
 80038f0:	701a      	strb	r2, [r3, #0]
 80038f2:	e011      	b.n	8003918 <answer2CPU+0x17c>
					myCS = myCS + ans[i];
 80038f4:	200e      	movs	r0, #14
 80038f6:	183b      	adds	r3, r7, r0
 80038f8:	781a      	ldrb	r2, [r3, #0]
 80038fa:	4b8c      	ldr	r3, [pc, #560]	; (8003b2c <answer2CPU+0x390>)
 80038fc:	0052      	lsls	r2, r2, #1
 80038fe:	5ad3      	ldrh	r3, [r2, r3]
 8003900:	b2d9      	uxtb	r1, r3
 8003902:	220d      	movs	r2, #13
 8003904:	18bb      	adds	r3, r7, r2
 8003906:	18ba      	adds	r2, r7, r2
 8003908:	7812      	ldrb	r2, [r2, #0]
 800390a:	188a      	adds	r2, r1, r2
 800390c:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 800390e:	183b      	adds	r3, r7, r0
 8003910:	781a      	ldrb	r2, [r3, #0]
 8003912:	183b      	adds	r3, r7, r0
 8003914:	3201      	adds	r2, #1
 8003916:	701a      	strb	r2, [r3, #0]
 8003918:	200e      	movs	r0, #14
 800391a:	183b      	adds	r3, r7, r0
 800391c:	781a      	ldrb	r2, [r3, #0]
 800391e:	2309      	movs	r3, #9
 8003920:	18fb      	adds	r3, r7, r3
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	3b01      	subs	r3, #1
 8003926:	429a      	cmp	r2, r3
 8003928:	dbe4      	blt.n	80038f4 <answer2CPU+0x158>
				}
				myCS = 0 - myCS;
 800392a:	210d      	movs	r1, #13
 800392c:	187b      	adds	r3, r7, r1
 800392e:	187a      	adds	r2, r7, r1
 8003930:	7812      	ldrb	r2, [r2, #0]
 8003932:	4252      	negs	r2, r2
 8003934:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 8003936:	187b      	adds	r3, r7, r1
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	b29a      	uxth	r2, r3
 800393c:	4b7b      	ldr	r3, [pc, #492]	; (8003b2c <answer2CPU+0x390>)
 800393e:	80da      	strh	r2, [r3, #6]
				i=0;
 8003940:	183b      	adds	r3, r7, r0
 8003942:	2200      	movs	r2, #0
 8003944:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================
				USART2->CR1 &= ~USART_CR1_RE;
 8003946:	4b7a      	ldr	r3, [pc, #488]	; (8003b30 <answer2CPU+0x394>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	4b79      	ldr	r3, [pc, #484]	; (8003b30 <answer2CPU+0x394>)
 800394c:	2104      	movs	r1, #4
 800394e:	438a      	bics	r2, r1
 8003950:	601a      	str	r2, [r3, #0]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003952:	46c0      	nop			; (mov r8, r8)
 8003954:	4b76      	ldr	r3, [pc, #472]	; (8003b30 <answer2CPU+0x394>)
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	2280      	movs	r2, #128	; 0x80
 800395a:	4013      	ands	r3, r2
 800395c:	d0fa      	beq.n	8003954 <answer2CPU+0x1b8>
				USART2->TDR = ans[0]|0x0100;
 800395e:	4b73      	ldr	r3, [pc, #460]	; (8003b2c <answer2CPU+0x390>)
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	2280      	movs	r2, #128	; 0x80
 8003964:	0052      	lsls	r2, r2, #1
 8003966:	4313      	orrs	r3, r2
 8003968:	b29a      	uxth	r2, r3
 800396a:	4b71      	ldr	r3, [pc, #452]	; (8003b30 <answer2CPU+0x394>)
 800396c:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 800396e:	230e      	movs	r3, #14
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	2201      	movs	r2, #1
 8003974:	701a      	strb	r2, [r3, #0]
 8003976:	e013      	b.n	80039a0 <answer2CPU+0x204>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8003978:	46c0      	nop			; (mov r8, r8)
 800397a:	4b6d      	ldr	r3, [pc, #436]	; (8003b30 <answer2CPU+0x394>)
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	2280      	movs	r2, #128	; 0x80
 8003980:	4013      	ands	r3, r2
 8003982:	d0fa      	beq.n	800397a <answer2CPU+0x1de>
				    USART2->TDR = (uint8_t)ans[i];
 8003984:	210e      	movs	r1, #14
 8003986:	187b      	adds	r3, r7, r1
 8003988:	781a      	ldrb	r2, [r3, #0]
 800398a:	4b68      	ldr	r3, [pc, #416]	; (8003b2c <answer2CPU+0x390>)
 800398c:	0052      	lsls	r2, r2, #1
 800398e:	5ad3      	ldrh	r3, [r2, r3]
 8003990:	b2da      	uxtb	r2, r3
 8003992:	4b67      	ldr	r3, [pc, #412]	; (8003b30 <answer2CPU+0x394>)
 8003994:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8003996:	187b      	adds	r3, r7, r1
 8003998:	781a      	ldrb	r2, [r3, #0]
 800399a:	187b      	adds	r3, r7, r1
 800399c:	3201      	adds	r2, #1
 800399e:	701a      	strb	r2, [r3, #0]
 80039a0:	230e      	movs	r3, #14
 80039a2:	18fa      	adds	r2, r7, r3
 80039a4:	2309      	movs	r3, #9
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	7812      	ldrb	r2, [r2, #0]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d3e3      	bcc.n	8003978 <answer2CPU+0x1dc>
				  }
				USART2->CR1 |= USART_CR1_RE;
 80039b0:	4b5f      	ldr	r3, [pc, #380]	; (8003b30 <answer2CPU+0x394>)
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	4b5e      	ldr	r3, [pc, #376]	; (8003b30 <answer2CPU+0x394>)
 80039b6:	2104      	movs	r1, #4
 80039b8:	430a      	orrs	r2, r1
 80039ba:	601a      	str	r2, [r3, #0]
//				BFEN=1;
//=======================================================================================================================================
				if (cmd[0] == 0x11) {//Show full screen background;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b11      	cmp	r3, #17
 80039c2:	d109      	bne.n	80039d8 <answer2CPU+0x23c>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					picNum = cmd[2];
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	789a      	ldrb	r2, [r3, #2]
 80039c8:	4b5a      	ldr	r3, [pc, #360]	; (8003b34 <answer2CPU+0x398>)
 80039ca:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 80039cc:	4b55      	ldr	r3, [pc, #340]	; (8003b24 <answer2CPU+0x388>)
 80039ce:	2211      	movs	r2, #17
 80039d0:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80039d2:	4b59      	ldr	r3, [pc, #356]	; (8003b38 <answer2CPU+0x39c>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b12      	cmp	r3, #18
 80039de:	d115      	bne.n	8003a0c <answer2CPU+0x270>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3302      	adds	r3, #2
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	001a      	movs	r2, r3
 80039e8:	4b54      	ldr	r3, [pc, #336]	; (8003b3c <answer2CPU+0x3a0>)
 80039ea:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3303      	adds	r3, #3
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	001a      	movs	r2, r3
 80039f4:	4b52      	ldr	r3, [pc, #328]	; (8003b40 <answer2CPU+0x3a4>)
 80039f6:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	791a      	ldrb	r2, [r3, #4]
 80039fc:	4b4d      	ldr	r3, [pc, #308]	; (8003b34 <answer2CPU+0x398>)
 80039fe:	701a      	strb	r2, [r3, #0]
//					weoShowSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 8003a00:	4b48      	ldr	r3, [pc, #288]	; (8003b24 <answer2CPU+0x388>)
 8003a02:	2212      	movs	r2, #18
 8003a04:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8003a06:	4b4c      	ldr	r3, [pc, #304]	; (8003b38 <answer2CPU+0x39c>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b13      	cmp	r3, #19
 8003a12:	d140      	bne.n	8003a96 <answer2CPU+0x2fa>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3302      	adds	r3, #2
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	001a      	movs	r2, r3
 8003a1c:	4b47      	ldr	r3, [pc, #284]	; (8003b3c <answer2CPU+0x3a0>)
 8003a1e:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3303      	adds	r3, #3
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	001a      	movs	r2, r3
 8003a28:	4b45      	ldr	r3, [pc, #276]	; (8003b40 <answer2CPU+0x3a4>)
 8003a2a:	601a      	str	r2, [r3, #0]
					fontInfo= cmd[4];
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	791a      	ldrb	r2, [r3, #4]
 8003a30:	4b44      	ldr	r3, [pc, #272]	; (8003b44 <answer2CPU+0x3a8>)
 8003a32:	701a      	strb	r2, [r3, #0]
					color=fontInfo|0xF0;
 8003a34:	4b43      	ldr	r3, [pc, #268]	; (8003b44 <answer2CPU+0x3a8>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2210      	movs	r2, #16
 8003a3a:	4252      	negs	r2, r2
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	4b41      	ldr	r3, [pc, #260]	; (8003b48 <answer2CPU+0x3ac>)
 8003a42:	701a      	strb	r2, [r3, #0]
					strLen = cmd[1] - 0x04;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3301      	adds	r3, #1
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	3b04      	subs	r3, #4
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	4b3f      	ldr	r3, [pc, #252]	; (8003b4c <answer2CPU+0x3b0>)
 8003a50:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 8003a52:	230e      	movs	r3, #14
 8003a54:	18fb      	adds	r3, r7, r3
 8003a56:	2200      	movs	r2, #0
 8003a58:	701a      	strb	r2, [r3, #0]
 8003a5a:	e00f      	b.n	8003a7c <answer2CPU+0x2e0>
					dataASCII[i] = cmd[i+5];
 8003a5c:	200e      	movs	r0, #14
 8003a5e:	183b      	adds	r3, r7, r0
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	3305      	adds	r3, #5
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	18d2      	adds	r2, r2, r3
 8003a68:	183b      	adds	r3, r7, r0
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	7811      	ldrb	r1, [r2, #0]
 8003a6e:	4a38      	ldr	r2, [pc, #224]	; (8003b50 <answer2CPU+0x3b4>)
 8003a70:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 8003a72:	183b      	adds	r3, r7, r0
 8003a74:	781a      	ldrb	r2, [r3, #0]
 8003a76:	183b      	adds	r3, r7, r0
 8003a78:	3201      	adds	r2, #1
 8003a7a:	701a      	strb	r2, [r3, #0]
 8003a7c:	4b33      	ldr	r3, [pc, #204]	; (8003b4c <answer2CPU+0x3b0>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	220e      	movs	r2, #14
 8003a82:	18ba      	adds	r2, r7, r2
 8003a84:	7812      	ldrb	r2, [r2, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d3e8      	bcc.n	8003a5c <answer2CPU+0x2c0>
				}
					cmd2Execute=0x13;
 8003a8a:	4b26      	ldr	r3, [pc, #152]	; (8003b24 <answer2CPU+0x388>)
 8003a8c:	2213      	movs	r2, #19
 8003a8e:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8003a90:	4b29      	ldr	r3, [pc, #164]	; (8003b38 <answer2CPU+0x39c>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b14      	cmp	r3, #20
 8003a9c:	d109      	bne.n	8003ab2 <answer2CPU+0x316>
					numSound = cmd[2];
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	789a      	ldrb	r2, [r3, #2]
 8003aa2:	4b2c      	ldr	r3, [pc, #176]	; (8003b54 <answer2CPU+0x3b8>)
 8003aa4:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 8003aa6:	4b1f      	ldr	r3, [pc, #124]	; (8003b24 <answer2CPU+0x388>)
 8003aa8:	2214      	movs	r2, #20
 8003aaa:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8003aac:	4b22      	ldr	r3, [pc, #136]	; (8003b38 <answer2CPU+0x39c>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b15      	cmp	r3, #21
 8003ab8:	d10d      	bne.n	8003ad6 <answer2CPU+0x33a>
					volume = cmd[2];
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	789a      	ldrb	r2, [r3, #2]
 8003abe:	4b26      	ldr	r3, [pc, #152]	; (8003b58 <answer2CPU+0x3bc>)
 8003ac0:	701a      	strb	r2, [r3, #0]
					contrast = cmd[3];
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	78da      	ldrb	r2, [r3, #3]
 8003ac6:	4b25      	ldr	r3, [pc, #148]	; (8003b5c <answer2CPU+0x3c0>)
 8003ac8:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 8003aca:	4b16      	ldr	r3, [pc, #88]	; (8003b24 <answer2CPU+0x388>)
 8003acc:	2215      	movs	r2, #21
 8003ace:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8003ad0:	4b19      	ldr	r3, [pc, #100]	; (8003b38 <answer2CPU+0x39c>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b16      	cmp	r3, #22
 8003adc:	d10d      	bne.n	8003afa <answer2CPU+0x35e>
					volume = cmd[3];
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	78da      	ldrb	r2, [r3, #3]
 8003ae2:	4b1d      	ldr	r3, [pc, #116]	; (8003b58 <answer2CPU+0x3bc>)
 8003ae4:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	791a      	ldrb	r2, [r3, #4]
 8003aea:	4b1c      	ldr	r3, [pc, #112]	; (8003b5c <answer2CPU+0x3c0>)
 8003aec:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 8003aee:	4b0d      	ldr	r3, [pc, #52]	; (8003b24 <answer2CPU+0x388>)
 8003af0:	2216      	movs	r2, #22
 8003af2:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8003af4:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <answer2CPU+0x39c>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d000      	beq.n	8003b04 <answer2CPU+0x368>
 8003b02:	e09d      	b.n	8003c40 <answer2CPU+0x4a4>
				myLength = 0x14; //20 bytes length answer
 8003b04:	2109      	movs	r1, #9
 8003b06:	187b      	adds	r3, r7, r1
 8003b08:	2214      	movs	r2, #20
 8003b0a:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003b0c:	187b      	adds	r3, r7, r1
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b02      	subs	r3, #2
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <answer2CPU+0x390>)
 8003b18:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8003b1a:	230e      	movs	r3, #14
 8003b1c:	18fb      	adds	r3, r7, r3
 8003b1e:	2200      	movs	r2, #0
 8003b20:	701a      	strb	r2, [r3, #0]
 8003b22:	e02e      	b.n	8003b82 <answer2CPU+0x3e6>
 8003b24:	2000137b 	.word	0x2000137b
 8003b28:	50000800 	.word	0x50000800
 8003b2c:	200013c8 	.word	0x200013c8
 8003b30:	40004400 	.word	0x40004400
 8003b34:	2000137a 	.word	0x2000137a
 8003b38:	200013dc 	.word	0x200013dc
 8003b3c:	20000204 	.word	0x20000204
 8003b40:	20000298 	.word	0x20000298
 8003b44:	20000195 	.word	0x20000195
 8003b48:	20001379 	.word	0x20001379
 8003b4c:	200013c5 	.word	0x200013c5
 8003b50:	200000a4 	.word	0x200000a4
 8003b54:	20001445 	.word	0x20001445
 8003b58:	20000202 	.word	0x20000202
 8003b5c:	20000304 	.word	0x20000304
					ans[i + 2] = PCB_type[i];
 8003b60:	200e      	movs	r0, #14
 8003b62:	183b      	adds	r3, r7, r0
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	4acb      	ldr	r2, [pc, #812]	; (8003e94 <answer2CPU+0x6f8>)
 8003b68:	5cd1      	ldrb	r1, [r2, r3]
 8003b6a:	183b      	adds	r3, r7, r0
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	1c9a      	adds	r2, r3, #2
 8003b70:	b289      	uxth	r1, r1
 8003b72:	4bc9      	ldr	r3, [pc, #804]	; (8003e98 <answer2CPU+0x6fc>)
 8003b74:	0052      	lsls	r2, r2, #1
 8003b76:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8003b78:	183b      	adds	r3, r7, r0
 8003b7a:	781a      	ldrb	r2, [r3, #0]
 8003b7c:	183b      	adds	r3, r7, r0
 8003b7e:	3201      	adds	r2, #1
 8003b80:	701a      	strb	r2, [r3, #0]
 8003b82:	220e      	movs	r2, #14
 8003b84:	18bb      	adds	r3, r7, r2
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b10      	cmp	r3, #16
 8003b8a:	d9e9      	bls.n	8003b60 <answer2CPU+0x3c4>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8003b8c:	18bb      	adds	r3, r7, r2
 8003b8e:	2200      	movs	r2, #0
 8003b90:	701a      	strb	r2, [r3, #0]
 8003b92:	e011      	b.n	8003bb8 <answer2CPU+0x41c>
					myCS = myCS + ans[i];
 8003b94:	200e      	movs	r0, #14
 8003b96:	183b      	adds	r3, r7, r0
 8003b98:	781a      	ldrb	r2, [r3, #0]
 8003b9a:	4bbf      	ldr	r3, [pc, #764]	; (8003e98 <answer2CPU+0x6fc>)
 8003b9c:	0052      	lsls	r2, r2, #1
 8003b9e:	5ad3      	ldrh	r3, [r2, r3]
 8003ba0:	b2d9      	uxtb	r1, r3
 8003ba2:	220d      	movs	r2, #13
 8003ba4:	18bb      	adds	r3, r7, r2
 8003ba6:	18ba      	adds	r2, r7, r2
 8003ba8:	7812      	ldrb	r2, [r2, #0]
 8003baa:	188a      	adds	r2, r1, r2
 8003bac:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8003bae:	183b      	adds	r3, r7, r0
 8003bb0:	781a      	ldrb	r2, [r3, #0]
 8003bb2:	183b      	adds	r3, r7, r0
 8003bb4:	3201      	adds	r2, #1
 8003bb6:	701a      	strb	r2, [r3, #0]
 8003bb8:	230e      	movs	r3, #14
 8003bba:	18fb      	adds	r3, r7, r3
 8003bbc:	781a      	ldrb	r2, [r3, #0]
 8003bbe:	2009      	movs	r0, #9
 8003bc0:	183b      	adds	r3, r7, r0
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	dbe4      	blt.n	8003b94 <answer2CPU+0x3f8>
				}
				myCS = 0 - myCS;
 8003bca:	210d      	movs	r1, #13
 8003bcc:	187b      	adds	r3, r7, r1
 8003bce:	187a      	adds	r2, r7, r1
 8003bd0:	7812      	ldrb	r2, [r2, #0]
 8003bd2:	4252      	negs	r2, r2
 8003bd4:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003bd6:	183b      	adds	r3, r7, r0
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	1e5a      	subs	r2, r3, #1
 8003bdc:	187b      	adds	r3, r7, r1
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	b299      	uxth	r1, r3
 8003be2:	4bad      	ldr	r3, [pc, #692]	; (8003e98 <answer2CPU+0x6fc>)
 8003be4:	0052      	lsls	r2, r2, #1
 8003be6:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003be8:	46c0      	nop			; (mov r8, r8)
 8003bea:	4bac      	ldr	r3, [pc, #688]	; (8003e9c <answer2CPU+0x700>)
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	2280      	movs	r2, #128	; 0x80
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d0fa      	beq.n	8003bea <answer2CPU+0x44e>
				USART2->TDR = ans[0]|0x0100;
 8003bf4:	4ba8      	ldr	r3, [pc, #672]	; (8003e98 <answer2CPU+0x6fc>)
 8003bf6:	881b      	ldrh	r3, [r3, #0]
 8003bf8:	2280      	movs	r2, #128	; 0x80
 8003bfa:	0052      	lsls	r2, r2, #1
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	4ba6      	ldr	r3, [pc, #664]	; (8003e9c <answer2CPU+0x700>)
 8003c02:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8003c04:	e014      	b.n	8003c30 <answer2CPU+0x494>
				  {
				    i++;
 8003c06:	210e      	movs	r1, #14
 8003c08:	187b      	adds	r3, r7, r1
 8003c0a:	781a      	ldrb	r2, [r3, #0]
 8003c0c:	187b      	adds	r3, r7, r1
 8003c0e:	3201      	adds	r2, #1
 8003c10:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	4ba1      	ldr	r3, [pc, #644]	; (8003e9c <answer2CPU+0x700>)
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	2280      	movs	r2, #128	; 0x80
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d0fa      	beq.n	8003c14 <answer2CPU+0x478>
				    USART2->TDR = (uint8_t)ans[i];
 8003c1e:	230e      	movs	r3, #14
 8003c20:	18fb      	adds	r3, r7, r3
 8003c22:	781a      	ldrb	r2, [r3, #0]
 8003c24:	4b9c      	ldr	r3, [pc, #624]	; (8003e98 <answer2CPU+0x6fc>)
 8003c26:	0052      	lsls	r2, r2, #1
 8003c28:	5ad3      	ldrh	r3, [r2, r3]
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	4b9b      	ldr	r3, [pc, #620]	; (8003e9c <answer2CPU+0x700>)
 8003c2e:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8003c30:	230e      	movs	r3, #14
 8003c32:	18fb      	adds	r3, r7, r3
 8003c34:	781a      	ldrb	r2, [r3, #0]
 8003c36:	4b98      	ldr	r3, [pc, #608]	; (8003e98 <answer2CPU+0x6fc>)
 8003c38:	0052      	lsls	r2, r2, #1
 8003c3a:	5ad3      	ldrh	r3, [r2, r3]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1e2      	bne.n	8003c06 <answer2CPU+0x46a>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d000      	beq.n	8003c4a <answer2CPU+0x4ae>
 8003c48:	e07f      	b.n	8003d4a <answer2CPU+0x5ae>
				myLength = 0x0B; //19 bytes length answer
 8003c4a:	2109      	movs	r1, #9
 8003c4c:	187b      	adds	r3, r7, r1
 8003c4e:	220b      	movs	r2, #11
 8003c50:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003c52:	187b      	adds	r3, r7, r1
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	3b02      	subs	r3, #2
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	4b8e      	ldr	r3, [pc, #568]	; (8003e98 <answer2CPU+0x6fc>)
 8003c5e:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8003c60:	230e      	movs	r3, #14
 8003c62:	18fb      	adds	r3, r7, r3
 8003c64:	2200      	movs	r2, #0
 8003c66:	701a      	strb	r2, [r3, #0]
 8003c68:	e010      	b.n	8003c8c <answer2CPU+0x4f0>
					ans[i + 2] = PCB_rev[i];
 8003c6a:	200e      	movs	r0, #14
 8003c6c:	183b      	adds	r3, r7, r0
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	4a8b      	ldr	r2, [pc, #556]	; (8003ea0 <answer2CPU+0x704>)
 8003c72:	5cd1      	ldrb	r1, [r2, r3]
 8003c74:	183b      	adds	r3, r7, r0
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	1c9a      	adds	r2, r3, #2
 8003c7a:	b289      	uxth	r1, r1
 8003c7c:	4b86      	ldr	r3, [pc, #536]	; (8003e98 <answer2CPU+0x6fc>)
 8003c7e:	0052      	lsls	r2, r2, #1
 8003c80:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8003c82:	183b      	adds	r3, r7, r0
 8003c84:	781a      	ldrb	r2, [r3, #0]
 8003c86:	183b      	adds	r3, r7, r0
 8003c88:	3201      	adds	r2, #1
 8003c8a:	701a      	strb	r2, [r3, #0]
 8003c8c:	220e      	movs	r2, #14
 8003c8e:	18bb      	adds	r3, r7, r2
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b10      	cmp	r3, #16
 8003c94:	d9e9      	bls.n	8003c6a <answer2CPU+0x4ce>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8003c96:	18bb      	adds	r3, r7, r2
 8003c98:	2200      	movs	r2, #0
 8003c9a:	701a      	strb	r2, [r3, #0]
 8003c9c:	e011      	b.n	8003cc2 <answer2CPU+0x526>
					myCS = myCS + ans[i];
 8003c9e:	200e      	movs	r0, #14
 8003ca0:	183b      	adds	r3, r7, r0
 8003ca2:	781a      	ldrb	r2, [r3, #0]
 8003ca4:	4b7c      	ldr	r3, [pc, #496]	; (8003e98 <answer2CPU+0x6fc>)
 8003ca6:	0052      	lsls	r2, r2, #1
 8003ca8:	5ad3      	ldrh	r3, [r2, r3]
 8003caa:	b2d9      	uxtb	r1, r3
 8003cac:	220d      	movs	r2, #13
 8003cae:	18bb      	adds	r3, r7, r2
 8003cb0:	18ba      	adds	r2, r7, r2
 8003cb2:	7812      	ldrb	r2, [r2, #0]
 8003cb4:	188a      	adds	r2, r1, r2
 8003cb6:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8003cb8:	183b      	adds	r3, r7, r0
 8003cba:	781a      	ldrb	r2, [r3, #0]
 8003cbc:	183b      	adds	r3, r7, r0
 8003cbe:	3201      	adds	r2, #1
 8003cc0:	701a      	strb	r2, [r3, #0]
 8003cc2:	230e      	movs	r3, #14
 8003cc4:	18fb      	adds	r3, r7, r3
 8003cc6:	781a      	ldrb	r2, [r3, #0]
 8003cc8:	2009      	movs	r0, #9
 8003cca:	183b      	adds	r3, r7, r0
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	dbe4      	blt.n	8003c9e <answer2CPU+0x502>
				}
				myCS = 0 - myCS;
 8003cd4:	210d      	movs	r1, #13
 8003cd6:	187b      	adds	r3, r7, r1
 8003cd8:	187a      	adds	r2, r7, r1
 8003cda:	7812      	ldrb	r2, [r2, #0]
 8003cdc:	4252      	negs	r2, r2
 8003cde:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003ce0:	183b      	adds	r3, r7, r0
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	1e5a      	subs	r2, r3, #1
 8003ce6:	187b      	adds	r3, r7, r1
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	b299      	uxth	r1, r3
 8003cec:	4b6a      	ldr	r3, [pc, #424]	; (8003e98 <answer2CPU+0x6fc>)
 8003cee:	0052      	lsls	r2, r2, #1
 8003cf0:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003cf2:	46c0      	nop			; (mov r8, r8)
 8003cf4:	4b69      	ldr	r3, [pc, #420]	; (8003e9c <answer2CPU+0x700>)
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	2280      	movs	r2, #128	; 0x80
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	d0fa      	beq.n	8003cf4 <answer2CPU+0x558>
				USART2->TDR = ans[0]|0x0100;
 8003cfe:	4b66      	ldr	r3, [pc, #408]	; (8003e98 <answer2CPU+0x6fc>)
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	2280      	movs	r2, #128	; 0x80
 8003d04:	0052      	lsls	r2, r2, #1
 8003d06:	4313      	orrs	r3, r2
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	4b64      	ldr	r3, [pc, #400]	; (8003e9c <answer2CPU+0x700>)
 8003d0c:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8003d0e:	e014      	b.n	8003d3a <answer2CPU+0x59e>
					  {
					    i++;
 8003d10:	210e      	movs	r1, #14
 8003d12:	187b      	adds	r3, r7, r1
 8003d14:	781a      	ldrb	r2, [r3, #0]
 8003d16:	187b      	adds	r3, r7, r1
 8003d18:	3201      	adds	r2, #1
 8003d1a:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8003d1c:	46c0      	nop			; (mov r8, r8)
 8003d1e:	4b5f      	ldr	r3, [pc, #380]	; (8003e9c <answer2CPU+0x700>)
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	2280      	movs	r2, #128	; 0x80
 8003d24:	4013      	ands	r3, r2
 8003d26:	d0fa      	beq.n	8003d1e <answer2CPU+0x582>
					    USART2->TDR = (uint8_t)ans[i];
 8003d28:	230e      	movs	r3, #14
 8003d2a:	18fb      	adds	r3, r7, r3
 8003d2c:	781a      	ldrb	r2, [r3, #0]
 8003d2e:	4b5a      	ldr	r3, [pc, #360]	; (8003e98 <answer2CPU+0x6fc>)
 8003d30:	0052      	lsls	r2, r2, #1
 8003d32:	5ad3      	ldrh	r3, [r2, r3]
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	4b59      	ldr	r3, [pc, #356]	; (8003e9c <answer2CPU+0x700>)
 8003d38:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8003d3a:	230e      	movs	r3, #14
 8003d3c:	18fb      	adds	r3, r7, r3
 8003d3e:	781a      	ldrb	r2, [r3, #0]
 8003d40:	4b55      	ldr	r3, [pc, #340]	; (8003e98 <answer2CPU+0x6fc>)
 8003d42:	0052      	lsls	r2, r2, #1
 8003d44:	5ad3      	ldrh	r3, [r2, r3]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1e2      	bne.n	8003d10 <answer2CPU+0x574>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d000      	beq.n	8003d54 <answer2CPU+0x5b8>
 8003d52:	e07f      	b.n	8003e54 <answer2CPU+0x6b8>
				myLength = 0x13; //19 bytes length answer
 8003d54:	2109      	movs	r1, #9
 8003d56:	187b      	adds	r3, r7, r1
 8003d58:	2213      	movs	r2, #19
 8003d5a:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003d5c:	187b      	adds	r3, r7, r1
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	3b02      	subs	r3, #2
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	4b4c      	ldr	r3, [pc, #304]	; (8003e98 <answer2CPU+0x6fc>)
 8003d68:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8003d6a:	230e      	movs	r3, #14
 8003d6c:	18fb      	adds	r3, r7, r3
 8003d6e:	2200      	movs	r2, #0
 8003d70:	701a      	strb	r2, [r3, #0]
 8003d72:	e010      	b.n	8003d96 <answer2CPU+0x5fa>
					ans[i + 2] = EmitterSN[i];
 8003d74:	200e      	movs	r0, #14
 8003d76:	183b      	adds	r3, r7, r0
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	4a4a      	ldr	r2, [pc, #296]	; (8003ea4 <answer2CPU+0x708>)
 8003d7c:	5cd1      	ldrb	r1, [r2, r3]
 8003d7e:	183b      	adds	r3, r7, r0
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	1c9a      	adds	r2, r3, #2
 8003d84:	b289      	uxth	r1, r1
 8003d86:	4b44      	ldr	r3, [pc, #272]	; (8003e98 <answer2CPU+0x6fc>)
 8003d88:	0052      	lsls	r2, r2, #1
 8003d8a:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8003d8c:	183b      	adds	r3, r7, r0
 8003d8e:	781a      	ldrb	r2, [r3, #0]
 8003d90:	183b      	adds	r3, r7, r0
 8003d92:	3201      	adds	r2, #1
 8003d94:	701a      	strb	r2, [r3, #0]
 8003d96:	220e      	movs	r2, #14
 8003d98:	18bb      	adds	r3, r7, r2
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b10      	cmp	r3, #16
 8003d9e:	d9e9      	bls.n	8003d74 <answer2CPU+0x5d8>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8003da0:	18bb      	adds	r3, r7, r2
 8003da2:	2200      	movs	r2, #0
 8003da4:	701a      	strb	r2, [r3, #0]
 8003da6:	e011      	b.n	8003dcc <answer2CPU+0x630>
					myCS = myCS + ans[i];
 8003da8:	200e      	movs	r0, #14
 8003daa:	183b      	adds	r3, r7, r0
 8003dac:	781a      	ldrb	r2, [r3, #0]
 8003dae:	4b3a      	ldr	r3, [pc, #232]	; (8003e98 <answer2CPU+0x6fc>)
 8003db0:	0052      	lsls	r2, r2, #1
 8003db2:	5ad3      	ldrh	r3, [r2, r3]
 8003db4:	b2d9      	uxtb	r1, r3
 8003db6:	220d      	movs	r2, #13
 8003db8:	18bb      	adds	r3, r7, r2
 8003dba:	18ba      	adds	r2, r7, r2
 8003dbc:	7812      	ldrb	r2, [r2, #0]
 8003dbe:	188a      	adds	r2, r1, r2
 8003dc0:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8003dc2:	183b      	adds	r3, r7, r0
 8003dc4:	781a      	ldrb	r2, [r3, #0]
 8003dc6:	183b      	adds	r3, r7, r0
 8003dc8:	3201      	adds	r2, #1
 8003dca:	701a      	strb	r2, [r3, #0]
 8003dcc:	230e      	movs	r3, #14
 8003dce:	18fb      	adds	r3, r7, r3
 8003dd0:	781a      	ldrb	r2, [r3, #0]
 8003dd2:	2009      	movs	r0, #9
 8003dd4:	183b      	adds	r3, r7, r0
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	dbe4      	blt.n	8003da8 <answer2CPU+0x60c>
				}
				myCS = 0 - myCS;
 8003dde:	210d      	movs	r1, #13
 8003de0:	187b      	adds	r3, r7, r1
 8003de2:	187a      	adds	r2, r7, r1
 8003de4:	7812      	ldrb	r2, [r2, #0]
 8003de6:	4252      	negs	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003dea:	183b      	adds	r3, r7, r0
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	1e5a      	subs	r2, r3, #1
 8003df0:	187b      	adds	r3, r7, r1
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	b299      	uxth	r1, r3
 8003df6:	4b28      	ldr	r3, [pc, #160]	; (8003e98 <answer2CPU+0x6fc>)
 8003df8:	0052      	lsls	r2, r2, #1
 8003dfa:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003dfc:	46c0      	nop			; (mov r8, r8)
 8003dfe:	4b27      	ldr	r3, [pc, #156]	; (8003e9c <answer2CPU+0x700>)
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	2280      	movs	r2, #128	; 0x80
 8003e04:	4013      	ands	r3, r2
 8003e06:	d0fa      	beq.n	8003dfe <answer2CPU+0x662>
				USART2->TDR = ans[0]|0x0100;
 8003e08:	4b23      	ldr	r3, [pc, #140]	; (8003e98 <answer2CPU+0x6fc>)
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	2280      	movs	r2, #128	; 0x80
 8003e0e:	0052      	lsls	r2, r2, #1
 8003e10:	4313      	orrs	r3, r2
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	4b21      	ldr	r3, [pc, #132]	; (8003e9c <answer2CPU+0x700>)
 8003e16:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8003e18:	e014      	b.n	8003e44 <answer2CPU+0x6a8>
				  {
				    i++;
 8003e1a:	210e      	movs	r1, #14
 8003e1c:	187b      	adds	r3, r7, r1
 8003e1e:	781a      	ldrb	r2, [r3, #0]
 8003e20:	187b      	adds	r3, r7, r1
 8003e22:	3201      	adds	r2, #1
 8003e24:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8003e26:	46c0      	nop			; (mov r8, r8)
 8003e28:	4b1c      	ldr	r3, [pc, #112]	; (8003e9c <answer2CPU+0x700>)
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	2280      	movs	r2, #128	; 0x80
 8003e2e:	4013      	ands	r3, r2
 8003e30:	d0fa      	beq.n	8003e28 <answer2CPU+0x68c>
				    	USART2->TDR = (uint8_t)ans[i];
 8003e32:	230e      	movs	r3, #14
 8003e34:	18fb      	adds	r3, r7, r3
 8003e36:	781a      	ldrb	r2, [r3, #0]
 8003e38:	4b17      	ldr	r3, [pc, #92]	; (8003e98 <answer2CPU+0x6fc>)
 8003e3a:	0052      	lsls	r2, r2, #1
 8003e3c:	5ad3      	ldrh	r3, [r2, r3]
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	4b16      	ldr	r3, [pc, #88]	; (8003e9c <answer2CPU+0x700>)
 8003e42:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8003e44:	230e      	movs	r3, #14
 8003e46:	18fb      	adds	r3, r7, r3
 8003e48:	781a      	ldrb	r2, [r3, #0]
 8003e4a:	4b13      	ldr	r3, [pc, #76]	; (8003e98 <answer2CPU+0x6fc>)
 8003e4c:	0052      	lsls	r2, r2, #1
 8003e4e:	5ad3      	ldrh	r3, [r2, r3]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1e2      	bne.n	8003e1a <answer2CPU+0x67e>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	2b03      	cmp	r3, #3
 8003e5a:	d000      	beq.n	8003e5e <answer2CPU+0x6c2>
 8003e5c:	e07c      	b.n	8003f58 <answer2CPU+0x7bc>
				myLength = 0x04; //4 bytes length answer
 8003e5e:	2109      	movs	r1, #9
 8003e60:	187b      	adds	r3, r7, r1
 8003e62:	2204      	movs	r2, #4
 8003e64:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003e66:	187b      	adds	r3, r7, r1
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	3b02      	subs	r3, #2
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <answer2CPU+0x6fc>)
 8003e72:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8003e74:	4b0c      	ldr	r3, [pc, #48]	; (8003ea8 <answer2CPU+0x70c>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	4b07      	ldr	r3, [pc, #28]	; (8003e98 <answer2CPU+0x6fc>)
 8003e7c:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8003e7e:	230d      	movs	r3, #13
 8003e80:	18fb      	adds	r3, r7, r3
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	4b04      	ldr	r3, [pc, #16]	; (8003e98 <answer2CPU+0x6fc>)
 8003e88:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8003e8a:	230e      	movs	r3, #14
 8003e8c:	18fb      	adds	r3, r7, r3
 8003e8e:	2200      	movs	r2, #0
 8003e90:	701a      	strb	r2, [r3, #0]
 8003e92:	e01d      	b.n	8003ed0 <answer2CPU+0x734>
 8003e94:	20000000 	.word	0x20000000
 8003e98:	200013c8 	.word	0x200013c8
 8003e9c:	40004400 	.word	0x40004400
 8003ea0:	20000014 	.word	0x20000014
 8003ea4:	20000020 	.word	0x20000020
 8003ea8:	2000001c 	.word	0x2000001c
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8003eac:	200e      	movs	r0, #14
 8003eae:	183b      	adds	r3, r7, r0
 8003eb0:	781a      	ldrb	r2, [r3, #0]
 8003eb2:	4b6d      	ldr	r3, [pc, #436]	; (8004068 <answer2CPU+0x8cc>)
 8003eb4:	0052      	lsls	r2, r2, #1
 8003eb6:	5ad3      	ldrh	r3, [r2, r3]
 8003eb8:	b2d9      	uxtb	r1, r3
 8003eba:	220d      	movs	r2, #13
 8003ebc:	18bb      	adds	r3, r7, r2
 8003ebe:	18ba      	adds	r2, r7, r2
 8003ec0:	7812      	ldrb	r2, [r2, #0]
 8003ec2:	188a      	adds	r2, r1, r2
 8003ec4:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8003ec6:	183b      	adds	r3, r7, r0
 8003ec8:	781a      	ldrb	r2, [r3, #0]
 8003eca:	183b      	adds	r3, r7, r0
 8003ecc:	3201      	adds	r2, #1
 8003ece:	701a      	strb	r2, [r3, #0]
 8003ed0:	230e      	movs	r3, #14
 8003ed2:	18fb      	adds	r3, r7, r3
 8003ed4:	781a      	ldrb	r2, [r3, #0]
 8003ed6:	2009      	movs	r0, #9
 8003ed8:	183b      	adds	r3, r7, r0
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	3b01      	subs	r3, #1
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	dbe4      	blt.n	8003eac <answer2CPU+0x710>
				}
				myCS = 0 - myCS;
 8003ee2:	210d      	movs	r1, #13
 8003ee4:	187b      	adds	r3, r7, r1
 8003ee6:	187a      	adds	r2, r7, r1
 8003ee8:	7812      	ldrb	r2, [r2, #0]
 8003eea:	4252      	negs	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003eee:	183b      	adds	r3, r7, r0
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	1e5a      	subs	r2, r3, #1
 8003ef4:	187b      	adds	r3, r7, r1
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	b299      	uxth	r1, r3
 8003efa:	4b5b      	ldr	r3, [pc, #364]	; (8004068 <answer2CPU+0x8cc>)
 8003efc:	0052      	lsls	r2, r2, #1
 8003efe:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003f00:	46c0      	nop			; (mov r8, r8)
 8003f02:	4b5a      	ldr	r3, [pc, #360]	; (800406c <answer2CPU+0x8d0>)
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	2280      	movs	r2, #128	; 0x80
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d0fa      	beq.n	8003f02 <answer2CPU+0x766>
					USART2->TDR = ans[0]|0x0100;
 8003f0c:	4b56      	ldr	r3, [pc, #344]	; (8004068 <answer2CPU+0x8cc>)
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	2280      	movs	r2, #128	; 0x80
 8003f12:	0052      	lsls	r2, r2, #1
 8003f14:	4313      	orrs	r3, r2
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	4b54      	ldr	r3, [pc, #336]	; (800406c <answer2CPU+0x8d0>)
 8003f1a:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8003f1c:	e014      	b.n	8003f48 <answer2CPU+0x7ac>
						{
						  i++;
 8003f1e:	210e      	movs	r1, #14
 8003f20:	187b      	adds	r3, r7, r1
 8003f22:	781a      	ldrb	r2, [r3, #0]
 8003f24:	187b      	adds	r3, r7, r1
 8003f26:	3201      	adds	r2, #1
 8003f28:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8003f2a:	46c0      	nop			; (mov r8, r8)
 8003f2c:	4b4f      	ldr	r3, [pc, #316]	; (800406c <answer2CPU+0x8d0>)
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	2280      	movs	r2, #128	; 0x80
 8003f32:	4013      	ands	r3, r2
 8003f34:	d0fa      	beq.n	8003f2c <answer2CPU+0x790>
						     USART2->TDR = (uint8_t)ans[i];
 8003f36:	230e      	movs	r3, #14
 8003f38:	18fb      	adds	r3, r7, r3
 8003f3a:	781a      	ldrb	r2, [r3, #0]
 8003f3c:	4b4a      	ldr	r3, [pc, #296]	; (8004068 <answer2CPU+0x8cc>)
 8003f3e:	0052      	lsls	r2, r2, #1
 8003f40:	5ad3      	ldrh	r3, [r2, r3]
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	4b49      	ldr	r3, [pc, #292]	; (800406c <answer2CPU+0x8d0>)
 8003f46:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8003f48:	230e      	movs	r3, #14
 8003f4a:	18fb      	adds	r3, r7, r3
 8003f4c:	781a      	ldrb	r2, [r3, #0]
 8003f4e:	4b46      	ldr	r3, [pc, #280]	; (8004068 <answer2CPU+0x8cc>)
 8003f50:	0052      	lsls	r2, r2, #1
 8003f52:	5ad3      	ldrh	r3, [r2, r3]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e2      	bne.n	8003f1e <answer2CPU+0x782>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b04      	cmp	r3, #4
 8003f5e:	d000      	beq.n	8003f62 <answer2CPU+0x7c6>
 8003f60:	e076      	b.n	8004050 <answer2CPU+0x8b4>
				myLength = 0x04; //4 bytes length answer
 8003f62:	2109      	movs	r1, #9
 8003f64:	187b      	adds	r3, r7, r1
 8003f66:	2204      	movs	r2, #4
 8003f68:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003f6a:	187b      	adds	r3, r7, r1
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b02      	subs	r3, #2
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	4b3c      	ldr	r3, [pc, #240]	; (8004068 <answer2CPU+0x8cc>)
 8003f76:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3302      	adds	r3, #2
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	001a      	movs	r2, r3
 8003f80:	4b3b      	ldr	r3, [pc, #236]	; (8004070 <answer2CPU+0x8d4>)
 8003f82:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 8003f84:	4b3b      	ldr	r3, [pc, #236]	; (8004074 <answer2CPU+0x8d8>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	4b37      	ldr	r3, [pc, #220]	; (8004068 <answer2CPU+0x8cc>)
 8003f8c:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8003f8e:	230d      	movs	r3, #13
 8003f90:	18fb      	adds	r3, r7, r3
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	4b34      	ldr	r3, [pc, #208]	; (8004068 <answer2CPU+0x8cc>)
 8003f98:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8003f9a:	230e      	movs	r3, #14
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	701a      	strb	r2, [r3, #0]
 8003fa2:	e011      	b.n	8003fc8 <answer2CPU+0x82c>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8003fa4:	200e      	movs	r0, #14
 8003fa6:	183b      	adds	r3, r7, r0
 8003fa8:	781a      	ldrb	r2, [r3, #0]
 8003faa:	4b2f      	ldr	r3, [pc, #188]	; (8004068 <answer2CPU+0x8cc>)
 8003fac:	0052      	lsls	r2, r2, #1
 8003fae:	5ad3      	ldrh	r3, [r2, r3]
 8003fb0:	b2d9      	uxtb	r1, r3
 8003fb2:	220d      	movs	r2, #13
 8003fb4:	18bb      	adds	r3, r7, r2
 8003fb6:	18ba      	adds	r2, r7, r2
 8003fb8:	7812      	ldrb	r2, [r2, #0]
 8003fba:	188a      	adds	r2, r1, r2
 8003fbc:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8003fbe:	183b      	adds	r3, r7, r0
 8003fc0:	781a      	ldrb	r2, [r3, #0]
 8003fc2:	183b      	adds	r3, r7, r0
 8003fc4:	3201      	adds	r2, #1
 8003fc6:	701a      	strb	r2, [r3, #0]
 8003fc8:	230e      	movs	r3, #14
 8003fca:	18fb      	adds	r3, r7, r3
 8003fcc:	781a      	ldrb	r2, [r3, #0]
 8003fce:	2009      	movs	r0, #9
 8003fd0:	183b      	adds	r3, r7, r0
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	dbe4      	blt.n	8003fa4 <answer2CPU+0x808>
				}
				myCS = 0 - myCS;
 8003fda:	210d      	movs	r1, #13
 8003fdc:	187b      	adds	r3, r7, r1
 8003fde:	187a      	adds	r2, r7, r1
 8003fe0:	7812      	ldrb	r2, [r2, #0]
 8003fe2:	4252      	negs	r2, r2
 8003fe4:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003fe6:	183b      	adds	r3, r7, r0
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	1e5a      	subs	r2, r3, #1
 8003fec:	187b      	adds	r3, r7, r1
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	b299      	uxth	r1, r3
 8003ff2:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <answer2CPU+0x8cc>)
 8003ff4:	0052      	lsls	r2, r2, #1
 8003ff6:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003ff8:	46c0      	nop			; (mov r8, r8)
 8003ffa:	4b1c      	ldr	r3, [pc, #112]	; (800406c <answer2CPU+0x8d0>)
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	2280      	movs	r2, #128	; 0x80
 8004000:	4013      	ands	r3, r2
 8004002:	d0fa      	beq.n	8003ffa <answer2CPU+0x85e>
				USART2->TDR = ans[0]|0x0100;
 8004004:	4b18      	ldr	r3, [pc, #96]	; (8004068 <answer2CPU+0x8cc>)
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	2280      	movs	r2, #128	; 0x80
 800400a:	0052      	lsls	r2, r2, #1
 800400c:	4313      	orrs	r3, r2
 800400e:	b29a      	uxth	r2, r3
 8004010:	4b16      	ldr	r3, [pc, #88]	; (800406c <answer2CPU+0x8d0>)
 8004012:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8004014:	e014      	b.n	8004040 <answer2CPU+0x8a4>
				{
				  i++;
 8004016:	210e      	movs	r1, #14
 8004018:	187b      	adds	r3, r7, r1
 800401a:	781a      	ldrb	r2, [r3, #0]
 800401c:	187b      	adds	r3, r7, r1
 800401e:	3201      	adds	r2, #1
 8004020:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	4b11      	ldr	r3, [pc, #68]	; (800406c <answer2CPU+0x8d0>)
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	2280      	movs	r2, #128	; 0x80
 800402a:	4013      	ands	r3, r2
 800402c:	d0fa      	beq.n	8004024 <answer2CPU+0x888>
				  USART2->TDR = (uint8_t)ans[i];
 800402e:	230e      	movs	r3, #14
 8004030:	18fb      	adds	r3, r7, r3
 8004032:	781a      	ldrb	r2, [r3, #0]
 8004034:	4b0c      	ldr	r3, [pc, #48]	; (8004068 <answer2CPU+0x8cc>)
 8004036:	0052      	lsls	r2, r2, #1
 8004038:	5ad3      	ldrh	r3, [r2, r3]
 800403a:	b2da      	uxtb	r2, r3
 800403c:	4b0b      	ldr	r3, [pc, #44]	; (800406c <answer2CPU+0x8d0>)
 800403e:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8004040:	230e      	movs	r3, #14
 8004042:	18fb      	adds	r3, r7, r3
 8004044:	781a      	ldrb	r2, [r3, #0]
 8004046:	4b08      	ldr	r3, [pc, #32]	; (8004068 <answer2CPU+0x8cc>)
 8004048:	0052      	lsls	r2, r2, #1
 800404a:	5ad3      	ldrh	r3, [r2, r3]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e2      	bne.n	8004016 <answer2CPU+0x87a>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 8004050:	4b06      	ldr	r3, [pc, #24]	; (800406c <answer2CPU+0x8d0>)
 8004052:	6a1a      	ldr	r2, [r3, #32]
 8004054:	4b05      	ldr	r3, [pc, #20]	; (800406c <answer2CPU+0x8d0>)
 8004056:	2108      	movs	r1, #8
 8004058:	430a      	orrs	r2, r1
 800405a:	621a      	str	r2, [r3, #32]
}
 800405c:	46c0      	nop			; (mov r8, r8)
 800405e:	0018      	movs	r0, r3
 8004060:	46bd      	mov	sp, r7
 8004062:	b004      	add	sp, #16
 8004064:	bd80      	pop	{r7, pc}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	200013c8 	.word	0x200013c8
 800406c:	40004400 	.word	0x40004400
 8004070:	20000310 	.word	0x20000310
 8004074:	20000203 	.word	0x20000203

08004078 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 800407e:	2001      	movs	r0, #1
 8004080:	f003 faec 	bl	800765c <HAL_Delay>
		GPIOB->ODR &= ~(1 << 9); //reset cs
 8004084:	4b28      	ldr	r3, [pc, #160]	; (8004128 <MEM_Reset+0xb0>)
 8004086:	695a      	ldr	r2, [r3, #20]
 8004088:	4b27      	ldr	r3, [pc, #156]	; (8004128 <MEM_Reset+0xb0>)
 800408a:	4928      	ldr	r1, [pc, #160]	; (800412c <MEM_Reset+0xb4>)
 800408c:	400a      	ands	r2, r1
 800408e:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 8004090:	1dfb      	adds	r3, r7, #7
 8004092:	2266      	movs	r2, #102	; 0x66
 8004094:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8004096:	1df9      	adds	r1, r7, #7
 8004098:	4825      	ldr	r0, [pc, #148]	; (8004130 <MEM_Reset+0xb8>)
 800409a:	2305      	movs	r3, #5
 800409c:	2201      	movs	r2, #1
 800409e:	f007 fae9 	bl	800b674 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 80040a2:	4b21      	ldr	r3, [pc, #132]	; (8004128 <MEM_Reset+0xb0>)
 80040a4:	695a      	ldr	r2, [r3, #20]
 80040a6:	4b20      	ldr	r3, [pc, #128]	; (8004128 <MEM_Reset+0xb0>)
 80040a8:	2180      	movs	r1, #128	; 0x80
 80040aa:	0089      	lsls	r1, r1, #2
 80040ac:	430a      	orrs	r2, r1
 80040ae:	615a      	str	r2, [r3, #20]
		asm("NOP");
 80040b0:	46c0      	nop			; (mov r8, r8)
		__NOP();
 80040b2:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 80040b4:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 80040b6:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 80040b8:	46c0      	nop			; (mov r8, r8)
		__NOP();
 80040ba:	46c0      	nop			; (mov r8, r8)
		GPIOB->ODR &= ~(1 << 9);			//reset cs
 80040bc:	4b1a      	ldr	r3, [pc, #104]	; (8004128 <MEM_Reset+0xb0>)
 80040be:	695a      	ldr	r2, [r3, #20]
 80040c0:	4b19      	ldr	r3, [pc, #100]	; (8004128 <MEM_Reset+0xb0>)
 80040c2:	491a      	ldr	r1, [pc, #104]	; (800412c <MEM_Reset+0xb4>)
 80040c4:	400a      	ands	r2, r1
 80040c6:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 80040c8:	1dfb      	adds	r3, r7, #7
 80040ca:	2299      	movs	r2, #153	; 0x99
 80040cc:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 80040ce:	1df9      	adds	r1, r7, #7
 80040d0:	4817      	ldr	r0, [pc, #92]	; (8004130 <MEM_Reset+0xb8>)
 80040d2:	2305      	movs	r3, #5
 80040d4:	2201      	movs	r2, #1
 80040d6:	f007 facd 	bl	800b674 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 80040da:	4b13      	ldr	r3, [pc, #76]	; (8004128 <MEM_Reset+0xb0>)
 80040dc:	695a      	ldr	r2, [r3, #20]
 80040de:	4b12      	ldr	r3, [pc, #72]	; (8004128 <MEM_Reset+0xb0>)
 80040e0:	2180      	movs	r1, #128	; 0x80
 80040e2:	0089      	lsls	r1, r1, #2
 80040e4:	430a      	orrs	r2, r1
 80040e6:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 80040e8:	2001      	movs	r0, #1
 80040ea:	f003 fab7 	bl	800765c <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 80040ee:	1dfb      	adds	r3, r7, #7
 80040f0:	22b7      	movs	r2, #183	; 0xb7
 80040f2:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 << 9); //reset cs
 80040f4:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <MEM_Reset+0xb0>)
 80040f6:	695a      	ldr	r2, [r3, #20]
 80040f8:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <MEM_Reset+0xb0>)
 80040fa:	490c      	ldr	r1, [pc, #48]	; (800412c <MEM_Reset+0xb4>)
 80040fc:	400a      	ands	r2, r1
 80040fe:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8004100:	1df9      	adds	r1, r7, #7
 8004102:	480b      	ldr	r0, [pc, #44]	; (8004130 <MEM_Reset+0xb8>)
 8004104:	2305      	movs	r3, #5
 8004106:	2201      	movs	r2, #1
 8004108:	f007 fab4 	bl	800b674 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 800410c:	4b06      	ldr	r3, [pc, #24]	; (8004128 <MEM_Reset+0xb0>)
 800410e:	695a      	ldr	r2, [r3, #20]
 8004110:	4b05      	ldr	r3, [pc, #20]	; (8004128 <MEM_Reset+0xb0>)
 8004112:	2180      	movs	r1, #128	; 0x80
 8004114:	0089      	lsls	r1, r1, #2
 8004116:	430a      	orrs	r2, r1
 8004118:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 800411a:	2001      	movs	r0, #1
 800411c:	f003 fa9e 	bl	800765c <HAL_Delay>
	}
 8004120:	46c0      	nop			; (mov r8, r8)
 8004122:	46bd      	mov	sp, r7
 8004124:	b002      	add	sp, #8
 8004126:	bd80      	pop	{r7, pc}
 8004128:	50000400 	.word	0x50000400
 800412c:	fffffdff 	.word	0xfffffdff
 8004130:	200000b4 	.word	0x200000b4

08004134 <weoShowFullScreen>:
//==================================================================================================================================
	uint8_t weoShowFullScreen(uint8_t picNum) {
 8004134:	b5b0      	push	{r4, r5, r7, lr}
 8004136:	4c48      	ldr	r4, [pc, #288]	; (8004258 <weoShowFullScreen+0x124>)
 8004138:	44a5      	add	sp, r4
 800413a:	af02      	add	r7, sp, #8
 800413c:	0002      	movs	r2, r0
 800413e:	4b47      	ldr	r3, [pc, #284]	; (800425c <weoShowFullScreen+0x128>)
 8004140:	4947      	ldr	r1, [pc, #284]	; (8004260 <weoShowFullScreen+0x12c>)
 8004142:	468c      	mov	ip, r1
 8004144:	44bc      	add	ip, r7
 8004146:	4463      	add	r3, ip
 8004148:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i, len;
		uint32_t addrInfo,addr,firstImAddr;
		memCMD = 0x13; //read command with 4-byte address
 800414a:	4846      	ldr	r0, [pc, #280]	; (8004264 <weoShowFullScreen+0x130>)
 800414c:	183b      	adds	r3, r7, r0
 800414e:	2213      	movs	r2, #19
 8004150:	701a      	strb	r2, [r3, #0]
//		picNum=0x02;
		addr=(picNum)*0x2000;
 8004152:	4b42      	ldr	r3, [pc, #264]	; (800425c <weoShowFullScreen+0x128>)
 8004154:	4a42      	ldr	r2, [pc, #264]	; (8004260 <weoShowFullScreen+0x12c>)
 8004156:	4694      	mov	ip, r2
 8004158:	44bc      	add	ip, r7
 800415a:	4463      	add	r3, ip
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	035b      	lsls	r3, r3, #13
 8004160:	4941      	ldr	r1, [pc, #260]	; (8004268 <weoShowFullScreen+0x134>)
 8004162:	187a      	adds	r2, r7, r1
 8004164:	6013      	str	r3, [r2, #0]
//		addr=0x00003800;
		addrArray[0]=addr & 0xFF;
 8004166:	187b      	adds	r3, r7, r1
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	b2da      	uxtb	r2, r3
 800416c:	4b3f      	ldr	r3, [pc, #252]	; (800426c <weoShowFullScreen+0x138>)
 800416e:	4c3c      	ldr	r4, [pc, #240]	; (8004260 <weoShowFullScreen+0x12c>)
 8004170:	46a4      	mov	ip, r4
 8004172:	44bc      	add	ip, r7
 8004174:	4463      	add	r3, ip
 8004176:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8004178:	187b      	adds	r3, r7, r1
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	0a1b      	lsrs	r3, r3, #8
 800417e:	b2da      	uxtb	r2, r3
 8004180:	4b3a      	ldr	r3, [pc, #232]	; (800426c <weoShowFullScreen+0x138>)
 8004182:	4c37      	ldr	r4, [pc, #220]	; (8004260 <weoShowFullScreen+0x12c>)
 8004184:	46a4      	mov	ip, r4
 8004186:	44bc      	add	ip, r7
 8004188:	4463      	add	r3, ip
 800418a:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 800418c:	187b      	adds	r3, r7, r1
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	0c1b      	lsrs	r3, r3, #16
 8004192:	b2da      	uxtb	r2, r3
 8004194:	4b35      	ldr	r3, [pc, #212]	; (800426c <weoShowFullScreen+0x138>)
 8004196:	4c32      	ldr	r4, [pc, #200]	; (8004260 <weoShowFullScreen+0x12c>)
 8004198:	46a4      	mov	ip, r4
 800419a:	44bc      	add	ip, r7
 800419c:	4463      	add	r3, ip
 800419e:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 80041a0:	187b      	adds	r3, r7, r1
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	0e1b      	lsrs	r3, r3, #24
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	4b30      	ldr	r3, [pc, #192]	; (800426c <weoShowFullScreen+0x138>)
 80041aa:	492d      	ldr	r1, [pc, #180]	; (8004260 <weoShowFullScreen+0x12c>)
 80041ac:	468c      	mov	ip, r1
 80041ae:	44bc      	add	ip, r7
 80041b0:	4463      	add	r3, ip
 80041b2:	70da      	strb	r2, [r3, #3]

		GPIOB->ODR &= ~(1 << 9); //reset cs
 80041b4:	4b2e      	ldr	r3, [pc, #184]	; (8004270 <weoShowFullScreen+0x13c>)
 80041b6:	695a      	ldr	r2, [r3, #20]
 80041b8:	4b2d      	ldr	r3, [pc, #180]	; (8004270 <weoShowFullScreen+0x13c>)
 80041ba:	492e      	ldr	r1, [pc, #184]	; (8004274 <weoShowFullScreen+0x140>)
 80041bc:	400a      	ands	r2, r1
 80041be:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 80041c0:	1839      	adds	r1, r7, r0
 80041c2:	482d      	ldr	r0, [pc, #180]	; (8004278 <weoShowFullScreen+0x144>)
 80041c4:	2332      	movs	r3, #50	; 0x32
 80041c6:	2201      	movs	r2, #1
 80041c8:	f007 fa54 	bl	800b674 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 80041cc:	2408      	movs	r4, #8
 80041ce:	193b      	adds	r3, r7, r4
 80041d0:	1cd9      	adds	r1, r3, #3
 80041d2:	4829      	ldr	r0, [pc, #164]	; (8004278 <weoShowFullScreen+0x144>)
 80041d4:	2332      	movs	r3, #50	; 0x32
 80041d6:	2201      	movs	r2, #1
 80041d8:	f007 fa4c 	bl	800b674 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 80041dc:	193b      	adds	r3, r7, r4
 80041de:	1c99      	adds	r1, r3, #2
 80041e0:	4825      	ldr	r0, [pc, #148]	; (8004278 <weoShowFullScreen+0x144>)
 80041e2:	2332      	movs	r3, #50	; 0x32
 80041e4:	2201      	movs	r2, #1
 80041e6:	f007 fa45 	bl	800b674 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 80041ea:	193b      	adds	r3, r7, r4
 80041ec:	1c59      	adds	r1, r3, #1
 80041ee:	4822      	ldr	r0, [pc, #136]	; (8004278 <weoShowFullScreen+0x144>)
 80041f0:	2332      	movs	r3, #50	; 0x32
 80041f2:	2201      	movs	r2, #1
 80041f4:	f007 fa3e 	bl	800b674 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 80041f8:	1939      	adds	r1, r7, r4
 80041fa:	481f      	ldr	r0, [pc, #124]	; (8004278 <weoShowFullScreen+0x144>)
 80041fc:	2332      	movs	r3, #50	; 0x32
 80041fe:	2201      	movs	r2, #1
 8004200:	f007 fa38 	bl	800b674 <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,8192, 5000);
 8004204:	4c1d      	ldr	r4, [pc, #116]	; (800427c <weoShowFullScreen+0x148>)
 8004206:	2380      	movs	r3, #128	; 0x80
 8004208:	019a      	lsls	r2, r3, #6
 800420a:	2510      	movs	r5, #16
 800420c:	1979      	adds	r1, r7, r5
 800420e:	481a      	ldr	r0, [pc, #104]	; (8004278 <weoShowFullScreen+0x144>)
 8004210:	0023      	movs	r3, r4
 8004212:	f007 fb87 	bl	800b924 <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9; // set cs
 8004216:	4b16      	ldr	r3, [pc, #88]	; (8004270 <weoShowFullScreen+0x13c>)
 8004218:	695a      	ldr	r2, [r3, #20]
 800421a:	4b15      	ldr	r3, [pc, #84]	; (8004270 <weoShowFullScreen+0x13c>)
 800421c:	2180      	movs	r1, #128	; 0x80
 800421e:	0089      	lsls	r1, r1, #2
 8004220:	430a      	orrs	r2, r1
 8004222:	615a      	str	r2, [r3, #20]

		weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, MEM_Buffer); // Здесь ещё работает
 8004224:	197b      	adds	r3, r7, r5
 8004226:	9301      	str	r3, [sp, #4]
 8004228:	23ff      	movs	r3, #255	; 0xff
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	237f      	movs	r3, #127	; 0x7f
 800422e:	227f      	movs	r2, #127	; 0x7f
 8004230:	2100      	movs	r1, #0
 8004232:	2000      	movs	r0, #0
 8004234:	f7ff f904 	bl	8003440 <weoDrawRectangleFilled>
		cmd2Execute=0;
 8004238:	4b11      	ldr	r3, [pc, #68]	; (8004280 <weoShowFullScreen+0x14c>)
 800423a:	2200      	movs	r2, #0
 800423c:	701a      	strb	r2, [r3, #0]
//		while(BFEN==0){};
		GPIOC->ODR |= 1 << 6;	//set BF
 800423e:	4b11      	ldr	r3, [pc, #68]	; (8004284 <weoShowFullScreen+0x150>)
 8004240:	695a      	ldr	r2, [r3, #20]
 8004242:	4b10      	ldr	r3, [pc, #64]	; (8004284 <weoShowFullScreen+0x150>)
 8004244:	2140      	movs	r1, #64	; 0x40
 8004246:	430a      	orrs	r2, r1
 8004248:	615a      	str	r2, [r3, #20]
	}
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	0018      	movs	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	4b03      	ldr	r3, [pc, #12]	; (8004260 <weoShowFullScreen+0x12c>)
 8004252:	449d      	add	sp, r3
 8004254:	bdb0      	pop	{r4, r5, r7, pc}
 8004256:	46c0      	nop			; (mov r8, r8)
 8004258:	ffffdfe0 	.word	0xffffdfe0
 800425c:	ffffdfef 	.word	0xffffdfef
 8004260:	00002018 	.word	0x00002018
 8004264:	00002013 	.word	0x00002013
 8004268:	00002014 	.word	0x00002014
 800426c:	ffffdff0 	.word	0xffffdff0
 8004270:	50000400 	.word	0x50000400
 8004274:	fffffdff 	.word	0xfffffdff
 8004278:	200000b4 	.word	0x200000b4
 800427c:	00001388 	.word	0x00001388
 8004280:	2000137b 	.word	0x2000137b
 8004284:	50000800 	.word	0x50000800

08004288 <weoShowSmallImage>:
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
	}
//==========================================================================================================================
	uint8_t weoShowSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 8004288:	b590      	push	{r4, r7, lr}
 800428a:	4cb4      	ldr	r4, [pc, #720]	; (800455c <weoShowSmallImage+0x2d4>)
 800428c:	44a5      	add	sp, r4
 800428e:	af02      	add	r7, sp, #8
 8004290:	0004      	movs	r4, r0
 8004292:	0008      	movs	r0, r1
 8004294:	0011      	movs	r1, r2
 8004296:	4bb2      	ldr	r3, [pc, #712]	; (8004560 <weoShowSmallImage+0x2d8>)
 8004298:	4ab2      	ldr	r2, [pc, #712]	; (8004564 <weoShowSmallImage+0x2dc>)
 800429a:	4694      	mov	ip, r2
 800429c:	44bc      	add	ip, r7
 800429e:	4463      	add	r3, ip
 80042a0:	1c22      	adds	r2, r4, #0
 80042a2:	701a      	strb	r2, [r3, #0]
 80042a4:	4bb0      	ldr	r3, [pc, #704]	; (8004568 <weoShowSmallImage+0x2e0>)
 80042a6:	4aaf      	ldr	r2, [pc, #700]	; (8004564 <weoShowSmallImage+0x2dc>)
 80042a8:	4694      	mov	ip, r2
 80042aa:	44bc      	add	ip, r7
 80042ac:	4463      	add	r3, ip
 80042ae:	1c02      	adds	r2, r0, #0
 80042b0:	701a      	strb	r2, [r3, #0]
 80042b2:	4bae      	ldr	r3, [pc, #696]	; (800456c <weoShowSmallImage+0x2e4>)
 80042b4:	4aab      	ldr	r2, [pc, #684]	; (8004564 <weoShowSmallImage+0x2dc>)
 80042b6:	4694      	mov	ip, r2
 80042b8:	44bc      	add	ip, r7
 80042ba:	4463      	add	r3, ip
 80042bc:	1c0a      	adds	r2, r1, #0
 80042be:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192];
		uint8_t imInfo[2],addrArray[4];
		uint16_t i;
		uint32_t addr,addrData;
		addr=0x00000000;
 80042c0:	2300      	movs	r3, #0
 80042c2:	49ab      	ldr	r1, [pc, #684]	; (8004570 <weoShowSmallImage+0x2e8>)
 80042c4:	187a      	adds	r2, r7, r1
 80042c6:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 80042c8:	48aa      	ldr	r0, [pc, #680]	; (8004574 <weoShowSmallImage+0x2ec>)
 80042ca:	183b      	adds	r3, r7, r0
 80042cc:	2213      	movs	r2, #19
 80042ce:	701a      	strb	r2, [r3, #0]
		//look at info about image
		addr=(picNum*0x2000)+0x200000;// the right path is to multiply picNum * image repeat period!
 80042d0:	4ba3      	ldr	r3, [pc, #652]	; (8004560 <weoShowSmallImage+0x2d8>)
 80042d2:	4aa4      	ldr	r2, [pc, #656]	; (8004564 <weoShowSmallImage+0x2dc>)
 80042d4:	4694      	mov	ip, r2
 80042d6:	44bc      	add	ip, r7
 80042d8:	4463      	add	r3, ip
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	3301      	adds	r3, #1
 80042de:	33ff      	adds	r3, #255	; 0xff
 80042e0:	035b      	lsls	r3, r3, #13
 80042e2:	187a      	adds	r2, r7, r1
 80042e4:	6013      	str	r3, [r2, #0]
//		addr=(picNum*0x2000);

		addrArray[0]=addr & 0xFF;
 80042e6:	187b      	adds	r3, r7, r1
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	4ba2      	ldr	r3, [pc, #648]	; (8004578 <weoShowSmallImage+0x2f0>)
 80042ee:	4c9d      	ldr	r4, [pc, #628]	; (8004564 <weoShowSmallImage+0x2dc>)
 80042f0:	46a4      	mov	ip, r4
 80042f2:	44bc      	add	ip, r7
 80042f4:	4463      	add	r3, ip
 80042f6:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 80042f8:	187b      	adds	r3, r7, r1
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	0a1b      	lsrs	r3, r3, #8
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	4b9d      	ldr	r3, [pc, #628]	; (8004578 <weoShowSmallImage+0x2f0>)
 8004302:	4c98      	ldr	r4, [pc, #608]	; (8004564 <weoShowSmallImage+0x2dc>)
 8004304:	46a4      	mov	ip, r4
 8004306:	44bc      	add	ip, r7
 8004308:	4463      	add	r3, ip
 800430a:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 800430c:	187b      	adds	r3, r7, r1
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	0c1b      	lsrs	r3, r3, #16
 8004312:	b2da      	uxtb	r2, r3
 8004314:	4b98      	ldr	r3, [pc, #608]	; (8004578 <weoShowSmallImage+0x2f0>)
 8004316:	4c93      	ldr	r4, [pc, #588]	; (8004564 <weoShowSmallImage+0x2dc>)
 8004318:	46a4      	mov	ip, r4
 800431a:	44bc      	add	ip, r7
 800431c:	4463      	add	r3, ip
 800431e:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8004320:	187b      	adds	r3, r7, r1
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	0e1b      	lsrs	r3, r3, #24
 8004326:	b2da      	uxtb	r2, r3
 8004328:	4b93      	ldr	r3, [pc, #588]	; (8004578 <weoShowSmallImage+0x2f0>)
 800432a:	498e      	ldr	r1, [pc, #568]	; (8004564 <weoShowSmallImage+0x2dc>)
 800432c:	468c      	mov	ip, r1
 800432e:	44bc      	add	ip, r7
 8004330:	4463      	add	r3, ip
 8004332:	70da      	strb	r2, [r3, #3]

		GPIOB->ODR &= ~(1 << 9); //reset cs
 8004334:	4b91      	ldr	r3, [pc, #580]	; (800457c <weoShowSmallImage+0x2f4>)
 8004336:	695a      	ldr	r2, [r3, #20]
 8004338:	4b90      	ldr	r3, [pc, #576]	; (800457c <weoShowSmallImage+0x2f4>)
 800433a:	4991      	ldr	r1, [pc, #580]	; (8004580 <weoShowSmallImage+0x2f8>)
 800433c:	400a      	ands	r2, r1
 800433e:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8004340:	1839      	adds	r1, r7, r0
 8004342:	4890      	ldr	r0, [pc, #576]	; (8004584 <weoShowSmallImage+0x2fc>)
 8004344:	2332      	movs	r3, #50	; 0x32
 8004346:	2201      	movs	r2, #1
 8004348:	f007 f994 	bl	800b674 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 800434c:	2408      	movs	r4, #8
 800434e:	193b      	adds	r3, r7, r4
 8004350:	1cd9      	adds	r1, r3, #3
 8004352:	488c      	ldr	r0, [pc, #560]	; (8004584 <weoShowSmallImage+0x2fc>)
 8004354:	2332      	movs	r3, #50	; 0x32
 8004356:	2201      	movs	r2, #1
 8004358:	f007 f98c 	bl	800b674 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 800435c:	193b      	adds	r3, r7, r4
 800435e:	1c99      	adds	r1, r3, #2
 8004360:	4888      	ldr	r0, [pc, #544]	; (8004584 <weoShowSmallImage+0x2fc>)
 8004362:	2332      	movs	r3, #50	; 0x32
 8004364:	2201      	movs	r2, #1
 8004366:	f007 f985 	bl	800b674 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 800436a:	193b      	adds	r3, r7, r4
 800436c:	1c59      	adds	r1, r3, #1
 800436e:	4885      	ldr	r0, [pc, #532]	; (8004584 <weoShowSmallImage+0x2fc>)
 8004370:	2332      	movs	r3, #50	; 0x32
 8004372:	2201      	movs	r2, #1
 8004374:	f007 f97e 	bl	800b674 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8004378:	1939      	adds	r1, r7, r4
 800437a:	4882      	ldr	r0, [pc, #520]	; (8004584 <weoShowSmallImage+0x2fc>)
 800437c:	2332      	movs	r3, #50	; 0x32
 800437e:	2201      	movs	r2, #1
 8004380:	f007 f978 	bl	800b674 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 8004384:	4b80      	ldr	r3, [pc, #512]	; (8004588 <weoShowSmallImage+0x300>)
 8004386:	220c      	movs	r2, #12
 8004388:	18b9      	adds	r1, r7, r2
 800438a:	487e      	ldr	r0, [pc, #504]	; (8004584 <weoShowSmallImage+0x2fc>)
 800438c:	2202      	movs	r2, #2
 800438e:	f007 fac9 	bl	800b924 <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9; // set cs
 8004392:	4b7a      	ldr	r3, [pc, #488]	; (800457c <weoShowSmallImage+0x2f4>)
 8004394:	695a      	ldr	r2, [r3, #20]
 8004396:	4b79      	ldr	r3, [pc, #484]	; (800457c <weoShowSmallImage+0x2f4>)
 8004398:	2180      	movs	r1, #128	; 0x80
 800439a:	0089      	lsls	r1, r1, #2
 800439c:	430a      	orrs	r2, r1
 800439e:	615a      	str	r2, [r3, #20]

		width=imInfo[0];
 80043a0:	497a      	ldr	r1, [pc, #488]	; (800458c <weoShowSmallImage+0x304>)
 80043a2:	187b      	adds	r3, r7, r1
 80043a4:	4a7a      	ldr	r2, [pc, #488]	; (8004590 <weoShowSmallImage+0x308>)
 80043a6:	486f      	ldr	r0, [pc, #444]	; (8004564 <weoShowSmallImage+0x2dc>)
 80043a8:	4684      	mov	ip, r0
 80043aa:	44bc      	add	ip, r7
 80043ac:	4462      	add	r2, ip
 80043ae:	7812      	ldrb	r2, [r2, #0]
 80043b0:	701a      	strb	r2, [r3, #0]
		height=imInfo[1];
 80043b2:	4878      	ldr	r0, [pc, #480]	; (8004594 <weoShowSmallImage+0x30c>)
 80043b4:	183b      	adds	r3, r7, r0
 80043b6:	4a76      	ldr	r2, [pc, #472]	; (8004590 <weoShowSmallImage+0x308>)
 80043b8:	4c6a      	ldr	r4, [pc, #424]	; (8004564 <weoShowSmallImage+0x2dc>)
 80043ba:	46a4      	mov	ip, r4
 80043bc:	44bc      	add	ip, r7
 80043be:	4462      	add	r2, ip
 80043c0:	7852      	ldrb	r2, [r2, #1]
 80043c2:	701a      	strb	r2, [r3, #0]

		len=width*height/2+2;
 80043c4:	187b      	adds	r3, r7, r1
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	183a      	adds	r2, r7, r0
 80043ca:	7812      	ldrb	r2, [r2, #0]
 80043cc:	4353      	muls	r3, r2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	da00      	bge.n	80043d4 <weoShowSmallImage+0x14c>
 80043d2:	3301      	adds	r3, #1
 80043d4:	105b      	asrs	r3, r3, #1
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	3302      	adds	r3, #2
 80043da:	b29a      	uxth	r2, r3
 80043dc:	4b6e      	ldr	r3, [pc, #440]	; (8004598 <weoShowSmallImage+0x310>)
 80043de:	801a      	strh	r2, [r3, #0]

		addrData=addr+0x02;
 80043e0:	4b63      	ldr	r3, [pc, #396]	; (8004570 <weoShowSmallImage+0x2e8>)
 80043e2:	18fb      	adds	r3, r7, r3
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	3302      	adds	r3, #2
 80043e8:	496c      	ldr	r1, [pc, #432]	; (800459c <weoShowSmallImage+0x314>)
 80043ea:	187a      	adds	r2, r7, r1
 80043ec:	6013      	str	r3, [r2, #0]
		addrArray[0]=addrData & 0xFF;
 80043ee:	187b      	adds	r3, r7, r1
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	4b60      	ldr	r3, [pc, #384]	; (8004578 <weoShowSmallImage+0x2f0>)
 80043f6:	485b      	ldr	r0, [pc, #364]	; (8004564 <weoShowSmallImage+0x2dc>)
 80043f8:	4684      	mov	ip, r0
 80043fa:	44bc      	add	ip, r7
 80043fc:	4463      	add	r3, ip
 80043fe:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addrData >> 8) & 0xFF;
 8004400:	187b      	adds	r3, r7, r1
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	0a1b      	lsrs	r3, r3, #8
 8004406:	b2da      	uxtb	r2, r3
 8004408:	4b5b      	ldr	r3, [pc, #364]	; (8004578 <weoShowSmallImage+0x2f0>)
 800440a:	4856      	ldr	r0, [pc, #344]	; (8004564 <weoShowSmallImage+0x2dc>)
 800440c:	4684      	mov	ip, r0
 800440e:	44bc      	add	ip, r7
 8004410:	4463      	add	r3, ip
 8004412:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addrData >> 16) & 0xFF;
 8004414:	187b      	adds	r3, r7, r1
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	0c1b      	lsrs	r3, r3, #16
 800441a:	b2da      	uxtb	r2, r3
 800441c:	4b56      	ldr	r3, [pc, #344]	; (8004578 <weoShowSmallImage+0x2f0>)
 800441e:	4851      	ldr	r0, [pc, #324]	; (8004564 <weoShowSmallImage+0x2dc>)
 8004420:	4684      	mov	ip, r0
 8004422:	44bc      	add	ip, r7
 8004424:	4463      	add	r3, ip
 8004426:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addrData >> 24) & 0xFF;
 8004428:	187b      	adds	r3, r7, r1
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	0e1b      	lsrs	r3, r3, #24
 800442e:	b2da      	uxtb	r2, r3
 8004430:	4b51      	ldr	r3, [pc, #324]	; (8004578 <weoShowSmallImage+0x2f0>)
 8004432:	494c      	ldr	r1, [pc, #304]	; (8004564 <weoShowSmallImage+0x2dc>)
 8004434:	468c      	mov	ip, r1
 8004436:	44bc      	add	ip, r7
 8004438:	4463      	add	r3, ip
 800443a:	70da      	strb	r2, [r3, #3]

		USART2->ICR|=USART_ICR_ORECF;
 800443c:	4b58      	ldr	r3, [pc, #352]	; (80045a0 <weoShowSmallImage+0x318>)
 800443e:	6a1a      	ldr	r2, [r3, #32]
 8004440:	4b57      	ldr	r3, [pc, #348]	; (80045a0 <weoShowSmallImage+0x318>)
 8004442:	2108      	movs	r1, #8
 8004444:	430a      	orrs	r2, r1
 8004446:	621a      	str	r2, [r3, #32]
		memCMD = 0x13; //read command with 4-byte address
 8004448:	484a      	ldr	r0, [pc, #296]	; (8004574 <weoShowSmallImage+0x2ec>)
 800444a:	183b      	adds	r3, r7, r0
 800444c:	2213      	movs	r2, #19
 800444e:	701a      	strb	r2, [r3, #0]

		GPIOB->ODR &= ~(1 <<9);	//reset cs
 8004450:	4b4a      	ldr	r3, [pc, #296]	; (800457c <weoShowSmallImage+0x2f4>)
 8004452:	695a      	ldr	r2, [r3, #20]
 8004454:	4b49      	ldr	r3, [pc, #292]	; (800457c <weoShowSmallImage+0x2f4>)
 8004456:	494a      	ldr	r1, [pc, #296]	; (8004580 <weoShowSmallImage+0x2f8>)
 8004458:	400a      	ands	r2, r1
 800445a:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 800445c:	1839      	adds	r1, r7, r0
 800445e:	4849      	ldr	r0, [pc, #292]	; (8004584 <weoShowSmallImage+0x2fc>)
 8004460:	2332      	movs	r3, #50	; 0x32
 8004462:	2201      	movs	r2, #1
 8004464:	f007 f906 	bl	800b674 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 8004468:	2408      	movs	r4, #8
 800446a:	193b      	adds	r3, r7, r4
 800446c:	1cd9      	adds	r1, r3, #3
 800446e:	4845      	ldr	r0, [pc, #276]	; (8004584 <weoShowSmallImage+0x2fc>)
 8004470:	2332      	movs	r3, #50	; 0x32
 8004472:	2201      	movs	r2, #1
 8004474:	f007 f8fe 	bl	800b674 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 8004478:	193b      	adds	r3, r7, r4
 800447a:	1c99      	adds	r1, r3, #2
 800447c:	4841      	ldr	r0, [pc, #260]	; (8004584 <weoShowSmallImage+0x2fc>)
 800447e:	2332      	movs	r3, #50	; 0x32
 8004480:	2201      	movs	r2, #1
 8004482:	f007 f8f7 	bl	800b674 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 8004486:	193b      	adds	r3, r7, r4
 8004488:	1c59      	adds	r1, r3, #1
 800448a:	483e      	ldr	r0, [pc, #248]	; (8004584 <weoShowSmallImage+0x2fc>)
 800448c:	2332      	movs	r3, #50	; 0x32
 800448e:	2201      	movs	r2, #1
 8004490:	f007 f8f0 	bl	800b674 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 8004494:	1939      	adds	r1, r7, r4
 8004496:	483b      	ldr	r0, [pc, #236]	; (8004584 <weoShowSmallImage+0x2fc>)
 8004498:	2332      	movs	r3, #50	; 0x32
 800449a:	2201      	movs	r2, #1
 800449c:	f007 f8ea 	bl	800b674 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 80044a0:	4b3d      	ldr	r3, [pc, #244]	; (8004598 <weoShowSmallImage+0x310>)
 80044a2:	881a      	ldrh	r2, [r3, #0]
 80044a4:	4b38      	ldr	r3, [pc, #224]	; (8004588 <weoShowSmallImage+0x300>)
 80044a6:	2110      	movs	r1, #16
 80044a8:	1879      	adds	r1, r7, r1
 80044aa:	4836      	ldr	r0, [pc, #216]	; (8004584 <weoShowSmallImage+0x2fc>)
 80044ac:	f007 fa3a 	bl	800b924 <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9;	// set cs
 80044b0:	4b32      	ldr	r3, [pc, #200]	; (800457c <weoShowSmallImage+0x2f4>)
 80044b2:	695a      	ldr	r2, [r3, #20]
 80044b4:	4b31      	ldr	r3, [pc, #196]	; (800457c <weoShowSmallImage+0x2f4>)
 80044b6:	2180      	movs	r1, #128	; 0x80
 80044b8:	0089      	lsls	r1, r1, #2
 80044ba:	430a      	orrs	r2, r1
 80044bc:	615a      	str	r2, [r3, #20]

		decY=0x01;
 80044be:	4b39      	ldr	r3, [pc, #228]	; (80045a4 <weoShowSmallImage+0x31c>)
 80044c0:	2201      	movs	r2, #1
 80044c2:	701a      	strb	r2, [r3, #0]
		if(imY % 2 !=0){
 80044c4:	4b29      	ldr	r3, [pc, #164]	; (800456c <weoShowSmallImage+0x2e4>)
 80044c6:	4a27      	ldr	r2, [pc, #156]	; (8004564 <weoShowSmallImage+0x2dc>)
 80044c8:	4694      	mov	ip, r2
 80044ca:	44bc      	add	ip, r7
 80044cc:	4463      	add	r3, ip
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2201      	movs	r2, #1
 80044d2:	4013      	ands	r3, r2
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <weoShowSmallImage+0x258>
			decY=0x02;
 80044da:	4b32      	ldr	r3, [pc, #200]	; (80045a4 <weoShowSmallImage+0x31c>)
 80044dc:	2202      	movs	r2, #2
 80044de:	701a      	strb	r2, [r3, #0]
		}
		weoDrawRectangleFilled(imX, imY, imX+width-1, imY+height-decY, 0xFF,MEM_Buffer);	// Здесь ещё работает 0xFF - затычка
 80044e0:	4b21      	ldr	r3, [pc, #132]	; (8004568 <weoShowSmallImage+0x2e0>)
 80044e2:	4920      	ldr	r1, [pc, #128]	; (8004564 <weoShowSmallImage+0x2dc>)
 80044e4:	187a      	adds	r2, r7, r1
 80044e6:	18d2      	adds	r2, r2, r3
 80044e8:	4b28      	ldr	r3, [pc, #160]	; (800458c <weoShowSmallImage+0x304>)
 80044ea:	18fb      	adds	r3, r7, r3
 80044ec:	7812      	ldrb	r2, [r2, #0]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	18d3      	adds	r3, r2, r3
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b2dc      	uxtb	r4, r3
 80044f8:	4b1c      	ldr	r3, [pc, #112]	; (800456c <weoShowSmallImage+0x2e4>)
 80044fa:	187a      	adds	r2, r7, r1
 80044fc:	18d2      	adds	r2, r2, r3
 80044fe:	4b25      	ldr	r3, [pc, #148]	; (8004594 <weoShowSmallImage+0x30c>)
 8004500:	18fb      	adds	r3, r7, r3
 8004502:	7812      	ldrb	r2, [r2, #0]
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	18d3      	adds	r3, r2, r3
 8004508:	b2da      	uxtb	r2, r3
 800450a:	4b26      	ldr	r3, [pc, #152]	; (80045a4 <weoShowSmallImage+0x31c>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	b2da      	uxtb	r2, r3
 8004512:	4b16      	ldr	r3, [pc, #88]	; (800456c <weoShowSmallImage+0x2e4>)
 8004514:	4913      	ldr	r1, [pc, #76]	; (8004564 <weoShowSmallImage+0x2dc>)
 8004516:	468c      	mov	ip, r1
 8004518:	44bc      	add	ip, r7
 800451a:	4463      	add	r3, ip
 800451c:	7819      	ldrb	r1, [r3, #0]
 800451e:	4b12      	ldr	r3, [pc, #72]	; (8004568 <weoShowSmallImage+0x2e0>)
 8004520:	4810      	ldr	r0, [pc, #64]	; (8004564 <weoShowSmallImage+0x2dc>)
 8004522:	4684      	mov	ip, r0
 8004524:	44bc      	add	ip, r7
 8004526:	4463      	add	r3, ip
 8004528:	7818      	ldrb	r0, [r3, #0]
 800452a:	2310      	movs	r3, #16
 800452c:	18fb      	adds	r3, r7, r3
 800452e:	9301      	str	r3, [sp, #4]
 8004530:	23ff      	movs	r3, #255	; 0xff
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	0013      	movs	r3, r2
 8004536:	0022      	movs	r2, r4
 8004538:	f7fe ff82 	bl	8003440 <weoDrawRectangleFilled>
		cmd2Execute=0;
 800453c:	4b1a      	ldr	r3, [pc, #104]	; (80045a8 <weoShowSmallImage+0x320>)
 800453e:	2200      	movs	r2, #0
 8004540:	701a      	strb	r2, [r3, #0]
//		while(BFEN==0){};
		GPIOC->ODR |= 1 << 6;	//set BF
 8004542:	4b1a      	ldr	r3, [pc, #104]	; (80045ac <weoShowSmallImage+0x324>)
 8004544:	695a      	ldr	r2, [r3, #20]
 8004546:	4b19      	ldr	r3, [pc, #100]	; (80045ac <weoShowSmallImage+0x324>)
 8004548:	2140      	movs	r1, #64	; 0x40
 800454a:	430a      	orrs	r2, r1
 800454c:	615a      	str	r2, [r3, #20]
	}
 800454e:	46c0      	nop			; (mov r8, r8)
 8004550:	0018      	movs	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	4b16      	ldr	r3, [pc, #88]	; (80045b0 <weoShowSmallImage+0x328>)
 8004556:	449d      	add	sp, r3
 8004558:	bd90      	pop	{r4, r7, pc}
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	ffffdfd4 	.word	0xffffdfd4
 8004560:	ffffdfe7 	.word	0xffffdfe7
 8004564:	00002020 	.word	0x00002020
 8004568:	ffffdfe6 	.word	0xffffdfe6
 800456c:	ffffdfe5 	.word	0xffffdfe5
 8004570:	0000201c 	.word	0x0000201c
 8004574:	00002013 	.word	0x00002013
 8004578:	ffffdfe8 	.word	0xffffdfe8
 800457c:	50000400 	.word	0x50000400
 8004580:	fffffdff 	.word	0xfffffdff
 8004584:	200000b4 	.word	0x200000b4
 8004588:	00001388 	.word	0x00001388
 800458c:	0000201b 	.word	0x0000201b
 8004590:	ffffdfec 	.word	0xffffdfec
 8004594:	0000201a 	.word	0x0000201a
 8004598:	20001504 	.word	0x20001504
 800459c:	00002014 	.word	0x00002014
 80045a0:	40004400 	.word	0x40004400
 80045a4:	2000131d 	.word	0x2000131d
 80045a8:	2000137b 	.word	0x2000137b
 80045ac:	50000800 	.word	0x50000800
 80045b0:	00002024 	.word	0x00002024

080045b4 <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOB->ODR |= 1 << 9;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 80045ba:	1d3b      	adds	r3, r7, #4
 80045bc:	4a29      	ldr	r2, [pc, #164]	; (8004664 <MEM_GetID+0xb0>)
 80045be:	7812      	ldrb	r2, [r2, #0]
 80045c0:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 80045c2:	1dfb      	adds	r3, r7, #7
 80045c4:	229e      	movs	r2, #158	; 0x9e
 80045c6:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 <<9);	//reset cs
 80045c8:	4b27      	ldr	r3, [pc, #156]	; (8004668 <MEM_GetID+0xb4>)
 80045ca:	695a      	ldr	r2, [r3, #20]
 80045cc:	4b26      	ldr	r3, [pc, #152]	; (8004668 <MEM_GetID+0xb4>)
 80045ce:	4927      	ldr	r1, [pc, #156]	; (800466c <MEM_GetID+0xb8>)
 80045d0:	400a      	ands	r2, r1
 80045d2:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 80045d4:	1df9      	adds	r1, r7, #7
 80045d6:	4826      	ldr	r0, [pc, #152]	; (8004670 <MEM_GetID+0xbc>)
 80045d8:	2332      	movs	r3, #50	; 0x32
 80045da:	2201      	movs	r2, #1
 80045dc:	f007 f84a 	bl	800b674 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 80045e0:	23fa      	movs	r3, #250	; 0xfa
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	1d39      	adds	r1, r7, #4
 80045e6:	4822      	ldr	r0, [pc, #136]	; (8004670 <MEM_GetID+0xbc>)
 80045e8:	2201      	movs	r2, #1
 80045ea:	f007 f99b 	bl	800b924 <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 80045ee:	1d3b      	adds	r3, r7, #4
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	001a      	movs	r2, r3
 80045f4:	4b1f      	ldr	r3, [pc, #124]	; (8004674 <MEM_GetID+0xc0>)
 80045f6:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 80045f8:	4b1e      	ldr	r3, [pc, #120]	; (8004674 <MEM_GetID+0xc0>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	021a      	lsls	r2, r3, #8
 80045fe:	4b1d      	ldr	r3, [pc, #116]	; (8004674 <MEM_GetID+0xc0>)
 8004600:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8004602:	23fa      	movs	r3, #250	; 0xfa
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	1d39      	adds	r1, r7, #4
 8004608:	4819      	ldr	r0, [pc, #100]	; (8004670 <MEM_GetID+0xbc>)
 800460a:	2201      	movs	r2, #1
 800460c:	f007 f98a 	bl	800b924 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8004610:	1d3b      	adds	r3, r7, #4
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	001a      	movs	r2, r3
 8004616:	4b17      	ldr	r3, [pc, #92]	; (8004674 <MEM_GetID+0xc0>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	18d2      	adds	r2, r2, r3
 800461c:	4b15      	ldr	r3, [pc, #84]	; (8004674 <MEM_GetID+0xc0>)
 800461e:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 8004620:	4b14      	ldr	r3, [pc, #80]	; (8004674 <MEM_GetID+0xc0>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	021a      	lsls	r2, r3, #8
 8004626:	4b13      	ldr	r3, [pc, #76]	; (8004674 <MEM_GetID+0xc0>)
 8004628:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 800462a:	23fa      	movs	r3, #250	; 0xfa
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	1d39      	adds	r1, r7, #4
 8004630:	480f      	ldr	r0, [pc, #60]	; (8004670 <MEM_GetID+0xbc>)
 8004632:	2201      	movs	r2, #1
 8004634:	f007 f976 	bl	800b924 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8004638:	1d3b      	adds	r3, r7, #4
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	001a      	movs	r2, r3
 800463e:	4b0d      	ldr	r3, [pc, #52]	; (8004674 <MEM_GetID+0xc0>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	18d2      	adds	r2, r2, r3
 8004644:	4b0b      	ldr	r3, [pc, #44]	; (8004674 <MEM_GetID+0xc0>)
 8004646:	601a      	str	r2, [r3, #0]
		GPIOB->ODR |= 1 << 9;                    			// set cs
 8004648:	4b07      	ldr	r3, [pc, #28]	; (8004668 <MEM_GetID+0xb4>)
 800464a:	695a      	ldr	r2, [r3, #20]
 800464c:	4b06      	ldr	r3, [pc, #24]	; (8004668 <MEM_GetID+0xb4>)
 800464e:	2180      	movs	r1, #128	; 0x80
 8004650:	0089      	lsls	r1, r1, #2
 8004652:	430a      	orrs	r2, r1
 8004654:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 8004656:	4b07      	ldr	r3, [pc, #28]	; (8004674 <MEM_GetID+0xc0>)
 8004658:	681b      	ldr	r3, [r3, #0]
	}
 800465a:	0018      	movs	r0, r3
 800465c:	46bd      	mov	sp, r7
 800465e:	b002      	add	sp, #8
 8004660:	bd80      	pop	{r7, pc}
 8004662:	46c0      	nop			; (mov r8, r8)
 8004664:	0800fc78 	.word	0x0800fc78
 8004668:	50000400 	.word	0x50000400
 800466c:	fffffdff 	.word	0xfffffdff
 8004670:	200000b4 	.word	0x200000b4
 8004674:	20000060 	.word	0x20000060

08004678 <cmdExecute>:
	uint16_t Scount(void){
		LIS3DHreadData();

	}
//====================================================================================================================
	uint8_t cmdExecute(uint8_t cmd2Execute){
 8004678:	b590      	push	{r4, r7, lr}
 800467a:	b085      	sub	sp, #20
 800467c:	af02      	add	r7, sp, #8
 800467e:	0002      	movs	r2, r0
 8004680:	1dfb      	adds	r3, r7, #7
 8004682:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8004684:	4b84      	ldr	r3, [pc, #528]	; (8004898 <cmdExecute+0x220>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	2b10      	cmp	r3, #16
 800468a:	d100      	bne.n	800468e <cmdExecute+0x16>
 800468c:	e0fb      	b.n	8004886 <cmdExecute+0x20e>
		if(soundReady==0){return;}
 800468e:	4b83      	ldr	r3, [pc, #524]	; (800489c <cmdExecute+0x224>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d100      	bne.n	8004698 <cmdExecute+0x20>
 8004696:	e0f8      	b.n	800488a <cmdExecute+0x212>
//		if(cmd[0]==00){return;}
		if (bf4me!=0x00){return;}	// protection against false BF resets
 8004698:	4b81      	ldr	r3, [pc, #516]	; (80048a0 <cmdExecute+0x228>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d000      	beq.n	80046a2 <cmdExecute+0x2a>
 80046a0:	e0f5      	b.n	800488e <cmdExecute+0x216>
		USART2->ICR|=USART_ICR_ORECF;
 80046a2:	4b80      	ldr	r3, [pc, #512]	; (80048a4 <cmdExecute+0x22c>)
 80046a4:	6a1a      	ldr	r2, [r3, #32]
 80046a6:	4b7f      	ldr	r3, [pc, #508]	; (80048a4 <cmdExecute+0x22c>)
 80046a8:	2108      	movs	r1, #8
 80046aa:	430a      	orrs	r2, r1
 80046ac:	621a      	str	r2, [r3, #32]

				}
		if(cmd2Execute==0x10){

				}
		if(cmd2Execute==0x11){
 80046ae:	1dfb      	adds	r3, r7, #7
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	2b11      	cmp	r3, #17
 80046b4:	d113      	bne.n	80046de <cmdExecute+0x66>
			GPIOC->ODR &=~ GPIO_ODR_OD6;
 80046b6:	4b7c      	ldr	r3, [pc, #496]	; (80048a8 <cmdExecute+0x230>)
 80046b8:	695a      	ldr	r2, [r3, #20]
 80046ba:	4b7b      	ldr	r3, [pc, #492]	; (80048a8 <cmdExecute+0x230>)
 80046bc:	2140      	movs	r1, #64	; 0x40
 80046be:	438a      	bics	r2, r1
 80046c0:	615a      	str	r2, [r3, #20]
			bf4me=0x11;	//set BF flag 4 me
 80046c2:	4b77      	ldr	r3, [pc, #476]	; (80048a0 <cmdExecute+0x228>)
 80046c4:	2211      	movs	r2, #17
 80046c6:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
			weoShowFullScreen(picNum);
 80046c8:	4b78      	ldr	r3, [pc, #480]	; (80048ac <cmdExecute+0x234>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	0018      	movs	r0, r3
 80046ce:	f7ff fd31 	bl	8004134 <weoShowFullScreen>
//			weoShowFullScreenDMA(picNum);
			USART2->ICR|=USART_ICR_ORECF;
 80046d2:	4b74      	ldr	r3, [pc, #464]	; (80048a4 <cmdExecute+0x22c>)
 80046d4:	6a1a      	ldr	r2, [r3, #32]
 80046d6:	4b73      	ldr	r3, [pc, #460]	; (80048a4 <cmdExecute+0x22c>)
 80046d8:	2108      	movs	r1, #8
 80046da:	430a      	orrs	r2, r1
 80046dc:	621a      	str	r2, [r3, #32]
				}
		if(cmd2Execute==0x12){
 80046de:	1dfb      	adds	r3, r7, #7
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	2b12      	cmp	r3, #18
 80046e4:	d10d      	bne.n	8004702 <cmdExecute+0x8a>
			bf4me=0x12;	//set BF flag 4 me
 80046e6:	4b6e      	ldr	r3, [pc, #440]	; (80048a0 <cmdExecute+0x228>)
 80046e8:	2212      	movs	r2, #18
 80046ea:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowSmallImageDMA(picNum,imX,imY);
			weoShowSmallImage(picNum,imX,imY);
 80046ec:	4b6f      	ldr	r3, [pc, #444]	; (80048ac <cmdExecute+0x234>)
 80046ee:	7818      	ldrb	r0, [r3, #0]
 80046f0:	4b6f      	ldr	r3, [pc, #444]	; (80048b0 <cmdExecute+0x238>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	b2d9      	uxtb	r1, r3
 80046f6:	4b6f      	ldr	r3, [pc, #444]	; (80048b4 <cmdExecute+0x23c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	001a      	movs	r2, r3
 80046fe:	f7ff fdc3 	bl	8004288 <weoShowSmallImage>
				}
		if(cmd2Execute==0x13){
 8004702:	1dfb      	adds	r3, r7, #7
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b13      	cmp	r3, #19
 8004708:	d111      	bne.n	800472e <cmdExecute+0xb6>
			bf4me=0x13;	//set BF flag 4 me
 800470a:	4b65      	ldr	r3, [pc, #404]	; (80048a0 <cmdExecute+0x228>)
 800470c:	2213      	movs	r2, #19
 800470e:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY,strLen,fontInfo,dataASCII);
 8004710:	4b67      	ldr	r3, [pc, #412]	; (80048b0 <cmdExecute+0x238>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	b2d8      	uxtb	r0, r3
 8004716:	4b67      	ldr	r3, [pc, #412]	; (80048b4 <cmdExecute+0x23c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	b2d9      	uxtb	r1, r3
 800471c:	4b66      	ldr	r3, [pc, #408]	; (80048b8 <cmdExecute+0x240>)
 800471e:	781a      	ldrb	r2, [r3, #0]
 8004720:	4b66      	ldr	r3, [pc, #408]	; (80048bc <cmdExecute+0x244>)
 8004722:	781c      	ldrb	r4, [r3, #0]
 8004724:	4b66      	ldr	r3, [pc, #408]	; (80048c0 <cmdExecute+0x248>)
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	0023      	movs	r3, r4
 800472a:	f000 f8d3 	bl	80048d4 <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 800472e:	1dfb      	adds	r3, r7, #7
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b14      	cmp	r3, #20
 8004734:	d13e      	bne.n	80047b4 <cmdExecute+0x13c>
//			if(soundReady!=1){return;}
			bf4me=0x14;	//set BF flag 4 me
 8004736:	4b5a      	ldr	r3, [pc, #360]	; (80048a0 <cmdExecute+0x228>)
 8004738:	2214      	movs	r2, #20
 800473a:	701a      	strb	r2, [r3, #0]
			if(numSound==0x01){
 800473c:	4b61      	ldr	r3, [pc, #388]	; (80048c4 <cmdExecute+0x24c>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d116      	bne.n	8004772 <cmdExecute+0xfa>
				if(soundReady!=0){
 8004744:	4b55      	ldr	r3, [pc, #340]	; (800489c <cmdExecute+0x224>)
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d012      	beq.n	8004772 <cmdExecute+0xfa>
				soundReady=0;
 800474c:	4b53      	ldr	r3, [pc, #332]	; (800489c <cmdExecute+0x224>)
 800474e:	2200      	movs	r2, #0
 8004750:	701a      	strb	r2, [r3, #0]
				USART2->ICR|=USART_ICR_ORECF;
 8004752:	4b54      	ldr	r3, [pc, #336]	; (80048a4 <cmdExecute+0x22c>)
 8004754:	6a1a      	ldr	r2, [r3, #32]
 8004756:	4b53      	ldr	r3, [pc, #332]	; (80048a4 <cmdExecute+0x22c>)
 8004758:	2108      	movs	r1, #8
 800475a:	430a      	orrs	r2, r1
 800475c:	621a      	str	r2, [r3, #32]
				squeak_single(signal);
 800475e:	4b5a      	ldr	r3, [pc, #360]	; (80048c8 <cmdExecute+0x250>)
 8004760:	0018      	movs	r0, r3
 8004762:	f002 f8ef 	bl	8006944 <squeak_single>
				USART2->ICR|=USART_ICR_ORECF;
 8004766:	4b4f      	ldr	r3, [pc, #316]	; (80048a4 <cmdExecute+0x22c>)
 8004768:	6a1a      	ldr	r2, [r3, #32]
 800476a:	4b4e      	ldr	r3, [pc, #312]	; (80048a4 <cmdExecute+0x22c>)
 800476c:	2108      	movs	r1, #8
 800476e:	430a      	orrs	r2, r1
 8004770:	621a      	str	r2, [r3, #32]
				}
			}
			if(numSound==0x02){
 8004772:	4b54      	ldr	r3, [pc, #336]	; (80048c4 <cmdExecute+0x24c>)
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	2b02      	cmp	r3, #2
 8004778:	d103      	bne.n	8004782 <cmdExecute+0x10a>
//				soundReady=0;
				squeak_double(signal);
 800477a:	4b53      	ldr	r3, [pc, #332]	; (80048c8 <cmdExecute+0x250>)
 800477c:	0018      	movs	r0, r3
 800477e:	f002 f99b 	bl	8006ab8 <squeak_double>
			}
			if(numSound==0x03){
 8004782:	4b50      	ldr	r3, [pc, #320]	; (80048c4 <cmdExecute+0x24c>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b03      	cmp	r3, #3
 8004788:	d103      	bne.n	8004792 <cmdExecute+0x11a>
//				soundReady=0;
				squeak_triple(signal);
 800478a:	4b4f      	ldr	r3, [pc, #316]	; (80048c8 <cmdExecute+0x250>)
 800478c:	0018      	movs	r0, r3
 800478e:	f002 f9c9 	bl	8006b24 <squeak_triple>
				}
			if(numSound==0x04){
 8004792:	4b4c      	ldr	r3, [pc, #304]	; (80048c4 <cmdExecute+0x24c>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b04      	cmp	r3, #4
 8004798:	d103      	bne.n	80047a2 <cmdExecute+0x12a>
//				soundReady=0;
				squeak_long(signal);
 800479a:	4b4b      	ldr	r3, [pc, #300]	; (80048c8 <cmdExecute+0x250>)
 800479c:	0018      	movs	r0, r3
 800479e:	f002 f911 	bl	80069c4 <squeak_long>
				}
//			if(numSound!=1){
//			HAL_Delay(500);
//			}
			cmd2Execute=0;
 80047a2:	1dfb      	adds	r3, r7, #7
 80047a4:	2200      	movs	r2, #0
 80047a6:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
			GPIOC->ODR |= 1 << 6;	//set BF
 80047a8:	4b3f      	ldr	r3, [pc, #252]	; (80048a8 <cmdExecute+0x230>)
 80047aa:	695a      	ldr	r2, [r3, #20]
 80047ac:	4b3e      	ldr	r3, [pc, #248]	; (80048a8 <cmdExecute+0x230>)
 80047ae:	2140      	movs	r1, #64	; 0x40
 80047b0:	430a      	orrs	r2, r1
 80047b2:	615a      	str	r2, [r3, #20]

		}
		if(cmd2Execute==0x15){
 80047b4:	1dfb      	adds	r3, r7, #7
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2b15      	cmp	r3, #21
 80047ba:	d153      	bne.n	8004864 <cmdExecute+0x1ec>
			bf4me=0x15;	//set BF flag 4 me
 80047bc:	4b38      	ldr	r3, [pc, #224]	; (80048a0 <cmdExecute+0x228>)
 80047be:	2215      	movs	r2, #21
 80047c0:	701a      	strb	r2, [r3, #0]
			I2C_SOUND_ChangePage(0x01);
 80047c2:	2001      	movs	r0, #1
 80047c4:	f7fe ff20 	bl	8003608 <I2C_SOUND_ChangePage>
//			WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
			if(volume==0x00){
 80047c8:	4b40      	ldr	r3, [pc, #256]	; (80048cc <cmdExecute+0x254>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d106      	bne.n	80047de <cmdExecute+0x166>
				I2C_SOUND_ChangePage(0x01);
 80047d0:	2001      	movs	r0, #1
 80047d2:	f7fe ff19 	bl	8003608 <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x2E,0xFF);// mute
 80047d6:	21ff      	movs	r1, #255	; 0xff
 80047d8:	202e      	movs	r0, #46	; 0x2e
 80047da:	f7fe ff33 	bl	8003644 <WriteReg_I2C_SOUND>
			}
			I2C_SOUND_ChangePage(0x01);
 80047de:	2001      	movs	r0, #1
 80047e0:	f7fe ff12 	bl	8003608 <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x2E, volume);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 80047e4:	4b39      	ldr	r3, [pc, #228]	; (80048cc <cmdExecute+0x254>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	0019      	movs	r1, r3
 80047ea:	202e      	movs	r0, #46	; 0x2e
 80047ec:	f7fe ff2a 	bl	8003644 <WriteReg_I2C_SOUND>

			if(contrast==0x00){
 80047f0:	4b37      	ldr	r3, [pc, #220]	; (80048d0 <cmdExecute+0x258>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d102      	bne.n	80047fe <cmdExecute+0x186>
				weoClear();
 80047f8:	f7fe fdbe 	bl	8003378 <weoClear>
 80047fc:	e029      	b.n	8004852 <cmdExecute+0x1da>
			}
			else{
				GPIOA->ODR &= ~(1 << 6);	//reset cs
 80047fe:	23a0      	movs	r3, #160	; 0xa0
 8004800:	05db      	lsls	r3, r3, #23
 8004802:	695a      	ldr	r2, [r3, #20]
 8004804:	23a0      	movs	r3, #160	; 0xa0
 8004806:	05db      	lsls	r3, r3, #23
 8004808:	2140      	movs	r1, #64	; 0x40
 800480a:	438a      	bics	r2, r1
 800480c:	615a      	str	r2, [r3, #20]
				GPIOA->ODR &= ~(1 << 7);	// reset dc
 800480e:	23a0      	movs	r3, #160	; 0xa0
 8004810:	05db      	lsls	r3, r3, #23
 8004812:	695a      	ldr	r2, [r3, #20]
 8004814:	23a0      	movs	r3, #160	; 0xa0
 8004816:	05db      	lsls	r3, r3, #23
 8004818:	2180      	movs	r1, #128	; 0x80
 800481a:	438a      	bics	r2, r1
 800481c:	615a      	str	r2, [r3, #20]
				USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 800481e:	2081      	movs	r0, #129	; 0x81
 8004820:	f7fe fd2c 	bl	800327c <USART_AS_SPI_sendCMD>
				USART_AS_SPI_sendCMD(contrast*0x10);
 8004824:	4b2a      	ldr	r3, [pc, #168]	; (80048d0 <cmdExecute+0x258>)
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	b2db      	uxtb	r3, r3
 800482c:	0018      	movs	r0, r3
 800482e:	f7fe fd25 	bl	800327c <USART_AS_SPI_sendCMD>
				GPIOA->ODR |= 1 << 7;	//set dc
 8004832:	23a0      	movs	r3, #160	; 0xa0
 8004834:	05db      	lsls	r3, r3, #23
 8004836:	695a      	ldr	r2, [r3, #20]
 8004838:	23a0      	movs	r3, #160	; 0xa0
 800483a:	05db      	lsls	r3, r3, #23
 800483c:	2180      	movs	r1, #128	; 0x80
 800483e:	430a      	orrs	r2, r1
 8004840:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= 1 << 6;	//set cs
 8004842:	23a0      	movs	r3, #160	; 0xa0
 8004844:	05db      	lsls	r3, r3, #23
 8004846:	695a      	ldr	r2, [r3, #20]
 8004848:	23a0      	movs	r3, #160	; 0xa0
 800484a:	05db      	lsls	r3, r3, #23
 800484c:	2140      	movs	r1, #64	; 0x40
 800484e:	430a      	orrs	r2, r1
 8004850:	615a      	str	r2, [r3, #20]
			}
//			bf4me=0x15;	//set BF flag 4 me
			cmd2Execute=0;
 8004852:	1dfb      	adds	r3, r7, #7
 8004854:	2200      	movs	r2, #0
 8004856:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
			GPIOC->ODR |= 1 << 6;	//set BF
 8004858:	4b13      	ldr	r3, [pc, #76]	; (80048a8 <cmdExecute+0x230>)
 800485a:	695a      	ldr	r2, [r3, #20]
 800485c:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <cmdExecute+0x230>)
 800485e:	2140      	movs	r1, #64	; 0x40
 8004860:	430a      	orrs	r2, r1
 8004862:	615a      	str	r2, [r3, #20]
		}
		if(cmd2Execute==0x16){
 8004864:	1dfb      	adds	r3, r7, #7
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b16      	cmp	r3, #22
 800486a:	d102      	bne.n	8004872 <cmdExecute+0x1fa>
			bf4me=0x16;	//set BF flag 4 me
 800486c:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <cmdExecute+0x228>)
 800486e:	2216      	movs	r2, #22
 8004870:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 8004872:	1dfb      	adds	r3, r7, #7
 8004874:	2200      	movs	r2, #0
 8004876:	701a      	strb	r2, [r3, #0]

				}
//			}
//		}
		USART2->ICR|=USART_ICR_ORECF;
 8004878:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <cmdExecute+0x22c>)
 800487a:	6a1a      	ldr	r2, [r3, #32]
 800487c:	4b09      	ldr	r3, [pc, #36]	; (80048a4 <cmdExecute+0x22c>)
 800487e:	2108      	movs	r1, #8
 8004880:	430a      	orrs	r2, r1
 8004882:	621a      	str	r2, [r3, #32]
 8004884:	e004      	b.n	8004890 <cmdExecute+0x218>
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8004886:	46c0      	nop			; (mov r8, r8)
 8004888:	e002      	b.n	8004890 <cmdExecute+0x218>
		if(soundReady==0){return;}
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	e000      	b.n	8004890 <cmdExecute+0x218>
		if (bf4me!=0x00){return;}	// protection against false BF resets
 800488e:	46c0      	nop			; (mov r8, r8)
	}
 8004890:	0018      	movs	r0, r3
 8004892:	46bd      	mov	sp, r7
 8004894:	b003      	add	sp, #12
 8004896:	bd90      	pop	{r4, r7, pc}
 8004898:	2000350c 	.word	0x2000350c
 800489c:	20000034 	.word	0x20000034
 80048a0:	200013dc 	.word	0x200013dc
 80048a4:	40004400 	.word	0x40004400
 80048a8:	50000800 	.word	0x50000800
 80048ac:	2000137a 	.word	0x2000137a
 80048b0:	20000204 	.word	0x20000204
 80048b4:	20000298 	.word	0x20000298
 80048b8:	200013c5 	.word	0x200013c5
 80048bc:	20000195 	.word	0x20000195
 80048c0:	200000a4 	.word	0x200000a4
 80048c4:	20001445 	.word	0x20001445
 80048c8:	20000314 	.word	0x20000314
 80048cc:	20000202 	.word	0x20000202
 80048d0:	20000304 	.word	0x20000304

080048d4 <printASCIIarray>:
//========================================================================================================================
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t fontInfo,uint8_t dataASCII[]){
 80048d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048d6:	46ce      	mov	lr, r9
 80048d8:	4647      	mov	r7, r8
 80048da:	b580      	push	{r7, lr}
 80048dc:	b0e3      	sub	sp, #396	; 0x18c
 80048de:	af02      	add	r7, sp, #8
 80048e0:	0016      	movs	r6, r2
 80048e2:	469c      	mov	ip, r3
 80048e4:	2320      	movs	r3, #32
 80048e6:	33ff      	adds	r3, #255	; 0xff
 80048e8:	2208      	movs	r2, #8
 80048ea:	18ba      	adds	r2, r7, r2
 80048ec:	18d2      	adds	r2, r2, r3
 80048ee:	1c03      	adds	r3, r0, #0
 80048f0:	7013      	strb	r3, [r2, #0]
 80048f2:	238f      	movs	r3, #143	; 0x8f
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	2208      	movs	r2, #8
 80048f8:	18ba      	adds	r2, r7, r2
 80048fa:	18d2      	adds	r2, r2, r3
 80048fc:	1c0b      	adds	r3, r1, #0
 80048fe:	7013      	strb	r3, [r2, #0]
 8004900:	221e      	movs	r2, #30
 8004902:	32ff      	adds	r2, #255	; 0xff
 8004904:	2308      	movs	r3, #8
 8004906:	4698      	mov	r8, r3
 8004908:	44b8      	add	r8, r7
 800490a:	4442      	add	r2, r8
 800490c:	1c33      	adds	r3, r6, #0
 800490e:	7013      	strb	r3, [r2, #0]
 8004910:	218e      	movs	r1, #142	; 0x8e
 8004912:	0049      	lsls	r1, r1, #1
 8004914:	2308      	movs	r3, #8
 8004916:	18fb      	adds	r3, r7, r3
 8004918:	185a      	adds	r2, r3, r1
 800491a:	4663      	mov	r3, ip
 800491c:	7013      	strb	r3, [r2, #0]
			uint8_t X_increment,ASCII_height,X_width,ASCII_X,decY,fontCur,contrast;
//			uint8_t weoBuffer1[49],weoBuffer2[49],weoBuffer[49];
			uint16_t i,j,k, symLen;
			ASCII_X=imX;
 800491e:	2357      	movs	r3, #87	; 0x57
 8004920:	208c      	movs	r0, #140	; 0x8c
 8004922:	0040      	lsls	r0, r0, #1
 8004924:	2208      	movs	r2, #8
 8004926:	18ba      	adds	r2, r7, r2
 8004928:	1812      	adds	r2, r2, r0
 800492a:	18d2      	adds	r2, r2, r3
 800492c:	2620      	movs	r6, #32
 800492e:	36ff      	adds	r6, #255	; 0xff
 8004930:	2308      	movs	r3, #8
 8004932:	18fb      	adds	r3, r7, r3
 8004934:	199b      	adds	r3, r3, r6
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	7013      	strb	r3, [r2, #0]

			contrast = (fontInfo & 0xF0)>>4;
 800493a:	2356      	movs	r3, #86	; 0x56
 800493c:	2208      	movs	r2, #8
 800493e:	18ba      	adds	r2, r7, r2
 8004940:	1812      	adds	r2, r2, r0
 8004942:	18d2      	adds	r2, r2, r3
 8004944:	2308      	movs	r3, #8
 8004946:	18fb      	adds	r3, r7, r3
 8004948:	185b      	adds	r3, r3, r1
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	091b      	lsrs	r3, r3, #4
 800494e:	7013      	strb	r3, [r2, #0]
//			contrast=0x33;

			decY=0x01;
 8004950:	2158      	movs	r1, #88	; 0x58
 8004952:	2308      	movs	r3, #8
 8004954:	18fb      	adds	r3, r7, r3
 8004956:	181a      	adds	r2, r3, r0
 8004958:	1852      	adds	r2, r2, r1
 800495a:	2301      	movs	r3, #1
 800495c:	7013      	strb	r3, [r2, #0]
			if(imY % 2 !=0){
 800495e:	238f      	movs	r3, #143	; 0x8f
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	2208      	movs	r2, #8
 8004964:	4694      	mov	ip, r2
 8004966:	44bc      	add	ip, r7
 8004968:	4463      	add	r3, ip
 800496a:	781a      	ldrb	r2, [r3, #0]
 800496c:	2301      	movs	r3, #1
 800496e:	4013      	ands	r3, r2
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d005      	beq.n	8004982 <printASCIIarray+0xae>
				decY=0x02;
 8004976:	2308      	movs	r3, #8
 8004978:	18fb      	adds	r3, r7, r3
 800497a:	181b      	adds	r3, r3, r0
 800497c:	185a      	adds	r2, r3, r1
 800497e:	2302      	movs	r3, #2
 8004980:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x00)==0){
				fontCur=0;
 8004982:	2159      	movs	r1, #89	; 0x59
 8004984:	208c      	movs	r0, #140	; 0x8c
 8004986:	0040      	lsls	r0, r0, #1
 8004988:	2308      	movs	r3, #8
 800498a:	18fb      	adds	r3, r7, r3
 800498c:	181b      	adds	r3, r3, r0
 800498e:	185a      	adds	r2, r3, r1
 8004990:	2300      	movs	r3, #0
 8004992:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x01)==1){
 8004994:	238e      	movs	r3, #142	; 0x8e
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	2208      	movs	r2, #8
 800499a:	4694      	mov	ip, r2
 800499c:	44bc      	add	ip, r7
 800499e:	4463      	add	r3, ip
 80049a0:	781a      	ldrb	r2, [r3, #0]
 80049a2:	2301      	movs	r3, #1
 80049a4:	4013      	ands	r3, r2
 80049a6:	d005      	beq.n	80049b4 <printASCIIarray+0xe0>
				fontCur=1;
 80049a8:	2308      	movs	r3, #8
 80049aa:	18fb      	adds	r3, r7, r3
 80049ac:	181b      	adds	r3, r3, r0
 80049ae:	185a      	adds	r2, r3, r1
 80049b0:	2301      	movs	r3, #1
 80049b2:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x02)==2){
 80049b4:	238e      	movs	r3, #142	; 0x8e
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	2208      	movs	r2, #8
 80049ba:	4694      	mov	ip, r2
 80049bc:	44bc      	add	ip, r7
 80049be:	4463      	add	r3, ip
 80049c0:	781a      	ldrb	r2, [r3, #0]
 80049c2:	2302      	movs	r3, #2
 80049c4:	4013      	ands	r3, r2
 80049c6:	d009      	beq.n	80049dc <printASCIIarray+0x108>
				fontCur=2;
 80049c8:	2359      	movs	r3, #89	; 0x59
 80049ca:	228c      	movs	r2, #140	; 0x8c
 80049cc:	0052      	lsls	r2, r2, #1
 80049ce:	2108      	movs	r1, #8
 80049d0:	468c      	mov	ip, r1
 80049d2:	44bc      	add	ip, r7
 80049d4:	4462      	add	r2, ip
 80049d6:	18d2      	adds	r2, r2, r3
 80049d8:	2302      	movs	r3, #2
 80049da:	7013      	strb	r3, [r2, #0]
			}
//			fontCur=2;
			if(fontCur==0){
 80049dc:	2359      	movs	r3, #89	; 0x59
 80049de:	228c      	movs	r2, #140	; 0x8c
 80049e0:	0052      	lsls	r2, r2, #1
 80049e2:	4694      	mov	ip, r2
 80049e4:	2208      	movs	r2, #8
 80049e6:	4690      	mov	r8, r2
 80049e8:	44b8      	add	r8, r7
 80049ea:	44c4      	add	ip, r8
 80049ec:	4463      	add	r3, ip
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d000      	beq.n	80049f6 <printASCIIarray+0x122>
 80049f4:	e34a      	b.n	800508c <printASCIIarray+0x7b8>
 80049f6:	466b      	mov	r3, sp
 80049f8:	4698      	mov	r8, r3
				symLen=49;
 80049fa:	2154      	movs	r1, #84	; 0x54
 80049fc:	268c      	movs	r6, #140	; 0x8c
 80049fe:	0076      	lsls	r6, r6, #1
 8004a00:	2308      	movs	r3, #8
 8004a02:	18fb      	adds	r3, r7, r3
 8004a04:	199b      	adds	r3, r3, r6
 8004a06:	185a      	adds	r2, r3, r1
 8004a08:	2331      	movs	r3, #49	; 0x31
 8004a0a:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 8004a0c:	2308      	movs	r3, #8
 8004a0e:	18fb      	adds	r3, r7, r3
 8004a10:	199b      	adds	r3, r3, r6
 8004a12:	185b      	adds	r3, r3, r1
 8004a14:	881a      	ldrh	r2, [r3, #0]
 8004a16:	0013      	movs	r3, r2
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	21b4      	movs	r1, #180	; 0xb4
 8004a1c:	0049      	lsls	r1, r1, #1
 8004a1e:	2008      	movs	r0, #8
 8004a20:	4684      	mov	ip, r0
 8004a22:	44bc      	add	ip, r7
 8004a24:	4461      	add	r1, ip
 8004a26:	600b      	str	r3, [r1, #0]
 8004a28:	2188      	movs	r1, #136	; 0x88
 8004a2a:	2308      	movs	r3, #8
 8004a2c:	18fb      	adds	r3, r7, r3
 8004a2e:	185b      	adds	r3, r3, r1
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	2300      	movs	r3, #0
 8004a34:	208c      	movs	r0, #140	; 0x8c
 8004a36:	2608      	movs	r6, #8
 8004a38:	46b4      	mov	ip, r6
 8004a3a:	44bc      	add	ip, r7
 8004a3c:	4460      	add	r0, ip
 8004a3e:	6003      	str	r3, [r0, #0]
 8004a40:	2308      	movs	r3, #8
 8004a42:	18fb      	adds	r3, r7, r3
 8004a44:	185b      	adds	r3, r3, r1
 8004a46:	6818      	ldr	r0, [r3, #0]
 8004a48:	6859      	ldr	r1, [r3, #4]
 8004a4a:	0003      	movs	r3, r0
 8004a4c:	0f5b      	lsrs	r3, r3, #29
 8004a4e:	000e      	movs	r6, r1
 8004a50:	00f5      	lsls	r5, r6, #3
 8004a52:	431d      	orrs	r5, r3
 8004a54:	0003      	movs	r3, r0
 8004a56:	00dc      	lsls	r4, r3, #3
 8004a58:	2180      	movs	r1, #128	; 0x80
 8004a5a:	2308      	movs	r3, #8
 8004a5c:	18fb      	adds	r3, r7, r3
 8004a5e:	185b      	adds	r3, r3, r1
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	2300      	movs	r3, #0
 8004a64:	2084      	movs	r0, #132	; 0x84
 8004a66:	2408      	movs	r4, #8
 8004a68:	46a4      	mov	ip, r4
 8004a6a:	44bc      	add	ip, r7
 8004a6c:	4460      	add	r0, ip
 8004a6e:	6003      	str	r3, [r0, #0]
 8004a70:	2308      	movs	r3, #8
 8004a72:	18fb      	adds	r3, r7, r3
 8004a74:	185b      	adds	r3, r3, r1
 8004a76:	6818      	ldr	r0, [r3, #0]
 8004a78:	6859      	ldr	r1, [r3, #4]
 8004a7a:	0003      	movs	r3, r0
 8004a7c:	0f5b      	lsrs	r3, r3, #29
 8004a7e:	000d      	movs	r5, r1
 8004a80:	00ed      	lsls	r5, r5, #3
 8004a82:	248a      	movs	r4, #138	; 0x8a
 8004a84:	0064      	lsls	r4, r4, #1
 8004a86:	2608      	movs	r6, #8
 8004a88:	19be      	adds	r6, r7, r6
 8004a8a:	1936      	adds	r6, r6, r4
 8004a8c:	6035      	str	r5, [r6, #0]
 8004a8e:	2508      	movs	r5, #8
 8004a90:	197d      	adds	r5, r7, r5
 8004a92:	192d      	adds	r5, r5, r4
 8004a94:	682d      	ldr	r5, [r5, #0]
 8004a96:	431d      	orrs	r5, r3
 8004a98:	2308      	movs	r3, #8
 8004a9a:	18fb      	adds	r3, r7, r3
 8004a9c:	191b      	adds	r3, r3, r4
 8004a9e:	601d      	str	r5, [r3, #0]
 8004aa0:	0003      	movs	r3, r0
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	2188      	movs	r1, #136	; 0x88
 8004aa6:	0049      	lsls	r1, r1, #1
 8004aa8:	2008      	movs	r0, #8
 8004aaa:	4684      	mov	ip, r0
 8004aac:	44bc      	add	ip, r7
 8004aae:	4461      	add	r1, ip
 8004ab0:	600b      	str	r3, [r1, #0]
 8004ab2:	0013      	movs	r3, r2
 8004ab4:	3307      	adds	r3, #7
 8004ab6:	08db      	lsrs	r3, r3, #3
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	466a      	mov	r2, sp
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	469d      	mov	sp, r3
 8004ac0:	ab02      	add	r3, sp, #8
 8004ac2:	3300      	adds	r3, #0
 8004ac4:	22b2      	movs	r2, #178	; 0xb2
 8004ac6:	0052      	lsls	r2, r2, #1
 8004ac8:	2108      	movs	r1, #8
 8004aca:	468c      	mov	ip, r1
 8004acc:	44bc      	add	ip, r7
 8004ace:	4462      	add	r2, ip
 8004ad0:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer1[symLen];
 8004ad2:	2454      	movs	r4, #84	; 0x54
 8004ad4:	2390      	movs	r3, #144	; 0x90
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	18fb      	adds	r3, r7, r3
 8004ada:	601c      	str	r4, [r3, #0]
 8004adc:	268c      	movs	r6, #140	; 0x8c
 8004ade:	0076      	lsls	r6, r6, #1
 8004ae0:	2308      	movs	r3, #8
 8004ae2:	18fb      	adds	r3, r7, r3
 8004ae4:	199b      	adds	r3, r3, r6
 8004ae6:	191b      	adds	r3, r3, r4
 8004ae8:	881a      	ldrh	r2, [r3, #0]
 8004aea:	0013      	movs	r3, r2
 8004aec:	3b01      	subs	r3, #1
 8004aee:	21b0      	movs	r1, #176	; 0xb0
 8004af0:	0049      	lsls	r1, r1, #1
 8004af2:	2008      	movs	r0, #8
 8004af4:	4684      	mov	ip, r0
 8004af6:	44bc      	add	ip, r7
 8004af8:	4461      	add	r1, ip
 8004afa:	600b      	str	r3, [r1, #0]
 8004afc:	2380      	movs	r3, #128	; 0x80
 8004afe:	18fb      	adds	r3, r7, r3
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	2300      	movs	r3, #0
 8004b04:	2184      	movs	r1, #132	; 0x84
 8004b06:	1879      	adds	r1, r7, r1
 8004b08:	600b      	str	r3, [r1, #0]
 8004b0a:	2380      	movs	r3, #128	; 0x80
 8004b0c:	18fb      	adds	r3, r7, r3
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	6859      	ldr	r1, [r3, #4]
 8004b12:	0003      	movs	r3, r0
 8004b14:	0f5b      	lsrs	r3, r3, #29
 8004b16:	4699      	mov	r9, r3
 8004b18:	000d      	movs	r5, r1
 8004b1a:	00ed      	lsls	r5, r5, #3
 8004b1c:	2486      	movs	r4, #134	; 0x86
 8004b1e:	0064      	lsls	r4, r4, #1
 8004b20:	2308      	movs	r3, #8
 8004b22:	469c      	mov	ip, r3
 8004b24:	44bc      	add	ip, r7
 8004b26:	4464      	add	r4, ip
 8004b28:	6025      	str	r5, [r4, #0]
 8004b2a:	2586      	movs	r5, #134	; 0x86
 8004b2c:	006d      	lsls	r5, r5, #1
 8004b2e:	2308      	movs	r3, #8
 8004b30:	18fb      	adds	r3, r7, r3
 8004b32:	195c      	adds	r4, r3, r5
 8004b34:	6825      	ldr	r5, [r4, #0]
 8004b36:	464b      	mov	r3, r9
 8004b38:	431d      	orrs	r5, r3
 8004b3a:	2386      	movs	r3, #134	; 0x86
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	2408      	movs	r4, #8
 8004b40:	46a4      	mov	ip, r4
 8004b42:	44bc      	add	ip, r7
 8004b44:	4463      	add	r3, ip
 8004b46:	601d      	str	r5, [r3, #0]
 8004b48:	0003      	movs	r3, r0
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	2184      	movs	r1, #132	; 0x84
 8004b4e:	0049      	lsls	r1, r1, #1
 8004b50:	2008      	movs	r0, #8
 8004b52:	4684      	mov	ip, r0
 8004b54:	44bc      	add	ip, r7
 8004b56:	4461      	add	r1, ip
 8004b58:	600b      	str	r3, [r1, #0]
 8004b5a:	67ba      	str	r2, [r7, #120]	; 0x78
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b60:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8004b62:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b64:	0003      	movs	r3, r0
 8004b66:	0f5b      	lsrs	r3, r3, #29
 8004b68:	000d      	movs	r5, r1
 8004b6a:	00ed      	lsls	r5, r5, #3
 8004b6c:	2486      	movs	r4, #134	; 0x86
 8004b6e:	0064      	lsls	r4, r4, #1
 8004b70:	193c      	adds	r4, r7, r4
 8004b72:	6025      	str	r5, [r4, #0]
 8004b74:	2486      	movs	r4, #134	; 0x86
 8004b76:	0064      	lsls	r4, r4, #1
 8004b78:	193c      	adds	r4, r7, r4
 8004b7a:	6825      	ldr	r5, [r4, #0]
 8004b7c:	431d      	orrs	r5, r3
 8004b7e:	2386      	movs	r3, #134	; 0x86
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	18fb      	adds	r3, r7, r3
 8004b84:	601d      	str	r5, [r3, #0]
 8004b86:	0003      	movs	r3, r0
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	2184      	movs	r1, #132	; 0x84
 8004b8c:	0049      	lsls	r1, r1, #1
 8004b8e:	1879      	adds	r1, r7, r1
 8004b90:	600b      	str	r3, [r1, #0]
 8004b92:	0013      	movs	r3, r2
 8004b94:	3307      	adds	r3, #7
 8004b96:	08db      	lsrs	r3, r3, #3
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	466a      	mov	r2, sp
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	469d      	mov	sp, r3
 8004ba0:	ab02      	add	r3, sp, #8
 8004ba2:	3300      	adds	r3, #0
 8004ba4:	22ae      	movs	r2, #174	; 0xae
 8004ba6:	0052      	lsls	r2, r2, #1
 8004ba8:	2108      	movs	r1, #8
 8004baa:	468c      	mov	ip, r1
 8004bac:	44bc      	add	ip, r7
 8004bae:	4462      	add	r2, ip
 8004bb0:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer2[symLen];
 8004bb2:	2390      	movs	r3, #144	; 0x90
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	18fb      	adds	r3, r7, r3
 8004bb8:	681c      	ldr	r4, [r3, #0]
 8004bba:	0035      	movs	r5, r6
 8004bbc:	2308      	movs	r3, #8
 8004bbe:	18fb      	adds	r3, r7, r3
 8004bc0:	195b      	adds	r3, r3, r5
 8004bc2:	191b      	adds	r3, r3, r4
 8004bc4:	881a      	ldrh	r2, [r3, #0]
 8004bc6:	0013      	movs	r3, r2
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	21ac      	movs	r1, #172	; 0xac
 8004bcc:	0049      	lsls	r1, r1, #1
 8004bce:	2008      	movs	r0, #8
 8004bd0:	4684      	mov	ip, r0
 8004bd2:	44bc      	add	ip, r7
 8004bd4:	4461      	add	r1, ip
 8004bd6:	600b      	str	r3, [r1, #0]
 8004bd8:	673a      	str	r2, [r7, #112]	; 0x70
 8004bda:	2300      	movs	r3, #0
 8004bdc:	677b      	str	r3, [r7, #116]	; 0x74
 8004bde:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004be0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004be2:	0003      	movs	r3, r0
 8004be4:	0f5b      	lsrs	r3, r3, #29
 8004be6:	000c      	movs	r4, r1
 8004be8:	00e4      	lsls	r4, r4, #3
 8004bea:	26fc      	movs	r6, #252	; 0xfc
 8004bec:	2508      	movs	r5, #8
 8004bee:	197d      	adds	r5, r7, r5
 8004bf0:	19ad      	adds	r5, r5, r6
 8004bf2:	602c      	str	r4, [r5, #0]
 8004bf4:	2408      	movs	r4, #8
 8004bf6:	193c      	adds	r4, r7, r4
 8004bf8:	19a4      	adds	r4, r4, r6
 8004bfa:	6824      	ldr	r4, [r4, #0]
 8004bfc:	431c      	orrs	r4, r3
 8004bfe:	2308      	movs	r3, #8
 8004c00:	18fb      	adds	r3, r7, r3
 8004c02:	199b      	adds	r3, r3, r6
 8004c04:	601c      	str	r4, [r3, #0]
 8004c06:	0003      	movs	r3, r0
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	21f8      	movs	r1, #248	; 0xf8
 8004c0c:	2008      	movs	r0, #8
 8004c0e:	4684      	mov	ip, r0
 8004c10:	44bc      	add	ip, r7
 8004c12:	4461      	add	r1, ip
 8004c14:	600b      	str	r3, [r1, #0]
 8004c16:	66ba      	str	r2, [r7, #104]	; 0x68
 8004c18:	2300      	movs	r3, #0
 8004c1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c1c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004c1e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004c20:	0003      	movs	r3, r0
 8004c22:	0f5b      	lsrs	r3, r3, #29
 8004c24:	000c      	movs	r4, r1
 8004c26:	00e4      	lsls	r4, r4, #3
 8004c28:	26f4      	movs	r6, #244	; 0xf4
 8004c2a:	2508      	movs	r5, #8
 8004c2c:	197d      	adds	r5, r7, r5
 8004c2e:	19ad      	adds	r5, r5, r6
 8004c30:	602c      	str	r4, [r5, #0]
 8004c32:	2408      	movs	r4, #8
 8004c34:	193c      	adds	r4, r7, r4
 8004c36:	19a4      	adds	r4, r4, r6
 8004c38:	6824      	ldr	r4, [r4, #0]
 8004c3a:	431c      	orrs	r4, r3
 8004c3c:	2308      	movs	r3, #8
 8004c3e:	18fb      	adds	r3, r7, r3
 8004c40:	199b      	adds	r3, r3, r6
 8004c42:	601c      	str	r4, [r3, #0]
 8004c44:	0003      	movs	r3, r0
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	21f0      	movs	r1, #240	; 0xf0
 8004c4a:	2008      	movs	r0, #8
 8004c4c:	4684      	mov	ip, r0
 8004c4e:	44bc      	add	ip, r7
 8004c50:	4461      	add	r1, ip
 8004c52:	600b      	str	r3, [r1, #0]
 8004c54:	0013      	movs	r3, r2
 8004c56:	3307      	adds	r3, #7
 8004c58:	08db      	lsrs	r3, r3, #3
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	466a      	mov	r2, sp
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	469d      	mov	sp, r3
 8004c62:	ab02      	add	r3, sp, #8
 8004c64:	3300      	adds	r3, #0
 8004c66:	22aa      	movs	r2, #170	; 0xaa
 8004c68:	0052      	lsls	r2, r2, #1
 8004c6a:	2108      	movs	r1, #8
 8004c6c:	468c      	mov	ip, r1
 8004c6e:	44bc      	add	ip, r7
 8004c70:	4462      	add	r2, ip
 8004c72:	6013      	str	r3, [r2, #0]
				X_increment=0x07;
 8004c74:	233b      	movs	r3, #59	; 0x3b
 8004c76:	258c      	movs	r5, #140	; 0x8c
 8004c78:	006d      	lsls	r5, r5, #1
 8004c7a:	2208      	movs	r2, #8
 8004c7c:	18ba      	adds	r2, r7, r2
 8004c7e:	1952      	adds	r2, r2, r5
 8004c80:	18d2      	adds	r2, r2, r3
 8004c82:	2307      	movs	r3, #7
 8004c84:	7013      	strb	r3, [r2, #0]
				ASCII_height=0x0E;
 8004c86:	233a      	movs	r3, #58	; 0x3a
 8004c88:	2208      	movs	r2, #8
 8004c8a:	18ba      	adds	r2, r7, r2
 8004c8c:	1952      	adds	r2, r2, r5
 8004c8e:	18d2      	adds	r2, r2, r3
 8004c90:	230e      	movs	r3, #14
 8004c92:	7013      	strb	r3, [r2, #0]
				for(i=0;i<strLen;i++){
 8004c94:	235a      	movs	r3, #90	; 0x5a
 8004c96:	2208      	movs	r2, #8
 8004c98:	18ba      	adds	r2, r7, r2
 8004c9a:	1952      	adds	r2, r2, r5
 8004c9c:	18d2      	adds	r2, r2, r3
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	8013      	strh	r3, [r2, #0]
 8004ca2:	e19a      	b.n	8004fda <printASCIIarray+0x706>
					for(j=0;j<symLen;j++){
 8004ca4:	235c      	movs	r3, #92	; 0x5c
 8004ca6:	228c      	movs	r2, #140	; 0x8c
 8004ca8:	0052      	lsls	r2, r2, #1
 8004caa:	2108      	movs	r1, #8
 8004cac:	468c      	mov	ip, r1
 8004cae:	44bc      	add	ip, r7
 8004cb0:	4462      	add	r2, ip
 8004cb2:	18d2      	adds	r2, r2, r3
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	8013      	strh	r3, [r2, #0]
 8004cb8:	e046      	b.n	8004d48 <printASCIIarray+0x474>
						weoBuffer[j]=F1[dataASCII[i]][j];
 8004cba:	235a      	movs	r3, #90	; 0x5a
 8004cbc:	228c      	movs	r2, #140	; 0x8c
 8004cbe:	0052      	lsls	r2, r2, #1
 8004cc0:	4694      	mov	ip, r2
 8004cc2:	2208      	movs	r2, #8
 8004cc4:	4691      	mov	r9, r2
 8004cc6:	44b9      	add	r9, r7
 8004cc8:	44cc      	add	ip, r9
 8004cca:	4463      	add	r3, ip
 8004ccc:	881a      	ldrh	r2, [r3, #0]
 8004cce:	23c8      	movs	r3, #200	; 0xc8
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	2108      	movs	r1, #8
 8004cd4:	468c      	mov	ip, r1
 8004cd6:	2108      	movs	r1, #8
 8004cd8:	4689      	mov	r9, r1
 8004cda:	44b9      	add	r9, r7
 8004cdc:	44cc      	add	ip, r9
 8004cde:	4463      	add	r3, ip
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	189b      	adds	r3, r3, r2
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	001d      	movs	r5, r3
 8004ce8:	225c      	movs	r2, #92	; 0x5c
 8004cea:	218c      	movs	r1, #140	; 0x8c
 8004cec:	0049      	lsls	r1, r1, #1
 8004cee:	2308      	movs	r3, #8
 8004cf0:	18fb      	adds	r3, r7, r3
 8004cf2:	185b      	adds	r3, r3, r1
 8004cf4:	189b      	adds	r3, r3, r2
 8004cf6:	8818      	ldrh	r0, [r3, #0]
 8004cf8:	0016      	movs	r6, r2
 8004cfa:	2308      	movs	r3, #8
 8004cfc:	18fb      	adds	r3, r7, r3
 8004cfe:	185b      	adds	r3, r3, r1
 8004d00:	189b      	adds	r3, r3, r2
 8004d02:	881c      	ldrh	r4, [r3, #0]
 8004d04:	49c2      	ldr	r1, [pc, #776]	; (8005010 <printASCIIarray+0x73c>)
 8004d06:	002a      	movs	r2, r5
 8004d08:	00d2      	lsls	r2, r2, #3
 8004d0a:	1b52      	subs	r2, r2, r5
 8004d0c:	00d3      	lsls	r3, r2, #3
 8004d0e:	1a9b      	subs	r3, r3, r2
 8004d10:	18cb      	adds	r3, r1, r3
 8004d12:	5c1b      	ldrb	r3, [r3, r0]
 8004d14:	22b2      	movs	r2, #178	; 0xb2
 8004d16:	0052      	lsls	r2, r2, #1
 8004d18:	2108      	movs	r1, #8
 8004d1a:	468c      	mov	ip, r1
 8004d1c:	44bc      	add	ip, r7
 8004d1e:	4462      	add	r2, ip
 8004d20:	6812      	ldr	r2, [r2, #0]
 8004d22:	5513      	strb	r3, [r2, r4]
					for(j=0;j<symLen;j++){
 8004d24:	0032      	movs	r2, r6
 8004d26:	218c      	movs	r1, #140	; 0x8c
 8004d28:	0049      	lsls	r1, r1, #1
 8004d2a:	2308      	movs	r3, #8
 8004d2c:	18fb      	adds	r3, r7, r3
 8004d2e:	185b      	adds	r3, r3, r1
 8004d30:	189b      	adds	r3, r3, r2
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	218c      	movs	r1, #140	; 0x8c
 8004d36:	0049      	lsls	r1, r1, #1
 8004d38:	468c      	mov	ip, r1
 8004d3a:	2108      	movs	r1, #8
 8004d3c:	4689      	mov	r9, r1
 8004d3e:	44b9      	add	r9, r7
 8004d40:	44cc      	add	ip, r9
 8004d42:	4462      	add	r2, ip
 8004d44:	3301      	adds	r3, #1
 8004d46:	8013      	strh	r3, [r2, #0]
 8004d48:	235c      	movs	r3, #92	; 0x5c
 8004d4a:	218c      	movs	r1, #140	; 0x8c
 8004d4c:	0049      	lsls	r1, r1, #1
 8004d4e:	2208      	movs	r2, #8
 8004d50:	18ba      	adds	r2, r7, r2
 8004d52:	1852      	adds	r2, r2, r1
 8004d54:	18d2      	adds	r2, r2, r3
 8004d56:	2354      	movs	r3, #84	; 0x54
 8004d58:	208c      	movs	r0, #140	; 0x8c
 8004d5a:	0040      	lsls	r0, r0, #1
 8004d5c:	4684      	mov	ip, r0
 8004d5e:	2008      	movs	r0, #8
 8004d60:	4681      	mov	r9, r0
 8004d62:	44b9      	add	r9, r7
 8004d64:	44cc      	add	ip, r9
 8004d66:	4463      	add	r3, ip
 8004d68:	8812      	ldrh	r2, [r2, #0]
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d3a4      	bcc.n	8004cba <printASCIIarray+0x3e6>
							}
					for (k=0;k<symLen;k++){
 8004d70:	235e      	movs	r3, #94	; 0x5e
 8004d72:	2208      	movs	r2, #8
 8004d74:	18ba      	adds	r2, r7, r2
 8004d76:	1852      	adds	r2, r2, r1
 8004d78:	18d2      	adds	r2, r2, r3
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	8013      	strh	r3, [r2, #0]
 8004d7e:	e053      	b.n	8004e28 <printASCIIarray+0x554>
							weoBuffer1[k]=(weoBuffer[k]&0x0F)&contrast;
 8004d80:	205e      	movs	r0, #94	; 0x5e
 8004d82:	258c      	movs	r5, #140	; 0x8c
 8004d84:	006d      	lsls	r5, r5, #1
 8004d86:	2308      	movs	r3, #8
 8004d88:	18fb      	adds	r3, r7, r3
 8004d8a:	195b      	adds	r3, r3, r5
 8004d8c:	181b      	adds	r3, r3, r0
 8004d8e:	881a      	ldrh	r2, [r3, #0]
 8004d90:	26b2      	movs	r6, #178	; 0xb2
 8004d92:	0076      	lsls	r6, r6, #1
 8004d94:	2308      	movs	r3, #8
 8004d96:	18fb      	adds	r3, r7, r3
 8004d98:	199b      	adds	r3, r3, r6
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	5c9a      	ldrb	r2, [r3, r2]
 8004d9e:	2456      	movs	r4, #86	; 0x56
 8004da0:	2308      	movs	r3, #8
 8004da2:	18fb      	adds	r3, r7, r3
 8004da4:	195b      	adds	r3, r3, r5
 8004da6:	191b      	adds	r3, r3, r4
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	4013      	ands	r3, r2
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	2308      	movs	r3, #8
 8004db0:	18fb      	adds	r3, r7, r3
 8004db2:	195b      	adds	r3, r3, r5
 8004db4:	181b      	adds	r3, r3, r0
 8004db6:	8819      	ldrh	r1, [r3, #0]
 8004db8:	230f      	movs	r3, #15
 8004dba:	4013      	ands	r3, r2
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	4699      	mov	r9, r3
 8004dc0:	22ae      	movs	r2, #174	; 0xae
 8004dc2:	0052      	lsls	r2, r2, #1
 8004dc4:	2308      	movs	r3, #8
 8004dc6:	469c      	mov	ip, r3
 8004dc8:	44bc      	add	ip, r7
 8004dca:	4462      	add	r2, ip
 8004dcc:	6812      	ldr	r2, [r2, #0]
 8004dce:	464b      	mov	r3, r9
 8004dd0:	5453      	strb	r3, [r2, r1]
							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
 8004dd2:	2308      	movs	r3, #8
 8004dd4:	18fb      	adds	r3, r7, r3
 8004dd6:	195b      	adds	r3, r3, r5
 8004dd8:	181b      	adds	r3, r3, r0
 8004dda:	881a      	ldrh	r2, [r3, #0]
 8004ddc:	2308      	movs	r3, #8
 8004dde:	18fb      	adds	r3, r7, r3
 8004de0:	199b      	adds	r3, r3, r6
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	5c9b      	ldrb	r3, [r3, r2]
 8004de6:	091b      	lsrs	r3, r3, #4
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	2308      	movs	r3, #8
 8004dec:	18fb      	adds	r3, r7, r3
 8004dee:	195b      	adds	r3, r3, r5
 8004df0:	181b      	adds	r3, r3, r0
 8004df2:	8819      	ldrh	r1, [r3, #0]
 8004df4:	2308      	movs	r3, #8
 8004df6:	18fb      	adds	r3, r7, r3
 8004df8:	195b      	adds	r3, r3, r5
 8004dfa:	191b      	adds	r3, r3, r4
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	22aa      	movs	r2, #170	; 0xaa
 8004e04:	0052      	lsls	r2, r2, #1
 8004e06:	2408      	movs	r4, #8
 8004e08:	46a4      	mov	ip, r4
 8004e0a:	44bc      	add	ip, r7
 8004e0c:	4462      	add	r2, ip
 8004e0e:	6812      	ldr	r2, [r2, #0]
 8004e10:	5453      	strb	r3, [r2, r1]
					for (k=0;k<symLen;k++){
 8004e12:	2308      	movs	r3, #8
 8004e14:	18fb      	adds	r3, r7, r3
 8004e16:	195b      	adds	r3, r3, r5
 8004e18:	181b      	adds	r3, r3, r0
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	2208      	movs	r2, #8
 8004e1e:	18ba      	adds	r2, r7, r2
 8004e20:	1952      	adds	r2, r2, r5
 8004e22:	1812      	adds	r2, r2, r0
 8004e24:	3301      	adds	r3, #1
 8004e26:	8013      	strh	r3, [r2, #0]
 8004e28:	215e      	movs	r1, #94	; 0x5e
 8004e2a:	208c      	movs	r0, #140	; 0x8c
 8004e2c:	0040      	lsls	r0, r0, #1
 8004e2e:	2308      	movs	r3, #8
 8004e30:	18fb      	adds	r3, r7, r3
 8004e32:	181b      	adds	r3, r3, r0
 8004e34:	185a      	adds	r2, r3, r1
 8004e36:	2354      	movs	r3, #84	; 0x54
 8004e38:	248c      	movs	r4, #140	; 0x8c
 8004e3a:	0064      	lsls	r4, r4, #1
 8004e3c:	46a4      	mov	ip, r4
 8004e3e:	2408      	movs	r4, #8
 8004e40:	46a1      	mov	r9, r4
 8004e42:	44b9      	add	r9, r7
 8004e44:	44cc      	add	ip, r9
 8004e46:	4463      	add	r3, ip
 8004e48:	8812      	ldrh	r2, [r2, #0]
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d397      	bcc.n	8004d80 <printASCIIarray+0x4ac>
						}
					for (k=0;k<symLen;k++){
 8004e50:	2308      	movs	r3, #8
 8004e52:	18fb      	adds	r3, r7, r3
 8004e54:	181b      	adds	r3, r3, r0
 8004e56:	185a      	adds	r2, r3, r1
 8004e58:	2300      	movs	r3, #0
 8004e5a:	8013      	strh	r3, [r2, #0]
 8004e5c:	e03a      	b.n	8004ed4 <printASCIIarray+0x600>
							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
 8004e5e:	205e      	movs	r0, #94	; 0x5e
 8004e60:	248c      	movs	r4, #140	; 0x8c
 8004e62:	0064      	lsls	r4, r4, #1
 8004e64:	2308      	movs	r3, #8
 8004e66:	18fb      	adds	r3, r7, r3
 8004e68:	191b      	adds	r3, r3, r4
 8004e6a:	181b      	adds	r3, r3, r0
 8004e6c:	881a      	ldrh	r2, [r3, #0]
 8004e6e:	23aa      	movs	r3, #170	; 0xaa
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	2108      	movs	r1, #8
 8004e74:	468c      	mov	ip, r1
 8004e76:	44bc      	add	ip, r7
 8004e78:	4463      	add	r3, ip
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	5c9b      	ldrb	r3, [r3, r2]
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	b259      	sxtb	r1, r3
 8004e82:	2308      	movs	r3, #8
 8004e84:	18fb      	adds	r3, r7, r3
 8004e86:	191b      	adds	r3, r3, r4
 8004e88:	181b      	adds	r3, r3, r0
 8004e8a:	881a      	ldrh	r2, [r3, #0]
 8004e8c:	23ae      	movs	r3, #174	; 0xae
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	2508      	movs	r5, #8
 8004e92:	46ac      	mov	ip, r5
 8004e94:	44bc      	add	ip, r7
 8004e96:	4463      	add	r3, ip
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	5c9b      	ldrb	r3, [r3, r2]
 8004e9c:	b25b      	sxtb	r3, r3
 8004e9e:	430b      	orrs	r3, r1
 8004ea0:	b25a      	sxtb	r2, r3
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	18fb      	adds	r3, r7, r3
 8004ea6:	191b      	adds	r3, r3, r4
 8004ea8:	181b      	adds	r3, r3, r0
 8004eaa:	8819      	ldrh	r1, [r3, #0]
 8004eac:	b2d3      	uxtb	r3, r2
 8004eae:	22b2      	movs	r2, #178	; 0xb2
 8004eb0:	0052      	lsls	r2, r2, #1
 8004eb2:	2508      	movs	r5, #8
 8004eb4:	46ac      	mov	ip, r5
 8004eb6:	44bc      	add	ip, r7
 8004eb8:	4462      	add	r2, ip
 8004eba:	6812      	ldr	r2, [r2, #0]
 8004ebc:	5453      	strb	r3, [r2, r1]
					for (k=0;k<symLen;k++){
 8004ebe:	2308      	movs	r3, #8
 8004ec0:	18fb      	adds	r3, r7, r3
 8004ec2:	191b      	adds	r3, r3, r4
 8004ec4:	181b      	adds	r3, r3, r0
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	2208      	movs	r2, #8
 8004eca:	18ba      	adds	r2, r7, r2
 8004ecc:	1912      	adds	r2, r2, r4
 8004ece:	1812      	adds	r2, r2, r0
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	8013      	strh	r3, [r2, #0]
 8004ed4:	235e      	movs	r3, #94	; 0x5e
 8004ed6:	248c      	movs	r4, #140	; 0x8c
 8004ed8:	0064      	lsls	r4, r4, #1
 8004eda:	2208      	movs	r2, #8
 8004edc:	18ba      	adds	r2, r7, r2
 8004ede:	1912      	adds	r2, r2, r4
 8004ee0:	18d2      	adds	r2, r2, r3
 8004ee2:	2354      	movs	r3, #84	; 0x54
 8004ee4:	218c      	movs	r1, #140	; 0x8c
 8004ee6:	0049      	lsls	r1, r1, #1
 8004ee8:	468c      	mov	ip, r1
 8004eea:	2108      	movs	r1, #8
 8004eec:	4689      	mov	r9, r1
 8004eee:	44b9      	add	r9, r7
 8004ef0:	44cc      	add	ip, r9
 8004ef2:	4463      	add	r3, ip
 8004ef4:	8812      	ldrh	r2, [r2, #0]
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d3b0      	bcc.n	8004e5e <printASCIIarray+0x58a>
						}
				weoDrawRectangleFilled(ASCII_X, imY, ASCII_X+X_increment-1, imY + ASCII_height - decY, 0xFF, weoBuffer);
 8004efc:	2057      	movs	r0, #87	; 0x57
 8004efe:	2308      	movs	r3, #8
 8004f00:	18fb      	adds	r3, r7, r3
 8004f02:	191b      	adds	r3, r3, r4
 8004f04:	181a      	adds	r2, r3, r0
 8004f06:	233b      	movs	r3, #59	; 0x3b
 8004f08:	218c      	movs	r1, #140	; 0x8c
 8004f0a:	0049      	lsls	r1, r1, #1
 8004f0c:	468c      	mov	ip, r1
 8004f0e:	2108      	movs	r1, #8
 8004f10:	4689      	mov	r9, r1
 8004f12:	44b9      	add	r9, r7
 8004f14:	44cc      	add	ip, r9
 8004f16:	4463      	add	r3, ip
 8004f18:	7812      	ldrb	r2, [r2, #0]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	18d3      	adds	r3, r2, r3
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b2dd      	uxtb	r5, r3
 8004f24:	268f      	movs	r6, #143	; 0x8f
 8004f26:	0076      	lsls	r6, r6, #1
 8004f28:	2308      	movs	r3, #8
 8004f2a:	18fb      	adds	r3, r7, r3
 8004f2c:	199a      	adds	r2, r3, r6
 8004f2e:	213a      	movs	r1, #58	; 0x3a
 8004f30:	2308      	movs	r3, #8
 8004f32:	18fb      	adds	r3, r7, r3
 8004f34:	191b      	adds	r3, r3, r4
 8004f36:	185b      	adds	r3, r3, r1
 8004f38:	7812      	ldrb	r2, [r2, #0]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	18d3      	adds	r3, r2, r3
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	2158      	movs	r1, #88	; 0x58
 8004f42:	2308      	movs	r3, #8
 8004f44:	18fb      	adds	r3, r7, r3
 8004f46:	191b      	adds	r3, r3, r4
 8004f48:	185b      	adds	r3, r3, r1
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	b2dc      	uxtb	r4, r3
 8004f50:	22b2      	movs	r2, #178	; 0xb2
 8004f52:	0052      	lsls	r2, r2, #1
 8004f54:	2308      	movs	r3, #8
 8004f56:	469c      	mov	ip, r3
 8004f58:	44bc      	add	ip, r7
 8004f5a:	4462      	add	r2, ip
 8004f5c:	6812      	ldr	r2, [r2, #0]
 8004f5e:	2308      	movs	r3, #8
 8004f60:	18fb      	adds	r3, r7, r3
 8004f62:	199b      	adds	r3, r3, r6
 8004f64:	7819      	ldrb	r1, [r3, #0]
 8004f66:	0006      	movs	r6, r0
 8004f68:	238c      	movs	r3, #140	; 0x8c
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	603b      	str	r3, [r7, #0]
 8004f6e:	2308      	movs	r3, #8
 8004f70:	469c      	mov	ip, r3
 8004f72:	44bc      	add	ip, r7
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	4463      	add	r3, ip
 8004f78:	181b      	adds	r3, r3, r0
 8004f7a:	7818      	ldrb	r0, [r3, #0]
 8004f7c:	9201      	str	r2, [sp, #4]
 8004f7e:	23ff      	movs	r3, #255	; 0xff
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	0023      	movs	r3, r4
 8004f84:	002a      	movs	r2, r5
 8004f86:	f7fe fa5b 	bl	8003440 <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 8004f8a:	0030      	movs	r0, r6
 8004f8c:	248c      	movs	r4, #140	; 0x8c
 8004f8e:	0064      	lsls	r4, r4, #1
 8004f90:	2308      	movs	r3, #8
 8004f92:	18fb      	adds	r3, r7, r3
 8004f94:	191b      	adds	r3, r3, r4
 8004f96:	1819      	adds	r1, r3, r0
 8004f98:	2308      	movs	r3, #8
 8004f9a:	18fb      	adds	r3, r7, r3
 8004f9c:	191b      	adds	r3, r3, r4
 8004f9e:	181a      	adds	r2, r3, r0
 8004fa0:	233b      	movs	r3, #59	; 0x3b
 8004fa2:	208c      	movs	r0, #140	; 0x8c
 8004fa4:	0040      	lsls	r0, r0, #1
 8004fa6:	4684      	mov	ip, r0
 8004fa8:	2008      	movs	r0, #8
 8004faa:	4681      	mov	r9, r0
 8004fac:	44b9      	add	r9, r7
 8004fae:	44cc      	add	ip, r9
 8004fb0:	4463      	add	r3, ip
 8004fb2:	7812      	ldrb	r2, [r2, #0]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	18d3      	adds	r3, r2, r3
 8004fb8:	700b      	strb	r3, [r1, #0]
				for(i=0;i<strLen;i++){
 8004fba:	225a      	movs	r2, #90	; 0x5a
 8004fbc:	2308      	movs	r3, #8
 8004fbe:	18fb      	adds	r3, r7, r3
 8004fc0:	191b      	adds	r3, r3, r4
 8004fc2:	189b      	adds	r3, r3, r2
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	218c      	movs	r1, #140	; 0x8c
 8004fc8:	0049      	lsls	r1, r1, #1
 8004fca:	468c      	mov	ip, r1
 8004fcc:	2108      	movs	r1, #8
 8004fce:	4689      	mov	r9, r1
 8004fd0:	44b9      	add	r9, r7
 8004fd2:	44cc      	add	ip, r9
 8004fd4:	4462      	add	r2, ip
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	8013      	strh	r3, [r2, #0]
 8004fda:	231e      	movs	r3, #30
 8004fdc:	33ff      	adds	r3, #255	; 0xff
 8004fde:	2208      	movs	r2, #8
 8004fe0:	4694      	mov	ip, r2
 8004fe2:	44bc      	add	ip, r7
 8004fe4:	4463      	add	r3, ip
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	215a      	movs	r1, #90	; 0x5a
 8004fec:	208c      	movs	r0, #140	; 0x8c
 8004fee:	0040      	lsls	r0, r0, #1
 8004ff0:	2308      	movs	r3, #8
 8004ff2:	18fb      	adds	r3, r7, r3
 8004ff4:	181b      	adds	r3, r3, r0
 8004ff6:	185b      	adds	r3, r3, r1
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d200      	bcs.n	8005000 <printASCIIarray+0x72c>
 8004ffe:	e651      	b.n	8004ca4 <printASCIIarray+0x3d0>
				}
				for(i=0;i<symLen;i++){
 8005000:	2308      	movs	r3, #8
 8005002:	18fb      	adds	r3, r7, r3
 8005004:	181b      	adds	r3, r3, r0
 8005006:	185a      	adds	r2, r3, r1
 8005008:	2300      	movs	r3, #0
 800500a:	8013      	strh	r3, [r2, #0]
 800500c:	e028      	b.n	8005060 <printASCIIarray+0x78c>
 800500e:	46c0      	nop			; (mov r8, r8)
 8005010:	0800fcfc 	.word	0x0800fcfc
									weoBuffer[j]=0x00;
 8005014:	235c      	movs	r3, #92	; 0x5c
 8005016:	228c      	movs	r2, #140	; 0x8c
 8005018:	0052      	lsls	r2, r2, #1
 800501a:	4694      	mov	ip, r2
 800501c:	2208      	movs	r2, #8
 800501e:	4691      	mov	r9, r2
 8005020:	44b9      	add	r9, r7
 8005022:	44cc      	add	ip, r9
 8005024:	4463      	add	r3, ip
 8005026:	8819      	ldrh	r1, [r3, #0]
 8005028:	23b2      	movs	r3, #178	; 0xb2
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	2208      	movs	r2, #8
 800502e:	4694      	mov	ip, r2
 8005030:	44bc      	add	ip, r7
 8005032:	4463      	add	r3, ip
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	2300      	movs	r3, #0
 8005038:	5453      	strb	r3, [r2, r1]
				for(i=0;i<symLen;i++){
 800503a:	225a      	movs	r2, #90	; 0x5a
 800503c:	238c      	movs	r3, #140	; 0x8c
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	2108      	movs	r1, #8
 8005042:	468c      	mov	ip, r1
 8005044:	44bc      	add	ip, r7
 8005046:	4463      	add	r3, ip
 8005048:	189b      	adds	r3, r3, r2
 800504a:	881b      	ldrh	r3, [r3, #0]
 800504c:	218c      	movs	r1, #140	; 0x8c
 800504e:	0049      	lsls	r1, r1, #1
 8005050:	468c      	mov	ip, r1
 8005052:	2108      	movs	r1, #8
 8005054:	4689      	mov	r9, r1
 8005056:	44b9      	add	r9, r7
 8005058:	44cc      	add	ip, r9
 800505a:	4462      	add	r2, ip
 800505c:	3301      	adds	r3, #1
 800505e:	8013      	strh	r3, [r2, #0]
 8005060:	235a      	movs	r3, #90	; 0x5a
 8005062:	228c      	movs	r2, #140	; 0x8c
 8005064:	0052      	lsls	r2, r2, #1
 8005066:	2108      	movs	r1, #8
 8005068:	468c      	mov	ip, r1
 800506a:	44bc      	add	ip, r7
 800506c:	4462      	add	r2, ip
 800506e:	18d2      	adds	r2, r2, r3
 8005070:	2354      	movs	r3, #84	; 0x54
 8005072:	218c      	movs	r1, #140	; 0x8c
 8005074:	0049      	lsls	r1, r1, #1
 8005076:	468c      	mov	ip, r1
 8005078:	2108      	movs	r1, #8
 800507a:	4689      	mov	r9, r1
 800507c:	44b9      	add	r9, r7
 800507e:	44cc      	add	ip, r9
 8005080:	4463      	add	r3, ip
 8005082:	8812      	ldrh	r2, [r2, #0]
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	429a      	cmp	r2, r3
 8005088:	d3c4      	bcc.n	8005014 <printASCIIarray+0x740>
 800508a:	46c5      	mov	sp, r8
							}
			}
			if(fontCur==1){
 800508c:	2359      	movs	r3, #89	; 0x59
 800508e:	228c      	movs	r2, #140	; 0x8c
 8005090:	0052      	lsls	r2, r2, #1
 8005092:	4694      	mov	ip, r2
 8005094:	2208      	movs	r2, #8
 8005096:	4690      	mov	r8, r2
 8005098:	44b8      	add	r8, r7
 800509a:	44c4      	add	ip, r8
 800509c:	4463      	add	r3, ip
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d000      	beq.n	80050a6 <printASCIIarray+0x7d2>
 80050a4:	e340      	b.n	8005728 <printASCIIarray+0xe54>
 80050a6:	466b      	mov	r3, sp
 80050a8:	4698      	mov	r8, r3
				symLen=99;
 80050aa:	2454      	movs	r4, #84	; 0x54
 80050ac:	258c      	movs	r5, #140	; 0x8c
 80050ae:	006d      	lsls	r5, r5, #1
 80050b0:	2308      	movs	r3, #8
 80050b2:	18fb      	adds	r3, r7, r3
 80050b4:	195b      	adds	r3, r3, r5
 80050b6:	191a      	adds	r2, r3, r4
 80050b8:	2363      	movs	r3, #99	; 0x63
 80050ba:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 80050bc:	2390      	movs	r3, #144	; 0x90
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	18fb      	adds	r3, r7, r3
 80050c2:	601c      	str	r4, [r3, #0]
 80050c4:	2308      	movs	r3, #8
 80050c6:	18fb      	adds	r3, r7, r3
 80050c8:	195b      	adds	r3, r3, r5
 80050ca:	191b      	adds	r3, r3, r4
 80050cc:	881a      	ldrh	r2, [r3, #0]
 80050ce:	0013      	movs	r3, r2
 80050d0:	3b01      	subs	r3, #1
 80050d2:	21a6      	movs	r1, #166	; 0xa6
 80050d4:	0049      	lsls	r1, r1, #1
 80050d6:	2008      	movs	r0, #8
 80050d8:	4684      	mov	ip, r0
 80050da:	44bc      	add	ip, r7
 80050dc:	4461      	add	r1, ip
 80050de:	600b      	str	r3, [r1, #0]
 80050e0:	663a      	str	r2, [r7, #96]	; 0x60
 80050e2:	2300      	movs	r3, #0
 80050e4:	667b      	str	r3, [r7, #100]	; 0x64
 80050e6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80050e8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80050ea:	0003      	movs	r3, r0
 80050ec:	0f5b      	lsrs	r3, r3, #29
 80050ee:	000d      	movs	r5, r1
 80050f0:	00ed      	lsls	r5, r5, #3
 80050f2:	26ec      	movs	r6, #236	; 0xec
 80050f4:	2408      	movs	r4, #8
 80050f6:	193c      	adds	r4, r7, r4
 80050f8:	19a4      	adds	r4, r4, r6
 80050fa:	6025      	str	r5, [r4, #0]
 80050fc:	2408      	movs	r4, #8
 80050fe:	193c      	adds	r4, r7, r4
 8005100:	19a4      	adds	r4, r4, r6
 8005102:	6825      	ldr	r5, [r4, #0]
 8005104:	431d      	orrs	r5, r3
 8005106:	2308      	movs	r3, #8
 8005108:	18fb      	adds	r3, r7, r3
 800510a:	199b      	adds	r3, r3, r6
 800510c:	601d      	str	r5, [r3, #0]
 800510e:	0003      	movs	r3, r0
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	21e8      	movs	r1, #232	; 0xe8
 8005114:	2008      	movs	r0, #8
 8005116:	4684      	mov	ip, r0
 8005118:	44bc      	add	ip, r7
 800511a:	4461      	add	r1, ip
 800511c:	600b      	str	r3, [r1, #0]
 800511e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005120:	2300      	movs	r3, #0
 8005122:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005124:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005126:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005128:	0003      	movs	r3, r0
 800512a:	0f5b      	lsrs	r3, r3, #29
 800512c:	000d      	movs	r5, r1
 800512e:	00ed      	lsls	r5, r5, #3
 8005130:	26e4      	movs	r6, #228	; 0xe4
 8005132:	2408      	movs	r4, #8
 8005134:	193c      	adds	r4, r7, r4
 8005136:	19a4      	adds	r4, r4, r6
 8005138:	6025      	str	r5, [r4, #0]
 800513a:	2408      	movs	r4, #8
 800513c:	193c      	adds	r4, r7, r4
 800513e:	19a5      	adds	r5, r4, r6
 8005140:	682d      	ldr	r5, [r5, #0]
 8005142:	431d      	orrs	r5, r3
 8005144:	2308      	movs	r3, #8
 8005146:	18fb      	adds	r3, r7, r3
 8005148:	199b      	adds	r3, r3, r6
 800514a:	601d      	str	r5, [r3, #0]
 800514c:	0003      	movs	r3, r0
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	21e0      	movs	r1, #224	; 0xe0
 8005152:	2008      	movs	r0, #8
 8005154:	4684      	mov	ip, r0
 8005156:	44bc      	add	ip, r7
 8005158:	4461      	add	r1, ip
 800515a:	600b      	str	r3, [r1, #0]
 800515c:	0013      	movs	r3, r2
 800515e:	3307      	adds	r3, #7
 8005160:	08db      	lsrs	r3, r3, #3
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	466a      	mov	r2, sp
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	469d      	mov	sp, r3
 800516a:	ab02      	add	r3, sp, #8
 800516c:	3300      	adds	r3, #0
 800516e:	22a4      	movs	r2, #164	; 0xa4
 8005170:	0052      	lsls	r2, r2, #1
 8005172:	2108      	movs	r1, #8
 8005174:	468c      	mov	ip, r1
 8005176:	44bc      	add	ip, r7
 8005178:	4462      	add	r2, ip
 800517a:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer1[symLen];
 800517c:	2390      	movs	r3, #144	; 0x90
 800517e:	005b      	lsls	r3, r3, #1
 8005180:	18fb      	adds	r3, r7, r3
 8005182:	681c      	ldr	r4, [r3, #0]
 8005184:	2390      	movs	r3, #144	; 0x90
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	18fb      	adds	r3, r7, r3
 800518a:	601c      	str	r4, [r3, #0]
 800518c:	258c      	movs	r5, #140	; 0x8c
 800518e:	006d      	lsls	r5, r5, #1
 8005190:	2308      	movs	r3, #8
 8005192:	18fb      	adds	r3, r7, r3
 8005194:	195b      	adds	r3, r3, r5
 8005196:	191b      	adds	r3, r3, r4
 8005198:	881a      	ldrh	r2, [r3, #0]
 800519a:	0013      	movs	r3, r2
 800519c:	3b01      	subs	r3, #1
 800519e:	21a2      	movs	r1, #162	; 0xa2
 80051a0:	0049      	lsls	r1, r1, #1
 80051a2:	2008      	movs	r0, #8
 80051a4:	4684      	mov	ip, r0
 80051a6:	44bc      	add	ip, r7
 80051a8:	4461      	add	r1, ip
 80051aa:	600b      	str	r3, [r1, #0]
 80051ac:	653a      	str	r2, [r7, #80]	; 0x50
 80051ae:	2300      	movs	r3, #0
 80051b0:	657b      	str	r3, [r7, #84]	; 0x54
 80051b2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80051b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051b6:	0003      	movs	r3, r0
 80051b8:	0f5b      	lsrs	r3, r3, #29
 80051ba:	000d      	movs	r5, r1
 80051bc:	00ed      	lsls	r5, r5, #3
 80051be:	26dc      	movs	r6, #220	; 0xdc
 80051c0:	2408      	movs	r4, #8
 80051c2:	193c      	adds	r4, r7, r4
 80051c4:	19a4      	adds	r4, r4, r6
 80051c6:	6025      	str	r5, [r4, #0]
 80051c8:	2408      	movs	r4, #8
 80051ca:	193c      	adds	r4, r7, r4
 80051cc:	19a4      	adds	r4, r4, r6
 80051ce:	6825      	ldr	r5, [r4, #0]
 80051d0:	431d      	orrs	r5, r3
 80051d2:	2308      	movs	r3, #8
 80051d4:	18fb      	adds	r3, r7, r3
 80051d6:	199b      	adds	r3, r3, r6
 80051d8:	601d      	str	r5, [r3, #0]
 80051da:	0003      	movs	r3, r0
 80051dc:	00db      	lsls	r3, r3, #3
 80051de:	21d8      	movs	r1, #216	; 0xd8
 80051e0:	2008      	movs	r0, #8
 80051e2:	4684      	mov	ip, r0
 80051e4:	44bc      	add	ip, r7
 80051e6:	4461      	add	r1, ip
 80051e8:	600b      	str	r3, [r1, #0]
 80051ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80051ec:	2300      	movs	r3, #0
 80051ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051f0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80051f2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80051f4:	0003      	movs	r3, r0
 80051f6:	0f5b      	lsrs	r3, r3, #29
 80051f8:	000d      	movs	r5, r1
 80051fa:	00ed      	lsls	r5, r5, #3
 80051fc:	26d4      	movs	r6, #212	; 0xd4
 80051fe:	2408      	movs	r4, #8
 8005200:	193c      	adds	r4, r7, r4
 8005202:	19a4      	adds	r4, r4, r6
 8005204:	6025      	str	r5, [r4, #0]
 8005206:	2408      	movs	r4, #8
 8005208:	193c      	adds	r4, r7, r4
 800520a:	19a5      	adds	r5, r4, r6
 800520c:	682d      	ldr	r5, [r5, #0]
 800520e:	431d      	orrs	r5, r3
 8005210:	2308      	movs	r3, #8
 8005212:	18fb      	adds	r3, r7, r3
 8005214:	199b      	adds	r3, r3, r6
 8005216:	601d      	str	r5, [r3, #0]
 8005218:	0003      	movs	r3, r0
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	21d0      	movs	r1, #208	; 0xd0
 800521e:	2008      	movs	r0, #8
 8005220:	4684      	mov	ip, r0
 8005222:	44bc      	add	ip, r7
 8005224:	4461      	add	r1, ip
 8005226:	600b      	str	r3, [r1, #0]
 8005228:	0013      	movs	r3, r2
 800522a:	3307      	adds	r3, #7
 800522c:	08db      	lsrs	r3, r3, #3
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	466a      	mov	r2, sp
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	469d      	mov	sp, r3
 8005236:	ab02      	add	r3, sp, #8
 8005238:	3300      	adds	r3, #0
 800523a:	22a0      	movs	r2, #160	; 0xa0
 800523c:	0052      	lsls	r2, r2, #1
 800523e:	2108      	movs	r1, #8
 8005240:	468c      	mov	ip, r1
 8005242:	44bc      	add	ip, r7
 8005244:	4462      	add	r2, ip
 8005246:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer2[symLen];
 8005248:	2390      	movs	r3, #144	; 0x90
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	18fb      	adds	r3, r7, r3
 800524e:	681c      	ldr	r4, [r3, #0]
 8005250:	258c      	movs	r5, #140	; 0x8c
 8005252:	006d      	lsls	r5, r5, #1
 8005254:	2308      	movs	r3, #8
 8005256:	18fb      	adds	r3, r7, r3
 8005258:	195b      	adds	r3, r3, r5
 800525a:	191b      	adds	r3, r3, r4
 800525c:	881a      	ldrh	r2, [r3, #0]
 800525e:	0013      	movs	r3, r2
 8005260:	3b01      	subs	r3, #1
 8005262:	219e      	movs	r1, #158	; 0x9e
 8005264:	0049      	lsls	r1, r1, #1
 8005266:	2008      	movs	r0, #8
 8005268:	4684      	mov	ip, r0
 800526a:	44bc      	add	ip, r7
 800526c:	4461      	add	r1, ip
 800526e:	600b      	str	r3, [r1, #0]
 8005270:	643a      	str	r2, [r7, #64]	; 0x40
 8005272:	2300      	movs	r3, #0
 8005274:	647b      	str	r3, [r7, #68]	; 0x44
 8005276:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005278:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800527a:	0003      	movs	r3, r0
 800527c:	0f5b      	lsrs	r3, r3, #29
 800527e:	000c      	movs	r4, r1
 8005280:	00e4      	lsls	r4, r4, #3
 8005282:	26cc      	movs	r6, #204	; 0xcc
 8005284:	2508      	movs	r5, #8
 8005286:	197d      	adds	r5, r7, r5
 8005288:	19ad      	adds	r5, r5, r6
 800528a:	602c      	str	r4, [r5, #0]
 800528c:	2408      	movs	r4, #8
 800528e:	193c      	adds	r4, r7, r4
 8005290:	19a4      	adds	r4, r4, r6
 8005292:	6824      	ldr	r4, [r4, #0]
 8005294:	431c      	orrs	r4, r3
 8005296:	2308      	movs	r3, #8
 8005298:	18fb      	adds	r3, r7, r3
 800529a:	199b      	adds	r3, r3, r6
 800529c:	601c      	str	r4, [r3, #0]
 800529e:	0003      	movs	r3, r0
 80052a0:	00db      	lsls	r3, r3, #3
 80052a2:	21c8      	movs	r1, #200	; 0xc8
 80052a4:	2008      	movs	r0, #8
 80052a6:	4684      	mov	ip, r0
 80052a8:	44bc      	add	ip, r7
 80052aa:	4461      	add	r1, ip
 80052ac:	600b      	str	r3, [r1, #0]
 80052ae:	63ba      	str	r2, [r7, #56]	; 0x38
 80052b0:	2300      	movs	r3, #0
 80052b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80052b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052b8:	0003      	movs	r3, r0
 80052ba:	0f5b      	lsrs	r3, r3, #29
 80052bc:	4699      	mov	r9, r3
 80052be:	000c      	movs	r4, r1
 80052c0:	00e4      	lsls	r4, r4, #3
 80052c2:	26c4      	movs	r6, #196	; 0xc4
 80052c4:	0035      	movs	r5, r6
 80052c6:	2308      	movs	r3, #8
 80052c8:	469c      	mov	ip, r3
 80052ca:	44bc      	add	ip, r7
 80052cc:	4466      	add	r6, ip
 80052ce:	6034      	str	r4, [r6, #0]
 80052d0:	002c      	movs	r4, r5
 80052d2:	0025      	movs	r5, r4
 80052d4:	2308      	movs	r3, #8
 80052d6:	18fb      	adds	r3, r7, r3
 80052d8:	191e      	adds	r6, r3, r4
 80052da:	6834      	ldr	r4, [r6, #0]
 80052dc:	464b      	mov	r3, r9
 80052de:	431c      	orrs	r4, r3
 80052e0:	002b      	movs	r3, r5
 80052e2:	2508      	movs	r5, #8
 80052e4:	46ac      	mov	ip, r5
 80052e6:	44bc      	add	ip, r7
 80052e8:	4463      	add	r3, ip
 80052ea:	601c      	str	r4, [r3, #0]
 80052ec:	0003      	movs	r3, r0
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	21c0      	movs	r1, #192	; 0xc0
 80052f2:	2008      	movs	r0, #8
 80052f4:	4684      	mov	ip, r0
 80052f6:	44bc      	add	ip, r7
 80052f8:	4461      	add	r1, ip
 80052fa:	600b      	str	r3, [r1, #0]
 80052fc:	0013      	movs	r3, r2
 80052fe:	3307      	adds	r3, #7
 8005300:	08db      	lsrs	r3, r3, #3
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	466a      	mov	r2, sp
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	469d      	mov	sp, r3
 800530a:	ab02      	add	r3, sp, #8
 800530c:	3300      	adds	r3, #0
 800530e:	229c      	movs	r2, #156	; 0x9c
 8005310:	0052      	lsls	r2, r2, #1
 8005312:	2108      	movs	r1, #8
 8005314:	468c      	mov	ip, r1
 8005316:	44bc      	add	ip, r7
 8005318:	4462      	add	r2, ip
 800531a:	6013      	str	r3, [r2, #0]
				X_increment=0x07;
 800531c:	233b      	movs	r3, #59	; 0x3b
 800531e:	258c      	movs	r5, #140	; 0x8c
 8005320:	006d      	lsls	r5, r5, #1
 8005322:	2208      	movs	r2, #8
 8005324:	18ba      	adds	r2, r7, r2
 8005326:	1952      	adds	r2, r2, r5
 8005328:	18d2      	adds	r2, r2, r3
 800532a:	2307      	movs	r3, #7
 800532c:	7013      	strb	r3, [r2, #0]
				ASCII_height=0x12;
 800532e:	233a      	movs	r3, #58	; 0x3a
 8005330:	2208      	movs	r2, #8
 8005332:	18ba      	adds	r2, r7, r2
 8005334:	1952      	adds	r2, r2, r5
 8005336:	18d2      	adds	r2, r2, r3
 8005338:	2312      	movs	r3, #18
 800533a:	7013      	strb	r3, [r2, #0]
				for(i=0;i<strLen;i++){
 800533c:	235a      	movs	r3, #90	; 0x5a
 800533e:	2208      	movs	r2, #8
 8005340:	18ba      	adds	r2, r7, r2
 8005342:	1952      	adds	r2, r2, r5
 8005344:	18d2      	adds	r2, r2, r3
 8005346:	2300      	movs	r3, #0
 8005348:	8013      	strh	r3, [r2, #0]
 800534a:	e195      	b.n	8005678 <printASCIIarray+0xda4>
					for(j=0;j<symLen;j++){
 800534c:	235c      	movs	r3, #92	; 0x5c
 800534e:	228c      	movs	r2, #140	; 0x8c
 8005350:	0052      	lsls	r2, r2, #1
 8005352:	2108      	movs	r1, #8
 8005354:	468c      	mov	ip, r1
 8005356:	44bc      	add	ip, r7
 8005358:	4462      	add	r2, ip
 800535a:	18d2      	adds	r2, r2, r3
 800535c:	2300      	movs	r3, #0
 800535e:	8013      	strh	r3, [r2, #0]
 8005360:	e045      	b.n	80053ee <printASCIIarray+0xb1a>
						weoBuffer[j]=F2[dataASCII[i]][j];
 8005362:	235a      	movs	r3, #90	; 0x5a
 8005364:	228c      	movs	r2, #140	; 0x8c
 8005366:	0052      	lsls	r2, r2, #1
 8005368:	4694      	mov	ip, r2
 800536a:	2208      	movs	r2, #8
 800536c:	4691      	mov	r9, r2
 800536e:	44b9      	add	r9, r7
 8005370:	44cc      	add	ip, r9
 8005372:	4463      	add	r3, ip
 8005374:	881a      	ldrh	r2, [r3, #0]
 8005376:	23c8      	movs	r3, #200	; 0xc8
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	2108      	movs	r1, #8
 800537c:	468c      	mov	ip, r1
 800537e:	2108      	movs	r1, #8
 8005380:	4689      	mov	r9, r1
 8005382:	44b9      	add	r9, r7
 8005384:	44cc      	add	ip, r9
 8005386:	4463      	add	r3, ip
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	189b      	adds	r3, r3, r2
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	001d      	movs	r5, r3
 8005390:	225c      	movs	r2, #92	; 0x5c
 8005392:	218c      	movs	r1, #140	; 0x8c
 8005394:	0049      	lsls	r1, r1, #1
 8005396:	2308      	movs	r3, #8
 8005398:	18fb      	adds	r3, r7, r3
 800539a:	185b      	adds	r3, r3, r1
 800539c:	189b      	adds	r3, r3, r2
 800539e:	8818      	ldrh	r0, [r3, #0]
 80053a0:	000e      	movs	r6, r1
 80053a2:	2308      	movs	r3, #8
 80053a4:	18fb      	adds	r3, r7, r3
 80053a6:	185b      	adds	r3, r3, r1
 80053a8:	189b      	adds	r3, r3, r2
 80053aa:	881c      	ldrh	r4, [r3, #0]
 80053ac:	49bf      	ldr	r1, [pc, #764]	; (80056ac <printASCIIarray+0xdd8>)
 80053ae:	002a      	movs	r2, r5
 80053b0:	0052      	lsls	r2, r2, #1
 80053b2:	1952      	adds	r2, r2, r5
 80053b4:	0153      	lsls	r3, r2, #5
 80053b6:	18d2      	adds	r2, r2, r3
 80053b8:	188b      	adds	r3, r1, r2
 80053ba:	5c1b      	ldrb	r3, [r3, r0]
 80053bc:	22a4      	movs	r2, #164	; 0xa4
 80053be:	0052      	lsls	r2, r2, #1
 80053c0:	2108      	movs	r1, #8
 80053c2:	468c      	mov	ip, r1
 80053c4:	44bc      	add	ip, r7
 80053c6:	4462      	add	r2, ip
 80053c8:	6812      	ldr	r2, [r2, #0]
 80053ca:	5513      	strb	r3, [r2, r4]
					for(j=0;j<symLen;j++){
 80053cc:	225c      	movs	r2, #92	; 0x5c
 80053ce:	0031      	movs	r1, r6
 80053d0:	2308      	movs	r3, #8
 80053d2:	18fb      	adds	r3, r7, r3
 80053d4:	185b      	adds	r3, r3, r1
 80053d6:	189b      	adds	r3, r3, r2
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	218c      	movs	r1, #140	; 0x8c
 80053dc:	0049      	lsls	r1, r1, #1
 80053de:	468c      	mov	ip, r1
 80053e0:	2108      	movs	r1, #8
 80053e2:	4689      	mov	r9, r1
 80053e4:	44b9      	add	r9, r7
 80053e6:	44cc      	add	ip, r9
 80053e8:	4462      	add	r2, ip
 80053ea:	3301      	adds	r3, #1
 80053ec:	8013      	strh	r3, [r2, #0]
 80053ee:	235c      	movs	r3, #92	; 0x5c
 80053f0:	218c      	movs	r1, #140	; 0x8c
 80053f2:	0049      	lsls	r1, r1, #1
 80053f4:	2208      	movs	r2, #8
 80053f6:	18ba      	adds	r2, r7, r2
 80053f8:	1852      	adds	r2, r2, r1
 80053fa:	18d2      	adds	r2, r2, r3
 80053fc:	2354      	movs	r3, #84	; 0x54
 80053fe:	208c      	movs	r0, #140	; 0x8c
 8005400:	0040      	lsls	r0, r0, #1
 8005402:	4684      	mov	ip, r0
 8005404:	2008      	movs	r0, #8
 8005406:	4681      	mov	r9, r0
 8005408:	44b9      	add	r9, r7
 800540a:	44cc      	add	ip, r9
 800540c:	4463      	add	r3, ip
 800540e:	8812      	ldrh	r2, [r2, #0]
 8005410:	881b      	ldrh	r3, [r3, #0]
 8005412:	429a      	cmp	r2, r3
 8005414:	d3a5      	bcc.n	8005362 <printASCIIarray+0xa8e>
							}
					for (k=0;k<symLen;k++){
 8005416:	235e      	movs	r3, #94	; 0x5e
 8005418:	2208      	movs	r2, #8
 800541a:	18ba      	adds	r2, r7, r2
 800541c:	1852      	adds	r2, r2, r1
 800541e:	18d2      	adds	r2, r2, r3
 8005420:	2300      	movs	r3, #0
 8005422:	8013      	strh	r3, [r2, #0]
 8005424:	e053      	b.n	80054ce <printASCIIarray+0xbfa>
							weoBuffer1[k]=(weoBuffer[k]&0x0F)&contrast;
 8005426:	205e      	movs	r0, #94	; 0x5e
 8005428:	258c      	movs	r5, #140	; 0x8c
 800542a:	006d      	lsls	r5, r5, #1
 800542c:	2308      	movs	r3, #8
 800542e:	18fb      	adds	r3, r7, r3
 8005430:	195b      	adds	r3, r3, r5
 8005432:	181b      	adds	r3, r3, r0
 8005434:	881a      	ldrh	r2, [r3, #0]
 8005436:	26a4      	movs	r6, #164	; 0xa4
 8005438:	0076      	lsls	r6, r6, #1
 800543a:	2308      	movs	r3, #8
 800543c:	18fb      	adds	r3, r7, r3
 800543e:	199b      	adds	r3, r3, r6
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	5c9a      	ldrb	r2, [r3, r2]
 8005444:	2456      	movs	r4, #86	; 0x56
 8005446:	2308      	movs	r3, #8
 8005448:	18fb      	adds	r3, r7, r3
 800544a:	195b      	adds	r3, r3, r5
 800544c:	191b      	adds	r3, r3, r4
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	4013      	ands	r3, r2
 8005452:	b2da      	uxtb	r2, r3
 8005454:	2308      	movs	r3, #8
 8005456:	18fb      	adds	r3, r7, r3
 8005458:	195b      	adds	r3, r3, r5
 800545a:	181b      	adds	r3, r3, r0
 800545c:	8819      	ldrh	r1, [r3, #0]
 800545e:	230f      	movs	r3, #15
 8005460:	4013      	ands	r3, r2
 8005462:	b2db      	uxtb	r3, r3
 8005464:	4699      	mov	r9, r3
 8005466:	22a0      	movs	r2, #160	; 0xa0
 8005468:	0052      	lsls	r2, r2, #1
 800546a:	2308      	movs	r3, #8
 800546c:	469c      	mov	ip, r3
 800546e:	44bc      	add	ip, r7
 8005470:	4462      	add	r2, ip
 8005472:	6812      	ldr	r2, [r2, #0]
 8005474:	464b      	mov	r3, r9
 8005476:	5453      	strb	r3, [r2, r1]
							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
 8005478:	2308      	movs	r3, #8
 800547a:	18fb      	adds	r3, r7, r3
 800547c:	195b      	adds	r3, r3, r5
 800547e:	181b      	adds	r3, r3, r0
 8005480:	881a      	ldrh	r2, [r3, #0]
 8005482:	2308      	movs	r3, #8
 8005484:	18fb      	adds	r3, r7, r3
 8005486:	199b      	adds	r3, r3, r6
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	5c9b      	ldrb	r3, [r3, r2]
 800548c:	091b      	lsrs	r3, r3, #4
 800548e:	b2da      	uxtb	r2, r3
 8005490:	2308      	movs	r3, #8
 8005492:	18fb      	adds	r3, r7, r3
 8005494:	195b      	adds	r3, r3, r5
 8005496:	181b      	adds	r3, r3, r0
 8005498:	8819      	ldrh	r1, [r3, #0]
 800549a:	2308      	movs	r3, #8
 800549c:	18fb      	adds	r3, r7, r3
 800549e:	195b      	adds	r3, r3, r5
 80054a0:	191b      	adds	r3, r3, r4
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	4013      	ands	r3, r2
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	229c      	movs	r2, #156	; 0x9c
 80054aa:	0052      	lsls	r2, r2, #1
 80054ac:	2408      	movs	r4, #8
 80054ae:	46a4      	mov	ip, r4
 80054b0:	44bc      	add	ip, r7
 80054b2:	4462      	add	r2, ip
 80054b4:	6812      	ldr	r2, [r2, #0]
 80054b6:	5453      	strb	r3, [r2, r1]
					for (k=0;k<symLen;k++){
 80054b8:	2308      	movs	r3, #8
 80054ba:	18fb      	adds	r3, r7, r3
 80054bc:	195b      	adds	r3, r3, r5
 80054be:	181b      	adds	r3, r3, r0
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	2208      	movs	r2, #8
 80054c4:	18ba      	adds	r2, r7, r2
 80054c6:	1952      	adds	r2, r2, r5
 80054c8:	1812      	adds	r2, r2, r0
 80054ca:	3301      	adds	r3, #1
 80054cc:	8013      	strh	r3, [r2, #0]
 80054ce:	215e      	movs	r1, #94	; 0x5e
 80054d0:	208c      	movs	r0, #140	; 0x8c
 80054d2:	0040      	lsls	r0, r0, #1
 80054d4:	2308      	movs	r3, #8
 80054d6:	18fb      	adds	r3, r7, r3
 80054d8:	181b      	adds	r3, r3, r0
 80054da:	185a      	adds	r2, r3, r1
 80054dc:	2354      	movs	r3, #84	; 0x54
 80054de:	248c      	movs	r4, #140	; 0x8c
 80054e0:	0064      	lsls	r4, r4, #1
 80054e2:	46a4      	mov	ip, r4
 80054e4:	2408      	movs	r4, #8
 80054e6:	46a1      	mov	r9, r4
 80054e8:	44b9      	add	r9, r7
 80054ea:	44cc      	add	ip, r9
 80054ec:	4463      	add	r3, ip
 80054ee:	8812      	ldrh	r2, [r2, #0]
 80054f0:	881b      	ldrh	r3, [r3, #0]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d397      	bcc.n	8005426 <printASCIIarray+0xb52>
						}
					for (k=0;k<symLen;k++){
 80054f6:	2308      	movs	r3, #8
 80054f8:	18fb      	adds	r3, r7, r3
 80054fa:	181b      	adds	r3, r3, r0
 80054fc:	185a      	adds	r2, r3, r1
 80054fe:	2300      	movs	r3, #0
 8005500:	8013      	strh	r3, [r2, #0]
 8005502:	e03a      	b.n	800557a <printASCIIarray+0xca6>
							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
 8005504:	205e      	movs	r0, #94	; 0x5e
 8005506:	248c      	movs	r4, #140	; 0x8c
 8005508:	0064      	lsls	r4, r4, #1
 800550a:	2308      	movs	r3, #8
 800550c:	18fb      	adds	r3, r7, r3
 800550e:	191b      	adds	r3, r3, r4
 8005510:	181b      	adds	r3, r3, r0
 8005512:	881a      	ldrh	r2, [r3, #0]
 8005514:	239c      	movs	r3, #156	; 0x9c
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	2108      	movs	r1, #8
 800551a:	468c      	mov	ip, r1
 800551c:	44bc      	add	ip, r7
 800551e:	4463      	add	r3, ip
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	5c9b      	ldrb	r3, [r3, r2]
 8005524:	011b      	lsls	r3, r3, #4
 8005526:	b259      	sxtb	r1, r3
 8005528:	2308      	movs	r3, #8
 800552a:	18fb      	adds	r3, r7, r3
 800552c:	191b      	adds	r3, r3, r4
 800552e:	181b      	adds	r3, r3, r0
 8005530:	881a      	ldrh	r2, [r3, #0]
 8005532:	23a0      	movs	r3, #160	; 0xa0
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	2508      	movs	r5, #8
 8005538:	46ac      	mov	ip, r5
 800553a:	44bc      	add	ip, r7
 800553c:	4463      	add	r3, ip
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	5c9b      	ldrb	r3, [r3, r2]
 8005542:	b25b      	sxtb	r3, r3
 8005544:	430b      	orrs	r3, r1
 8005546:	b25a      	sxtb	r2, r3
 8005548:	2308      	movs	r3, #8
 800554a:	18fb      	adds	r3, r7, r3
 800554c:	191b      	adds	r3, r3, r4
 800554e:	181b      	adds	r3, r3, r0
 8005550:	8819      	ldrh	r1, [r3, #0]
 8005552:	b2d3      	uxtb	r3, r2
 8005554:	22a4      	movs	r2, #164	; 0xa4
 8005556:	0052      	lsls	r2, r2, #1
 8005558:	2508      	movs	r5, #8
 800555a:	46ac      	mov	ip, r5
 800555c:	44bc      	add	ip, r7
 800555e:	4462      	add	r2, ip
 8005560:	6812      	ldr	r2, [r2, #0]
 8005562:	5453      	strb	r3, [r2, r1]
					for (k=0;k<symLen;k++){
 8005564:	2308      	movs	r3, #8
 8005566:	18fb      	adds	r3, r7, r3
 8005568:	191b      	adds	r3, r3, r4
 800556a:	181b      	adds	r3, r3, r0
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	2208      	movs	r2, #8
 8005570:	18ba      	adds	r2, r7, r2
 8005572:	1912      	adds	r2, r2, r4
 8005574:	1812      	adds	r2, r2, r0
 8005576:	3301      	adds	r3, #1
 8005578:	8013      	strh	r3, [r2, #0]
 800557a:	235e      	movs	r3, #94	; 0x5e
 800557c:	248c      	movs	r4, #140	; 0x8c
 800557e:	0064      	lsls	r4, r4, #1
 8005580:	2208      	movs	r2, #8
 8005582:	18ba      	adds	r2, r7, r2
 8005584:	1912      	adds	r2, r2, r4
 8005586:	18d2      	adds	r2, r2, r3
 8005588:	2354      	movs	r3, #84	; 0x54
 800558a:	218c      	movs	r1, #140	; 0x8c
 800558c:	0049      	lsls	r1, r1, #1
 800558e:	468c      	mov	ip, r1
 8005590:	2108      	movs	r1, #8
 8005592:	4689      	mov	r9, r1
 8005594:	44b9      	add	r9, r7
 8005596:	44cc      	add	ip, r9
 8005598:	4463      	add	r3, ip
 800559a:	8812      	ldrh	r2, [r2, #0]
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d3b0      	bcc.n	8005504 <printASCIIarray+0xc30>
						}
				weoDrawRectangleFilled(ASCII_X, imY, ASCII_X+X_increment-1, imY + ASCII_height - decY, 0xFF, weoBuffer);
 80055a2:	2057      	movs	r0, #87	; 0x57
 80055a4:	2308      	movs	r3, #8
 80055a6:	18fb      	adds	r3, r7, r3
 80055a8:	191b      	adds	r3, r3, r4
 80055aa:	181a      	adds	r2, r3, r0
 80055ac:	233b      	movs	r3, #59	; 0x3b
 80055ae:	218c      	movs	r1, #140	; 0x8c
 80055b0:	0049      	lsls	r1, r1, #1
 80055b2:	468c      	mov	ip, r1
 80055b4:	2108      	movs	r1, #8
 80055b6:	4689      	mov	r9, r1
 80055b8:	44b9      	add	r9, r7
 80055ba:	44cc      	add	ip, r9
 80055bc:	4463      	add	r3, ip
 80055be:	7812      	ldrb	r2, [r2, #0]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	18d3      	adds	r3, r2, r3
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	3b01      	subs	r3, #1
 80055c8:	b2dd      	uxtb	r5, r3
 80055ca:	268f      	movs	r6, #143	; 0x8f
 80055cc:	0076      	lsls	r6, r6, #1
 80055ce:	2308      	movs	r3, #8
 80055d0:	18fb      	adds	r3, r7, r3
 80055d2:	199a      	adds	r2, r3, r6
 80055d4:	213a      	movs	r1, #58	; 0x3a
 80055d6:	2308      	movs	r3, #8
 80055d8:	18fb      	adds	r3, r7, r3
 80055da:	191b      	adds	r3, r3, r4
 80055dc:	185b      	adds	r3, r3, r1
 80055de:	7812      	ldrb	r2, [r2, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	18d3      	adds	r3, r2, r3
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	2158      	movs	r1, #88	; 0x58
 80055e8:	2308      	movs	r3, #8
 80055ea:	18fb      	adds	r3, r7, r3
 80055ec:	191b      	adds	r3, r3, r4
 80055ee:	185b      	adds	r3, r3, r1
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	b2dc      	uxtb	r4, r3
 80055f6:	22a4      	movs	r2, #164	; 0xa4
 80055f8:	0052      	lsls	r2, r2, #1
 80055fa:	2308      	movs	r3, #8
 80055fc:	469c      	mov	ip, r3
 80055fe:	44bc      	add	ip, r7
 8005600:	4462      	add	r2, ip
 8005602:	6812      	ldr	r2, [r2, #0]
 8005604:	2308      	movs	r3, #8
 8005606:	18fb      	adds	r3, r7, r3
 8005608:	199b      	adds	r3, r3, r6
 800560a:	7819      	ldrb	r1, [r3, #0]
 800560c:	238c      	movs	r3, #140	; 0x8c
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	2608      	movs	r6, #8
 8005612:	19be      	adds	r6, r7, r6
 8005614:	18f6      	adds	r6, r6, r3
 8005616:	1833      	adds	r3, r6, r0
 8005618:	7818      	ldrb	r0, [r3, #0]
 800561a:	9201      	str	r2, [sp, #4]
 800561c:	23ff      	movs	r3, #255	; 0xff
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	0023      	movs	r3, r4
 8005622:	002a      	movs	r2, r5
 8005624:	f7fd ff0c 	bl	8003440 <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 8005628:	2057      	movs	r0, #87	; 0x57
 800562a:	248c      	movs	r4, #140	; 0x8c
 800562c:	0064      	lsls	r4, r4, #1
 800562e:	2308      	movs	r3, #8
 8005630:	18fb      	adds	r3, r7, r3
 8005632:	191b      	adds	r3, r3, r4
 8005634:	1819      	adds	r1, r3, r0
 8005636:	2308      	movs	r3, #8
 8005638:	18fb      	adds	r3, r7, r3
 800563a:	191b      	adds	r3, r3, r4
 800563c:	181a      	adds	r2, r3, r0
 800563e:	233b      	movs	r3, #59	; 0x3b
 8005640:	208c      	movs	r0, #140	; 0x8c
 8005642:	0040      	lsls	r0, r0, #1
 8005644:	4684      	mov	ip, r0
 8005646:	2008      	movs	r0, #8
 8005648:	4681      	mov	r9, r0
 800564a:	44b9      	add	r9, r7
 800564c:	44cc      	add	ip, r9
 800564e:	4463      	add	r3, ip
 8005650:	7812      	ldrb	r2, [r2, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	18d3      	adds	r3, r2, r3
 8005656:	700b      	strb	r3, [r1, #0]
				for(i=0;i<strLen;i++){
 8005658:	225a      	movs	r2, #90	; 0x5a
 800565a:	2308      	movs	r3, #8
 800565c:	18fb      	adds	r3, r7, r3
 800565e:	191b      	adds	r3, r3, r4
 8005660:	189b      	adds	r3, r3, r2
 8005662:	881b      	ldrh	r3, [r3, #0]
 8005664:	218c      	movs	r1, #140	; 0x8c
 8005666:	0049      	lsls	r1, r1, #1
 8005668:	468c      	mov	ip, r1
 800566a:	2108      	movs	r1, #8
 800566c:	4689      	mov	r9, r1
 800566e:	44b9      	add	r9, r7
 8005670:	44cc      	add	ip, r9
 8005672:	4462      	add	r2, ip
 8005674:	3301      	adds	r3, #1
 8005676:	8013      	strh	r3, [r2, #0]
 8005678:	231e      	movs	r3, #30
 800567a:	33ff      	adds	r3, #255	; 0xff
 800567c:	2208      	movs	r2, #8
 800567e:	4694      	mov	ip, r2
 8005680:	44bc      	add	ip, r7
 8005682:	4463      	add	r3, ip
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	b29a      	uxth	r2, r3
 8005688:	215a      	movs	r1, #90	; 0x5a
 800568a:	208c      	movs	r0, #140	; 0x8c
 800568c:	0040      	lsls	r0, r0, #1
 800568e:	2308      	movs	r3, #8
 8005690:	18fb      	adds	r3, r7, r3
 8005692:	181b      	adds	r3, r3, r0
 8005694:	185b      	adds	r3, r3, r1
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	4293      	cmp	r3, r2
 800569a:	d200      	bcs.n	800569e <printASCIIarray+0xdca>
 800569c:	e656      	b.n	800534c <printASCIIarray+0xa78>
				}
				for(i=0;i<symLen;i++){
 800569e:	2308      	movs	r3, #8
 80056a0:	18fb      	adds	r3, r7, r3
 80056a2:	181b      	adds	r3, r3, r0
 80056a4:	185a      	adds	r2, r3, r1
 80056a6:	2300      	movs	r3, #0
 80056a8:	8013      	strh	r3, [r2, #0]
 80056aa:	e027      	b.n	80056fc <printASCIIarray+0xe28>
 80056ac:	08012dfc 	.word	0x08012dfc
									weoBuffer[j]=0x00;
 80056b0:	235c      	movs	r3, #92	; 0x5c
 80056b2:	228c      	movs	r2, #140	; 0x8c
 80056b4:	0052      	lsls	r2, r2, #1
 80056b6:	4694      	mov	ip, r2
 80056b8:	2208      	movs	r2, #8
 80056ba:	4691      	mov	r9, r2
 80056bc:	44b9      	add	r9, r7
 80056be:	44cc      	add	ip, r9
 80056c0:	4463      	add	r3, ip
 80056c2:	8819      	ldrh	r1, [r3, #0]
 80056c4:	23a4      	movs	r3, #164	; 0xa4
 80056c6:	005b      	lsls	r3, r3, #1
 80056c8:	2208      	movs	r2, #8
 80056ca:	4694      	mov	ip, r2
 80056cc:	44bc      	add	ip, r7
 80056ce:	4463      	add	r3, ip
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	2300      	movs	r3, #0
 80056d4:	5453      	strb	r3, [r2, r1]
				for(i=0;i<symLen;i++){
 80056d6:	225a      	movs	r2, #90	; 0x5a
 80056d8:	238c      	movs	r3, #140	; 0x8c
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	2108      	movs	r1, #8
 80056de:	468c      	mov	ip, r1
 80056e0:	44bc      	add	ip, r7
 80056e2:	4463      	add	r3, ip
 80056e4:	189b      	adds	r3, r3, r2
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	218c      	movs	r1, #140	; 0x8c
 80056ea:	0049      	lsls	r1, r1, #1
 80056ec:	468c      	mov	ip, r1
 80056ee:	2108      	movs	r1, #8
 80056f0:	4689      	mov	r9, r1
 80056f2:	44b9      	add	r9, r7
 80056f4:	44cc      	add	ip, r9
 80056f6:	4462      	add	r2, ip
 80056f8:	3301      	adds	r3, #1
 80056fa:	8013      	strh	r3, [r2, #0]
 80056fc:	235a      	movs	r3, #90	; 0x5a
 80056fe:	228c      	movs	r2, #140	; 0x8c
 8005700:	0052      	lsls	r2, r2, #1
 8005702:	2108      	movs	r1, #8
 8005704:	468c      	mov	ip, r1
 8005706:	44bc      	add	ip, r7
 8005708:	4462      	add	r2, ip
 800570a:	18d2      	adds	r2, r2, r3
 800570c:	2354      	movs	r3, #84	; 0x54
 800570e:	218c      	movs	r1, #140	; 0x8c
 8005710:	0049      	lsls	r1, r1, #1
 8005712:	468c      	mov	ip, r1
 8005714:	2108      	movs	r1, #8
 8005716:	4689      	mov	r9, r1
 8005718:	44b9      	add	r9, r7
 800571a:	44cc      	add	ip, r9
 800571c:	4463      	add	r3, ip
 800571e:	8812      	ldrh	r2, [r2, #0]
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	429a      	cmp	r2, r3
 8005724:	d3c4      	bcc.n	80056b0 <printASCIIarray+0xddc>
 8005726:	46c5      	mov	sp, r8
							}
			}
			if(fontCur==2){
 8005728:	2359      	movs	r3, #89	; 0x59
 800572a:	228c      	movs	r2, #140	; 0x8c
 800572c:	0052      	lsls	r2, r2, #1
 800572e:	4694      	mov	ip, r2
 8005730:	2208      	movs	r2, #8
 8005732:	4690      	mov	r8, r2
 8005734:	44b8      	add	r8, r7
 8005736:	44c4      	add	ip, r8
 8005738:	4463      	add	r3, ip
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	2b02      	cmp	r3, #2
 800573e:	d001      	beq.n	8005744 <printASCIIarray+0xe70>
 8005740:	f001 f887 	bl	8006852 <printASCIIarray+0x1f7e>
 8005744:	466b      	mov	r3, sp
 8005746:	001e      	movs	r6, r3
				symLen=304;
 8005748:	2454      	movs	r4, #84	; 0x54
 800574a:	218c      	movs	r1, #140	; 0x8c
 800574c:	0049      	lsls	r1, r1, #1
 800574e:	2308      	movs	r3, #8
 8005750:	18fb      	adds	r3, r7, r3
 8005752:	185b      	adds	r3, r3, r1
 8005754:	191a      	adds	r2, r3, r4
 8005756:	2398      	movs	r3, #152	; 0x98
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 800575c:	607c      	str	r4, [r7, #4]
 800575e:	2308      	movs	r3, #8
 8005760:	18fb      	adds	r3, r7, r3
 8005762:	185b      	adds	r3, r3, r1
 8005764:	191b      	adds	r3, r3, r4
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	2290      	movs	r2, #144	; 0x90
 800576a:	0052      	lsls	r2, r2, #1
 800576c:	18ba      	adds	r2, r7, r2
 800576e:	6013      	str	r3, [r2, #0]
 8005770:	2390      	movs	r3, #144	; 0x90
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	18fb      	adds	r3, r7, r3
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3b01      	subs	r3, #1
 800577a:	209a      	movs	r0, #154	; 0x9a
 800577c:	0040      	lsls	r0, r0, #1
 800577e:	2208      	movs	r2, #8
 8005780:	4694      	mov	ip, r2
 8005782:	44bc      	add	ip, r7
 8005784:	4460      	add	r0, ip
 8005786:	6003      	str	r3, [r0, #0]
 8005788:	2390      	movs	r3, #144	; 0x90
 800578a:	005b      	lsls	r3, r3, #1
 800578c:	18fb      	adds	r3, r7, r3
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	633b      	str	r3, [r7, #48]	; 0x30
 8005792:	2300      	movs	r3, #0
 8005794:	637b      	str	r3, [r7, #52]	; 0x34
 8005796:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005798:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800579a:	0003      	movs	r3, r0
 800579c:	0f5b      	lsrs	r3, r3, #29
 800579e:	000d      	movs	r5, r1
 80057a0:	00ed      	lsls	r5, r5, #3
 80057a2:	24bc      	movs	r4, #188	; 0xbc
 80057a4:	2208      	movs	r2, #8
 80057a6:	18ba      	adds	r2, r7, r2
 80057a8:	1912      	adds	r2, r2, r4
 80057aa:	6015      	str	r5, [r2, #0]
 80057ac:	2208      	movs	r2, #8
 80057ae:	18ba      	adds	r2, r7, r2
 80057b0:	1915      	adds	r5, r2, r4
 80057b2:	682d      	ldr	r5, [r5, #0]
 80057b4:	431d      	orrs	r5, r3
 80057b6:	2308      	movs	r3, #8
 80057b8:	18fb      	adds	r3, r7, r3
 80057ba:	191b      	adds	r3, r3, r4
 80057bc:	601d      	str	r5, [r3, #0]
 80057be:	0003      	movs	r3, r0
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	20b8      	movs	r0, #184	; 0xb8
 80057c4:	2208      	movs	r2, #8
 80057c6:	4694      	mov	ip, r2
 80057c8:	44bc      	add	ip, r7
 80057ca:	4460      	add	r0, ip
 80057cc:	6003      	str	r3, [r0, #0]
 80057ce:	2390      	movs	r3, #144	; 0x90
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	18fb      	adds	r3, r7, r3
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80057d8:	2300      	movs	r3, #0
 80057da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057e0:	0003      	movs	r3, r0
 80057e2:	0f5b      	lsrs	r3, r3, #29
 80057e4:	4698      	mov	r8, r3
 80057e6:	000d      	movs	r5, r1
 80057e8:	00ed      	lsls	r5, r5, #3
 80057ea:	24b4      	movs	r4, #180	; 0xb4
 80057ec:	0022      	movs	r2, r4
 80057ee:	2308      	movs	r3, #8
 80057f0:	469c      	mov	ip, r3
 80057f2:	44bc      	add	ip, r7
 80057f4:	4464      	add	r4, ip
 80057f6:	6025      	str	r5, [r4, #0]
 80057f8:	0015      	movs	r5, r2
 80057fa:	002a      	movs	r2, r5
 80057fc:	2308      	movs	r3, #8
 80057fe:	18fb      	adds	r3, r7, r3
 8005800:	195c      	adds	r4, r3, r5
 8005802:	6825      	ldr	r5, [r4, #0]
 8005804:	4643      	mov	r3, r8
 8005806:	431d      	orrs	r5, r3
 8005808:	0013      	movs	r3, r2
 800580a:	2208      	movs	r2, #8
 800580c:	4694      	mov	ip, r2
 800580e:	44bc      	add	ip, r7
 8005810:	4463      	add	r3, ip
 8005812:	601d      	str	r5, [r3, #0]
 8005814:	0003      	movs	r3, r0
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	20b0      	movs	r0, #176	; 0xb0
 800581a:	2208      	movs	r2, #8
 800581c:	4694      	mov	ip, r2
 800581e:	44bc      	add	ip, r7
 8005820:	4460      	add	r0, ip
 8005822:	6003      	str	r3, [r0, #0]
 8005824:	2390      	movs	r3, #144	; 0x90
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	18fb      	adds	r3, r7, r3
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3307      	adds	r3, #7
 800582e:	08db      	lsrs	r3, r3, #3
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	466a      	mov	r2, sp
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	469d      	mov	sp, r3
 8005838:	ab02      	add	r3, sp, #8
 800583a:	3300      	adds	r3, #0
 800583c:	2298      	movs	r2, #152	; 0x98
 800583e:	0052      	lsls	r2, r2, #1
 8005840:	2108      	movs	r1, #8
 8005842:	468c      	mov	ip, r1
 8005844:	44bc      	add	ip, r7
 8005846:	4462      	add	r2, ip
 8005848:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer1[symLen];
 800584a:	687c      	ldr	r4, [r7, #4]
 800584c:	607c      	str	r4, [r7, #4]
 800584e:	218c      	movs	r1, #140	; 0x8c
 8005850:	0049      	lsls	r1, r1, #1
 8005852:	2308      	movs	r3, #8
 8005854:	18fb      	adds	r3, r7, r3
 8005856:	185b      	adds	r3, r3, r1
 8005858:	191b      	adds	r3, r3, r4
 800585a:	881b      	ldrh	r3, [r3, #0]
 800585c:	2290      	movs	r2, #144	; 0x90
 800585e:	0052      	lsls	r2, r2, #1
 8005860:	18ba      	adds	r2, r7, r2
 8005862:	6013      	str	r3, [r2, #0]
 8005864:	2390      	movs	r3, #144	; 0x90
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	18fb      	adds	r3, r7, r3
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3b01      	subs	r3, #1
 800586e:	2096      	movs	r0, #150	; 0x96
 8005870:	0040      	lsls	r0, r0, #1
 8005872:	2208      	movs	r2, #8
 8005874:	4694      	mov	ip, r2
 8005876:	44bc      	add	ip, r7
 8005878:	4460      	add	r0, ip
 800587a:	6003      	str	r3, [r0, #0]
 800587c:	2390      	movs	r3, #144	; 0x90
 800587e:	005b      	lsls	r3, r3, #1
 8005880:	18fb      	adds	r3, r7, r3
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	623b      	str	r3, [r7, #32]
 8005886:	2300      	movs	r3, #0
 8005888:	627b      	str	r3, [r7, #36]	; 0x24
 800588a:	6a38      	ldr	r0, [r7, #32]
 800588c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800588e:	0003      	movs	r3, r0
 8005890:	0f5b      	lsrs	r3, r3, #29
 8005892:	000d      	movs	r5, r1
 8005894:	00ed      	lsls	r5, r5, #3
 8005896:	24ac      	movs	r4, #172	; 0xac
 8005898:	2208      	movs	r2, #8
 800589a:	18ba      	adds	r2, r7, r2
 800589c:	1912      	adds	r2, r2, r4
 800589e:	6015      	str	r5, [r2, #0]
 80058a0:	2208      	movs	r2, #8
 80058a2:	18ba      	adds	r2, r7, r2
 80058a4:	1915      	adds	r5, r2, r4
 80058a6:	682d      	ldr	r5, [r5, #0]
 80058a8:	431d      	orrs	r5, r3
 80058aa:	2308      	movs	r3, #8
 80058ac:	18fb      	adds	r3, r7, r3
 80058ae:	191b      	adds	r3, r3, r4
 80058b0:	601d      	str	r5, [r3, #0]
 80058b2:	0003      	movs	r3, r0
 80058b4:	00db      	lsls	r3, r3, #3
 80058b6:	20a8      	movs	r0, #168	; 0xa8
 80058b8:	2208      	movs	r2, #8
 80058ba:	4694      	mov	ip, r2
 80058bc:	44bc      	add	ip, r7
 80058be:	4460      	add	r0, ip
 80058c0:	6003      	str	r3, [r0, #0]
 80058c2:	2390      	movs	r3, #144	; 0x90
 80058c4:	005b      	lsls	r3, r3, #1
 80058c6:	18fb      	adds	r3, r7, r3
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	61bb      	str	r3, [r7, #24]
 80058cc:	2300      	movs	r3, #0
 80058ce:	61fb      	str	r3, [r7, #28]
 80058d0:	69b8      	ldr	r0, [r7, #24]
 80058d2:	69f9      	ldr	r1, [r7, #28]
 80058d4:	0003      	movs	r3, r0
 80058d6:	0f5b      	lsrs	r3, r3, #29
 80058d8:	4698      	mov	r8, r3
 80058da:	000d      	movs	r5, r1
 80058dc:	00ed      	lsls	r5, r5, #3
 80058de:	24a4      	movs	r4, #164	; 0xa4
 80058e0:	0022      	movs	r2, r4
 80058e2:	2308      	movs	r3, #8
 80058e4:	469c      	mov	ip, r3
 80058e6:	44bc      	add	ip, r7
 80058e8:	4464      	add	r4, ip
 80058ea:	6025      	str	r5, [r4, #0]
 80058ec:	0015      	movs	r5, r2
 80058ee:	002a      	movs	r2, r5
 80058f0:	2308      	movs	r3, #8
 80058f2:	18fb      	adds	r3, r7, r3
 80058f4:	195c      	adds	r4, r3, r5
 80058f6:	6825      	ldr	r5, [r4, #0]
 80058f8:	4643      	mov	r3, r8
 80058fa:	431d      	orrs	r5, r3
 80058fc:	0013      	movs	r3, r2
 80058fe:	2208      	movs	r2, #8
 8005900:	4694      	mov	ip, r2
 8005902:	44bc      	add	ip, r7
 8005904:	4463      	add	r3, ip
 8005906:	601d      	str	r5, [r3, #0]
 8005908:	0003      	movs	r3, r0
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	20a0      	movs	r0, #160	; 0xa0
 800590e:	2208      	movs	r2, #8
 8005910:	4694      	mov	ip, r2
 8005912:	44bc      	add	ip, r7
 8005914:	4460      	add	r0, ip
 8005916:	6003      	str	r3, [r0, #0]
 8005918:	2390      	movs	r3, #144	; 0x90
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	18fb      	adds	r3, r7, r3
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3307      	adds	r3, #7
 8005922:	08db      	lsrs	r3, r3, #3
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	466a      	mov	r2, sp
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	469d      	mov	sp, r3
 800592c:	ab02      	add	r3, sp, #8
 800592e:	3300      	adds	r3, #0
 8005930:	2294      	movs	r2, #148	; 0x94
 8005932:	0052      	lsls	r2, r2, #1
 8005934:	2108      	movs	r1, #8
 8005936:	468c      	mov	ip, r1
 8005938:	44bc      	add	ip, r7
 800593a:	4462      	add	r2, ip
 800593c:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer2[symLen];
 800593e:	687c      	ldr	r4, [r7, #4]
 8005940:	218c      	movs	r1, #140	; 0x8c
 8005942:	0049      	lsls	r1, r1, #1
 8005944:	2308      	movs	r3, #8
 8005946:	18fb      	adds	r3, r7, r3
 8005948:	185b      	adds	r3, r3, r1
 800594a:	191b      	adds	r3, r3, r4
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	001a      	movs	r2, r3
 8005950:	3a01      	subs	r2, #1
 8005952:	2192      	movs	r1, #146	; 0x92
 8005954:	0049      	lsls	r1, r1, #1
 8005956:	2008      	movs	r0, #8
 8005958:	4684      	mov	ip, r0
 800595a:	44bc      	add	ip, r7
 800595c:	4461      	add	r1, ip
 800595e:	600a      	str	r2, [r1, #0]
 8005960:	613b      	str	r3, [r7, #16]
 8005962:	2200      	movs	r2, #0
 8005964:	617a      	str	r2, [r7, #20]
 8005966:	6938      	ldr	r0, [r7, #16]
 8005968:	6979      	ldr	r1, [r7, #20]
 800596a:	0002      	movs	r2, r0
 800596c:	0f52      	lsrs	r2, r2, #29
 800596e:	4694      	mov	ip, r2
 8005970:	000c      	movs	r4, r1
 8005972:	00e4      	lsls	r4, r4, #3
 8005974:	259c      	movs	r5, #156	; 0x9c
 8005976:	2208      	movs	r2, #8
 8005978:	18ba      	adds	r2, r7, r2
 800597a:	1952      	adds	r2, r2, r5
 800597c:	6014      	str	r4, [r2, #0]
 800597e:	2208      	movs	r2, #8
 8005980:	18ba      	adds	r2, r7, r2
 8005982:	1954      	adds	r4, r2, r5
 8005984:	6824      	ldr	r4, [r4, #0]
 8005986:	4662      	mov	r2, ip
 8005988:	4314      	orrs	r4, r2
 800598a:	2208      	movs	r2, #8
 800598c:	18ba      	adds	r2, r7, r2
 800598e:	1952      	adds	r2, r2, r5
 8005990:	6014      	str	r4, [r2, #0]
 8005992:	0002      	movs	r2, r0
 8005994:	00d2      	lsls	r2, r2, #3
 8005996:	2198      	movs	r1, #152	; 0x98
 8005998:	2008      	movs	r0, #8
 800599a:	4684      	mov	ip, r0
 800599c:	44bc      	add	ip, r7
 800599e:	4461      	add	r1, ip
 80059a0:	600a      	str	r2, [r1, #0]
 80059a2:	60bb      	str	r3, [r7, #8]
 80059a4:	2200      	movs	r2, #0
 80059a6:	60fa      	str	r2, [r7, #12]
 80059a8:	68b8      	ldr	r0, [r7, #8]
 80059aa:	68f9      	ldr	r1, [r7, #12]
 80059ac:	0002      	movs	r2, r0
 80059ae:	0f52      	lsrs	r2, r2, #29
 80059b0:	4694      	mov	ip, r2
 80059b2:	000c      	movs	r4, r1
 80059b4:	00e4      	lsls	r4, r4, #3
 80059b6:	2594      	movs	r5, #148	; 0x94
 80059b8:	2208      	movs	r2, #8
 80059ba:	18ba      	adds	r2, r7, r2
 80059bc:	1952      	adds	r2, r2, r5
 80059be:	6014      	str	r4, [r2, #0]
 80059c0:	2208      	movs	r2, #8
 80059c2:	18ba      	adds	r2, r7, r2
 80059c4:	1954      	adds	r4, r2, r5
 80059c6:	6824      	ldr	r4, [r4, #0]
 80059c8:	4662      	mov	r2, ip
 80059ca:	4314      	orrs	r4, r2
 80059cc:	2208      	movs	r2, #8
 80059ce:	18ba      	adds	r2, r7, r2
 80059d0:	1952      	adds	r2, r2, r5
 80059d2:	6014      	str	r4, [r2, #0]
 80059d4:	0002      	movs	r2, r0
 80059d6:	00d2      	lsls	r2, r2, #3
 80059d8:	2190      	movs	r1, #144	; 0x90
 80059da:	2008      	movs	r0, #8
 80059dc:	4684      	mov	ip, r0
 80059de:	44bc      	add	ip, r7
 80059e0:	4461      	add	r1, ip
 80059e2:	600a      	str	r2, [r1, #0]
 80059e4:	3307      	adds	r3, #7
 80059e6:	08db      	lsrs	r3, r3, #3
 80059e8:	00db      	lsls	r3, r3, #3
 80059ea:	466a      	mov	r2, sp
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	469d      	mov	sp, r3
 80059f0:	ab02      	add	r3, sp, #8
 80059f2:	3300      	adds	r3, #0
 80059f4:	2290      	movs	r2, #144	; 0x90
 80059f6:	0052      	lsls	r2, r2, #1
 80059f8:	2108      	movs	r1, #8
 80059fa:	468c      	mov	ip, r1
 80059fc:	44bc      	add	ip, r7
 80059fe:	4462      	add	r2, ip
 8005a00:	6013      	str	r3, [r2, #0]
				X_increment=0x10;
 8005a02:	233b      	movs	r3, #59	; 0x3b
 8005a04:	228c      	movs	r2, #140	; 0x8c
 8005a06:	0052      	lsls	r2, r2, #1
 8005a08:	4694      	mov	ip, r2
 8005a0a:	2208      	movs	r2, #8
 8005a0c:	4690      	mov	r8, r2
 8005a0e:	44b8      	add	r8, r7
 8005a10:	44c4      	add	ip, r8
 8005a12:	4463      	add	r3, ip
 8005a14:	2210      	movs	r2, #16
 8005a16:	701a      	strb	r2, [r3, #0]
				ASCII_height=0x26;
 8005a18:	233a      	movs	r3, #58	; 0x3a
 8005a1a:	228c      	movs	r2, #140	; 0x8c
 8005a1c:	0052      	lsls	r2, r2, #1
 8005a1e:	4694      	mov	ip, r2
 8005a20:	2208      	movs	r2, #8
 8005a22:	4690      	mov	r8, r2
 8005a24:	44b8      	add	r8, r7
 8005a26:	44c4      	add	ip, r8
 8005a28:	4463      	add	r3, ip
 8005a2a:	2226      	movs	r2, #38	; 0x26
 8005a2c:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 8005a2e:	235a      	movs	r3, #90	; 0x5a
 8005a30:	228c      	movs	r2, #140	; 0x8c
 8005a32:	0052      	lsls	r2, r2, #1
 8005a34:	4694      	mov	ip, r2
 8005a36:	2208      	movs	r2, #8
 8005a38:	4690      	mov	r8, r2
 8005a3a:	44b8      	add	r8, r7
 8005a3c:	44c4      	add	ip, r8
 8005a3e:	4463      	add	r3, ip
 8005a40:	2200      	movs	r2, #0
 8005a42:	801a      	strh	r2, [r3, #0]
 8005a44:	f000 fcfa 	bl	800643c <printASCIIarray+0x1b68>

					if(dataASCII[i]==0x01){dataASCII[i]=0x0c;}
 8005a48:	215a      	movs	r1, #90	; 0x5a
 8005a4a:	248c      	movs	r4, #140	; 0x8c
 8005a4c:	0064      	lsls	r4, r4, #1
 8005a4e:	2308      	movs	r3, #8
 8005a50:	18fb      	adds	r3, r7, r3
 8005a52:	191b      	adds	r3, r3, r4
 8005a54:	185b      	adds	r3, r3, r1
 8005a56:	881b      	ldrh	r3, [r3, #0]
 8005a58:	20c8      	movs	r0, #200	; 0xc8
 8005a5a:	0040      	lsls	r0, r0, #1
 8005a5c:	2208      	movs	r2, #8
 8005a5e:	2508      	movs	r5, #8
 8005a60:	46ac      	mov	ip, r5
 8005a62:	44bc      	add	ip, r7
 8005a64:	4462      	add	r2, ip
 8005a66:	1812      	adds	r2, r2, r0
 8005a68:	6812      	ldr	r2, [r2, #0]
 8005a6a:	18d3      	adds	r3, r2, r3
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d10e      	bne.n	8005a90 <printASCIIarray+0x11bc>
 8005a72:	2308      	movs	r3, #8
 8005a74:	18fb      	adds	r3, r7, r3
 8005a76:	191b      	adds	r3, r3, r4
 8005a78:	185b      	adds	r3, r3, r1
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	2208      	movs	r2, #8
 8005a7e:	2108      	movs	r1, #8
 8005a80:	468c      	mov	ip, r1
 8005a82:	44bc      	add	ip, r7
 8005a84:	4462      	add	r2, ip
 8005a86:	1812      	adds	r2, r2, r0
 8005a88:	6812      	ldr	r2, [r2, #0]
 8005a8a:	18d3      	adds	r3, r2, r3
 8005a8c:	220c      	movs	r2, #12
 8005a8e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x02){dataASCII[i]=0x0d;}
 8005a90:	215a      	movs	r1, #90	; 0x5a
 8005a92:	248c      	movs	r4, #140	; 0x8c
 8005a94:	0064      	lsls	r4, r4, #1
 8005a96:	2308      	movs	r3, #8
 8005a98:	18fb      	adds	r3, r7, r3
 8005a9a:	191b      	adds	r3, r3, r4
 8005a9c:	185b      	adds	r3, r3, r1
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	20c8      	movs	r0, #200	; 0xc8
 8005aa2:	0040      	lsls	r0, r0, #1
 8005aa4:	2208      	movs	r2, #8
 8005aa6:	2508      	movs	r5, #8
 8005aa8:	46ac      	mov	ip, r5
 8005aaa:	44bc      	add	ip, r7
 8005aac:	4462      	add	r2, ip
 8005aae:	1812      	adds	r2, r2, r0
 8005ab0:	6812      	ldr	r2, [r2, #0]
 8005ab2:	18d3      	adds	r3, r2, r3
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d10e      	bne.n	8005ad8 <printASCIIarray+0x1204>
 8005aba:	2308      	movs	r3, #8
 8005abc:	18fb      	adds	r3, r7, r3
 8005abe:	191b      	adds	r3, r3, r4
 8005ac0:	185b      	adds	r3, r3, r1
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	2208      	movs	r2, #8
 8005ac6:	2108      	movs	r1, #8
 8005ac8:	468c      	mov	ip, r1
 8005aca:	44bc      	add	ip, r7
 8005acc:	4462      	add	r2, ip
 8005ace:	1812      	adds	r2, r2, r0
 8005ad0:	6812      	ldr	r2, [r2, #0]
 8005ad2:	18d3      	adds	r3, r2, r3
 8005ad4:	220d      	movs	r2, #13
 8005ad6:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x03){dataASCII[i]=0x0e;}
 8005ad8:	215a      	movs	r1, #90	; 0x5a
 8005ada:	248c      	movs	r4, #140	; 0x8c
 8005adc:	0064      	lsls	r4, r4, #1
 8005ade:	2308      	movs	r3, #8
 8005ae0:	18fb      	adds	r3, r7, r3
 8005ae2:	191b      	adds	r3, r3, r4
 8005ae4:	185b      	adds	r3, r3, r1
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	20c8      	movs	r0, #200	; 0xc8
 8005aea:	0040      	lsls	r0, r0, #1
 8005aec:	2208      	movs	r2, #8
 8005aee:	2508      	movs	r5, #8
 8005af0:	46ac      	mov	ip, r5
 8005af2:	44bc      	add	ip, r7
 8005af4:	4462      	add	r2, ip
 8005af6:	1812      	adds	r2, r2, r0
 8005af8:	6812      	ldr	r2, [r2, #0]
 8005afa:	18d3      	adds	r3, r2, r3
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	2b03      	cmp	r3, #3
 8005b00:	d10e      	bne.n	8005b20 <printASCIIarray+0x124c>
 8005b02:	2308      	movs	r3, #8
 8005b04:	18fb      	adds	r3, r7, r3
 8005b06:	191b      	adds	r3, r3, r4
 8005b08:	185b      	adds	r3, r3, r1
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	2208      	movs	r2, #8
 8005b0e:	2108      	movs	r1, #8
 8005b10:	468c      	mov	ip, r1
 8005b12:	44bc      	add	ip, r7
 8005b14:	4462      	add	r2, ip
 8005b16:	1812      	adds	r2, r2, r0
 8005b18:	6812      	ldr	r2, [r2, #0]
 8005b1a:	18d3      	adds	r3, r2, r3
 8005b1c:	220e      	movs	r2, #14
 8005b1e:	701a      	strb	r2, [r3, #0]

					if(dataASCII[i]==0x20){dataASCII[i]=0x00;}
 8005b20:	215a      	movs	r1, #90	; 0x5a
 8005b22:	248c      	movs	r4, #140	; 0x8c
 8005b24:	0064      	lsls	r4, r4, #1
 8005b26:	2308      	movs	r3, #8
 8005b28:	18fb      	adds	r3, r7, r3
 8005b2a:	191b      	adds	r3, r3, r4
 8005b2c:	185b      	adds	r3, r3, r1
 8005b2e:	881b      	ldrh	r3, [r3, #0]
 8005b30:	20c8      	movs	r0, #200	; 0xc8
 8005b32:	0040      	lsls	r0, r0, #1
 8005b34:	2208      	movs	r2, #8
 8005b36:	2508      	movs	r5, #8
 8005b38:	46ac      	mov	ip, r5
 8005b3a:	44bc      	add	ip, r7
 8005b3c:	4462      	add	r2, ip
 8005b3e:	1812      	adds	r2, r2, r0
 8005b40:	6812      	ldr	r2, [r2, #0]
 8005b42:	18d3      	adds	r3, r2, r3
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	2b20      	cmp	r3, #32
 8005b48:	d10e      	bne.n	8005b68 <printASCIIarray+0x1294>
 8005b4a:	2308      	movs	r3, #8
 8005b4c:	18fb      	adds	r3, r7, r3
 8005b4e:	191b      	adds	r3, r3, r4
 8005b50:	185b      	adds	r3, r3, r1
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	2208      	movs	r2, #8
 8005b56:	2108      	movs	r1, #8
 8005b58:	468c      	mov	ip, r1
 8005b5a:	44bc      	add	ip, r7
 8005b5c:	4462      	add	r2, ip
 8005b5e:	1812      	adds	r2, r2, r0
 8005b60:	6812      	ldr	r2, [r2, #0]
 8005b62:	18d3      	adds	r3, r2, r3
 8005b64:	2200      	movs	r2, #0
 8005b66:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x21){dataASCII[i]=0x01;}
 8005b68:	215a      	movs	r1, #90	; 0x5a
 8005b6a:	248c      	movs	r4, #140	; 0x8c
 8005b6c:	0064      	lsls	r4, r4, #1
 8005b6e:	2308      	movs	r3, #8
 8005b70:	18fb      	adds	r3, r7, r3
 8005b72:	191b      	adds	r3, r3, r4
 8005b74:	185b      	adds	r3, r3, r1
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	20c8      	movs	r0, #200	; 0xc8
 8005b7a:	0040      	lsls	r0, r0, #1
 8005b7c:	2208      	movs	r2, #8
 8005b7e:	2508      	movs	r5, #8
 8005b80:	46ac      	mov	ip, r5
 8005b82:	44bc      	add	ip, r7
 8005b84:	4462      	add	r2, ip
 8005b86:	1812      	adds	r2, r2, r0
 8005b88:	6812      	ldr	r2, [r2, #0]
 8005b8a:	18d3      	adds	r3, r2, r3
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	2b21      	cmp	r3, #33	; 0x21
 8005b90:	d10e      	bne.n	8005bb0 <printASCIIarray+0x12dc>
 8005b92:	2308      	movs	r3, #8
 8005b94:	18fb      	adds	r3, r7, r3
 8005b96:	191b      	adds	r3, r3, r4
 8005b98:	185b      	adds	r3, r3, r1
 8005b9a:	881b      	ldrh	r3, [r3, #0]
 8005b9c:	2208      	movs	r2, #8
 8005b9e:	2108      	movs	r1, #8
 8005ba0:	468c      	mov	ip, r1
 8005ba2:	44bc      	add	ip, r7
 8005ba4:	4462      	add	r2, ip
 8005ba6:	1812      	adds	r2, r2, r0
 8005ba8:	6812      	ldr	r2, [r2, #0]
 8005baa:	18d3      	adds	r3, r2, r3
 8005bac:	2201      	movs	r2, #1
 8005bae:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x25){dataASCII[i]=0x02;}
 8005bb0:	215a      	movs	r1, #90	; 0x5a
 8005bb2:	248c      	movs	r4, #140	; 0x8c
 8005bb4:	0064      	lsls	r4, r4, #1
 8005bb6:	2308      	movs	r3, #8
 8005bb8:	18fb      	adds	r3, r7, r3
 8005bba:	191b      	adds	r3, r3, r4
 8005bbc:	185b      	adds	r3, r3, r1
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	20c8      	movs	r0, #200	; 0xc8
 8005bc2:	0040      	lsls	r0, r0, #1
 8005bc4:	2208      	movs	r2, #8
 8005bc6:	2508      	movs	r5, #8
 8005bc8:	46ac      	mov	ip, r5
 8005bca:	44bc      	add	ip, r7
 8005bcc:	4462      	add	r2, ip
 8005bce:	1812      	adds	r2, r2, r0
 8005bd0:	6812      	ldr	r2, [r2, #0]
 8005bd2:	18d3      	adds	r3, r2, r3
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	2b25      	cmp	r3, #37	; 0x25
 8005bd8:	d10e      	bne.n	8005bf8 <printASCIIarray+0x1324>
 8005bda:	2308      	movs	r3, #8
 8005bdc:	18fb      	adds	r3, r7, r3
 8005bde:	191b      	adds	r3, r3, r4
 8005be0:	185b      	adds	r3, r3, r1
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	2208      	movs	r2, #8
 8005be6:	2108      	movs	r1, #8
 8005be8:	468c      	mov	ip, r1
 8005bea:	44bc      	add	ip, r7
 8005bec:	4462      	add	r2, ip
 8005bee:	1812      	adds	r2, r2, r0
 8005bf0:	6812      	ldr	r2, [r2, #0]
 8005bf2:	18d3      	adds	r3, r2, r3
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x28){dataASCII[i]=0x03;}
 8005bf8:	215a      	movs	r1, #90	; 0x5a
 8005bfa:	248c      	movs	r4, #140	; 0x8c
 8005bfc:	0064      	lsls	r4, r4, #1
 8005bfe:	2308      	movs	r3, #8
 8005c00:	18fb      	adds	r3, r7, r3
 8005c02:	191b      	adds	r3, r3, r4
 8005c04:	185b      	adds	r3, r3, r1
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	20c8      	movs	r0, #200	; 0xc8
 8005c0a:	0040      	lsls	r0, r0, #1
 8005c0c:	2208      	movs	r2, #8
 8005c0e:	2508      	movs	r5, #8
 8005c10:	46ac      	mov	ip, r5
 8005c12:	44bc      	add	ip, r7
 8005c14:	4462      	add	r2, ip
 8005c16:	1812      	adds	r2, r2, r0
 8005c18:	6812      	ldr	r2, [r2, #0]
 8005c1a:	18d3      	adds	r3, r2, r3
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	2b28      	cmp	r3, #40	; 0x28
 8005c20:	d10e      	bne.n	8005c40 <printASCIIarray+0x136c>
 8005c22:	2308      	movs	r3, #8
 8005c24:	18fb      	adds	r3, r7, r3
 8005c26:	191b      	adds	r3, r3, r4
 8005c28:	185b      	adds	r3, r3, r1
 8005c2a:	881b      	ldrh	r3, [r3, #0]
 8005c2c:	2208      	movs	r2, #8
 8005c2e:	2108      	movs	r1, #8
 8005c30:	468c      	mov	ip, r1
 8005c32:	44bc      	add	ip, r7
 8005c34:	4462      	add	r2, ip
 8005c36:	1812      	adds	r2, r2, r0
 8005c38:	6812      	ldr	r2, [r2, #0]
 8005c3a:	18d3      	adds	r3, r2, r3
 8005c3c:	2203      	movs	r2, #3
 8005c3e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x29){dataASCII[i]=0x04;}
 8005c40:	215a      	movs	r1, #90	; 0x5a
 8005c42:	248c      	movs	r4, #140	; 0x8c
 8005c44:	0064      	lsls	r4, r4, #1
 8005c46:	2308      	movs	r3, #8
 8005c48:	18fb      	adds	r3, r7, r3
 8005c4a:	191b      	adds	r3, r3, r4
 8005c4c:	185b      	adds	r3, r3, r1
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	20c8      	movs	r0, #200	; 0xc8
 8005c52:	0040      	lsls	r0, r0, #1
 8005c54:	2208      	movs	r2, #8
 8005c56:	2508      	movs	r5, #8
 8005c58:	46ac      	mov	ip, r5
 8005c5a:	44bc      	add	ip, r7
 8005c5c:	4462      	add	r2, ip
 8005c5e:	1812      	adds	r2, r2, r0
 8005c60:	6812      	ldr	r2, [r2, #0]
 8005c62:	18d3      	adds	r3, r2, r3
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	2b29      	cmp	r3, #41	; 0x29
 8005c68:	d10e      	bne.n	8005c88 <printASCIIarray+0x13b4>
 8005c6a:	2308      	movs	r3, #8
 8005c6c:	18fb      	adds	r3, r7, r3
 8005c6e:	191b      	adds	r3, r3, r4
 8005c70:	185b      	adds	r3, r3, r1
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	2208      	movs	r2, #8
 8005c76:	2108      	movs	r1, #8
 8005c78:	468c      	mov	ip, r1
 8005c7a:	44bc      	add	ip, r7
 8005c7c:	4462      	add	r2, ip
 8005c7e:	1812      	adds	r2, r2, r0
 8005c80:	6812      	ldr	r2, [r2, #0]
 8005c82:	18d3      	adds	r3, r2, r3
 8005c84:	2204      	movs	r2, #4
 8005c86:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2a){dataASCII[i]=0x05;}
 8005c88:	215a      	movs	r1, #90	; 0x5a
 8005c8a:	248c      	movs	r4, #140	; 0x8c
 8005c8c:	0064      	lsls	r4, r4, #1
 8005c8e:	2308      	movs	r3, #8
 8005c90:	18fb      	adds	r3, r7, r3
 8005c92:	191b      	adds	r3, r3, r4
 8005c94:	185b      	adds	r3, r3, r1
 8005c96:	881b      	ldrh	r3, [r3, #0]
 8005c98:	20c8      	movs	r0, #200	; 0xc8
 8005c9a:	0040      	lsls	r0, r0, #1
 8005c9c:	2208      	movs	r2, #8
 8005c9e:	2508      	movs	r5, #8
 8005ca0:	46ac      	mov	ip, r5
 8005ca2:	44bc      	add	ip, r7
 8005ca4:	4462      	add	r2, ip
 8005ca6:	1812      	adds	r2, r2, r0
 8005ca8:	6812      	ldr	r2, [r2, #0]
 8005caa:	18d3      	adds	r3, r2, r3
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	2b2a      	cmp	r3, #42	; 0x2a
 8005cb0:	d10e      	bne.n	8005cd0 <printASCIIarray+0x13fc>
 8005cb2:	2308      	movs	r3, #8
 8005cb4:	18fb      	adds	r3, r7, r3
 8005cb6:	191b      	adds	r3, r3, r4
 8005cb8:	185b      	adds	r3, r3, r1
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	2208      	movs	r2, #8
 8005cbe:	2108      	movs	r1, #8
 8005cc0:	468c      	mov	ip, r1
 8005cc2:	44bc      	add	ip, r7
 8005cc4:	4462      	add	r2, ip
 8005cc6:	1812      	adds	r2, r2, r0
 8005cc8:	6812      	ldr	r2, [r2, #0]
 8005cca:	18d3      	adds	r3, r2, r3
 8005ccc:	2205      	movs	r2, #5
 8005cce:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2b){dataASCII[i]=0x06;}
 8005cd0:	215a      	movs	r1, #90	; 0x5a
 8005cd2:	248c      	movs	r4, #140	; 0x8c
 8005cd4:	0064      	lsls	r4, r4, #1
 8005cd6:	2308      	movs	r3, #8
 8005cd8:	18fb      	adds	r3, r7, r3
 8005cda:	191b      	adds	r3, r3, r4
 8005cdc:	185b      	adds	r3, r3, r1
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	20c8      	movs	r0, #200	; 0xc8
 8005ce2:	0040      	lsls	r0, r0, #1
 8005ce4:	2208      	movs	r2, #8
 8005ce6:	2508      	movs	r5, #8
 8005ce8:	46ac      	mov	ip, r5
 8005cea:	44bc      	add	ip, r7
 8005cec:	4462      	add	r2, ip
 8005cee:	1812      	adds	r2, r2, r0
 8005cf0:	6812      	ldr	r2, [r2, #0]
 8005cf2:	18d3      	adds	r3, r2, r3
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b2b      	cmp	r3, #43	; 0x2b
 8005cf8:	d10e      	bne.n	8005d18 <printASCIIarray+0x1444>
 8005cfa:	2308      	movs	r3, #8
 8005cfc:	18fb      	adds	r3, r7, r3
 8005cfe:	191b      	adds	r3, r3, r4
 8005d00:	185b      	adds	r3, r3, r1
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	2208      	movs	r2, #8
 8005d06:	2108      	movs	r1, #8
 8005d08:	468c      	mov	ip, r1
 8005d0a:	44bc      	add	ip, r7
 8005d0c:	4462      	add	r2, ip
 8005d0e:	1812      	adds	r2, r2, r0
 8005d10:	6812      	ldr	r2, [r2, #0]
 8005d12:	18d3      	adds	r3, r2, r3
 8005d14:	2206      	movs	r2, #6
 8005d16:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2c){dataASCII[i]=0x07;}
 8005d18:	215a      	movs	r1, #90	; 0x5a
 8005d1a:	248c      	movs	r4, #140	; 0x8c
 8005d1c:	0064      	lsls	r4, r4, #1
 8005d1e:	2308      	movs	r3, #8
 8005d20:	18fb      	adds	r3, r7, r3
 8005d22:	191b      	adds	r3, r3, r4
 8005d24:	185b      	adds	r3, r3, r1
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	20c8      	movs	r0, #200	; 0xc8
 8005d2a:	0040      	lsls	r0, r0, #1
 8005d2c:	2208      	movs	r2, #8
 8005d2e:	2508      	movs	r5, #8
 8005d30:	46ac      	mov	ip, r5
 8005d32:	44bc      	add	ip, r7
 8005d34:	4462      	add	r2, ip
 8005d36:	1812      	adds	r2, r2, r0
 8005d38:	6812      	ldr	r2, [r2, #0]
 8005d3a:	18d3      	adds	r3, r2, r3
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b2c      	cmp	r3, #44	; 0x2c
 8005d40:	d10e      	bne.n	8005d60 <printASCIIarray+0x148c>
 8005d42:	2308      	movs	r3, #8
 8005d44:	18fb      	adds	r3, r7, r3
 8005d46:	191b      	adds	r3, r3, r4
 8005d48:	185b      	adds	r3, r3, r1
 8005d4a:	881b      	ldrh	r3, [r3, #0]
 8005d4c:	2208      	movs	r2, #8
 8005d4e:	2108      	movs	r1, #8
 8005d50:	468c      	mov	ip, r1
 8005d52:	44bc      	add	ip, r7
 8005d54:	4462      	add	r2, ip
 8005d56:	1812      	adds	r2, r2, r0
 8005d58:	6812      	ldr	r2, [r2, #0]
 8005d5a:	18d3      	adds	r3, r2, r3
 8005d5c:	2207      	movs	r2, #7
 8005d5e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2d){dataASCII[i]=0x08;}
 8005d60:	215a      	movs	r1, #90	; 0x5a
 8005d62:	248c      	movs	r4, #140	; 0x8c
 8005d64:	0064      	lsls	r4, r4, #1
 8005d66:	2308      	movs	r3, #8
 8005d68:	18fb      	adds	r3, r7, r3
 8005d6a:	191b      	adds	r3, r3, r4
 8005d6c:	185b      	adds	r3, r3, r1
 8005d6e:	881b      	ldrh	r3, [r3, #0]
 8005d70:	20c8      	movs	r0, #200	; 0xc8
 8005d72:	0040      	lsls	r0, r0, #1
 8005d74:	2208      	movs	r2, #8
 8005d76:	2508      	movs	r5, #8
 8005d78:	46ac      	mov	ip, r5
 8005d7a:	44bc      	add	ip, r7
 8005d7c:	4462      	add	r2, ip
 8005d7e:	1812      	adds	r2, r2, r0
 8005d80:	6812      	ldr	r2, [r2, #0]
 8005d82:	18d3      	adds	r3, r2, r3
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	2b2d      	cmp	r3, #45	; 0x2d
 8005d88:	d10e      	bne.n	8005da8 <printASCIIarray+0x14d4>
 8005d8a:	2308      	movs	r3, #8
 8005d8c:	18fb      	adds	r3, r7, r3
 8005d8e:	191b      	adds	r3, r3, r4
 8005d90:	185b      	adds	r3, r3, r1
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	2208      	movs	r2, #8
 8005d96:	2108      	movs	r1, #8
 8005d98:	468c      	mov	ip, r1
 8005d9a:	44bc      	add	ip, r7
 8005d9c:	4462      	add	r2, ip
 8005d9e:	1812      	adds	r2, r2, r0
 8005da0:	6812      	ldr	r2, [r2, #0]
 8005da2:	18d3      	adds	r3, r2, r3
 8005da4:	2208      	movs	r2, #8
 8005da6:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2e){dataASCII[i]=0x09;}
 8005da8:	215a      	movs	r1, #90	; 0x5a
 8005daa:	248c      	movs	r4, #140	; 0x8c
 8005dac:	0064      	lsls	r4, r4, #1
 8005dae:	2308      	movs	r3, #8
 8005db0:	18fb      	adds	r3, r7, r3
 8005db2:	191b      	adds	r3, r3, r4
 8005db4:	185b      	adds	r3, r3, r1
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	20c8      	movs	r0, #200	; 0xc8
 8005dba:	0040      	lsls	r0, r0, #1
 8005dbc:	2208      	movs	r2, #8
 8005dbe:	2508      	movs	r5, #8
 8005dc0:	46ac      	mov	ip, r5
 8005dc2:	44bc      	add	ip, r7
 8005dc4:	4462      	add	r2, ip
 8005dc6:	1812      	adds	r2, r2, r0
 8005dc8:	6812      	ldr	r2, [r2, #0]
 8005dca:	18d3      	adds	r3, r2, r3
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	2b2e      	cmp	r3, #46	; 0x2e
 8005dd0:	d10e      	bne.n	8005df0 <printASCIIarray+0x151c>
 8005dd2:	2308      	movs	r3, #8
 8005dd4:	18fb      	adds	r3, r7, r3
 8005dd6:	191b      	adds	r3, r3, r4
 8005dd8:	185b      	adds	r3, r3, r1
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	2208      	movs	r2, #8
 8005dde:	2108      	movs	r1, #8
 8005de0:	468c      	mov	ip, r1
 8005de2:	44bc      	add	ip, r7
 8005de4:	4462      	add	r2, ip
 8005de6:	1812      	adds	r2, r2, r0
 8005de8:	6812      	ldr	r2, [r2, #0]
 8005dea:	18d3      	adds	r3, r2, r3
 8005dec:	2209      	movs	r2, #9
 8005dee:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2f){dataASCII[i]=0x0a;}
 8005df0:	215a      	movs	r1, #90	; 0x5a
 8005df2:	248c      	movs	r4, #140	; 0x8c
 8005df4:	0064      	lsls	r4, r4, #1
 8005df6:	2308      	movs	r3, #8
 8005df8:	18fb      	adds	r3, r7, r3
 8005dfa:	191b      	adds	r3, r3, r4
 8005dfc:	185b      	adds	r3, r3, r1
 8005dfe:	881b      	ldrh	r3, [r3, #0]
 8005e00:	20c8      	movs	r0, #200	; 0xc8
 8005e02:	0040      	lsls	r0, r0, #1
 8005e04:	2208      	movs	r2, #8
 8005e06:	2508      	movs	r5, #8
 8005e08:	46ac      	mov	ip, r5
 8005e0a:	44bc      	add	ip, r7
 8005e0c:	4462      	add	r2, ip
 8005e0e:	1812      	adds	r2, r2, r0
 8005e10:	6812      	ldr	r2, [r2, #0]
 8005e12:	18d3      	adds	r3, r2, r3
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	2b2f      	cmp	r3, #47	; 0x2f
 8005e18:	d10e      	bne.n	8005e38 <printASCIIarray+0x1564>
 8005e1a:	2308      	movs	r3, #8
 8005e1c:	18fb      	adds	r3, r7, r3
 8005e1e:	191b      	adds	r3, r3, r4
 8005e20:	185b      	adds	r3, r3, r1
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	2208      	movs	r2, #8
 8005e26:	2108      	movs	r1, #8
 8005e28:	468c      	mov	ip, r1
 8005e2a:	44bc      	add	ip, r7
 8005e2c:	4462      	add	r2, ip
 8005e2e:	1812      	adds	r2, r2, r0
 8005e30:	6812      	ldr	r2, [r2, #0]
 8005e32:	18d3      	adds	r3, r2, r3
 8005e34:	220a      	movs	r2, #10
 8005e36:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x30){dataASCII[i]=0x0b;}
 8005e38:	215a      	movs	r1, #90	; 0x5a
 8005e3a:	248c      	movs	r4, #140	; 0x8c
 8005e3c:	0064      	lsls	r4, r4, #1
 8005e3e:	2308      	movs	r3, #8
 8005e40:	18fb      	adds	r3, r7, r3
 8005e42:	191b      	adds	r3, r3, r4
 8005e44:	185b      	adds	r3, r3, r1
 8005e46:	881b      	ldrh	r3, [r3, #0]
 8005e48:	20c8      	movs	r0, #200	; 0xc8
 8005e4a:	0040      	lsls	r0, r0, #1
 8005e4c:	2208      	movs	r2, #8
 8005e4e:	2508      	movs	r5, #8
 8005e50:	46ac      	mov	ip, r5
 8005e52:	44bc      	add	ip, r7
 8005e54:	4462      	add	r2, ip
 8005e56:	1812      	adds	r2, r2, r0
 8005e58:	6812      	ldr	r2, [r2, #0]
 8005e5a:	18d3      	adds	r3, r2, r3
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b30      	cmp	r3, #48	; 0x30
 8005e60:	d10e      	bne.n	8005e80 <printASCIIarray+0x15ac>
 8005e62:	2308      	movs	r3, #8
 8005e64:	18fb      	adds	r3, r7, r3
 8005e66:	191b      	adds	r3, r3, r4
 8005e68:	185b      	adds	r3, r3, r1
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	2208      	movs	r2, #8
 8005e6e:	2108      	movs	r1, #8
 8005e70:	468c      	mov	ip, r1
 8005e72:	44bc      	add	ip, r7
 8005e74:	4462      	add	r2, ip
 8005e76:	1812      	adds	r2, r2, r0
 8005e78:	6812      	ldr	r2, [r2, #0]
 8005e7a:	18d3      	adds	r3, r2, r3
 8005e7c:	220b      	movs	r2, #11
 8005e7e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x31){dataASCII[i]=0x0c;}
 8005e80:	215a      	movs	r1, #90	; 0x5a
 8005e82:	248c      	movs	r4, #140	; 0x8c
 8005e84:	0064      	lsls	r4, r4, #1
 8005e86:	2308      	movs	r3, #8
 8005e88:	18fb      	adds	r3, r7, r3
 8005e8a:	191b      	adds	r3, r3, r4
 8005e8c:	185b      	adds	r3, r3, r1
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	20c8      	movs	r0, #200	; 0xc8
 8005e92:	0040      	lsls	r0, r0, #1
 8005e94:	2208      	movs	r2, #8
 8005e96:	2508      	movs	r5, #8
 8005e98:	46ac      	mov	ip, r5
 8005e9a:	44bc      	add	ip, r7
 8005e9c:	4462      	add	r2, ip
 8005e9e:	1812      	adds	r2, r2, r0
 8005ea0:	6812      	ldr	r2, [r2, #0]
 8005ea2:	18d3      	adds	r3, r2, r3
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	2b31      	cmp	r3, #49	; 0x31
 8005ea8:	d10e      	bne.n	8005ec8 <printASCIIarray+0x15f4>
 8005eaa:	2308      	movs	r3, #8
 8005eac:	18fb      	adds	r3, r7, r3
 8005eae:	191b      	adds	r3, r3, r4
 8005eb0:	185b      	adds	r3, r3, r1
 8005eb2:	881b      	ldrh	r3, [r3, #0]
 8005eb4:	2208      	movs	r2, #8
 8005eb6:	2108      	movs	r1, #8
 8005eb8:	468c      	mov	ip, r1
 8005eba:	44bc      	add	ip, r7
 8005ebc:	4462      	add	r2, ip
 8005ebe:	1812      	adds	r2, r2, r0
 8005ec0:	6812      	ldr	r2, [r2, #0]
 8005ec2:	18d3      	adds	r3, r2, r3
 8005ec4:	220c      	movs	r2, #12
 8005ec6:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x32){dataASCII[i]=0x0d;}
 8005ec8:	215a      	movs	r1, #90	; 0x5a
 8005eca:	248c      	movs	r4, #140	; 0x8c
 8005ecc:	0064      	lsls	r4, r4, #1
 8005ece:	2308      	movs	r3, #8
 8005ed0:	18fb      	adds	r3, r7, r3
 8005ed2:	191b      	adds	r3, r3, r4
 8005ed4:	185b      	adds	r3, r3, r1
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	20c8      	movs	r0, #200	; 0xc8
 8005eda:	0040      	lsls	r0, r0, #1
 8005edc:	2208      	movs	r2, #8
 8005ede:	2508      	movs	r5, #8
 8005ee0:	46ac      	mov	ip, r5
 8005ee2:	44bc      	add	ip, r7
 8005ee4:	4462      	add	r2, ip
 8005ee6:	1812      	adds	r2, r2, r0
 8005ee8:	6812      	ldr	r2, [r2, #0]
 8005eea:	18d3      	adds	r3, r2, r3
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b32      	cmp	r3, #50	; 0x32
 8005ef0:	d10e      	bne.n	8005f10 <printASCIIarray+0x163c>
 8005ef2:	2308      	movs	r3, #8
 8005ef4:	18fb      	adds	r3, r7, r3
 8005ef6:	191b      	adds	r3, r3, r4
 8005ef8:	185b      	adds	r3, r3, r1
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	2208      	movs	r2, #8
 8005efe:	2108      	movs	r1, #8
 8005f00:	468c      	mov	ip, r1
 8005f02:	44bc      	add	ip, r7
 8005f04:	4462      	add	r2, ip
 8005f06:	1812      	adds	r2, r2, r0
 8005f08:	6812      	ldr	r2, [r2, #0]
 8005f0a:	18d3      	adds	r3, r2, r3
 8005f0c:	220d      	movs	r2, #13
 8005f0e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x33){dataASCII[i]=0x0e;}
 8005f10:	215a      	movs	r1, #90	; 0x5a
 8005f12:	248c      	movs	r4, #140	; 0x8c
 8005f14:	0064      	lsls	r4, r4, #1
 8005f16:	2308      	movs	r3, #8
 8005f18:	18fb      	adds	r3, r7, r3
 8005f1a:	191b      	adds	r3, r3, r4
 8005f1c:	185b      	adds	r3, r3, r1
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	20c8      	movs	r0, #200	; 0xc8
 8005f22:	0040      	lsls	r0, r0, #1
 8005f24:	2208      	movs	r2, #8
 8005f26:	2508      	movs	r5, #8
 8005f28:	46ac      	mov	ip, r5
 8005f2a:	44bc      	add	ip, r7
 8005f2c:	4462      	add	r2, ip
 8005f2e:	1812      	adds	r2, r2, r0
 8005f30:	6812      	ldr	r2, [r2, #0]
 8005f32:	18d3      	adds	r3, r2, r3
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	2b33      	cmp	r3, #51	; 0x33
 8005f38:	d10e      	bne.n	8005f58 <printASCIIarray+0x1684>
 8005f3a:	2308      	movs	r3, #8
 8005f3c:	18fb      	adds	r3, r7, r3
 8005f3e:	191b      	adds	r3, r3, r4
 8005f40:	185b      	adds	r3, r3, r1
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	2208      	movs	r2, #8
 8005f46:	2108      	movs	r1, #8
 8005f48:	468c      	mov	ip, r1
 8005f4a:	44bc      	add	ip, r7
 8005f4c:	4462      	add	r2, ip
 8005f4e:	1812      	adds	r2, r2, r0
 8005f50:	6812      	ldr	r2, [r2, #0]
 8005f52:	18d3      	adds	r3, r2, r3
 8005f54:	220e      	movs	r2, #14
 8005f56:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x34){dataASCII[i]=0x0f;}
 8005f58:	215a      	movs	r1, #90	; 0x5a
 8005f5a:	248c      	movs	r4, #140	; 0x8c
 8005f5c:	0064      	lsls	r4, r4, #1
 8005f5e:	2308      	movs	r3, #8
 8005f60:	18fb      	adds	r3, r7, r3
 8005f62:	191b      	adds	r3, r3, r4
 8005f64:	185b      	adds	r3, r3, r1
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	20c8      	movs	r0, #200	; 0xc8
 8005f6a:	0040      	lsls	r0, r0, #1
 8005f6c:	2208      	movs	r2, #8
 8005f6e:	2508      	movs	r5, #8
 8005f70:	46ac      	mov	ip, r5
 8005f72:	44bc      	add	ip, r7
 8005f74:	4462      	add	r2, ip
 8005f76:	1812      	adds	r2, r2, r0
 8005f78:	6812      	ldr	r2, [r2, #0]
 8005f7a:	18d3      	adds	r3, r2, r3
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	2b34      	cmp	r3, #52	; 0x34
 8005f80:	d10e      	bne.n	8005fa0 <printASCIIarray+0x16cc>
 8005f82:	2308      	movs	r3, #8
 8005f84:	18fb      	adds	r3, r7, r3
 8005f86:	191b      	adds	r3, r3, r4
 8005f88:	185b      	adds	r3, r3, r1
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	2208      	movs	r2, #8
 8005f8e:	2108      	movs	r1, #8
 8005f90:	468c      	mov	ip, r1
 8005f92:	44bc      	add	ip, r7
 8005f94:	4462      	add	r2, ip
 8005f96:	1812      	adds	r2, r2, r0
 8005f98:	6812      	ldr	r2, [r2, #0]
 8005f9a:	18d3      	adds	r3, r2, r3
 8005f9c:	220f      	movs	r2, #15
 8005f9e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x35){dataASCII[i]=0x10;}
 8005fa0:	215a      	movs	r1, #90	; 0x5a
 8005fa2:	248c      	movs	r4, #140	; 0x8c
 8005fa4:	0064      	lsls	r4, r4, #1
 8005fa6:	2308      	movs	r3, #8
 8005fa8:	18fb      	adds	r3, r7, r3
 8005faa:	191b      	adds	r3, r3, r4
 8005fac:	185b      	adds	r3, r3, r1
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	20c8      	movs	r0, #200	; 0xc8
 8005fb2:	0040      	lsls	r0, r0, #1
 8005fb4:	2208      	movs	r2, #8
 8005fb6:	2508      	movs	r5, #8
 8005fb8:	46ac      	mov	ip, r5
 8005fba:	44bc      	add	ip, r7
 8005fbc:	4462      	add	r2, ip
 8005fbe:	1812      	adds	r2, r2, r0
 8005fc0:	6812      	ldr	r2, [r2, #0]
 8005fc2:	18d3      	adds	r3, r2, r3
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	2b35      	cmp	r3, #53	; 0x35
 8005fc8:	d10e      	bne.n	8005fe8 <printASCIIarray+0x1714>
 8005fca:	2308      	movs	r3, #8
 8005fcc:	18fb      	adds	r3, r7, r3
 8005fce:	191b      	adds	r3, r3, r4
 8005fd0:	185b      	adds	r3, r3, r1
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	2208      	movs	r2, #8
 8005fd6:	2108      	movs	r1, #8
 8005fd8:	468c      	mov	ip, r1
 8005fda:	44bc      	add	ip, r7
 8005fdc:	4462      	add	r2, ip
 8005fde:	1812      	adds	r2, r2, r0
 8005fe0:	6812      	ldr	r2, [r2, #0]
 8005fe2:	18d3      	adds	r3, r2, r3
 8005fe4:	2210      	movs	r2, #16
 8005fe6:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x36){dataASCII[i]=0x11;}
 8005fe8:	215a      	movs	r1, #90	; 0x5a
 8005fea:	248c      	movs	r4, #140	; 0x8c
 8005fec:	0064      	lsls	r4, r4, #1
 8005fee:	2308      	movs	r3, #8
 8005ff0:	18fb      	adds	r3, r7, r3
 8005ff2:	191b      	adds	r3, r3, r4
 8005ff4:	185b      	adds	r3, r3, r1
 8005ff6:	881b      	ldrh	r3, [r3, #0]
 8005ff8:	20c8      	movs	r0, #200	; 0xc8
 8005ffa:	0040      	lsls	r0, r0, #1
 8005ffc:	2208      	movs	r2, #8
 8005ffe:	2508      	movs	r5, #8
 8006000:	46ac      	mov	ip, r5
 8006002:	44bc      	add	ip, r7
 8006004:	4462      	add	r2, ip
 8006006:	1812      	adds	r2, r2, r0
 8006008:	6812      	ldr	r2, [r2, #0]
 800600a:	18d3      	adds	r3, r2, r3
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b36      	cmp	r3, #54	; 0x36
 8006010:	d10e      	bne.n	8006030 <printASCIIarray+0x175c>
 8006012:	2308      	movs	r3, #8
 8006014:	18fb      	adds	r3, r7, r3
 8006016:	191b      	adds	r3, r3, r4
 8006018:	185b      	adds	r3, r3, r1
 800601a:	881b      	ldrh	r3, [r3, #0]
 800601c:	2208      	movs	r2, #8
 800601e:	2108      	movs	r1, #8
 8006020:	468c      	mov	ip, r1
 8006022:	44bc      	add	ip, r7
 8006024:	4462      	add	r2, ip
 8006026:	1812      	adds	r2, r2, r0
 8006028:	6812      	ldr	r2, [r2, #0]
 800602a:	18d3      	adds	r3, r2, r3
 800602c:	2211      	movs	r2, #17
 800602e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x37){dataASCII[i]=0x12;}
 8006030:	215a      	movs	r1, #90	; 0x5a
 8006032:	248c      	movs	r4, #140	; 0x8c
 8006034:	0064      	lsls	r4, r4, #1
 8006036:	2308      	movs	r3, #8
 8006038:	18fb      	adds	r3, r7, r3
 800603a:	191b      	adds	r3, r3, r4
 800603c:	185b      	adds	r3, r3, r1
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	20c8      	movs	r0, #200	; 0xc8
 8006042:	0040      	lsls	r0, r0, #1
 8006044:	2208      	movs	r2, #8
 8006046:	2508      	movs	r5, #8
 8006048:	46ac      	mov	ip, r5
 800604a:	44bc      	add	ip, r7
 800604c:	4462      	add	r2, ip
 800604e:	1812      	adds	r2, r2, r0
 8006050:	6812      	ldr	r2, [r2, #0]
 8006052:	18d3      	adds	r3, r2, r3
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	2b37      	cmp	r3, #55	; 0x37
 8006058:	d10e      	bne.n	8006078 <printASCIIarray+0x17a4>
 800605a:	2308      	movs	r3, #8
 800605c:	18fb      	adds	r3, r7, r3
 800605e:	191b      	adds	r3, r3, r4
 8006060:	185b      	adds	r3, r3, r1
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	2208      	movs	r2, #8
 8006066:	2108      	movs	r1, #8
 8006068:	468c      	mov	ip, r1
 800606a:	44bc      	add	ip, r7
 800606c:	4462      	add	r2, ip
 800606e:	1812      	adds	r2, r2, r0
 8006070:	6812      	ldr	r2, [r2, #0]
 8006072:	18d3      	adds	r3, r2, r3
 8006074:	2212      	movs	r2, #18
 8006076:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x38){dataASCII[i]=0x13;}
 8006078:	215a      	movs	r1, #90	; 0x5a
 800607a:	248c      	movs	r4, #140	; 0x8c
 800607c:	0064      	lsls	r4, r4, #1
 800607e:	2308      	movs	r3, #8
 8006080:	18fb      	adds	r3, r7, r3
 8006082:	191b      	adds	r3, r3, r4
 8006084:	185b      	adds	r3, r3, r1
 8006086:	881b      	ldrh	r3, [r3, #0]
 8006088:	20c8      	movs	r0, #200	; 0xc8
 800608a:	0040      	lsls	r0, r0, #1
 800608c:	2208      	movs	r2, #8
 800608e:	2508      	movs	r5, #8
 8006090:	46ac      	mov	ip, r5
 8006092:	44bc      	add	ip, r7
 8006094:	4462      	add	r2, ip
 8006096:	1812      	adds	r2, r2, r0
 8006098:	6812      	ldr	r2, [r2, #0]
 800609a:	18d3      	adds	r3, r2, r3
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	2b38      	cmp	r3, #56	; 0x38
 80060a0:	d10e      	bne.n	80060c0 <printASCIIarray+0x17ec>
 80060a2:	2308      	movs	r3, #8
 80060a4:	18fb      	adds	r3, r7, r3
 80060a6:	191b      	adds	r3, r3, r4
 80060a8:	185b      	adds	r3, r3, r1
 80060aa:	881b      	ldrh	r3, [r3, #0]
 80060ac:	2208      	movs	r2, #8
 80060ae:	2108      	movs	r1, #8
 80060b0:	468c      	mov	ip, r1
 80060b2:	44bc      	add	ip, r7
 80060b4:	4462      	add	r2, ip
 80060b6:	1812      	adds	r2, r2, r0
 80060b8:	6812      	ldr	r2, [r2, #0]
 80060ba:	18d3      	adds	r3, r2, r3
 80060bc:	2213      	movs	r2, #19
 80060be:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x39){dataASCII[i]=0x14;}
 80060c0:	215a      	movs	r1, #90	; 0x5a
 80060c2:	248c      	movs	r4, #140	; 0x8c
 80060c4:	0064      	lsls	r4, r4, #1
 80060c6:	2308      	movs	r3, #8
 80060c8:	18fb      	adds	r3, r7, r3
 80060ca:	191b      	adds	r3, r3, r4
 80060cc:	185b      	adds	r3, r3, r1
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	20c8      	movs	r0, #200	; 0xc8
 80060d2:	0040      	lsls	r0, r0, #1
 80060d4:	2208      	movs	r2, #8
 80060d6:	2508      	movs	r5, #8
 80060d8:	46ac      	mov	ip, r5
 80060da:	44bc      	add	ip, r7
 80060dc:	4462      	add	r2, ip
 80060de:	1812      	adds	r2, r2, r0
 80060e0:	6812      	ldr	r2, [r2, #0]
 80060e2:	18d3      	adds	r3, r2, r3
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	2b39      	cmp	r3, #57	; 0x39
 80060e8:	d10e      	bne.n	8006108 <printASCIIarray+0x1834>
 80060ea:	2308      	movs	r3, #8
 80060ec:	18fb      	adds	r3, r7, r3
 80060ee:	191b      	adds	r3, r3, r4
 80060f0:	185b      	adds	r3, r3, r1
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	2208      	movs	r2, #8
 80060f6:	2108      	movs	r1, #8
 80060f8:	468c      	mov	ip, r1
 80060fa:	44bc      	add	ip, r7
 80060fc:	4462      	add	r2, ip
 80060fe:	1812      	adds	r2, r2, r0
 8006100:	6812      	ldr	r2, [r2, #0]
 8006102:	18d3      	adds	r3, r2, r3
 8006104:	2214      	movs	r2, #20
 8006106:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3a){dataASCII[i]=0x15;}
 8006108:	215a      	movs	r1, #90	; 0x5a
 800610a:	248c      	movs	r4, #140	; 0x8c
 800610c:	0064      	lsls	r4, r4, #1
 800610e:	2308      	movs	r3, #8
 8006110:	18fb      	adds	r3, r7, r3
 8006112:	191b      	adds	r3, r3, r4
 8006114:	185b      	adds	r3, r3, r1
 8006116:	881b      	ldrh	r3, [r3, #0]
 8006118:	20c8      	movs	r0, #200	; 0xc8
 800611a:	0040      	lsls	r0, r0, #1
 800611c:	2208      	movs	r2, #8
 800611e:	2508      	movs	r5, #8
 8006120:	46ac      	mov	ip, r5
 8006122:	44bc      	add	ip, r7
 8006124:	4462      	add	r2, ip
 8006126:	1812      	adds	r2, r2, r0
 8006128:	6812      	ldr	r2, [r2, #0]
 800612a:	18d3      	adds	r3, r2, r3
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	2b3a      	cmp	r3, #58	; 0x3a
 8006130:	d10e      	bne.n	8006150 <printASCIIarray+0x187c>
 8006132:	2308      	movs	r3, #8
 8006134:	18fb      	adds	r3, r7, r3
 8006136:	191b      	adds	r3, r3, r4
 8006138:	185b      	adds	r3, r3, r1
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	2208      	movs	r2, #8
 800613e:	2108      	movs	r1, #8
 8006140:	468c      	mov	ip, r1
 8006142:	44bc      	add	ip, r7
 8006144:	4462      	add	r2, ip
 8006146:	1812      	adds	r2, r2, r0
 8006148:	6812      	ldr	r2, [r2, #0]
 800614a:	18d3      	adds	r3, r2, r3
 800614c:	2215      	movs	r2, #21
 800614e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3b){dataASCII[i]=0x16;}
 8006150:	215a      	movs	r1, #90	; 0x5a
 8006152:	248c      	movs	r4, #140	; 0x8c
 8006154:	0064      	lsls	r4, r4, #1
 8006156:	2308      	movs	r3, #8
 8006158:	18fb      	adds	r3, r7, r3
 800615a:	191b      	adds	r3, r3, r4
 800615c:	185b      	adds	r3, r3, r1
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	20c8      	movs	r0, #200	; 0xc8
 8006162:	0040      	lsls	r0, r0, #1
 8006164:	2208      	movs	r2, #8
 8006166:	2508      	movs	r5, #8
 8006168:	46ac      	mov	ip, r5
 800616a:	44bc      	add	ip, r7
 800616c:	4462      	add	r2, ip
 800616e:	1812      	adds	r2, r2, r0
 8006170:	6812      	ldr	r2, [r2, #0]
 8006172:	18d3      	adds	r3, r2, r3
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	2b3b      	cmp	r3, #59	; 0x3b
 8006178:	d10e      	bne.n	8006198 <printASCIIarray+0x18c4>
 800617a:	2308      	movs	r3, #8
 800617c:	18fb      	adds	r3, r7, r3
 800617e:	191b      	adds	r3, r3, r4
 8006180:	185b      	adds	r3, r3, r1
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	2208      	movs	r2, #8
 8006186:	2108      	movs	r1, #8
 8006188:	468c      	mov	ip, r1
 800618a:	44bc      	add	ip, r7
 800618c:	4462      	add	r2, ip
 800618e:	1812      	adds	r2, r2, r0
 8006190:	6812      	ldr	r2, [r2, #0]
 8006192:	18d3      	adds	r3, r2, r3
 8006194:	2216      	movs	r2, #22
 8006196:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3c){dataASCII[i]=0x17;}
 8006198:	215a      	movs	r1, #90	; 0x5a
 800619a:	248c      	movs	r4, #140	; 0x8c
 800619c:	0064      	lsls	r4, r4, #1
 800619e:	2308      	movs	r3, #8
 80061a0:	18fb      	adds	r3, r7, r3
 80061a2:	191b      	adds	r3, r3, r4
 80061a4:	185b      	adds	r3, r3, r1
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	20c8      	movs	r0, #200	; 0xc8
 80061aa:	0040      	lsls	r0, r0, #1
 80061ac:	2208      	movs	r2, #8
 80061ae:	2508      	movs	r5, #8
 80061b0:	46ac      	mov	ip, r5
 80061b2:	44bc      	add	ip, r7
 80061b4:	4462      	add	r2, ip
 80061b6:	1812      	adds	r2, r2, r0
 80061b8:	6812      	ldr	r2, [r2, #0]
 80061ba:	18d3      	adds	r3, r2, r3
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	2b3c      	cmp	r3, #60	; 0x3c
 80061c0:	d10e      	bne.n	80061e0 <printASCIIarray+0x190c>
 80061c2:	2308      	movs	r3, #8
 80061c4:	18fb      	adds	r3, r7, r3
 80061c6:	191b      	adds	r3, r3, r4
 80061c8:	185b      	adds	r3, r3, r1
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	2208      	movs	r2, #8
 80061ce:	2108      	movs	r1, #8
 80061d0:	468c      	mov	ip, r1
 80061d2:	44bc      	add	ip, r7
 80061d4:	4462      	add	r2, ip
 80061d6:	1812      	adds	r2, r2, r0
 80061d8:	6812      	ldr	r2, [r2, #0]
 80061da:	18d3      	adds	r3, r2, r3
 80061dc:	2217      	movs	r2, #23
 80061de:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3d){dataASCII[i]=0x18;}
 80061e0:	215a      	movs	r1, #90	; 0x5a
 80061e2:	248c      	movs	r4, #140	; 0x8c
 80061e4:	0064      	lsls	r4, r4, #1
 80061e6:	2308      	movs	r3, #8
 80061e8:	18fb      	adds	r3, r7, r3
 80061ea:	191b      	adds	r3, r3, r4
 80061ec:	185b      	adds	r3, r3, r1
 80061ee:	881b      	ldrh	r3, [r3, #0]
 80061f0:	20c8      	movs	r0, #200	; 0xc8
 80061f2:	0040      	lsls	r0, r0, #1
 80061f4:	2208      	movs	r2, #8
 80061f6:	2508      	movs	r5, #8
 80061f8:	46ac      	mov	ip, r5
 80061fa:	44bc      	add	ip, r7
 80061fc:	4462      	add	r2, ip
 80061fe:	1812      	adds	r2, r2, r0
 8006200:	6812      	ldr	r2, [r2, #0]
 8006202:	18d3      	adds	r3, r2, r3
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	2b3d      	cmp	r3, #61	; 0x3d
 8006208:	d10e      	bne.n	8006228 <printASCIIarray+0x1954>
 800620a:	2308      	movs	r3, #8
 800620c:	18fb      	adds	r3, r7, r3
 800620e:	191b      	adds	r3, r3, r4
 8006210:	185b      	adds	r3, r3, r1
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	2208      	movs	r2, #8
 8006216:	2108      	movs	r1, #8
 8006218:	468c      	mov	ip, r1
 800621a:	44bc      	add	ip, r7
 800621c:	4462      	add	r2, ip
 800621e:	1812      	adds	r2, r2, r0
 8006220:	6812      	ldr	r2, [r2, #0]
 8006222:	18d3      	adds	r3, r2, r3
 8006224:	2218      	movs	r2, #24
 8006226:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3e){dataASCII[i]=0x19;}
 8006228:	215a      	movs	r1, #90	; 0x5a
 800622a:	248c      	movs	r4, #140	; 0x8c
 800622c:	0064      	lsls	r4, r4, #1
 800622e:	2308      	movs	r3, #8
 8006230:	18fb      	adds	r3, r7, r3
 8006232:	191b      	adds	r3, r3, r4
 8006234:	185b      	adds	r3, r3, r1
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	20c8      	movs	r0, #200	; 0xc8
 800623a:	0040      	lsls	r0, r0, #1
 800623c:	2208      	movs	r2, #8
 800623e:	2508      	movs	r5, #8
 8006240:	46ac      	mov	ip, r5
 8006242:	44bc      	add	ip, r7
 8006244:	4462      	add	r2, ip
 8006246:	1812      	adds	r2, r2, r0
 8006248:	6812      	ldr	r2, [r2, #0]
 800624a:	18d3      	adds	r3, r2, r3
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	2b3e      	cmp	r3, #62	; 0x3e
 8006250:	d10e      	bne.n	8006270 <printASCIIarray+0x199c>
 8006252:	2308      	movs	r3, #8
 8006254:	18fb      	adds	r3, r7, r3
 8006256:	191b      	adds	r3, r3, r4
 8006258:	185b      	adds	r3, r3, r1
 800625a:	881b      	ldrh	r3, [r3, #0]
 800625c:	2208      	movs	r2, #8
 800625e:	2108      	movs	r1, #8
 8006260:	468c      	mov	ip, r1
 8006262:	44bc      	add	ip, r7
 8006264:	4462      	add	r2, ip
 8006266:	1812      	adds	r2, r2, r0
 8006268:	6812      	ldr	r2, [r2, #0]
 800626a:	18d3      	adds	r3, r2, r3
 800626c:	2219      	movs	r2, #25
 800626e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3f){dataASCII[i]=0x1a;}
 8006270:	215a      	movs	r1, #90	; 0x5a
 8006272:	248c      	movs	r4, #140	; 0x8c
 8006274:	0064      	lsls	r4, r4, #1
 8006276:	2308      	movs	r3, #8
 8006278:	18fb      	adds	r3, r7, r3
 800627a:	191b      	adds	r3, r3, r4
 800627c:	185b      	adds	r3, r3, r1
 800627e:	881b      	ldrh	r3, [r3, #0]
 8006280:	20c8      	movs	r0, #200	; 0xc8
 8006282:	0040      	lsls	r0, r0, #1
 8006284:	2208      	movs	r2, #8
 8006286:	2508      	movs	r5, #8
 8006288:	46ac      	mov	ip, r5
 800628a:	44bc      	add	ip, r7
 800628c:	4462      	add	r2, ip
 800628e:	1812      	adds	r2, r2, r0
 8006290:	6812      	ldr	r2, [r2, #0]
 8006292:	18d3      	adds	r3, r2, r3
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	2b3f      	cmp	r3, #63	; 0x3f
 8006298:	d10e      	bne.n	80062b8 <printASCIIarray+0x19e4>
 800629a:	2308      	movs	r3, #8
 800629c:	18fb      	adds	r3, r7, r3
 800629e:	191b      	adds	r3, r3, r4
 80062a0:	185b      	adds	r3, r3, r1
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	2208      	movs	r2, #8
 80062a6:	2108      	movs	r1, #8
 80062a8:	468c      	mov	ip, r1
 80062aa:	44bc      	add	ip, r7
 80062ac:	4462      	add	r2, ip
 80062ae:	1812      	adds	r2, r2, r0
 80062b0:	6812      	ldr	r2, [r2, #0]
 80062b2:	18d3      	adds	r3, r2, r3
 80062b4:	221a      	movs	r2, #26
 80062b6:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5b){dataASCII[i]=0x1b;}
 80062b8:	215a      	movs	r1, #90	; 0x5a
 80062ba:	248c      	movs	r4, #140	; 0x8c
 80062bc:	0064      	lsls	r4, r4, #1
 80062be:	2308      	movs	r3, #8
 80062c0:	18fb      	adds	r3, r7, r3
 80062c2:	191b      	adds	r3, r3, r4
 80062c4:	185b      	adds	r3, r3, r1
 80062c6:	881b      	ldrh	r3, [r3, #0]
 80062c8:	20c8      	movs	r0, #200	; 0xc8
 80062ca:	0040      	lsls	r0, r0, #1
 80062cc:	2208      	movs	r2, #8
 80062ce:	2508      	movs	r5, #8
 80062d0:	46ac      	mov	ip, r5
 80062d2:	44bc      	add	ip, r7
 80062d4:	4462      	add	r2, ip
 80062d6:	1812      	adds	r2, r2, r0
 80062d8:	6812      	ldr	r2, [r2, #0]
 80062da:	18d3      	adds	r3, r2, r3
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	2b5b      	cmp	r3, #91	; 0x5b
 80062e0:	d10e      	bne.n	8006300 <printASCIIarray+0x1a2c>
 80062e2:	2308      	movs	r3, #8
 80062e4:	18fb      	adds	r3, r7, r3
 80062e6:	191b      	adds	r3, r3, r4
 80062e8:	185b      	adds	r3, r3, r1
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	2208      	movs	r2, #8
 80062ee:	2108      	movs	r1, #8
 80062f0:	468c      	mov	ip, r1
 80062f2:	44bc      	add	ip, r7
 80062f4:	4462      	add	r2, ip
 80062f6:	1812      	adds	r2, r2, r0
 80062f8:	6812      	ldr	r2, [r2, #0]
 80062fa:	18d3      	adds	r3, r2, r3
 80062fc:	221b      	movs	r2, #27
 80062fe:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5c){dataASCII[i]=0x1c;}
 8006300:	215a      	movs	r1, #90	; 0x5a
 8006302:	248c      	movs	r4, #140	; 0x8c
 8006304:	0064      	lsls	r4, r4, #1
 8006306:	2308      	movs	r3, #8
 8006308:	18fb      	adds	r3, r7, r3
 800630a:	191b      	adds	r3, r3, r4
 800630c:	185b      	adds	r3, r3, r1
 800630e:	881b      	ldrh	r3, [r3, #0]
 8006310:	20c8      	movs	r0, #200	; 0xc8
 8006312:	0040      	lsls	r0, r0, #1
 8006314:	2208      	movs	r2, #8
 8006316:	2508      	movs	r5, #8
 8006318:	46ac      	mov	ip, r5
 800631a:	44bc      	add	ip, r7
 800631c:	4462      	add	r2, ip
 800631e:	1812      	adds	r2, r2, r0
 8006320:	6812      	ldr	r2, [r2, #0]
 8006322:	18d3      	adds	r3, r2, r3
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	2b5c      	cmp	r3, #92	; 0x5c
 8006328:	d10e      	bne.n	8006348 <printASCIIarray+0x1a74>
 800632a:	2308      	movs	r3, #8
 800632c:	18fb      	adds	r3, r7, r3
 800632e:	191b      	adds	r3, r3, r4
 8006330:	185b      	adds	r3, r3, r1
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	2208      	movs	r2, #8
 8006336:	2108      	movs	r1, #8
 8006338:	468c      	mov	ip, r1
 800633a:	44bc      	add	ip, r7
 800633c:	4462      	add	r2, ip
 800633e:	1812      	adds	r2, r2, r0
 8006340:	6812      	ldr	r2, [r2, #0]
 8006342:	18d3      	adds	r3, r2, r3
 8006344:	221c      	movs	r2, #28
 8006346:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5d){dataASCII[i]=0x1d;}
 8006348:	215a      	movs	r1, #90	; 0x5a
 800634a:	248c      	movs	r4, #140	; 0x8c
 800634c:	0064      	lsls	r4, r4, #1
 800634e:	2308      	movs	r3, #8
 8006350:	18fb      	adds	r3, r7, r3
 8006352:	191b      	adds	r3, r3, r4
 8006354:	185b      	adds	r3, r3, r1
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	20c8      	movs	r0, #200	; 0xc8
 800635a:	0040      	lsls	r0, r0, #1
 800635c:	2208      	movs	r2, #8
 800635e:	2508      	movs	r5, #8
 8006360:	46ac      	mov	ip, r5
 8006362:	44bc      	add	ip, r7
 8006364:	4462      	add	r2, ip
 8006366:	1812      	adds	r2, r2, r0
 8006368:	6812      	ldr	r2, [r2, #0]
 800636a:	18d3      	adds	r3, r2, r3
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	2b5d      	cmp	r3, #93	; 0x5d
 8006370:	d10e      	bne.n	8006390 <printASCIIarray+0x1abc>
 8006372:	2308      	movs	r3, #8
 8006374:	18fb      	adds	r3, r7, r3
 8006376:	191b      	adds	r3, r3, r4
 8006378:	185b      	adds	r3, r3, r1
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	2208      	movs	r2, #8
 800637e:	2108      	movs	r1, #8
 8006380:	468c      	mov	ip, r1
 8006382:	44bc      	add	ip, r7
 8006384:	4462      	add	r2, ip
 8006386:	1812      	adds	r2, r2, r0
 8006388:	6812      	ldr	r2, [r2, #0]
 800638a:	18d3      	adds	r3, r2, r3
 800638c:	221d      	movs	r2, #29
 800638e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5f){dataASCII[i]=0x1e;}
 8006390:	215a      	movs	r1, #90	; 0x5a
 8006392:	248c      	movs	r4, #140	; 0x8c
 8006394:	0064      	lsls	r4, r4, #1
 8006396:	2308      	movs	r3, #8
 8006398:	18fb      	adds	r3, r7, r3
 800639a:	191b      	adds	r3, r3, r4
 800639c:	185b      	adds	r3, r3, r1
 800639e:	881b      	ldrh	r3, [r3, #0]
 80063a0:	20c8      	movs	r0, #200	; 0xc8
 80063a2:	0040      	lsls	r0, r0, #1
 80063a4:	2208      	movs	r2, #8
 80063a6:	2508      	movs	r5, #8
 80063a8:	46ac      	mov	ip, r5
 80063aa:	44bc      	add	ip, r7
 80063ac:	4462      	add	r2, ip
 80063ae:	1812      	adds	r2, r2, r0
 80063b0:	6812      	ldr	r2, [r2, #0]
 80063b2:	18d3      	adds	r3, r2, r3
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	2b5f      	cmp	r3, #95	; 0x5f
 80063b8:	d10e      	bne.n	80063d8 <printASCIIarray+0x1b04>
 80063ba:	2308      	movs	r3, #8
 80063bc:	18fb      	adds	r3, r7, r3
 80063be:	191b      	adds	r3, r3, r4
 80063c0:	185b      	adds	r3, r3, r1
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	2208      	movs	r2, #8
 80063c6:	2108      	movs	r1, #8
 80063c8:	468c      	mov	ip, r1
 80063ca:	44bc      	add	ip, r7
 80063cc:	4462      	add	r2, ip
 80063ce:	1812      	adds	r2, r2, r0
 80063d0:	6812      	ldr	r2, [r2, #0]
 80063d2:	18d3      	adds	r3, r2, r3
 80063d4:	221e      	movs	r2, #30
 80063d6:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x7c){dataASCII[i]=0x1f;}
 80063d8:	215a      	movs	r1, #90	; 0x5a
 80063da:	248c      	movs	r4, #140	; 0x8c
 80063dc:	0064      	lsls	r4, r4, #1
 80063de:	2308      	movs	r3, #8
 80063e0:	18fb      	adds	r3, r7, r3
 80063e2:	191b      	adds	r3, r3, r4
 80063e4:	185b      	adds	r3, r3, r1
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	20c8      	movs	r0, #200	; 0xc8
 80063ea:	0040      	lsls	r0, r0, #1
 80063ec:	2208      	movs	r2, #8
 80063ee:	2508      	movs	r5, #8
 80063f0:	46ac      	mov	ip, r5
 80063f2:	44bc      	add	ip, r7
 80063f4:	4462      	add	r2, ip
 80063f6:	1812      	adds	r2, r2, r0
 80063f8:	6812      	ldr	r2, [r2, #0]
 80063fa:	18d3      	adds	r3, r2, r3
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	2b7c      	cmp	r3, #124	; 0x7c
 8006400:	d10e      	bne.n	8006420 <printASCIIarray+0x1b4c>
 8006402:	2308      	movs	r3, #8
 8006404:	18fb      	adds	r3, r7, r3
 8006406:	191b      	adds	r3, r3, r4
 8006408:	185b      	adds	r3, r3, r1
 800640a:	881b      	ldrh	r3, [r3, #0]
 800640c:	2208      	movs	r2, #8
 800640e:	2108      	movs	r1, #8
 8006410:	468c      	mov	ip, r1
 8006412:	44bc      	add	ip, r7
 8006414:	4462      	add	r2, ip
 8006416:	1812      	adds	r2, r2, r0
 8006418:	6812      	ldr	r2, [r2, #0]
 800641a:	18d3      	adds	r3, r2, r3
 800641c:	221f      	movs	r2, #31
 800641e:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 8006420:	215a      	movs	r1, #90	; 0x5a
 8006422:	208c      	movs	r0, #140	; 0x8c
 8006424:	0040      	lsls	r0, r0, #1
 8006426:	2308      	movs	r3, #8
 8006428:	18fb      	adds	r3, r7, r3
 800642a:	181b      	adds	r3, r3, r0
 800642c:	185b      	adds	r3, r3, r1
 800642e:	881a      	ldrh	r2, [r3, #0]
 8006430:	2308      	movs	r3, #8
 8006432:	18fb      	adds	r3, r7, r3
 8006434:	181b      	adds	r3, r3, r0
 8006436:	185b      	adds	r3, r3, r1
 8006438:	3201      	adds	r2, #1
 800643a:	801a      	strh	r2, [r3, #0]
 800643c:	231e      	movs	r3, #30
 800643e:	33ff      	adds	r3, #255	; 0xff
 8006440:	2208      	movs	r2, #8
 8006442:	4694      	mov	ip, r2
 8006444:	44bc      	add	ip, r7
 8006446:	4463      	add	r3, ip
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	b29b      	uxth	r3, r3
 800644c:	215a      	movs	r1, #90	; 0x5a
 800644e:	208c      	movs	r0, #140	; 0x8c
 8006450:	0040      	lsls	r0, r0, #1
 8006452:	2208      	movs	r2, #8
 8006454:	18ba      	adds	r2, r7, r2
 8006456:	1812      	adds	r2, r2, r0
 8006458:	1852      	adds	r2, r2, r1
 800645a:	8812      	ldrh	r2, [r2, #0]
 800645c:	429a      	cmp	r2, r3
 800645e:	d201      	bcs.n	8006464 <printASCIIarray+0x1b90>
 8006460:	f7ff faf2 	bl	8005a48 <printASCIIarray+0x1174>
				}
				for(i=0;i<strLen;i++){
 8006464:	2308      	movs	r3, #8
 8006466:	18fb      	adds	r3, r7, r3
 8006468:	181b      	adds	r3, r3, r0
 800646a:	185b      	adds	r3, r3, r1
 800646c:	2200      	movs	r2, #0
 800646e:	801a      	strh	r2, [r3, #0]
 8006470:	e19b      	b.n	80067aa <printASCIIarray+0x1ed6>
					for(j=0;j<symLen;j++){
 8006472:	235c      	movs	r3, #92	; 0x5c
 8006474:	228c      	movs	r2, #140	; 0x8c
 8006476:	0052      	lsls	r2, r2, #1
 8006478:	4694      	mov	ip, r2
 800647a:	2208      	movs	r2, #8
 800647c:	4690      	mov	r8, r2
 800647e:	44b8      	add	r8, r7
 8006480:	44c4      	add	ip, r8
 8006482:	4463      	add	r3, ip
 8006484:	2200      	movs	r2, #0
 8006486:	801a      	strh	r2, [r3, #0]
 8006488:	e041      	b.n	800650e <printASCIIarray+0x1c3a>
						weoBuffer[j]=F3[dataASCII[i]][j];
 800648a:	235a      	movs	r3, #90	; 0x5a
 800648c:	228c      	movs	r2, #140	; 0x8c
 800648e:	0052      	lsls	r2, r2, #1
 8006490:	4694      	mov	ip, r2
 8006492:	2208      	movs	r2, #8
 8006494:	4690      	mov	r8, r2
 8006496:	44b8      	add	r8, r7
 8006498:	44c4      	add	ip, r8
 800649a:	4463      	add	r3, ip
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	22c8      	movs	r2, #200	; 0xc8
 80064a0:	0052      	lsls	r2, r2, #1
 80064a2:	2108      	movs	r1, #8
 80064a4:	468c      	mov	ip, r1
 80064a6:	2108      	movs	r1, #8
 80064a8:	4688      	mov	r8, r1
 80064aa:	44b8      	add	r8, r7
 80064ac:	44c4      	add	ip, r8
 80064ae:	4462      	add	r2, ip
 80064b0:	6812      	ldr	r2, [r2, #0]
 80064b2:	18d3      	adds	r3, r2, r3
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	001a      	movs	r2, r3
 80064b8:	255c      	movs	r5, #92	; 0x5c
 80064ba:	218c      	movs	r1, #140	; 0x8c
 80064bc:	0049      	lsls	r1, r1, #1
 80064be:	2308      	movs	r3, #8
 80064c0:	18fb      	adds	r3, r7, r3
 80064c2:	185b      	adds	r3, r3, r1
 80064c4:	195b      	adds	r3, r3, r5
 80064c6:	8818      	ldrh	r0, [r3, #0]
 80064c8:	2308      	movs	r3, #8
 80064ca:	18fb      	adds	r3, r7, r3
 80064cc:	185b      	adds	r3, r3, r1
 80064ce:	195b      	adds	r3, r3, r5
 80064d0:	8819      	ldrh	r1, [r3, #0]
 80064d2:	4cc3      	ldr	r4, [pc, #780]	; (80067e0 <printASCIIarray+0x1f0c>)
 80064d4:	0013      	movs	r3, r2
 80064d6:	00db      	lsls	r3, r3, #3
 80064d8:	189b      	adds	r3, r3, r2
 80064da:	005b      	lsls	r3, r3, #1
 80064dc:	189b      	adds	r3, r3, r2
 80064de:	011b      	lsls	r3, r3, #4
 80064e0:	18e3      	adds	r3, r4, r3
 80064e2:	5c1a      	ldrb	r2, [r3, r0]
 80064e4:	2398      	movs	r3, #152	; 0x98
 80064e6:	005b      	lsls	r3, r3, #1
 80064e8:	2008      	movs	r0, #8
 80064ea:	4684      	mov	ip, r0
 80064ec:	44bc      	add	ip, r7
 80064ee:	4463      	add	r3, ip
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	545a      	strb	r2, [r3, r1]
					for(j=0;j<symLen;j++){
 80064f4:	218c      	movs	r1, #140	; 0x8c
 80064f6:	0049      	lsls	r1, r1, #1
 80064f8:	2308      	movs	r3, #8
 80064fa:	18fb      	adds	r3, r7, r3
 80064fc:	185b      	adds	r3, r3, r1
 80064fe:	195b      	adds	r3, r3, r5
 8006500:	881a      	ldrh	r2, [r3, #0]
 8006502:	2308      	movs	r3, #8
 8006504:	18fb      	adds	r3, r7, r3
 8006506:	185b      	adds	r3, r3, r1
 8006508:	195b      	adds	r3, r3, r5
 800650a:	3201      	adds	r2, #1
 800650c:	801a      	strh	r2, [r3, #0]
 800650e:	235c      	movs	r3, #92	; 0x5c
 8006510:	228c      	movs	r2, #140	; 0x8c
 8006512:	0052      	lsls	r2, r2, #1
 8006514:	2108      	movs	r1, #8
 8006516:	468c      	mov	ip, r1
 8006518:	44bc      	add	ip, r7
 800651a:	4462      	add	r2, ip
 800651c:	18d2      	adds	r2, r2, r3
 800651e:	2354      	movs	r3, #84	; 0x54
 8006520:	218c      	movs	r1, #140	; 0x8c
 8006522:	0049      	lsls	r1, r1, #1
 8006524:	468c      	mov	ip, r1
 8006526:	2108      	movs	r1, #8
 8006528:	4688      	mov	r8, r1
 800652a:	44b8      	add	r8, r7
 800652c:	44c4      	add	ip, r8
 800652e:	4463      	add	r3, ip
 8006530:	8812      	ldrh	r2, [r2, #0]
 8006532:	881b      	ldrh	r3, [r3, #0]
 8006534:	429a      	cmp	r2, r3
 8006536:	d3a8      	bcc.n	800648a <printASCIIarray+0x1bb6>
							}
					for (k=0;k<symLen;k++){
 8006538:	235e      	movs	r3, #94	; 0x5e
 800653a:	228c      	movs	r2, #140	; 0x8c
 800653c:	0052      	lsls	r2, r2, #1
 800653e:	4694      	mov	ip, r2
 8006540:	2208      	movs	r2, #8
 8006542:	4690      	mov	r8, r2
 8006544:	44b8      	add	r8, r7
 8006546:	44c4      	add	ip, r8
 8006548:	4463      	add	r3, ip
 800654a:	2200      	movs	r2, #0
 800654c:	801a      	strh	r2, [r3, #0]
 800654e:	e056      	b.n	80065fe <printASCIIarray+0x1d2a>
							weoBuffer1[k]=(weoBuffer[k]&0x0F)&contrast;
 8006550:	205e      	movs	r0, #94	; 0x5e
 8006552:	258c      	movs	r5, #140	; 0x8c
 8006554:	006d      	lsls	r5, r5, #1
 8006556:	2308      	movs	r3, #8
 8006558:	18fb      	adds	r3, r7, r3
 800655a:	195b      	adds	r3, r3, r5
 800655c:	181b      	adds	r3, r3, r0
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	2298      	movs	r2, #152	; 0x98
 8006562:	0052      	lsls	r2, r2, #1
 8006564:	2108      	movs	r1, #8
 8006566:	1879      	adds	r1, r7, r1
 8006568:	1889      	adds	r1, r1, r2
 800656a:	680a      	ldr	r2, [r1, #0]
 800656c:	5cd3      	ldrb	r3, [r2, r3]
 800656e:	2456      	movs	r4, #86	; 0x56
 8006570:	2208      	movs	r2, #8
 8006572:	18ba      	adds	r2, r7, r2
 8006574:	1951      	adds	r1, r2, r5
 8006576:	190a      	adds	r2, r1, r4
 8006578:	7812      	ldrb	r2, [r2, #0]
 800657a:	4013      	ands	r3, r2
 800657c:	b2da      	uxtb	r2, r3
 800657e:	2308      	movs	r3, #8
 8006580:	18fb      	adds	r3, r7, r3
 8006582:	195b      	adds	r3, r3, r5
 8006584:	181b      	adds	r3, r3, r0
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	4698      	mov	r8, r3
 800658a:	210f      	movs	r1, #15
 800658c:	400a      	ands	r2, r1
 800658e:	b2d1      	uxtb	r1, r2
 8006590:	2294      	movs	r2, #148	; 0x94
 8006592:	0052      	lsls	r2, r2, #1
 8006594:	2308      	movs	r3, #8
 8006596:	469c      	mov	ip, r3
 8006598:	44bc      	add	ip, r7
 800659a:	4462      	add	r2, ip
 800659c:	6812      	ldr	r2, [r2, #0]
 800659e:	4643      	mov	r3, r8
 80065a0:	54d1      	strb	r1, [r2, r3]
							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
 80065a2:	2308      	movs	r3, #8
 80065a4:	18fb      	adds	r3, r7, r3
 80065a6:	195b      	adds	r3, r3, r5
 80065a8:	181b      	adds	r3, r3, r0
 80065aa:	881b      	ldrh	r3, [r3, #0]
 80065ac:	2298      	movs	r2, #152	; 0x98
 80065ae:	0052      	lsls	r2, r2, #1
 80065b0:	2108      	movs	r1, #8
 80065b2:	468c      	mov	ip, r1
 80065b4:	44bc      	add	ip, r7
 80065b6:	4462      	add	r2, ip
 80065b8:	6812      	ldr	r2, [r2, #0]
 80065ba:	5cd3      	ldrb	r3, [r2, r3]
 80065bc:	091b      	lsrs	r3, r3, #4
 80065be:	b2da      	uxtb	r2, r3
 80065c0:	2308      	movs	r3, #8
 80065c2:	18fb      	adds	r3, r7, r3
 80065c4:	195b      	adds	r3, r3, r5
 80065c6:	181b      	adds	r3, r3, r0
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	2108      	movs	r1, #8
 80065cc:	1879      	adds	r1, r7, r1
 80065ce:	1949      	adds	r1, r1, r5
 80065d0:	1909      	adds	r1, r1, r4
 80065d2:	7809      	ldrb	r1, [r1, #0]
 80065d4:	400a      	ands	r2, r1
 80065d6:	b2d1      	uxtb	r1, r2
 80065d8:	2290      	movs	r2, #144	; 0x90
 80065da:	0052      	lsls	r2, r2, #1
 80065dc:	2408      	movs	r4, #8
 80065de:	46a4      	mov	ip, r4
 80065e0:	44bc      	add	ip, r7
 80065e2:	4462      	add	r2, ip
 80065e4:	6812      	ldr	r2, [r2, #0]
 80065e6:	54d1      	strb	r1, [r2, r3]
					for (k=0;k<symLen;k++){
 80065e8:	2308      	movs	r3, #8
 80065ea:	18fb      	adds	r3, r7, r3
 80065ec:	195b      	adds	r3, r3, r5
 80065ee:	181b      	adds	r3, r3, r0
 80065f0:	881a      	ldrh	r2, [r3, #0]
 80065f2:	2308      	movs	r3, #8
 80065f4:	18fb      	adds	r3, r7, r3
 80065f6:	195b      	adds	r3, r3, r5
 80065f8:	181b      	adds	r3, r3, r0
 80065fa:	3201      	adds	r2, #1
 80065fc:	801a      	strh	r2, [r3, #0]
 80065fe:	215e      	movs	r1, #94	; 0x5e
 8006600:	208c      	movs	r0, #140	; 0x8c
 8006602:	0040      	lsls	r0, r0, #1
 8006604:	2308      	movs	r3, #8
 8006606:	18fb      	adds	r3, r7, r3
 8006608:	181b      	adds	r3, r3, r0
 800660a:	185a      	adds	r2, r3, r1
 800660c:	2354      	movs	r3, #84	; 0x54
 800660e:	248c      	movs	r4, #140	; 0x8c
 8006610:	0064      	lsls	r4, r4, #1
 8006612:	46a4      	mov	ip, r4
 8006614:	2408      	movs	r4, #8
 8006616:	46a0      	mov	r8, r4
 8006618:	44b8      	add	r8, r7
 800661a:	44c4      	add	ip, r8
 800661c:	4463      	add	r3, ip
 800661e:	8812      	ldrh	r2, [r2, #0]
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	429a      	cmp	r2, r3
 8006624:	d394      	bcc.n	8006550 <printASCIIarray+0x1c7c>
						}
					for (k=0;k<symLen;k++){
 8006626:	2308      	movs	r3, #8
 8006628:	18fb      	adds	r3, r7, r3
 800662a:	181b      	adds	r3, r3, r0
 800662c:	185b      	adds	r3, r3, r1
 800662e:	2200      	movs	r2, #0
 8006630:	801a      	strh	r2, [r3, #0]
 8006632:	e03a      	b.n	80066aa <printASCIIarray+0x1dd6>
							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
 8006634:	205e      	movs	r0, #94	; 0x5e
 8006636:	248c      	movs	r4, #140	; 0x8c
 8006638:	0064      	lsls	r4, r4, #1
 800663a:	2308      	movs	r3, #8
 800663c:	18fb      	adds	r3, r7, r3
 800663e:	191b      	adds	r3, r3, r4
 8006640:	181b      	adds	r3, r3, r0
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	2290      	movs	r2, #144	; 0x90
 8006646:	0052      	lsls	r2, r2, #1
 8006648:	2108      	movs	r1, #8
 800664a:	468c      	mov	ip, r1
 800664c:	44bc      	add	ip, r7
 800664e:	4462      	add	r2, ip
 8006650:	6812      	ldr	r2, [r2, #0]
 8006652:	5cd3      	ldrb	r3, [r2, r3]
 8006654:	011b      	lsls	r3, r3, #4
 8006656:	b25a      	sxtb	r2, r3
 8006658:	2308      	movs	r3, #8
 800665a:	18fb      	adds	r3, r7, r3
 800665c:	191b      	adds	r3, r3, r4
 800665e:	181b      	adds	r3, r3, r0
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	2194      	movs	r1, #148	; 0x94
 8006664:	0049      	lsls	r1, r1, #1
 8006666:	2508      	movs	r5, #8
 8006668:	46ac      	mov	ip, r5
 800666a:	44bc      	add	ip, r7
 800666c:	4461      	add	r1, ip
 800666e:	6809      	ldr	r1, [r1, #0]
 8006670:	5ccb      	ldrb	r3, [r1, r3]
 8006672:	b25b      	sxtb	r3, r3
 8006674:	4313      	orrs	r3, r2
 8006676:	b25a      	sxtb	r2, r3
 8006678:	2308      	movs	r3, #8
 800667a:	18fb      	adds	r3, r7, r3
 800667c:	191b      	adds	r3, r3, r4
 800667e:	181b      	adds	r3, r3, r0
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	b2d1      	uxtb	r1, r2
 8006684:	2298      	movs	r2, #152	; 0x98
 8006686:	0052      	lsls	r2, r2, #1
 8006688:	2508      	movs	r5, #8
 800668a:	46ac      	mov	ip, r5
 800668c:	44bc      	add	ip, r7
 800668e:	4462      	add	r2, ip
 8006690:	6812      	ldr	r2, [r2, #0]
 8006692:	54d1      	strb	r1, [r2, r3]
					for (k=0;k<symLen;k++){
 8006694:	2308      	movs	r3, #8
 8006696:	18fb      	adds	r3, r7, r3
 8006698:	191b      	adds	r3, r3, r4
 800669a:	181b      	adds	r3, r3, r0
 800669c:	881a      	ldrh	r2, [r3, #0]
 800669e:	2308      	movs	r3, #8
 80066a0:	18fb      	adds	r3, r7, r3
 80066a2:	191b      	adds	r3, r3, r4
 80066a4:	181b      	adds	r3, r3, r0
 80066a6:	3201      	adds	r2, #1
 80066a8:	801a      	strh	r2, [r3, #0]
 80066aa:	235e      	movs	r3, #94	; 0x5e
 80066ac:	258c      	movs	r5, #140	; 0x8c
 80066ae:	006d      	lsls	r5, r5, #1
 80066b0:	2208      	movs	r2, #8
 80066b2:	18ba      	adds	r2, r7, r2
 80066b4:	1952      	adds	r2, r2, r5
 80066b6:	18d2      	adds	r2, r2, r3
 80066b8:	2354      	movs	r3, #84	; 0x54
 80066ba:	218c      	movs	r1, #140	; 0x8c
 80066bc:	0049      	lsls	r1, r1, #1
 80066be:	468c      	mov	ip, r1
 80066c0:	2108      	movs	r1, #8
 80066c2:	4688      	mov	r8, r1
 80066c4:	44b8      	add	r8, r7
 80066c6:	44c4      	add	ip, r8
 80066c8:	4463      	add	r3, ip
 80066ca:	8812      	ldrh	r2, [r2, #0]
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d3b0      	bcc.n	8006634 <printASCIIarray+0x1d60>
						}
				weoDrawRectangleFilled(ASCII_X, imY, ASCII_X+X_increment-1, imY + ASCII_height - decY, 0xFF, weoBuffer);
 80066d2:	2057      	movs	r0, #87	; 0x57
 80066d4:	2308      	movs	r3, #8
 80066d6:	18fb      	adds	r3, r7, r3
 80066d8:	195b      	adds	r3, r3, r5
 80066da:	181a      	adds	r2, r3, r0
 80066dc:	233b      	movs	r3, #59	; 0x3b
 80066de:	218c      	movs	r1, #140	; 0x8c
 80066e0:	0049      	lsls	r1, r1, #1
 80066e2:	468c      	mov	ip, r1
 80066e4:	2108      	movs	r1, #8
 80066e6:	4688      	mov	r8, r1
 80066e8:	44b8      	add	r8, r7
 80066ea:	44c4      	add	ip, r8
 80066ec:	4463      	add	r3, ip
 80066ee:	7812      	ldrb	r2, [r2, #0]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	18d3      	adds	r3, r2, r3
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	3b01      	subs	r3, #1
 80066f8:	b2dc      	uxtb	r4, r3
 80066fa:	218f      	movs	r1, #143	; 0x8f
 80066fc:	0049      	lsls	r1, r1, #1
 80066fe:	2308      	movs	r3, #8
 8006700:	18fb      	adds	r3, r7, r3
 8006702:	185a      	adds	r2, r3, r1
 8006704:	213a      	movs	r1, #58	; 0x3a
 8006706:	2308      	movs	r3, #8
 8006708:	18fb      	adds	r3, r7, r3
 800670a:	195b      	adds	r3, r3, r5
 800670c:	185b      	adds	r3, r3, r1
 800670e:	7812      	ldrb	r2, [r2, #0]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	18d3      	adds	r3, r2, r3
 8006714:	b2da      	uxtb	r2, r3
 8006716:	2158      	movs	r1, #88	; 0x58
 8006718:	2308      	movs	r3, #8
 800671a:	18fb      	adds	r3, r7, r3
 800671c:	195b      	adds	r3, r3, r5
 800671e:	185b      	adds	r3, r3, r1
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	b2dd      	uxtb	r5, r3
 8006726:	2398      	movs	r3, #152	; 0x98
 8006728:	005b      	lsls	r3, r3, #1
 800672a:	2208      	movs	r2, #8
 800672c:	4694      	mov	ip, r2
 800672e:	44bc      	add	ip, r7
 8006730:	4463      	add	r3, ip
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4698      	mov	r8, r3
 8006736:	218f      	movs	r1, #143	; 0x8f
 8006738:	0049      	lsls	r1, r1, #1
 800673a:	2308      	movs	r3, #8
 800673c:	18fb      	adds	r3, r7, r3
 800673e:	185a      	adds	r2, r3, r1
 8006740:	7811      	ldrb	r1, [r2, #0]
 8006742:	228c      	movs	r2, #140	; 0x8c
 8006744:	0052      	lsls	r2, r2, #1
 8006746:	2308      	movs	r3, #8
 8006748:	469c      	mov	ip, r3
 800674a:	44bc      	add	ip, r7
 800674c:	4462      	add	r2, ip
 800674e:	1812      	adds	r2, r2, r0
 8006750:	7810      	ldrb	r0, [r2, #0]
 8006752:	4643      	mov	r3, r8
 8006754:	9301      	str	r3, [sp, #4]
 8006756:	23ff      	movs	r3, #255	; 0xff
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	002b      	movs	r3, r5
 800675c:	0022      	movs	r2, r4
 800675e:	f7fc fe6f 	bl	8003440 <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 8006762:	2057      	movs	r0, #87	; 0x57
 8006764:	248c      	movs	r4, #140	; 0x8c
 8006766:	0064      	lsls	r4, r4, #1
 8006768:	2308      	movs	r3, #8
 800676a:	18fb      	adds	r3, r7, r3
 800676c:	191b      	adds	r3, r3, r4
 800676e:	181b      	adds	r3, r3, r0
 8006770:	2208      	movs	r2, #8
 8006772:	18ba      	adds	r2, r7, r2
 8006774:	1912      	adds	r2, r2, r4
 8006776:	1811      	adds	r1, r2, r0
 8006778:	223b      	movs	r2, #59	; 0x3b
 800677a:	208c      	movs	r0, #140	; 0x8c
 800677c:	0040      	lsls	r0, r0, #1
 800677e:	4684      	mov	ip, r0
 8006780:	2008      	movs	r0, #8
 8006782:	4680      	mov	r8, r0
 8006784:	44b8      	add	r8, r7
 8006786:	44c4      	add	ip, r8
 8006788:	4462      	add	r2, ip
 800678a:	7809      	ldrb	r1, [r1, #0]
 800678c:	7812      	ldrb	r2, [r2, #0]
 800678e:	188a      	adds	r2, r1, r2
 8006790:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 8006792:	215a      	movs	r1, #90	; 0x5a
 8006794:	2308      	movs	r3, #8
 8006796:	18fb      	adds	r3, r7, r3
 8006798:	191b      	adds	r3, r3, r4
 800679a:	185b      	adds	r3, r3, r1
 800679c:	881a      	ldrh	r2, [r3, #0]
 800679e:	2308      	movs	r3, #8
 80067a0:	18fb      	adds	r3, r7, r3
 80067a2:	191b      	adds	r3, r3, r4
 80067a4:	185b      	adds	r3, r3, r1
 80067a6:	3201      	adds	r2, #1
 80067a8:	801a      	strh	r2, [r3, #0]
 80067aa:	231e      	movs	r3, #30
 80067ac:	33ff      	adds	r3, #255	; 0xff
 80067ae:	2208      	movs	r2, #8
 80067b0:	4694      	mov	ip, r2
 80067b2:	44bc      	add	ip, r7
 80067b4:	4463      	add	r3, ip
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	215a      	movs	r1, #90	; 0x5a
 80067bc:	208c      	movs	r0, #140	; 0x8c
 80067be:	0040      	lsls	r0, r0, #1
 80067c0:	2208      	movs	r2, #8
 80067c2:	18ba      	adds	r2, r7, r2
 80067c4:	1812      	adds	r2, r2, r0
 80067c6:	1852      	adds	r2, r2, r1
 80067c8:	8812      	ldrh	r2, [r2, #0]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d200      	bcs.n	80067d0 <printASCIIarray+0x1efc>
 80067ce:	e650      	b.n	8006472 <printASCIIarray+0x1b9e>
				}
				for(i=0;i<symLen;i++){
 80067d0:	2308      	movs	r3, #8
 80067d2:	18fb      	adds	r3, r7, r3
 80067d4:	181b      	adds	r3, r3, r0
 80067d6:	185b      	adds	r3, r3, r1
 80067d8:	2200      	movs	r2, #0
 80067da:	801a      	strh	r2, [r3, #0]
 80067dc:	e023      	b.n	8006826 <printASCIIarray+0x1f52>
 80067de:	46c0      	nop			; (mov r8, r8)
 80067e0:	080190fc 	.word	0x080190fc
									weoBuffer[j]=0x00;
 80067e4:	235c      	movs	r3, #92	; 0x5c
 80067e6:	228c      	movs	r2, #140	; 0x8c
 80067e8:	0052      	lsls	r2, r2, #1
 80067ea:	4694      	mov	ip, r2
 80067ec:	2208      	movs	r2, #8
 80067ee:	4690      	mov	r8, r2
 80067f0:	44b8      	add	r8, r7
 80067f2:	44c4      	add	ip, r8
 80067f4:	4463      	add	r3, ip
 80067f6:	881b      	ldrh	r3, [r3, #0]
 80067f8:	2298      	movs	r2, #152	; 0x98
 80067fa:	0052      	lsls	r2, r2, #1
 80067fc:	2108      	movs	r1, #8
 80067fe:	468c      	mov	ip, r1
 8006800:	44bc      	add	ip, r7
 8006802:	4462      	add	r2, ip
 8006804:	6812      	ldr	r2, [r2, #0]
 8006806:	2100      	movs	r1, #0
 8006808:	54d1      	strb	r1, [r2, r3]
				for(i=0;i<symLen;i++){
 800680a:	215a      	movs	r1, #90	; 0x5a
 800680c:	208c      	movs	r0, #140	; 0x8c
 800680e:	0040      	lsls	r0, r0, #1
 8006810:	2308      	movs	r3, #8
 8006812:	18fb      	adds	r3, r7, r3
 8006814:	181b      	adds	r3, r3, r0
 8006816:	185b      	adds	r3, r3, r1
 8006818:	881a      	ldrh	r2, [r3, #0]
 800681a:	2308      	movs	r3, #8
 800681c:	18fb      	adds	r3, r7, r3
 800681e:	181b      	adds	r3, r3, r0
 8006820:	185b      	adds	r3, r3, r1
 8006822:	3201      	adds	r2, #1
 8006824:	801a      	strh	r2, [r3, #0]
 8006826:	235a      	movs	r3, #90	; 0x5a
 8006828:	228c      	movs	r2, #140	; 0x8c
 800682a:	0052      	lsls	r2, r2, #1
 800682c:	2108      	movs	r1, #8
 800682e:	468c      	mov	ip, r1
 8006830:	44bc      	add	ip, r7
 8006832:	4462      	add	r2, ip
 8006834:	18d2      	adds	r2, r2, r3
 8006836:	2354      	movs	r3, #84	; 0x54
 8006838:	218c      	movs	r1, #140	; 0x8c
 800683a:	0049      	lsls	r1, r1, #1
 800683c:	468c      	mov	ip, r1
 800683e:	2108      	movs	r1, #8
 8006840:	4688      	mov	r8, r1
 8006842:	44b8      	add	r8, r7
 8006844:	44c4      	add	ip, r8
 8006846:	4463      	add	r3, ip
 8006848:	8812      	ldrh	r2, [r2, #0]
 800684a:	881b      	ldrh	r3, [r3, #0]
 800684c:	429a      	cmp	r2, r3
 800684e:	d3c9      	bcc.n	80067e4 <printASCIIarray+0x1f10>
 8006850:	46b5      	mov	sp, r6
							}
			}
			cmd2Execute=0;
 8006852:	4b08      	ldr	r3, [pc, #32]	; (8006874 <printASCIIarray+0x1fa0>)
 8006854:	2200      	movs	r2, #0
 8006856:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
			GPIOC->ODR |= 1 << 6;	//set BF
 8006858:	4b07      	ldr	r3, [pc, #28]	; (8006878 <printASCIIarray+0x1fa4>)
 800685a:	695a      	ldr	r2, [r3, #20]
 800685c:	4b06      	ldr	r3, [pc, #24]	; (8006878 <printASCIIarray+0x1fa4>)
 800685e:	2140      	movs	r1, #64	; 0x40
 8006860:	430a      	orrs	r2, r1
 8006862:	615a      	str	r2, [r3, #20]

	}
 8006864:	46c0      	nop			; (mov r8, r8)
 8006866:	0018      	movs	r0, r3
 8006868:	46bd      	mov	sp, r7
 800686a:	b061      	add	sp, #388	; 0x184
 800686c:	bcc0      	pop	{r6, r7}
 800686e:	46b9      	mov	r9, r7
 8006870:	46b0      	mov	r8, r6
 8006872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006874:	2000137b 	.word	0x2000137b
 8006878:	50000800 	.word	0x50000800

0800687c <squeak_generate>:
//=============================================================================================================
	void squeak_generate(void){
 800687c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
			    uint16_t nsamples = sizeof(signal) / sizeof(signal[0]);
 8006882:	230c      	movs	r3, #12
 8006884:	18fb      	adds	r3, r7, r3
 8006886:	2280      	movs	r2, #128	; 0x80
 8006888:	0112      	lsls	r2, r2, #4
 800688a:	801a      	strh	r2, [r3, #0]
			    uint16_t k = 0;
 800688c:	230e      	movs	r3, #14
 800688e:	18fb      	adds	r3, r7, r3
 8006890:	2200      	movs	r2, #0
 8006892:	801a      	strh	r2, [r3, #0]
			    while(k < nsamples) {
 8006894:	e040      	b.n	8006918 <squeak_generate+0x9c>
			        double t = ((double)k/2.0)/((double)nsamples);
 8006896:	260e      	movs	r6, #14
 8006898:	19bb      	adds	r3, r7, r6
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	0018      	movs	r0, r3
 800689e:	f7fb fbd7 	bl	8002050 <__aeabi_ui2d>
 80068a2:	2200      	movs	r2, #0
 80068a4:	2380      	movs	r3, #128	; 0x80
 80068a6:	05db      	lsls	r3, r3, #23
 80068a8:	f7fa f968 	bl	8000b7c <__aeabi_ddiv>
 80068ac:	0002      	movs	r2, r0
 80068ae:	000b      	movs	r3, r1
 80068b0:	0014      	movs	r4, r2
 80068b2:	001d      	movs	r5, r3
 80068b4:	230c      	movs	r3, #12
 80068b6:	18fb      	adds	r3, r7, r3
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	0018      	movs	r0, r3
 80068bc:	f7fb fbc8 	bl	8002050 <__aeabi_ui2d>
 80068c0:	0002      	movs	r2, r0
 80068c2:	000b      	movs	r3, r1
 80068c4:	0020      	movs	r0, r4
 80068c6:	0029      	movs	r1, r5
 80068c8:	f7fa f958 	bl	8000b7c <__aeabi_ddiv>
 80068cc:	0002      	movs	r2, r0
 80068ce:	000b      	movs	r3, r1
 80068d0:	603a      	str	r2, [r7, #0]
 80068d2:	607b      	str	r3, [r7, #4]
			       signal[k] = 32767*sin(100.0 * TAU * t); // left
 80068d4:	4a17      	ldr	r2, [pc, #92]	; (8006934 <squeak_generate+0xb8>)
 80068d6:	4b18      	ldr	r3, [pc, #96]	; (8006938 <squeak_generate+0xbc>)
 80068d8:	6838      	ldr	r0, [r7, #0]
 80068da:	6879      	ldr	r1, [r7, #4]
 80068dc:	f7fa fd54 	bl	8001388 <__aeabi_dmul>
 80068e0:	0002      	movs	r2, r0
 80068e2:	000b      	movs	r3, r1
 80068e4:	0010      	movs	r0, r2
 80068e6:	0019      	movs	r1, r3
 80068e8:	f008 f9a2 	bl	800ec30 <sin>
 80068ec:	2200      	movs	r2, #0
 80068ee:	4b13      	ldr	r3, [pc, #76]	; (800693c <squeak_generate+0xc0>)
 80068f0:	f7fa fd4a 	bl	8001388 <__aeabi_dmul>
 80068f4:	0002      	movs	r2, r0
 80068f6:	000b      	movs	r3, r1
 80068f8:	19b9      	adds	r1, r7, r6
 80068fa:	880c      	ldrh	r4, [r1, #0]
 80068fc:	0010      	movs	r0, r2
 80068fe:	0019      	movs	r1, r3
 8006900:	f7f9 fdb4 	bl	800046c <__aeabi_d2uiz>
 8006904:	0003      	movs	r3, r0
 8006906:	b299      	uxth	r1, r3
 8006908:	4b0d      	ldr	r3, [pc, #52]	; (8006940 <squeak_generate+0xc4>)
 800690a:	0062      	lsls	r2, r4, #1
 800690c:	52d1      	strh	r1, [r2, r3]
			        k += 1;
 800690e:	19bb      	adds	r3, r7, r6
 8006910:	19ba      	adds	r2, r7, r6
 8006912:	8812      	ldrh	r2, [r2, #0]
 8006914:	3201      	adds	r2, #1
 8006916:	801a      	strh	r2, [r3, #0]
			    while(k < nsamples) {
 8006918:	230e      	movs	r3, #14
 800691a:	18fa      	adds	r2, r7, r3
 800691c:	230c      	movs	r3, #12
 800691e:	18fb      	adds	r3, r7, r3
 8006920:	8812      	ldrh	r2, [r2, #0]
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	429a      	cmp	r2, r3
 8006926:	d3b6      	bcc.n	8006896 <squeak_generate+0x1a>
			    }
		}
 8006928:	46c0      	nop			; (mov r8, r8)
 800692a:	46c0      	nop			; (mov r8, r8)
 800692c:	46bd      	mov	sp, r7
 800692e:	b005      	add	sp, #20
 8006930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006932:	46c0      	nop			; (mov r8, r8)
 8006934:	59d5433b 	.word	0x59d5433b
 8006938:	4083a28c 	.word	0x4083a28c
 800693c:	40dfffc0 	.word	0x40dfffc0
 8006940:	20000314 	.word	0x20000314

08006944 <squeak_single>:
//=============================================================================================================
	void squeak_single(uint16_t* signal){
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]

		I2C_SOUND_ChangePage(0x01);
 800694c:	2001      	movs	r0, #1
 800694e:	f7fc fe5b 	bl	8003608 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x00);
 8006952:	2100      	movs	r1, #0
 8006954:	2001      	movs	r0, #1
 8006956:	f7fc fe75 	bl	8003644 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 800695a:	2000      	movs	r0, #0
 800695c:	f7fc fe54 	bl	8003608 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x41, 0x30);// 0x81 - 0x30 available
 8006960:	2130      	movs	r1, #48	; 0x30
 8006962:	2041      	movs	r0, #65	; 0x41
 8006964:	f7fc fe6e 	bl	8003644 <WriteReg_I2C_SOUND>
	//	I2C_SOUND_ChangePage(0x00);
		I2C_SOUND_ChangePage(0x01);
 8006968:	2001      	movs	r0, #1
 800696a:	f7fc fe4d 	bl	8003608 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 800696e:	2100      	movs	r1, #0
 8006970:	2010      	movs	r0, #16
 8006972:	f7fc fe67 	bl	8003644 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 8006976:	2124      	movs	r1, #36	; 0x24
 8006978:	202e      	movs	r0, #46	; 0x2e
 800697a:	f7fc fe63 	bl	8003644 <WriteReg_I2C_SOUND>
		HAL_I2S_Transmit_DMA(&hi2s1, (const uint16_t*)signal, nsamples); //HAL_MAX_DELAY
 800697e:	4b0e      	ldr	r3, [pc, #56]	; (80069b8 <squeak_single+0x74>)
 8006980:	881a      	ldrh	r2, [r3, #0]
 8006982:	6879      	ldr	r1, [r7, #4]
 8006984:	4b0d      	ldr	r3, [pc, #52]	; (80069bc <squeak_single+0x78>)
 8006986:	0018      	movs	r0, r3
 8006988:	f003 f986 	bl	8009c98 <HAL_I2S_Transmit_DMA>
		USART2->ICR|=USART_ICR_ORECF;
 800698c:	4b0c      	ldr	r3, [pc, #48]	; (80069c0 <squeak_single+0x7c>)
 800698e:	6a1a      	ldr	r2, [r3, #32]
 8006990:	4b0b      	ldr	r3, [pc, #44]	; (80069c0 <squeak_single+0x7c>)
 8006992:	2108      	movs	r1, #8
 8006994:	430a      	orrs	r2, r1
 8006996:	621a      	str	r2, [r3, #32]
		USART2->ICR|=USART_ICR_FECF;
 8006998:	4b09      	ldr	r3, [pc, #36]	; (80069c0 <squeak_single+0x7c>)
 800699a:	6a1a      	ldr	r2, [r3, #32]
 800699c:	4b08      	ldr	r3, [pc, #32]	; (80069c0 <squeak_single+0x7c>)
 800699e:	2102      	movs	r1, #2
 80069a0:	430a      	orrs	r2, r1
 80069a2:	621a      	str	r2, [r3, #32]
		USART2->ICR|=USART_ICR_NECF;
 80069a4:	4b06      	ldr	r3, [pc, #24]	; (80069c0 <squeak_single+0x7c>)
 80069a6:	6a1a      	ldr	r2, [r3, #32]
 80069a8:	4b05      	ldr	r3, [pc, #20]	; (80069c0 <squeak_single+0x7c>)
 80069aa:	2104      	movs	r1, #4
 80069ac:	430a      	orrs	r2, r1
 80069ae:	621a      	str	r2, [r3, #32]
//		HAL_Delay(100);
//		GPIOC->ODR |= 1 << 6;	//set BF
//		cmd2Execute=0;
	}
 80069b0:	46c0      	nop			; (mov r8, r8)
 80069b2:	46bd      	mov	sp, r7
 80069b4:	b002      	add	sp, #8
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	20000032 	.word	0x20000032
 80069bc:	20001380 	.word	0x20001380
 80069c0:	40004400 	.word	0x40004400

080069c4 <squeak_long>:
//==========================================================================================================================
	void squeak_long(uint16_t* signal){
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]

		I2C_SOUND_ChangePage(0x01);
 80069cc:	2001      	movs	r0, #1
 80069ce:	f7fc fe1b 	bl	8003608 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x00);
 80069d2:	2100      	movs	r1, #0
 80069d4:	2001      	movs	r0, #1
 80069d6:	f7fc fe35 	bl	8003644 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 80069da:	2000      	movs	r0, #0
 80069dc:	f7fc fe14 	bl	8003608 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x41, 0x30);// 0x81 - 0x30 available
 80069e0:	2130      	movs	r1, #48	; 0x30
 80069e2:	2041      	movs	r0, #65	; 0x41
 80069e4:	f7fc fe2e 	bl	8003644 <WriteReg_I2C_SOUND>
	//	I2C_SOUND_ChangePage(0x00);
		I2C_SOUND_ChangePage(0x01);
 80069e8:	2001      	movs	r0, #1
 80069ea:	f7fc fe0d 	bl	8003608 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 80069ee:	2100      	movs	r1, #0
 80069f0:	2010      	movs	r0, #16
 80069f2:	f7fc fe27 	bl	8003644 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 80069f6:	2124      	movs	r1, #36	; 0x24
 80069f8:	202e      	movs	r0, #46	; 0x2e
 80069fa:	f7fc fe23 	bl	8003644 <WriteReg_I2C_SOUND>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 80069fe:	4b29      	ldr	r3, [pc, #164]	; (8006aa4 <squeak_long+0xe0>)
 8006a00:	881a      	ldrh	r2, [r3, #0]
 8006a02:	4b29      	ldr	r3, [pc, #164]	; (8006aa8 <squeak_long+0xe4>)
 8006a04:	6879      	ldr	r1, [r7, #4]
 8006a06:	4829      	ldr	r0, [pc, #164]	; (8006aac <squeak_long+0xe8>)
 8006a08:	f003 f84e 	bl	8009aa8 <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 8006a0c:	4b25      	ldr	r3, [pc, #148]	; (8006aa4 <squeak_long+0xe0>)
 8006a0e:	881a      	ldrh	r2, [r3, #0]
 8006a10:	4b25      	ldr	r3, [pc, #148]	; (8006aa8 <squeak_long+0xe4>)
 8006a12:	6879      	ldr	r1, [r7, #4]
 8006a14:	4825      	ldr	r0, [pc, #148]	; (8006aac <squeak_long+0xe8>)
 8006a16:	f003 f847 	bl	8009aa8 <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 8006a1a:	4b22      	ldr	r3, [pc, #136]	; (8006aa4 <squeak_long+0xe0>)
 8006a1c:	881a      	ldrh	r2, [r3, #0]
 8006a1e:	4b22      	ldr	r3, [pc, #136]	; (8006aa8 <squeak_long+0xe4>)
 8006a20:	6879      	ldr	r1, [r7, #4]
 8006a22:	4822      	ldr	r0, [pc, #136]	; (8006aac <squeak_long+0xe8>)
 8006a24:	f003 f840 	bl	8009aa8 <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 8006a28:	4b1e      	ldr	r3, [pc, #120]	; (8006aa4 <squeak_long+0xe0>)
 8006a2a:	881a      	ldrh	r2, [r3, #0]
 8006a2c:	4b1e      	ldr	r3, [pc, #120]	; (8006aa8 <squeak_long+0xe4>)
 8006a2e:	6879      	ldr	r1, [r7, #4]
 8006a30:	481e      	ldr	r0, [pc, #120]	; (8006aac <squeak_long+0xe8>)
 8006a32:	f003 f839 	bl	8009aa8 <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 8006a36:	4b1b      	ldr	r3, [pc, #108]	; (8006aa4 <squeak_long+0xe0>)
 8006a38:	881a      	ldrh	r2, [r3, #0]
 8006a3a:	4b1b      	ldr	r3, [pc, #108]	; (8006aa8 <squeak_long+0xe4>)
 8006a3c:	6879      	ldr	r1, [r7, #4]
 8006a3e:	481b      	ldr	r0, [pc, #108]	; (8006aac <squeak_long+0xe8>)
 8006a40:	f003 f832 	bl	8009aa8 <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 8006a44:	4b17      	ldr	r3, [pc, #92]	; (8006aa4 <squeak_long+0xe0>)
 8006a46:	881a      	ldrh	r2, [r3, #0]
 8006a48:	4b17      	ldr	r3, [pc, #92]	; (8006aa8 <squeak_long+0xe4>)
 8006a4a:	6879      	ldr	r1, [r7, #4]
 8006a4c:	4817      	ldr	r0, [pc, #92]	; (8006aac <squeak_long+0xe8>)
 8006a4e:	f003 f82b 	bl	8009aa8 <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 8006a52:	4b14      	ldr	r3, [pc, #80]	; (8006aa4 <squeak_long+0xe0>)
 8006a54:	881a      	ldrh	r2, [r3, #0]
 8006a56:	4b14      	ldr	r3, [pc, #80]	; (8006aa8 <squeak_long+0xe4>)
 8006a58:	6879      	ldr	r1, [r7, #4]
 8006a5a:	4814      	ldr	r0, [pc, #80]	; (8006aac <squeak_long+0xe8>)
 8006a5c:	f003 f824 	bl	8009aa8 <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 8006a60:	4b10      	ldr	r3, [pc, #64]	; (8006aa4 <squeak_long+0xe0>)
 8006a62:	881a      	ldrh	r2, [r3, #0]
 8006a64:	4b10      	ldr	r3, [pc, #64]	; (8006aa8 <squeak_long+0xe4>)
 8006a66:	6879      	ldr	r1, [r7, #4]
 8006a68:	4810      	ldr	r0, [pc, #64]	; (8006aac <squeak_long+0xe8>)
 8006a6a:	f003 f81d 	bl	8009aa8 <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 8006a6e:	4b0d      	ldr	r3, [pc, #52]	; (8006aa4 <squeak_long+0xe0>)
 8006a70:	881a      	ldrh	r2, [r3, #0]
 8006a72:	4b0d      	ldr	r3, [pc, #52]	; (8006aa8 <squeak_long+0xe4>)
 8006a74:	6879      	ldr	r1, [r7, #4]
 8006a76:	480d      	ldr	r0, [pc, #52]	; (8006aac <squeak_long+0xe8>)
 8006a78:	f003 f816 	bl	8009aa8 <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 8006a7c:	4b09      	ldr	r3, [pc, #36]	; (8006aa4 <squeak_long+0xe0>)
 8006a7e:	881a      	ldrh	r2, [r3, #0]
 8006a80:	4b09      	ldr	r3, [pc, #36]	; (8006aa8 <squeak_long+0xe4>)
 8006a82:	6879      	ldr	r1, [r7, #4]
 8006a84:	4809      	ldr	r0, [pc, #36]	; (8006aac <squeak_long+0xe8>)
 8006a86:	f003 f80f 	bl	8009aa8 <HAL_I2S_Transmit>
//		HAL_Delay(500);
		GPIOC->ODR |= 1 << 6;	//set BF
 8006a8a:	4b09      	ldr	r3, [pc, #36]	; (8006ab0 <squeak_long+0xec>)
 8006a8c:	695a      	ldr	r2, [r3, #20]
 8006a8e:	4b08      	ldr	r3, [pc, #32]	; (8006ab0 <squeak_long+0xec>)
 8006a90:	2140      	movs	r1, #64	; 0x40
 8006a92:	430a      	orrs	r2, r1
 8006a94:	615a      	str	r2, [r3, #20]
		cmd2Execute=0;
 8006a96:	4b07      	ldr	r3, [pc, #28]	; (8006ab4 <squeak_long+0xf0>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	701a      	strb	r2, [r3, #0]
	}
 8006a9c:	46c0      	nop			; (mov r8, r8)
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	b002      	add	sp, #8
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	20000032 	.word	0x20000032
 8006aa8:	00001388 	.word	0x00001388
 8006aac:	20001380 	.word	0x20001380
 8006ab0:	50000800 	.word	0x50000800
 8006ab4:	2000137b 	.word	0x2000137b

08006ab8 <squeak_double>:
//=============================================================================================================
	void squeak_double(uint16_t* signal){
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]

		I2C_SOUND_ChangePage(0x01);
 8006ac0:	2001      	movs	r0, #1
 8006ac2:	f7fc fda1 	bl	8003608 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x00);
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	2001      	movs	r0, #1
 8006aca:	f7fc fdbb 	bl	8003644 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 8006ace:	2000      	movs	r0, #0
 8006ad0:	f7fc fd9a 	bl	8003608 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x41, 0x30);// 0x81 - 0x30 available
 8006ad4:	2130      	movs	r1, #48	; 0x30
 8006ad6:	2041      	movs	r0, #65	; 0x41
 8006ad8:	f7fc fdb4 	bl	8003644 <WriteReg_I2C_SOUND>
	//	I2C_SOUND_ChangePage(0x00);
		I2C_SOUND_ChangePage(0x01);
 8006adc:	2001      	movs	r0, #1
 8006ade:	f7fc fd93 	bl	8003608 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	2010      	movs	r0, #16
 8006ae6:	f7fc fdad 	bl	8003644 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 8006aea:	2124      	movs	r1, #36	; 0x24
 8006aec:	202e      	movs	r0, #46	; 0x2e
 8006aee:	f7fc fda9 	bl	8003644 <WriteReg_I2C_SOUND>
		HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)signal, nsamples);
 8006af2:	4b0a      	ldr	r3, [pc, #40]	; (8006b1c <squeak_double+0x64>)
 8006af4:	881a      	ldrh	r2, [r3, #0]
 8006af6:	6879      	ldr	r1, [r7, #4]
 8006af8:	4b09      	ldr	r3, [pc, #36]	; (8006b20 <squeak_double+0x68>)
 8006afa:	0018      	movs	r0, r3
 8006afc:	f003 f8cc 	bl	8009c98 <HAL_I2S_Transmit_DMA>
		HAL_Delay(100);
 8006b00:	2064      	movs	r0, #100	; 0x64
 8006b02:	f000 fdab 	bl	800765c <HAL_Delay>
		HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)signal, nsamples);
 8006b06:	4b05      	ldr	r3, [pc, #20]	; (8006b1c <squeak_double+0x64>)
 8006b08:	881a      	ldrh	r2, [r3, #0]
 8006b0a:	6879      	ldr	r1, [r7, #4]
 8006b0c:	4b04      	ldr	r3, [pc, #16]	; (8006b20 <squeak_double+0x68>)
 8006b0e:	0018      	movs	r0, r3
 8006b10:	f003 f8c2 	bl	8009c98 <HAL_I2S_Transmit_DMA>
//		HAL_Delay(500);
	}
 8006b14:	46c0      	nop			; (mov r8, r8)
 8006b16:	46bd      	mov	sp, r7
 8006b18:	b002      	add	sp, #8
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	20000032 	.word	0x20000032
 8006b20:	20001380 	.word	0x20001380

08006b24 <squeak_triple>:
//=============================================================================================================
	void squeak_triple(uint16_t* signal){
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]

		I2C_SOUND_ChangePage(0x01);
 8006b2c:	2001      	movs	r0, #1
 8006b2e:	f7fc fd6b 	bl	8003608 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x00);
 8006b32:	2100      	movs	r1, #0
 8006b34:	2001      	movs	r0, #1
 8006b36:	f7fc fd85 	bl	8003644 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 8006b3a:	2000      	movs	r0, #0
 8006b3c:	f7fc fd64 	bl	8003608 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x41, 0x30);// 0x81 - 0x30 available
 8006b40:	2130      	movs	r1, #48	; 0x30
 8006b42:	2041      	movs	r0, #65	; 0x41
 8006b44:	f7fc fd7e 	bl	8003644 <WriteReg_I2C_SOUND>
	//	I2C_SOUND_ChangePage(0x00);
		I2C_SOUND_ChangePage(0x01);
 8006b48:	2001      	movs	r0, #1
 8006b4a:	f7fc fd5d 	bl	8003608 <I2C_SOUND_ChangePage>
//		HAL_Delay(1000);
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 8006b4e:	2100      	movs	r1, #0
 8006b50:	2010      	movs	r0, #16
 8006b52:	f7fc fd77 	bl	8003644 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 8006b56:	2124      	movs	r1, #36	; 0x24
 8006b58:	202e      	movs	r0, #46	; 0x2e
 8006b5a:	f7fc fd73 	bl	8003644 <WriteReg_I2C_SOUND>
		HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)signal, nsamples);
 8006b5e:	4b0f      	ldr	r3, [pc, #60]	; (8006b9c <squeak_triple+0x78>)
 8006b60:	881a      	ldrh	r2, [r3, #0]
 8006b62:	6879      	ldr	r1, [r7, #4]
 8006b64:	4b0e      	ldr	r3, [pc, #56]	; (8006ba0 <squeak_triple+0x7c>)
 8006b66:	0018      	movs	r0, r3
 8006b68:	f003 f896 	bl	8009c98 <HAL_I2S_Transmit_DMA>
		HAL_Delay(100);
 8006b6c:	2064      	movs	r0, #100	; 0x64
 8006b6e:	f000 fd75 	bl	800765c <HAL_Delay>
		HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)signal, nsamples);
 8006b72:	4b0a      	ldr	r3, [pc, #40]	; (8006b9c <squeak_triple+0x78>)
 8006b74:	881a      	ldrh	r2, [r3, #0]
 8006b76:	6879      	ldr	r1, [r7, #4]
 8006b78:	4b09      	ldr	r3, [pc, #36]	; (8006ba0 <squeak_triple+0x7c>)
 8006b7a:	0018      	movs	r0, r3
 8006b7c:	f003 f88c 	bl	8009c98 <HAL_I2S_Transmit_DMA>
		HAL_Delay(100);
 8006b80:	2064      	movs	r0, #100	; 0x64
 8006b82:	f000 fd6b 	bl	800765c <HAL_Delay>
		HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)signal, nsamples);
 8006b86:	4b05      	ldr	r3, [pc, #20]	; (8006b9c <squeak_triple+0x78>)
 8006b88:	881a      	ldrh	r2, [r3, #0]
 8006b8a:	6879      	ldr	r1, [r7, #4]
 8006b8c:	4b04      	ldr	r3, [pc, #16]	; (8006ba0 <squeak_triple+0x7c>)
 8006b8e:	0018      	movs	r0, r3
 8006b90:	f003 f882 	bl	8009c98 <HAL_I2S_Transmit_DMA>
//		HAL_Delay(500);
//		GPIOC->ODR |= 1 << 6;	//set BF
//		cmd2Execute=0;
	}
 8006b94:	46c0      	nop			; (mov r8, r8)
 8006b96:	46bd      	mov	sp, r7
 8006b98:	b002      	add	sp, #8
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	20000032 	.word	0x20000032
 8006ba0:	20001380 	.word	0x20001380

08006ba4 <LIS3DHsendCMD>:
//=============================================================================================================
	void LIS3DHsendCMD(uint8_t reg, uint8_t data) {
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af02      	add	r7, sp, #8
 8006baa:	0002      	movs	r2, r0
 8006bac:	1dfb      	adds	r3, r7, #7
 8006bae:	701a      	strb	r2, [r3, #0]
 8006bb0:	1dbb      	adds	r3, r7, #6
 8006bb2:	1c0a      	adds	r2, r1, #0
 8006bb4:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 8006bb6:	210c      	movs	r1, #12
 8006bb8:	187b      	adds	r3, r7, r1
 8006bba:	1dfa      	adds	r2, r7, #7
 8006bbc:	7812      	ldrb	r2, [r2, #0]
 8006bbe:	701a      	strb	r2, [r3, #0]
 8006bc0:	187b      	adds	r3, r7, r1
 8006bc2:	1dba      	adds	r2, r7, #6
 8006bc4:	7812      	ldrb	r2, [r2, #0]
 8006bc6:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x32, buf, 2, 1000);	//32h - address for writing
 8006bc8:	187a      	adds	r2, r7, r1
 8006bca:	4806      	ldr	r0, [pc, #24]	; (8006be4 <LIS3DHsendCMD+0x40>)
 8006bcc:	23fa      	movs	r3, #250	; 0xfa
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	2132      	movs	r1, #50	; 0x32
 8006bd6:	f001 fd7b 	bl	80086d0 <HAL_I2C_Master_Transmit>
	}
 8006bda:	46c0      	nop			; (mov r8, r8)
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	b004      	add	sp, #16
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	46c0      	nop			; (mov r8, r8)
 8006be4:	20000144 	.word	0x20000144

08006be8 <LIS3DHsetup>:
//	  xVal = buffer[0];
//	  yVal = buffer[1];
//	  zVal = buffer[2];
//	}
//=============================================================================================================
	void LIS3DHsetup(void){
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
		uint8_t CTRL_REG1_val=0x00;
 8006bee:	1dfb      	adds	r3, r7, #7
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG4_val=0x00;
 8006bf4:	1dbb      	adds	r3, r7, #6
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG5_val=0x00;
 8006bfa:	1d7b      	adds	r3, r7, #5
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG6_val=0x00;
 8006c00:	1d3b      	adds	r3, r7, #4
 8006c02:	2200      	movs	r2, #0
 8006c04:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_CTRL_REG_val=0x00;
 8006c06:	1cfb      	adds	r3, r7, #3
 8006c08:	2200      	movs	r2, #0
 8006c0a:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_SRC_REG_val=0x00;
 8006c0c:	1cbb      	adds	r3, r7, #2
 8006c0e:	2200      	movs	r2, #0
 8006c10:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_CFG_val=0x00;
 8006c12:	1c7b      	adds	r3, r7, #1
 8006c14:	2200      	movs	r2, #0
 8006c16:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_SRC_val=0x00;
 8006c18:	003b      	movs	r3, r7
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	701a      	strb	r2, [r3, #0]

		LIS3DHsendCMD(CTRL_REG1,(CTRL_REG1_val|accelDataRate_25_Hz|Xen|Yen|Zen));//data rate selection
 8006c1e:	1dfb      	adds	r3, r7, #7
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	2237      	movs	r2, #55	; 0x37
 8006c24:	4313      	orrs	r3, r2
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	0019      	movs	r1, r3
 8006c2a:	2020      	movs	r0, #32
 8006c2c:	f7ff ffba 	bl	8006ba4 <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG2,);//HPFilter
//		LIS3DHsendCMD(CTRL_REG3,);
		LIS3DHsendCMD(CTRL_REG4,(CTRL_REG4_val|BDU|FULL_SCALE_2G|HR));
 8006c30:	1dbb      	adds	r3, r7, #6
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	227c      	movs	r2, #124	; 0x7c
 8006c36:	4252      	negs	r2, r2
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	0019      	movs	r1, r3
 8006c3e:	2023      	movs	r0, #35	; 0x23
 8006c40:	f7ff ffb0 	bl	8006ba4 <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG6,);
//		LIS3DHsendCMD(FIFO_CTRL_REG,FIFO_CTRL_REG_val);	//	2B configured
//		LIS3DHsendCMD(FIFO_SRC_REG,FIFO_SRC_REG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_CFG,INT_1_CFG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_SRC_val,INT_1_SRC_val);	//	2B configured
	}
 8006c44:	46c0      	nop			; (mov r8, r8)
 8006c46:	46bd      	mov	sp, r7
 8006c48:	b002      	add	sp, #8
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006c50:	46c0      	nop			; (mov r8, r8)
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
	...

08006c58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c5e:	4b11      	ldr	r3, [pc, #68]	; (8006ca4 <HAL_MspInit+0x4c>)
 8006c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c62:	4b10      	ldr	r3, [pc, #64]	; (8006ca4 <HAL_MspInit+0x4c>)
 8006c64:	2101      	movs	r1, #1
 8006c66:	430a      	orrs	r2, r1
 8006c68:	641a      	str	r2, [r3, #64]	; 0x40
 8006c6a:	4b0e      	ldr	r3, [pc, #56]	; (8006ca4 <HAL_MspInit+0x4c>)
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	2201      	movs	r2, #1
 8006c70:	4013      	ands	r3, r2
 8006c72:	607b      	str	r3, [r7, #4]
 8006c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006c76:	4b0b      	ldr	r3, [pc, #44]	; (8006ca4 <HAL_MspInit+0x4c>)
 8006c78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c7a:	4b0a      	ldr	r3, [pc, #40]	; (8006ca4 <HAL_MspInit+0x4c>)
 8006c7c:	2180      	movs	r1, #128	; 0x80
 8006c7e:	0549      	lsls	r1, r1, #21
 8006c80:	430a      	orrs	r2, r1
 8006c82:	63da      	str	r2, [r3, #60]	; 0x3c
 8006c84:	4b07      	ldr	r3, [pc, #28]	; (8006ca4 <HAL_MspInit+0x4c>)
 8006c86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c88:	2380      	movs	r3, #128	; 0x80
 8006c8a:	055b      	lsls	r3, r3, #21
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	603b      	str	r3, [r7, #0]
 8006c90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8006c92:	2380      	movs	r3, #128	; 0x80
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	0018      	movs	r0, r3
 8006c98:	f000 fd04 	bl	80076a4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006c9c:	46c0      	nop			; (mov r8, r8)
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	b002      	add	sp, #8
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	40021000 	.word	0x40021000

08006ca8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8006ca8:	b590      	push	{r4, r7, lr}
 8006caa:	b089      	sub	sp, #36	; 0x24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cb0:	240c      	movs	r4, #12
 8006cb2:	193b      	adds	r3, r7, r4
 8006cb4:	0018      	movs	r0, r3
 8006cb6:	2314      	movs	r3, #20
 8006cb8:	001a      	movs	r2, r3
 8006cba:	2100      	movs	r1, #0
 8006cbc:	f007 ffb0 	bl	800ec20 <memset>
  if(hcomp->Instance==COMP1)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a10      	ldr	r2, [pc, #64]	; (8006d08 <HAL_COMP_MspInit+0x60>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d11a      	bne.n	8006d00 <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cca:	4b10      	ldr	r3, [pc, #64]	; (8006d0c <HAL_COMP_MspInit+0x64>)
 8006ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cce:	4b0f      	ldr	r3, [pc, #60]	; (8006d0c <HAL_COMP_MspInit+0x64>)
 8006cd0:	2102      	movs	r1, #2
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	635a      	str	r2, [r3, #52]	; 0x34
 8006cd6:	4b0d      	ldr	r3, [pc, #52]	; (8006d0c <HAL_COMP_MspInit+0x64>)
 8006cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cda:	2202      	movs	r2, #2
 8006cdc:	4013      	ands	r3, r2
 8006cde:	60bb      	str	r3, [r7, #8]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006ce2:	193b      	adds	r3, r7, r4
 8006ce4:	2204      	movs	r2, #4
 8006ce6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ce8:	193b      	adds	r3, r7, r4
 8006cea:	2203      	movs	r2, #3
 8006cec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cee:	193b      	adds	r3, r7, r4
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cf4:	193b      	adds	r3, r7, r4
 8006cf6:	4a06      	ldr	r2, [pc, #24]	; (8006d10 <HAL_COMP_MspInit+0x68>)
 8006cf8:	0019      	movs	r1, r3
 8006cfa:	0010      	movs	r0, r2
 8006cfc:	f001 faee 	bl	80082dc <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8006d00:	46c0      	nop			; (mov r8, r8)
 8006d02:	46bd      	mov	sp, r7
 8006d04:	b009      	add	sp, #36	; 0x24
 8006d06:	bd90      	pop	{r4, r7, pc}
 8006d08:	40010200 	.word	0x40010200
 8006d0c:	40021000 	.word	0x40021000
 8006d10:	50000400 	.word	0x50000400

08006d14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006d14:	b590      	push	{r4, r7, lr}
 8006d16:	b08b      	sub	sp, #44	; 0x2c
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d1c:	2414      	movs	r4, #20
 8006d1e:	193b      	adds	r3, r7, r4
 8006d20:	0018      	movs	r0, r3
 8006d22:	2314      	movs	r3, #20
 8006d24:	001a      	movs	r2, r3
 8006d26:	2100      	movs	r1, #0
 8006d28:	f007 ff7a 	bl	800ec20 <memset>
  if(hi2c->Instance==I2C1)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a20      	ldr	r2, [pc, #128]	; (8006db4 <HAL_I2C_MspInit+0xa0>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d139      	bne.n	8006daa <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d36:	4b20      	ldr	r3, [pc, #128]	; (8006db8 <HAL_I2C_MspInit+0xa4>)
 8006d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d3a:	4b1f      	ldr	r3, [pc, #124]	; (8006db8 <HAL_I2C_MspInit+0xa4>)
 8006d3c:	2101      	movs	r1, #1
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	635a      	str	r2, [r3, #52]	; 0x34
 8006d42:	4b1d      	ldr	r3, [pc, #116]	; (8006db8 <HAL_I2C_MspInit+0xa4>)
 8006d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d46:	2201      	movs	r2, #1
 8006d48:	4013      	ands	r3, r2
 8006d4a:	613b      	str	r3, [r7, #16]
 8006d4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006d4e:	193b      	adds	r3, r7, r4
 8006d50:	22c0      	movs	r2, #192	; 0xc0
 8006d52:	00d2      	lsls	r2, r2, #3
 8006d54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006d56:	0021      	movs	r1, r4
 8006d58:	187b      	adds	r3, r7, r1
 8006d5a:	2212      	movs	r2, #18
 8006d5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d5e:	187b      	adds	r3, r7, r1
 8006d60:	2201      	movs	r2, #1
 8006d62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d64:	187b      	adds	r3, r7, r1
 8006d66:	2200      	movs	r2, #0
 8006d68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8006d6a:	187b      	adds	r3, r7, r1
 8006d6c:	2206      	movs	r2, #6
 8006d6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d70:	187a      	adds	r2, r7, r1
 8006d72:	23a0      	movs	r3, #160	; 0xa0
 8006d74:	05db      	lsls	r3, r3, #23
 8006d76:	0011      	movs	r1, r2
 8006d78:	0018      	movs	r0, r3
 8006d7a:	f001 faaf 	bl	80082dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006d7e:	4b0e      	ldr	r3, [pc, #56]	; (8006db8 <HAL_I2C_MspInit+0xa4>)
 8006d80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d82:	4b0d      	ldr	r3, [pc, #52]	; (8006db8 <HAL_I2C_MspInit+0xa4>)
 8006d84:	2180      	movs	r1, #128	; 0x80
 8006d86:	0389      	lsls	r1, r1, #14
 8006d88:	430a      	orrs	r2, r1
 8006d8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8006d8c:	4b0a      	ldr	r3, [pc, #40]	; (8006db8 <HAL_I2C_MspInit+0xa4>)
 8006d8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d90:	2380      	movs	r3, #128	; 0x80
 8006d92:	039b      	lsls	r3, r3, #14
 8006d94:	4013      	ands	r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	2017      	movs	r0, #23
 8006da0:	f000 ffa2 	bl	8007ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8006da4:	2017      	movs	r0, #23
 8006da6:	f000 ffb4 	bl	8007d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006daa:	46c0      	nop			; (mov r8, r8)
 8006dac:	46bd      	mov	sp, r7
 8006dae:	b00b      	add	sp, #44	; 0x2c
 8006db0:	bd90      	pop	{r4, r7, pc}
 8006db2:	46c0      	nop			; (mov r8, r8)
 8006db4:	40005400 	.word	0x40005400
 8006db8:	40021000 	.word	0x40021000

08006dbc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8006dbc:	b590      	push	{r4, r7, lr}
 8006dbe:	b08b      	sub	sp, #44	; 0x2c
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dc4:	2414      	movs	r4, #20
 8006dc6:	193b      	adds	r3, r7, r4
 8006dc8:	0018      	movs	r0, r3
 8006dca:	2314      	movs	r3, #20
 8006dcc:	001a      	movs	r2, r3
 8006dce:	2100      	movs	r1, #0
 8006dd0:	f007 ff26 	bl	800ec20 <memset>
  if(hi2s->Instance==SPI1)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a47      	ldr	r2, [pc, #284]	; (8006ef8 <HAL_I2S_MspInit+0x13c>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d000      	beq.n	8006de0 <HAL_I2S_MspInit+0x24>
 8006dde:	e086      	b.n	8006eee <HAL_I2S_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006de0:	4b46      	ldr	r3, [pc, #280]	; (8006efc <HAL_I2S_MspInit+0x140>)
 8006de2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006de4:	4b45      	ldr	r3, [pc, #276]	; (8006efc <HAL_I2S_MspInit+0x140>)
 8006de6:	2180      	movs	r1, #128	; 0x80
 8006de8:	0149      	lsls	r1, r1, #5
 8006dea:	430a      	orrs	r2, r1
 8006dec:	641a      	str	r2, [r3, #64]	; 0x40
 8006dee:	4b43      	ldr	r3, [pc, #268]	; (8006efc <HAL_I2S_MspInit+0x140>)
 8006df0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006df2:	2380      	movs	r3, #128	; 0x80
 8006df4:	015b      	lsls	r3, r3, #5
 8006df6:	4013      	ands	r3, r2
 8006df8:	613b      	str	r3, [r7, #16]
 8006dfa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dfc:	4b3f      	ldr	r3, [pc, #252]	; (8006efc <HAL_I2S_MspInit+0x140>)
 8006dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e00:	4b3e      	ldr	r3, [pc, #248]	; (8006efc <HAL_I2S_MspInit+0x140>)
 8006e02:	2101      	movs	r1, #1
 8006e04:	430a      	orrs	r2, r1
 8006e06:	635a      	str	r2, [r3, #52]	; 0x34
 8006e08:	4b3c      	ldr	r3, [pc, #240]	; (8006efc <HAL_I2S_MspInit+0x140>)
 8006e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	4013      	ands	r3, r2
 8006e10:	60fb      	str	r3, [r7, #12]
 8006e12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e14:	4b39      	ldr	r3, [pc, #228]	; (8006efc <HAL_I2S_MspInit+0x140>)
 8006e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e18:	4b38      	ldr	r3, [pc, #224]	; (8006efc <HAL_I2S_MspInit+0x140>)
 8006e1a:	2102      	movs	r1, #2
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	635a      	str	r2, [r3, #52]	; 0x34
 8006e20:	4b36      	ldr	r3, [pc, #216]	; (8006efc <HAL_I2S_MspInit+0x140>)
 8006e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e24:	2202      	movs	r2, #2
 8006e26:	4013      	ands	r3, r2
 8006e28:	60bb      	str	r3, [r7, #8]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006e2c:	193b      	adds	r3, r7, r4
 8006e2e:	2280      	movs	r2, #128	; 0x80
 8006e30:	0212      	lsls	r2, r2, #8
 8006e32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e34:	193b      	adds	r3, r7, r4
 8006e36:	2202      	movs	r2, #2
 8006e38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e3a:	193b      	adds	r3, r7, r4
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e40:	193b      	adds	r3, r7, r4
 8006e42:	2200      	movs	r2, #0
 8006e44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8006e46:	193b      	adds	r3, r7, r4
 8006e48:	2200      	movs	r2, #0
 8006e4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e4c:	193a      	adds	r2, r7, r4
 8006e4e:	23a0      	movs	r3, #160	; 0xa0
 8006e50:	05db      	lsls	r3, r3, #23
 8006e52:	0011      	movs	r1, r2
 8006e54:	0018      	movs	r0, r3
 8006e56:	f001 fa41 	bl	80082dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8006e5a:	0021      	movs	r1, r4
 8006e5c:	187b      	adds	r3, r7, r1
 8006e5e:	2238      	movs	r2, #56	; 0x38
 8006e60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e62:	187b      	adds	r3, r7, r1
 8006e64:	2202      	movs	r2, #2
 8006e66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e68:	187b      	adds	r3, r7, r1
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e6e:	187b      	adds	r3, r7, r1
 8006e70:	2200      	movs	r2, #0
 8006e72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8006e74:	187b      	adds	r3, r7, r1
 8006e76:	2200      	movs	r2, #0
 8006e78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e7a:	187b      	adds	r3, r7, r1
 8006e7c:	4a20      	ldr	r2, [pc, #128]	; (8006f00 <HAL_I2S_MspInit+0x144>)
 8006e7e:	0019      	movs	r1, r3
 8006e80:	0010      	movs	r0, r2
 8006e82:	f001 fa2b 	bl	80082dc <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8006e86:	4b1f      	ldr	r3, [pc, #124]	; (8006f04 <HAL_I2S_MspInit+0x148>)
 8006e88:	4a1f      	ldr	r2, [pc, #124]	; (8006f08 <HAL_I2S_MspInit+0x14c>)
 8006e8a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8006e8c:	4b1d      	ldr	r3, [pc, #116]	; (8006f04 <HAL_I2S_MspInit+0x148>)
 8006e8e:	2211      	movs	r2, #17
 8006e90:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e92:	4b1c      	ldr	r3, [pc, #112]	; (8006f04 <HAL_I2S_MspInit+0x148>)
 8006e94:	2210      	movs	r2, #16
 8006e96:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e98:	4b1a      	ldr	r3, [pc, #104]	; (8006f04 <HAL_I2S_MspInit+0x148>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006e9e:	4b19      	ldr	r3, [pc, #100]	; (8006f04 <HAL_I2S_MspInit+0x148>)
 8006ea0:	2280      	movs	r2, #128	; 0x80
 8006ea2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006ea4:	4b17      	ldr	r3, [pc, #92]	; (8006f04 <HAL_I2S_MspInit+0x148>)
 8006ea6:	2280      	movs	r2, #128	; 0x80
 8006ea8:	0052      	lsls	r2, r2, #1
 8006eaa:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006eac:	4b15      	ldr	r3, [pc, #84]	; (8006f04 <HAL_I2S_MspInit+0x148>)
 8006eae:	2280      	movs	r2, #128	; 0x80
 8006eb0:	00d2      	lsls	r2, r2, #3
 8006eb2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8006eb4:	4b13      	ldr	r3, [pc, #76]	; (8006f04 <HAL_I2S_MspInit+0x148>)
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006eba:	4b12      	ldr	r3, [pc, #72]	; (8006f04 <HAL_I2S_MspInit+0x148>)
 8006ebc:	22c0      	movs	r2, #192	; 0xc0
 8006ebe:	0192      	lsls	r2, r2, #6
 8006ec0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8006ec2:	4b10      	ldr	r3, [pc, #64]	; (8006f04 <HAL_I2S_MspInit+0x148>)
 8006ec4:	0018      	movs	r0, r3
 8006ec6:	f000 ff41 	bl	8007d4c <HAL_DMA_Init>
 8006eca:	1e03      	subs	r3, r0, #0
 8006ecc:	d001      	beq.n	8006ed2 <HAL_I2S_MspInit+0x116>
    {
      Error_Handler();
 8006ece:	f7ff febd 	bl	8006c4c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a0b      	ldr	r2, [pc, #44]	; (8006f04 <HAL_I2S_MspInit+0x148>)
 8006ed6:	62da      	str	r2, [r3, #44]	; 0x2c
 8006ed8:	4b0a      	ldr	r3, [pc, #40]	; (8006f04 <HAL_I2S_MspInit+0x148>)
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8006ede:	2200      	movs	r2, #0
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	2019      	movs	r0, #25
 8006ee4:	f000 ff00 	bl	8007ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8006ee8:	2019      	movs	r0, #25
 8006eea:	f000 ff12 	bl	8007d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006eee:	46c0      	nop			; (mov r8, r8)
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	b00b      	add	sp, #44	; 0x2c
 8006ef4:	bd90      	pop	{r4, r7, pc}
 8006ef6:	46c0      	nop			; (mov r8, r8)
 8006ef8:	40013000 	.word	0x40013000
 8006efc:	40021000 	.word	0x40021000
 8006f00:	50000400 	.word	0x50000400
 8006f04:	200014a8 	.word	0x200014a8
 8006f08:	40020008 	.word	0x40020008

08006f0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006f0c:	b590      	push	{r4, r7, lr}
 8006f0e:	b08b      	sub	sp, #44	; 0x2c
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f14:	2414      	movs	r4, #20
 8006f16:	193b      	adds	r3, r7, r4
 8006f18:	0018      	movs	r0, r3
 8006f1a:	2314      	movs	r3, #20
 8006f1c:	001a      	movs	r2, r3
 8006f1e:	2100      	movs	r1, #0
 8006f20:	f007 fe7e 	bl	800ec20 <memset>
  if(hspi->Instance==SPI2)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a54      	ldr	r2, [pc, #336]	; (800707c <HAL_SPI_MspInit+0x170>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d000      	beq.n	8006f30 <HAL_SPI_MspInit+0x24>
 8006f2e:	e0a0      	b.n	8007072 <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006f30:	4b53      	ldr	r3, [pc, #332]	; (8007080 <HAL_SPI_MspInit+0x174>)
 8006f32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f34:	4b52      	ldr	r3, [pc, #328]	; (8007080 <HAL_SPI_MspInit+0x174>)
 8006f36:	2180      	movs	r1, #128	; 0x80
 8006f38:	01c9      	lsls	r1, r1, #7
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	63da      	str	r2, [r3, #60]	; 0x3c
 8006f3e:	4b50      	ldr	r3, [pc, #320]	; (8007080 <HAL_SPI_MspInit+0x174>)
 8006f40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f42:	2380      	movs	r3, #128	; 0x80
 8006f44:	01db      	lsls	r3, r3, #7
 8006f46:	4013      	ands	r3, r2
 8006f48:	613b      	str	r3, [r7, #16]
 8006f4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f4c:	4b4c      	ldr	r3, [pc, #304]	; (8007080 <HAL_SPI_MspInit+0x174>)
 8006f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f50:	4b4b      	ldr	r3, [pc, #300]	; (8007080 <HAL_SPI_MspInit+0x174>)
 8006f52:	2102      	movs	r1, #2
 8006f54:	430a      	orrs	r2, r1
 8006f56:	635a      	str	r2, [r3, #52]	; 0x34
 8006f58:	4b49      	ldr	r3, [pc, #292]	; (8007080 <HAL_SPI_MspInit+0x174>)
 8006f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5c:	2202      	movs	r2, #2
 8006f5e:	4013      	ands	r3, r2
 8006f60:	60fb      	str	r3, [r7, #12]
 8006f62:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006f64:	193b      	adds	r3, r7, r4
 8006f66:	2240      	movs	r2, #64	; 0x40
 8006f68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f6a:	193b      	adds	r3, r7, r4
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f70:	193b      	adds	r3, r7, r4
 8006f72:	2200      	movs	r2, #0
 8006f74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f76:	193b      	adds	r3, r7, r4
 8006f78:	2200      	movs	r2, #0
 8006f7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8006f7c:	193b      	adds	r3, r7, r4
 8006f7e:	2204      	movs	r2, #4
 8006f80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f82:	193b      	adds	r3, r7, r4
 8006f84:	4a3f      	ldr	r2, [pc, #252]	; (8007084 <HAL_SPI_MspInit+0x178>)
 8006f86:	0019      	movs	r1, r3
 8006f88:	0010      	movs	r0, r2
 8006f8a:	f001 f9a7 	bl	80082dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8006f8e:	0021      	movs	r1, r4
 8006f90:	187b      	adds	r3, r7, r1
 8006f92:	22c0      	movs	r2, #192	; 0xc0
 8006f94:	0052      	lsls	r2, r2, #1
 8006f96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f98:	187b      	adds	r3, r7, r1
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f9e:	187b      	adds	r3, r7, r1
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fa4:	187b      	adds	r3, r7, r1
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8006faa:	187b      	adds	r3, r7, r1
 8006fac:	2201      	movs	r2, #1
 8006fae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fb0:	187b      	adds	r3, r7, r1
 8006fb2:	4a34      	ldr	r2, [pc, #208]	; (8007084 <HAL_SPI_MspInit+0x178>)
 8006fb4:	0019      	movs	r1, r3
 8006fb6:	0010      	movs	r0, r2
 8006fb8:	f001 f990 	bl	80082dc <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel2;
 8006fbc:	4b32      	ldr	r3, [pc, #200]	; (8007088 <HAL_SPI_MspInit+0x17c>)
 8006fbe:	4a33      	ldr	r2, [pc, #204]	; (800708c <HAL_SPI_MspInit+0x180>)
 8006fc0:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8006fc2:	4b31      	ldr	r3, [pc, #196]	; (8007088 <HAL_SPI_MspInit+0x17c>)
 8006fc4:	2212      	movs	r2, #18
 8006fc6:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006fc8:	4b2f      	ldr	r3, [pc, #188]	; (8007088 <HAL_SPI_MspInit+0x17c>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006fce:	4b2e      	ldr	r3, [pc, #184]	; (8007088 <HAL_SPI_MspInit+0x17c>)
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006fd4:	4b2c      	ldr	r3, [pc, #176]	; (8007088 <HAL_SPI_MspInit+0x17c>)
 8006fd6:	2280      	movs	r2, #128	; 0x80
 8006fd8:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006fda:	4b2b      	ldr	r3, [pc, #172]	; (8007088 <HAL_SPI_MspInit+0x17c>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006fe0:	4b29      	ldr	r3, [pc, #164]	; (8007088 <HAL_SPI_MspInit+0x17c>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8006fe6:	4b28      	ldr	r3, [pc, #160]	; (8007088 <HAL_SPI_MspInit+0x17c>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006fec:	4b26      	ldr	r3, [pc, #152]	; (8007088 <HAL_SPI_MspInit+0x17c>)
 8006fee:	2280      	movs	r2, #128	; 0x80
 8006ff0:	0192      	lsls	r2, r2, #6
 8006ff2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8006ff4:	4b24      	ldr	r3, [pc, #144]	; (8007088 <HAL_SPI_MspInit+0x17c>)
 8006ff6:	0018      	movs	r0, r3
 8006ff8:	f000 fea8 	bl	8007d4c <HAL_DMA_Init>
 8006ffc:	1e03      	subs	r3, r0, #0
 8006ffe:	d001      	beq.n	8007004 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 8007000:	f7ff fe24 	bl	8006c4c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a20      	ldr	r2, [pc, #128]	; (8007088 <HAL_SPI_MspInit+0x17c>)
 8007008:	659a      	str	r2, [r3, #88]	; 0x58
 800700a:	4b1f      	ldr	r3, [pc, #124]	; (8007088 <HAL_SPI_MspInit+0x17c>)
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel3;
 8007010:	4b1f      	ldr	r3, [pc, #124]	; (8007090 <HAL_SPI_MspInit+0x184>)
 8007012:	4a20      	ldr	r2, [pc, #128]	; (8007094 <HAL_SPI_MspInit+0x188>)
 8007014:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8007016:	4b1e      	ldr	r3, [pc, #120]	; (8007090 <HAL_SPI_MspInit+0x184>)
 8007018:	2213      	movs	r2, #19
 800701a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800701c:	4b1c      	ldr	r3, [pc, #112]	; (8007090 <HAL_SPI_MspInit+0x184>)
 800701e:	2210      	movs	r2, #16
 8007020:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007022:	4b1b      	ldr	r3, [pc, #108]	; (8007090 <HAL_SPI_MspInit+0x184>)
 8007024:	2200      	movs	r2, #0
 8007026:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007028:	4b19      	ldr	r3, [pc, #100]	; (8007090 <HAL_SPI_MspInit+0x184>)
 800702a:	2280      	movs	r2, #128	; 0x80
 800702c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800702e:	4b18      	ldr	r3, [pc, #96]	; (8007090 <HAL_SPI_MspInit+0x184>)
 8007030:	2200      	movs	r2, #0
 8007032:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007034:	4b16      	ldr	r3, [pc, #88]	; (8007090 <HAL_SPI_MspInit+0x184>)
 8007036:	2200      	movs	r2, #0
 8007038:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800703a:	4b15      	ldr	r3, [pc, #84]	; (8007090 <HAL_SPI_MspInit+0x184>)
 800703c:	2200      	movs	r2, #0
 800703e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007040:	4b13      	ldr	r3, [pc, #76]	; (8007090 <HAL_SPI_MspInit+0x184>)
 8007042:	2200      	movs	r2, #0
 8007044:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8007046:	4b12      	ldr	r3, [pc, #72]	; (8007090 <HAL_SPI_MspInit+0x184>)
 8007048:	0018      	movs	r0, r3
 800704a:	f000 fe7f 	bl	8007d4c <HAL_DMA_Init>
 800704e:	1e03      	subs	r3, r0, #0
 8007050:	d001      	beq.n	8007056 <HAL_SPI_MspInit+0x14a>
    {
      Error_Handler();
 8007052:	f7ff fdfb 	bl	8006c4c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a0d      	ldr	r2, [pc, #52]	; (8007090 <HAL_SPI_MspInit+0x184>)
 800705a:	655a      	str	r2, [r3, #84]	; 0x54
 800705c:	4b0c      	ldr	r3, [pc, #48]	; (8007090 <HAL_SPI_MspInit+0x184>)
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8007062:	2200      	movs	r2, #0
 8007064:	2100      	movs	r1, #0
 8007066:	201a      	movs	r0, #26
 8007068:	f000 fe3e 	bl	8007ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800706c:	201a      	movs	r0, #26
 800706e:	f000 fe50 	bl	8007d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007072:	46c0      	nop			; (mov r8, r8)
 8007074:	46bd      	mov	sp, r7
 8007076:	b00b      	add	sp, #44	; 0x2c
 8007078:	bd90      	pop	{r4, r7, pc}
 800707a:	46c0      	nop			; (mov r8, r8)
 800707c:	40003800 	.word	0x40003800
 8007080:	40021000 	.word	0x40021000
 8007084:	50000400 	.word	0x50000400
 8007088:	200001a4 	.word	0x200001a4
 800708c:	4002001c 	.word	0x4002001c
 8007090:	20001448 	.word	0x20001448
 8007094:	40020030 	.word	0x40020030

08007098 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a0a      	ldr	r2, [pc, #40]	; (80070d0 <HAL_TIM_Base_MspInit+0x38>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d10d      	bne.n	80070c6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80070aa:	4b0a      	ldr	r3, [pc, #40]	; (80070d4 <HAL_TIM_Base_MspInit+0x3c>)
 80070ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070ae:	4b09      	ldr	r3, [pc, #36]	; (80070d4 <HAL_TIM_Base_MspInit+0x3c>)
 80070b0:	2180      	movs	r1, #128	; 0x80
 80070b2:	0109      	lsls	r1, r1, #4
 80070b4:	430a      	orrs	r2, r1
 80070b6:	641a      	str	r2, [r3, #64]	; 0x40
 80070b8:	4b06      	ldr	r3, [pc, #24]	; (80070d4 <HAL_TIM_Base_MspInit+0x3c>)
 80070ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070bc:	2380      	movs	r3, #128	; 0x80
 80070be:	011b      	lsls	r3, r3, #4
 80070c0:	4013      	ands	r3, r2
 80070c2:	60fb      	str	r3, [r7, #12]
 80070c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80070c6:	46c0      	nop			; (mov r8, r8)
 80070c8:	46bd      	mov	sp, r7
 80070ca:	b004      	add	sp, #16
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	46c0      	nop			; (mov r8, r8)
 80070d0:	40012c00 	.word	0x40012c00
 80070d4:	40021000 	.word	0x40021000

080070d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80070d8:	b590      	push	{r4, r7, lr}
 80070da:	b089      	sub	sp, #36	; 0x24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070e0:	240c      	movs	r4, #12
 80070e2:	193b      	adds	r3, r7, r4
 80070e4:	0018      	movs	r0, r3
 80070e6:	2314      	movs	r3, #20
 80070e8:	001a      	movs	r2, r3
 80070ea:	2100      	movs	r1, #0
 80070ec:	f007 fd98 	bl	800ec20 <memset>
  if(htim->Instance==TIM1)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a15      	ldr	r2, [pc, #84]	; (800714c <HAL_TIM_MspPostInit+0x74>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d123      	bne.n	8007142 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070fa:	4b15      	ldr	r3, [pc, #84]	; (8007150 <HAL_TIM_MspPostInit+0x78>)
 80070fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070fe:	4b14      	ldr	r3, [pc, #80]	; (8007150 <HAL_TIM_MspPostInit+0x78>)
 8007100:	2101      	movs	r1, #1
 8007102:	430a      	orrs	r2, r1
 8007104:	635a      	str	r2, [r3, #52]	; 0x34
 8007106:	4b12      	ldr	r3, [pc, #72]	; (8007150 <HAL_TIM_MspPostInit+0x78>)
 8007108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800710a:	2201      	movs	r2, #1
 800710c:	4013      	ands	r3, r2
 800710e:	60bb      	str	r3, [r7, #8]
 8007110:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007112:	193b      	adds	r3, r7, r4
 8007114:	2280      	movs	r2, #128	; 0x80
 8007116:	0052      	lsls	r2, r2, #1
 8007118:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800711a:	0021      	movs	r1, r4
 800711c:	187b      	adds	r3, r7, r1
 800711e:	2202      	movs	r2, #2
 8007120:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007122:	187b      	adds	r3, r7, r1
 8007124:	2202      	movs	r2, #2
 8007126:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007128:	187b      	adds	r3, r7, r1
 800712a:	2203      	movs	r2, #3
 800712c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800712e:	187b      	adds	r3, r7, r1
 8007130:	2202      	movs	r2, #2
 8007132:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007134:	187a      	adds	r2, r7, r1
 8007136:	23a0      	movs	r3, #160	; 0xa0
 8007138:	05db      	lsls	r3, r3, #23
 800713a:	0011      	movs	r1, r2
 800713c:	0018      	movs	r0, r3
 800713e:	f001 f8cd 	bl	80082dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8007142:	46c0      	nop			; (mov r8, r8)
 8007144:	46bd      	mov	sp, r7
 8007146:	b009      	add	sp, #36	; 0x24
 8007148:	bd90      	pop	{r4, r7, pc}
 800714a:	46c0      	nop			; (mov r8, r8)
 800714c:	40012c00 	.word	0x40012c00
 8007150:	40021000 	.word	0x40021000

08007154 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8007154:	b590      	push	{r4, r7, lr}
 8007156:	b08b      	sub	sp, #44	; 0x2c
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800715c:	2414      	movs	r4, #20
 800715e:	193b      	adds	r3, r7, r4
 8007160:	0018      	movs	r0, r3
 8007162:	2314      	movs	r3, #20
 8007164:	001a      	movs	r2, r3
 8007166:	2100      	movs	r1, #0
 8007168:	f007 fd5a 	bl	800ec20 <memset>
  if(husart->Instance==USART3)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a45      	ldr	r2, [pc, #276]	; (8007288 <HAL_USART_MspInit+0x134>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d000      	beq.n	8007178 <HAL_USART_MspInit+0x24>
 8007176:	e083      	b.n	8007280 <HAL_USART_MspInit+0x12c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007178:	4b44      	ldr	r3, [pc, #272]	; (800728c <HAL_USART_MspInit+0x138>)
 800717a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800717c:	4b43      	ldr	r3, [pc, #268]	; (800728c <HAL_USART_MspInit+0x138>)
 800717e:	2180      	movs	r1, #128	; 0x80
 8007180:	02c9      	lsls	r1, r1, #11
 8007182:	430a      	orrs	r2, r1
 8007184:	63da      	str	r2, [r3, #60]	; 0x3c
 8007186:	4b41      	ldr	r3, [pc, #260]	; (800728c <HAL_USART_MspInit+0x138>)
 8007188:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800718a:	2380      	movs	r3, #128	; 0x80
 800718c:	02db      	lsls	r3, r3, #11
 800718e:	4013      	ands	r3, r2
 8007190:	613b      	str	r3, [r7, #16]
 8007192:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007194:	4b3d      	ldr	r3, [pc, #244]	; (800728c <HAL_USART_MspInit+0x138>)
 8007196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007198:	4b3c      	ldr	r3, [pc, #240]	; (800728c <HAL_USART_MspInit+0x138>)
 800719a:	2101      	movs	r1, #1
 800719c:	430a      	orrs	r2, r1
 800719e:	635a      	str	r2, [r3, #52]	; 0x34
 80071a0:	4b3a      	ldr	r3, [pc, #232]	; (800728c <HAL_USART_MspInit+0x138>)
 80071a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a4:	2201      	movs	r2, #1
 80071a6:	4013      	ands	r3, r2
 80071a8:	60fb      	str	r3, [r7, #12]
 80071aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071ac:	4b37      	ldr	r3, [pc, #220]	; (800728c <HAL_USART_MspInit+0x138>)
 80071ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071b0:	4b36      	ldr	r3, [pc, #216]	; (800728c <HAL_USART_MspInit+0x138>)
 80071b2:	2102      	movs	r1, #2
 80071b4:	430a      	orrs	r2, r1
 80071b6:	635a      	str	r2, [r3, #52]	; 0x34
 80071b8:	4b34      	ldr	r3, [pc, #208]	; (800728c <HAL_USART_MspInit+0x138>)
 80071ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071bc:	2202      	movs	r2, #2
 80071be:	4013      	ands	r3, r2
 80071c0:	60bb      	str	r3, [r7, #8]
 80071c2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80071c4:	193b      	adds	r3, r7, r4
 80071c6:	2220      	movs	r2, #32
 80071c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071ca:	193b      	adds	r3, r7, r4
 80071cc:	2202      	movs	r2, #2
 80071ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071d0:	193b      	adds	r3, r7, r4
 80071d2:	2200      	movs	r2, #0
 80071d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071d6:	193b      	adds	r3, r7, r4
 80071d8:	2203      	movs	r2, #3
 80071da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80071dc:	193b      	adds	r3, r7, r4
 80071de:	2204      	movs	r2, #4
 80071e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071e2:	193a      	adds	r2, r7, r4
 80071e4:	23a0      	movs	r3, #160	; 0xa0
 80071e6:	05db      	lsls	r3, r3, #23
 80071e8:	0011      	movs	r1, r2
 80071ea:	0018      	movs	r0, r3
 80071ec:	f001 f876 	bl	80082dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80071f0:	0021      	movs	r1, r4
 80071f2:	187b      	adds	r3, r7, r1
 80071f4:	2203      	movs	r2, #3
 80071f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071f8:	187b      	adds	r3, r7, r1
 80071fa:	2202      	movs	r2, #2
 80071fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071fe:	187b      	adds	r3, r7, r1
 8007200:	2200      	movs	r2, #0
 8007202:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007204:	187b      	adds	r3, r7, r1
 8007206:	2203      	movs	r2, #3
 8007208:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800720a:	187b      	adds	r3, r7, r1
 800720c:	2204      	movs	r2, #4
 800720e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007210:	187b      	adds	r3, r7, r1
 8007212:	4a1f      	ldr	r2, [pc, #124]	; (8007290 <HAL_USART_MspInit+0x13c>)
 8007214:	0019      	movs	r1, r3
 8007216:	0010      	movs	r0, r2
 8007218:	f001 f860 	bl	80082dc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel4;
 800721c:	4b1d      	ldr	r3, [pc, #116]	; (8007294 <HAL_USART_MspInit+0x140>)
 800721e:	4a1e      	ldr	r2, [pc, #120]	; (8007298 <HAL_USART_MspInit+0x144>)
 8007220:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8007222:	4b1c      	ldr	r3, [pc, #112]	; (8007294 <HAL_USART_MspInit+0x140>)
 8007224:	2237      	movs	r2, #55	; 0x37
 8007226:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007228:	4b1a      	ldr	r3, [pc, #104]	; (8007294 <HAL_USART_MspInit+0x140>)
 800722a:	2210      	movs	r2, #16
 800722c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800722e:	4b19      	ldr	r3, [pc, #100]	; (8007294 <HAL_USART_MspInit+0x140>)
 8007230:	2200      	movs	r2, #0
 8007232:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007234:	4b17      	ldr	r3, [pc, #92]	; (8007294 <HAL_USART_MspInit+0x140>)
 8007236:	2280      	movs	r2, #128	; 0x80
 8007238:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800723a:	4b16      	ldr	r3, [pc, #88]	; (8007294 <HAL_USART_MspInit+0x140>)
 800723c:	2200      	movs	r2, #0
 800723e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007240:	4b14      	ldr	r3, [pc, #80]	; (8007294 <HAL_USART_MspInit+0x140>)
 8007242:	2200      	movs	r2, #0
 8007244:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8007246:	4b13      	ldr	r3, [pc, #76]	; (8007294 <HAL_USART_MspInit+0x140>)
 8007248:	2200      	movs	r2, #0
 800724a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800724c:	4b11      	ldr	r3, [pc, #68]	; (8007294 <HAL_USART_MspInit+0x140>)
 800724e:	2280      	movs	r2, #128	; 0x80
 8007250:	0192      	lsls	r2, r2, #6
 8007252:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8007254:	4b0f      	ldr	r3, [pc, #60]	; (8007294 <HAL_USART_MspInit+0x140>)
 8007256:	0018      	movs	r0, r3
 8007258:	f000 fd78 	bl	8007d4c <HAL_DMA_Init>
 800725c:	1e03      	subs	r3, r0, #0
 800725e:	d001      	beq.n	8007264 <HAL_USART_MspInit+0x110>
    {
      Error_Handler();
 8007260:	f7ff fcf4 	bl	8006c4c <Error_Handler>
    }

    __HAL_LINKDMA(husart,hdmatx,hdma_usart3_tx);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a0b      	ldr	r2, [pc, #44]	; (8007294 <HAL_USART_MspInit+0x140>)
 8007268:	651a      	str	r2, [r3, #80]	; 0x50
 800726a:	4b0a      	ldr	r3, [pc, #40]	; (8007294 <HAL_USART_MspInit+0x140>)
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8007270:	2200      	movs	r2, #0
 8007272:	2100      	movs	r1, #0
 8007274:	201d      	movs	r0, #29
 8007276:	f000 fd37 	bl	8007ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 800727a:	201d      	movs	r0, #29
 800727c:	f000 fd49 	bl	8007d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007280:	46c0      	nop			; (mov r8, r8)
 8007282:	46bd      	mov	sp, r7
 8007284:	b00b      	add	sp, #44	; 0x2c
 8007286:	bd90      	pop	{r4, r7, pc}
 8007288:	40004800 	.word	0x40004800
 800728c:	40021000 	.word	0x40021000
 8007290:	50000400 	.word	0x50000400
 8007294:	20000208 	.word	0x20000208
 8007298:	40020044 	.word	0x40020044

0800729c <LL_USART_IsActiveFlag_FE>:
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	69db      	ldr	r3, [r3, #28]
 80072a8:	2202      	movs	r2, #2
 80072aa:	4013      	ands	r3, r2
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d101      	bne.n	80072b4 <LL_USART_IsActiveFlag_FE+0x18>
 80072b0:	2301      	movs	r3, #1
 80072b2:	e000      	b.n	80072b6 <LL_USART_IsActiveFlag_FE+0x1a>
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	0018      	movs	r0, r3
 80072b8:	46bd      	mov	sp, r7
 80072ba:	b002      	add	sp, #8
 80072bc:	bd80      	pop	{r7, pc}

080072be <LL_USART_IsActiveFlag_NE>:
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b082      	sub	sp, #8
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	2204      	movs	r2, #4
 80072cc:	4013      	ands	r3, r2
 80072ce:	2b04      	cmp	r3, #4
 80072d0:	d101      	bne.n	80072d6 <LL_USART_IsActiveFlag_NE+0x18>
 80072d2:	2301      	movs	r3, #1
 80072d4:	e000      	b.n	80072d8 <LL_USART_IsActiveFlag_NE+0x1a>
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	0018      	movs	r0, r3
 80072da:	46bd      	mov	sp, r7
 80072dc:	b002      	add	sp, #8
 80072de:	bd80      	pop	{r7, pc}

080072e0 <LL_USART_IsActiveFlag_ORE>:
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	69db      	ldr	r3, [r3, #28]
 80072ec:	2208      	movs	r2, #8
 80072ee:	4013      	ands	r3, r2
 80072f0:	2b08      	cmp	r3, #8
 80072f2:	d101      	bne.n	80072f8 <LL_USART_IsActiveFlag_ORE+0x18>
 80072f4:	2301      	movs	r3, #1
 80072f6:	e000      	b.n	80072fa <LL_USART_IsActiveFlag_ORE+0x1a>
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	0018      	movs	r0, r3
 80072fc:	46bd      	mov	sp, r7
 80072fe:	b002      	add	sp, #8
 8007300:	bd80      	pop	{r7, pc}

08007302 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b082      	sub	sp, #8
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	2220      	movs	r2, #32
 8007310:	4013      	ands	r3, r2
 8007312:	2b20      	cmp	r3, #32
 8007314:	d101      	bne.n	800731a <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8007316:	2301      	movs	r3, #1
 8007318:	e000      	b.n	800731c <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 800731a:	2300      	movs	r3, #0
}
 800731c:	0018      	movs	r0, r3
 800731e:	46bd      	mov	sp, r7
 8007320:	b002      	add	sp, #8
 8007322:	bd80      	pop	{r7, pc}

08007324 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2220      	movs	r2, #32
 8007332:	4013      	ands	r3, r2
 8007334:	2b20      	cmp	r3, #32
 8007336:	d101      	bne.n	800733c <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8007338:	2301      	movs	r3, #1
 800733a:	e000      	b.n	800733e <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 800733c:	2300      	movs	r3, #0
}
 800733e:	0018      	movs	r0, r3
 8007340:	46bd      	mov	sp, r7
 8007342:	b002      	add	sp, #8
 8007344:	bd80      	pop	{r7, pc}

08007346 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800734a:	46c0      	nop			; (mov r8, r8)
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007354:	e7fe      	b.n	8007354 <HardFault_Handler+0x4>

08007356 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800735a:	46c0      	nop			; (mov r8, r8)
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007364:	46c0      	nop			; (mov r8, r8)
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800736e:	f000 f959 	bl	8007624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007372:	46c0      	nop			; (mov r8, r8)
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800737c:	4b03      	ldr	r3, [pc, #12]	; (800738c <DMA1_Channel1_IRQHandler+0x14>)
 800737e:	0018      	movs	r0, r3
 8007380:	f000 fe5e 	bl	8008040 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007384:	46c0      	nop			; (mov r8, r8)
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	46c0      	nop			; (mov r8, r8)
 800738c:	200014a8 	.word	0x200014a8

08007390 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

//	HAL_SPI_RxCpltCallback(&hspi2);
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8007394:	4b05      	ldr	r3, [pc, #20]	; (80073ac <DMA1_Channel2_3_IRQHandler+0x1c>)
 8007396:	0018      	movs	r0, r3
 8007398:	f000 fe52 	bl	8008040 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800739c:	4b04      	ldr	r3, [pc, #16]	; (80073b0 <DMA1_Channel2_3_IRQHandler+0x20>)
 800739e:	0018      	movs	r0, r3
 80073a0:	f000 fe4e 	bl	8008040 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80073a4:	46c0      	nop			; (mov r8, r8)
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	46c0      	nop			; (mov r8, r8)
 80073ac:	200001a4 	.word	0x200001a4
 80073b0:	20001448 	.word	0x20001448

080073b4 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
//		GPIOA->ODR |= 1 << 11;	//set test 1
//		GPIOA->ODR &= ~(1 << 11);	//reset test 1
  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80073b8:	4b03      	ldr	r3, [pc, #12]	; (80073c8 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 80073ba:	0018      	movs	r0, r3
 80073bc:	f000 fe40 	bl	8008040 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 80073c0:	46c0      	nop			; (mov r8, r8)
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	46c0      	nop			; (mov r8, r8)
 80073c8:	20000208 	.word	0x20000208

080073cc <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80073d0:	4b09      	ldr	r3, [pc, #36]	; (80073f8 <I2C1_IRQHandler+0x2c>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	699a      	ldr	r2, [r3, #24]
 80073d6:	23e0      	movs	r3, #224	; 0xe0
 80073d8:	00db      	lsls	r3, r3, #3
 80073da:	4013      	ands	r3, r2
 80073dc:	d004      	beq.n	80073e8 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80073de:	4b06      	ldr	r3, [pc, #24]	; (80073f8 <I2C1_IRQHandler+0x2c>)
 80073e0:	0018      	movs	r0, r3
 80073e2:	f001 fa97 	bl	8008914 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80073e6:	e003      	b.n	80073f0 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80073e8:	4b03      	ldr	r3, [pc, #12]	; (80073f8 <I2C1_IRQHandler+0x2c>)
 80073ea:	0018      	movs	r0, r3
 80073ec:	f001 fa78 	bl	80088e0 <HAL_I2C_EV_IRQHandler>
}
 80073f0:	46c0      	nop			; (mov r8, r8)
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	46c0      	nop			; (mov r8, r8)
 80073f8:	20000144 	.word	0x20000144

080073fc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8007400:	4b03      	ldr	r3, [pc, #12]	; (8007410 <SPI1_IRQHandler+0x14>)
 8007402:	0018      	movs	r0, r3
 8007404:	f002 fcf4 	bl	8009df0 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8007408:	46c0      	nop			; (mov r8, r8)
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	46c0      	nop			; (mov r8, r8)
 8007410:	20001380 	.word	0x20001380

08007414 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8007418:	4b03      	ldr	r3, [pc, #12]	; (8007428 <SPI2_IRQHandler+0x14>)
 800741a:	0018      	movs	r0, r3
 800741c:	f004 fda0 	bl	800bf60 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8007420:	46c0      	nop			; (mov r8, r8)
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	46c0      	nop			; (mov r8, r8)
 8007428:	200000b4 	.word	0x200000b4

0800742c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 8007430:	4b25      	ldr	r3, [pc, #148]	; (80074c8 <USART2_IRQHandler+0x9c>)
 8007432:	6a1a      	ldr	r2, [r3, #32]
 8007434:	4b24      	ldr	r3, [pc, #144]	; (80074c8 <USART2_IRQHandler+0x9c>)
 8007436:	2108      	movs	r1, #8
 8007438:	430a      	orrs	r2, r1
 800743a:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 800743c:	4b22      	ldr	r3, [pc, #136]	; (80074c8 <USART2_IRQHandler+0x9c>)
 800743e:	6a1a      	ldr	r2, [r3, #32]
 8007440:	4b21      	ldr	r3, [pc, #132]	; (80074c8 <USART2_IRQHandler+0x9c>)
 8007442:	2102      	movs	r1, #2
 8007444:	430a      	orrs	r2, r1
 8007446:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 8007448:	4b1f      	ldr	r3, [pc, #124]	; (80074c8 <USART2_IRQHandler+0x9c>)
 800744a:	6a1a      	ldr	r2, [r3, #32]
 800744c:	4b1e      	ldr	r3, [pc, #120]	; (80074c8 <USART2_IRQHandler+0x9c>)
 800744e:	2104      	movs	r1, #4
 8007450:	430a      	orrs	r2, r1
 8007452:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 8007454:	4b1c      	ldr	r3, [pc, #112]	; (80074c8 <USART2_IRQHandler+0x9c>)
 8007456:	0018      	movs	r0, r3
 8007458:	f7ff ff53 	bl	8007302 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 800745c:	1e03      	subs	r3, r0, #0
 800745e:	d009      	beq.n	8007474 <USART2_IRQHandler+0x48>
 8007460:	4b19      	ldr	r3, [pc, #100]	; (80074c8 <USART2_IRQHandler+0x9c>)
 8007462:	0018      	movs	r0, r3
 8007464:	f7ff ff5e 	bl	8007324 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8007468:	1e03      	subs	r3, r0, #0
 800746a:	d003      	beq.n	8007474 <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 800746c:	f7fb fe2a 	bl	80030c4 <USART2_RX_Callback>
	  {
 8007470:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007472:	e025      	b.n	80074c0 <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 8007474:	4b14      	ldr	r3, [pc, #80]	; (80074c8 <USART2_IRQHandler+0x9c>)
 8007476:	6a1a      	ldr	r2, [r3, #32]
 8007478:	4b13      	ldr	r3, [pc, #76]	; (80074c8 <USART2_IRQHandler+0x9c>)
 800747a:	2108      	movs	r1, #8
 800747c:	430a      	orrs	r2, r1
 800747e:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 8007480:	4b11      	ldr	r3, [pc, #68]	; (80074c8 <USART2_IRQHandler+0x9c>)
 8007482:	0018      	movs	r0, r3
 8007484:	f7ff ff2c 	bl	80072e0 <LL_USART_IsActiveFlag_ORE>
 8007488:	1e03      	subs	r3, r0, #0
 800748a:	d008      	beq.n	800749e <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 800748c:	4b0e      	ldr	r3, [pc, #56]	; (80074c8 <USART2_IRQHandler+0x9c>)
 800748e:	6a1a      	ldr	r2, [r3, #32]
 8007490:	4b0d      	ldr	r3, [pc, #52]	; (80074c8 <USART2_IRQHandler+0x9c>)
 8007492:	2108      	movs	r1, #8
 8007494:	430a      	orrs	r2, r1
 8007496:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 8007498:	4b0b      	ldr	r3, [pc, #44]	; (80074c8 <USART2_IRQHandler+0x9c>)
 800749a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800749c:	e010      	b.n	80074c0 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 800749e:	4b0a      	ldr	r3, [pc, #40]	; (80074c8 <USART2_IRQHandler+0x9c>)
 80074a0:	0018      	movs	r0, r3
 80074a2:	f7ff fefb 	bl	800729c <LL_USART_IsActiveFlag_FE>
 80074a6:	1e03      	subs	r3, r0, #0
 80074a8:	d002      	beq.n	80074b0 <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 80074aa:	4b07      	ldr	r3, [pc, #28]	; (80074c8 <USART2_IRQHandler+0x9c>)
 80074ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80074ae:	e007      	b.n	80074c0 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 80074b0:	4b05      	ldr	r3, [pc, #20]	; (80074c8 <USART2_IRQHandler+0x9c>)
 80074b2:	0018      	movs	r0, r3
 80074b4:	f7ff ff03 	bl	80072be <LL_USART_IsActiveFlag_NE>
 80074b8:	1e03      	subs	r3, r0, #0
 80074ba:	d001      	beq.n	80074c0 <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 80074bc:	4b02      	ldr	r3, [pc, #8]	; (80074c8 <USART2_IRQHandler+0x9c>)
 80074be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80074c0:	46c0      	nop			; (mov r8, r8)
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	46c0      	nop			; (mov r8, r8)
 80074c8:	40004400 	.word	0x40004400

080074cc <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 80074d0:	4b03      	ldr	r3, [pc, #12]	; (80074e0 <USART3_4_LPUART1_IRQHandler+0x14>)
 80074d2:	0018      	movs	r0, r3
 80074d4:	f006 fa52 	bl	800d97c <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 80074d8:	46c0      	nop			; (mov r8, r8)
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	46c0      	nop			; (mov r8, r8)
 80074e0:	200002a4 	.word	0x200002a4

080074e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80074e8:	4b03      	ldr	r3, [pc, #12]	; (80074f8 <SystemInit+0x14>)
 80074ea:	2280      	movs	r2, #128	; 0x80
 80074ec:	0512      	lsls	r2, r2, #20
 80074ee:	609a      	str	r2, [r3, #8]
#endif
}
 80074f0:	46c0      	nop			; (mov r8, r8)
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	46c0      	nop			; (mov r8, r8)
 80074f8:	e000ed00 	.word	0xe000ed00

080074fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80074fc:	480d      	ldr	r0, [pc, #52]	; (8007534 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80074fe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007500:	f7ff fff0 	bl	80074e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007504:	480c      	ldr	r0, [pc, #48]	; (8007538 <LoopForever+0x6>)
  ldr r1, =_edata
 8007506:	490d      	ldr	r1, [pc, #52]	; (800753c <LoopForever+0xa>)
  ldr r2, =_sidata
 8007508:	4a0d      	ldr	r2, [pc, #52]	; (8007540 <LoopForever+0xe>)
  movs r3, #0
 800750a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800750c:	e002      	b.n	8007514 <LoopCopyDataInit>

0800750e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800750e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007512:	3304      	adds	r3, #4

08007514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007518:	d3f9      	bcc.n	800750e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800751a:	4a0a      	ldr	r2, [pc, #40]	; (8007544 <LoopForever+0x12>)
  ldr r4, =_ebss
 800751c:	4c0a      	ldr	r4, [pc, #40]	; (8007548 <LoopForever+0x16>)
  movs r3, #0
 800751e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007520:	e001      	b.n	8007526 <LoopFillZerobss>

08007522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007524:	3204      	adds	r2, #4

08007526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007528:	d3fb      	bcc.n	8007522 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800752a:	f007 fb55 	bl	800ebd8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800752e:	f7fa ff5d 	bl	80023ec <main>

08007532 <LoopForever>:

LoopForever:
  b LoopForever
 8007532:	e7fe      	b.n	8007532 <LoopForever>
  ldr   r0, =_estack
 8007534:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8007538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800753c:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8007540:	0801b9c0 	.word	0x0801b9c0
  ldr r2, =_sbss
 8007544:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8007548:	2000352c 	.word	0x2000352c

0800754c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800754c:	e7fe      	b.n	800754c <ADC1_COMP_IRQHandler>
	...

08007550 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007556:	1dfb      	adds	r3, r7, #7
 8007558:	2200      	movs	r2, #0
 800755a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800755c:	4b0b      	ldr	r3, [pc, #44]	; (800758c <HAL_Init+0x3c>)
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	4b0a      	ldr	r3, [pc, #40]	; (800758c <HAL_Init+0x3c>)
 8007562:	2180      	movs	r1, #128	; 0x80
 8007564:	0049      	lsls	r1, r1, #1
 8007566:	430a      	orrs	r2, r1
 8007568:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800756a:	2000      	movs	r0, #0
 800756c:	f000 f810 	bl	8007590 <HAL_InitTick>
 8007570:	1e03      	subs	r3, r0, #0
 8007572:	d003      	beq.n	800757c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8007574:	1dfb      	adds	r3, r7, #7
 8007576:	2201      	movs	r2, #1
 8007578:	701a      	strb	r2, [r3, #0]
 800757a:	e001      	b.n	8007580 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800757c:	f7ff fb6c 	bl	8006c58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007580:	1dfb      	adds	r3, r7, #7
 8007582:	781b      	ldrb	r3, [r3, #0]
}
 8007584:	0018      	movs	r0, r3
 8007586:	46bd      	mov	sp, r7
 8007588:	b002      	add	sp, #8
 800758a:	bd80      	pop	{r7, pc}
 800758c:	40022000 	.word	0x40022000

08007590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007590:	b590      	push	{r4, r7, lr}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007598:	230f      	movs	r3, #15
 800759a:	18fb      	adds	r3, r7, r3
 800759c:	2200      	movs	r2, #0
 800759e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80075a0:	4b1d      	ldr	r3, [pc, #116]	; (8007618 <HAL_InitTick+0x88>)
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d02b      	beq.n	8007600 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80075a8:	4b1c      	ldr	r3, [pc, #112]	; (800761c <HAL_InitTick+0x8c>)
 80075aa:	681c      	ldr	r4, [r3, #0]
 80075ac:	4b1a      	ldr	r3, [pc, #104]	; (8007618 <HAL_InitTick+0x88>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	0019      	movs	r1, r3
 80075b2:	23fa      	movs	r3, #250	; 0xfa
 80075b4:	0098      	lsls	r0, r3, #2
 80075b6:	f7f8 fda5 	bl	8000104 <__udivsi3>
 80075ba:	0003      	movs	r3, r0
 80075bc:	0019      	movs	r1, r3
 80075be:	0020      	movs	r0, r4
 80075c0:	f7f8 fda0 	bl	8000104 <__udivsi3>
 80075c4:	0003      	movs	r3, r0
 80075c6:	0018      	movs	r0, r3
 80075c8:	f000 fbb3 	bl	8007d32 <HAL_SYSTICK_Config>
 80075cc:	1e03      	subs	r3, r0, #0
 80075ce:	d112      	bne.n	80075f6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b03      	cmp	r3, #3
 80075d4:	d80a      	bhi.n	80075ec <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80075d6:	6879      	ldr	r1, [r7, #4]
 80075d8:	2301      	movs	r3, #1
 80075da:	425b      	negs	r3, r3
 80075dc:	2200      	movs	r2, #0
 80075de:	0018      	movs	r0, r3
 80075e0:	f000 fb82 	bl	8007ce8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80075e4:	4b0e      	ldr	r3, [pc, #56]	; (8007620 <HAL_InitTick+0x90>)
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	601a      	str	r2, [r3, #0]
 80075ea:	e00d      	b.n	8007608 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80075ec:	230f      	movs	r3, #15
 80075ee:	18fb      	adds	r3, r7, r3
 80075f0:	2201      	movs	r2, #1
 80075f2:	701a      	strb	r2, [r3, #0]
 80075f4:	e008      	b.n	8007608 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80075f6:	230f      	movs	r3, #15
 80075f8:	18fb      	adds	r3, r7, r3
 80075fa:	2201      	movs	r2, #1
 80075fc:	701a      	strb	r2, [r3, #0]
 80075fe:	e003      	b.n	8007608 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007600:	230f      	movs	r3, #15
 8007602:	18fb      	adds	r3, r7, r3
 8007604:	2201      	movs	r2, #1
 8007606:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8007608:	230f      	movs	r3, #15
 800760a:	18fb      	adds	r3, r7, r3
 800760c:	781b      	ldrb	r3, [r3, #0]
}
 800760e:	0018      	movs	r0, r3
 8007610:	46bd      	mov	sp, r7
 8007612:	b005      	add	sp, #20
 8007614:	bd90      	pop	{r4, r7, pc}
 8007616:	46c0      	nop			; (mov r8, r8)
 8007618:	20000040 	.word	0x20000040
 800761c:	20000038 	.word	0x20000038
 8007620:	2000003c 	.word	0x2000003c

08007624 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007628:	4b05      	ldr	r3, [pc, #20]	; (8007640 <HAL_IncTick+0x1c>)
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	001a      	movs	r2, r3
 800762e:	4b05      	ldr	r3, [pc, #20]	; (8007644 <HAL_IncTick+0x20>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	18d2      	adds	r2, r2, r3
 8007634:	4b03      	ldr	r3, [pc, #12]	; (8007644 <HAL_IncTick+0x20>)
 8007636:	601a      	str	r2, [r3, #0]
}
 8007638:	46c0      	nop			; (mov r8, r8)
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	46c0      	nop			; (mov r8, r8)
 8007640:	20000040 	.word	0x20000040
 8007644:	20003528 	.word	0x20003528

08007648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	af00      	add	r7, sp, #0
  return uwTick;
 800764c:	4b02      	ldr	r3, [pc, #8]	; (8007658 <HAL_GetTick+0x10>)
 800764e:	681b      	ldr	r3, [r3, #0]
}
 8007650:	0018      	movs	r0, r3
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	46c0      	nop			; (mov r8, r8)
 8007658:	20003528 	.word	0x20003528

0800765c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007664:	f7ff fff0 	bl	8007648 <HAL_GetTick>
 8007668:	0003      	movs	r3, r0
 800766a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3301      	adds	r3, #1
 8007674:	d005      	beq.n	8007682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007676:	4b0a      	ldr	r3, [pc, #40]	; (80076a0 <HAL_Delay+0x44>)
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	001a      	movs	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	189b      	adds	r3, r3, r2
 8007680:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007682:	46c0      	nop			; (mov r8, r8)
 8007684:	f7ff ffe0 	bl	8007648 <HAL_GetTick>
 8007688:	0002      	movs	r2, r0
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	429a      	cmp	r2, r3
 8007692:	d8f7      	bhi.n	8007684 <HAL_Delay+0x28>
  {
  }
}
 8007694:	46c0      	nop			; (mov r8, r8)
 8007696:	46c0      	nop			; (mov r8, r8)
 8007698:	46bd      	mov	sp, r7
 800769a:	b004      	add	sp, #16
 800769c:	bd80      	pop	{r7, pc}
 800769e:	46c0      	nop			; (mov r8, r8)
 80076a0:	20000040 	.word	0x20000040

080076a4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80076ac:	4b06      	ldr	r3, [pc, #24]	; (80076c8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a06      	ldr	r2, [pc, #24]	; (80076cc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80076b2:	4013      	ands	r3, r2
 80076b4:	0019      	movs	r1, r3
 80076b6:	4b04      	ldr	r3, [pc, #16]	; (80076c8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	430a      	orrs	r2, r1
 80076bc:	601a      	str	r2, [r3, #0]
}
 80076be:	46c0      	nop			; (mov r8, r8)
 80076c0:	46bd      	mov	sp, r7
 80076c2:	b002      	add	sp, #8
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	46c0      	nop			; (mov r8, r8)
 80076c8:	40010000 	.word	0x40010000
 80076cc:	fffff9ff 	.word	0xfffff9ff

080076d0 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80076d8:	4a05      	ldr	r2, [pc, #20]	; (80076f0 <LL_EXTI_EnableIT_0_31+0x20>)
 80076da:	2380      	movs	r3, #128	; 0x80
 80076dc:	58d2      	ldr	r2, [r2, r3]
 80076de:	4904      	ldr	r1, [pc, #16]	; (80076f0 <LL_EXTI_EnableIT_0_31+0x20>)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	2280      	movs	r2, #128	; 0x80
 80076e6:	508b      	str	r3, [r1, r2]
}
 80076e8:	46c0      	nop			; (mov r8, r8)
 80076ea:	46bd      	mov	sp, r7
 80076ec:	b002      	add	sp, #8
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	40021800 	.word	0x40021800

080076f4 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80076fc:	4a06      	ldr	r2, [pc, #24]	; (8007718 <LL_EXTI_DisableIT_0_31+0x24>)
 80076fe:	2380      	movs	r3, #128	; 0x80
 8007700:	58d3      	ldr	r3, [r2, r3]
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	43d2      	mvns	r2, r2
 8007706:	4904      	ldr	r1, [pc, #16]	; (8007718 <LL_EXTI_DisableIT_0_31+0x24>)
 8007708:	4013      	ands	r3, r2
 800770a:	2280      	movs	r2, #128	; 0x80
 800770c:	508b      	str	r3, [r1, r2]
}
 800770e:	46c0      	nop			; (mov r8, r8)
 8007710:	46bd      	mov	sp, r7
 8007712:	b002      	add	sp, #8
 8007714:	bd80      	pop	{r7, pc}
 8007716:	46c0      	nop			; (mov r8, r8)
 8007718:	40021800 	.word	0x40021800

0800771c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007724:	4a05      	ldr	r2, [pc, #20]	; (800773c <LL_EXTI_EnableEvent_0_31+0x20>)
 8007726:	2384      	movs	r3, #132	; 0x84
 8007728:	58d2      	ldr	r2, [r2, r3]
 800772a:	4904      	ldr	r1, [pc, #16]	; (800773c <LL_EXTI_EnableEvent_0_31+0x20>)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4313      	orrs	r3, r2
 8007730:	2284      	movs	r2, #132	; 0x84
 8007732:	508b      	str	r3, [r1, r2]

}
 8007734:	46c0      	nop			; (mov r8, r8)
 8007736:	46bd      	mov	sp, r7
 8007738:	b002      	add	sp, #8
 800773a:	bd80      	pop	{r7, pc}
 800773c:	40021800 	.word	0x40021800

08007740 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007748:	4a06      	ldr	r2, [pc, #24]	; (8007764 <LL_EXTI_DisableEvent_0_31+0x24>)
 800774a:	2384      	movs	r3, #132	; 0x84
 800774c:	58d3      	ldr	r3, [r2, r3]
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	43d2      	mvns	r2, r2
 8007752:	4904      	ldr	r1, [pc, #16]	; (8007764 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007754:	4013      	ands	r3, r2
 8007756:	2284      	movs	r2, #132	; 0x84
 8007758:	508b      	str	r3, [r1, r2]
}
 800775a:	46c0      	nop			; (mov r8, r8)
 800775c:	46bd      	mov	sp, r7
 800775e:	b002      	add	sp, #8
 8007760:	bd80      	pop	{r7, pc}
 8007762:	46c0      	nop			; (mov r8, r8)
 8007764:	40021800 	.word	0x40021800

08007768 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007770:	4b04      	ldr	r3, [pc, #16]	; (8007784 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8007772:	6819      	ldr	r1, [r3, #0]
 8007774:	4b03      	ldr	r3, [pc, #12]	; (8007784 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	430a      	orrs	r2, r1
 800777a:	601a      	str	r2, [r3, #0]

}
 800777c:	46c0      	nop			; (mov r8, r8)
 800777e:	46bd      	mov	sp, r7
 8007780:	b002      	add	sp, #8
 8007782:	bd80      	pop	{r7, pc}
 8007784:	40021800 	.word	0x40021800

08007788 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007790:	4b05      	ldr	r3, [pc, #20]	; (80077a8 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	43d9      	mvns	r1, r3
 8007798:	4b03      	ldr	r3, [pc, #12]	; (80077a8 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800779a:	400a      	ands	r2, r1
 800779c:	601a      	str	r2, [r3, #0]

}
 800779e:	46c0      	nop			; (mov r8, r8)
 80077a0:	46bd      	mov	sp, r7
 80077a2:	b002      	add	sp, #8
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	46c0      	nop			; (mov r8, r8)
 80077a8:	40021800 	.word	0x40021800

080077ac <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80077b4:	4b04      	ldr	r3, [pc, #16]	; (80077c8 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80077b6:	6859      	ldr	r1, [r3, #4]
 80077b8:	4b03      	ldr	r3, [pc, #12]	; (80077c8 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	430a      	orrs	r2, r1
 80077be:	605a      	str	r2, [r3, #4]
}
 80077c0:	46c0      	nop			; (mov r8, r8)
 80077c2:	46bd      	mov	sp, r7
 80077c4:	b002      	add	sp, #8
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	40021800 	.word	0x40021800

080077cc <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80077d4:	4b05      	ldr	r3, [pc, #20]	; (80077ec <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80077d6:	685a      	ldr	r2, [r3, #4]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	43d9      	mvns	r1, r3
 80077dc:	4b03      	ldr	r3, [pc, #12]	; (80077ec <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80077de:	400a      	ands	r2, r1
 80077e0:	605a      	str	r2, [r3, #4]
}
 80077e2:	46c0      	nop			; (mov r8, r8)
 80077e4:	46bd      	mov	sp, r7
 80077e6:	b002      	add	sp, #8
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	46c0      	nop			; (mov r8, r8)
 80077ec:	40021800 	.word	0x40021800

080077f0 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 80077f8:	4b03      	ldr	r3, [pc, #12]	; (8007808 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	611a      	str	r2, [r3, #16]
}
 80077fe:	46c0      	nop			; (mov r8, r8)
 8007800:	46bd      	mov	sp, r7
 8007802:	b002      	add	sp, #8
 8007804:	bd80      	pop	{r7, pc}
 8007806:	46c0      	nop			; (mov r8, r8)
 8007808:	40021800 	.word	0x40021800

0800780c <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8007814:	4b03      	ldr	r3, [pc, #12]	; (8007824 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	60da      	str	r2, [r3, #12]
}
 800781a:	46c0      	nop			; (mov r8, r8)
 800781c:	46bd      	mov	sp, r7
 800781e:	b002      	add	sp, #8
 8007820:	bd80      	pop	{r7, pc}
 8007822:	46c0      	nop			; (mov r8, r8)
 8007824:	40021800 	.word	0x40021800

08007828 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b088      	sub	sp, #32
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007830:	2300      	movs	r3, #0
 8007832:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007834:	211f      	movs	r1, #31
 8007836:	187b      	adds	r3, r7, r1
 8007838:	2200      	movs	r2, #0
 800783a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d103      	bne.n	800784a <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 8007842:	187b      	adds	r3, r7, r1
 8007844:	2201      	movs	r2, #1
 8007846:	701a      	strb	r2, [r3, #0]
 8007848:	e13d      	b.n	8007ac6 <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	0fdb      	lsrs	r3, r3, #31
 8007852:	07da      	lsls	r2, r3, #31
 8007854:	2380      	movs	r3, #128	; 0x80
 8007856:	061b      	lsls	r3, r3, #24
 8007858:	429a      	cmp	r2, r3
 800785a:	d104      	bne.n	8007866 <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 800785c:	231f      	movs	r3, #31
 800785e:	18fb      	adds	r3, r7, r3
 8007860:	2201      	movs	r2, #1
 8007862:	701a      	strb	r2, [r3, #0]
 8007864:	e12f      	b.n	8007ac6 <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2229      	movs	r2, #41	; 0x29
 800786a:	5c9b      	ldrb	r3, [r3, r2]
 800786c:	b2db      	uxtb	r3, r3
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10a      	bne.n	8007888 <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2228      	movs	r2, #40	; 0x28
 8007876:	2100      	movs	r1, #0
 8007878:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	0018      	movs	r0, r3
 8007884:	f7ff fa10 	bl	8006ca8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2230      	movs	r2, #48	; 0x30
 8007890:	4013      	ands	r3, r2
 8007892:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	69db      	ldr	r3, [r3, #28]
 80078ae:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 80078b4:	4313      	orrs	r3, r2
 80078b6:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a85      	ldr	r2, [pc, #532]	; (8007ad4 <HAL_COMP_Init+0x2ac>)
 80078c0:	4013      	ands	r3, r2
 80078c2:	0019      	movs	r1, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	2380      	movs	r3, #128	; 0x80
 80078d4:	011b      	lsls	r3, r3, #4
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d10d      	bne.n	80078f6 <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80078da:	4b7f      	ldr	r3, [pc, #508]	; (8007ad8 <HAL_COMP_Init+0x2b0>)
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	4b7e      	ldr	r3, [pc, #504]	; (8007ad8 <HAL_COMP_Init+0x2b0>)
 80078e0:	497e      	ldr	r1, [pc, #504]	; (8007adc <HAL_COMP_Init+0x2b4>)
 80078e2:	400a      	ands	r2, r1
 80078e4:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80078e6:	4b7c      	ldr	r3, [pc, #496]	; (8007ad8 <HAL_COMP_Init+0x2b0>)
 80078e8:	685a      	ldr	r2, [r3, #4]
 80078ea:	4b7b      	ldr	r3, [pc, #492]	; (8007ad8 <HAL_COMP_Init+0x2b0>)
 80078ec:	2180      	movs	r1, #128	; 0x80
 80078ee:	0109      	lsls	r1, r1, #4
 80078f0:	430a      	orrs	r2, r1
 80078f2:	605a      	str	r2, [r3, #4]
 80078f4:	e01f      	b.n	8007936 <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	685a      	ldr	r2, [r3, #4]
 80078fa:	23c0      	movs	r3, #192	; 0xc0
 80078fc:	015b      	lsls	r3, r3, #5
 80078fe:	429a      	cmp	r2, r3
 8007900:	d10d      	bne.n	800791e <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8007902:	4b75      	ldr	r3, [pc, #468]	; (8007ad8 <HAL_COMP_Init+0x2b0>)
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	4b74      	ldr	r3, [pc, #464]	; (8007ad8 <HAL_COMP_Init+0x2b0>)
 8007908:	2180      	movs	r1, #128	; 0x80
 800790a:	0109      	lsls	r1, r1, #4
 800790c:	430a      	orrs	r2, r1
 800790e:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8007910:	4b71      	ldr	r3, [pc, #452]	; (8007ad8 <HAL_COMP_Init+0x2b0>)
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	4b70      	ldr	r3, [pc, #448]	; (8007ad8 <HAL_COMP_Init+0x2b0>)
 8007916:	4971      	ldr	r1, [pc, #452]	; (8007adc <HAL_COMP_Init+0x2b4>)
 8007918:	400a      	ands	r2, r1
 800791a:	605a      	str	r2, [r3, #4]
 800791c:	e00b      	b.n	8007936 <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800791e:	4b6e      	ldr	r3, [pc, #440]	; (8007ad8 <HAL_COMP_Init+0x2b0>)
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	4b6d      	ldr	r3, [pc, #436]	; (8007ad8 <HAL_COMP_Init+0x2b0>)
 8007924:	496d      	ldr	r1, [pc, #436]	; (8007adc <HAL_COMP_Init+0x2b4>)
 8007926:	400a      	ands	r2, r1
 8007928:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800792a:	4b6b      	ldr	r3, [pc, #428]	; (8007ad8 <HAL_COMP_Init+0x2b0>)
 800792c:	685a      	ldr	r2, [r3, #4]
 800792e:	4b6a      	ldr	r3, [pc, #424]	; (8007ad8 <HAL_COMP_Init+0x2b0>)
 8007930:	496a      	ldr	r1, [pc, #424]	; (8007adc <HAL_COMP_Init+0x2b4>)
 8007932:	400a      	ands	r2, r1
 8007934:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	22a0      	movs	r2, #160	; 0xa0
 800793c:	01d2      	lsls	r2, r2, #7
 800793e:	4293      	cmp	r3, r2
 8007940:	d017      	beq.n	8007972 <HAL_COMP_Init+0x14a>
 8007942:	22a0      	movs	r2, #160	; 0xa0
 8007944:	01d2      	lsls	r2, r2, #7
 8007946:	4293      	cmp	r3, r2
 8007948:	d830      	bhi.n	80079ac <HAL_COMP_Init+0x184>
 800794a:	2b01      	cmp	r3, #1
 800794c:	d01f      	beq.n	800798e <HAL_COMP_Init+0x166>
 800794e:	2280      	movs	r2, #128	; 0x80
 8007950:	01d2      	lsls	r2, r2, #7
 8007952:	4293      	cmp	r3, r2
 8007954:	d12a      	bne.n	80079ac <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8007956:	4b60      	ldr	r3, [pc, #384]	; (8007ad8 <HAL_COMP_Init+0x2b0>)
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	4b5f      	ldr	r3, [pc, #380]	; (8007ad8 <HAL_COMP_Init+0x2b0>)
 800795c:	2180      	movs	r1, #128	; 0x80
 800795e:	01c9      	lsls	r1, r1, #7
 8007960:	430a      	orrs	r2, r1
 8007962:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8007964:	4b5c      	ldr	r3, [pc, #368]	; (8007ad8 <HAL_COMP_Init+0x2b0>)
 8007966:	685a      	ldr	r2, [r3, #4]
 8007968:	4b5b      	ldr	r3, [pc, #364]	; (8007ad8 <HAL_COMP_Init+0x2b0>)
 800796a:	495d      	ldr	r1, [pc, #372]	; (8007ae0 <HAL_COMP_Init+0x2b8>)
 800796c:	400a      	ands	r2, r1
 800796e:	605a      	str	r2, [r3, #4]
        break;
 8007970:	e029      	b.n	80079c6 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8007972:	4b59      	ldr	r3, [pc, #356]	; (8007ad8 <HAL_COMP_Init+0x2b0>)
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	4b58      	ldr	r3, [pc, #352]	; (8007ad8 <HAL_COMP_Init+0x2b0>)
 8007978:	4959      	ldr	r1, [pc, #356]	; (8007ae0 <HAL_COMP_Init+0x2b8>)
 800797a:	400a      	ands	r2, r1
 800797c:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800797e:	4b56      	ldr	r3, [pc, #344]	; (8007ad8 <HAL_COMP_Init+0x2b0>)
 8007980:	685a      	ldr	r2, [r3, #4]
 8007982:	4b55      	ldr	r3, [pc, #340]	; (8007ad8 <HAL_COMP_Init+0x2b0>)
 8007984:	2180      	movs	r1, #128	; 0x80
 8007986:	01c9      	lsls	r1, r1, #7
 8007988:	430a      	orrs	r2, r1
 800798a:	605a      	str	r2, [r3, #4]
        break;
 800798c:	e01b      	b.n	80079c6 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800798e:	4b52      	ldr	r3, [pc, #328]	; (8007ad8 <HAL_COMP_Init+0x2b0>)
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	4b51      	ldr	r3, [pc, #324]	; (8007ad8 <HAL_COMP_Init+0x2b0>)
 8007994:	2180      	movs	r1, #128	; 0x80
 8007996:	01c9      	lsls	r1, r1, #7
 8007998:	430a      	orrs	r2, r1
 800799a:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800799c:	4b4e      	ldr	r3, [pc, #312]	; (8007ad8 <HAL_COMP_Init+0x2b0>)
 800799e:	685a      	ldr	r2, [r3, #4]
 80079a0:	4b4d      	ldr	r3, [pc, #308]	; (8007ad8 <HAL_COMP_Init+0x2b0>)
 80079a2:	2180      	movs	r1, #128	; 0x80
 80079a4:	01c9      	lsls	r1, r1, #7
 80079a6:	430a      	orrs	r2, r1
 80079a8:	605a      	str	r2, [r3, #4]
        break;
 80079aa:	e00c      	b.n	80079c6 <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80079ac:	4b4a      	ldr	r3, [pc, #296]	; (8007ad8 <HAL_COMP_Init+0x2b0>)
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	4b49      	ldr	r3, [pc, #292]	; (8007ad8 <HAL_COMP_Init+0x2b0>)
 80079b2:	494b      	ldr	r1, [pc, #300]	; (8007ae0 <HAL_COMP_Init+0x2b8>)
 80079b4:	400a      	ands	r2, r1
 80079b6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80079b8:	4b47      	ldr	r3, [pc, #284]	; (8007ad8 <HAL_COMP_Init+0x2b0>)
 80079ba:	685a      	ldr	r2, [r3, #4]
 80079bc:	4b46      	ldr	r3, [pc, #280]	; (8007ad8 <HAL_COMP_Init+0x2b0>)
 80079be:	4948      	ldr	r1, [pc, #288]	; (8007ae0 <HAL_COMP_Init+0x2b8>)
 80079c0:	400a      	ands	r2, r1
 80079c2:	605a      	str	r2, [r3, #4]
        break;
 80079c4:	46c0      	nop			; (mov r8, r8)
    }
#endif

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2230      	movs	r2, #48	; 0x30
 80079ce:	4013      	ands	r3, r2
 80079d0:	d016      	beq.n	8007a00 <HAL_COMP_Init+0x1d8>
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d113      	bne.n	8007a00 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80079d8:	4b42      	ldr	r3, [pc, #264]	; (8007ae4 <HAL_COMP_Init+0x2bc>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4942      	ldr	r1, [pc, #264]	; (8007ae8 <HAL_COMP_Init+0x2c0>)
 80079de:	0018      	movs	r0, r3
 80079e0:	f7f8 fb90 	bl	8000104 <__udivsi3>
 80079e4:	0003      	movs	r3, r0
 80079e6:	001a      	movs	r2, r3
 80079e8:	0013      	movs	r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	189b      	adds	r3, r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80079f2:	e002      	b.n	80079fa <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	3b01      	subs	r3, #1
 80079f8:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1f9      	bne.n	80079f4 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a34      	ldr	r2, [pc, #208]	; (8007ad8 <HAL_COMP_Init+0x2b0>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d102      	bne.n	8007a10 <HAL_COMP_Init+0x1e8>
 8007a0a:	2380      	movs	r3, #128	; 0x80
 8007a0c:	029b      	lsls	r3, r3, #10
 8007a0e:	e001      	b.n	8007a14 <HAL_COMP_Init+0x1ec>
 8007a10:	2380      	movs	r3, #128	; 0x80
 8007a12:	02db      	lsls	r3, r3, #11
 8007a14:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1a:	2203      	movs	r2, #3
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	d040      	beq.n	8007aa2 <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a24:	2210      	movs	r2, #16
 8007a26:	4013      	ands	r3, r2
 8007a28:	d004      	beq.n	8007a34 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	0018      	movs	r0, r3
 8007a2e:	f7ff fe9b 	bl	8007768 <LL_EXTI_EnableRisingTrig_0_31>
 8007a32:	e003      	b.n	8007a3c <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	0018      	movs	r0, r3
 8007a38:	f7ff fea6 	bl	8007788 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a40:	2220      	movs	r2, #32
 8007a42:	4013      	ands	r3, r2
 8007a44:	d004      	beq.n	8007a50 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	0018      	movs	r0, r3
 8007a4a:	f7ff feaf 	bl	80077ac <LL_EXTI_EnableFallingTrig_0_31>
 8007a4e:	e003      	b.n	8007a58 <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	0018      	movs	r0, r3
 8007a54:	f7ff feba 	bl	80077cc <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	0018      	movs	r0, r3
 8007a5c:	f7ff fed6 	bl	800780c <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	0018      	movs	r0, r3
 8007a64:	f7ff fec4 	bl	80077f0 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6c:	2202      	movs	r2, #2
 8007a6e:	4013      	ands	r3, r2
 8007a70:	d004      	beq.n	8007a7c <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	0018      	movs	r0, r3
 8007a76:	f7ff fe51 	bl	800771c <LL_EXTI_EnableEvent_0_31>
 8007a7a:	e003      	b.n	8007a84 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	0018      	movs	r0, r3
 8007a80:	f7ff fe5e 	bl	8007740 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a88:	2201      	movs	r2, #1
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	d004      	beq.n	8007a98 <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	0018      	movs	r0, r3
 8007a92:	f7ff fe1d 	bl	80076d0 <LL_EXTI_EnableIT_0_31>
 8007a96:	e00c      	b.n	8007ab2 <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	0018      	movs	r0, r3
 8007a9c:	f7ff fe2a 	bl	80076f4 <LL_EXTI_DisableIT_0_31>
 8007aa0:	e007      	b.n	8007ab2 <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	0018      	movs	r0, r3
 8007aa6:	f7ff fe4b 	bl	8007740 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	0018      	movs	r0, r3
 8007aae:	f7ff fe21 	bl	80076f4 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2229      	movs	r2, #41	; 0x29
 8007ab6:	5c9b      	ldrb	r3, [r3, r2]
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d103      	bne.n	8007ac6 <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2229      	movs	r2, #41	; 0x29
 8007ac2:	2101      	movs	r1, #1
 8007ac4:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8007ac6:	231f      	movs	r3, #31
 8007ac8:	18fb      	adds	r3, r7, r3
 8007aca:	781b      	ldrb	r3, [r3, #0]
}
 8007acc:	0018      	movs	r0, r3
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	b008      	add	sp, #32
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	fe00740f 	.word	0xfe00740f
 8007ad8:	40010200 	.word	0x40010200
 8007adc:	fffff7ff 	.word	0xfffff7ff
 8007ae0:	ffffbfff 	.word	0xffffbfff
 8007ae4:	20000038 	.word	0x20000038
 8007ae8:	00030d40 	.word	0x00030d40

08007aec <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8007af4:	2300      	movs	r3, #0
 8007af6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007af8:	210f      	movs	r1, #15
 8007afa:	187b      	adds	r3, r7, r1
 8007afc:	2200      	movs	r2, #0
 8007afe:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d103      	bne.n	8007b0e <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 8007b06:	187b      	adds	r3, r7, r1
 8007b08:	2201      	movs	r2, #1
 8007b0a:	701a      	strb	r2, [r3, #0]
 8007b0c:	e034      	b.n	8007b78 <HAL_COMP_Start+0x8c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	0fdb      	lsrs	r3, r3, #31
 8007b16:	07da      	lsls	r2, r3, #31
 8007b18:	2380      	movs	r3, #128	; 0x80
 8007b1a:	061b      	lsls	r3, r3, #24
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d104      	bne.n	8007b2a <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 8007b20:	230f      	movs	r3, #15
 8007b22:	18fb      	adds	r3, r7, r3
 8007b24:	2201      	movs	r2, #1
 8007b26:	701a      	strb	r2, [r3, #0]
 8007b28:	e026      	b.n	8007b78 <HAL_COMP_Start+0x8c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2229      	movs	r2, #41	; 0x29
 8007b2e:	5c9b      	ldrb	r3, [r3, r2]
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d11c      	bne.n	8007b70 <HAL_COMP_Start+0x84>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2101      	movs	r1, #1
 8007b42:	430a      	orrs	r2, r1
 8007b44:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2229      	movs	r2, #41	; 0x29
 8007b4a:	2102      	movs	r1, #2
 8007b4c:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007b4e:	4b0e      	ldr	r3, [pc, #56]	; (8007b88 <HAL_COMP_Start+0x9c>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	490e      	ldr	r1, [pc, #56]	; (8007b8c <HAL_COMP_Start+0xa0>)
 8007b54:	0018      	movs	r0, r3
 8007b56:	f7f8 fad5 	bl	8000104 <__udivsi3>
 8007b5a:	0003      	movs	r3, r0
 8007b5c:	00db      	lsls	r3, r3, #3
 8007b5e:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8007b60:	e002      	b.n	8007b68 <HAL_COMP_Start+0x7c>
      {
        wait_loop_index--;
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	3b01      	subs	r3, #1
 8007b66:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1f9      	bne.n	8007b62 <HAL_COMP_Start+0x76>
 8007b6e:	e003      	b.n	8007b78 <HAL_COMP_Start+0x8c>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007b70:	230f      	movs	r3, #15
 8007b72:	18fb      	adds	r3, r7, r3
 8007b74:	2201      	movs	r2, #1
 8007b76:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8007b78:	230f      	movs	r3, #15
 8007b7a:	18fb      	adds	r3, r7, r3
 8007b7c:	781b      	ldrb	r3, [r3, #0]
}
 8007b7e:	0018      	movs	r0, r3
 8007b80:	46bd      	mov	sp, r7
 8007b82:	b004      	add	sp, #16
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	46c0      	nop			; (mov r8, r8)
 8007b88:	20000038 	.word	0x20000038
 8007b8c:	00030d40 	.word	0x00030d40

08007b90 <__NVIC_EnableIRQ>:
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	0002      	movs	r2, r0
 8007b98:	1dfb      	adds	r3, r7, #7
 8007b9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007b9c:	1dfb      	adds	r3, r7, #7
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	2b7f      	cmp	r3, #127	; 0x7f
 8007ba2:	d809      	bhi.n	8007bb8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ba4:	1dfb      	adds	r3, r7, #7
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	001a      	movs	r2, r3
 8007baa:	231f      	movs	r3, #31
 8007bac:	401a      	ands	r2, r3
 8007bae:	4b04      	ldr	r3, [pc, #16]	; (8007bc0 <__NVIC_EnableIRQ+0x30>)
 8007bb0:	2101      	movs	r1, #1
 8007bb2:	4091      	lsls	r1, r2
 8007bb4:	000a      	movs	r2, r1
 8007bb6:	601a      	str	r2, [r3, #0]
}
 8007bb8:	46c0      	nop			; (mov r8, r8)
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	b002      	add	sp, #8
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	e000e100 	.word	0xe000e100

08007bc4 <__NVIC_SetPriority>:
{
 8007bc4:	b590      	push	{r4, r7, lr}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	0002      	movs	r2, r0
 8007bcc:	6039      	str	r1, [r7, #0]
 8007bce:	1dfb      	adds	r3, r7, #7
 8007bd0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007bd2:	1dfb      	adds	r3, r7, #7
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	2b7f      	cmp	r3, #127	; 0x7f
 8007bd8:	d828      	bhi.n	8007c2c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007bda:	4a2f      	ldr	r2, [pc, #188]	; (8007c98 <__NVIC_SetPriority+0xd4>)
 8007bdc:	1dfb      	adds	r3, r7, #7
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	b25b      	sxtb	r3, r3
 8007be2:	089b      	lsrs	r3, r3, #2
 8007be4:	33c0      	adds	r3, #192	; 0xc0
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	589b      	ldr	r3, [r3, r2]
 8007bea:	1dfa      	adds	r2, r7, #7
 8007bec:	7812      	ldrb	r2, [r2, #0]
 8007bee:	0011      	movs	r1, r2
 8007bf0:	2203      	movs	r2, #3
 8007bf2:	400a      	ands	r2, r1
 8007bf4:	00d2      	lsls	r2, r2, #3
 8007bf6:	21ff      	movs	r1, #255	; 0xff
 8007bf8:	4091      	lsls	r1, r2
 8007bfa:	000a      	movs	r2, r1
 8007bfc:	43d2      	mvns	r2, r2
 8007bfe:	401a      	ands	r2, r3
 8007c00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	019b      	lsls	r3, r3, #6
 8007c06:	22ff      	movs	r2, #255	; 0xff
 8007c08:	401a      	ands	r2, r3
 8007c0a:	1dfb      	adds	r3, r7, #7
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	0018      	movs	r0, r3
 8007c10:	2303      	movs	r3, #3
 8007c12:	4003      	ands	r3, r0
 8007c14:	00db      	lsls	r3, r3, #3
 8007c16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007c18:	481f      	ldr	r0, [pc, #124]	; (8007c98 <__NVIC_SetPriority+0xd4>)
 8007c1a:	1dfb      	adds	r3, r7, #7
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	b25b      	sxtb	r3, r3
 8007c20:	089b      	lsrs	r3, r3, #2
 8007c22:	430a      	orrs	r2, r1
 8007c24:	33c0      	adds	r3, #192	; 0xc0
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	501a      	str	r2, [r3, r0]
}
 8007c2a:	e031      	b.n	8007c90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007c2c:	4a1b      	ldr	r2, [pc, #108]	; (8007c9c <__NVIC_SetPriority+0xd8>)
 8007c2e:	1dfb      	adds	r3, r7, #7
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	0019      	movs	r1, r3
 8007c34:	230f      	movs	r3, #15
 8007c36:	400b      	ands	r3, r1
 8007c38:	3b08      	subs	r3, #8
 8007c3a:	089b      	lsrs	r3, r3, #2
 8007c3c:	3306      	adds	r3, #6
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	18d3      	adds	r3, r2, r3
 8007c42:	3304      	adds	r3, #4
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	1dfa      	adds	r2, r7, #7
 8007c48:	7812      	ldrb	r2, [r2, #0]
 8007c4a:	0011      	movs	r1, r2
 8007c4c:	2203      	movs	r2, #3
 8007c4e:	400a      	ands	r2, r1
 8007c50:	00d2      	lsls	r2, r2, #3
 8007c52:	21ff      	movs	r1, #255	; 0xff
 8007c54:	4091      	lsls	r1, r2
 8007c56:	000a      	movs	r2, r1
 8007c58:	43d2      	mvns	r2, r2
 8007c5a:	401a      	ands	r2, r3
 8007c5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	019b      	lsls	r3, r3, #6
 8007c62:	22ff      	movs	r2, #255	; 0xff
 8007c64:	401a      	ands	r2, r3
 8007c66:	1dfb      	adds	r3, r7, #7
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	0018      	movs	r0, r3
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	4003      	ands	r3, r0
 8007c70:	00db      	lsls	r3, r3, #3
 8007c72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007c74:	4809      	ldr	r0, [pc, #36]	; (8007c9c <__NVIC_SetPriority+0xd8>)
 8007c76:	1dfb      	adds	r3, r7, #7
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	001c      	movs	r4, r3
 8007c7c:	230f      	movs	r3, #15
 8007c7e:	4023      	ands	r3, r4
 8007c80:	3b08      	subs	r3, #8
 8007c82:	089b      	lsrs	r3, r3, #2
 8007c84:	430a      	orrs	r2, r1
 8007c86:	3306      	adds	r3, #6
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	18c3      	adds	r3, r0, r3
 8007c8c:	3304      	adds	r3, #4
 8007c8e:	601a      	str	r2, [r3, #0]
}
 8007c90:	46c0      	nop			; (mov r8, r8)
 8007c92:	46bd      	mov	sp, r7
 8007c94:	b003      	add	sp, #12
 8007c96:	bd90      	pop	{r4, r7, pc}
 8007c98:	e000e100 	.word	0xe000e100
 8007c9c:	e000ed00 	.word	0xe000ed00

08007ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	1e5a      	subs	r2, r3, #1
 8007cac:	2380      	movs	r3, #128	; 0x80
 8007cae:	045b      	lsls	r3, r3, #17
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d301      	bcc.n	8007cb8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e010      	b.n	8007cda <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007cb8:	4b0a      	ldr	r3, [pc, #40]	; (8007ce4 <SysTick_Config+0x44>)
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	3a01      	subs	r2, #1
 8007cbe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	425b      	negs	r3, r3
 8007cc4:	2103      	movs	r1, #3
 8007cc6:	0018      	movs	r0, r3
 8007cc8:	f7ff ff7c 	bl	8007bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007ccc:	4b05      	ldr	r3, [pc, #20]	; (8007ce4 <SysTick_Config+0x44>)
 8007cce:	2200      	movs	r2, #0
 8007cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007cd2:	4b04      	ldr	r3, [pc, #16]	; (8007ce4 <SysTick_Config+0x44>)
 8007cd4:	2207      	movs	r2, #7
 8007cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	0018      	movs	r0, r3
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	b002      	add	sp, #8
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	46c0      	nop			; (mov r8, r8)
 8007ce4:	e000e010 	.word	0xe000e010

08007ce8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60b9      	str	r1, [r7, #8]
 8007cf0:	607a      	str	r2, [r7, #4]
 8007cf2:	210f      	movs	r1, #15
 8007cf4:	187b      	adds	r3, r7, r1
 8007cf6:	1c02      	adds	r2, r0, #0
 8007cf8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	187b      	adds	r3, r7, r1
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	b25b      	sxtb	r3, r3
 8007d02:	0011      	movs	r1, r2
 8007d04:	0018      	movs	r0, r3
 8007d06:	f7ff ff5d 	bl	8007bc4 <__NVIC_SetPriority>
}
 8007d0a:	46c0      	nop			; (mov r8, r8)
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	b004      	add	sp, #16
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b082      	sub	sp, #8
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	0002      	movs	r2, r0
 8007d1a:	1dfb      	adds	r3, r7, #7
 8007d1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d1e:	1dfb      	adds	r3, r7, #7
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	b25b      	sxtb	r3, r3
 8007d24:	0018      	movs	r0, r3
 8007d26:	f7ff ff33 	bl	8007b90 <__NVIC_EnableIRQ>
}
 8007d2a:	46c0      	nop			; (mov r8, r8)
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	b002      	add	sp, #8
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b082      	sub	sp, #8
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	0018      	movs	r0, r3
 8007d3e:	f7ff ffaf 	bl	8007ca0 <SysTick_Config>
 8007d42:	0003      	movs	r3, r0
}
 8007d44:	0018      	movs	r0, r3
 8007d46:	46bd      	mov	sp, r7
 8007d48:	b002      	add	sp, #8
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d101      	bne.n	8007d5e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e077      	b.n	8007e4e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a3d      	ldr	r2, [pc, #244]	; (8007e58 <HAL_DMA_Init+0x10c>)
 8007d64:	4694      	mov	ip, r2
 8007d66:	4463      	add	r3, ip
 8007d68:	2114      	movs	r1, #20
 8007d6a:	0018      	movs	r0, r3
 8007d6c:	f7f8 f9ca 	bl	8000104 <__udivsi3>
 8007d70:	0003      	movs	r3, r0
 8007d72:	009a      	lsls	r2, r3, #2
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2225      	movs	r2, #37	; 0x25
 8007d7c:	2102      	movs	r1, #2
 8007d7e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4934      	ldr	r1, [pc, #208]	; (8007e5c <HAL_DMA_Init+0x110>)
 8007d8c:	400a      	ands	r2, r1
 8007d8e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	6819      	ldr	r1, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	689a      	ldr	r2, [r3, #8]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	431a      	orrs	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	431a      	orrs	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	695b      	ldr	r3, [r3, #20]
 8007daa:	431a      	orrs	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	431a      	orrs	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	69db      	ldr	r3, [r3, #28]
 8007db6:	431a      	orrs	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a1b      	ldr	r3, [r3, #32]
 8007dbc:	431a      	orrs	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	430a      	orrs	r2, r1
 8007dc4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	0018      	movs	r0, r3
 8007dca:	f000 fa37 	bl	800823c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	689a      	ldr	r2, [r3, #8]
 8007dd2:	2380      	movs	r3, #128	; 0x80
 8007dd4:	01db      	lsls	r3, r3, #7
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d102      	bne.n	8007de0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de8:	213f      	movs	r1, #63	; 0x3f
 8007dea:	400a      	ands	r2, r1
 8007dec:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007df6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d011      	beq.n	8007e24 <HAL_DMA_Init+0xd8>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	2b04      	cmp	r3, #4
 8007e06:	d80d      	bhi.n	8007e24 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	0018      	movs	r0, r3
 8007e0c:	f000 fa42 	bl	8008294 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e14:	2200      	movs	r2, #0
 8007e16:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007e20:	605a      	str	r2, [r3, #4]
 8007e22:	e008      	b.n	8007e36 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2225      	movs	r2, #37	; 0x25
 8007e40:	2101      	movs	r1, #1
 8007e42:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2224      	movs	r2, #36	; 0x24
 8007e48:	2100      	movs	r1, #0
 8007e4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	0018      	movs	r0, r3
 8007e50:	46bd      	mov	sp, r7
 8007e52:	b002      	add	sp, #8
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	46c0      	nop			; (mov r8, r8)
 8007e58:	bffdfff8 	.word	0xbffdfff8
 8007e5c:	ffff800f 	.word	0xffff800f

08007e60 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
 8007e6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e6e:	2317      	movs	r3, #23
 8007e70:	18fb      	adds	r3, r7, r3
 8007e72:	2200      	movs	r2, #0
 8007e74:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2224      	movs	r2, #36	; 0x24
 8007e7a:	5c9b      	ldrb	r3, [r3, r2]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d101      	bne.n	8007e84 <HAL_DMA_Start_IT+0x24>
 8007e80:	2302      	movs	r3, #2
 8007e82:	e06f      	b.n	8007f64 <HAL_DMA_Start_IT+0x104>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2224      	movs	r2, #36	; 0x24
 8007e88:	2101      	movs	r1, #1
 8007e8a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2225      	movs	r2, #37	; 0x25
 8007e90:	5c9b      	ldrb	r3, [r3, r2]
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d157      	bne.n	8007f48 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2225      	movs	r2, #37	; 0x25
 8007e9c:	2102      	movs	r1, #2
 8007e9e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	438a      	bics	r2, r1
 8007eb4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	68b9      	ldr	r1, [r7, #8]
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f000 f97d 	bl	80081bc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d008      	beq.n	8007edc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	210e      	movs	r1, #14
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	601a      	str	r2, [r3, #0]
 8007eda:	e00f      	b.n	8007efc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2104      	movs	r1, #4
 8007ee8:	438a      	bics	r2, r1
 8007eea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	210a      	movs	r1, #10
 8007ef8:	430a      	orrs	r2, r1
 8007efa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	2380      	movs	r3, #128	; 0x80
 8007f04:	025b      	lsls	r3, r3, #9
 8007f06:	4013      	ands	r3, r2
 8007f08:	d008      	beq.n	8007f1c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f14:	2180      	movs	r1, #128	; 0x80
 8007f16:	0049      	lsls	r1, r1, #1
 8007f18:	430a      	orrs	r2, r1
 8007f1a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d008      	beq.n	8007f36 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f2e:	2180      	movs	r1, #128	; 0x80
 8007f30:	0049      	lsls	r1, r1, #1
 8007f32:	430a      	orrs	r2, r1
 8007f34:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2101      	movs	r1, #1
 8007f42:	430a      	orrs	r2, r1
 8007f44:	601a      	str	r2, [r3, #0]
 8007f46:	e00a      	b.n	8007f5e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2280      	movs	r2, #128	; 0x80
 8007f4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2224      	movs	r2, #36	; 0x24
 8007f52:	2100      	movs	r1, #0
 8007f54:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8007f56:	2317      	movs	r3, #23
 8007f58:	18fb      	adds	r3, r7, r3
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007f5e:	2317      	movs	r3, #23
 8007f60:	18fb      	adds	r3, r7, r3
 8007f62:	781b      	ldrb	r3, [r3, #0]
}
 8007f64:	0018      	movs	r0, r3
 8007f66:	46bd      	mov	sp, r7
 8007f68:	b006      	add	sp, #24
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f74:	210f      	movs	r1, #15
 8007f76:	187b      	adds	r3, r7, r1
 8007f78:	2200      	movs	r2, #0
 8007f7a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2225      	movs	r2, #37	; 0x25
 8007f80:	5c9b      	ldrb	r3, [r3, r2]
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d006      	beq.n	8007f96 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2204      	movs	r2, #4
 8007f8c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007f8e:	187b      	adds	r3, r7, r1
 8007f90:	2201      	movs	r2, #1
 8007f92:	701a      	strb	r2, [r3, #0]
 8007f94:	e049      	b.n	800802a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	210e      	movs	r1, #14
 8007fa2:	438a      	bics	r2, r1
 8007fa4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2101      	movs	r1, #1
 8007fb2:	438a      	bics	r2, r1
 8007fb4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc0:	491d      	ldr	r1, [pc, #116]	; (8008038 <HAL_DMA_Abort_IT+0xcc>)
 8007fc2:	400a      	ands	r2, r1
 8007fc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8007fc6:	4b1d      	ldr	r3, [pc, #116]	; (800803c <HAL_DMA_Abort_IT+0xd0>)
 8007fc8:	6859      	ldr	r1, [r3, #4]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fce:	221c      	movs	r2, #28
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	409a      	lsls	r2, r3
 8007fd6:	4b19      	ldr	r3, [pc, #100]	; (800803c <HAL_DMA_Abort_IT+0xd0>)
 8007fd8:	430a      	orrs	r2, r1
 8007fda:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007fe4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00c      	beq.n	8008008 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ff8:	490f      	ldr	r1, [pc, #60]	; (8008038 <HAL_DMA_Abort_IT+0xcc>)
 8007ffa:	400a      	ands	r2, r1
 8007ffc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008006:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2225      	movs	r2, #37	; 0x25
 800800c:	2101      	movs	r1, #1
 800800e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2224      	movs	r2, #36	; 0x24
 8008014:	2100      	movs	r1, #0
 8008016:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801c:	2b00      	cmp	r3, #0
 800801e:	d004      	beq.n	800802a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	0010      	movs	r0, r2
 8008028:	4798      	blx	r3
    }
  }
  return status;
 800802a:	230f      	movs	r3, #15
 800802c:	18fb      	adds	r3, r7, r3
 800802e:	781b      	ldrb	r3, [r3, #0]
}
 8008030:	0018      	movs	r0, r3
 8008032:	46bd      	mov	sp, r7
 8008034:	b004      	add	sp, #16
 8008036:	bd80      	pop	{r7, pc}
 8008038:	fffffeff 	.word	0xfffffeff
 800803c:	40020000 	.word	0x40020000

08008040 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8008048:	4b55      	ldr	r3, [pc, #340]	; (80081a0 <HAL_DMA_IRQHandler+0x160>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805a:	221c      	movs	r2, #28
 800805c:	4013      	ands	r3, r2
 800805e:	2204      	movs	r2, #4
 8008060:	409a      	lsls	r2, r3
 8008062:	0013      	movs	r3, r2
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	4013      	ands	r3, r2
 8008068:	d027      	beq.n	80080ba <HAL_DMA_IRQHandler+0x7a>
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	2204      	movs	r2, #4
 800806e:	4013      	ands	r3, r2
 8008070:	d023      	beq.n	80080ba <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2220      	movs	r2, #32
 800807a:	4013      	ands	r3, r2
 800807c:	d107      	bne.n	800808e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2104      	movs	r1, #4
 800808a:	438a      	bics	r2, r1
 800808c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800808e:	4b44      	ldr	r3, [pc, #272]	; (80081a0 <HAL_DMA_IRQHandler+0x160>)
 8008090:	6859      	ldr	r1, [r3, #4]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008096:	221c      	movs	r2, #28
 8008098:	4013      	ands	r3, r2
 800809a:	2204      	movs	r2, #4
 800809c:	409a      	lsls	r2, r3
 800809e:	4b40      	ldr	r3, [pc, #256]	; (80081a0 <HAL_DMA_IRQHandler+0x160>)
 80080a0:	430a      	orrs	r2, r1
 80080a2:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d100      	bne.n	80080ae <HAL_DMA_IRQHandler+0x6e>
 80080ac:	e073      	b.n	8008196 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	0010      	movs	r0, r2
 80080b6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80080b8:	e06d      	b.n	8008196 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080be:	221c      	movs	r2, #28
 80080c0:	4013      	ands	r3, r2
 80080c2:	2202      	movs	r2, #2
 80080c4:	409a      	lsls	r2, r3
 80080c6:	0013      	movs	r3, r2
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	4013      	ands	r3, r2
 80080cc:	d02e      	beq.n	800812c <HAL_DMA_IRQHandler+0xec>
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	2202      	movs	r2, #2
 80080d2:	4013      	ands	r3, r2
 80080d4:	d02a      	beq.n	800812c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2220      	movs	r2, #32
 80080de:	4013      	ands	r3, r2
 80080e0:	d10b      	bne.n	80080fa <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	210a      	movs	r1, #10
 80080ee:	438a      	bics	r2, r1
 80080f0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2225      	movs	r2, #37	; 0x25
 80080f6:	2101      	movs	r1, #1
 80080f8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80080fa:	4b29      	ldr	r3, [pc, #164]	; (80081a0 <HAL_DMA_IRQHandler+0x160>)
 80080fc:	6859      	ldr	r1, [r3, #4]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008102:	221c      	movs	r2, #28
 8008104:	4013      	ands	r3, r2
 8008106:	2202      	movs	r2, #2
 8008108:	409a      	lsls	r2, r3
 800810a:	4b25      	ldr	r3, [pc, #148]	; (80081a0 <HAL_DMA_IRQHandler+0x160>)
 800810c:	430a      	orrs	r2, r1
 800810e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2224      	movs	r2, #36	; 0x24
 8008114:	2100      	movs	r1, #0
 8008116:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811c:	2b00      	cmp	r3, #0
 800811e:	d03a      	beq.n	8008196 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	0010      	movs	r0, r2
 8008128:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800812a:	e034      	b.n	8008196 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008130:	221c      	movs	r2, #28
 8008132:	4013      	ands	r3, r2
 8008134:	2208      	movs	r2, #8
 8008136:	409a      	lsls	r2, r3
 8008138:	0013      	movs	r3, r2
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	4013      	ands	r3, r2
 800813e:	d02b      	beq.n	8008198 <HAL_DMA_IRQHandler+0x158>
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	2208      	movs	r2, #8
 8008144:	4013      	ands	r3, r2
 8008146:	d027      	beq.n	8008198 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	210e      	movs	r1, #14
 8008154:	438a      	bics	r2, r1
 8008156:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8008158:	4b11      	ldr	r3, [pc, #68]	; (80081a0 <HAL_DMA_IRQHandler+0x160>)
 800815a:	6859      	ldr	r1, [r3, #4]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008160:	221c      	movs	r2, #28
 8008162:	4013      	ands	r3, r2
 8008164:	2201      	movs	r2, #1
 8008166:	409a      	lsls	r2, r3
 8008168:	4b0d      	ldr	r3, [pc, #52]	; (80081a0 <HAL_DMA_IRQHandler+0x160>)
 800816a:	430a      	orrs	r2, r1
 800816c:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2225      	movs	r2, #37	; 0x25
 8008178:	2101      	movs	r1, #1
 800817a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2224      	movs	r2, #36	; 0x24
 8008180:	2100      	movs	r1, #0
 8008182:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008188:	2b00      	cmp	r3, #0
 800818a:	d005      	beq.n	8008198 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	0010      	movs	r0, r2
 8008194:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008196:	46c0      	nop			; (mov r8, r8)
 8008198:	46c0      	nop			; (mov r8, r8)
}
 800819a:	46bd      	mov	sp, r7
 800819c:	b004      	add	sp, #16
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	40020000 	.word	0x40020000

080081a4 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2225      	movs	r2, #37	; 0x25
 80081b0:	5c9b      	ldrb	r3, [r3, r2]
 80081b2:	b2db      	uxtb	r3, r3
}
 80081b4:	0018      	movs	r0, r3
 80081b6:	46bd      	mov	sp, r7
 80081b8:	b002      	add	sp, #8
 80081ba:	bd80      	pop	{r7, pc}

080081bc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
 80081c8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80081d2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d004      	beq.n	80081e6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80081e4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80081e6:	4b14      	ldr	r3, [pc, #80]	; (8008238 <DMA_SetConfig+0x7c>)
 80081e8:	6859      	ldr	r1, [r3, #4]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ee:	221c      	movs	r2, #28
 80081f0:	4013      	ands	r3, r2
 80081f2:	2201      	movs	r2, #1
 80081f4:	409a      	lsls	r2, r3
 80081f6:	4b10      	ldr	r3, [pc, #64]	; (8008238 <DMA_SetConfig+0x7c>)
 80081f8:	430a      	orrs	r2, r1
 80081fa:	605a      	str	r2, [r3, #4]
#endif

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	2b10      	cmp	r3, #16
 800820a:	d108      	bne.n	800821e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800821c:	e007      	b.n	800822e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	60da      	str	r2, [r3, #12]
}
 800822e:	46c0      	nop			; (mov r8, r8)
 8008230:	46bd      	mov	sp, r7
 8008232:	b004      	add	sp, #16
 8008234:	bd80      	pop	{r7, pc}
 8008236:	46c0      	nop			; (mov r8, r8)
 8008238:	40020000 	.word	0x40020000

0800823c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008248:	089b      	lsrs	r3, r3, #2
 800824a:	4a10      	ldr	r2, [pc, #64]	; (800828c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800824c:	4694      	mov	ip, r2
 800824e:	4463      	add	r3, ip
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	001a      	movs	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	001a      	movs	r2, r3
 800825e:	23ff      	movs	r3, #255	; 0xff
 8008260:	4013      	ands	r3, r2
 8008262:	3b08      	subs	r3, #8
 8008264:	2114      	movs	r1, #20
 8008266:	0018      	movs	r0, r3
 8008268:	f7f7 ff4c 	bl	8000104 <__udivsi3>
 800826c:	0003      	movs	r3, r0
 800826e:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a07      	ldr	r2, [pc, #28]	; (8008290 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8008274:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	221f      	movs	r2, #31
 800827a:	4013      	ands	r3, r2
 800827c:	2201      	movs	r2, #1
 800827e:	409a      	lsls	r2, r3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8008284:	46c0      	nop			; (mov r8, r8)
 8008286:	46bd      	mov	sp, r7
 8008288:	b004      	add	sp, #16
 800828a:	bd80      	pop	{r7, pc}
 800828c:	10008200 	.word	0x10008200
 8008290:	40020880 	.word	0x40020880

08008294 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	223f      	movs	r2, #63	; 0x3f
 80082a2:	4013      	ands	r3, r2
 80082a4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	4a0a      	ldr	r2, [pc, #40]	; (80082d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80082aa:	4694      	mov	ip, r2
 80082ac:	4463      	add	r3, ip
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	001a      	movs	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a07      	ldr	r2, [pc, #28]	; (80082d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80082ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	3b01      	subs	r3, #1
 80082c0:	2203      	movs	r2, #3
 80082c2:	4013      	ands	r3, r2
 80082c4:	2201      	movs	r2, #1
 80082c6:	409a      	lsls	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	659a      	str	r2, [r3, #88]	; 0x58
}
 80082cc:	46c0      	nop			; (mov r8, r8)
 80082ce:	46bd      	mov	sp, r7
 80082d0:	b004      	add	sp, #16
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	1000823f 	.word	0x1000823f
 80082d8:	40020940 	.word	0x40020940

080082dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80082e6:	2300      	movs	r3, #0
 80082e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80082ea:	e147      	b.n	800857c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2101      	movs	r1, #1
 80082f2:	697a      	ldr	r2, [r7, #20]
 80082f4:	4091      	lsls	r1, r2
 80082f6:	000a      	movs	r2, r1
 80082f8:	4013      	ands	r3, r2
 80082fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d100      	bne.n	8008304 <HAL_GPIO_Init+0x28>
 8008302:	e138      	b.n	8008576 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	2b01      	cmp	r3, #1
 800830a:	d00b      	beq.n	8008324 <HAL_GPIO_Init+0x48>
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	2b02      	cmp	r3, #2
 8008312:	d007      	beq.n	8008324 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008318:	2b11      	cmp	r3, #17
 800831a:	d003      	beq.n	8008324 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	2b12      	cmp	r3, #18
 8008322:	d130      	bne.n	8008386 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	005b      	lsls	r3, r3, #1
 800832e:	2203      	movs	r2, #3
 8008330:	409a      	lsls	r2, r3
 8008332:	0013      	movs	r3, r2
 8008334:	43da      	mvns	r2, r3
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	4013      	ands	r3, r2
 800833a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	68da      	ldr	r2, [r3, #12]
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	005b      	lsls	r3, r3, #1
 8008344:	409a      	lsls	r2, r3
 8008346:	0013      	movs	r3, r2
 8008348:	693a      	ldr	r2, [r7, #16]
 800834a:	4313      	orrs	r3, r2
 800834c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	693a      	ldr	r2, [r7, #16]
 8008352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800835a:	2201      	movs	r2, #1
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	409a      	lsls	r2, r3
 8008360:	0013      	movs	r3, r2
 8008362:	43da      	mvns	r2, r3
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	4013      	ands	r3, r2
 8008368:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	091b      	lsrs	r3, r3, #4
 8008370:	2201      	movs	r2, #1
 8008372:	401a      	ands	r2, r3
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	409a      	lsls	r2, r3
 8008378:	0013      	movs	r3, r2
 800837a:	693a      	ldr	r2, [r7, #16]
 800837c:	4313      	orrs	r3, r2
 800837e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	693a      	ldr	r2, [r7, #16]
 8008384:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	005b      	lsls	r3, r3, #1
 8008390:	2203      	movs	r2, #3
 8008392:	409a      	lsls	r2, r3
 8008394:	0013      	movs	r3, r2
 8008396:	43da      	mvns	r2, r3
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	4013      	ands	r3, r2
 800839c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	689a      	ldr	r2, [r3, #8]
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	005b      	lsls	r3, r3, #1
 80083a6:	409a      	lsls	r2, r3
 80083a8:	0013      	movs	r3, r2
 80083aa:	693a      	ldr	r2, [r7, #16]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	693a      	ldr	r2, [r7, #16]
 80083b4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d003      	beq.n	80083c6 <HAL_GPIO_Init+0xea>
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	2b12      	cmp	r3, #18
 80083c4:	d123      	bne.n	800840e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	08da      	lsrs	r2, r3, #3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	3208      	adds	r2, #8
 80083ce:	0092      	lsls	r2, r2, #2
 80083d0:	58d3      	ldr	r3, [r2, r3]
 80083d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	2207      	movs	r2, #7
 80083d8:	4013      	ands	r3, r2
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	220f      	movs	r2, #15
 80083de:	409a      	lsls	r2, r3
 80083e0:	0013      	movs	r3, r2
 80083e2:	43da      	mvns	r2, r3
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	4013      	ands	r3, r2
 80083e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	691a      	ldr	r2, [r3, #16]
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	2107      	movs	r1, #7
 80083f2:	400b      	ands	r3, r1
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	409a      	lsls	r2, r3
 80083f8:	0013      	movs	r3, r2
 80083fa:	693a      	ldr	r2, [r7, #16]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	08da      	lsrs	r2, r3, #3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	3208      	adds	r2, #8
 8008408:	0092      	lsls	r2, r2, #2
 800840a:	6939      	ldr	r1, [r7, #16]
 800840c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	005b      	lsls	r3, r3, #1
 8008418:	2203      	movs	r2, #3
 800841a:	409a      	lsls	r2, r3
 800841c:	0013      	movs	r3, r2
 800841e:	43da      	mvns	r2, r3
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	4013      	ands	r3, r2
 8008424:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	2203      	movs	r2, #3
 800842c:	401a      	ands	r2, r3
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	005b      	lsls	r3, r3, #1
 8008432:	409a      	lsls	r2, r3
 8008434:	0013      	movs	r3, r2
 8008436:	693a      	ldr	r2, [r7, #16]
 8008438:	4313      	orrs	r3, r2
 800843a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	693a      	ldr	r2, [r7, #16]
 8008440:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	685a      	ldr	r2, [r3, #4]
 8008446:	2380      	movs	r3, #128	; 0x80
 8008448:	055b      	lsls	r3, r3, #21
 800844a:	4013      	ands	r3, r2
 800844c:	d100      	bne.n	8008450 <HAL_GPIO_Init+0x174>
 800844e:	e092      	b.n	8008576 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8008450:	4a50      	ldr	r2, [pc, #320]	; (8008594 <HAL_GPIO_Init+0x2b8>)
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	089b      	lsrs	r3, r3, #2
 8008456:	3318      	adds	r3, #24
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	589b      	ldr	r3, [r3, r2]
 800845c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	2203      	movs	r2, #3
 8008462:	4013      	ands	r3, r2
 8008464:	00db      	lsls	r3, r3, #3
 8008466:	220f      	movs	r2, #15
 8008468:	409a      	lsls	r2, r3
 800846a:	0013      	movs	r3, r2
 800846c:	43da      	mvns	r2, r3
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	4013      	ands	r3, r2
 8008472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	23a0      	movs	r3, #160	; 0xa0
 8008478:	05db      	lsls	r3, r3, #23
 800847a:	429a      	cmp	r2, r3
 800847c:	d013      	beq.n	80084a6 <HAL_GPIO_Init+0x1ca>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a45      	ldr	r2, [pc, #276]	; (8008598 <HAL_GPIO_Init+0x2bc>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d00d      	beq.n	80084a2 <HAL_GPIO_Init+0x1c6>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a44      	ldr	r2, [pc, #272]	; (800859c <HAL_GPIO_Init+0x2c0>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d007      	beq.n	800849e <HAL_GPIO_Init+0x1c2>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a43      	ldr	r2, [pc, #268]	; (80085a0 <HAL_GPIO_Init+0x2c4>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d101      	bne.n	800849a <HAL_GPIO_Init+0x1be>
 8008496:	2303      	movs	r3, #3
 8008498:	e006      	b.n	80084a8 <HAL_GPIO_Init+0x1cc>
 800849a:	2305      	movs	r3, #5
 800849c:	e004      	b.n	80084a8 <HAL_GPIO_Init+0x1cc>
 800849e:	2302      	movs	r3, #2
 80084a0:	e002      	b.n	80084a8 <HAL_GPIO_Init+0x1cc>
 80084a2:	2301      	movs	r3, #1
 80084a4:	e000      	b.n	80084a8 <HAL_GPIO_Init+0x1cc>
 80084a6:	2300      	movs	r3, #0
 80084a8:	697a      	ldr	r2, [r7, #20]
 80084aa:	2103      	movs	r1, #3
 80084ac:	400a      	ands	r2, r1
 80084ae:	00d2      	lsls	r2, r2, #3
 80084b0:	4093      	lsls	r3, r2
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80084b8:	4936      	ldr	r1, [pc, #216]	; (8008594 <HAL_GPIO_Init+0x2b8>)
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	089b      	lsrs	r3, r3, #2
 80084be:	3318      	adds	r3, #24
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	693a      	ldr	r2, [r7, #16]
 80084c4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80084c6:	4a33      	ldr	r2, [pc, #204]	; (8008594 <HAL_GPIO_Init+0x2b8>)
 80084c8:	2380      	movs	r3, #128	; 0x80
 80084ca:	58d3      	ldr	r3, [r2, r3]
 80084cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	43da      	mvns	r2, r3
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	4013      	ands	r3, r2
 80084d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	685a      	ldr	r2, [r3, #4]
 80084dc:	2380      	movs	r3, #128	; 0x80
 80084de:	025b      	lsls	r3, r3, #9
 80084e0:	4013      	ands	r3, r2
 80084e2:	d003      	beq.n	80084ec <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80084e4:	693a      	ldr	r2, [r7, #16]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80084ec:	4929      	ldr	r1, [pc, #164]	; (8008594 <HAL_GPIO_Init+0x2b8>)
 80084ee:	2280      	movs	r2, #128	; 0x80
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80084f4:	4a27      	ldr	r2, [pc, #156]	; (8008594 <HAL_GPIO_Init+0x2b8>)
 80084f6:	2384      	movs	r3, #132	; 0x84
 80084f8:	58d3      	ldr	r3, [r2, r3]
 80084fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	43da      	mvns	r2, r3
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	4013      	ands	r3, r2
 8008504:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	685a      	ldr	r2, [r3, #4]
 800850a:	2380      	movs	r3, #128	; 0x80
 800850c:	029b      	lsls	r3, r3, #10
 800850e:	4013      	ands	r3, r2
 8008510:	d003      	beq.n	800851a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8008512:	693a      	ldr	r2, [r7, #16]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	4313      	orrs	r3, r2
 8008518:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800851a:	491e      	ldr	r1, [pc, #120]	; (8008594 <HAL_GPIO_Init+0x2b8>)
 800851c:	2284      	movs	r2, #132	; 0x84
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008522:	4b1c      	ldr	r3, [pc, #112]	; (8008594 <HAL_GPIO_Init+0x2b8>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	43da      	mvns	r2, r3
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	4013      	ands	r3, r2
 8008530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	685a      	ldr	r2, [r3, #4]
 8008536:	2380      	movs	r3, #128	; 0x80
 8008538:	035b      	lsls	r3, r3, #13
 800853a:	4013      	ands	r3, r2
 800853c:	d003      	beq.n	8008546 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800853e:	693a      	ldr	r2, [r7, #16]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	4313      	orrs	r3, r2
 8008544:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008546:	4b13      	ldr	r3, [pc, #76]	; (8008594 <HAL_GPIO_Init+0x2b8>)
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800854c:	4b11      	ldr	r3, [pc, #68]	; (8008594 <HAL_GPIO_Init+0x2b8>)
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	43da      	mvns	r2, r3
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	4013      	ands	r3, r2
 800855a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	685a      	ldr	r2, [r3, #4]
 8008560:	2380      	movs	r3, #128	; 0x80
 8008562:	039b      	lsls	r3, r3, #14
 8008564:	4013      	ands	r3, r2
 8008566:	d003      	beq.n	8008570 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008568:	693a      	ldr	r2, [r7, #16]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	4313      	orrs	r3, r2
 800856e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008570:	4b08      	ldr	r3, [pc, #32]	; (8008594 <HAL_GPIO_Init+0x2b8>)
 8008572:	693a      	ldr	r2, [r7, #16]
 8008574:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	3301      	adds	r3, #1
 800857a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	40da      	lsrs	r2, r3
 8008584:	1e13      	subs	r3, r2, #0
 8008586:	d000      	beq.n	800858a <HAL_GPIO_Init+0x2ae>
 8008588:	e6b0      	b.n	80082ec <HAL_GPIO_Init+0x10>
  }
}
 800858a:	46c0      	nop			; (mov r8, r8)
 800858c:	46c0      	nop			; (mov r8, r8)
 800858e:	46bd      	mov	sp, r7
 8008590:	b006      	add	sp, #24
 8008592:	bd80      	pop	{r7, pc}
 8008594:	40021800 	.word	0x40021800
 8008598:	50000400 	.word	0x50000400
 800859c:	50000800 	.word	0x50000800
 80085a0:	50000c00 	.word	0x50000c00

080085a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d101      	bne.n	80085b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	e082      	b.n	80086bc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2241      	movs	r2, #65	; 0x41
 80085ba:	5c9b      	ldrb	r3, [r3, r2]
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d107      	bne.n	80085d2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2240      	movs	r2, #64	; 0x40
 80085c6:	2100      	movs	r1, #0
 80085c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	0018      	movs	r0, r3
 80085ce:	f7fe fba1 	bl	8006d14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2241      	movs	r2, #65	; 0x41
 80085d6:	2124      	movs	r1, #36	; 0x24
 80085d8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2101      	movs	r1, #1
 80085e6:	438a      	bics	r2, r1
 80085e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	685a      	ldr	r2, [r3, #4]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4934      	ldr	r1, [pc, #208]	; (80086c4 <HAL_I2C_Init+0x120>)
 80085f4:	400a      	ands	r2, r1
 80085f6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	689a      	ldr	r2, [r3, #8]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4931      	ldr	r1, [pc, #196]	; (80086c8 <HAL_I2C_Init+0x124>)
 8008604:	400a      	ands	r2, r1
 8008606:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	2b01      	cmp	r3, #1
 800860e:	d108      	bne.n	8008622 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	689a      	ldr	r2, [r3, #8]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2180      	movs	r1, #128	; 0x80
 800861a:	0209      	lsls	r1, r1, #8
 800861c:	430a      	orrs	r2, r1
 800861e:	609a      	str	r2, [r3, #8]
 8008620:	e007      	b.n	8008632 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	689a      	ldr	r2, [r3, #8]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2184      	movs	r1, #132	; 0x84
 800862c:	0209      	lsls	r1, r1, #8
 800862e:	430a      	orrs	r2, r1
 8008630:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	2b02      	cmp	r3, #2
 8008638:	d104      	bne.n	8008644 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2280      	movs	r2, #128	; 0x80
 8008640:	0112      	lsls	r2, r2, #4
 8008642:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	685a      	ldr	r2, [r3, #4]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	491f      	ldr	r1, [pc, #124]	; (80086cc <HAL_I2C_Init+0x128>)
 8008650:	430a      	orrs	r2, r1
 8008652:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68da      	ldr	r2, [r3, #12]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	491a      	ldr	r1, [pc, #104]	; (80086c8 <HAL_I2C_Init+0x124>)
 8008660:	400a      	ands	r2, r1
 8008662:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	691a      	ldr	r2, [r3, #16]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	695b      	ldr	r3, [r3, #20]
 800866c:	431a      	orrs	r2, r3
 800866e:	0011      	movs	r1, r2
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	021a      	lsls	r2, r3, #8
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	430a      	orrs	r2, r1
 800867c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	69d9      	ldr	r1, [r3, #28]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a1a      	ldr	r2, [r3, #32]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	430a      	orrs	r2, r1
 800868c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2101      	movs	r1, #1
 800869a:	430a      	orrs	r2, r1
 800869c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2241      	movs	r2, #65	; 0x41
 80086a8:	2120      	movs	r1, #32
 80086aa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2242      	movs	r2, #66	; 0x42
 80086b6:	2100      	movs	r1, #0
 80086b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	0018      	movs	r0, r3
 80086be:	46bd      	mov	sp, r7
 80086c0:	b002      	add	sp, #8
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	f0ffffff 	.word	0xf0ffffff
 80086c8:	ffff7fff 	.word	0xffff7fff
 80086cc:	02008000 	.word	0x02008000

080086d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086d0:	b590      	push	{r4, r7, lr}
 80086d2:	b089      	sub	sp, #36	; 0x24
 80086d4:	af02      	add	r7, sp, #8
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	0008      	movs	r0, r1
 80086da:	607a      	str	r2, [r7, #4]
 80086dc:	0019      	movs	r1, r3
 80086de:	230a      	movs	r3, #10
 80086e0:	18fb      	adds	r3, r7, r3
 80086e2:	1c02      	adds	r2, r0, #0
 80086e4:	801a      	strh	r2, [r3, #0]
 80086e6:	2308      	movs	r3, #8
 80086e8:	18fb      	adds	r3, r7, r3
 80086ea:	1c0a      	adds	r2, r1, #0
 80086ec:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2241      	movs	r2, #65	; 0x41
 80086f2:	5c9b      	ldrb	r3, [r3, r2]
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b20      	cmp	r3, #32
 80086f8:	d000      	beq.n	80086fc <HAL_I2C_Master_Transmit+0x2c>
 80086fa:	e0e7      	b.n	80088cc <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2240      	movs	r2, #64	; 0x40
 8008700:	5c9b      	ldrb	r3, [r3, r2]
 8008702:	2b01      	cmp	r3, #1
 8008704:	d101      	bne.n	800870a <HAL_I2C_Master_Transmit+0x3a>
 8008706:	2302      	movs	r3, #2
 8008708:	e0e1      	b.n	80088ce <HAL_I2C_Master_Transmit+0x1fe>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2240      	movs	r2, #64	; 0x40
 800870e:	2101      	movs	r1, #1
 8008710:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008712:	f7fe ff99 	bl	8007648 <HAL_GetTick>
 8008716:	0003      	movs	r3, r0
 8008718:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800871a:	2380      	movs	r3, #128	; 0x80
 800871c:	0219      	lsls	r1, r3, #8
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	9300      	str	r3, [sp, #0]
 8008724:	2319      	movs	r3, #25
 8008726:	2201      	movs	r2, #1
 8008728:	f000 fe76 	bl	8009418 <I2C_WaitOnFlagUntilTimeout>
 800872c:	1e03      	subs	r3, r0, #0
 800872e:	d001      	beq.n	8008734 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	e0cc      	b.n	80088ce <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2241      	movs	r2, #65	; 0x41
 8008738:	2121      	movs	r1, #33	; 0x21
 800873a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2242      	movs	r2, #66	; 0x42
 8008740:	2110      	movs	r1, #16
 8008742:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2200      	movs	r2, #0
 8008748:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2208      	movs	r2, #8
 8008754:	18ba      	adds	r2, r7, r2
 8008756:	8812      	ldrh	r2, [r2, #0]
 8008758:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008764:	b29b      	uxth	r3, r3
 8008766:	2bff      	cmp	r3, #255	; 0xff
 8008768:	d911      	bls.n	800878e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	22ff      	movs	r2, #255	; 0xff
 800876e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008774:	b2da      	uxtb	r2, r3
 8008776:	2380      	movs	r3, #128	; 0x80
 8008778:	045c      	lsls	r4, r3, #17
 800877a:	230a      	movs	r3, #10
 800877c:	18fb      	adds	r3, r7, r3
 800877e:	8819      	ldrh	r1, [r3, #0]
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	4b55      	ldr	r3, [pc, #340]	; (80088d8 <HAL_I2C_Master_Transmit+0x208>)
 8008784:	9300      	str	r3, [sp, #0]
 8008786:	0023      	movs	r3, r4
 8008788:	f000 ff66 	bl	8009658 <I2C_TransferConfig>
 800878c:	e075      	b.n	800887a <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008792:	b29a      	uxth	r2, r3
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800879c:	b2da      	uxtb	r2, r3
 800879e:	2380      	movs	r3, #128	; 0x80
 80087a0:	049c      	lsls	r4, r3, #18
 80087a2:	230a      	movs	r3, #10
 80087a4:	18fb      	adds	r3, r7, r3
 80087a6:	8819      	ldrh	r1, [r3, #0]
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	4b4b      	ldr	r3, [pc, #300]	; (80088d8 <HAL_I2C_Master_Transmit+0x208>)
 80087ac:	9300      	str	r3, [sp, #0]
 80087ae:	0023      	movs	r3, r4
 80087b0:	f000 ff52 	bl	8009658 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80087b4:	e061      	b.n	800887a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087b6:	697a      	ldr	r2, [r7, #20]
 80087b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	0018      	movs	r0, r3
 80087be:	f000 fe6a 	bl	8009496 <I2C_WaitOnTXISFlagUntilTimeout>
 80087c2:	1e03      	subs	r3, r0, #0
 80087c4:	d001      	beq.n	80087ca <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e081      	b.n	80088ce <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ce:	781a      	ldrb	r2, [r3, #0]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087da:	1c5a      	adds	r2, r3, #1
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	3b01      	subs	r3, #1
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087f2:	3b01      	subs	r3, #1
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087fe:	b29b      	uxth	r3, r3
 8008800:	2b00      	cmp	r3, #0
 8008802:	d03a      	beq.n	800887a <HAL_I2C_Master_Transmit+0x1aa>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008808:	2b00      	cmp	r3, #0
 800880a:	d136      	bne.n	800887a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800880c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	0013      	movs	r3, r2
 8008816:	2200      	movs	r2, #0
 8008818:	2180      	movs	r1, #128	; 0x80
 800881a:	f000 fdfd 	bl	8009418 <I2C_WaitOnFlagUntilTimeout>
 800881e:	1e03      	subs	r3, r0, #0
 8008820:	d001      	beq.n	8008826 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e053      	b.n	80088ce <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800882a:	b29b      	uxth	r3, r3
 800882c:	2bff      	cmp	r3, #255	; 0xff
 800882e:	d911      	bls.n	8008854 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	22ff      	movs	r2, #255	; 0xff
 8008834:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800883a:	b2da      	uxtb	r2, r3
 800883c:	2380      	movs	r3, #128	; 0x80
 800883e:	045c      	lsls	r4, r3, #17
 8008840:	230a      	movs	r3, #10
 8008842:	18fb      	adds	r3, r7, r3
 8008844:	8819      	ldrh	r1, [r3, #0]
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	2300      	movs	r3, #0
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	0023      	movs	r3, r4
 800884e:	f000 ff03 	bl	8009658 <I2C_TransferConfig>
 8008852:	e012      	b.n	800887a <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008858:	b29a      	uxth	r2, r3
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008862:	b2da      	uxtb	r2, r3
 8008864:	2380      	movs	r3, #128	; 0x80
 8008866:	049c      	lsls	r4, r3, #18
 8008868:	230a      	movs	r3, #10
 800886a:	18fb      	adds	r3, r7, r3
 800886c:	8819      	ldrh	r1, [r3, #0]
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	2300      	movs	r3, #0
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	0023      	movs	r3, r4
 8008876:	f000 feef 	bl	8009658 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800887e:	b29b      	uxth	r3, r3
 8008880:	2b00      	cmp	r3, #0
 8008882:	d198      	bne.n	80087b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008884:	697a      	ldr	r2, [r7, #20]
 8008886:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	0018      	movs	r0, r3
 800888c:	f000 fe42 	bl	8009514 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008890:	1e03      	subs	r3, r0, #0
 8008892:	d001      	beq.n	8008898 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	e01a      	b.n	80088ce <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2220      	movs	r2, #32
 800889e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	685a      	ldr	r2, [r3, #4]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	490c      	ldr	r1, [pc, #48]	; (80088dc <HAL_I2C_Master_Transmit+0x20c>)
 80088ac:	400a      	ands	r2, r1
 80088ae:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2241      	movs	r2, #65	; 0x41
 80088b4:	2120      	movs	r1, #32
 80088b6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2242      	movs	r2, #66	; 0x42
 80088bc:	2100      	movs	r1, #0
 80088be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2240      	movs	r2, #64	; 0x40
 80088c4:	2100      	movs	r1, #0
 80088c6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80088c8:	2300      	movs	r3, #0
 80088ca:	e000      	b.n	80088ce <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80088cc:	2302      	movs	r3, #2
  }
}
 80088ce:	0018      	movs	r0, r3
 80088d0:	46bd      	mov	sp, r7
 80088d2:	b007      	add	sp, #28
 80088d4:	bd90      	pop	{r4, r7, pc}
 80088d6:	46c0      	nop			; (mov r8, r8)
 80088d8:	80002000 	.word	0x80002000
 80088dc:	fe00e800 	.word	0xfe00e800

080088e0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d005      	beq.n	800890c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	68f9      	ldr	r1, [r7, #12]
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	4798      	blx	r3
  }
}
 800890c:	46c0      	nop			; (mov r8, r8)
 800890e:	46bd      	mov	sp, r7
 8008910:	b004      	add	sp, #16
 8008912:	bd80      	pop	{r7, pc}

08008914 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b086      	sub	sp, #24
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	0a1b      	lsrs	r3, r3, #8
 8008930:	001a      	movs	r2, r3
 8008932:	2301      	movs	r3, #1
 8008934:	4013      	ands	r3, r2
 8008936:	d010      	beq.n	800895a <HAL_I2C_ER_IRQHandler+0x46>
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	09db      	lsrs	r3, r3, #7
 800893c:	001a      	movs	r2, r3
 800893e:	2301      	movs	r3, #1
 8008940:	4013      	ands	r3, r2
 8008942:	d00a      	beq.n	800895a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008948:	2201      	movs	r2, #1
 800894a:	431a      	orrs	r2, r3
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2280      	movs	r2, #128	; 0x80
 8008956:	0052      	lsls	r2, r2, #1
 8008958:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	0a9b      	lsrs	r3, r3, #10
 800895e:	001a      	movs	r2, r3
 8008960:	2301      	movs	r3, #1
 8008962:	4013      	ands	r3, r2
 8008964:	d010      	beq.n	8008988 <HAL_I2C_ER_IRQHandler+0x74>
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	09db      	lsrs	r3, r3, #7
 800896a:	001a      	movs	r2, r3
 800896c:	2301      	movs	r3, #1
 800896e:	4013      	ands	r3, r2
 8008970:	d00a      	beq.n	8008988 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008976:	2208      	movs	r2, #8
 8008978:	431a      	orrs	r2, r3
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2280      	movs	r2, #128	; 0x80
 8008984:	00d2      	lsls	r2, r2, #3
 8008986:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	0a5b      	lsrs	r3, r3, #9
 800898c:	001a      	movs	r2, r3
 800898e:	2301      	movs	r3, #1
 8008990:	4013      	ands	r3, r2
 8008992:	d010      	beq.n	80089b6 <HAL_I2C_ER_IRQHandler+0xa2>
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	09db      	lsrs	r3, r3, #7
 8008998:	001a      	movs	r2, r3
 800899a:	2301      	movs	r3, #1
 800899c:	4013      	ands	r3, r2
 800899e:	d00a      	beq.n	80089b6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a4:	2202      	movs	r2, #2
 80089a6:	431a      	orrs	r2, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2280      	movs	r2, #128	; 0x80
 80089b2:	0092      	lsls	r2, r2, #2
 80089b4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ba:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	220b      	movs	r2, #11
 80089c0:	4013      	ands	r3, r2
 80089c2:	d005      	beq.n	80089d0 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 80089c4:	68fa      	ldr	r2, [r7, #12]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	0011      	movs	r1, r2
 80089ca:	0018      	movs	r0, r3
 80089cc:	f000 fbd8 	bl	8009180 <I2C_ITError>
  }
}
 80089d0:	46c0      	nop			; (mov r8, r8)
 80089d2:	46bd      	mov	sp, r7
 80089d4:	b006      	add	sp, #24
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80089e0:	46c0      	nop			; (mov r8, r8)
 80089e2:	46bd      	mov	sp, r7
 80089e4:	b002      	add	sp, #8
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80089f0:	46c0      	nop			; (mov r8, r8)
 80089f2:	46bd      	mov	sp, r7
 80089f4:	b002      	add	sp, #8
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	0008      	movs	r0, r1
 8008a02:	0011      	movs	r1, r2
 8008a04:	1cfb      	adds	r3, r7, #3
 8008a06:	1c02      	adds	r2, r0, #0
 8008a08:	701a      	strb	r2, [r3, #0]
 8008a0a:	003b      	movs	r3, r7
 8008a0c:	1c0a      	adds	r2, r1, #0
 8008a0e:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008a10:	46c0      	nop			; (mov r8, r8)
 8008a12:	46bd      	mov	sp, r7
 8008a14:	b002      	add	sp, #8
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008a20:	46c0      	nop			; (mov r8, r8)
 8008a22:	46bd      	mov	sp, r7
 8008a24:	b002      	add	sp, #8
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008a30:	46c0      	nop			; (mov r8, r8)
 8008a32:	46bd      	mov	sp, r7
 8008a34:	b002      	add	sp, #8
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008a40:	46c0      	nop			; (mov r8, r8)
 8008a42:	46bd      	mov	sp, r7
 8008a44:	b002      	add	sp, #8
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a58:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2240      	movs	r2, #64	; 0x40
 8008a62:	5c9b      	ldrb	r3, [r3, r2]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d101      	bne.n	8008a6c <I2C_Slave_ISR_IT+0x24>
 8008a68:	2302      	movs	r3, #2
 8008a6a:	e0fa      	b.n	8008c62 <I2C_Slave_ISR_IT+0x21a>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2240      	movs	r2, #64	; 0x40
 8008a70:	2101      	movs	r1, #1
 8008a72:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	095b      	lsrs	r3, r3, #5
 8008a78:	001a      	movs	r2, r3
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	d00b      	beq.n	8008a98 <I2C_Slave_ISR_IT+0x50>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	095b      	lsrs	r3, r3, #5
 8008a84:	001a      	movs	r2, r3
 8008a86:	2301      	movs	r3, #1
 8008a88:	4013      	ands	r3, r2
 8008a8a:	d005      	beq.n	8008a98 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008a8c:	693a      	ldr	r2, [r7, #16]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	0011      	movs	r1, r2
 8008a92:	0018      	movs	r0, r3
 8008a94:	f000 f9f6 	bl	8008e84 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	091b      	lsrs	r3, r3, #4
 8008a9c:	001a      	movs	r2, r3
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	d054      	beq.n	8008b4e <I2C_Slave_ISR_IT+0x106>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	091b      	lsrs	r3, r3, #4
 8008aa8:	001a      	movs	r2, r3
 8008aaa:	2301      	movs	r3, #1
 8008aac:	4013      	ands	r3, r2
 8008aae:	d04e      	beq.n	8008b4e <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d12d      	bne.n	8008b16 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2241      	movs	r2, #65	; 0x41
 8008abe:	5c9b      	ldrb	r3, [r3, r2]
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	2b28      	cmp	r3, #40	; 0x28
 8008ac4:	d10b      	bne.n	8008ade <I2C_Slave_ISR_IT+0x96>
 8008ac6:	697a      	ldr	r2, [r7, #20]
 8008ac8:	2380      	movs	r3, #128	; 0x80
 8008aca:	049b      	lsls	r3, r3, #18
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d106      	bne.n	8008ade <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008ad0:	693a      	ldr	r2, [r7, #16]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	0011      	movs	r1, r2
 8008ad6:	0018      	movs	r0, r3
 8008ad8:	f000 faf8 	bl	80090cc <I2C_ITListenCplt>
 8008adc:	e036      	b.n	8008b4c <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2241      	movs	r2, #65	; 0x41
 8008ae2:	5c9b      	ldrb	r3, [r3, r2]
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	2b29      	cmp	r3, #41	; 0x29
 8008ae8:	d110      	bne.n	8008b0c <I2C_Slave_ISR_IT+0xc4>
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	4a5f      	ldr	r2, [pc, #380]	; (8008c6c <I2C_Slave_ISR_IT+0x224>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d00c      	beq.n	8008b0c <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2210      	movs	r2, #16
 8008af8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	0018      	movs	r0, r3
 8008afe:	f000 fc4a 	bl	8009396 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	0018      	movs	r0, r3
 8008b06:	f000 f957 	bl	8008db8 <I2C_ITSlaveSeqCplt>
 8008b0a:	e01f      	b.n	8008b4c <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2210      	movs	r2, #16
 8008b12:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008b14:	e09d      	b.n	8008c52 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2210      	movs	r2, #16
 8008b1c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b22:	2204      	movs	r2, #4
 8008b24:	431a      	orrs	r2, r3
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d005      	beq.n	8008b3c <I2C_Slave_ISR_IT+0xf4>
 8008b30:	697a      	ldr	r2, [r7, #20]
 8008b32:	2380      	movs	r3, #128	; 0x80
 8008b34:	045b      	lsls	r3, r3, #17
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d000      	beq.n	8008b3c <I2C_Slave_ISR_IT+0xf4>
 8008b3a:	e08a      	b.n	8008c52 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	0011      	movs	r1, r2
 8008b44:	0018      	movs	r0, r3
 8008b46:	f000 fb1b 	bl	8009180 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008b4a:	e082      	b.n	8008c52 <I2C_Slave_ISR_IT+0x20a>
 8008b4c:	e081      	b.n	8008c52 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	089b      	lsrs	r3, r3, #2
 8008b52:	001a      	movs	r2, r3
 8008b54:	2301      	movs	r3, #1
 8008b56:	4013      	ands	r3, r2
 8008b58:	d031      	beq.n	8008bbe <I2C_Slave_ISR_IT+0x176>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	089b      	lsrs	r3, r3, #2
 8008b5e:	001a      	movs	r2, r3
 8008b60:	2301      	movs	r3, #1
 8008b62:	4013      	ands	r3, r2
 8008b64:	d02b      	beq.n	8008bbe <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d018      	beq.n	8008ba2 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7a:	b2d2      	uxtb	r2, r2
 8008b7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b82:	1c5a      	adds	r2, r3, #1
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	b29a      	uxth	r2, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d154      	bne.n	8008c56 <I2C_Slave_ISR_IT+0x20e>
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	4a2f      	ldr	r2, [pc, #188]	; (8008c6c <I2C_Slave_ISR_IT+0x224>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d050      	beq.n	8008c56 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	0018      	movs	r0, r3
 8008bb8:	f000 f8fe 	bl	8008db8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008bbc:	e04b      	b.n	8008c56 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	08db      	lsrs	r3, r3, #3
 8008bc2:	001a      	movs	r2, r3
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	d00c      	beq.n	8008be4 <I2C_Slave_ISR_IT+0x19c>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	08db      	lsrs	r3, r3, #3
 8008bce:	001a      	movs	r2, r3
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	4013      	ands	r3, r2
 8008bd4:	d006      	beq.n	8008be4 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	0011      	movs	r1, r2
 8008bdc:	0018      	movs	r0, r3
 8008bde:	f000 f847 	bl	8008c70 <I2C_ITAddrCplt>
 8008be2:	e039      	b.n	8008c58 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	085b      	lsrs	r3, r3, #1
 8008be8:	001a      	movs	r2, r3
 8008bea:	2301      	movs	r3, #1
 8008bec:	4013      	ands	r3, r2
 8008bee:	d033      	beq.n	8008c58 <I2C_Slave_ISR_IT+0x210>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	085b      	lsrs	r3, r3, #1
 8008bf4:	001a      	movs	r2, r3
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	d02d      	beq.n	8008c58 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d018      	beq.n	8008c38 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0a:	781a      	ldrb	r2, [r3, #0]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c16:	1c5a      	adds	r2, r3, #1
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	3b01      	subs	r3, #1
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	851a      	strh	r2, [r3, #40]	; 0x28
 8008c36:	e00f      	b.n	8008c58 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008c38:	697a      	ldr	r2, [r7, #20]
 8008c3a:	2380      	movs	r3, #128	; 0x80
 8008c3c:	045b      	lsls	r3, r3, #17
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d002      	beq.n	8008c48 <I2C_Slave_ISR_IT+0x200>
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d107      	bne.n	8008c58 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	0018      	movs	r0, r3
 8008c4c:	f000 f8b4 	bl	8008db8 <I2C_ITSlaveSeqCplt>
 8008c50:	e002      	b.n	8008c58 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8008c52:	46c0      	nop			; (mov r8, r8)
 8008c54:	e000      	b.n	8008c58 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8008c56:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2240      	movs	r2, #64	; 0x40
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	0018      	movs	r0, r3
 8008c64:	46bd      	mov	sp, r7
 8008c66:	b006      	add	sp, #24
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	46c0      	nop			; (mov r8, r8)
 8008c6c:	ffff0000 	.word	0xffff0000

08008c70 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008c70:	b5b0      	push	{r4, r5, r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2241      	movs	r2, #65	; 0x41
 8008c7e:	5c9b      	ldrb	r3, [r3, r2]
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	001a      	movs	r2, r3
 8008c84:	2328      	movs	r3, #40	; 0x28
 8008c86:	4013      	ands	r3, r2
 8008c88:	2b28      	cmp	r3, #40	; 0x28
 8008c8a:	d000      	beq.n	8008c8e <I2C_ITAddrCplt+0x1e>
 8008c8c:	e088      	b.n	8008da0 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	0c1b      	lsrs	r3, r3, #16
 8008c96:	b2da      	uxtb	r2, r3
 8008c98:	250f      	movs	r5, #15
 8008c9a:	197b      	adds	r3, r7, r5
 8008c9c:	2101      	movs	r1, #1
 8008c9e:	400a      	ands	r2, r1
 8008ca0:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	699b      	ldr	r3, [r3, #24]
 8008ca8:	0c1b      	lsrs	r3, r3, #16
 8008caa:	b29a      	uxth	r2, r3
 8008cac:	200c      	movs	r0, #12
 8008cae:	183b      	adds	r3, r7, r0
 8008cb0:	21fe      	movs	r1, #254	; 0xfe
 8008cb2:	400a      	ands	r2, r1
 8008cb4:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	240a      	movs	r4, #10
 8008cc0:	193b      	adds	r3, r7, r4
 8008cc2:	0592      	lsls	r2, r2, #22
 8008cc4:	0d92      	lsrs	r2, r2, #22
 8008cc6:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	2308      	movs	r3, #8
 8008cd2:	18fb      	adds	r3, r7, r3
 8008cd4:	21fe      	movs	r1, #254	; 0xfe
 8008cd6:	400a      	ands	r2, r1
 8008cd8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d148      	bne.n	8008d74 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8008ce2:	0021      	movs	r1, r4
 8008ce4:	187b      	adds	r3, r7, r1
 8008ce6:	881b      	ldrh	r3, [r3, #0]
 8008ce8:	09db      	lsrs	r3, r3, #7
 8008cea:	b29a      	uxth	r2, r3
 8008cec:	183b      	adds	r3, r7, r0
 8008cee:	881b      	ldrh	r3, [r3, #0]
 8008cf0:	4053      	eors	r3, r2
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	001a      	movs	r2, r3
 8008cf6:	2306      	movs	r3, #6
 8008cf8:	4013      	ands	r3, r2
 8008cfa:	d120      	bne.n	8008d3e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8008cfc:	183b      	adds	r3, r7, r0
 8008cfe:	187a      	adds	r2, r7, r1
 8008d00:	8812      	ldrh	r2, [r2, #0]
 8008d02:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d08:	1c5a      	adds	r2, r3, #1
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d14c      	bne.n	8008db0 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2208      	movs	r2, #8
 8008d22:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2240      	movs	r2, #64	; 0x40
 8008d28:	2100      	movs	r1, #0
 8008d2a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008d2c:	183b      	adds	r3, r7, r0
 8008d2e:	881a      	ldrh	r2, [r3, #0]
 8008d30:	197b      	adds	r3, r7, r5
 8008d32:	7819      	ldrb	r1, [r3, #0]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	0018      	movs	r0, r3
 8008d38:	f7ff fe5e 	bl	80089f8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008d3c:	e038      	b.n	8008db0 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8008d3e:	240c      	movs	r4, #12
 8008d40:	193b      	adds	r3, r7, r4
 8008d42:	2208      	movs	r2, #8
 8008d44:	18ba      	adds	r2, r7, r2
 8008d46:	8812      	ldrh	r2, [r2, #0]
 8008d48:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008d4a:	2380      	movs	r3, #128	; 0x80
 8008d4c:	021a      	lsls	r2, r3, #8
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	0011      	movs	r1, r2
 8008d52:	0018      	movs	r0, r3
 8008d54:	f000 fcb6 	bl	80096c4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2240      	movs	r2, #64	; 0x40
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008d60:	193b      	adds	r3, r7, r4
 8008d62:	881a      	ldrh	r2, [r3, #0]
 8008d64:	230f      	movs	r3, #15
 8008d66:	18fb      	adds	r3, r7, r3
 8008d68:	7819      	ldrb	r1, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	0018      	movs	r0, r3
 8008d6e:	f7ff fe43 	bl	80089f8 <HAL_I2C_AddrCallback>
}
 8008d72:	e01d      	b.n	8008db0 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008d74:	2380      	movs	r3, #128	; 0x80
 8008d76:	021a      	lsls	r2, r3, #8
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	0011      	movs	r1, r2
 8008d7c:	0018      	movs	r0, r3
 8008d7e:	f000 fca1 	bl	80096c4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2240      	movs	r2, #64	; 0x40
 8008d86:	2100      	movs	r1, #0
 8008d88:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008d8a:	230c      	movs	r3, #12
 8008d8c:	18fb      	adds	r3, r7, r3
 8008d8e:	881a      	ldrh	r2, [r3, #0]
 8008d90:	230f      	movs	r3, #15
 8008d92:	18fb      	adds	r3, r7, r3
 8008d94:	7819      	ldrb	r1, [r3, #0]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	0018      	movs	r0, r3
 8008d9a:	f7ff fe2d 	bl	80089f8 <HAL_I2C_AddrCallback>
}
 8008d9e:	e007      	b.n	8008db0 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2208      	movs	r2, #8
 8008da6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2240      	movs	r2, #64	; 0x40
 8008dac:	2100      	movs	r1, #0
 8008dae:	5499      	strb	r1, [r3, r2]
}
 8008db0:	46c0      	nop			; (mov r8, r8)
 8008db2:	46bd      	mov	sp, r7
 8008db4:	b004      	add	sp, #16
 8008db6:	bdb0      	pop	{r4, r5, r7, pc}

08008db8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2242      	movs	r2, #66	; 0x42
 8008dcc:	2100      	movs	r1, #0
 8008dce:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	0b9b      	lsrs	r3, r3, #14
 8008dd4:	001a      	movs	r2, r3
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	4013      	ands	r3, r2
 8008dda:	d008      	beq.n	8008dee <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4925      	ldr	r1, [pc, #148]	; (8008e7c <I2C_ITSlaveSeqCplt+0xc4>)
 8008de8:	400a      	ands	r2, r1
 8008dea:	601a      	str	r2, [r3, #0]
 8008dec:	e00d      	b.n	8008e0a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	0bdb      	lsrs	r3, r3, #15
 8008df2:	001a      	movs	r2, r3
 8008df4:	2301      	movs	r3, #1
 8008df6:	4013      	ands	r3, r2
 8008df8:	d007      	beq.n	8008e0a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	491e      	ldr	r1, [pc, #120]	; (8008e80 <I2C_ITSlaveSeqCplt+0xc8>)
 8008e06:	400a      	ands	r2, r1
 8008e08:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2241      	movs	r2, #65	; 0x41
 8008e0e:	5c9b      	ldrb	r3, [r3, r2]
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	2b29      	cmp	r3, #41	; 0x29
 8008e14:	d114      	bne.n	8008e40 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2241      	movs	r2, #65	; 0x41
 8008e1a:	2128      	movs	r1, #40	; 0x28
 8008e1c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2221      	movs	r2, #33	; 0x21
 8008e22:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2101      	movs	r1, #1
 8008e28:	0018      	movs	r0, r3
 8008e2a:	f000 fc4b 	bl	80096c4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2240      	movs	r2, #64	; 0x40
 8008e32:	2100      	movs	r1, #0
 8008e34:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	0018      	movs	r0, r3
 8008e3a:	f7ff fdcd 	bl	80089d8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008e3e:	e019      	b.n	8008e74 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2241      	movs	r2, #65	; 0x41
 8008e44:	5c9b      	ldrb	r3, [r3, r2]
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	2b2a      	cmp	r3, #42	; 0x2a
 8008e4a:	d113      	bne.n	8008e74 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2241      	movs	r2, #65	; 0x41
 8008e50:	2128      	movs	r1, #40	; 0x28
 8008e52:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2222      	movs	r2, #34	; 0x22
 8008e58:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2102      	movs	r1, #2
 8008e5e:	0018      	movs	r0, r3
 8008e60:	f000 fc30 	bl	80096c4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2240      	movs	r2, #64	; 0x40
 8008e68:	2100      	movs	r1, #0
 8008e6a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	0018      	movs	r0, r3
 8008e70:	f7ff fdba 	bl	80089e8 <HAL_I2C_SlaveRxCpltCallback>
}
 8008e74:	46c0      	nop			; (mov r8, r8)
 8008e76:	46bd      	mov	sp, r7
 8008e78:	b004      	add	sp, #16
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	ffffbfff 	.word	0xffffbfff
 8008e80:	ffff7fff 	.word	0xffff7fff

08008e84 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008e9a:	200f      	movs	r0, #15
 8008e9c:	183b      	adds	r3, r7, r0
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	2141      	movs	r1, #65	; 0x41
 8008ea2:	5c52      	ldrb	r2, [r2, r1]
 8008ea4:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2220      	movs	r2, #32
 8008eac:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008eae:	183b      	adds	r3, r7, r0
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	2b21      	cmp	r3, #33	; 0x21
 8008eb4:	d003      	beq.n	8008ebe <I2C_ITSlaveCplt+0x3a>
 8008eb6:	183b      	adds	r3, r7, r0
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	2b29      	cmp	r3, #41	; 0x29
 8008ebc:	d109      	bne.n	8008ed2 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008ebe:	4a7d      	ldr	r2, [pc, #500]	; (80090b4 <I2C_ITSlaveCplt+0x230>)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	0011      	movs	r1, r2
 8008ec4:	0018      	movs	r0, r3
 8008ec6:	f000 fbfd 	bl	80096c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2221      	movs	r2, #33	; 0x21
 8008ece:	631a      	str	r2, [r3, #48]	; 0x30
 8008ed0:	e011      	b.n	8008ef6 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008ed2:	220f      	movs	r2, #15
 8008ed4:	18bb      	adds	r3, r7, r2
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	2b22      	cmp	r3, #34	; 0x22
 8008eda:	d003      	beq.n	8008ee4 <I2C_ITSlaveCplt+0x60>
 8008edc:	18bb      	adds	r3, r7, r2
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8008ee2:	d108      	bne.n	8008ef6 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008ee4:	4a74      	ldr	r2, [pc, #464]	; (80090b8 <I2C_ITSlaveCplt+0x234>)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	0011      	movs	r1, r2
 8008eea:	0018      	movs	r0, r3
 8008eec:	f000 fbea 	bl	80096c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2222      	movs	r2, #34	; 0x22
 8008ef4:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	685a      	ldr	r2, [r3, #4]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2180      	movs	r1, #128	; 0x80
 8008f02:	0209      	lsls	r1, r1, #8
 8008f04:	430a      	orrs	r2, r1
 8008f06:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	685a      	ldr	r2, [r3, #4]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	496a      	ldr	r1, [pc, #424]	; (80090bc <I2C_ITSlaveCplt+0x238>)
 8008f14:	400a      	ands	r2, r1
 8008f16:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	0018      	movs	r0, r3
 8008f1c:	f000 fa3b 	bl	8009396 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	0b9b      	lsrs	r3, r3, #14
 8008f24:	001a      	movs	r2, r3
 8008f26:	2301      	movs	r3, #1
 8008f28:	4013      	ands	r3, r2
 8008f2a:	d013      	beq.n	8008f54 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4962      	ldr	r1, [pc, #392]	; (80090c0 <I2C_ITSlaveCplt+0x23c>)
 8008f38:	400a      	ands	r2, r1
 8008f3a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d020      	beq.n	8008f86 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008f52:	e018      	b.n	8008f86 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	0bdb      	lsrs	r3, r3, #15
 8008f58:	001a      	movs	r2, r3
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	d012      	beq.n	8008f86 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4956      	ldr	r1, [pc, #344]	; (80090c4 <I2C_ITSlaveCplt+0x240>)
 8008f6c:	400a      	ands	r2, r1
 8008f6e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d006      	beq.n	8008f86 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	b29a      	uxth	r2, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	089b      	lsrs	r3, r3, #2
 8008f8a:	001a      	movs	r2, r3
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	4013      	ands	r3, r2
 8008f90:	d020      	beq.n	8008fd4 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	2204      	movs	r2, #4
 8008f96:	4393      	bics	r3, r2
 8008f98:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa4:	b2d2      	uxtb	r2, r2
 8008fa6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fac:	1c5a      	adds	r2, r3, #1
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00c      	beq.n	8008fd4 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d005      	beq.n	8008fea <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe2:	2204      	movs	r2, #4
 8008fe4:	431a      	orrs	r2, r3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2242      	movs	r2, #66	; 0x42
 8008fee:	2100      	movs	r1, #0
 8008ff0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d013      	beq.n	8009028 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	0011      	movs	r1, r2
 8009008:	0018      	movs	r0, r3
 800900a:	f000 f8b9 	bl	8009180 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2241      	movs	r2, #65	; 0x41
 8009012:	5c9b      	ldrb	r3, [r3, r2]
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b28      	cmp	r3, #40	; 0x28
 8009018:	d147      	bne.n	80090aa <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800901a:	697a      	ldr	r2, [r7, #20]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	0011      	movs	r1, r2
 8009020:	0018      	movs	r0, r3
 8009022:	f000 f853 	bl	80090cc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009026:	e040      	b.n	80090aa <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902c:	4a26      	ldr	r2, [pc, #152]	; (80090c8 <I2C_ITSlaveCplt+0x244>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d016      	beq.n	8009060 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	0018      	movs	r0, r3
 8009036:	f7ff febf 	bl	8008db8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a22      	ldr	r2, [pc, #136]	; (80090c8 <I2C_ITSlaveCplt+0x244>)
 800903e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2241      	movs	r2, #65	; 0x41
 8009044:	2120      	movs	r1, #32
 8009046:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2240      	movs	r2, #64	; 0x40
 8009052:	2100      	movs	r1, #0
 8009054:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	0018      	movs	r0, r3
 800905a:	f7ff fcdd 	bl	8008a18 <HAL_I2C_ListenCpltCallback>
}
 800905e:	e024      	b.n	80090aa <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2241      	movs	r2, #65	; 0x41
 8009064:	5c9b      	ldrb	r3, [r3, r2]
 8009066:	b2db      	uxtb	r3, r3
 8009068:	2b22      	cmp	r3, #34	; 0x22
 800906a:	d10f      	bne.n	800908c <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2241      	movs	r2, #65	; 0x41
 8009070:	2120      	movs	r1, #32
 8009072:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2240      	movs	r2, #64	; 0x40
 800907e:	2100      	movs	r1, #0
 8009080:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	0018      	movs	r0, r3
 8009086:	f7ff fcaf 	bl	80089e8 <HAL_I2C_SlaveRxCpltCallback>
}
 800908a:	e00e      	b.n	80090aa <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2241      	movs	r2, #65	; 0x41
 8009090:	2120      	movs	r1, #32
 8009092:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2240      	movs	r2, #64	; 0x40
 800909e:	2100      	movs	r1, #0
 80090a0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	0018      	movs	r0, r3
 80090a6:	f7ff fc97 	bl	80089d8 <HAL_I2C_SlaveTxCpltCallback>
}
 80090aa:	46c0      	nop			; (mov r8, r8)
 80090ac:	46bd      	mov	sp, r7
 80090ae:	b006      	add	sp, #24
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	46c0      	nop			; (mov r8, r8)
 80090b4:	00008001 	.word	0x00008001
 80090b8:	00008002 	.word	0x00008002
 80090bc:	fe00e800 	.word	0xfe00e800
 80090c0:	ffffbfff 	.word	0xffffbfff
 80090c4:	ffff7fff 	.word	0xffff7fff
 80090c8:	ffff0000 	.word	0xffff0000

080090cc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4a27      	ldr	r2, [pc, #156]	; (8009178 <I2C_ITListenCplt+0xac>)
 80090da:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2241      	movs	r2, #65	; 0x41
 80090e6:	2120      	movs	r1, #32
 80090e8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2242      	movs	r2, #66	; 0x42
 80090ee:	2100      	movs	r1, #0
 80090f0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	089b      	lsrs	r3, r3, #2
 80090fc:	001a      	movs	r2, r3
 80090fe:	2301      	movs	r3, #1
 8009100:	4013      	ands	r3, r2
 8009102:	d022      	beq.n	800914a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910e:	b2d2      	uxtb	r2, r2
 8009110:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009116:	1c5a      	adds	r2, r3, #1
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009120:	2b00      	cmp	r3, #0
 8009122:	d012      	beq.n	800914a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009128:	3b01      	subs	r3, #1
 800912a:	b29a      	uxth	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009134:	b29b      	uxth	r3, r3
 8009136:	3b01      	subs	r3, #1
 8009138:	b29a      	uxth	r2, r3
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009142:	2204      	movs	r2, #4
 8009144:	431a      	orrs	r2, r3
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800914a:	4a0c      	ldr	r2, [pc, #48]	; (800917c <I2C_ITListenCplt+0xb0>)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	0011      	movs	r1, r2
 8009150:	0018      	movs	r0, r3
 8009152:	f000 fab7 	bl	80096c4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2210      	movs	r2, #16
 800915c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2240      	movs	r2, #64	; 0x40
 8009162:	2100      	movs	r1, #0
 8009164:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	0018      	movs	r0, r3
 800916a:	f7ff fc55 	bl	8008a18 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800916e:	46c0      	nop			; (mov r8, r8)
 8009170:	46bd      	mov	sp, r7
 8009172:	b002      	add	sp, #8
 8009174:	bd80      	pop	{r7, pc}
 8009176:	46c0      	nop			; (mov r8, r8)
 8009178:	ffff0000 	.word	0xffff0000
 800917c:	00008003 	.word	0x00008003

08009180 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800918a:	200f      	movs	r0, #15
 800918c:	183b      	adds	r3, r7, r0
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	2141      	movs	r1, #65	; 0x41
 8009192:	5c52      	ldrb	r2, [r2, r1]
 8009194:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2242      	movs	r2, #66	; 0x42
 800919a:	2100      	movs	r1, #0
 800919c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4a62      	ldr	r2, [pc, #392]	; (800932c <I2C_ITError+0x1ac>)
 80091a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	431a      	orrs	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80091b6:	183b      	adds	r3, r7, r0
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	2b28      	cmp	r3, #40	; 0x28
 80091bc:	d007      	beq.n	80091ce <I2C_ITError+0x4e>
 80091be:	183b      	adds	r3, r7, r0
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	2b29      	cmp	r3, #41	; 0x29
 80091c4:	d003      	beq.n	80091ce <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80091c6:	183b      	adds	r3, r7, r0
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	2b2a      	cmp	r3, #42	; 0x2a
 80091cc:	d10c      	bne.n	80091e8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2103      	movs	r1, #3
 80091d2:	0018      	movs	r0, r3
 80091d4:	f000 fa76 	bl	80096c4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2241      	movs	r2, #65	; 0x41
 80091dc:	2128      	movs	r1, #40	; 0x28
 80091de:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a53      	ldr	r2, [pc, #332]	; (8009330 <I2C_ITError+0x1b0>)
 80091e4:	635a      	str	r2, [r3, #52]	; 0x34
 80091e6:	e012      	b.n	800920e <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80091e8:	4a52      	ldr	r2, [pc, #328]	; (8009334 <I2C_ITError+0x1b4>)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	0011      	movs	r1, r2
 80091ee:	0018      	movs	r0, r3
 80091f0:	f000 fa68 	bl	80096c4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2241      	movs	r2, #65	; 0x41
 80091f8:	5c9b      	ldrb	r3, [r3, r2]
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	2b60      	cmp	r3, #96	; 0x60
 80091fe:	d003      	beq.n	8009208 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2241      	movs	r2, #65	; 0x41
 8009204:	2120      	movs	r1, #32
 8009206:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009212:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009218:	2b00      	cmp	r3, #0
 800921a:	d03b      	beq.n	8009294 <I2C_ITError+0x114>
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	2b11      	cmp	r3, #17
 8009220:	d002      	beq.n	8009228 <I2C_ITError+0xa8>
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	2b21      	cmp	r3, #33	; 0x21
 8009226:	d135      	bne.n	8009294 <I2C_ITError+0x114>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	2380      	movs	r3, #128	; 0x80
 8009230:	01db      	lsls	r3, r3, #7
 8009232:	401a      	ands	r2, r3
 8009234:	2380      	movs	r3, #128	; 0x80
 8009236:	01db      	lsls	r3, r3, #7
 8009238:	429a      	cmp	r2, r3
 800923a:	d107      	bne.n	800924c <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	493c      	ldr	r1, [pc, #240]	; (8009338 <I2C_ITError+0x1b8>)
 8009248:	400a      	ands	r2, r1
 800924a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009250:	0018      	movs	r0, r3
 8009252:	f7fe ffa7 	bl	80081a4 <HAL_DMA_GetState>
 8009256:	0003      	movs	r3, r0
 8009258:	2b01      	cmp	r3, #1
 800925a:	d016      	beq.n	800928a <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009260:	4a36      	ldr	r2, [pc, #216]	; (800933c <I2C_ITError+0x1bc>)
 8009262:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2240      	movs	r2, #64	; 0x40
 8009268:	2100      	movs	r1, #0
 800926a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009270:	0018      	movs	r0, r3
 8009272:	f7fe fe7b 	bl	8007f6c <HAL_DMA_Abort_IT>
 8009276:	1e03      	subs	r3, r0, #0
 8009278:	d051      	beq.n	800931e <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009284:	0018      	movs	r0, r3
 8009286:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009288:	e049      	b.n	800931e <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	0018      	movs	r0, r3
 800928e:	f000 f859 	bl	8009344 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009292:	e044      	b.n	800931e <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009298:	2b00      	cmp	r3, #0
 800929a:	d03b      	beq.n	8009314 <I2C_ITError+0x194>
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	2b12      	cmp	r3, #18
 80092a0:	d002      	beq.n	80092a8 <I2C_ITError+0x128>
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	2b22      	cmp	r3, #34	; 0x22
 80092a6:	d135      	bne.n	8009314 <I2C_ITError+0x194>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	2380      	movs	r3, #128	; 0x80
 80092b0:	021b      	lsls	r3, r3, #8
 80092b2:	401a      	ands	r2, r3
 80092b4:	2380      	movs	r3, #128	; 0x80
 80092b6:	021b      	lsls	r3, r3, #8
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d107      	bne.n	80092cc <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	491e      	ldr	r1, [pc, #120]	; (8009340 <I2C_ITError+0x1c0>)
 80092c8:	400a      	ands	r2, r1
 80092ca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092d0:	0018      	movs	r0, r3
 80092d2:	f7fe ff67 	bl	80081a4 <HAL_DMA_GetState>
 80092d6:	0003      	movs	r3, r0
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d016      	beq.n	800930a <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092e0:	4a16      	ldr	r2, [pc, #88]	; (800933c <I2C_ITError+0x1bc>)
 80092e2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2240      	movs	r2, #64	; 0x40
 80092e8:	2100      	movs	r1, #0
 80092ea:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092f0:	0018      	movs	r0, r3
 80092f2:	f7fe fe3b 	bl	8007f6c <HAL_DMA_Abort_IT>
 80092f6:	1e03      	subs	r3, r0, #0
 80092f8:	d013      	beq.n	8009322 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009304:	0018      	movs	r0, r3
 8009306:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009308:	e00b      	b.n	8009322 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	0018      	movs	r0, r3
 800930e:	f000 f819 	bl	8009344 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009312:	e006      	b.n	8009322 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	0018      	movs	r0, r3
 8009318:	f000 f814 	bl	8009344 <I2C_TreatErrorCallback>
  }
}
 800931c:	e002      	b.n	8009324 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800931e:	46c0      	nop			; (mov r8, r8)
 8009320:	e000      	b.n	8009324 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009322:	46c0      	nop			; (mov r8, r8)
}
 8009324:	46c0      	nop			; (mov r8, r8)
 8009326:	46bd      	mov	sp, r7
 8009328:	b004      	add	sp, #16
 800932a:	bd80      	pop	{r7, pc}
 800932c:	ffff0000 	.word	0xffff0000
 8009330:	08008a49 	.word	0x08008a49
 8009334:	00008003 	.word	0x00008003
 8009338:	ffffbfff 	.word	0xffffbfff
 800933c:	080093db 	.word	0x080093db
 8009340:	ffff7fff 	.word	0xffff7fff

08009344 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2241      	movs	r2, #65	; 0x41
 8009350:	5c9b      	ldrb	r3, [r3, r2]
 8009352:	b2db      	uxtb	r3, r3
 8009354:	2b60      	cmp	r3, #96	; 0x60
 8009356:	d10f      	bne.n	8009378 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2241      	movs	r2, #65	; 0x41
 800935c:	2120      	movs	r1, #32
 800935e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2240      	movs	r2, #64	; 0x40
 800936a:	2100      	movs	r1, #0
 800936c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	0018      	movs	r0, r3
 8009372:	f7ff fb61 	bl	8008a38 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009376:	e00a      	b.n	800938e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2240      	movs	r2, #64	; 0x40
 8009382:	2100      	movs	r1, #0
 8009384:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	0018      	movs	r0, r3
 800938a:	f7ff fb4d 	bl	8008a28 <HAL_I2C_ErrorCallback>
}
 800938e:	46c0      	nop			; (mov r8, r8)
 8009390:	46bd      	mov	sp, r7
 8009392:	b002      	add	sp, #8
 8009394:	bd80      	pop	{r7, pc}

08009396 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b082      	sub	sp, #8
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	699b      	ldr	r3, [r3, #24]
 80093a4:	2202      	movs	r2, #2
 80093a6:	4013      	ands	r3, r2
 80093a8:	2b02      	cmp	r3, #2
 80093aa:	d103      	bne.n	80093b4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2200      	movs	r2, #0
 80093b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	699b      	ldr	r3, [r3, #24]
 80093ba:	2201      	movs	r2, #1
 80093bc:	4013      	ands	r3, r2
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d007      	beq.n	80093d2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	699a      	ldr	r2, [r3, #24]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2101      	movs	r1, #1
 80093ce:	430a      	orrs	r2, r1
 80093d0:	619a      	str	r2, [r3, #24]
  }
}
 80093d2:	46c0      	nop			; (mov r8, r8)
 80093d4:	46bd      	mov	sp, r7
 80093d6:	b002      	add	sp, #8
 80093d8:	bd80      	pop	{r7, pc}

080093da <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b084      	sub	sp, #16
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d003      	beq.n	80093f8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f4:	2200      	movs	r2, #0
 80093f6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d003      	beq.n	8009408 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009404:	2200      	movs	r2, #0
 8009406:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	0018      	movs	r0, r3
 800940c:	f7ff ff9a 	bl	8009344 <I2C_TreatErrorCallback>
}
 8009410:	46c0      	nop			; (mov r8, r8)
 8009412:	46bd      	mov	sp, r7
 8009414:	b004      	add	sp, #16
 8009416:	bd80      	pop	{r7, pc}

08009418 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	603b      	str	r3, [r7, #0]
 8009424:	1dfb      	adds	r3, r7, #7
 8009426:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009428:	e021      	b.n	800946e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	3301      	adds	r3, #1
 800942e:	d01e      	beq.n	800946e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009430:	f7fe f90a 	bl	8007648 <HAL_GetTick>
 8009434:	0002      	movs	r2, r0
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	683a      	ldr	r2, [r7, #0]
 800943c:	429a      	cmp	r2, r3
 800943e:	d302      	bcc.n	8009446 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d113      	bne.n	800946e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800944a:	2220      	movs	r2, #32
 800944c:	431a      	orrs	r2, r3
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2241      	movs	r2, #65	; 0x41
 8009456:	2120      	movs	r1, #32
 8009458:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2242      	movs	r2, #66	; 0x42
 800945e:	2100      	movs	r1, #0
 8009460:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2240      	movs	r2, #64	; 0x40
 8009466:	2100      	movs	r1, #0
 8009468:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	e00f      	b.n	800948e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	699b      	ldr	r3, [r3, #24]
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	4013      	ands	r3, r2
 8009478:	68ba      	ldr	r2, [r7, #8]
 800947a:	1ad3      	subs	r3, r2, r3
 800947c:	425a      	negs	r2, r3
 800947e:	4153      	adcs	r3, r2
 8009480:	b2db      	uxtb	r3, r3
 8009482:	001a      	movs	r2, r3
 8009484:	1dfb      	adds	r3, r7, #7
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	429a      	cmp	r2, r3
 800948a:	d0ce      	beq.n	800942a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	0018      	movs	r0, r3
 8009490:	46bd      	mov	sp, r7
 8009492:	b004      	add	sp, #16
 8009494:	bd80      	pop	{r7, pc}

08009496 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009496:	b580      	push	{r7, lr}
 8009498:	b084      	sub	sp, #16
 800949a:	af00      	add	r7, sp, #0
 800949c:	60f8      	str	r0, [r7, #12]
 800949e:	60b9      	str	r1, [r7, #8]
 80094a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80094a2:	e02b      	b.n	80094fc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	68b9      	ldr	r1, [r7, #8]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	0018      	movs	r0, r3
 80094ac:	f000 f86e 	bl	800958c <I2C_IsAcknowledgeFailed>
 80094b0:	1e03      	subs	r3, r0, #0
 80094b2:	d001      	beq.n	80094b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80094b4:	2301      	movs	r3, #1
 80094b6:	e029      	b.n	800950c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	3301      	adds	r3, #1
 80094bc:	d01e      	beq.n	80094fc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094be:	f7fe f8c3 	bl	8007648 <HAL_GetTick>
 80094c2:	0002      	movs	r2, r0
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	1ad3      	subs	r3, r2, r3
 80094c8:	68ba      	ldr	r2, [r7, #8]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d302      	bcc.n	80094d4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d113      	bne.n	80094fc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094d8:	2220      	movs	r2, #32
 80094da:	431a      	orrs	r2, r3
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2241      	movs	r2, #65	; 0x41
 80094e4:	2120      	movs	r1, #32
 80094e6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2242      	movs	r2, #66	; 0x42
 80094ec:	2100      	movs	r1, #0
 80094ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2240      	movs	r2, #64	; 0x40
 80094f4:	2100      	movs	r1, #0
 80094f6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	e007      	b.n	800950c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	699b      	ldr	r3, [r3, #24]
 8009502:	2202      	movs	r2, #2
 8009504:	4013      	ands	r3, r2
 8009506:	2b02      	cmp	r3, #2
 8009508:	d1cc      	bne.n	80094a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	0018      	movs	r0, r3
 800950e:	46bd      	mov	sp, r7
 8009510:	b004      	add	sp, #16
 8009512:	bd80      	pop	{r7, pc}

08009514 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009520:	e028      	b.n	8009574 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	68b9      	ldr	r1, [r7, #8]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	0018      	movs	r0, r3
 800952a:	f000 f82f 	bl	800958c <I2C_IsAcknowledgeFailed>
 800952e:	1e03      	subs	r3, r0, #0
 8009530:	d001      	beq.n	8009536 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009532:	2301      	movs	r3, #1
 8009534:	e026      	b.n	8009584 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009536:	f7fe f887 	bl	8007648 <HAL_GetTick>
 800953a:	0002      	movs	r2, r0
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	1ad3      	subs	r3, r2, r3
 8009540:	68ba      	ldr	r2, [r7, #8]
 8009542:	429a      	cmp	r2, r3
 8009544:	d302      	bcc.n	800954c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d113      	bne.n	8009574 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009550:	2220      	movs	r2, #32
 8009552:	431a      	orrs	r2, r3
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2241      	movs	r2, #65	; 0x41
 800955c:	2120      	movs	r1, #32
 800955e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2242      	movs	r2, #66	; 0x42
 8009564:	2100      	movs	r1, #0
 8009566:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2240      	movs	r2, #64	; 0x40
 800956c:	2100      	movs	r1, #0
 800956e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8009570:	2301      	movs	r3, #1
 8009572:	e007      	b.n	8009584 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	2220      	movs	r2, #32
 800957c:	4013      	ands	r3, r2
 800957e:	2b20      	cmp	r3, #32
 8009580:	d1cf      	bne.n	8009522 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	0018      	movs	r0, r3
 8009586:	46bd      	mov	sp, r7
 8009588:	b004      	add	sp, #16
 800958a:	bd80      	pop	{r7, pc}

0800958c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	699b      	ldr	r3, [r3, #24]
 800959e:	2210      	movs	r2, #16
 80095a0:	4013      	ands	r3, r2
 80095a2:	2b10      	cmp	r3, #16
 80095a4:	d151      	bne.n	800964a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80095a6:	e021      	b.n	80095ec <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	3301      	adds	r3, #1
 80095ac:	d01e      	beq.n	80095ec <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095ae:	f7fe f84b 	bl	8007648 <HAL_GetTick>
 80095b2:	0002      	movs	r2, r0
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	1ad3      	subs	r3, r2, r3
 80095b8:	68ba      	ldr	r2, [r7, #8]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d302      	bcc.n	80095c4 <I2C_IsAcknowledgeFailed+0x38>
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d113      	bne.n	80095ec <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095c8:	2220      	movs	r2, #32
 80095ca:	431a      	orrs	r2, r3
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2241      	movs	r2, #65	; 0x41
 80095d4:	2120      	movs	r1, #32
 80095d6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2242      	movs	r2, #66	; 0x42
 80095dc:	2100      	movs	r1, #0
 80095de:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2240      	movs	r2, #64	; 0x40
 80095e4:	2100      	movs	r1, #0
 80095e6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	e02f      	b.n	800964c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	699b      	ldr	r3, [r3, #24]
 80095f2:	2220      	movs	r2, #32
 80095f4:	4013      	ands	r3, r2
 80095f6:	2b20      	cmp	r3, #32
 80095f8:	d1d6      	bne.n	80095a8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	2210      	movs	r2, #16
 8009600:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2220      	movs	r2, #32
 8009608:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	0018      	movs	r0, r3
 800960e:	f7ff fec2 	bl	8009396 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	685a      	ldr	r2, [r3, #4]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	490d      	ldr	r1, [pc, #52]	; (8009654 <I2C_IsAcknowledgeFailed+0xc8>)
 800961e:	400a      	ands	r2, r1
 8009620:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009626:	2204      	movs	r2, #4
 8009628:	431a      	orrs	r2, r3
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2241      	movs	r2, #65	; 0x41
 8009632:	2120      	movs	r1, #32
 8009634:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2242      	movs	r2, #66	; 0x42
 800963a:	2100      	movs	r1, #0
 800963c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2240      	movs	r2, #64	; 0x40
 8009642:	2100      	movs	r1, #0
 8009644:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	e000      	b.n	800964c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800964a:	2300      	movs	r3, #0
}
 800964c:	0018      	movs	r0, r3
 800964e:	46bd      	mov	sp, r7
 8009650:	b004      	add	sp, #16
 8009652:	bd80      	pop	{r7, pc}
 8009654:	fe00e800 	.word	0xfe00e800

08009658 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8009658:	b590      	push	{r4, r7, lr}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	0008      	movs	r0, r1
 8009662:	0011      	movs	r1, r2
 8009664:	607b      	str	r3, [r7, #4]
 8009666:	240a      	movs	r4, #10
 8009668:	193b      	adds	r3, r7, r4
 800966a:	1c02      	adds	r2, r0, #0
 800966c:	801a      	strh	r2, [r3, #0]
 800966e:	2009      	movs	r0, #9
 8009670:	183b      	adds	r3, r7, r0
 8009672:	1c0a      	adds	r2, r1, #0
 8009674:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	6a3a      	ldr	r2, [r7, #32]
 800967e:	0d51      	lsrs	r1, r2, #21
 8009680:	2280      	movs	r2, #128	; 0x80
 8009682:	00d2      	lsls	r2, r2, #3
 8009684:	400a      	ands	r2, r1
 8009686:	490e      	ldr	r1, [pc, #56]	; (80096c0 <I2C_TransferConfig+0x68>)
 8009688:	430a      	orrs	r2, r1
 800968a:	43d2      	mvns	r2, r2
 800968c:	401a      	ands	r2, r3
 800968e:	0011      	movs	r1, r2
 8009690:	193b      	adds	r3, r7, r4
 8009692:	881b      	ldrh	r3, [r3, #0]
 8009694:	059b      	lsls	r3, r3, #22
 8009696:	0d9a      	lsrs	r2, r3, #22
 8009698:	183b      	adds	r3, r7, r0
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	0418      	lsls	r0, r3, #16
 800969e:	23ff      	movs	r3, #255	; 0xff
 80096a0:	041b      	lsls	r3, r3, #16
 80096a2:	4003      	ands	r3, r0
 80096a4:	431a      	orrs	r2, r3
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	431a      	orrs	r2, r3
 80096aa:	6a3b      	ldr	r3, [r7, #32]
 80096ac:	431a      	orrs	r2, r3
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	430a      	orrs	r2, r1
 80096b4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80096b6:	46c0      	nop			; (mov r8, r8)
 80096b8:	46bd      	mov	sp, r7
 80096ba:	b005      	add	sp, #20
 80096bc:	bd90      	pop	{r4, r7, pc}
 80096be:	46c0      	nop			; (mov r8, r8)
 80096c0:	03ff63ff 	.word	0x03ff63ff

080096c4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	000a      	movs	r2, r1
 80096ce:	1cbb      	adds	r3, r7, #2
 80096d0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80096d2:	2300      	movs	r3, #0
 80096d4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80096d6:	1cbb      	adds	r3, r7, #2
 80096d8:	881b      	ldrh	r3, [r3, #0]
 80096da:	2201      	movs	r2, #1
 80096dc:	4013      	ands	r3, r2
 80096de:	d010      	beq.n	8009702 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2242      	movs	r2, #66	; 0x42
 80096e4:	4313      	orrs	r3, r2
 80096e6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2241      	movs	r2, #65	; 0x41
 80096ec:	5c9b      	ldrb	r3, [r3, r2]
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	001a      	movs	r2, r3
 80096f2:	2328      	movs	r3, #40	; 0x28
 80096f4:	4013      	ands	r3, r2
 80096f6:	2b28      	cmp	r3, #40	; 0x28
 80096f8:	d003      	beq.n	8009702 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	22b0      	movs	r2, #176	; 0xb0
 80096fe:	4313      	orrs	r3, r2
 8009700:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009702:	1cbb      	adds	r3, r7, #2
 8009704:	881b      	ldrh	r3, [r3, #0]
 8009706:	2202      	movs	r2, #2
 8009708:	4013      	ands	r3, r2
 800970a:	d010      	beq.n	800972e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2244      	movs	r2, #68	; 0x44
 8009710:	4313      	orrs	r3, r2
 8009712:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2241      	movs	r2, #65	; 0x41
 8009718:	5c9b      	ldrb	r3, [r3, r2]
 800971a:	b2db      	uxtb	r3, r3
 800971c:	001a      	movs	r2, r3
 800971e:	2328      	movs	r3, #40	; 0x28
 8009720:	4013      	ands	r3, r2
 8009722:	2b28      	cmp	r3, #40	; 0x28
 8009724:	d003      	beq.n	800972e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	22b0      	movs	r2, #176	; 0xb0
 800972a:	4313      	orrs	r3, r2
 800972c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800972e:	1cbb      	adds	r3, r7, #2
 8009730:	2200      	movs	r2, #0
 8009732:	5e9b      	ldrsh	r3, [r3, r2]
 8009734:	2b00      	cmp	r3, #0
 8009736:	da03      	bge.n	8009740 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	22b8      	movs	r2, #184	; 0xb8
 800973c:	4313      	orrs	r3, r2
 800973e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009740:	1cbb      	adds	r3, r7, #2
 8009742:	881b      	ldrh	r3, [r3, #0]
 8009744:	2b10      	cmp	r3, #16
 8009746:	d103      	bne.n	8009750 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2290      	movs	r2, #144	; 0x90
 800974c:	4313      	orrs	r3, r2
 800974e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009750:	1cbb      	adds	r3, r7, #2
 8009752:	881b      	ldrh	r3, [r3, #0]
 8009754:	2b20      	cmp	r3, #32
 8009756:	d103      	bne.n	8009760 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2220      	movs	r2, #32
 800975c:	4313      	orrs	r3, r2
 800975e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009760:	1cbb      	adds	r3, r7, #2
 8009762:	881b      	ldrh	r3, [r3, #0]
 8009764:	2b40      	cmp	r3, #64	; 0x40
 8009766:	d103      	bne.n	8009770 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2240      	movs	r2, #64	; 0x40
 800976c:	4313      	orrs	r3, r2
 800976e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	43d9      	mvns	r1, r3
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	400a      	ands	r2, r1
 8009780:	601a      	str	r2, [r3, #0]
}
 8009782:	46c0      	nop			; (mov r8, r8)
 8009784:	46bd      	mov	sp, r7
 8009786:	b004      	add	sp, #16
 8009788:	bd80      	pop	{r7, pc}
	...

0800978c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2241      	movs	r2, #65	; 0x41
 800979a:	5c9b      	ldrb	r3, [r3, r2]
 800979c:	b2db      	uxtb	r3, r3
 800979e:	2b20      	cmp	r3, #32
 80097a0:	d138      	bne.n	8009814 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2240      	movs	r2, #64	; 0x40
 80097a6:	5c9b      	ldrb	r3, [r3, r2]
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d101      	bne.n	80097b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80097ac:	2302      	movs	r3, #2
 80097ae:	e032      	b.n	8009816 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2240      	movs	r2, #64	; 0x40
 80097b4:	2101      	movs	r1, #1
 80097b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2241      	movs	r2, #65	; 0x41
 80097bc:	2124      	movs	r1, #36	; 0x24
 80097be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2101      	movs	r1, #1
 80097cc:	438a      	bics	r2, r1
 80097ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4911      	ldr	r1, [pc, #68]	; (8009820 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80097dc:	400a      	ands	r2, r1
 80097de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	6819      	ldr	r1, [r3, #0]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	683a      	ldr	r2, [r7, #0]
 80097ec:	430a      	orrs	r2, r1
 80097ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2101      	movs	r1, #1
 80097fc:	430a      	orrs	r2, r1
 80097fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2241      	movs	r2, #65	; 0x41
 8009804:	2120      	movs	r1, #32
 8009806:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2240      	movs	r2, #64	; 0x40
 800980c:	2100      	movs	r1, #0
 800980e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009810:	2300      	movs	r3, #0
 8009812:	e000      	b.n	8009816 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009814:	2302      	movs	r3, #2
  }
}
 8009816:	0018      	movs	r0, r3
 8009818:	46bd      	mov	sp, r7
 800981a:	b002      	add	sp, #8
 800981c:	bd80      	pop	{r7, pc}
 800981e:	46c0      	nop			; (mov r8, r8)
 8009820:	ffffefff 	.word	0xffffefff

08009824 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2241      	movs	r2, #65	; 0x41
 8009832:	5c9b      	ldrb	r3, [r3, r2]
 8009834:	b2db      	uxtb	r3, r3
 8009836:	2b20      	cmp	r3, #32
 8009838:	d139      	bne.n	80098ae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2240      	movs	r2, #64	; 0x40
 800983e:	5c9b      	ldrb	r3, [r3, r2]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d101      	bne.n	8009848 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009844:	2302      	movs	r3, #2
 8009846:	e033      	b.n	80098b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2240      	movs	r2, #64	; 0x40
 800984c:	2101      	movs	r1, #1
 800984e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2241      	movs	r2, #65	; 0x41
 8009854:	2124      	movs	r1, #36	; 0x24
 8009856:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2101      	movs	r1, #1
 8009864:	438a      	bics	r2, r1
 8009866:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	4a11      	ldr	r2, [pc, #68]	; (80098b8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8009874:	4013      	ands	r3, r2
 8009876:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	021b      	lsls	r3, r3, #8
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	4313      	orrs	r3, r2
 8009880:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	68fa      	ldr	r2, [r7, #12]
 8009888:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2101      	movs	r1, #1
 8009896:	430a      	orrs	r2, r1
 8009898:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2241      	movs	r2, #65	; 0x41
 800989e:	2120      	movs	r1, #32
 80098a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2240      	movs	r2, #64	; 0x40
 80098a6:	2100      	movs	r1, #0
 80098a8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80098aa:	2300      	movs	r3, #0
 80098ac:	e000      	b.n	80098b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80098ae:	2302      	movs	r3, #2
  }
}
 80098b0:	0018      	movs	r0, r3
 80098b2:	46bd      	mov	sp, r7
 80098b4:	b004      	add	sp, #16
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	fffff0ff 	.word	0xfffff0ff

080098bc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b088      	sub	sp, #32
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d101      	bne.n	80098ce <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	e0e5      	b.n	8009a9a <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2235      	movs	r2, #53	; 0x35
 80098d2:	5c9b      	ldrb	r3, [r3, r2]
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d107      	bne.n	80098ea <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2234      	movs	r2, #52	; 0x34
 80098de:	2100      	movs	r1, #0
 80098e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	0018      	movs	r0, r3
 80098e6:	f7fd fa69 	bl	8006dbc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2235      	movs	r2, #53	; 0x35
 80098ee:	2102      	movs	r1, #2
 80098f0:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	69da      	ldr	r2, [r3, #28]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4969      	ldr	r1, [pc, #420]	; (8009aa4 <HAL_I2S_Init+0x1e8>)
 80098fe:	400a      	ands	r2, r1
 8009900:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2202      	movs	r2, #2
 8009908:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	2b02      	cmp	r3, #2
 8009910:	d100      	bne.n	8009914 <HAL_I2S_Init+0x58>
 8009912:	e076      	b.n	8009a02 <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d102      	bne.n	8009922 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800991c:	2310      	movs	r3, #16
 800991e:	617b      	str	r3, [r7, #20]
 8009920:	e001      	b.n	8009926 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8009922:	2320      	movs	r3, #32
 8009924:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	2b20      	cmp	r3, #32
 800992c:	d802      	bhi.n	8009934 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	005b      	lsls	r3, r3, #1
 8009932:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8009934:	2380      	movs	r3, #128	; 0x80
 8009936:	011b      	lsls	r3, r3, #4
 8009938:	0018      	movs	r0, r3
 800993a:	f001 fa9b 	bl	800ae74 <HAL_RCCEx_GetPeriphCLKFreq>
 800993e:	0003      	movs	r3, r0
 8009940:	60fb      	str	r3, [r7, #12]
#endif
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	691a      	ldr	r2, [r3, #16]
 8009946:	2380      	movs	r3, #128	; 0x80
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	429a      	cmp	r2, r3
 800994c:	d131      	bne.n	80099b2 <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	68db      	ldr	r3, [r3, #12]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d016      	beq.n	8009984 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	0019      	movs	r1, r3
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	f7f6 fbd1 	bl	8000104 <__udivsi3>
 8009962:	0003      	movs	r3, r0
 8009964:	001a      	movs	r2, r3
 8009966:	0013      	movs	r3, r2
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	189b      	adds	r3, r3, r2
 800996c:	005b      	lsls	r3, r3, #1
 800996e:	001a      	movs	r2, r3
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	695b      	ldr	r3, [r3, #20]
 8009974:	0019      	movs	r1, r3
 8009976:	0010      	movs	r0, r2
 8009978:	f7f6 fbc4 	bl	8000104 <__udivsi3>
 800997c:	0003      	movs	r3, r0
 800997e:	3305      	adds	r3, #5
 8009980:	613b      	str	r3, [r7, #16]
 8009982:	e02a      	b.n	80099da <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	00db      	lsls	r3, r3, #3
 8009988:	0019      	movs	r1, r3
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f7f6 fbba 	bl	8000104 <__udivsi3>
 8009990:	0003      	movs	r3, r0
 8009992:	001a      	movs	r2, r3
 8009994:	0013      	movs	r3, r2
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	189b      	adds	r3, r3, r2
 800999a:	005b      	lsls	r3, r3, #1
 800999c:	001a      	movs	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	695b      	ldr	r3, [r3, #20]
 80099a2:	0019      	movs	r1, r3
 80099a4:	0010      	movs	r0, r2
 80099a6:	f7f6 fbad 	bl	8000104 <__udivsi3>
 80099aa:	0003      	movs	r3, r0
 80099ac:	3305      	adds	r3, #5
 80099ae:	613b      	str	r3, [r7, #16]
 80099b0:	e013      	b.n	80099da <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80099b2:	6979      	ldr	r1, [r7, #20]
 80099b4:	68f8      	ldr	r0, [r7, #12]
 80099b6:	f7f6 fba5 	bl	8000104 <__udivsi3>
 80099ba:	0003      	movs	r3, r0
 80099bc:	001a      	movs	r2, r3
 80099be:	0013      	movs	r3, r2
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	189b      	adds	r3, r3, r2
 80099c4:	005b      	lsls	r3, r3, #1
 80099c6:	001a      	movs	r2, r3
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	695b      	ldr	r3, [r3, #20]
 80099cc:	0019      	movs	r1, r3
 80099ce:	0010      	movs	r0, r2
 80099d0:	f7f6 fb98 	bl	8000104 <__udivsi3>
 80099d4:	0003      	movs	r3, r0
 80099d6:	3305      	adds	r3, #5
 80099d8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	210a      	movs	r1, #10
 80099de:	0018      	movs	r0, r3
 80099e0:	f7f6 fb90 	bl	8000104 <__udivsi3>
 80099e4:	0003      	movs	r3, r0
 80099e6:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	2201      	movs	r2, #1
 80099ec:	4013      	ands	r3, r2
 80099ee:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80099f0:	693a      	ldr	r2, [r7, #16]
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	1ad3      	subs	r3, r2, r3
 80099f6:	085b      	lsrs	r3, r3, #1
 80099f8:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80099fa:	69bb      	ldr	r3, [r7, #24]
 80099fc:	021b      	lsls	r3, r3, #8
 80099fe:	61bb      	str	r3, [r7, #24]
 8009a00:	e003      	b.n	8009a0a <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8009a02:	2302      	movs	r3, #2
 8009a04:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8009a06:	2300      	movs	r3, #0
 8009a08:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8009a0a:	69fb      	ldr	r3, [r7, #28]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d902      	bls.n	8009a16 <HAL_I2S_Init+0x15a>
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	2bff      	cmp	r3, #255	; 0xff
 8009a14:	d907      	bls.n	8009a26 <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a1a:	2210      	movs	r2, #16
 8009a1c:	431a      	orrs	r2, r3
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8009a22:	2301      	movs	r3, #1
 8009a24:	e039      	b.n	8009a9a <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	691a      	ldr	r2, [r3, #16]
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	431a      	orrs	r2, r3
 8009a2e:	0011      	movs	r1, r2
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	69fa      	ldr	r2, [r7, #28]
 8009a36:	430a      	orrs	r2, r1
 8009a38:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	69db      	ldr	r3, [r3, #28]
 8009a40:	4a18      	ldr	r2, [pc, #96]	; (8009aa4 <HAL_I2S_Init+0x1e8>)
 8009a42:	401a      	ands	r2, r3
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6859      	ldr	r1, [r3, #4]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	4319      	orrs	r1, r3
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	4319      	orrs	r1, r3
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	699b      	ldr	r3, [r3, #24]
 8009a58:	430b      	orrs	r3, r1
 8009a5a:	431a      	orrs	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2180      	movs	r1, #128	; 0x80
 8009a62:	0109      	lsls	r1, r1, #4
 8009a64:	430a      	orrs	r2, r1
 8009a66:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	2b30      	cmp	r3, #48	; 0x30
 8009a6e:	d003      	beq.n	8009a78 <HAL_I2S_Init+0x1bc>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	2bb0      	cmp	r3, #176	; 0xb0
 8009a76:	d108      	bne.n	8009a8a <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	69da      	ldr	r2, [r3, #28]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2180      	movs	r1, #128	; 0x80
 8009a84:	0149      	lsls	r1, r1, #5
 8009a86:	430a      	orrs	r2, r1
 8009a88:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2235      	movs	r2, #53	; 0x35
 8009a94:	2101      	movs	r1, #1
 8009a96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	0018      	movs	r0, r3
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	b008      	add	sp, #32
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	46c0      	nop			; (mov r8, r8)
 8009aa4:	fffff040 	.word	0xfffff040

08009aa8 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	603b      	str	r3, [r7, #0]
 8009ab4:	1dbb      	adds	r3, r7, #6
 8009ab6:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d003      	beq.n	8009ac6 <HAL_I2S_Transmit+0x1e>
 8009abe:	1dbb      	adds	r3, r7, #6
 8009ac0:	881b      	ldrh	r3, [r3, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d101      	bne.n	8009aca <HAL_I2S_Transmit+0x22>
  {
    return  HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e0e2      	b.n	8009c90 <HAL_I2S_Transmit+0x1e8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2234      	movs	r2, #52	; 0x34
 8009ace:	5c9b      	ldrb	r3, [r3, r2]
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d101      	bne.n	8009ada <HAL_I2S_Transmit+0x32>
 8009ad6:	2302      	movs	r3, #2
 8009ad8:	e0da      	b.n	8009c90 <HAL_I2S_Transmit+0x1e8>
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2234      	movs	r2, #52	; 0x34
 8009ade:	2101      	movs	r1, #1
 8009ae0:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2235      	movs	r2, #53	; 0x35
 8009ae6:	5c9b      	ldrb	r3, [r3, r2]
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d005      	beq.n	8009afa <HAL_I2S_Transmit+0x52>
  {
    __HAL_UNLOCK(hi2s);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2234      	movs	r2, #52	; 0x34
 8009af2:	2100      	movs	r1, #0
 8009af4:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8009af6:	2302      	movs	r3, #2
 8009af8:	e0ca      	b.n	8009c90 <HAL_I2S_Transmit+0x1e8>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2235      	movs	r2, #53	; 0x35
 8009afe:	2103      	movs	r1, #3
 8009b00:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2200      	movs	r2, #0
 8009b06:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	68ba      	ldr	r2, [r7, #8]
 8009b0c:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	69db      	ldr	r3, [r3, #28]
 8009b14:	2207      	movs	r2, #7
 8009b16:	4013      	ands	r3, r2
 8009b18:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	2b03      	cmp	r3, #3
 8009b1e:	d002      	beq.n	8009b26 <HAL_I2S_Transmit+0x7e>
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	2b05      	cmp	r3, #5
 8009b24:	d10c      	bne.n	8009b40 <HAL_I2S_Transmit+0x98>
  {
    hi2s->TxXferSize = (Size << 1U);
 8009b26:	1dbb      	adds	r3, r7, #6
 8009b28:	881b      	ldrh	r3, [r3, #0]
 8009b2a:	18db      	adds	r3, r3, r3
 8009b2c:	b29a      	uxth	r2, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8009b32:	1dbb      	adds	r3, r7, #6
 8009b34:	881b      	ldrh	r3, [r3, #0]
 8009b36:	18db      	adds	r3, r3, r3
 8009b38:	b29a      	uxth	r2, r3
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	845a      	strh	r2, [r3, #34]	; 0x22
 8009b3e:	e007      	b.n	8009b50 <HAL_I2S_Transmit+0xa8>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	1dba      	adds	r2, r7, #6
 8009b44:	8812      	ldrh	r2, [r2, #0]
 8009b46:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	1dba      	adds	r2, r7, #6
 8009b4c:	8812      	ldrh	r2, [r2, #0]
 8009b4e:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	69db      	ldr	r3, [r3, #28]
 8009b56:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	69da      	ldr	r2, [r3, #28]
 8009b5e:	2380      	movs	r3, #128	; 0x80
 8009b60:	00db      	lsls	r3, r3, #3
 8009b62:	401a      	ands	r2, r3
 8009b64:	2380      	movs	r3, #128	; 0x80
 8009b66:	00db      	lsls	r3, r3, #3
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d008      	beq.n	8009b7e <HAL_I2S_Transmit+0xd6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	69da      	ldr	r2, [r3, #28]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2180      	movs	r1, #128	; 0x80
 8009b78:	00c9      	lsls	r1, r1, #3
 8009b7a:	430a      	orrs	r2, r1
 8009b7c:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	68f8      	ldr	r0, [r7, #12]
 8009b82:	2201      	movs	r2, #1
 8009b84:	2102      	movs	r1, #2
 8009b86:	f000 fa6d 	bl	800a064 <I2S_WaitFlagStateUntilTimeout>
 8009b8a:	1e03      	subs	r3, r0, #0
 8009b8c:	d04d      	beq.n	8009c2a <HAL_I2S_Transmit+0x182>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b92:	2201      	movs	r2, #1
 8009b94:	431a      	orrs	r2, r3
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2235      	movs	r2, #53	; 0x35
 8009b9e:	2101      	movs	r1, #1
 8009ba0:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2s);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2234      	movs	r2, #52	; 0x34
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8009baa:	2301      	movs	r3, #1
 8009bac:	e070      	b.n	8009c90 <HAL_I2S_Transmit+0x1e8>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	69db      	ldr	r3, [r3, #28]
 8009bb2:	881a      	ldrh	r2, [r3, #0]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	69db      	ldr	r3, [r3, #28]
 8009bbe:	1c9a      	adds	r2, r3, #2
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	61da      	str	r2, [r3, #28]
    hi2s->TxXferCount--;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	3b01      	subs	r3, #1
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	845a      	strh	r2, [r3, #34]	; 0x22

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	68f8      	ldr	r0, [r7, #12]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	2102      	movs	r1, #2
 8009bda:	f000 fa43 	bl	800a064 <I2S_WaitFlagStateUntilTimeout>
 8009bde:	1e03      	subs	r3, r0, #0
 8009be0:	d00f      	beq.n	8009c02 <HAL_I2S_Transmit+0x15a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be6:	2201      	movs	r2, #1
 8009be8:	431a      	orrs	r2, r3
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2235      	movs	r2, #53	; 0x35
 8009bf2:	2101      	movs	r1, #1
 8009bf4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2s);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2234      	movs	r2, #52	; 0x34
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e046      	b.n	8009c90 <HAL_I2S_Transmit+0x1e8>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	2208      	movs	r2, #8
 8009c0a:	4013      	ands	r3, r2
 8009c0c:	2b08      	cmp	r3, #8
 8009c0e:	d10c      	bne.n	8009c2a <HAL_I2S_Transmit+0x182>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8009c10:	2300      	movs	r3, #0
 8009c12:	613b      	str	r3, [r7, #16]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	613b      	str	r3, [r7, #16]
 8009c1c:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c22:	2204      	movs	r2, #4
 8009c24:	431a      	orrs	r2, r3
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	639a      	str	r2, [r3, #56]	; 0x38
  while (hi2s->TxXferCount > 0U)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1bc      	bne.n	8009bae <HAL_I2S_Transmit+0x106>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 8009c34:	697a      	ldr	r2, [r7, #20]
 8009c36:	23c0      	movs	r3, #192	; 0xc0
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	d007      	beq.n	8009c4e <HAL_I2S_Transmit+0x1a6>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 8009c3e:	697a      	ldr	r2, [r7, #20]
 8009c40:	23c0      	movs	r3, #192	; 0xc0
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	401a      	ands	r2, r3
 8009c46:	2380      	movs	r3, #128	; 0x80
 8009c48:	005b      	lsls	r3, r3, #1
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d117      	bne.n	8009c7e <HAL_I2S_Transmit+0x1d6>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	68f8      	ldr	r0, [r7, #12]
 8009c52:	2200      	movs	r2, #0
 8009c54:	2180      	movs	r1, #128	; 0x80
 8009c56:	f000 fa05 	bl	800a064 <I2S_WaitFlagStateUntilTimeout>
 8009c5a:	1e03      	subs	r3, r0, #0
 8009c5c:	d00f      	beq.n	8009c7e <HAL_I2S_Transmit+0x1d6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c62:	2201      	movs	r2, #1
 8009c64:	431a      	orrs	r2, r3
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2235      	movs	r2, #53	; 0x35
 8009c6e:	2101      	movs	r1, #1
 8009c70:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2s);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2234      	movs	r2, #52	; 0x34
 8009c76:	2100      	movs	r1, #0
 8009c78:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e008      	b.n	8009c90 <HAL_I2S_Transmit+0x1e8>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2235      	movs	r2, #53	; 0x35
 8009c82:	2101      	movs	r1, #1
 8009c84:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hi2s);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2234      	movs	r2, #52	; 0x34
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8009c8e:	2300      	movs	r3, #0
}
 8009c90:	0018      	movs	r0, r3
 8009c92:	46bd      	mov	sp, r7
 8009c94:	b006      	add	sp, #24
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b086      	sub	sp, #24
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	1dbb      	adds	r3, r7, #6
 8009ca4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d003      	beq.n	8009cb4 <HAL_I2S_Transmit_DMA+0x1c>
 8009cac:	1dbb      	adds	r3, r7, #6
 8009cae:	881b      	ldrh	r3, [r3, #0]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d101      	bne.n	8009cb8 <HAL_I2S_Transmit_DMA+0x20>
  {
    return  HAL_ERROR;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	e091      	b.n	8009ddc <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2234      	movs	r2, #52	; 0x34
 8009cbc:	5c9b      	ldrb	r3, [r3, r2]
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d101      	bne.n	8009cc8 <HAL_I2S_Transmit_DMA+0x30>
 8009cc4:	2302      	movs	r3, #2
 8009cc6:	e089      	b.n	8009ddc <HAL_I2S_Transmit_DMA+0x144>
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2234      	movs	r2, #52	; 0x34
 8009ccc:	2101      	movs	r1, #1
 8009cce:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2235      	movs	r2, #53	; 0x35
 8009cd4:	5c9b      	ldrb	r3, [r3, r2]
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d005      	beq.n	8009ce8 <HAL_I2S_Transmit_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2234      	movs	r2, #52	; 0x34
 8009ce0:	2100      	movs	r1, #0
 8009ce2:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8009ce4:	2302      	movs	r3, #2
 8009ce6:	e079      	b.n	8009ddc <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2235      	movs	r2, #53	; 0x35
 8009cec:	2103      	movs	r1, #3
 8009cee:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	68ba      	ldr	r2, [r7, #8]
 8009cfa:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	69db      	ldr	r3, [r3, #28]
 8009d02:	2207      	movs	r2, #7
 8009d04:	4013      	ands	r3, r2
 8009d06:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	2b03      	cmp	r3, #3
 8009d0c:	d002      	beq.n	8009d14 <HAL_I2S_Transmit_DMA+0x7c>
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	2b05      	cmp	r3, #5
 8009d12:	d10c      	bne.n	8009d2e <HAL_I2S_Transmit_DMA+0x96>
  {
    hi2s->TxXferSize = (Size << 1U);
 8009d14:	1dbb      	adds	r3, r7, #6
 8009d16:	881b      	ldrh	r3, [r3, #0]
 8009d18:	18db      	adds	r3, r3, r3
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8009d20:	1dbb      	adds	r3, r7, #6
 8009d22:	881b      	ldrh	r3, [r3, #0]
 8009d24:	18db      	adds	r3, r3, r3
 8009d26:	b29a      	uxth	r2, r3
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	845a      	strh	r2, [r3, #34]	; 0x22
 8009d2c:	e007      	b.n	8009d3e <HAL_I2S_Transmit_DMA+0xa6>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	1dba      	adds	r2, r7, #6
 8009d32:	8812      	ldrh	r2, [r2, #0]
 8009d34:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	1dba      	adds	r2, r7, #6
 8009d3a:	8812      	ldrh	r2, [r2, #0]
 8009d3c:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d42:	4a28      	ldr	r2, [pc, #160]	; (8009de4 <HAL_I2S_Transmit_DMA+0x14c>)
 8009d44:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d4a:	4a27      	ldr	r2, [pc, #156]	; (8009de8 <HAL_I2S_Transmit_DMA+0x150>)
 8009d4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d52:	4a26      	ldr	r2, [pc, #152]	; (8009dec <HAL_I2S_Transmit_DMA+0x154>)
 8009d54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8009d5e:	0019      	movs	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8009d66:	001a      	movs	r2, r3
                                 hi2s->TxXferSize))
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	8c1b      	ldrh	r3, [r3, #32]
 8009d6c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8009d6e:	f7fe f877 	bl	8007e60 <HAL_DMA_Start_IT>
 8009d72:	1e03      	subs	r3, r0, #0
 8009d74:	d00f      	beq.n	8009d96 <HAL_I2S_Transmit_DMA+0xfe>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d7a:	2208      	movs	r2, #8
 8009d7c:	431a      	orrs	r2, r3
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2235      	movs	r2, #53	; 0x35
 8009d86:	2101      	movs	r1, #1
 8009d88:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2234      	movs	r2, #52	; 0x34
 8009d8e:	2100      	movs	r1, #0
 8009d90:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	e022      	b.n	8009ddc <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	69da      	ldr	r2, [r3, #28]
 8009d9c:	2380      	movs	r3, #128	; 0x80
 8009d9e:	00db      	lsls	r3, r3, #3
 8009da0:	4013      	ands	r3, r2
 8009da2:	d108      	bne.n	8009db6 <HAL_I2S_Transmit_DMA+0x11e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	69da      	ldr	r2, [r3, #28]
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2180      	movs	r1, #128	; 0x80
 8009db0:	00c9      	lsls	r1, r1, #3
 8009db2:	430a      	orrs	r2, r1
 8009db4:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	2202      	movs	r2, #2
 8009dbe:	4013      	ands	r3, r2
 8009dc0:	d107      	bne.n	8009dd2 <HAL_I2S_Transmit_DMA+0x13a>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	685a      	ldr	r2, [r3, #4]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2102      	movs	r1, #2
 8009dce:	430a      	orrs	r2, r1
 8009dd0:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2234      	movs	r2, #52	; 0x34
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8009dda:	2300      	movs	r3, #0
}
 8009ddc:	0018      	movs	r0, r3
 8009dde:	46bd      	mov	sp, r7
 8009de0:	b006      	add	sp, #24
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	08009f3b 	.word	0x08009f3b
 8009de8:	08009ef7 	.word	0x08009ef7
 8009dec:	08009f59 	.word	0x08009f59

08009df0 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	099b      	lsrs	r3, r3, #6
 8009e0c:	001a      	movs	r2, r3
 8009e0e:	2301      	movs	r3, #1
 8009e10:	4013      	ands	r3, r2
 8009e12:	d10e      	bne.n	8009e32 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	2201      	movs	r2, #1
 8009e18:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8009e1a:	d00a      	beq.n	8009e32 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	099b      	lsrs	r3, r3, #6
 8009e20:	001a      	movs	r2, r3
 8009e22:	2301      	movs	r3, #1
 8009e24:	4013      	ands	r3, r2
 8009e26:	d004      	beq.n	8009e32 <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	0018      	movs	r0, r3
 8009e2c:	f000 f8ea 	bl	800a004 <I2S_Receive_IT>
    return;
 8009e30:	e046      	b.n	8009ec0 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	085b      	lsrs	r3, r3, #1
 8009e36:	001a      	movs	r2, r3
 8009e38:	2301      	movs	r3, #1
 8009e3a:	4013      	ands	r3, r2
 8009e3c:	d00a      	beq.n	8009e54 <HAL_I2S_IRQHandler+0x64>
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	09db      	lsrs	r3, r3, #7
 8009e42:	001a      	movs	r2, r3
 8009e44:	2301      	movs	r3, #1
 8009e46:	4013      	ands	r3, r2
 8009e48:	d004      	beq.n	8009e54 <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	0018      	movs	r0, r3
 8009e4e:	f000 f8aa 	bl	8009fa6 <I2S_Transmit_IT>
    return;
 8009e52:	e035      	b.n	8009ec0 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	095b      	lsrs	r3, r3, #5
 8009e58:	001a      	movs	r2, r3
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	4013      	ands	r3, r2
 8009e5e:	d02f      	beq.n	8009ec0 <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	099b      	lsrs	r3, r3, #6
 8009e64:	001a      	movs	r2, r3
 8009e66:	2301      	movs	r3, #1
 8009e68:	4013      	ands	r3, r2
 8009e6a:	d00d      	beq.n	8009e88 <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	685a      	ldr	r2, [r3, #4]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2160      	movs	r1, #96	; 0x60
 8009e78:	438a      	bics	r2, r1
 8009e7a:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e80:	2202      	movs	r2, #2
 8009e82:	431a      	orrs	r2, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	08db      	lsrs	r3, r3, #3
 8009e8c:	001a      	movs	r2, r3
 8009e8e:	2301      	movs	r3, #1
 8009e90:	4013      	ands	r3, r2
 8009e92:	d00d      	beq.n	8009eb0 <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	685a      	ldr	r2, [r3, #4]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	21a0      	movs	r1, #160	; 0xa0
 8009ea0:	438a      	bics	r2, r1
 8009ea2:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea8:	2204      	movs	r2, #4
 8009eaa:	431a      	orrs	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2235      	movs	r2, #53	; 0x35
 8009eb4:	2101      	movs	r1, #1
 8009eb6:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	0018      	movs	r0, r3
 8009ebc:	f000 f813 	bl	8009ee6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	b004      	add	sp, #16
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b082      	sub	sp, #8
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009ece:	46c0      	nop			; (mov r8, r8)
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	b002      	add	sp, #8
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b082      	sub	sp, #8
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8009ede:	46c0      	nop			; (mov r8, r8)
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	b002      	add	sp, #8
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b082      	sub	sp, #8
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8009eee:	46c0      	nop			; (mov r8, r8)
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	b002      	add	sp, #8
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b084      	sub	sp, #16
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f02:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	69db      	ldr	r3, [r3, #28]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d10e      	bne.n	8009f2a <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	685a      	ldr	r2, [r3, #4]
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2102      	movs	r1, #2
 8009f18:	438a      	bics	r2, r1
 8009f1a:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	845a      	strh	r2, [r3, #34]	; 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2235      	movs	r2, #53	; 0x35
 8009f26:	2101      	movs	r1, #1
 8009f28:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	0018      	movs	r0, r3
 8009f2e:	f7f9 f92b 	bl	8003188 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8009f32:	46c0      	nop			; (mov r8, r8)
 8009f34:	46bd      	mov	sp, r7
 8009f36:	b004      	add	sp, #16
 8009f38:	bd80      	pop	{r7, pc}

08009f3a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f3a:	b580      	push	{r7, lr}
 8009f3c:	b084      	sub	sp, #16
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f46:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	0018      	movs	r0, r3
 8009f4c:	f7ff ffbb 	bl	8009ec6 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8009f50:	46c0      	nop			; (mov r8, r8)
 8009f52:	46bd      	mov	sp, r7
 8009f54:	b004      	add	sp, #16
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f64:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	685a      	ldr	r2, [r3, #4]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2103      	movs	r1, #3
 8009f72:	438a      	bics	r2, r1
 8009f74:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	845a      	strh	r2, [r3, #34]	; 0x22
  hi2s->RxXferCount = 0U;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	855a      	strh	r2, [r3, #42]	; 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2235      	movs	r2, #53	; 0x35
 8009f86:	2101      	movs	r1, #1
 8009f88:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f8e:	2208      	movs	r2, #8
 8009f90:	431a      	orrs	r2, r3
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	639a      	str	r2, [r3, #56]	; 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	0018      	movs	r0, r3
 8009f9a:	f7ff ffa4 	bl	8009ee6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8009f9e:	46c0      	nop			; (mov r8, r8)
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	b004      	add	sp, #16
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8009fa6:	b580      	push	{r7, lr}
 8009fa8:	b082      	sub	sp, #8
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	69db      	ldr	r3, [r3, #28]
 8009fb2:	881a      	ldrh	r2, [r3, #0]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	69db      	ldr	r3, [r3, #28]
 8009fbe:	1c9a      	adds	r2, r3, #2
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d10f      	bne.n	8009ffc <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	685a      	ldr	r2, [r3, #4]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	21a0      	movs	r1, #160	; 0xa0
 8009fe8:	438a      	bics	r2, r1
 8009fea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2235      	movs	r2, #53	; 0x35
 8009ff0:	2101      	movs	r1, #1
 8009ff2:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	0018      	movs	r0, r3
 8009ff8:	f7f9 f8c6 	bl	8003188 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8009ffc:	46c0      	nop			; (mov r8, r8)
 8009ffe:	46bd      	mov	sp, r7
 800a000:	b002      	add	sp, #8
 800a002:	bd80      	pop	{r7, pc}

0800a004 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	68da      	ldr	r2, [r3, #12]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a016:	b292      	uxth	r2, r2
 800a018:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a01e:	1c9a      	adds	r2, r3, #2
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a028:	b29b      	uxth	r3, r3
 800a02a:	3b01      	subs	r3, #1
 800a02c:	b29a      	uxth	r2, r3
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a036:	b29b      	uxth	r3, r3
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d10f      	bne.n	800a05c <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	685a      	ldr	r2, [r3, #4]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	2160      	movs	r1, #96	; 0x60
 800a048:	438a      	bics	r2, r1
 800a04a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2235      	movs	r2, #53	; 0x35
 800a050:	2101      	movs	r1, #1
 800a052:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	0018      	movs	r0, r3
 800a058:	f7ff ff3d 	bl	8009ed6 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800a05c:	46c0      	nop			; (mov r8, r8)
 800a05e:	46bd      	mov	sp, r7
 800a060:	b002      	add	sp, #8
 800a062:	bd80      	pop	{r7, pc}

0800a064 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b086      	sub	sp, #24
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	603b      	str	r3, [r7, #0]
 800a070:	1dfb      	adds	r3, r7, #7
 800a072:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800a074:	f7fd fae8 	bl	8007648 <HAL_GetTick>
 800a078:	0003      	movs	r3, r0
 800a07a:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800a07c:	e017      	b.n	800a0ae <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	3301      	adds	r3, #1
 800a082:	d014      	beq.n	800a0ae <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800a084:	f7fd fae0 	bl	8007648 <HAL_GetTick>
 800a088:	0002      	movs	r2, r0
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	1ad3      	subs	r3, r2, r3
 800a08e:	683a      	ldr	r2, [r7, #0]
 800a090:	429a      	cmp	r2, r3
 800a092:	d902      	bls.n	800a09a <I2S_WaitFlagStateUntilTimeout+0x36>
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d109      	bne.n	800a0ae <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2235      	movs	r2, #53	; 0x35
 800a09e:	2101      	movs	r1, #1
 800a0a0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2234      	movs	r2, #52	; 0x34
 800a0a6:	2100      	movs	r1, #0
 800a0a8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a0aa:	2303      	movs	r3, #3
 800a0ac:	e00f      	b.n	800a0ce <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	4013      	ands	r3, r2
 800a0b8:	68ba      	ldr	r2, [r7, #8]
 800a0ba:	1ad3      	subs	r3, r2, r3
 800a0bc:	425a      	negs	r2, r3
 800a0be:	4153      	adcs	r3, r2
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	001a      	movs	r2, r3
 800a0c4:	1dfb      	adds	r3, r7, #7
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d1d8      	bne.n	800a07e <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	0018      	movs	r0, r3
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	b006      	add	sp, #24
 800a0d4:	bd80      	pop	{r7, pc}
	...

0800a0d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800a0e0:	4b19      	ldr	r3, [pc, #100]	; (800a148 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a19      	ldr	r2, [pc, #100]	; (800a14c <HAL_PWREx_ControlVoltageScaling+0x74>)
 800a0e6:	4013      	ands	r3, r2
 800a0e8:	0019      	movs	r1, r3
 800a0ea:	4b17      	ldr	r3, [pc, #92]	; (800a148 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	430a      	orrs	r2, r1
 800a0f0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	2380      	movs	r3, #128	; 0x80
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d11f      	bne.n	800a13c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800a0fc:	4b14      	ldr	r3, [pc, #80]	; (800a150 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	0013      	movs	r3, r2
 800a102:	005b      	lsls	r3, r3, #1
 800a104:	189b      	adds	r3, r3, r2
 800a106:	005b      	lsls	r3, r3, #1
 800a108:	4912      	ldr	r1, [pc, #72]	; (800a154 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800a10a:	0018      	movs	r0, r3
 800a10c:	f7f5 fffa 	bl	8000104 <__udivsi3>
 800a110:	0003      	movs	r3, r0
 800a112:	3301      	adds	r3, #1
 800a114:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a116:	e008      	b.n	800a12a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d003      	beq.n	800a126 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	3b01      	subs	r3, #1
 800a122:	60fb      	str	r3, [r7, #12]
 800a124:	e001      	b.n	800a12a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800a126:	2303      	movs	r3, #3
 800a128:	e009      	b.n	800a13e <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a12a:	4b07      	ldr	r3, [pc, #28]	; (800a148 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a12c:	695a      	ldr	r2, [r3, #20]
 800a12e:	2380      	movs	r3, #128	; 0x80
 800a130:	00db      	lsls	r3, r3, #3
 800a132:	401a      	ands	r2, r3
 800a134:	2380      	movs	r3, #128	; 0x80
 800a136:	00db      	lsls	r3, r3, #3
 800a138:	429a      	cmp	r2, r3
 800a13a:	d0ed      	beq.n	800a118 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800a13c:	2300      	movs	r3, #0
}
 800a13e:	0018      	movs	r0, r3
 800a140:	46bd      	mov	sp, r7
 800a142:	b004      	add	sp, #16
 800a144:	bd80      	pop	{r7, pc}
 800a146:	46c0      	nop			; (mov r8, r8)
 800a148:	40007000 	.word	0x40007000
 800a14c:	fffff9ff 	.word	0xfffff9ff
 800a150:	20000038 	.word	0x20000038
 800a154:	000f4240 	.word	0x000f4240

0800a158 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800a15c:	4b03      	ldr	r3, [pc, #12]	; (800a16c <LL_RCC_GetAPB1Prescaler+0x14>)
 800a15e:	689a      	ldr	r2, [r3, #8]
 800a160:	23e0      	movs	r3, #224	; 0xe0
 800a162:	01db      	lsls	r3, r3, #7
 800a164:	4013      	ands	r3, r2
}
 800a166:	0018      	movs	r0, r3
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	40021000 	.word	0x40021000

0800a170 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b088      	sub	sp, #32
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d101      	bne.n	800a182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	e304      	b.n	800a78c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2201      	movs	r2, #1
 800a188:	4013      	ands	r3, r2
 800a18a:	d100      	bne.n	800a18e <HAL_RCC_OscConfig+0x1e>
 800a18c:	e07c      	b.n	800a288 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a18e:	4bc3      	ldr	r3, [pc, #780]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	2238      	movs	r2, #56	; 0x38
 800a194:	4013      	ands	r3, r2
 800a196:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a198:	4bc0      	ldr	r3, [pc, #768]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	2203      	movs	r2, #3
 800a19e:	4013      	ands	r3, r2
 800a1a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800a1a2:	69bb      	ldr	r3, [r7, #24]
 800a1a4:	2b10      	cmp	r3, #16
 800a1a6:	d102      	bne.n	800a1ae <HAL_RCC_OscConfig+0x3e>
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	2b03      	cmp	r3, #3
 800a1ac:	d002      	beq.n	800a1b4 <HAL_RCC_OscConfig+0x44>
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	2b08      	cmp	r3, #8
 800a1b2:	d10b      	bne.n	800a1cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1b4:	4bb9      	ldr	r3, [pc, #740]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	2380      	movs	r3, #128	; 0x80
 800a1ba:	029b      	lsls	r3, r3, #10
 800a1bc:	4013      	ands	r3, r2
 800a1be:	d062      	beq.n	800a286 <HAL_RCC_OscConfig+0x116>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d15e      	bne.n	800a286 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	e2df      	b.n	800a78c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	685a      	ldr	r2, [r3, #4]
 800a1d0:	2380      	movs	r3, #128	; 0x80
 800a1d2:	025b      	lsls	r3, r3, #9
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d107      	bne.n	800a1e8 <HAL_RCC_OscConfig+0x78>
 800a1d8:	4bb0      	ldr	r3, [pc, #704]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	4baf      	ldr	r3, [pc, #700]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a1de:	2180      	movs	r1, #128	; 0x80
 800a1e0:	0249      	lsls	r1, r1, #9
 800a1e2:	430a      	orrs	r2, r1
 800a1e4:	601a      	str	r2, [r3, #0]
 800a1e6:	e020      	b.n	800a22a <HAL_RCC_OscConfig+0xba>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	685a      	ldr	r2, [r3, #4]
 800a1ec:	23a0      	movs	r3, #160	; 0xa0
 800a1ee:	02db      	lsls	r3, r3, #11
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d10e      	bne.n	800a212 <HAL_RCC_OscConfig+0xa2>
 800a1f4:	4ba9      	ldr	r3, [pc, #676]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	4ba8      	ldr	r3, [pc, #672]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a1fa:	2180      	movs	r1, #128	; 0x80
 800a1fc:	02c9      	lsls	r1, r1, #11
 800a1fe:	430a      	orrs	r2, r1
 800a200:	601a      	str	r2, [r3, #0]
 800a202:	4ba6      	ldr	r3, [pc, #664]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	4ba5      	ldr	r3, [pc, #660]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a208:	2180      	movs	r1, #128	; 0x80
 800a20a:	0249      	lsls	r1, r1, #9
 800a20c:	430a      	orrs	r2, r1
 800a20e:	601a      	str	r2, [r3, #0]
 800a210:	e00b      	b.n	800a22a <HAL_RCC_OscConfig+0xba>
 800a212:	4ba2      	ldr	r3, [pc, #648]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	4ba1      	ldr	r3, [pc, #644]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a218:	49a1      	ldr	r1, [pc, #644]	; (800a4a0 <HAL_RCC_OscConfig+0x330>)
 800a21a:	400a      	ands	r2, r1
 800a21c:	601a      	str	r2, [r3, #0]
 800a21e:	4b9f      	ldr	r3, [pc, #636]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	4b9e      	ldr	r3, [pc, #632]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a224:	499f      	ldr	r1, [pc, #636]	; (800a4a4 <HAL_RCC_OscConfig+0x334>)
 800a226:	400a      	ands	r2, r1
 800a228:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d014      	beq.n	800a25c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a232:	f7fd fa09 	bl	8007648 <HAL_GetTick>
 800a236:	0003      	movs	r3, r0
 800a238:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a23a:	e008      	b.n	800a24e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a23c:	f7fd fa04 	bl	8007648 <HAL_GetTick>
 800a240:	0002      	movs	r2, r0
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	1ad3      	subs	r3, r2, r3
 800a246:	2b64      	cmp	r3, #100	; 0x64
 800a248:	d901      	bls.n	800a24e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800a24a:	2303      	movs	r3, #3
 800a24c:	e29e      	b.n	800a78c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a24e:	4b93      	ldr	r3, [pc, #588]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	2380      	movs	r3, #128	; 0x80
 800a254:	029b      	lsls	r3, r3, #10
 800a256:	4013      	ands	r3, r2
 800a258:	d0f0      	beq.n	800a23c <HAL_RCC_OscConfig+0xcc>
 800a25a:	e015      	b.n	800a288 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a25c:	f7fd f9f4 	bl	8007648 <HAL_GetTick>
 800a260:	0003      	movs	r3, r0
 800a262:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a264:	e008      	b.n	800a278 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a266:	f7fd f9ef 	bl	8007648 <HAL_GetTick>
 800a26a:	0002      	movs	r2, r0
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	1ad3      	subs	r3, r2, r3
 800a270:	2b64      	cmp	r3, #100	; 0x64
 800a272:	d901      	bls.n	800a278 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800a274:	2303      	movs	r3, #3
 800a276:	e289      	b.n	800a78c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a278:	4b88      	ldr	r3, [pc, #544]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	2380      	movs	r3, #128	; 0x80
 800a27e:	029b      	lsls	r3, r3, #10
 800a280:	4013      	ands	r3, r2
 800a282:	d1f0      	bne.n	800a266 <HAL_RCC_OscConfig+0xf6>
 800a284:	e000      	b.n	800a288 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a286:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2202      	movs	r2, #2
 800a28e:	4013      	ands	r3, r2
 800a290:	d100      	bne.n	800a294 <HAL_RCC_OscConfig+0x124>
 800a292:	e099      	b.n	800a3c8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a294:	4b81      	ldr	r3, [pc, #516]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	2238      	movs	r2, #56	; 0x38
 800a29a:	4013      	ands	r3, r2
 800a29c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a29e:	4b7f      	ldr	r3, [pc, #508]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	2203      	movs	r2, #3
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	2b10      	cmp	r3, #16
 800a2ac:	d102      	bne.n	800a2b4 <HAL_RCC_OscConfig+0x144>
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	d002      	beq.n	800a2ba <HAL_RCC_OscConfig+0x14a>
 800a2b4:	69bb      	ldr	r3, [r7, #24]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d135      	bne.n	800a326 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a2ba:	4b78      	ldr	r3, [pc, #480]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	2380      	movs	r3, #128	; 0x80
 800a2c0:	00db      	lsls	r3, r3, #3
 800a2c2:	4013      	ands	r3, r2
 800a2c4:	d005      	beq.n	800a2d2 <HAL_RCC_OscConfig+0x162>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	68db      	ldr	r3, [r3, #12]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d101      	bne.n	800a2d2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e25c      	b.n	800a78c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2d2:	4b72      	ldr	r3, [pc, #456]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	4a74      	ldr	r2, [pc, #464]	; (800a4a8 <HAL_RCC_OscConfig+0x338>)
 800a2d8:	4013      	ands	r3, r2
 800a2da:	0019      	movs	r1, r3
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	695b      	ldr	r3, [r3, #20]
 800a2e0:	021a      	lsls	r2, r3, #8
 800a2e2:	4b6e      	ldr	r3, [pc, #440]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a2e4:	430a      	orrs	r2, r1
 800a2e6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d112      	bne.n	800a314 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800a2ee:	4b6b      	ldr	r3, [pc, #428]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4a6e      	ldr	r2, [pc, #440]	; (800a4ac <HAL_RCC_OscConfig+0x33c>)
 800a2f4:	4013      	ands	r3, r2
 800a2f6:	0019      	movs	r1, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	691a      	ldr	r2, [r3, #16]
 800a2fc:	4b67      	ldr	r3, [pc, #412]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a2fe:	430a      	orrs	r2, r1
 800a300:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800a302:	4b66      	ldr	r3, [pc, #408]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	0adb      	lsrs	r3, r3, #11
 800a308:	2207      	movs	r2, #7
 800a30a:	4013      	ands	r3, r2
 800a30c:	4a68      	ldr	r2, [pc, #416]	; (800a4b0 <HAL_RCC_OscConfig+0x340>)
 800a30e:	40da      	lsrs	r2, r3
 800a310:	4b68      	ldr	r3, [pc, #416]	; (800a4b4 <HAL_RCC_OscConfig+0x344>)
 800a312:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a314:	4b68      	ldr	r3, [pc, #416]	; (800a4b8 <HAL_RCC_OscConfig+0x348>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	0018      	movs	r0, r3
 800a31a:	f7fd f939 	bl	8007590 <HAL_InitTick>
 800a31e:	1e03      	subs	r3, r0, #0
 800a320:	d051      	beq.n	800a3c6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800a322:	2301      	movs	r3, #1
 800a324:	e232      	b.n	800a78c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d030      	beq.n	800a390 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800a32e:	4b5b      	ldr	r3, [pc, #364]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a5e      	ldr	r2, [pc, #376]	; (800a4ac <HAL_RCC_OscConfig+0x33c>)
 800a334:	4013      	ands	r3, r2
 800a336:	0019      	movs	r1, r3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	691a      	ldr	r2, [r3, #16]
 800a33c:	4b57      	ldr	r3, [pc, #348]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a33e:	430a      	orrs	r2, r1
 800a340:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800a342:	4b56      	ldr	r3, [pc, #344]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	4b55      	ldr	r3, [pc, #340]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a348:	2180      	movs	r1, #128	; 0x80
 800a34a:	0049      	lsls	r1, r1, #1
 800a34c:	430a      	orrs	r2, r1
 800a34e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a350:	f7fd f97a 	bl	8007648 <HAL_GetTick>
 800a354:	0003      	movs	r3, r0
 800a356:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a358:	e008      	b.n	800a36c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a35a:	f7fd f975 	bl	8007648 <HAL_GetTick>
 800a35e:	0002      	movs	r2, r0
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	1ad3      	subs	r3, r2, r3
 800a364:	2b02      	cmp	r3, #2
 800a366:	d901      	bls.n	800a36c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a368:	2303      	movs	r3, #3
 800a36a:	e20f      	b.n	800a78c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a36c:	4b4b      	ldr	r3, [pc, #300]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	2380      	movs	r3, #128	; 0x80
 800a372:	00db      	lsls	r3, r3, #3
 800a374:	4013      	ands	r3, r2
 800a376:	d0f0      	beq.n	800a35a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a378:	4b48      	ldr	r3, [pc, #288]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	4a4a      	ldr	r2, [pc, #296]	; (800a4a8 <HAL_RCC_OscConfig+0x338>)
 800a37e:	4013      	ands	r3, r2
 800a380:	0019      	movs	r1, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	695b      	ldr	r3, [r3, #20]
 800a386:	021a      	lsls	r2, r3, #8
 800a388:	4b44      	ldr	r3, [pc, #272]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a38a:	430a      	orrs	r2, r1
 800a38c:	605a      	str	r2, [r3, #4]
 800a38e:	e01b      	b.n	800a3c8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800a390:	4b42      	ldr	r3, [pc, #264]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	4b41      	ldr	r3, [pc, #260]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a396:	4949      	ldr	r1, [pc, #292]	; (800a4bc <HAL_RCC_OscConfig+0x34c>)
 800a398:	400a      	ands	r2, r1
 800a39a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a39c:	f7fd f954 	bl	8007648 <HAL_GetTick>
 800a3a0:	0003      	movs	r3, r0
 800a3a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a3a4:	e008      	b.n	800a3b8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a3a6:	f7fd f94f 	bl	8007648 <HAL_GetTick>
 800a3aa:	0002      	movs	r2, r0
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	1ad3      	subs	r3, r2, r3
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d901      	bls.n	800a3b8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	e1e9      	b.n	800a78c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a3b8:	4b38      	ldr	r3, [pc, #224]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	2380      	movs	r3, #128	; 0x80
 800a3be:	00db      	lsls	r3, r3, #3
 800a3c0:	4013      	ands	r3, r2
 800a3c2:	d1f0      	bne.n	800a3a6 <HAL_RCC_OscConfig+0x236>
 800a3c4:	e000      	b.n	800a3c8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a3c6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2208      	movs	r2, #8
 800a3ce:	4013      	ands	r3, r2
 800a3d0:	d047      	beq.n	800a462 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a3d2:	4b32      	ldr	r3, [pc, #200]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	2238      	movs	r2, #56	; 0x38
 800a3d8:	4013      	ands	r3, r2
 800a3da:	2b18      	cmp	r3, #24
 800a3dc:	d10a      	bne.n	800a3f4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800a3de:	4b2f      	ldr	r3, [pc, #188]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a3e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3e2:	2202      	movs	r2, #2
 800a3e4:	4013      	ands	r3, r2
 800a3e6:	d03c      	beq.n	800a462 <HAL_RCC_OscConfig+0x2f2>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	699b      	ldr	r3, [r3, #24]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d138      	bne.n	800a462 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	e1cb      	b.n	800a78c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	699b      	ldr	r3, [r3, #24]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d019      	beq.n	800a430 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800a3fc:	4b27      	ldr	r3, [pc, #156]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a3fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a400:	4b26      	ldr	r3, [pc, #152]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a402:	2101      	movs	r1, #1
 800a404:	430a      	orrs	r2, r1
 800a406:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a408:	f7fd f91e 	bl	8007648 <HAL_GetTick>
 800a40c:	0003      	movs	r3, r0
 800a40e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a410:	e008      	b.n	800a424 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a412:	f7fd f919 	bl	8007648 <HAL_GetTick>
 800a416:	0002      	movs	r2, r0
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	1ad3      	subs	r3, r2, r3
 800a41c:	2b02      	cmp	r3, #2
 800a41e:	d901      	bls.n	800a424 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800a420:	2303      	movs	r3, #3
 800a422:	e1b3      	b.n	800a78c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a424:	4b1d      	ldr	r3, [pc, #116]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a428:	2202      	movs	r2, #2
 800a42a:	4013      	ands	r3, r2
 800a42c:	d0f1      	beq.n	800a412 <HAL_RCC_OscConfig+0x2a2>
 800a42e:	e018      	b.n	800a462 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800a430:	4b1a      	ldr	r3, [pc, #104]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a432:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a434:	4b19      	ldr	r3, [pc, #100]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a436:	2101      	movs	r1, #1
 800a438:	438a      	bics	r2, r1
 800a43a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a43c:	f7fd f904 	bl	8007648 <HAL_GetTick>
 800a440:	0003      	movs	r3, r0
 800a442:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a444:	e008      	b.n	800a458 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a446:	f7fd f8ff 	bl	8007648 <HAL_GetTick>
 800a44a:	0002      	movs	r2, r0
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	1ad3      	subs	r3, r2, r3
 800a450:	2b02      	cmp	r3, #2
 800a452:	d901      	bls.n	800a458 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800a454:	2303      	movs	r3, #3
 800a456:	e199      	b.n	800a78c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a458:	4b10      	ldr	r3, [pc, #64]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a45a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a45c:	2202      	movs	r2, #2
 800a45e:	4013      	ands	r3, r2
 800a460:	d1f1      	bne.n	800a446 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2204      	movs	r2, #4
 800a468:	4013      	ands	r3, r2
 800a46a:	d100      	bne.n	800a46e <HAL_RCC_OscConfig+0x2fe>
 800a46c:	e0c6      	b.n	800a5fc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a46e:	231f      	movs	r3, #31
 800a470:	18fb      	adds	r3, r7, r3
 800a472:	2200      	movs	r2, #0
 800a474:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a476:	4b09      	ldr	r3, [pc, #36]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	2238      	movs	r2, #56	; 0x38
 800a47c:	4013      	ands	r3, r2
 800a47e:	2b20      	cmp	r3, #32
 800a480:	d11e      	bne.n	800a4c0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800a482:	4b06      	ldr	r3, [pc, #24]	; (800a49c <HAL_RCC_OscConfig+0x32c>)
 800a484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a486:	2202      	movs	r2, #2
 800a488:	4013      	ands	r3, r2
 800a48a:	d100      	bne.n	800a48e <HAL_RCC_OscConfig+0x31e>
 800a48c:	e0b6      	b.n	800a5fc <HAL_RCC_OscConfig+0x48c>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d000      	beq.n	800a498 <HAL_RCC_OscConfig+0x328>
 800a496:	e0b1      	b.n	800a5fc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800a498:	2301      	movs	r3, #1
 800a49a:	e177      	b.n	800a78c <HAL_RCC_OscConfig+0x61c>
 800a49c:	40021000 	.word	0x40021000
 800a4a0:	fffeffff 	.word	0xfffeffff
 800a4a4:	fffbffff 	.word	0xfffbffff
 800a4a8:	ffff80ff 	.word	0xffff80ff
 800a4ac:	ffffc7ff 	.word	0xffffc7ff
 800a4b0:	00f42400 	.word	0x00f42400
 800a4b4:	20000038 	.word	0x20000038
 800a4b8:	2000003c 	.word	0x2000003c
 800a4bc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a4c0:	4bb4      	ldr	r3, [pc, #720]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a4c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4c4:	2380      	movs	r3, #128	; 0x80
 800a4c6:	055b      	lsls	r3, r3, #21
 800a4c8:	4013      	ands	r3, r2
 800a4ca:	d101      	bne.n	800a4d0 <HAL_RCC_OscConfig+0x360>
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e000      	b.n	800a4d2 <HAL_RCC_OscConfig+0x362>
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d011      	beq.n	800a4fa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a4d6:	4baf      	ldr	r3, [pc, #700]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a4d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4da:	4bae      	ldr	r3, [pc, #696]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a4dc:	2180      	movs	r1, #128	; 0x80
 800a4de:	0549      	lsls	r1, r1, #21
 800a4e0:	430a      	orrs	r2, r1
 800a4e2:	63da      	str	r2, [r3, #60]	; 0x3c
 800a4e4:	4bab      	ldr	r3, [pc, #684]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a4e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4e8:	2380      	movs	r3, #128	; 0x80
 800a4ea:	055b      	lsls	r3, r3, #21
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	60fb      	str	r3, [r7, #12]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800a4f2:	231f      	movs	r3, #31
 800a4f4:	18fb      	adds	r3, r7, r3
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a4fa:	4ba7      	ldr	r3, [pc, #668]	; (800a798 <HAL_RCC_OscConfig+0x628>)
 800a4fc:	681a      	ldr	r2, [r3, #0]
 800a4fe:	2380      	movs	r3, #128	; 0x80
 800a500:	005b      	lsls	r3, r3, #1
 800a502:	4013      	ands	r3, r2
 800a504:	d11a      	bne.n	800a53c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a506:	4ba4      	ldr	r3, [pc, #656]	; (800a798 <HAL_RCC_OscConfig+0x628>)
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	4ba3      	ldr	r3, [pc, #652]	; (800a798 <HAL_RCC_OscConfig+0x628>)
 800a50c:	2180      	movs	r1, #128	; 0x80
 800a50e:	0049      	lsls	r1, r1, #1
 800a510:	430a      	orrs	r2, r1
 800a512:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800a514:	f7fd f898 	bl	8007648 <HAL_GetTick>
 800a518:	0003      	movs	r3, r0
 800a51a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a51c:	e008      	b.n	800a530 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a51e:	f7fd f893 	bl	8007648 <HAL_GetTick>
 800a522:	0002      	movs	r2, r0
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	1ad3      	subs	r3, r2, r3
 800a528:	2b02      	cmp	r3, #2
 800a52a:	d901      	bls.n	800a530 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800a52c:	2303      	movs	r3, #3
 800a52e:	e12d      	b.n	800a78c <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a530:	4b99      	ldr	r3, [pc, #612]	; (800a798 <HAL_RCC_OscConfig+0x628>)
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	2380      	movs	r3, #128	; 0x80
 800a536:	005b      	lsls	r3, r3, #1
 800a538:	4013      	ands	r3, r2
 800a53a:	d0f0      	beq.n	800a51e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d106      	bne.n	800a552 <HAL_RCC_OscConfig+0x3e2>
 800a544:	4b93      	ldr	r3, [pc, #588]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a546:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a548:	4b92      	ldr	r3, [pc, #584]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a54a:	2101      	movs	r1, #1
 800a54c:	430a      	orrs	r2, r1
 800a54e:	65da      	str	r2, [r3, #92]	; 0x5c
 800a550:	e01c      	b.n	800a58c <HAL_RCC_OscConfig+0x41c>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	2b05      	cmp	r3, #5
 800a558:	d10c      	bne.n	800a574 <HAL_RCC_OscConfig+0x404>
 800a55a:	4b8e      	ldr	r3, [pc, #568]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a55c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a55e:	4b8d      	ldr	r3, [pc, #564]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a560:	2104      	movs	r1, #4
 800a562:	430a      	orrs	r2, r1
 800a564:	65da      	str	r2, [r3, #92]	; 0x5c
 800a566:	4b8b      	ldr	r3, [pc, #556]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a568:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a56a:	4b8a      	ldr	r3, [pc, #552]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a56c:	2101      	movs	r1, #1
 800a56e:	430a      	orrs	r2, r1
 800a570:	65da      	str	r2, [r3, #92]	; 0x5c
 800a572:	e00b      	b.n	800a58c <HAL_RCC_OscConfig+0x41c>
 800a574:	4b87      	ldr	r3, [pc, #540]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a576:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a578:	4b86      	ldr	r3, [pc, #536]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a57a:	2101      	movs	r1, #1
 800a57c:	438a      	bics	r2, r1
 800a57e:	65da      	str	r2, [r3, #92]	; 0x5c
 800a580:	4b84      	ldr	r3, [pc, #528]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a582:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a584:	4b83      	ldr	r3, [pc, #524]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a586:	2104      	movs	r1, #4
 800a588:	438a      	bics	r2, r1
 800a58a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d014      	beq.n	800a5be <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a594:	f7fd f858 	bl	8007648 <HAL_GetTick>
 800a598:	0003      	movs	r3, r0
 800a59a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a59c:	e009      	b.n	800a5b2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a59e:	f7fd f853 	bl	8007648 <HAL_GetTick>
 800a5a2:	0002      	movs	r2, r0
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	1ad3      	subs	r3, r2, r3
 800a5a8:	4a7c      	ldr	r2, [pc, #496]	; (800a79c <HAL_RCC_OscConfig+0x62c>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d901      	bls.n	800a5b2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800a5ae:	2303      	movs	r3, #3
 800a5b0:	e0ec      	b.n	800a78c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a5b2:	4b78      	ldr	r3, [pc, #480]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a5b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5b6:	2202      	movs	r2, #2
 800a5b8:	4013      	ands	r3, r2
 800a5ba:	d0f0      	beq.n	800a59e <HAL_RCC_OscConfig+0x42e>
 800a5bc:	e013      	b.n	800a5e6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5be:	f7fd f843 	bl	8007648 <HAL_GetTick>
 800a5c2:	0003      	movs	r3, r0
 800a5c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a5c6:	e009      	b.n	800a5dc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5c8:	f7fd f83e 	bl	8007648 <HAL_GetTick>
 800a5cc:	0002      	movs	r2, r0
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	1ad3      	subs	r3, r2, r3
 800a5d2:	4a72      	ldr	r2, [pc, #456]	; (800a79c <HAL_RCC_OscConfig+0x62c>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d901      	bls.n	800a5dc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800a5d8:	2303      	movs	r3, #3
 800a5da:	e0d7      	b.n	800a78c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a5dc:	4b6d      	ldr	r3, [pc, #436]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a5de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5e0:	2202      	movs	r2, #2
 800a5e2:	4013      	ands	r3, r2
 800a5e4:	d1f0      	bne.n	800a5c8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a5e6:	231f      	movs	r3, #31
 800a5e8:	18fb      	adds	r3, r7, r3
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d105      	bne.n	800a5fc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a5f0:	4b68      	ldr	r3, [pc, #416]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a5f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5f4:	4b67      	ldr	r3, [pc, #412]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a5f6:	496a      	ldr	r1, [pc, #424]	; (800a7a0 <HAL_RCC_OscConfig+0x630>)
 800a5f8:	400a      	ands	r2, r1
 800a5fa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	69db      	ldr	r3, [r3, #28]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d100      	bne.n	800a606 <HAL_RCC_OscConfig+0x496>
 800a604:	e0c1      	b.n	800a78a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a606:	4b63      	ldr	r3, [pc, #396]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	2238      	movs	r2, #56	; 0x38
 800a60c:	4013      	ands	r3, r2
 800a60e:	2b10      	cmp	r3, #16
 800a610:	d100      	bne.n	800a614 <HAL_RCC_OscConfig+0x4a4>
 800a612:	e081      	b.n	800a718 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	69db      	ldr	r3, [r3, #28]
 800a618:	2b02      	cmp	r3, #2
 800a61a:	d156      	bne.n	800a6ca <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a61c:	4b5d      	ldr	r3, [pc, #372]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	4b5c      	ldr	r3, [pc, #368]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a622:	4960      	ldr	r1, [pc, #384]	; (800a7a4 <HAL_RCC_OscConfig+0x634>)
 800a624:	400a      	ands	r2, r1
 800a626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a628:	f7fd f80e 	bl	8007648 <HAL_GetTick>
 800a62c:	0003      	movs	r3, r0
 800a62e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a630:	e008      	b.n	800a644 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a632:	f7fd f809 	bl	8007648 <HAL_GetTick>
 800a636:	0002      	movs	r2, r0
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	1ad3      	subs	r3, r2, r3
 800a63c:	2b02      	cmp	r3, #2
 800a63e:	d901      	bls.n	800a644 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800a640:	2303      	movs	r3, #3
 800a642:	e0a3      	b.n	800a78c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a644:	4b53      	ldr	r3, [pc, #332]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	2380      	movs	r3, #128	; 0x80
 800a64a:	049b      	lsls	r3, r3, #18
 800a64c:	4013      	ands	r3, r2
 800a64e:	d1f0      	bne.n	800a632 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a650:	4b50      	ldr	r3, [pc, #320]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	4a54      	ldr	r2, [pc, #336]	; (800a7a8 <HAL_RCC_OscConfig+0x638>)
 800a656:	4013      	ands	r3, r2
 800a658:	0019      	movs	r1, r3
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6a1a      	ldr	r2, [r3, #32]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a662:	431a      	orrs	r2, r3
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a668:	021b      	lsls	r3, r3, #8
 800a66a:	431a      	orrs	r2, r3
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a670:	431a      	orrs	r2, r3
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a676:	431a      	orrs	r2, r3
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a67c:	431a      	orrs	r2, r3
 800a67e:	4b45      	ldr	r3, [pc, #276]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a680:	430a      	orrs	r2, r1
 800a682:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a684:	4b43      	ldr	r3, [pc, #268]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	4b42      	ldr	r3, [pc, #264]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a68a:	2180      	movs	r1, #128	; 0x80
 800a68c:	0449      	lsls	r1, r1, #17
 800a68e:	430a      	orrs	r2, r1
 800a690:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800a692:	4b40      	ldr	r3, [pc, #256]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a694:	68da      	ldr	r2, [r3, #12]
 800a696:	4b3f      	ldr	r3, [pc, #252]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a698:	2180      	movs	r1, #128	; 0x80
 800a69a:	0549      	lsls	r1, r1, #21
 800a69c:	430a      	orrs	r2, r1
 800a69e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6a0:	f7fc ffd2 	bl	8007648 <HAL_GetTick>
 800a6a4:	0003      	movs	r3, r0
 800a6a6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a6a8:	e008      	b.n	800a6bc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6aa:	f7fc ffcd 	bl	8007648 <HAL_GetTick>
 800a6ae:	0002      	movs	r2, r0
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	1ad3      	subs	r3, r2, r3
 800a6b4:	2b02      	cmp	r3, #2
 800a6b6:	d901      	bls.n	800a6bc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800a6b8:	2303      	movs	r3, #3
 800a6ba:	e067      	b.n	800a78c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a6bc:	4b35      	ldr	r3, [pc, #212]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	2380      	movs	r3, #128	; 0x80
 800a6c2:	049b      	lsls	r3, r3, #18
 800a6c4:	4013      	ands	r3, r2
 800a6c6:	d0f0      	beq.n	800a6aa <HAL_RCC_OscConfig+0x53a>
 800a6c8:	e05f      	b.n	800a78a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6ca:	4b32      	ldr	r3, [pc, #200]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	4b31      	ldr	r3, [pc, #196]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a6d0:	4934      	ldr	r1, [pc, #208]	; (800a7a4 <HAL_RCC_OscConfig+0x634>)
 800a6d2:	400a      	ands	r2, r1
 800a6d4:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800a6d6:	4b2f      	ldr	r3, [pc, #188]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a6d8:	68da      	ldr	r2, [r3, #12]
 800a6da:	4b2e      	ldr	r3, [pc, #184]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a6dc:	2103      	movs	r1, #3
 800a6de:	438a      	bics	r2, r1
 800a6e0:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800a6e2:	4b2c      	ldr	r3, [pc, #176]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a6e4:	68da      	ldr	r2, [r3, #12]
 800a6e6:	4b2b      	ldr	r3, [pc, #172]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a6e8:	4930      	ldr	r1, [pc, #192]	; (800a7ac <HAL_RCC_OscConfig+0x63c>)
 800a6ea:	400a      	ands	r2, r1
 800a6ec:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6ee:	f7fc ffab 	bl	8007648 <HAL_GetTick>
 800a6f2:	0003      	movs	r3, r0
 800a6f4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a6f6:	e008      	b.n	800a70a <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6f8:	f7fc ffa6 	bl	8007648 <HAL_GetTick>
 800a6fc:	0002      	movs	r2, r0
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	1ad3      	subs	r3, r2, r3
 800a702:	2b02      	cmp	r3, #2
 800a704:	d901      	bls.n	800a70a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800a706:	2303      	movs	r3, #3
 800a708:	e040      	b.n	800a78c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a70a:	4b22      	ldr	r3, [pc, #136]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	2380      	movs	r3, #128	; 0x80
 800a710:	049b      	lsls	r3, r3, #18
 800a712:	4013      	ands	r3, r2
 800a714:	d1f0      	bne.n	800a6f8 <HAL_RCC_OscConfig+0x588>
 800a716:	e038      	b.n	800a78a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	69db      	ldr	r3, [r3, #28]
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d101      	bne.n	800a724 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 800a720:	2301      	movs	r3, #1
 800a722:	e033      	b.n	800a78c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800a724:	4b1b      	ldr	r3, [pc, #108]	; (800a794 <HAL_RCC_OscConfig+0x624>)
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	2203      	movs	r2, #3
 800a72e:	401a      	ands	r2, r3
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6a1b      	ldr	r3, [r3, #32]
 800a734:	429a      	cmp	r2, r3
 800a736:	d126      	bne.n	800a786 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	2270      	movs	r2, #112	; 0x70
 800a73c:	401a      	ands	r2, r3
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a742:	429a      	cmp	r2, r3
 800a744:	d11f      	bne.n	800a786 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a746:	697a      	ldr	r2, [r7, #20]
 800a748:	23fe      	movs	r3, #254	; 0xfe
 800a74a:	01db      	lsls	r3, r3, #7
 800a74c:	401a      	ands	r2, r3
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a752:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a754:	429a      	cmp	r2, r3
 800a756:	d116      	bne.n	800a786 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a758:	697a      	ldr	r2, [r7, #20]
 800a75a:	23f8      	movs	r3, #248	; 0xf8
 800a75c:	039b      	lsls	r3, r3, #14
 800a75e:	401a      	ands	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a764:	429a      	cmp	r2, r3
 800a766:	d10e      	bne.n	800a786 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800a768:	697a      	ldr	r2, [r7, #20]
 800a76a:	23e0      	movs	r3, #224	; 0xe0
 800a76c:	051b      	lsls	r3, r3, #20
 800a76e:	401a      	ands	r2, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a774:	429a      	cmp	r2, r3
 800a776:	d106      	bne.n	800a786 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	0f5b      	lsrs	r3, r3, #29
 800a77c:	075a      	lsls	r2, r3, #29
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800a782:	429a      	cmp	r2, r3
 800a784:	d001      	beq.n	800a78a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800a786:	2301      	movs	r3, #1
 800a788:	e000      	b.n	800a78c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	0018      	movs	r0, r3
 800a78e:	46bd      	mov	sp, r7
 800a790:	b008      	add	sp, #32
 800a792:	bd80      	pop	{r7, pc}
 800a794:	40021000 	.word	0x40021000
 800a798:	40007000 	.word	0x40007000
 800a79c:	00001388 	.word	0x00001388
 800a7a0:	efffffff 	.word	0xefffffff
 800a7a4:	feffffff 	.word	0xfeffffff
 800a7a8:	11c1808c 	.word	0x11c1808c
 800a7ac:	eefeffff 	.word	0xeefeffff

0800a7b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d101      	bne.n	800a7c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	e0e9      	b.n	800a998 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a7c4:	4b76      	ldr	r3, [pc, #472]	; (800a9a0 <HAL_RCC_ClockConfig+0x1f0>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	2207      	movs	r2, #7
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	683a      	ldr	r2, [r7, #0]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d91e      	bls.n	800a810 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a7d2:	4b73      	ldr	r3, [pc, #460]	; (800a9a0 <HAL_RCC_ClockConfig+0x1f0>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	2207      	movs	r2, #7
 800a7d8:	4393      	bics	r3, r2
 800a7da:	0019      	movs	r1, r3
 800a7dc:	4b70      	ldr	r3, [pc, #448]	; (800a9a0 <HAL_RCC_ClockConfig+0x1f0>)
 800a7de:	683a      	ldr	r2, [r7, #0]
 800a7e0:	430a      	orrs	r2, r1
 800a7e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a7e4:	f7fc ff30 	bl	8007648 <HAL_GetTick>
 800a7e8:	0003      	movs	r3, r0
 800a7ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a7ec:	e009      	b.n	800a802 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a7ee:	f7fc ff2b 	bl	8007648 <HAL_GetTick>
 800a7f2:	0002      	movs	r2, r0
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	1ad3      	subs	r3, r2, r3
 800a7f8:	4a6a      	ldr	r2, [pc, #424]	; (800a9a4 <HAL_RCC_ClockConfig+0x1f4>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d901      	bls.n	800a802 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800a7fe:	2303      	movs	r3, #3
 800a800:	e0ca      	b.n	800a998 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a802:	4b67      	ldr	r3, [pc, #412]	; (800a9a0 <HAL_RCC_ClockConfig+0x1f0>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	2207      	movs	r2, #7
 800a808:	4013      	ands	r3, r2
 800a80a:	683a      	ldr	r2, [r7, #0]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d1ee      	bne.n	800a7ee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2202      	movs	r2, #2
 800a816:	4013      	ands	r3, r2
 800a818:	d015      	beq.n	800a846 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2204      	movs	r2, #4
 800a820:	4013      	ands	r3, r2
 800a822:	d006      	beq.n	800a832 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800a824:	4b60      	ldr	r3, [pc, #384]	; (800a9a8 <HAL_RCC_ClockConfig+0x1f8>)
 800a826:	689a      	ldr	r2, [r3, #8]
 800a828:	4b5f      	ldr	r3, [pc, #380]	; (800a9a8 <HAL_RCC_ClockConfig+0x1f8>)
 800a82a:	21e0      	movs	r1, #224	; 0xe0
 800a82c:	01c9      	lsls	r1, r1, #7
 800a82e:	430a      	orrs	r2, r1
 800a830:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a832:	4b5d      	ldr	r3, [pc, #372]	; (800a9a8 <HAL_RCC_ClockConfig+0x1f8>)
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	4a5d      	ldr	r2, [pc, #372]	; (800a9ac <HAL_RCC_ClockConfig+0x1fc>)
 800a838:	4013      	ands	r3, r2
 800a83a:	0019      	movs	r1, r3
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	689a      	ldr	r2, [r3, #8]
 800a840:	4b59      	ldr	r3, [pc, #356]	; (800a9a8 <HAL_RCC_ClockConfig+0x1f8>)
 800a842:	430a      	orrs	r2, r1
 800a844:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2201      	movs	r2, #1
 800a84c:	4013      	ands	r3, r2
 800a84e:	d057      	beq.n	800a900 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	2b01      	cmp	r3, #1
 800a856:	d107      	bne.n	800a868 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a858:	4b53      	ldr	r3, [pc, #332]	; (800a9a8 <HAL_RCC_ClockConfig+0x1f8>)
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	2380      	movs	r3, #128	; 0x80
 800a85e:	029b      	lsls	r3, r3, #10
 800a860:	4013      	ands	r3, r2
 800a862:	d12b      	bne.n	800a8bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a864:	2301      	movs	r3, #1
 800a866:	e097      	b.n	800a998 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	2b02      	cmp	r3, #2
 800a86e:	d107      	bne.n	800a880 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a870:	4b4d      	ldr	r3, [pc, #308]	; (800a9a8 <HAL_RCC_ClockConfig+0x1f8>)
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	2380      	movs	r3, #128	; 0x80
 800a876:	049b      	lsls	r3, r3, #18
 800a878:	4013      	ands	r3, r2
 800a87a:	d11f      	bne.n	800a8bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a87c:	2301      	movs	r3, #1
 800a87e:	e08b      	b.n	800a998 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d107      	bne.n	800a898 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a888:	4b47      	ldr	r3, [pc, #284]	; (800a9a8 <HAL_RCC_ClockConfig+0x1f8>)
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	2380      	movs	r3, #128	; 0x80
 800a88e:	00db      	lsls	r3, r3, #3
 800a890:	4013      	ands	r3, r2
 800a892:	d113      	bne.n	800a8bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	e07f      	b.n	800a998 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	2b03      	cmp	r3, #3
 800a89e:	d106      	bne.n	800a8ae <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a8a0:	4b41      	ldr	r3, [pc, #260]	; (800a9a8 <HAL_RCC_ClockConfig+0x1f8>)
 800a8a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8a4:	2202      	movs	r2, #2
 800a8a6:	4013      	ands	r3, r2
 800a8a8:	d108      	bne.n	800a8bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	e074      	b.n	800a998 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a8ae:	4b3e      	ldr	r3, [pc, #248]	; (800a9a8 <HAL_RCC_ClockConfig+0x1f8>)
 800a8b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8b2:	2202      	movs	r2, #2
 800a8b4:	4013      	ands	r3, r2
 800a8b6:	d101      	bne.n	800a8bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	e06d      	b.n	800a998 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a8bc:	4b3a      	ldr	r3, [pc, #232]	; (800a9a8 <HAL_RCC_ClockConfig+0x1f8>)
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	2207      	movs	r2, #7
 800a8c2:	4393      	bics	r3, r2
 800a8c4:	0019      	movs	r1, r3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	685a      	ldr	r2, [r3, #4]
 800a8ca:	4b37      	ldr	r3, [pc, #220]	; (800a9a8 <HAL_RCC_ClockConfig+0x1f8>)
 800a8cc:	430a      	orrs	r2, r1
 800a8ce:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8d0:	f7fc feba 	bl	8007648 <HAL_GetTick>
 800a8d4:	0003      	movs	r3, r0
 800a8d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a8d8:	e009      	b.n	800a8ee <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a8da:	f7fc feb5 	bl	8007648 <HAL_GetTick>
 800a8de:	0002      	movs	r2, r0
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	1ad3      	subs	r3, r2, r3
 800a8e4:	4a2f      	ldr	r2, [pc, #188]	; (800a9a4 <HAL_RCC_ClockConfig+0x1f4>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d901      	bls.n	800a8ee <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800a8ea:	2303      	movs	r3, #3
 800a8ec:	e054      	b.n	800a998 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a8ee:	4b2e      	ldr	r3, [pc, #184]	; (800a9a8 <HAL_RCC_ClockConfig+0x1f8>)
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	2238      	movs	r2, #56	; 0x38
 800a8f4:	401a      	ands	r2, r3
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	00db      	lsls	r3, r3, #3
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d1ec      	bne.n	800a8da <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a900:	4b27      	ldr	r3, [pc, #156]	; (800a9a0 <HAL_RCC_ClockConfig+0x1f0>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2207      	movs	r2, #7
 800a906:	4013      	ands	r3, r2
 800a908:	683a      	ldr	r2, [r7, #0]
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d21e      	bcs.n	800a94c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a90e:	4b24      	ldr	r3, [pc, #144]	; (800a9a0 <HAL_RCC_ClockConfig+0x1f0>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2207      	movs	r2, #7
 800a914:	4393      	bics	r3, r2
 800a916:	0019      	movs	r1, r3
 800a918:	4b21      	ldr	r3, [pc, #132]	; (800a9a0 <HAL_RCC_ClockConfig+0x1f0>)
 800a91a:	683a      	ldr	r2, [r7, #0]
 800a91c:	430a      	orrs	r2, r1
 800a91e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a920:	f7fc fe92 	bl	8007648 <HAL_GetTick>
 800a924:	0003      	movs	r3, r0
 800a926:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a928:	e009      	b.n	800a93e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a92a:	f7fc fe8d 	bl	8007648 <HAL_GetTick>
 800a92e:	0002      	movs	r2, r0
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	1ad3      	subs	r3, r2, r3
 800a934:	4a1b      	ldr	r2, [pc, #108]	; (800a9a4 <HAL_RCC_ClockConfig+0x1f4>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d901      	bls.n	800a93e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800a93a:	2303      	movs	r3, #3
 800a93c:	e02c      	b.n	800a998 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a93e:	4b18      	ldr	r3, [pc, #96]	; (800a9a0 <HAL_RCC_ClockConfig+0x1f0>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	2207      	movs	r2, #7
 800a944:	4013      	ands	r3, r2
 800a946:	683a      	ldr	r2, [r7, #0]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d1ee      	bne.n	800a92a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2204      	movs	r2, #4
 800a952:	4013      	ands	r3, r2
 800a954:	d009      	beq.n	800a96a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800a956:	4b14      	ldr	r3, [pc, #80]	; (800a9a8 <HAL_RCC_ClockConfig+0x1f8>)
 800a958:	689b      	ldr	r3, [r3, #8]
 800a95a:	4a15      	ldr	r2, [pc, #84]	; (800a9b0 <HAL_RCC_ClockConfig+0x200>)
 800a95c:	4013      	ands	r3, r2
 800a95e:	0019      	movs	r1, r3
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	68da      	ldr	r2, [r3, #12]
 800a964:	4b10      	ldr	r3, [pc, #64]	; (800a9a8 <HAL_RCC_ClockConfig+0x1f8>)
 800a966:	430a      	orrs	r2, r1
 800a968:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800a96a:	f000 f829 	bl	800a9c0 <HAL_RCC_GetSysClockFreq>
 800a96e:	0001      	movs	r1, r0
 800a970:	4b0d      	ldr	r3, [pc, #52]	; (800a9a8 <HAL_RCC_ClockConfig+0x1f8>)
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	0a1b      	lsrs	r3, r3, #8
 800a976:	220f      	movs	r2, #15
 800a978:	401a      	ands	r2, r3
 800a97a:	4b0e      	ldr	r3, [pc, #56]	; (800a9b4 <HAL_RCC_ClockConfig+0x204>)
 800a97c:	0092      	lsls	r2, r2, #2
 800a97e:	58d3      	ldr	r3, [r2, r3]
 800a980:	221f      	movs	r2, #31
 800a982:	4013      	ands	r3, r2
 800a984:	000a      	movs	r2, r1
 800a986:	40da      	lsrs	r2, r3
 800a988:	4b0b      	ldr	r3, [pc, #44]	; (800a9b8 <HAL_RCC_ClockConfig+0x208>)
 800a98a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a98c:	4b0b      	ldr	r3, [pc, #44]	; (800a9bc <HAL_RCC_ClockConfig+0x20c>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	0018      	movs	r0, r3
 800a992:	f7fc fdfd 	bl	8007590 <HAL_InitTick>
 800a996:	0003      	movs	r3, r0
}
 800a998:	0018      	movs	r0, r3
 800a99a:	46bd      	mov	sp, r7
 800a99c:	b004      	add	sp, #16
 800a99e:	bd80      	pop	{r7, pc}
 800a9a0:	40022000 	.word	0x40022000
 800a9a4:	00001388 	.word	0x00001388
 800a9a8:	40021000 	.word	0x40021000
 800a9ac:	fffff0ff 	.word	0xfffff0ff
 800a9b0:	ffff8fff 	.word	0xffff8fff
 800a9b4:	0801b6fc 	.word	0x0801b6fc
 800a9b8:	20000038 	.word	0x20000038
 800a9bc:	2000003c 	.word	0x2000003c

0800a9c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b086      	sub	sp, #24
 800a9c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a9c6:	4b3c      	ldr	r3, [pc, #240]	; (800aab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	2238      	movs	r2, #56	; 0x38
 800a9cc:	4013      	ands	r3, r2
 800a9ce:	d10f      	bne.n	800a9f0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800a9d0:	4b39      	ldr	r3, [pc, #228]	; (800aab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	0adb      	lsrs	r3, r3, #11
 800a9d6:	2207      	movs	r2, #7
 800a9d8:	4013      	ands	r3, r2
 800a9da:	2201      	movs	r2, #1
 800a9dc:	409a      	lsls	r2, r3
 800a9de:	0013      	movs	r3, r2
 800a9e0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800a9e2:	6839      	ldr	r1, [r7, #0]
 800a9e4:	4835      	ldr	r0, [pc, #212]	; (800aabc <HAL_RCC_GetSysClockFreq+0xfc>)
 800a9e6:	f7f5 fb8d 	bl	8000104 <__udivsi3>
 800a9ea:	0003      	movs	r3, r0
 800a9ec:	613b      	str	r3, [r7, #16]
 800a9ee:	e05d      	b.n	800aaac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a9f0:	4b31      	ldr	r3, [pc, #196]	; (800aab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	2238      	movs	r2, #56	; 0x38
 800a9f6:	4013      	ands	r3, r2
 800a9f8:	2b08      	cmp	r3, #8
 800a9fa:	d102      	bne.n	800aa02 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a9fc:	4b30      	ldr	r3, [pc, #192]	; (800aac0 <HAL_RCC_GetSysClockFreq+0x100>)
 800a9fe:	613b      	str	r3, [r7, #16]
 800aa00:	e054      	b.n	800aaac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aa02:	4b2d      	ldr	r3, [pc, #180]	; (800aab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	2238      	movs	r2, #56	; 0x38
 800aa08:	4013      	ands	r3, r2
 800aa0a:	2b10      	cmp	r3, #16
 800aa0c:	d138      	bne.n	800aa80 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800aa0e:	4b2a      	ldr	r3, [pc, #168]	; (800aab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	2203      	movs	r2, #3
 800aa14:	4013      	ands	r3, r2
 800aa16:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800aa18:	4b27      	ldr	r3, [pc, #156]	; (800aab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	091b      	lsrs	r3, r3, #4
 800aa1e:	2207      	movs	r2, #7
 800aa20:	4013      	ands	r3, r2
 800aa22:	3301      	adds	r3, #1
 800aa24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2b03      	cmp	r3, #3
 800aa2a:	d10d      	bne.n	800aa48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800aa2c:	68b9      	ldr	r1, [r7, #8]
 800aa2e:	4824      	ldr	r0, [pc, #144]	; (800aac0 <HAL_RCC_GetSysClockFreq+0x100>)
 800aa30:	f7f5 fb68 	bl	8000104 <__udivsi3>
 800aa34:	0003      	movs	r3, r0
 800aa36:	0019      	movs	r1, r3
 800aa38:	4b1f      	ldr	r3, [pc, #124]	; (800aab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800aa3a:	68db      	ldr	r3, [r3, #12]
 800aa3c:	0a1b      	lsrs	r3, r3, #8
 800aa3e:	227f      	movs	r2, #127	; 0x7f
 800aa40:	4013      	ands	r3, r2
 800aa42:	434b      	muls	r3, r1
 800aa44:	617b      	str	r3, [r7, #20]
        break;
 800aa46:	e00d      	b.n	800aa64 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800aa48:	68b9      	ldr	r1, [r7, #8]
 800aa4a:	481c      	ldr	r0, [pc, #112]	; (800aabc <HAL_RCC_GetSysClockFreq+0xfc>)
 800aa4c:	f7f5 fb5a 	bl	8000104 <__udivsi3>
 800aa50:	0003      	movs	r3, r0
 800aa52:	0019      	movs	r1, r3
 800aa54:	4b18      	ldr	r3, [pc, #96]	; (800aab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800aa56:	68db      	ldr	r3, [r3, #12]
 800aa58:	0a1b      	lsrs	r3, r3, #8
 800aa5a:	227f      	movs	r2, #127	; 0x7f
 800aa5c:	4013      	ands	r3, r2
 800aa5e:	434b      	muls	r3, r1
 800aa60:	617b      	str	r3, [r7, #20]
        break;
 800aa62:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800aa64:	4b14      	ldr	r3, [pc, #80]	; (800aab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	0f5b      	lsrs	r3, r3, #29
 800aa6a:	2207      	movs	r2, #7
 800aa6c:	4013      	ands	r3, r2
 800aa6e:	3301      	adds	r3, #1
 800aa70:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800aa72:	6879      	ldr	r1, [r7, #4]
 800aa74:	6978      	ldr	r0, [r7, #20]
 800aa76:	f7f5 fb45 	bl	8000104 <__udivsi3>
 800aa7a:	0003      	movs	r3, r0
 800aa7c:	613b      	str	r3, [r7, #16]
 800aa7e:	e015      	b.n	800aaac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800aa80:	4b0d      	ldr	r3, [pc, #52]	; (800aab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	2238      	movs	r2, #56	; 0x38
 800aa86:	4013      	ands	r3, r2
 800aa88:	2b20      	cmp	r3, #32
 800aa8a:	d103      	bne.n	800aa94 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800aa8c:	2380      	movs	r3, #128	; 0x80
 800aa8e:	021b      	lsls	r3, r3, #8
 800aa90:	613b      	str	r3, [r7, #16]
 800aa92:	e00b      	b.n	800aaac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800aa94:	4b08      	ldr	r3, [pc, #32]	; (800aab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	2238      	movs	r2, #56	; 0x38
 800aa9a:	4013      	ands	r3, r2
 800aa9c:	2b18      	cmp	r3, #24
 800aa9e:	d103      	bne.n	800aaa8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800aaa0:	23fa      	movs	r3, #250	; 0xfa
 800aaa2:	01db      	lsls	r3, r3, #7
 800aaa4:	613b      	str	r3, [r7, #16]
 800aaa6:	e001      	b.n	800aaac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800aaac:	693b      	ldr	r3, [r7, #16]
}
 800aaae:	0018      	movs	r0, r3
 800aab0:	46bd      	mov	sp, r7
 800aab2:	b006      	add	sp, #24
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	46c0      	nop			; (mov r8, r8)
 800aab8:	40021000 	.word	0x40021000
 800aabc:	00f42400 	.word	0x00f42400
 800aac0:	007a1200 	.word	0x007a1200

0800aac4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aac8:	4b02      	ldr	r3, [pc, #8]	; (800aad4 <HAL_RCC_GetHCLKFreq+0x10>)
 800aaca:	681b      	ldr	r3, [r3, #0]
}
 800aacc:	0018      	movs	r0, r3
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	46c0      	nop			; (mov r8, r8)
 800aad4:	20000038 	.word	0x20000038

0800aad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aad8:	b5b0      	push	{r4, r5, r7, lr}
 800aada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800aadc:	f7ff fff2 	bl	800aac4 <HAL_RCC_GetHCLKFreq>
 800aae0:	0004      	movs	r4, r0
 800aae2:	f7ff fb39 	bl	800a158 <LL_RCC_GetAPB1Prescaler>
 800aae6:	0003      	movs	r3, r0
 800aae8:	0b1a      	lsrs	r2, r3, #12
 800aaea:	4b05      	ldr	r3, [pc, #20]	; (800ab00 <HAL_RCC_GetPCLK1Freq+0x28>)
 800aaec:	0092      	lsls	r2, r2, #2
 800aaee:	58d3      	ldr	r3, [r2, r3]
 800aaf0:	221f      	movs	r2, #31
 800aaf2:	4013      	ands	r3, r2
 800aaf4:	40dc      	lsrs	r4, r3
 800aaf6:	0023      	movs	r3, r4
}
 800aaf8:	0018      	movs	r0, r3
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bdb0      	pop	{r4, r5, r7, pc}
 800aafe:	46c0      	nop			; (mov r8, r8)
 800ab00:	0801b73c 	.word	0x0801b73c

0800ab04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b086      	sub	sp, #24
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800ab0c:	2313      	movs	r3, #19
 800ab0e:	18fb      	adds	r3, r7, r3
 800ab10:	2200      	movs	r2, #0
 800ab12:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ab14:	2312      	movs	r3, #18
 800ab16:	18fb      	adds	r3, r7, r3
 800ab18:	2200      	movs	r2, #0
 800ab1a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	2380      	movs	r3, #128	; 0x80
 800ab22:	029b      	lsls	r3, r3, #10
 800ab24:	4013      	ands	r3, r2
 800ab26:	d100      	bne.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x26>
 800ab28:	e0a3      	b.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ab2a:	2011      	movs	r0, #17
 800ab2c:	183b      	adds	r3, r7, r0
 800ab2e:	2200      	movs	r2, #0
 800ab30:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ab32:	4bc3      	ldr	r3, [pc, #780]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ab34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab36:	2380      	movs	r3, #128	; 0x80
 800ab38:	055b      	lsls	r3, r3, #21
 800ab3a:	4013      	ands	r3, r2
 800ab3c:	d110      	bne.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab3e:	4bc0      	ldr	r3, [pc, #768]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ab40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab42:	4bbf      	ldr	r3, [pc, #764]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ab44:	2180      	movs	r1, #128	; 0x80
 800ab46:	0549      	lsls	r1, r1, #21
 800ab48:	430a      	orrs	r2, r1
 800ab4a:	63da      	str	r2, [r3, #60]	; 0x3c
 800ab4c:	4bbc      	ldr	r3, [pc, #752]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ab4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab50:	2380      	movs	r3, #128	; 0x80
 800ab52:	055b      	lsls	r3, r3, #21
 800ab54:	4013      	ands	r3, r2
 800ab56:	60bb      	str	r3, [r7, #8]
 800ab58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ab5a:	183b      	adds	r3, r7, r0
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ab60:	4bb8      	ldr	r3, [pc, #736]	; (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	4bb7      	ldr	r3, [pc, #732]	; (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800ab66:	2180      	movs	r1, #128	; 0x80
 800ab68:	0049      	lsls	r1, r1, #1
 800ab6a:	430a      	orrs	r2, r1
 800ab6c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ab6e:	f7fc fd6b 	bl	8007648 <HAL_GetTick>
 800ab72:	0003      	movs	r3, r0
 800ab74:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab76:	e00b      	b.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab78:	f7fc fd66 	bl	8007648 <HAL_GetTick>
 800ab7c:	0002      	movs	r2, r0
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	1ad3      	subs	r3, r2, r3
 800ab82:	2b02      	cmp	r3, #2
 800ab84:	d904      	bls.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800ab86:	2313      	movs	r3, #19
 800ab88:	18fb      	adds	r3, r7, r3
 800ab8a:	2203      	movs	r2, #3
 800ab8c:	701a      	strb	r2, [r3, #0]
        break;
 800ab8e:	e005      	b.n	800ab9c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab90:	4bac      	ldr	r3, [pc, #688]	; (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	2380      	movs	r3, #128	; 0x80
 800ab96:	005b      	lsls	r3, r3, #1
 800ab98:	4013      	ands	r3, r2
 800ab9a:	d0ed      	beq.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800ab9c:	2313      	movs	r3, #19
 800ab9e:	18fb      	adds	r3, r7, r3
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d154      	bne.n	800ac50 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800aba6:	4ba6      	ldr	r3, [pc, #664]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aba8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800abaa:	23c0      	movs	r3, #192	; 0xc0
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	4013      	ands	r3, r2
 800abb0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d019      	beq.n	800abec <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abbc:	697a      	ldr	r2, [r7, #20]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d014      	beq.n	800abec <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800abc2:	4b9f      	ldr	r3, [pc, #636]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800abc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abc6:	4aa0      	ldr	r2, [pc, #640]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800abc8:	4013      	ands	r3, r2
 800abca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800abcc:	4b9c      	ldr	r3, [pc, #624]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800abce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800abd0:	4b9b      	ldr	r3, [pc, #620]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800abd2:	2180      	movs	r1, #128	; 0x80
 800abd4:	0249      	lsls	r1, r1, #9
 800abd6:	430a      	orrs	r2, r1
 800abd8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800abda:	4b99      	ldr	r3, [pc, #612]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800abdc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800abde:	4b98      	ldr	r3, [pc, #608]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800abe0:	499a      	ldr	r1, [pc, #616]	; (800ae4c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800abe2:	400a      	ands	r2, r1
 800abe4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800abe6:	4b96      	ldr	r3, [pc, #600]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800abe8:	697a      	ldr	r2, [r7, #20]
 800abea:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	2201      	movs	r2, #1
 800abf0:	4013      	ands	r3, r2
 800abf2:	d016      	beq.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abf4:	f7fc fd28 	bl	8007648 <HAL_GetTick>
 800abf8:	0003      	movs	r3, r0
 800abfa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800abfc:	e00c      	b.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abfe:	f7fc fd23 	bl	8007648 <HAL_GetTick>
 800ac02:	0002      	movs	r2, r0
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	1ad3      	subs	r3, r2, r3
 800ac08:	4a91      	ldr	r2, [pc, #580]	; (800ae50 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d904      	bls.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800ac0e:	2313      	movs	r3, #19
 800ac10:	18fb      	adds	r3, r7, r3
 800ac12:	2203      	movs	r2, #3
 800ac14:	701a      	strb	r2, [r3, #0]
            break;
 800ac16:	e004      	b.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ac18:	4b89      	ldr	r3, [pc, #548]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ac1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac1c:	2202      	movs	r2, #2
 800ac1e:	4013      	ands	r3, r2
 800ac20:	d0ed      	beq.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800ac22:	2313      	movs	r3, #19
 800ac24:	18fb      	adds	r3, r7, r3
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d10a      	bne.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ac2c:	4b84      	ldr	r3, [pc, #528]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ac2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac30:	4a85      	ldr	r2, [pc, #532]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800ac32:	4013      	ands	r3, r2
 800ac34:	0019      	movs	r1, r3
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac3a:	4b81      	ldr	r3, [pc, #516]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ac3c:	430a      	orrs	r2, r1
 800ac3e:	65da      	str	r2, [r3, #92]	; 0x5c
 800ac40:	e00c      	b.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ac42:	2312      	movs	r3, #18
 800ac44:	18fb      	adds	r3, r7, r3
 800ac46:	2213      	movs	r2, #19
 800ac48:	18ba      	adds	r2, r7, r2
 800ac4a:	7812      	ldrb	r2, [r2, #0]
 800ac4c:	701a      	strb	r2, [r3, #0]
 800ac4e:	e005      	b.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac50:	2312      	movs	r3, #18
 800ac52:	18fb      	adds	r3, r7, r3
 800ac54:	2213      	movs	r2, #19
 800ac56:	18ba      	adds	r2, r7, r2
 800ac58:	7812      	ldrb	r2, [r2, #0]
 800ac5a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ac5c:	2311      	movs	r3, #17
 800ac5e:	18fb      	adds	r3, r7, r3
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d105      	bne.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac66:	4b76      	ldr	r3, [pc, #472]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ac68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac6a:	4b75      	ldr	r3, [pc, #468]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ac6c:	4979      	ldr	r1, [pc, #484]	; (800ae54 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800ac6e:	400a      	ands	r2, r1
 800ac70:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2201      	movs	r2, #1
 800ac78:	4013      	ands	r3, r2
 800ac7a:	d009      	beq.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ac7c:	4b70      	ldr	r3, [pc, #448]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ac7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac80:	2203      	movs	r2, #3
 800ac82:	4393      	bics	r3, r2
 800ac84:	0019      	movs	r1, r3
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	685a      	ldr	r2, [r3, #4]
 800ac8a:	4b6d      	ldr	r3, [pc, #436]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ac8c:	430a      	orrs	r2, r1
 800ac8e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	2202      	movs	r2, #2
 800ac96:	4013      	ands	r3, r2
 800ac98:	d009      	beq.n	800acae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ac9a:	4b69      	ldr	r3, [pc, #420]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ac9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac9e:	220c      	movs	r2, #12
 800aca0:	4393      	bics	r3, r2
 800aca2:	0019      	movs	r1, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	689a      	ldr	r2, [r3, #8]
 800aca8:	4b65      	ldr	r3, [pc, #404]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800acaa:	430a      	orrs	r2, r1
 800acac:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	2210      	movs	r2, #16
 800acb4:	4013      	ands	r3, r2
 800acb6:	d009      	beq.n	800accc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800acb8:	4b61      	ldr	r3, [pc, #388]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800acba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acbc:	4a66      	ldr	r2, [pc, #408]	; (800ae58 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800acbe:	4013      	ands	r3, r2
 800acc0:	0019      	movs	r1, r3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	68da      	ldr	r2, [r3, #12]
 800acc6:	4b5e      	ldr	r3, [pc, #376]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800acc8:	430a      	orrs	r2, r1
 800acca:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	2380      	movs	r3, #128	; 0x80
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	4013      	ands	r3, r2
 800acd6:	d009      	beq.n	800acec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800acd8:	4b59      	ldr	r3, [pc, #356]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800acda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acdc:	4a5f      	ldr	r2, [pc, #380]	; (800ae5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800acde:	4013      	ands	r3, r2
 800ace0:	0019      	movs	r1, r3
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	699a      	ldr	r2, [r3, #24]
 800ace6:	4b56      	ldr	r3, [pc, #344]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ace8:	430a      	orrs	r2, r1
 800acea:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681a      	ldr	r2, [r3, #0]
 800acf0:	2380      	movs	r3, #128	; 0x80
 800acf2:	00db      	lsls	r3, r3, #3
 800acf4:	4013      	ands	r3, r2
 800acf6:	d009      	beq.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800acf8:	4b51      	ldr	r3, [pc, #324]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800acfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acfc:	4a58      	ldr	r2, [pc, #352]	; (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800acfe:	4013      	ands	r3, r2
 800ad00:	0019      	movs	r1, r3
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	69da      	ldr	r2, [r3, #28]
 800ad06:	4b4e      	ldr	r3, [pc, #312]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ad08:	430a      	orrs	r2, r1
 800ad0a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	2220      	movs	r2, #32
 800ad12:	4013      	ands	r3, r2
 800ad14:	d009      	beq.n	800ad2a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ad16:	4b4a      	ldr	r3, [pc, #296]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ad18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad1a:	4a52      	ldr	r2, [pc, #328]	; (800ae64 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800ad1c:	4013      	ands	r3, r2
 800ad1e:	0019      	movs	r1, r3
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	691a      	ldr	r2, [r3, #16]
 800ad24:	4b46      	ldr	r3, [pc, #280]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ad26:	430a      	orrs	r2, r1
 800ad28:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681a      	ldr	r2, [r3, #0]
 800ad2e:	2380      	movs	r3, #128	; 0x80
 800ad30:	01db      	lsls	r3, r3, #7
 800ad32:	4013      	ands	r3, r2
 800ad34:	d015      	beq.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ad36:	4b42      	ldr	r3, [pc, #264]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ad38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	0899      	lsrs	r1, r3, #2
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6a1a      	ldr	r2, [r3, #32]
 800ad42:	4b3f      	ldr	r3, [pc, #252]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ad44:	430a      	orrs	r2, r1
 800ad46:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6a1a      	ldr	r2, [r3, #32]
 800ad4c:	2380      	movs	r3, #128	; 0x80
 800ad4e:	05db      	lsls	r3, r3, #23
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d106      	bne.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800ad54:	4b3a      	ldr	r3, [pc, #232]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ad56:	68da      	ldr	r2, [r3, #12]
 800ad58:	4b39      	ldr	r3, [pc, #228]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ad5a:	2180      	movs	r1, #128	; 0x80
 800ad5c:	0249      	lsls	r1, r1, #9
 800ad5e:	430a      	orrs	r2, r1
 800ad60:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	2380      	movs	r3, #128	; 0x80
 800ad68:	031b      	lsls	r3, r3, #12
 800ad6a:	4013      	ands	r3, r2
 800ad6c:	d009      	beq.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ad6e:	4b34      	ldr	r3, [pc, #208]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ad70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad72:	2240      	movs	r2, #64	; 0x40
 800ad74:	4393      	bics	r3, r2
 800ad76:	0019      	movs	r1, r3
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad7c:	4b30      	ldr	r3, [pc, #192]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ad7e:	430a      	orrs	r2, r1
 800ad80:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681a      	ldr	r2, [r3, #0]
 800ad86:	2380      	movs	r3, #128	; 0x80
 800ad88:	039b      	lsls	r3, r3, #14
 800ad8a:	4013      	ands	r3, r2
 800ad8c:	d016      	beq.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800ad8e:	4b2c      	ldr	r3, [pc, #176]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ad90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad92:	4a35      	ldr	r2, [pc, #212]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800ad94:	4013      	ands	r3, r2
 800ad96:	0019      	movs	r1, r3
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ad9c:	4b28      	ldr	r3, [pc, #160]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ad9e:	430a      	orrs	r2, r1
 800ada0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ada6:	2380      	movs	r3, #128	; 0x80
 800ada8:	03db      	lsls	r3, r3, #15
 800adaa:	429a      	cmp	r2, r3
 800adac:	d106      	bne.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800adae:	4b24      	ldr	r3, [pc, #144]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800adb0:	68da      	ldr	r2, [r3, #12]
 800adb2:	4b23      	ldr	r3, [pc, #140]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800adb4:	2180      	movs	r1, #128	; 0x80
 800adb6:	0449      	lsls	r1, r1, #17
 800adb8:	430a      	orrs	r2, r1
 800adba:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	2380      	movs	r3, #128	; 0x80
 800adc2:	03db      	lsls	r3, r3, #15
 800adc4:	4013      	ands	r3, r2
 800adc6:	d016      	beq.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800adc8:	4b1d      	ldr	r3, [pc, #116]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800adca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adcc:	4a27      	ldr	r2, [pc, #156]	; (800ae6c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800adce:	4013      	ands	r3, r2
 800add0:	0019      	movs	r1, r3
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800add6:	4b1a      	ldr	r3, [pc, #104]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800add8:	430a      	orrs	r2, r1
 800adda:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ade0:	2380      	movs	r3, #128	; 0x80
 800ade2:	045b      	lsls	r3, r3, #17
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d106      	bne.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800ade8:	4b15      	ldr	r3, [pc, #84]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800adea:	68da      	ldr	r2, [r3, #12]
 800adec:	4b14      	ldr	r3, [pc, #80]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800adee:	2180      	movs	r1, #128	; 0x80
 800adf0:	0449      	lsls	r1, r1, #17
 800adf2:	430a      	orrs	r2, r1
 800adf4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	2380      	movs	r3, #128	; 0x80
 800adfc:	011b      	lsls	r3, r3, #4
 800adfe:	4013      	ands	r3, r2
 800ae00:	d016      	beq.n	800ae30 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800ae02:	4b0f      	ldr	r3, [pc, #60]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ae04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae06:	4a1a      	ldr	r2, [pc, #104]	; (800ae70 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800ae08:	4013      	ands	r3, r2
 800ae0a:	0019      	movs	r1, r3
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	695a      	ldr	r2, [r3, #20]
 800ae10:	4b0b      	ldr	r3, [pc, #44]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ae12:	430a      	orrs	r2, r1
 800ae14:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	695a      	ldr	r2, [r3, #20]
 800ae1a:	2380      	movs	r3, #128	; 0x80
 800ae1c:	01db      	lsls	r3, r3, #7
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d106      	bne.n	800ae30 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800ae22:	4b07      	ldr	r3, [pc, #28]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ae24:	68da      	ldr	r2, [r3, #12]
 800ae26:	4b06      	ldr	r3, [pc, #24]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ae28:	2180      	movs	r1, #128	; 0x80
 800ae2a:	0249      	lsls	r1, r1, #9
 800ae2c:	430a      	orrs	r2, r1
 800ae2e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800ae30:	2312      	movs	r3, #18
 800ae32:	18fb      	adds	r3, r7, r3
 800ae34:	781b      	ldrb	r3, [r3, #0]
}
 800ae36:	0018      	movs	r0, r3
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	b006      	add	sp, #24
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	46c0      	nop			; (mov r8, r8)
 800ae40:	40021000 	.word	0x40021000
 800ae44:	40007000 	.word	0x40007000
 800ae48:	fffffcff 	.word	0xfffffcff
 800ae4c:	fffeffff 	.word	0xfffeffff
 800ae50:	00001388 	.word	0x00001388
 800ae54:	efffffff 	.word	0xefffffff
 800ae58:	fffff3ff 	.word	0xfffff3ff
 800ae5c:	fff3ffff 	.word	0xfff3ffff
 800ae60:	ffcfffff 	.word	0xffcfffff
 800ae64:	ffffcfff 	.word	0xffffcfff
 800ae68:	ffbfffff 	.word	0xffbfffff
 800ae6c:	feffffff 	.word	0xfeffffff
 800ae70:	ffff3fff 	.word	0xffff3fff

0800ae74 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	2380      	movs	r3, #128	; 0x80
 800ae84:	029b      	lsls	r3, r3, #10
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d136      	bne.n	800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800ae8a:	4bcd      	ldr	r3, [pc, #820]	; (800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800ae8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ae8e:	23c0      	movs	r3, #192	; 0xc0
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	4013      	ands	r3, r2
 800ae94:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800ae96:	4bca      	ldr	r3, [pc, #808]	; (800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800ae98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae9a:	2202      	movs	r2, #2
 800ae9c:	4013      	ands	r3, r2
 800ae9e:	2b02      	cmp	r3, #2
 800aea0:	d108      	bne.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 800aea2:	68fa      	ldr	r2, [r7, #12]
 800aea4:	2380      	movs	r3, #128	; 0x80
 800aea6:	005b      	lsls	r3, r3, #1
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d103      	bne.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 800aeac:	2380      	movs	r3, #128	; 0x80
 800aeae:	021b      	lsls	r3, r3, #8
 800aeb0:	617b      	str	r3, [r7, #20]
 800aeb2:	e31c      	b.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800aeb4:	4bc2      	ldr	r3, [pc, #776]	; (800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800aeb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aeb8:	2202      	movs	r2, #2
 800aeba:	4013      	ands	r3, r2
 800aebc:	2b02      	cmp	r3, #2
 800aebe:	d108      	bne.n	800aed2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 800aec0:	68fa      	ldr	r2, [r7, #12]
 800aec2:	2380      	movs	r3, #128	; 0x80
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d103      	bne.n	800aed2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 800aeca:	23fa      	movs	r3, #250	; 0xfa
 800aecc:	01db      	lsls	r3, r3, #7
 800aece:	617b      	str	r3, [r7, #20]
 800aed0:	e30d      	b.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800aed2:	4bbb      	ldr	r3, [pc, #748]	; (800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800aed4:	681a      	ldr	r2, [r3, #0]
 800aed6:	2380      	movs	r3, #128	; 0x80
 800aed8:	029b      	lsls	r3, r3, #10
 800aeda:	401a      	ands	r2, r3
 800aedc:	2380      	movs	r3, #128	; 0x80
 800aede:	029b      	lsls	r3, r3, #10
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d000      	beq.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 800aee4:	e303      	b.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 800aee6:	68fa      	ldr	r2, [r7, #12]
 800aee8:	23c0      	movs	r3, #192	; 0xc0
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d000      	beq.n	800aef2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 800aef0:	e2fd      	b.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 800aef2:	4bb4      	ldr	r3, [pc, #720]	; (800b1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 800aef4:	617b      	str	r3, [r7, #20]
 800aef6:	e2fa      	b.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 800aef8:	4bb1      	ldr	r3, [pc, #708]	; (800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800aefa:	68db      	ldr	r3, [r3, #12]
 800aefc:	2203      	movs	r2, #3
 800aefe:	4013      	ands	r3, r2
 800af00:	2b02      	cmp	r3, #2
 800af02:	d102      	bne.n	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 800af04:	4bb0      	ldr	r3, [pc, #704]	; (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800af06:	613b      	str	r3, [r7, #16]
 800af08:	e00a      	b.n	800af20 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 800af0a:	4bad      	ldr	r3, [pc, #692]	; (800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800af0c:	68db      	ldr	r3, [r3, #12]
 800af0e:	2203      	movs	r2, #3
 800af10:	4013      	ands	r3, r2
 800af12:	2b03      	cmp	r3, #3
 800af14:	d102      	bne.n	800af1c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 800af16:	4bad      	ldr	r3, [pc, #692]	; (800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 800af18:	613b      	str	r3, [r7, #16]
 800af1a:	e001      	b.n	800af20 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 800af1c:	2300      	movs	r3, #0
 800af1e:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800af20:	4ba7      	ldr	r3, [pc, #668]	; (800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	091b      	lsrs	r3, r3, #4
 800af26:	2207      	movs	r2, #7
 800af28:	4013      	ands	r3, r2
 800af2a:	3301      	adds	r3, #1
 800af2c:	0019      	movs	r1, r3
 800af2e:	6938      	ldr	r0, [r7, #16]
 800af30:	f7f5 f8e8 	bl	8000104 <__udivsi3>
 800af34:	0003      	movs	r3, r0
 800af36:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	2380      	movs	r3, #128	; 0x80
 800af3c:	03db      	lsls	r3, r3, #15
 800af3e:	429a      	cmp	r2, r3
 800af40:	d100      	bne.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 800af42:	e28e      	b.n	800b462 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	2380      	movs	r3, #128	; 0x80
 800af48:	03db      	lsls	r3, r3, #15
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d900      	bls.n	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800af4e:	e2b7      	b.n	800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	2380      	movs	r3, #128	; 0x80
 800af54:	039b      	lsls	r3, r3, #14
 800af56:	429a      	cmp	r2, r3
 800af58:	d100      	bne.n	800af5c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800af5a:	e253      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	2380      	movs	r3, #128	; 0x80
 800af60:	039b      	lsls	r3, r3, #14
 800af62:	429a      	cmp	r2, r3
 800af64:	d900      	bls.n	800af68 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800af66:	e2ab      	b.n	800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	2380      	movs	r3, #128	; 0x80
 800af6c:	031b      	lsls	r3, r3, #12
 800af6e:	429a      	cmp	r2, r3
 800af70:	d100      	bne.n	800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800af72:	e0b2      	b.n	800b0da <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	2380      	movs	r3, #128	; 0x80
 800af78:	031b      	lsls	r3, r3, #12
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d900      	bls.n	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 800af7e:	e29f      	b.n	800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800af80:	687a      	ldr	r2, [r7, #4]
 800af82:	2380      	movs	r3, #128	; 0x80
 800af84:	01db      	lsls	r3, r3, #7
 800af86:	429a      	cmp	r2, r3
 800af88:	d100      	bne.n	800af8c <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 800af8a:	e103      	b.n	800b194 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	2380      	movs	r3, #128	; 0x80
 800af90:	01db      	lsls	r3, r3, #7
 800af92:	429a      	cmp	r2, r3
 800af94:	d900      	bls.n	800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800af96:	e293      	b.n	800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	2380      	movs	r3, #128	; 0x80
 800af9c:	011b      	lsls	r3, r3, #4
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d100      	bne.n	800afa4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800afa2:	e165      	b.n	800b270 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	2380      	movs	r3, #128	; 0x80
 800afa8:	011b      	lsls	r3, r3, #4
 800afaa:	429a      	cmp	r2, r3
 800afac:	d900      	bls.n	800afb0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800afae:	e287      	b.n	800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	2380      	movs	r3, #128	; 0x80
 800afb4:	00db      	lsls	r3, r3, #3
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d100      	bne.n	800afbc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 800afba:	e1e3      	b.n	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	2380      	movs	r3, #128	; 0x80
 800afc0:	00db      	lsls	r3, r3, #3
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d900      	bls.n	800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800afc6:	e27b      	b.n	800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	2380      	movs	r3, #128	; 0x80
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	429a      	cmp	r2, r3
 800afd0:	d100      	bne.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800afd2:	e197      	b.n	800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	2380      	movs	r3, #128	; 0x80
 800afd8:	009b      	lsls	r3, r3, #2
 800afda:	429a      	cmp	r2, r3
 800afdc:	d900      	bls.n	800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800afde:	e26f      	b.n	800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2b20      	cmp	r3, #32
 800afe4:	d100      	bne.n	800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 800afe6:	e118      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2b20      	cmp	r3, #32
 800afec:	d900      	bls.n	800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 800afee:	e267      	b.n	800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2b10      	cmp	r3, #16
 800aff4:	d100      	bne.n	800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 800aff6:	e093      	b.n	800b120 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2b10      	cmp	r3, #16
 800affc:	d900      	bls.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800affe:	e25f      	b.n	800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2b01      	cmp	r3, #1
 800b004:	d003      	beq.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2b02      	cmp	r3, #2
 800b00a:	d033      	beq.n	800b074 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 800b00c:	e258      	b.n	800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800b00e:	4b6c      	ldr	r3, [pc, #432]	; (800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800b010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b012:	2203      	movs	r2, #3
 800b014:	4013      	ands	r3, r2
 800b016:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d104      	bne.n	800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b01e:	f7ff fd5b 	bl	800aad8 <HAL_RCC_GetPCLK1Freq>
 800b022:	0003      	movs	r3, r0
 800b024:	617b      	str	r3, [r7, #20]
        break;
 800b026:	e24d      	b.n	800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d104      	bne.n	800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 800b02e:	f7ff fcc7 	bl	800a9c0 <HAL_RCC_GetSysClockFreq>
 800b032:	0003      	movs	r3, r0
 800b034:	617b      	str	r3, [r7, #20]
        break;
 800b036:	e245      	b.n	800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800b038:	4b61      	ldr	r3, [pc, #388]	; (800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	2380      	movs	r3, #128	; 0x80
 800b03e:	00db      	lsls	r3, r3, #3
 800b040:	401a      	ands	r2, r3
 800b042:	2380      	movs	r3, #128	; 0x80
 800b044:	00db      	lsls	r3, r3, #3
 800b046:	429a      	cmp	r2, r3
 800b048:	d105      	bne.n	800b056 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2b02      	cmp	r3, #2
 800b04e:	d102      	bne.n	800b056 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 800b050:	4b5d      	ldr	r3, [pc, #372]	; (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800b052:	617b      	str	r3, [r7, #20]
        break;
 800b054:	e236      	b.n	800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800b056:	4b5a      	ldr	r3, [pc, #360]	; (800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800b058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b05a:	2202      	movs	r2, #2
 800b05c:	4013      	ands	r3, r2
 800b05e:	2b02      	cmp	r3, #2
 800b060:	d000      	beq.n	800b064 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 800b062:	e22f      	b.n	800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2b03      	cmp	r3, #3
 800b068:	d000      	beq.n	800b06c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 800b06a:	e22b      	b.n	800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 800b06c:	2380      	movs	r3, #128	; 0x80
 800b06e:	021b      	lsls	r3, r3, #8
 800b070:	617b      	str	r3, [r7, #20]
        break;
 800b072:	e227      	b.n	800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800b074:	4b52      	ldr	r3, [pc, #328]	; (800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800b076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b078:	220c      	movs	r2, #12
 800b07a:	4013      	ands	r3, r2
 800b07c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d104      	bne.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b084:	f7ff fd28 	bl	800aad8 <HAL_RCC_GetPCLK1Freq>
 800b088:	0003      	movs	r3, r0
 800b08a:	617b      	str	r3, [r7, #20]
        break;
 800b08c:	e21c      	b.n	800b4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2b04      	cmp	r3, #4
 800b092:	d104      	bne.n	800b09e <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 800b094:	f7ff fc94 	bl	800a9c0 <HAL_RCC_GetSysClockFreq>
 800b098:	0003      	movs	r3, r0
 800b09a:	617b      	str	r3, [r7, #20]
        break;
 800b09c:	e214      	b.n	800b4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800b09e:	4b48      	ldr	r3, [pc, #288]	; (800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	2380      	movs	r3, #128	; 0x80
 800b0a4:	00db      	lsls	r3, r3, #3
 800b0a6:	401a      	ands	r2, r3
 800b0a8:	2380      	movs	r3, #128	; 0x80
 800b0aa:	00db      	lsls	r3, r3, #3
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d105      	bne.n	800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2b08      	cmp	r3, #8
 800b0b4:	d102      	bne.n	800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 800b0b6:	4b44      	ldr	r3, [pc, #272]	; (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800b0b8:	617b      	str	r3, [r7, #20]
        break;
 800b0ba:	e205      	b.n	800b4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800b0bc:	4b40      	ldr	r3, [pc, #256]	; (800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800b0be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0c0:	2202      	movs	r2, #2
 800b0c2:	4013      	ands	r3, r2
 800b0c4:	2b02      	cmp	r3, #2
 800b0c6:	d000      	beq.n	800b0ca <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800b0c8:	e1fe      	b.n	800b4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2b0c      	cmp	r3, #12
 800b0ce:	d000      	beq.n	800b0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800b0d0:	e1fa      	b.n	800b4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 800b0d2:	2380      	movs	r3, #128	; 0x80
 800b0d4:	021b      	lsls	r3, r3, #8
 800b0d6:	617b      	str	r3, [r7, #20]
        break;
 800b0d8:	e1f6      	b.n	800b4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800b0da:	4b39      	ldr	r3, [pc, #228]	; (800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800b0dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0de:	2240      	movs	r2, #64	; 0x40
 800b0e0:	4013      	ands	r3, r2
 800b0e2:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 800b0e4:	4b36      	ldr	r3, [pc, #216]	; (800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	2380      	movs	r3, #128	; 0x80
 800b0ea:	00db      	lsls	r3, r3, #3
 800b0ec:	401a      	ands	r2, r3
 800b0ee:	2380      	movs	r3, #128	; 0x80
 800b0f0:	00db      	lsls	r3, r3, #3
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d105      	bne.n	800b102 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d102      	bne.n	800b102 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 800b0fc:	4b34      	ldr	r3, [pc, #208]	; (800b1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 800b0fe:	617b      	str	r3, [r7, #20]
        break;
 800b100:	e1e4      	b.n	800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800b102:	4b2f      	ldr	r3, [pc, #188]	; (800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800b104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b106:	2202      	movs	r2, #2
 800b108:	4013      	ands	r3, r2
 800b10a:	2b02      	cmp	r3, #2
 800b10c:	d000      	beq.n	800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 800b10e:	e1dd      	b.n	800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2b40      	cmp	r3, #64	; 0x40
 800b114:	d000      	beq.n	800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 800b116:	e1d9      	b.n	800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 800b118:	2380      	movs	r3, #128	; 0x80
 800b11a:	021b      	lsls	r3, r3, #8
 800b11c:	617b      	str	r3, [r7, #20]
        break;
 800b11e:	e1d5      	b.n	800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800b120:	4b27      	ldr	r3, [pc, #156]	; (800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800b122:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b124:	23c0      	movs	r3, #192	; 0xc0
 800b126:	011b      	lsls	r3, r3, #4
 800b128:	4013      	ands	r3, r2
 800b12a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d104      	bne.n	800b13c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b132:	f7ff fcd1 	bl	800aad8 <HAL_RCC_GetPCLK1Freq>
 800b136:	0003      	movs	r3, r0
 800b138:	617b      	str	r3, [r7, #20]
        break;
 800b13a:	e1c9      	b.n	800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800b13c:	68fa      	ldr	r2, [r7, #12]
 800b13e:	2380      	movs	r3, #128	; 0x80
 800b140:	00db      	lsls	r3, r3, #3
 800b142:	429a      	cmp	r2, r3
 800b144:	d104      	bne.n	800b150 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 800b146:	f7ff fc3b 	bl	800a9c0 <HAL_RCC_GetSysClockFreq>
 800b14a:	0003      	movs	r3, r0
 800b14c:	617b      	str	r3, [r7, #20]
        break;
 800b14e:	e1bf      	b.n	800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800b150:	4b1b      	ldr	r3, [pc, #108]	; (800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	2380      	movs	r3, #128	; 0x80
 800b156:	00db      	lsls	r3, r3, #3
 800b158:	401a      	ands	r2, r3
 800b15a:	2380      	movs	r3, #128	; 0x80
 800b15c:	00db      	lsls	r3, r3, #3
 800b15e:	429a      	cmp	r2, r3
 800b160:	d107      	bne.n	800b172 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 800b162:	68fa      	ldr	r2, [r7, #12]
 800b164:	2380      	movs	r3, #128	; 0x80
 800b166:	011b      	lsls	r3, r3, #4
 800b168:	429a      	cmp	r2, r3
 800b16a:	d102      	bne.n	800b172 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 800b16c:	4b16      	ldr	r3, [pc, #88]	; (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800b16e:	617b      	str	r3, [r7, #20]
        break;
 800b170:	e1ae      	b.n	800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800b172:	4b13      	ldr	r3, [pc, #76]	; (800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800b174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b176:	2202      	movs	r2, #2
 800b178:	4013      	ands	r3, r2
 800b17a:	2b02      	cmp	r3, #2
 800b17c:	d000      	beq.n	800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800b17e:	e1a7      	b.n	800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 800b180:	68fa      	ldr	r2, [r7, #12]
 800b182:	23c0      	movs	r3, #192	; 0xc0
 800b184:	011b      	lsls	r3, r3, #4
 800b186:	429a      	cmp	r2, r3
 800b188:	d000      	beq.n	800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800b18a:	e1a1      	b.n	800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 800b18c:	2380      	movs	r3, #128	; 0x80
 800b18e:	021b      	lsls	r3, r3, #8
 800b190:	617b      	str	r3, [r7, #20]
        break;
 800b192:	e19d      	b.n	800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b194:	4b0a      	ldr	r3, [pc, #40]	; (800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800b196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b198:	0f9b      	lsrs	r3, r3, #30
 800b19a:	079b      	lsls	r3, r3, #30
 800b19c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d104      	bne.n	800b1ae <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 800b1a4:	f7ff fc0c 	bl	800a9c0 <HAL_RCC_GetSysClockFreq>
 800b1a8:	0003      	movs	r3, r0
 800b1aa:	617b      	str	r3, [r7, #20]
        break;
 800b1ac:	e192      	b.n	800b4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 800b1ae:	68fa      	ldr	r2, [r7, #12]
 800b1b0:	2380      	movs	r3, #128	; 0x80
 800b1b2:	061b      	lsls	r3, r3, #24
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d10d      	bne.n	800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 800b1b8:	4b03      	ldr	r3, [pc, #12]	; (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800b1ba:	617b      	str	r3, [r7, #20]
        break;
 800b1bc:	e18a      	b.n	800b4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b1be:	46c0      	nop			; (mov r8, r8)
 800b1c0:	40021000 	.word	0x40021000
 800b1c4:	0003d090 	.word	0x0003d090
 800b1c8:	00f42400 	.word	0x00f42400
 800b1cc:	007a1200 	.word	0x007a1200
 800b1d0:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 800b1d4:	68fa      	ldr	r2, [r7, #12]
 800b1d6:	2380      	movs	r3, #128	; 0x80
 800b1d8:	05db      	lsls	r3, r3, #23
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d000      	beq.n	800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 800b1de:	e179      	b.n	800b4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 800b1e0:	4bc5      	ldr	r3, [pc, #788]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b1e2:	68da      	ldr	r2, [r3, #12]
 800b1e4:	2380      	movs	r3, #128	; 0x80
 800b1e6:	025b      	lsls	r3, r3, #9
 800b1e8:	4013      	ands	r3, r2
 800b1ea:	d100      	bne.n	800b1ee <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800b1ec:	e172      	b.n	800b4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b1ee:	4bc2      	ldr	r3, [pc, #776]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b1f0:	68db      	ldr	r3, [r3, #12]
 800b1f2:	0a1b      	lsrs	r3, r3, #8
 800b1f4:	227f      	movs	r2, #127	; 0x7f
 800b1f6:	4013      	ands	r3, r2
 800b1f8:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	68ba      	ldr	r2, [r7, #8]
 800b1fe:	435a      	muls	r2, r3
 800b200:	4bbd      	ldr	r3, [pc, #756]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	0c5b      	lsrs	r3, r3, #17
 800b206:	211f      	movs	r1, #31
 800b208:	400b      	ands	r3, r1
 800b20a:	3301      	adds	r3, #1
 800b20c:	0019      	movs	r1, r3
 800b20e:	0010      	movs	r0, r2
 800b210:	f7f4 ff78 	bl	8000104 <__udivsi3>
 800b214:	0003      	movs	r3, r0
 800b216:	617b      	str	r3, [r7, #20]
        break;
 800b218:	e15c      	b.n	800b4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800b21a:	4bb7      	ldr	r3, [pc, #732]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b21c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b21e:	23c0      	movs	r3, #192	; 0xc0
 800b220:	019b      	lsls	r3, r3, #6
 800b222:	4013      	ands	r3, r2
 800b224:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d104      	bne.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b22c:	f7ff fc54 	bl	800aad8 <HAL_RCC_GetPCLK1Freq>
 800b230:	0003      	movs	r3, r0
 800b232:	617b      	str	r3, [r7, #20]
        break;
 800b234:	e150      	b.n	800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800b236:	68fa      	ldr	r2, [r7, #12]
 800b238:	2380      	movs	r3, #128	; 0x80
 800b23a:	015b      	lsls	r3, r3, #5
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d104      	bne.n	800b24a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 800b240:	f7ff fbbe 	bl	800a9c0 <HAL_RCC_GetSysClockFreq>
 800b244:	0003      	movs	r3, r0
 800b246:	617b      	str	r3, [r7, #20]
        break;
 800b248:	e146      	b.n	800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800b24a:	4bab      	ldr	r3, [pc, #684]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b24c:	681a      	ldr	r2, [r3, #0]
 800b24e:	2380      	movs	r3, #128	; 0x80
 800b250:	00db      	lsls	r3, r3, #3
 800b252:	401a      	ands	r2, r3
 800b254:	2380      	movs	r3, #128	; 0x80
 800b256:	00db      	lsls	r3, r3, #3
 800b258:	429a      	cmp	r2, r3
 800b25a:	d000      	beq.n	800b25e <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 800b25c:	e13c      	b.n	800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800b25e:	68fa      	ldr	r2, [r7, #12]
 800b260:	2380      	movs	r3, #128	; 0x80
 800b262:	019b      	lsls	r3, r3, #6
 800b264:	429a      	cmp	r2, r3
 800b266:	d000      	beq.n	800b26a <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 800b268:	e136      	b.n	800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 800b26a:	4ba4      	ldr	r3, [pc, #656]	; (800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 800b26c:	617b      	str	r3, [r7, #20]
        break;
 800b26e:	e133      	b.n	800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 800b270:	4ba1      	ldr	r3, [pc, #644]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b272:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b274:	23c0      	movs	r3, #192	; 0xc0
 800b276:	021b      	lsls	r3, r3, #8
 800b278:	4013      	ands	r3, r2
 800b27a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 800b27c:	68fa      	ldr	r2, [r7, #12]
 800b27e:	2380      	movs	r3, #128	; 0x80
 800b280:	01db      	lsls	r3, r3, #7
 800b282:	429a      	cmp	r2, r3
 800b284:	d11c      	bne.n	800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 800b286:	4b9c      	ldr	r3, [pc, #624]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b288:	68da      	ldr	r2, [r3, #12]
 800b28a:	2380      	movs	r3, #128	; 0x80
 800b28c:	025b      	lsls	r3, r3, #9
 800b28e:	4013      	ands	r3, r2
 800b290:	d100      	bne.n	800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 800b292:	e123      	b.n	800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b294:	4b98      	ldr	r3, [pc, #608]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	0a1b      	lsrs	r3, r3, #8
 800b29a:	227f      	movs	r2, #127	; 0x7f
 800b29c:	4013      	ands	r3, r2
 800b29e:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	68ba      	ldr	r2, [r7, #8]
 800b2a4:	435a      	muls	r2, r3
 800b2a6:	4b94      	ldr	r3, [pc, #592]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b2a8:	68db      	ldr	r3, [r3, #12]
 800b2aa:	0c5b      	lsrs	r3, r3, #17
 800b2ac:	211f      	movs	r1, #31
 800b2ae:	400b      	ands	r3, r1
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	0019      	movs	r1, r3
 800b2b4:	0010      	movs	r0, r2
 800b2b6:	f7f4 ff25 	bl	8000104 <__udivsi3>
 800b2ba:	0003      	movs	r3, r0
 800b2bc:	617b      	str	r3, [r7, #20]
        break;
 800b2be:	e10d      	b.n	800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d104      	bne.n	800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 800b2c6:	f7ff fb7b 	bl	800a9c0 <HAL_RCC_GetSysClockFreq>
 800b2ca:	0003      	movs	r3, r0
 800b2cc:	617b      	str	r3, [r7, #20]
        break;
 800b2ce:	e105      	b.n	800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 800b2d0:	4b89      	ldr	r3, [pc, #548]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b2d2:	681a      	ldr	r2, [r3, #0]
 800b2d4:	2380      	movs	r3, #128	; 0x80
 800b2d6:	00db      	lsls	r3, r3, #3
 800b2d8:	401a      	ands	r2, r3
 800b2da:	2380      	movs	r3, #128	; 0x80
 800b2dc:	00db      	lsls	r3, r3, #3
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d107      	bne.n	800b2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 800b2e2:	68fa      	ldr	r2, [r7, #12]
 800b2e4:	2380      	movs	r3, #128	; 0x80
 800b2e6:	021b      	lsls	r3, r3, #8
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d102      	bne.n	800b2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 800b2ec:	4b83      	ldr	r3, [pc, #524]	; (800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 800b2ee:	617b      	str	r3, [r7, #20]
        break;
 800b2f0:	e0f4      	b.n	800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 800b2f2:	68fa      	ldr	r2, [r7, #12]
 800b2f4:	23c0      	movs	r3, #192	; 0xc0
 800b2f6:	021b      	lsls	r3, r3, #8
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d000      	beq.n	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b2fc:	e0ee      	b.n	800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 800b2fe:	4b80      	ldr	r3, [pc, #512]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 800b300:	617b      	str	r3, [r7, #20]
        break;
 800b302:	e0eb      	b.n	800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b304:	4b7c      	ldr	r3, [pc, #496]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b306:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b308:	23c0      	movs	r3, #192	; 0xc0
 800b30a:	031b      	lsls	r3, r3, #12
 800b30c:	4013      	ands	r3, r2
 800b30e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d104      	bne.n	800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b316:	f7ff fbdf 	bl	800aad8 <HAL_RCC_GetPCLK1Freq>
 800b31a:	0003      	movs	r3, r0
 800b31c:	617b      	str	r3, [r7, #20]
        break;
 800b31e:	e0df      	b.n	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800b320:	4b75      	ldr	r3, [pc, #468]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b324:	2202      	movs	r2, #2
 800b326:	4013      	ands	r3, r2
 800b328:	2b02      	cmp	r3, #2
 800b32a:	d108      	bne.n	800b33e <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 800b32c:	68fa      	ldr	r2, [r7, #12]
 800b32e:	2380      	movs	r3, #128	; 0x80
 800b330:	02db      	lsls	r3, r3, #11
 800b332:	429a      	cmp	r2, r3
 800b334:	d103      	bne.n	800b33e <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 800b336:	23fa      	movs	r3, #250	; 0xfa
 800b338:	01db      	lsls	r3, r3, #7
 800b33a:	617b      	str	r3, [r7, #20]
 800b33c:	e021      	b.n	800b382 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800b33e:	4b6e      	ldr	r3, [pc, #440]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	2380      	movs	r3, #128	; 0x80
 800b344:	00db      	lsls	r3, r3, #3
 800b346:	401a      	ands	r2, r3
 800b348:	2380      	movs	r3, #128	; 0x80
 800b34a:	00db      	lsls	r3, r3, #3
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d107      	bne.n	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800b350:	68fa      	ldr	r2, [r7, #12]
 800b352:	2380      	movs	r3, #128	; 0x80
 800b354:	031b      	lsls	r3, r3, #12
 800b356:	429a      	cmp	r2, r3
 800b358:	d102      	bne.n	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 800b35a:	4b68      	ldr	r3, [pc, #416]	; (800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 800b35c:	617b      	str	r3, [r7, #20]
 800b35e:	e010      	b.n	800b382 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800b360:	4b65      	ldr	r3, [pc, #404]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b364:	2202      	movs	r2, #2
 800b366:	4013      	ands	r3, r2
 800b368:	2b02      	cmp	r3, #2
 800b36a:	d000      	beq.n	800b36e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b36c:	e0b8      	b.n	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800b36e:	68fa      	ldr	r2, [r7, #12]
 800b370:	23c0      	movs	r3, #192	; 0xc0
 800b372:	031b      	lsls	r3, r3, #12
 800b374:	429a      	cmp	r2, r3
 800b376:	d000      	beq.n	800b37a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b378:	e0b2      	b.n	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 800b37a:	2380      	movs	r3, #128	; 0x80
 800b37c:	021b      	lsls	r3, r3, #8
 800b37e:	617b      	str	r3, [r7, #20]
        break;
 800b380:	e0ae      	b.n	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800b382:	e0ad      	b.n	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800b384:	4b5c      	ldr	r3, [pc, #368]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b386:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b388:	23c0      	movs	r3, #192	; 0xc0
 800b38a:	039b      	lsls	r3, r3, #14
 800b38c:	4013      	ands	r3, r2
 800b38e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d104      	bne.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b396:	f7ff fb9f 	bl	800aad8 <HAL_RCC_GetPCLK1Freq>
 800b39a:	0003      	movs	r3, r0
 800b39c:	617b      	str	r3, [r7, #20]
        break;
 800b39e:	e0a1      	b.n	800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800b3a0:	4b55      	ldr	r3, [pc, #340]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b3a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3a4:	2202      	movs	r2, #2
 800b3a6:	4013      	ands	r3, r2
 800b3a8:	2b02      	cmp	r3, #2
 800b3aa:	d108      	bne.n	800b3be <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 800b3ac:	68fa      	ldr	r2, [r7, #12]
 800b3ae:	2380      	movs	r3, #128	; 0x80
 800b3b0:	035b      	lsls	r3, r3, #13
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d103      	bne.n	800b3be <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 800b3b6:	23fa      	movs	r3, #250	; 0xfa
 800b3b8:	01db      	lsls	r3, r3, #7
 800b3ba:	617b      	str	r3, [r7, #20]
 800b3bc:	e021      	b.n	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800b3be:	4b4e      	ldr	r3, [pc, #312]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	2380      	movs	r3, #128	; 0x80
 800b3c4:	00db      	lsls	r3, r3, #3
 800b3c6:	401a      	ands	r2, r3
 800b3c8:	2380      	movs	r3, #128	; 0x80
 800b3ca:	00db      	lsls	r3, r3, #3
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d107      	bne.n	800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 800b3d0:	68fa      	ldr	r2, [r7, #12]
 800b3d2:	2380      	movs	r3, #128	; 0x80
 800b3d4:	039b      	lsls	r3, r3, #14
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d102      	bne.n	800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 800b3da:	4b48      	ldr	r3, [pc, #288]	; (800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 800b3dc:	617b      	str	r3, [r7, #20]
 800b3de:	e010      	b.n	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800b3e0:	4b45      	ldr	r3, [pc, #276]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b3e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3e4:	2202      	movs	r2, #2
 800b3e6:	4013      	ands	r3, r2
 800b3e8:	2b02      	cmp	r3, #2
 800b3ea:	d000      	beq.n	800b3ee <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800b3ec:	e07a      	b.n	800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 800b3ee:	68fa      	ldr	r2, [r7, #12]
 800b3f0:	23c0      	movs	r3, #192	; 0xc0
 800b3f2:	039b      	lsls	r3, r3, #14
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d000      	beq.n	800b3fa <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 800b3f8:	e074      	b.n	800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 800b3fa:	2380      	movs	r3, #128	; 0x80
 800b3fc:	021b      	lsls	r3, r3, #8
 800b3fe:	617b      	str	r3, [r7, #20]
        break;
 800b400:	e070      	b.n	800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 800b402:	e06f      	b.n	800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 800b404:	4b3c      	ldr	r3, [pc, #240]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b406:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b408:	2380      	movs	r3, #128	; 0x80
 800b40a:	03db      	lsls	r3, r3, #15
 800b40c:	4013      	ands	r3, r2
 800b40e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 800b410:	68fa      	ldr	r2, [r7, #12]
 800b412:	2380      	movs	r3, #128	; 0x80
 800b414:	03db      	lsls	r3, r3, #15
 800b416:	429a      	cmp	r2, r3
 800b418:	d11b      	bne.n	800b452 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 800b41a:	4b37      	ldr	r3, [pc, #220]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b41c:	68da      	ldr	r2, [r3, #12]
 800b41e:	2380      	movs	r3, #128	; 0x80
 800b420:	045b      	lsls	r3, r3, #17
 800b422:	4013      	ands	r3, r2
 800b424:	d060      	beq.n	800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b426:	4b34      	ldr	r3, [pc, #208]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b428:	68db      	ldr	r3, [r3, #12]
 800b42a:	0a1b      	lsrs	r3, r3, #8
 800b42c:	227f      	movs	r2, #127	; 0x7f
 800b42e:	4013      	ands	r3, r2
 800b430:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	68ba      	ldr	r2, [r7, #8]
 800b436:	435a      	muls	r2, r3
 800b438:	4b2f      	ldr	r3, [pc, #188]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	0e5b      	lsrs	r3, r3, #25
 800b43e:	2107      	movs	r1, #7
 800b440:	400b      	ands	r3, r1
 800b442:	3301      	adds	r3, #1
 800b444:	0019      	movs	r1, r3
 800b446:	0010      	movs	r0, r2
 800b448:	f7f4 fe5c 	bl	8000104 <__udivsi3>
 800b44c:	0003      	movs	r3, r0
 800b44e:	617b      	str	r3, [r7, #20]
        break;
 800b450:	e04a      	b.n	800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d147      	bne.n	800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b458:	f7ff fb3e 	bl	800aad8 <HAL_RCC_GetPCLK1Freq>
 800b45c:	0003      	movs	r3, r0
 800b45e:	617b      	str	r3, [r7, #20]
        break;
 800b460:	e042      	b.n	800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 800b462:	4b25      	ldr	r3, [pc, #148]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b464:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b466:	2380      	movs	r3, #128	; 0x80
 800b468:	045b      	lsls	r3, r3, #17
 800b46a:	4013      	ands	r3, r2
 800b46c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 800b46e:	68fa      	ldr	r2, [r7, #12]
 800b470:	2380      	movs	r3, #128	; 0x80
 800b472:	045b      	lsls	r3, r3, #17
 800b474:	429a      	cmp	r2, r3
 800b476:	d11b      	bne.n	800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 800b478:	4b1f      	ldr	r3, [pc, #124]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b47a:	68da      	ldr	r2, [r3, #12]
 800b47c:	2380      	movs	r3, #128	; 0x80
 800b47e:	045b      	lsls	r3, r3, #17
 800b480:	4013      	ands	r3, r2
 800b482:	d033      	beq.n	800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b484:	4b1c      	ldr	r3, [pc, #112]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b486:	68db      	ldr	r3, [r3, #12]
 800b488:	0a1b      	lsrs	r3, r3, #8
 800b48a:	227f      	movs	r2, #127	; 0x7f
 800b48c:	4013      	ands	r3, r2
 800b48e:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	68ba      	ldr	r2, [r7, #8]
 800b494:	435a      	muls	r2, r3
 800b496:	4b18      	ldr	r3, [pc, #96]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800b498:	68db      	ldr	r3, [r3, #12]
 800b49a:	0e5b      	lsrs	r3, r3, #25
 800b49c:	2107      	movs	r1, #7
 800b49e:	400b      	ands	r3, r1
 800b4a0:	3301      	adds	r3, #1
 800b4a2:	0019      	movs	r1, r3
 800b4a4:	0010      	movs	r0, r2
 800b4a6:	f7f4 fe2d 	bl	8000104 <__udivsi3>
 800b4aa:	0003      	movs	r3, r0
 800b4ac:	617b      	str	r3, [r7, #20]
        break;
 800b4ae:	e01d      	b.n	800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d11a      	bne.n	800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b4b6:	f7ff fb0f 	bl	800aad8 <HAL_RCC_GetPCLK1Freq>
 800b4ba:	0003      	movs	r3, r0
 800b4bc:	617b      	str	r3, [r7, #20]
        break;
 800b4be:	e015      	b.n	800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 800b4c0:	46c0      	nop			; (mov r8, r8)
 800b4c2:	e014      	b.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b4c4:	46c0      	nop			; (mov r8, r8)
 800b4c6:	e012      	b.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b4c8:	46c0      	nop			; (mov r8, r8)
 800b4ca:	e010      	b.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b4cc:	46c0      	nop			; (mov r8, r8)
 800b4ce:	e00e      	b.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b4d0:	46c0      	nop			; (mov r8, r8)
 800b4d2:	e00c      	b.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b4d4:	46c0      	nop			; (mov r8, r8)
 800b4d6:	e00a      	b.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b4d8:	46c0      	nop			; (mov r8, r8)
 800b4da:	e008      	b.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b4dc:	46c0      	nop			; (mov r8, r8)
 800b4de:	e006      	b.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b4e0:	46c0      	nop			; (mov r8, r8)
 800b4e2:	e004      	b.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b4e4:	46c0      	nop			; (mov r8, r8)
 800b4e6:	e002      	b.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b4e8:	46c0      	nop			; (mov r8, r8)
 800b4ea:	e000      	b.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b4ec:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 800b4ee:	697b      	ldr	r3, [r7, #20]
}
 800b4f0:	0018      	movs	r0, r3
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	b006      	add	sp, #24
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	40021000 	.word	0x40021000
 800b4fc:	00f42400 	.word	0x00f42400
 800b500:	0000bb80 	.word	0x0000bb80

0800b504 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b084      	sub	sp, #16
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d101      	bne.n	800b516 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b512:	2301      	movs	r3, #1
 800b514:	e0a8      	b.n	800b668 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d109      	bne.n	800b532 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	685a      	ldr	r2, [r3, #4]
 800b522:	2382      	movs	r3, #130	; 0x82
 800b524:	005b      	lsls	r3, r3, #1
 800b526:	429a      	cmp	r2, r3
 800b528:	d009      	beq.n	800b53e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2200      	movs	r2, #0
 800b52e:	61da      	str	r2, [r3, #28]
 800b530:	e005      	b.n	800b53e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2200      	movs	r2, #0
 800b536:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2200      	movs	r2, #0
 800b542:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	225d      	movs	r2, #93	; 0x5d
 800b548:	5c9b      	ldrb	r3, [r3, r2]
 800b54a:	b2db      	uxtb	r3, r3
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d107      	bne.n	800b560 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	225c      	movs	r2, #92	; 0x5c
 800b554:	2100      	movs	r1, #0
 800b556:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	0018      	movs	r0, r3
 800b55c:	f7fb fcd6 	bl	8006f0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	225d      	movs	r2, #93	; 0x5d
 800b564:	2102      	movs	r1, #2
 800b566:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	681a      	ldr	r2, [r3, #0]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	2140      	movs	r1, #64	; 0x40
 800b574:	438a      	bics	r2, r1
 800b576:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	68da      	ldr	r2, [r3, #12]
 800b57c:	23e0      	movs	r3, #224	; 0xe0
 800b57e:	00db      	lsls	r3, r3, #3
 800b580:	429a      	cmp	r2, r3
 800b582:	d902      	bls.n	800b58a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b584:	2300      	movs	r3, #0
 800b586:	60fb      	str	r3, [r7, #12]
 800b588:	e002      	b.n	800b590 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b58a:	2380      	movs	r3, #128	; 0x80
 800b58c:	015b      	lsls	r3, r3, #5
 800b58e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	68da      	ldr	r2, [r3, #12]
 800b594:	23f0      	movs	r3, #240	; 0xf0
 800b596:	011b      	lsls	r3, r3, #4
 800b598:	429a      	cmp	r2, r3
 800b59a:	d008      	beq.n	800b5ae <HAL_SPI_Init+0xaa>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	68da      	ldr	r2, [r3, #12]
 800b5a0:	23e0      	movs	r3, #224	; 0xe0
 800b5a2:	00db      	lsls	r3, r3, #3
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d002      	beq.n	800b5ae <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	685a      	ldr	r2, [r3, #4]
 800b5b2:	2382      	movs	r3, #130	; 0x82
 800b5b4:	005b      	lsls	r3, r3, #1
 800b5b6:	401a      	ands	r2, r3
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6899      	ldr	r1, [r3, #8]
 800b5bc:	2384      	movs	r3, #132	; 0x84
 800b5be:	021b      	lsls	r3, r3, #8
 800b5c0:	400b      	ands	r3, r1
 800b5c2:	431a      	orrs	r2, r3
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	691b      	ldr	r3, [r3, #16]
 800b5c8:	2102      	movs	r1, #2
 800b5ca:	400b      	ands	r3, r1
 800b5cc:	431a      	orrs	r2, r3
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	695b      	ldr	r3, [r3, #20]
 800b5d2:	2101      	movs	r1, #1
 800b5d4:	400b      	ands	r3, r1
 800b5d6:	431a      	orrs	r2, r3
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6999      	ldr	r1, [r3, #24]
 800b5dc:	2380      	movs	r3, #128	; 0x80
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	400b      	ands	r3, r1
 800b5e2:	431a      	orrs	r2, r3
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	69db      	ldr	r3, [r3, #28]
 800b5e8:	2138      	movs	r1, #56	; 0x38
 800b5ea:	400b      	ands	r3, r1
 800b5ec:	431a      	orrs	r2, r3
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6a1b      	ldr	r3, [r3, #32]
 800b5f2:	2180      	movs	r1, #128	; 0x80
 800b5f4:	400b      	ands	r3, r1
 800b5f6:	431a      	orrs	r2, r3
 800b5f8:	0011      	movs	r1, r2
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b5fe:	2380      	movs	r3, #128	; 0x80
 800b600:	019b      	lsls	r3, r3, #6
 800b602:	401a      	ands	r2, r3
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	430a      	orrs	r2, r1
 800b60a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	699b      	ldr	r3, [r3, #24]
 800b610:	0c1b      	lsrs	r3, r3, #16
 800b612:	2204      	movs	r2, #4
 800b614:	401a      	ands	r2, r3
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b61a:	2110      	movs	r1, #16
 800b61c:	400b      	ands	r3, r1
 800b61e:	431a      	orrs	r2, r3
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b624:	2108      	movs	r1, #8
 800b626:	400b      	ands	r3, r1
 800b628:	431a      	orrs	r2, r3
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	68d9      	ldr	r1, [r3, #12]
 800b62e:	23f0      	movs	r3, #240	; 0xf0
 800b630:	011b      	lsls	r3, r3, #4
 800b632:	400b      	ands	r3, r1
 800b634:	431a      	orrs	r2, r3
 800b636:	0011      	movs	r1, r2
 800b638:	68fa      	ldr	r2, [r7, #12]
 800b63a:	2380      	movs	r3, #128	; 0x80
 800b63c:	015b      	lsls	r3, r3, #5
 800b63e:	401a      	ands	r2, r3
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	430a      	orrs	r2, r1
 800b646:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	69da      	ldr	r2, [r3, #28]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4907      	ldr	r1, [pc, #28]	; (800b670 <HAL_SPI_Init+0x16c>)
 800b654:	400a      	ands	r2, r1
 800b656:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2200      	movs	r2, #0
 800b65c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	225d      	movs	r2, #93	; 0x5d
 800b662:	2101      	movs	r1, #1
 800b664:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b666:	2300      	movs	r3, #0
}
 800b668:	0018      	movs	r0, r3
 800b66a:	46bd      	mov	sp, r7
 800b66c:	b004      	add	sp, #16
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	fffff7ff 	.word	0xfffff7ff

0800b674 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b088      	sub	sp, #32
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	603b      	str	r3, [r7, #0]
 800b680:	1dbb      	adds	r3, r7, #6
 800b682:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b684:	231f      	movs	r3, #31
 800b686:	18fb      	adds	r3, r7, r3
 800b688:	2200      	movs	r2, #0
 800b68a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	225c      	movs	r2, #92	; 0x5c
 800b690:	5c9b      	ldrb	r3, [r3, r2]
 800b692:	2b01      	cmp	r3, #1
 800b694:	d101      	bne.n	800b69a <HAL_SPI_Transmit+0x26>
 800b696:	2302      	movs	r3, #2
 800b698:	e140      	b.n	800b91c <HAL_SPI_Transmit+0x2a8>
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	225c      	movs	r2, #92	; 0x5c
 800b69e:	2101      	movs	r1, #1
 800b6a0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b6a2:	f7fb ffd1 	bl	8007648 <HAL_GetTick>
 800b6a6:	0003      	movs	r3, r0
 800b6a8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800b6aa:	2316      	movs	r3, #22
 800b6ac:	18fb      	adds	r3, r7, r3
 800b6ae:	1dba      	adds	r2, r7, #6
 800b6b0:	8812      	ldrh	r2, [r2, #0]
 800b6b2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	225d      	movs	r2, #93	; 0x5d
 800b6b8:	5c9b      	ldrb	r3, [r3, r2]
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d004      	beq.n	800b6ca <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800b6c0:	231f      	movs	r3, #31
 800b6c2:	18fb      	adds	r3, r7, r3
 800b6c4:	2202      	movs	r2, #2
 800b6c6:	701a      	strb	r2, [r3, #0]
    goto error;
 800b6c8:	e11d      	b.n	800b906 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d003      	beq.n	800b6d8 <HAL_SPI_Transmit+0x64>
 800b6d0:	1dbb      	adds	r3, r7, #6
 800b6d2:	881b      	ldrh	r3, [r3, #0]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d104      	bne.n	800b6e2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800b6d8:	231f      	movs	r3, #31
 800b6da:	18fb      	adds	r3, r7, r3
 800b6dc:	2201      	movs	r2, #1
 800b6de:	701a      	strb	r2, [r3, #0]
    goto error;
 800b6e0:	e111      	b.n	800b906 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	225d      	movs	r2, #93	; 0x5d
 800b6e6:	2103      	movs	r1, #3
 800b6e8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	68ba      	ldr	r2, [r7, #8]
 800b6f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	1dba      	adds	r2, r7, #6
 800b6fa:	8812      	ldrh	r2, [r2, #0]
 800b6fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	1dba      	adds	r2, r7, #6
 800b702:	8812      	ldrh	r2, [r2, #0]
 800b704:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2200      	movs	r2, #0
 800b70a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2244      	movs	r2, #68	; 0x44
 800b710:	2100      	movs	r1, #0
 800b712:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2246      	movs	r2, #70	; 0x46
 800b718:	2100      	movs	r1, #0
 800b71a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2200      	movs	r2, #0
 800b720:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2200      	movs	r2, #0
 800b726:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	689a      	ldr	r2, [r3, #8]
 800b72c:	2380      	movs	r3, #128	; 0x80
 800b72e:	021b      	lsls	r3, r3, #8
 800b730:	429a      	cmp	r2, r3
 800b732:	d110      	bne.n	800b756 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	2140      	movs	r1, #64	; 0x40
 800b740:	438a      	bics	r2, r1
 800b742:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2180      	movs	r1, #128	; 0x80
 800b750:	01c9      	lsls	r1, r1, #7
 800b752:	430a      	orrs	r2, r1
 800b754:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	2240      	movs	r2, #64	; 0x40
 800b75e:	4013      	ands	r3, r2
 800b760:	2b40      	cmp	r3, #64	; 0x40
 800b762:	d007      	beq.n	800b774 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	681a      	ldr	r2, [r3, #0]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2140      	movs	r1, #64	; 0x40
 800b770:	430a      	orrs	r2, r1
 800b772:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	68da      	ldr	r2, [r3, #12]
 800b778:	23e0      	movs	r3, #224	; 0xe0
 800b77a:	00db      	lsls	r3, r3, #3
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d94e      	bls.n	800b81e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d004      	beq.n	800b792 <HAL_SPI_Transmit+0x11e>
 800b788:	2316      	movs	r3, #22
 800b78a:	18fb      	adds	r3, r7, r3
 800b78c:	881b      	ldrh	r3, [r3, #0]
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d13f      	bne.n	800b812 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b796:	881a      	ldrh	r2, [r3, #0]
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7a2:	1c9a      	adds	r2, r3, #2
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	3b01      	subs	r3, #1
 800b7b0:	b29a      	uxth	r2, r3
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b7b6:	e02c      	b.n	800b812 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	689b      	ldr	r3, [r3, #8]
 800b7be:	2202      	movs	r2, #2
 800b7c0:	4013      	ands	r3, r2
 800b7c2:	2b02      	cmp	r3, #2
 800b7c4:	d112      	bne.n	800b7ec <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ca:	881a      	ldrh	r2, [r3, #0]
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7d6:	1c9a      	adds	r2, r3, #2
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	3b01      	subs	r3, #1
 800b7e4:	b29a      	uxth	r2, r3
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b7ea:	e012      	b.n	800b812 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b7ec:	f7fb ff2c 	bl	8007648 <HAL_GetTick>
 800b7f0:	0002      	movs	r2, r0
 800b7f2:	69bb      	ldr	r3, [r7, #24]
 800b7f4:	1ad3      	subs	r3, r2, r3
 800b7f6:	683a      	ldr	r2, [r7, #0]
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d802      	bhi.n	800b802 <HAL_SPI_Transmit+0x18e>
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	3301      	adds	r3, #1
 800b800:	d102      	bne.n	800b808 <HAL_SPI_Transmit+0x194>
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d104      	bne.n	800b812 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800b808:	231f      	movs	r3, #31
 800b80a:	18fb      	adds	r3, r7, r3
 800b80c:	2203      	movs	r2, #3
 800b80e:	701a      	strb	r2, [r3, #0]
          goto error;
 800b810:	e079      	b.n	800b906 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b816:	b29b      	uxth	r3, r3
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d1cd      	bne.n	800b7b8 <HAL_SPI_Transmit+0x144>
 800b81c:	e04f      	b.n	800b8be <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d004      	beq.n	800b830 <HAL_SPI_Transmit+0x1bc>
 800b826:	2316      	movs	r3, #22
 800b828:	18fb      	adds	r3, r7, r3
 800b82a:	881b      	ldrh	r3, [r3, #0]
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d141      	bne.n	800b8b4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	330c      	adds	r3, #12
 800b83a:	7812      	ldrb	r2, [r2, #0]
 800b83c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b842:	1c5a      	adds	r2, r3, #1
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	3b01      	subs	r3, #1
 800b850:	b29a      	uxth	r2, r3
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800b856:	e02d      	b.n	800b8b4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	689b      	ldr	r3, [r3, #8]
 800b85e:	2202      	movs	r2, #2
 800b860:	4013      	ands	r3, r2
 800b862:	2b02      	cmp	r3, #2
 800b864:	d113      	bne.n	800b88e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	330c      	adds	r3, #12
 800b870:	7812      	ldrb	r2, [r2, #0]
 800b872:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b878:	1c5a      	adds	r2, r3, #1
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b882:	b29b      	uxth	r3, r3
 800b884:	3b01      	subs	r3, #1
 800b886:	b29a      	uxth	r2, r3
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b88c:	e012      	b.n	800b8b4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b88e:	f7fb fedb 	bl	8007648 <HAL_GetTick>
 800b892:	0002      	movs	r2, r0
 800b894:	69bb      	ldr	r3, [r7, #24]
 800b896:	1ad3      	subs	r3, r2, r3
 800b898:	683a      	ldr	r2, [r7, #0]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d802      	bhi.n	800b8a4 <HAL_SPI_Transmit+0x230>
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	d102      	bne.n	800b8aa <HAL_SPI_Transmit+0x236>
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d104      	bne.n	800b8b4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800b8aa:	231f      	movs	r3, #31
 800b8ac:	18fb      	adds	r3, r7, r3
 800b8ae:	2203      	movs	r2, #3
 800b8b0:	701a      	strb	r2, [r3, #0]
          goto error;
 800b8b2:	e028      	b.n	800b906 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d1cc      	bne.n	800b858 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b8be:	69ba      	ldr	r2, [r7, #24]
 800b8c0:	6839      	ldr	r1, [r7, #0]
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	0018      	movs	r0, r3
 800b8c6:	f000 fde9 	bl	800c49c <SPI_EndRxTxTransaction>
 800b8ca:	1e03      	subs	r3, r0, #0
 800b8cc:	d002      	beq.n	800b8d4 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2220      	movs	r2, #32
 800b8d2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	689b      	ldr	r3, [r3, #8]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d10a      	bne.n	800b8f2 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b8dc:	2300      	movs	r3, #0
 800b8de:	613b      	str	r3, [r7, #16]
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	68db      	ldr	r3, [r3, #12]
 800b8e6:	613b      	str	r3, [r7, #16]
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	689b      	ldr	r3, [r3, #8]
 800b8ee:	613b      	str	r3, [r7, #16]
 800b8f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d004      	beq.n	800b904 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800b8fa:	231f      	movs	r3, #31
 800b8fc:	18fb      	adds	r3, r7, r3
 800b8fe:	2201      	movs	r2, #1
 800b900:	701a      	strb	r2, [r3, #0]
 800b902:	e000      	b.n	800b906 <HAL_SPI_Transmit+0x292>
  }

error:
 800b904:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	225d      	movs	r2, #93	; 0x5d
 800b90a:	2101      	movs	r1, #1
 800b90c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	225c      	movs	r2, #92	; 0x5c
 800b912:	2100      	movs	r1, #0
 800b914:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b916:	231f      	movs	r3, #31
 800b918:	18fb      	adds	r3, r7, r3
 800b91a:	781b      	ldrb	r3, [r3, #0]
}
 800b91c:	0018      	movs	r0, r3
 800b91e:	46bd      	mov	sp, r7
 800b920:	b008      	add	sp, #32
 800b922:	bd80      	pop	{r7, pc}

0800b924 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b924:	b590      	push	{r4, r7, lr}
 800b926:	b089      	sub	sp, #36	; 0x24
 800b928:	af02      	add	r7, sp, #8
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	603b      	str	r3, [r7, #0]
 800b930:	1dbb      	adds	r3, r7, #6
 800b932:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b934:	2317      	movs	r3, #23
 800b936:	18fb      	adds	r3, r7, r3
 800b938:	2200      	movs	r2, #0
 800b93a:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	685a      	ldr	r2, [r3, #4]
 800b940:	2382      	movs	r3, #130	; 0x82
 800b942:	005b      	lsls	r3, r3, #1
 800b944:	429a      	cmp	r2, r3
 800b946:	d113      	bne.n	800b970 <HAL_SPI_Receive+0x4c>
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d10f      	bne.n	800b970 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	225d      	movs	r2, #93	; 0x5d
 800b954:	2104      	movs	r1, #4
 800b956:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b958:	1dbb      	adds	r3, r7, #6
 800b95a:	881c      	ldrh	r4, [r3, #0]
 800b95c:	68ba      	ldr	r2, [r7, #8]
 800b95e:	68b9      	ldr	r1, [r7, #8]
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	9300      	str	r3, [sp, #0]
 800b966:	0023      	movs	r3, r4
 800b968:	f000 f928 	bl	800bbbc <HAL_SPI_TransmitReceive>
 800b96c:	0003      	movs	r3, r0
 800b96e:	e11c      	b.n	800bbaa <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	225c      	movs	r2, #92	; 0x5c
 800b974:	5c9b      	ldrb	r3, [r3, r2]
 800b976:	2b01      	cmp	r3, #1
 800b978:	d101      	bne.n	800b97e <HAL_SPI_Receive+0x5a>
 800b97a:	2302      	movs	r3, #2
 800b97c:	e115      	b.n	800bbaa <HAL_SPI_Receive+0x286>
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	225c      	movs	r2, #92	; 0x5c
 800b982:	2101      	movs	r1, #1
 800b984:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b986:	f7fb fe5f 	bl	8007648 <HAL_GetTick>
 800b98a:	0003      	movs	r3, r0
 800b98c:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	225d      	movs	r2, #93	; 0x5d
 800b992:	5c9b      	ldrb	r3, [r3, r2]
 800b994:	b2db      	uxtb	r3, r3
 800b996:	2b01      	cmp	r3, #1
 800b998:	d004      	beq.n	800b9a4 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800b99a:	2317      	movs	r3, #23
 800b99c:	18fb      	adds	r3, r7, r3
 800b99e:	2202      	movs	r2, #2
 800b9a0:	701a      	strb	r2, [r3, #0]
    goto error;
 800b9a2:	e0f7      	b.n	800bb94 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d003      	beq.n	800b9b2 <HAL_SPI_Receive+0x8e>
 800b9aa:	1dbb      	adds	r3, r7, #6
 800b9ac:	881b      	ldrh	r3, [r3, #0]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d104      	bne.n	800b9bc <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800b9b2:	2317      	movs	r3, #23
 800b9b4:	18fb      	adds	r3, r7, r3
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	701a      	strb	r2, [r3, #0]
    goto error;
 800b9ba:	e0eb      	b.n	800bb94 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	225d      	movs	r2, #93	; 0x5d
 800b9c0:	2104      	movs	r1, #4
 800b9c2:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	1dba      	adds	r2, r7, #6
 800b9d4:	2144      	movs	r1, #68	; 0x44
 800b9d6:	8812      	ldrh	r2, [r2, #0]
 800b9d8:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	1dba      	adds	r2, r7, #6
 800b9de:	2146      	movs	r1, #70	; 0x46
 800b9e0:	8812      	ldrh	r2, [r2, #0]
 800b9e2:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	68da      	ldr	r2, [r3, #12]
 800ba06:	23e0      	movs	r3, #224	; 0xe0
 800ba08:	00db      	lsls	r3, r3, #3
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d908      	bls.n	800ba20 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	685a      	ldr	r2, [r3, #4]
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4966      	ldr	r1, [pc, #408]	; (800bbb4 <HAL_SPI_Receive+0x290>)
 800ba1a:	400a      	ands	r2, r1
 800ba1c:	605a      	str	r2, [r3, #4]
 800ba1e:	e008      	b.n	800ba32 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	685a      	ldr	r2, [r3, #4]
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2180      	movs	r1, #128	; 0x80
 800ba2c:	0149      	lsls	r1, r1, #5
 800ba2e:	430a      	orrs	r2, r1
 800ba30:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	689a      	ldr	r2, [r3, #8]
 800ba36:	2380      	movs	r3, #128	; 0x80
 800ba38:	021b      	lsls	r3, r3, #8
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d10f      	bne.n	800ba5e <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	681a      	ldr	r2, [r3, #0]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	2140      	movs	r1, #64	; 0x40
 800ba4a:	438a      	bics	r2, r1
 800ba4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	681a      	ldr	r2, [r3, #0]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4957      	ldr	r1, [pc, #348]	; (800bbb8 <HAL_SPI_Receive+0x294>)
 800ba5a:	400a      	ands	r2, r1
 800ba5c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	2240      	movs	r2, #64	; 0x40
 800ba66:	4013      	ands	r3, r2
 800ba68:	2b40      	cmp	r3, #64	; 0x40
 800ba6a:	d007      	beq.n	800ba7c <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	2140      	movs	r1, #64	; 0x40
 800ba78:	430a      	orrs	r2, r1
 800ba7a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	68da      	ldr	r2, [r3, #12]
 800ba80:	23e0      	movs	r3, #224	; 0xe0
 800ba82:	00db      	lsls	r3, r3, #3
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d900      	bls.n	800ba8a <HAL_SPI_Receive+0x166>
 800ba88:	e069      	b.n	800bb5e <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800ba8a:	e031      	b.n	800baf0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	2201      	movs	r2, #1
 800ba94:	4013      	ands	r3, r2
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d117      	bne.n	800baca <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	330c      	adds	r3, #12
 800baa0:	001a      	movs	r2, r3
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baa6:	7812      	ldrb	r2, [r2, #0]
 800baa8:	b2d2      	uxtb	r2, r2
 800baaa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bab0:	1c5a      	adds	r2, r3, #1
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2246      	movs	r2, #70	; 0x46
 800baba:	5a9b      	ldrh	r3, [r3, r2]
 800babc:	b29b      	uxth	r3, r3
 800babe:	3b01      	subs	r3, #1
 800bac0:	b299      	uxth	r1, r3
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2246      	movs	r2, #70	; 0x46
 800bac6:	5299      	strh	r1, [r3, r2]
 800bac8:	e012      	b.n	800baf0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800baca:	f7fb fdbd 	bl	8007648 <HAL_GetTick>
 800bace:	0002      	movs	r2, r0
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	1ad3      	subs	r3, r2, r3
 800bad4:	683a      	ldr	r2, [r7, #0]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d802      	bhi.n	800bae0 <HAL_SPI_Receive+0x1bc>
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	3301      	adds	r3, #1
 800bade:	d102      	bne.n	800bae6 <HAL_SPI_Receive+0x1c2>
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d104      	bne.n	800baf0 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800bae6:	2317      	movs	r3, #23
 800bae8:	18fb      	adds	r3, r7, r3
 800baea:	2203      	movs	r2, #3
 800baec:	701a      	strb	r2, [r3, #0]
          goto error;
 800baee:	e051      	b.n	800bb94 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2246      	movs	r2, #70	; 0x46
 800baf4:	5a9b      	ldrh	r3, [r3, r2]
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d1c7      	bne.n	800ba8c <HAL_SPI_Receive+0x168>
 800bafc:	e035      	b.n	800bb6a <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	2201      	movs	r2, #1
 800bb06:	4013      	ands	r3, r2
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d115      	bne.n	800bb38 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	68da      	ldr	r2, [r3, #12]
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb16:	b292      	uxth	r2, r2
 800bb18:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb1e:	1c9a      	adds	r2, r3, #2
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2246      	movs	r2, #70	; 0x46
 800bb28:	5a9b      	ldrh	r3, [r3, r2]
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	3b01      	subs	r3, #1
 800bb2e:	b299      	uxth	r1, r3
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2246      	movs	r2, #70	; 0x46
 800bb34:	5299      	strh	r1, [r3, r2]
 800bb36:	e012      	b.n	800bb5e <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb38:	f7fb fd86 	bl	8007648 <HAL_GetTick>
 800bb3c:	0002      	movs	r2, r0
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	1ad3      	subs	r3, r2, r3
 800bb42:	683a      	ldr	r2, [r7, #0]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d802      	bhi.n	800bb4e <HAL_SPI_Receive+0x22a>
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	d102      	bne.n	800bb54 <HAL_SPI_Receive+0x230>
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d104      	bne.n	800bb5e <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800bb54:	2317      	movs	r3, #23
 800bb56:	18fb      	adds	r3, r7, r3
 800bb58:	2203      	movs	r2, #3
 800bb5a:	701a      	strb	r2, [r3, #0]
          goto error;
 800bb5c:	e01a      	b.n	800bb94 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2246      	movs	r2, #70	; 0x46
 800bb62:	5a9b      	ldrh	r3, [r3, r2]
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d1c9      	bne.n	800bafe <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bb6a:	693a      	ldr	r2, [r7, #16]
 800bb6c:	6839      	ldr	r1, [r7, #0]
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	0018      	movs	r0, r3
 800bb72:	f000 fc35 	bl	800c3e0 <SPI_EndRxTransaction>
 800bb76:	1e03      	subs	r3, r0, #0
 800bb78:	d002      	beq.n	800bb80 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2220      	movs	r2, #32
 800bb7e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d004      	beq.n	800bb92 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800bb88:	2317      	movs	r3, #23
 800bb8a:	18fb      	adds	r3, r7, r3
 800bb8c:	2201      	movs	r2, #1
 800bb8e:	701a      	strb	r2, [r3, #0]
 800bb90:	e000      	b.n	800bb94 <HAL_SPI_Receive+0x270>
  }

error :
 800bb92:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	225d      	movs	r2, #93	; 0x5d
 800bb98:	2101      	movs	r1, #1
 800bb9a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	225c      	movs	r2, #92	; 0x5c
 800bba0:	2100      	movs	r1, #0
 800bba2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800bba4:	2317      	movs	r3, #23
 800bba6:	18fb      	adds	r3, r7, r3
 800bba8:	781b      	ldrb	r3, [r3, #0]
}
 800bbaa:	0018      	movs	r0, r3
 800bbac:	46bd      	mov	sp, r7
 800bbae:	b007      	add	sp, #28
 800bbb0:	bd90      	pop	{r4, r7, pc}
 800bbb2:	46c0      	nop			; (mov r8, r8)
 800bbb4:	ffffefff 	.word	0xffffefff
 800bbb8:	ffffbfff 	.word	0xffffbfff

0800bbbc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b08a      	sub	sp, #40	; 0x28
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	60f8      	str	r0, [r7, #12]
 800bbc4:	60b9      	str	r1, [r7, #8]
 800bbc6:	607a      	str	r2, [r7, #4]
 800bbc8:	001a      	movs	r2, r3
 800bbca:	1cbb      	adds	r3, r7, #2
 800bbcc:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bbce:	2301      	movs	r3, #1
 800bbd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bbd2:	2323      	movs	r3, #35	; 0x23
 800bbd4:	18fb      	adds	r3, r7, r3
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	225c      	movs	r2, #92	; 0x5c
 800bbde:	5c9b      	ldrb	r3, [r3, r2]
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d101      	bne.n	800bbe8 <HAL_SPI_TransmitReceive+0x2c>
 800bbe4:	2302      	movs	r3, #2
 800bbe6:	e1b5      	b.n	800bf54 <HAL_SPI_TransmitReceive+0x398>
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	225c      	movs	r2, #92	; 0x5c
 800bbec:	2101      	movs	r1, #1
 800bbee:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bbf0:	f7fb fd2a 	bl	8007648 <HAL_GetTick>
 800bbf4:	0003      	movs	r3, r0
 800bbf6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bbf8:	201b      	movs	r0, #27
 800bbfa:	183b      	adds	r3, r7, r0
 800bbfc:	68fa      	ldr	r2, [r7, #12]
 800bbfe:	215d      	movs	r1, #93	; 0x5d
 800bc00:	5c52      	ldrb	r2, [r2, r1]
 800bc02:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800bc0a:	2312      	movs	r3, #18
 800bc0c:	18fb      	adds	r3, r7, r3
 800bc0e:	1cba      	adds	r2, r7, #2
 800bc10:	8812      	ldrh	r2, [r2, #0]
 800bc12:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bc14:	183b      	adds	r3, r7, r0
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d011      	beq.n	800bc40 <HAL_SPI_TransmitReceive+0x84>
 800bc1c:	697a      	ldr	r2, [r7, #20]
 800bc1e:	2382      	movs	r3, #130	; 0x82
 800bc20:	005b      	lsls	r3, r3, #1
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d107      	bne.n	800bc36 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	689b      	ldr	r3, [r3, #8]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d103      	bne.n	800bc36 <HAL_SPI_TransmitReceive+0x7a>
 800bc2e:	183b      	adds	r3, r7, r0
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	2b04      	cmp	r3, #4
 800bc34:	d004      	beq.n	800bc40 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800bc36:	2323      	movs	r3, #35	; 0x23
 800bc38:	18fb      	adds	r3, r7, r3
 800bc3a:	2202      	movs	r2, #2
 800bc3c:	701a      	strb	r2, [r3, #0]
    goto error;
 800bc3e:	e17e      	b.n	800bf3e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d006      	beq.n	800bc54 <HAL_SPI_TransmitReceive+0x98>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d003      	beq.n	800bc54 <HAL_SPI_TransmitReceive+0x98>
 800bc4c:	1cbb      	adds	r3, r7, #2
 800bc4e:	881b      	ldrh	r3, [r3, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d104      	bne.n	800bc5e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800bc54:	2323      	movs	r3, #35	; 0x23
 800bc56:	18fb      	adds	r3, r7, r3
 800bc58:	2201      	movs	r2, #1
 800bc5a:	701a      	strb	r2, [r3, #0]
    goto error;
 800bc5c:	e16f      	b.n	800bf3e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	225d      	movs	r2, #93	; 0x5d
 800bc62:	5c9b      	ldrb	r3, [r3, r2]
 800bc64:	b2db      	uxtb	r3, r3
 800bc66:	2b04      	cmp	r3, #4
 800bc68:	d003      	beq.n	800bc72 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	225d      	movs	r2, #93	; 0x5d
 800bc6e:	2105      	movs	r1, #5
 800bc70:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2200      	movs	r2, #0
 800bc76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	687a      	ldr	r2, [r7, #4]
 800bc7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	1cba      	adds	r2, r7, #2
 800bc82:	2146      	movs	r1, #70	; 0x46
 800bc84:	8812      	ldrh	r2, [r2, #0]
 800bc86:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	1cba      	adds	r2, r7, #2
 800bc8c:	2144      	movs	r1, #68	; 0x44
 800bc8e:	8812      	ldrh	r2, [r2, #0]
 800bc90:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	68ba      	ldr	r2, [r7, #8]
 800bc96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	1cba      	adds	r2, r7, #2
 800bc9c:	8812      	ldrh	r2, [r2, #0]
 800bc9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	1cba      	adds	r2, r7, #2
 800bca4:	8812      	ldrh	r2, [r2, #0]
 800bca6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	68da      	ldr	r2, [r3, #12]
 800bcb8:	23e0      	movs	r3, #224	; 0xe0
 800bcba:	00db      	lsls	r3, r3, #3
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d908      	bls.n	800bcd2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	685a      	ldr	r2, [r3, #4]
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	49a4      	ldr	r1, [pc, #656]	; (800bf5c <HAL_SPI_TransmitReceive+0x3a0>)
 800bccc:	400a      	ands	r2, r1
 800bcce:	605a      	str	r2, [r3, #4]
 800bcd0:	e008      	b.n	800bce4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	685a      	ldr	r2, [r3, #4]
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	2180      	movs	r1, #128	; 0x80
 800bcde:	0149      	lsls	r1, r1, #5
 800bce0:	430a      	orrs	r2, r1
 800bce2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2240      	movs	r2, #64	; 0x40
 800bcec:	4013      	ands	r3, r2
 800bcee:	2b40      	cmp	r3, #64	; 0x40
 800bcf0:	d007      	beq.n	800bd02 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	681a      	ldr	r2, [r3, #0]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	2140      	movs	r1, #64	; 0x40
 800bcfe:	430a      	orrs	r2, r1
 800bd00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	68da      	ldr	r2, [r3, #12]
 800bd06:	23e0      	movs	r3, #224	; 0xe0
 800bd08:	00db      	lsls	r3, r3, #3
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d800      	bhi.n	800bd10 <HAL_SPI_TransmitReceive+0x154>
 800bd0e:	e07f      	b.n	800be10 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d005      	beq.n	800bd24 <HAL_SPI_TransmitReceive+0x168>
 800bd18:	2312      	movs	r3, #18
 800bd1a:	18fb      	adds	r3, r7, r3
 800bd1c:	881b      	ldrh	r3, [r3, #0]
 800bd1e:	2b01      	cmp	r3, #1
 800bd20:	d000      	beq.n	800bd24 <HAL_SPI_TransmitReceive+0x168>
 800bd22:	e069      	b.n	800bdf8 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd28:	881a      	ldrh	r2, [r3, #0]
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd34:	1c9a      	adds	r2, r3, #2
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd3e:	b29b      	uxth	r3, r3
 800bd40:	3b01      	subs	r3, #1
 800bd42:	b29a      	uxth	r2, r3
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bd48:	e056      	b.n	800bdf8 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	689b      	ldr	r3, [r3, #8]
 800bd50:	2202      	movs	r2, #2
 800bd52:	4013      	ands	r3, r2
 800bd54:	2b02      	cmp	r3, #2
 800bd56:	d11b      	bne.n	800bd90 <HAL_SPI_TransmitReceive+0x1d4>
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d016      	beq.n	800bd90 <HAL_SPI_TransmitReceive+0x1d4>
 800bd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	d113      	bne.n	800bd90 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd6c:	881a      	ldrh	r2, [r3, #0]
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd78:	1c9a      	adds	r2, r3, #2
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd82:	b29b      	uxth	r3, r3
 800bd84:	3b01      	subs	r3, #1
 800bd86:	b29a      	uxth	r2, r3
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	2201      	movs	r2, #1
 800bd98:	4013      	ands	r3, r2
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	d11c      	bne.n	800bdd8 <HAL_SPI_TransmitReceive+0x21c>
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2246      	movs	r2, #70	; 0x46
 800bda2:	5a9b      	ldrh	r3, [r3, r2]
 800bda4:	b29b      	uxth	r3, r3
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d016      	beq.n	800bdd8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	68da      	ldr	r2, [r3, #12]
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdb4:	b292      	uxth	r2, r2
 800bdb6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdbc:	1c9a      	adds	r2, r3, #2
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	2246      	movs	r2, #70	; 0x46
 800bdc6:	5a9b      	ldrh	r3, [r3, r2]
 800bdc8:	b29b      	uxth	r3, r3
 800bdca:	3b01      	subs	r3, #1
 800bdcc:	b299      	uxth	r1, r3
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2246      	movs	r2, #70	; 0x46
 800bdd2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bdd8:	f7fb fc36 	bl	8007648 <HAL_GetTick>
 800bddc:	0002      	movs	r2, r0
 800bdde:	69fb      	ldr	r3, [r7, #28]
 800bde0:	1ad3      	subs	r3, r2, r3
 800bde2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d807      	bhi.n	800bdf8 <HAL_SPI_TransmitReceive+0x23c>
 800bde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdea:	3301      	adds	r3, #1
 800bdec:	d004      	beq.n	800bdf8 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800bdee:	2323      	movs	r3, #35	; 0x23
 800bdf0:	18fb      	adds	r3, r7, r3
 800bdf2:	2203      	movs	r2, #3
 800bdf4:	701a      	strb	r2, [r3, #0]
        goto error;
 800bdf6:	e0a2      	b.n	800bf3e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bdfc:	b29b      	uxth	r3, r3
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d1a3      	bne.n	800bd4a <HAL_SPI_TransmitReceive+0x18e>
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2246      	movs	r2, #70	; 0x46
 800be06:	5a9b      	ldrh	r3, [r3, r2]
 800be08:	b29b      	uxth	r3, r3
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d19d      	bne.n	800bd4a <HAL_SPI_TransmitReceive+0x18e>
 800be0e:	e085      	b.n	800bf1c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	685b      	ldr	r3, [r3, #4]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d005      	beq.n	800be24 <HAL_SPI_TransmitReceive+0x268>
 800be18:	2312      	movs	r3, #18
 800be1a:	18fb      	adds	r3, r7, r3
 800be1c:	881b      	ldrh	r3, [r3, #0]
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d000      	beq.n	800be24 <HAL_SPI_TransmitReceive+0x268>
 800be22:	e070      	b.n	800bf06 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	330c      	adds	r3, #12
 800be2e:	7812      	ldrb	r2, [r2, #0]
 800be30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be36:	1c5a      	adds	r2, r3, #1
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be40:	b29b      	uxth	r3, r3
 800be42:	3b01      	subs	r3, #1
 800be44:	b29a      	uxth	r2, r3
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800be4a:	e05c      	b.n	800bf06 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	2202      	movs	r2, #2
 800be54:	4013      	ands	r3, r2
 800be56:	2b02      	cmp	r3, #2
 800be58:	d11c      	bne.n	800be94 <HAL_SPI_TransmitReceive+0x2d8>
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be5e:	b29b      	uxth	r3, r3
 800be60:	2b00      	cmp	r3, #0
 800be62:	d017      	beq.n	800be94 <HAL_SPI_TransmitReceive+0x2d8>
 800be64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be66:	2b01      	cmp	r3, #1
 800be68:	d114      	bne.n	800be94 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	330c      	adds	r3, #12
 800be74:	7812      	ldrb	r2, [r2, #0]
 800be76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be7c:	1c5a      	adds	r2, r3, #1
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be86:	b29b      	uxth	r3, r3
 800be88:	3b01      	subs	r3, #1
 800be8a:	b29a      	uxth	r2, r3
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800be90:	2300      	movs	r3, #0
 800be92:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	689b      	ldr	r3, [r3, #8]
 800be9a:	2201      	movs	r2, #1
 800be9c:	4013      	ands	r3, r2
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d11e      	bne.n	800bee0 <HAL_SPI_TransmitReceive+0x324>
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2246      	movs	r2, #70	; 0x46
 800bea6:	5a9b      	ldrh	r3, [r3, r2]
 800bea8:	b29b      	uxth	r3, r3
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d018      	beq.n	800bee0 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	330c      	adds	r3, #12
 800beb4:	001a      	movs	r2, r3
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beba:	7812      	ldrb	r2, [r2, #0]
 800bebc:	b2d2      	uxtb	r2, r2
 800bebe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bec4:	1c5a      	adds	r2, r3, #1
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2246      	movs	r2, #70	; 0x46
 800bece:	5a9b      	ldrh	r3, [r3, r2]
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	3b01      	subs	r3, #1
 800bed4:	b299      	uxth	r1, r3
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2246      	movs	r2, #70	; 0x46
 800beda:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bedc:	2301      	movs	r3, #1
 800bede:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bee0:	f7fb fbb2 	bl	8007648 <HAL_GetTick>
 800bee4:	0002      	movs	r2, r0
 800bee6:	69fb      	ldr	r3, [r7, #28]
 800bee8:	1ad3      	subs	r3, r2, r3
 800beea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800beec:	429a      	cmp	r2, r3
 800beee:	d802      	bhi.n	800bef6 <HAL_SPI_TransmitReceive+0x33a>
 800bef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef2:	3301      	adds	r3, #1
 800bef4:	d102      	bne.n	800befc <HAL_SPI_TransmitReceive+0x340>
 800bef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d104      	bne.n	800bf06 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800befc:	2323      	movs	r3, #35	; 0x23
 800befe:	18fb      	adds	r3, r7, r3
 800bf00:	2203      	movs	r2, #3
 800bf02:	701a      	strb	r2, [r3, #0]
        goto error;
 800bf04:	e01b      	b.n	800bf3e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf0a:	b29b      	uxth	r3, r3
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d19d      	bne.n	800be4c <HAL_SPI_TransmitReceive+0x290>
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2246      	movs	r2, #70	; 0x46
 800bf14:	5a9b      	ldrh	r3, [r3, r2]
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d197      	bne.n	800be4c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bf1c:	69fa      	ldr	r2, [r7, #28]
 800bf1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	0018      	movs	r0, r3
 800bf24:	f000 faba 	bl	800c49c <SPI_EndRxTxTransaction>
 800bf28:	1e03      	subs	r3, r0, #0
 800bf2a:	d007      	beq.n	800bf3c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800bf2c:	2323      	movs	r3, #35	; 0x23
 800bf2e:	18fb      	adds	r3, r7, r3
 800bf30:	2201      	movs	r2, #1
 800bf32:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2220      	movs	r2, #32
 800bf38:	661a      	str	r2, [r3, #96]	; 0x60
 800bf3a:	e000      	b.n	800bf3e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800bf3c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	225d      	movs	r2, #93	; 0x5d
 800bf42:	2101      	movs	r1, #1
 800bf44:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	225c      	movs	r2, #92	; 0x5c
 800bf4a:	2100      	movs	r1, #0
 800bf4c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800bf4e:	2323      	movs	r3, #35	; 0x23
 800bf50:	18fb      	adds	r3, r7, r3
 800bf52:	781b      	ldrb	r3, [r3, #0]
}
 800bf54:	0018      	movs	r0, r3
 800bf56:	46bd      	mov	sp, r7
 800bf58:	b00a      	add	sp, #40	; 0x28
 800bf5a:	bd80      	pop	{r7, pc}
 800bf5c:	ffffefff 	.word	0xffffefff

0800bf60 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b088      	sub	sp, #32
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	689b      	ldr	r3, [r3, #8]
 800bf76:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bf78:	69bb      	ldr	r3, [r7, #24]
 800bf7a:	099b      	lsrs	r3, r3, #6
 800bf7c:	001a      	movs	r2, r3
 800bf7e:	2301      	movs	r3, #1
 800bf80:	4013      	ands	r3, r2
 800bf82:	d10f      	bne.n	800bfa4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	2201      	movs	r2, #1
 800bf88:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bf8a:	d00b      	beq.n	800bfa4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	099b      	lsrs	r3, r3, #6
 800bf90:	001a      	movs	r2, r3
 800bf92:	2301      	movs	r3, #1
 800bf94:	4013      	ands	r3, r2
 800bf96:	d005      	beq.n	800bfa4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	0010      	movs	r0, r2
 800bfa0:	4798      	blx	r3
    return;
 800bfa2:	e0d5      	b.n	800c150 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800bfa4:	69bb      	ldr	r3, [r7, #24]
 800bfa6:	085b      	lsrs	r3, r3, #1
 800bfa8:	001a      	movs	r2, r3
 800bfaa:	2301      	movs	r3, #1
 800bfac:	4013      	ands	r3, r2
 800bfae:	d00b      	beq.n	800bfc8 <HAL_SPI_IRQHandler+0x68>
 800bfb0:	69fb      	ldr	r3, [r7, #28]
 800bfb2:	09db      	lsrs	r3, r3, #7
 800bfb4:	001a      	movs	r2, r3
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	4013      	ands	r3, r2
 800bfba:	d005      	beq.n	800bfc8 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfc0:	687a      	ldr	r2, [r7, #4]
 800bfc2:	0010      	movs	r0, r2
 800bfc4:	4798      	blx	r3
    return;
 800bfc6:	e0c3      	b.n	800c150 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	095b      	lsrs	r3, r3, #5
 800bfcc:	001a      	movs	r2, r3
 800bfce:	2301      	movs	r3, #1
 800bfd0:	4013      	ands	r3, r2
 800bfd2:	d10c      	bne.n	800bfee <HAL_SPI_IRQHandler+0x8e>
 800bfd4:	69bb      	ldr	r3, [r7, #24]
 800bfd6:	099b      	lsrs	r3, r3, #6
 800bfd8:	001a      	movs	r2, r3
 800bfda:	2301      	movs	r3, #1
 800bfdc:	4013      	ands	r3, r2
 800bfde:	d106      	bne.n	800bfee <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800bfe0:	69bb      	ldr	r3, [r7, #24]
 800bfe2:	0a1b      	lsrs	r3, r3, #8
 800bfe4:	001a      	movs	r2, r3
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	4013      	ands	r3, r2
 800bfea:	d100      	bne.n	800bfee <HAL_SPI_IRQHandler+0x8e>
 800bfec:	e0b0      	b.n	800c150 <HAL_SPI_IRQHandler+0x1f0>
 800bfee:	69fb      	ldr	r3, [r7, #28]
 800bff0:	095b      	lsrs	r3, r3, #5
 800bff2:	001a      	movs	r2, r3
 800bff4:	2301      	movs	r3, #1
 800bff6:	4013      	ands	r3, r2
 800bff8:	d100      	bne.n	800bffc <HAL_SPI_IRQHandler+0x9c>
 800bffa:	e0a9      	b.n	800c150 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bffc:	69bb      	ldr	r3, [r7, #24]
 800bffe:	099b      	lsrs	r3, r3, #6
 800c000:	001a      	movs	r2, r3
 800c002:	2301      	movs	r3, #1
 800c004:	4013      	ands	r3, r2
 800c006:	d023      	beq.n	800c050 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	225d      	movs	r2, #93	; 0x5d
 800c00c:	5c9b      	ldrb	r3, [r3, r2]
 800c00e:	b2db      	uxtb	r3, r3
 800c010:	2b03      	cmp	r3, #3
 800c012:	d011      	beq.n	800c038 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c018:	2204      	movs	r2, #4
 800c01a:	431a      	orrs	r2, r3
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c020:	2300      	movs	r3, #0
 800c022:	617b      	str	r3, [r7, #20]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	68db      	ldr	r3, [r3, #12]
 800c02a:	617b      	str	r3, [r7, #20]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	689b      	ldr	r3, [r3, #8]
 800c032:	617b      	str	r3, [r7, #20]
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	e00b      	b.n	800c050 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c038:	2300      	movs	r3, #0
 800c03a:	613b      	str	r3, [r7, #16]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	68db      	ldr	r3, [r3, #12]
 800c042:	613b      	str	r3, [r7, #16]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	689b      	ldr	r3, [r3, #8]
 800c04a:	613b      	str	r3, [r7, #16]
 800c04c:	693b      	ldr	r3, [r7, #16]
        return;
 800c04e:	e07f      	b.n	800c150 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c050:	69bb      	ldr	r3, [r7, #24]
 800c052:	095b      	lsrs	r3, r3, #5
 800c054:	001a      	movs	r2, r3
 800c056:	2301      	movs	r3, #1
 800c058:	4013      	ands	r3, r2
 800c05a:	d014      	beq.n	800c086 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c060:	2201      	movs	r2, #1
 800c062:	431a      	orrs	r2, r3
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c068:	2300      	movs	r3, #0
 800c06a:	60fb      	str	r3, [r7, #12]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	689b      	ldr	r3, [r3, #8]
 800c072:	60fb      	str	r3, [r7, #12]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	681a      	ldr	r2, [r3, #0]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	2140      	movs	r1, #64	; 0x40
 800c080:	438a      	bics	r2, r1
 800c082:	601a      	str	r2, [r3, #0]
 800c084:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c086:	69bb      	ldr	r3, [r7, #24]
 800c088:	0a1b      	lsrs	r3, r3, #8
 800c08a:	001a      	movs	r2, r3
 800c08c:	2301      	movs	r3, #1
 800c08e:	4013      	ands	r3, r2
 800c090:	d00c      	beq.n	800c0ac <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c096:	2208      	movs	r2, #8
 800c098:	431a      	orrs	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c09e:	2300      	movs	r3, #0
 800c0a0:	60bb      	str	r3, [r7, #8]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	689b      	ldr	r3, [r3, #8]
 800c0a8:	60bb      	str	r3, [r7, #8]
 800c0aa:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d04c      	beq.n	800c14e <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	685a      	ldr	r2, [r3, #4]
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	21e0      	movs	r1, #224	; 0xe0
 800c0c0:	438a      	bics	r2, r1
 800c0c2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	225d      	movs	r2, #93	; 0x5d
 800c0c8:	2101      	movs	r1, #1
 800c0ca:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c0cc:	69fb      	ldr	r3, [r7, #28]
 800c0ce:	2202      	movs	r2, #2
 800c0d0:	4013      	ands	r3, r2
 800c0d2:	d103      	bne.n	800c0dc <HAL_SPI_IRQHandler+0x17c>
 800c0d4:	69fb      	ldr	r3, [r7, #28]
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	4013      	ands	r3, r2
 800c0da:	d032      	beq.n	800c142 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	685a      	ldr	r2, [r3, #4]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	2103      	movs	r1, #3
 800c0e8:	438a      	bics	r2, r1
 800c0ea:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d010      	beq.n	800c116 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0f8:	4a17      	ldr	r2, [pc, #92]	; (800c158 <HAL_SPI_IRQHandler+0x1f8>)
 800c0fa:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c100:	0018      	movs	r0, r3
 800c102:	f7fb ff33 	bl	8007f6c <HAL_DMA_Abort_IT>
 800c106:	1e03      	subs	r3, r0, #0
 800c108:	d005      	beq.n	800c116 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c10e:	2240      	movs	r2, #64	; 0x40
 800c110:	431a      	orrs	r2, r3
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d016      	beq.n	800c14c <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c122:	4a0d      	ldr	r2, [pc, #52]	; (800c158 <HAL_SPI_IRQHandler+0x1f8>)
 800c124:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c12a:	0018      	movs	r0, r3
 800c12c:	f7fb ff1e 	bl	8007f6c <HAL_DMA_Abort_IT>
 800c130:	1e03      	subs	r3, r0, #0
 800c132:	d00b      	beq.n	800c14c <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c138:	2240      	movs	r2, #64	; 0x40
 800c13a:	431a      	orrs	r2, r3
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800c140:	e004      	b.n	800c14c <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	0018      	movs	r0, r3
 800c146:	f000 f809 	bl	800c15c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c14a:	e000      	b.n	800c14e <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 800c14c:	46c0      	nop			; (mov r8, r8)
    return;
 800c14e:	46c0      	nop			; (mov r8, r8)
  }
}
 800c150:	46bd      	mov	sp, r7
 800c152:	b008      	add	sp, #32
 800c154:	bd80      	pop	{r7, pc}
 800c156:	46c0      	nop			; (mov r8, r8)
 800c158:	0800c16d 	.word	0x0800c16d

0800c15c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c164:	46c0      	nop			; (mov r8, r8)
 800c166:	46bd      	mov	sp, r7
 800c168:	b002      	add	sp, #8
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c178:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2246      	movs	r2, #70	; 0x46
 800c17e:	2100      	movs	r1, #0
 800c180:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2200      	movs	r2, #0
 800c186:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	0018      	movs	r0, r3
 800c18c:	f7ff ffe6 	bl	800c15c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c190:	46c0      	nop			; (mov r8, r8)
 800c192:	46bd      	mov	sp, r7
 800c194:	b004      	add	sp, #16
 800c196:	bd80      	pop	{r7, pc}

0800c198 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b088      	sub	sp, #32
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	60f8      	str	r0, [r7, #12]
 800c1a0:	60b9      	str	r1, [r7, #8]
 800c1a2:	603b      	str	r3, [r7, #0]
 800c1a4:	1dfb      	adds	r3, r7, #7
 800c1a6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c1a8:	f7fb fa4e 	bl	8007648 <HAL_GetTick>
 800c1ac:	0002      	movs	r2, r0
 800c1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b0:	1a9b      	subs	r3, r3, r2
 800c1b2:	683a      	ldr	r2, [r7, #0]
 800c1b4:	18d3      	adds	r3, r2, r3
 800c1b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c1b8:	f7fb fa46 	bl	8007648 <HAL_GetTick>
 800c1bc:	0003      	movs	r3, r0
 800c1be:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c1c0:	4b3a      	ldr	r3, [pc, #232]	; (800c2ac <SPI_WaitFlagStateUntilTimeout+0x114>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	015b      	lsls	r3, r3, #5
 800c1c6:	0d1b      	lsrs	r3, r3, #20
 800c1c8:	69fa      	ldr	r2, [r7, #28]
 800c1ca:	4353      	muls	r3, r2
 800c1cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c1ce:	e058      	b.n	800c282 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	d055      	beq.n	800c282 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c1d6:	f7fb fa37 	bl	8007648 <HAL_GetTick>
 800c1da:	0002      	movs	r2, r0
 800c1dc:	69bb      	ldr	r3, [r7, #24]
 800c1de:	1ad3      	subs	r3, r2, r3
 800c1e0:	69fa      	ldr	r2, [r7, #28]
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d902      	bls.n	800c1ec <SPI_WaitFlagStateUntilTimeout+0x54>
 800c1e6:	69fb      	ldr	r3, [r7, #28]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d142      	bne.n	800c272 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	685a      	ldr	r2, [r3, #4]
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	21e0      	movs	r1, #224	; 0xe0
 800c1f8:	438a      	bics	r2, r1
 800c1fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	685a      	ldr	r2, [r3, #4]
 800c200:	2382      	movs	r3, #130	; 0x82
 800c202:	005b      	lsls	r3, r3, #1
 800c204:	429a      	cmp	r2, r3
 800c206:	d113      	bne.n	800c230 <SPI_WaitFlagStateUntilTimeout+0x98>
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	689a      	ldr	r2, [r3, #8]
 800c20c:	2380      	movs	r3, #128	; 0x80
 800c20e:	021b      	lsls	r3, r3, #8
 800c210:	429a      	cmp	r2, r3
 800c212:	d005      	beq.n	800c220 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	689a      	ldr	r2, [r3, #8]
 800c218:	2380      	movs	r3, #128	; 0x80
 800c21a:	00db      	lsls	r3, r3, #3
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d107      	bne.n	800c230 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	681a      	ldr	r2, [r3, #0]
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2140      	movs	r1, #64	; 0x40
 800c22c:	438a      	bics	r2, r1
 800c22e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c234:	2380      	movs	r3, #128	; 0x80
 800c236:	019b      	lsls	r3, r3, #6
 800c238:	429a      	cmp	r2, r3
 800c23a:	d110      	bne.n	800c25e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	681a      	ldr	r2, [r3, #0]
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	491a      	ldr	r1, [pc, #104]	; (800c2b0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800c248:	400a      	ands	r2, r1
 800c24a:	601a      	str	r2, [r3, #0]
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	681a      	ldr	r2, [r3, #0]
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	2180      	movs	r1, #128	; 0x80
 800c258:	0189      	lsls	r1, r1, #6
 800c25a:	430a      	orrs	r2, r1
 800c25c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	225d      	movs	r2, #93	; 0x5d
 800c262:	2101      	movs	r1, #1
 800c264:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	225c      	movs	r2, #92	; 0x5c
 800c26a:	2100      	movs	r1, #0
 800c26c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c26e:	2303      	movs	r3, #3
 800c270:	e017      	b.n	800c2a2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d101      	bne.n	800c27c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800c278:	2300      	movs	r3, #0
 800c27a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	3b01      	subs	r3, #1
 800c280:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	689b      	ldr	r3, [r3, #8]
 800c288:	68ba      	ldr	r2, [r7, #8]
 800c28a:	4013      	ands	r3, r2
 800c28c:	68ba      	ldr	r2, [r7, #8]
 800c28e:	1ad3      	subs	r3, r2, r3
 800c290:	425a      	negs	r2, r3
 800c292:	4153      	adcs	r3, r2
 800c294:	b2db      	uxtb	r3, r3
 800c296:	001a      	movs	r2, r3
 800c298:	1dfb      	adds	r3, r7, #7
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d197      	bne.n	800c1d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c2a0:	2300      	movs	r3, #0
}
 800c2a2:	0018      	movs	r0, r3
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	b008      	add	sp, #32
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	46c0      	nop			; (mov r8, r8)
 800c2ac:	20000038 	.word	0x20000038
 800c2b0:	ffffdfff 	.word	0xffffdfff

0800c2b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b088      	sub	sp, #32
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	607a      	str	r2, [r7, #4]
 800c2c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c2c2:	f7fb f9c1 	bl	8007648 <HAL_GetTick>
 800c2c6:	0002      	movs	r2, r0
 800c2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ca:	1a9b      	subs	r3, r3, r2
 800c2cc:	683a      	ldr	r2, [r7, #0]
 800c2ce:	18d3      	adds	r3, r2, r3
 800c2d0:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c2d2:	f7fb f9b9 	bl	8007648 <HAL_GetTick>
 800c2d6:	0003      	movs	r3, r0
 800c2d8:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c2da:	4b3f      	ldr	r3, [pc, #252]	; (800c3d8 <SPI_WaitFifoStateUntilTimeout+0x124>)
 800c2dc:	681a      	ldr	r2, [r3, #0]
 800c2de:	0013      	movs	r3, r2
 800c2e0:	009b      	lsls	r3, r3, #2
 800c2e2:	189b      	adds	r3, r3, r2
 800c2e4:	00da      	lsls	r2, r3, #3
 800c2e6:	1ad3      	subs	r3, r2, r3
 800c2e8:	0d1b      	lsrs	r3, r3, #20
 800c2ea:	69fa      	ldr	r2, [r7, #28]
 800c2ec:	4353      	muls	r3, r2
 800c2ee:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800c2f0:	e064      	b.n	800c3bc <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c2f2:	68ba      	ldr	r2, [r7, #8]
 800c2f4:	23c0      	movs	r3, #192	; 0xc0
 800c2f6:	00db      	lsls	r3, r3, #3
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d106      	bne.n	800c30a <SPI_WaitFifoStateUntilTimeout+0x56>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d103      	bne.n	800c30a <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	330c      	adds	r3, #12
 800c308:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	3301      	adds	r3, #1
 800c30e:	d055      	beq.n	800c3bc <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c310:	f7fb f99a 	bl	8007648 <HAL_GetTick>
 800c314:	0002      	movs	r2, r0
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	1ad3      	subs	r3, r2, r3
 800c31a:	69fa      	ldr	r2, [r7, #28]
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d902      	bls.n	800c326 <SPI_WaitFifoStateUntilTimeout+0x72>
 800c320:	69fb      	ldr	r3, [r7, #28]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d142      	bne.n	800c3ac <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	685a      	ldr	r2, [r3, #4]
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	21e0      	movs	r1, #224	; 0xe0
 800c332:	438a      	bics	r2, r1
 800c334:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	685a      	ldr	r2, [r3, #4]
 800c33a:	2382      	movs	r3, #130	; 0x82
 800c33c:	005b      	lsls	r3, r3, #1
 800c33e:	429a      	cmp	r2, r3
 800c340:	d113      	bne.n	800c36a <SPI_WaitFifoStateUntilTimeout+0xb6>
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	689a      	ldr	r2, [r3, #8]
 800c346:	2380      	movs	r3, #128	; 0x80
 800c348:	021b      	lsls	r3, r3, #8
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d005      	beq.n	800c35a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	689a      	ldr	r2, [r3, #8]
 800c352:	2380      	movs	r3, #128	; 0x80
 800c354:	00db      	lsls	r3, r3, #3
 800c356:	429a      	cmp	r2, r3
 800c358:	d107      	bne.n	800c36a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	681a      	ldr	r2, [r3, #0]
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	2140      	movs	r1, #64	; 0x40
 800c366:	438a      	bics	r2, r1
 800c368:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c36e:	2380      	movs	r3, #128	; 0x80
 800c370:	019b      	lsls	r3, r3, #6
 800c372:	429a      	cmp	r2, r3
 800c374:	d110      	bne.n	800c398 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	681a      	ldr	r2, [r3, #0]
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4916      	ldr	r1, [pc, #88]	; (800c3dc <SPI_WaitFifoStateUntilTimeout+0x128>)
 800c382:	400a      	ands	r2, r1
 800c384:	601a      	str	r2, [r3, #0]
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	681a      	ldr	r2, [r3, #0]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	2180      	movs	r1, #128	; 0x80
 800c392:	0189      	lsls	r1, r1, #6
 800c394:	430a      	orrs	r2, r1
 800c396:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	225d      	movs	r2, #93	; 0x5d
 800c39c:	2101      	movs	r1, #1
 800c39e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	225c      	movs	r2, #92	; 0x5c
 800c3a4:	2100      	movs	r1, #0
 800c3a6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c3a8:	2303      	movs	r3, #3
 800c3aa:	e010      	b.n	800c3ce <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d101      	bne.n	800c3b6 <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	3b01      	subs	r3, #1
 800c3ba:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	689b      	ldr	r3, [r3, #8]
 800c3c2:	68ba      	ldr	r2, [r7, #8]
 800c3c4:	4013      	ands	r3, r2
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d192      	bne.n	800c2f2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800c3cc:	2300      	movs	r3, #0
}
 800c3ce:	0018      	movs	r0, r3
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	b008      	add	sp, #32
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	46c0      	nop			; (mov r8, r8)
 800c3d8:	20000038 	.word	0x20000038
 800c3dc:	ffffdfff 	.word	0xffffdfff

0800c3e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b086      	sub	sp, #24
 800c3e4:	af02      	add	r7, sp, #8
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	60b9      	str	r1, [r7, #8]
 800c3ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	685a      	ldr	r2, [r3, #4]
 800c3f0:	2382      	movs	r3, #130	; 0x82
 800c3f2:	005b      	lsls	r3, r3, #1
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d113      	bne.n	800c420 <SPI_EndRxTransaction+0x40>
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	689a      	ldr	r2, [r3, #8]
 800c3fc:	2380      	movs	r3, #128	; 0x80
 800c3fe:	021b      	lsls	r3, r3, #8
 800c400:	429a      	cmp	r2, r3
 800c402:	d005      	beq.n	800c410 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	689a      	ldr	r2, [r3, #8]
 800c408:	2380      	movs	r3, #128	; 0x80
 800c40a:	00db      	lsls	r3, r3, #3
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d107      	bne.n	800c420 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	681a      	ldr	r2, [r3, #0]
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	2140      	movs	r1, #64	; 0x40
 800c41c:	438a      	bics	r2, r1
 800c41e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c420:	68ba      	ldr	r2, [r7, #8]
 800c422:	68f8      	ldr	r0, [r7, #12]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	9300      	str	r3, [sp, #0]
 800c428:	0013      	movs	r3, r2
 800c42a:	2200      	movs	r2, #0
 800c42c:	2180      	movs	r1, #128	; 0x80
 800c42e:	f7ff feb3 	bl	800c198 <SPI_WaitFlagStateUntilTimeout>
 800c432:	1e03      	subs	r3, r0, #0
 800c434:	d007      	beq.n	800c446 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c43a:	2220      	movs	r2, #32
 800c43c:	431a      	orrs	r2, r3
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c442:	2303      	movs	r3, #3
 800c444:	e026      	b.n	800c494 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	685a      	ldr	r2, [r3, #4]
 800c44a:	2382      	movs	r3, #130	; 0x82
 800c44c:	005b      	lsls	r3, r3, #1
 800c44e:	429a      	cmp	r2, r3
 800c450:	d11f      	bne.n	800c492 <SPI_EndRxTransaction+0xb2>
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	689a      	ldr	r2, [r3, #8]
 800c456:	2380      	movs	r3, #128	; 0x80
 800c458:	021b      	lsls	r3, r3, #8
 800c45a:	429a      	cmp	r2, r3
 800c45c:	d005      	beq.n	800c46a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	689a      	ldr	r2, [r3, #8]
 800c462:	2380      	movs	r3, #128	; 0x80
 800c464:	00db      	lsls	r3, r3, #3
 800c466:	429a      	cmp	r2, r3
 800c468:	d113      	bne.n	800c492 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c46a:	68ba      	ldr	r2, [r7, #8]
 800c46c:	23c0      	movs	r3, #192	; 0xc0
 800c46e:	00d9      	lsls	r1, r3, #3
 800c470:	68f8      	ldr	r0, [r7, #12]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	9300      	str	r3, [sp, #0]
 800c476:	0013      	movs	r3, r2
 800c478:	2200      	movs	r2, #0
 800c47a:	f7ff ff1b 	bl	800c2b4 <SPI_WaitFifoStateUntilTimeout>
 800c47e:	1e03      	subs	r3, r0, #0
 800c480:	d007      	beq.n	800c492 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c486:	2220      	movs	r2, #32
 800c488:	431a      	orrs	r2, r3
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800c48e:	2303      	movs	r3, #3
 800c490:	e000      	b.n	800c494 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800c492:	2300      	movs	r3, #0
}
 800c494:	0018      	movs	r0, r3
 800c496:	46bd      	mov	sp, r7
 800c498:	b004      	add	sp, #16
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b086      	sub	sp, #24
 800c4a0:	af02      	add	r7, sp, #8
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	60b9      	str	r1, [r7, #8]
 800c4a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c4a8:	68ba      	ldr	r2, [r7, #8]
 800c4aa:	23c0      	movs	r3, #192	; 0xc0
 800c4ac:	0159      	lsls	r1, r3, #5
 800c4ae:	68f8      	ldr	r0, [r7, #12]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	9300      	str	r3, [sp, #0]
 800c4b4:	0013      	movs	r3, r2
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	f7ff fefc 	bl	800c2b4 <SPI_WaitFifoStateUntilTimeout>
 800c4bc:	1e03      	subs	r3, r0, #0
 800c4be:	d007      	beq.n	800c4d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c4c4:	2220      	movs	r2, #32
 800c4c6:	431a      	orrs	r2, r3
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c4cc:	2303      	movs	r3, #3
 800c4ce:	e027      	b.n	800c520 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c4d0:	68ba      	ldr	r2, [r7, #8]
 800c4d2:	68f8      	ldr	r0, [r7, #12]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	9300      	str	r3, [sp, #0]
 800c4d8:	0013      	movs	r3, r2
 800c4da:	2200      	movs	r2, #0
 800c4dc:	2180      	movs	r1, #128	; 0x80
 800c4de:	f7ff fe5b 	bl	800c198 <SPI_WaitFlagStateUntilTimeout>
 800c4e2:	1e03      	subs	r3, r0, #0
 800c4e4:	d007      	beq.n	800c4f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c4ea:	2220      	movs	r2, #32
 800c4ec:	431a      	orrs	r2, r3
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c4f2:	2303      	movs	r3, #3
 800c4f4:	e014      	b.n	800c520 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c4f6:	68ba      	ldr	r2, [r7, #8]
 800c4f8:	23c0      	movs	r3, #192	; 0xc0
 800c4fa:	00d9      	lsls	r1, r3, #3
 800c4fc:	68f8      	ldr	r0, [r7, #12]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	9300      	str	r3, [sp, #0]
 800c502:	0013      	movs	r3, r2
 800c504:	2200      	movs	r2, #0
 800c506:	f7ff fed5 	bl	800c2b4 <SPI_WaitFifoStateUntilTimeout>
 800c50a:	1e03      	subs	r3, r0, #0
 800c50c:	d007      	beq.n	800c51e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c512:	2220      	movs	r2, #32
 800c514:	431a      	orrs	r2, r3
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c51a:	2303      	movs	r3, #3
 800c51c:	e000      	b.n	800c520 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c51e:	2300      	movs	r3, #0
}
 800c520:	0018      	movs	r0, r3
 800c522:	46bd      	mov	sp, r7
 800c524:	b004      	add	sp, #16
 800c526:	bd80      	pop	{r7, pc}

0800c528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b082      	sub	sp, #8
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d101      	bne.n	800c53a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c536:	2301      	movs	r3, #1
 800c538:	e04a      	b.n	800c5d0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	223d      	movs	r2, #61	; 0x3d
 800c53e:	5c9b      	ldrb	r3, [r3, r2]
 800c540:	b2db      	uxtb	r3, r3
 800c542:	2b00      	cmp	r3, #0
 800c544:	d107      	bne.n	800c556 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	223c      	movs	r2, #60	; 0x3c
 800c54a:	2100      	movs	r1, #0
 800c54c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	0018      	movs	r0, r3
 800c552:	f7fa fda1 	bl	8007098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	223d      	movs	r2, #61	; 0x3d
 800c55a:	2102      	movs	r1, #2
 800c55c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	3304      	adds	r3, #4
 800c566:	0019      	movs	r1, r3
 800c568:	0010      	movs	r0, r2
 800c56a:	f000 fb41 	bl	800cbf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2248      	movs	r2, #72	; 0x48
 800c572:	2101      	movs	r1, #1
 800c574:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	223e      	movs	r2, #62	; 0x3e
 800c57a:	2101      	movs	r1, #1
 800c57c:	5499      	strb	r1, [r3, r2]
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	223f      	movs	r2, #63	; 0x3f
 800c582:	2101      	movs	r1, #1
 800c584:	5499      	strb	r1, [r3, r2]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2240      	movs	r2, #64	; 0x40
 800c58a:	2101      	movs	r1, #1
 800c58c:	5499      	strb	r1, [r3, r2]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2241      	movs	r2, #65	; 0x41
 800c592:	2101      	movs	r1, #1
 800c594:	5499      	strb	r1, [r3, r2]
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2242      	movs	r2, #66	; 0x42
 800c59a:	2101      	movs	r1, #1
 800c59c:	5499      	strb	r1, [r3, r2]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2243      	movs	r2, #67	; 0x43
 800c5a2:	2101      	movs	r1, #1
 800c5a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2244      	movs	r2, #68	; 0x44
 800c5aa:	2101      	movs	r1, #1
 800c5ac:	5499      	strb	r1, [r3, r2]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2245      	movs	r2, #69	; 0x45
 800c5b2:	2101      	movs	r1, #1
 800c5b4:	5499      	strb	r1, [r3, r2]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2246      	movs	r2, #70	; 0x46
 800c5ba:	2101      	movs	r1, #1
 800c5bc:	5499      	strb	r1, [r3, r2]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2247      	movs	r2, #71	; 0x47
 800c5c2:	2101      	movs	r1, #1
 800c5c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	223d      	movs	r2, #61	; 0x3d
 800c5ca:	2101      	movs	r1, #1
 800c5cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c5ce:	2300      	movs	r3, #0
}
 800c5d0:	0018      	movs	r0, r3
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	b002      	add	sp, #8
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b082      	sub	sp, #8
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d101      	bne.n	800c5ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	e04a      	b.n	800c680 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	223d      	movs	r2, #61	; 0x3d
 800c5ee:	5c9b      	ldrb	r3, [r3, r2]
 800c5f0:	b2db      	uxtb	r3, r3
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d107      	bne.n	800c606 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	223c      	movs	r2, #60	; 0x3c
 800c5fa:	2100      	movs	r1, #0
 800c5fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	0018      	movs	r0, r3
 800c602:	f000 f841 	bl	800c688 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	223d      	movs	r2, #61	; 0x3d
 800c60a:	2102      	movs	r1, #2
 800c60c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681a      	ldr	r2, [r3, #0]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	3304      	adds	r3, #4
 800c616:	0019      	movs	r1, r3
 800c618:	0010      	movs	r0, r2
 800c61a:	f000 fae9 	bl	800cbf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2248      	movs	r2, #72	; 0x48
 800c622:	2101      	movs	r1, #1
 800c624:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	223e      	movs	r2, #62	; 0x3e
 800c62a:	2101      	movs	r1, #1
 800c62c:	5499      	strb	r1, [r3, r2]
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	223f      	movs	r2, #63	; 0x3f
 800c632:	2101      	movs	r1, #1
 800c634:	5499      	strb	r1, [r3, r2]
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2240      	movs	r2, #64	; 0x40
 800c63a:	2101      	movs	r1, #1
 800c63c:	5499      	strb	r1, [r3, r2]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2241      	movs	r2, #65	; 0x41
 800c642:	2101      	movs	r1, #1
 800c644:	5499      	strb	r1, [r3, r2]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2242      	movs	r2, #66	; 0x42
 800c64a:	2101      	movs	r1, #1
 800c64c:	5499      	strb	r1, [r3, r2]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2243      	movs	r2, #67	; 0x43
 800c652:	2101      	movs	r1, #1
 800c654:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2244      	movs	r2, #68	; 0x44
 800c65a:	2101      	movs	r1, #1
 800c65c:	5499      	strb	r1, [r3, r2]
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2245      	movs	r2, #69	; 0x45
 800c662:	2101      	movs	r1, #1
 800c664:	5499      	strb	r1, [r3, r2]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2246      	movs	r2, #70	; 0x46
 800c66a:	2101      	movs	r1, #1
 800c66c:	5499      	strb	r1, [r3, r2]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2247      	movs	r2, #71	; 0x47
 800c672:	2101      	movs	r1, #1
 800c674:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	223d      	movs	r2, #61	; 0x3d
 800c67a:	2101      	movs	r1, #1
 800c67c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c67e:	2300      	movs	r3, #0
}
 800c680:	0018      	movs	r0, r3
 800c682:	46bd      	mov	sp, r7
 800c684:	b002      	add	sp, #8
 800c686:	bd80      	pop	{r7, pc}

0800c688 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c690:	46c0      	nop			; (mov r8, r8)
 800c692:	46bd      	mov	sp, r7
 800c694:	b002      	add	sp, #8
 800c696:	bd80      	pop	{r7, pc}

0800c698 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b084      	sub	sp, #16
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d108      	bne.n	800c6ba <HAL_TIM_PWM_Start+0x22>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	223e      	movs	r2, #62	; 0x3e
 800c6ac:	5c9b      	ldrb	r3, [r3, r2]
 800c6ae:	b2db      	uxtb	r3, r3
 800c6b0:	3b01      	subs	r3, #1
 800c6b2:	1e5a      	subs	r2, r3, #1
 800c6b4:	4193      	sbcs	r3, r2
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	e037      	b.n	800c72a <HAL_TIM_PWM_Start+0x92>
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	2b04      	cmp	r3, #4
 800c6be:	d108      	bne.n	800c6d2 <HAL_TIM_PWM_Start+0x3a>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	223f      	movs	r2, #63	; 0x3f
 800c6c4:	5c9b      	ldrb	r3, [r3, r2]
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	3b01      	subs	r3, #1
 800c6ca:	1e5a      	subs	r2, r3, #1
 800c6cc:	4193      	sbcs	r3, r2
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	e02b      	b.n	800c72a <HAL_TIM_PWM_Start+0x92>
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	2b08      	cmp	r3, #8
 800c6d6:	d108      	bne.n	800c6ea <HAL_TIM_PWM_Start+0x52>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2240      	movs	r2, #64	; 0x40
 800c6dc:	5c9b      	ldrb	r3, [r3, r2]
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	3b01      	subs	r3, #1
 800c6e2:	1e5a      	subs	r2, r3, #1
 800c6e4:	4193      	sbcs	r3, r2
 800c6e6:	b2db      	uxtb	r3, r3
 800c6e8:	e01f      	b.n	800c72a <HAL_TIM_PWM_Start+0x92>
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	2b0c      	cmp	r3, #12
 800c6ee:	d108      	bne.n	800c702 <HAL_TIM_PWM_Start+0x6a>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2241      	movs	r2, #65	; 0x41
 800c6f4:	5c9b      	ldrb	r3, [r3, r2]
 800c6f6:	b2db      	uxtb	r3, r3
 800c6f8:	3b01      	subs	r3, #1
 800c6fa:	1e5a      	subs	r2, r3, #1
 800c6fc:	4193      	sbcs	r3, r2
 800c6fe:	b2db      	uxtb	r3, r3
 800c700:	e013      	b.n	800c72a <HAL_TIM_PWM_Start+0x92>
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	2b10      	cmp	r3, #16
 800c706:	d108      	bne.n	800c71a <HAL_TIM_PWM_Start+0x82>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2242      	movs	r2, #66	; 0x42
 800c70c:	5c9b      	ldrb	r3, [r3, r2]
 800c70e:	b2db      	uxtb	r3, r3
 800c710:	3b01      	subs	r3, #1
 800c712:	1e5a      	subs	r2, r3, #1
 800c714:	4193      	sbcs	r3, r2
 800c716:	b2db      	uxtb	r3, r3
 800c718:	e007      	b.n	800c72a <HAL_TIM_PWM_Start+0x92>
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2243      	movs	r2, #67	; 0x43
 800c71e:	5c9b      	ldrb	r3, [r3, r2]
 800c720:	b2db      	uxtb	r3, r3
 800c722:	3b01      	subs	r3, #1
 800c724:	1e5a      	subs	r2, r3, #1
 800c726:	4193      	sbcs	r3, r2
 800c728:	b2db      	uxtb	r3, r3
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d001      	beq.n	800c732 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800c72e:	2301      	movs	r3, #1
 800c730:	e08b      	b.n	800c84a <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d104      	bne.n	800c742 <HAL_TIM_PWM_Start+0xaa>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	223e      	movs	r2, #62	; 0x3e
 800c73c:	2102      	movs	r1, #2
 800c73e:	5499      	strb	r1, [r3, r2]
 800c740:	e023      	b.n	800c78a <HAL_TIM_PWM_Start+0xf2>
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	2b04      	cmp	r3, #4
 800c746:	d104      	bne.n	800c752 <HAL_TIM_PWM_Start+0xba>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	223f      	movs	r2, #63	; 0x3f
 800c74c:	2102      	movs	r1, #2
 800c74e:	5499      	strb	r1, [r3, r2]
 800c750:	e01b      	b.n	800c78a <HAL_TIM_PWM_Start+0xf2>
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	2b08      	cmp	r3, #8
 800c756:	d104      	bne.n	800c762 <HAL_TIM_PWM_Start+0xca>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2240      	movs	r2, #64	; 0x40
 800c75c:	2102      	movs	r1, #2
 800c75e:	5499      	strb	r1, [r3, r2]
 800c760:	e013      	b.n	800c78a <HAL_TIM_PWM_Start+0xf2>
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	2b0c      	cmp	r3, #12
 800c766:	d104      	bne.n	800c772 <HAL_TIM_PWM_Start+0xda>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2241      	movs	r2, #65	; 0x41
 800c76c:	2102      	movs	r1, #2
 800c76e:	5499      	strb	r1, [r3, r2]
 800c770:	e00b      	b.n	800c78a <HAL_TIM_PWM_Start+0xf2>
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	2b10      	cmp	r3, #16
 800c776:	d104      	bne.n	800c782 <HAL_TIM_PWM_Start+0xea>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2242      	movs	r2, #66	; 0x42
 800c77c:	2102      	movs	r1, #2
 800c77e:	5499      	strb	r1, [r3, r2]
 800c780:	e003      	b.n	800c78a <HAL_TIM_PWM_Start+0xf2>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2243      	movs	r2, #67	; 0x43
 800c786:	2102      	movs	r1, #2
 800c788:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	6839      	ldr	r1, [r7, #0]
 800c790:	2201      	movs	r2, #1
 800c792:	0018      	movs	r0, r3
 800c794:	f000 fe0c 	bl	800d3b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4a2d      	ldr	r2, [pc, #180]	; (800c854 <HAL_TIM_PWM_Start+0x1bc>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d00e      	beq.n	800c7c0 <HAL_TIM_PWM_Start+0x128>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	4a2c      	ldr	r2, [pc, #176]	; (800c858 <HAL_TIM_PWM_Start+0x1c0>)
 800c7a8:	4293      	cmp	r3, r2
 800c7aa:	d009      	beq.n	800c7c0 <HAL_TIM_PWM_Start+0x128>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4a2a      	ldr	r2, [pc, #168]	; (800c85c <HAL_TIM_PWM_Start+0x1c4>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d004      	beq.n	800c7c0 <HAL_TIM_PWM_Start+0x128>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	4a29      	ldr	r2, [pc, #164]	; (800c860 <HAL_TIM_PWM_Start+0x1c8>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d101      	bne.n	800c7c4 <HAL_TIM_PWM_Start+0x12c>
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	e000      	b.n	800c7c6 <HAL_TIM_PWM_Start+0x12e>
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d008      	beq.n	800c7dc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	2180      	movs	r1, #128	; 0x80
 800c7d6:	0209      	lsls	r1, r1, #8
 800c7d8:	430a      	orrs	r2, r1
 800c7da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	4a1c      	ldr	r2, [pc, #112]	; (800c854 <HAL_TIM_PWM_Start+0x1bc>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d00f      	beq.n	800c806 <HAL_TIM_PWM_Start+0x16e>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681a      	ldr	r2, [r3, #0]
 800c7ea:	2380      	movs	r3, #128	; 0x80
 800c7ec:	05db      	lsls	r3, r3, #23
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	d009      	beq.n	800c806 <HAL_TIM_PWM_Start+0x16e>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	4a1b      	ldr	r2, [pc, #108]	; (800c864 <HAL_TIM_PWM_Start+0x1cc>)
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d004      	beq.n	800c806 <HAL_TIM_PWM_Start+0x16e>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	4a15      	ldr	r2, [pc, #84]	; (800c858 <HAL_TIM_PWM_Start+0x1c0>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d116      	bne.n	800c834 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	689b      	ldr	r3, [r3, #8]
 800c80c:	4a16      	ldr	r2, [pc, #88]	; (800c868 <HAL_TIM_PWM_Start+0x1d0>)
 800c80e:	4013      	ands	r3, r2
 800c810:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	2b06      	cmp	r3, #6
 800c816:	d016      	beq.n	800c846 <HAL_TIM_PWM_Start+0x1ae>
 800c818:	68fa      	ldr	r2, [r7, #12]
 800c81a:	2380      	movs	r3, #128	; 0x80
 800c81c:	025b      	lsls	r3, r3, #9
 800c81e:	429a      	cmp	r2, r3
 800c820:	d011      	beq.n	800c846 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	681a      	ldr	r2, [r3, #0]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	2101      	movs	r1, #1
 800c82e:	430a      	orrs	r2, r1
 800c830:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c832:	e008      	b.n	800c846 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	681a      	ldr	r2, [r3, #0]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	2101      	movs	r1, #1
 800c840:	430a      	orrs	r2, r1
 800c842:	601a      	str	r2, [r3, #0]
 800c844:	e000      	b.n	800c848 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c846:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800c848:	2300      	movs	r3, #0
}
 800c84a:	0018      	movs	r0, r3
 800c84c:	46bd      	mov	sp, r7
 800c84e:	b004      	add	sp, #16
 800c850:	bd80      	pop	{r7, pc}
 800c852:	46c0      	nop			; (mov r8, r8)
 800c854:	40012c00 	.word	0x40012c00
 800c858:	40014000 	.word	0x40014000
 800c85c:	40014400 	.word	0x40014400
 800c860:	40014800 	.word	0x40014800
 800c864:	40000400 	.word	0x40000400
 800c868:	00010007 	.word	0x00010007

0800c86c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
 800c872:	60f8      	str	r0, [r7, #12]
 800c874:	60b9      	str	r1, [r7, #8]
 800c876:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	223c      	movs	r2, #60	; 0x3c
 800c87c:	5c9b      	ldrb	r3, [r3, r2]
 800c87e:	2b01      	cmp	r3, #1
 800c880:	d101      	bne.n	800c886 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c882:	2302      	movs	r3, #2
 800c884:	e0df      	b.n	800ca46 <HAL_TIM_PWM_ConfigChannel+0x1da>
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	223c      	movs	r2, #60	; 0x3c
 800c88a:	2101      	movs	r1, #1
 800c88c:	5499      	strb	r1, [r3, r2]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2b14      	cmp	r3, #20
 800c892:	d900      	bls.n	800c896 <HAL_TIM_PWM_ConfigChannel+0x2a>
 800c894:	e0d1      	b.n	800ca3a <HAL_TIM_PWM_ConfigChannel+0x1ce>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	009a      	lsls	r2, r3, #2
 800c89a:	4b6d      	ldr	r3, [pc, #436]	; (800ca50 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 800c89c:	18d3      	adds	r3, r2, r3
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	68ba      	ldr	r2, [r7, #8]
 800c8a8:	0011      	movs	r1, r2
 800c8aa:	0018      	movs	r0, r3
 800c8ac:	f000 fa20 	bl	800ccf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	699a      	ldr	r2, [r3, #24]
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	2108      	movs	r1, #8
 800c8bc:	430a      	orrs	r2, r1
 800c8be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	699a      	ldr	r2, [r3, #24]
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	2104      	movs	r1, #4
 800c8cc:	438a      	bics	r2, r1
 800c8ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	6999      	ldr	r1, [r3, #24]
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	691a      	ldr	r2, [r3, #16]
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	430a      	orrs	r2, r1
 800c8e0:	619a      	str	r2, [r3, #24]
      break;
 800c8e2:	e0ab      	b.n	800ca3c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	68ba      	ldr	r2, [r7, #8]
 800c8ea:	0011      	movs	r1, r2
 800c8ec:	0018      	movs	r0, r3
 800c8ee:	f000 fa89 	bl	800ce04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	699a      	ldr	r2, [r3, #24]
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	2180      	movs	r1, #128	; 0x80
 800c8fe:	0109      	lsls	r1, r1, #4
 800c900:	430a      	orrs	r2, r1
 800c902:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	699a      	ldr	r2, [r3, #24]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	4951      	ldr	r1, [pc, #324]	; (800ca54 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800c910:	400a      	ands	r2, r1
 800c912:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	6999      	ldr	r1, [r3, #24]
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	691b      	ldr	r3, [r3, #16]
 800c91e:	021a      	lsls	r2, r3, #8
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	430a      	orrs	r2, r1
 800c926:	619a      	str	r2, [r3, #24]
      break;
 800c928:	e088      	b.n	800ca3c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	68ba      	ldr	r2, [r7, #8]
 800c930:	0011      	movs	r1, r2
 800c932:	0018      	movs	r0, r3
 800c934:	f000 faea 	bl	800cf0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	69da      	ldr	r2, [r3, #28]
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	2108      	movs	r1, #8
 800c944:	430a      	orrs	r2, r1
 800c946:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	69da      	ldr	r2, [r3, #28]
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	2104      	movs	r1, #4
 800c954:	438a      	bics	r2, r1
 800c956:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	69d9      	ldr	r1, [r3, #28]
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	691a      	ldr	r2, [r3, #16]
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	430a      	orrs	r2, r1
 800c968:	61da      	str	r2, [r3, #28]
      break;
 800c96a:	e067      	b.n	800ca3c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	68ba      	ldr	r2, [r7, #8]
 800c972:	0011      	movs	r1, r2
 800c974:	0018      	movs	r0, r3
 800c976:	f000 fb51 	bl	800d01c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	69da      	ldr	r2, [r3, #28]
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	2180      	movs	r1, #128	; 0x80
 800c986:	0109      	lsls	r1, r1, #4
 800c988:	430a      	orrs	r2, r1
 800c98a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	69da      	ldr	r2, [r3, #28]
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	492f      	ldr	r1, [pc, #188]	; (800ca54 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800c998:	400a      	ands	r2, r1
 800c99a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	69d9      	ldr	r1, [r3, #28]
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	691b      	ldr	r3, [r3, #16]
 800c9a6:	021a      	lsls	r2, r3, #8
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	430a      	orrs	r2, r1
 800c9ae:	61da      	str	r2, [r3, #28]
      break;
 800c9b0:	e044      	b.n	800ca3c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	68ba      	ldr	r2, [r7, #8]
 800c9b8:	0011      	movs	r1, r2
 800c9ba:	0018      	movs	r0, r3
 800c9bc:	f000 fb98 	bl	800d0f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	2108      	movs	r1, #8
 800c9cc:	430a      	orrs	r2, r1
 800c9ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	2104      	movs	r1, #4
 800c9dc:	438a      	bics	r2, r1
 800c9de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	691a      	ldr	r2, [r3, #16]
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	430a      	orrs	r2, r1
 800c9f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c9f2:	e023      	b.n	800ca3c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	68ba      	ldr	r2, [r7, #8]
 800c9fa:	0011      	movs	r1, r2
 800c9fc:	0018      	movs	r0, r3
 800c9fe:	f000 fbd7 	bl	800d1b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	2180      	movs	r1, #128	; 0x80
 800ca0e:	0109      	lsls	r1, r1, #4
 800ca10:	430a      	orrs	r2, r1
 800ca12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	490d      	ldr	r1, [pc, #52]	; (800ca54 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800ca20:	400a      	ands	r2, r1
 800ca22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	691b      	ldr	r3, [r3, #16]
 800ca2e:	021a      	lsls	r2, r3, #8
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	430a      	orrs	r2, r1
 800ca36:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ca38:	e000      	b.n	800ca3c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 800ca3a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	223c      	movs	r2, #60	; 0x3c
 800ca40:	2100      	movs	r1, #0
 800ca42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ca44:	2300      	movs	r3, #0
}
 800ca46:	0018      	movs	r0, r3
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	b004      	add	sp, #16
 800ca4c:	bd80      	pop	{r7, pc}
 800ca4e:	46c0      	nop			; (mov r8, r8)
 800ca50:	0801b75c 	.word	0x0801b75c
 800ca54:	fffffbff 	.word	0xfffffbff

0800ca58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	223c      	movs	r2, #60	; 0x3c
 800ca66:	5c9b      	ldrb	r3, [r3, r2]
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d101      	bne.n	800ca70 <HAL_TIM_ConfigClockSource+0x18>
 800ca6c:	2302      	movs	r3, #2
 800ca6e:	e0b7      	b.n	800cbe0 <HAL_TIM_ConfigClockSource+0x188>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	223c      	movs	r2, #60	; 0x3c
 800ca74:	2101      	movs	r1, #1
 800ca76:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	223d      	movs	r2, #61	; 0x3d
 800ca7c:	2102      	movs	r1, #2
 800ca7e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	689b      	ldr	r3, [r3, #8]
 800ca86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	4a57      	ldr	r2, [pc, #348]	; (800cbe8 <HAL_TIM_ConfigClockSource+0x190>)
 800ca8c:	4013      	ands	r3, r2
 800ca8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	4a56      	ldr	r2, [pc, #344]	; (800cbec <HAL_TIM_ConfigClockSource+0x194>)
 800ca94:	4013      	ands	r3, r2
 800ca96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	68fa      	ldr	r2, [r7, #12]
 800ca9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	2280      	movs	r2, #128	; 0x80
 800caa6:	0192      	lsls	r2, r2, #6
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d040      	beq.n	800cb2e <HAL_TIM_ConfigClockSource+0xd6>
 800caac:	2280      	movs	r2, #128	; 0x80
 800caae:	0192      	lsls	r2, r2, #6
 800cab0:	4293      	cmp	r3, r2
 800cab2:	d900      	bls.n	800cab6 <HAL_TIM_ConfigClockSource+0x5e>
 800cab4:	e088      	b.n	800cbc8 <HAL_TIM_ConfigClockSource+0x170>
 800cab6:	2280      	movs	r2, #128	; 0x80
 800cab8:	0152      	lsls	r2, r2, #5
 800caba:	4293      	cmp	r3, r2
 800cabc:	d100      	bne.n	800cac0 <HAL_TIM_ConfigClockSource+0x68>
 800cabe:	e085      	b.n	800cbcc <HAL_TIM_ConfigClockSource+0x174>
 800cac0:	2280      	movs	r2, #128	; 0x80
 800cac2:	0152      	lsls	r2, r2, #5
 800cac4:	4293      	cmp	r3, r2
 800cac6:	d900      	bls.n	800caca <HAL_TIM_ConfigClockSource+0x72>
 800cac8:	e07e      	b.n	800cbc8 <HAL_TIM_ConfigClockSource+0x170>
 800caca:	2b70      	cmp	r3, #112	; 0x70
 800cacc:	d018      	beq.n	800cb00 <HAL_TIM_ConfigClockSource+0xa8>
 800cace:	d900      	bls.n	800cad2 <HAL_TIM_ConfigClockSource+0x7a>
 800cad0:	e07a      	b.n	800cbc8 <HAL_TIM_ConfigClockSource+0x170>
 800cad2:	2b60      	cmp	r3, #96	; 0x60
 800cad4:	d04f      	beq.n	800cb76 <HAL_TIM_ConfigClockSource+0x11e>
 800cad6:	d900      	bls.n	800cada <HAL_TIM_ConfigClockSource+0x82>
 800cad8:	e076      	b.n	800cbc8 <HAL_TIM_ConfigClockSource+0x170>
 800cada:	2b50      	cmp	r3, #80	; 0x50
 800cadc:	d03b      	beq.n	800cb56 <HAL_TIM_ConfigClockSource+0xfe>
 800cade:	d900      	bls.n	800cae2 <HAL_TIM_ConfigClockSource+0x8a>
 800cae0:	e072      	b.n	800cbc8 <HAL_TIM_ConfigClockSource+0x170>
 800cae2:	2b40      	cmp	r3, #64	; 0x40
 800cae4:	d057      	beq.n	800cb96 <HAL_TIM_ConfigClockSource+0x13e>
 800cae6:	d900      	bls.n	800caea <HAL_TIM_ConfigClockSource+0x92>
 800cae8:	e06e      	b.n	800cbc8 <HAL_TIM_ConfigClockSource+0x170>
 800caea:	2b30      	cmp	r3, #48	; 0x30
 800caec:	d063      	beq.n	800cbb6 <HAL_TIM_ConfigClockSource+0x15e>
 800caee:	d86b      	bhi.n	800cbc8 <HAL_TIM_ConfigClockSource+0x170>
 800caf0:	2b20      	cmp	r3, #32
 800caf2:	d060      	beq.n	800cbb6 <HAL_TIM_ConfigClockSource+0x15e>
 800caf4:	d868      	bhi.n	800cbc8 <HAL_TIM_ConfigClockSource+0x170>
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d05d      	beq.n	800cbb6 <HAL_TIM_ConfigClockSource+0x15e>
 800cafa:	2b10      	cmp	r3, #16
 800cafc:	d05b      	beq.n	800cbb6 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800cafe:	e063      	b.n	800cbc8 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6818      	ldr	r0, [r3, #0]
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	6899      	ldr	r1, [r3, #8]
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	685a      	ldr	r2, [r3, #4]
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	68db      	ldr	r3, [r3, #12]
 800cb10:	f000 fc2e 	bl	800d370 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	689b      	ldr	r3, [r3, #8]
 800cb1a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2277      	movs	r2, #119	; 0x77
 800cb20:	4313      	orrs	r3, r2
 800cb22:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	68fa      	ldr	r2, [r7, #12]
 800cb2a:	609a      	str	r2, [r3, #8]
      break;
 800cb2c:	e04f      	b.n	800cbce <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6818      	ldr	r0, [r3, #0]
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	6899      	ldr	r1, [r3, #8]
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	685a      	ldr	r2, [r3, #4]
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	68db      	ldr	r3, [r3, #12]
 800cb3e:	f000 fc17 	bl	800d370 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	689a      	ldr	r2, [r3, #8]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	2180      	movs	r1, #128	; 0x80
 800cb4e:	01c9      	lsls	r1, r1, #7
 800cb50:	430a      	orrs	r2, r1
 800cb52:	609a      	str	r2, [r3, #8]
      break;
 800cb54:	e03b      	b.n	800cbce <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6818      	ldr	r0, [r3, #0]
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	6859      	ldr	r1, [r3, #4]
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	68db      	ldr	r3, [r3, #12]
 800cb62:	001a      	movs	r2, r3
 800cb64:	f000 fb88 	bl	800d278 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	2150      	movs	r1, #80	; 0x50
 800cb6e:	0018      	movs	r0, r3
 800cb70:	f000 fbe2 	bl	800d338 <TIM_ITRx_SetConfig>
      break;
 800cb74:	e02b      	b.n	800cbce <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6818      	ldr	r0, [r3, #0]
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	6859      	ldr	r1, [r3, #4]
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	68db      	ldr	r3, [r3, #12]
 800cb82:	001a      	movs	r2, r3
 800cb84:	f000 fba6 	bl	800d2d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	2160      	movs	r1, #96	; 0x60
 800cb8e:	0018      	movs	r0, r3
 800cb90:	f000 fbd2 	bl	800d338 <TIM_ITRx_SetConfig>
      break;
 800cb94:	e01b      	b.n	800cbce <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6818      	ldr	r0, [r3, #0]
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	6859      	ldr	r1, [r3, #4]
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	001a      	movs	r2, r3
 800cba4:	f000 fb68 	bl	800d278 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	2140      	movs	r1, #64	; 0x40
 800cbae:	0018      	movs	r0, r3
 800cbb0:	f000 fbc2 	bl	800d338 <TIM_ITRx_SetConfig>
      break;
 800cbb4:	e00b      	b.n	800cbce <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681a      	ldr	r2, [r3, #0]
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	0019      	movs	r1, r3
 800cbc0:	0010      	movs	r0, r2
 800cbc2:	f000 fbb9 	bl	800d338 <TIM_ITRx_SetConfig>
        break;
 800cbc6:	e002      	b.n	800cbce <HAL_TIM_ConfigClockSource+0x176>
      break;
 800cbc8:	46c0      	nop			; (mov r8, r8)
 800cbca:	e000      	b.n	800cbce <HAL_TIM_ConfigClockSource+0x176>
      break;
 800cbcc:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	223d      	movs	r2, #61	; 0x3d
 800cbd2:	2101      	movs	r1, #1
 800cbd4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	223c      	movs	r2, #60	; 0x3c
 800cbda:	2100      	movs	r1, #0
 800cbdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cbde:	2300      	movs	r3, #0
}
 800cbe0:	0018      	movs	r0, r3
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	b004      	add	sp, #16
 800cbe6:	bd80      	pop	{r7, pc}
 800cbe8:	ffceff88 	.word	0xffceff88
 800cbec:	ffff00ff 	.word	0xffff00ff

0800cbf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b084      	sub	sp, #16
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	4a34      	ldr	r2, [pc, #208]	; (800ccd4 <TIM_Base_SetConfig+0xe4>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d008      	beq.n	800cc1a <TIM_Base_SetConfig+0x2a>
 800cc08:	687a      	ldr	r2, [r7, #4]
 800cc0a:	2380      	movs	r3, #128	; 0x80
 800cc0c:	05db      	lsls	r3, r3, #23
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d003      	beq.n	800cc1a <TIM_Base_SetConfig+0x2a>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	4a30      	ldr	r2, [pc, #192]	; (800ccd8 <TIM_Base_SetConfig+0xe8>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d108      	bne.n	800cc2c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	2270      	movs	r2, #112	; 0x70
 800cc1e:	4393      	bics	r3, r2
 800cc20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	685b      	ldr	r3, [r3, #4]
 800cc26:	68fa      	ldr	r2, [r7, #12]
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	4a29      	ldr	r2, [pc, #164]	; (800ccd4 <TIM_Base_SetConfig+0xe4>)
 800cc30:	4293      	cmp	r3, r2
 800cc32:	d018      	beq.n	800cc66 <TIM_Base_SetConfig+0x76>
 800cc34:	687a      	ldr	r2, [r7, #4]
 800cc36:	2380      	movs	r3, #128	; 0x80
 800cc38:	05db      	lsls	r3, r3, #23
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d013      	beq.n	800cc66 <TIM_Base_SetConfig+0x76>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	4a25      	ldr	r2, [pc, #148]	; (800ccd8 <TIM_Base_SetConfig+0xe8>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d00f      	beq.n	800cc66 <TIM_Base_SetConfig+0x76>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	4a24      	ldr	r2, [pc, #144]	; (800ccdc <TIM_Base_SetConfig+0xec>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d00b      	beq.n	800cc66 <TIM_Base_SetConfig+0x76>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	4a23      	ldr	r2, [pc, #140]	; (800cce0 <TIM_Base_SetConfig+0xf0>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d007      	beq.n	800cc66 <TIM_Base_SetConfig+0x76>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	4a22      	ldr	r2, [pc, #136]	; (800cce4 <TIM_Base_SetConfig+0xf4>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d003      	beq.n	800cc66 <TIM_Base_SetConfig+0x76>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	4a21      	ldr	r2, [pc, #132]	; (800cce8 <TIM_Base_SetConfig+0xf8>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d108      	bne.n	800cc78 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	4a20      	ldr	r2, [pc, #128]	; (800ccec <TIM_Base_SetConfig+0xfc>)
 800cc6a:	4013      	ands	r3, r2
 800cc6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	68db      	ldr	r3, [r3, #12]
 800cc72:	68fa      	ldr	r2, [r7, #12]
 800cc74:	4313      	orrs	r3, r2
 800cc76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2280      	movs	r2, #128	; 0x80
 800cc7c:	4393      	bics	r3, r2
 800cc7e:	001a      	movs	r2, r3
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	695b      	ldr	r3, [r3, #20]
 800cc84:	4313      	orrs	r3, r2
 800cc86:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	68fa      	ldr	r2, [r7, #12]
 800cc8c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	689a      	ldr	r2, [r3, #8]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	681a      	ldr	r2, [r3, #0]
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	4a0c      	ldr	r2, [pc, #48]	; (800ccd4 <TIM_Base_SetConfig+0xe4>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d00b      	beq.n	800ccbe <TIM_Base_SetConfig+0xce>
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	4a0d      	ldr	r2, [pc, #52]	; (800cce0 <TIM_Base_SetConfig+0xf0>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d007      	beq.n	800ccbe <TIM_Base_SetConfig+0xce>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	4a0c      	ldr	r2, [pc, #48]	; (800cce4 <TIM_Base_SetConfig+0xf4>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d003      	beq.n	800ccbe <TIM_Base_SetConfig+0xce>
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	4a0b      	ldr	r2, [pc, #44]	; (800cce8 <TIM_Base_SetConfig+0xf8>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d103      	bne.n	800ccc6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	691a      	ldr	r2, [r3, #16]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2201      	movs	r2, #1
 800ccca:	615a      	str	r2, [r3, #20]
}
 800cccc:	46c0      	nop			; (mov r8, r8)
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	b004      	add	sp, #16
 800ccd2:	bd80      	pop	{r7, pc}
 800ccd4:	40012c00 	.word	0x40012c00
 800ccd8:	40000400 	.word	0x40000400
 800ccdc:	40002000 	.word	0x40002000
 800cce0:	40014000 	.word	0x40014000
 800cce4:	40014400 	.word	0x40014400
 800cce8:	40014800 	.word	0x40014800
 800ccec:	fffffcff 	.word	0xfffffcff

0800ccf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b086      	sub	sp, #24
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6a1b      	ldr	r3, [r3, #32]
 800ccfe:	2201      	movs	r2, #1
 800cd00:	4393      	bics	r3, r2
 800cd02:	001a      	movs	r2, r3
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6a1b      	ldr	r3, [r3, #32]
 800cd0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	685b      	ldr	r3, [r3, #4]
 800cd12:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	699b      	ldr	r3, [r3, #24]
 800cd18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	4a32      	ldr	r2, [pc, #200]	; (800cde8 <TIM_OC1_SetConfig+0xf8>)
 800cd1e:	4013      	ands	r3, r2
 800cd20:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	2203      	movs	r2, #3
 800cd26:	4393      	bics	r3, r2
 800cd28:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	68fa      	ldr	r2, [r7, #12]
 800cd30:	4313      	orrs	r3, r2
 800cd32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	2202      	movs	r2, #2
 800cd38:	4393      	bics	r3, r2
 800cd3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	689b      	ldr	r3, [r3, #8]
 800cd40:	697a      	ldr	r2, [r7, #20]
 800cd42:	4313      	orrs	r3, r2
 800cd44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4a28      	ldr	r2, [pc, #160]	; (800cdec <TIM_OC1_SetConfig+0xfc>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d00b      	beq.n	800cd66 <TIM_OC1_SetConfig+0x76>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	4a27      	ldr	r2, [pc, #156]	; (800cdf0 <TIM_OC1_SetConfig+0x100>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d007      	beq.n	800cd66 <TIM_OC1_SetConfig+0x76>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	4a26      	ldr	r2, [pc, #152]	; (800cdf4 <TIM_OC1_SetConfig+0x104>)
 800cd5a:	4293      	cmp	r3, r2
 800cd5c:	d003      	beq.n	800cd66 <TIM_OC1_SetConfig+0x76>
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	4a25      	ldr	r2, [pc, #148]	; (800cdf8 <TIM_OC1_SetConfig+0x108>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d10c      	bne.n	800cd80 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	2208      	movs	r2, #8
 800cd6a:	4393      	bics	r3, r2
 800cd6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	68db      	ldr	r3, [r3, #12]
 800cd72:	697a      	ldr	r2, [r7, #20]
 800cd74:	4313      	orrs	r3, r2
 800cd76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	2204      	movs	r2, #4
 800cd7c:	4393      	bics	r3, r2
 800cd7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	4a1a      	ldr	r2, [pc, #104]	; (800cdec <TIM_OC1_SetConfig+0xfc>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d00b      	beq.n	800cda0 <TIM_OC1_SetConfig+0xb0>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	4a19      	ldr	r2, [pc, #100]	; (800cdf0 <TIM_OC1_SetConfig+0x100>)
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d007      	beq.n	800cda0 <TIM_OC1_SetConfig+0xb0>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	4a18      	ldr	r2, [pc, #96]	; (800cdf4 <TIM_OC1_SetConfig+0x104>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d003      	beq.n	800cda0 <TIM_OC1_SetConfig+0xb0>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	4a17      	ldr	r2, [pc, #92]	; (800cdf8 <TIM_OC1_SetConfig+0x108>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d111      	bne.n	800cdc4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	4a16      	ldr	r2, [pc, #88]	; (800cdfc <TIM_OC1_SetConfig+0x10c>)
 800cda4:	4013      	ands	r3, r2
 800cda6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	4a15      	ldr	r2, [pc, #84]	; (800ce00 <TIM_OC1_SetConfig+0x110>)
 800cdac:	4013      	ands	r3, r2
 800cdae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	695b      	ldr	r3, [r3, #20]
 800cdb4:	693a      	ldr	r2, [r7, #16]
 800cdb6:	4313      	orrs	r3, r2
 800cdb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	699b      	ldr	r3, [r3, #24]
 800cdbe:	693a      	ldr	r2, [r7, #16]
 800cdc0:	4313      	orrs	r3, r2
 800cdc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	693a      	ldr	r2, [r7, #16]
 800cdc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	68fa      	ldr	r2, [r7, #12]
 800cdce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	685a      	ldr	r2, [r3, #4]
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	697a      	ldr	r2, [r7, #20]
 800cddc:	621a      	str	r2, [r3, #32]
}
 800cdde:	46c0      	nop			; (mov r8, r8)
 800cde0:	46bd      	mov	sp, r7
 800cde2:	b006      	add	sp, #24
 800cde4:	bd80      	pop	{r7, pc}
 800cde6:	46c0      	nop			; (mov r8, r8)
 800cde8:	fffeff8f 	.word	0xfffeff8f
 800cdec:	40012c00 	.word	0x40012c00
 800cdf0:	40014000 	.word	0x40014000
 800cdf4:	40014400 	.word	0x40014400
 800cdf8:	40014800 	.word	0x40014800
 800cdfc:	fffffeff 	.word	0xfffffeff
 800ce00:	fffffdff 	.word	0xfffffdff

0800ce04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b086      	sub	sp, #24
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6a1b      	ldr	r3, [r3, #32]
 800ce12:	2210      	movs	r2, #16
 800ce14:	4393      	bics	r3, r2
 800ce16:	001a      	movs	r2, r3
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6a1b      	ldr	r3, [r3, #32]
 800ce20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	699b      	ldr	r3, [r3, #24]
 800ce2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	4a2e      	ldr	r2, [pc, #184]	; (800ceec <TIM_OC2_SetConfig+0xe8>)
 800ce32:	4013      	ands	r3, r2
 800ce34:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	4a2d      	ldr	r2, [pc, #180]	; (800cef0 <TIM_OC2_SetConfig+0xec>)
 800ce3a:	4013      	ands	r3, r2
 800ce3c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	021b      	lsls	r3, r3, #8
 800ce44:	68fa      	ldr	r2, [r7, #12]
 800ce46:	4313      	orrs	r3, r2
 800ce48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	2220      	movs	r2, #32
 800ce4e:	4393      	bics	r3, r2
 800ce50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	689b      	ldr	r3, [r3, #8]
 800ce56:	011b      	lsls	r3, r3, #4
 800ce58:	697a      	ldr	r2, [r7, #20]
 800ce5a:	4313      	orrs	r3, r2
 800ce5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	4a24      	ldr	r2, [pc, #144]	; (800cef4 <TIM_OC2_SetConfig+0xf0>)
 800ce62:	4293      	cmp	r3, r2
 800ce64:	d10d      	bne.n	800ce82 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	2280      	movs	r2, #128	; 0x80
 800ce6a:	4393      	bics	r3, r2
 800ce6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	68db      	ldr	r3, [r3, #12]
 800ce72:	011b      	lsls	r3, r3, #4
 800ce74:	697a      	ldr	r2, [r7, #20]
 800ce76:	4313      	orrs	r3, r2
 800ce78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	2240      	movs	r2, #64	; 0x40
 800ce7e:	4393      	bics	r3, r2
 800ce80:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	4a1b      	ldr	r2, [pc, #108]	; (800cef4 <TIM_OC2_SetConfig+0xf0>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d00b      	beq.n	800cea2 <TIM_OC2_SetConfig+0x9e>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	4a1a      	ldr	r2, [pc, #104]	; (800cef8 <TIM_OC2_SetConfig+0xf4>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d007      	beq.n	800cea2 <TIM_OC2_SetConfig+0x9e>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	4a19      	ldr	r2, [pc, #100]	; (800cefc <TIM_OC2_SetConfig+0xf8>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d003      	beq.n	800cea2 <TIM_OC2_SetConfig+0x9e>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	4a18      	ldr	r2, [pc, #96]	; (800cf00 <TIM_OC2_SetConfig+0xfc>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d113      	bne.n	800ceca <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	4a17      	ldr	r2, [pc, #92]	; (800cf04 <TIM_OC2_SetConfig+0x100>)
 800cea6:	4013      	ands	r3, r2
 800cea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	4a16      	ldr	r2, [pc, #88]	; (800cf08 <TIM_OC2_SetConfig+0x104>)
 800ceae:	4013      	ands	r3, r2
 800ceb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	695b      	ldr	r3, [r3, #20]
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	693a      	ldr	r2, [r7, #16]
 800ceba:	4313      	orrs	r3, r2
 800cebc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	699b      	ldr	r3, [r3, #24]
 800cec2:	009b      	lsls	r3, r3, #2
 800cec4:	693a      	ldr	r2, [r7, #16]
 800cec6:	4313      	orrs	r3, r2
 800cec8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	693a      	ldr	r2, [r7, #16]
 800cece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	68fa      	ldr	r2, [r7, #12]
 800ced4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	685a      	ldr	r2, [r3, #4]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	697a      	ldr	r2, [r7, #20]
 800cee2:	621a      	str	r2, [r3, #32]
}
 800cee4:	46c0      	nop			; (mov r8, r8)
 800cee6:	46bd      	mov	sp, r7
 800cee8:	b006      	add	sp, #24
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	feff8fff 	.word	0xfeff8fff
 800cef0:	fffffcff 	.word	0xfffffcff
 800cef4:	40012c00 	.word	0x40012c00
 800cef8:	40014000 	.word	0x40014000
 800cefc:	40014400 	.word	0x40014400
 800cf00:	40014800 	.word	0x40014800
 800cf04:	fffffbff 	.word	0xfffffbff
 800cf08:	fffff7ff 	.word	0xfffff7ff

0800cf0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b086      	sub	sp, #24
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6a1b      	ldr	r3, [r3, #32]
 800cf1a:	4a35      	ldr	r2, [pc, #212]	; (800cff0 <TIM_OC3_SetConfig+0xe4>)
 800cf1c:	401a      	ands	r2, r3
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6a1b      	ldr	r3, [r3, #32]
 800cf26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	69db      	ldr	r3, [r3, #28]
 800cf32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	4a2f      	ldr	r2, [pc, #188]	; (800cff4 <TIM_OC3_SetConfig+0xe8>)
 800cf38:	4013      	ands	r3, r2
 800cf3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2203      	movs	r2, #3
 800cf40:	4393      	bics	r3, r2
 800cf42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	68fa      	ldr	r2, [r7, #12]
 800cf4a:	4313      	orrs	r3, r2
 800cf4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	4a29      	ldr	r2, [pc, #164]	; (800cff8 <TIM_OC3_SetConfig+0xec>)
 800cf52:	4013      	ands	r3, r2
 800cf54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	689b      	ldr	r3, [r3, #8]
 800cf5a:	021b      	lsls	r3, r3, #8
 800cf5c:	697a      	ldr	r2, [r7, #20]
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	4a25      	ldr	r2, [pc, #148]	; (800cffc <TIM_OC3_SetConfig+0xf0>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d10d      	bne.n	800cf86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	4a24      	ldr	r2, [pc, #144]	; (800d000 <TIM_OC3_SetConfig+0xf4>)
 800cf6e:	4013      	ands	r3, r2
 800cf70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	68db      	ldr	r3, [r3, #12]
 800cf76:	021b      	lsls	r3, r3, #8
 800cf78:	697a      	ldr	r2, [r7, #20]
 800cf7a:	4313      	orrs	r3, r2
 800cf7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	4a20      	ldr	r2, [pc, #128]	; (800d004 <TIM_OC3_SetConfig+0xf8>)
 800cf82:	4013      	ands	r3, r2
 800cf84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	4a1c      	ldr	r2, [pc, #112]	; (800cffc <TIM_OC3_SetConfig+0xf0>)
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d00b      	beq.n	800cfa6 <TIM_OC3_SetConfig+0x9a>
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	4a1d      	ldr	r2, [pc, #116]	; (800d008 <TIM_OC3_SetConfig+0xfc>)
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d007      	beq.n	800cfa6 <TIM_OC3_SetConfig+0x9a>
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	4a1c      	ldr	r2, [pc, #112]	; (800d00c <TIM_OC3_SetConfig+0x100>)
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	d003      	beq.n	800cfa6 <TIM_OC3_SetConfig+0x9a>
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	4a1b      	ldr	r2, [pc, #108]	; (800d010 <TIM_OC3_SetConfig+0x104>)
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	d113      	bne.n	800cfce <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	4a1a      	ldr	r2, [pc, #104]	; (800d014 <TIM_OC3_SetConfig+0x108>)
 800cfaa:	4013      	ands	r3, r2
 800cfac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	4a19      	ldr	r2, [pc, #100]	; (800d018 <TIM_OC3_SetConfig+0x10c>)
 800cfb2:	4013      	ands	r3, r2
 800cfb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	695b      	ldr	r3, [r3, #20]
 800cfba:	011b      	lsls	r3, r3, #4
 800cfbc:	693a      	ldr	r2, [r7, #16]
 800cfbe:	4313      	orrs	r3, r2
 800cfc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	699b      	ldr	r3, [r3, #24]
 800cfc6:	011b      	lsls	r3, r3, #4
 800cfc8:	693a      	ldr	r2, [r7, #16]
 800cfca:	4313      	orrs	r3, r2
 800cfcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	693a      	ldr	r2, [r7, #16]
 800cfd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	68fa      	ldr	r2, [r7, #12]
 800cfd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	685a      	ldr	r2, [r3, #4]
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	697a      	ldr	r2, [r7, #20]
 800cfe6:	621a      	str	r2, [r3, #32]
}
 800cfe8:	46c0      	nop			; (mov r8, r8)
 800cfea:	46bd      	mov	sp, r7
 800cfec:	b006      	add	sp, #24
 800cfee:	bd80      	pop	{r7, pc}
 800cff0:	fffffeff 	.word	0xfffffeff
 800cff4:	fffeff8f 	.word	0xfffeff8f
 800cff8:	fffffdff 	.word	0xfffffdff
 800cffc:	40012c00 	.word	0x40012c00
 800d000:	fffff7ff 	.word	0xfffff7ff
 800d004:	fffffbff 	.word	0xfffffbff
 800d008:	40014000 	.word	0x40014000
 800d00c:	40014400 	.word	0x40014400
 800d010:	40014800 	.word	0x40014800
 800d014:	ffffefff 	.word	0xffffefff
 800d018:	ffffdfff 	.word	0xffffdfff

0800d01c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b086      	sub	sp, #24
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6a1b      	ldr	r3, [r3, #32]
 800d02a:	4a28      	ldr	r2, [pc, #160]	; (800d0cc <TIM_OC4_SetConfig+0xb0>)
 800d02c:	401a      	ands	r2, r3
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6a1b      	ldr	r3, [r3, #32]
 800d036:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	685b      	ldr	r3, [r3, #4]
 800d03c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	69db      	ldr	r3, [r3, #28]
 800d042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	4a22      	ldr	r2, [pc, #136]	; (800d0d0 <TIM_OC4_SetConfig+0xb4>)
 800d048:	4013      	ands	r3, r2
 800d04a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	4a21      	ldr	r2, [pc, #132]	; (800d0d4 <TIM_OC4_SetConfig+0xb8>)
 800d050:	4013      	ands	r3, r2
 800d052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	021b      	lsls	r3, r3, #8
 800d05a:	68fa      	ldr	r2, [r7, #12]
 800d05c:	4313      	orrs	r3, r2
 800d05e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	4a1d      	ldr	r2, [pc, #116]	; (800d0d8 <TIM_OC4_SetConfig+0xbc>)
 800d064:	4013      	ands	r3, r2
 800d066:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	689b      	ldr	r3, [r3, #8]
 800d06c:	031b      	lsls	r3, r3, #12
 800d06e:	693a      	ldr	r2, [r7, #16]
 800d070:	4313      	orrs	r3, r2
 800d072:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	4a19      	ldr	r2, [pc, #100]	; (800d0dc <TIM_OC4_SetConfig+0xc0>)
 800d078:	4293      	cmp	r3, r2
 800d07a:	d00b      	beq.n	800d094 <TIM_OC4_SetConfig+0x78>
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	4a18      	ldr	r2, [pc, #96]	; (800d0e0 <TIM_OC4_SetConfig+0xc4>)
 800d080:	4293      	cmp	r3, r2
 800d082:	d007      	beq.n	800d094 <TIM_OC4_SetConfig+0x78>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	4a17      	ldr	r2, [pc, #92]	; (800d0e4 <TIM_OC4_SetConfig+0xc8>)
 800d088:	4293      	cmp	r3, r2
 800d08a:	d003      	beq.n	800d094 <TIM_OC4_SetConfig+0x78>
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	4a16      	ldr	r2, [pc, #88]	; (800d0e8 <TIM_OC4_SetConfig+0xcc>)
 800d090:	4293      	cmp	r3, r2
 800d092:	d109      	bne.n	800d0a8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	4a15      	ldr	r2, [pc, #84]	; (800d0ec <TIM_OC4_SetConfig+0xd0>)
 800d098:	4013      	ands	r3, r2
 800d09a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	695b      	ldr	r3, [r3, #20]
 800d0a0:	019b      	lsls	r3, r3, #6
 800d0a2:	697a      	ldr	r2, [r7, #20]
 800d0a4:	4313      	orrs	r3, r2
 800d0a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	697a      	ldr	r2, [r7, #20]
 800d0ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	68fa      	ldr	r2, [r7, #12]
 800d0b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	685a      	ldr	r2, [r3, #4]
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	693a      	ldr	r2, [r7, #16]
 800d0c0:	621a      	str	r2, [r3, #32]
}
 800d0c2:	46c0      	nop			; (mov r8, r8)
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	b006      	add	sp, #24
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	46c0      	nop			; (mov r8, r8)
 800d0cc:	ffffefff 	.word	0xffffefff
 800d0d0:	feff8fff 	.word	0xfeff8fff
 800d0d4:	fffffcff 	.word	0xfffffcff
 800d0d8:	ffffdfff 	.word	0xffffdfff
 800d0dc:	40012c00 	.word	0x40012c00
 800d0e0:	40014000 	.word	0x40014000
 800d0e4:	40014400 	.word	0x40014400
 800d0e8:	40014800 	.word	0x40014800
 800d0ec:	ffffbfff 	.word	0xffffbfff

0800d0f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b086      	sub	sp, #24
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6a1b      	ldr	r3, [r3, #32]
 800d0fe:	4a25      	ldr	r2, [pc, #148]	; (800d194 <TIM_OC5_SetConfig+0xa4>)
 800d100:	401a      	ands	r2, r3
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6a1b      	ldr	r3, [r3, #32]
 800d10a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	4a1f      	ldr	r2, [pc, #124]	; (800d198 <TIM_OC5_SetConfig+0xa8>)
 800d11c:	4013      	ands	r3, r2
 800d11e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	68fa      	ldr	r2, [r7, #12]
 800d126:	4313      	orrs	r3, r2
 800d128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	4a1b      	ldr	r2, [pc, #108]	; (800d19c <TIM_OC5_SetConfig+0xac>)
 800d12e:	4013      	ands	r3, r2
 800d130:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	689b      	ldr	r3, [r3, #8]
 800d136:	041b      	lsls	r3, r3, #16
 800d138:	693a      	ldr	r2, [r7, #16]
 800d13a:	4313      	orrs	r3, r2
 800d13c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	4a17      	ldr	r2, [pc, #92]	; (800d1a0 <TIM_OC5_SetConfig+0xb0>)
 800d142:	4293      	cmp	r3, r2
 800d144:	d00b      	beq.n	800d15e <TIM_OC5_SetConfig+0x6e>
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	4a16      	ldr	r2, [pc, #88]	; (800d1a4 <TIM_OC5_SetConfig+0xb4>)
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d007      	beq.n	800d15e <TIM_OC5_SetConfig+0x6e>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	4a15      	ldr	r2, [pc, #84]	; (800d1a8 <TIM_OC5_SetConfig+0xb8>)
 800d152:	4293      	cmp	r3, r2
 800d154:	d003      	beq.n	800d15e <TIM_OC5_SetConfig+0x6e>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	4a14      	ldr	r2, [pc, #80]	; (800d1ac <TIM_OC5_SetConfig+0xbc>)
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d109      	bne.n	800d172 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	4a0c      	ldr	r2, [pc, #48]	; (800d194 <TIM_OC5_SetConfig+0xa4>)
 800d162:	4013      	ands	r3, r2
 800d164:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	695b      	ldr	r3, [r3, #20]
 800d16a:	021b      	lsls	r3, r3, #8
 800d16c:	697a      	ldr	r2, [r7, #20]
 800d16e:	4313      	orrs	r3, r2
 800d170:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	697a      	ldr	r2, [r7, #20]
 800d176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	68fa      	ldr	r2, [r7, #12]
 800d17c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	685a      	ldr	r2, [r3, #4]
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	693a      	ldr	r2, [r7, #16]
 800d18a:	621a      	str	r2, [r3, #32]
}
 800d18c:	46c0      	nop			; (mov r8, r8)
 800d18e:	46bd      	mov	sp, r7
 800d190:	b006      	add	sp, #24
 800d192:	bd80      	pop	{r7, pc}
 800d194:	fffeffff 	.word	0xfffeffff
 800d198:	fffeff8f 	.word	0xfffeff8f
 800d19c:	fffdffff 	.word	0xfffdffff
 800d1a0:	40012c00 	.word	0x40012c00
 800d1a4:	40014000 	.word	0x40014000
 800d1a8:	40014400 	.word	0x40014400
 800d1ac:	40014800 	.word	0x40014800

0800d1b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b086      	sub	sp, #24
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6a1b      	ldr	r3, [r3, #32]
 800d1be:	4a26      	ldr	r2, [pc, #152]	; (800d258 <TIM_OC6_SetConfig+0xa8>)
 800d1c0:	401a      	ands	r2, r3
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6a1b      	ldr	r3, [r3, #32]
 800d1ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	4a20      	ldr	r2, [pc, #128]	; (800d25c <TIM_OC6_SetConfig+0xac>)
 800d1dc:	4013      	ands	r3, r2
 800d1de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	021b      	lsls	r3, r3, #8
 800d1e6:	68fa      	ldr	r2, [r7, #12]
 800d1e8:	4313      	orrs	r3, r2
 800d1ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	4a1c      	ldr	r2, [pc, #112]	; (800d260 <TIM_OC6_SetConfig+0xb0>)
 800d1f0:	4013      	ands	r3, r2
 800d1f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	689b      	ldr	r3, [r3, #8]
 800d1f8:	051b      	lsls	r3, r3, #20
 800d1fa:	693a      	ldr	r2, [r7, #16]
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	4a18      	ldr	r2, [pc, #96]	; (800d264 <TIM_OC6_SetConfig+0xb4>)
 800d204:	4293      	cmp	r3, r2
 800d206:	d00b      	beq.n	800d220 <TIM_OC6_SetConfig+0x70>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	4a17      	ldr	r2, [pc, #92]	; (800d268 <TIM_OC6_SetConfig+0xb8>)
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d007      	beq.n	800d220 <TIM_OC6_SetConfig+0x70>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	4a16      	ldr	r2, [pc, #88]	; (800d26c <TIM_OC6_SetConfig+0xbc>)
 800d214:	4293      	cmp	r3, r2
 800d216:	d003      	beq.n	800d220 <TIM_OC6_SetConfig+0x70>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	4a15      	ldr	r2, [pc, #84]	; (800d270 <TIM_OC6_SetConfig+0xc0>)
 800d21c:	4293      	cmp	r3, r2
 800d21e:	d109      	bne.n	800d234 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	4a14      	ldr	r2, [pc, #80]	; (800d274 <TIM_OC6_SetConfig+0xc4>)
 800d224:	4013      	ands	r3, r2
 800d226:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	695b      	ldr	r3, [r3, #20]
 800d22c:	029b      	lsls	r3, r3, #10
 800d22e:	697a      	ldr	r2, [r7, #20]
 800d230:	4313      	orrs	r3, r2
 800d232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	697a      	ldr	r2, [r7, #20]
 800d238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	68fa      	ldr	r2, [r7, #12]
 800d23e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	685a      	ldr	r2, [r3, #4]
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	693a      	ldr	r2, [r7, #16]
 800d24c:	621a      	str	r2, [r3, #32]
}
 800d24e:	46c0      	nop			; (mov r8, r8)
 800d250:	46bd      	mov	sp, r7
 800d252:	b006      	add	sp, #24
 800d254:	bd80      	pop	{r7, pc}
 800d256:	46c0      	nop			; (mov r8, r8)
 800d258:	ffefffff 	.word	0xffefffff
 800d25c:	feff8fff 	.word	0xfeff8fff
 800d260:	ffdfffff 	.word	0xffdfffff
 800d264:	40012c00 	.word	0x40012c00
 800d268:	40014000 	.word	0x40014000
 800d26c:	40014400 	.word	0x40014400
 800d270:	40014800 	.word	0x40014800
 800d274:	fffbffff 	.word	0xfffbffff

0800d278 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b086      	sub	sp, #24
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	60f8      	str	r0, [r7, #12]
 800d280:	60b9      	str	r1, [r7, #8]
 800d282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	6a1b      	ldr	r3, [r3, #32]
 800d288:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	6a1b      	ldr	r3, [r3, #32]
 800d28e:	2201      	movs	r2, #1
 800d290:	4393      	bics	r3, r2
 800d292:	001a      	movs	r2, r3
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	699b      	ldr	r3, [r3, #24]
 800d29c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d29e:	693b      	ldr	r3, [r7, #16]
 800d2a0:	22f0      	movs	r2, #240	; 0xf0
 800d2a2:	4393      	bics	r3, r2
 800d2a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	011b      	lsls	r3, r3, #4
 800d2aa:	693a      	ldr	r2, [r7, #16]
 800d2ac:	4313      	orrs	r3, r2
 800d2ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d2b0:	697b      	ldr	r3, [r7, #20]
 800d2b2:	220a      	movs	r2, #10
 800d2b4:	4393      	bics	r3, r2
 800d2b6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d2b8:	697a      	ldr	r2, [r7, #20]
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	693a      	ldr	r2, [r7, #16]
 800d2c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	697a      	ldr	r2, [r7, #20]
 800d2ca:	621a      	str	r2, [r3, #32]
}
 800d2cc:	46c0      	nop			; (mov r8, r8)
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	b006      	add	sp, #24
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b086      	sub	sp, #24
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	60f8      	str	r0, [r7, #12]
 800d2dc:	60b9      	str	r1, [r7, #8]
 800d2de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	6a1b      	ldr	r3, [r3, #32]
 800d2e4:	2210      	movs	r2, #16
 800d2e6:	4393      	bics	r3, r2
 800d2e8:	001a      	movs	r2, r3
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	699b      	ldr	r3, [r3, #24]
 800d2f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	6a1b      	ldr	r3, [r3, #32]
 800d2f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d2fa:	697b      	ldr	r3, [r7, #20]
 800d2fc:	4a0d      	ldr	r2, [pc, #52]	; (800d334 <TIM_TI2_ConfigInputStage+0x60>)
 800d2fe:	4013      	ands	r3, r2
 800d300:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	031b      	lsls	r3, r3, #12
 800d306:	697a      	ldr	r2, [r7, #20]
 800d308:	4313      	orrs	r3, r2
 800d30a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	22a0      	movs	r2, #160	; 0xa0
 800d310:	4393      	bics	r3, r2
 800d312:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	011b      	lsls	r3, r3, #4
 800d318:	693a      	ldr	r2, [r7, #16]
 800d31a:	4313      	orrs	r3, r2
 800d31c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	697a      	ldr	r2, [r7, #20]
 800d322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	693a      	ldr	r2, [r7, #16]
 800d328:	621a      	str	r2, [r3, #32]
}
 800d32a:	46c0      	nop			; (mov r8, r8)
 800d32c:	46bd      	mov	sp, r7
 800d32e:	b006      	add	sp, #24
 800d330:	bd80      	pop	{r7, pc}
 800d332:	46c0      	nop			; (mov r8, r8)
 800d334:	ffff0fff 	.word	0xffff0fff

0800d338 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b084      	sub	sp, #16
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	689b      	ldr	r3, [r3, #8]
 800d346:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	4a08      	ldr	r2, [pc, #32]	; (800d36c <TIM_ITRx_SetConfig+0x34>)
 800d34c:	4013      	ands	r3, r2
 800d34e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d350:	683a      	ldr	r2, [r7, #0]
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	4313      	orrs	r3, r2
 800d356:	2207      	movs	r2, #7
 800d358:	4313      	orrs	r3, r2
 800d35a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	68fa      	ldr	r2, [r7, #12]
 800d360:	609a      	str	r2, [r3, #8]
}
 800d362:	46c0      	nop			; (mov r8, r8)
 800d364:	46bd      	mov	sp, r7
 800d366:	b004      	add	sp, #16
 800d368:	bd80      	pop	{r7, pc}
 800d36a:	46c0      	nop			; (mov r8, r8)
 800d36c:	ffcfff8f 	.word	0xffcfff8f

0800d370 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b086      	sub	sp, #24
 800d374:	af00      	add	r7, sp, #0
 800d376:	60f8      	str	r0, [r7, #12]
 800d378:	60b9      	str	r1, [r7, #8]
 800d37a:	607a      	str	r2, [r7, #4]
 800d37c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	689b      	ldr	r3, [r3, #8]
 800d382:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	4a09      	ldr	r2, [pc, #36]	; (800d3ac <TIM_ETR_SetConfig+0x3c>)
 800d388:	4013      	ands	r3, r2
 800d38a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	021a      	lsls	r2, r3, #8
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	431a      	orrs	r2, r3
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	4313      	orrs	r3, r2
 800d398:	697a      	ldr	r2, [r7, #20]
 800d39a:	4313      	orrs	r3, r2
 800d39c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	697a      	ldr	r2, [r7, #20]
 800d3a2:	609a      	str	r2, [r3, #8]
}
 800d3a4:	46c0      	nop			; (mov r8, r8)
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	b006      	add	sp, #24
 800d3aa:	bd80      	pop	{r7, pc}
 800d3ac:	ffff00ff 	.word	0xffff00ff

0800d3b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b086      	sub	sp, #24
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	60f8      	str	r0, [r7, #12]
 800d3b8:	60b9      	str	r1, [r7, #8]
 800d3ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	221f      	movs	r2, #31
 800d3c0:	4013      	ands	r3, r2
 800d3c2:	2201      	movs	r2, #1
 800d3c4:	409a      	lsls	r2, r3
 800d3c6:	0013      	movs	r3, r2
 800d3c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	6a1b      	ldr	r3, [r3, #32]
 800d3ce:	697a      	ldr	r2, [r7, #20]
 800d3d0:	43d2      	mvns	r2, r2
 800d3d2:	401a      	ands	r2, r3
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	6a1a      	ldr	r2, [r3, #32]
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	211f      	movs	r1, #31
 800d3e0:	400b      	ands	r3, r1
 800d3e2:	6879      	ldr	r1, [r7, #4]
 800d3e4:	4099      	lsls	r1, r3
 800d3e6:	000b      	movs	r3, r1
 800d3e8:	431a      	orrs	r2, r3
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	621a      	str	r2, [r3, #32]
}
 800d3ee:	46c0      	nop			; (mov r8, r8)
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	b006      	add	sp, #24
 800d3f4:	bd80      	pop	{r7, pc}
	...

0800d3f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b084      	sub	sp, #16
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	223c      	movs	r2, #60	; 0x3c
 800d406:	5c9b      	ldrb	r3, [r3, r2]
 800d408:	2b01      	cmp	r3, #1
 800d40a:	d101      	bne.n	800d410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d40c:	2302      	movs	r3, #2
 800d40e:	e055      	b.n	800d4bc <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	223c      	movs	r2, #60	; 0x3c
 800d414:	2101      	movs	r1, #1
 800d416:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	223d      	movs	r2, #61	; 0x3d
 800d41c:	2102      	movs	r1, #2
 800d41e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	685b      	ldr	r3, [r3, #4]
 800d426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	689b      	ldr	r3, [r3, #8]
 800d42e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	4a23      	ldr	r2, [pc, #140]	; (800d4c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800d436:	4293      	cmp	r3, r2
 800d438:	d108      	bne.n	800d44c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	4a22      	ldr	r2, [pc, #136]	; (800d4c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800d43e:	4013      	ands	r3, r2
 800d440:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	685b      	ldr	r3, [r3, #4]
 800d446:	68fa      	ldr	r2, [r7, #12]
 800d448:	4313      	orrs	r3, r2
 800d44a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2270      	movs	r2, #112	; 0x70
 800d450:	4393      	bics	r3, r2
 800d452:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	68fa      	ldr	r2, [r7, #12]
 800d45a:	4313      	orrs	r3, r2
 800d45c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	68fa      	ldr	r2, [r7, #12]
 800d464:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	4a16      	ldr	r2, [pc, #88]	; (800d4c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d00f      	beq.n	800d490 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681a      	ldr	r2, [r3, #0]
 800d474:	2380      	movs	r3, #128	; 0x80
 800d476:	05db      	lsls	r3, r3, #23
 800d478:	429a      	cmp	r2, r3
 800d47a:	d009      	beq.n	800d490 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4a12      	ldr	r2, [pc, #72]	; (800d4cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800d482:	4293      	cmp	r3, r2
 800d484:	d004      	beq.n	800d490 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	4a11      	ldr	r2, [pc, #68]	; (800d4d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d10c      	bne.n	800d4aa <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	2280      	movs	r2, #128	; 0x80
 800d494:	4393      	bics	r3, r2
 800d496:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	689b      	ldr	r3, [r3, #8]
 800d49c:	68ba      	ldr	r2, [r7, #8]
 800d49e:	4313      	orrs	r3, r2
 800d4a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	68ba      	ldr	r2, [r7, #8]
 800d4a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	223d      	movs	r2, #61	; 0x3d
 800d4ae:	2101      	movs	r1, #1
 800d4b0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	223c      	movs	r2, #60	; 0x3c
 800d4b6:	2100      	movs	r1, #0
 800d4b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d4ba:	2300      	movs	r3, #0
}
 800d4bc:	0018      	movs	r0, r3
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	b004      	add	sp, #16
 800d4c2:	bd80      	pop	{r7, pc}
 800d4c4:	40012c00 	.word	0x40012c00
 800d4c8:	ff0fffff 	.word	0xff0fffff
 800d4cc:	40000400 	.word	0x40000400
 800d4d0:	40014000 	.word	0x40014000

0800d4d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b084      	sub	sp, #16
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	223c      	movs	r2, #60	; 0x3c
 800d4e6:	5c9b      	ldrb	r3, [r3, r2]
 800d4e8:	2b01      	cmp	r3, #1
 800d4ea:	d101      	bne.n	800d4f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d4ec:	2302      	movs	r3, #2
 800d4ee:	e079      	b.n	800d5e4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	223c      	movs	r2, #60	; 0x3c
 800d4f4:	2101      	movs	r1, #1
 800d4f6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	22ff      	movs	r2, #255	; 0xff
 800d4fc:	4393      	bics	r3, r2
 800d4fe:	001a      	movs	r2, r3
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	68db      	ldr	r3, [r3, #12]
 800d504:	4313      	orrs	r3, r2
 800d506:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	4a38      	ldr	r2, [pc, #224]	; (800d5ec <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800d50c:	401a      	ands	r2, r3
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	689b      	ldr	r3, [r3, #8]
 800d512:	4313      	orrs	r3, r2
 800d514:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	4a35      	ldr	r2, [pc, #212]	; (800d5f0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800d51a:	401a      	ands	r2, r3
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	685b      	ldr	r3, [r3, #4]
 800d520:	4313      	orrs	r3, r2
 800d522:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	4a33      	ldr	r2, [pc, #204]	; (800d5f4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800d528:	401a      	ands	r2, r3
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	4313      	orrs	r3, r2
 800d530:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	4a30      	ldr	r2, [pc, #192]	; (800d5f8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800d536:	401a      	ands	r2, r3
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	691b      	ldr	r3, [r3, #16]
 800d53c:	4313      	orrs	r3, r2
 800d53e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	4a2e      	ldr	r2, [pc, #184]	; (800d5fc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800d544:	401a      	ands	r2, r3
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	695b      	ldr	r3, [r3, #20]
 800d54a:	4313      	orrs	r3, r2
 800d54c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	4a2b      	ldr	r2, [pc, #172]	; (800d600 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800d552:	401a      	ands	r2, r3
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d558:	4313      	orrs	r3, r2
 800d55a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	4a29      	ldr	r2, [pc, #164]	; (800d604 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800d560:	401a      	ands	r2, r3
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	699b      	ldr	r3, [r3, #24]
 800d566:	041b      	lsls	r3, r3, #16
 800d568:	4313      	orrs	r3, r2
 800d56a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	4a25      	ldr	r2, [pc, #148]	; (800d608 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800d572:	4293      	cmp	r3, r2
 800d574:	d106      	bne.n	800d584 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	4a24      	ldr	r2, [pc, #144]	; (800d60c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800d57a:	401a      	ands	r2, r3
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	69db      	ldr	r3, [r3, #28]
 800d580:	4313      	orrs	r3, r2
 800d582:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	4a1f      	ldr	r2, [pc, #124]	; (800d608 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800d58a:	4293      	cmp	r3, r2
 800d58c:	d121      	bne.n	800d5d2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	4a1f      	ldr	r2, [pc, #124]	; (800d610 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800d592:	401a      	ands	r2, r3
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d598:	051b      	lsls	r3, r3, #20
 800d59a:	4313      	orrs	r3, r2
 800d59c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	4a1c      	ldr	r2, [pc, #112]	; (800d614 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800d5a2:	401a      	ands	r2, r3
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	6a1b      	ldr	r3, [r3, #32]
 800d5a8:	4313      	orrs	r3, r2
 800d5aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	4a1a      	ldr	r2, [pc, #104]	; (800d618 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800d5b0:	401a      	ands	r2, r3
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5b6:	4313      	orrs	r3, r2
 800d5b8:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	4a12      	ldr	r2, [pc, #72]	; (800d608 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800d5c0:	4293      	cmp	r3, r2
 800d5c2:	d106      	bne.n	800d5d2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	4a15      	ldr	r2, [pc, #84]	; (800d61c <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800d5c8:	401a      	ands	r2, r3
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ce:	4313      	orrs	r3, r2
 800d5d0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	68fa      	ldr	r2, [r7, #12]
 800d5d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	223c      	movs	r2, #60	; 0x3c
 800d5de:	2100      	movs	r1, #0
 800d5e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d5e2:	2300      	movs	r3, #0
}
 800d5e4:	0018      	movs	r0, r3
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	b004      	add	sp, #16
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	fffffcff 	.word	0xfffffcff
 800d5f0:	fffffbff 	.word	0xfffffbff
 800d5f4:	fffff7ff 	.word	0xfffff7ff
 800d5f8:	ffffefff 	.word	0xffffefff
 800d5fc:	ffffdfff 	.word	0xffffdfff
 800d600:	ffffbfff 	.word	0xffffbfff
 800d604:	fff0ffff 	.word	0xfff0ffff
 800d608:	40012c00 	.word	0x40012c00
 800d60c:	efffffff 	.word	0xefffffff
 800d610:	ff0fffff 	.word	0xff0fffff
 800d614:	feffffff 	.word	0xfeffffff
 800d618:	fdffffff 	.word	0xfdffffff
 800d61c:	dfffffff 	.word	0xdfffffff

0800d620 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800d620:	b580      	push	{r7, lr}
 800d622:	b08a      	sub	sp, #40	; 0x28
 800d624:	af00      	add	r7, sp, #0
 800d626:	60f8      	str	r0, [r7, #12]
 800d628:	60b9      	str	r1, [r7, #8]
 800d62a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	223c      	movs	r2, #60	; 0x3c
 800d630:	5c9b      	ldrb	r3, [r3, r2]
 800d632:	2b01      	cmp	r3, #1
 800d634:	d101      	bne.n	800d63a <HAL_TIMEx_ConfigBreakInput+0x1a>
 800d636:	2302      	movs	r3, #2
 800d638:	e08e      	b.n	800d758 <HAL_TIMEx_ConfigBreakInput+0x138>
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	223c      	movs	r2, #60	; 0x3c
 800d63e:	2101      	movs	r1, #1
 800d640:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	2b04      	cmp	r3, #4
 800d648:	d019      	beq.n	800d67e <HAL_TIMEx_ConfigBreakInput+0x5e>
 800d64a:	d822      	bhi.n	800d692 <HAL_TIMEx_ConfigBreakInput+0x72>
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	d002      	beq.n	800d656 <HAL_TIMEx_ConfigBreakInput+0x36>
 800d650:	2b02      	cmp	r3, #2
 800d652:	d00a      	beq.n	800d66a <HAL_TIMEx_ConfigBreakInput+0x4a>
 800d654:	e01d      	b.n	800d692 <HAL_TIMEx_ConfigBreakInput+0x72>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800d656:	2301      	movs	r3, #1
 800d658:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800d65a:	2300      	movs	r3, #0
 800d65c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800d65e:	2380      	movs	r3, #128	; 0x80
 800d660:	009b      	lsls	r3, r3, #2
 800d662:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800d664:	2309      	movs	r3, #9
 800d666:	61bb      	str	r3, [r7, #24]
      break;
 800d668:	e01c      	b.n	800d6a4 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800d66a:	2302      	movs	r3, #2
 800d66c:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800d66e:	2301      	movs	r3, #1
 800d670:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800d672:	2380      	movs	r3, #128	; 0x80
 800d674:	00db      	lsls	r3, r3, #3
 800d676:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800d678:	230a      	movs	r3, #10
 800d67a:	61bb      	str	r3, [r7, #24]
      break;
 800d67c:	e012      	b.n	800d6a4 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800d67e:	2304      	movs	r3, #4
 800d680:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800d682:	2302      	movs	r3, #2
 800d684:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800d686:	2380      	movs	r3, #128	; 0x80
 800d688:	011b      	lsls	r3, r3, #4
 800d68a:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800d68c:	230b      	movs	r3, #11
 800d68e:	61bb      	str	r3, [r7, #24]
      break;
 800d690:	e008      	b.n	800d6a4 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 800d692:	2300      	movs	r3, #0
 800d694:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_polarity_mask = 0U;
 800d696:	2300      	movs	r3, #0
 800d698:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = 0U;
 800d69a:	2300      	movs	r3, #0
 800d69c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	61bb      	str	r3, [r7, #24]
      break;
 800d6a2:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	2b01      	cmp	r3, #1
 800d6a8:	d003      	beq.n	800d6b2 <HAL_TIMEx_ConfigBreakInput+0x92>
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	2b02      	cmp	r3, #2
 800d6ae:	d027      	beq.n	800d700 <HAL_TIMEx_ConfigBreakInput+0xe0>
      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
      break;
    }
    default:
      break;
 800d6b0:	e04d      	b.n	800d74e <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF1;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d6b8:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 800d6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6bc:	43da      	mvns	r2, r3
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	4013      	ands	r3, r2
 800d6c2:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	685a      	ldr	r2, [r3, #4]
 800d6c8:	69fb      	ldr	r3, [r7, #28]
 800d6ca:	409a      	lsls	r2, r3
 800d6cc:	0013      	movs	r3, r2
 800d6ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6d0:	4013      	ands	r3, r2
 800d6d2:	697a      	ldr	r2, [r7, #20]
 800d6d4:	4313      	orrs	r3, r2
 800d6d6:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 800d6d8:	6a3b      	ldr	r3, [r7, #32]
 800d6da:	43da      	mvns	r2, r3
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	4013      	ands	r3, r2
 800d6e0:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	689a      	ldr	r2, [r3, #8]
 800d6e6:	69bb      	ldr	r3, [r7, #24]
 800d6e8:	409a      	lsls	r2, r3
 800d6ea:	0013      	movs	r3, r2
 800d6ec:	6a3a      	ldr	r2, [r7, #32]
 800d6ee:	4013      	ands	r3, r2
 800d6f0:	697a      	ldr	r2, [r7, #20]
 800d6f2:	4313      	orrs	r3, r2
 800d6f4:	617b      	str	r3, [r7, #20]
      htim->Instance->AF1 = tmporx;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	697a      	ldr	r2, [r7, #20]
 800d6fc:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800d6fe:	e026      	b.n	800d74e <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF2;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d706:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 800d708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70a:	43da      	mvns	r2, r3
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	4013      	ands	r3, r2
 800d710:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	685a      	ldr	r2, [r3, #4]
 800d716:	69fb      	ldr	r3, [r7, #28]
 800d718:	409a      	lsls	r2, r3
 800d71a:	0013      	movs	r3, r2
 800d71c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d71e:	4013      	ands	r3, r2
 800d720:	697a      	ldr	r2, [r7, #20]
 800d722:	4313      	orrs	r3, r2
 800d724:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 800d726:	6a3b      	ldr	r3, [r7, #32]
 800d728:	43da      	mvns	r2, r3
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	4013      	ands	r3, r2
 800d72e:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	689a      	ldr	r2, [r3, #8]
 800d734:	69bb      	ldr	r3, [r7, #24]
 800d736:	409a      	lsls	r2, r3
 800d738:	0013      	movs	r3, r2
 800d73a:	6a3a      	ldr	r2, [r7, #32]
 800d73c:	4013      	ands	r3, r2
 800d73e:	697a      	ldr	r2, [r7, #20]
 800d740:	4313      	orrs	r3, r2
 800d742:	617b      	str	r3, [r7, #20]
      htim->Instance->AF2 = tmporx;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	697a      	ldr	r2, [r7, #20]
 800d74a:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800d74c:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	223c      	movs	r2, #60	; 0x3c
 800d752:	2100      	movs	r1, #0
 800d754:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d756:	2300      	movs	r3, #0
}
 800d758:	0018      	movs	r0, r3
 800d75a:	46bd      	mov	sp, r7
 800d75c:	b00a      	add	sp, #40	; 0x28
 800d75e:	bd80      	pop	{r7, pc}

0800d760 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b082      	sub	sp, #8
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d101      	bne.n	800d772 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800d76e:	2301      	movs	r3, #1
 800d770:	e03f      	b.n	800d7f2 <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2259      	movs	r2, #89	; 0x59
 800d776:	5c9b      	ldrb	r3, [r3, r2]
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d107      	bne.n	800d78e <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2258      	movs	r2, #88	; 0x58
 800d782:	2100      	movs	r1, #0
 800d784:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	0018      	movs	r0, r3
 800d78a:	f7f9 fce3 	bl	8007154 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2259      	movs	r2, #89	; 0x59
 800d792:	2102      	movs	r1, #2
 800d794:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	2101      	movs	r1, #1
 800d7a2:	438a      	bics	r2, r1
 800d7a4:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	0018      	movs	r0, r3
 800d7aa:	f000 facf 	bl	800dd4c <USART_SetConfig>
 800d7ae:	0003      	movs	r3, r0
 800d7b0:	2b01      	cmp	r3, #1
 800d7b2:	d101      	bne.n	800d7b8 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	e01c      	b.n	800d7f2 <HAL_USART_Init+0x92>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	685a      	ldr	r2, [r3, #4]
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	490e      	ldr	r1, [pc, #56]	; (800d7fc <HAL_USART_Init+0x9c>)
 800d7c4:	400a      	ands	r2, r1
 800d7c6:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	689a      	ldr	r2, [r3, #8]
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	212a      	movs	r1, #42	; 0x2a
 800d7d4:	438a      	bics	r2, r1
 800d7d6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	681a      	ldr	r2, [r3, #0]
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	2101      	movs	r1, #1
 800d7e4:	430a      	orrs	r2, r1
 800d7e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	0018      	movs	r0, r3
 800d7ec:	f000 fd4a 	bl	800e284 <USART_CheckIdleState>
 800d7f0:	0003      	movs	r3, r0
}
 800d7f2:	0018      	movs	r0, r3
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	b002      	add	sp, #8
 800d7f8:	bd80      	pop	{r7, pc}
 800d7fa:	46c0      	nop			; (mov r8, r8)
 800d7fc:	ffffbfff 	.word	0xffffbfff

0800d800 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b08a      	sub	sp, #40	; 0x28
 800d804:	af02      	add	r7, sp, #8
 800d806:	60f8      	str	r0, [r7, #12]
 800d808:	60b9      	str	r1, [r7, #8]
 800d80a:	603b      	str	r3, [r7, #0]
 800d80c:	1dbb      	adds	r3, r7, #6
 800d80e:	801a      	strh	r2, [r3, #0]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	2259      	movs	r2, #89	; 0x59
 800d814:	5c9b      	ldrb	r3, [r3, r2]
 800d816:	b2db      	uxtb	r3, r3
 800d818:	2b01      	cmp	r3, #1
 800d81a:	d000      	beq.n	800d81e <HAL_USART_Transmit+0x1e>
 800d81c:	e0a9      	b.n	800d972 <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d003      	beq.n	800d82c <HAL_USART_Transmit+0x2c>
 800d824:	1dbb      	adds	r3, r7, #6
 800d826:	881b      	ldrh	r3, [r3, #0]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d101      	bne.n	800d830 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800d82c:	2301      	movs	r3, #1
 800d82e:	e0a1      	b.n	800d974 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	689a      	ldr	r2, [r3, #8]
 800d834:	2380      	movs	r3, #128	; 0x80
 800d836:	015b      	lsls	r3, r3, #5
 800d838:	429a      	cmp	r2, r3
 800d83a:	d109      	bne.n	800d850 <HAL_USART_Transmit+0x50>
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	691b      	ldr	r3, [r3, #16]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d105      	bne.n	800d850 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	2201      	movs	r2, #1
 800d848:	4013      	ands	r3, r2
 800d84a:	d001      	beq.n	800d850 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 800d84c:	2301      	movs	r3, #1
 800d84e:	e091      	b.n	800d974 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	2258      	movs	r2, #88	; 0x58
 800d854:	5c9b      	ldrb	r3, [r3, r2]
 800d856:	2b01      	cmp	r3, #1
 800d858:	d101      	bne.n	800d85e <HAL_USART_Transmit+0x5e>
 800d85a:	2302      	movs	r3, #2
 800d85c:	e08a      	b.n	800d974 <HAL_USART_Transmit+0x174>
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	2258      	movs	r2, #88	; 0x58
 800d862:	2101      	movs	r1, #1
 800d864:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2200      	movs	r2, #0
 800d86a:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	2259      	movs	r2, #89	; 0x59
 800d870:	2112      	movs	r1, #18
 800d872:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d874:	f7f9 fee8 	bl	8007648 <HAL_GetTick>
 800d878:	0003      	movs	r3, r0
 800d87a:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	1dba      	adds	r2, r7, #6
 800d880:	8812      	ldrh	r2, [r2, #0]
 800d882:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	1dba      	adds	r2, r7, #6
 800d888:	8812      	ldrh	r2, [r2, #0]
 800d88a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	689a      	ldr	r2, [r3, #8]
 800d890:	2380      	movs	r3, #128	; 0x80
 800d892:	015b      	lsls	r3, r3, #5
 800d894:	429a      	cmp	r2, r3
 800d896:	d108      	bne.n	800d8aa <HAL_USART_Transmit+0xaa>
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	691b      	ldr	r3, [r3, #16]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d104      	bne.n	800d8aa <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	61bb      	str	r3, [r7, #24]
 800d8a8:	e003      	b.n	800d8b2 <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800d8b2:	e02a      	b.n	800d90a <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d8b4:	697a      	ldr	r2, [r7, #20]
 800d8b6:	68f8      	ldr	r0, [r7, #12]
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	9300      	str	r3, [sp, #0]
 800d8bc:	0013      	movs	r3, r2
 800d8be:	2200      	movs	r2, #0
 800d8c0:	2180      	movs	r1, #128	; 0x80
 800d8c2:	f000 fa0e 	bl	800dce2 <USART_WaitOnFlagUntilTimeout>
 800d8c6:	1e03      	subs	r3, r0, #0
 800d8c8:	d001      	beq.n	800d8ce <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800d8ca:	2303      	movs	r3, #3
 800d8cc:	e052      	b.n	800d974 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 800d8ce:	69fb      	ldr	r3, [r7, #28]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d10b      	bne.n	800d8ec <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 800d8d4:	69bb      	ldr	r3, [r7, #24]
 800d8d6:	881b      	ldrh	r3, [r3, #0]
 800d8d8:	001a      	movs	r2, r3
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	05d2      	lsls	r2, r2, #23
 800d8e0:	0dd2      	lsrs	r2, r2, #23
 800d8e2:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 800d8e4:	69bb      	ldr	r3, [r7, #24]
 800d8e6:	3302      	adds	r3, #2
 800d8e8:	61bb      	str	r3, [r7, #24]
 800d8ea:	e007      	b.n	800d8fc <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800d8ec:	69fb      	ldr	r3, [r7, #28]
 800d8ee:	781a      	ldrb	r2, [r3, #0]
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 800d8f6:	69fb      	ldr	r3, [r7, #28]
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d900:	b29b      	uxth	r3, r3
 800d902:	3b01      	subs	r3, #1
 800d904:	b29a      	uxth	r2, r3
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d90e:	b29b      	uxth	r3, r3
 800d910:	2b00      	cmp	r3, #0
 800d912:	d1cf      	bne.n	800d8b4 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d914:	697a      	ldr	r2, [r7, #20]
 800d916:	68f8      	ldr	r0, [r7, #12]
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	9300      	str	r3, [sp, #0]
 800d91c:	0013      	movs	r3, r2
 800d91e:	2200      	movs	r2, #0
 800d920:	2140      	movs	r1, #64	; 0x40
 800d922:	f000 f9de 	bl	800dce2 <USART_WaitOnFlagUntilTimeout>
 800d926:	1e03      	subs	r3, r0, #0
 800d928:	d001      	beq.n	800d92e <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 800d92a:	2303      	movs	r3, #3
 800d92c:	e022      	b.n	800d974 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	2240      	movs	r2, #64	; 0x40
 800d934:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	2208      	movs	r2, #8
 800d93c:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	699a      	ldr	r2, [r3, #24]
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	2108      	movs	r1, #8
 800d94a:	430a      	orrs	r2, r1
 800d94c:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	699a      	ldr	r2, [r3, #24]
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	2110      	movs	r1, #16
 800d95a:	430a      	orrs	r2, r1
 800d95c:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	2259      	movs	r2, #89	; 0x59
 800d962:	2101      	movs	r1, #1
 800d964:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2258      	movs	r2, #88	; 0x58
 800d96a:	2100      	movs	r1, #0
 800d96c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800d96e:	2300      	movs	r3, #0
 800d970:	e000      	b.n	800d974 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d972:	2302      	movs	r3, #2
  }
}
 800d974:	0018      	movs	r0, r3
 800d976:	46bd      	mov	sp, r7
 800d978:	b008      	add	sp, #32
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b088      	sub	sp, #32
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	69db      	ldr	r3, [r3, #28]
 800d98a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	689b      	ldr	r3, [r3, #8]
 800d99a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_UDR));
 800d99c:	69fb      	ldr	r3, [r7, #28]
 800d99e:	4aab      	ldr	r2, [pc, #684]	; (800dc4c <HAL_USART_IRQHandler+0x2d0>)
 800d9a0:	4013      	ands	r3, r2
 800d9a2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d117      	bne.n	800d9da <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	2220      	movs	r2, #32
 800d9ae:	4013      	ands	r3, r2
 800d9b0:	d013      	beq.n	800d9da <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d9b2:	69bb      	ldr	r3, [r7, #24]
 800d9b4:	2220      	movs	r2, #32
 800d9b6:	4013      	ands	r3, r2
 800d9b8:	d104      	bne.n	800d9c4 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d9ba:	697a      	ldr	r2, [r7, #20]
 800d9bc:	2380      	movs	r3, #128	; 0x80
 800d9be:	055b      	lsls	r3, r3, #21
 800d9c0:	4013      	ands	r3, r2
 800d9c2:	d00a      	beq.n	800d9da <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d100      	bne.n	800d9ce <HAL_USART_IRQHandler+0x52>
 800d9cc:	e135      	b.n	800dc3a <HAL_USART_IRQHandler+0x2be>
      {
        husart->RxISR(husart);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9d2:	687a      	ldr	r2, [r7, #4]
 800d9d4:	0010      	movs	r0, r2
 800d9d6:	4798      	blx	r3
      }
      return;
 800d9d8:	e12f      	b.n	800dc3a <HAL_USART_IRQHandler+0x2be>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d9da:	693b      	ldr	r3, [r7, #16]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d100      	bne.n	800d9e2 <HAL_USART_IRQHandler+0x66>
 800d9e0:	e0eb      	b.n	800dbba <HAL_USART_IRQHandler+0x23e>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	4a9a      	ldr	r2, [pc, #616]	; (800dc50 <HAL_USART_IRQHandler+0x2d4>)
 800d9e6:	4013      	ands	r3, r2
 800d9e8:	d105      	bne.n	800d9f6 <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 800d9ea:	69ba      	ldr	r2, [r7, #24]
 800d9ec:	2390      	movs	r3, #144	; 0x90
 800d9ee:	005b      	lsls	r3, r3, #1
 800d9f0:	4013      	ands	r3, r2
 800d9f2:	d100      	bne.n	800d9f6 <HAL_USART_IRQHandler+0x7a>
 800d9f4:	e0e1      	b.n	800dbba <HAL_USART_IRQHandler+0x23e>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d9f6:	69fb      	ldr	r3, [r7, #28]
 800d9f8:	2201      	movs	r2, #1
 800d9fa:	4013      	ands	r3, r2
 800d9fc:	d00e      	beq.n	800da1c <HAL_USART_IRQHandler+0xa0>
 800d9fe:	69ba      	ldr	r2, [r7, #24]
 800da00:	2380      	movs	r3, #128	; 0x80
 800da02:	005b      	lsls	r3, r3, #1
 800da04:	4013      	ands	r3, r2
 800da06:	d009      	beq.n	800da1c <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	2201      	movs	r2, #1
 800da0e:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da14:	2201      	movs	r2, #1
 800da16:	431a      	orrs	r2, r3
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800da1c:	69fb      	ldr	r3, [r7, #28]
 800da1e:	2202      	movs	r2, #2
 800da20:	4013      	ands	r3, r2
 800da22:	d00d      	beq.n	800da40 <HAL_USART_IRQHandler+0xc4>
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	2201      	movs	r2, #1
 800da28:	4013      	ands	r3, r2
 800da2a:	d009      	beq.n	800da40 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	2202      	movs	r2, #2
 800da32:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da38:	2204      	movs	r2, #4
 800da3a:	431a      	orrs	r2, r3
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800da40:	69fb      	ldr	r3, [r7, #28]
 800da42:	2204      	movs	r2, #4
 800da44:	4013      	ands	r3, r2
 800da46:	d00d      	beq.n	800da64 <HAL_USART_IRQHandler+0xe8>
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	2201      	movs	r2, #1
 800da4c:	4013      	ands	r3, r2
 800da4e:	d009      	beq.n	800da64 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	2204      	movs	r2, #4
 800da56:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da5c:	2202      	movs	r2, #2
 800da5e:	431a      	orrs	r2, r3
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800da64:	69fb      	ldr	r3, [r7, #28]
 800da66:	2208      	movs	r2, #8
 800da68:	4013      	ands	r3, r2
 800da6a:	d011      	beq.n	800da90 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800da6c:	69bb      	ldr	r3, [r7, #24]
 800da6e:	2220      	movs	r2, #32
 800da70:	4013      	ands	r3, r2
 800da72:	d103      	bne.n	800da7c <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	4a76      	ldr	r2, [pc, #472]	; (800dc50 <HAL_USART_IRQHandler+0x2d4>)
 800da78:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800da7a:	d009      	beq.n	800da90 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2208      	movs	r2, #8
 800da82:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da88:	2208      	movs	r2, #8
 800da8a:	431a      	orrs	r2, r3
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800da90:	69fa      	ldr	r2, [r7, #28]
 800da92:	2380      	movs	r3, #128	; 0x80
 800da94:	019b      	lsls	r3, r3, #6
 800da96:	4013      	ands	r3, r2
 800da98:	d01a      	beq.n	800dad0 <HAL_USART_IRQHandler+0x154>
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	2201      	movs	r2, #1
 800da9e:	4013      	ands	r3, r2
 800daa0:	d016      	beq.n	800dad0 <HAL_USART_IRQHandler+0x154>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2259      	movs	r2, #89	; 0x59
 800daa6:	5c9b      	ldrb	r3, [r3, r2]
 800daa8:	b2db      	uxtb	r3, r3
 800daaa:	2b22      	cmp	r3, #34	; 0x22
 800daac:	d105      	bne.n	800daba <HAL_USART_IRQHandler+0x13e>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	2280      	movs	r2, #128	; 0x80
 800dab4:	0192      	lsls	r2, r2, #6
 800dab6:	621a      	str	r2, [r3, #32]
        return;
 800dab8:	e0c4      	b.n	800dc44 <HAL_USART_IRQHandler+0x2c8>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	2280      	movs	r2, #128	; 0x80
 800dac0:	0192      	lsls	r2, r2, #6
 800dac2:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dac8:	2220      	movs	r2, #32
 800daca:	431a      	orrs	r2, r3
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d100      	bne.n	800dada <HAL_USART_IRQHandler+0x15e>
 800dad8:	e0b1      	b.n	800dc3e <HAL_USART_IRQHandler+0x2c2>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dada:	69fb      	ldr	r3, [r7, #28]
 800dadc:	2220      	movs	r2, #32
 800dade:	4013      	ands	r3, r2
 800dae0:	d011      	beq.n	800db06 <HAL_USART_IRQHandler+0x18a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dae2:	69bb      	ldr	r3, [r7, #24]
 800dae4:	2220      	movs	r2, #32
 800dae6:	4013      	ands	r3, r2
 800dae8:	d104      	bne.n	800daf4 <HAL_USART_IRQHandler+0x178>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800daea:	697a      	ldr	r2, [r7, #20]
 800daec:	2380      	movs	r3, #128	; 0x80
 800daee:	055b      	lsls	r3, r3, #21
 800daf0:	4013      	ands	r3, r2
 800daf2:	d008      	beq.n	800db06 <HAL_USART_IRQHandler+0x18a>
      {
        if (husart->RxISR != NULL)
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d004      	beq.n	800db06 <HAL_USART_IRQHandler+0x18a>
        {
          husart->RxISR(husart);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db00:	687a      	ldr	r2, [r7, #4]
 800db02:	0010      	movs	r0, r2
 800db04:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db0a:	2208      	movs	r2, #8
 800db0c:	4013      	ands	r3, r2
 800db0e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	689b      	ldr	r3, [r3, #8]
 800db16:	2240      	movs	r2, #64	; 0x40
 800db18:	4013      	ands	r3, r2
 800db1a:	2b40      	cmp	r3, #64	; 0x40
 800db1c:	d002      	beq.n	800db24 <HAL_USART_IRQHandler+0x1a8>
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d040      	beq.n	800dba6 <HAL_USART_IRQHandler+0x22a>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	0018      	movs	r0, r3
 800db28:	f000 f8a6 	bl	800dc78 <USART_EndTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	689b      	ldr	r3, [r3, #8]
 800db32:	2240      	movs	r2, #64	; 0x40
 800db34:	4013      	ands	r3, r2
 800db36:	2b40      	cmp	r3, #64	; 0x40
 800db38:	d130      	bne.n	800db9c <HAL_USART_IRQHandler+0x220>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	689a      	ldr	r2, [r3, #8]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	2140      	movs	r1, #64	; 0x40
 800db46:	438a      	bics	r2, r1
 800db48:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d008      	beq.n	800db64 <HAL_USART_IRQHandler+0x1e8>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db56:	2200      	movs	r2, #0
 800db58:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db5e:	0018      	movs	r0, r3
 800db60:	f7fa fa04 	bl	8007f6c <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d012      	beq.n	800db92 <HAL_USART_IRQHandler+0x216>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db70:	4a38      	ldr	r2, [pc, #224]	; (800dc54 <HAL_USART_IRQHandler+0x2d8>)
 800db72:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db78:	0018      	movs	r0, r3
 800db7a:	f7fa f9f7 	bl	8007f6c <HAL_DMA_Abort_IT>
 800db7e:	1e03      	subs	r3, r0, #0
 800db80:	d019      	beq.n	800dbb6 <HAL_USART_IRQHandler+0x23a>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db8c:	0018      	movs	r0, r3
 800db8e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800db90:	e011      	b.n	800dbb6 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	0018      	movs	r0, r3
 800db96:	f000 f867 	bl	800dc68 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800db9a:	e00c      	b.n	800dbb6 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	0018      	movs	r0, r3
 800dba0:	f000 f862 	bl	800dc68 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800dba4:	e007      	b.n	800dbb6 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	0018      	movs	r0, r3
 800dbaa:	f000 f85d 	bl	800dc68 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 800dbb4:	e043      	b.n	800dc3e <HAL_USART_IRQHandler+0x2c2>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800dbb6:	46c0      	nop			; (mov r8, r8)
    return;
 800dbb8:	e041      	b.n	800dc3e <HAL_USART_IRQHandler+0x2c2>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800dbba:	69fb      	ldr	r3, [r7, #28]
 800dbbc:	2280      	movs	r2, #128	; 0x80
 800dbbe:	4013      	ands	r3, r2
 800dbc0:	d012      	beq.n	800dbe8 <HAL_USART_IRQHandler+0x26c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800dbc2:	69bb      	ldr	r3, [r7, #24]
 800dbc4:	2280      	movs	r2, #128	; 0x80
 800dbc6:	4013      	ands	r3, r2
 800dbc8:	d104      	bne.n	800dbd4 <HAL_USART_IRQHandler+0x258>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800dbca:	697a      	ldr	r2, [r7, #20]
 800dbcc:	2380      	movs	r3, #128	; 0x80
 800dbce:	041b      	lsls	r3, r3, #16
 800dbd0:	4013      	ands	r3, r2
 800dbd2:	d009      	beq.n	800dbe8 <HAL_USART_IRQHandler+0x26c>
  {
    if (husart->TxISR != NULL)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d032      	beq.n	800dc42 <HAL_USART_IRQHandler+0x2c6>
    {
      husart->TxISR(husart);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbe0:	687a      	ldr	r2, [r7, #4]
 800dbe2:	0010      	movs	r0, r2
 800dbe4:	4798      	blx	r3
    }
    return;
 800dbe6:	e02c      	b.n	800dc42 <HAL_USART_IRQHandler+0x2c6>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dbe8:	69fb      	ldr	r3, [r7, #28]
 800dbea:	2240      	movs	r2, #64	; 0x40
 800dbec:	4013      	ands	r3, r2
 800dbee:	d008      	beq.n	800dc02 <HAL_USART_IRQHandler+0x286>
 800dbf0:	69bb      	ldr	r3, [r7, #24]
 800dbf2:	2240      	movs	r2, #64	; 0x40
 800dbf4:	4013      	ands	r3, r2
 800dbf6:	d004      	beq.n	800dc02 <HAL_USART_IRQHandler+0x286>
  {
    USART_EndTransmit_IT(husart);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	0018      	movs	r0, r3
 800dbfc:	f000 fb86 	bl	800e30c <USART_EndTransmit_IT>
    return;
 800dc00:	e020      	b.n	800dc44 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dc02:	69fa      	ldr	r2, [r7, #28]
 800dc04:	2380      	movs	r3, #128	; 0x80
 800dc06:	041b      	lsls	r3, r3, #16
 800dc08:	4013      	ands	r3, r2
 800dc0a:	d009      	beq.n	800dc20 <HAL_USART_IRQHandler+0x2a4>
 800dc0c:	69ba      	ldr	r2, [r7, #24]
 800dc0e:	2380      	movs	r3, #128	; 0x80
 800dc10:	05db      	lsls	r3, r3, #23
 800dc12:	4013      	ands	r3, r2
 800dc14:	d004      	beq.n	800dc20 <HAL_USART_IRQHandler+0x2a4>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	0018      	movs	r0, r3
 800dc1a:	f000 fbc2 	bl	800e3a2 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800dc1e:	e011      	b.n	800dc44 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800dc20:	69fa      	ldr	r2, [r7, #28]
 800dc22:	2380      	movs	r3, #128	; 0x80
 800dc24:	045b      	lsls	r3, r3, #17
 800dc26:	4013      	ands	r3, r2
 800dc28:	d00c      	beq.n	800dc44 <HAL_USART_IRQHandler+0x2c8>
 800dc2a:	69bb      	ldr	r3, [r7, #24]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	da09      	bge.n	800dc44 <HAL_USART_IRQHandler+0x2c8>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	0018      	movs	r0, r3
 800dc34:	f000 fbad 	bl	800e392 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800dc38:	e004      	b.n	800dc44 <HAL_USART_IRQHandler+0x2c8>
      return;
 800dc3a:	46c0      	nop			; (mov r8, r8)
 800dc3c:	e002      	b.n	800dc44 <HAL_USART_IRQHandler+0x2c8>
    return;
 800dc3e:	46c0      	nop			; (mov r8, r8)
 800dc40:	e000      	b.n	800dc44 <HAL_USART_IRQHandler+0x2c8>
    return;
 800dc42:	46c0      	nop			; (mov r8, r8)
  }
}
 800dc44:	46bd      	mov	sp, r7
 800dc46:	b008      	add	sp, #32
 800dc48:	bd80      	pop	{r7, pc}
 800dc4a:	46c0      	nop			; (mov r8, r8)
 800dc4c:	0000200f 	.word	0x0000200f
 800dc50:	10000001 	.word	0x10000001
 800dc54:	0800dcb9 	.word	0x0800dcb9

0800dc58 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b082      	sub	sp, #8
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 800dc60:	46c0      	nop			; (mov r8, r8)
 800dc62:	46bd      	mov	sp, r7
 800dc64:	b002      	add	sp, #8
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b082      	sub	sp, #8
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 800dc70:	46c0      	nop			; (mov r8, r8)
 800dc72:	46bd      	mov	sp, r7
 800dc74:	b002      	add	sp, #8
 800dc76:	bd80      	pop	{r7, pc}

0800dc78 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b082      	sub	sp, #8
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	681a      	ldr	r2, [r3, #0]
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	4909      	ldr	r1, [pc, #36]	; (800dcb0 <USART_EndTransfer+0x38>)
 800dc8c:	400a      	ands	r2, r1
 800dc8e:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	689a      	ldr	r2, [r3, #8]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4906      	ldr	r1, [pc, #24]	; (800dcb4 <USART_EndTransfer+0x3c>)
 800dc9c:	400a      	ands	r2, r1
 800dc9e:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2259      	movs	r2, #89	; 0x59
 800dca4:	2101      	movs	r1, #1
 800dca6:	5499      	strb	r1, [r3, r2]
}
 800dca8:	46c0      	nop			; (mov r8, r8)
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	b002      	add	sp, #8
 800dcae:	bd80      	pop	{r7, pc}
 800dcb0:	fffffe1f 	.word	0xfffffe1f
 800dcb4:	ef7ffffe 	.word	0xef7ffffe

0800dcb8 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b084      	sub	sp, #16
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcc4:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	0018      	movs	r0, r3
 800dcd6:	f7ff ffc7 	bl	800dc68 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800dcda:	46c0      	nop			; (mov r8, r8)
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	b004      	add	sp, #16
 800dce0:	bd80      	pop	{r7, pc}

0800dce2 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800dce2:	b580      	push	{r7, lr}
 800dce4:	b084      	sub	sp, #16
 800dce6:	af00      	add	r7, sp, #0
 800dce8:	60f8      	str	r0, [r7, #12]
 800dcea:	60b9      	str	r1, [r7, #8]
 800dcec:	603b      	str	r3, [r7, #0]
 800dcee:	1dfb      	adds	r3, r7, #7
 800dcf0:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800dcf2:	e017      	b.n	800dd24 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dcf4:	69bb      	ldr	r3, [r7, #24]
 800dcf6:	3301      	adds	r3, #1
 800dcf8:	d014      	beq.n	800dd24 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dcfa:	f7f9 fca5 	bl	8007648 <HAL_GetTick>
 800dcfe:	0002      	movs	r2, r0
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	1ad3      	subs	r3, r2, r3
 800dd04:	69ba      	ldr	r2, [r7, #24]
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d302      	bcc.n	800dd10 <USART_WaitOnFlagUntilTimeout+0x2e>
 800dd0a:	69bb      	ldr	r3, [r7, #24]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d109      	bne.n	800dd24 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	2259      	movs	r2, #89	; 0x59
 800dd14:	2101      	movs	r1, #1
 800dd16:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	2258      	movs	r2, #88	; 0x58
 800dd1c:	2100      	movs	r1, #0
 800dd1e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800dd20:	2303      	movs	r3, #3
 800dd22:	e00f      	b.n	800dd44 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	69db      	ldr	r3, [r3, #28]
 800dd2a:	68ba      	ldr	r2, [r7, #8]
 800dd2c:	4013      	ands	r3, r2
 800dd2e:	68ba      	ldr	r2, [r7, #8]
 800dd30:	1ad3      	subs	r3, r2, r3
 800dd32:	425a      	negs	r2, r3
 800dd34:	4153      	adcs	r3, r2
 800dd36:	b2db      	uxtb	r3, r3
 800dd38:	001a      	movs	r2, r3
 800dd3a:	1dfb      	adds	r3, r7, #7
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d0d8      	beq.n	800dcf4 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800dd42:	2300      	movs	r3, #0
}
 800dd44:	0018      	movs	r0, r3
 800dd46:	46bd      	mov	sp, r7
 800dd48:	b004      	add	sp, #16
 800dd4a:	bd80      	pop	{r7, pc}

0800dd4c <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b088      	sub	sp, #32
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800dd54:	231e      	movs	r3, #30
 800dd56:	18fb      	adds	r3, r7, r3
 800dd58:	2200      	movs	r2, #0
 800dd5a:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	689a      	ldr	r2, [r3, #8]
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	691b      	ldr	r3, [r3, #16]
 800dd68:	431a      	orrs	r2, r3
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	695b      	ldr	r3, [r3, #20]
 800dd6e:	4313      	orrs	r3, r2
 800dd70:	2280      	movs	r2, #128	; 0x80
 800dd72:	0212      	lsls	r2, r2, #8
 800dd74:	4313      	orrs	r3, r2
 800dd76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	4ab1      	ldr	r2, [pc, #708]	; (800e044 <USART_SetConfig+0x2f8>)
 800dd80:	4013      	ands	r3, r2
 800dd82:	0019      	movs	r1, r3
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	697a      	ldr	r2, [r7, #20]
 800dd8a:	430a      	orrs	r2, r1
 800dd8c:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800dd8e:	2380      	movs	r3, #128	; 0x80
 800dd90:	011b      	lsls	r3, r3, #4
 800dd92:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6a1b      	ldr	r3, [r3, #32]
 800dd98:	697a      	ldr	r2, [r7, #20]
 800dd9a:	4313      	orrs	r3, r2
 800dd9c:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	699a      	ldr	r2, [r3, #24]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	69db      	ldr	r3, [r3, #28]
 800dda6:	4313      	orrs	r3, r2
 800dda8:	697a      	ldr	r2, [r7, #20]
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	68db      	ldr	r3, [r3, #12]
 800ddb2:	697a      	ldr	r2, [r7, #20]
 800ddb4:	4313      	orrs	r3, r2
 800ddb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	685b      	ldr	r3, [r3, #4]
 800ddbe:	4aa2      	ldr	r2, [pc, #648]	; (800e048 <USART_SetConfig+0x2fc>)
 800ddc0:	4013      	ands	r3, r2
 800ddc2:	0019      	movs	r1, r3
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	697a      	ldr	r2, [r7, #20]
 800ddca:	430a      	orrs	r2, r1
 800ddcc:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddd4:	220f      	movs	r2, #15
 800ddd6:	4393      	bics	r3, r2
 800ddd8:	0019      	movs	r1, r3
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	430a      	orrs	r2, r1
 800dde4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	4a98      	ldr	r2, [pc, #608]	; (800e04c <USART_SetConfig+0x300>)
 800ddec:	4293      	cmp	r3, r2
 800ddee:	d127      	bne.n	800de40 <USART_SetConfig+0xf4>
 800ddf0:	4b97      	ldr	r3, [pc, #604]	; (800e050 <USART_SetConfig+0x304>)
 800ddf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddf4:	2203      	movs	r2, #3
 800ddf6:	4013      	ands	r3, r2
 800ddf8:	2b03      	cmp	r3, #3
 800ddfa:	d017      	beq.n	800de2c <USART_SetConfig+0xe0>
 800ddfc:	d81b      	bhi.n	800de36 <USART_SetConfig+0xea>
 800ddfe:	2b02      	cmp	r3, #2
 800de00:	d00a      	beq.n	800de18 <USART_SetConfig+0xcc>
 800de02:	d818      	bhi.n	800de36 <USART_SetConfig+0xea>
 800de04:	2b00      	cmp	r3, #0
 800de06:	d002      	beq.n	800de0e <USART_SetConfig+0xc2>
 800de08:	2b01      	cmp	r3, #1
 800de0a:	d00a      	beq.n	800de22 <USART_SetConfig+0xd6>
 800de0c:	e013      	b.n	800de36 <USART_SetConfig+0xea>
 800de0e:	231f      	movs	r3, #31
 800de10:	18fb      	adds	r3, r7, r3
 800de12:	2200      	movs	r2, #0
 800de14:	701a      	strb	r2, [r3, #0]
 800de16:	e058      	b.n	800deca <USART_SetConfig+0x17e>
 800de18:	231f      	movs	r3, #31
 800de1a:	18fb      	adds	r3, r7, r3
 800de1c:	2202      	movs	r2, #2
 800de1e:	701a      	strb	r2, [r3, #0]
 800de20:	e053      	b.n	800deca <USART_SetConfig+0x17e>
 800de22:	231f      	movs	r3, #31
 800de24:	18fb      	adds	r3, r7, r3
 800de26:	2204      	movs	r2, #4
 800de28:	701a      	strb	r2, [r3, #0]
 800de2a:	e04e      	b.n	800deca <USART_SetConfig+0x17e>
 800de2c:	231f      	movs	r3, #31
 800de2e:	18fb      	adds	r3, r7, r3
 800de30:	2208      	movs	r2, #8
 800de32:	701a      	strb	r2, [r3, #0]
 800de34:	e049      	b.n	800deca <USART_SetConfig+0x17e>
 800de36:	231f      	movs	r3, #31
 800de38:	18fb      	adds	r3, r7, r3
 800de3a:	2210      	movs	r2, #16
 800de3c:	701a      	strb	r2, [r3, #0]
 800de3e:	e044      	b.n	800deca <USART_SetConfig+0x17e>
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	4a83      	ldr	r2, [pc, #524]	; (800e054 <USART_SetConfig+0x308>)
 800de46:	4293      	cmp	r3, r2
 800de48:	d127      	bne.n	800de9a <USART_SetConfig+0x14e>
 800de4a:	4b81      	ldr	r3, [pc, #516]	; (800e050 <USART_SetConfig+0x304>)
 800de4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de4e:	220c      	movs	r2, #12
 800de50:	4013      	ands	r3, r2
 800de52:	2b0c      	cmp	r3, #12
 800de54:	d017      	beq.n	800de86 <USART_SetConfig+0x13a>
 800de56:	d81b      	bhi.n	800de90 <USART_SetConfig+0x144>
 800de58:	2b08      	cmp	r3, #8
 800de5a:	d00a      	beq.n	800de72 <USART_SetConfig+0x126>
 800de5c:	d818      	bhi.n	800de90 <USART_SetConfig+0x144>
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d002      	beq.n	800de68 <USART_SetConfig+0x11c>
 800de62:	2b04      	cmp	r3, #4
 800de64:	d00a      	beq.n	800de7c <USART_SetConfig+0x130>
 800de66:	e013      	b.n	800de90 <USART_SetConfig+0x144>
 800de68:	231f      	movs	r3, #31
 800de6a:	18fb      	adds	r3, r7, r3
 800de6c:	2200      	movs	r2, #0
 800de6e:	701a      	strb	r2, [r3, #0]
 800de70:	e02b      	b.n	800deca <USART_SetConfig+0x17e>
 800de72:	231f      	movs	r3, #31
 800de74:	18fb      	adds	r3, r7, r3
 800de76:	2202      	movs	r2, #2
 800de78:	701a      	strb	r2, [r3, #0]
 800de7a:	e026      	b.n	800deca <USART_SetConfig+0x17e>
 800de7c:	231f      	movs	r3, #31
 800de7e:	18fb      	adds	r3, r7, r3
 800de80:	2204      	movs	r2, #4
 800de82:	701a      	strb	r2, [r3, #0]
 800de84:	e021      	b.n	800deca <USART_SetConfig+0x17e>
 800de86:	231f      	movs	r3, #31
 800de88:	18fb      	adds	r3, r7, r3
 800de8a:	2208      	movs	r2, #8
 800de8c:	701a      	strb	r2, [r3, #0]
 800de8e:	e01c      	b.n	800deca <USART_SetConfig+0x17e>
 800de90:	231f      	movs	r3, #31
 800de92:	18fb      	adds	r3, r7, r3
 800de94:	2210      	movs	r2, #16
 800de96:	701a      	strb	r2, [r3, #0]
 800de98:	e017      	b.n	800deca <USART_SetConfig+0x17e>
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	4a6e      	ldr	r2, [pc, #440]	; (800e058 <USART_SetConfig+0x30c>)
 800dea0:	4293      	cmp	r3, r2
 800dea2:	d104      	bne.n	800deae <USART_SetConfig+0x162>
 800dea4:	231f      	movs	r3, #31
 800dea6:	18fb      	adds	r3, r7, r3
 800dea8:	2200      	movs	r2, #0
 800deaa:	701a      	strb	r2, [r3, #0]
 800deac:	e00d      	b.n	800deca <USART_SetConfig+0x17e>
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	4a6a      	ldr	r2, [pc, #424]	; (800e05c <USART_SetConfig+0x310>)
 800deb4:	4293      	cmp	r3, r2
 800deb6:	d104      	bne.n	800dec2 <USART_SetConfig+0x176>
 800deb8:	231f      	movs	r3, #31
 800deba:	18fb      	adds	r3, r7, r3
 800debc:	2200      	movs	r2, #0
 800debe:	701a      	strb	r2, [r3, #0]
 800dec0:	e003      	b.n	800deca <USART_SetConfig+0x17e>
 800dec2:	231f      	movs	r3, #31
 800dec4:	18fb      	adds	r3, r7, r3
 800dec6:	2210      	movs	r2, #16
 800dec8:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 800deca:	231f      	movs	r3, #31
 800decc:	18fb      	adds	r3, r7, r3
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	2b08      	cmp	r3, #8
 800ded2:	d100      	bne.n	800ded6 <USART_SetConfig+0x18a>
 800ded4:	e139      	b.n	800e14a <USART_SetConfig+0x3fe>
 800ded6:	dd00      	ble.n	800deda <USART_SetConfig+0x18e>
 800ded8:	e195      	b.n	800e206 <USART_SetConfig+0x4ba>
 800deda:	2b04      	cmp	r3, #4
 800dedc:	d100      	bne.n	800dee0 <USART_SetConfig+0x194>
 800dede:	e0d3      	b.n	800e088 <USART_SetConfig+0x33c>
 800dee0:	dd00      	ble.n	800dee4 <USART_SetConfig+0x198>
 800dee2:	e190      	b.n	800e206 <USART_SetConfig+0x4ba>
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d003      	beq.n	800def0 <USART_SetConfig+0x1a4>
 800dee8:	2b02      	cmp	r3, #2
 800deea:	d100      	bne.n	800deee <USART_SetConfig+0x1a2>
 800deec:	e061      	b.n	800dfb2 <USART_SetConfig+0x266>
 800deee:	e18a      	b.n	800e206 <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800def0:	f7fc fdf2 	bl	800aad8 <HAL_RCC_GetPCLK1Freq>
 800def4:	0003      	movs	r3, r0
 800def6:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800defc:	2b00      	cmp	r3, #0
 800defe:	d044      	beq.n	800df8a <USART_SetConfig+0x23e>
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df04:	2b01      	cmp	r3, #1
 800df06:	d03e      	beq.n	800df86 <USART_SetConfig+0x23a>
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df0c:	2b02      	cmp	r3, #2
 800df0e:	d038      	beq.n	800df82 <USART_SetConfig+0x236>
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df14:	2b03      	cmp	r3, #3
 800df16:	d032      	beq.n	800df7e <USART_SetConfig+0x232>
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df1c:	2b04      	cmp	r3, #4
 800df1e:	d02c      	beq.n	800df7a <USART_SetConfig+0x22e>
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df24:	2b05      	cmp	r3, #5
 800df26:	d026      	beq.n	800df76 <USART_SetConfig+0x22a>
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df2c:	2b06      	cmp	r3, #6
 800df2e:	d020      	beq.n	800df72 <USART_SetConfig+0x226>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df34:	2b07      	cmp	r3, #7
 800df36:	d01a      	beq.n	800df6e <USART_SetConfig+0x222>
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df3c:	2b08      	cmp	r3, #8
 800df3e:	d014      	beq.n	800df6a <USART_SetConfig+0x21e>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df44:	2b09      	cmp	r3, #9
 800df46:	d00e      	beq.n	800df66 <USART_SetConfig+0x21a>
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df4c:	2b0a      	cmp	r3, #10
 800df4e:	d008      	beq.n	800df62 <USART_SetConfig+0x216>
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df54:	2b0b      	cmp	r3, #11
 800df56:	d102      	bne.n	800df5e <USART_SetConfig+0x212>
 800df58:	2380      	movs	r3, #128	; 0x80
 800df5a:	005b      	lsls	r3, r3, #1
 800df5c:	e016      	b.n	800df8c <USART_SetConfig+0x240>
 800df5e:	2301      	movs	r3, #1
 800df60:	e014      	b.n	800df8c <USART_SetConfig+0x240>
 800df62:	2380      	movs	r3, #128	; 0x80
 800df64:	e012      	b.n	800df8c <USART_SetConfig+0x240>
 800df66:	2340      	movs	r3, #64	; 0x40
 800df68:	e010      	b.n	800df8c <USART_SetConfig+0x240>
 800df6a:	2320      	movs	r3, #32
 800df6c:	e00e      	b.n	800df8c <USART_SetConfig+0x240>
 800df6e:	2310      	movs	r3, #16
 800df70:	e00c      	b.n	800df8c <USART_SetConfig+0x240>
 800df72:	230c      	movs	r3, #12
 800df74:	e00a      	b.n	800df8c <USART_SetConfig+0x240>
 800df76:	230a      	movs	r3, #10
 800df78:	e008      	b.n	800df8c <USART_SetConfig+0x240>
 800df7a:	2308      	movs	r3, #8
 800df7c:	e006      	b.n	800df8c <USART_SetConfig+0x240>
 800df7e:	2306      	movs	r3, #6
 800df80:	e004      	b.n	800df8c <USART_SetConfig+0x240>
 800df82:	2304      	movs	r3, #4
 800df84:	e002      	b.n	800df8c <USART_SetConfig+0x240>
 800df86:	2302      	movs	r3, #2
 800df88:	e000      	b.n	800df8c <USART_SetConfig+0x240>
 800df8a:	2301      	movs	r3, #1
 800df8c:	0019      	movs	r1, r3
 800df8e:	6938      	ldr	r0, [r7, #16]
 800df90:	f7f2 f8b8 	bl	8000104 <__udivsi3>
 800df94:	0003      	movs	r3, r0
 800df96:	005a      	lsls	r2, r3, #1
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	085b      	lsrs	r3, r3, #1
 800df9e:	18d2      	adds	r2, r2, r3
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	685b      	ldr	r3, [r3, #4]
 800dfa4:	0019      	movs	r1, r3
 800dfa6:	0010      	movs	r0, r2
 800dfa8:	f7f2 f8ac 	bl	8000104 <__udivsi3>
 800dfac:	0003      	movs	r3, r0
 800dfae:	61bb      	str	r3, [r7, #24]
      break;
 800dfb0:	e12e      	b.n	800e210 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d052      	beq.n	800e060 <USART_SetConfig+0x314>
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfbe:	2b01      	cmp	r3, #1
 800dfc0:	d03e      	beq.n	800e040 <USART_SetConfig+0x2f4>
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfc6:	2b02      	cmp	r3, #2
 800dfc8:	d038      	beq.n	800e03c <USART_SetConfig+0x2f0>
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfce:	2b03      	cmp	r3, #3
 800dfd0:	d032      	beq.n	800e038 <USART_SetConfig+0x2ec>
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfd6:	2b04      	cmp	r3, #4
 800dfd8:	d02c      	beq.n	800e034 <USART_SetConfig+0x2e8>
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfde:	2b05      	cmp	r3, #5
 800dfe0:	d026      	beq.n	800e030 <USART_SetConfig+0x2e4>
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe6:	2b06      	cmp	r3, #6
 800dfe8:	d020      	beq.n	800e02c <USART_SetConfig+0x2e0>
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfee:	2b07      	cmp	r3, #7
 800dff0:	d01a      	beq.n	800e028 <USART_SetConfig+0x2dc>
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dff6:	2b08      	cmp	r3, #8
 800dff8:	d014      	beq.n	800e024 <USART_SetConfig+0x2d8>
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dffe:	2b09      	cmp	r3, #9
 800e000:	d00e      	beq.n	800e020 <USART_SetConfig+0x2d4>
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e006:	2b0a      	cmp	r3, #10
 800e008:	d008      	beq.n	800e01c <USART_SetConfig+0x2d0>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e00e:	2b0b      	cmp	r3, #11
 800e010:	d102      	bne.n	800e018 <USART_SetConfig+0x2cc>
 800e012:	2380      	movs	r3, #128	; 0x80
 800e014:	005b      	lsls	r3, r3, #1
 800e016:	e024      	b.n	800e062 <USART_SetConfig+0x316>
 800e018:	2301      	movs	r3, #1
 800e01a:	e022      	b.n	800e062 <USART_SetConfig+0x316>
 800e01c:	2380      	movs	r3, #128	; 0x80
 800e01e:	e020      	b.n	800e062 <USART_SetConfig+0x316>
 800e020:	2340      	movs	r3, #64	; 0x40
 800e022:	e01e      	b.n	800e062 <USART_SetConfig+0x316>
 800e024:	2320      	movs	r3, #32
 800e026:	e01c      	b.n	800e062 <USART_SetConfig+0x316>
 800e028:	2310      	movs	r3, #16
 800e02a:	e01a      	b.n	800e062 <USART_SetConfig+0x316>
 800e02c:	230c      	movs	r3, #12
 800e02e:	e018      	b.n	800e062 <USART_SetConfig+0x316>
 800e030:	230a      	movs	r3, #10
 800e032:	e016      	b.n	800e062 <USART_SetConfig+0x316>
 800e034:	2308      	movs	r3, #8
 800e036:	e014      	b.n	800e062 <USART_SetConfig+0x316>
 800e038:	2306      	movs	r3, #6
 800e03a:	e012      	b.n	800e062 <USART_SetConfig+0x316>
 800e03c:	2304      	movs	r3, #4
 800e03e:	e010      	b.n	800e062 <USART_SetConfig+0x316>
 800e040:	2302      	movs	r3, #2
 800e042:	e00e      	b.n	800e062 <USART_SetConfig+0x316>
 800e044:	cfff69f3 	.word	0xcfff69f3
 800e048:	ffffc0f6 	.word	0xffffc0f6
 800e04c:	40013800 	.word	0x40013800
 800e050:	40021000 	.word	0x40021000
 800e054:	40004400 	.word	0x40004400
 800e058:	40004800 	.word	0x40004800
 800e05c:	40004c00 	.word	0x40004c00
 800e060:	2301      	movs	r3, #1
 800e062:	0019      	movs	r1, r3
 800e064:	4886      	ldr	r0, [pc, #536]	; (800e280 <USART_SetConfig+0x534>)
 800e066:	f7f2 f84d 	bl	8000104 <__udivsi3>
 800e06a:	0003      	movs	r3, r0
 800e06c:	005a      	lsls	r2, r3, #1
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	685b      	ldr	r3, [r3, #4]
 800e072:	085b      	lsrs	r3, r3, #1
 800e074:	18d2      	adds	r2, r2, r3
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	685b      	ldr	r3, [r3, #4]
 800e07a:	0019      	movs	r1, r3
 800e07c:	0010      	movs	r0, r2
 800e07e:	f7f2 f841 	bl	8000104 <__udivsi3>
 800e082:	0003      	movs	r3, r0
 800e084:	61bb      	str	r3, [r7, #24]
      break;
 800e086:	e0c3      	b.n	800e210 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800e088:	f7fc fc9a 	bl	800a9c0 <HAL_RCC_GetSysClockFreq>
 800e08c:	0003      	movs	r3, r0
 800e08e:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e094:	2b00      	cmp	r3, #0
 800e096:	d044      	beq.n	800e122 <USART_SetConfig+0x3d6>
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e09c:	2b01      	cmp	r3, #1
 800e09e:	d03e      	beq.n	800e11e <USART_SetConfig+0x3d2>
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0a4:	2b02      	cmp	r3, #2
 800e0a6:	d038      	beq.n	800e11a <USART_SetConfig+0x3ce>
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ac:	2b03      	cmp	r3, #3
 800e0ae:	d032      	beq.n	800e116 <USART_SetConfig+0x3ca>
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0b4:	2b04      	cmp	r3, #4
 800e0b6:	d02c      	beq.n	800e112 <USART_SetConfig+0x3c6>
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0bc:	2b05      	cmp	r3, #5
 800e0be:	d026      	beq.n	800e10e <USART_SetConfig+0x3c2>
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0c4:	2b06      	cmp	r3, #6
 800e0c6:	d020      	beq.n	800e10a <USART_SetConfig+0x3be>
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0cc:	2b07      	cmp	r3, #7
 800e0ce:	d01a      	beq.n	800e106 <USART_SetConfig+0x3ba>
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0d4:	2b08      	cmp	r3, #8
 800e0d6:	d014      	beq.n	800e102 <USART_SetConfig+0x3b6>
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0dc:	2b09      	cmp	r3, #9
 800e0de:	d00e      	beq.n	800e0fe <USART_SetConfig+0x3b2>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0e4:	2b0a      	cmp	r3, #10
 800e0e6:	d008      	beq.n	800e0fa <USART_SetConfig+0x3ae>
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ec:	2b0b      	cmp	r3, #11
 800e0ee:	d102      	bne.n	800e0f6 <USART_SetConfig+0x3aa>
 800e0f0:	2380      	movs	r3, #128	; 0x80
 800e0f2:	005b      	lsls	r3, r3, #1
 800e0f4:	e016      	b.n	800e124 <USART_SetConfig+0x3d8>
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	e014      	b.n	800e124 <USART_SetConfig+0x3d8>
 800e0fa:	2380      	movs	r3, #128	; 0x80
 800e0fc:	e012      	b.n	800e124 <USART_SetConfig+0x3d8>
 800e0fe:	2340      	movs	r3, #64	; 0x40
 800e100:	e010      	b.n	800e124 <USART_SetConfig+0x3d8>
 800e102:	2320      	movs	r3, #32
 800e104:	e00e      	b.n	800e124 <USART_SetConfig+0x3d8>
 800e106:	2310      	movs	r3, #16
 800e108:	e00c      	b.n	800e124 <USART_SetConfig+0x3d8>
 800e10a:	230c      	movs	r3, #12
 800e10c:	e00a      	b.n	800e124 <USART_SetConfig+0x3d8>
 800e10e:	230a      	movs	r3, #10
 800e110:	e008      	b.n	800e124 <USART_SetConfig+0x3d8>
 800e112:	2308      	movs	r3, #8
 800e114:	e006      	b.n	800e124 <USART_SetConfig+0x3d8>
 800e116:	2306      	movs	r3, #6
 800e118:	e004      	b.n	800e124 <USART_SetConfig+0x3d8>
 800e11a:	2304      	movs	r3, #4
 800e11c:	e002      	b.n	800e124 <USART_SetConfig+0x3d8>
 800e11e:	2302      	movs	r3, #2
 800e120:	e000      	b.n	800e124 <USART_SetConfig+0x3d8>
 800e122:	2301      	movs	r3, #1
 800e124:	0019      	movs	r1, r3
 800e126:	6938      	ldr	r0, [r7, #16]
 800e128:	f7f1 ffec 	bl	8000104 <__udivsi3>
 800e12c:	0003      	movs	r3, r0
 800e12e:	005a      	lsls	r2, r3, #1
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	685b      	ldr	r3, [r3, #4]
 800e134:	085b      	lsrs	r3, r3, #1
 800e136:	18d2      	adds	r2, r2, r3
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	685b      	ldr	r3, [r3, #4]
 800e13c:	0019      	movs	r1, r3
 800e13e:	0010      	movs	r0, r2
 800e140:	f7f1 ffe0 	bl	8000104 <__udivsi3>
 800e144:	0003      	movs	r3, r0
 800e146:	61bb      	str	r3, [r7, #24]
      break;
 800e148:	e062      	b.n	800e210 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8((uint32_t)LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d044      	beq.n	800e1dc <USART_SetConfig+0x490>
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e156:	2b01      	cmp	r3, #1
 800e158:	d03e      	beq.n	800e1d8 <USART_SetConfig+0x48c>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e15e:	2b02      	cmp	r3, #2
 800e160:	d038      	beq.n	800e1d4 <USART_SetConfig+0x488>
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e166:	2b03      	cmp	r3, #3
 800e168:	d032      	beq.n	800e1d0 <USART_SetConfig+0x484>
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e16e:	2b04      	cmp	r3, #4
 800e170:	d02c      	beq.n	800e1cc <USART_SetConfig+0x480>
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e176:	2b05      	cmp	r3, #5
 800e178:	d026      	beq.n	800e1c8 <USART_SetConfig+0x47c>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e17e:	2b06      	cmp	r3, #6
 800e180:	d020      	beq.n	800e1c4 <USART_SetConfig+0x478>
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e186:	2b07      	cmp	r3, #7
 800e188:	d01a      	beq.n	800e1c0 <USART_SetConfig+0x474>
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e18e:	2b08      	cmp	r3, #8
 800e190:	d014      	beq.n	800e1bc <USART_SetConfig+0x470>
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e196:	2b09      	cmp	r3, #9
 800e198:	d00e      	beq.n	800e1b8 <USART_SetConfig+0x46c>
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e19e:	2b0a      	cmp	r3, #10
 800e1a0:	d008      	beq.n	800e1b4 <USART_SetConfig+0x468>
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1a6:	2b0b      	cmp	r3, #11
 800e1a8:	d102      	bne.n	800e1b0 <USART_SetConfig+0x464>
 800e1aa:	2380      	movs	r3, #128	; 0x80
 800e1ac:	005b      	lsls	r3, r3, #1
 800e1ae:	e016      	b.n	800e1de <USART_SetConfig+0x492>
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	e014      	b.n	800e1de <USART_SetConfig+0x492>
 800e1b4:	2380      	movs	r3, #128	; 0x80
 800e1b6:	e012      	b.n	800e1de <USART_SetConfig+0x492>
 800e1b8:	2340      	movs	r3, #64	; 0x40
 800e1ba:	e010      	b.n	800e1de <USART_SetConfig+0x492>
 800e1bc:	2320      	movs	r3, #32
 800e1be:	e00e      	b.n	800e1de <USART_SetConfig+0x492>
 800e1c0:	2310      	movs	r3, #16
 800e1c2:	e00c      	b.n	800e1de <USART_SetConfig+0x492>
 800e1c4:	230c      	movs	r3, #12
 800e1c6:	e00a      	b.n	800e1de <USART_SetConfig+0x492>
 800e1c8:	230a      	movs	r3, #10
 800e1ca:	e008      	b.n	800e1de <USART_SetConfig+0x492>
 800e1cc:	2308      	movs	r3, #8
 800e1ce:	e006      	b.n	800e1de <USART_SetConfig+0x492>
 800e1d0:	2306      	movs	r3, #6
 800e1d2:	e004      	b.n	800e1de <USART_SetConfig+0x492>
 800e1d4:	2304      	movs	r3, #4
 800e1d6:	e002      	b.n	800e1de <USART_SetConfig+0x492>
 800e1d8:	2302      	movs	r3, #2
 800e1da:	e000      	b.n	800e1de <USART_SetConfig+0x492>
 800e1dc:	2301      	movs	r3, #1
 800e1de:	0019      	movs	r1, r3
 800e1e0:	2380      	movs	r3, #128	; 0x80
 800e1e2:	0218      	lsls	r0, r3, #8
 800e1e4:	f7f1 ff8e 	bl	8000104 <__udivsi3>
 800e1e8:	0003      	movs	r3, r0
 800e1ea:	005a      	lsls	r2, r3, #1
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	685b      	ldr	r3, [r3, #4]
 800e1f0:	085b      	lsrs	r3, r3, #1
 800e1f2:	18d2      	adds	r2, r2, r3
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	685b      	ldr	r3, [r3, #4]
 800e1f8:	0019      	movs	r1, r3
 800e1fa:	0010      	movs	r0, r2
 800e1fc:	f7f1 ff82 	bl	8000104 <__udivsi3>
 800e200:	0003      	movs	r3, r0
 800e202:	61bb      	str	r3, [r7, #24]
      break;
 800e204:	e004      	b.n	800e210 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 800e206:	231e      	movs	r3, #30
 800e208:	18fb      	adds	r3, r7, r3
 800e20a:	2201      	movs	r2, #1
 800e20c:	701a      	strb	r2, [r3, #0]
      break;
 800e20e:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800e210:	69bb      	ldr	r3, [r7, #24]
 800e212:	2b0f      	cmp	r3, #15
 800e214:	d91c      	bls.n	800e250 <USART_SetConfig+0x504>
 800e216:	69ba      	ldr	r2, [r7, #24]
 800e218:	2380      	movs	r3, #128	; 0x80
 800e21a:	025b      	lsls	r3, r3, #9
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d217      	bcs.n	800e250 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e220:	69bb      	ldr	r3, [r7, #24]
 800e222:	b29a      	uxth	r2, r3
 800e224:	200e      	movs	r0, #14
 800e226:	183b      	adds	r3, r7, r0
 800e228:	210f      	movs	r1, #15
 800e22a:	438a      	bics	r2, r1
 800e22c:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e22e:	69bb      	ldr	r3, [r7, #24]
 800e230:	085b      	lsrs	r3, r3, #1
 800e232:	b29b      	uxth	r3, r3
 800e234:	2207      	movs	r2, #7
 800e236:	4013      	ands	r3, r2
 800e238:	b299      	uxth	r1, r3
 800e23a:	183b      	adds	r3, r7, r0
 800e23c:	183a      	adds	r2, r7, r0
 800e23e:	8812      	ldrh	r2, [r2, #0]
 800e240:	430a      	orrs	r2, r1
 800e242:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	183a      	adds	r2, r7, r0
 800e24a:	8812      	ldrh	r2, [r2, #0]
 800e24c:	60da      	str	r2, [r3, #12]
 800e24e:	e003      	b.n	800e258 <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 800e250:	231e      	movs	r3, #30
 800e252:	18fb      	adds	r3, r7, r3
 800e254:	2201      	movs	r2, #1
 800e256:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2201      	movs	r2, #1
 800e25c:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2201      	movs	r2, #1
 800e262:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2200      	movs	r2, #0
 800e268:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2200      	movs	r2, #0
 800e26e:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 800e270:	231e      	movs	r3, #30
 800e272:	18fb      	adds	r3, r7, r3
 800e274:	781b      	ldrb	r3, [r3, #0]
}
 800e276:	0018      	movs	r0, r3
 800e278:	46bd      	mov	sp, r7
 800e27a:	b008      	add	sp, #32
 800e27c:	bd80      	pop	{r7, pc}
 800e27e:	46c0      	nop			; (mov r8, r8)
 800e280:	00f42400 	.word	0x00f42400

0800e284 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b086      	sub	sp, #24
 800e288:	af02      	add	r7, sp, #8
 800e28a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2200      	movs	r2, #0
 800e290:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e292:	f7f9 f9d9 	bl	8007648 <HAL_GetTick>
 800e296:	0003      	movs	r3, r0
 800e298:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	2208      	movs	r2, #8
 800e2a2:	4013      	ands	r3, r2
 800e2a4:	2b08      	cmp	r3, #8
 800e2a6:	d10e      	bne.n	800e2c6 <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800e2a8:	68fa      	ldr	r2, [r7, #12]
 800e2aa:	2380      	movs	r3, #128	; 0x80
 800e2ac:	0399      	lsls	r1, r3, #14
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	23fa      	movs	r3, #250	; 0xfa
 800e2b2:	009b      	lsls	r3, r3, #2
 800e2b4:	9300      	str	r3, [sp, #0]
 800e2b6:	0013      	movs	r3, r2
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	f7ff fd12 	bl	800dce2 <USART_WaitOnFlagUntilTimeout>
 800e2be:	1e03      	subs	r3, r0, #0
 800e2c0:	d001      	beq.n	800e2c6 <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e2c2:	2303      	movs	r3, #3
 800e2c4:	e01e      	b.n	800e304 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	2204      	movs	r2, #4
 800e2ce:	4013      	ands	r3, r2
 800e2d0:	2b04      	cmp	r3, #4
 800e2d2:	d10e      	bne.n	800e2f2 <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800e2d4:	68fa      	ldr	r2, [r7, #12]
 800e2d6:	2380      	movs	r3, #128	; 0x80
 800e2d8:	03d9      	lsls	r1, r3, #15
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	23fa      	movs	r3, #250	; 0xfa
 800e2de:	009b      	lsls	r3, r3, #2
 800e2e0:	9300      	str	r3, [sp, #0]
 800e2e2:	0013      	movs	r3, r2
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	f7ff fcfc 	bl	800dce2 <USART_WaitOnFlagUntilTimeout>
 800e2ea:	1e03      	subs	r3, r0, #0
 800e2ec:	d001      	beq.n	800e2f2 <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e2ee:	2303      	movs	r3, #3
 800e2f0:	e008      	b.n	800e304 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	2259      	movs	r2, #89	; 0x59
 800e2f6:	2101      	movs	r1, #1
 800e2f8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2258      	movs	r2, #88	; 0x58
 800e2fe:	2100      	movs	r1, #0
 800e300:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e302:	2300      	movs	r3, #0
}
 800e304:	0018      	movs	r0, r3
 800e306:	46bd      	mov	sp, r7
 800e308:	b004      	add	sp, #16
 800e30a:	bd80      	pop	{r7, pc}

0800e30c <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b082      	sub	sp, #8
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	681a      	ldr	r2, [r3, #0]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	2140      	movs	r1, #64	; 0x40
 800e320:	438a      	bics	r2, r1
 800e322:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	689a      	ldr	r2, [r3, #8]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	2101      	movs	r1, #1
 800e330:	438a      	bics	r2, r1
 800e332:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2200      	movs	r2, #0
 800e338:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2259      	movs	r2, #89	; 0x59
 800e33e:	5c9b      	ldrb	r3, [r3, r2]
 800e340:	b2db      	uxtb	r3, r3
 800e342:	2b12      	cmp	r3, #18
 800e344:	d114      	bne.n	800e370 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	2208      	movs	r2, #8
 800e34c:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	699a      	ldr	r2, [r3, #24]
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	2108      	movs	r1, #8
 800e35a:	430a      	orrs	r2, r1
 800e35c:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	2259      	movs	r2, #89	; 0x59
 800e362:	2101      	movs	r1, #1
 800e364:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	0018      	movs	r0, r3
 800e36a:	f7f4 fee7 	bl	800313c <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e36e:	e00c      	b.n	800e38a <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e374:	b29b      	uxth	r3, r3
 800e376:	2b00      	cmp	r3, #0
 800e378:	d107      	bne.n	800e38a <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2259      	movs	r2, #89	; 0x59
 800e37e:	2101      	movs	r1, #1
 800e380:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	0018      	movs	r0, r3
 800e386:	f7ff fc67 	bl	800dc58 <HAL_USART_TxRxCpltCallback>
}
 800e38a:	46c0      	nop			; (mov r8, r8)
 800e38c:	46bd      	mov	sp, r7
 800e38e:	b002      	add	sp, #8
 800e390:	bd80      	pop	{r7, pc}

0800e392 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 800e392:	b580      	push	{r7, lr}
 800e394:	b082      	sub	sp, #8
 800e396:	af00      	add	r7, sp, #0
 800e398:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e39a:	46c0      	nop			; (mov r8, r8)
 800e39c:	46bd      	mov	sp, r7
 800e39e:	b002      	add	sp, #8
 800e3a0:	bd80      	pop	{r7, pc}

0800e3a2 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 800e3a2:	b580      	push	{r7, lr}
 800e3a4:	b082      	sub	sp, #8
 800e3a6:	af00      	add	r7, sp, #0
 800e3a8:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e3aa:	46c0      	nop			; (mov r8, r8)
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	b002      	add	sp, #8
 800e3b0:	bd80      	pop	{r7, pc}

0800e3b2 <LL_GPIO_SetPinMode>:
{
 800e3b2:	b580      	push	{r7, lr}
 800e3b4:	b084      	sub	sp, #16
 800e3b6:	af00      	add	r7, sp, #0
 800e3b8:	60f8      	str	r0, [r7, #12]
 800e3ba:	60b9      	str	r1, [r7, #8]
 800e3bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	6819      	ldr	r1, [r3, #0]
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	435b      	muls	r3, r3
 800e3c6:	001a      	movs	r2, r3
 800e3c8:	0013      	movs	r3, r2
 800e3ca:	005b      	lsls	r3, r3, #1
 800e3cc:	189b      	adds	r3, r3, r2
 800e3ce:	43db      	mvns	r3, r3
 800e3d0:	400b      	ands	r3, r1
 800e3d2:	001a      	movs	r2, r3
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	435b      	muls	r3, r3
 800e3d8:	6879      	ldr	r1, [r7, #4]
 800e3da:	434b      	muls	r3, r1
 800e3dc:	431a      	orrs	r2, r3
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	601a      	str	r2, [r3, #0]
}
 800e3e2:	46c0      	nop			; (mov r8, r8)
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	b004      	add	sp, #16
 800e3e8:	bd80      	pop	{r7, pc}

0800e3ea <LL_GPIO_SetPinOutputType>:
{
 800e3ea:	b580      	push	{r7, lr}
 800e3ec:	b084      	sub	sp, #16
 800e3ee:	af00      	add	r7, sp, #0
 800e3f0:	60f8      	str	r0, [r7, #12]
 800e3f2:	60b9      	str	r1, [r7, #8]
 800e3f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	685b      	ldr	r3, [r3, #4]
 800e3fa:	68ba      	ldr	r2, [r7, #8]
 800e3fc:	43d2      	mvns	r2, r2
 800e3fe:	401a      	ands	r2, r3
 800e400:	68bb      	ldr	r3, [r7, #8]
 800e402:	6879      	ldr	r1, [r7, #4]
 800e404:	434b      	muls	r3, r1
 800e406:	431a      	orrs	r2, r3
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	605a      	str	r2, [r3, #4]
}
 800e40c:	46c0      	nop			; (mov r8, r8)
 800e40e:	46bd      	mov	sp, r7
 800e410:	b004      	add	sp, #16
 800e412:	bd80      	pop	{r7, pc}

0800e414 <LL_GPIO_SetPinSpeed>:
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b084      	sub	sp, #16
 800e418:	af00      	add	r7, sp, #0
 800e41a:	60f8      	str	r0, [r7, #12]
 800e41c:	60b9      	str	r1, [r7, #8]
 800e41e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	6899      	ldr	r1, [r3, #8]
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	435b      	muls	r3, r3
 800e428:	001a      	movs	r2, r3
 800e42a:	0013      	movs	r3, r2
 800e42c:	005b      	lsls	r3, r3, #1
 800e42e:	189b      	adds	r3, r3, r2
 800e430:	43db      	mvns	r3, r3
 800e432:	400b      	ands	r3, r1
 800e434:	001a      	movs	r2, r3
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	435b      	muls	r3, r3
 800e43a:	6879      	ldr	r1, [r7, #4]
 800e43c:	434b      	muls	r3, r1
 800e43e:	431a      	orrs	r2, r3
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	609a      	str	r2, [r3, #8]
}
 800e444:	46c0      	nop			; (mov r8, r8)
 800e446:	46bd      	mov	sp, r7
 800e448:	b004      	add	sp, #16
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <LL_GPIO_SetPinPull>:
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b084      	sub	sp, #16
 800e450:	af00      	add	r7, sp, #0
 800e452:	60f8      	str	r0, [r7, #12]
 800e454:	60b9      	str	r1, [r7, #8]
 800e456:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	68d9      	ldr	r1, [r3, #12]
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	435b      	muls	r3, r3
 800e460:	001a      	movs	r2, r3
 800e462:	0013      	movs	r3, r2
 800e464:	005b      	lsls	r3, r3, #1
 800e466:	189b      	adds	r3, r3, r2
 800e468:	43db      	mvns	r3, r3
 800e46a:	400b      	ands	r3, r1
 800e46c:	001a      	movs	r2, r3
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	435b      	muls	r3, r3
 800e472:	6879      	ldr	r1, [r7, #4]
 800e474:	434b      	muls	r3, r1
 800e476:	431a      	orrs	r2, r3
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	60da      	str	r2, [r3, #12]
}
 800e47c:	46c0      	nop			; (mov r8, r8)
 800e47e:	46bd      	mov	sp, r7
 800e480:	b004      	add	sp, #16
 800e482:	bd80      	pop	{r7, pc}

0800e484 <LL_GPIO_SetAFPin_0_7>:
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b084      	sub	sp, #16
 800e488:	af00      	add	r7, sp, #0
 800e48a:	60f8      	str	r0, [r7, #12]
 800e48c:	60b9      	str	r1, [r7, #8]
 800e48e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	6a19      	ldr	r1, [r3, #32]
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	435b      	muls	r3, r3
 800e498:	68ba      	ldr	r2, [r7, #8]
 800e49a:	4353      	muls	r3, r2
 800e49c:	68ba      	ldr	r2, [r7, #8]
 800e49e:	435a      	muls	r2, r3
 800e4a0:	0013      	movs	r3, r2
 800e4a2:	011b      	lsls	r3, r3, #4
 800e4a4:	1a9b      	subs	r3, r3, r2
 800e4a6:	43db      	mvns	r3, r3
 800e4a8:	400b      	ands	r3, r1
 800e4aa:	001a      	movs	r2, r3
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	435b      	muls	r3, r3
 800e4b0:	68b9      	ldr	r1, [r7, #8]
 800e4b2:	434b      	muls	r3, r1
 800e4b4:	68b9      	ldr	r1, [r7, #8]
 800e4b6:	434b      	muls	r3, r1
 800e4b8:	6879      	ldr	r1, [r7, #4]
 800e4ba:	434b      	muls	r3, r1
 800e4bc:	431a      	orrs	r2, r3
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	621a      	str	r2, [r3, #32]
}
 800e4c2:	46c0      	nop			; (mov r8, r8)
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	b004      	add	sp, #16
 800e4c8:	bd80      	pop	{r7, pc}

0800e4ca <LL_GPIO_SetAFPin_8_15>:
{
 800e4ca:	b580      	push	{r7, lr}
 800e4cc:	b084      	sub	sp, #16
 800e4ce:	af00      	add	r7, sp, #0
 800e4d0:	60f8      	str	r0, [r7, #12]
 800e4d2:	60b9      	str	r1, [r7, #8]
 800e4d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	0a1b      	lsrs	r3, r3, #8
 800e4de:	68ba      	ldr	r2, [r7, #8]
 800e4e0:	0a12      	lsrs	r2, r2, #8
 800e4e2:	4353      	muls	r3, r2
 800e4e4:	68ba      	ldr	r2, [r7, #8]
 800e4e6:	0a12      	lsrs	r2, r2, #8
 800e4e8:	4353      	muls	r3, r2
 800e4ea:	68ba      	ldr	r2, [r7, #8]
 800e4ec:	0a12      	lsrs	r2, r2, #8
 800e4ee:	435a      	muls	r2, r3
 800e4f0:	0013      	movs	r3, r2
 800e4f2:	011b      	lsls	r3, r3, #4
 800e4f4:	1a9b      	subs	r3, r3, r2
 800e4f6:	43db      	mvns	r3, r3
 800e4f8:	400b      	ands	r3, r1
 800e4fa:	001a      	movs	r2, r3
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	0a1b      	lsrs	r3, r3, #8
 800e500:	68b9      	ldr	r1, [r7, #8]
 800e502:	0a09      	lsrs	r1, r1, #8
 800e504:	434b      	muls	r3, r1
 800e506:	68b9      	ldr	r1, [r7, #8]
 800e508:	0a09      	lsrs	r1, r1, #8
 800e50a:	434b      	muls	r3, r1
 800e50c:	68b9      	ldr	r1, [r7, #8]
 800e50e:	0a09      	lsrs	r1, r1, #8
 800e510:	434b      	muls	r3, r1
 800e512:	6879      	ldr	r1, [r7, #4]
 800e514:	434b      	muls	r3, r1
 800e516:	431a      	orrs	r2, r3
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800e51c:	46c0      	nop			; (mov r8, r8)
 800e51e:	46bd      	mov	sp, r7
 800e520:	b004      	add	sp, #16
 800e522:	bd80      	pop	{r7, pc}

0800e524 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b084      	sub	sp, #16
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800e52e:	2300      	movs	r3, #0
 800e530:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800e532:	e047      	b.n	800e5c4 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	2101      	movs	r1, #1
 800e53a:	68fa      	ldr	r2, [r7, #12]
 800e53c:	4091      	lsls	r1, r2
 800e53e:	000a      	movs	r2, r1
 800e540:	4013      	ands	r3, r2
 800e542:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d039      	beq.n	800e5be <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	685b      	ldr	r3, [r3, #4]
 800e54e:	2b01      	cmp	r3, #1
 800e550:	d003      	beq.n	800e55a <LL_GPIO_Init+0x36>
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	685b      	ldr	r3, [r3, #4]
 800e556:	2b02      	cmp	r3, #2
 800e558:	d10d      	bne.n	800e576 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	689a      	ldr	r2, [r3, #8]
 800e55e:	68b9      	ldr	r1, [r7, #8]
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	0018      	movs	r0, r3
 800e564:	f7ff ff56 	bl	800e414 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	68da      	ldr	r2, [r3, #12]
 800e56c:	68b9      	ldr	r1, [r7, #8]
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	0018      	movs	r0, r3
 800e572:	f7ff ff3a 	bl	800e3ea <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	691a      	ldr	r2, [r3, #16]
 800e57a:	68b9      	ldr	r1, [r7, #8]
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	0018      	movs	r0, r3
 800e580:	f7ff ff64 	bl	800e44c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	685b      	ldr	r3, [r3, #4]
 800e588:	2b02      	cmp	r3, #2
 800e58a:	d111      	bne.n	800e5b0 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	2bff      	cmp	r3, #255	; 0xff
 800e590:	d807      	bhi.n	800e5a2 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	695a      	ldr	r2, [r3, #20]
 800e596:	68b9      	ldr	r1, [r7, #8]
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	0018      	movs	r0, r3
 800e59c:	f7ff ff72 	bl	800e484 <LL_GPIO_SetAFPin_0_7>
 800e5a0:	e006      	b.n	800e5b0 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	695a      	ldr	r2, [r3, #20]
 800e5a6:	68b9      	ldr	r1, [r7, #8]
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	0018      	movs	r0, r3
 800e5ac:	f7ff ff8d 	bl	800e4ca <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	685a      	ldr	r2, [r3, #4]
 800e5b4:	68b9      	ldr	r1, [r7, #8]
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	0018      	movs	r0, r3
 800e5ba:	f7ff fefa 	bl	800e3b2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	3301      	adds	r3, #1
 800e5c2:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	681a      	ldr	r2, [r3, #0]
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	40da      	lsrs	r2, r3
 800e5cc:	1e13      	subs	r3, r2, #0
 800e5ce:	d1b1      	bne.n	800e534 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800e5d0:	2300      	movs	r3, #0
}
 800e5d2:	0018      	movs	r0, r3
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	b004      	add	sp, #16
 800e5d8:	bd80      	pop	{r7, pc}
	...

0800e5dc <LL_RCC_HSI_IsReady>:
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800e5e0:	4b07      	ldr	r3, [pc, #28]	; (800e600 <LL_RCC_HSI_IsReady+0x24>)
 800e5e2:	681a      	ldr	r2, [r3, #0]
 800e5e4:	2380      	movs	r3, #128	; 0x80
 800e5e6:	00db      	lsls	r3, r3, #3
 800e5e8:	401a      	ands	r2, r3
 800e5ea:	2380      	movs	r3, #128	; 0x80
 800e5ec:	00db      	lsls	r3, r3, #3
 800e5ee:	429a      	cmp	r2, r3
 800e5f0:	d101      	bne.n	800e5f6 <LL_RCC_HSI_IsReady+0x1a>
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	e000      	b.n	800e5f8 <LL_RCC_HSI_IsReady+0x1c>
 800e5f6:	2300      	movs	r3, #0
}
 800e5f8:	0018      	movs	r0, r3
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	46c0      	nop			; (mov r8, r8)
 800e600:	40021000 	.word	0x40021000

0800e604 <LL_RCC_LSE_IsReady>:
{
 800e604:	b580      	push	{r7, lr}
 800e606:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800e608:	4b05      	ldr	r3, [pc, #20]	; (800e620 <LL_RCC_LSE_IsReady+0x1c>)
 800e60a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e60c:	2202      	movs	r2, #2
 800e60e:	4013      	ands	r3, r2
 800e610:	2b02      	cmp	r3, #2
 800e612:	d101      	bne.n	800e618 <LL_RCC_LSE_IsReady+0x14>
 800e614:	2301      	movs	r3, #1
 800e616:	e000      	b.n	800e61a <LL_RCC_LSE_IsReady+0x16>
 800e618:	2300      	movs	r3, #0
}
 800e61a:	0018      	movs	r0, r3
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}
 800e620:	40021000 	.word	0x40021000

0800e624 <LL_RCC_GetSysClkSource>:
{
 800e624:	b580      	push	{r7, lr}
 800e626:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800e628:	4b03      	ldr	r3, [pc, #12]	; (800e638 <LL_RCC_GetSysClkSource+0x14>)
 800e62a:	689b      	ldr	r3, [r3, #8]
 800e62c:	2238      	movs	r2, #56	; 0x38
 800e62e:	4013      	ands	r3, r2
}
 800e630:	0018      	movs	r0, r3
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}
 800e636:	46c0      	nop			; (mov r8, r8)
 800e638:	40021000 	.word	0x40021000

0800e63c <LL_RCC_GetAHBPrescaler>:
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800e640:	4b03      	ldr	r3, [pc, #12]	; (800e650 <LL_RCC_GetAHBPrescaler+0x14>)
 800e642:	689a      	ldr	r2, [r3, #8]
 800e644:	23f0      	movs	r3, #240	; 0xf0
 800e646:	011b      	lsls	r3, r3, #4
 800e648:	4013      	ands	r3, r2
}
 800e64a:	0018      	movs	r0, r3
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}
 800e650:	40021000 	.word	0x40021000

0800e654 <LL_RCC_GetAPB1Prescaler>:
{
 800e654:	b580      	push	{r7, lr}
 800e656:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800e658:	4b03      	ldr	r3, [pc, #12]	; (800e668 <LL_RCC_GetAPB1Prescaler+0x14>)
 800e65a:	689a      	ldr	r2, [r3, #8]
 800e65c:	23e0      	movs	r3, #224	; 0xe0
 800e65e:	01db      	lsls	r3, r3, #7
 800e660:	4013      	ands	r3, r2
}
 800e662:	0018      	movs	r0, r3
 800e664:	46bd      	mov	sp, r7
 800e666:	bd80      	pop	{r7, pc}
 800e668:	40021000 	.word	0x40021000

0800e66c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b082      	sub	sp, #8
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800e674:	4b05      	ldr	r3, [pc, #20]	; (800e68c <LL_RCC_GetUSARTClockSource+0x20>)
 800e676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e678:	687a      	ldr	r2, [r7, #4]
 800e67a:	401a      	ands	r2, r3
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	041b      	lsls	r3, r3, #16
 800e680:	4313      	orrs	r3, r2
}
 800e682:	0018      	movs	r0, r3
 800e684:	46bd      	mov	sp, r7
 800e686:	b002      	add	sp, #8
 800e688:	bd80      	pop	{r7, pc}
 800e68a:	46c0      	nop			; (mov r8, r8)
 800e68c:	40021000 	.word	0x40021000

0800e690 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800e694:	4b03      	ldr	r3, [pc, #12]	; (800e6a4 <LL_RCC_PLL_GetN+0x14>)
 800e696:	68db      	ldr	r3, [r3, #12]
 800e698:	0a1b      	lsrs	r3, r3, #8
 800e69a:	227f      	movs	r2, #127	; 0x7f
 800e69c:	4013      	ands	r3, r2
}
 800e69e:	0018      	movs	r0, r3
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}
 800e6a4:	40021000 	.word	0x40021000

0800e6a8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800e6ac:	4b03      	ldr	r3, [pc, #12]	; (800e6bc <LL_RCC_PLL_GetR+0x14>)
 800e6ae:	68db      	ldr	r3, [r3, #12]
 800e6b0:	0f5b      	lsrs	r3, r3, #29
 800e6b2:	075b      	lsls	r3, r3, #29
}
 800e6b4:	0018      	movs	r0, r3
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}
 800e6ba:	46c0      	nop			; (mov r8, r8)
 800e6bc:	40021000 	.word	0x40021000

0800e6c0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800e6c4:	4b03      	ldr	r3, [pc, #12]	; (800e6d4 <LL_RCC_PLL_GetMainSource+0x14>)
 800e6c6:	68db      	ldr	r3, [r3, #12]
 800e6c8:	2203      	movs	r2, #3
 800e6ca:	4013      	ands	r3, r2
}
 800e6cc:	0018      	movs	r0, r3
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}
 800e6d2:	46c0      	nop			; (mov r8, r8)
 800e6d4:	40021000 	.word	0x40021000

0800e6d8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800e6dc:	4b03      	ldr	r3, [pc, #12]	; (800e6ec <LL_RCC_PLL_GetDivider+0x14>)
 800e6de:	68db      	ldr	r3, [r3, #12]
 800e6e0:	2270      	movs	r2, #112	; 0x70
 800e6e2:	4013      	ands	r3, r2
}
 800e6e4:	0018      	movs	r0, r3
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}
 800e6ea:	46c0      	nop			; (mov r8, r8)
 800e6ec:	40021000 	.word	0x40021000

0800e6f0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b082      	sub	sp, #8
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800e6f8:	f000 f8a8 	bl	800e84c <RCC_GetSystemClockFreq>
 800e6fc:	0002      	movs	r2, r0
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	0018      	movs	r0, r3
 800e708:	f000 f8ce 	bl	800e8a8 <RCC_GetHCLKClockFreq>
 800e70c:	0002      	movs	r2, r0
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	685b      	ldr	r3, [r3, #4]
 800e716:	0018      	movs	r0, r3
 800e718:	f000 f8de 	bl	800e8d8 <RCC_GetPCLK1ClockFreq>
 800e71c:	0002      	movs	r2, r0
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	609a      	str	r2, [r3, #8]
}
 800e722:	46c0      	nop			; (mov r8, r8)
 800e724:	46bd      	mov	sp, r7
 800e726:	b002      	add	sp, #8
 800e728:	bd80      	pop	{r7, pc}
	...

0800e72c <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b084      	sub	sp, #16
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800e734:	2300      	movs	r3, #0
 800e736:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2b03      	cmp	r3, #3
 800e73c:	d134      	bne.n	800e7a8 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	0018      	movs	r0, r3
 800e742:	f7ff ff93 	bl	800e66c <LL_RCC_GetUSARTClockSource>
 800e746:	0003      	movs	r3, r0
 800e748:	4a39      	ldr	r2, [pc, #228]	; (800e830 <LL_RCC_GetUSARTClockFreq+0x104>)
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d016      	beq.n	800e77c <LL_RCC_GetUSARTClockFreq+0x50>
 800e74e:	4a38      	ldr	r2, [pc, #224]	; (800e830 <LL_RCC_GetUSARTClockFreq+0x104>)
 800e750:	4293      	cmp	r3, r2
 800e752:	d81c      	bhi.n	800e78e <LL_RCC_GetUSARTClockFreq+0x62>
 800e754:	4a37      	ldr	r2, [pc, #220]	; (800e834 <LL_RCC_GetUSARTClockFreq+0x108>)
 800e756:	4293      	cmp	r3, r2
 800e758:	d003      	beq.n	800e762 <LL_RCC_GetUSARTClockFreq+0x36>
 800e75a:	4a37      	ldr	r2, [pc, #220]	; (800e838 <LL_RCC_GetUSARTClockFreq+0x10c>)
 800e75c:	4293      	cmp	r3, r2
 800e75e:	d005      	beq.n	800e76c <LL_RCC_GetUSARTClockFreq+0x40>
 800e760:	e015      	b.n	800e78e <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800e762:	f000 f873 	bl	800e84c <RCC_GetSystemClockFreq>
 800e766:	0003      	movs	r3, r0
 800e768:	60fb      	str	r3, [r7, #12]
        break;
 800e76a:	e05c      	b.n	800e826 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800e76c:	f7ff ff36 	bl	800e5dc <LL_RCC_HSI_IsReady>
 800e770:	0003      	movs	r3, r0
 800e772:	2b01      	cmp	r3, #1
 800e774:	d150      	bne.n	800e818 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 800e776:	4b31      	ldr	r3, [pc, #196]	; (800e83c <LL_RCC_GetUSARTClockFreq+0x110>)
 800e778:	60fb      	str	r3, [r7, #12]
        }
        break;
 800e77a:	e04d      	b.n	800e818 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800e77c:	f7ff ff42 	bl	800e604 <LL_RCC_LSE_IsReady>
 800e780:	0003      	movs	r3, r0
 800e782:	2b01      	cmp	r3, #1
 800e784:	d14a      	bne.n	800e81c <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 800e786:	2380      	movs	r3, #128	; 0x80
 800e788:	021b      	lsls	r3, r3, #8
 800e78a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800e78c:	e046      	b.n	800e81c <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800e78e:	f000 f85d 	bl	800e84c <RCC_GetSystemClockFreq>
 800e792:	0003      	movs	r3, r0
 800e794:	0018      	movs	r0, r3
 800e796:	f000 f887 	bl	800e8a8 <RCC_GetHCLKClockFreq>
 800e79a:	0003      	movs	r3, r0
 800e79c:	0018      	movs	r0, r3
 800e79e:	f000 f89b 	bl	800e8d8 <RCC_GetPCLK1ClockFreq>
 800e7a2:	0003      	movs	r3, r0
 800e7a4:	60fb      	str	r3, [r7, #12]
        break;
 800e7a6:	e03e      	b.n	800e826 <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2b0c      	cmp	r3, #12
 800e7ac:	d13b      	bne.n	800e826 <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	0018      	movs	r0, r3
 800e7b2:	f7ff ff5b 	bl	800e66c <LL_RCC_GetUSARTClockSource>
 800e7b6:	0003      	movs	r3, r0
 800e7b8:	4a21      	ldr	r2, [pc, #132]	; (800e840 <LL_RCC_GetUSARTClockFreq+0x114>)
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	d016      	beq.n	800e7ec <LL_RCC_GetUSARTClockFreq+0xc0>
 800e7be:	4a20      	ldr	r2, [pc, #128]	; (800e840 <LL_RCC_GetUSARTClockFreq+0x114>)
 800e7c0:	4293      	cmp	r3, r2
 800e7c2:	d81c      	bhi.n	800e7fe <LL_RCC_GetUSARTClockFreq+0xd2>
 800e7c4:	4a1f      	ldr	r2, [pc, #124]	; (800e844 <LL_RCC_GetUSARTClockFreq+0x118>)
 800e7c6:	4293      	cmp	r3, r2
 800e7c8:	d003      	beq.n	800e7d2 <LL_RCC_GetUSARTClockFreq+0xa6>
 800e7ca:	4a1f      	ldr	r2, [pc, #124]	; (800e848 <LL_RCC_GetUSARTClockFreq+0x11c>)
 800e7cc:	4293      	cmp	r3, r2
 800e7ce:	d005      	beq.n	800e7dc <LL_RCC_GetUSARTClockFreq+0xb0>
 800e7d0:	e015      	b.n	800e7fe <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800e7d2:	f000 f83b 	bl	800e84c <RCC_GetSystemClockFreq>
 800e7d6:	0003      	movs	r3, r0
 800e7d8:	60fb      	str	r3, [r7, #12]
        break;
 800e7da:	e024      	b.n	800e826 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800e7dc:	f7ff fefe 	bl	800e5dc <LL_RCC_HSI_IsReady>
 800e7e0:	0003      	movs	r3, r0
 800e7e2:	2b01      	cmp	r3, #1
 800e7e4:	d11c      	bne.n	800e820 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800e7e6:	4b15      	ldr	r3, [pc, #84]	; (800e83c <LL_RCC_GetUSARTClockFreq+0x110>)
 800e7e8:	60fb      	str	r3, [r7, #12]
        }
        break;
 800e7ea:	e019      	b.n	800e820 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800e7ec:	f7ff ff0a 	bl	800e604 <LL_RCC_LSE_IsReady>
 800e7f0:	0003      	movs	r3, r0
 800e7f2:	2b01      	cmp	r3, #1
 800e7f4:	d116      	bne.n	800e824 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800e7f6:	2380      	movs	r3, #128	; 0x80
 800e7f8:	021b      	lsls	r3, r3, #8
 800e7fa:	60fb      	str	r3, [r7, #12]
        }
        break;
 800e7fc:	e012      	b.n	800e824 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800e7fe:	f000 f825 	bl	800e84c <RCC_GetSystemClockFreq>
 800e802:	0003      	movs	r3, r0
 800e804:	0018      	movs	r0, r3
 800e806:	f000 f84f 	bl	800e8a8 <RCC_GetHCLKClockFreq>
 800e80a:	0003      	movs	r3, r0
 800e80c:	0018      	movs	r0, r3
 800e80e:	f000 f863 	bl	800e8d8 <RCC_GetPCLK1ClockFreq>
 800e812:	0003      	movs	r3, r0
 800e814:	60fb      	str	r3, [r7, #12]
        break;
 800e816:	e006      	b.n	800e826 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800e818:	46c0      	nop			; (mov r8, r8)
 800e81a:	e004      	b.n	800e826 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800e81c:	46c0      	nop			; (mov r8, r8)
 800e81e:	e002      	b.n	800e826 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800e820:	46c0      	nop			; (mov r8, r8)
 800e822:	e000      	b.n	800e826 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800e824:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800e826:	68fb      	ldr	r3, [r7, #12]
}
 800e828:	0018      	movs	r0, r3
 800e82a:	46bd      	mov	sp, r7
 800e82c:	b004      	add	sp, #16
 800e82e:	bd80      	pop	{r7, pc}
 800e830:	00030003 	.word	0x00030003
 800e834:	00030001 	.word	0x00030001
 800e838:	00030002 	.word	0x00030002
 800e83c:	00f42400 	.word	0x00f42400
 800e840:	000c000c 	.word	0x000c000c
 800e844:	000c0004 	.word	0x000c0004
 800e848:	000c0008 	.word	0x000c0008

0800e84c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b082      	sub	sp, #8
 800e850:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800e852:	f7ff fee7 	bl	800e624 <LL_RCC_GetSysClkSource>
 800e856:	0003      	movs	r3, r0
 800e858:	2b08      	cmp	r3, #8
 800e85a:	d002      	beq.n	800e862 <RCC_GetSystemClockFreq+0x16>
 800e85c:	2b10      	cmp	r3, #16
 800e85e:	d003      	beq.n	800e868 <RCC_GetSystemClockFreq+0x1c>
 800e860:	e007      	b.n	800e872 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800e862:	4b0e      	ldr	r3, [pc, #56]	; (800e89c <RCC_GetSystemClockFreq+0x50>)
 800e864:	607b      	str	r3, [r7, #4]
      break;
 800e866:	e014      	b.n	800e892 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800e868:	f000 f84c 	bl	800e904 <RCC_PLL_GetFreqDomain_SYS>
 800e86c:	0003      	movs	r3, r0
 800e86e:	607b      	str	r3, [r7, #4]
      break;
 800e870:	e00f      	b.n	800e892 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800e872:	4b0b      	ldr	r3, [pc, #44]	; (800e8a0 <RCC_GetSystemClockFreq+0x54>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	0adb      	lsrs	r3, r3, #11
 800e878:	2207      	movs	r2, #7
 800e87a:	4013      	ands	r3, r2
 800e87c:	2201      	movs	r2, #1
 800e87e:	409a      	lsls	r2, r3
 800e880:	0013      	movs	r3, r2
 800e882:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800e884:	6839      	ldr	r1, [r7, #0]
 800e886:	4807      	ldr	r0, [pc, #28]	; (800e8a4 <RCC_GetSystemClockFreq+0x58>)
 800e888:	f7f1 fc3c 	bl	8000104 <__udivsi3>
 800e88c:	0003      	movs	r3, r0
 800e88e:	607b      	str	r3, [r7, #4]
      break;
 800e890:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800e892:	687b      	ldr	r3, [r7, #4]
}
 800e894:	0018      	movs	r0, r3
 800e896:	46bd      	mov	sp, r7
 800e898:	b002      	add	sp, #8
 800e89a:	bd80      	pop	{r7, pc}
 800e89c:	007a1200 	.word	0x007a1200
 800e8a0:	40021000 	.word	0x40021000
 800e8a4:	00f42400 	.word	0x00f42400

0800e8a8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b082      	sub	sp, #8
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800e8b0:	f7ff fec4 	bl	800e63c <LL_RCC_GetAHBPrescaler>
 800e8b4:	0003      	movs	r3, r0
 800e8b6:	0a1b      	lsrs	r3, r3, #8
 800e8b8:	220f      	movs	r2, #15
 800e8ba:	401a      	ands	r2, r3
 800e8bc:	4b05      	ldr	r3, [pc, #20]	; (800e8d4 <RCC_GetHCLKClockFreq+0x2c>)
 800e8be:	0092      	lsls	r2, r2, #2
 800e8c0:	58d3      	ldr	r3, [r2, r3]
 800e8c2:	221f      	movs	r2, #31
 800e8c4:	4013      	ands	r3, r2
 800e8c6:	687a      	ldr	r2, [r7, #4]
 800e8c8:	40da      	lsrs	r2, r3
 800e8ca:	0013      	movs	r3, r2
}
 800e8cc:	0018      	movs	r0, r3
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	b002      	add	sp, #8
 800e8d2:	bd80      	pop	{r7, pc}
 800e8d4:	0801b6fc 	.word	0x0801b6fc

0800e8d8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b082      	sub	sp, #8
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800e8e0:	f7ff feb8 	bl	800e654 <LL_RCC_GetAPB1Prescaler>
 800e8e4:	0003      	movs	r3, r0
 800e8e6:	0b1a      	lsrs	r2, r3, #12
 800e8e8:	4b05      	ldr	r3, [pc, #20]	; (800e900 <RCC_GetPCLK1ClockFreq+0x28>)
 800e8ea:	0092      	lsls	r2, r2, #2
 800e8ec:	58d3      	ldr	r3, [r2, r3]
 800e8ee:	221f      	movs	r2, #31
 800e8f0:	4013      	ands	r3, r2
 800e8f2:	687a      	ldr	r2, [r7, #4]
 800e8f4:	40da      	lsrs	r2, r3
 800e8f6:	0013      	movs	r3, r2
}
 800e8f8:	0018      	movs	r0, r3
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	b002      	add	sp, #8
 800e8fe:	bd80      	pop	{r7, pc}
 800e900:	0801b73c 	.word	0x0801b73c

0800e904 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800e904:	b590      	push	{r4, r7, lr}
 800e906:	b083      	sub	sp, #12
 800e908:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800e90a:	f7ff fed9 	bl	800e6c0 <LL_RCC_PLL_GetMainSource>
 800e90e:	0003      	movs	r3, r0
 800e910:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	2b02      	cmp	r3, #2
 800e916:	d003      	beq.n	800e920 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	2b03      	cmp	r3, #3
 800e91c:	d003      	beq.n	800e926 <RCC_PLL_GetFreqDomain_SYS+0x22>
 800e91e:	e005      	b.n	800e92c <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800e920:	4b13      	ldr	r3, [pc, #76]	; (800e970 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800e922:	607b      	str	r3, [r7, #4]
      break;
 800e924:	e005      	b.n	800e932 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800e926:	4b13      	ldr	r3, [pc, #76]	; (800e974 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800e928:	607b      	str	r3, [r7, #4]
      break;
 800e92a:	e002      	b.n	800e932 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800e92c:	4b10      	ldr	r3, [pc, #64]	; (800e970 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800e92e:	607b      	str	r3, [r7, #4]
      break;
 800e930:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800e932:	f7ff fead 	bl	800e690 <LL_RCC_PLL_GetN>
 800e936:	0002      	movs	r2, r0
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	4353      	muls	r3, r2
 800e93c:	001c      	movs	r4, r3
 800e93e:	f7ff fecb 	bl	800e6d8 <LL_RCC_PLL_GetDivider>
 800e942:	0003      	movs	r3, r0
 800e944:	091b      	lsrs	r3, r3, #4
 800e946:	3301      	adds	r3, #1
 800e948:	0019      	movs	r1, r3
 800e94a:	0020      	movs	r0, r4
 800e94c:	f7f1 fbda 	bl	8000104 <__udivsi3>
 800e950:	0003      	movs	r3, r0
 800e952:	001c      	movs	r4, r3
 800e954:	f7ff fea8 	bl	800e6a8 <LL_RCC_PLL_GetR>
 800e958:	0003      	movs	r3, r0
 800e95a:	0f5b      	lsrs	r3, r3, #29
 800e95c:	3301      	adds	r3, #1
 800e95e:	0019      	movs	r1, r3
 800e960:	0020      	movs	r0, r4
 800e962:	f7f1 fbcf 	bl	8000104 <__udivsi3>
 800e966:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800e968:	0018      	movs	r0, r3
 800e96a:	46bd      	mov	sp, r7
 800e96c:	b003      	add	sp, #12
 800e96e:	bd90      	pop	{r4, r7, pc}
 800e970:	00f42400 	.word	0x00f42400
 800e974:	007a1200 	.word	0x007a1200

0800e978 <LL_USART_IsEnabled>:
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b082      	sub	sp, #8
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	2201      	movs	r2, #1
 800e986:	4013      	ands	r3, r2
 800e988:	2b01      	cmp	r3, #1
 800e98a:	d101      	bne.n	800e990 <LL_USART_IsEnabled+0x18>
 800e98c:	2301      	movs	r3, #1
 800e98e:	e000      	b.n	800e992 <LL_USART_IsEnabled+0x1a>
 800e990:	2300      	movs	r3, #0
}
 800e992:	0018      	movs	r0, r3
 800e994:	46bd      	mov	sp, r7
 800e996:	b002      	add	sp, #8
 800e998:	bd80      	pop	{r7, pc}

0800e99a <LL_USART_SetPrescaler>:
{
 800e99a:	b580      	push	{r7, lr}
 800e99c:	b082      	sub	sp, #8
 800e99e:	af00      	add	r7, sp, #0
 800e9a0:	6078      	str	r0, [r7, #4]
 800e9a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9a8:	220f      	movs	r2, #15
 800e9aa:	4393      	bics	r3, r2
 800e9ac:	683a      	ldr	r2, [r7, #0]
 800e9ae:	b292      	uxth	r2, r2
 800e9b0:	431a      	orrs	r2, r3
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800e9b6:	46c0      	nop			; (mov r8, r8)
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	b002      	add	sp, #8
 800e9bc:	bd80      	pop	{r7, pc}
	...

0800e9c0 <LL_USART_SetStopBitsLength>:
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b082      	sub	sp, #8
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
 800e9c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	685b      	ldr	r3, [r3, #4]
 800e9ce:	4a05      	ldr	r2, [pc, #20]	; (800e9e4 <LL_USART_SetStopBitsLength+0x24>)
 800e9d0:	401a      	ands	r2, r3
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	431a      	orrs	r2, r3
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	605a      	str	r2, [r3, #4]
}
 800e9da:	46c0      	nop			; (mov r8, r8)
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	b002      	add	sp, #8
 800e9e0:	bd80      	pop	{r7, pc}
 800e9e2:	46c0      	nop			; (mov r8, r8)
 800e9e4:	ffffcfff 	.word	0xffffcfff

0800e9e8 <LL_USART_SetHWFlowCtrl>:
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	689b      	ldr	r3, [r3, #8]
 800e9f6:	4a05      	ldr	r2, [pc, #20]	; (800ea0c <LL_USART_SetHWFlowCtrl+0x24>)
 800e9f8:	401a      	ands	r2, r3
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	431a      	orrs	r2, r3
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	609a      	str	r2, [r3, #8]
}
 800ea02:	46c0      	nop			; (mov r8, r8)
 800ea04:	46bd      	mov	sp, r7
 800ea06:	b002      	add	sp, #8
 800ea08:	bd80      	pop	{r7, pc}
 800ea0a:	46c0      	nop			; (mov r8, r8)
 800ea0c:	fffffcff 	.word	0xfffffcff

0800ea10 <LL_USART_SetBaudRate>:
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b086      	sub	sp, #24
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	60f8      	str	r0, [r7, #12]
 800ea18:	60b9      	str	r1, [r7, #8]
 800ea1a:	607a      	str	r2, [r7, #4]
 800ea1c:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2b0b      	cmp	r3, #11
 800ea22:	d843      	bhi.n	800eaac <LL_USART_SetBaudRate+0x9c>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800ea24:	683a      	ldr	r2, [r7, #0]
 800ea26:	2380      	movs	r3, #128	; 0x80
 800ea28:	021b      	lsls	r3, r3, #8
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	d126      	bne.n	800ea7c <LL_USART_SetBaudRate+0x6c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	b2db      	uxtb	r3, r3
 800ea32:	001a      	movs	r2, r3
 800ea34:	4b1f      	ldr	r3, [pc, #124]	; (800eab4 <LL_USART_SetBaudRate+0xa4>)
 800ea36:	0092      	lsls	r2, r2, #2
 800ea38:	58d3      	ldr	r3, [r2, r3]
 800ea3a:	0019      	movs	r1, r3
 800ea3c:	68b8      	ldr	r0, [r7, #8]
 800ea3e:	f7f1 fb61 	bl	8000104 <__udivsi3>
 800ea42:	0003      	movs	r3, r0
 800ea44:	005a      	lsls	r2, r3, #1
 800ea46:	6a3b      	ldr	r3, [r7, #32]
 800ea48:	085b      	lsrs	r3, r3, #1
 800ea4a:	18d3      	adds	r3, r2, r3
 800ea4c:	6a39      	ldr	r1, [r7, #32]
 800ea4e:	0018      	movs	r0, r3
 800ea50:	f7f1 fb58 	bl	8000104 <__udivsi3>
 800ea54:	0003      	movs	r3, r0
 800ea56:	b29b      	uxth	r3, r3
 800ea58:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	4a16      	ldr	r2, [pc, #88]	; (800eab8 <LL_USART_SetBaudRate+0xa8>)
 800ea5e:	4013      	ands	r3, r2
 800ea60:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ea62:	697b      	ldr	r3, [r7, #20]
 800ea64:	085b      	lsrs	r3, r3, #1
 800ea66:	b29b      	uxth	r3, r3
 800ea68:	001a      	movs	r2, r3
 800ea6a:	2307      	movs	r3, #7
 800ea6c:	4013      	ands	r3, r2
 800ea6e:	693a      	ldr	r2, [r7, #16]
 800ea70:	4313      	orrs	r3, r2
 800ea72:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	693a      	ldr	r2, [r7, #16]
 800ea78:	60da      	str	r2, [r3, #12]
}
 800ea7a:	e017      	b.n	800eaac <LL_USART_SetBaudRate+0x9c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	b2db      	uxtb	r3, r3
 800ea80:	001a      	movs	r2, r3
 800ea82:	4b0c      	ldr	r3, [pc, #48]	; (800eab4 <LL_USART_SetBaudRate+0xa4>)
 800ea84:	0092      	lsls	r2, r2, #2
 800ea86:	58d3      	ldr	r3, [r2, r3]
 800ea88:	0019      	movs	r1, r3
 800ea8a:	68b8      	ldr	r0, [r7, #8]
 800ea8c:	f7f1 fb3a 	bl	8000104 <__udivsi3>
 800ea90:	0003      	movs	r3, r0
 800ea92:	001a      	movs	r2, r3
 800ea94:	6a3b      	ldr	r3, [r7, #32]
 800ea96:	085b      	lsrs	r3, r3, #1
 800ea98:	18d3      	adds	r3, r2, r3
 800ea9a:	6a39      	ldr	r1, [r7, #32]
 800ea9c:	0018      	movs	r0, r3
 800ea9e:	f7f1 fb31 	bl	8000104 <__udivsi3>
 800eaa2:	0003      	movs	r3, r0
 800eaa4:	b29b      	uxth	r3, r3
 800eaa6:	001a      	movs	r2, r3
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	60da      	str	r2, [r3, #12]
}
 800eaac:	46c0      	nop			; (mov r8, r8)
 800eaae:	46bd      	mov	sp, r7
 800eab0:	b006      	add	sp, #24
 800eab2:	bd80      	pop	{r7, pc}
 800eab4:	0801b7b0 	.word	0x0801b7b0
 800eab8:	0000fff0 	.word	0x0000fff0

0800eabc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800eabc:	b590      	push	{r4, r7, lr}
 800eabe:	b08b      	sub	sp, #44	; 0x2c
 800eac0:	af02      	add	r7, sp, #8
 800eac2:	6078      	str	r0, [r7, #4]
 800eac4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800eac6:	231f      	movs	r3, #31
 800eac8:	18fb      	adds	r3, r7, r3
 800eaca:	2201      	movs	r2, #1
 800eacc:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800eace:	2300      	movs	r3, #0
 800ead0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	0018      	movs	r0, r3
 800ead6:	f7ff ff4f 	bl	800e978 <LL_USART_IsEnabled>
 800eada:	1e03      	subs	r3, r0, #0
 800eadc:	d16a      	bne.n	800ebb4 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	4a38      	ldr	r2, [pc, #224]	; (800ebc4 <LL_USART_Init+0x108>)
 800eae4:	401a      	ands	r2, r3
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	6899      	ldr	r1, [r3, #8]
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	691b      	ldr	r3, [r3, #16]
 800eaee:	4319      	orrs	r1, r3
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	695b      	ldr	r3, [r3, #20]
 800eaf4:	4319      	orrs	r1, r3
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	69db      	ldr	r3, [r3, #28]
 800eafa:	430b      	orrs	r3, r1
 800eafc:	431a      	orrs	r2, r3
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	68da      	ldr	r2, [r3, #12]
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	0011      	movs	r1, r2
 800eb0a:	0018      	movs	r0, r3
 800eb0c:	f7ff ff58 	bl	800e9c0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	699a      	ldr	r2, [r3, #24]
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	0011      	movs	r1, r2
 800eb18:	0018      	movs	r0, r3
 800eb1a:	f7ff ff65 	bl	800e9e8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	4a29      	ldr	r2, [pc, #164]	; (800ebc8 <LL_USART_Init+0x10c>)
 800eb22:	4293      	cmp	r3, r2
 800eb24:	d105      	bne.n	800eb32 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800eb26:	2003      	movs	r0, #3
 800eb28:	f7ff fe00 	bl	800e72c <LL_RCC_GetUSARTClockFreq>
 800eb2c:	0003      	movs	r3, r0
 800eb2e:	61bb      	str	r3, [r7, #24]
 800eb30:	e022      	b.n	800eb78 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	4a25      	ldr	r2, [pc, #148]	; (800ebcc <LL_USART_Init+0x110>)
 800eb36:	4293      	cmp	r3, r2
 800eb38:	d105      	bne.n	800eb46 <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800eb3a:	200c      	movs	r0, #12
 800eb3c:	f7ff fdf6 	bl	800e72c <LL_RCC_GetUSARTClockFreq>
 800eb40:	0003      	movs	r3, r0
 800eb42:	61bb      	str	r3, [r7, #24]
 800eb44:	e018      	b.n	800eb78 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* RCC_CCIPR_USART2SEL */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	4a21      	ldr	r2, [pc, #132]	; (800ebd0 <LL_USART_Init+0x114>)
 800eb4a:	4293      	cmp	r3, r2
 800eb4c:	d108      	bne.n	800eb60 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800eb4e:	240c      	movs	r4, #12
 800eb50:	193b      	adds	r3, r7, r4
 800eb52:	0018      	movs	r0, r3
 800eb54:	f7ff fdcc 	bl	800e6f0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800eb58:	193b      	adds	r3, r7, r4
 800eb5a:	689b      	ldr	r3, [r3, #8]
 800eb5c:	61bb      	str	r3, [r7, #24]
 800eb5e:	e00b      	b.n	800eb78 <LL_USART_Init+0xbc>
#endif /* RCC_CCIPR_USART3SEL */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	4a1c      	ldr	r2, [pc, #112]	; (800ebd4 <LL_USART_Init+0x118>)
 800eb64:	4293      	cmp	r3, r2
 800eb66:	d107      	bne.n	800eb78 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800eb68:	240c      	movs	r4, #12
 800eb6a:	193b      	adds	r3, r7, r4
 800eb6c:	0018      	movs	r0, r3
 800eb6e:	f7ff fdbf 	bl	800e6f0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800eb72:	193b      	adds	r3, r7, r4
 800eb74:	689b      	ldr	r3, [r3, #8]
 800eb76:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800eb78:	69bb      	ldr	r3, [r7, #24]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d013      	beq.n	800eba6 <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	685b      	ldr	r3, [r3, #4]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d00f      	beq.n	800eba6 <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800eb86:	231f      	movs	r3, #31
 800eb88:	18fb      	adds	r3, r7, r3
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	681a      	ldr	r2, [r3, #0]
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	69dc      	ldr	r4, [r3, #28]
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	685b      	ldr	r3, [r3, #4]
 800eb9a:	69b9      	ldr	r1, [r7, #24]
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	9300      	str	r3, [sp, #0]
 800eba0:	0023      	movs	r3, r4
 800eba2:	f7ff ff35 	bl	800ea10 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	681a      	ldr	r2, [r3, #0]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	0011      	movs	r1, r2
 800ebae:	0018      	movs	r0, r3
 800ebb0:	f7ff fef3 	bl	800e99a <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800ebb4:	231f      	movs	r3, #31
 800ebb6:	18fb      	adds	r3, r7, r3
 800ebb8:	781b      	ldrb	r3, [r3, #0]
}
 800ebba:	0018      	movs	r0, r3
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	b009      	add	sp, #36	; 0x24
 800ebc0:	bd90      	pop	{r4, r7, pc}
 800ebc2:	46c0      	nop			; (mov r8, r8)
 800ebc4:	efff69f3 	.word	0xefff69f3
 800ebc8:	40013800 	.word	0x40013800
 800ebcc:	40004400 	.word	0x40004400
 800ebd0:	40004800 	.word	0x40004800
 800ebd4:	40004c00 	.word	0x40004c00

0800ebd8 <__libc_init_array>:
 800ebd8:	b570      	push	{r4, r5, r6, lr}
 800ebda:	2600      	movs	r6, #0
 800ebdc:	4d0c      	ldr	r5, [pc, #48]	; (800ec10 <__libc_init_array+0x38>)
 800ebde:	4c0d      	ldr	r4, [pc, #52]	; (800ec14 <__libc_init_array+0x3c>)
 800ebe0:	1b64      	subs	r4, r4, r5
 800ebe2:	10a4      	asrs	r4, r4, #2
 800ebe4:	42a6      	cmp	r6, r4
 800ebe6:	d109      	bne.n	800ebfc <__libc_init_array+0x24>
 800ebe8:	2600      	movs	r6, #0
 800ebea:	f001 f837 	bl	800fc5c <_init>
 800ebee:	4d0a      	ldr	r5, [pc, #40]	; (800ec18 <__libc_init_array+0x40>)
 800ebf0:	4c0a      	ldr	r4, [pc, #40]	; (800ec1c <__libc_init_array+0x44>)
 800ebf2:	1b64      	subs	r4, r4, r5
 800ebf4:	10a4      	asrs	r4, r4, #2
 800ebf6:	42a6      	cmp	r6, r4
 800ebf8:	d105      	bne.n	800ec06 <__libc_init_array+0x2e>
 800ebfa:	bd70      	pop	{r4, r5, r6, pc}
 800ebfc:	00b3      	lsls	r3, r6, #2
 800ebfe:	58eb      	ldr	r3, [r5, r3]
 800ec00:	4798      	blx	r3
 800ec02:	3601      	adds	r6, #1
 800ec04:	e7ee      	b.n	800ebe4 <__libc_init_array+0xc>
 800ec06:	00b3      	lsls	r3, r6, #2
 800ec08:	58eb      	ldr	r3, [r5, r3]
 800ec0a:	4798      	blx	r3
 800ec0c:	3601      	adds	r6, #1
 800ec0e:	e7f2      	b.n	800ebf6 <__libc_init_array+0x1e>
 800ec10:	0801b9b8 	.word	0x0801b9b8
 800ec14:	0801b9b8 	.word	0x0801b9b8
 800ec18:	0801b9b8 	.word	0x0801b9b8
 800ec1c:	0801b9bc 	.word	0x0801b9bc

0800ec20 <memset>:
 800ec20:	0003      	movs	r3, r0
 800ec22:	1882      	adds	r2, r0, r2
 800ec24:	4293      	cmp	r3, r2
 800ec26:	d100      	bne.n	800ec2a <memset+0xa>
 800ec28:	4770      	bx	lr
 800ec2a:	7019      	strb	r1, [r3, #0]
 800ec2c:	3301      	adds	r3, #1
 800ec2e:	e7f9      	b.n	800ec24 <memset+0x4>

0800ec30 <sin>:
 800ec30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec32:	4a20      	ldr	r2, [pc, #128]	; (800ecb4 <sin+0x84>)
 800ec34:	004b      	lsls	r3, r1, #1
 800ec36:	b087      	sub	sp, #28
 800ec38:	085b      	lsrs	r3, r3, #1
 800ec3a:	4293      	cmp	r3, r2
 800ec3c:	dc06      	bgt.n	800ec4c <sin+0x1c>
 800ec3e:	2300      	movs	r3, #0
 800ec40:	2200      	movs	r2, #0
 800ec42:	9300      	str	r3, [sp, #0]
 800ec44:	2300      	movs	r3, #0
 800ec46:	f000 fe5b 	bl	800f900 <__kernel_sin>
 800ec4a:	e006      	b.n	800ec5a <sin+0x2a>
 800ec4c:	4a1a      	ldr	r2, [pc, #104]	; (800ecb8 <sin+0x88>)
 800ec4e:	4293      	cmp	r3, r2
 800ec50:	dd05      	ble.n	800ec5e <sin+0x2e>
 800ec52:	0002      	movs	r2, r0
 800ec54:	000b      	movs	r3, r1
 800ec56:	f7f2 fe03 	bl	8001860 <__aeabi_dsub>
 800ec5a:	b007      	add	sp, #28
 800ec5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec5e:	aa02      	add	r2, sp, #8
 800ec60:	f000 f82c 	bl	800ecbc <__ieee754_rem_pio2>
 800ec64:	9c04      	ldr	r4, [sp, #16]
 800ec66:	9d05      	ldr	r5, [sp, #20]
 800ec68:	2303      	movs	r3, #3
 800ec6a:	4003      	ands	r3, r0
 800ec6c:	2b01      	cmp	r3, #1
 800ec6e:	d00a      	beq.n	800ec86 <sin+0x56>
 800ec70:	9802      	ldr	r0, [sp, #8]
 800ec72:	9903      	ldr	r1, [sp, #12]
 800ec74:	2b02      	cmp	r3, #2
 800ec76:	d00d      	beq.n	800ec94 <sin+0x64>
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d115      	bne.n	800eca8 <sin+0x78>
 800ec7c:	3301      	adds	r3, #1
 800ec7e:	9300      	str	r3, [sp, #0]
 800ec80:	0022      	movs	r2, r4
 800ec82:	002b      	movs	r3, r5
 800ec84:	e7df      	b.n	800ec46 <sin+0x16>
 800ec86:	0022      	movs	r2, r4
 800ec88:	9802      	ldr	r0, [sp, #8]
 800ec8a:	9903      	ldr	r1, [sp, #12]
 800ec8c:	002b      	movs	r3, r5
 800ec8e:	f000 fa01 	bl	800f094 <__kernel_cos>
 800ec92:	e7e2      	b.n	800ec5a <sin+0x2a>
 800ec94:	2301      	movs	r3, #1
 800ec96:	0022      	movs	r2, r4
 800ec98:	9300      	str	r3, [sp, #0]
 800ec9a:	002b      	movs	r3, r5
 800ec9c:	f000 fe30 	bl	800f900 <__kernel_sin>
 800eca0:	2380      	movs	r3, #128	; 0x80
 800eca2:	061b      	lsls	r3, r3, #24
 800eca4:	18c9      	adds	r1, r1, r3
 800eca6:	e7d8      	b.n	800ec5a <sin+0x2a>
 800eca8:	0022      	movs	r2, r4
 800ecaa:	002b      	movs	r3, r5
 800ecac:	f000 f9f2 	bl	800f094 <__kernel_cos>
 800ecb0:	e7f6      	b.n	800eca0 <sin+0x70>
 800ecb2:	46c0      	nop			; (mov r8, r8)
 800ecb4:	3fe921fb 	.word	0x3fe921fb
 800ecb8:	7fefffff 	.word	0x7fefffff

0800ecbc <__ieee754_rem_pio2>:
 800ecbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecbe:	004b      	lsls	r3, r1, #1
 800ecc0:	b091      	sub	sp, #68	; 0x44
 800ecc2:	085b      	lsrs	r3, r3, #1
 800ecc4:	9302      	str	r3, [sp, #8]
 800ecc6:	0017      	movs	r7, r2
 800ecc8:	4bb6      	ldr	r3, [pc, #728]	; (800efa4 <__ieee754_rem_pio2+0x2e8>)
 800ecca:	9a02      	ldr	r2, [sp, #8]
 800eccc:	0004      	movs	r4, r0
 800ecce:	000d      	movs	r5, r1
 800ecd0:	9109      	str	r1, [sp, #36]	; 0x24
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	dc09      	bgt.n	800ecea <__ieee754_rem_pio2+0x2e>
 800ecd6:	0002      	movs	r2, r0
 800ecd8:	000b      	movs	r3, r1
 800ecda:	603a      	str	r2, [r7, #0]
 800ecdc:	607b      	str	r3, [r7, #4]
 800ecde:	2200      	movs	r2, #0
 800ece0:	2300      	movs	r3, #0
 800ece2:	60ba      	str	r2, [r7, #8]
 800ece4:	60fb      	str	r3, [r7, #12]
 800ece6:	2600      	movs	r6, #0
 800ece8:	e025      	b.n	800ed36 <__ieee754_rem_pio2+0x7a>
 800ecea:	4baf      	ldr	r3, [pc, #700]	; (800efa8 <__ieee754_rem_pio2+0x2ec>)
 800ecec:	9a02      	ldr	r2, [sp, #8]
 800ecee:	429a      	cmp	r2, r3
 800ecf0:	dd00      	ble.n	800ecf4 <__ieee754_rem_pio2+0x38>
 800ecf2:	e06e      	b.n	800edd2 <__ieee754_rem_pio2+0x116>
 800ecf4:	4ead      	ldr	r6, [pc, #692]	; (800efac <__ieee754_rem_pio2+0x2f0>)
 800ecf6:	4aae      	ldr	r2, [pc, #696]	; (800efb0 <__ieee754_rem_pio2+0x2f4>)
 800ecf8:	2d00      	cmp	r5, #0
 800ecfa:	dd35      	ble.n	800ed68 <__ieee754_rem_pio2+0xac>
 800ecfc:	0020      	movs	r0, r4
 800ecfe:	0029      	movs	r1, r5
 800ed00:	4baa      	ldr	r3, [pc, #680]	; (800efac <__ieee754_rem_pio2+0x2f0>)
 800ed02:	f7f2 fdad 	bl	8001860 <__aeabi_dsub>
 800ed06:	9b02      	ldr	r3, [sp, #8]
 800ed08:	0004      	movs	r4, r0
 800ed0a:	000d      	movs	r5, r1
 800ed0c:	42b3      	cmp	r3, r6
 800ed0e:	d015      	beq.n	800ed3c <__ieee754_rem_pio2+0x80>
 800ed10:	4aa8      	ldr	r2, [pc, #672]	; (800efb4 <__ieee754_rem_pio2+0x2f8>)
 800ed12:	4ba9      	ldr	r3, [pc, #676]	; (800efb8 <__ieee754_rem_pio2+0x2fc>)
 800ed14:	f7f2 fda4 	bl	8001860 <__aeabi_dsub>
 800ed18:	0002      	movs	r2, r0
 800ed1a:	000b      	movs	r3, r1
 800ed1c:	0020      	movs	r0, r4
 800ed1e:	603a      	str	r2, [r7, #0]
 800ed20:	607b      	str	r3, [r7, #4]
 800ed22:	0029      	movs	r1, r5
 800ed24:	f7f2 fd9c 	bl	8001860 <__aeabi_dsub>
 800ed28:	4aa2      	ldr	r2, [pc, #648]	; (800efb4 <__ieee754_rem_pio2+0x2f8>)
 800ed2a:	4ba3      	ldr	r3, [pc, #652]	; (800efb8 <__ieee754_rem_pio2+0x2fc>)
 800ed2c:	f7f2 fd98 	bl	8001860 <__aeabi_dsub>
 800ed30:	2601      	movs	r6, #1
 800ed32:	60b8      	str	r0, [r7, #8]
 800ed34:	60f9      	str	r1, [r7, #12]
 800ed36:	0030      	movs	r0, r6
 800ed38:	b011      	add	sp, #68	; 0x44
 800ed3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed3c:	22d3      	movs	r2, #211	; 0xd3
 800ed3e:	4b9e      	ldr	r3, [pc, #632]	; (800efb8 <__ieee754_rem_pio2+0x2fc>)
 800ed40:	0552      	lsls	r2, r2, #21
 800ed42:	f7f2 fd8d 	bl	8001860 <__aeabi_dsub>
 800ed46:	4a9d      	ldr	r2, [pc, #628]	; (800efbc <__ieee754_rem_pio2+0x300>)
 800ed48:	4b9d      	ldr	r3, [pc, #628]	; (800efc0 <__ieee754_rem_pio2+0x304>)
 800ed4a:	0004      	movs	r4, r0
 800ed4c:	000d      	movs	r5, r1
 800ed4e:	f7f2 fd87 	bl	8001860 <__aeabi_dsub>
 800ed52:	0002      	movs	r2, r0
 800ed54:	000b      	movs	r3, r1
 800ed56:	0020      	movs	r0, r4
 800ed58:	603a      	str	r2, [r7, #0]
 800ed5a:	607b      	str	r3, [r7, #4]
 800ed5c:	0029      	movs	r1, r5
 800ed5e:	f7f2 fd7f 	bl	8001860 <__aeabi_dsub>
 800ed62:	4a96      	ldr	r2, [pc, #600]	; (800efbc <__ieee754_rem_pio2+0x300>)
 800ed64:	4b96      	ldr	r3, [pc, #600]	; (800efc0 <__ieee754_rem_pio2+0x304>)
 800ed66:	e7e1      	b.n	800ed2c <__ieee754_rem_pio2+0x70>
 800ed68:	0020      	movs	r0, r4
 800ed6a:	0029      	movs	r1, r5
 800ed6c:	4b8f      	ldr	r3, [pc, #572]	; (800efac <__ieee754_rem_pio2+0x2f0>)
 800ed6e:	f7f1 fb9b 	bl	80004a8 <__aeabi_dadd>
 800ed72:	9b02      	ldr	r3, [sp, #8]
 800ed74:	0004      	movs	r4, r0
 800ed76:	000d      	movs	r5, r1
 800ed78:	42b3      	cmp	r3, r6
 800ed7a:	d014      	beq.n	800eda6 <__ieee754_rem_pio2+0xea>
 800ed7c:	4a8d      	ldr	r2, [pc, #564]	; (800efb4 <__ieee754_rem_pio2+0x2f8>)
 800ed7e:	4b8e      	ldr	r3, [pc, #568]	; (800efb8 <__ieee754_rem_pio2+0x2fc>)
 800ed80:	f7f1 fb92 	bl	80004a8 <__aeabi_dadd>
 800ed84:	0002      	movs	r2, r0
 800ed86:	000b      	movs	r3, r1
 800ed88:	0020      	movs	r0, r4
 800ed8a:	603a      	str	r2, [r7, #0]
 800ed8c:	607b      	str	r3, [r7, #4]
 800ed8e:	0029      	movs	r1, r5
 800ed90:	f7f2 fd66 	bl	8001860 <__aeabi_dsub>
 800ed94:	4a87      	ldr	r2, [pc, #540]	; (800efb4 <__ieee754_rem_pio2+0x2f8>)
 800ed96:	4b88      	ldr	r3, [pc, #544]	; (800efb8 <__ieee754_rem_pio2+0x2fc>)
 800ed98:	f7f1 fb86 	bl	80004a8 <__aeabi_dadd>
 800ed9c:	2601      	movs	r6, #1
 800ed9e:	60b8      	str	r0, [r7, #8]
 800eda0:	60f9      	str	r1, [r7, #12]
 800eda2:	4276      	negs	r6, r6
 800eda4:	e7c7      	b.n	800ed36 <__ieee754_rem_pio2+0x7a>
 800eda6:	22d3      	movs	r2, #211	; 0xd3
 800eda8:	4b83      	ldr	r3, [pc, #524]	; (800efb8 <__ieee754_rem_pio2+0x2fc>)
 800edaa:	0552      	lsls	r2, r2, #21
 800edac:	f7f1 fb7c 	bl	80004a8 <__aeabi_dadd>
 800edb0:	4a82      	ldr	r2, [pc, #520]	; (800efbc <__ieee754_rem_pio2+0x300>)
 800edb2:	4b83      	ldr	r3, [pc, #524]	; (800efc0 <__ieee754_rem_pio2+0x304>)
 800edb4:	0004      	movs	r4, r0
 800edb6:	000d      	movs	r5, r1
 800edb8:	f7f1 fb76 	bl	80004a8 <__aeabi_dadd>
 800edbc:	0002      	movs	r2, r0
 800edbe:	000b      	movs	r3, r1
 800edc0:	0020      	movs	r0, r4
 800edc2:	603a      	str	r2, [r7, #0]
 800edc4:	607b      	str	r3, [r7, #4]
 800edc6:	0029      	movs	r1, r5
 800edc8:	f7f2 fd4a 	bl	8001860 <__aeabi_dsub>
 800edcc:	4a7b      	ldr	r2, [pc, #492]	; (800efbc <__ieee754_rem_pio2+0x300>)
 800edce:	4b7c      	ldr	r3, [pc, #496]	; (800efc0 <__ieee754_rem_pio2+0x304>)
 800edd0:	e7e2      	b.n	800ed98 <__ieee754_rem_pio2+0xdc>
 800edd2:	4b7c      	ldr	r3, [pc, #496]	; (800efc4 <__ieee754_rem_pio2+0x308>)
 800edd4:	9a02      	ldr	r2, [sp, #8]
 800edd6:	429a      	cmp	r2, r3
 800edd8:	dd00      	ble.n	800eddc <__ieee754_rem_pio2+0x120>
 800edda:	e0d3      	b.n	800ef84 <__ieee754_rem_pio2+0x2c8>
 800eddc:	0020      	movs	r0, r4
 800edde:	0029      	movs	r1, r5
 800ede0:	f000 fe3a 	bl	800fa58 <fabs>
 800ede4:	4a78      	ldr	r2, [pc, #480]	; (800efc8 <__ieee754_rem_pio2+0x30c>)
 800ede6:	4b79      	ldr	r3, [pc, #484]	; (800efcc <__ieee754_rem_pio2+0x310>)
 800ede8:	0004      	movs	r4, r0
 800edea:	000d      	movs	r5, r1
 800edec:	f7f2 facc 	bl	8001388 <__aeabi_dmul>
 800edf0:	2200      	movs	r2, #0
 800edf2:	4b77      	ldr	r3, [pc, #476]	; (800efd0 <__ieee754_rem_pio2+0x314>)
 800edf4:	f7f1 fb58 	bl	80004a8 <__aeabi_dadd>
 800edf8:	f7f3 f8c4 	bl	8001f84 <__aeabi_d2iz>
 800edfc:	0006      	movs	r6, r0
 800edfe:	f7f3 f8f7 	bl	8001ff0 <__aeabi_i2d>
 800ee02:	4a6b      	ldr	r2, [pc, #428]	; (800efb0 <__ieee754_rem_pio2+0x2f4>)
 800ee04:	4b69      	ldr	r3, [pc, #420]	; (800efac <__ieee754_rem_pio2+0x2f0>)
 800ee06:	9006      	str	r0, [sp, #24]
 800ee08:	9107      	str	r1, [sp, #28]
 800ee0a:	f7f2 fabd 	bl	8001388 <__aeabi_dmul>
 800ee0e:	0002      	movs	r2, r0
 800ee10:	000b      	movs	r3, r1
 800ee12:	0020      	movs	r0, r4
 800ee14:	0029      	movs	r1, r5
 800ee16:	f7f2 fd23 	bl	8001860 <__aeabi_dsub>
 800ee1a:	4a66      	ldr	r2, [pc, #408]	; (800efb4 <__ieee754_rem_pio2+0x2f8>)
 800ee1c:	9004      	str	r0, [sp, #16]
 800ee1e:	9105      	str	r1, [sp, #20]
 800ee20:	9806      	ldr	r0, [sp, #24]
 800ee22:	9907      	ldr	r1, [sp, #28]
 800ee24:	4b64      	ldr	r3, [pc, #400]	; (800efb8 <__ieee754_rem_pio2+0x2fc>)
 800ee26:	f7f2 faaf 	bl	8001388 <__aeabi_dmul>
 800ee2a:	0004      	movs	r4, r0
 800ee2c:	000d      	movs	r5, r1
 800ee2e:	2e1f      	cmp	r6, #31
 800ee30:	dc0f      	bgt.n	800ee52 <__ieee754_rem_pio2+0x196>
 800ee32:	4a68      	ldr	r2, [pc, #416]	; (800efd4 <__ieee754_rem_pio2+0x318>)
 800ee34:	1e73      	subs	r3, r6, #1
 800ee36:	009b      	lsls	r3, r3, #2
 800ee38:	589b      	ldr	r3, [r3, r2]
 800ee3a:	9a02      	ldr	r2, [sp, #8]
 800ee3c:	4293      	cmp	r3, r2
 800ee3e:	d008      	beq.n	800ee52 <__ieee754_rem_pio2+0x196>
 800ee40:	9804      	ldr	r0, [sp, #16]
 800ee42:	9905      	ldr	r1, [sp, #20]
 800ee44:	0022      	movs	r2, r4
 800ee46:	002b      	movs	r3, r5
 800ee48:	f7f2 fd0a 	bl	8001860 <__aeabi_dsub>
 800ee4c:	6038      	str	r0, [r7, #0]
 800ee4e:	6079      	str	r1, [r7, #4]
 800ee50:	e012      	b.n	800ee78 <__ieee754_rem_pio2+0x1bc>
 800ee52:	0022      	movs	r2, r4
 800ee54:	9804      	ldr	r0, [sp, #16]
 800ee56:	9905      	ldr	r1, [sp, #20]
 800ee58:	002b      	movs	r3, r5
 800ee5a:	f7f2 fd01 	bl	8001860 <__aeabi_dsub>
 800ee5e:	9b02      	ldr	r3, [sp, #8]
 800ee60:	151b      	asrs	r3, r3, #20
 800ee62:	9308      	str	r3, [sp, #32]
 800ee64:	9a08      	ldr	r2, [sp, #32]
 800ee66:	004b      	lsls	r3, r1, #1
 800ee68:	0d5b      	lsrs	r3, r3, #21
 800ee6a:	1ad3      	subs	r3, r2, r3
 800ee6c:	2b10      	cmp	r3, #16
 800ee6e:	dc21      	bgt.n	800eeb4 <__ieee754_rem_pio2+0x1f8>
 800ee70:	0002      	movs	r2, r0
 800ee72:	000b      	movs	r3, r1
 800ee74:	603a      	str	r2, [r7, #0]
 800ee76:	607b      	str	r3, [r7, #4]
 800ee78:	9804      	ldr	r0, [sp, #16]
 800ee7a:	9905      	ldr	r1, [sp, #20]
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	683a      	ldr	r2, [r7, #0]
 800ee80:	9302      	str	r3, [sp, #8]
 800ee82:	9b02      	ldr	r3, [sp, #8]
 800ee84:	f7f2 fcec 	bl	8001860 <__aeabi_dsub>
 800ee88:	0022      	movs	r2, r4
 800ee8a:	002b      	movs	r3, r5
 800ee8c:	f7f2 fce8 	bl	8001860 <__aeabi_dsub>
 800ee90:	000b      	movs	r3, r1
 800ee92:	0002      	movs	r2, r0
 800ee94:	60ba      	str	r2, [r7, #8]
 800ee96:	60fb      	str	r3, [r7, #12]
 800ee98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	db00      	blt.n	800eea0 <__ieee754_rem_pio2+0x1e4>
 800ee9e:	e74a      	b.n	800ed36 <__ieee754_rem_pio2+0x7a>
 800eea0:	2280      	movs	r2, #128	; 0x80
 800eea2:	0612      	lsls	r2, r2, #24
 800eea4:	4694      	mov	ip, r2
 800eea6:	9b02      	ldr	r3, [sp, #8]
 800eea8:	1889      	adds	r1, r1, r2
 800eeaa:	4463      	add	r3, ip
 800eeac:	607b      	str	r3, [r7, #4]
 800eeae:	60b8      	str	r0, [r7, #8]
 800eeb0:	60f9      	str	r1, [r7, #12]
 800eeb2:	e776      	b.n	800eda2 <__ieee754_rem_pio2+0xe6>
 800eeb4:	22d3      	movs	r2, #211	; 0xd3
 800eeb6:	9806      	ldr	r0, [sp, #24]
 800eeb8:	9907      	ldr	r1, [sp, #28]
 800eeba:	4b3f      	ldr	r3, [pc, #252]	; (800efb8 <__ieee754_rem_pio2+0x2fc>)
 800eebc:	0552      	lsls	r2, r2, #21
 800eebe:	f7f2 fa63 	bl	8001388 <__aeabi_dmul>
 800eec2:	0004      	movs	r4, r0
 800eec4:	000d      	movs	r5, r1
 800eec6:	0002      	movs	r2, r0
 800eec8:	000b      	movs	r3, r1
 800eeca:	9804      	ldr	r0, [sp, #16]
 800eecc:	9905      	ldr	r1, [sp, #20]
 800eece:	f7f2 fcc7 	bl	8001860 <__aeabi_dsub>
 800eed2:	0002      	movs	r2, r0
 800eed4:	000b      	movs	r3, r1
 800eed6:	9002      	str	r0, [sp, #8]
 800eed8:	9103      	str	r1, [sp, #12]
 800eeda:	9804      	ldr	r0, [sp, #16]
 800eedc:	9905      	ldr	r1, [sp, #20]
 800eede:	f7f2 fcbf 	bl	8001860 <__aeabi_dsub>
 800eee2:	0022      	movs	r2, r4
 800eee4:	002b      	movs	r3, r5
 800eee6:	f7f2 fcbb 	bl	8001860 <__aeabi_dsub>
 800eeea:	0004      	movs	r4, r0
 800eeec:	000d      	movs	r5, r1
 800eeee:	9806      	ldr	r0, [sp, #24]
 800eef0:	9907      	ldr	r1, [sp, #28]
 800eef2:	4a32      	ldr	r2, [pc, #200]	; (800efbc <__ieee754_rem_pio2+0x300>)
 800eef4:	4b32      	ldr	r3, [pc, #200]	; (800efc0 <__ieee754_rem_pio2+0x304>)
 800eef6:	f7f2 fa47 	bl	8001388 <__aeabi_dmul>
 800eefa:	0022      	movs	r2, r4
 800eefc:	002b      	movs	r3, r5
 800eefe:	f7f2 fcaf 	bl	8001860 <__aeabi_dsub>
 800ef02:	0002      	movs	r2, r0
 800ef04:	000b      	movs	r3, r1
 800ef06:	0004      	movs	r4, r0
 800ef08:	000d      	movs	r5, r1
 800ef0a:	9802      	ldr	r0, [sp, #8]
 800ef0c:	9903      	ldr	r1, [sp, #12]
 800ef0e:	f7f2 fca7 	bl	8001860 <__aeabi_dsub>
 800ef12:	9a08      	ldr	r2, [sp, #32]
 800ef14:	004b      	lsls	r3, r1, #1
 800ef16:	0d5b      	lsrs	r3, r3, #21
 800ef18:	1ad3      	subs	r3, r2, r3
 800ef1a:	2b31      	cmp	r3, #49	; 0x31
 800ef1c:	dc08      	bgt.n	800ef30 <__ieee754_rem_pio2+0x274>
 800ef1e:	0002      	movs	r2, r0
 800ef20:	000b      	movs	r3, r1
 800ef22:	603a      	str	r2, [r7, #0]
 800ef24:	607b      	str	r3, [r7, #4]
 800ef26:	9a02      	ldr	r2, [sp, #8]
 800ef28:	9b03      	ldr	r3, [sp, #12]
 800ef2a:	9204      	str	r2, [sp, #16]
 800ef2c:	9305      	str	r3, [sp, #20]
 800ef2e:	e7a3      	b.n	800ee78 <__ieee754_rem_pio2+0x1bc>
 800ef30:	22b8      	movs	r2, #184	; 0xb8
 800ef32:	9806      	ldr	r0, [sp, #24]
 800ef34:	9907      	ldr	r1, [sp, #28]
 800ef36:	4b22      	ldr	r3, [pc, #136]	; (800efc0 <__ieee754_rem_pio2+0x304>)
 800ef38:	0592      	lsls	r2, r2, #22
 800ef3a:	f7f2 fa25 	bl	8001388 <__aeabi_dmul>
 800ef3e:	0004      	movs	r4, r0
 800ef40:	000d      	movs	r5, r1
 800ef42:	0002      	movs	r2, r0
 800ef44:	000b      	movs	r3, r1
 800ef46:	9802      	ldr	r0, [sp, #8]
 800ef48:	9903      	ldr	r1, [sp, #12]
 800ef4a:	f7f2 fc89 	bl	8001860 <__aeabi_dsub>
 800ef4e:	0002      	movs	r2, r0
 800ef50:	000b      	movs	r3, r1
 800ef52:	9004      	str	r0, [sp, #16]
 800ef54:	9105      	str	r1, [sp, #20]
 800ef56:	9802      	ldr	r0, [sp, #8]
 800ef58:	9903      	ldr	r1, [sp, #12]
 800ef5a:	f7f2 fc81 	bl	8001860 <__aeabi_dsub>
 800ef5e:	0022      	movs	r2, r4
 800ef60:	002b      	movs	r3, r5
 800ef62:	f7f2 fc7d 	bl	8001860 <__aeabi_dsub>
 800ef66:	0004      	movs	r4, r0
 800ef68:	000d      	movs	r5, r1
 800ef6a:	9806      	ldr	r0, [sp, #24]
 800ef6c:	9907      	ldr	r1, [sp, #28]
 800ef6e:	4a1a      	ldr	r2, [pc, #104]	; (800efd8 <__ieee754_rem_pio2+0x31c>)
 800ef70:	4b1a      	ldr	r3, [pc, #104]	; (800efdc <__ieee754_rem_pio2+0x320>)
 800ef72:	f7f2 fa09 	bl	8001388 <__aeabi_dmul>
 800ef76:	0022      	movs	r2, r4
 800ef78:	002b      	movs	r3, r5
 800ef7a:	f7f2 fc71 	bl	8001860 <__aeabi_dsub>
 800ef7e:	0004      	movs	r4, r0
 800ef80:	000d      	movs	r5, r1
 800ef82:	e75d      	b.n	800ee40 <__ieee754_rem_pio2+0x184>
 800ef84:	4b16      	ldr	r3, [pc, #88]	; (800efe0 <__ieee754_rem_pio2+0x324>)
 800ef86:	9a02      	ldr	r2, [sp, #8]
 800ef88:	429a      	cmp	r2, r3
 800ef8a:	dd2b      	ble.n	800efe4 <__ieee754_rem_pio2+0x328>
 800ef8c:	0022      	movs	r2, r4
 800ef8e:	002b      	movs	r3, r5
 800ef90:	0020      	movs	r0, r4
 800ef92:	0029      	movs	r1, r5
 800ef94:	f7f2 fc64 	bl	8001860 <__aeabi_dsub>
 800ef98:	60b8      	str	r0, [r7, #8]
 800ef9a:	60f9      	str	r1, [r7, #12]
 800ef9c:	6038      	str	r0, [r7, #0]
 800ef9e:	6079      	str	r1, [r7, #4]
 800efa0:	e6a1      	b.n	800ece6 <__ieee754_rem_pio2+0x2a>
 800efa2:	46c0      	nop			; (mov r8, r8)
 800efa4:	3fe921fb 	.word	0x3fe921fb
 800efa8:	4002d97b 	.word	0x4002d97b
 800efac:	3ff921fb 	.word	0x3ff921fb
 800efb0:	54400000 	.word	0x54400000
 800efb4:	1a626331 	.word	0x1a626331
 800efb8:	3dd0b461 	.word	0x3dd0b461
 800efbc:	2e037073 	.word	0x2e037073
 800efc0:	3ba3198a 	.word	0x3ba3198a
 800efc4:	413921fb 	.word	0x413921fb
 800efc8:	6dc9c883 	.word	0x6dc9c883
 800efcc:	3fe45f30 	.word	0x3fe45f30
 800efd0:	3fe00000 	.word	0x3fe00000
 800efd4:	0801b7e0 	.word	0x0801b7e0
 800efd8:	252049c1 	.word	0x252049c1
 800efdc:	397b839a 	.word	0x397b839a
 800efe0:	7fefffff 	.word	0x7fefffff
 800efe4:	9a02      	ldr	r2, [sp, #8]
 800efe6:	0020      	movs	r0, r4
 800efe8:	1516      	asrs	r6, r2, #20
 800efea:	4a27      	ldr	r2, [pc, #156]	; (800f088 <__ieee754_rem_pio2+0x3cc>)
 800efec:	18b6      	adds	r6, r6, r2
 800efee:	9a02      	ldr	r2, [sp, #8]
 800eff0:	0533      	lsls	r3, r6, #20
 800eff2:	1ad5      	subs	r5, r2, r3
 800eff4:	0029      	movs	r1, r5
 800eff6:	f7f2 ffc5 	bl	8001f84 <__aeabi_d2iz>
 800effa:	f7f2 fff9 	bl	8001ff0 <__aeabi_i2d>
 800effe:	0002      	movs	r2, r0
 800f000:	000b      	movs	r3, r1
 800f002:	0020      	movs	r0, r4
 800f004:	0029      	movs	r1, r5
 800f006:	920a      	str	r2, [sp, #40]	; 0x28
 800f008:	930b      	str	r3, [sp, #44]	; 0x2c
 800f00a:	f7f2 fc29 	bl	8001860 <__aeabi_dsub>
 800f00e:	2200      	movs	r2, #0
 800f010:	4b1e      	ldr	r3, [pc, #120]	; (800f08c <__ieee754_rem_pio2+0x3d0>)
 800f012:	f7f2 f9b9 	bl	8001388 <__aeabi_dmul>
 800f016:	000d      	movs	r5, r1
 800f018:	0004      	movs	r4, r0
 800f01a:	f7f2 ffb3 	bl	8001f84 <__aeabi_d2iz>
 800f01e:	f7f2 ffe7 	bl	8001ff0 <__aeabi_i2d>
 800f022:	0002      	movs	r2, r0
 800f024:	000b      	movs	r3, r1
 800f026:	0020      	movs	r0, r4
 800f028:	0029      	movs	r1, r5
 800f02a:	920c      	str	r2, [sp, #48]	; 0x30
 800f02c:	930d      	str	r3, [sp, #52]	; 0x34
 800f02e:	f7f2 fc17 	bl	8001860 <__aeabi_dsub>
 800f032:	2200      	movs	r2, #0
 800f034:	4b15      	ldr	r3, [pc, #84]	; (800f08c <__ieee754_rem_pio2+0x3d0>)
 800f036:	f7f2 f9a7 	bl	8001388 <__aeabi_dmul>
 800f03a:	2503      	movs	r5, #3
 800f03c:	900e      	str	r0, [sp, #56]	; 0x38
 800f03e:	910f      	str	r1, [sp, #60]	; 0x3c
 800f040:	ac0a      	add	r4, sp, #40	; 0x28
 800f042:	2200      	movs	r2, #0
 800f044:	6920      	ldr	r0, [r4, #16]
 800f046:	6961      	ldr	r1, [r4, #20]
 800f048:	2300      	movs	r3, #0
 800f04a:	9502      	str	r5, [sp, #8]
 800f04c:	3c08      	subs	r4, #8
 800f04e:	3d01      	subs	r5, #1
 800f050:	f7f1 f9de 	bl	8000410 <__aeabi_dcmpeq>
 800f054:	2800      	cmp	r0, #0
 800f056:	d1f4      	bne.n	800f042 <__ieee754_rem_pio2+0x386>
 800f058:	4b0d      	ldr	r3, [pc, #52]	; (800f090 <__ieee754_rem_pio2+0x3d4>)
 800f05a:	0032      	movs	r2, r6
 800f05c:	9301      	str	r3, [sp, #4]
 800f05e:	2302      	movs	r3, #2
 800f060:	0039      	movs	r1, r7
 800f062:	9300      	str	r3, [sp, #0]
 800f064:	a80a      	add	r0, sp, #40	; 0x28
 800f066:	9b02      	ldr	r3, [sp, #8]
 800f068:	f000 f8d4 	bl	800f214 <__kernel_rem_pio2>
 800f06c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f06e:	0006      	movs	r6, r0
 800f070:	2b00      	cmp	r3, #0
 800f072:	db00      	blt.n	800f076 <__ieee754_rem_pio2+0x3ba>
 800f074:	e65f      	b.n	800ed36 <__ieee754_rem_pio2+0x7a>
 800f076:	2280      	movs	r2, #128	; 0x80
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	0612      	lsls	r2, r2, #24
 800f07c:	189b      	adds	r3, r3, r2
 800f07e:	607b      	str	r3, [r7, #4]
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	189b      	adds	r3, r3, r2
 800f084:	60fb      	str	r3, [r7, #12]
 800f086:	e68c      	b.n	800eda2 <__ieee754_rem_pio2+0xe6>
 800f088:	fffffbea 	.word	0xfffffbea
 800f08c:	41700000 	.word	0x41700000
 800f090:	0801b860 	.word	0x0801b860

0800f094 <__kernel_cos>:
 800f094:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f096:	b087      	sub	sp, #28
 800f098:	9204      	str	r2, [sp, #16]
 800f09a:	9305      	str	r3, [sp, #20]
 800f09c:	004b      	lsls	r3, r1, #1
 800f09e:	085b      	lsrs	r3, r3, #1
 800f0a0:	9300      	str	r3, [sp, #0]
 800f0a2:	23f9      	movs	r3, #249	; 0xf9
 800f0a4:	9a00      	ldr	r2, [sp, #0]
 800f0a6:	0007      	movs	r7, r0
 800f0a8:	000e      	movs	r6, r1
 800f0aa:	059b      	lsls	r3, r3, #22
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	da04      	bge.n	800f0ba <__kernel_cos+0x26>
 800f0b0:	f7f2 ff68 	bl	8001f84 <__aeabi_d2iz>
 800f0b4:	2800      	cmp	r0, #0
 800f0b6:	d100      	bne.n	800f0ba <__kernel_cos+0x26>
 800f0b8:	e084      	b.n	800f1c4 <__kernel_cos+0x130>
 800f0ba:	003a      	movs	r2, r7
 800f0bc:	0033      	movs	r3, r6
 800f0be:	0038      	movs	r0, r7
 800f0c0:	0031      	movs	r1, r6
 800f0c2:	f7f2 f961 	bl	8001388 <__aeabi_dmul>
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	4b40      	ldr	r3, [pc, #256]	; (800f1cc <__kernel_cos+0x138>)
 800f0ca:	0004      	movs	r4, r0
 800f0cc:	000d      	movs	r5, r1
 800f0ce:	f7f2 f95b 	bl	8001388 <__aeabi_dmul>
 800f0d2:	4a3f      	ldr	r2, [pc, #252]	; (800f1d0 <__kernel_cos+0x13c>)
 800f0d4:	9002      	str	r0, [sp, #8]
 800f0d6:	9103      	str	r1, [sp, #12]
 800f0d8:	4b3e      	ldr	r3, [pc, #248]	; (800f1d4 <__kernel_cos+0x140>)
 800f0da:	0020      	movs	r0, r4
 800f0dc:	0029      	movs	r1, r5
 800f0de:	f7f2 f953 	bl	8001388 <__aeabi_dmul>
 800f0e2:	4a3d      	ldr	r2, [pc, #244]	; (800f1d8 <__kernel_cos+0x144>)
 800f0e4:	4b3d      	ldr	r3, [pc, #244]	; (800f1dc <__kernel_cos+0x148>)
 800f0e6:	f7f1 f9df 	bl	80004a8 <__aeabi_dadd>
 800f0ea:	0022      	movs	r2, r4
 800f0ec:	002b      	movs	r3, r5
 800f0ee:	f7f2 f94b 	bl	8001388 <__aeabi_dmul>
 800f0f2:	4a3b      	ldr	r2, [pc, #236]	; (800f1e0 <__kernel_cos+0x14c>)
 800f0f4:	4b3b      	ldr	r3, [pc, #236]	; (800f1e4 <__kernel_cos+0x150>)
 800f0f6:	f7f2 fbb3 	bl	8001860 <__aeabi_dsub>
 800f0fa:	0022      	movs	r2, r4
 800f0fc:	002b      	movs	r3, r5
 800f0fe:	f7f2 f943 	bl	8001388 <__aeabi_dmul>
 800f102:	4a39      	ldr	r2, [pc, #228]	; (800f1e8 <__kernel_cos+0x154>)
 800f104:	4b39      	ldr	r3, [pc, #228]	; (800f1ec <__kernel_cos+0x158>)
 800f106:	f7f1 f9cf 	bl	80004a8 <__aeabi_dadd>
 800f10a:	0022      	movs	r2, r4
 800f10c:	002b      	movs	r3, r5
 800f10e:	f7f2 f93b 	bl	8001388 <__aeabi_dmul>
 800f112:	4a37      	ldr	r2, [pc, #220]	; (800f1f0 <__kernel_cos+0x15c>)
 800f114:	4b37      	ldr	r3, [pc, #220]	; (800f1f4 <__kernel_cos+0x160>)
 800f116:	f7f2 fba3 	bl	8001860 <__aeabi_dsub>
 800f11a:	0022      	movs	r2, r4
 800f11c:	002b      	movs	r3, r5
 800f11e:	f7f2 f933 	bl	8001388 <__aeabi_dmul>
 800f122:	4a35      	ldr	r2, [pc, #212]	; (800f1f8 <__kernel_cos+0x164>)
 800f124:	4b35      	ldr	r3, [pc, #212]	; (800f1fc <__kernel_cos+0x168>)
 800f126:	f7f1 f9bf 	bl	80004a8 <__aeabi_dadd>
 800f12a:	0022      	movs	r2, r4
 800f12c:	002b      	movs	r3, r5
 800f12e:	f7f2 f92b 	bl	8001388 <__aeabi_dmul>
 800f132:	0022      	movs	r2, r4
 800f134:	002b      	movs	r3, r5
 800f136:	f7f2 f927 	bl	8001388 <__aeabi_dmul>
 800f13a:	9a04      	ldr	r2, [sp, #16]
 800f13c:	9b05      	ldr	r3, [sp, #20]
 800f13e:	0004      	movs	r4, r0
 800f140:	000d      	movs	r5, r1
 800f142:	0038      	movs	r0, r7
 800f144:	0031      	movs	r1, r6
 800f146:	f7f2 f91f 	bl	8001388 <__aeabi_dmul>
 800f14a:	0002      	movs	r2, r0
 800f14c:	000b      	movs	r3, r1
 800f14e:	0020      	movs	r0, r4
 800f150:	0029      	movs	r1, r5
 800f152:	f7f2 fb85 	bl	8001860 <__aeabi_dsub>
 800f156:	4b2a      	ldr	r3, [pc, #168]	; (800f200 <__kernel_cos+0x16c>)
 800f158:	9a00      	ldr	r2, [sp, #0]
 800f15a:	0004      	movs	r4, r0
 800f15c:	000d      	movs	r5, r1
 800f15e:	429a      	cmp	r2, r3
 800f160:	dc0d      	bgt.n	800f17e <__kernel_cos+0xea>
 800f162:	0002      	movs	r2, r0
 800f164:	000b      	movs	r3, r1
 800f166:	9802      	ldr	r0, [sp, #8]
 800f168:	9903      	ldr	r1, [sp, #12]
 800f16a:	f7f2 fb79 	bl	8001860 <__aeabi_dsub>
 800f16e:	0002      	movs	r2, r0
 800f170:	2000      	movs	r0, #0
 800f172:	000b      	movs	r3, r1
 800f174:	4923      	ldr	r1, [pc, #140]	; (800f204 <__kernel_cos+0x170>)
 800f176:	f7f2 fb73 	bl	8001860 <__aeabi_dsub>
 800f17a:	b007      	add	sp, #28
 800f17c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f17e:	4b22      	ldr	r3, [pc, #136]	; (800f208 <__kernel_cos+0x174>)
 800f180:	9a00      	ldr	r2, [sp, #0]
 800f182:	2600      	movs	r6, #0
 800f184:	429a      	cmp	r2, r3
 800f186:	dc1b      	bgt.n	800f1c0 <__kernel_cos+0x12c>
 800f188:	0013      	movs	r3, r2
 800f18a:	4a20      	ldr	r2, [pc, #128]	; (800f20c <__kernel_cos+0x178>)
 800f18c:	4694      	mov	ip, r2
 800f18e:	4463      	add	r3, ip
 800f190:	001f      	movs	r7, r3
 800f192:	0032      	movs	r2, r6
 800f194:	003b      	movs	r3, r7
 800f196:	2000      	movs	r0, #0
 800f198:	491a      	ldr	r1, [pc, #104]	; (800f204 <__kernel_cos+0x170>)
 800f19a:	f7f2 fb61 	bl	8001860 <__aeabi_dsub>
 800f19e:	0032      	movs	r2, r6
 800f1a0:	003b      	movs	r3, r7
 800f1a2:	9000      	str	r0, [sp, #0]
 800f1a4:	9101      	str	r1, [sp, #4]
 800f1a6:	9802      	ldr	r0, [sp, #8]
 800f1a8:	9903      	ldr	r1, [sp, #12]
 800f1aa:	f7f2 fb59 	bl	8001860 <__aeabi_dsub>
 800f1ae:	0022      	movs	r2, r4
 800f1b0:	002b      	movs	r3, r5
 800f1b2:	f7f2 fb55 	bl	8001860 <__aeabi_dsub>
 800f1b6:	0002      	movs	r2, r0
 800f1b8:	000b      	movs	r3, r1
 800f1ba:	9800      	ldr	r0, [sp, #0]
 800f1bc:	9901      	ldr	r1, [sp, #4]
 800f1be:	e7da      	b.n	800f176 <__kernel_cos+0xe2>
 800f1c0:	4f13      	ldr	r7, [pc, #76]	; (800f210 <__kernel_cos+0x17c>)
 800f1c2:	e7e6      	b.n	800f192 <__kernel_cos+0xfe>
 800f1c4:	2000      	movs	r0, #0
 800f1c6:	490f      	ldr	r1, [pc, #60]	; (800f204 <__kernel_cos+0x170>)
 800f1c8:	e7d7      	b.n	800f17a <__kernel_cos+0xe6>
 800f1ca:	46c0      	nop			; (mov r8, r8)
 800f1cc:	3fe00000 	.word	0x3fe00000
 800f1d0:	be8838d4 	.word	0xbe8838d4
 800f1d4:	bda8fae9 	.word	0xbda8fae9
 800f1d8:	bdb4b1c4 	.word	0xbdb4b1c4
 800f1dc:	3e21ee9e 	.word	0x3e21ee9e
 800f1e0:	809c52ad 	.word	0x809c52ad
 800f1e4:	3e927e4f 	.word	0x3e927e4f
 800f1e8:	19cb1590 	.word	0x19cb1590
 800f1ec:	3efa01a0 	.word	0x3efa01a0
 800f1f0:	16c15177 	.word	0x16c15177
 800f1f4:	3f56c16c 	.word	0x3f56c16c
 800f1f8:	5555554c 	.word	0x5555554c
 800f1fc:	3fa55555 	.word	0x3fa55555
 800f200:	3fd33332 	.word	0x3fd33332
 800f204:	3ff00000 	.word	0x3ff00000
 800f208:	3fe90000 	.word	0x3fe90000
 800f20c:	ffe00000 	.word	0xffe00000
 800f210:	3fd20000 	.word	0x3fd20000

0800f214 <__kernel_rem_pio2>:
 800f214:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f216:	4cd0      	ldr	r4, [pc, #832]	; (800f558 <__kernel_rem_pio2+0x344>)
 800f218:	44a5      	add	sp, r4
 800f21a:	930d      	str	r3, [sp, #52]	; 0x34
 800f21c:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f21e:	0014      	movs	r4, r2
 800f220:	009a      	lsls	r2, r3, #2
 800f222:	4bce      	ldr	r3, [pc, #824]	; (800f55c <__kernel_rem_pio2+0x348>)
 800f224:	900e      	str	r0, [sp, #56]	; 0x38
 800f226:	58d3      	ldr	r3, [r2, r3]
 800f228:	9107      	str	r1, [sp, #28]
 800f22a:	9308      	str	r3, [sp, #32]
 800f22c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f22e:	3b01      	subs	r3, #1
 800f230:	930c      	str	r3, [sp, #48]	; 0x30
 800f232:	2300      	movs	r3, #0
 800f234:	9300      	str	r3, [sp, #0]
 800f236:	0023      	movs	r3, r4
 800f238:	3314      	adds	r3, #20
 800f23a:	db04      	blt.n	800f246 <__kernel_rem_pio2+0x32>
 800f23c:	2118      	movs	r1, #24
 800f23e:	1ee0      	subs	r0, r4, #3
 800f240:	f7f0 ffea 	bl	8000218 <__divsi3>
 800f244:	9000      	str	r0, [sp, #0]
 800f246:	2218      	movs	r2, #24
 800f248:	9b00      	ldr	r3, [sp, #0]
 800f24a:	4252      	negs	r2, r2
 800f24c:	3301      	adds	r3, #1
 800f24e:	435a      	muls	r2, r3
 800f250:	1913      	adds	r3, r2, r4
 800f252:	9302      	str	r3, [sp, #8]
 800f254:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f256:	9b00      	ldr	r3, [sp, #0]
 800f258:	ae26      	add	r6, sp, #152	; 0x98
 800f25a:	1a9d      	subs	r5, r3, r2
 800f25c:	002c      	movs	r4, r5
 800f25e:	9b08      	ldr	r3, [sp, #32]
 800f260:	189f      	adds	r7, r3, r2
 800f262:	1b63      	subs	r3, r4, r5
 800f264:	429f      	cmp	r7, r3
 800f266:	da17      	bge.n	800f298 <__kernel_rem_pio2+0x84>
 800f268:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f26a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f26c:	9304      	str	r3, [sp, #16]
 800f26e:	ab76      	add	r3, sp, #472	; 0x1d8
 800f270:	930a      	str	r3, [sp, #40]	; 0x28
 800f272:	2301      	movs	r3, #1
 800f274:	1a9b      	subs	r3, r3, r2
 800f276:	930b      	str	r3, [sp, #44]	; 0x2c
 800f278:	ab28      	add	r3, sp, #160	; 0xa0
 800f27a:	930f      	str	r3, [sp, #60]	; 0x3c
 800f27c:	9a04      	ldr	r2, [sp, #16]
 800f27e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f280:	189b      	adds	r3, r3, r2
 800f282:	9a08      	ldr	r2, [sp, #32]
 800f284:	429a      	cmp	r2, r3
 800f286:	db31      	blt.n	800f2ec <__kernel_rem_pio2+0xd8>
 800f288:	9b04      	ldr	r3, [sp, #16]
 800f28a:	2400      	movs	r4, #0
 800f28c:	00de      	lsls	r6, r3, #3
 800f28e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f290:	2500      	movs	r5, #0
 800f292:	2700      	movs	r7, #0
 800f294:	199e      	adds	r6, r3, r6
 800f296:	e01e      	b.n	800f2d6 <__kernel_rem_pio2+0xc2>
 800f298:	2c00      	cmp	r4, #0
 800f29a:	db07      	blt.n	800f2ac <__kernel_rem_pio2+0x98>
 800f29c:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 800f29e:	00a3      	lsls	r3, r4, #2
 800f2a0:	58d0      	ldr	r0, [r2, r3]
 800f2a2:	f7f2 fea5 	bl	8001ff0 <__aeabi_i2d>
 800f2a6:	c603      	stmia	r6!, {r0, r1}
 800f2a8:	3401      	adds	r4, #1
 800f2aa:	e7da      	b.n	800f262 <__kernel_rem_pio2+0x4e>
 800f2ac:	2000      	movs	r0, #0
 800f2ae:	2100      	movs	r1, #0
 800f2b0:	e7f9      	b.n	800f2a6 <__kernel_rem_pio2+0x92>
 800f2b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f2b4:	00f9      	lsls	r1, r7, #3
 800f2b6:	1859      	adds	r1, r3, r1
 800f2b8:	6808      	ldr	r0, [r1, #0]
 800f2ba:	6849      	ldr	r1, [r1, #4]
 800f2bc:	6832      	ldr	r2, [r6, #0]
 800f2be:	6873      	ldr	r3, [r6, #4]
 800f2c0:	f7f2 f862 	bl	8001388 <__aeabi_dmul>
 800f2c4:	0002      	movs	r2, r0
 800f2c6:	000b      	movs	r3, r1
 800f2c8:	0020      	movs	r0, r4
 800f2ca:	0029      	movs	r1, r5
 800f2cc:	f7f1 f8ec 	bl	80004a8 <__aeabi_dadd>
 800f2d0:	0004      	movs	r4, r0
 800f2d2:	000d      	movs	r5, r1
 800f2d4:	3701      	adds	r7, #1
 800f2d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f2d8:	3e08      	subs	r6, #8
 800f2da:	429f      	cmp	r7, r3
 800f2dc:	dde9      	ble.n	800f2b2 <__kernel_rem_pio2+0x9e>
 800f2de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2e0:	c330      	stmia	r3!, {r4, r5}
 800f2e2:	930a      	str	r3, [sp, #40]	; 0x28
 800f2e4:	9b04      	ldr	r3, [sp, #16]
 800f2e6:	3301      	adds	r3, #1
 800f2e8:	9304      	str	r3, [sp, #16]
 800f2ea:	e7c7      	b.n	800f27c <__kernel_rem_pio2+0x68>
 800f2ec:	9b08      	ldr	r3, [sp, #32]
 800f2ee:	aa12      	add	r2, sp, #72	; 0x48
 800f2f0:	009b      	lsls	r3, r3, #2
 800f2f2:	189b      	adds	r3, r3, r2
 800f2f4:	9310      	str	r3, [sp, #64]	; 0x40
 800f2f6:	9b00      	ldr	r3, [sp, #0]
 800f2f8:	0098      	lsls	r0, r3, #2
 800f2fa:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f2fc:	181b      	adds	r3, r3, r0
 800f2fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800f300:	9b08      	ldr	r3, [sp, #32]
 800f302:	9304      	str	r3, [sp, #16]
 800f304:	9b04      	ldr	r3, [sp, #16]
 800f306:	aa76      	add	r2, sp, #472	; 0x1d8
 800f308:	00db      	lsls	r3, r3, #3
 800f30a:	18d3      	adds	r3, r2, r3
 800f30c:	681c      	ldr	r4, [r3, #0]
 800f30e:	685d      	ldr	r5, [r3, #4]
 800f310:	ab12      	add	r3, sp, #72	; 0x48
 800f312:	9300      	str	r3, [sp, #0]
 800f314:	930b      	str	r3, [sp, #44]	; 0x2c
 800f316:	9b04      	ldr	r3, [sp, #16]
 800f318:	9211      	str	r2, [sp, #68]	; 0x44
 800f31a:	930a      	str	r3, [sp, #40]	; 0x28
 800f31c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f31e:	2b00      	cmp	r3, #0
 800f320:	dc74      	bgt.n	800f40c <__kernel_rem_pio2+0x1f8>
 800f322:	0020      	movs	r0, r4
 800f324:	0029      	movs	r1, r5
 800f326:	9a02      	ldr	r2, [sp, #8]
 800f328:	f000 fc24 	bl	800fb74 <scalbn>
 800f32c:	23ff      	movs	r3, #255	; 0xff
 800f32e:	2200      	movs	r2, #0
 800f330:	059b      	lsls	r3, r3, #22
 800f332:	0004      	movs	r4, r0
 800f334:	000d      	movs	r5, r1
 800f336:	f7f2 f827 	bl	8001388 <__aeabi_dmul>
 800f33a:	f000 fb91 	bl	800fa60 <floor>
 800f33e:	2200      	movs	r2, #0
 800f340:	4b87      	ldr	r3, [pc, #540]	; (800f560 <__kernel_rem_pio2+0x34c>)
 800f342:	f7f2 f821 	bl	8001388 <__aeabi_dmul>
 800f346:	0002      	movs	r2, r0
 800f348:	000b      	movs	r3, r1
 800f34a:	0020      	movs	r0, r4
 800f34c:	0029      	movs	r1, r5
 800f34e:	f7f2 fa87 	bl	8001860 <__aeabi_dsub>
 800f352:	000d      	movs	r5, r1
 800f354:	0004      	movs	r4, r0
 800f356:	f7f2 fe15 	bl	8001f84 <__aeabi_d2iz>
 800f35a:	900b      	str	r0, [sp, #44]	; 0x2c
 800f35c:	f7f2 fe48 	bl	8001ff0 <__aeabi_i2d>
 800f360:	000b      	movs	r3, r1
 800f362:	0002      	movs	r2, r0
 800f364:	0029      	movs	r1, r5
 800f366:	0020      	movs	r0, r4
 800f368:	f7f2 fa7a 	bl	8001860 <__aeabi_dsub>
 800f36c:	9b02      	ldr	r3, [sp, #8]
 800f36e:	0006      	movs	r6, r0
 800f370:	000f      	movs	r7, r1
 800f372:	2b00      	cmp	r3, #0
 800f374:	dd74      	ble.n	800f460 <__kernel_rem_pio2+0x24c>
 800f376:	2118      	movs	r1, #24
 800f378:	9b04      	ldr	r3, [sp, #16]
 800f37a:	aa12      	add	r2, sp, #72	; 0x48
 800f37c:	3b01      	subs	r3, #1
 800f37e:	009b      	lsls	r3, r3, #2
 800f380:	589a      	ldr	r2, [r3, r2]
 800f382:	9802      	ldr	r0, [sp, #8]
 800f384:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800f386:	1a09      	subs	r1, r1, r0
 800f388:	0010      	movs	r0, r2
 800f38a:	4108      	asrs	r0, r1
 800f38c:	1824      	adds	r4, r4, r0
 800f38e:	4088      	lsls	r0, r1
 800f390:	a912      	add	r1, sp, #72	; 0x48
 800f392:	1a12      	subs	r2, r2, r0
 800f394:	505a      	str	r2, [r3, r1]
 800f396:	2317      	movs	r3, #23
 800f398:	9902      	ldr	r1, [sp, #8]
 800f39a:	940b      	str	r4, [sp, #44]	; 0x2c
 800f39c:	1a5b      	subs	r3, r3, r1
 800f39e:	411a      	asrs	r2, r3
 800f3a0:	920a      	str	r2, [sp, #40]	; 0x28
 800f3a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	dd6d      	ble.n	800f484 <__kernel_rem_pio2+0x270>
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3ac:	2080      	movs	r0, #128	; 0x80
 800f3ae:	3301      	adds	r3, #1
 800f3b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800f3b2:	4b6c      	ldr	r3, [pc, #432]	; (800f564 <__kernel_rem_pio2+0x350>)
 800f3b4:	0014      	movs	r4, r2
 800f3b6:	469c      	mov	ip, r3
 800f3b8:	2501      	movs	r5, #1
 800f3ba:	0440      	lsls	r0, r0, #17
 800f3bc:	9b04      	ldr	r3, [sp, #16]
 800f3be:	4293      	cmp	r3, r2
 800f3c0:	dd00      	ble.n	800f3c4 <__kernel_rem_pio2+0x1b0>
 800f3c2:	e098      	b.n	800f4f6 <__kernel_rem_pio2+0x2e2>
 800f3c4:	9b02      	ldr	r3, [sp, #8]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	dd05      	ble.n	800f3d6 <__kernel_rem_pio2+0x1c2>
 800f3ca:	2b01      	cmp	r3, #1
 800f3cc:	d100      	bne.n	800f3d0 <__kernel_rem_pio2+0x1bc>
 800f3ce:	e0a8      	b.n	800f522 <__kernel_rem_pio2+0x30e>
 800f3d0:	2b02      	cmp	r3, #2
 800f3d2:	d100      	bne.n	800f3d6 <__kernel_rem_pio2+0x1c2>
 800f3d4:	e0b0      	b.n	800f538 <__kernel_rem_pio2+0x324>
 800f3d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3d8:	2b02      	cmp	r3, #2
 800f3da:	d153      	bne.n	800f484 <__kernel_rem_pio2+0x270>
 800f3dc:	0032      	movs	r2, r6
 800f3de:	003b      	movs	r3, r7
 800f3e0:	2000      	movs	r0, #0
 800f3e2:	4961      	ldr	r1, [pc, #388]	; (800f568 <__kernel_rem_pio2+0x354>)
 800f3e4:	f7f2 fa3c 	bl	8001860 <__aeabi_dsub>
 800f3e8:	0006      	movs	r6, r0
 800f3ea:	000f      	movs	r7, r1
 800f3ec:	2c00      	cmp	r4, #0
 800f3ee:	d049      	beq.n	800f484 <__kernel_rem_pio2+0x270>
 800f3f0:	9a02      	ldr	r2, [sp, #8]
 800f3f2:	2000      	movs	r0, #0
 800f3f4:	495c      	ldr	r1, [pc, #368]	; (800f568 <__kernel_rem_pio2+0x354>)
 800f3f6:	f000 fbbd 	bl	800fb74 <scalbn>
 800f3fa:	0002      	movs	r2, r0
 800f3fc:	000b      	movs	r3, r1
 800f3fe:	0030      	movs	r0, r6
 800f400:	0039      	movs	r1, r7
 800f402:	f7f2 fa2d 	bl	8001860 <__aeabi_dsub>
 800f406:	0006      	movs	r6, r0
 800f408:	000f      	movs	r7, r1
 800f40a:	e03b      	b.n	800f484 <__kernel_rem_pio2+0x270>
 800f40c:	2200      	movs	r2, #0
 800f40e:	4b57      	ldr	r3, [pc, #348]	; (800f56c <__kernel_rem_pio2+0x358>)
 800f410:	0020      	movs	r0, r4
 800f412:	0029      	movs	r1, r5
 800f414:	f7f1 ffb8 	bl	8001388 <__aeabi_dmul>
 800f418:	f7f2 fdb4 	bl	8001f84 <__aeabi_d2iz>
 800f41c:	f7f2 fde8 	bl	8001ff0 <__aeabi_i2d>
 800f420:	2200      	movs	r2, #0
 800f422:	4b53      	ldr	r3, [pc, #332]	; (800f570 <__kernel_rem_pio2+0x35c>)
 800f424:	0006      	movs	r6, r0
 800f426:	000f      	movs	r7, r1
 800f428:	f7f1 ffae 	bl	8001388 <__aeabi_dmul>
 800f42c:	0002      	movs	r2, r0
 800f42e:	000b      	movs	r3, r1
 800f430:	0020      	movs	r0, r4
 800f432:	0029      	movs	r1, r5
 800f434:	f7f2 fa14 	bl	8001860 <__aeabi_dsub>
 800f438:	f7f2 fda4 	bl	8001f84 <__aeabi_d2iz>
 800f43c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f43e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f440:	c301      	stmia	r3!, {r0}
 800f442:	930b      	str	r3, [sp, #44]	; 0x2c
 800f444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f446:	0030      	movs	r0, r6
 800f448:	3b01      	subs	r3, #1
 800f44a:	930a      	str	r3, [sp, #40]	; 0x28
 800f44c:	00db      	lsls	r3, r3, #3
 800f44e:	18d3      	adds	r3, r2, r3
 800f450:	0039      	movs	r1, r7
 800f452:	681a      	ldr	r2, [r3, #0]
 800f454:	685b      	ldr	r3, [r3, #4]
 800f456:	f7f1 f827 	bl	80004a8 <__aeabi_dadd>
 800f45a:	0004      	movs	r4, r0
 800f45c:	000d      	movs	r5, r1
 800f45e:	e75d      	b.n	800f31c <__kernel_rem_pio2+0x108>
 800f460:	9b02      	ldr	r3, [sp, #8]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d107      	bne.n	800f476 <__kernel_rem_pio2+0x262>
 800f466:	9b04      	ldr	r3, [sp, #16]
 800f468:	aa12      	add	r2, sp, #72	; 0x48
 800f46a:	3b01      	subs	r3, #1
 800f46c:	009b      	lsls	r3, r3, #2
 800f46e:	5898      	ldr	r0, [r3, r2]
 800f470:	15c3      	asrs	r3, r0, #23
 800f472:	930a      	str	r3, [sp, #40]	; 0x28
 800f474:	e795      	b.n	800f3a2 <__kernel_rem_pio2+0x18e>
 800f476:	2200      	movs	r2, #0
 800f478:	4b3e      	ldr	r3, [pc, #248]	; (800f574 <__kernel_rem_pio2+0x360>)
 800f47a:	f7f0 ffed 	bl	8000458 <__aeabi_dcmpge>
 800f47e:	2800      	cmp	r0, #0
 800f480:	d136      	bne.n	800f4f0 <__kernel_rem_pio2+0x2dc>
 800f482:	900a      	str	r0, [sp, #40]	; 0x28
 800f484:	2200      	movs	r2, #0
 800f486:	2300      	movs	r3, #0
 800f488:	0030      	movs	r0, r6
 800f48a:	0039      	movs	r1, r7
 800f48c:	f7f0 ffc0 	bl	8000410 <__aeabi_dcmpeq>
 800f490:	2800      	cmp	r0, #0
 800f492:	d100      	bne.n	800f496 <__kernel_rem_pio2+0x282>
 800f494:	e0b9      	b.n	800f60a <__kernel_rem_pio2+0x3f6>
 800f496:	2200      	movs	r2, #0
 800f498:	9b04      	ldr	r3, [sp, #16]
 800f49a:	3b01      	subs	r3, #1
 800f49c:	9300      	str	r3, [sp, #0]
 800f49e:	9908      	ldr	r1, [sp, #32]
 800f4a0:	428b      	cmp	r3, r1
 800f4a2:	da52      	bge.n	800f54a <__kernel_rem_pio2+0x336>
 800f4a4:	2a00      	cmp	r2, #0
 800f4a6:	d100      	bne.n	800f4aa <__kernel_rem_pio2+0x296>
 800f4a8:	e095      	b.n	800f5d6 <__kernel_rem_pio2+0x3c2>
 800f4aa:	9b02      	ldr	r3, [sp, #8]
 800f4ac:	aa12      	add	r2, sp, #72	; 0x48
 800f4ae:	3b18      	subs	r3, #24
 800f4b0:	9302      	str	r3, [sp, #8]
 800f4b2:	9b00      	ldr	r3, [sp, #0]
 800f4b4:	009b      	lsls	r3, r3, #2
 800f4b6:	589b      	ldr	r3, [r3, r2]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d100      	bne.n	800f4be <__kernel_rem_pio2+0x2aa>
 800f4bc:	e0a1      	b.n	800f602 <__kernel_rem_pio2+0x3ee>
 800f4be:	2000      	movs	r0, #0
 800f4c0:	9a02      	ldr	r2, [sp, #8]
 800f4c2:	4929      	ldr	r1, [pc, #164]	; (800f568 <__kernel_rem_pio2+0x354>)
 800f4c4:	f000 fb56 	bl	800fb74 <scalbn>
 800f4c8:	0006      	movs	r6, r0
 800f4ca:	000f      	movs	r7, r1
 800f4cc:	9c00      	ldr	r4, [sp, #0]
 800f4ce:	2c00      	cmp	r4, #0
 800f4d0:	db00      	blt.n	800f4d4 <__kernel_rem_pio2+0x2c0>
 800f4d2:	e0d9      	b.n	800f688 <__kernel_rem_pio2+0x474>
 800f4d4:	2600      	movs	r6, #0
 800f4d6:	9d00      	ldr	r5, [sp, #0]
 800f4d8:	2d00      	cmp	r5, #0
 800f4da:	da00      	bge.n	800f4de <__kernel_rem_pio2+0x2ca>
 800f4dc:	e10c      	b.n	800f6f8 <__kernel_rem_pio2+0x4e4>
 800f4de:	ab76      	add	r3, sp, #472	; 0x1d8
 800f4e0:	00ef      	lsls	r7, r5, #3
 800f4e2:	2400      	movs	r4, #0
 800f4e4:	18ff      	adds	r7, r7, r3
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	9302      	str	r3, [sp, #8]
 800f4ea:	9403      	str	r4, [sp, #12]
 800f4ec:	2400      	movs	r4, #0
 800f4ee:	e0f4      	b.n	800f6da <__kernel_rem_pio2+0x4c6>
 800f4f0:	2302      	movs	r3, #2
 800f4f2:	930a      	str	r3, [sp, #40]	; 0x28
 800f4f4:	e758      	b.n	800f3a8 <__kernel_rem_pio2+0x194>
 800f4f6:	9b00      	ldr	r3, [sp, #0]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	2c00      	cmp	r4, #0
 800f4fc:	d10b      	bne.n	800f516 <__kernel_rem_pio2+0x302>
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d003      	beq.n	800f50a <__kernel_rem_pio2+0x2f6>
 800f502:	9c00      	ldr	r4, [sp, #0]
 800f504:	1ac3      	subs	r3, r0, r3
 800f506:	6023      	str	r3, [r4, #0]
 800f508:	002b      	movs	r3, r5
 800f50a:	9c00      	ldr	r4, [sp, #0]
 800f50c:	3201      	adds	r2, #1
 800f50e:	3404      	adds	r4, #4
 800f510:	9400      	str	r4, [sp, #0]
 800f512:	001c      	movs	r4, r3
 800f514:	e752      	b.n	800f3bc <__kernel_rem_pio2+0x1a8>
 800f516:	4661      	mov	r1, ip
 800f518:	1acb      	subs	r3, r1, r3
 800f51a:	9900      	ldr	r1, [sp, #0]
 800f51c:	600b      	str	r3, [r1, #0]
 800f51e:	0023      	movs	r3, r4
 800f520:	e7f3      	b.n	800f50a <__kernel_rem_pio2+0x2f6>
 800f522:	9b04      	ldr	r3, [sp, #16]
 800f524:	aa12      	add	r2, sp, #72	; 0x48
 800f526:	3b01      	subs	r3, #1
 800f528:	009b      	lsls	r3, r3, #2
 800f52a:	589a      	ldr	r2, [r3, r2]
 800f52c:	9200      	str	r2, [sp, #0]
 800f52e:	0252      	lsls	r2, r2, #9
 800f530:	0a52      	lsrs	r2, r2, #9
 800f532:	a912      	add	r1, sp, #72	; 0x48
 800f534:	505a      	str	r2, [r3, r1]
 800f536:	e74e      	b.n	800f3d6 <__kernel_rem_pio2+0x1c2>
 800f538:	9b04      	ldr	r3, [sp, #16]
 800f53a:	aa12      	add	r2, sp, #72	; 0x48
 800f53c:	3b01      	subs	r3, #1
 800f53e:	009b      	lsls	r3, r3, #2
 800f540:	589a      	ldr	r2, [r3, r2]
 800f542:	9200      	str	r2, [sp, #0]
 800f544:	0292      	lsls	r2, r2, #10
 800f546:	0a92      	lsrs	r2, r2, #10
 800f548:	e7f3      	b.n	800f532 <__kernel_rem_pio2+0x31e>
 800f54a:	0099      	lsls	r1, r3, #2
 800f54c:	a812      	add	r0, sp, #72	; 0x48
 800f54e:	5809      	ldr	r1, [r1, r0]
 800f550:	3b01      	subs	r3, #1
 800f552:	430a      	orrs	r2, r1
 800f554:	e7a3      	b.n	800f49e <__kernel_rem_pio2+0x28a>
 800f556:	46c0      	nop			; (mov r8, r8)
 800f558:	fffffd84 	.word	0xfffffd84
 800f55c:	0801b9a8 	.word	0x0801b9a8
 800f560:	40200000 	.word	0x40200000
 800f564:	00ffffff 	.word	0x00ffffff
 800f568:	3ff00000 	.word	0x3ff00000
 800f56c:	3e700000 	.word	0x3e700000
 800f570:	41700000 	.word	0x41700000
 800f574:	3fe00000 	.word	0x3fe00000
 800f578:	3301      	adds	r3, #1
 800f57a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800f57c:	009a      	lsls	r2, r3, #2
 800f57e:	4252      	negs	r2, r2
 800f580:	588a      	ldr	r2, [r1, r2]
 800f582:	2a00      	cmp	r2, #0
 800f584:	d0f8      	beq.n	800f578 <__kernel_rem_pio2+0x364>
 800f586:	9a04      	ldr	r2, [sp, #16]
 800f588:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f58a:	1c57      	adds	r7, r2, #1
 800f58c:	1854      	adds	r4, r2, r1
 800f58e:	00e4      	lsls	r4, r4, #3
 800f590:	aa26      	add	r2, sp, #152	; 0x98
 800f592:	1914      	adds	r4, r2, r4
 800f594:	9a04      	ldr	r2, [sp, #16]
 800f596:	18d3      	adds	r3, r2, r3
 800f598:	9304      	str	r3, [sp, #16]
 800f59a:	9b04      	ldr	r3, [sp, #16]
 800f59c:	42bb      	cmp	r3, r7
 800f59e:	da00      	bge.n	800f5a2 <__kernel_rem_pio2+0x38e>
 800f5a0:	e6b0      	b.n	800f304 <__kernel_rem_pio2+0xf0>
 800f5a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f5a4:	00bb      	lsls	r3, r7, #2
 800f5a6:	58d0      	ldr	r0, [r2, r3]
 800f5a8:	f7f2 fd22 	bl	8001ff0 <__aeabi_i2d>
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	0026      	movs	r6, r4
 800f5b2:	2500      	movs	r5, #0
 800f5b4:	6020      	str	r0, [r4, #0]
 800f5b6:	6061      	str	r1, [r4, #4]
 800f5b8:	9200      	str	r2, [sp, #0]
 800f5ba:	9301      	str	r3, [sp, #4]
 800f5bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5be:	429d      	cmp	r5, r3
 800f5c0:	dd0b      	ble.n	800f5da <__kernel_rem_pio2+0x3c6>
 800f5c2:	00fb      	lsls	r3, r7, #3
 800f5c4:	aa76      	add	r2, sp, #472	; 0x1d8
 800f5c6:	18d3      	adds	r3, r2, r3
 800f5c8:	3701      	adds	r7, #1
 800f5ca:	9900      	ldr	r1, [sp, #0]
 800f5cc:	9a01      	ldr	r2, [sp, #4]
 800f5ce:	3408      	adds	r4, #8
 800f5d0:	6019      	str	r1, [r3, #0]
 800f5d2:	605a      	str	r2, [r3, #4]
 800f5d4:	e7e1      	b.n	800f59a <__kernel_rem_pio2+0x386>
 800f5d6:	2301      	movs	r3, #1
 800f5d8:	e7cf      	b.n	800f57a <__kernel_rem_pio2+0x366>
 800f5da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f5dc:	00e9      	lsls	r1, r5, #3
 800f5de:	1859      	adds	r1, r3, r1
 800f5e0:	6808      	ldr	r0, [r1, #0]
 800f5e2:	6849      	ldr	r1, [r1, #4]
 800f5e4:	6832      	ldr	r2, [r6, #0]
 800f5e6:	6873      	ldr	r3, [r6, #4]
 800f5e8:	f7f1 fece 	bl	8001388 <__aeabi_dmul>
 800f5ec:	0002      	movs	r2, r0
 800f5ee:	000b      	movs	r3, r1
 800f5f0:	9800      	ldr	r0, [sp, #0]
 800f5f2:	9901      	ldr	r1, [sp, #4]
 800f5f4:	f7f0 ff58 	bl	80004a8 <__aeabi_dadd>
 800f5f8:	3501      	adds	r5, #1
 800f5fa:	9000      	str	r0, [sp, #0]
 800f5fc:	9101      	str	r1, [sp, #4]
 800f5fe:	3e08      	subs	r6, #8
 800f600:	e7dc      	b.n	800f5bc <__kernel_rem_pio2+0x3a8>
 800f602:	9b00      	ldr	r3, [sp, #0]
 800f604:	3b01      	subs	r3, #1
 800f606:	9300      	str	r3, [sp, #0]
 800f608:	e74f      	b.n	800f4aa <__kernel_rem_pio2+0x296>
 800f60a:	9b02      	ldr	r3, [sp, #8]
 800f60c:	0030      	movs	r0, r6
 800f60e:	425a      	negs	r2, r3
 800f610:	0039      	movs	r1, r7
 800f612:	f000 faaf 	bl	800fb74 <scalbn>
 800f616:	2200      	movs	r2, #0
 800f618:	4bb6      	ldr	r3, [pc, #728]	; (800f8f4 <__kernel_rem_pio2+0x6e0>)
 800f61a:	0004      	movs	r4, r0
 800f61c:	000d      	movs	r5, r1
 800f61e:	f7f0 ff1b 	bl	8000458 <__aeabi_dcmpge>
 800f622:	2800      	cmp	r0, #0
 800f624:	d025      	beq.n	800f672 <__kernel_rem_pio2+0x45e>
 800f626:	2200      	movs	r2, #0
 800f628:	4bb3      	ldr	r3, [pc, #716]	; (800f8f8 <__kernel_rem_pio2+0x6e4>)
 800f62a:	0020      	movs	r0, r4
 800f62c:	0029      	movs	r1, r5
 800f62e:	f7f1 feab 	bl	8001388 <__aeabi_dmul>
 800f632:	f7f2 fca7 	bl	8001f84 <__aeabi_d2iz>
 800f636:	9b04      	ldr	r3, [sp, #16]
 800f638:	0006      	movs	r6, r0
 800f63a:	009f      	lsls	r7, r3, #2
 800f63c:	f7f2 fcd8 	bl	8001ff0 <__aeabi_i2d>
 800f640:	2200      	movs	r2, #0
 800f642:	4bac      	ldr	r3, [pc, #688]	; (800f8f4 <__kernel_rem_pio2+0x6e0>)
 800f644:	f7f1 fea0 	bl	8001388 <__aeabi_dmul>
 800f648:	0002      	movs	r2, r0
 800f64a:	000b      	movs	r3, r1
 800f64c:	0020      	movs	r0, r4
 800f64e:	0029      	movs	r1, r5
 800f650:	f7f2 f906 	bl	8001860 <__aeabi_dsub>
 800f654:	f7f2 fc96 	bl	8001f84 <__aeabi_d2iz>
 800f658:	ab12      	add	r3, sp, #72	; 0x48
 800f65a:	51d8      	str	r0, [r3, r7]
 800f65c:	9b04      	ldr	r3, [sp, #16]
 800f65e:	aa12      	add	r2, sp, #72	; 0x48
 800f660:	3301      	adds	r3, #1
 800f662:	9300      	str	r3, [sp, #0]
 800f664:	9b02      	ldr	r3, [sp, #8]
 800f666:	3318      	adds	r3, #24
 800f668:	9302      	str	r3, [sp, #8]
 800f66a:	9b00      	ldr	r3, [sp, #0]
 800f66c:	009b      	lsls	r3, r3, #2
 800f66e:	509e      	str	r6, [r3, r2]
 800f670:	e725      	b.n	800f4be <__kernel_rem_pio2+0x2aa>
 800f672:	9b04      	ldr	r3, [sp, #16]
 800f674:	0020      	movs	r0, r4
 800f676:	0029      	movs	r1, r5
 800f678:	009e      	lsls	r6, r3, #2
 800f67a:	f7f2 fc83 	bl	8001f84 <__aeabi_d2iz>
 800f67e:	ab12      	add	r3, sp, #72	; 0x48
 800f680:	5198      	str	r0, [r3, r6]
 800f682:	9b04      	ldr	r3, [sp, #16]
 800f684:	9300      	str	r3, [sp, #0]
 800f686:	e71a      	b.n	800f4be <__kernel_rem_pio2+0x2aa>
 800f688:	00e5      	lsls	r5, r4, #3
 800f68a:	ab76      	add	r3, sp, #472	; 0x1d8
 800f68c:	aa12      	add	r2, sp, #72	; 0x48
 800f68e:	195d      	adds	r5, r3, r5
 800f690:	00a3      	lsls	r3, r4, #2
 800f692:	5898      	ldr	r0, [r3, r2]
 800f694:	f7f2 fcac 	bl	8001ff0 <__aeabi_i2d>
 800f698:	0032      	movs	r2, r6
 800f69a:	003b      	movs	r3, r7
 800f69c:	f7f1 fe74 	bl	8001388 <__aeabi_dmul>
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	6028      	str	r0, [r5, #0]
 800f6a4:	6069      	str	r1, [r5, #4]
 800f6a6:	4b94      	ldr	r3, [pc, #592]	; (800f8f8 <__kernel_rem_pio2+0x6e4>)
 800f6a8:	0030      	movs	r0, r6
 800f6aa:	0039      	movs	r1, r7
 800f6ac:	f7f1 fe6c 	bl	8001388 <__aeabi_dmul>
 800f6b0:	3c01      	subs	r4, #1
 800f6b2:	0006      	movs	r6, r0
 800f6b4:	000f      	movs	r7, r1
 800f6b6:	e70a      	b.n	800f4ce <__kernel_rem_pio2+0x2ba>
 800f6b8:	4b90      	ldr	r3, [pc, #576]	; (800f8fc <__kernel_rem_pio2+0x6e8>)
 800f6ba:	00e1      	lsls	r1, r4, #3
 800f6bc:	1859      	adds	r1, r3, r1
 800f6be:	6808      	ldr	r0, [r1, #0]
 800f6c0:	6849      	ldr	r1, [r1, #4]
 800f6c2:	cf0c      	ldmia	r7!, {r2, r3}
 800f6c4:	f7f1 fe60 	bl	8001388 <__aeabi_dmul>
 800f6c8:	0002      	movs	r2, r0
 800f6ca:	000b      	movs	r3, r1
 800f6cc:	9802      	ldr	r0, [sp, #8]
 800f6ce:	9903      	ldr	r1, [sp, #12]
 800f6d0:	f7f0 feea 	bl	80004a8 <__aeabi_dadd>
 800f6d4:	9002      	str	r0, [sp, #8]
 800f6d6:	9103      	str	r1, [sp, #12]
 800f6d8:	3401      	adds	r4, #1
 800f6da:	9b08      	ldr	r3, [sp, #32]
 800f6dc:	429c      	cmp	r4, r3
 800f6de:	dc01      	bgt.n	800f6e4 <__kernel_rem_pio2+0x4d0>
 800f6e0:	42a6      	cmp	r6, r4
 800f6e2:	dae9      	bge.n	800f6b8 <__kernel_rem_pio2+0x4a4>
 800f6e4:	00f3      	lsls	r3, r6, #3
 800f6e6:	aa4e      	add	r2, sp, #312	; 0x138
 800f6e8:	18d3      	adds	r3, r2, r3
 800f6ea:	3d01      	subs	r5, #1
 800f6ec:	9902      	ldr	r1, [sp, #8]
 800f6ee:	9a03      	ldr	r2, [sp, #12]
 800f6f0:	3601      	adds	r6, #1
 800f6f2:	6019      	str	r1, [r3, #0]
 800f6f4:	605a      	str	r2, [r3, #4]
 800f6f6:	e6ef      	b.n	800f4d8 <__kernel_rem_pio2+0x2c4>
 800f6f8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f6fa:	2b02      	cmp	r3, #2
 800f6fc:	dc0b      	bgt.n	800f716 <__kernel_rem_pio2+0x502>
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	dd00      	ble.n	800f704 <__kernel_rem_pio2+0x4f0>
 800f702:	e08a      	b.n	800f81a <__kernel_rem_pio2+0x606>
 800f704:	d055      	beq.n	800f7b2 <__kernel_rem_pio2+0x59e>
 800f706:	2007      	movs	r0, #7
 800f708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f70a:	4003      	ands	r3, r0
 800f70c:	0018      	movs	r0, r3
 800f70e:	239f      	movs	r3, #159	; 0x9f
 800f710:	009b      	lsls	r3, r3, #2
 800f712:	449d      	add	sp, r3
 800f714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f716:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f718:	2b03      	cmp	r3, #3
 800f71a:	d1f4      	bne.n	800f706 <__kernel_rem_pio2+0x4f2>
 800f71c:	9b00      	ldr	r3, [sp, #0]
 800f71e:	00dc      	lsls	r4, r3, #3
 800f720:	ab4e      	add	r3, sp, #312	; 0x138
 800f722:	191c      	adds	r4, r3, r4
 800f724:	0025      	movs	r5, r4
 800f726:	9b00      	ldr	r3, [sp, #0]
 800f728:	9302      	str	r3, [sp, #8]
 800f72a:	9b02      	ldr	r3, [sp, #8]
 800f72c:	3d08      	subs	r5, #8
 800f72e:	2b00      	cmp	r3, #0
 800f730:	dd00      	ble.n	800f734 <__kernel_rem_pio2+0x520>
 800f732:	e083      	b.n	800f83c <__kernel_rem_pio2+0x628>
 800f734:	9d00      	ldr	r5, [sp, #0]
 800f736:	3c08      	subs	r4, #8
 800f738:	2d01      	cmp	r5, #1
 800f73a:	dd00      	ble.n	800f73e <__kernel_rem_pio2+0x52a>
 800f73c:	e0a0      	b.n	800f880 <__kernel_rem_pio2+0x66c>
 800f73e:	2400      	movs	r4, #0
 800f740:	0021      	movs	r1, r4
 800f742:	9b00      	ldr	r3, [sp, #0]
 800f744:	2b01      	cmp	r3, #1
 800f746:	dd00      	ble.n	800f74a <__kernel_rem_pio2+0x536>
 800f748:	e0b8      	b.n	800f8bc <__kernel_rem_pio2+0x6a8>
 800f74a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f74c:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 800f74e:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 800f750:	9d50      	ldr	r5, [sp, #320]	; 0x140
 800f752:	9851      	ldr	r0, [sp, #324]	; 0x144
 800f754:	2b00      	cmp	r3, #0
 800f756:	d000      	beq.n	800f75a <__kernel_rem_pio2+0x546>
 800f758:	e0be      	b.n	800f8d8 <__kernel_rem_pio2+0x6c4>
 800f75a:	0033      	movs	r3, r6
 800f75c:	003a      	movs	r2, r7
 800f75e:	9e07      	ldr	r6, [sp, #28]
 800f760:	6032      	str	r2, [r6, #0]
 800f762:	6073      	str	r3, [r6, #4]
 800f764:	002a      	movs	r2, r5
 800f766:	0003      	movs	r3, r0
 800f768:	60b2      	str	r2, [r6, #8]
 800f76a:	60f3      	str	r3, [r6, #12]
 800f76c:	0022      	movs	r2, r4
 800f76e:	000b      	movs	r3, r1
 800f770:	6132      	str	r2, [r6, #16]
 800f772:	6173      	str	r3, [r6, #20]
 800f774:	e7c7      	b.n	800f706 <__kernel_rem_pio2+0x4f2>
 800f776:	9b00      	ldr	r3, [sp, #0]
 800f778:	aa4e      	add	r2, sp, #312	; 0x138
 800f77a:	00db      	lsls	r3, r3, #3
 800f77c:	18d3      	adds	r3, r2, r3
 800f77e:	0028      	movs	r0, r5
 800f780:	681a      	ldr	r2, [r3, #0]
 800f782:	685b      	ldr	r3, [r3, #4]
 800f784:	0021      	movs	r1, r4
 800f786:	f7f0 fe8f 	bl	80004a8 <__aeabi_dadd>
 800f78a:	0005      	movs	r5, r0
 800f78c:	000c      	movs	r4, r1
 800f78e:	9b00      	ldr	r3, [sp, #0]
 800f790:	3b01      	subs	r3, #1
 800f792:	9300      	str	r3, [sp, #0]
 800f794:	9b00      	ldr	r3, [sp, #0]
 800f796:	2b00      	cmp	r3, #0
 800f798:	daed      	bge.n	800f776 <__kernel_rem_pio2+0x562>
 800f79a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d002      	beq.n	800f7a6 <__kernel_rem_pio2+0x592>
 800f7a0:	2380      	movs	r3, #128	; 0x80
 800f7a2:	061b      	lsls	r3, r3, #24
 800f7a4:	18e4      	adds	r4, r4, r3
 800f7a6:	002a      	movs	r2, r5
 800f7a8:	0023      	movs	r3, r4
 800f7aa:	9907      	ldr	r1, [sp, #28]
 800f7ac:	600a      	str	r2, [r1, #0]
 800f7ae:	604b      	str	r3, [r1, #4]
 800f7b0:	e7a9      	b.n	800f706 <__kernel_rem_pio2+0x4f2>
 800f7b2:	9da4      	ldr	r5, [sp, #656]	; 0x290
 800f7b4:	002c      	movs	r4, r5
 800f7b6:	e7ed      	b.n	800f794 <__kernel_rem_pio2+0x580>
 800f7b8:	00e3      	lsls	r3, r4, #3
 800f7ba:	aa4e      	add	r2, sp, #312	; 0x138
 800f7bc:	18d3      	adds	r3, r2, r3
 800f7be:	0030      	movs	r0, r6
 800f7c0:	681a      	ldr	r2, [r3, #0]
 800f7c2:	685b      	ldr	r3, [r3, #4]
 800f7c4:	0029      	movs	r1, r5
 800f7c6:	f7f0 fe6f 	bl	80004a8 <__aeabi_dadd>
 800f7ca:	0006      	movs	r6, r0
 800f7cc:	000d      	movs	r5, r1
 800f7ce:	3c01      	subs	r4, #1
 800f7d0:	2c00      	cmp	r4, #0
 800f7d2:	daf1      	bge.n	800f7b8 <__kernel_rem_pio2+0x5a4>
 800f7d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7d6:	0029      	movs	r1, r5
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d002      	beq.n	800f7e2 <__kernel_rem_pio2+0x5ce>
 800f7dc:	2380      	movs	r3, #128	; 0x80
 800f7de:	061b      	lsls	r3, r3, #24
 800f7e0:	18e9      	adds	r1, r5, r3
 800f7e2:	0032      	movs	r2, r6
 800f7e4:	000b      	movs	r3, r1
 800f7e6:	9907      	ldr	r1, [sp, #28]
 800f7e8:	2401      	movs	r4, #1
 800f7ea:	600a      	str	r2, [r1, #0]
 800f7ec:	604b      	str	r3, [r1, #4]
 800f7ee:	984e      	ldr	r0, [sp, #312]	; 0x138
 800f7f0:	994f      	ldr	r1, [sp, #316]	; 0x13c
 800f7f2:	002b      	movs	r3, r5
 800f7f4:	f7f2 f834 	bl	8001860 <__aeabi_dsub>
 800f7f8:	0006      	movs	r6, r0
 800f7fa:	000d      	movs	r5, r1
 800f7fc:	9b00      	ldr	r3, [sp, #0]
 800f7fe:	42a3      	cmp	r3, r4
 800f800:	da0f      	bge.n	800f822 <__kernel_rem_pio2+0x60e>
 800f802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f804:	2b00      	cmp	r3, #0
 800f806:	d002      	beq.n	800f80e <__kernel_rem_pio2+0x5fa>
 800f808:	2380      	movs	r3, #128	; 0x80
 800f80a:	061b      	lsls	r3, r3, #24
 800f80c:	18ed      	adds	r5, r5, r3
 800f80e:	0032      	movs	r2, r6
 800f810:	002b      	movs	r3, r5
 800f812:	9907      	ldr	r1, [sp, #28]
 800f814:	608a      	str	r2, [r1, #8]
 800f816:	60cb      	str	r3, [r1, #12]
 800f818:	e775      	b.n	800f706 <__kernel_rem_pio2+0x4f2>
 800f81a:	2600      	movs	r6, #0
 800f81c:	9c00      	ldr	r4, [sp, #0]
 800f81e:	0035      	movs	r5, r6
 800f820:	e7d6      	b.n	800f7d0 <__kernel_rem_pio2+0x5bc>
 800f822:	00e3      	lsls	r3, r4, #3
 800f824:	aa4e      	add	r2, sp, #312	; 0x138
 800f826:	18d3      	adds	r3, r2, r3
 800f828:	0030      	movs	r0, r6
 800f82a:	681a      	ldr	r2, [r3, #0]
 800f82c:	685b      	ldr	r3, [r3, #4]
 800f82e:	0029      	movs	r1, r5
 800f830:	f7f0 fe3a 	bl	80004a8 <__aeabi_dadd>
 800f834:	3401      	adds	r4, #1
 800f836:	0006      	movs	r6, r0
 800f838:	000d      	movs	r5, r1
 800f83a:	e7df      	b.n	800f7fc <__kernel_rem_pio2+0x5e8>
 800f83c:	9b02      	ldr	r3, [sp, #8]
 800f83e:	68ae      	ldr	r6, [r5, #8]
 800f840:	68ef      	ldr	r7, [r5, #12]
 800f842:	3b01      	subs	r3, #1
 800f844:	9302      	str	r3, [sp, #8]
 800f846:	682a      	ldr	r2, [r5, #0]
 800f848:	686b      	ldr	r3, [r5, #4]
 800f84a:	9204      	str	r2, [sp, #16]
 800f84c:	9305      	str	r3, [sp, #20]
 800f84e:	9804      	ldr	r0, [sp, #16]
 800f850:	9905      	ldr	r1, [sp, #20]
 800f852:	0032      	movs	r2, r6
 800f854:	003b      	movs	r3, r7
 800f856:	f7f0 fe27 	bl	80004a8 <__aeabi_dadd>
 800f85a:	0002      	movs	r2, r0
 800f85c:	000b      	movs	r3, r1
 800f85e:	9008      	str	r0, [sp, #32]
 800f860:	9109      	str	r1, [sp, #36]	; 0x24
 800f862:	9804      	ldr	r0, [sp, #16]
 800f864:	9905      	ldr	r1, [sp, #20]
 800f866:	f7f1 fffb 	bl	8001860 <__aeabi_dsub>
 800f86a:	0032      	movs	r2, r6
 800f86c:	003b      	movs	r3, r7
 800f86e:	f7f0 fe1b 	bl	80004a8 <__aeabi_dadd>
 800f872:	9a08      	ldr	r2, [sp, #32]
 800f874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f876:	60a8      	str	r0, [r5, #8]
 800f878:	60e9      	str	r1, [r5, #12]
 800f87a:	602a      	str	r2, [r5, #0]
 800f87c:	606b      	str	r3, [r5, #4]
 800f87e:	e754      	b.n	800f72a <__kernel_rem_pio2+0x516>
 800f880:	6826      	ldr	r6, [r4, #0]
 800f882:	6867      	ldr	r7, [r4, #4]
 800f884:	68a2      	ldr	r2, [r4, #8]
 800f886:	68e3      	ldr	r3, [r4, #12]
 800f888:	0030      	movs	r0, r6
 800f88a:	0039      	movs	r1, r7
 800f88c:	9202      	str	r2, [sp, #8]
 800f88e:	9303      	str	r3, [sp, #12]
 800f890:	f7f0 fe0a 	bl	80004a8 <__aeabi_dadd>
 800f894:	0002      	movs	r2, r0
 800f896:	000b      	movs	r3, r1
 800f898:	9004      	str	r0, [sp, #16]
 800f89a:	9105      	str	r1, [sp, #20]
 800f89c:	0030      	movs	r0, r6
 800f89e:	0039      	movs	r1, r7
 800f8a0:	f7f1 ffde 	bl	8001860 <__aeabi_dsub>
 800f8a4:	9a02      	ldr	r2, [sp, #8]
 800f8a6:	9b03      	ldr	r3, [sp, #12]
 800f8a8:	f7f0 fdfe 	bl	80004a8 <__aeabi_dadd>
 800f8ac:	9a04      	ldr	r2, [sp, #16]
 800f8ae:	9b05      	ldr	r3, [sp, #20]
 800f8b0:	60a0      	str	r0, [r4, #8]
 800f8b2:	60e1      	str	r1, [r4, #12]
 800f8b4:	6022      	str	r2, [r4, #0]
 800f8b6:	6063      	str	r3, [r4, #4]
 800f8b8:	3d01      	subs	r5, #1
 800f8ba:	e73c      	b.n	800f736 <__kernel_rem_pio2+0x522>
 800f8bc:	9b00      	ldr	r3, [sp, #0]
 800f8be:	aa4e      	add	r2, sp, #312	; 0x138
 800f8c0:	00db      	lsls	r3, r3, #3
 800f8c2:	18d3      	adds	r3, r2, r3
 800f8c4:	0020      	movs	r0, r4
 800f8c6:	681a      	ldr	r2, [r3, #0]
 800f8c8:	685b      	ldr	r3, [r3, #4]
 800f8ca:	f7f0 fded 	bl	80004a8 <__aeabi_dadd>
 800f8ce:	9b00      	ldr	r3, [sp, #0]
 800f8d0:	0004      	movs	r4, r0
 800f8d2:	3b01      	subs	r3, #1
 800f8d4:	9300      	str	r3, [sp, #0]
 800f8d6:	e734      	b.n	800f742 <__kernel_rem_pio2+0x52e>
 800f8d8:	9b07      	ldr	r3, [sp, #28]
 800f8da:	9a07      	ldr	r2, [sp, #28]
 800f8dc:	601f      	str	r7, [r3, #0]
 800f8de:	2380      	movs	r3, #128	; 0x80
 800f8e0:	061b      	lsls	r3, r3, #24
 800f8e2:	18f6      	adds	r6, r6, r3
 800f8e4:	18c0      	adds	r0, r0, r3
 800f8e6:	18c9      	adds	r1, r1, r3
 800f8e8:	6056      	str	r6, [r2, #4]
 800f8ea:	6095      	str	r5, [r2, #8]
 800f8ec:	60d0      	str	r0, [r2, #12]
 800f8ee:	6114      	str	r4, [r2, #16]
 800f8f0:	6151      	str	r1, [r2, #20]
 800f8f2:	e708      	b.n	800f706 <__kernel_rem_pio2+0x4f2>
 800f8f4:	41700000 	.word	0x41700000
 800f8f8:	3e700000 	.word	0x3e700000
 800f8fc:	0801b968 	.word	0x0801b968

0800f900 <__kernel_sin>:
 800f900:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f902:	b089      	sub	sp, #36	; 0x24
 800f904:	9202      	str	r2, [sp, #8]
 800f906:	9303      	str	r3, [sp, #12]
 800f908:	22f9      	movs	r2, #249	; 0xf9
 800f90a:	004b      	lsls	r3, r1, #1
 800f90c:	0007      	movs	r7, r0
 800f90e:	000e      	movs	r6, r1
 800f910:	085b      	lsrs	r3, r3, #1
 800f912:	0592      	lsls	r2, r2, #22
 800f914:	4293      	cmp	r3, r2
 800f916:	da03      	bge.n	800f920 <__kernel_sin+0x20>
 800f918:	f7f2 fb34 	bl	8001f84 <__aeabi_d2iz>
 800f91c:	2800      	cmp	r0, #0
 800f91e:	d04c      	beq.n	800f9ba <__kernel_sin+0xba>
 800f920:	003a      	movs	r2, r7
 800f922:	0033      	movs	r3, r6
 800f924:	0038      	movs	r0, r7
 800f926:	0031      	movs	r1, r6
 800f928:	f7f1 fd2e 	bl	8001388 <__aeabi_dmul>
 800f92c:	0004      	movs	r4, r0
 800f92e:	000d      	movs	r5, r1
 800f930:	0002      	movs	r2, r0
 800f932:	000b      	movs	r3, r1
 800f934:	0038      	movs	r0, r7
 800f936:	0031      	movs	r1, r6
 800f938:	f7f1 fd26 	bl	8001388 <__aeabi_dmul>
 800f93c:	4a39      	ldr	r2, [pc, #228]	; (800fa24 <__kernel_sin+0x124>)
 800f93e:	9000      	str	r0, [sp, #0]
 800f940:	9101      	str	r1, [sp, #4]
 800f942:	4b39      	ldr	r3, [pc, #228]	; (800fa28 <__kernel_sin+0x128>)
 800f944:	0020      	movs	r0, r4
 800f946:	0029      	movs	r1, r5
 800f948:	f7f1 fd1e 	bl	8001388 <__aeabi_dmul>
 800f94c:	4a37      	ldr	r2, [pc, #220]	; (800fa2c <__kernel_sin+0x12c>)
 800f94e:	4b38      	ldr	r3, [pc, #224]	; (800fa30 <__kernel_sin+0x130>)
 800f950:	f7f1 ff86 	bl	8001860 <__aeabi_dsub>
 800f954:	0022      	movs	r2, r4
 800f956:	002b      	movs	r3, r5
 800f958:	f7f1 fd16 	bl	8001388 <__aeabi_dmul>
 800f95c:	4a35      	ldr	r2, [pc, #212]	; (800fa34 <__kernel_sin+0x134>)
 800f95e:	4b36      	ldr	r3, [pc, #216]	; (800fa38 <__kernel_sin+0x138>)
 800f960:	f7f0 fda2 	bl	80004a8 <__aeabi_dadd>
 800f964:	0022      	movs	r2, r4
 800f966:	002b      	movs	r3, r5
 800f968:	f7f1 fd0e 	bl	8001388 <__aeabi_dmul>
 800f96c:	4a33      	ldr	r2, [pc, #204]	; (800fa3c <__kernel_sin+0x13c>)
 800f96e:	4b34      	ldr	r3, [pc, #208]	; (800fa40 <__kernel_sin+0x140>)
 800f970:	f7f1 ff76 	bl	8001860 <__aeabi_dsub>
 800f974:	0022      	movs	r2, r4
 800f976:	002b      	movs	r3, r5
 800f978:	f7f1 fd06 	bl	8001388 <__aeabi_dmul>
 800f97c:	4b31      	ldr	r3, [pc, #196]	; (800fa44 <__kernel_sin+0x144>)
 800f97e:	4a32      	ldr	r2, [pc, #200]	; (800fa48 <__kernel_sin+0x148>)
 800f980:	f7f0 fd92 	bl	80004a8 <__aeabi_dadd>
 800f984:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f986:	9004      	str	r0, [sp, #16]
 800f988:	9105      	str	r1, [sp, #20]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d119      	bne.n	800f9c2 <__kernel_sin+0xc2>
 800f98e:	0002      	movs	r2, r0
 800f990:	000b      	movs	r3, r1
 800f992:	0020      	movs	r0, r4
 800f994:	0029      	movs	r1, r5
 800f996:	f7f1 fcf7 	bl	8001388 <__aeabi_dmul>
 800f99a:	4a2c      	ldr	r2, [pc, #176]	; (800fa4c <__kernel_sin+0x14c>)
 800f99c:	4b2c      	ldr	r3, [pc, #176]	; (800fa50 <__kernel_sin+0x150>)
 800f99e:	f7f1 ff5f 	bl	8001860 <__aeabi_dsub>
 800f9a2:	9a00      	ldr	r2, [sp, #0]
 800f9a4:	9b01      	ldr	r3, [sp, #4]
 800f9a6:	f7f1 fcef 	bl	8001388 <__aeabi_dmul>
 800f9aa:	0002      	movs	r2, r0
 800f9ac:	000b      	movs	r3, r1
 800f9ae:	0038      	movs	r0, r7
 800f9b0:	0031      	movs	r1, r6
 800f9b2:	f7f0 fd79 	bl	80004a8 <__aeabi_dadd>
 800f9b6:	0007      	movs	r7, r0
 800f9b8:	000e      	movs	r6, r1
 800f9ba:	0038      	movs	r0, r7
 800f9bc:	0031      	movs	r1, r6
 800f9be:	b009      	add	sp, #36	; 0x24
 800f9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	9802      	ldr	r0, [sp, #8]
 800f9c6:	9903      	ldr	r1, [sp, #12]
 800f9c8:	4b22      	ldr	r3, [pc, #136]	; (800fa54 <__kernel_sin+0x154>)
 800f9ca:	f7f1 fcdd 	bl	8001388 <__aeabi_dmul>
 800f9ce:	9a04      	ldr	r2, [sp, #16]
 800f9d0:	9b05      	ldr	r3, [sp, #20]
 800f9d2:	9006      	str	r0, [sp, #24]
 800f9d4:	9107      	str	r1, [sp, #28]
 800f9d6:	9800      	ldr	r0, [sp, #0]
 800f9d8:	9901      	ldr	r1, [sp, #4]
 800f9da:	f7f1 fcd5 	bl	8001388 <__aeabi_dmul>
 800f9de:	0002      	movs	r2, r0
 800f9e0:	000b      	movs	r3, r1
 800f9e2:	9806      	ldr	r0, [sp, #24]
 800f9e4:	9907      	ldr	r1, [sp, #28]
 800f9e6:	f7f1 ff3b 	bl	8001860 <__aeabi_dsub>
 800f9ea:	0022      	movs	r2, r4
 800f9ec:	002b      	movs	r3, r5
 800f9ee:	f7f1 fccb 	bl	8001388 <__aeabi_dmul>
 800f9f2:	9a02      	ldr	r2, [sp, #8]
 800f9f4:	9b03      	ldr	r3, [sp, #12]
 800f9f6:	f7f1 ff33 	bl	8001860 <__aeabi_dsub>
 800f9fa:	4a14      	ldr	r2, [pc, #80]	; (800fa4c <__kernel_sin+0x14c>)
 800f9fc:	0004      	movs	r4, r0
 800f9fe:	000d      	movs	r5, r1
 800fa00:	9800      	ldr	r0, [sp, #0]
 800fa02:	9901      	ldr	r1, [sp, #4]
 800fa04:	4b12      	ldr	r3, [pc, #72]	; (800fa50 <__kernel_sin+0x150>)
 800fa06:	f7f1 fcbf 	bl	8001388 <__aeabi_dmul>
 800fa0a:	0002      	movs	r2, r0
 800fa0c:	000b      	movs	r3, r1
 800fa0e:	0020      	movs	r0, r4
 800fa10:	0029      	movs	r1, r5
 800fa12:	f7f0 fd49 	bl	80004a8 <__aeabi_dadd>
 800fa16:	0002      	movs	r2, r0
 800fa18:	000b      	movs	r3, r1
 800fa1a:	0038      	movs	r0, r7
 800fa1c:	0031      	movs	r1, r6
 800fa1e:	f7f1 ff1f 	bl	8001860 <__aeabi_dsub>
 800fa22:	e7c8      	b.n	800f9b6 <__kernel_sin+0xb6>
 800fa24:	5acfd57c 	.word	0x5acfd57c
 800fa28:	3de5d93a 	.word	0x3de5d93a
 800fa2c:	8a2b9ceb 	.word	0x8a2b9ceb
 800fa30:	3e5ae5e6 	.word	0x3e5ae5e6
 800fa34:	57b1fe7d 	.word	0x57b1fe7d
 800fa38:	3ec71de3 	.word	0x3ec71de3
 800fa3c:	19c161d5 	.word	0x19c161d5
 800fa40:	3f2a01a0 	.word	0x3f2a01a0
 800fa44:	3f811111 	.word	0x3f811111
 800fa48:	1110f8a6 	.word	0x1110f8a6
 800fa4c:	55555549 	.word	0x55555549
 800fa50:	3fc55555 	.word	0x3fc55555
 800fa54:	3fe00000 	.word	0x3fe00000

0800fa58 <fabs>:
 800fa58:	004b      	lsls	r3, r1, #1
 800fa5a:	0859      	lsrs	r1, r3, #1
 800fa5c:	4770      	bx	lr
	...

0800fa60 <floor>:
 800fa60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa62:	004b      	lsls	r3, r1, #1
 800fa64:	4a3d      	ldr	r2, [pc, #244]	; (800fb5c <floor+0xfc>)
 800fa66:	0d5b      	lsrs	r3, r3, #21
 800fa68:	189f      	adds	r7, r3, r2
 800fa6a:	4684      	mov	ip, r0
 800fa6c:	000e      	movs	r6, r1
 800fa6e:	000d      	movs	r5, r1
 800fa70:	0004      	movs	r4, r0
 800fa72:	9001      	str	r0, [sp, #4]
 800fa74:	2f13      	cmp	r7, #19
 800fa76:	dc34      	bgt.n	800fae2 <floor+0x82>
 800fa78:	2f00      	cmp	r7, #0
 800fa7a:	da16      	bge.n	800faaa <floor+0x4a>
 800fa7c:	4a38      	ldr	r2, [pc, #224]	; (800fb60 <floor+0x100>)
 800fa7e:	4b39      	ldr	r3, [pc, #228]	; (800fb64 <floor+0x104>)
 800fa80:	4660      	mov	r0, ip
 800fa82:	0031      	movs	r1, r6
 800fa84:	f7f0 fd10 	bl	80004a8 <__aeabi_dadd>
 800fa88:	2200      	movs	r2, #0
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	f7f0 fcda 	bl	8000444 <__aeabi_dcmpgt>
 800fa90:	2800      	cmp	r0, #0
 800fa92:	d007      	beq.n	800faa4 <floor+0x44>
 800fa94:	2e00      	cmp	r6, #0
 800fa96:	da5d      	bge.n	800fb54 <floor+0xf4>
 800fa98:	0073      	lsls	r3, r6, #1
 800fa9a:	085b      	lsrs	r3, r3, #1
 800fa9c:	431c      	orrs	r4, r3
 800fa9e:	d001      	beq.n	800faa4 <floor+0x44>
 800faa0:	2400      	movs	r4, #0
 800faa2:	4d31      	ldr	r5, [pc, #196]	; (800fb68 <floor+0x108>)
 800faa4:	46a4      	mov	ip, r4
 800faa6:	002e      	movs	r6, r5
 800faa8:	e029      	b.n	800fafe <floor+0x9e>
 800faaa:	4b30      	ldr	r3, [pc, #192]	; (800fb6c <floor+0x10c>)
 800faac:	413b      	asrs	r3, r7
 800faae:	9300      	str	r3, [sp, #0]
 800fab0:	400b      	ands	r3, r1
 800fab2:	4303      	orrs	r3, r0
 800fab4:	d023      	beq.n	800fafe <floor+0x9e>
 800fab6:	4a2a      	ldr	r2, [pc, #168]	; (800fb60 <floor+0x100>)
 800fab8:	4b2a      	ldr	r3, [pc, #168]	; (800fb64 <floor+0x104>)
 800faba:	4660      	mov	r0, ip
 800fabc:	0031      	movs	r1, r6
 800fabe:	f7f0 fcf3 	bl	80004a8 <__aeabi_dadd>
 800fac2:	2200      	movs	r2, #0
 800fac4:	2300      	movs	r3, #0
 800fac6:	f7f0 fcbd 	bl	8000444 <__aeabi_dcmpgt>
 800faca:	2800      	cmp	r0, #0
 800facc:	d0ea      	beq.n	800faa4 <floor+0x44>
 800face:	2e00      	cmp	r6, #0
 800fad0:	da03      	bge.n	800fada <floor+0x7a>
 800fad2:	2380      	movs	r3, #128	; 0x80
 800fad4:	035b      	lsls	r3, r3, #13
 800fad6:	413b      	asrs	r3, r7
 800fad8:	18f5      	adds	r5, r6, r3
 800fada:	9b00      	ldr	r3, [sp, #0]
 800fadc:	2400      	movs	r4, #0
 800fade:	439d      	bics	r5, r3
 800fae0:	e7e0      	b.n	800faa4 <floor+0x44>
 800fae2:	2f33      	cmp	r7, #51	; 0x33
 800fae4:	dd0f      	ble.n	800fb06 <floor+0xa6>
 800fae6:	2380      	movs	r3, #128	; 0x80
 800fae8:	00db      	lsls	r3, r3, #3
 800faea:	429f      	cmp	r7, r3
 800faec:	d107      	bne.n	800fafe <floor+0x9e>
 800faee:	0002      	movs	r2, r0
 800faf0:	000b      	movs	r3, r1
 800faf2:	4660      	mov	r0, ip
 800faf4:	0031      	movs	r1, r6
 800faf6:	f7f0 fcd7 	bl	80004a8 <__aeabi_dadd>
 800fafa:	4684      	mov	ip, r0
 800fafc:	000e      	movs	r6, r1
 800fafe:	4660      	mov	r0, ip
 800fb00:	0031      	movs	r1, r6
 800fb02:	b003      	add	sp, #12
 800fb04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb06:	4a1a      	ldr	r2, [pc, #104]	; (800fb70 <floor+0x110>)
 800fb08:	189b      	adds	r3, r3, r2
 800fb0a:	2201      	movs	r2, #1
 800fb0c:	4252      	negs	r2, r2
 800fb0e:	40da      	lsrs	r2, r3
 800fb10:	9200      	str	r2, [sp, #0]
 800fb12:	4210      	tst	r0, r2
 800fb14:	d0f3      	beq.n	800fafe <floor+0x9e>
 800fb16:	4a12      	ldr	r2, [pc, #72]	; (800fb60 <floor+0x100>)
 800fb18:	4b12      	ldr	r3, [pc, #72]	; (800fb64 <floor+0x104>)
 800fb1a:	4660      	mov	r0, ip
 800fb1c:	0031      	movs	r1, r6
 800fb1e:	f7f0 fcc3 	bl	80004a8 <__aeabi_dadd>
 800fb22:	2200      	movs	r2, #0
 800fb24:	2300      	movs	r3, #0
 800fb26:	f7f0 fc8d 	bl	8000444 <__aeabi_dcmpgt>
 800fb2a:	2800      	cmp	r0, #0
 800fb2c:	d0ba      	beq.n	800faa4 <floor+0x44>
 800fb2e:	2e00      	cmp	r6, #0
 800fb30:	da02      	bge.n	800fb38 <floor+0xd8>
 800fb32:	2f14      	cmp	r7, #20
 800fb34:	d103      	bne.n	800fb3e <floor+0xde>
 800fb36:	3501      	adds	r5, #1
 800fb38:	9b00      	ldr	r3, [sp, #0]
 800fb3a:	439c      	bics	r4, r3
 800fb3c:	e7b2      	b.n	800faa4 <floor+0x44>
 800fb3e:	2334      	movs	r3, #52	; 0x34
 800fb40:	1bdf      	subs	r7, r3, r7
 800fb42:	3b33      	subs	r3, #51	; 0x33
 800fb44:	40bb      	lsls	r3, r7
 800fb46:	18e4      	adds	r4, r4, r3
 800fb48:	9b01      	ldr	r3, [sp, #4]
 800fb4a:	429c      	cmp	r4, r3
 800fb4c:	419b      	sbcs	r3, r3
 800fb4e:	425b      	negs	r3, r3
 800fb50:	18f5      	adds	r5, r6, r3
 800fb52:	e7f1      	b.n	800fb38 <floor+0xd8>
 800fb54:	2400      	movs	r4, #0
 800fb56:	0025      	movs	r5, r4
 800fb58:	e7a4      	b.n	800faa4 <floor+0x44>
 800fb5a:	46c0      	nop			; (mov r8, r8)
 800fb5c:	fffffc01 	.word	0xfffffc01
 800fb60:	8800759c 	.word	0x8800759c
 800fb64:	7e37e43c 	.word	0x7e37e43c
 800fb68:	bff00000 	.word	0xbff00000
 800fb6c:	000fffff 	.word	0x000fffff
 800fb70:	fffffbed 	.word	0xfffffbed

0800fb74 <scalbn>:
 800fb74:	004b      	lsls	r3, r1, #1
 800fb76:	b570      	push	{r4, r5, r6, lr}
 800fb78:	0d5b      	lsrs	r3, r3, #21
 800fb7a:	0014      	movs	r4, r2
 800fb7c:	000a      	movs	r2, r1
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d10d      	bne.n	800fb9e <scalbn+0x2a>
 800fb82:	004b      	lsls	r3, r1, #1
 800fb84:	085b      	lsrs	r3, r3, #1
 800fb86:	4303      	orrs	r3, r0
 800fb88:	d010      	beq.n	800fbac <scalbn+0x38>
 800fb8a:	4b27      	ldr	r3, [pc, #156]	; (800fc28 <scalbn+0xb4>)
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	f7f1 fbfb 	bl	8001388 <__aeabi_dmul>
 800fb92:	4b26      	ldr	r3, [pc, #152]	; (800fc2c <scalbn+0xb8>)
 800fb94:	429c      	cmp	r4, r3
 800fb96:	da0a      	bge.n	800fbae <scalbn+0x3a>
 800fb98:	4a25      	ldr	r2, [pc, #148]	; (800fc30 <scalbn+0xbc>)
 800fb9a:	4b26      	ldr	r3, [pc, #152]	; (800fc34 <scalbn+0xc0>)
 800fb9c:	e019      	b.n	800fbd2 <scalbn+0x5e>
 800fb9e:	4d26      	ldr	r5, [pc, #152]	; (800fc38 <scalbn+0xc4>)
 800fba0:	42ab      	cmp	r3, r5
 800fba2:	d108      	bne.n	800fbb6 <scalbn+0x42>
 800fba4:	0002      	movs	r2, r0
 800fba6:	000b      	movs	r3, r1
 800fba8:	f7f0 fc7e 	bl	80004a8 <__aeabi_dadd>
 800fbac:	bd70      	pop	{r4, r5, r6, pc}
 800fbae:	000a      	movs	r2, r1
 800fbb0:	004b      	lsls	r3, r1, #1
 800fbb2:	0d5b      	lsrs	r3, r3, #21
 800fbb4:	3b36      	subs	r3, #54	; 0x36
 800fbb6:	4d21      	ldr	r5, [pc, #132]	; (800fc3c <scalbn+0xc8>)
 800fbb8:	18e3      	adds	r3, r4, r3
 800fbba:	42ab      	cmp	r3, r5
 800fbbc:	dd0c      	ble.n	800fbd8 <scalbn+0x64>
 800fbbe:	4c20      	ldr	r4, [pc, #128]	; (800fc40 <scalbn+0xcc>)
 800fbc0:	4d20      	ldr	r5, [pc, #128]	; (800fc44 <scalbn+0xd0>)
 800fbc2:	2900      	cmp	r1, #0
 800fbc4:	da01      	bge.n	800fbca <scalbn+0x56>
 800fbc6:	4c1e      	ldr	r4, [pc, #120]	; (800fc40 <scalbn+0xcc>)
 800fbc8:	4d1f      	ldr	r5, [pc, #124]	; (800fc48 <scalbn+0xd4>)
 800fbca:	0020      	movs	r0, r4
 800fbcc:	0029      	movs	r1, r5
 800fbce:	4a1c      	ldr	r2, [pc, #112]	; (800fc40 <scalbn+0xcc>)
 800fbd0:	4b1c      	ldr	r3, [pc, #112]	; (800fc44 <scalbn+0xd0>)
 800fbd2:	f7f1 fbd9 	bl	8001388 <__aeabi_dmul>
 800fbd6:	e7e9      	b.n	800fbac <scalbn+0x38>
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	dd05      	ble.n	800fbe8 <scalbn+0x74>
 800fbdc:	4c1b      	ldr	r4, [pc, #108]	; (800fc4c <scalbn+0xd8>)
 800fbde:	051b      	lsls	r3, r3, #20
 800fbe0:	4022      	ands	r2, r4
 800fbe2:	431a      	orrs	r2, r3
 800fbe4:	0011      	movs	r1, r2
 800fbe6:	e7e1      	b.n	800fbac <scalbn+0x38>
 800fbe8:	001d      	movs	r5, r3
 800fbea:	3535      	adds	r5, #53	; 0x35
 800fbec:	da13      	bge.n	800fc16 <scalbn+0xa2>
 800fbee:	4a18      	ldr	r2, [pc, #96]	; (800fc50 <scalbn+0xdc>)
 800fbf0:	0fcb      	lsrs	r3, r1, #31
 800fbf2:	4294      	cmp	r4, r2
 800fbf4:	dd08      	ble.n	800fc08 <scalbn+0x94>
 800fbf6:	4812      	ldr	r0, [pc, #72]	; (800fc40 <scalbn+0xcc>)
 800fbf8:	4912      	ldr	r1, [pc, #72]	; (800fc44 <scalbn+0xd0>)
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d001      	beq.n	800fc02 <scalbn+0x8e>
 800fbfe:	4810      	ldr	r0, [pc, #64]	; (800fc40 <scalbn+0xcc>)
 800fc00:	4911      	ldr	r1, [pc, #68]	; (800fc48 <scalbn+0xd4>)
 800fc02:	4a0f      	ldr	r2, [pc, #60]	; (800fc40 <scalbn+0xcc>)
 800fc04:	4b0f      	ldr	r3, [pc, #60]	; (800fc44 <scalbn+0xd0>)
 800fc06:	e7e4      	b.n	800fbd2 <scalbn+0x5e>
 800fc08:	4809      	ldr	r0, [pc, #36]	; (800fc30 <scalbn+0xbc>)
 800fc0a:	490a      	ldr	r1, [pc, #40]	; (800fc34 <scalbn+0xc0>)
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d0c3      	beq.n	800fb98 <scalbn+0x24>
 800fc10:	4807      	ldr	r0, [pc, #28]	; (800fc30 <scalbn+0xbc>)
 800fc12:	4910      	ldr	r1, [pc, #64]	; (800fc54 <scalbn+0xe0>)
 800fc14:	e7c0      	b.n	800fb98 <scalbn+0x24>
 800fc16:	4c0d      	ldr	r4, [pc, #52]	; (800fc4c <scalbn+0xd8>)
 800fc18:	3336      	adds	r3, #54	; 0x36
 800fc1a:	4022      	ands	r2, r4
 800fc1c:	051b      	lsls	r3, r3, #20
 800fc1e:	4313      	orrs	r3, r2
 800fc20:	0019      	movs	r1, r3
 800fc22:	2200      	movs	r2, #0
 800fc24:	4b0c      	ldr	r3, [pc, #48]	; (800fc58 <scalbn+0xe4>)
 800fc26:	e7d4      	b.n	800fbd2 <scalbn+0x5e>
 800fc28:	43500000 	.word	0x43500000
 800fc2c:	ffff3cb0 	.word	0xffff3cb0
 800fc30:	c2f8f359 	.word	0xc2f8f359
 800fc34:	01a56e1f 	.word	0x01a56e1f
 800fc38:	000007ff 	.word	0x000007ff
 800fc3c:	000007fe 	.word	0x000007fe
 800fc40:	8800759c 	.word	0x8800759c
 800fc44:	7e37e43c 	.word	0x7e37e43c
 800fc48:	fe37e43c 	.word	0xfe37e43c
 800fc4c:	800fffff 	.word	0x800fffff
 800fc50:	0000c350 	.word	0x0000c350
 800fc54:	81a56e1f 	.word	0x81a56e1f
 800fc58:	3c900000 	.word	0x3c900000

0800fc5c <_init>:
 800fc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc5e:	46c0      	nop			; (mov r8, r8)
 800fc60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc62:	bc08      	pop	{r3}
 800fc64:	469e      	mov	lr, r3
 800fc66:	4770      	bx	lr

0800fc68 <_fini>:
 800fc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc6a:	46c0      	nop			; (mov r8, r8)
 800fc6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc6e:	bc08      	pop	{r3}
 800fc70:	469e      	mov	lr, r3
 800fc72:	4770      	bx	lr
