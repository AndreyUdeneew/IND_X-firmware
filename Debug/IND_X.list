
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c778  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000096e8  0800c834  0800c834  0001c834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015f1c  08015f1c  00030070  2**0
                  CONTENTS
  4 .ARM          00000000  08015f1c  08015f1c  00030070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08015f1c  08015f1c  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015f1c  08015f1c  00025f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015f20  08015f20  00025f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08015f24  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012c8  20000070  08015f94  00030070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001338  08015f94  00031338  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001921a  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000355a  00000000  00000000  000492b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001908  00000000  00000000  0004c810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001790  00000000  00000000  0004e118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8a7  00000000  00000000  0004f8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c588  00000000  00000000  0006c14f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afa68  00000000  00000000  000886d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013813f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bc8  00000000  00000000  00138190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800c81c 	.word	0x0800c81c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	0800c81c 	.word	0x0800c81c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}

08000348 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <LL_USART_DisableFIFO+0x1c>)
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	dfffffff 	.word	0xdfffffff

08000368 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b086      	sub	sp, #24
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000372:	f3ef 8310 	mrs	r3, PRIMASK
 8000376:	60bb      	str	r3, [r7, #8]
  return(result);
 8000378:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800037a:	617b      	str	r3, [r7, #20]
 800037c:	2301      	movs	r3, #1
 800037e:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f383 8810 	msr	PRIMASK, r3
}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	00db      	lsls	r3, r3, #3
 800038e:	08da      	lsrs	r2, r3, #3
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	075b      	lsls	r3, r3, #29
 8000394:	431a      	orrs	r2, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	697b      	ldr	r3, [r7, #20]
 800039c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800039e:	693b      	ldr	r3, [r7, #16]
 80003a0:	f383 8810 	msr	PRIMASK, r3
}
 80003a4:	46c0      	nop			; (mov r8, r8)
}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	b006      	add	sp, #24
 80003ac:	bd80      	pop	{r7, pc}
	...

080003b0 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80003ba:	f3ef 8310 	mrs	r3, PRIMASK
 80003be:	60bb      	str	r3, [r7, #8]
  return(result);
 80003c0:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80003c2:	617b      	str	r3, [r7, #20]
 80003c4:	2301      	movs	r3, #1
 80003c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f383 8810 	msr	PRIMASK, r3
}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	689b      	ldr	r3, [r3, #8]
 80003d4:	4a08      	ldr	r2, [pc, #32]	; (80003f8 <LL_USART_SetRXFIFOThreshold+0x48>)
 80003d6:	401a      	ands	r2, r3
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	065b      	lsls	r3, r3, #25
 80003dc:	431a      	orrs	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	f383 8810 	msr	PRIMASK, r3
}
 80003ec:	46c0      	nop			; (mov r8, r8)
}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b006      	add	sp, #24
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	f1ffffff 	.word	0xf1ffffff

080003fc <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	4a07      	ldr	r2, [pc, #28]	; (8000428 <LL_USART_ConfigAsyncMode+0x2c>)
 800040a:	401a      	ands	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	689b      	ldr	r3, [r3, #8]
 8000414:	222a      	movs	r2, #42	; 0x2a
 8000416:	4393      	bics	r3, r2
 8000418:	001a      	movs	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	609a      	str	r2, [r3, #8]
}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b002      	add	sp, #8
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffb7ff 	.word	0xffffb7ff

0800042c <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	69da      	ldr	r2, [r3, #28]
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	039b      	lsls	r3, r3, #14
 800043c:	401a      	ands	r2, r3
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	039b      	lsls	r3, r3, #14
 8000442:	429a      	cmp	r2, r3
 8000444:	d101      	bne.n	800044a <LL_USART_IsActiveFlag_TEACK+0x1e>
 8000446:	2301      	movs	r3, #1
 8000448:	e000      	b.n	800044c <LL_USART_IsActiveFlag_TEACK+0x20>
 800044a:	2300      	movs	r3, #0
}
 800044c:	0018      	movs	r0, r3
 800044e:	46bd      	mov	sp, r7
 8000450:	b002      	add	sp, #8
 8000452:	bd80      	pop	{r7, pc}

08000454 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	69da      	ldr	r2, [r3, #28]
 8000460:	2380      	movs	r3, #128	; 0x80
 8000462:	03db      	lsls	r3, r3, #15
 8000464:	401a      	ands	r2, r3
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	03db      	lsls	r3, r3, #15
 800046a:	429a      	cmp	r2, r3
 800046c:	d101      	bne.n	8000472 <LL_USART_IsActiveFlag_REACK+0x1e>
 800046e:	2301      	movs	r3, #1
 8000470:	e000      	b.n	8000474 <LL_USART_IsActiveFlag_REACK+0x20>
 8000472:	2300      	movs	r3, #0
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	b002      	add	sp, #8
 800047a:	bd80      	pop	{r7, pc}

0800047c <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000484:	f3ef 8310 	mrs	r3, PRIMASK
 8000488:	60bb      	str	r3, [r7, #8]
  return(result);
 800048a:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800048c:	617b      	str	r3, [r7, #20]
 800048e:	2301      	movs	r3, #1
 8000490:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	f383 8810 	msr	PRIMASK, r3
}
 8000498:	46c0      	nop			; (mov r8, r8)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2220      	movs	r2, #32
 80004a0:	431a      	orrs	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	f383 8810 	msr	PRIMASK, r3
}
 80004b0:	46c0      	nop			; (mov r8, r8)
}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b006      	add	sp, #24
 80004b8:	bd80      	pop	{r7, pc}

080004ba <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b086      	sub	sp, #24
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80004c2:	f3ef 8310 	mrs	r3, PRIMASK
 80004c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80004c8:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80004ca:	617b      	str	r3, [r7, #20]
 80004cc:	2301      	movs	r3, #1
 80004ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	f383 8810 	msr	PRIMASK, r3
}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	2201      	movs	r2, #1
 80004de:	431a      	orrs	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004e8:	693b      	ldr	r3, [r7, #16]
 80004ea:	f383 8810 	msr	PRIMASK, r3
}
 80004ee:	46c0      	nop			; (mov r8, r8)
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b006      	add	sp, #24
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000504:	b29b      	uxth	r3, r3
 8000506:	05db      	lsls	r3, r3, #23
 8000508:	0ddb      	lsrs	r3, r3, #23
 800050a:	b29b      	uxth	r3, r3
}
 800050c:	0018      	movs	r0, r3
 800050e:	46bd      	mov	sp, r7
 8000510:	b002      	add	sp, #8
 8000512:	bd80      	pop	{r7, pc}

08000514 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 800051c:	4b04      	ldr	r3, [pc, #16]	; (8000530 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 800051e:	6819      	ldr	r1, [r3, #0]
 8000520:	4b03      	ldr	r3, [pc, #12]	; (8000530 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	430a      	orrs	r2, r1
 8000526:	601a      	str	r2, [r3, #0]
}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b002      	add	sp, #8
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40010000 	.word	0x40010000

08000534 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	619a      	str	r2, [r3, #24]
}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b002      	add	sp, #8
 800054a:	bd80      	pop	{r7, pc}

0800054c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	683a      	ldr	r2, [r7, #0]
 800055a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b002      	add	sp, #8
 8000562:	bd80      	pop	{r7, pc}

08000564 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 800056c:	4b07      	ldr	r3, [pc, #28]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 800056e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	430a      	orrs	r2, r1
 8000576:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 800057a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	4013      	ands	r3, r2
 8000580:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000582:	68fb      	ldr	r3, [r7, #12]
}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b004      	add	sp, #16
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40021000 	.word	0x40021000

08000590 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 800059a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	430a      	orrs	r2, r1
 80005a2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 80005a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4013      	ands	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ae:	68fb      	ldr	r3, [r7, #12]
}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b004      	add	sp, #16
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40021000 	.word	0x40021000

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b08d      	sub	sp, #52	; 0x34
 80005c0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 80005c2:	2324      	movs	r3, #36	; 0x24
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	2200      	movs	r2, #0
 80005c8:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 80005ca:	2322      	movs	r3, #34	; 0x22
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	2200      	movs	r2, #0
 80005d0:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 80005d2:	2320      	movs	r3, #32
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	2200      	movs	r2, #0
 80005d8:	801a      	strh	r2, [r3, #0]
	uint16_t beep1 = 0x0000;
 80005da:	231e      	movs	r3, #30
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	2200      	movs	r2, #0
 80005e0:	801a      	strh	r2, [r3, #0]
	uint16_t beep2 = 0xFFFF;
 80005e2:	231c      	movs	r3, #28
 80005e4:	18fb      	adds	r3, r7, r3
 80005e6:	2201      	movs	r2, #1
 80005e8:	4252      	negs	r2, r2
 80005ea:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f004 fdf8 	bl	80051e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f8de 	bl	80007b0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005f4:	4b67      	ldr	r3, [pc, #412]	; (8000794 <main+0x1d8>)
 80005f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005f8:	4b66      	ldr	r3, [pc, #408]	; (8000794 <main+0x1d8>)
 80005fa:	2101      	movs	r1, #1
 80005fc:	430a      	orrs	r2, r1
 80005fe:	635a      	str	r2, [r3, #52]	; 0x34
 8000600:	4b64      	ldr	r3, [pc, #400]	; (8000794 <main+0x1d8>)
 8000602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000604:	2201      	movs	r2, #1
 8000606:	4013      	ands	r3, r2
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800060c:	4b61      	ldr	r3, [pc, #388]	; (8000794 <main+0x1d8>)
 800060e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000610:	4b60      	ldr	r3, [pc, #384]	; (8000794 <main+0x1d8>)
 8000612:	2102      	movs	r1, #2
 8000614:	430a      	orrs	r2, r1
 8000616:	635a      	str	r2, [r3, #52]	; 0x34
 8000618:	4b5e      	ldr	r3, [pc, #376]	; (8000794 <main+0x1d8>)
 800061a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800061c:	2202      	movs	r2, #2
 800061e:	4013      	ands	r3, r2
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000624:	4b5b      	ldr	r3, [pc, #364]	; (8000794 <main+0x1d8>)
 8000626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000628:	4b5a      	ldr	r3, [pc, #360]	; (8000794 <main+0x1d8>)
 800062a:	2104      	movs	r1, #4
 800062c:	430a      	orrs	r2, r1
 800062e:	635a      	str	r2, [r3, #52]	; 0x34
 8000630:	4b58      	ldr	r3, [pc, #352]	; (8000794 <main+0x1d8>)
 8000632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000634:	2204      	movs	r2, #4
 8000636:	4013      	ands	r3, r2
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 fc08 	bl	8000e50 <MX_GPIO_Init>
  MX_DMA_Init();
 8000640:	f000 fbe8 	bl	8000e14 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000644:	f000 faec 	bl	8000c20 <MX_USART2_UART_Init>
  MX_COMP1_Init();
 8000648:	f000 f910 	bl	800086c <MX_COMP1_Init>
  MX_TIM1_Init();
 800064c:	f000 f9ee 	bl	8000a2c <MX_TIM1_Init>
  MX_USART3_Init();
 8000650:	f000 fb9c 	bl	8000d8c <MX_USART3_Init>
  MX_I2S1_Init();
 8000654:	f000 f97c 	bl	8000950 <MX_I2S1_Init>
  MX_I2C1_Init();
 8000658:	f000 f93a 	bl	80008d0 <MX_I2C1_Init>
  MX_SPI2_Init();
 800065c:	f000 f9a2 	bl	80009a4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 8000660:	4b4d      	ldr	r3, [pc, #308]	; (8000798 <main+0x1dc>)
 8000662:	0018      	movs	r0, r3
 8000664:	f005 f88a 	bl	800577c <HAL_COMP_Start>
	HAL_Delay(100);
 8000668:	2064      	movs	r0, #100	; 0x64
 800066a:	f004 fe3f 	bl	80052ec <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 800066e:	f001 fd67 	bl	8002140 <MEM_Reset>

	weoInit();
 8000672:	f000 fe49 	bl	8001308 <weoInit>
	HAL_Delay(1);
 8000676:	2001      	movs	r0, #1
 8000678:	f004 fe38 	bl	80052ec <HAL_Delay>
	weoClear();
 800067c:	f000 fee0 	bl	8001440 <weoClear>
	MEM_GetID();
 8000680:	f002 f998 	bl	80029b4 <MEM_GetID>
	soundSetup();
 8000684:	f001 f866 	bl	8001754 <soundSetup>
	LIS3DHsetup();
 8000688:	f004 f95a 	bl	8004940 <LIS3DHsetup>

	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 800068c:	4b43      	ldr	r3, [pc, #268]	; (800079c <main+0x1e0>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b42      	ldr	r3, [pc, #264]	; (800079c <main+0x1e0>)
 8000692:	4943      	ldr	r1, [pc, #268]	; (80007a0 <main+0x1e4>)
 8000694:	430a      	orrs	r2, r1
 8000696:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_USART_EnableIT_RXNE(USART2);
 8000698:	4b40      	ldr	r3, [pc, #256]	; (800079c <main+0x1e0>)
 800069a:	0018      	movs	r0, r3
 800069c:	f7ff feee 	bl	800047c <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80006a0:	4b3e      	ldr	r3, [pc, #248]	; (800079c <main+0x1e0>)
 80006a2:	0018      	movs	r0, r3
 80006a4:	f7ff ff09 	bl	80004ba <LL_USART_EnableIT_ERROR>

	USART2->ICR|=USART_ICR_ORECF;
 80006a8:	4b3c      	ldr	r3, [pc, #240]	; (800079c <main+0x1e0>)
 80006aa:	6a1a      	ldr	r2, [r3, #32]
 80006ac:	4b3b      	ldr	r3, [pc, #236]	; (800079c <main+0x1e0>)
 80006ae:	2108      	movs	r1, #8
 80006b0:	430a      	orrs	r2, r1
 80006b2:	621a      	str	r2, [r3, #32]
//    squeak_triple(signal);
//    soundLoad(3);
//    soundPlay(3);
//    squeak_long();

	uint8_t ASCII_X=0x02;
 80006b4:	231b      	movs	r3, #27
 80006b6:	18fb      	adds	r3, r7, r3
 80006b8:	2202      	movs	r2, #2
 80006ba:	701a      	strb	r2, [r3, #0]
	uint8_t imY=0x04;
 80006bc:	231a      	movs	r3, #26
 80006be:	18fb      	adds	r3, r7, r3
 80006c0:	2204      	movs	r2, #4
 80006c2:	701a      	strb	r2, [r3, #0]
	uint8_t ASCII_height=0x26;
 80006c4:	2319      	movs	r3, #25
 80006c6:	18fb      	adds	r3, r7, r3
 80006c8:	2226      	movs	r2, #38	; 0x26
 80006ca:	701a      	strb	r2, [r3, #0]
	uint8_t X_increment=0x10;
 80006cc:	2318      	movs	r3, #24
 80006ce:	18fb      	adds	r3, r7, r3
 80006d0:	2210      	movs	r2, #16
 80006d2:	701a      	strb	r2, [r3, #0]
	uint8_t decY=1;
 80006d4:	2127      	movs	r1, #39	; 0x27
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2201      	movs	r2, #1
 80006da:	701a      	strb	r2, [r3, #0]
	uint16_t k,j;
	uint8_t fontInfo=0xF1;
 80006dc:	2317      	movs	r3, #23
 80006de:	18fb      	adds	r3, r7, r3
 80006e0:	22f1      	movs	r2, #241	; 0xf1
 80006e2:	701a      	strb	r2, [r3, #0]
	uint8_t fontCur;
	uint8_t curStr=1;
 80006e4:	2316      	movs	r3, #22
 80006e6:	18fb      	adds	r3, r7, r3
 80006e8:	2201      	movs	r2, #1
 80006ea:	701a      	strb	r2, [r3, #0]
//	uint8_t curStr[4]={1,2,3,4};
	uint8_t strLen=4;
 80006ec:	2315      	movs	r3, #21
 80006ee:	18fb      	adds	r3, r7, r3
 80006f0:	2204      	movs	r2, #4
 80006f2:	701a      	strb	r2, [r3, #0]
//					USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//					USART_AS_SPI_sendCMD(0xFF);
//					GPIOA->ODR |= 1 << 7;	//set dc
//					GPIOA->ODR |= 1 << 6;	//set cs

	uint8_t localWidth=0x07;
 80006f4:	2314      	movs	r3, #20
 80006f6:	18fb      	adds	r3, r7, r3
 80006f8:	2207      	movs	r2, #7
 80006fa:	701a      	strb	r2, [r3, #0]
		uint8_t localHeight=0x0E;
 80006fc:	2313      	movs	r3, #19
 80006fe:	18fb      	adds	r3, r7, r3
 8000700:	220e      	movs	r2, #14
 8000702:	701a      	strb	r2, [r3, #0]
		uint8_t x = 0;
 8000704:	2312      	movs	r3, #18
 8000706:	18fb      	adds	r3, r7, r3
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
		uint8_t y = 0;
 800070c:	2011      	movs	r0, #17
 800070e:	183b      	adds	r3, r7, r0
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
				decY=0x01;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
				if(y % 2 !=0){
 800071a:	183b      	adds	r3, r7, r0
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2201      	movs	r2, #1
 8000720:	4013      	ands	r3, r2
 8000722:	b2db      	uxtb	r3, r3
 8000724:	2b00      	cmp	r3, #0
 8000726:	d002      	beq.n	800072e <main+0x172>
					decY=0x02;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2202      	movs	r2, #2
 800072c:	701a      	strb	r2, [r3, #0]
				}
	weoDrawRectangleFilled(x,y,(x+localWidth-1),y+(localHeight-decY),0xFF,aim);
 800072e:	2012      	movs	r0, #18
 8000730:	183a      	adds	r2, r7, r0
 8000732:	2314      	movs	r3, #20
 8000734:	18fb      	adds	r3, r7, r3
 8000736:	7812      	ldrb	r2, [r2, #0]
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	18d3      	adds	r3, r2, r3
 800073c:	b2db      	uxtb	r3, r3
 800073e:	3b01      	subs	r3, #1
 8000740:	b2dc      	uxtb	r4, r3
 8000742:	2313      	movs	r3, #19
 8000744:	18fa      	adds	r2, r7, r3
 8000746:	2327      	movs	r3, #39	; 0x27
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	7812      	ldrb	r2, [r2, #0]
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	1ad3      	subs	r3, r2, r3
 8000750:	b2da      	uxtb	r2, r3
 8000752:	2111      	movs	r1, #17
 8000754:	187b      	adds	r3, r7, r1
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	18d3      	adds	r3, r2, r3
 800075a:	b2da      	uxtb	r2, r3
 800075c:	187b      	adds	r3, r7, r1
 800075e:	7819      	ldrb	r1, [r3, #0]
 8000760:	183b      	adds	r3, r7, r0
 8000762:	7818      	ldrb	r0, [r3, #0]
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <main+0x1e8>)
 8000766:	9301      	str	r3, [sp, #4]
 8000768:	23ff      	movs	r3, #255	; 0xff
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	0013      	movs	r3, r2
 800076e:	0022      	movs	r2, r4
 8000770:	f000 feca 	bl	8001508 <weoDrawRectangleFilled>
//				if(y % 2 !=0){
//					decY=0x02;
//				}
//	weoDrawRectangleFilled(x,y,(x+localWidth-1),(y+localHeight-decY),0xFF,aim);
//    GPIOB->PUPDR &= ~0x3F000;
	GPIOC->ODR |= 1 << 6;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <main+0x1ec>)
 8000776:	695a      	ldr	r2, [r3, #20]
 8000778:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <main+0x1ec>)
 800077a:	2140      	movs	r1, #64	; 0x40
 800077c:	430a      	orrs	r2, r1
 800077e:	615a      	str	r2, [r3, #20]
	soundPlay(0);
 8000780:	2000      	movs	r0, #0
 8000782:	f002 f8e7 	bl	8002954 <soundPlay>
	while (1) {
//		weoShowSmallImage(0x02,0x70,0x00);
//		LIS3DHreadData();
		cmdExecute(cmd2Execute);
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <main+0x1f0>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	0018      	movs	r0, r3
 800078c:	f002 f974 	bl	8002a78 <cmdExecute>
 8000790:	e7f9      	b.n	8000786 <main+0x1ca>
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	40021000 	.word	0x40021000
 8000798:	2000008c 	.word	0x2000008c
 800079c:	40004400 	.word	0x40004400
 80007a0:	1000100d 	.word	0x1000100d
 80007a4:	20000030 	.word	0x20000030
 80007a8:	50000800 	.word	0x50000800
 80007ac:	20000312 	.word	0x20000312

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b093      	sub	sp, #76	; 0x4c
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	2410      	movs	r4, #16
 80007b8:	193b      	adds	r3, r7, r4
 80007ba:	0018      	movs	r0, r3
 80007bc:	2338      	movs	r3, #56	; 0x38
 80007be:	001a      	movs	r2, r3
 80007c0:	2100      	movs	r1, #0
 80007c2:	f00c f823 	bl	800c80c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c6:	003b      	movs	r3, r7
 80007c8:	0018      	movs	r0, r3
 80007ca:	2310      	movs	r3, #16
 80007cc:	001a      	movs	r2, r3
 80007ce:	2100      	movs	r1, #0
 80007d0:	f00c f81c 	bl	800c80c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	0018      	movs	r0, r3
 80007da:	f007 fa35 	bl	8007c48 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	2202      	movs	r2, #2
 80007e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	2280      	movs	r2, #128	; 0x80
 80007e8:	0052      	lsls	r2, r2, #1
 80007ea:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007ec:	0021      	movs	r1, r4
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2240      	movs	r2, #64	; 0x40
 80007f8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2202      	movs	r2, #2
 80007fe:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2202      	movs	r2, #2
 8000804:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2200      	movs	r2, #0
 800080a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2208      	movs	r2, #8
 8000810:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2280      	movs	r2, #128	; 0x80
 8000816:	0292      	lsls	r2, r2, #10
 8000818:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2280      	movs	r2, #128	; 0x80
 800081e:	0492      	lsls	r2, r2, #18
 8000820:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2280      	movs	r2, #128	; 0x80
 8000826:	0592      	lsls	r2, r2, #22
 8000828:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082a:	187b      	adds	r3, r7, r1
 800082c:	0018      	movs	r0, r3
 800082e:	f007 fa57 	bl	8007ce0 <HAL_RCC_OscConfig>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000836:	f004 f8b5 	bl	80049a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083a:	003b      	movs	r3, r7
 800083c:	2207      	movs	r2, #7
 800083e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000840:	003b      	movs	r3, r7
 8000842:	2202      	movs	r2, #2
 8000844:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000846:	003b      	movs	r3, r7
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800084c:	003b      	movs	r3, r7
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000852:	003b      	movs	r3, r7
 8000854:	2102      	movs	r1, #2
 8000856:	0018      	movs	r0, r3
 8000858:	f007 fd5c 	bl	8008314 <HAL_RCC_ClockConfig>
 800085c:	1e03      	subs	r3, r0, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000860:	f004 f8a0 	bl	80049a4 <Error_Handler>
  }
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b013      	add	sp, #76	; 0x4c
 800086a:	bd90      	pop	{r4, r7, pc}

0800086c <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_COMP1_Init+0x5c>)
 8000872:	4a16      	ldr	r2, [pc, #88]	; (80008cc <MX_COMP1_Init+0x60>)
 8000874:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_COMP1_Init+0x5c>)
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	0052      	lsls	r2, r2, #1
 800087c:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_COMP1_Init+0x5c>)
 8000880:	2230      	movs	r2, #48	; 0x30
 8000882:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000884:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_COMP1_Init+0x5c>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_COMP1_Init+0x5c>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000890:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <MX_COMP1_Init+0x5c>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_COMP1_Init+0x5c>)
 8000898:	2280      	movs	r2, #128	; 0x80
 800089a:	0392      	lsls	r2, r2, #14
 800089c:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800089e:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <MX_COMP1_Init+0x5c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_COMP1_Init+0x5c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 80008aa:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <MX_COMP1_Init+0x5c>)
 80008ac:	2212      	movs	r2, #18
 80008ae:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <MX_COMP1_Init+0x5c>)
 80008b2:	0018      	movs	r0, r3
 80008b4:	f004 fe00 	bl	80054b8 <HAL_COMP_Init>
 80008b8:	1e03      	subs	r3, r0, #0
 80008ba:	d001      	beq.n	80008c0 <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 80008bc:	f004 f872 	bl	80049a4 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	2000008c 	.word	0x2000008c
 80008cc:	40010200 	.word	0x40010200

080008d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_I2C1_Init+0x74>)
 80008d6:	4a1c      	ldr	r2, [pc, #112]	; (8000948 <MX_I2C1_Init+0x78>)
 80008d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_I2C1_Init+0x74>)
 80008dc:	4a1b      	ldr	r2, [pc, #108]	; (800094c <MX_I2C1_Init+0x7c>)
 80008de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_I2C1_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_I2C1_Init+0x74>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_I2C1_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_I2C1_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_I2C1_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_I2C1_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_I2C1_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_I2C1_Init+0x74>)
 800090c:	0018      	movs	r0, r3
 800090e:	f005 fc91 	bl	8006234 <HAL_I2C_Init>
 8000912:	1e03      	subs	r3, r0, #0
 8000914:	d001      	beq.n	800091a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000916:	f004 f845 	bl	80049a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <MX_I2C1_Init+0x74>)
 800091c:	2100      	movs	r1, #0
 800091e:	0018      	movs	r0, r3
 8000920:	f006 fe26 	bl	8007570 <HAL_I2CEx_ConfigAnalogFilter>
 8000924:	1e03      	subs	r3, r0, #0
 8000926:	d001      	beq.n	800092c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000928:	f004 f83c 	bl	80049a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <MX_I2C1_Init+0x74>)
 800092e:	2100      	movs	r1, #0
 8000930:	0018      	movs	r0, r3
 8000932:	f006 fe69 	bl	8007608 <HAL_I2CEx_ConfigDigitalFilter>
 8000936:	1e03      	subs	r3, r0, #0
 8000938:	d001      	beq.n	800093e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800093a:	f004 f833 	bl	80049a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	200000bc 	.word	0x200000bc
 8000948:	40005400 	.word	0x40005400
 800094c:	1094102c 	.word	0x1094102c

08000950 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_I2S1_Init+0x4c>)
 8000956:	4a12      	ldr	r2, [pc, #72]	; (80009a0 <MX_I2S1_Init+0x50>)
 8000958:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <MX_I2S1_Init+0x4c>)
 800095c:	2280      	movs	r2, #128	; 0x80
 800095e:	0092      	lsls	r2, r2, #2
 8000960:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_I2S1_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_I2S1_Init+0x4c>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_I2S1_Init+0x4c>)
 8000970:	2280      	movs	r2, #128	; 0x80
 8000972:	0092      	lsls	r2, r2, #2
 8000974:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_I2S1_Init+0x4c>)
 8000978:	22fa      	movs	r2, #250	; 0xfa
 800097a:	0192      	lsls	r2, r2, #6
 800097c:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800097e:	4b07      	ldr	r3, [pc, #28]	; (800099c <MX_I2S1_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <MX_I2S1_Init+0x4c>)
 8000986:	0018      	movs	r0, r3
 8000988:	f006 fe8a 	bl	80076a0 <HAL_I2S_Init>
 800098c:	1e03      	subs	r3, r0, #0
 800098e:	d001      	beq.n	8000994 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 8000990:	f004 f808 	bl	80049a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	20000108 	.word	0x20000108
 80009a0:	40013000 	.word	0x40013000

080009a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <MX_SPI2_Init+0x80>)
 80009aa:	2208      	movs	r2, #8
 80009ac:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009ae:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <MX_SPI2_Init+0x80>)
 80009b0:	4a1d      	ldr	r2, [pc, #116]	; (8000a28 <MX_SPI2_Init+0x84>)
 80009b2:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <MX_SPI2_Init+0x80>)
 80009b6:	2282      	movs	r2, #130	; 0x82
 80009b8:	0052      	lsls	r2, r2, #1
 80009ba:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009bc:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <MX_SPI2_Init+0x80>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MX_SPI2_Init+0x80>)
 80009c4:	22e0      	movs	r2, #224	; 0xe0
 80009c6:	00d2      	lsls	r2, r2, #3
 80009c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ca:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <MX_SPI2_Init+0x80>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_SPI2_Init+0x80>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009d6:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <MX_SPI2_Init+0x80>)
 80009d8:	2280      	movs	r2, #128	; 0x80
 80009da:	0092      	lsls	r2, r2, #2
 80009dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_SPI2_Init+0x80>)
 80009e0:	2210      	movs	r2, #16
 80009e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_SPI2_Init+0x80>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_SPI2_Init+0x80>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_SPI2_Init+0x80>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_SPI2_Init+0x80>)
 80009f8:	2207      	movs	r2, #7
 80009fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_SPI2_Init+0x80>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <MX_SPI2_Init+0x80>)
 8000a04:	2208      	movs	r2, #8
 8000a06:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_SPI2_Init+0x80>)
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f008 fb2c 	bl	8009068 <HAL_SPI_Init>
 8000a10:	1e03      	subs	r3, r0, #0
 8000a12:	d001      	beq.n	8000a18 <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 8000a14:	f003 ffc6 	bl	80049a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a18:	4b02      	ldr	r3, [pc, #8]	; (8000a24 <MX_SPI2_Init+0x80>)
 8000a1a:	2208      	movs	r2, #8
 8000a1c:	61da      	str	r2, [r3, #28]
  /* USER CODE END SPI2_Init 2 */

}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200001a0 	.word	0x200001a0
 8000a28:	40003800 	.word	0x40003800

08000a2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b09e      	sub	sp, #120	; 0x78
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a32:	2368      	movs	r3, #104	; 0x68
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	0018      	movs	r0, r3
 8000a38:	2310      	movs	r3, #16
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	f00b fee5 	bl	800c80c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a42:	235c      	movs	r3, #92	; 0x5c
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	0018      	movs	r0, r3
 8000a48:	230c      	movs	r3, #12
 8000a4a:	001a      	movs	r2, r3
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	f00b fedd 	bl	800c80c <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000a52:	2350      	movs	r3, #80	; 0x50
 8000a54:	18fb      	adds	r3, r7, r3
 8000a56:	0018      	movs	r0, r3
 8000a58:	230c      	movs	r3, #12
 8000a5a:	001a      	movs	r2, r3
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	f00b fed5 	bl	800c80c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a62:	2334      	movs	r3, #52	; 0x34
 8000a64:	18fb      	adds	r3, r7, r3
 8000a66:	0018      	movs	r0, r3
 8000a68:	231c      	movs	r3, #28
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	f00b fecd 	bl	800c80c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a72:	003b      	movs	r3, r7
 8000a74:	0018      	movs	r0, r3
 8000a76:	2334      	movs	r3, #52	; 0x34
 8000a78:	001a      	movs	r2, r3
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	f00b fec6 	bl	800c80c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a80:	4b64      	ldr	r3, [pc, #400]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000a82:	4a65      	ldr	r2, [pc, #404]	; (8000c18 <MX_TIM1_Init+0x1ec>)
 8000a84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a86:	4b63      	ldr	r3, [pc, #396]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8c:	4b61      	ldr	r3, [pc, #388]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 8000a92:	4b60      	ldr	r3, [pc, #384]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000a94:	4a61      	ldr	r2, [pc, #388]	; (8000c1c <MX_TIM1_Init+0x1f0>)
 8000a96:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a98:	4b5e      	ldr	r3, [pc, #376]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a9e:	4b5d      	ldr	r3, [pc, #372]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000aa4:	4b5b      	ldr	r3, [pc, #364]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000aa6:	2280      	movs	r2, #128	; 0x80
 8000aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000aaa:	4b5a      	ldr	r3, [pc, #360]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000aac:	0018      	movs	r0, r3
 8000aae:	f009 faf9 	bl	800a0a4 <HAL_TIM_Base_Init>
 8000ab2:	1e03      	subs	r3, r0, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000ab6:	f003 ff75 	bl	80049a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aba:	2168      	movs	r1, #104	; 0x68
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2280      	movs	r2, #128	; 0x80
 8000ac0:	0152      	lsls	r2, r2, #5
 8000ac2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ac4:	187a      	adds	r2, r7, r1
 8000ac6:	4b53      	ldr	r3, [pc, #332]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000ac8:	0011      	movs	r1, r2
 8000aca:	0018      	movs	r0, r3
 8000acc:	f009 fd8c 	bl	800a5e8 <HAL_TIM_ConfigClockSource>
 8000ad0:	1e03      	subs	r3, r0, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000ad4:	f003 ff66 	bl	80049a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ad8:	4b4e      	ldr	r3, [pc, #312]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000ada:	0018      	movs	r0, r3
 8000adc:	f009 fb3a 	bl	800a154 <HAL_TIM_PWM_Init>
 8000ae0:	1e03      	subs	r3, r0, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000ae4:	f003 ff5e 	bl	80049a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae8:	215c      	movs	r1, #92	; 0x5c
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2200      	movs	r2, #0
 8000af4:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000afc:	187a      	adds	r2, r7, r1
 8000afe:	4b45      	ldr	r3, [pc, #276]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000b00:	0011      	movs	r1, r2
 8000b02:	0018      	movs	r0, r3
 8000b04:	f00a fa4a 	bl	800af9c <HAL_TIMEx_MasterConfigSynchronization>
 8000b08:	1e03      	subs	r3, r0, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000b0c:	f003 ff4a 	bl	80049a4 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8000b10:	2150      	movs	r1, #80	; 0x50
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	2202      	movs	r2, #2
 8000b16:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000b24:	187a      	adds	r2, r7, r1
 8000b26:	4b3b      	ldr	r3, [pc, #236]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000b28:	2101      	movs	r1, #1
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f00a fb4a 	bl	800b1c4 <HAL_TIMEx_ConfigBreakInput>
 8000b30:	1e03      	subs	r3, r0, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000b34:	f003 ff36 	bl	80049a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b38:	2134      	movs	r1, #52	; 0x34
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	2260      	movs	r2, #96	; 0x60
 8000b3e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2296      	movs	r2, #150	; 0x96
 8000b44:	0052      	lsls	r2, r2, #1
 8000b46:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	2204      	movs	r2, #4
 8000b58:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b66:	1879      	adds	r1, r7, r1
 8000b68:	4b2a      	ldr	r3, [pc, #168]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f009 fc3b 	bl	800a3e8 <HAL_TIM_PWM_ConfigChannel>
 8000b72:	1e03      	subs	r3, r0, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000b76:	f003 ff15 	bl	80049a4 <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000b7a:	2134      	movs	r1, #52	; 0x34
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2232      	movs	r2, #50	; 0x32
 8000b80:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000b82:	1879      	adds	r1, r7, r1
 8000b84:	4b23      	ldr	r3, [pc, #140]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000b86:	2210      	movs	r2, #16
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f009 fc2d 	bl	800a3e8 <HAL_TIM_PWM_ConfigChannel>
 8000b8e:	1e03      	subs	r3, r0, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8000b92:	f003 ff07 	bl	80049a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000b96:	003b      	movs	r3, r7
 8000b98:	2280      	movs	r2, #128	; 0x80
 8000b9a:	0112      	lsls	r2, r2, #4
 8000b9c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000b9e:	003b      	movs	r3, r7
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	00d2      	lsls	r2, r2, #3
 8000ba4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ba6:	003b      	movs	r3, r7
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bac:	003b      	movs	r3, r7
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000bb2:	003b      	movs	r3, r7
 8000bb4:	2280      	movs	r2, #128	; 0x80
 8000bb6:	0152      	lsls	r2, r2, #5
 8000bb8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bba:	003b      	movs	r3, r7
 8000bbc:	2280      	movs	r2, #128	; 0x80
 8000bbe:	0192      	lsls	r2, r2, #6
 8000bc0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8000bc2:	003b      	movs	r3, r7
 8000bc4:	220a      	movs	r2, #10
 8000bc6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000bc8:	003b      	movs	r3, r7
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bce:	003b      	movs	r3, r7
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bd4:	003b      	movs	r3, r7
 8000bd6:	2280      	movs	r2, #128	; 0x80
 8000bd8:	0492      	lsls	r2, r2, #18
 8000bda:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bdc:	003b      	movs	r3, r7
 8000bde:	2200      	movs	r2, #0
 8000be0:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000be2:	003b      	movs	r3, r7
 8000be4:	2200      	movs	r2, #0
 8000be6:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000be8:	003b      	movs	r3, r7
 8000bea:	2280      	movs	r2, #128	; 0x80
 8000bec:	01d2      	lsls	r2, r2, #7
 8000bee:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bf0:	003a      	movs	r2, r7
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000bf4:	0011      	movs	r1, r2
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f00a fa3e 	bl	800b078 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bfc:	1e03      	subs	r3, r0, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 8000c00:	f003 fed0 	bl	80049a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c04:	4b03      	ldr	r3, [pc, #12]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000c06:	0018      	movs	r0, r3
 8000c08:	f004 f8fa 	bl	8004e00 <HAL_TIM_MspPostInit>

}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b01e      	add	sp, #120	; 0x78
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000204 	.word	0x20000204
 8000c18:	40012c00 	.word	0x40012c00
 8000c1c:	0000027f 	.word	0x0000027f

08000c20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b09d      	sub	sp, #116	; 0x74
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000c26:	2350      	movs	r3, #80	; 0x50
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	2320      	movs	r3, #32
 8000c2e:	001a      	movs	r2, r3
 8000c30:	2100      	movs	r1, #0
 8000c32:	f00b fdeb 	bl	800c80c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c36:	2338      	movs	r3, #56	; 0x38
 8000c38:	18fb      	adds	r3, r7, r3
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	2318      	movs	r3, #24
 8000c3e:	001a      	movs	r2, r3
 8000c40:	2100      	movs	r1, #0
 8000c42:	f00b fde3 	bl	800c80c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	0018      	movs	r0, r3
 8000c4a:	2334      	movs	r3, #52	; 0x34
 8000c4c:	001a      	movs	r2, r3
 8000c4e:	2100      	movs	r1, #0
 8000c50:	f00b fddc 	bl	800c80c <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	2202      	movs	r2, #2
 8000c58:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	0018      	movs	r0, r3
 8000c64:	f007 fd00 	bl	8008668 <HAL_RCCEx_PeriphCLKConfig>
 8000c68:	1e03      	subs	r3, r0, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8000c6c:	f003 fe9a 	bl	80049a4 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000c70:	2380      	movs	r3, #128	; 0x80
 8000c72:	029b      	lsls	r3, r3, #10
 8000c74:	0018      	movs	r0, r3
 8000c76:	f7ff fc75 	bl	8000564 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	f7ff fc88 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000c80:	2438      	movs	r4, #56	; 0x38
 8000c82:	193b      	adds	r3, r7, r4
 8000c84:	2204      	movs	r2, #4
 8000c86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c88:	193b      	adds	r3, r7, r4
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c8e:	193b      	adds	r3, r7, r4
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c94:	193b      	adds	r3, r7, r4
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000ca0:	193b      	adds	r3, r7, r4
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca6:	193a      	adds	r2, r7, r4
 8000ca8:	23a0      	movs	r3, #160	; 0xa0
 8000caa:	05db      	lsls	r3, r3, #23
 8000cac:	0011      	movs	r1, r2
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f00b fa2a 	bl	800c108 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000cb4:	0021      	movs	r1, r4
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	2208      	movs	r2, #8
 8000cba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cce:	187b      	adds	r3, r7, r1
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cda:	187a      	adds	r2, r7, r1
 8000cdc:	23a0      	movs	r3, #160	; 0xa0
 8000cde:	05db      	lsls	r3, r3, #23
 8000ce0:	0011      	movs	r1, r2
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f00b fa10 	bl	800c108 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000ce8:	2100      	movs	r1, #0
 8000cea:	201c      	movs	r0, #28
 8000cec:	f7ff fab0 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000cf0:	201c      	movs	r0, #28
 8000cf2:	f7ff fa93 	bl	800021c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000cf6:	2150      	movs	r1, #80	; 0x50
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	22e1      	movs	r2, #225	; 0xe1
 8000d02:	0212      	lsls	r2, r2, #8
 8000d04:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000d06:	187b      	adds	r3, r7, r1
 8000d08:	2280      	movs	r2, #128	; 0x80
 8000d0a:	0152      	lsls	r2, r2, #5
 8000d0c:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	2200      	movs	r2, #0
 8000d12:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	220c      	movs	r2, #12
 8000d1e:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	2200      	movs	r2, #0
 8000d24:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	2200      	movs	r2, #0
 8000d2a:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	4a16      	ldr	r2, [pc, #88]	; (8000d88 <MX_USART2_UART_Init+0x168>)
 8000d30:	0019      	movs	r1, r3
 8000d32:	0010      	movs	r0, r2
 8000d34:	f00b fcb8 	bl	800c6a8 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <MX_USART2_UART_Init+0x168>)
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f7ff fb13 	bl	8000368 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <MX_USART2_UART_Init+0x168>)
 8000d44:	2100      	movs	r1, #0
 8000d46:	0018      	movs	r0, r3
 8000d48:	f7ff fb32 	bl	80003b0 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <MX_USART2_UART_Init+0x168>)
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f7ff fafa 	bl	8000348 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <MX_USART2_UART_Init+0x168>)
 8000d56:	0018      	movs	r0, r3
 8000d58:	f7ff fb50 	bl	80003fc <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <MX_USART2_UART_Init+0x168>)
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f7ff fae4 	bl	800032c <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000d64:	46c0      	nop			; (mov r8, r8)
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <MX_USART2_UART_Init+0x168>)
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f7ff fb5f 	bl	800042c <LL_USART_IsActiveFlag_TEACK>
 8000d6e:	1e03      	subs	r3, r0, #0
 8000d70:	d0f9      	beq.n	8000d66 <MX_USART2_UART_Init+0x146>
 8000d72:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <MX_USART2_UART_Init+0x168>)
 8000d74:	0018      	movs	r0, r3
 8000d76:	f7ff fb6d 	bl	8000454 <LL_USART_IsActiveFlag_REACK>
 8000d7a:	1e03      	subs	r3, r0, #0
 8000d7c:	d0f3      	beq.n	8000d66 <MX_USART2_UART_Init+0x146>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	46c0      	nop			; (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	b01d      	add	sp, #116	; 0x74
 8000d86:	bd90      	pop	{r4, r7, pc}
 8000d88:	40004400 	.word	0x40004400

08000d8c <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <MX_USART3_Init+0x78>)
 8000d92:	685a      	ldr	r2, [r3, #4]
 8000d94:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <MX_USART3_Init+0x78>)
 8000d96:	2180      	movs	r1, #128	; 0x80
 8000d98:	0309      	lsls	r1, r1, #12
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000d9e:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <MX_USART3_Init+0x7c>)
 8000da0:	4a18      	ldr	r2, [pc, #96]	; (8000e04 <MX_USART3_Init+0x78>)
 8000da2:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 4000000;
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <MX_USART3_Init+0x7c>)
 8000da6:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <MX_USART3_Init+0x80>)
 8000da8:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <MX_USART3_Init+0x7c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <MX_USART3_Init+0x7c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <MX_USART3_Init+0x7c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <MX_USART3_Init+0x7c>)
 8000dbe:	2208      	movs	r2, #8
 8000dc0:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <MX_USART3_Init+0x7c>)
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	00d2      	lsls	r2, r2, #3
 8000dc8:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MX_USART3_Init+0x7c>)
 8000dcc:	2280      	movs	r2, #128	; 0x80
 8000dce:	0092      	lsls	r2, r2, #2
 8000dd0:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <MX_USART3_Init+0x7c>)
 8000dd4:	2280      	movs	r2, #128	; 0x80
 8000dd6:	0052      	lsls	r2, r2, #1
 8000dd8:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <MX_USART3_Init+0x7c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <MX_USART3_Init+0x7c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <MX_USART3_Init+0x7c>)
 8000de8:	0018      	movs	r0, r3
 8000dea:	f00a fa97 	bl	800b31c <HAL_USART_Init>
 8000dee:	1e03      	subs	r3, r0, #0
 8000df0:	d001      	beq.n	8000df6 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8000df2:	f003 fdd7 	bl	80049a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  husart3.Init.BaudRate = 8000000;
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <MX_USART3_Init+0x7c>)
 8000df8:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <MX_USART3_Init+0x84>)
 8000dfa:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 2 */

}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	40004800 	.word	0x40004800
 8000e08:	20000250 	.word	0x20000250
 8000e0c:	003d0900 	.word	0x003d0900
 8000e10:	007a1200 	.word	0x007a1200

08000e14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <MX_DMA_Init+0x38>)
 8000e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <MX_DMA_Init+0x38>)
 8000e20:	2101      	movs	r1, #1
 8000e22:	430a      	orrs	r2, r1
 8000e24:	639a      	str	r2, [r3, #56]	; 0x38
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <MX_DMA_Init+0x38>)
 8000e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	2009      	movs	r0, #9
 8000e38:	f004 fd9e 	bl	8005978 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e3c:	2009      	movs	r0, #9
 8000e3e:	f004 fdb0 	bl	80059a2 <HAL_NVIC_EnableIRQ>

}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b002      	add	sp, #8
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	40021000 	.word	0x40021000

08000e50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e56:	003b      	movs	r3, r7
 8000e58:	0018      	movs	r0, r3
 8000e5a:	2318      	movs	r3, #24
 8000e5c:	001a      	movs	r2, r3
 8000e5e:	2100      	movs	r1, #0
 8000e60:	f00b fcd4 	bl	800c80c <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000e64:	2002      	movs	r0, #2
 8000e66:	f7ff fb93 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000e6a:	2004      	movs	r0, #4
 8000e6c:	f7ff fb90 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000e70:	2001      	movs	r0, #1
 8000e72:	f7ff fb8d 	bl	8000590 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8000e76:	2380      	movs	r3, #128	; 0x80
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4a8f      	ldr	r2, [pc, #572]	; (80010b8 <MX_GPIO_Init+0x268>)
 8000e7c:	0019      	movs	r1, r3
 8000e7e:	0010      	movs	r0, r2
 8000e80:	f7ff fb58 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	01db      	lsls	r3, r3, #7
 8000e88:	4a8c      	ldr	r2, [pc, #560]	; (80010bc <MX_GPIO_Init+0x26c>)
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	0010      	movs	r0, r2
 8000e8e:	f7ff fb51 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8000e92:	2380      	movs	r3, #128	; 0x80
 8000e94:	021b      	lsls	r3, r3, #8
 8000e96:	4a89      	ldr	r2, [pc, #548]	; (80010bc <MX_GPIO_Init+0x26c>)
 8000e98:	0019      	movs	r1, r3
 8000e9a:	0010      	movs	r0, r2
 8000e9c:	f7ff fb4a 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8000ea0:	23a0      	movs	r3, #160	; 0xa0
 8000ea2:	05db      	lsls	r3, r3, #23
 8000ea4:	2140      	movs	r1, #64	; 0x40
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f7ff fb44 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8000eac:	23a0      	movs	r3, #160	; 0xa0
 8000eae:	05db      	lsls	r3, r3, #23
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f7ff fb3e 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8000eb8:	4b80      	ldr	r3, [pc, #512]	; (80010bc <MX_GPIO_Init+0x26c>)
 8000eba:	2140      	movs	r1, #64	; 0x40
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f7ff fb39 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_1_GPIO_Port, TEST_1_Pin);
 8000ec2:	2380      	movs	r3, #128	; 0x80
 8000ec4:	011a      	lsls	r2, r3, #4
 8000ec6:	23a0      	movs	r3, #160	; 0xa0
 8000ec8:	05db      	lsls	r3, r3, #23
 8000eca:	0011      	movs	r1, r2
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f7ff fb3d 	bl	800054c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_2_GPIO_Port, TEST_2_Pin);
 8000ed2:	2380      	movs	r3, #128	; 0x80
 8000ed4:	015a      	lsls	r2, r3, #5
 8000ed6:	23a0      	movs	r3, #160	; 0xa0
 8000ed8:	05db      	lsls	r3, r3, #23
 8000eda:	0011      	movs	r1, r2
 8000edc:	0018      	movs	r0, r3
 8000ede:	f7ff fb35 	bl	800054c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8000ee2:	003b      	movs	r3, r7
 8000ee4:	2280      	movs	r2, #128	; 0x80
 8000ee6:	0092      	lsls	r2, r2, #2
 8000ee8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000eea:	003b      	movs	r3, r7
 8000eec:	2201      	movs	r2, #1
 8000eee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	003b      	movs	r3, r7
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ef6:	003b      	movs	r3, r7
 8000ef8:	2200      	movs	r2, #0
 8000efa:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000efc:	003b      	movs	r3, r7
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8000f02:	003b      	movs	r3, r7
 8000f04:	4a6c      	ldr	r2, [pc, #432]	; (80010b8 <MX_GPIO_Init+0x268>)
 8000f06:	0019      	movs	r1, r3
 8000f08:	0010      	movs	r0, r2
 8000f0a:	f00b f8fd 	bl	800c108 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8000f0e:	003b      	movs	r3, r7
 8000f10:	2280      	movs	r2, #128	; 0x80
 8000f12:	01d2      	lsls	r2, r2, #7
 8000f14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f16:	003b      	movs	r3, r7
 8000f18:	2201      	movs	r2, #1
 8000f1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f1c:	003b      	movs	r3, r7
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f22:	003b      	movs	r3, r7
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f28:	003b      	movs	r3, r7
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	003b      	movs	r3, r7
 8000f30:	4a62      	ldr	r2, [pc, #392]	; (80010bc <MX_GPIO_Init+0x26c>)
 8000f32:	0019      	movs	r1, r3
 8000f34:	0010      	movs	r0, r2
 8000f36:	f00b f8e7 	bl	800c108 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8000f3a:	003b      	movs	r3, r7
 8000f3c:	2280      	movs	r2, #128	; 0x80
 8000f3e:	0212      	lsls	r2, r2, #8
 8000f40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f42:	003b      	movs	r3, r7
 8000f44:	2201      	movs	r2, #1
 8000f46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f48:	003b      	movs	r3, r7
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f4e:	003b      	movs	r3, r7
 8000f50:	2200      	movs	r2, #0
 8000f52:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f54:	003b      	movs	r3, r7
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000f5a:	003b      	movs	r3, r7
 8000f5c:	4a57      	ldr	r2, [pc, #348]	; (80010bc <MX_GPIO_Init+0x26c>)
 8000f5e:	0019      	movs	r1, r3
 8000f60:	0010      	movs	r0, r2
 8000f62:	f00b f8d1 	bl	800c108 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8000f66:	003b      	movs	r3, r7
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f6c:	003b      	movs	r3, r7
 8000f6e:	2200      	movs	r2, #0
 8000f70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f72:	003b      	movs	r3, r7
 8000f74:	2201      	movs	r2, #1
 8000f76:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8000f78:	003a      	movs	r2, r7
 8000f7a:	23a0      	movs	r3, #160	; 0xa0
 8000f7c:	05db      	lsls	r3, r3, #23
 8000f7e:	0011      	movs	r1, r2
 8000f80:	0018      	movs	r0, r3
 8000f82:	f00b f8c1 	bl	800c108 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8000f86:	003b      	movs	r3, r7
 8000f88:	2202      	movs	r2, #2
 8000f8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f8c:	003b      	movs	r3, r7
 8000f8e:	2200      	movs	r2, #0
 8000f90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f92:	003b      	movs	r3, r7
 8000f94:	2201      	movs	r2, #1
 8000f96:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8000f98:	003a      	movs	r2, r7
 8000f9a:	23a0      	movs	r3, #160	; 0xa0
 8000f9c:	05db      	lsls	r3, r3, #23
 8000f9e:	0011      	movs	r1, r2
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f00b f8b1 	bl	800c108 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000fa6:	003b      	movs	r3, r7
 8000fa8:	2210      	movs	r2, #16
 8000faa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000fac:	003b      	movs	r3, r7
 8000fae:	2200      	movs	r2, #0
 8000fb0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000fb2:	003b      	movs	r3, r7
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	003a      	movs	r2, r7
 8000fba:	23a0      	movs	r3, #160	; 0xa0
 8000fbc:	05db      	lsls	r3, r3, #23
 8000fbe:	0011      	movs	r1, r2
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f00b f8a1 	bl	800c108 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000fc6:	003b      	movs	r3, r7
 8000fc8:	2240      	movs	r2, #64	; 0x40
 8000fca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fcc:	003b      	movs	r3, r7
 8000fce:	2201      	movs	r2, #1
 8000fd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	003b      	movs	r3, r7
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fd8:	003b      	movs	r3, r7
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fde:	003b      	movs	r3, r7
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	003a      	movs	r2, r7
 8000fe6:	23a0      	movs	r3, #160	; 0xa0
 8000fe8:	05db      	lsls	r3, r3, #23
 8000fea:	0011      	movs	r1, r2
 8000fec:	0018      	movs	r0, r3
 8000fee:	f00b f88b 	bl	800c108 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8000ff2:	003b      	movs	r3, r7
 8000ff4:	2280      	movs	r2, #128	; 0x80
 8000ff6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ff8:	003b      	movs	r3, r7
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffe:	003b      	movs	r3, r7
 8001000:	2203      	movs	r2, #3
 8001002:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001004:	003b      	movs	r3, r7
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800100a:	003b      	movs	r3, r7
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8001010:	003a      	movs	r2, r7
 8001012:	23a0      	movs	r3, #160	; 0xa0
 8001014:	05db      	lsls	r3, r3, #23
 8001016:	0011      	movs	r1, r2
 8001018:	0018      	movs	r0, r3
 800101a:	f00b f875 	bl	800c108 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 800101e:	003b      	movs	r3, r7
 8001020:	2240      	movs	r2, #64	; 0x40
 8001022:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001024:	003b      	movs	r3, r7
 8001026:	2201      	movs	r2, #1
 8001028:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800102a:	003b      	movs	r3, r7
 800102c:	2203      	movs	r2, #3
 800102e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001030:	003b      	movs	r3, r7
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001036:	003b      	movs	r3, r7
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 800103c:	003b      	movs	r3, r7
 800103e:	4a1f      	ldr	r2, [pc, #124]	; (80010bc <MX_GPIO_Init+0x26c>)
 8001040:	0019      	movs	r1, r3
 8001042:	0010      	movs	r0, r2
 8001044:	f00b f860 	bl	800c108 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_1_Pin;
 8001048:	003b      	movs	r3, r7
 800104a:	2280      	movs	r2, #128	; 0x80
 800104c:	0112      	lsls	r2, r2, #4
 800104e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001050:	003b      	movs	r3, r7
 8001052:	2201      	movs	r2, #1
 8001054:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001056:	003b      	movs	r3, r7
 8001058:	2203      	movs	r2, #3
 800105a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800105c:	003b      	movs	r3, r7
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001062:	003b      	movs	r3, r7
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_1_GPIO_Port, &GPIO_InitStruct);
 8001068:	003a      	movs	r2, r7
 800106a:	23a0      	movs	r3, #160	; 0xa0
 800106c:	05db      	lsls	r3, r3, #23
 800106e:	0011      	movs	r1, r2
 8001070:	0018      	movs	r0, r3
 8001072:	f00b f849 	bl	800c108 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_2_Pin;
 8001076:	003b      	movs	r3, r7
 8001078:	2280      	movs	r2, #128	; 0x80
 800107a:	0152      	lsls	r2, r2, #5
 800107c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800107e:	003b      	movs	r3, r7
 8001080:	2201      	movs	r2, #1
 8001082:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	003b      	movs	r3, r7
 8001086:	2203      	movs	r2, #3
 8001088:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800108a:	003b      	movs	r3, r7
 800108c:	2200      	movs	r2, #0
 800108e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001090:	003b      	movs	r3, r7
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_2_GPIO_Port, &GPIO_InitStruct);
 8001096:	003a      	movs	r2, r7
 8001098:	23a0      	movs	r3, #160	; 0xa0
 800109a:	05db      	lsls	r3, r3, #23
 800109c:	0011      	movs	r1, r2
 800109e:	0018      	movs	r0, r3
 80010a0:	f00b f832 	bl	800c108 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	031b      	lsls	r3, r3, #12
 80010a8:	0018      	movs	r0, r3
 80010aa:	f7ff fa33 	bl	8000514 <LL_SYSCFG_EnableFastModePlus>

}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b006      	add	sp, #24
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	50000400 	.word	0x50000400
 80010bc:	50000800 	.word	0x50000800

080010c0 <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <USART2_RX_Callback+0x58>)
 80010c6:	0018      	movs	r0, r3
 80010c8:	f7ff fa16 	bl	80004f8 <LL_USART_ReceiveData9>
 80010cc:	0003      	movs	r3, r0
 80010ce:	001a      	movs	r2, r3
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <USART2_RX_Callback+0x5c>)
 80010d2:	801a      	strh	r2, [r3, #0]
//	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
  ByteReceived=1;
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <USART2_RX_Callback+0x60>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	701a      	strb	r2, [r3, #0]
  if(dt1 & 0x100){
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <USART2_RX_Callback+0x5c>)
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	001a      	movs	r2, r3
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4013      	ands	r3, r2
 80010e6:	d00a      	beq.n	80010fe <USART2_RX_Callback+0x3e>
	  cmd[0]=dt1;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <USART2_RX_Callback+0x5c>)
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <USART2_RX_Callback+0x64>)
 80010f0:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <USART2_RX_Callback+0x68>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <USART2_RX_Callback+0x6c>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <USART2_RX_Callback+0x6c>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d104      	bne.n	8001110 <USART2_RX_Callback+0x50>
	  cmdReceive(dt1);
 8001106:	4b05      	ldr	r3, [pc, #20]	; (800111c <USART2_RX_Callback+0x5c>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	0018      	movs	r0, r3
 800110c:	f000 f860 	bl	80011d0 <cmdReceive>
  }
}
 8001110:	46c0      	nop			; (mov r8, r8)
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	40004400 	.word	0x40004400
 800111c:	2000030e 	.word	0x2000030e
 8001120:	2000030c 	.word	0x2000030c
 8001124:	200002dc 	.word	0x200002dc
 8001128:	20000310 	.word	0x20000310
 800112c:	2000030d 	.word	0x2000030d

08001130 <HAL_USART_TxCpltCallback>:
//return;
//	}
}
//==============================================================
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart3)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= ~(1 << 7);	//reset dc
 8001138:	23a0      	movs	r3, #160	; 0xa0
 800113a:	05db      	lsls	r3, r3, #23
 800113c:	695a      	ldr	r2, [r3, #20]
 800113e:	23a0      	movs	r3, #160	; 0xa0
 8001140:	05db      	lsls	r3, r3, #23
 8001142:	2180      	movs	r1, #128	; 0x80
 8001144:	438a      	bics	r2, r1
 8001146:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= 1 << 6;	//set cs
 8001148:	23a0      	movs	r3, #160	; 0xa0
 800114a:	05db      	lsls	r3, r3, #23
 800114c:	695a      	ldr	r2, [r3, #20]
 800114e:	23a0      	movs	r3, #160	; 0xa0
 8001150:	05db      	lsls	r3, r3, #23
 8001152:	2140      	movs	r1, #64	; 0x40
 8001154:	430a      	orrs	r2, r1
 8001156:	615a      	str	r2, [r3, #20]
	cmd2Execute=0;
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_USART_TxCpltCallback+0x44>)
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
//	while(BFEN==0){};
	GPIOC->ODR |= 1 << 6;	//set BF
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_USART_TxCpltCallback+0x48>)
 8001160:	695a      	ldr	r2, [r3, #20]
 8001162:	4b05      	ldr	r3, [pc, #20]	; (8001178 <HAL_USART_TxCpltCallback+0x48>)
 8001164:	2140      	movs	r1, #64	; 0x40
 8001166:	430a      	orrs	r2, r1
 8001168:	615a      	str	r2, [r3, #20]
}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	46bd      	mov	sp, r7
 800116e:	b002      	add	sp, #8
 8001170:	bd80      	pop	{r7, pc}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	20000312 	.word	0x20000312
 8001178:	50000800 	.word	0x50000800

0800117c <HAL_I2S_TxHalfCpltCallback>:
//	GPIOA->ODR |= 1 << 6;	//set cs		????????????????????????????????????????????????
	//	cmd2Execute=0;
//	GPIOC->ODR |= 1 << 6;	//set BF
}
//======================================================================================================================
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s1) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	curBuf += 1;
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <HAL_I2S_TxHalfCpltCallback+0x28>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_I2S_TxHalfCpltCallback+0x28>)
 800118c:	601a      	str	r2, [r3, #0]
//	soundReady = 0;
//	return;
//	if(curBuf < 512){
	soundLoad(soundNum, 0, 0);
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_I2S_TxHalfCpltCallback+0x2c>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	0018      	movs	r0, r3
 8001198:	f001 fa36 	bl	8002608 <soundLoad>
//}
}
 800119c:	46c0      	nop			; (mov r8, r8)
 800119e:	46bd      	mov	sp, r7
 80011a0:	b002      	add	sp, #8
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000324 	.word	0x20000324
 80011a8:	200002b2 	.word	0x200002b2

080011ac <HAL_I2S_TxCpltCallback>:
//======================================================================================================================
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s1) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

	soundLoad(soundNum, 1, 0);
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <HAL_I2S_TxCpltCallback+0x20>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2200      	movs	r2, #0
 80011ba:	2101      	movs	r1, #1
 80011bc:	0018      	movs	r0, r3
 80011be:	f001 fa23 	bl	8002608 <soundLoad>
}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b002      	add	sp, #8
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	200002b2 	.word	0x200002b2

080011d0 <cmdReceive>:
//=======================================================================================================================
	void cmdReceive (uint16_t dt1)
	{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	0002      	movs	r2, r0
 80011d8:	1dbb      	adds	r3, r7, #6
 80011da:	801a      	strh	r2, [r3, #0]
//	  uint8_t inputCS=0;
	  uint8_t i=0;
 80011dc:	230f      	movs	r3, #15
 80011de:	18fb      	adds	r3, r7, r3
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 80011e4:	46c0      	nop			; (mov r8, r8)
 80011e6:	4b39      	ldr	r3, [pc, #228]	; (80012cc <cmdReceive+0xfc>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0fb      	beq.n	80011e6 <cmdReceive+0x16>
	  ByteReceived=0;
 80011ee:	4b37      	ldr	r3, [pc, #220]	; (80012cc <cmdReceive+0xfc>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 80011f4:	4b36      	ldr	r3, [pc, #216]	; (80012d0 <cmdReceive+0x100>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	001a      	movs	r2, r3
 80011fa:	1dbb      	adds	r3, r7, #6
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	b2d9      	uxtb	r1, r3
 8001200:	4b34      	ldr	r3, [pc, #208]	; (80012d4 <cmdReceive+0x104>)
 8001202:	5499      	strb	r1, [r3, r2]
//	  if(dt1==0x110){
//		  BFEN=0;
//	  }
	  ind++;
 8001204:	4b32      	ldr	r3, [pc, #200]	; (80012d0 <cmdReceive+0x100>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	3301      	adds	r3, #1
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b30      	ldr	r3, [pc, #192]	; (80012d0 <cmdReceive+0x100>)
 800120e:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 8001210:	4b2f      	ldr	r3, [pc, #188]	; (80012d0 <cmdReceive+0x100>)
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d04f      	beq.n	80012b8 <cmdReceive+0xe8>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 8001218:	4b2d      	ldr	r3, [pc, #180]	; (80012d0 <cmdReceive+0x100>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	001a      	movs	r2, r3
 800121e:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <cmdReceive+0x104>)
 8001220:	785b      	ldrb	r3, [r3, #1]
 8001222:	3301      	adds	r3, #1
 8001224:	429a      	cmp	r2, r3
 8001226:	dd47      	ble.n	80012b8 <cmdReceive+0xe8>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 8001228:	230f      	movs	r3, #15
 800122a:	18fb      	adds	r3, r7, r3
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
 8001230:	e00f      	b.n	8001252 <cmdReceive+0x82>
				 inputCS+=cmd[i];
 8001232:	210f      	movs	r1, #15
 8001234:	187b      	adds	r3, r7, r1
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4a26      	ldr	r2, [pc, #152]	; (80012d4 <cmdReceive+0x104>)
 800123a:	5cd2      	ldrb	r2, [r2, r3]
 800123c:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <cmdReceive+0x108>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	18d3      	adds	r3, r2, r3
 8001242:	b2da      	uxtb	r2, r3
 8001244:	4b24      	ldr	r3, [pc, #144]	; (80012d8 <cmdReceive+0x108>)
 8001246:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 8001248:	187b      	adds	r3, r7, r1
 800124a:	781a      	ldrb	r2, [r3, #0]
 800124c:	187b      	adds	r3, r7, r1
 800124e:	3201      	adds	r2, #1
 8001250:	701a      	strb	r2, [r3, #0]
 8001252:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <cmdReceive+0x104>)
 8001254:	785b      	ldrb	r3, [r3, #1]
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	210f      	movs	r1, #15
 800125a:	187b      	adds	r3, r7, r1
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	dae7      	bge.n	8001232 <cmdReceive+0x62>
			 }
			 if(!(inputCS==0x00)&&(ind==cmd[1]+2)){
 8001262:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <cmdReceive+0x108>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d022      	beq.n	80012b0 <cmdReceive+0xe0>
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <cmdReceive+0x100>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	001a      	movs	r2, r3
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <cmdReceive+0x104>)
 8001272:	785b      	ldrb	r3, [r3, #1]
 8001274:	3302      	adds	r3, #2
 8001276:	429a      	cmp	r2, r3
 8001278:	d11a      	bne.n	80012b0 <cmdReceive+0xe0>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
//				 firstByteReceived=0;
				 firstByteReceived=0;
 800127a:	4b18      	ldr	r3, [pc, #96]	; (80012dc <cmdReceive+0x10c>)
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
				 				 for (i=0;i<cmd[1]+2;i++){
 8001280:	187b      	adds	r3, r7, r1
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
 8001286:	e00a      	b.n	800129e <cmdReceive+0xce>
				 					 cmd[i]=0;
 8001288:	200f      	movs	r0, #15
 800128a:	183b      	adds	r3, r7, r0
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	4a11      	ldr	r2, [pc, #68]	; (80012d4 <cmdReceive+0x104>)
 8001290:	2100      	movs	r1, #0
 8001292:	54d1      	strb	r1, [r2, r3]
				 				 for (i=0;i<cmd[1]+2;i++){
 8001294:	183b      	adds	r3, r7, r0
 8001296:	781a      	ldrb	r2, [r3, #0]
 8001298:	183b      	adds	r3, r7, r0
 800129a:	3201      	adds	r2, #1
 800129c:	701a      	strb	r2, [r3, #0]
 800129e:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <cmdReceive+0x104>)
 80012a0:	785b      	ldrb	r3, [r3, #1]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	230f      	movs	r3, #15
 80012a6:	18fb      	adds	r3, r7, r3
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	daec      	bge.n	8001288 <cmdReceive+0xb8>
			 if(!(inputCS==0x00)&&(ind==cmd[1]+2)){
 80012ae:	e003      	b.n	80012b8 <cmdReceive+0xe8>
				 				 }
			 }
			 else{
				 answer2CPU(cmd);
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <cmdReceive+0x104>)
 80012b2:	0018      	movs	r0, r3
 80012b4:	f000 fad8 	bl	8001868 <answer2CPU>
//				 GPIOC->ODR |= 1 << 6;	//set BF
//			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <cmdReceive+0x110>)
 80012ba:	6a1a      	ldr	r2, [r3, #32]
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <cmdReceive+0x110>)
 80012be:	2108      	movs	r1, #8
 80012c0:	430a      	orrs	r2, r1
 80012c2:	621a      	str	r2, [r3, #32]
	}
 80012c4:	46c0      	nop			; (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b004      	add	sp, #16
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	2000030c 	.word	0x2000030c
 80012d0:	20000310 	.word	0x20000310
 80012d4:	200002dc 	.word	0x200002dc
 80012d8:	20000314 	.word	0x20000314
 80012dc:	2000030d 	.word	0x2000030d
 80012e0:	40004400 	.word	0x40004400

080012e4 <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	0002      	movs	r2, r0
 80012ec:	1dfb      	adds	r3, r7, #7
 80012ee:	701a      	strb	r2, [r3, #0]
			HAL_USART_Transmit(&husart3, (uint8_t*)&byte, 1, 10);
 80012f0:	1df9      	adds	r1, r7, #7
 80012f2:	4804      	ldr	r0, [pc, #16]	; (8001304 <USART_AS_SPI_sendCMD+0x20>)
 80012f4:	230a      	movs	r3, #10
 80012f6:	2201      	movs	r2, #1
 80012f8:	f00a f860 	bl	800b3bc <HAL_USART_Transmit>
		}
 80012fc:	46c0      	nop			; (mov r8, r8)
 80012fe:	46bd      	mov	sp, r7
 8001300:	b002      	add	sp, #8
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000250 	.word	0x20000250

08001308 <weoInit>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 10);
	}
	void weoInit(void) {
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0

		USART3->CR1 &= ~(USART_CR1_UE);
 800130c:	4b4a      	ldr	r3, [pc, #296]	; (8001438 <weoInit+0x130>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b49      	ldr	r3, [pc, #292]	; (8001438 <weoInit+0x130>)
 8001312:	2101      	movs	r1, #1
 8001314:	438a      	bics	r2, r1
 8001316:	601a      	str	r2, [r3, #0]
		USART3->CR2 |= USART_CR2_MSBFIRST;
 8001318:	4b47      	ldr	r3, [pc, #284]	; (8001438 <weoInit+0x130>)
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	4b46      	ldr	r3, [pc, #280]	; (8001438 <weoInit+0x130>)
 800131e:	2180      	movs	r1, #128	; 0x80
 8001320:	0309      	lsls	r1, r1, #12
 8001322:	430a      	orrs	r2, r1
 8001324:	605a      	str	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_UE;
 8001326:	4b44      	ldr	r3, [pc, #272]	; (8001438 <weoInit+0x130>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	4b43      	ldr	r3, [pc, #268]	; (8001438 <weoInit+0x130>)
 800132c:	2101      	movs	r1, #1
 800132e:	430a      	orrs	r2, r1
 8001330:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 8001332:	2001      	movs	r0, #1
 8001334:	f003 ffda 	bl	80052ec <HAL_Delay>
		HAL_Delay(1);
 8001338:	2001      	movs	r0, #1
 800133a:	f003 ffd7 	bl	80052ec <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800133e:	4b3f      	ldr	r3, [pc, #252]	; (800143c <weoInit+0x134>)
 8001340:	2100      	movs	r1, #0
 8001342:	0018      	movs	r0, r3
 8001344:	f008 ff66 	bl	800a214 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 8001348:	2001      	movs	r0, #1
 800134a:	f003 ffcf 	bl	80052ec <HAL_Delay>

		GPIOA->ODR &= ~(1 << 6);	//reset cs
 800134e:	23a0      	movs	r3, #160	; 0xa0
 8001350:	05db      	lsls	r3, r3, #23
 8001352:	695a      	ldr	r2, [r3, #20]
 8001354:	23a0      	movs	r3, #160	; 0xa0
 8001356:	05db      	lsls	r3, r3, #23
 8001358:	2140      	movs	r1, #64	; 0x40
 800135a:	438a      	bics	r2, r1
 800135c:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 800135e:	23a0      	movs	r3, #160	; 0xa0
 8001360:	05db      	lsls	r3, r3, #23
 8001362:	695a      	ldr	r2, [r3, #20]
 8001364:	23a0      	movs	r3, #160	; 0xa0
 8001366:	05db      	lsls	r3, r3, #23
 8001368:	2180      	movs	r1, #128	; 0x80
 800136a:	438a      	bics	r2, r1
 800136c:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 800136e:	20af      	movs	r0, #175	; 0xaf
 8001370:	f7ff ffb8 	bl	80012e4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xB8);
 8001374:	20b8      	movs	r0, #184	; 0xb8
 8001376:	f7ff ffb5 	bl	80012e4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0);
 800137a:	2000      	movs	r0, #0
 800137c:	f7ff ffb2 	bl	80012e4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0);
 8001380:	2000      	movs	r0, #0
 8001382:	f7ff ffaf 	bl	80012e4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(1);
 8001386:	2001      	movs	r0, #1
 8001388:	f7ff ffac 	bl	80012e4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(2);
 800138c:	2002      	movs	r0, #2
 800138e:	f7ff ffa9 	bl	80012e4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(4);
 8001392:	2004      	movs	r0, #4
 8001394:	f7ff ffa6 	bl	80012e4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(7);
 8001398:	2007      	movs	r0, #7
 800139a:	f7ff ffa3 	bl	80012e4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(11);
 800139e:	200b      	movs	r0, #11
 80013a0:	f7ff ffa0 	bl	80012e4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(14);
 80013a4:	200e      	movs	r0, #14
 80013a6:	f7ff ff9d 	bl	80012e4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(18);
 80013aa:	2012      	movs	r0, #18
 80013ac:	f7ff ff9a 	bl	80012e4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(23);
 80013b0:	2017      	movs	r0, #23
 80013b2:	f7ff ff97 	bl	80012e4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(27);
 80013b6:	201b      	movs	r0, #27
 80013b8:	f7ff ff94 	bl	80012e4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(33);
 80013bc:	2021      	movs	r0, #33	; 0x21
 80013be:	f7ff ff91 	bl	80012e4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(40);
 80013c2:	2028      	movs	r0, #40	; 0x28
 80013c4:	f7ff ff8e 	bl	80012e4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(49);
 80013c8:	2031      	movs	r0, #49	; 0x31
 80013ca:	f7ff ff8b 	bl	80012e4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(63);
 80013ce:	203f      	movs	r0, #63	; 0x3f
 80013d0:	f7ff ff88 	bl	80012e4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 80013d4:	20a0      	movs	r0, #160	; 0xa0
 80013d6:	f7ff ff85 	bl	80012e4 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0x51);
		USART_AS_SPI_sendCMD(0b01010010);// 0b01010010 = 0x52 is a proper remap 4 my bmp_2_bin converter, but pictures must b turned right @ 90 degrees. 0b01000001 = 0x is good if turn display on 180 degrees.
 80013da:	2052      	movs	r0, #82	; 0x52
 80013dc:	f7ff ff82 	bl	80012e4 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x41); //	0x51 is a proper remap 4 lcd image converter // 0b01010010 is a proper remap 4 left-turned images
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 80013e0:	2081      	movs	r0, #129	; 0x81
 80013e2:	f7ff ff7f 	bl	80012e4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 80013e6:	20ff      	movs	r0, #255	; 0xff
 80013e8:	f7ff ff7c 	bl	80012e4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 80013ec:	20a1      	movs	r0, #161	; 0xa1
 80013ee:	f7ff ff79 	bl	80012e4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80013f2:	2000      	movs	r0, #0
 80013f4:	f7ff ff76 	bl	80012e4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 80013f8:	20a2      	movs	r0, #162	; 0xa2
 80013fa:	f7ff ff73 	bl	80012e4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80013fe:	2000      	movs	r0, #0
 8001400:	f7ff ff70 	bl	80012e4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 8001404:	20a8      	movs	r0, #168	; 0xa8
 8001406:	f7ff ff6d 	bl	80012e4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 800140a:	207f      	movs	r0, #127	; 0x7f
 800140c:	f7ff ff6a 	bl	80012e4 <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 8001410:	23a0      	movs	r3, #160	; 0xa0
 8001412:	05db      	lsls	r3, r3, #23
 8001414:	695a      	ldr	r2, [r3, #20]
 8001416:	23a0      	movs	r3, #160	; 0xa0
 8001418:	05db      	lsls	r3, r3, #23
 800141a:	2180      	movs	r1, #128	; 0x80
 800141c:	430a      	orrs	r2, r1
 800141e:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 8001420:	23a0      	movs	r3, #160	; 0xa0
 8001422:	05db      	lsls	r3, r3, #23
 8001424:	695a      	ldr	r2, [r3, #20]
 8001426:	23a0      	movs	r3, #160	; 0xa0
 8001428:	05db      	lsls	r3, r3, #23
 800142a:	2140      	movs	r1, #64	; 0x40
 800142c:	430a      	orrs	r2, r1
 800142e:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 8001430:	46c0      	nop			; (mov r8, r8)
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	40004800 	.word	0x40004800
 800143c:	20000204 	.word	0x20000204

08001440 <weoClear>:
	void weoClear(void) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
		uint16_t i;

					GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001446:	23a0      	movs	r3, #160	; 0xa0
 8001448:	05db      	lsls	r3, r3, #23
 800144a:	695a      	ldr	r2, [r3, #20]
 800144c:	23a0      	movs	r3, #160	; 0xa0
 800144e:	05db      	lsls	r3, r3, #23
 8001450:	2140      	movs	r1, #64	; 0x40
 8001452:	438a      	bics	r2, r1
 8001454:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001456:	23a0      	movs	r3, #160	; 0xa0
 8001458:	05db      	lsls	r3, r3, #23
 800145a:	695a      	ldr	r2, [r3, #20]
 800145c:	23a0      	movs	r3, #160	; 0xa0
 800145e:	05db      	lsls	r3, r3, #23
 8001460:	2180      	movs	r1, #128	; 0x80
 8001462:	438a      	bics	r2, r1
 8001464:	615a      	str	r2, [r3, #20]
						USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 8001466:	2075      	movs	r0, #117	; 0x75
 8001468:	f7ff ff3c 	bl	80012e4 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 800146c:	2000      	movs	r0, #0
 800146e:	f7ff ff39 	bl	80012e4 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 8001472:	207f      	movs	r0, #127	; 0x7f
 8001474:	f7ff ff36 	bl	80012e4 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8001478:	2015      	movs	r0, #21
 800147a:	f7ff ff33 	bl	80012e4 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 800147e:	2000      	movs	r0, #0
 8001480:	f7ff ff30 	bl	80012e4 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 8001484:	207f      	movs	r0, #127	; 0x7f
 8001486:	f7ff ff2d 	bl	80012e4 <USART_AS_SPI_sendCMD>
					GPIOA->ODR &= ~(1 << 6);	//reset cs
 800148a:	23a0      	movs	r3, #160	; 0xa0
 800148c:	05db      	lsls	r3, r3, #23
 800148e:	695a      	ldr	r2, [r3, #20]
 8001490:	23a0      	movs	r3, #160	; 0xa0
 8001492:	05db      	lsls	r3, r3, #23
 8001494:	2140      	movs	r1, #64	; 0x40
 8001496:	438a      	bics	r2, r1
 8001498:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 7;	// set dc
 800149a:	23a0      	movs	r3, #160	; 0xa0
 800149c:	05db      	lsls	r3, r3, #23
 800149e:	695a      	ldr	r2, [r3, #20]
 80014a0:	23a0      	movs	r3, #160	; 0xa0
 80014a2:	05db      	lsls	r3, r3, #23
 80014a4:	2180      	movs	r1, #128	; 0x80
 80014a6:	430a      	orrs	r2, r1
 80014a8:	615a      	str	r2, [r3, #20]
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 80014aa:	1dbb      	adds	r3, r7, #6
 80014ac:	2200      	movs	r2, #0
 80014ae:	801a      	strh	r2, [r3, #0]
 80014b0:	e00d      	b.n	80014ce <weoClear+0x8e>
						while(!(USART3->ISR & USART_ISR_TXE)){};
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <weoClear+0xc0>)
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	2280      	movs	r2, #128	; 0x80
 80014ba:	4013      	ands	r3, r2
 80014bc:	d0fa      	beq.n	80014b4 <weoClear+0x74>
						USART3->TDR = (uint8_t) 0x00;
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <weoClear+0xc0>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	629a      	str	r2, [r3, #40]	; 0x28
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 80014c4:	1dbb      	adds	r3, r7, #6
 80014c6:	881a      	ldrh	r2, [r3, #0]
 80014c8:	1dbb      	adds	r3, r7, #6
 80014ca:	3201      	adds	r2, #1
 80014cc:	801a      	strh	r2, [r3, #0]
 80014ce:	1dbb      	adds	r3, r7, #6
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	4a0c      	ldr	r2, [pc, #48]	; (8001504 <weoClear+0xc4>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d9ec      	bls.n	80014b2 <weoClear+0x72>
					}
					GPIOA->ODR &= ~(1 << 7);	//reset dc
 80014d8:	23a0      	movs	r3, #160	; 0xa0
 80014da:	05db      	lsls	r3, r3, #23
 80014dc:	695a      	ldr	r2, [r3, #20]
 80014de:	23a0      	movs	r3, #160	; 0xa0
 80014e0:	05db      	lsls	r3, r3, #23
 80014e2:	2180      	movs	r1, #128	; 0x80
 80014e4:	438a      	bics	r2, r1
 80014e6:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 80014e8:	23a0      	movs	r3, #160	; 0xa0
 80014ea:	05db      	lsls	r3, r3, #23
 80014ec:	695a      	ldr	r2, [r3, #20]
 80014ee:	23a0      	movs	r3, #160	; 0xa0
 80014f0:	05db      	lsls	r3, r3, #23
 80014f2:	2140      	movs	r1, #64	; 0x40
 80014f4:	430a      	orrs	r2, r1
 80014f6:	615a      	str	r2, [r3, #20]
	}
 80014f8:	46c0      	nop			; (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b002      	add	sp, #8
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40004800 	.word	0x40004800
 8001504:	00002001 	.word	0x00002001

08001508 <weoDrawRectangleFilled>:
//========================================================================================================================
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char contrast,
				uint8_t MEM_Buffer[]) {
 8001508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	0005      	movs	r5, r0
 8001510:	000c      	movs	r4, r1
 8001512:	0010      	movs	r0, r2
 8001514:	0019      	movs	r1, r3
 8001516:	1dfb      	adds	r3, r7, #7
 8001518:	1c2a      	adds	r2, r5, #0
 800151a:	701a      	strb	r2, [r3, #0]
 800151c:	1dbb      	adds	r3, r7, #6
 800151e:	1c22      	adds	r2, r4, #0
 8001520:	701a      	strb	r2, [r3, #0]
 8001522:	1d7b      	adds	r3, r7, #5
 8001524:	1c02      	adds	r2, r0, #0
 8001526:	701a      	strb	r2, [r3, #0]
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	1c0a      	adds	r2, r1, #0
 800152c:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 800152e:	240e      	movs	r4, #14
 8001530:	193b      	adds	r3, r7, r4
 8001532:	2200      	movs	r2, #0
 8001534:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 8001536:	1dfb      	adds	r3, r7, #7
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	b25b      	sxtb	r3, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	da00      	bge.n	8001542 <weoDrawRectangleFilled+0x3a>
 8001540:	e0c1      	b.n	80016c6 <weoDrawRectangleFilled+0x1be>
 8001542:	1dbb      	adds	r3, r7, #6
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	b25b      	sxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	da00      	bge.n	800154e <weoDrawRectangleFilled+0x46>
 800154c:	e0bb      	b.n	80016c6 <weoDrawRectangleFilled+0x1be>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 800154e:	1d7b      	adds	r3, r7, #5
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	b25b      	sxtb	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	da00      	bge.n	800155a <weoDrawRectangleFilled+0x52>
 8001558:	e0b5      	b.n	80016c6 <weoDrawRectangleFilled+0x1be>
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b25b      	sxtb	r3, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	da00      	bge.n	8001566 <weoDrawRectangleFilled+0x5e>
 8001564:	e0af      	b.n	80016c6 <weoDrawRectangleFilled+0x1be>
				return;
			}

			start_x_New=start_x;
 8001566:	250d      	movs	r5, #13
 8001568:	197b      	adds	r3, r7, r5
 800156a:	1dfa      	adds	r2, r7, #7
 800156c:	7812      	ldrb	r2, [r2, #0]
 800156e:	701a      	strb	r2, [r3, #0]
			start_y_New=start_y;
 8001570:	260c      	movs	r6, #12
 8001572:	19bb      	adds	r3, r7, r6
 8001574:	1dba      	adds	r2, r7, #6
 8001576:	7812      	ldrb	r2, [r2, #0]
 8001578:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 800157a:	230b      	movs	r3, #11
 800157c:	18fb      	adds	r3, r7, r3
 800157e:	1d7a      	adds	r2, r7, #5
 8001580:	7812      	ldrb	r2, [r2, #0]
 8001582:	701a      	strb	r2, [r3, #0]
			end_y_New=end_y;
 8001584:	220a      	movs	r2, #10
 8001586:	18bb      	adds	r3, r7, r2
 8001588:	1d3a      	adds	r2, r7, #4
 800158a:	7812      	ldrb	r2, [r2, #0]
 800158c:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 800158e:	23a0      	movs	r3, #160	; 0xa0
 8001590:	05db      	lsls	r3, r3, #23
 8001592:	695a      	ldr	r2, [r3, #20]
 8001594:	23a0      	movs	r3, #160	; 0xa0
 8001596:	05db      	lsls	r3, r3, #23
 8001598:	2140      	movs	r1, #64	; 0x40
 800159a:	438a      	bics	r2, r1
 800159c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 800159e:	23a0      	movs	r3, #160	; 0xa0
 80015a0:	05db      	lsls	r3, r3, #23
 80015a2:	695a      	ldr	r2, [r3, #20]
 80015a4:	23a0      	movs	r3, #160	; 0xa0
 80015a6:	05db      	lsls	r3, r3, #23
 80015a8:	2180      	movs	r1, #128	; 0x80
 80015aa:	438a      	bics	r2, r1
 80015ac:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 80015ae:	2075      	movs	r0, #117	; 0x75
 80015b0:	f7ff fe98 	bl	80012e4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 80015b4:	197b      	adds	r3, r7, r5
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	0018      	movs	r0, r3
 80015ba:	f7ff fe93 	bl	80012e4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 80015be:	230b      	movs	r3, #11
 80015c0:	18fb      	adds	r3, r7, r3
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	0018      	movs	r0, r3
 80015c6:	f7ff fe8d 	bl	80012e4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 80015ca:	2015      	movs	r0, #21
 80015cc:	f7ff fe8a 	bl	80012e4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 80015d0:	19bb      	adds	r3, r7, r6
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	085b      	lsrs	r3, r3, #1
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	0018      	movs	r0, r3
 80015da:	f7ff fe83 	bl	80012e4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 80015de:	220a      	movs	r2, #10
 80015e0:	18bb      	adds	r3, r7, r2
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	085b      	lsrs	r3, r3, #1
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	0018      	movs	r0, r3
 80015ea:	f7ff fe7b 	bl	80012e4 <USART_AS_SPI_sendCMD>
//					USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//					USART_AS_SPI_sendCMD(contrast);
			GPIOA->ODR |= 1 << 7;	//set dc
 80015ee:	23a0      	movs	r3, #160	; 0xa0
 80015f0:	05db      	lsls	r3, r3, #23
 80015f2:	695a      	ldr	r2, [r3, #20]
 80015f4:	23a0      	movs	r3, #160	; 0xa0
 80015f6:	05db      	lsls	r3, r3, #23
 80015f8:	2180      	movs	r1, #128	; 0x80
 80015fa:	430a      	orrs	r2, r1
 80015fc:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 80015fe:	23a0      	movs	r3, #160	; 0xa0
 8001600:	05db      	lsls	r3, r3, #23
 8001602:	695a      	ldr	r2, [r3, #20]
 8001604:	23a0      	movs	r3, #160	; 0xa0
 8001606:	05db      	lsls	r3, r3, #23
 8001608:	2140      	movs	r1, #64	; 0x40
 800160a:	430a      	orrs	r2, r1
 800160c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 800160e:	23a0      	movs	r3, #160	; 0xa0
 8001610:	05db      	lsls	r3, r3, #23
 8001612:	695a      	ldr	r2, [r3, #20]
 8001614:	23a0      	movs	r3, #160	; 0xa0
 8001616:	05db      	lsls	r3, r3, #23
 8001618:	2140      	movs	r1, #64	; 0x40
 800161a:	438a      	bics	r2, r1
 800161c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 800161e:	23a0      	movs	r3, #160	; 0xa0
 8001620:	05db      	lsls	r3, r3, #23
 8001622:	695a      	ldr	r2, [r3, #20]
 8001624:	23a0      	movs	r3, #160	; 0xa0
 8001626:	05db      	lsls	r3, r3, #23
 8001628:	2180      	movs	r1, #128	; 0x80
 800162a:	430a      	orrs	r2, r1
 800162c:	615a      	str	r2, [r3, #20]

			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 800162e:	193b      	adds	r3, r7, r4
 8001630:	2200      	movs	r2, #0
 8001632:	801a      	strh	r2, [r3, #0]
 8001634:	e012      	b.n	800165c <weoDrawRectangleFilled+0x154>
//			for (i = 0; i < len;i++) {
//				if (i%((end_y-start_y))==0){
//					MEM_Buffer[i] &=0xF0 ;
//				}
				while(!(USART3->ISR & USART_ISR_TXE)){};
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <weoDrawRectangleFilled+0x1c8>)
 800163a:	69db      	ldr	r3, [r3, #28]
 800163c:	2280      	movs	r2, #128	; 0x80
 800163e:	4013      	ands	r3, r2
 8001640:	d0fa      	beq.n	8001638 <weoDrawRectangleFilled+0x130>
				USART3->TDR =MEM_Buffer[i];
 8001642:	210e      	movs	r1, #14
 8001644:	187b      	adds	r3, r7, r1
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800164a:	18d3      	adds	r3, r2, r3
 800164c:	781a      	ldrb	r2, [r3, #0]
 800164e:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <weoDrawRectangleFilled+0x1c8>)
 8001650:	629a      	str	r2, [r3, #40]	; 0x28
			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 8001652:	187b      	adds	r3, r7, r1
 8001654:	881a      	ldrh	r2, [r3, #0]
 8001656:	187b      	adds	r3, r7, r1
 8001658:	3201      	adds	r2, #1
 800165a:	801a      	strh	r2, [r3, #0]
 800165c:	230e      	movs	r3, #14
 800165e:	18fb      	adds	r3, r7, r3
 8001660:	881a      	ldrh	r2, [r3, #0]
 8001662:	230b      	movs	r3, #11
 8001664:	18fb      	adds	r3, r7, r3
 8001666:	7819      	ldrb	r1, [r3, #0]
 8001668:	230d      	movs	r3, #13
 800166a:	18fb      	adds	r3, r7, r3
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	1acb      	subs	r3, r1, r3
 8001670:	3301      	adds	r3, #1
 8001672:	210a      	movs	r1, #10
 8001674:	1879      	adds	r1, r7, r1
 8001676:	7809      	ldrb	r1, [r1, #0]
 8001678:	0849      	lsrs	r1, r1, #1
 800167a:	b2c9      	uxtb	r1, r1
 800167c:	0008      	movs	r0, r1
 800167e:	210c      	movs	r1, #12
 8001680:	1879      	adds	r1, r7, r1
 8001682:	7809      	ldrb	r1, [r1, #0]
 8001684:	0849      	lsrs	r1, r1, #1
 8001686:	b2c9      	uxtb	r1, r1
 8001688:	1a41      	subs	r1, r0, r1
 800168a:	3101      	adds	r1, #1
 800168c:	434b      	muls	r3, r1
 800168e:	429a      	cmp	r2, r3
 8001690:	dbd1      	blt.n	8001636 <weoDrawRectangleFilled+0x12e>
			}
			while(!(USART3->ISR & USART_ISR_TXE)){};
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <weoDrawRectangleFilled+0x1c8>)
 8001696:	69db      	ldr	r3, [r3, #28]
 8001698:	2280      	movs	r2, #128	; 0x80
 800169a:	4013      	ands	r3, r2
 800169c:	d0fa      	beq.n	8001694 <weoDrawRectangleFilled+0x18c>
			HAL_Delay(1);
 800169e:	2001      	movs	r0, #1
 80016a0:	f003 fe24 	bl	80052ec <HAL_Delay>
//			GPIOA->ODR &= ~(1 << 7);	// reset dc
//			USART_AS_SPI_sendCMD(0xBB);	// command for NOP
//			USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//			USART_AS_SPI_sendCMD(0xFF);

			GPIOA->ODR &= ~(1 << 7);	//reset dc
 80016a4:	23a0      	movs	r3, #160	; 0xa0
 80016a6:	05db      	lsls	r3, r3, #23
 80016a8:	695a      	ldr	r2, [r3, #20]
 80016aa:	23a0      	movs	r3, #160	; 0xa0
 80016ac:	05db      	lsls	r3, r3, #23
 80016ae:	2180      	movs	r1, #128	; 0x80
 80016b0:	438a      	bics	r2, r1
 80016b2:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 80016b4:	23a0      	movs	r3, #160	; 0xa0
 80016b6:	05db      	lsls	r3, r3, #23
 80016b8:	695a      	ldr	r2, [r3, #20]
 80016ba:	23a0      	movs	r3, #160	; 0xa0
 80016bc:	05db      	lsls	r3, r3, #23
 80016be:	2140      	movs	r1, #64	; 0x40
 80016c0:	430a      	orrs	r2, r1
 80016c2:	615a      	str	r2, [r3, #20]
 80016c4:	e000      	b.n	80016c8 <weoDrawRectangleFilled+0x1c0>
				return;
 80016c6:	46c0      	nop			; (mov r8, r8)
		}
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b005      	add	sp, #20
 80016cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	40004800 	.word	0x40004800

080016d4 <I2C_SOUND_ChangePage>:
//		LL_GPIO_ResetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
//		LL_GPIO_SetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
	}
	void I2C_SOUND_ChangePage(uint8_t pageNum) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af02      	add	r7, sp, #8
 80016da:	0002      	movs	r2, r0
 80016dc:	1dfb      	adds	r3, r7, #7
 80016de:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { 0x00, pageNum };
 80016e0:	210c      	movs	r1, #12
 80016e2:	187b      	adds	r3, r7, r1
 80016e4:	2200      	movs	r2, #0
 80016e6:	701a      	strb	r2, [r3, #0]
 80016e8:	187b      	adds	r3, r7, r1
 80016ea:	1dfa      	adds	r2, r7, #7
 80016ec:	7812      	ldrb	r2, [r2, #0]
 80016ee:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);
 80016f0:	187a      	adds	r2, r7, r1
 80016f2:	4806      	ldr	r0, [pc, #24]	; (800170c <I2C_SOUND_ChangePage+0x38>)
 80016f4:	23fa      	movs	r3, #250	; 0xfa
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2302      	movs	r3, #2
 80016fc:	2130      	movs	r1, #48	; 0x30
 80016fe:	f004 fe2f 	bl	8006360 <HAL_I2C_Master_Transmit>
	}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	46bd      	mov	sp, r7
 8001706:	b004      	add	sp, #16
 8001708:	bd80      	pop	{r7, pc}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	200000bc 	.word	0x200000bc

08001710 <WriteReg_I2C_SOUND>:
	void WriteReg_I2C_SOUND(uint8_t reg, uint8_t data) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af02      	add	r7, sp, #8
 8001716:	0002      	movs	r2, r0
 8001718:	1dfb      	adds	r3, r7, #7
 800171a:	701a      	strb	r2, [r3, #0]
 800171c:	1dbb      	adds	r3, r7, #6
 800171e:	1c0a      	adds	r2, r1, #0
 8001720:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 8001722:	210c      	movs	r1, #12
 8001724:	187b      	adds	r3, r7, r1
 8001726:	1dfa      	adds	r2, r7, #7
 8001728:	7812      	ldrb	r2, [r2, #0]
 800172a:	701a      	strb	r2, [r3, #0]
 800172c:	187b      	adds	r3, r7, r1
 800172e:	1dba      	adds	r2, r7, #6
 8001730:	7812      	ldrb	r2, [r2, #0]
 8001732:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);	//(uint8_t*)&
 8001734:	187a      	adds	r2, r7, r1
 8001736:	4806      	ldr	r0, [pc, #24]	; (8001750 <WriteReg_I2C_SOUND+0x40>)
 8001738:	23fa      	movs	r3, #250	; 0xfa
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	2302      	movs	r3, #2
 8001740:	2130      	movs	r1, #48	; 0x30
 8001742:	f004 fe0d 	bl	8006360 <HAL_I2C_Master_Transmit>
	}
 8001746:	46c0      	nop			; (mov r8, r8)
 8001748:	46bd      	mov	sp, r7
 800174a:	b004      	add	sp, #16
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	200000bc 	.word	0x200000bc

08001754 <soundSetup>:
	void soundSetup(void) {
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
		I2C_SOUND_ChangePage(0x00);
 8001758:	2000      	movs	r0, #0
 800175a:	f7ff ffbb 	bl	80016d4 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x01);	//Assert Software reset (P0, R1, D0=1)
 800175e:	2101      	movs	r1, #1
 8001760:	2001      	movs	r0, #1
 8001762:	f7ff ffd5 	bl	8001710 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 8001766:	2001      	movs	r0, #1
 8001768:	f7ff ffb4 	bl	80016d4 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x02, 0x00);	//LDO output programmed as 1.8V and Level shifters powered up. (P1, R2, D5-D4=00, D3=0)
 800176c:	2100      	movs	r1, #0
 800176e:	2002      	movs	r0, #2
 8001770:	f7ff ffce 	bl	8001710 <WriteReg_I2C_SOUND>
		HAL_Delay(15);
 8001774:	200f      	movs	r0, #15
 8001776:	f003 fdb9 	bl	80052ec <HAL_Delay>
		I2C_SOUND_ChangePage(0x00);
 800177a:	2000      	movs	r0, #0
 800177c:	f7ff ffaa 	bl	80016d4 <I2C_SOUND_ChangePage>
	WriteReg_I2C_SOUND(0x04,0x03);//PLL_clkin = MCLK, codec_clkin = PLL_CLK, MCLK should be 11.2896MHz
 8001780:	2103      	movs	r1, #3
 8001782:	2004      	movs	r0, #4
 8001784:	f7ff ffc4 	bl	8001710 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x05,0x91);//Power up PLL, set P=1, R=1
 8001788:	2191      	movs	r1, #145	; 0x91
 800178a:	2005      	movs	r0, #5
 800178c:	f7ff ffc0 	bl	8001710 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x06,0x04);//Set J = 4
 8001790:	2104      	movs	r1, #4
 8001792:	2006      	movs	r0, #6
 8001794:	f7ff ffbc 	bl	8001710 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x07,0x00);//SET D=0000
 8001798:	2100      	movs	r1, #0
 800179a:	2007      	movs	r0, #7
 800179c:	f7ff ffb8 	bl	8001710 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x08,0x00);//SET D=0000
 80017a0:	2100      	movs	r1, #0
 80017a2:	2008      	movs	r0, #8
 80017a4:	f7ff ffb4 	bl	8001710 <WriteReg_I2C_SOUND>
	HAL_Delay(15);
 80017a8:	200f      	movs	r0, #15
 80017aa:	f003 fd9f 	bl	80052ec <HAL_Delay>
	WriteReg_I2C_SOUND(0x0B,0x84);//DAC NDAC Powered up, set NDAC = 4
 80017ae:	2184      	movs	r1, #132	; 0x84
 80017b0:	200b      	movs	r0, #11
 80017b2:	f7ff ffad 	bl	8001710 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0C,0x82);//DAC MDAC Powered up, set MDAC = 2
 80017b6:	2182      	movs	r1, #130	; 0x82
 80017b8:	200c      	movs	r0, #12
 80017ba:	f7ff ffa9 	bl	8001710 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0D,0x00);//DAC OSR(9:0)-> DOSR=128
 80017be:	2100      	movs	r1, #0
 80017c0:	200d      	movs	r0, #13
 80017c2:	f7ff ffa5 	bl	8001710 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0E,0x80);//DAC OSR(9:0)
 80017c6:	2180      	movs	r1, #128	; 0x80
 80017c8:	200e      	movs	r0, #14
 80017ca:	f7ff ffa1 	bl	8001710 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x1B, 0x00);	//Codec Interface control Word length = 16bits, BCLK&WCLK inputs, I2S mode. (P0, R27, D7-D6=00, D5-D4=00, D3-D2=00)
 80017ce:	2100      	movs	r1, #0
 80017d0:	201b      	movs	r0, #27
 80017d2:	f7ff ff9d 	bl	8001710 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x1C,0x00);//Data slot offset
 80017d6:	2100      	movs	r1, #0
 80017d8:	201c      	movs	r0, #28
 80017da:	f7ff ff99 	bl	8001710 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x3c,0x02);//Dac Instruction programming PRB #2 for Mono routing. Type interpolation (x8) and 3 programmable	Biquads. (P0, R60, D4-D0=0010)
 80017de:	2102      	movs	r1, #2
 80017e0:	203c      	movs	r0, #60	; 0x3c
 80017e2:	f7ff ff95 	bl	8001710 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 80017e6:	2001      	movs	r0, #1
 80017e8:	f7ff ff74 	bl	80016d4 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x10);	//Master Reference Powered on (P1, R1, D4=1)
 80017ec:	2110      	movs	r1, #16
 80017ee:	2001      	movs	r0, #1
 80017f0:	f7ff ff8e 	bl	8001710 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x0A, 0x00);	//Output common mode for DAC set to 0.9V (default) (P1, R10)
 80017f4:	2100      	movs	r1, #0
 80017f6:	200a      	movs	r0, #10
 80017f8:	f7ff ff8a 	bl	8001710 <WriteReg_I2C_SOUND>
		////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x0C, 0x00);	// No analog routing to headphone//0x0c,0x15 by SB
 80017fc:	2100      	movs	r1, #0
 80017fe:	200c      	movs	r0, #12
 8001800:	f7ff ff86 	bl	8001710 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x16, 0x00);	// Headphone volume=0//0x16,0x75 by SB
 8001804:	2100      	movs	r1, #0
 8001806:	2016      	movs	r0, #22
 8001808:	f7ff ff82 	bl	8001710 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x18, 0x00);	//No need to enable Mixer M and Mixer P, AINL Voulme, 0dB Gain 0x18,0x75 by SB
 800180c:	2100      	movs	r1, #0
 800180e:	2018      	movs	r0, #24
 8001810:	f7ff ff7e 	bl	8001710 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x19, 0x00);	//No need to enable Mixer M and Mixer P, AINR Voulme, 0dB Gain 0x19,0x75 by SB
 8001814:	2100      	movs	r1, #0
 8001816:	2019      	movs	r0, #25
 8001818:	f7ff ff7a 	bl	8001710 <WriteReg_I2C_SOUND>
		//////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x09, 0x00);	//AINL,AINR are powered down
 800181c:	2100      	movs	r1, #0
 800181e:	2009      	movs	r0, #9
 8001820:	f7ff ff76 	bl	8001710 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 8001824:	2100      	movs	r1, #0
 8001826:	2010      	movs	r0, #16
 8001828:	f7ff ff72 	bl	8001710 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x00);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000)
 800182c:	2100      	movs	r1, #0
 800182e:	202e      	movs	r0, #46	; 0x2e
 8001830:	f7ff ff6e 	bl	8001710 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x30, 0x10);	//SPK driver Gain=6.0dB (P1, R48, D6-D4=001)
 8001834:	2110      	movs	r1, #16
 8001836:	2030      	movs	r0, #48	; 0x30
 8001838:	f7ff ff6a 	bl	8001710 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2D, 0x02);	//SPK powered up (P1, R45, D1=1)
 800183c:	2102      	movs	r1, #2
 800183e:	202d      	movs	r0, #45	; 0x2d
 8001840:	f7ff ff66 	bl	8001710 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 8001844:	2000      	movs	r0, #0
 8001846:	f7ff ff45 	bl	80016d4 <I2C_SOUND_ChangePage>
		//////////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
 800184a:	2190      	movs	r1, #144	; 0x90
 800184c:	203f      	movs	r0, #63	; 0x3f
 800184e:	f7ff ff5f 	bl	8001710 <WriteReg_I2C_SOUND>
		// 1<<7|1<<4|2 by SB
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000) cnDacValueOn by SB
 8001852:	2100      	movs	r1, #0
 8001854:	2041      	movs	r0, #65	; 0x41
 8001856:	f7ff ff5b 	bl	8001710 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1) 1<<4 by SB
 800185a:	2104      	movs	r1, #4
 800185c:	2040      	movs	r0, #64	; 0x40
 800185e:	f7ff ff57 	bl	8001710 <WriteReg_I2C_SOUND>
	}
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <answer2CPU>:
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 8001870:	230f      	movs	r3, #15
 8001872:	18fb      	adds	r3, r7, r3
 8001874:	22ff      	movs	r2, #255	; 0xff
 8001876:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 8001878:	230d      	movs	r3, #13
 800187a:	18fb      	adds	r3, r7, r3
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		isReceiverDisabled=1;
 8001880:	4bd9      	ldr	r3, [pc, #868]	; (8001be8 <answer2CPU+0x380>)
 8001882:	2201      	movs	r2, #1
 8001884:	701a      	strb	r2, [r3, #0]

		cmd2Execute=0;
 8001886:	4bd9      	ldr	r3, [pc, #868]	; (8001bec <answer2CPU+0x384>)
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
		cmd[0]&=~0x100;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	781a      	ldrb	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	701a      	strb	r2, [r3, #0]
		if ((cmd[0] == 0x11)||(cmd[0] == 0x12)||(cmd[0] == 0x13)||(cmd[0] == 0x14)||(cmd[0] == 0x15)) {GPIOC->ODR &= ~(1 << 6);}//reset BF
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b11      	cmp	r3, #17
 800189a:	d00f      	beq.n	80018bc <answer2CPU+0x54>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b12      	cmp	r3, #18
 80018a2:	d00b      	beq.n	80018bc <answer2CPU+0x54>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b13      	cmp	r3, #19
 80018aa:	d007      	beq.n	80018bc <answer2CPU+0x54>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b14      	cmp	r3, #20
 80018b2:	d003      	beq.n	80018bc <answer2CPU+0x54>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b15      	cmp	r3, #21
 80018ba:	d105      	bne.n	80018c8 <answer2CPU+0x60>
 80018bc:	4bcc      	ldr	r3, [pc, #816]	; (8001bf0 <answer2CPU+0x388>)
 80018be:	695a      	ldr	r2, [r3, #20]
 80018c0:	4bcb      	ldr	r3, [pc, #812]	; (8001bf0 <answer2CPU+0x388>)
 80018c2:	2140      	movs	r1, #64	; 0x40
 80018c4:	438a      	bics	r2, r1
 80018c6:	615a      	str	r2, [r3, #20]
		if (cmd[0] == 0x11) {
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b11      	cmp	r3, #17
 80018ce:	d105      	bne.n	80018dc <answer2CPU+0x74>
//			GPIOC->ODR &= ~(1 << 6);
			GPIOC->ODR &=~ GPIO_ODR_OD6;
 80018d0:	4bc7      	ldr	r3, [pc, #796]	; (8001bf0 <answer2CPU+0x388>)
 80018d2:	695a      	ldr	r2, [r3, #20]
 80018d4:	4bc6      	ldr	r3, [pc, #792]	; (8001bf0 <answer2CPU+0x388>)
 80018d6:	2140      	movs	r1, #64	; 0x40
 80018d8:	438a      	bics	r2, r1
 80018da:	615a      	str	r2, [r3, #20]
		}//reset BF
		ans[0] = cmd[0]|0x80;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2280      	movs	r2, #128	; 0x80
 80018e2:	4252      	negs	r2, r2
 80018e4:	4313      	orrs	r3, r2
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	4bc2      	ldr	r3, [pc, #776]	; (8001bf4 <answer2CPU+0x38c>)
 80018ec:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b0f      	cmp	r3, #15
 80018f4:	d800      	bhi.n	80018f8 <answer2CPU+0x90>
 80018f6:	e162      	b.n	8001bbe <answer2CPU+0x356>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b15      	cmp	r3, #21
 80018fe:	d900      	bls.n	8001902 <answer2CPU+0x9a>
 8001900:	e15d      	b.n	8001bbe <answer2CPU+0x356>
//		if (cmd[0] != 0x10) {
//			GPIOC->ODR &= ~(1 << 6);
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 8001902:	23a0      	movs	r3, #160	; 0xa0
 8001904:	05db      	lsls	r3, r3, #23
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	2210      	movs	r2, #16
 800190a:	4013      	ands	r3, r2
 800190c:	d106      	bne.n	800191c <answer2CPU+0xb4>
					keyboard &= 0b11111110;
 800190e:	220f      	movs	r2, #15
 8001910:	18bb      	adds	r3, r7, r2
 8001912:	18ba      	adds	r2, r7, r2
 8001914:	7812      	ldrb	r2, [r2, #0]
 8001916:	2101      	movs	r1, #1
 8001918:	438a      	bics	r2, r1
 800191a:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 800191c:	23a0      	movs	r3, #160	; 0xa0
 800191e:	05db      	lsls	r3, r3, #23
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	2202      	movs	r2, #2
 8001924:	4013      	ands	r3, r2
 8001926:	d106      	bne.n	8001936 <answer2CPU+0xce>
					keyboard &= 0b11111101;
 8001928:	220f      	movs	r2, #15
 800192a:	18bb      	adds	r3, r7, r2
 800192c:	18ba      	adds	r2, r7, r2
 800192e:	7812      	ldrb	r2, [r2, #0]
 8001930:	2102      	movs	r1, #2
 8001932:	438a      	bics	r2, r1
 8001934:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 8001936:	23a0      	movs	r3, #160	; 0xa0
 8001938:	05db      	lsls	r3, r3, #23
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	2201      	movs	r2, #1
 800193e:	4013      	ands	r3, r2
 8001940:	d106      	bne.n	8001950 <answer2CPU+0xe8>
					keyboard &= 0b11111011;
 8001942:	220f      	movs	r2, #15
 8001944:	18bb      	adds	r3, r7, r2
 8001946:	18ba      	adds	r2, r7, r2
 8001948:	7812      	ldrb	r2, [r2, #0]
 800194a:	2104      	movs	r1, #4
 800194c:	438a      	bics	r2, r1
 800194e:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 8001950:	23a0      	movs	r3, #160	; 0xa0
 8001952:	05db      	lsls	r3, r3, #23
 8001954:	691a      	ldr	r2, [r3, #16]
 8001956:	2380      	movs	r3, #128	; 0x80
 8001958:	019b      	lsls	r3, r3, #6
 800195a:	4013      	ands	r3, r2
 800195c:	d106      	bne.n	800196c <answer2CPU+0x104>
					keyboard &= 0b11110111;
 800195e:	220f      	movs	r2, #15
 8001960:	18bb      	adds	r3, r7, r2
 8001962:	18ba      	adds	r2, r7, r2
 8001964:	7812      	ldrb	r2, [r2, #0]
 8001966:	2108      	movs	r1, #8
 8001968:	438a      	bics	r2, r1
 800196a:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 800196c:	23a0      	movs	r3, #160	; 0xa0
 800196e:	05db      	lsls	r3, r3, #23
 8001970:	691a      	ldr	r2, [r3, #16]
 8001972:	2380      	movs	r3, #128	; 0x80
 8001974:	01db      	lsls	r3, r3, #7
 8001976:	4013      	ands	r3, r2
 8001978:	d106      	bne.n	8001988 <answer2CPU+0x120>
					keyboard &= 0b11101111;
 800197a:	220f      	movs	r2, #15
 800197c:	18bb      	adds	r3, r7, r2
 800197e:	18ba      	adds	r2, r7, r2
 8001980:	7812      	ldrb	r2, [r2, #0]
 8001982:	2110      	movs	r1, #16
 8001984:	438a      	bics	r2, r1
 8001986:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 8001988:	210f      	movs	r1, #15
 800198a:	187b      	adds	r3, r7, r1
 800198c:	187a      	adds	r2, r7, r1
 800198e:	7812      	ldrb	r2, [r2, #0]
 8001990:	43d2      	mvns	r2, r2
 8001992:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 8001994:	200c      	movs	r0, #12
 8001996:	183b      	adds	r3, r7, r0
 8001998:	2204      	movs	r2, #4
 800199a:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 800199c:	183b      	adds	r3, r7, r0
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	3b02      	subs	r3, #2
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	4b93      	ldr	r3, [pc, #588]	; (8001bf4 <answer2CPU+0x38c>)
 80019a8:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 80019aa:	187b      	adds	r3, r7, r1
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	4b90      	ldr	r3, [pc, #576]	; (8001bf4 <answer2CPU+0x38c>)
 80019b2:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 80019b4:	230e      	movs	r3, #14
 80019b6:	18fb      	adds	r3, r7, r3
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
 80019bc:	e011      	b.n	80019e2 <answer2CPU+0x17a>
					myCS = myCS + ans[i];
 80019be:	200e      	movs	r0, #14
 80019c0:	183b      	adds	r3, r7, r0
 80019c2:	781a      	ldrb	r2, [r3, #0]
 80019c4:	4b8b      	ldr	r3, [pc, #556]	; (8001bf4 <answer2CPU+0x38c>)
 80019c6:	0052      	lsls	r2, r2, #1
 80019c8:	5ad3      	ldrh	r3, [r2, r3]
 80019ca:	b2d9      	uxtb	r1, r3
 80019cc:	220d      	movs	r2, #13
 80019ce:	18bb      	adds	r3, r7, r2
 80019d0:	18ba      	adds	r2, r7, r2
 80019d2:	7812      	ldrb	r2, [r2, #0]
 80019d4:	188a      	adds	r2, r1, r2
 80019d6:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 80019d8:	183b      	adds	r3, r7, r0
 80019da:	781a      	ldrb	r2, [r3, #0]
 80019dc:	183b      	adds	r3, r7, r0
 80019de:	3201      	adds	r2, #1
 80019e0:	701a      	strb	r2, [r3, #0]
 80019e2:	200e      	movs	r0, #14
 80019e4:	183b      	adds	r3, r7, r0
 80019e6:	781a      	ldrb	r2, [r3, #0]
 80019e8:	230c      	movs	r3, #12
 80019ea:	18fb      	adds	r3, r7, r3
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	429a      	cmp	r2, r3
 80019f2:	dbe4      	blt.n	80019be <answer2CPU+0x156>
				}
				myCS = 0 - myCS;
 80019f4:	210d      	movs	r1, #13
 80019f6:	187b      	adds	r3, r7, r1
 80019f8:	187a      	adds	r2, r7, r1
 80019fa:	7812      	ldrb	r2, [r2, #0]
 80019fc:	4252      	negs	r2, r2
 80019fe:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 8001a00:	187b      	adds	r3, r7, r1
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	4b7b      	ldr	r3, [pc, #492]	; (8001bf4 <answer2CPU+0x38c>)
 8001a08:	80da      	strh	r2, [r3, #6]
				i=0;
 8001a0a:	183b      	adds	r3, r7, r0
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================

				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001a10:	46c0      	nop			; (mov r8, r8)
 8001a12:	4b79      	ldr	r3, [pc, #484]	; (8001bf8 <answer2CPU+0x390>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	2280      	movs	r2, #128	; 0x80
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d0fa      	beq.n	8001a12 <answer2CPU+0x1aa>
				USART2->TDR = ans[0]|0x0100;
 8001a1c:	4b75      	ldr	r3, [pc, #468]	; (8001bf4 <answer2CPU+0x38c>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	2280      	movs	r2, #128	; 0x80
 8001a22:	0052      	lsls	r2, r2, #1
 8001a24:	4313      	orrs	r3, r2
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	4b73      	ldr	r3, [pc, #460]	; (8001bf8 <answer2CPU+0x390>)
 8001a2a:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001a2c:	230e      	movs	r3, #14
 8001a2e:	18fb      	adds	r3, r7, r3
 8001a30:	2201      	movs	r2, #1
 8001a32:	701a      	strb	r2, [r3, #0]
 8001a34:	e013      	b.n	8001a5e <answer2CPU+0x1f6>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	4b6f      	ldr	r3, [pc, #444]	; (8001bf8 <answer2CPU+0x390>)
 8001a3a:	69db      	ldr	r3, [r3, #28]
 8001a3c:	2280      	movs	r2, #128	; 0x80
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d0fa      	beq.n	8001a38 <answer2CPU+0x1d0>
				    USART2->TDR = (uint8_t)ans[i];
 8001a42:	210e      	movs	r1, #14
 8001a44:	187b      	adds	r3, r7, r1
 8001a46:	781a      	ldrb	r2, [r3, #0]
 8001a48:	4b6a      	ldr	r3, [pc, #424]	; (8001bf4 <answer2CPU+0x38c>)
 8001a4a:	0052      	lsls	r2, r2, #1
 8001a4c:	5ad3      	ldrh	r3, [r2, r3]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	4b69      	ldr	r3, [pc, #420]	; (8001bf8 <answer2CPU+0x390>)
 8001a52:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	781a      	ldrb	r2, [r3, #0]
 8001a58:	187b      	adds	r3, r7, r1
 8001a5a:	3201      	adds	r2, #1
 8001a5c:	701a      	strb	r2, [r3, #0]
 8001a5e:	230e      	movs	r3, #14
 8001a60:	18fa      	adds	r2, r7, r3
 8001a62:	230c      	movs	r3, #12
 8001a64:	18fb      	adds	r3, r7, r3
 8001a66:	7812      	ldrb	r2, [r2, #0]
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d3e3      	bcc.n	8001a36 <answer2CPU+0x1ce>
				  }
//				HAL_Delay(1);
				USART2->CR1 |= USART_CR1_RE;
 8001a6e:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <answer2CPU+0x390>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	4b61      	ldr	r3, [pc, #388]	; (8001bf8 <answer2CPU+0x390>)
 8001a74:	2104      	movs	r1, #4
 8001a76:	430a      	orrs	r2, r1
 8001a78:	601a      	str	r2, [r3, #0]
				isReceiverDisabled=0;
 8001a7a:	4b5b      	ldr	r3, [pc, #364]	; (8001be8 <answer2CPU+0x380>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
//				BFEN=1;
//=======================================================================================================================================
				if (cmd[0] == 0x11) {//Show full screen background;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b11      	cmp	r3, #17
 8001a86:	d109      	bne.n	8001a9c <answer2CPU+0x234>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					picNum = cmd[2];
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	789a      	ldrb	r2, [r3, #2]
 8001a8c:	4b5b      	ldr	r3, [pc, #364]	; (8001bfc <answer2CPU+0x394>)
 8001a8e:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 8001a90:	4b56      	ldr	r3, [pc, #344]	; (8001bec <answer2CPU+0x384>)
 8001a92:	2211      	movs	r2, #17
 8001a94:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001a96:	4b5a      	ldr	r3, [pc, #360]	; (8001c00 <answer2CPU+0x398>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b12      	cmp	r3, #18
 8001aa2:	d115      	bne.n	8001ad0 <answer2CPU+0x268>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	001a      	movs	r2, r3
 8001aac:	4b55      	ldr	r3, [pc, #340]	; (8001c04 <answer2CPU+0x39c>)
 8001aae:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3303      	adds	r3, #3
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	001a      	movs	r2, r3
 8001ab8:	4b53      	ldr	r3, [pc, #332]	; (8001c08 <answer2CPU+0x3a0>)
 8001aba:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	791a      	ldrb	r2, [r3, #4]
 8001ac0:	4b4e      	ldr	r3, [pc, #312]	; (8001bfc <answer2CPU+0x394>)
 8001ac2:	701a      	strb	r2, [r3, #0]
//					weoShowSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 8001ac4:	4b49      	ldr	r3, [pc, #292]	; (8001bec <answer2CPU+0x384>)
 8001ac6:	2212      	movs	r2, #18
 8001ac8:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001aca:	4b4d      	ldr	r3, [pc, #308]	; (8001c00 <answer2CPU+0x398>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b13      	cmp	r3, #19
 8001ad6:	d140      	bne.n	8001b5a <answer2CPU+0x2f2>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3302      	adds	r3, #2
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	001a      	movs	r2, r3
 8001ae0:	4b48      	ldr	r3, [pc, #288]	; (8001c04 <answer2CPU+0x39c>)
 8001ae2:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3303      	adds	r3, #3
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	001a      	movs	r2, r3
 8001aec:	4b46      	ldr	r3, [pc, #280]	; (8001c08 <answer2CPU+0x3a0>)
 8001aee:	601a      	str	r2, [r3, #0]
					fontInfo= cmd[4];
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	791a      	ldrb	r2, [r3, #4]
 8001af4:	4b45      	ldr	r3, [pc, #276]	; (8001c0c <answer2CPU+0x3a4>)
 8001af6:	701a      	strb	r2, [r3, #0]
					color=fontInfo|0xF0;
 8001af8:	4b44      	ldr	r3, [pc, #272]	; (8001c0c <answer2CPU+0x3a4>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2210      	movs	r2, #16
 8001afe:	4252      	negs	r2, r2
 8001b00:	4313      	orrs	r3, r2
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	4b42      	ldr	r3, [pc, #264]	; (8001c10 <answer2CPU+0x3a8>)
 8001b06:	701a      	strb	r2, [r3, #0]
					strLen = cmd[1] - 0x04;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	3b04      	subs	r3, #4
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4b40      	ldr	r3, [pc, #256]	; (8001c14 <answer2CPU+0x3ac>)
 8001b14:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 8001b16:	230e      	movs	r3, #14
 8001b18:	18fb      	adds	r3, r7, r3
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
 8001b1e:	e00f      	b.n	8001b40 <answer2CPU+0x2d8>
					dataASCII[i] = cmd[i+5];
 8001b20:	200e      	movs	r0, #14
 8001b22:	183b      	adds	r3, r7, r0
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	3305      	adds	r3, #5
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	18d2      	adds	r2, r2, r3
 8001b2c:	183b      	adds	r3, r7, r0
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	7811      	ldrb	r1, [r2, #0]
 8001b32:	4a39      	ldr	r2, [pc, #228]	; (8001c18 <answer2CPU+0x3b0>)
 8001b34:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 8001b36:	183b      	adds	r3, r7, r0
 8001b38:	781a      	ldrb	r2, [r3, #0]
 8001b3a:	183b      	adds	r3, r7, r0
 8001b3c:	3201      	adds	r2, #1
 8001b3e:	701a      	strb	r2, [r3, #0]
 8001b40:	4b34      	ldr	r3, [pc, #208]	; (8001c14 <answer2CPU+0x3ac>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	220e      	movs	r2, #14
 8001b46:	18ba      	adds	r2, r7, r2
 8001b48:	7812      	ldrb	r2, [r2, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d3e8      	bcc.n	8001b20 <answer2CPU+0x2b8>
				}
					cmd2Execute=0x13;
 8001b4e:	4b27      	ldr	r3, [pc, #156]	; (8001bec <answer2CPU+0x384>)
 8001b50:	2213      	movs	r2, #19
 8001b52:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001b54:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <answer2CPU+0x398>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b14      	cmp	r3, #20
 8001b60:	d109      	bne.n	8001b76 <answer2CPU+0x30e>
					soundNum = cmd[2];
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	789a      	ldrb	r2, [r3, #2]
 8001b66:	4b2d      	ldr	r3, [pc, #180]	; (8001c1c <answer2CPU+0x3b4>)
 8001b68:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 8001b6a:	4b20      	ldr	r3, [pc, #128]	; (8001bec <answer2CPU+0x384>)
 8001b6c:	2214      	movs	r2, #20
 8001b6e:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001b70:	4b23      	ldr	r3, [pc, #140]	; (8001c00 <answer2CPU+0x398>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b15      	cmp	r3, #21
 8001b7c:	d10d      	bne.n	8001b9a <answer2CPU+0x332>
					volume = cmd[2];
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	789a      	ldrb	r2, [r3, #2]
 8001b82:	4b27      	ldr	r3, [pc, #156]	; (8001c20 <answer2CPU+0x3b8>)
 8001b84:	701a      	strb	r2, [r3, #0]
					contrast = cmd[3];
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	78da      	ldrb	r2, [r3, #3]
 8001b8a:	4b26      	ldr	r3, [pc, #152]	; (8001c24 <answer2CPU+0x3bc>)
 8001b8c:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 8001b8e:	4b17      	ldr	r3, [pc, #92]	; (8001bec <answer2CPU+0x384>)
 8001b90:	2215      	movs	r2, #21
 8001b92:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001b94:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <answer2CPU+0x398>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b16      	cmp	r3, #22
 8001ba0:	d10d      	bne.n	8001bbe <answer2CPU+0x356>
					volume = cmd[3];
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	78da      	ldrb	r2, [r3, #3]
 8001ba6:	4b1e      	ldr	r3, [pc, #120]	; (8001c20 <answer2CPU+0x3b8>)
 8001ba8:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	791a      	ldrb	r2, [r3, #4]
 8001bae:	4b1d      	ldr	r3, [pc, #116]	; (8001c24 <answer2CPU+0x3bc>)
 8001bb0:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <answer2CPU+0x384>)
 8001bb4:	2216      	movs	r2, #22
 8001bb6:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <answer2CPU+0x398>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d000      	beq.n	8001bc8 <answer2CPU+0x360>
 8001bc6:	e09f      	b.n	8001d08 <answer2CPU+0x4a0>
				myLength = 0x14; //20 bytes length answer
 8001bc8:	210c      	movs	r1, #12
 8001bca:	187b      	adds	r3, r7, r1
 8001bcc:	2214      	movs	r2, #20
 8001bce:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001bd0:	187b      	adds	r3, r7, r1
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	3b02      	subs	r3, #2
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <answer2CPU+0x38c>)
 8001bdc:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001bde:	230e      	movs	r3, #14
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
 8001be6:	e030      	b.n	8001c4a <answer2CPU+0x3e2>
 8001be8:	200002b0 	.word	0x200002b0
 8001bec:	20000312 	.word	0x20000312
 8001bf0:	50000800 	.word	0x50000800
 8001bf4:	200002f8 	.word	0x200002f8
 8001bf8:	40004400 	.word	0x40004400
 8001bfc:	200002b1 	.word	0x200002b1
 8001c00:	20000313 	.word	0x20000313
 8001c04:	200002b8 	.word	0x200002b8
 8001c08:	200002bc 	.word	0x200002bc
 8001c0c:	20000321 	.word	0x20000321
 8001c10:	20000322 	.word	0x20000322
 8001c14:	200002b6 	.word	0x200002b6
 8001c18:	200002c4 	.word	0x200002c4
 8001c1c:	200002b2 	.word	0x200002b2
 8001c20:	200002b3 	.word	0x200002b3
 8001c24:	200002b4 	.word	0x200002b4
					ans[i + 2] = PCB_type[i];
 8001c28:	200e      	movs	r0, #14
 8001c2a:	183b      	adds	r3, r7, r0
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	4acb      	ldr	r2, [pc, #812]	; (8001f5c <answer2CPU+0x6f4>)
 8001c30:	5cd1      	ldrb	r1, [r2, r3]
 8001c32:	183b      	adds	r3, r7, r0
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	1c9a      	adds	r2, r3, #2
 8001c38:	b289      	uxth	r1, r1
 8001c3a:	4bc9      	ldr	r3, [pc, #804]	; (8001f60 <answer2CPU+0x6f8>)
 8001c3c:	0052      	lsls	r2, r2, #1
 8001c3e:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001c40:	183b      	adds	r3, r7, r0
 8001c42:	781a      	ldrb	r2, [r3, #0]
 8001c44:	183b      	adds	r3, r7, r0
 8001c46:	3201      	adds	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
 8001c4a:	220e      	movs	r2, #14
 8001c4c:	18bb      	adds	r3, r7, r2
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b10      	cmp	r3, #16
 8001c52:	d9e9      	bls.n	8001c28 <answer2CPU+0x3c0>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001c54:	18bb      	adds	r3, r7, r2
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	e011      	b.n	8001c80 <answer2CPU+0x418>
					myCS = myCS + ans[i];
 8001c5c:	200e      	movs	r0, #14
 8001c5e:	183b      	adds	r3, r7, r0
 8001c60:	781a      	ldrb	r2, [r3, #0]
 8001c62:	4bbf      	ldr	r3, [pc, #764]	; (8001f60 <answer2CPU+0x6f8>)
 8001c64:	0052      	lsls	r2, r2, #1
 8001c66:	5ad3      	ldrh	r3, [r2, r3]
 8001c68:	b2d9      	uxtb	r1, r3
 8001c6a:	220d      	movs	r2, #13
 8001c6c:	18bb      	adds	r3, r7, r2
 8001c6e:	18ba      	adds	r2, r7, r2
 8001c70:	7812      	ldrb	r2, [r2, #0]
 8001c72:	188a      	adds	r2, r1, r2
 8001c74:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001c76:	183b      	adds	r3, r7, r0
 8001c78:	781a      	ldrb	r2, [r3, #0]
 8001c7a:	183b      	adds	r3, r7, r0
 8001c7c:	3201      	adds	r2, #1
 8001c7e:	701a      	strb	r2, [r3, #0]
 8001c80:	230e      	movs	r3, #14
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	781a      	ldrb	r2, [r3, #0]
 8001c86:	200c      	movs	r0, #12
 8001c88:	183b      	adds	r3, r7, r0
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	dbe4      	blt.n	8001c5c <answer2CPU+0x3f4>
				}
				myCS = 0 - myCS;
 8001c92:	210d      	movs	r1, #13
 8001c94:	187b      	adds	r3, r7, r1
 8001c96:	187a      	adds	r2, r7, r1
 8001c98:	7812      	ldrb	r2, [r2, #0]
 8001c9a:	4252      	negs	r2, r2
 8001c9c:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001c9e:	183b      	adds	r3, r7, r0
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	1e5a      	subs	r2, r3, #1
 8001ca4:	187b      	adds	r3, r7, r1
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	b299      	uxth	r1, r3
 8001caa:	4bad      	ldr	r3, [pc, #692]	; (8001f60 <answer2CPU+0x6f8>)
 8001cac:	0052      	lsls	r2, r2, #1
 8001cae:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001cb0:	46c0      	nop			; (mov r8, r8)
 8001cb2:	4bac      	ldr	r3, [pc, #688]	; (8001f64 <answer2CPU+0x6fc>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	2280      	movs	r2, #128	; 0x80
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d0fa      	beq.n	8001cb2 <answer2CPU+0x44a>
				USART2->TDR = ans[0]|0x0100;
 8001cbc:	4ba8      	ldr	r3, [pc, #672]	; (8001f60 <answer2CPU+0x6f8>)
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	2280      	movs	r2, #128	; 0x80
 8001cc2:	0052      	lsls	r2, r2, #1
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	4ba6      	ldr	r3, [pc, #664]	; (8001f64 <answer2CPU+0x6fc>)
 8001cca:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001ccc:	e014      	b.n	8001cf8 <answer2CPU+0x490>
				  {
				    i++;
 8001cce:	210e      	movs	r1, #14
 8001cd0:	187b      	adds	r3, r7, r1
 8001cd2:	781a      	ldrb	r2, [r3, #0]
 8001cd4:	187b      	adds	r3, r7, r1
 8001cd6:	3201      	adds	r2, #1
 8001cd8:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	4ba1      	ldr	r3, [pc, #644]	; (8001f64 <answer2CPU+0x6fc>)
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	2280      	movs	r2, #128	; 0x80
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d0fa      	beq.n	8001cdc <answer2CPU+0x474>
				    USART2->TDR = (uint8_t)ans[i];
 8001ce6:	230e      	movs	r3, #14
 8001ce8:	18fb      	adds	r3, r7, r3
 8001cea:	781a      	ldrb	r2, [r3, #0]
 8001cec:	4b9c      	ldr	r3, [pc, #624]	; (8001f60 <answer2CPU+0x6f8>)
 8001cee:	0052      	lsls	r2, r2, #1
 8001cf0:	5ad3      	ldrh	r3, [r2, r3]
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	4b9b      	ldr	r3, [pc, #620]	; (8001f64 <answer2CPU+0x6fc>)
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001cf8:	230e      	movs	r3, #14
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	781a      	ldrb	r2, [r3, #0]
 8001cfe:	4b98      	ldr	r3, [pc, #608]	; (8001f60 <answer2CPU+0x6f8>)
 8001d00:	0052      	lsls	r2, r2, #1
 8001d02:	5ad3      	ldrh	r3, [r2, r3]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1e2      	bne.n	8001cce <answer2CPU+0x466>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d000      	beq.n	8001d12 <answer2CPU+0x4aa>
 8001d10:	e07f      	b.n	8001e12 <answer2CPU+0x5aa>
				myLength = 0x0B; //19 bytes length answer
 8001d12:	210c      	movs	r1, #12
 8001d14:	187b      	adds	r3, r7, r1
 8001d16:	220b      	movs	r2, #11
 8001d18:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001d1a:	187b      	adds	r3, r7, r1
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	3b02      	subs	r3, #2
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	4b8e      	ldr	r3, [pc, #568]	; (8001f60 <answer2CPU+0x6f8>)
 8001d26:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001d28:	230e      	movs	r3, #14
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
 8001d30:	e010      	b.n	8001d54 <answer2CPU+0x4ec>
					ans[i + 2] = PCB_rev[i];
 8001d32:	200e      	movs	r0, #14
 8001d34:	183b      	adds	r3, r7, r0
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	4a8b      	ldr	r2, [pc, #556]	; (8001f68 <answer2CPU+0x700>)
 8001d3a:	5cd1      	ldrb	r1, [r2, r3]
 8001d3c:	183b      	adds	r3, r7, r0
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	1c9a      	adds	r2, r3, #2
 8001d42:	b289      	uxth	r1, r1
 8001d44:	4b86      	ldr	r3, [pc, #536]	; (8001f60 <answer2CPU+0x6f8>)
 8001d46:	0052      	lsls	r2, r2, #1
 8001d48:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001d4a:	183b      	adds	r3, r7, r0
 8001d4c:	781a      	ldrb	r2, [r3, #0]
 8001d4e:	183b      	adds	r3, r7, r0
 8001d50:	3201      	adds	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
 8001d54:	220e      	movs	r2, #14
 8001d56:	18bb      	adds	r3, r7, r2
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b10      	cmp	r3, #16
 8001d5c:	d9e9      	bls.n	8001d32 <answer2CPU+0x4ca>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001d5e:	18bb      	adds	r3, r7, r2
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
 8001d64:	e011      	b.n	8001d8a <answer2CPU+0x522>
					myCS = myCS + ans[i];
 8001d66:	200e      	movs	r0, #14
 8001d68:	183b      	adds	r3, r7, r0
 8001d6a:	781a      	ldrb	r2, [r3, #0]
 8001d6c:	4b7c      	ldr	r3, [pc, #496]	; (8001f60 <answer2CPU+0x6f8>)
 8001d6e:	0052      	lsls	r2, r2, #1
 8001d70:	5ad3      	ldrh	r3, [r2, r3]
 8001d72:	b2d9      	uxtb	r1, r3
 8001d74:	220d      	movs	r2, #13
 8001d76:	18bb      	adds	r3, r7, r2
 8001d78:	18ba      	adds	r2, r7, r2
 8001d7a:	7812      	ldrb	r2, [r2, #0]
 8001d7c:	188a      	adds	r2, r1, r2
 8001d7e:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001d80:	183b      	adds	r3, r7, r0
 8001d82:	781a      	ldrb	r2, [r3, #0]
 8001d84:	183b      	adds	r3, r7, r0
 8001d86:	3201      	adds	r2, #1
 8001d88:	701a      	strb	r2, [r3, #0]
 8001d8a:	230e      	movs	r3, #14
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	781a      	ldrb	r2, [r3, #0]
 8001d90:	200c      	movs	r0, #12
 8001d92:	183b      	adds	r3, r7, r0
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	dbe4      	blt.n	8001d66 <answer2CPU+0x4fe>
				}
				myCS = 0 - myCS;
 8001d9c:	210d      	movs	r1, #13
 8001d9e:	187b      	adds	r3, r7, r1
 8001da0:	187a      	adds	r2, r7, r1
 8001da2:	7812      	ldrb	r2, [r2, #0]
 8001da4:	4252      	negs	r2, r2
 8001da6:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001da8:	183b      	adds	r3, r7, r0
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	1e5a      	subs	r2, r3, #1
 8001dae:	187b      	adds	r3, r7, r1
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	b299      	uxth	r1, r3
 8001db4:	4b6a      	ldr	r3, [pc, #424]	; (8001f60 <answer2CPU+0x6f8>)
 8001db6:	0052      	lsls	r2, r2, #1
 8001db8:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	4b69      	ldr	r3, [pc, #420]	; (8001f64 <answer2CPU+0x6fc>)
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	2280      	movs	r2, #128	; 0x80
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d0fa      	beq.n	8001dbc <answer2CPU+0x554>
				USART2->TDR = ans[0]|0x0100;
 8001dc6:	4b66      	ldr	r3, [pc, #408]	; (8001f60 <answer2CPU+0x6f8>)
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	2280      	movs	r2, #128	; 0x80
 8001dcc:	0052      	lsls	r2, r2, #1
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	4b64      	ldr	r3, [pc, #400]	; (8001f64 <answer2CPU+0x6fc>)
 8001dd4:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001dd6:	e014      	b.n	8001e02 <answer2CPU+0x59a>
					  {
					    i++;
 8001dd8:	210e      	movs	r1, #14
 8001dda:	187b      	adds	r3, r7, r1
 8001ddc:	781a      	ldrb	r2, [r3, #0]
 8001dde:	187b      	adds	r3, r7, r1
 8001de0:	3201      	adds	r2, #1
 8001de2:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001de4:	46c0      	nop			; (mov r8, r8)
 8001de6:	4b5f      	ldr	r3, [pc, #380]	; (8001f64 <answer2CPU+0x6fc>)
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	2280      	movs	r2, #128	; 0x80
 8001dec:	4013      	ands	r3, r2
 8001dee:	d0fa      	beq.n	8001de6 <answer2CPU+0x57e>
					    USART2->TDR = (uint8_t)ans[i];
 8001df0:	230e      	movs	r3, #14
 8001df2:	18fb      	adds	r3, r7, r3
 8001df4:	781a      	ldrb	r2, [r3, #0]
 8001df6:	4b5a      	ldr	r3, [pc, #360]	; (8001f60 <answer2CPU+0x6f8>)
 8001df8:	0052      	lsls	r2, r2, #1
 8001dfa:	5ad3      	ldrh	r3, [r2, r3]
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4b59      	ldr	r3, [pc, #356]	; (8001f64 <answer2CPU+0x6fc>)
 8001e00:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001e02:	230e      	movs	r3, #14
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	781a      	ldrb	r2, [r3, #0]
 8001e08:	4b55      	ldr	r3, [pc, #340]	; (8001f60 <answer2CPU+0x6f8>)
 8001e0a:	0052      	lsls	r2, r2, #1
 8001e0c:	5ad3      	ldrh	r3, [r2, r3]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1e2      	bne.n	8001dd8 <answer2CPU+0x570>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d000      	beq.n	8001e1c <answer2CPU+0x5b4>
 8001e1a:	e07f      	b.n	8001f1c <answer2CPU+0x6b4>
				myLength = 0x13; //19 bytes length answer
 8001e1c:	210c      	movs	r1, #12
 8001e1e:	187b      	adds	r3, r7, r1
 8001e20:	2213      	movs	r2, #19
 8001e22:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001e24:	187b      	adds	r3, r7, r1
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	3b02      	subs	r3, #2
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	4b4c      	ldr	r3, [pc, #304]	; (8001f60 <answer2CPU+0x6f8>)
 8001e30:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001e32:	230e      	movs	r3, #14
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]
 8001e3a:	e010      	b.n	8001e5e <answer2CPU+0x5f6>
					ans[i + 2] = EmitterSN[i];
 8001e3c:	200e      	movs	r0, #14
 8001e3e:	183b      	adds	r3, r7, r0
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	4a4a      	ldr	r2, [pc, #296]	; (8001f6c <answer2CPU+0x704>)
 8001e44:	5cd1      	ldrb	r1, [r2, r3]
 8001e46:	183b      	adds	r3, r7, r0
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	1c9a      	adds	r2, r3, #2
 8001e4c:	b289      	uxth	r1, r1
 8001e4e:	4b44      	ldr	r3, [pc, #272]	; (8001f60 <answer2CPU+0x6f8>)
 8001e50:	0052      	lsls	r2, r2, #1
 8001e52:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001e54:	183b      	adds	r3, r7, r0
 8001e56:	781a      	ldrb	r2, [r3, #0]
 8001e58:	183b      	adds	r3, r7, r0
 8001e5a:	3201      	adds	r2, #1
 8001e5c:	701a      	strb	r2, [r3, #0]
 8001e5e:	220e      	movs	r2, #14
 8001e60:	18bb      	adds	r3, r7, r2
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b10      	cmp	r3, #16
 8001e66:	d9e9      	bls.n	8001e3c <answer2CPU+0x5d4>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001e68:	18bb      	adds	r3, r7, r2
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
 8001e6e:	e011      	b.n	8001e94 <answer2CPU+0x62c>
					myCS = myCS + ans[i];
 8001e70:	200e      	movs	r0, #14
 8001e72:	183b      	adds	r3, r7, r0
 8001e74:	781a      	ldrb	r2, [r3, #0]
 8001e76:	4b3a      	ldr	r3, [pc, #232]	; (8001f60 <answer2CPU+0x6f8>)
 8001e78:	0052      	lsls	r2, r2, #1
 8001e7a:	5ad3      	ldrh	r3, [r2, r3]
 8001e7c:	b2d9      	uxtb	r1, r3
 8001e7e:	220d      	movs	r2, #13
 8001e80:	18bb      	adds	r3, r7, r2
 8001e82:	18ba      	adds	r2, r7, r2
 8001e84:	7812      	ldrb	r2, [r2, #0]
 8001e86:	188a      	adds	r2, r1, r2
 8001e88:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001e8a:	183b      	adds	r3, r7, r0
 8001e8c:	781a      	ldrb	r2, [r3, #0]
 8001e8e:	183b      	adds	r3, r7, r0
 8001e90:	3201      	adds	r2, #1
 8001e92:	701a      	strb	r2, [r3, #0]
 8001e94:	230e      	movs	r3, #14
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	781a      	ldrb	r2, [r3, #0]
 8001e9a:	200c      	movs	r0, #12
 8001e9c:	183b      	adds	r3, r7, r0
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	dbe4      	blt.n	8001e70 <answer2CPU+0x608>
				}
				myCS = 0 - myCS;
 8001ea6:	210d      	movs	r1, #13
 8001ea8:	187b      	adds	r3, r7, r1
 8001eaa:	187a      	adds	r2, r7, r1
 8001eac:	7812      	ldrb	r2, [r2, #0]
 8001eae:	4252      	negs	r2, r2
 8001eb0:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001eb2:	183b      	adds	r3, r7, r0
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	1e5a      	subs	r2, r3, #1
 8001eb8:	187b      	adds	r3, r7, r1
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	b299      	uxth	r1, r3
 8001ebe:	4b28      	ldr	r3, [pc, #160]	; (8001f60 <answer2CPU+0x6f8>)
 8001ec0:	0052      	lsls	r2, r2, #1
 8001ec2:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001ec4:	46c0      	nop			; (mov r8, r8)
 8001ec6:	4b27      	ldr	r3, [pc, #156]	; (8001f64 <answer2CPU+0x6fc>)
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	2280      	movs	r2, #128	; 0x80
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d0fa      	beq.n	8001ec6 <answer2CPU+0x65e>
				USART2->TDR = ans[0]|0x0100;
 8001ed0:	4b23      	ldr	r3, [pc, #140]	; (8001f60 <answer2CPU+0x6f8>)
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	2280      	movs	r2, #128	; 0x80
 8001ed6:	0052      	lsls	r2, r2, #1
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <answer2CPU+0x6fc>)
 8001ede:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001ee0:	e014      	b.n	8001f0c <answer2CPU+0x6a4>
				  {
				    i++;
 8001ee2:	210e      	movs	r1, #14
 8001ee4:	187b      	adds	r3, r7, r1
 8001ee6:	781a      	ldrb	r2, [r3, #0]
 8001ee8:	187b      	adds	r3, r7, r1
 8001eea:	3201      	adds	r2, #1
 8001eec:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <answer2CPU+0x6fc>)
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2280      	movs	r2, #128	; 0x80
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d0fa      	beq.n	8001ef0 <answer2CPU+0x688>
				    	USART2->TDR = (uint8_t)ans[i];
 8001efa:	230e      	movs	r3, #14
 8001efc:	18fb      	adds	r3, r7, r3
 8001efe:	781a      	ldrb	r2, [r3, #0]
 8001f00:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <answer2CPU+0x6f8>)
 8001f02:	0052      	lsls	r2, r2, #1
 8001f04:	5ad3      	ldrh	r3, [r2, r3]
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <answer2CPU+0x6fc>)
 8001f0a:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001f0c:	230e      	movs	r3, #14
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	781a      	ldrb	r2, [r3, #0]
 8001f12:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <answer2CPU+0x6f8>)
 8001f14:	0052      	lsls	r2, r2, #1
 8001f16:	5ad3      	ldrh	r3, [r2, r3]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1e2      	bne.n	8001ee2 <answer2CPU+0x67a>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b03      	cmp	r3, #3
 8001f22:	d000      	beq.n	8001f26 <answer2CPU+0x6be>
 8001f24:	e07c      	b.n	8002020 <answer2CPU+0x7b8>
				myLength = 0x04; //4 bytes length answer
 8001f26:	210c      	movs	r1, #12
 8001f28:	187b      	adds	r3, r7, r1
 8001f2a:	2204      	movs	r2, #4
 8001f2c:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001f2e:	187b      	adds	r3, r7, r1
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	3b02      	subs	r3, #2
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <answer2CPU+0x6f8>)
 8001f3a:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <answer2CPU+0x708>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <answer2CPU+0x6f8>)
 8001f44:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001f46:	230d      	movs	r3, #13
 8001f48:	18fb      	adds	r3, r7, r3
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <answer2CPU+0x6f8>)
 8001f50:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001f52:	230e      	movs	r3, #14
 8001f54:	18fb      	adds	r3, r7, r3
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]
 8001f5a:	e01d      	b.n	8001f98 <answer2CPU+0x730>
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	200002f8 	.word	0x200002f8
 8001f64:	40004400 	.word	0x40004400
 8001f68:	20000014 	.word	0x20000014
 8001f6c:	20000020 	.word	0x20000020
 8001f70:	2000001c 	.word	0x2000001c
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001f74:	200e      	movs	r0, #14
 8001f76:	183b      	adds	r3, r7, r0
 8001f78:	781a      	ldrb	r2, [r3, #0]
 8001f7a:	4b6d      	ldr	r3, [pc, #436]	; (8002130 <answer2CPU+0x8c8>)
 8001f7c:	0052      	lsls	r2, r2, #1
 8001f7e:	5ad3      	ldrh	r3, [r2, r3]
 8001f80:	b2d9      	uxtb	r1, r3
 8001f82:	220d      	movs	r2, #13
 8001f84:	18bb      	adds	r3, r7, r2
 8001f86:	18ba      	adds	r2, r7, r2
 8001f88:	7812      	ldrb	r2, [r2, #0]
 8001f8a:	188a      	adds	r2, r1, r2
 8001f8c:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001f8e:	183b      	adds	r3, r7, r0
 8001f90:	781a      	ldrb	r2, [r3, #0]
 8001f92:	183b      	adds	r3, r7, r0
 8001f94:	3201      	adds	r2, #1
 8001f96:	701a      	strb	r2, [r3, #0]
 8001f98:	230e      	movs	r3, #14
 8001f9a:	18fb      	adds	r3, r7, r3
 8001f9c:	781a      	ldrb	r2, [r3, #0]
 8001f9e:	200c      	movs	r0, #12
 8001fa0:	183b      	adds	r3, r7, r0
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	dbe4      	blt.n	8001f74 <answer2CPU+0x70c>
				}
				myCS = 0 - myCS;
 8001faa:	210d      	movs	r1, #13
 8001fac:	187b      	adds	r3, r7, r1
 8001fae:	187a      	adds	r2, r7, r1
 8001fb0:	7812      	ldrb	r2, [r2, #0]
 8001fb2:	4252      	negs	r2, r2
 8001fb4:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001fb6:	183b      	adds	r3, r7, r0
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	1e5a      	subs	r2, r3, #1
 8001fbc:	187b      	adds	r3, r7, r1
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	b299      	uxth	r1, r3
 8001fc2:	4b5b      	ldr	r3, [pc, #364]	; (8002130 <answer2CPU+0x8c8>)
 8001fc4:	0052      	lsls	r2, r2, #1
 8001fc6:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001fc8:	46c0      	nop			; (mov r8, r8)
 8001fca:	4b5a      	ldr	r3, [pc, #360]	; (8002134 <answer2CPU+0x8cc>)
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	2280      	movs	r2, #128	; 0x80
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d0fa      	beq.n	8001fca <answer2CPU+0x762>
					USART2->TDR = ans[0]|0x0100;
 8001fd4:	4b56      	ldr	r3, [pc, #344]	; (8002130 <answer2CPU+0x8c8>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	2280      	movs	r2, #128	; 0x80
 8001fda:	0052      	lsls	r2, r2, #1
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	4b54      	ldr	r3, [pc, #336]	; (8002134 <answer2CPU+0x8cc>)
 8001fe2:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001fe4:	e014      	b.n	8002010 <answer2CPU+0x7a8>
						{
						  i++;
 8001fe6:	210e      	movs	r1, #14
 8001fe8:	187b      	adds	r3, r7, r1
 8001fea:	781a      	ldrb	r2, [r3, #0]
 8001fec:	187b      	adds	r3, r7, r1
 8001fee:	3201      	adds	r2, #1
 8001ff0:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	4b4f      	ldr	r3, [pc, #316]	; (8002134 <answer2CPU+0x8cc>)
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	2280      	movs	r2, #128	; 0x80
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d0fa      	beq.n	8001ff4 <answer2CPU+0x78c>
						     USART2->TDR = (uint8_t)ans[i];
 8001ffe:	230e      	movs	r3, #14
 8002000:	18fb      	adds	r3, r7, r3
 8002002:	781a      	ldrb	r2, [r3, #0]
 8002004:	4b4a      	ldr	r3, [pc, #296]	; (8002130 <answer2CPU+0x8c8>)
 8002006:	0052      	lsls	r2, r2, #1
 8002008:	5ad3      	ldrh	r3, [r2, r3]
 800200a:	b2da      	uxtb	r2, r3
 800200c:	4b49      	ldr	r3, [pc, #292]	; (8002134 <answer2CPU+0x8cc>)
 800200e:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8002010:	230e      	movs	r3, #14
 8002012:	18fb      	adds	r3, r7, r3
 8002014:	781a      	ldrb	r2, [r3, #0]
 8002016:	4b46      	ldr	r3, [pc, #280]	; (8002130 <answer2CPU+0x8c8>)
 8002018:	0052      	lsls	r2, r2, #1
 800201a:	5ad3      	ldrh	r3, [r2, r3]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1e2      	bne.n	8001fe6 <answer2CPU+0x77e>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b04      	cmp	r3, #4
 8002026:	d000      	beq.n	800202a <answer2CPU+0x7c2>
 8002028:	e076      	b.n	8002118 <answer2CPU+0x8b0>
				myLength = 0x04; //4 bytes length answer
 800202a:	210c      	movs	r1, #12
 800202c:	187b      	adds	r3, r7, r1
 800202e:	2204      	movs	r2, #4
 8002030:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8002032:	187b      	adds	r3, r7, r1
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	b29b      	uxth	r3, r3
 8002038:	3b02      	subs	r3, #2
 800203a:	b29a      	uxth	r2, r3
 800203c:	4b3c      	ldr	r3, [pc, #240]	; (8002130 <answer2CPU+0x8c8>)
 800203e:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3302      	adds	r3, #2
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	001a      	movs	r2, r3
 8002048:	4b3b      	ldr	r3, [pc, #236]	; (8002138 <answer2CPU+0x8d0>)
 800204a:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 800204c:	4b3b      	ldr	r3, [pc, #236]	; (800213c <answer2CPU+0x8d4>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	b29a      	uxth	r2, r3
 8002052:	4b37      	ldr	r3, [pc, #220]	; (8002130 <answer2CPU+0x8c8>)
 8002054:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8002056:	230d      	movs	r3, #13
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	b29a      	uxth	r2, r3
 800205e:	4b34      	ldr	r3, [pc, #208]	; (8002130 <answer2CPU+0x8c8>)
 8002060:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8002062:	230e      	movs	r3, #14
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
 800206a:	e011      	b.n	8002090 <answer2CPU+0x828>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 800206c:	200e      	movs	r0, #14
 800206e:	183b      	adds	r3, r7, r0
 8002070:	781a      	ldrb	r2, [r3, #0]
 8002072:	4b2f      	ldr	r3, [pc, #188]	; (8002130 <answer2CPU+0x8c8>)
 8002074:	0052      	lsls	r2, r2, #1
 8002076:	5ad3      	ldrh	r3, [r2, r3]
 8002078:	b2d9      	uxtb	r1, r3
 800207a:	220d      	movs	r2, #13
 800207c:	18bb      	adds	r3, r7, r2
 800207e:	18ba      	adds	r2, r7, r2
 8002080:	7812      	ldrb	r2, [r2, #0]
 8002082:	188a      	adds	r2, r1, r2
 8002084:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8002086:	183b      	adds	r3, r7, r0
 8002088:	781a      	ldrb	r2, [r3, #0]
 800208a:	183b      	adds	r3, r7, r0
 800208c:	3201      	adds	r2, #1
 800208e:	701a      	strb	r2, [r3, #0]
 8002090:	230e      	movs	r3, #14
 8002092:	18fb      	adds	r3, r7, r3
 8002094:	781a      	ldrb	r2, [r3, #0]
 8002096:	200c      	movs	r0, #12
 8002098:	183b      	adds	r3, r7, r0
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	3b01      	subs	r3, #1
 800209e:	429a      	cmp	r2, r3
 80020a0:	dbe4      	blt.n	800206c <answer2CPU+0x804>
				}
				myCS = 0 - myCS;
 80020a2:	210d      	movs	r1, #13
 80020a4:	187b      	adds	r3, r7, r1
 80020a6:	187a      	adds	r2, r7, r1
 80020a8:	7812      	ldrb	r2, [r2, #0]
 80020aa:	4252      	negs	r2, r2
 80020ac:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 80020ae:	183b      	adds	r3, r7, r0
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	1e5a      	subs	r2, r3, #1
 80020b4:	187b      	adds	r3, r7, r1
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	b299      	uxth	r1, r3
 80020ba:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <answer2CPU+0x8c8>)
 80020bc:	0052      	lsls	r2, r2, #1
 80020be:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 80020c0:	46c0      	nop			; (mov r8, r8)
 80020c2:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <answer2CPU+0x8cc>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	2280      	movs	r2, #128	; 0x80
 80020c8:	4013      	ands	r3, r2
 80020ca:	d0fa      	beq.n	80020c2 <answer2CPU+0x85a>
				USART2->TDR = ans[0]|0x0100;
 80020cc:	4b18      	ldr	r3, [pc, #96]	; (8002130 <answer2CPU+0x8c8>)
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	2280      	movs	r2, #128	; 0x80
 80020d2:	0052      	lsls	r2, r2, #1
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	4b16      	ldr	r3, [pc, #88]	; (8002134 <answer2CPU+0x8cc>)
 80020da:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 80020dc:	e014      	b.n	8002108 <answer2CPU+0x8a0>
				{
				  i++;
 80020de:	210e      	movs	r1, #14
 80020e0:	187b      	adds	r3, r7, r1
 80020e2:	781a      	ldrb	r2, [r3, #0]
 80020e4:	187b      	adds	r3, r7, r1
 80020e6:	3201      	adds	r2, #1
 80020e8:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	4b11      	ldr	r3, [pc, #68]	; (8002134 <answer2CPU+0x8cc>)
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	2280      	movs	r2, #128	; 0x80
 80020f2:	4013      	ands	r3, r2
 80020f4:	d0fa      	beq.n	80020ec <answer2CPU+0x884>
				  USART2->TDR = (uint8_t)ans[i];
 80020f6:	230e      	movs	r3, #14
 80020f8:	18fb      	adds	r3, r7, r3
 80020fa:	781a      	ldrb	r2, [r3, #0]
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <answer2CPU+0x8c8>)
 80020fe:	0052      	lsls	r2, r2, #1
 8002100:	5ad3      	ldrh	r3, [r2, r3]
 8002102:	b2da      	uxtb	r2, r3
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <answer2CPU+0x8cc>)
 8002106:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8002108:	230e      	movs	r3, #14
 800210a:	18fb      	adds	r3, r7, r3
 800210c:	781a      	ldrb	r2, [r3, #0]
 800210e:	4b08      	ldr	r3, [pc, #32]	; (8002130 <answer2CPU+0x8c8>)
 8002110:	0052      	lsls	r2, r2, #1
 8002112:	5ad3      	ldrh	r3, [r2, r3]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1e2      	bne.n	80020de <answer2CPU+0x876>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <answer2CPU+0x8cc>)
 800211a:	6a1a      	ldr	r2, [r3, #32]
 800211c:	4b05      	ldr	r3, [pc, #20]	; (8002134 <answer2CPU+0x8cc>)
 800211e:	2108      	movs	r1, #8
 8002120:	430a      	orrs	r2, r1
 8002122:	621a      	str	r2, [r3, #32]
}
 8002124:	46c0      	nop			; (mov r8, r8)
 8002126:	0018      	movs	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	b004      	add	sp, #16
 800212c:	bd80      	pop	{r7, pc}
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	200002f8 	.word	0x200002f8
 8002134:	40004400 	.word	0x40004400
 8002138:	200002c0 	.word	0x200002c0
 800213c:	200002b5 	.word	0x200002b5

08002140 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 8002146:	2001      	movs	r0, #1
 8002148:	f003 f8d0 	bl	80052ec <HAL_Delay>
		GPIOB->ODR &= ~(1 << 9); //reset cs
 800214c:	4b28      	ldr	r3, [pc, #160]	; (80021f0 <MEM_Reset+0xb0>)
 800214e:	695a      	ldr	r2, [r3, #20]
 8002150:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <MEM_Reset+0xb0>)
 8002152:	4928      	ldr	r1, [pc, #160]	; (80021f4 <MEM_Reset+0xb4>)
 8002154:	400a      	ands	r2, r1
 8002156:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 8002158:	1dfb      	adds	r3, r7, #7
 800215a:	2266      	movs	r2, #102	; 0x66
 800215c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 800215e:	1df9      	adds	r1, r7, #7
 8002160:	4825      	ldr	r0, [pc, #148]	; (80021f8 <MEM_Reset+0xb8>)
 8002162:	2305      	movs	r3, #5
 8002164:	2201      	movs	r2, #1
 8002166:	f007 f837 	bl	80091d8 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 800216a:	4b21      	ldr	r3, [pc, #132]	; (80021f0 <MEM_Reset+0xb0>)
 800216c:	695a      	ldr	r2, [r3, #20]
 800216e:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <MEM_Reset+0xb0>)
 8002170:	2180      	movs	r1, #128	; 0x80
 8002172:	0089      	lsls	r1, r1, #2
 8002174:	430a      	orrs	r2, r1
 8002176:	615a      	str	r2, [r3, #20]
		asm("NOP");
 8002178:	46c0      	nop			; (mov r8, r8)
		__NOP();
 800217a:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 800217c:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 800217e:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8002180:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8002182:	46c0      	nop			; (mov r8, r8)
		GPIOB->ODR &= ~(1 << 9);			//reset cs
 8002184:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <MEM_Reset+0xb0>)
 8002186:	695a      	ldr	r2, [r3, #20]
 8002188:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <MEM_Reset+0xb0>)
 800218a:	491a      	ldr	r1, [pc, #104]	; (80021f4 <MEM_Reset+0xb4>)
 800218c:	400a      	ands	r2, r1
 800218e:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 8002190:	1dfb      	adds	r3, r7, #7
 8002192:	2299      	movs	r2, #153	; 0x99
 8002194:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 8002196:	1df9      	adds	r1, r7, #7
 8002198:	4817      	ldr	r0, [pc, #92]	; (80021f8 <MEM_Reset+0xb8>)
 800219a:	2305      	movs	r3, #5
 800219c:	2201      	movs	r2, #1
 800219e:	f007 f81b 	bl	80091d8 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 80021a2:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <MEM_Reset+0xb0>)
 80021a4:	695a      	ldr	r2, [r3, #20]
 80021a6:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <MEM_Reset+0xb0>)
 80021a8:	2180      	movs	r1, #128	; 0x80
 80021aa:	0089      	lsls	r1, r1, #2
 80021ac:	430a      	orrs	r2, r1
 80021ae:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 80021b0:	2001      	movs	r0, #1
 80021b2:	f003 f89b 	bl	80052ec <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 80021b6:	1dfb      	adds	r3, r7, #7
 80021b8:	22b7      	movs	r2, #183	; 0xb7
 80021ba:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 << 9); //reset cs
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <MEM_Reset+0xb0>)
 80021be:	695a      	ldr	r2, [r3, #20]
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <MEM_Reset+0xb0>)
 80021c2:	490c      	ldr	r1, [pc, #48]	; (80021f4 <MEM_Reset+0xb4>)
 80021c4:	400a      	ands	r2, r1
 80021c6:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 80021c8:	1df9      	adds	r1, r7, #7
 80021ca:	480b      	ldr	r0, [pc, #44]	; (80021f8 <MEM_Reset+0xb8>)
 80021cc:	2305      	movs	r3, #5
 80021ce:	2201      	movs	r2, #1
 80021d0:	f007 f802 	bl	80091d8 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <MEM_Reset+0xb0>)
 80021d6:	695a      	ldr	r2, [r3, #20]
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <MEM_Reset+0xb0>)
 80021da:	2180      	movs	r1, #128	; 0x80
 80021dc:	0089      	lsls	r1, r1, #2
 80021de:	430a      	orrs	r2, r1
 80021e0:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 80021e2:	2001      	movs	r0, #1
 80021e4:	f003 f882 	bl	80052ec <HAL_Delay>
	}
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b002      	add	sp, #8
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	50000400 	.word	0x50000400
 80021f4:	fffffdff 	.word	0xfffffdff
 80021f8:	200001a0 	.word	0x200001a0

080021fc <weoShowFullScreen>:
//==================================================================================================================================
	uint8_t weoShowFullScreen(uint8_t picNum) {
 80021fc:	b5b0      	push	{r4, r5, r7, lr}
 80021fe:	4c42      	ldr	r4, [pc, #264]	; (8002308 <weoShowFullScreen+0x10c>)
 8002200:	44a5      	add	sp, r4
 8002202:	af02      	add	r7, sp, #8
 8002204:	0002      	movs	r2, r0
 8002206:	4b41      	ldr	r3, [pc, #260]	; (800230c <weoShowFullScreen+0x110>)
 8002208:	4941      	ldr	r1, [pc, #260]	; (8002310 <weoShowFullScreen+0x114>)
 800220a:	185b      	adds	r3, r3, r1
 800220c:	19db      	adds	r3, r3, r7
 800220e:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i, len;
		uint32_t addrInfo,addr,firstImAddr;
		memCMD = 0x13; //read command with 4-byte address
 8002210:	4c40      	ldr	r4, [pc, #256]	; (8002314 <weoShowFullScreen+0x118>)
 8002212:	193b      	adds	r3, r7, r4
 8002214:	2213      	movs	r2, #19
 8002216:	701a      	strb	r2, [r3, #0]
//		picNum=0x02;
		addr=(picNum)*0x2000;
 8002218:	4b3c      	ldr	r3, [pc, #240]	; (800230c <weoShowFullScreen+0x110>)
 800221a:	185b      	adds	r3, r3, r1
 800221c:	19db      	adds	r3, r3, r7
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	035b      	lsls	r3, r3, #13
 8002222:	483d      	ldr	r0, [pc, #244]	; (8002318 <weoShowFullScreen+0x11c>)
 8002224:	183a      	adds	r2, r7, r0
 8002226:	6013      	str	r3, [r2, #0]
//		addr=0x00003800;
		addrArray[0]=addr & 0xFF;
 8002228:	183b      	adds	r3, r7, r0
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4b3b      	ldr	r3, [pc, #236]	; (800231c <weoShowFullScreen+0x120>)
 8002230:	185b      	adds	r3, r3, r1
 8002232:	19db      	adds	r3, r3, r7
 8002234:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8002236:	183b      	adds	r3, r7, r0
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	0a1b      	lsrs	r3, r3, #8
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4b37      	ldr	r3, [pc, #220]	; (800231c <weoShowFullScreen+0x120>)
 8002240:	185b      	adds	r3, r3, r1
 8002242:	19db      	adds	r3, r3, r7
 8002244:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8002246:	183b      	adds	r3, r7, r0
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	0c1b      	lsrs	r3, r3, #16
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4b33      	ldr	r3, [pc, #204]	; (800231c <weoShowFullScreen+0x120>)
 8002250:	185b      	adds	r3, r3, r1
 8002252:	19db      	adds	r3, r3, r7
 8002254:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8002256:	183b      	adds	r3, r7, r0
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	0e1b      	lsrs	r3, r3, #24
 800225c:	b2da      	uxtb	r2, r3
 800225e:	4b2f      	ldr	r3, [pc, #188]	; (800231c <weoShowFullScreen+0x120>)
 8002260:	185b      	adds	r3, r3, r1
 8002262:	19db      	adds	r3, r3, r7
 8002264:	70da      	strb	r2, [r3, #3]

		GPIOB->ODR &= ~(1 << 9); //reset cs
 8002266:	4b2e      	ldr	r3, [pc, #184]	; (8002320 <weoShowFullScreen+0x124>)
 8002268:	695a      	ldr	r2, [r3, #20]
 800226a:	4b2d      	ldr	r3, [pc, #180]	; (8002320 <weoShowFullScreen+0x124>)
 800226c:	492d      	ldr	r1, [pc, #180]	; (8002324 <weoShowFullScreen+0x128>)
 800226e:	400a      	ands	r2, r1
 8002270:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8002272:	1939      	adds	r1, r7, r4
 8002274:	482c      	ldr	r0, [pc, #176]	; (8002328 <weoShowFullScreen+0x12c>)
 8002276:	2332      	movs	r3, #50	; 0x32
 8002278:	2201      	movs	r2, #1
 800227a:	f006 ffad 	bl	80091d8 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 800227e:	2408      	movs	r4, #8
 8002280:	193b      	adds	r3, r7, r4
 8002282:	1cd9      	adds	r1, r3, #3
 8002284:	4828      	ldr	r0, [pc, #160]	; (8002328 <weoShowFullScreen+0x12c>)
 8002286:	2332      	movs	r3, #50	; 0x32
 8002288:	2201      	movs	r2, #1
 800228a:	f006 ffa5 	bl	80091d8 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 800228e:	193b      	adds	r3, r7, r4
 8002290:	1c99      	adds	r1, r3, #2
 8002292:	4825      	ldr	r0, [pc, #148]	; (8002328 <weoShowFullScreen+0x12c>)
 8002294:	2332      	movs	r3, #50	; 0x32
 8002296:	2201      	movs	r2, #1
 8002298:	f006 ff9e 	bl	80091d8 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 800229c:	193b      	adds	r3, r7, r4
 800229e:	1c59      	adds	r1, r3, #1
 80022a0:	4821      	ldr	r0, [pc, #132]	; (8002328 <weoShowFullScreen+0x12c>)
 80022a2:	2332      	movs	r3, #50	; 0x32
 80022a4:	2201      	movs	r2, #1
 80022a6:	f006 ff97 	bl	80091d8 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 80022aa:	1939      	adds	r1, r7, r4
 80022ac:	481e      	ldr	r0, [pc, #120]	; (8002328 <weoShowFullScreen+0x12c>)
 80022ae:	2332      	movs	r3, #50	; 0x32
 80022b0:	2201      	movs	r2, #1
 80022b2:	f006 ff91 	bl	80091d8 <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,8192, 5000);
 80022b6:	4c1d      	ldr	r4, [pc, #116]	; (800232c <weoShowFullScreen+0x130>)
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	019a      	lsls	r2, r3, #6
 80022bc:	2510      	movs	r5, #16
 80022be:	1979      	adds	r1, r7, r5
 80022c0:	4819      	ldr	r0, [pc, #100]	; (8002328 <weoShowFullScreen+0x12c>)
 80022c2:	0023      	movs	r3, r4
 80022c4:	f007 f8e0 	bl	8009488 <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9; // set cs
 80022c8:	4b15      	ldr	r3, [pc, #84]	; (8002320 <weoShowFullScreen+0x124>)
 80022ca:	695a      	ldr	r2, [r3, #20]
 80022cc:	4b14      	ldr	r3, [pc, #80]	; (8002320 <weoShowFullScreen+0x124>)
 80022ce:	2180      	movs	r1, #128	; 0x80
 80022d0:	0089      	lsls	r1, r1, #2
 80022d2:	430a      	orrs	r2, r1
 80022d4:	615a      	str	r2, [r3, #20]

		weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, MEM_Buffer); // Здесь ещё работает
 80022d6:	197b      	adds	r3, r7, r5
 80022d8:	9301      	str	r3, [sp, #4]
 80022da:	23ff      	movs	r3, #255	; 0xff
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	237f      	movs	r3, #127	; 0x7f
 80022e0:	227f      	movs	r2, #127	; 0x7f
 80022e2:	2100      	movs	r1, #0
 80022e4:	2000      	movs	r0, #0
 80022e6:	f7ff f90f 	bl	8001508 <weoDrawRectangleFilled>
		cmd2Execute=0;
 80022ea:	4b11      	ldr	r3, [pc, #68]	; (8002330 <weoShowFullScreen+0x134>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
//		while(BFEN==0){};
		GPIOC->ODR |= 1 << 6;	//set BF
 80022f0:	4b10      	ldr	r3, [pc, #64]	; (8002334 <weoShowFullScreen+0x138>)
 80022f2:	695a      	ldr	r2, [r3, #20]
 80022f4:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <weoShowFullScreen+0x138>)
 80022f6:	2140      	movs	r1, #64	; 0x40
 80022f8:	430a      	orrs	r2, r1
 80022fa:	615a      	str	r2, [r3, #20]
	}
 80022fc:	46c0      	nop			; (mov r8, r8)
 80022fe:	0018      	movs	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	4b03      	ldr	r3, [pc, #12]	; (8002310 <weoShowFullScreen+0x114>)
 8002304:	449d      	add	sp, r3
 8002306:	bdb0      	pop	{r4, r5, r7, pc}
 8002308:	ffffdfe0 	.word	0xffffdfe0
 800230c:	ffffdfef 	.word	0xffffdfef
 8002310:	00002018 	.word	0x00002018
 8002314:	00002013 	.word	0x00002013
 8002318:	00002014 	.word	0x00002014
 800231c:	ffffdff0 	.word	0xffffdff0
 8002320:	50000400 	.word	0x50000400
 8002324:	fffffdff 	.word	0xfffffdff
 8002328:	200001a0 	.word	0x200001a0
 800232c:	00001388 	.word	0x00001388
 8002330:	20000312 	.word	0x20000312
 8002334:	50000800 	.word	0x50000800

08002338 <weoShowSmallImage>:
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
	}
//==========================================================================================================================
	uint8_t weoShowSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 8002338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800233a:	4c9d      	ldr	r4, [pc, #628]	; (80025b0 <weoShowSmallImage+0x278>)
 800233c:	44a5      	add	sp, r4
 800233e:	af02      	add	r7, sp, #8
 8002340:	0004      	movs	r4, r0
 8002342:	0008      	movs	r0, r1
 8002344:	0011      	movs	r1, r2
 8002346:	4b9b      	ldr	r3, [pc, #620]	; (80025b4 <weoShowSmallImage+0x27c>)
 8002348:	4d9b      	ldr	r5, [pc, #620]	; (80025b8 <weoShowSmallImage+0x280>)
 800234a:	195b      	adds	r3, r3, r5
 800234c:	19db      	adds	r3, r3, r7
 800234e:	1c22      	adds	r2, r4, #0
 8002350:	701a      	strb	r2, [r3, #0]
 8002352:	4b9a      	ldr	r3, [pc, #616]	; (80025bc <weoShowSmallImage+0x284>)
 8002354:	002c      	movs	r4, r5
 8002356:	191b      	adds	r3, r3, r4
 8002358:	19db      	adds	r3, r3, r7
 800235a:	1c02      	adds	r2, r0, #0
 800235c:	701a      	strb	r2, [r3, #0]
 800235e:	4b98      	ldr	r3, [pc, #608]	; (80025c0 <weoShowSmallImage+0x288>)
 8002360:	0020      	movs	r0, r4
 8002362:	181b      	adds	r3, r3, r0
 8002364:	19db      	adds	r3, r3, r7
 8002366:	1c0a      	adds	r2, r1, #0
 8002368:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192];
		uint8_t imInfo[2],addrArray[4];
		uint16_t i;
		uint32_t addr,addrData;
		addr=0x00000000;
 800236a:	2300      	movs	r3, #0
 800236c:	4c95      	ldr	r4, [pc, #596]	; (80025c4 <weoShowSmallImage+0x28c>)
 800236e:	193a      	adds	r2, r7, r4
 8002370:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 8002372:	4d95      	ldr	r5, [pc, #596]	; (80025c8 <weoShowSmallImage+0x290>)
 8002374:	197b      	adds	r3, r7, r5
 8002376:	2213      	movs	r2, #19
 8002378:	701a      	strb	r2, [r3, #0]
		//look at info about image
		addr=(picNum*0x2000)+0x200000;// the right path is to multiply picNum * image repeat period!
 800237a:	4b8e      	ldr	r3, [pc, #568]	; (80025b4 <weoShowSmallImage+0x27c>)
 800237c:	0001      	movs	r1, r0
 800237e:	185b      	adds	r3, r3, r1
 8002380:	19db      	adds	r3, r3, r7
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	33ff      	adds	r3, #255	; 0xff
 8002388:	035b      	lsls	r3, r3, #13
 800238a:	0026      	movs	r6, r4
 800238c:	19ba      	adds	r2, r7, r6
 800238e:	6013      	str	r3, [r2, #0]
//		addr=(picNum*0x2000);

		addrArray[0]=addr & 0xFF;
 8002390:	19bb      	adds	r3, r7, r6
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4b8d      	ldr	r3, [pc, #564]	; (80025cc <weoShowSmallImage+0x294>)
 8002398:	000c      	movs	r4, r1
 800239a:	191b      	adds	r3, r3, r4
 800239c:	19db      	adds	r3, r3, r7
 800239e:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 80023a0:	19bb      	adds	r3, r7, r6
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	0a1b      	lsrs	r3, r3, #8
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	4b88      	ldr	r3, [pc, #544]	; (80025cc <weoShowSmallImage+0x294>)
 80023aa:	191b      	adds	r3, r3, r4
 80023ac:	19db      	adds	r3, r3, r7
 80023ae:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 80023b0:	19bb      	adds	r3, r7, r6
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	0c1b      	lsrs	r3, r3, #16
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	4b84      	ldr	r3, [pc, #528]	; (80025cc <weoShowSmallImage+0x294>)
 80023ba:	191b      	adds	r3, r3, r4
 80023bc:	19db      	adds	r3, r3, r7
 80023be:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 80023c0:	19bb      	adds	r3, r7, r6
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	0e1b      	lsrs	r3, r3, #24
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	4b80      	ldr	r3, [pc, #512]	; (80025cc <weoShowSmallImage+0x294>)
 80023ca:	191b      	adds	r3, r3, r4
 80023cc:	19db      	adds	r3, r3, r7
 80023ce:	70da      	strb	r2, [r3, #3]

		GPIOB->ODR &= ~(1 << 9); //reset cs
 80023d0:	4b7f      	ldr	r3, [pc, #508]	; (80025d0 <weoShowSmallImage+0x298>)
 80023d2:	695a      	ldr	r2, [r3, #20]
 80023d4:	4b7e      	ldr	r3, [pc, #504]	; (80025d0 <weoShowSmallImage+0x298>)
 80023d6:	497f      	ldr	r1, [pc, #508]	; (80025d4 <weoShowSmallImage+0x29c>)
 80023d8:	400a      	ands	r2, r1
 80023da:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 80023dc:	1979      	adds	r1, r7, r5
 80023de:	487e      	ldr	r0, [pc, #504]	; (80025d8 <weoShowSmallImage+0x2a0>)
 80023e0:	2332      	movs	r3, #50	; 0x32
 80023e2:	2201      	movs	r2, #1
 80023e4:	f006 fef8 	bl	80091d8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 80023e8:	2508      	movs	r5, #8
 80023ea:	197b      	adds	r3, r7, r5
 80023ec:	1cd9      	adds	r1, r3, #3
 80023ee:	487a      	ldr	r0, [pc, #488]	; (80025d8 <weoShowSmallImage+0x2a0>)
 80023f0:	2332      	movs	r3, #50	; 0x32
 80023f2:	2201      	movs	r2, #1
 80023f4:	f006 fef0 	bl	80091d8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 80023f8:	197b      	adds	r3, r7, r5
 80023fa:	1c99      	adds	r1, r3, #2
 80023fc:	4876      	ldr	r0, [pc, #472]	; (80025d8 <weoShowSmallImage+0x2a0>)
 80023fe:	2332      	movs	r3, #50	; 0x32
 8002400:	2201      	movs	r2, #1
 8002402:	f006 fee9 	bl	80091d8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8002406:	197b      	adds	r3, r7, r5
 8002408:	1c59      	adds	r1, r3, #1
 800240a:	4873      	ldr	r0, [pc, #460]	; (80025d8 <weoShowSmallImage+0x2a0>)
 800240c:	2332      	movs	r3, #50	; 0x32
 800240e:	2201      	movs	r2, #1
 8002410:	f006 fee2 	bl	80091d8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8002414:	1979      	adds	r1, r7, r5
 8002416:	4870      	ldr	r0, [pc, #448]	; (80025d8 <weoShowSmallImage+0x2a0>)
 8002418:	2332      	movs	r3, #50	; 0x32
 800241a:	2201      	movs	r2, #1
 800241c:	f006 fedc 	bl	80091d8 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 8002420:	4b6e      	ldr	r3, [pc, #440]	; (80025dc <weoShowSmallImage+0x2a4>)
 8002422:	220c      	movs	r2, #12
 8002424:	18b9      	adds	r1, r7, r2
 8002426:	486c      	ldr	r0, [pc, #432]	; (80025d8 <weoShowSmallImage+0x2a0>)
 8002428:	2202      	movs	r2, #2
 800242a:	f007 f82d 	bl	8009488 <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9; // set cs
 800242e:	4b68      	ldr	r3, [pc, #416]	; (80025d0 <weoShowSmallImage+0x298>)
 8002430:	695a      	ldr	r2, [r3, #20]
 8002432:	4b67      	ldr	r3, [pc, #412]	; (80025d0 <weoShowSmallImage+0x298>)
 8002434:	2180      	movs	r1, #128	; 0x80
 8002436:	0089      	lsls	r1, r1, #2
 8002438:	430a      	orrs	r2, r1
 800243a:	615a      	str	r2, [r3, #20]

		width=imInfo[0];
 800243c:	4968      	ldr	r1, [pc, #416]	; (80025e0 <weoShowSmallImage+0x2a8>)
 800243e:	187b      	adds	r3, r7, r1
 8002440:	4a68      	ldr	r2, [pc, #416]	; (80025e4 <weoShowSmallImage+0x2ac>)
 8002442:	1912      	adds	r2, r2, r4
 8002444:	19d2      	adds	r2, r2, r7
 8002446:	7812      	ldrb	r2, [r2, #0]
 8002448:	701a      	strb	r2, [r3, #0]
		height=imInfo[1];
 800244a:	4b67      	ldr	r3, [pc, #412]	; (80025e8 <weoShowSmallImage+0x2b0>)
 800244c:	0018      	movs	r0, r3
 800244e:	18fb      	adds	r3, r7, r3
 8002450:	4a64      	ldr	r2, [pc, #400]	; (80025e4 <weoShowSmallImage+0x2ac>)
 8002452:	1912      	adds	r2, r2, r4
 8002454:	19d2      	adds	r2, r2, r7
 8002456:	7852      	ldrb	r2, [r2, #1]
 8002458:	701a      	strb	r2, [r3, #0]
//		len=(width*(height/2));

//		if(width % 2 !=0){
//			width-=0x01;
//		}
		len=((width+0)*((height)/2));
 800245a:	187b      	adds	r3, r7, r1
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	0002      	movs	r2, r0
 8002460:	18ba      	adds	r2, r7, r2
 8002462:	7812      	ldrb	r2, [r2, #0]
 8002464:	0852      	lsrs	r2, r2, #1
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	4353      	muls	r3, r2
 800246a:	001a      	movs	r2, r3
 800246c:	4b5f      	ldr	r3, [pc, #380]	; (80025ec <weoShowSmallImage+0x2b4>)
 800246e:	601a      	str	r2, [r3, #0]

		addrData=addr+0x02;
 8002470:	19be      	adds	r6, r7, r6
 8002472:	6833      	ldr	r3, [r6, #0]
 8002474:	3302      	adds	r3, #2
 8002476:	495e      	ldr	r1, [pc, #376]	; (80025f0 <weoShowSmallImage+0x2b8>)
 8002478:	187e      	adds	r6, r7, r1
 800247a:	6033      	str	r3, [r6, #0]
		addrArray[0]=addrData & 0xFF;
 800247c:	187e      	adds	r6, r7, r1
 800247e:	6833      	ldr	r3, [r6, #0]
 8002480:	b2da      	uxtb	r2, r3
 8002482:	4b52      	ldr	r3, [pc, #328]	; (80025cc <weoShowSmallImage+0x294>)
 8002484:	191e      	adds	r6, r3, r4
 8002486:	19f3      	adds	r3, r6, r7
 8002488:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addrData >> 8) & 0xFF;
 800248a:	187e      	adds	r6, r7, r1
 800248c:	6833      	ldr	r3, [r6, #0]
 800248e:	0a1b      	lsrs	r3, r3, #8
 8002490:	b2da      	uxtb	r2, r3
 8002492:	4b4e      	ldr	r3, [pc, #312]	; (80025cc <weoShowSmallImage+0x294>)
 8002494:	191e      	adds	r6, r3, r4
 8002496:	19f3      	adds	r3, r6, r7
 8002498:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addrData >> 16) & 0xFF;
 800249a:	187e      	adds	r6, r7, r1
 800249c:	6833      	ldr	r3, [r6, #0]
 800249e:	0c1b      	lsrs	r3, r3, #16
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b4a      	ldr	r3, [pc, #296]	; (80025cc <weoShowSmallImage+0x294>)
 80024a4:	191e      	adds	r6, r3, r4
 80024a6:	19f3      	adds	r3, r6, r7
 80024a8:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addrData >> 24) & 0xFF;
 80024aa:	187e      	adds	r6, r7, r1
 80024ac:	6833      	ldr	r3, [r6, #0]
 80024ae:	0e1b      	lsrs	r3, r3, #24
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4b46      	ldr	r3, [pc, #280]	; (80025cc <weoShowSmallImage+0x294>)
 80024b4:	191e      	adds	r6, r3, r4
 80024b6:	19f3      	adds	r3, r6, r7
 80024b8:	70da      	strb	r2, [r3, #3]

		USART2->ICR|=USART_ICR_ORECF;
 80024ba:	4b4e      	ldr	r3, [pc, #312]	; (80025f4 <weoShowSmallImage+0x2bc>)
 80024bc:	6a1a      	ldr	r2, [r3, #32]
 80024be:	4b4d      	ldr	r3, [pc, #308]	; (80025f4 <weoShowSmallImage+0x2bc>)
 80024c0:	2108      	movs	r1, #8
 80024c2:	430a      	orrs	r2, r1
 80024c4:	621a      	str	r2, [r3, #32]
		memCMD = 0x13; //read command with 4-byte address
 80024c6:	4840      	ldr	r0, [pc, #256]	; (80025c8 <weoShowSmallImage+0x290>)
 80024c8:	183b      	adds	r3, r7, r0
 80024ca:	2213      	movs	r2, #19
 80024cc:	701a      	strb	r2, [r3, #0]

		GPIOB->ODR &= ~(1 <<9);	//reset cs
 80024ce:	4b40      	ldr	r3, [pc, #256]	; (80025d0 <weoShowSmallImage+0x298>)
 80024d0:	695a      	ldr	r2, [r3, #20]
 80024d2:	4b3f      	ldr	r3, [pc, #252]	; (80025d0 <weoShowSmallImage+0x298>)
 80024d4:	493f      	ldr	r1, [pc, #252]	; (80025d4 <weoShowSmallImage+0x29c>)
 80024d6:	400a      	ands	r2, r1
 80024d8:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 80024da:	1839      	adds	r1, r7, r0
 80024dc:	483e      	ldr	r0, [pc, #248]	; (80025d8 <weoShowSmallImage+0x2a0>)
 80024de:	2332      	movs	r3, #50	; 0x32
 80024e0:	2201      	movs	r2, #1
 80024e2:	f006 fe79 	bl	80091d8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 80024e6:	197b      	adds	r3, r7, r5
 80024e8:	1cd9      	adds	r1, r3, #3
 80024ea:	483b      	ldr	r0, [pc, #236]	; (80025d8 <weoShowSmallImage+0x2a0>)
 80024ec:	2332      	movs	r3, #50	; 0x32
 80024ee:	2201      	movs	r2, #1
 80024f0:	f006 fe72 	bl	80091d8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 80024f4:	197b      	adds	r3, r7, r5
 80024f6:	1c99      	adds	r1, r3, #2
 80024f8:	4837      	ldr	r0, [pc, #220]	; (80025d8 <weoShowSmallImage+0x2a0>)
 80024fa:	2332      	movs	r3, #50	; 0x32
 80024fc:	2201      	movs	r2, #1
 80024fe:	f006 fe6b 	bl	80091d8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 8002502:	197b      	adds	r3, r7, r5
 8002504:	1c59      	adds	r1, r3, #1
 8002506:	4834      	ldr	r0, [pc, #208]	; (80025d8 <weoShowSmallImage+0x2a0>)
 8002508:	2332      	movs	r3, #50	; 0x32
 800250a:	2201      	movs	r2, #1
 800250c:	f006 fe64 	bl	80091d8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 8002510:	1979      	adds	r1, r7, r5
 8002512:	4831      	ldr	r0, [pc, #196]	; (80025d8 <weoShowSmallImage+0x2a0>)
 8002514:	2332      	movs	r3, #50	; 0x32
 8002516:	2201      	movs	r2, #1
 8002518:	f006 fe5e 	bl	80091d8 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 800251c:	4b33      	ldr	r3, [pc, #204]	; (80025ec <weoShowSmallImage+0x2b4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	b29a      	uxth	r2, r3
 8002522:	4b2e      	ldr	r3, [pc, #184]	; (80025dc <weoShowSmallImage+0x2a4>)
 8002524:	2510      	movs	r5, #16
 8002526:	1979      	adds	r1, r7, r5
 8002528:	482b      	ldr	r0, [pc, #172]	; (80025d8 <weoShowSmallImage+0x2a0>)
 800252a:	f006 ffad 	bl	8009488 <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9;	// set cs
 800252e:	4b28      	ldr	r3, [pc, #160]	; (80025d0 <weoShowSmallImage+0x298>)
 8002530:	695a      	ldr	r2, [r3, #20]
 8002532:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <weoShowSmallImage+0x298>)
 8002534:	2180      	movs	r1, #128	; 0x80
 8002536:	0089      	lsls	r1, r1, #2
 8002538:	430a      	orrs	r2, r1
 800253a:	615a      	str	r2, [r3, #20]

		decY=1;
 800253c:	4b2e      	ldr	r3, [pc, #184]	; (80025f8 <weoShowSmallImage+0x2c0>)
 800253e:	2201      	movs	r2, #1
 8002540:	701a      	strb	r2, [r3, #0]
//			decY=2;
//		}
//		imX = 0;
//		imY = 0;
//		weoDrawRectangleFilled(imX, imY, imX+width-1, imY+height-decY, 0xFF,MEM_Buffer);//classic	// Здесь ещё работает 0xFF - затычка
		weoDrawRectangleFilled(imX, imY, imX + width-1, (imY + height-1), 0xFF, MEM_Buffer);
 8002542:	4b1e      	ldr	r3, [pc, #120]	; (80025bc <weoShowSmallImage+0x284>)
 8002544:	0021      	movs	r1, r4
 8002546:	185c      	adds	r4, r3, r1
 8002548:	19e2      	adds	r2, r4, r7
 800254a:	4b25      	ldr	r3, [pc, #148]	; (80025e0 <weoShowSmallImage+0x2a8>)
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	7812      	ldrb	r2, [r2, #0]
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	18d3      	adds	r3, r2, r3
 8002554:	b2db      	uxtb	r3, r3
 8002556:	3b01      	subs	r3, #1
 8002558:	b2dc      	uxtb	r4, r3
 800255a:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <weoShowSmallImage+0x288>)
 800255c:	185b      	adds	r3, r3, r1
 800255e:	19da      	adds	r2, r3, r7
 8002560:	4821      	ldr	r0, [pc, #132]	; (80025e8 <weoShowSmallImage+0x2b0>)
 8002562:	183b      	adds	r3, r7, r0
 8002564:	7812      	ldrb	r2, [r2, #0]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	18d3      	adds	r3, r2, r3
 800256a:	b2db      	uxtb	r3, r3
 800256c:	3b01      	subs	r3, #1
 800256e:	b2da      	uxtb	r2, r3
 8002570:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <weoShowSmallImage+0x288>)
 8002572:	0008      	movs	r0, r1
 8002574:	185b      	adds	r3, r3, r1
 8002576:	19db      	adds	r3, r3, r7
 8002578:	7819      	ldrb	r1, [r3, #0]
 800257a:	4b10      	ldr	r3, [pc, #64]	; (80025bc <weoShowSmallImage+0x284>)
 800257c:	181b      	adds	r3, r3, r0
 800257e:	19db      	adds	r3, r3, r7
 8002580:	7818      	ldrb	r0, [r3, #0]
 8002582:	197b      	adds	r3, r7, r5
 8002584:	9301      	str	r3, [sp, #4]
 8002586:	23ff      	movs	r3, #255	; 0xff
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	0013      	movs	r3, r2
 800258c:	0022      	movs	r2, r4
 800258e:	f7fe ffbb 	bl	8001508 <weoDrawRectangleFilled>
		cmd2Execute=0;
 8002592:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <weoShowSmallImage+0x2c4>)
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
//		while(BFEN==0){};
		GPIOC->ODR |= 1 << 6;	//set BF
 8002598:	4b19      	ldr	r3, [pc, #100]	; (8002600 <weoShowSmallImage+0x2c8>)
 800259a:	695a      	ldr	r2, [r3, #20]
 800259c:	4b18      	ldr	r3, [pc, #96]	; (8002600 <weoShowSmallImage+0x2c8>)
 800259e:	2140      	movs	r1, #64	; 0x40
 80025a0:	430a      	orrs	r2, r1
 80025a2:	615a      	str	r2, [r3, #20]
	}
 80025a4:	46c0      	nop			; (mov r8, r8)
 80025a6:	0018      	movs	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	4b16      	ldr	r3, [pc, #88]	; (8002604 <weoShowSmallImage+0x2cc>)
 80025ac:	449d      	add	sp, r3
 80025ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025b0:	ffffdfd4 	.word	0xffffdfd4
 80025b4:	ffffdfe7 	.word	0xffffdfe7
 80025b8:	00002020 	.word	0x00002020
 80025bc:	ffffdfe6 	.word	0xffffdfe6
 80025c0:	ffffdfe5 	.word	0xffffdfe5
 80025c4:	0000201c 	.word	0x0000201c
 80025c8:	00002013 	.word	0x00002013
 80025cc:	ffffdfe8 	.word	0xffffdfe8
 80025d0:	50000400 	.word	0x50000400
 80025d4:	fffffdff 	.word	0xfffffdff
 80025d8:	200001a0 	.word	0x200001a0
 80025dc:	00001388 	.word	0x00001388
 80025e0:	0000201b 	.word	0x0000201b
 80025e4:	ffffdfec 	.word	0xffffdfec
 80025e8:	0000201a 	.word	0x0000201a
 80025ec:	20000318 	.word	0x20000318
 80025f0:	00002014 	.word	0x00002014
 80025f4:	40004400 	.word	0x40004400
 80025f8:	20000320 	.word	0x20000320
 80025fc:	20000312 	.word	0x20000312
 8002600:	50000800 	.word	0x50000800
 8002604:	00002024 	.word	0x00002024

08002608 <soundLoad>:
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	uint8_t soundLoad(uint8_t soundNum, uint8_t soundReady, uint8_t isSoundOver) {
 8002608:	b590      	push	{r4, r7, lr}
 800260a:	b08b      	sub	sp, #44	; 0x2c
 800260c:	af00      	add	r7, sp, #0
 800260e:	0004      	movs	r4, r0
 8002610:	0008      	movs	r0, r1
 8002612:	0011      	movs	r1, r2
 8002614:	1dfb      	adds	r3, r7, #7
 8002616:	1c22      	adds	r2, r4, #0
 8002618:	701a      	strb	r2, [r3, #0]
 800261a:	1dbb      	adds	r3, r7, #6
 800261c:	1c02      	adds	r2, r0, #0
 800261e:	701a      	strb	r2, [r3, #0]
 8002620:	1d7b      	adds	r3, r7, #5
 8002622:	1c0a      	adds	r2, r1, #0
 8002624:	701a      	strb	r2, [r3, #0]
			uint8_t memCMD,addr_l,addr_L,addr_h,addr_H;
			uint8_t soundInfo[9],addrINFO[4],addr[4],length[4];
			uint32_t i;
			memCMD = 0x13; //read command with 4-byte address
 8002626:	2023      	movs	r0, #35	; 0x23
 8002628:	183b      	adds	r3, r7, r0
 800262a:	2213      	movs	r2, #19
 800262c:	701a      	strb	r2, [r3, #0]

			if(isSoundOver == 1){return;}
 800262e:	1d7b      	adds	r3, r7, #5
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d100      	bne.n	8002638 <soundLoad+0x30>
 8002636:	e16d      	b.n	8002914 <soundLoad+0x30c>

			if(soundReady == 0){
 8002638:	1dbb      	adds	r3, r7, #6
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d000      	beq.n	8002642 <soundLoad+0x3a>
 8002640:	e157      	b.n	80028f2 <soundLoad+0x2ea>
				if (curBuf == 0){
 8002642:	4bb7      	ldr	r3, [pc, #732]	; (8002920 <soundLoad+0x318>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d000      	beq.n	800264c <soundLoad+0x44>
 800264a:	e0e3      	b.n	8002814 <soundLoad+0x20c>

					address=startAddressForSoundInfo+(soundNum*0x09);
 800264c:	1dfb      	adds	r3, r7, #7
 800264e:	781a      	ldrb	r2, [r3, #0]
 8002650:	0013      	movs	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	189b      	adds	r3, r3, r2
 8002656:	2280      	movs	r2, #128	; 0x80
 8002658:	03d2      	lsls	r2, r2, #15
 800265a:	4694      	mov	ip, r2
 800265c:	4463      	add	r3, ip
 800265e:	001a      	movs	r2, r3
 8002660:	4bb0      	ldr	r3, [pc, #704]	; (8002924 <soundLoad+0x31c>)
 8002662:	601a      	str	r2, [r3, #0]

					addrINFO[0]=address & 0xFF;
 8002664:	4baf      	ldr	r3, [pc, #700]	; (8002924 <soundLoad+0x31c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	b2da      	uxtb	r2, r3
 800266a:	2414      	movs	r4, #20
 800266c:	193b      	adds	r3, r7, r4
 800266e:	701a      	strb	r2, [r3, #0]
					addrINFO[1]=(address >> 8) & 0xFF;
 8002670:	4bac      	ldr	r3, [pc, #688]	; (8002924 <soundLoad+0x31c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	0a1b      	lsrs	r3, r3, #8
 8002676:	b2da      	uxtb	r2, r3
 8002678:	193b      	adds	r3, r7, r4
 800267a:	705a      	strb	r2, [r3, #1]
					addrINFO[2]=(address >> 16) & 0xFF;
 800267c:	4ba9      	ldr	r3, [pc, #676]	; (8002924 <soundLoad+0x31c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	0c1b      	lsrs	r3, r3, #16
 8002682:	b2da      	uxtb	r2, r3
 8002684:	193b      	adds	r3, r7, r4
 8002686:	709a      	strb	r2, [r3, #2]
					addrINFO[3]=(address >> 24) & 0xFF;
 8002688:	4ba6      	ldr	r3, [pc, #664]	; (8002924 <soundLoad+0x31c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	0e1b      	lsrs	r3, r3, #24
 800268e:	b2da      	uxtb	r2, r3
 8002690:	193b      	adds	r3, r7, r4
 8002692:	70da      	strb	r2, [r3, #3]

					GPIOB->ODR &= ~(1 << 9); //reset cs
 8002694:	4ba4      	ldr	r3, [pc, #656]	; (8002928 <soundLoad+0x320>)
 8002696:	695a      	ldr	r2, [r3, #20]
 8002698:	4ba3      	ldr	r3, [pc, #652]	; (8002928 <soundLoad+0x320>)
 800269a:	49a4      	ldr	r1, [pc, #656]	; (800292c <soundLoad+0x324>)
 800269c:	400a      	ands	r2, r1
 800269e:	615a      	str	r2, [r3, #20]
					HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 80026a0:	1839      	adds	r1, r7, r0
 80026a2:	48a3      	ldr	r0, [pc, #652]	; (8002930 <soundLoad+0x328>)
 80026a4:	2332      	movs	r3, #50	; 0x32
 80026a6:	2201      	movs	r2, #1
 80026a8:	f006 fd96 	bl	80091d8 <HAL_SPI_Transmit>
					HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrINFO[3], 1, 50); //send address
 80026ac:	193b      	adds	r3, r7, r4
 80026ae:	1cd9      	adds	r1, r3, #3
 80026b0:	489f      	ldr	r0, [pc, #636]	; (8002930 <soundLoad+0x328>)
 80026b2:	2332      	movs	r3, #50	; 0x32
 80026b4:	2201      	movs	r2, #1
 80026b6:	f006 fd8f 	bl	80091d8 <HAL_SPI_Transmit>
					HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrINFO[2], 1, 50); //send address
 80026ba:	193b      	adds	r3, r7, r4
 80026bc:	1c99      	adds	r1, r3, #2
 80026be:	489c      	ldr	r0, [pc, #624]	; (8002930 <soundLoad+0x328>)
 80026c0:	2332      	movs	r3, #50	; 0x32
 80026c2:	2201      	movs	r2, #1
 80026c4:	f006 fd88 	bl	80091d8 <HAL_SPI_Transmit>
					HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrINFO[1], 1, 50); //send address
 80026c8:	193b      	adds	r3, r7, r4
 80026ca:	1c59      	adds	r1, r3, #1
 80026cc:	4898      	ldr	r0, [pc, #608]	; (8002930 <soundLoad+0x328>)
 80026ce:	2332      	movs	r3, #50	; 0x32
 80026d0:	2201      	movs	r2, #1
 80026d2:	f006 fd81 	bl	80091d8 <HAL_SPI_Transmit>
					HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrINFO[0], 1, 50); //send address
 80026d6:	1939      	adds	r1, r7, r4
 80026d8:	4895      	ldr	r0, [pc, #596]	; (8002930 <soundLoad+0x328>)
 80026da:	2332      	movs	r3, #50	; 0x32
 80026dc:	2201      	movs	r2, #1
 80026de:	f006 fd7b 	bl	80091d8 <HAL_SPI_Transmit>
					HAL_SPI_Receive(&hspi2, (uint8_t*) &soundInfo,9, 5000);//9 bits of soundInfo
 80026e2:	4b94      	ldr	r3, [pc, #592]	; (8002934 <soundLoad+0x32c>)
 80026e4:	2418      	movs	r4, #24
 80026e6:	1939      	adds	r1, r7, r4
 80026e8:	4891      	ldr	r0, [pc, #580]	; (8002930 <soundLoad+0x328>)
 80026ea:	2209      	movs	r2, #9
 80026ec:	f006 fecc 	bl	8009488 <HAL_SPI_Receive>
					GPIOB->ODR |= 1 << 9; // set cs
 80026f0:	4b8d      	ldr	r3, [pc, #564]	; (8002928 <soundLoad+0x320>)
 80026f2:	695a      	ldr	r2, [r3, #20]
 80026f4:	4b8c      	ldr	r3, [pc, #560]	; (8002928 <soundLoad+0x320>)
 80026f6:	2180      	movs	r1, #128	; 0x80
 80026f8:	0089      	lsls	r1, r1, #2
 80026fa:	430a      	orrs	r2, r1
 80026fc:	615a      	str	r2, [r3, #20]

					addr[0]=soundInfo[4];
 80026fe:	0021      	movs	r1, r4
 8002700:	187b      	adds	r3, r7, r1
 8002702:	791a      	ldrb	r2, [r3, #4]
 8002704:	2010      	movs	r0, #16
 8002706:	183b      	adds	r3, r7, r0
 8002708:	701a      	strb	r2, [r3, #0]
					addr[1]=soundInfo[3];
 800270a:	187b      	adds	r3, r7, r1
 800270c:	78da      	ldrb	r2, [r3, #3]
 800270e:	183b      	adds	r3, r7, r0
 8002710:	705a      	strb	r2, [r3, #1]
					addr[2]=soundInfo[2];
 8002712:	187b      	adds	r3, r7, r1
 8002714:	789a      	ldrb	r2, [r3, #2]
 8002716:	183b      	adds	r3, r7, r0
 8002718:	709a      	strb	r2, [r3, #2]
					addr[3]=soundInfo[1];
 800271a:	187b      	adds	r3, r7, r1
 800271c:	785a      	ldrb	r2, [r3, #1]
 800271e:	183b      	adds	r3, r7, r0
 8002720:	70da      	strb	r2, [r3, #3]


					length[0]=soundInfo[8];
 8002722:	187b      	adds	r3, r7, r1
 8002724:	7a1a      	ldrb	r2, [r3, #8]
 8002726:	240c      	movs	r4, #12
 8002728:	193b      	adds	r3, r7, r4
 800272a:	701a      	strb	r2, [r3, #0]
					length[1]=soundInfo[7];
 800272c:	187b      	adds	r3, r7, r1
 800272e:	79da      	ldrb	r2, [r3, #7]
 8002730:	193b      	adds	r3, r7, r4
 8002732:	705a      	strb	r2, [r3, #1]
					length[2]=soundInfo[6];
 8002734:	187b      	adds	r3, r7, r1
 8002736:	799a      	ldrb	r2, [r3, #6]
 8002738:	193b      	adds	r3, r7, r4
 800273a:	709a      	strb	r2, [r3, #2]
					length[3]=soundInfo[5];
 800273c:	187b      	adds	r3, r7, r1
 800273e:	795a      	ldrb	r2, [r3, #5]
 8002740:	0021      	movs	r1, r4
 8002742:	187b      	adds	r3, r7, r1
 8002744:	70da      	strb	r2, [r3, #3]

					len|=length[3];
 8002746:	187b      	adds	r3, r7, r1
 8002748:	78db      	ldrb	r3, [r3, #3]
 800274a:	001a      	movs	r2, r3
 800274c:	4b7a      	ldr	r3, [pc, #488]	; (8002938 <soundLoad+0x330>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	431a      	orrs	r2, r3
 8002752:	4b79      	ldr	r3, [pc, #484]	; (8002938 <soundLoad+0x330>)
 8002754:	601a      	str	r2, [r3, #0]
					len<<=8;
 8002756:	4b78      	ldr	r3, [pc, #480]	; (8002938 <soundLoad+0x330>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	021a      	lsls	r2, r3, #8
 800275c:	4b76      	ldr	r3, [pc, #472]	; (8002938 <soundLoad+0x330>)
 800275e:	601a      	str	r2, [r3, #0]
					len|=length[2];
 8002760:	187b      	adds	r3, r7, r1
 8002762:	789b      	ldrb	r3, [r3, #2]
 8002764:	001a      	movs	r2, r3
 8002766:	4b74      	ldr	r3, [pc, #464]	; (8002938 <soundLoad+0x330>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	431a      	orrs	r2, r3
 800276c:	4b72      	ldr	r3, [pc, #456]	; (8002938 <soundLoad+0x330>)
 800276e:	601a      	str	r2, [r3, #0]
					len<<=8;
 8002770:	4b71      	ldr	r3, [pc, #452]	; (8002938 <soundLoad+0x330>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	021a      	lsls	r2, r3, #8
 8002776:	4b70      	ldr	r3, [pc, #448]	; (8002938 <soundLoad+0x330>)
 8002778:	601a      	str	r2, [r3, #0]
					len|=length[1];
 800277a:	187b      	adds	r3, r7, r1
 800277c:	785b      	ldrb	r3, [r3, #1]
 800277e:	001a      	movs	r2, r3
 8002780:	4b6d      	ldr	r3, [pc, #436]	; (8002938 <soundLoad+0x330>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	431a      	orrs	r2, r3
 8002786:	4b6c      	ldr	r3, [pc, #432]	; (8002938 <soundLoad+0x330>)
 8002788:	601a      	str	r2, [r3, #0]
					len<<=8;
 800278a:	4b6b      	ldr	r3, [pc, #428]	; (8002938 <soundLoad+0x330>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	021a      	lsls	r2, r3, #8
 8002790:	4b69      	ldr	r3, [pc, #420]	; (8002938 <soundLoad+0x330>)
 8002792:	601a      	str	r2, [r3, #0]
					len|=length[0];
 8002794:	187b      	adds	r3, r7, r1
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	001a      	movs	r2, r3
 800279a:	4b67      	ldr	r3, [pc, #412]	; (8002938 <soundLoad+0x330>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	431a      	orrs	r2, r3
 80027a0:	4b65      	ldr	r3, [pc, #404]	; (8002938 <soundLoad+0x330>)
 80027a2:	601a      	str	r2, [r3, #0]

					addrSound|=addr[3];
 80027a4:	183b      	adds	r3, r7, r0
 80027a6:	78db      	ldrb	r3, [r3, #3]
 80027a8:	001a      	movs	r2, r3
 80027aa:	4b64      	ldr	r3, [pc, #400]	; (800293c <soundLoad+0x334>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	431a      	orrs	r2, r3
 80027b0:	4b62      	ldr	r3, [pc, #392]	; (800293c <soundLoad+0x334>)
 80027b2:	601a      	str	r2, [r3, #0]
					addrSound<<=8;
 80027b4:	4b61      	ldr	r3, [pc, #388]	; (800293c <soundLoad+0x334>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	021a      	lsls	r2, r3, #8
 80027ba:	4b60      	ldr	r3, [pc, #384]	; (800293c <soundLoad+0x334>)
 80027bc:	601a      	str	r2, [r3, #0]
					addrSound|=addr[2];
 80027be:	183b      	adds	r3, r7, r0
 80027c0:	789b      	ldrb	r3, [r3, #2]
 80027c2:	001a      	movs	r2, r3
 80027c4:	4b5d      	ldr	r3, [pc, #372]	; (800293c <soundLoad+0x334>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	431a      	orrs	r2, r3
 80027ca:	4b5c      	ldr	r3, [pc, #368]	; (800293c <soundLoad+0x334>)
 80027cc:	601a      	str	r2, [r3, #0]
					addrSound<<=8;
 80027ce:	4b5b      	ldr	r3, [pc, #364]	; (800293c <soundLoad+0x334>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	021a      	lsls	r2, r3, #8
 80027d4:	4b59      	ldr	r3, [pc, #356]	; (800293c <soundLoad+0x334>)
 80027d6:	601a      	str	r2, [r3, #0]
					addrSound|=addr[1];
 80027d8:	183b      	adds	r3, r7, r0
 80027da:	785b      	ldrb	r3, [r3, #1]
 80027dc:	001a      	movs	r2, r3
 80027de:	4b57      	ldr	r3, [pc, #348]	; (800293c <soundLoad+0x334>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	4b55      	ldr	r3, [pc, #340]	; (800293c <soundLoad+0x334>)
 80027e6:	601a      	str	r2, [r3, #0]
					addrSound<<=8;
 80027e8:	4b54      	ldr	r3, [pc, #336]	; (800293c <soundLoad+0x334>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	021a      	lsls	r2, r3, #8
 80027ee:	4b53      	ldr	r3, [pc, #332]	; (800293c <soundLoad+0x334>)
 80027f0:	601a      	str	r2, [r3, #0]
					addrSound|=addr[0];
 80027f2:	183b      	adds	r3, r7, r0
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	001a      	movs	r2, r3
 80027f8:	4b50      	ldr	r3, [pc, #320]	; (800293c <soundLoad+0x334>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	431a      	orrs	r2, r3
 80027fe:	4b4f      	ldr	r3, [pc, #316]	; (800293c <soundLoad+0x334>)
 8002800:	601a      	str	r2, [r3, #0]

					soundLen = len;
 8002802:	4b4d      	ldr	r3, [pc, #308]	; (8002938 <soundLoad+0x330>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	4b4e      	ldr	r3, [pc, #312]	; (8002940 <soundLoad+0x338>)
 8002808:	601a      	str	r2, [r3, #0]
					bufCount = len / bufLen;
 800280a:	4b4b      	ldr	r3, [pc, #300]	; (8002938 <soundLoad+0x330>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	0a9a      	lsrs	r2, r3, #10
 8002810:	4b4c      	ldr	r3, [pc, #304]	; (8002944 <soundLoad+0x33c>)
 8002812:	601a      	str	r2, [r3, #0]
			}
//			if(curBuf == (bufCount)){
//				return;
//			}
//				addrSound += (bufLen * curBuf);
				if (curBuf != 0){
 8002814:	4b42      	ldr	r3, [pc, #264]	; (8002920 <soundLoad+0x318>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d017      	beq.n	800284c <soundLoad+0x244>
					addr[0]=addrSound & 0xFF;
 800281c:	4b47      	ldr	r3, [pc, #284]	; (800293c <soundLoad+0x334>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	b2da      	uxtb	r2, r3
 8002822:	2110      	movs	r1, #16
 8002824:	187b      	adds	r3, r7, r1
 8002826:	701a      	strb	r2, [r3, #0]
					addr[1]=(addrSound >> 8) & 0xFF;
 8002828:	4b44      	ldr	r3, [pc, #272]	; (800293c <soundLoad+0x334>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	b2da      	uxtb	r2, r3
 8002830:	187b      	adds	r3, r7, r1
 8002832:	705a      	strb	r2, [r3, #1]
					addr[2]=(addrSound >> 16) & 0xFF;
 8002834:	4b41      	ldr	r3, [pc, #260]	; (800293c <soundLoad+0x334>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	0c1b      	lsrs	r3, r3, #16
 800283a:	b2da      	uxtb	r2, r3
 800283c:	187b      	adds	r3, r7, r1
 800283e:	709a      	strb	r2, [r3, #2]
					addr[3]=(addrSound >> 24) & 0xFF;
 8002840:	4b3e      	ldr	r3, [pc, #248]	; (800293c <soundLoad+0x334>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	0e1b      	lsrs	r3, r3, #24
 8002846:	b2da      	uxtb	r2, r3
 8002848:	187b      	adds	r3, r7, r1
 800284a:	70da      	strb	r2, [r3, #3]
				}

//			if(soundReady == 0){
				GPIOB->ODR &= ~(1 << 9); //reset FLASH CS
 800284c:	4b36      	ldr	r3, [pc, #216]	; (8002928 <soundLoad+0x320>)
 800284e:	695a      	ldr	r2, [r3, #20]
 8002850:	4b35      	ldr	r3, [pc, #212]	; (8002928 <soundLoad+0x320>)
 8002852:	4936      	ldr	r1, [pc, #216]	; (800292c <soundLoad+0x324>)
 8002854:	400a      	ands	r2, r1
 8002856:	615a      	str	r2, [r3, #20]
				HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8002858:	2323      	movs	r3, #35	; 0x23
 800285a:	18f9      	adds	r1, r7, r3
 800285c:	4834      	ldr	r0, [pc, #208]	; (8002930 <soundLoad+0x328>)
 800285e:	2332      	movs	r3, #50	; 0x32
 8002860:	2201      	movs	r2, #1
 8002862:	f006 fcb9 	bl	80091d8 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[3], 1, 50); //send address
 8002866:	2410      	movs	r4, #16
 8002868:	193b      	adds	r3, r7, r4
 800286a:	1cd9      	adds	r1, r3, #3
 800286c:	4830      	ldr	r0, [pc, #192]	; (8002930 <soundLoad+0x328>)
 800286e:	2332      	movs	r3, #50	; 0x32
 8002870:	2201      	movs	r2, #1
 8002872:	f006 fcb1 	bl	80091d8 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[2], 1, 50); //send address
 8002876:	193b      	adds	r3, r7, r4
 8002878:	1c99      	adds	r1, r3, #2
 800287a:	482d      	ldr	r0, [pc, #180]	; (8002930 <soundLoad+0x328>)
 800287c:	2332      	movs	r3, #50	; 0x32
 800287e:	2201      	movs	r2, #1
 8002880:	f006 fcaa 	bl	80091d8 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[1], 1, 50); //send address
 8002884:	193b      	adds	r3, r7, r4
 8002886:	1c59      	adds	r1, r3, #1
 8002888:	4829      	ldr	r0, [pc, #164]	; (8002930 <soundLoad+0x328>)
 800288a:	2332      	movs	r3, #50	; 0x32
 800288c:	2201      	movs	r2, #1
 800288e:	f006 fca3 	bl	80091d8 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[0], 1, 50); //send address
 8002892:	1939      	adds	r1, r7, r4
 8002894:	4826      	ldr	r0, [pc, #152]	; (8002930 <soundLoad+0x328>)
 8002896:	2332      	movs	r3, #50	; 0x32
 8002898:	2201      	movs	r2, #1
 800289a:	f006 fc9d 	bl	80091d8 <HAL_SPI_Transmit>
				HAL_SPI_Receive(&hspi2, (uint8_t*)SOUND1, bufLen,5000);
 800289e:	4c25      	ldr	r4, [pc, #148]	; (8002934 <soundLoad+0x32c>)
 80028a0:	2380      	movs	r3, #128	; 0x80
 80028a2:	00da      	lsls	r2, r3, #3
 80028a4:	4928      	ldr	r1, [pc, #160]	; (8002948 <soundLoad+0x340>)
 80028a6:	4822      	ldr	r0, [pc, #136]	; (8002930 <soundLoad+0x328>)
 80028a8:	0023      	movs	r3, r4
 80028aa:	f006 fded 	bl	8009488 <HAL_SPI_Receive>
//			GPIOB->ODR |= 1 << 9;	//set FLASH CS
				for (i = 0; i < bufLen; i++){
 80028ae:	2300      	movs	r3, #0
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
 80028b2:	e00a      	b.n	80028ca <soundLoad+0x2c2>
					SOUND2[i] = SOUND1[i];
 80028b4:	4b24      	ldr	r3, [pc, #144]	; (8002948 <soundLoad+0x340>)
 80028b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b8:	0052      	lsls	r2, r2, #1
 80028ba:	5ad1      	ldrh	r1, [r2, r3]
 80028bc:	4b23      	ldr	r3, [pc, #140]	; (800294c <soundLoad+0x344>)
 80028be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c0:	0052      	lsls	r2, r2, #1
 80028c2:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < bufLen; i++){
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	3301      	adds	r3, #1
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
 80028ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d3ef      	bcc.n	80028b4 <soundLoad+0x2ac>
//					HAL_I2S_Transmit(&hi2s1, (uint16_t*)SOUND2, bufLen, 5000);
//					HAL_Delay(500);
//				}
//			}
//			soundReady = 1;
				if ((curBuf == 0) && (soundReady == 0)){
 80028d4:	4b12      	ldr	r3, [pc, #72]	; (8002920 <soundLoad+0x318>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10a      	bne.n	80028f2 <soundLoad+0x2ea>
 80028dc:	1dbb      	adds	r3, r7, #6
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d106      	bne.n	80028f2 <soundLoad+0x2ea>
					HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)SOUND2, bufLen);
 80028e4:	2380      	movs	r3, #128	; 0x80
 80028e6:	00da      	lsls	r2, r3, #3
 80028e8:	4918      	ldr	r1, [pc, #96]	; (800294c <soundLoad+0x344>)
 80028ea:	4b19      	ldr	r3, [pc, #100]	; (8002950 <soundLoad+0x348>)
 80028ec:	0018      	movs	r0, r3
 80028ee:	f004 ffcd 	bl	800788c <HAL_I2S_Transmit_DMA>
//				curBuf = 0;
				}
			}
			if (soundReady ==1){
 80028f2:	1dbb      	adds	r3, r7, #6
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d10d      	bne.n	8002916 <soundLoad+0x30e>
//				if (curBuf != 0){
					HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)SOUND2, bufLen);
 80028fa:	2380      	movs	r3, #128	; 0x80
 80028fc:	00da      	lsls	r2, r3, #3
 80028fe:	4913      	ldr	r1, [pc, #76]	; (800294c <soundLoad+0x344>)
 8002900:	4b13      	ldr	r3, [pc, #76]	; (8002950 <soundLoad+0x348>)
 8002902:	0018      	movs	r0, r3
 8002904:	f004 ffc2 	bl	800788c <HAL_I2S_Transmit_DMA>
					HAL_Delay(500);
 8002908:	23fa      	movs	r3, #250	; 0xfa
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	0018      	movs	r0, r3
 800290e:	f002 fced 	bl	80052ec <HAL_Delay>
 8002912:	e000      	b.n	8002916 <soundLoad+0x30e>
			if(isSoundOver == 1){return;}
 8002914:	46c0      	nop			; (mov r8, r8)
//				}
			}

//			HAL_Delay(500);
//			SoundPlay();
		}
 8002916:	0018      	movs	r0, r3
 8002918:	46bd      	mov	sp, r7
 800291a:	b00b      	add	sp, #44	; 0x2c
 800291c:	bd90      	pop	{r4, r7, pc}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	20000324 	.word	0x20000324
 8002924:	2000031c 	.word	0x2000031c
 8002928:	50000400 	.word	0x50000400
 800292c:	fffffdff 	.word	0xfffffdff
 8002930:	200001a0 	.word	0x200001a0
 8002934:	00001388 	.word	0x00001388
 8002938:	20000318 	.word	0x20000318
 800293c:	20001330 	.word	0x20001330
 8002940:	2000132c 	.word	0x2000132c
 8002944:	20000328 	.word	0x20000328
 8002948:	2000032c 	.word	0x2000032c
 800294c:	20000b2c 	.word	0x20000b2c
 8002950:	20000108 	.word	0x20000108

08002954 <soundPlay>:
//=========================================================================================================================
	uint8_t soundPlay(uint8_t soundNum) {
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	0002      	movs	r2, r0
 800295c:	1dfb      	adds	r3, r7, #7
 800295e:	701a      	strb	r2, [r3, #0]
//		HAL_Delay(500);

//		HAL_Delay(500);
			I2C_SOUND_ChangePage(0x01);
 8002960:	2001      	movs	r0, #1
 8002962:	f7fe feb7 	bl	80016d4 <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x01, 0x00);
 8002966:	2100      	movs	r1, #0
 8002968:	2001      	movs	r0, #1
 800296a:	f7fe fed1 	bl	8001710 <WriteReg_I2C_SOUND>
			I2C_SOUND_ChangePage(0x00);
 800296e:	2000      	movs	r0, #0
 8002970:	f7fe feb0 	bl	80016d4 <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x41, 0x30);// 0x81 - 0x30 available
 8002974:	2130      	movs	r1, #48	; 0x30
 8002976:	2041      	movs	r0, #65	; 0x41
 8002978:	f7fe feca 	bl	8001710 <WriteReg_I2C_SOUND>
		//	I2C_SOUND_ChangePage(0x00);
			I2C_SOUND_ChangePage(0x01);
 800297c:	2001      	movs	r0, #1
 800297e:	f7fe fea9 	bl	80016d4 <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 8002982:	2100      	movs	r1, #0
 8002984:	2010      	movs	r0, #16
 8002986:	f7fe fec3 	bl	8001710 <WriteReg_I2C_SOUND>
			WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 800298a:	2124      	movs	r1, #36	; 0x24
 800298c:	202e      	movs	r0, #46	; 0x2e
 800298e:	f7fe febf 	bl	8001710 <WriteReg_I2C_SOUND>
			curBuf = 0;
 8002992:	4b07      	ldr	r3, [pc, #28]	; (80029b0 <soundPlay+0x5c>)
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
			soundLoad(soundNum, 0, 0);
 8002998:	1dfb      	adds	r3, r7, #7
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2200      	movs	r2, #0
 800299e:	2100      	movs	r1, #0
 80029a0:	0018      	movs	r0, r3
 80029a2:	f7ff fe31 	bl	8002608 <soundLoad>
//			HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)SOUND, 16384/2); //HAL_MAX_DELAY

//			HAL_I2S_Transmit(&hi2s1, (uint16_t*)SOUND,4096,5000);
//		squeak_double(signal);
		}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	0018      	movs	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	b002      	add	sp, #8
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20000324 	.word	0x20000324

080029b4 <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOB->ODR |= 1 << 9;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 80029ba:	1d3b      	adds	r3, r7, #4
 80029bc:	4a29      	ldr	r2, [pc, #164]	; (8002a64 <MEM_GetID+0xb0>)
 80029be:	7812      	ldrb	r2, [r2, #0]
 80029c0:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 80029c2:	1dfb      	adds	r3, r7, #7
 80029c4:	229e      	movs	r2, #158	; 0x9e
 80029c6:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 <<9);	//reset cs
 80029c8:	4b27      	ldr	r3, [pc, #156]	; (8002a68 <MEM_GetID+0xb4>)
 80029ca:	695a      	ldr	r2, [r3, #20]
 80029cc:	4b26      	ldr	r3, [pc, #152]	; (8002a68 <MEM_GetID+0xb4>)
 80029ce:	4927      	ldr	r1, [pc, #156]	; (8002a6c <MEM_GetID+0xb8>)
 80029d0:	400a      	ands	r2, r1
 80029d2:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 80029d4:	1df9      	adds	r1, r7, #7
 80029d6:	4826      	ldr	r0, [pc, #152]	; (8002a70 <MEM_GetID+0xbc>)
 80029d8:	2332      	movs	r3, #50	; 0x32
 80029da:	2201      	movs	r2, #1
 80029dc:	f006 fbfc 	bl	80091d8 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 80029e0:	23fa      	movs	r3, #250	; 0xfa
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	1d39      	adds	r1, r7, #4
 80029e6:	4822      	ldr	r0, [pc, #136]	; (8002a70 <MEM_GetID+0xbc>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	f006 fd4d 	bl	8009488 <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 80029ee:	1d3b      	adds	r3, r7, #4
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	001a      	movs	r2, r3
 80029f4:	4b1f      	ldr	r3, [pc, #124]	; (8002a74 <MEM_GetID+0xc0>)
 80029f6:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 80029f8:	4b1e      	ldr	r3, [pc, #120]	; (8002a74 <MEM_GetID+0xc0>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	021a      	lsls	r2, r3, #8
 80029fe:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <MEM_GetID+0xc0>)
 8002a00:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002a02:	23fa      	movs	r3, #250	; 0xfa
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	1d39      	adds	r1, r7, #4
 8002a08:	4819      	ldr	r0, [pc, #100]	; (8002a70 <MEM_GetID+0xbc>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f006 fd3c 	bl	8009488 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002a10:	1d3b      	adds	r3, r7, #4
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	001a      	movs	r2, r3
 8002a16:	4b17      	ldr	r3, [pc, #92]	; (8002a74 <MEM_GetID+0xc0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	18d2      	adds	r2, r2, r3
 8002a1c:	4b15      	ldr	r3, [pc, #84]	; (8002a74 <MEM_GetID+0xc0>)
 8002a1e:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 8002a20:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <MEM_GetID+0xc0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	021a      	lsls	r2, r3, #8
 8002a26:	4b13      	ldr	r3, [pc, #76]	; (8002a74 <MEM_GetID+0xc0>)
 8002a28:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002a2a:	23fa      	movs	r3, #250	; 0xfa
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	1d39      	adds	r1, r7, #4
 8002a30:	480f      	ldr	r0, [pc, #60]	; (8002a70 <MEM_GetID+0xbc>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	f006 fd28 	bl	8009488 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002a38:	1d3b      	adds	r3, r7, #4
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	001a      	movs	r2, r3
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	; (8002a74 <MEM_GetID+0xc0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	18d2      	adds	r2, r2, r3
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <MEM_GetID+0xc0>)
 8002a46:	601a      	str	r2, [r3, #0]
		GPIOB->ODR |= 1 << 9;                    			// set cs
 8002a48:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <MEM_GetID+0xb4>)
 8002a4a:	695a      	ldr	r2, [r3, #20]
 8002a4c:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <MEM_GetID+0xb4>)
 8002a4e:	2180      	movs	r1, #128	; 0x80
 8002a50:	0089      	lsls	r1, r1, #2
 8002a52:	430a      	orrs	r2, r1
 8002a54:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 8002a56:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <MEM_GetID+0xc0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
	}
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	b002      	add	sp, #8
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	0800c834 	.word	0x0800c834
 8002a68:	50000400 	.word	0x50000400
 8002a6c:	fffffdff 	.word	0xfffffdff
 8002a70:	200001a0 	.word	0x200001a0
 8002a74:	200002d8 	.word	0x200002d8

08002a78 <cmdExecute>:
	uint16_t Scount(void){
		LIS3DHreadData();

	}
//====================================================================================================================
	uint8_t cmdExecute(uint8_t cmd2Execute){
 8002a78:	b590      	push	{r4, r7, lr}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	0002      	movs	r2, r0
 8002a80:	1dfb      	adds	r3, r7, #7
 8002a82:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8002a84:	4b67      	ldr	r3, [pc, #412]	; (8002c24 <cmdExecute+0x1ac>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b10      	cmp	r3, #16
 8002a8a:	d100      	bne.n	8002a8e <cmdExecute+0x16>
 8002a8c:	e0c3      	b.n	8002c16 <cmdExecute+0x19e>
//		if(soundReady==0){return;}
//		if(cmd[0]==00){return;}
		if (bf4me!=0x00){return;}	// protection against false BF resets
 8002a8e:	4b66      	ldr	r3, [pc, #408]	; (8002c28 <cmdExecute+0x1b0>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d000      	beq.n	8002a98 <cmdExecute+0x20>
 8002a96:	e0c0      	b.n	8002c1a <cmdExecute+0x1a2>
		USART2->ICR|=USART_ICR_ORECF;
 8002a98:	4b64      	ldr	r3, [pc, #400]	; (8002c2c <cmdExecute+0x1b4>)
 8002a9a:	6a1a      	ldr	r2, [r3, #32]
 8002a9c:	4b63      	ldr	r3, [pc, #396]	; (8002c2c <cmdExecute+0x1b4>)
 8002a9e:	2108      	movs	r1, #8
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	621a      	str	r2, [r3, #32]

				}
		if(cmd2Execute==0x10){

				}
		if(cmd2Execute==0x11){
 8002aa4:	1dfb      	adds	r3, r7, #7
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b11      	cmp	r3, #17
 8002aaa:	d113      	bne.n	8002ad4 <cmdExecute+0x5c>
			GPIOC->ODR &=~ GPIO_ODR_OD6;
 8002aac:	4b60      	ldr	r3, [pc, #384]	; (8002c30 <cmdExecute+0x1b8>)
 8002aae:	695a      	ldr	r2, [r3, #20]
 8002ab0:	4b5f      	ldr	r3, [pc, #380]	; (8002c30 <cmdExecute+0x1b8>)
 8002ab2:	2140      	movs	r1, #64	; 0x40
 8002ab4:	438a      	bics	r2, r1
 8002ab6:	615a      	str	r2, [r3, #20]
			bf4me=0x11;	//set BF flag 4 me
 8002ab8:	4b5b      	ldr	r3, [pc, #364]	; (8002c28 <cmdExecute+0x1b0>)
 8002aba:	2211      	movs	r2, #17
 8002abc:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
			weoShowFullScreen(picNum);
 8002abe:	4b5d      	ldr	r3, [pc, #372]	; (8002c34 <cmdExecute+0x1bc>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f7ff fb9a 	bl	80021fc <weoShowFullScreen>
//			weoShowFullScreenDMA(picNum);
			USART2->ICR|=USART_ICR_ORECF;
 8002ac8:	4b58      	ldr	r3, [pc, #352]	; (8002c2c <cmdExecute+0x1b4>)
 8002aca:	6a1a      	ldr	r2, [r3, #32]
 8002acc:	4b57      	ldr	r3, [pc, #348]	; (8002c2c <cmdExecute+0x1b4>)
 8002ace:	2108      	movs	r1, #8
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	621a      	str	r2, [r3, #32]
				}
		if(cmd2Execute==0x12){
 8002ad4:	1dfb      	adds	r3, r7, #7
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b12      	cmp	r3, #18
 8002ada:	d10d      	bne.n	8002af8 <cmdExecute+0x80>
			bf4me=0x12;	//set BF flag 4 me
 8002adc:	4b52      	ldr	r3, [pc, #328]	; (8002c28 <cmdExecute+0x1b0>)
 8002ade:	2212      	movs	r2, #18
 8002ae0:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowSmallImageDMA(picNum,imX,imY);
			weoShowSmallImage(picNum,imX,imY);
 8002ae2:	4b54      	ldr	r3, [pc, #336]	; (8002c34 <cmdExecute+0x1bc>)
 8002ae4:	7818      	ldrb	r0, [r3, #0]
 8002ae6:	4b54      	ldr	r3, [pc, #336]	; (8002c38 <cmdExecute+0x1c0>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	b2d9      	uxtb	r1, r3
 8002aec:	4b53      	ldr	r3, [pc, #332]	; (8002c3c <cmdExecute+0x1c4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	001a      	movs	r2, r3
 8002af4:	f7ff fc20 	bl	8002338 <weoShowSmallImage>
				}
		if(cmd2Execute==0x13){
 8002af8:	1dfb      	adds	r3, r7, #7
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b13      	cmp	r3, #19
 8002afe:	d111      	bne.n	8002b24 <cmdExecute+0xac>
			bf4me=0x13;	//set BF flag 4 me
 8002b00:	4b49      	ldr	r3, [pc, #292]	; (8002c28 <cmdExecute+0x1b0>)
 8002b02:	2213      	movs	r2, #19
 8002b04:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY,strLen,fontInfo,dataASCII);
 8002b06:	4b4c      	ldr	r3, [pc, #304]	; (8002c38 <cmdExecute+0x1c0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	b2d8      	uxtb	r0, r3
 8002b0c:	4b4b      	ldr	r3, [pc, #300]	; (8002c3c <cmdExecute+0x1c4>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	b2d9      	uxtb	r1, r3
 8002b12:	4b4b      	ldr	r3, [pc, #300]	; (8002c40 <cmdExecute+0x1c8>)
 8002b14:	781a      	ldrb	r2, [r3, #0]
 8002b16:	4b4b      	ldr	r3, [pc, #300]	; (8002c44 <cmdExecute+0x1cc>)
 8002b18:	781c      	ldrb	r4, [r3, #0]
 8002b1a:	4b4b      	ldr	r3, [pc, #300]	; (8002c48 <cmdExecute+0x1d0>)
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	0023      	movs	r3, r4
 8002b20:	f000 f898 	bl	8002c54 <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 8002b24:	1dfb      	adds	r3, r7, #7
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b14      	cmp	r3, #20
 8002b2a:	d10b      	bne.n	8002b44 <cmdExecute+0xcc>
//			if(soundReady!=1){return;}
			bf4me=0x14;	//set BF flag 4 me
 8002b2c:	4b3e      	ldr	r3, [pc, #248]	; (8002c28 <cmdExecute+0x1b0>)
 8002b2e:	2214      	movs	r2, #20
 8002b30:	701a      	strb	r2, [r3, #0]
//				squeak_long(signal);
				}
//			if(soundNum!=1){
//			HAL_Delay(500);
//			}
			cmd2Execute=0;
 8002b32:	1dfb      	adds	r3, r7, #7
 8002b34:	2200      	movs	r2, #0
 8002b36:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
			GPIOC->ODR |= 1 << 6;	//set BF
 8002b38:	4b3d      	ldr	r3, [pc, #244]	; (8002c30 <cmdExecute+0x1b8>)
 8002b3a:	695a      	ldr	r2, [r3, #20]
 8002b3c:	4b3c      	ldr	r3, [pc, #240]	; (8002c30 <cmdExecute+0x1b8>)
 8002b3e:	2140      	movs	r1, #64	; 0x40
 8002b40:	430a      	orrs	r2, r1
 8002b42:	615a      	str	r2, [r3, #20]

		}
		if(cmd2Execute==0x15){
 8002b44:	1dfb      	adds	r3, r7, #7
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b15      	cmp	r3, #21
 8002b4a:	d153      	bne.n	8002bf4 <cmdExecute+0x17c>
			bf4me=0x15;	//set BF flag 4 me
 8002b4c:	4b36      	ldr	r3, [pc, #216]	; (8002c28 <cmdExecute+0x1b0>)
 8002b4e:	2215      	movs	r2, #21
 8002b50:	701a      	strb	r2, [r3, #0]
			I2C_SOUND_ChangePage(0x01);
 8002b52:	2001      	movs	r0, #1
 8002b54:	f7fe fdbe 	bl	80016d4 <I2C_SOUND_ChangePage>
//			WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
			if(volume==0x00){
 8002b58:	4b3c      	ldr	r3, [pc, #240]	; (8002c4c <cmdExecute+0x1d4>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d106      	bne.n	8002b6e <cmdExecute+0xf6>
				I2C_SOUND_ChangePage(0x01);
 8002b60:	2001      	movs	r0, #1
 8002b62:	f7fe fdb7 	bl	80016d4 <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x2E,0xFF);// mute
 8002b66:	21ff      	movs	r1, #255	; 0xff
 8002b68:	202e      	movs	r0, #46	; 0x2e
 8002b6a:	f7fe fdd1 	bl	8001710 <WriteReg_I2C_SOUND>
			}
			I2C_SOUND_ChangePage(0x01);
 8002b6e:	2001      	movs	r0, #1
 8002b70:	f7fe fdb0 	bl	80016d4 <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x2E, volume);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 8002b74:	4b35      	ldr	r3, [pc, #212]	; (8002c4c <cmdExecute+0x1d4>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	0019      	movs	r1, r3
 8002b7a:	202e      	movs	r0, #46	; 0x2e
 8002b7c:	f7fe fdc8 	bl	8001710 <WriteReg_I2C_SOUND>

			if(contrast==0x00){
 8002b80:	4b33      	ldr	r3, [pc, #204]	; (8002c50 <cmdExecute+0x1d8>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d102      	bne.n	8002b8e <cmdExecute+0x116>
				weoClear();
 8002b88:	f7fe fc5a 	bl	8001440 <weoClear>
 8002b8c:	e029      	b.n	8002be2 <cmdExecute+0x16a>
			}
			else{
				GPIOA->ODR &= ~(1 << 6);	//reset cs
 8002b8e:	23a0      	movs	r3, #160	; 0xa0
 8002b90:	05db      	lsls	r3, r3, #23
 8002b92:	695a      	ldr	r2, [r3, #20]
 8002b94:	23a0      	movs	r3, #160	; 0xa0
 8002b96:	05db      	lsls	r3, r3, #23
 8002b98:	2140      	movs	r1, #64	; 0x40
 8002b9a:	438a      	bics	r2, r1
 8002b9c:	615a      	str	r2, [r3, #20]
				GPIOA->ODR &= ~(1 << 7);	// reset dc
 8002b9e:	23a0      	movs	r3, #160	; 0xa0
 8002ba0:	05db      	lsls	r3, r3, #23
 8002ba2:	695a      	ldr	r2, [r3, #20]
 8002ba4:	23a0      	movs	r3, #160	; 0xa0
 8002ba6:	05db      	lsls	r3, r3, #23
 8002ba8:	2180      	movs	r1, #128	; 0x80
 8002baa:	438a      	bics	r2, r1
 8002bac:	615a      	str	r2, [r3, #20]
				USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8002bae:	2081      	movs	r0, #129	; 0x81
 8002bb0:	f7fe fb98 	bl	80012e4 <USART_AS_SPI_sendCMD>
				USART_AS_SPI_sendCMD(contrast*0x10);
 8002bb4:	4b26      	ldr	r3, [pc, #152]	; (8002c50 <cmdExecute+0x1d8>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f7fe fb91 	bl	80012e4 <USART_AS_SPI_sendCMD>
				GPIOA->ODR |= 1 << 7;	//set dc
 8002bc2:	23a0      	movs	r3, #160	; 0xa0
 8002bc4:	05db      	lsls	r3, r3, #23
 8002bc6:	695a      	ldr	r2, [r3, #20]
 8002bc8:	23a0      	movs	r3, #160	; 0xa0
 8002bca:	05db      	lsls	r3, r3, #23
 8002bcc:	2180      	movs	r1, #128	; 0x80
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= 1 << 6;	//set cs
 8002bd2:	23a0      	movs	r3, #160	; 0xa0
 8002bd4:	05db      	lsls	r3, r3, #23
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	23a0      	movs	r3, #160	; 0xa0
 8002bda:	05db      	lsls	r3, r3, #23
 8002bdc:	2140      	movs	r1, #64	; 0x40
 8002bde:	430a      	orrs	r2, r1
 8002be0:	615a      	str	r2, [r3, #20]
			}
//			bf4me=0x15;	//set BF flag 4 me
			cmd2Execute=0;
 8002be2:	1dfb      	adds	r3, r7, #7
 8002be4:	2200      	movs	r2, #0
 8002be6:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
			GPIOC->ODR |= 1 << 6;	//set BF
 8002be8:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <cmdExecute+0x1b8>)
 8002bea:	695a      	ldr	r2, [r3, #20]
 8002bec:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <cmdExecute+0x1b8>)
 8002bee:	2140      	movs	r1, #64	; 0x40
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	615a      	str	r2, [r3, #20]
		}
		if(cmd2Execute==0x16){
 8002bf4:	1dfb      	adds	r3, r7, #7
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b16      	cmp	r3, #22
 8002bfa:	d102      	bne.n	8002c02 <cmdExecute+0x18a>
			bf4me=0x16;	//set BF flag 4 me
 8002bfc:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <cmdExecute+0x1b0>)
 8002bfe:	2216      	movs	r2, #22
 8002c00:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 8002c02:	1dfb      	adds	r3, r7, #7
 8002c04:	2200      	movs	r2, #0
 8002c06:	701a      	strb	r2, [r3, #0]

				}
//			}
//		}
		USART2->ICR|=USART_ICR_ORECF;
 8002c08:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <cmdExecute+0x1b4>)
 8002c0a:	6a1a      	ldr	r2, [r3, #32]
 8002c0c:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <cmdExecute+0x1b4>)
 8002c0e:	2108      	movs	r1, #8
 8002c10:	430a      	orrs	r2, r1
 8002c12:	621a      	str	r2, [r3, #32]
 8002c14:	e002      	b.n	8002c1c <cmdExecute+0x1a4>
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	e000      	b.n	8002c1c <cmdExecute+0x1a4>
		if (bf4me!=0x00){return;}	// protection against false BF resets
 8002c1a:	46c0      	nop			; (mov r8, r8)
	}
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	b003      	add	sp, #12
 8002c22:	bd90      	pop	{r4, r7, pc}
 8002c24:	200002dc 	.word	0x200002dc
 8002c28:	20000313 	.word	0x20000313
 8002c2c:	40004400 	.word	0x40004400
 8002c30:	50000800 	.word	0x50000800
 8002c34:	200002b1 	.word	0x200002b1
 8002c38:	200002b8 	.word	0x200002b8
 8002c3c:	200002bc 	.word	0x200002bc
 8002c40:	200002b6 	.word	0x200002b6
 8002c44:	20000321 	.word	0x20000321
 8002c48:	200002c4 	.word	0x200002c4
 8002c4c:	200002b3 	.word	0x200002b3
 8002c50:	200002b4 	.word	0x200002b4

08002c54 <printASCIIarray>:
//========================================================================================================================
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t fontInfo,uint8_t dataASCII[]){
 8002c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c56:	46ce      	mov	lr, r9
 8002c58:	4647      	mov	r7, r8
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b0e5      	sub	sp, #404	; 0x194
 8002c5e:	af02      	add	r7, sp, #8
 8002c60:	0016      	movs	r6, r2
 8002c62:	469c      	mov	ip, r3
 8002c64:	2320      	movs	r3, #32
 8002c66:	33ff      	adds	r3, #255	; 0xff
 8002c68:	2208      	movs	r2, #8
 8002c6a:	189b      	adds	r3, r3, r2
 8002c6c:	19da      	adds	r2, r3, r7
 8002c6e:	1c03      	adds	r3, r0, #0
 8002c70:	7013      	strb	r3, [r2, #0]
 8002c72:	238f      	movs	r3, #143	; 0x8f
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	2208      	movs	r2, #8
 8002c78:	189b      	adds	r3, r3, r2
 8002c7a:	19da      	adds	r2, r3, r7
 8002c7c:	1c0b      	adds	r3, r1, #0
 8002c7e:	7013      	strb	r3, [r2, #0]
 8002c80:	221e      	movs	r2, #30
 8002c82:	32ff      	adds	r2, #255	; 0xff
 8002c84:	2308      	movs	r3, #8
 8002c86:	18d3      	adds	r3, r2, r3
 8002c88:	19da      	adds	r2, r3, r7
 8002c8a:	1c33      	adds	r3, r6, #0
 8002c8c:	7013      	strb	r3, [r2, #0]
 8002c8e:	268e      	movs	r6, #142	; 0x8e
 8002c90:	0076      	lsls	r6, r6, #1
 8002c92:	2308      	movs	r3, #8
 8002c94:	18f3      	adds	r3, r6, r3
 8002c96:	19da      	adds	r2, r3, r7
 8002c98:	4663      	mov	r3, ip
 8002c9a:	7013      	strb	r3, [r2, #0]
			uint8_t X_increment,ASCII_height,X_width,ASCII_X,decY,fontCur,contrast,contrastH,contrastL;
//			uint8_t weoBuffer1[49],weoBuffer2[49],weoBuffer[49];
			uint16_t i,j,k, symLen;
			ASCII_X=imX;
 8002c9c:	235f      	movs	r3, #95	; 0x5f
 8002c9e:	218c      	movs	r1, #140	; 0x8c
 8002ca0:	0049      	lsls	r1, r1, #1
 8002ca2:	185a      	adds	r2, r3, r1
 8002ca4:	2308      	movs	r3, #8
 8002ca6:	469c      	mov	ip, r3
 8002ca8:	44bc      	add	ip, r7
 8002caa:	4462      	add	r2, ip
 8002cac:	2020      	movs	r0, #32
 8002cae:	30ff      	adds	r0, #255	; 0xff
 8002cb0:	2308      	movs	r3, #8
 8002cb2:	18c3      	adds	r3, r0, r3
 8002cb4:	19db      	adds	r3, r3, r7
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	7013      	strb	r3, [r2, #0]

			contrastL = (fontInfo & 0xF0)>>4;
 8002cba:	205e      	movs	r0, #94	; 0x5e
 8002cbc:	1842      	adds	r2, r0, r1
 8002cbe:	2308      	movs	r3, #8
 8002cc0:	469c      	mov	ip, r3
 8002cc2:	44bc      	add	ip, r7
 8002cc4:	4462      	add	r2, ip
 8002cc6:	2308      	movs	r3, #8
 8002cc8:	18f3      	adds	r3, r6, r3
 8002cca:	19db      	adds	r3, r3, r7
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	091b      	lsrs	r3, r3, #4
 8002cd0:	7013      	strb	r3, [r2, #0]
			contrastH = (contrastL)<<4;
 8002cd2:	265d      	movs	r6, #93	; 0x5d
 8002cd4:	1872      	adds	r2, r6, r1
 8002cd6:	2308      	movs	r3, #8
 8002cd8:	469c      	mov	ip, r3
 8002cda:	44bc      	add	ip, r7
 8002cdc:	4462      	add	r2, ip
 8002cde:	1843      	adds	r3, r0, r1
 8002ce0:	603b      	str	r3, [r7, #0]
 8002ce2:	2308      	movs	r3, #8
 8002ce4:	469c      	mov	ip, r3
 8002ce6:	44bc      	add	ip, r7
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	4463      	add	r3, ip
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	7013      	strb	r3, [r2, #0]
			contrast = contrastH|contrastL;
 8002cf2:	235c      	movs	r3, #92	; 0x5c
 8002cf4:	000a      	movs	r2, r1
 8002cf6:	1859      	adds	r1, r3, r1
 8002cf8:	2308      	movs	r3, #8
 8002cfa:	469c      	mov	ip, r3
 8002cfc:	44bc      	add	ip, r7
 8002cfe:	4461      	add	r1, ip
 8002d00:	0013      	movs	r3, r2
 8002d02:	18f2      	adds	r2, r6, r3
 8002d04:	2608      	movs	r6, #8
 8002d06:	46b4      	mov	ip, r6
 8002d08:	44bc      	add	ip, r7
 8002d0a:	4462      	add	r2, ip
 8002d0c:	001e      	movs	r6, r3
 8002d0e:	18c0      	adds	r0, r0, r3
 8002d10:	2308      	movs	r3, #8
 8002d12:	18fb      	adds	r3, r7, r3
 8002d14:	18c3      	adds	r3, r0, r3
 8002d16:	7812      	ldrb	r2, [r2, #0]
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	700b      	strb	r3, [r1, #0]
//			contrast = (fontInfo & 0xF0)>>4;
//			contrast=0x33;

			decY=0x01;
 8002d1e:	2160      	movs	r1, #96	; 0x60
 8002d20:	0030      	movs	r0, r6
 8002d22:	180a      	adds	r2, r1, r0
 8002d24:	2308      	movs	r3, #8
 8002d26:	469c      	mov	ip, r3
 8002d28:	44bc      	add	ip, r7
 8002d2a:	4462      	add	r2, ip
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	7013      	strb	r3, [r2, #0]
			if(imY % 2 !=0){
 8002d30:	238f      	movs	r3, #143	; 0x8f
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	2208      	movs	r2, #8
 8002d36:	189b      	adds	r3, r3, r2
 8002d38:	19db      	adds	r3, r3, r7
 8002d3a:	781a      	ldrb	r2, [r3, #0]
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	4013      	ands	r3, r2
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d005      	beq.n	8002d52 <printASCIIarray+0xfe>
				decY=0x02;
 8002d46:	180b      	adds	r3, r1, r0
 8002d48:	2208      	movs	r2, #8
 8002d4a:	18ba      	adds	r2, r7, r2
 8002d4c:	189a      	adds	r2, r3, r2
 8002d4e:	2302      	movs	r3, #2
 8002d50:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x00)==0){
				fontCur=0;
 8002d52:	2161      	movs	r1, #97	; 0x61
 8002d54:	208c      	movs	r0, #140	; 0x8c
 8002d56:	0040      	lsls	r0, r0, #1
 8002d58:	180b      	adds	r3, r1, r0
 8002d5a:	2208      	movs	r2, #8
 8002d5c:	18ba      	adds	r2, r7, r2
 8002d5e:	189a      	adds	r2, r3, r2
 8002d60:	2300      	movs	r3, #0
 8002d62:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x01)==1){
 8002d64:	238e      	movs	r3, #142	; 0x8e
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	2208      	movs	r2, #8
 8002d6a:	189b      	adds	r3, r3, r2
 8002d6c:	19db      	adds	r3, r3, r7
 8002d6e:	781a      	ldrb	r2, [r3, #0]
 8002d70:	2301      	movs	r3, #1
 8002d72:	4013      	ands	r3, r2
 8002d74:	d005      	beq.n	8002d82 <printASCIIarray+0x12e>
				fontCur=1;
 8002d76:	180b      	adds	r3, r1, r0
 8002d78:	2208      	movs	r2, #8
 8002d7a:	18ba      	adds	r2, r7, r2
 8002d7c:	189a      	adds	r2, r3, r2
 8002d7e:	2301      	movs	r3, #1
 8002d80:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x02)==2){
 8002d82:	238e      	movs	r3, #142	; 0x8e
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	2208      	movs	r2, #8
 8002d88:	189b      	adds	r3, r3, r2
 8002d8a:	19db      	adds	r3, r3, r7
 8002d8c:	781a      	ldrb	r2, [r3, #0]
 8002d8e:	2302      	movs	r3, #2
 8002d90:	4013      	ands	r3, r2
 8002d92:	d008      	beq.n	8002da6 <printASCIIarray+0x152>
				fontCur=2;
 8002d94:	2361      	movs	r3, #97	; 0x61
 8002d96:	228c      	movs	r2, #140	; 0x8c
 8002d98:	0052      	lsls	r2, r2, #1
 8002d9a:	189b      	adds	r3, r3, r2
 8002d9c:	2208      	movs	r2, #8
 8002d9e:	18ba      	adds	r2, r7, r2
 8002da0:	189a      	adds	r2, r3, r2
 8002da2:	2302      	movs	r3, #2
 8002da4:	7013      	strb	r3, [r2, #0]
			}
//			fontCur=2;
			if(fontCur==0){
 8002da6:	2361      	movs	r3, #97	; 0x61
 8002da8:	268c      	movs	r6, #140	; 0x8c
 8002daa:	0076      	lsls	r6, r6, #1
 8002dac:	199b      	adds	r3, r3, r6
 8002dae:	2208      	movs	r2, #8
 8002db0:	4694      	mov	ip, r2
 8002db2:	44bc      	add	ip, r7
 8002db4:	4463      	add	r3, ip
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d000      	beq.n	8002dbe <printASCIIarray+0x16a>
 8002dbc:	e2a7      	b.n	800330e <printASCIIarray+0x6ba>
 8002dbe:	466b      	mov	r3, sp
 8002dc0:	4698      	mov	r8, r3
				symLen=49;
 8002dc2:	215a      	movs	r1, #90	; 0x5a
 8002dc4:	198b      	adds	r3, r1, r6
 8002dc6:	2208      	movs	r2, #8
 8002dc8:	18ba      	adds	r2, r7, r2
 8002dca:	189a      	adds	r2, r3, r2
 8002dcc:	2331      	movs	r3, #49	; 0x31
 8002dce:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 8002dd0:	198b      	adds	r3, r1, r6
 8002dd2:	2208      	movs	r2, #8
 8002dd4:	4694      	mov	ip, r2
 8002dd6:	44bc      	add	ip, r7
 8002dd8:	4463      	add	r3, ip
 8002dda:	881a      	ldrh	r2, [r3, #0]
 8002ddc:	0013      	movs	r3, r2
 8002dde:	3b01      	subs	r3, #1
 8002de0:	21b6      	movs	r1, #182	; 0xb6
 8002de2:	0049      	lsls	r1, r1, #1
 8002de4:	2008      	movs	r0, #8
 8002de6:	1809      	adds	r1, r1, r0
 8002de8:	19c9      	adds	r1, r1, r7
 8002dea:	600b      	str	r3, [r1, #0]
 8002dec:	2188      	movs	r1, #136	; 0x88
 8002dee:	2308      	movs	r3, #8
 8002df0:	18cb      	adds	r3, r1, r3
 8002df2:	19db      	adds	r3, r3, r7
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	2300      	movs	r3, #0
 8002df8:	208c      	movs	r0, #140	; 0x8c
 8002dfa:	2608      	movs	r6, #8
 8002dfc:	1980      	adds	r0, r0, r6
 8002dfe:	19c0      	adds	r0, r0, r7
 8002e00:	6003      	str	r3, [r0, #0]
 8002e02:	2308      	movs	r3, #8
 8002e04:	18cb      	adds	r3, r1, r3
 8002e06:	19db      	adds	r3, r3, r7
 8002e08:	6818      	ldr	r0, [r3, #0]
 8002e0a:	6859      	ldr	r1, [r3, #4]
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	0f5b      	lsrs	r3, r3, #29
 8002e10:	000e      	movs	r6, r1
 8002e12:	00f5      	lsls	r5, r6, #3
 8002e14:	431d      	orrs	r5, r3
 8002e16:	0003      	movs	r3, r0
 8002e18:	00dc      	lsls	r4, r3, #3
 8002e1a:	2180      	movs	r1, #128	; 0x80
 8002e1c:	2308      	movs	r3, #8
 8002e1e:	18cb      	adds	r3, r1, r3
 8002e20:	19db      	adds	r3, r3, r7
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	2300      	movs	r3, #0
 8002e26:	2084      	movs	r0, #132	; 0x84
 8002e28:	2408      	movs	r4, #8
 8002e2a:	1900      	adds	r0, r0, r4
 8002e2c:	19c0      	adds	r0, r0, r7
 8002e2e:	6003      	str	r3, [r0, #0]
 8002e30:	2308      	movs	r3, #8
 8002e32:	18cb      	adds	r3, r1, r3
 8002e34:	19db      	adds	r3, r3, r7
 8002e36:	6818      	ldr	r0, [r3, #0]
 8002e38:	6859      	ldr	r1, [r3, #4]
 8002e3a:	0003      	movs	r3, r0
 8002e3c:	0f5b      	lsrs	r3, r3, #29
 8002e3e:	000d      	movs	r5, r1
 8002e40:	00ed      	lsls	r5, r5, #3
 8002e42:	248a      	movs	r4, #138	; 0x8a
 8002e44:	0064      	lsls	r4, r4, #1
 8002e46:	2608      	movs	r6, #8
 8002e48:	19a6      	adds	r6, r4, r6
 8002e4a:	19f6      	adds	r6, r6, r7
 8002e4c:	6035      	str	r5, [r6, #0]
 8002e4e:	2508      	movs	r5, #8
 8002e50:	1965      	adds	r5, r4, r5
 8002e52:	19ed      	adds	r5, r5, r7
 8002e54:	682d      	ldr	r5, [r5, #0]
 8002e56:	431d      	orrs	r5, r3
 8002e58:	2308      	movs	r3, #8
 8002e5a:	18e3      	adds	r3, r4, r3
 8002e5c:	19db      	adds	r3, r3, r7
 8002e5e:	601d      	str	r5, [r3, #0]
 8002e60:	0003      	movs	r3, r0
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	2188      	movs	r1, #136	; 0x88
 8002e66:	0049      	lsls	r1, r1, #1
 8002e68:	2008      	movs	r0, #8
 8002e6a:	1809      	adds	r1, r1, r0
 8002e6c:	19c9      	adds	r1, r1, r7
 8002e6e:	600b      	str	r3, [r1, #0]
 8002e70:	0013      	movs	r3, r2
 8002e72:	3307      	adds	r3, #7
 8002e74:	08db      	lsrs	r3, r3, #3
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	466a      	mov	r2, sp
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	469d      	mov	sp, r3
 8002e7e:	ab02      	add	r3, sp, #8
 8002e80:	3300      	adds	r3, #0
 8002e82:	22b4      	movs	r2, #180	; 0xb4
 8002e84:	0052      	lsls	r2, r2, #1
 8002e86:	2108      	movs	r1, #8
 8002e88:	1852      	adds	r2, r2, r1
 8002e8a:	19d2      	adds	r2, r2, r7
 8002e8c:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer1[symLen];
 8002e8e:	245a      	movs	r4, #90	; 0x5a
 8002e90:	2390      	movs	r3, #144	; 0x90
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	601c      	str	r4, [r3, #0]
 8002e98:	268c      	movs	r6, #140	; 0x8c
 8002e9a:	0076      	lsls	r6, r6, #1
 8002e9c:	19a3      	adds	r3, r4, r6
 8002e9e:	2208      	movs	r2, #8
 8002ea0:	4694      	mov	ip, r2
 8002ea2:	44bc      	add	ip, r7
 8002ea4:	4463      	add	r3, ip
 8002ea6:	881a      	ldrh	r2, [r3, #0]
 8002ea8:	0013      	movs	r3, r2
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	21b2      	movs	r1, #178	; 0xb2
 8002eae:	0049      	lsls	r1, r1, #1
 8002eb0:	2008      	movs	r0, #8
 8002eb2:	1809      	adds	r1, r1, r0
 8002eb4:	19c9      	adds	r1, r1, r7
 8002eb6:	600b      	str	r3, [r1, #0]
 8002eb8:	2380      	movs	r3, #128	; 0x80
 8002eba:	18fb      	adds	r3, r7, r3
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	2184      	movs	r1, #132	; 0x84
 8002ec2:	1879      	adds	r1, r7, r1
 8002ec4:	600b      	str	r3, [r1, #0]
 8002ec6:	2380      	movs	r3, #128	; 0x80
 8002ec8:	18fb      	adds	r3, r7, r3
 8002eca:	6818      	ldr	r0, [r3, #0]
 8002ecc:	6859      	ldr	r1, [r3, #4]
 8002ece:	0003      	movs	r3, r0
 8002ed0:	0f5b      	lsrs	r3, r3, #29
 8002ed2:	469c      	mov	ip, r3
 8002ed4:	000d      	movs	r5, r1
 8002ed6:	00ed      	lsls	r5, r5, #3
 8002ed8:	2486      	movs	r4, #134	; 0x86
 8002eda:	0064      	lsls	r4, r4, #1
 8002edc:	2308      	movs	r3, #8
 8002ede:	18e4      	adds	r4, r4, r3
 8002ee0:	19e4      	adds	r4, r4, r7
 8002ee2:	6025      	str	r5, [r4, #0]
 8002ee4:	2586      	movs	r5, #134	; 0x86
 8002ee6:	006d      	lsls	r5, r5, #1
 8002ee8:	2308      	movs	r3, #8
 8002eea:	18eb      	adds	r3, r5, r3
 8002eec:	19dc      	adds	r4, r3, r7
 8002eee:	6825      	ldr	r5, [r4, #0]
 8002ef0:	4663      	mov	r3, ip
 8002ef2:	431d      	orrs	r5, r3
 8002ef4:	2386      	movs	r3, #134	; 0x86
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	2408      	movs	r4, #8
 8002efa:	191b      	adds	r3, r3, r4
 8002efc:	19db      	adds	r3, r3, r7
 8002efe:	601d      	str	r5, [r3, #0]
 8002f00:	0003      	movs	r3, r0
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	2184      	movs	r1, #132	; 0x84
 8002f06:	0049      	lsls	r1, r1, #1
 8002f08:	2008      	movs	r0, #8
 8002f0a:	1809      	adds	r1, r1, r0
 8002f0c:	19c9      	adds	r1, r1, r7
 8002f0e:	600b      	str	r3, [r1, #0]
 8002f10:	67ba      	str	r2, [r7, #120]	; 0x78
 8002f12:	2300      	movs	r3, #0
 8002f14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f16:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002f18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f1a:	0003      	movs	r3, r0
 8002f1c:	0f5b      	lsrs	r3, r3, #29
 8002f1e:	000d      	movs	r5, r1
 8002f20:	00ed      	lsls	r5, r5, #3
 8002f22:	2486      	movs	r4, #134	; 0x86
 8002f24:	0064      	lsls	r4, r4, #1
 8002f26:	193c      	adds	r4, r7, r4
 8002f28:	6025      	str	r5, [r4, #0]
 8002f2a:	2486      	movs	r4, #134	; 0x86
 8002f2c:	0064      	lsls	r4, r4, #1
 8002f2e:	193c      	adds	r4, r7, r4
 8002f30:	6825      	ldr	r5, [r4, #0]
 8002f32:	431d      	orrs	r5, r3
 8002f34:	2386      	movs	r3, #134	; 0x86
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	18fb      	adds	r3, r7, r3
 8002f3a:	601d      	str	r5, [r3, #0]
 8002f3c:	0003      	movs	r3, r0
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	2184      	movs	r1, #132	; 0x84
 8002f42:	0049      	lsls	r1, r1, #1
 8002f44:	1879      	adds	r1, r7, r1
 8002f46:	600b      	str	r3, [r1, #0]
 8002f48:	0013      	movs	r3, r2
 8002f4a:	3307      	adds	r3, #7
 8002f4c:	08db      	lsrs	r3, r3, #3
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	466a      	mov	r2, sp
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	469d      	mov	sp, r3
 8002f56:	ab02      	add	r3, sp, #8
 8002f58:	3300      	adds	r3, #0
 8002f5a:	22b0      	movs	r2, #176	; 0xb0
 8002f5c:	0052      	lsls	r2, r2, #1
 8002f5e:	2108      	movs	r1, #8
 8002f60:	1852      	adds	r2, r2, r1
 8002f62:	19d2      	adds	r2, r2, r7
 8002f64:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer2[symLen];
 8002f66:	2390      	movs	r3, #144	; 0x90
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	18fb      	adds	r3, r7, r3
 8002f6c:	681c      	ldr	r4, [r3, #0]
 8002f6e:	0035      	movs	r5, r6
 8002f70:	1963      	adds	r3, r4, r5
 8002f72:	2208      	movs	r2, #8
 8002f74:	4694      	mov	ip, r2
 8002f76:	44bc      	add	ip, r7
 8002f78:	4463      	add	r3, ip
 8002f7a:	881a      	ldrh	r2, [r3, #0]
 8002f7c:	0013      	movs	r3, r2
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	21ae      	movs	r1, #174	; 0xae
 8002f82:	0049      	lsls	r1, r1, #1
 8002f84:	2008      	movs	r0, #8
 8002f86:	1809      	adds	r1, r1, r0
 8002f88:	19c9      	adds	r1, r1, r7
 8002f8a:	600b      	str	r3, [r1, #0]
 8002f8c:	673a      	str	r2, [r7, #112]	; 0x70
 8002f8e:	2300      	movs	r3, #0
 8002f90:	677b      	str	r3, [r7, #116]	; 0x74
 8002f92:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002f94:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002f96:	0003      	movs	r3, r0
 8002f98:	0f5b      	lsrs	r3, r3, #29
 8002f9a:	000c      	movs	r4, r1
 8002f9c:	00e4      	lsls	r4, r4, #3
 8002f9e:	26fc      	movs	r6, #252	; 0xfc
 8002fa0:	2508      	movs	r5, #8
 8002fa2:	1975      	adds	r5, r6, r5
 8002fa4:	19ed      	adds	r5, r5, r7
 8002fa6:	602c      	str	r4, [r5, #0]
 8002fa8:	2408      	movs	r4, #8
 8002faa:	1934      	adds	r4, r6, r4
 8002fac:	19e4      	adds	r4, r4, r7
 8002fae:	6824      	ldr	r4, [r4, #0]
 8002fb0:	431c      	orrs	r4, r3
 8002fb2:	2308      	movs	r3, #8
 8002fb4:	18f3      	adds	r3, r6, r3
 8002fb6:	19db      	adds	r3, r3, r7
 8002fb8:	601c      	str	r4, [r3, #0]
 8002fba:	0003      	movs	r3, r0
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	21f8      	movs	r1, #248	; 0xf8
 8002fc0:	2008      	movs	r0, #8
 8002fc2:	1809      	adds	r1, r1, r0
 8002fc4:	19c9      	adds	r1, r1, r7
 8002fc6:	600b      	str	r3, [r1, #0]
 8002fc8:	66ba      	str	r2, [r7, #104]	; 0x68
 8002fca:	2300      	movs	r3, #0
 8002fcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fce:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002fd0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002fd2:	0003      	movs	r3, r0
 8002fd4:	0f5b      	lsrs	r3, r3, #29
 8002fd6:	000c      	movs	r4, r1
 8002fd8:	00e4      	lsls	r4, r4, #3
 8002fda:	26f4      	movs	r6, #244	; 0xf4
 8002fdc:	2508      	movs	r5, #8
 8002fde:	1975      	adds	r5, r6, r5
 8002fe0:	19ed      	adds	r5, r5, r7
 8002fe2:	602c      	str	r4, [r5, #0]
 8002fe4:	2408      	movs	r4, #8
 8002fe6:	1934      	adds	r4, r6, r4
 8002fe8:	19e4      	adds	r4, r4, r7
 8002fea:	6824      	ldr	r4, [r4, #0]
 8002fec:	431c      	orrs	r4, r3
 8002fee:	2308      	movs	r3, #8
 8002ff0:	18f3      	adds	r3, r6, r3
 8002ff2:	19db      	adds	r3, r3, r7
 8002ff4:	601c      	str	r4, [r3, #0]
 8002ff6:	0003      	movs	r3, r0
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	21f0      	movs	r1, #240	; 0xf0
 8002ffc:	2008      	movs	r0, #8
 8002ffe:	1809      	adds	r1, r1, r0
 8003000:	19c9      	adds	r1, r1, r7
 8003002:	600b      	str	r3, [r1, #0]
 8003004:	0013      	movs	r3, r2
 8003006:	3307      	adds	r3, #7
 8003008:	08db      	lsrs	r3, r3, #3
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	466a      	mov	r2, sp
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	469d      	mov	sp, r3
 8003012:	ab02      	add	r3, sp, #8
 8003014:	3300      	adds	r3, #0
 8003016:	22ac      	movs	r2, #172	; 0xac
 8003018:	0052      	lsls	r2, r2, #1
 800301a:	2108      	movs	r1, #8
 800301c:	1852      	adds	r2, r2, r1
 800301e:	19d2      	adds	r2, r2, r7
 8003020:	6013      	str	r3, [r2, #0]
				X_increment=0x07;
 8003022:	233f      	movs	r3, #63	; 0x3f
 8003024:	258c      	movs	r5, #140	; 0x8c
 8003026:	006d      	lsls	r5, r5, #1
 8003028:	195b      	adds	r3, r3, r5
 800302a:	2208      	movs	r2, #8
 800302c:	18ba      	adds	r2, r7, r2
 800302e:	189a      	adds	r2, r3, r2
 8003030:	2307      	movs	r3, #7
 8003032:	7013      	strb	r3, [r2, #0]
				ASCII_height=0x0E;
 8003034:	233e      	movs	r3, #62	; 0x3e
 8003036:	195b      	adds	r3, r3, r5
 8003038:	2208      	movs	r2, #8
 800303a:	18ba      	adds	r2, r7, r2
 800303c:	189a      	adds	r2, r3, r2
 800303e:	230e      	movs	r3, #14
 8003040:	7013      	strb	r3, [r2, #0]
				for(i=0;i<strLen;i++){
 8003042:	2362      	movs	r3, #98	; 0x62
 8003044:	195b      	adds	r3, r3, r5
 8003046:	2208      	movs	r2, #8
 8003048:	18ba      	adds	r2, r7, r2
 800304a:	189a      	adds	r2, r3, r2
 800304c:	2300      	movs	r3, #0
 800304e:	8013      	strh	r3, [r2, #0]
 8003050:	e110      	b.n	8003274 <printASCIIarray+0x620>
					for(j=0;j<symLen;j++){
 8003052:	2364      	movs	r3, #100	; 0x64
 8003054:	228c      	movs	r2, #140	; 0x8c
 8003056:	0052      	lsls	r2, r2, #1
 8003058:	189b      	adds	r3, r3, r2
 800305a:	2208      	movs	r2, #8
 800305c:	18ba      	adds	r2, r7, r2
 800305e:	189a      	adds	r2, r3, r2
 8003060:	2300      	movs	r3, #0
 8003062:	8013      	strh	r3, [r2, #0]
 8003064:	e042      	b.n	80030ec <printASCIIarray+0x498>
						weoBuffer[j]=F1[dataASCII[i]][j];
 8003066:	2362      	movs	r3, #98	; 0x62
 8003068:	218c      	movs	r1, #140	; 0x8c
 800306a:	0049      	lsls	r1, r1, #1
 800306c:	185b      	adds	r3, r3, r1
 800306e:	2208      	movs	r2, #8
 8003070:	4694      	mov	ip, r2
 8003072:	44bc      	add	ip, r7
 8003074:	4463      	add	r3, ip
 8003076:	881a      	ldrh	r2, [r3, #0]
 8003078:	2380      	movs	r3, #128	; 0x80
 800307a:	185b      	adds	r3, r3, r1
 800307c:	2008      	movs	r0, #8
 800307e:	4684      	mov	ip, r0
 8003080:	2008      	movs	r0, #8
 8003082:	4681      	mov	r9, r0
 8003084:	44b9      	add	r9, r7
 8003086:	44cc      	add	ip, r9
 8003088:	4463      	add	r3, ip
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	189b      	adds	r3, r3, r2
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	001d      	movs	r5, r3
 8003092:	2264      	movs	r2, #100	; 0x64
 8003094:	1853      	adds	r3, r2, r1
 8003096:	2008      	movs	r0, #8
 8003098:	4684      	mov	ip, r0
 800309a:	44bc      	add	ip, r7
 800309c:	4463      	add	r3, ip
 800309e:	8818      	ldrh	r0, [r3, #0]
 80030a0:	0016      	movs	r6, r2
 80030a2:	1853      	adds	r3, r2, r1
 80030a4:	2208      	movs	r2, #8
 80030a6:	4694      	mov	ip, r2
 80030a8:	44bc      	add	ip, r7
 80030aa:	4463      	add	r3, ip
 80030ac:	881c      	ldrh	r4, [r3, #0]
 80030ae:	497e      	ldr	r1, [pc, #504]	; (80032a8 <printASCIIarray+0x654>)
 80030b0:	002a      	movs	r2, r5
 80030b2:	00d2      	lsls	r2, r2, #3
 80030b4:	1b52      	subs	r2, r2, r5
 80030b6:	00d3      	lsls	r3, r2, #3
 80030b8:	1a9b      	subs	r3, r3, r2
 80030ba:	18cb      	adds	r3, r1, r3
 80030bc:	5c1b      	ldrb	r3, [r3, r0]
 80030be:	22b4      	movs	r2, #180	; 0xb4
 80030c0:	0052      	lsls	r2, r2, #1
 80030c2:	2108      	movs	r1, #8
 80030c4:	1852      	adds	r2, r2, r1
 80030c6:	19d2      	adds	r2, r2, r7
 80030c8:	6812      	ldr	r2, [r2, #0]
 80030ca:	5513      	strb	r3, [r2, r4]
					for(j=0;j<symLen;j++){
 80030cc:	0032      	movs	r2, r6
 80030ce:	218c      	movs	r1, #140	; 0x8c
 80030d0:	0049      	lsls	r1, r1, #1
 80030d2:	1853      	adds	r3, r2, r1
 80030d4:	2008      	movs	r0, #8
 80030d6:	4684      	mov	ip, r0
 80030d8:	44bc      	add	ip, r7
 80030da:	4463      	add	r3, ip
 80030dc:	881b      	ldrh	r3, [r3, #0]
 80030de:	1852      	adds	r2, r2, r1
 80030e0:	2108      	movs	r1, #8
 80030e2:	468c      	mov	ip, r1
 80030e4:	44bc      	add	ip, r7
 80030e6:	4462      	add	r2, ip
 80030e8:	3301      	adds	r3, #1
 80030ea:	8013      	strh	r3, [r2, #0]
 80030ec:	2364      	movs	r3, #100	; 0x64
 80030ee:	218c      	movs	r1, #140	; 0x8c
 80030f0:	0049      	lsls	r1, r1, #1
 80030f2:	185b      	adds	r3, r3, r1
 80030f4:	2208      	movs	r2, #8
 80030f6:	18ba      	adds	r2, r7, r2
 80030f8:	189a      	adds	r2, r3, r2
 80030fa:	235a      	movs	r3, #90	; 0x5a
 80030fc:	185b      	adds	r3, r3, r1
 80030fe:	2008      	movs	r0, #8
 8003100:	4684      	mov	ip, r0
 8003102:	44bc      	add	ip, r7
 8003104:	4463      	add	r3, ip
 8003106:	8812      	ldrh	r2, [r2, #0]
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	429a      	cmp	r2, r3
 800310c:	d3ab      	bcc.n	8003066 <printASCIIarray+0x412>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 800310e:	2366      	movs	r3, #102	; 0x66
 8003110:	185b      	adds	r3, r3, r1
 8003112:	2208      	movs	r2, #8
 8003114:	18ba      	adds	r2, r7, r2
 8003116:	189a      	adds	r2, r3, r2
 8003118:	2300      	movs	r3, #0
 800311a:	8013      	strh	r3, [r2, #0]
 800311c:	e030      	b.n	8003180 <printASCIIarray+0x52c>
						weoBuffer[k]=weoBuffer[k] & contrast;
 800311e:	2066      	movs	r0, #102	; 0x66
 8003120:	248c      	movs	r4, #140	; 0x8c
 8003122:	0064      	lsls	r4, r4, #1
 8003124:	1903      	adds	r3, r0, r4
 8003126:	2208      	movs	r2, #8
 8003128:	4694      	mov	ip, r2
 800312a:	44bc      	add	ip, r7
 800312c:	4463      	add	r3, ip
 800312e:	881a      	ldrh	r2, [r3, #0]
 8003130:	25b4      	movs	r5, #180	; 0xb4
 8003132:	006d      	lsls	r5, r5, #1
 8003134:	2308      	movs	r3, #8
 8003136:	18eb      	adds	r3, r5, r3
 8003138:	19db      	adds	r3, r3, r7
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	5c9a      	ldrb	r2, [r3, r2]
 800313e:	1903      	adds	r3, r0, r4
 8003140:	2108      	movs	r1, #8
 8003142:	468c      	mov	ip, r1
 8003144:	44bc      	add	ip, r7
 8003146:	4463      	add	r3, ip
 8003148:	8819      	ldrh	r1, [r3, #0]
 800314a:	235c      	movs	r3, #92	; 0x5c
 800314c:	191b      	adds	r3, r3, r4
 800314e:	2608      	movs	r6, #8
 8003150:	46b4      	mov	ip, r6
 8003152:	44bc      	add	ip, r7
 8003154:	4463      	add	r3, ip
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	4013      	ands	r3, r2
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2208      	movs	r2, #8
 800315e:	18aa      	adds	r2, r5, r2
 8003160:	19d2      	adds	r2, r2, r7
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	5453      	strb	r3, [r2, r1]
					for (k=0;k<symLen;k++){
 8003166:	1903      	adds	r3, r0, r4
 8003168:	2208      	movs	r2, #8
 800316a:	4694      	mov	ip, r2
 800316c:	44bc      	add	ip, r7
 800316e:	4463      	add	r3, ip
 8003170:	881b      	ldrh	r3, [r3, #0]
 8003172:	1902      	adds	r2, r0, r4
 8003174:	2108      	movs	r1, #8
 8003176:	468c      	mov	ip, r1
 8003178:	44bc      	add	ip, r7
 800317a:	4462      	add	r2, ip
 800317c:	3301      	adds	r3, #1
 800317e:	8013      	strh	r3, [r2, #0]
 8003180:	2366      	movs	r3, #102	; 0x66
 8003182:	258c      	movs	r5, #140	; 0x8c
 8003184:	006d      	lsls	r5, r5, #1
 8003186:	195b      	adds	r3, r3, r5
 8003188:	2208      	movs	r2, #8
 800318a:	18ba      	adds	r2, r7, r2
 800318c:	189a      	adds	r2, r3, r2
 800318e:	235a      	movs	r3, #90	; 0x5a
 8003190:	195b      	adds	r3, r3, r5
 8003192:	2108      	movs	r1, #8
 8003194:	468c      	mov	ip, r1
 8003196:	44bc      	add	ip, r7
 8003198:	4463      	add	r3, ip
 800319a:	8812      	ldrh	r2, [r2, #0]
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d3bd      	bcc.n	800311e <printASCIIarray+0x4ca>
					}
				weoDrawRectangleFilled(ASCII_X, imY, (ASCII_X+X_increment-1), imY + ASCII_height - decY, 0xFF, weoBuffer);
 80031a2:	205f      	movs	r0, #95	; 0x5f
 80031a4:	1943      	adds	r3, r0, r5
 80031a6:	2208      	movs	r2, #8
 80031a8:	18ba      	adds	r2, r7, r2
 80031aa:	189a      	adds	r2, r3, r2
 80031ac:	233f      	movs	r3, #63	; 0x3f
 80031ae:	001e      	movs	r6, r3
 80031b0:	195b      	adds	r3, r3, r5
 80031b2:	2108      	movs	r1, #8
 80031b4:	468c      	mov	ip, r1
 80031b6:	44bc      	add	ip, r7
 80031b8:	4463      	add	r3, ip
 80031ba:	7812      	ldrb	r2, [r2, #0]
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	18d3      	adds	r3, r2, r3
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b2dc      	uxtb	r4, r3
 80031c6:	218f      	movs	r1, #143	; 0x8f
 80031c8:	0049      	lsls	r1, r1, #1
 80031ca:	2308      	movs	r3, #8
 80031cc:	18cb      	adds	r3, r1, r3
 80031ce:	19da      	adds	r2, r3, r7
 80031d0:	213e      	movs	r1, #62	; 0x3e
 80031d2:	194b      	adds	r3, r1, r5
 80031d4:	2108      	movs	r1, #8
 80031d6:	468c      	mov	ip, r1
 80031d8:	44bc      	add	ip, r7
 80031da:	4463      	add	r3, ip
 80031dc:	7812      	ldrb	r2, [r2, #0]
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	18d3      	adds	r3, r2, r3
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	2160      	movs	r1, #96	; 0x60
 80031e6:	194b      	adds	r3, r1, r5
 80031e8:	2108      	movs	r1, #8
 80031ea:	468c      	mov	ip, r1
 80031ec:	44bc      	add	ip, r7
 80031ee:	4463      	add	r3, ip
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	4699      	mov	r9, r3
 80031f8:	218f      	movs	r1, #143	; 0x8f
 80031fa:	0049      	lsls	r1, r1, #1
 80031fc:	2308      	movs	r3, #8
 80031fe:	18cb      	adds	r3, r1, r3
 8003200:	19db      	adds	r3, r3, r7
 8003202:	7819      	ldrb	r1, [r3, #0]
 8003204:	0005      	movs	r5, r0
 8003206:	238c      	movs	r3, #140	; 0x8c
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	18c3      	adds	r3, r0, r3
 800320c:	2208      	movs	r2, #8
 800320e:	4694      	mov	ip, r2
 8003210:	44bc      	add	ip, r7
 8003212:	4463      	add	r3, ip
 8003214:	7818      	ldrb	r0, [r3, #0]
 8003216:	23b4      	movs	r3, #180	; 0xb4
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	2208      	movs	r2, #8
 800321c:	189b      	adds	r3, r3, r2
 800321e:	19db      	adds	r3, r3, r7
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	9301      	str	r3, [sp, #4]
 8003224:	23ff      	movs	r3, #255	; 0xff
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	464b      	mov	r3, r9
 800322a:	0022      	movs	r2, r4
 800322c:	f7fe f96c 	bl	8001508 <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 8003230:	208c      	movs	r0, #140	; 0x8c
 8003232:	0040      	lsls	r0, r0, #1
 8003234:	182b      	adds	r3, r5, r0
 8003236:	2208      	movs	r2, #8
 8003238:	18ba      	adds	r2, r7, r2
 800323a:	1899      	adds	r1, r3, r2
 800323c:	182b      	adds	r3, r5, r0
 800323e:	2208      	movs	r2, #8
 8003240:	18ba      	adds	r2, r7, r2
 8003242:	189a      	adds	r2, r3, r2
 8003244:	0033      	movs	r3, r6
 8003246:	181b      	adds	r3, r3, r0
 8003248:	2408      	movs	r4, #8
 800324a:	46a4      	mov	ip, r4
 800324c:	44bc      	add	ip, r7
 800324e:	4463      	add	r3, ip
 8003250:	7812      	ldrb	r2, [r2, #0]
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	18d3      	adds	r3, r2, r3
 8003256:	700b      	strb	r3, [r1, #0]
				for(i=0;i<strLen;i++){
 8003258:	2262      	movs	r2, #98	; 0x62
 800325a:	1813      	adds	r3, r2, r0
 800325c:	2108      	movs	r1, #8
 800325e:	468c      	mov	ip, r1
 8003260:	44bc      	add	ip, r7
 8003262:	4463      	add	r3, ip
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	1812      	adds	r2, r2, r0
 8003268:	2108      	movs	r1, #8
 800326a:	468c      	mov	ip, r1
 800326c:	44bc      	add	ip, r7
 800326e:	4462      	add	r2, ip
 8003270:	3301      	adds	r3, #1
 8003272:	8013      	strh	r3, [r2, #0]
 8003274:	231e      	movs	r3, #30
 8003276:	33ff      	adds	r3, #255	; 0xff
 8003278:	2208      	movs	r2, #8
 800327a:	189b      	adds	r3, r3, r2
 800327c:	19db      	adds	r3, r3, r7
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	b29a      	uxth	r2, r3
 8003282:	2162      	movs	r1, #98	; 0x62
 8003284:	208c      	movs	r0, #140	; 0x8c
 8003286:	0040      	lsls	r0, r0, #1
 8003288:	180b      	adds	r3, r1, r0
 800328a:	2408      	movs	r4, #8
 800328c:	46a4      	mov	ip, r4
 800328e:	44bc      	add	ip, r7
 8003290:	4463      	add	r3, ip
 8003292:	881b      	ldrh	r3, [r3, #0]
 8003294:	4293      	cmp	r3, r2
 8003296:	d200      	bcs.n	800329a <printASCIIarray+0x646>
 8003298:	e6db      	b.n	8003052 <printASCIIarray+0x3fe>
				}
				for(i=0;i<symLen;i++){
 800329a:	180b      	adds	r3, r1, r0
 800329c:	2208      	movs	r2, #8
 800329e:	18ba      	adds	r2, r7, r2
 80032a0:	189a      	adds	r2, r3, r2
 80032a2:	2300      	movs	r3, #0
 80032a4:	8013      	strh	r3, [r2, #0]
 80032a6:	e020      	b.n	80032ea <printASCIIarray+0x696>
 80032a8:	0800c838 	.word	0x0800c838
									weoBuffer[j]=0x00;
 80032ac:	2364      	movs	r3, #100	; 0x64
 80032ae:	208c      	movs	r0, #140	; 0x8c
 80032b0:	0040      	lsls	r0, r0, #1
 80032b2:	181b      	adds	r3, r3, r0
 80032b4:	2208      	movs	r2, #8
 80032b6:	4694      	mov	ip, r2
 80032b8:	44bc      	add	ip, r7
 80032ba:	4463      	add	r3, ip
 80032bc:	8819      	ldrh	r1, [r3, #0]
 80032be:	23b4      	movs	r3, #180	; 0xb4
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	2208      	movs	r2, #8
 80032c4:	189b      	adds	r3, r3, r2
 80032c6:	19db      	adds	r3, r3, r7
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	2300      	movs	r3, #0
 80032cc:	5453      	strb	r3, [r2, r1]
				for(i=0;i<symLen;i++){
 80032ce:	2262      	movs	r2, #98	; 0x62
 80032d0:	1813      	adds	r3, r2, r0
 80032d2:	2108      	movs	r1, #8
 80032d4:	468c      	mov	ip, r1
 80032d6:	44bc      	add	ip, r7
 80032d8:	4463      	add	r3, ip
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	1812      	adds	r2, r2, r0
 80032de:	2108      	movs	r1, #8
 80032e0:	468c      	mov	ip, r1
 80032e2:	44bc      	add	ip, r7
 80032e4:	4462      	add	r2, ip
 80032e6:	3301      	adds	r3, #1
 80032e8:	8013      	strh	r3, [r2, #0]
 80032ea:	2362      	movs	r3, #98	; 0x62
 80032ec:	218c      	movs	r1, #140	; 0x8c
 80032ee:	0049      	lsls	r1, r1, #1
 80032f0:	185b      	adds	r3, r3, r1
 80032f2:	2208      	movs	r2, #8
 80032f4:	18ba      	adds	r2, r7, r2
 80032f6:	189a      	adds	r2, r3, r2
 80032f8:	235a      	movs	r3, #90	; 0x5a
 80032fa:	185b      	adds	r3, r3, r1
 80032fc:	2108      	movs	r1, #8
 80032fe:	468c      	mov	ip, r1
 8003300:	44bc      	add	ip, r7
 8003302:	4463      	add	r3, ip
 8003304:	8812      	ldrh	r2, [r2, #0]
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d3cf      	bcc.n	80032ac <printASCIIarray+0x658>
 800330c:	46c5      	mov	sp, r8
							}
			}
			if(fontCur==1){
 800330e:	2361      	movs	r3, #97	; 0x61
 8003310:	228c      	movs	r2, #140	; 0x8c
 8003312:	0052      	lsls	r2, r2, #1
 8003314:	189b      	adds	r3, r3, r2
 8003316:	2108      	movs	r1, #8
 8003318:	468c      	mov	ip, r1
 800331a:	44bc      	add	ip, r7
 800331c:	4463      	add	r3, ip
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d000      	beq.n	8003326 <printASCIIarray+0x6d2>
 8003324:	e29b      	b.n	800385e <printASCIIarray+0xc0a>
 8003326:	466b      	mov	r3, sp
 8003328:	4698      	mov	r8, r3
				symLen=63;
 800332a:	245a      	movs	r4, #90	; 0x5a
 800332c:	0016      	movs	r6, r2
 800332e:	18a3      	adds	r3, r4, r2
 8003330:	2208      	movs	r2, #8
 8003332:	18ba      	adds	r2, r7, r2
 8003334:	189a      	adds	r2, r3, r2
 8003336:	233f      	movs	r3, #63	; 0x3f
 8003338:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 800333a:	2390      	movs	r3, #144	; 0x90
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	18fb      	adds	r3, r7, r3
 8003340:	601c      	str	r4, [r3, #0]
 8003342:	19a3      	adds	r3, r4, r6
 8003344:	2208      	movs	r2, #8
 8003346:	4694      	mov	ip, r2
 8003348:	44bc      	add	ip, r7
 800334a:	4463      	add	r3, ip
 800334c:	881a      	ldrh	r2, [r3, #0]
 800334e:	0013      	movs	r3, r2
 8003350:	3b01      	subs	r3, #1
 8003352:	21a8      	movs	r1, #168	; 0xa8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2008      	movs	r0, #8
 8003358:	1809      	adds	r1, r1, r0
 800335a:	19c9      	adds	r1, r1, r7
 800335c:	600b      	str	r3, [r1, #0]
 800335e:	663a      	str	r2, [r7, #96]	; 0x60
 8003360:	2300      	movs	r3, #0
 8003362:	667b      	str	r3, [r7, #100]	; 0x64
 8003364:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003366:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003368:	0003      	movs	r3, r0
 800336a:	0f5b      	lsrs	r3, r3, #29
 800336c:	000e      	movs	r6, r1
 800336e:	00f6      	lsls	r6, r6, #3
 8003370:	25ec      	movs	r5, #236	; 0xec
 8003372:	2408      	movs	r4, #8
 8003374:	192c      	adds	r4, r5, r4
 8003376:	19e4      	adds	r4, r4, r7
 8003378:	6026      	str	r6, [r4, #0]
 800337a:	2408      	movs	r4, #8
 800337c:	192c      	adds	r4, r5, r4
 800337e:	19e4      	adds	r4, r4, r7
 8003380:	6826      	ldr	r6, [r4, #0]
 8003382:	431e      	orrs	r6, r3
 8003384:	2308      	movs	r3, #8
 8003386:	18eb      	adds	r3, r5, r3
 8003388:	19db      	adds	r3, r3, r7
 800338a:	601e      	str	r6, [r3, #0]
 800338c:	0003      	movs	r3, r0
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	21e8      	movs	r1, #232	; 0xe8
 8003392:	2008      	movs	r0, #8
 8003394:	1809      	adds	r1, r1, r0
 8003396:	19c9      	adds	r1, r1, r7
 8003398:	600b      	str	r3, [r1, #0]
 800339a:	65ba      	str	r2, [r7, #88]	; 0x58
 800339c:	2300      	movs	r3, #0
 800339e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033a0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80033a2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80033a4:	0003      	movs	r3, r0
 80033a6:	0f5b      	lsrs	r3, r3, #29
 80033a8:	000e      	movs	r6, r1
 80033aa:	00f6      	lsls	r6, r6, #3
 80033ac:	25e4      	movs	r5, #228	; 0xe4
 80033ae:	2408      	movs	r4, #8
 80033b0:	192c      	adds	r4, r5, r4
 80033b2:	19e4      	adds	r4, r4, r7
 80033b4:	6026      	str	r6, [r4, #0]
 80033b6:	2408      	movs	r4, #8
 80033b8:	192c      	adds	r4, r5, r4
 80033ba:	19e6      	adds	r6, r4, r7
 80033bc:	6836      	ldr	r6, [r6, #0]
 80033be:	431e      	orrs	r6, r3
 80033c0:	2308      	movs	r3, #8
 80033c2:	18eb      	adds	r3, r5, r3
 80033c4:	19db      	adds	r3, r3, r7
 80033c6:	601e      	str	r6, [r3, #0]
 80033c8:	0003      	movs	r3, r0
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	21e0      	movs	r1, #224	; 0xe0
 80033ce:	2008      	movs	r0, #8
 80033d0:	1809      	adds	r1, r1, r0
 80033d2:	19c9      	adds	r1, r1, r7
 80033d4:	600b      	str	r3, [r1, #0]
 80033d6:	0013      	movs	r3, r2
 80033d8:	3307      	adds	r3, #7
 80033da:	08db      	lsrs	r3, r3, #3
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	466a      	mov	r2, sp
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	469d      	mov	sp, r3
 80033e4:	ab02      	add	r3, sp, #8
 80033e6:	3300      	adds	r3, #0
 80033e8:	21a6      	movs	r1, #166	; 0xa6
 80033ea:	0049      	lsls	r1, r1, #1
 80033ec:	2208      	movs	r2, #8
 80033ee:	188a      	adds	r2, r1, r2
 80033f0:	19d1      	adds	r1, r2, r7
 80033f2:	600b      	str	r3, [r1, #0]
				uint8_t weoBuffer1[symLen];
 80033f4:	2390      	movs	r3, #144	; 0x90
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	18fb      	adds	r3, r7, r3
 80033fa:	681c      	ldr	r4, [r3, #0]
 80033fc:	2390      	movs	r3, #144	; 0x90
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	18fb      	adds	r3, r7, r3
 8003402:	601c      	str	r4, [r3, #0]
 8003404:	268c      	movs	r6, #140	; 0x8c
 8003406:	0076      	lsls	r6, r6, #1
 8003408:	19a3      	adds	r3, r4, r6
 800340a:	2208      	movs	r2, #8
 800340c:	4694      	mov	ip, r2
 800340e:	44bc      	add	ip, r7
 8003410:	4463      	add	r3, ip
 8003412:	881a      	ldrh	r2, [r3, #0]
 8003414:	0013      	movs	r3, r2
 8003416:	3b01      	subs	r3, #1
 8003418:	21a4      	movs	r1, #164	; 0xa4
 800341a:	0049      	lsls	r1, r1, #1
 800341c:	2008      	movs	r0, #8
 800341e:	1809      	adds	r1, r1, r0
 8003420:	19c9      	adds	r1, r1, r7
 8003422:	600b      	str	r3, [r1, #0]
 8003424:	653a      	str	r2, [r7, #80]	; 0x50
 8003426:	2300      	movs	r3, #0
 8003428:	657b      	str	r3, [r7, #84]	; 0x54
 800342a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800342c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800342e:	0003      	movs	r3, r0
 8003430:	0f5b      	lsrs	r3, r3, #29
 8003432:	000e      	movs	r6, r1
 8003434:	00f6      	lsls	r6, r6, #3
 8003436:	25dc      	movs	r5, #220	; 0xdc
 8003438:	2408      	movs	r4, #8
 800343a:	192c      	adds	r4, r5, r4
 800343c:	19e4      	adds	r4, r4, r7
 800343e:	6026      	str	r6, [r4, #0]
 8003440:	2408      	movs	r4, #8
 8003442:	192c      	adds	r4, r5, r4
 8003444:	19e4      	adds	r4, r4, r7
 8003446:	6826      	ldr	r6, [r4, #0]
 8003448:	431e      	orrs	r6, r3
 800344a:	2308      	movs	r3, #8
 800344c:	18eb      	adds	r3, r5, r3
 800344e:	19db      	adds	r3, r3, r7
 8003450:	601e      	str	r6, [r3, #0]
 8003452:	0003      	movs	r3, r0
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	21d8      	movs	r1, #216	; 0xd8
 8003458:	2008      	movs	r0, #8
 800345a:	1809      	adds	r1, r1, r0
 800345c:	19c9      	adds	r1, r1, r7
 800345e:	600b      	str	r3, [r1, #0]
 8003460:	64ba      	str	r2, [r7, #72]	; 0x48
 8003462:	2300      	movs	r3, #0
 8003464:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003466:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003468:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800346a:	0003      	movs	r3, r0
 800346c:	0f5b      	lsrs	r3, r3, #29
 800346e:	000e      	movs	r6, r1
 8003470:	00f6      	lsls	r6, r6, #3
 8003472:	25d4      	movs	r5, #212	; 0xd4
 8003474:	2408      	movs	r4, #8
 8003476:	192c      	adds	r4, r5, r4
 8003478:	19e4      	adds	r4, r4, r7
 800347a:	6026      	str	r6, [r4, #0]
 800347c:	2408      	movs	r4, #8
 800347e:	192c      	adds	r4, r5, r4
 8003480:	19e6      	adds	r6, r4, r7
 8003482:	6836      	ldr	r6, [r6, #0]
 8003484:	431e      	orrs	r6, r3
 8003486:	2308      	movs	r3, #8
 8003488:	18eb      	adds	r3, r5, r3
 800348a:	19db      	adds	r3, r3, r7
 800348c:	601e      	str	r6, [r3, #0]
 800348e:	0003      	movs	r3, r0
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	21d0      	movs	r1, #208	; 0xd0
 8003494:	2008      	movs	r0, #8
 8003496:	1809      	adds	r1, r1, r0
 8003498:	19c9      	adds	r1, r1, r7
 800349a:	600b      	str	r3, [r1, #0]
 800349c:	0013      	movs	r3, r2
 800349e:	3307      	adds	r3, #7
 80034a0:	08db      	lsrs	r3, r3, #3
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	466a      	mov	r2, sp
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	469d      	mov	sp, r3
 80034aa:	ab02      	add	r3, sp, #8
 80034ac:	3300      	adds	r3, #0
 80034ae:	21a2      	movs	r1, #162	; 0xa2
 80034b0:	0049      	lsls	r1, r1, #1
 80034b2:	2208      	movs	r2, #8
 80034b4:	188a      	adds	r2, r1, r2
 80034b6:	19d1      	adds	r1, r2, r7
 80034b8:	600b      	str	r3, [r1, #0]
				uint8_t weoBuffer2[symLen];
 80034ba:	2390      	movs	r3, #144	; 0x90
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	18fb      	adds	r3, r7, r3
 80034c0:	681c      	ldr	r4, [r3, #0]
 80034c2:	268c      	movs	r6, #140	; 0x8c
 80034c4:	0076      	lsls	r6, r6, #1
 80034c6:	19a3      	adds	r3, r4, r6
 80034c8:	2208      	movs	r2, #8
 80034ca:	4694      	mov	ip, r2
 80034cc:	44bc      	add	ip, r7
 80034ce:	4463      	add	r3, ip
 80034d0:	881a      	ldrh	r2, [r3, #0]
 80034d2:	0013      	movs	r3, r2
 80034d4:	3b01      	subs	r3, #1
 80034d6:	21a0      	movs	r1, #160	; 0xa0
 80034d8:	0049      	lsls	r1, r1, #1
 80034da:	2008      	movs	r0, #8
 80034dc:	1809      	adds	r1, r1, r0
 80034de:	19c9      	adds	r1, r1, r7
 80034e0:	600b      	str	r3, [r1, #0]
 80034e2:	643a      	str	r2, [r7, #64]	; 0x40
 80034e4:	2300      	movs	r3, #0
 80034e6:	647b      	str	r3, [r7, #68]	; 0x44
 80034e8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80034ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80034ec:	0003      	movs	r3, r0
 80034ee:	0f5b      	lsrs	r3, r3, #29
 80034f0:	000c      	movs	r4, r1
 80034f2:	00e4      	lsls	r4, r4, #3
 80034f4:	25cc      	movs	r5, #204	; 0xcc
 80034f6:	2608      	movs	r6, #8
 80034f8:	19ae      	adds	r6, r5, r6
 80034fa:	19f6      	adds	r6, r6, r7
 80034fc:	6034      	str	r4, [r6, #0]
 80034fe:	2408      	movs	r4, #8
 8003500:	192c      	adds	r4, r5, r4
 8003502:	19e4      	adds	r4, r4, r7
 8003504:	6824      	ldr	r4, [r4, #0]
 8003506:	431c      	orrs	r4, r3
 8003508:	2308      	movs	r3, #8
 800350a:	18eb      	adds	r3, r5, r3
 800350c:	19db      	adds	r3, r3, r7
 800350e:	601c      	str	r4, [r3, #0]
 8003510:	0003      	movs	r3, r0
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	21c8      	movs	r1, #200	; 0xc8
 8003516:	2008      	movs	r0, #8
 8003518:	1809      	adds	r1, r1, r0
 800351a:	19c9      	adds	r1, r1, r7
 800351c:	600b      	str	r3, [r1, #0]
 800351e:	63ba      	str	r2, [r7, #56]	; 0x38
 8003520:	2300      	movs	r3, #0
 8003522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003524:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003526:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003528:	0003      	movs	r3, r0
 800352a:	0f5b      	lsrs	r3, r3, #29
 800352c:	469c      	mov	ip, r3
 800352e:	000c      	movs	r4, r1
 8003530:	00e4      	lsls	r4, r4, #3
 8003532:	25c4      	movs	r5, #196	; 0xc4
 8003534:	002e      	movs	r6, r5
 8003536:	2308      	movs	r3, #8
 8003538:	18ed      	adds	r5, r5, r3
 800353a:	19ed      	adds	r5, r5, r7
 800353c:	602c      	str	r4, [r5, #0]
 800353e:	0034      	movs	r4, r6
 8003540:	0026      	movs	r6, r4
 8003542:	2308      	movs	r3, #8
 8003544:	18e3      	adds	r3, r4, r3
 8003546:	19dd      	adds	r5, r3, r7
 8003548:	682c      	ldr	r4, [r5, #0]
 800354a:	4663      	mov	r3, ip
 800354c:	431c      	orrs	r4, r3
 800354e:	0033      	movs	r3, r6
 8003550:	2508      	movs	r5, #8
 8003552:	195b      	adds	r3, r3, r5
 8003554:	19db      	adds	r3, r3, r7
 8003556:	601c      	str	r4, [r3, #0]
 8003558:	0003      	movs	r3, r0
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	21c0      	movs	r1, #192	; 0xc0
 800355e:	2008      	movs	r0, #8
 8003560:	1809      	adds	r1, r1, r0
 8003562:	19c9      	adds	r1, r1, r7
 8003564:	600b      	str	r3, [r1, #0]
 8003566:	0013      	movs	r3, r2
 8003568:	3307      	adds	r3, #7
 800356a:	08db      	lsrs	r3, r3, #3
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	466a      	mov	r2, sp
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	469d      	mov	sp, r3
 8003574:	ab02      	add	r3, sp, #8
 8003576:	3300      	adds	r3, #0
 8003578:	229e      	movs	r2, #158	; 0x9e
 800357a:	0052      	lsls	r2, r2, #1
 800357c:	2108      	movs	r1, #8
 800357e:	1852      	adds	r2, r2, r1
 8003580:	19d2      	adds	r2, r2, r7
 8003582:	6013      	str	r3, [r2, #0]
				X_increment=0x07;
 8003584:	233f      	movs	r3, #63	; 0x3f
 8003586:	268c      	movs	r6, #140	; 0x8c
 8003588:	0076      	lsls	r6, r6, #1
 800358a:	199b      	adds	r3, r3, r6
 800358c:	2208      	movs	r2, #8
 800358e:	18ba      	adds	r2, r7, r2
 8003590:	189a      	adds	r2, r3, r2
 8003592:	2307      	movs	r3, #7
 8003594:	7013      	strb	r3, [r2, #0]
				ASCII_height=0x12;
 8003596:	233e      	movs	r3, #62	; 0x3e
 8003598:	199b      	adds	r3, r3, r6
 800359a:	2208      	movs	r2, #8
 800359c:	18ba      	adds	r2, r7, r2
 800359e:	189a      	adds	r2, r3, r2
 80035a0:	2312      	movs	r3, #18
 80035a2:	7013      	strb	r3, [r2, #0]
				for(i=0;i<strLen;i++){
 80035a4:	2362      	movs	r3, #98	; 0x62
 80035a6:	199b      	adds	r3, r3, r6
 80035a8:	2208      	movs	r2, #8
 80035aa:	18ba      	adds	r2, r7, r2
 80035ac:	189a      	adds	r2, r3, r2
 80035ae:	2300      	movs	r3, #0
 80035b0:	8013      	strh	r3, [r2, #0]
 80035b2:	e107      	b.n	80037c4 <printASCIIarray+0xb70>
					for(j=0;j<symLen;j++){
 80035b4:	2364      	movs	r3, #100	; 0x64
 80035b6:	228c      	movs	r2, #140	; 0x8c
 80035b8:	0052      	lsls	r2, r2, #1
 80035ba:	189b      	adds	r3, r3, r2
 80035bc:	2208      	movs	r2, #8
 80035be:	18ba      	adds	r2, r7, r2
 80035c0:	189a      	adds	r2, r3, r2
 80035c2:	2300      	movs	r3, #0
 80035c4:	8013      	strh	r3, [r2, #0]
 80035c6:	e03f      	b.n	8003648 <printASCIIarray+0x9f4>
						weoBuffer[j]=F2[dataASCII[i]][j];
 80035c8:	2362      	movs	r3, #98	; 0x62
 80035ca:	218c      	movs	r1, #140	; 0x8c
 80035cc:	0049      	lsls	r1, r1, #1
 80035ce:	185b      	adds	r3, r3, r1
 80035d0:	2208      	movs	r2, #8
 80035d2:	4694      	mov	ip, r2
 80035d4:	44bc      	add	ip, r7
 80035d6:	4463      	add	r3, ip
 80035d8:	881a      	ldrh	r2, [r3, #0]
 80035da:	2380      	movs	r3, #128	; 0x80
 80035dc:	185b      	adds	r3, r3, r1
 80035de:	2008      	movs	r0, #8
 80035e0:	4684      	mov	ip, r0
 80035e2:	2008      	movs	r0, #8
 80035e4:	4681      	mov	r9, r0
 80035e6:	44b9      	add	r9, r7
 80035e8:	44cc      	add	ip, r9
 80035ea:	4463      	add	r3, ip
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	189b      	adds	r3, r3, r2
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	001c      	movs	r4, r3
 80035f4:	2664      	movs	r6, #100	; 0x64
 80035f6:	000a      	movs	r2, r1
 80035f8:	1873      	adds	r3, r6, r1
 80035fa:	2108      	movs	r1, #8
 80035fc:	468c      	mov	ip, r1
 80035fe:	44bc      	add	ip, r7
 8003600:	4463      	add	r3, ip
 8003602:	8819      	ldrh	r1, [r3, #0]
 8003604:	0015      	movs	r5, r2
 8003606:	18b3      	adds	r3, r6, r2
 8003608:	2208      	movs	r2, #8
 800360a:	4694      	mov	ip, r2
 800360c:	44bc      	add	ip, r7
 800360e:	4463      	add	r3, ip
 8003610:	8818      	ldrh	r0, [r3, #0]
 8003612:	4a79      	ldr	r2, [pc, #484]	; (80037f8 <printASCIIarray+0xba4>)
 8003614:	0023      	movs	r3, r4
 8003616:	019b      	lsls	r3, r3, #6
 8003618:	1b1b      	subs	r3, r3, r4
 800361a:	18d3      	adds	r3, r2, r3
 800361c:	5c5b      	ldrb	r3, [r3, r1]
 800361e:	24a6      	movs	r4, #166	; 0xa6
 8003620:	0064      	lsls	r4, r4, #1
 8003622:	2208      	movs	r2, #8
 8003624:	18a2      	adds	r2, r4, r2
 8003626:	19d4      	adds	r4, r2, r7
 8003628:	6822      	ldr	r2, [r4, #0]
 800362a:	5413      	strb	r3, [r2, r0]
					for(j=0;j<symLen;j++){
 800362c:	0029      	movs	r1, r5
 800362e:	1873      	adds	r3, r6, r1
 8003630:	2208      	movs	r2, #8
 8003632:	4694      	mov	ip, r2
 8003634:	44bc      	add	ip, r7
 8003636:	4463      	add	r3, ip
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	1872      	adds	r2, r6, r1
 800363c:	2108      	movs	r1, #8
 800363e:	468c      	mov	ip, r1
 8003640:	44bc      	add	ip, r7
 8003642:	4462      	add	r2, ip
 8003644:	3301      	adds	r3, #1
 8003646:	8013      	strh	r3, [r2, #0]
 8003648:	2364      	movs	r3, #100	; 0x64
 800364a:	218c      	movs	r1, #140	; 0x8c
 800364c:	0049      	lsls	r1, r1, #1
 800364e:	185b      	adds	r3, r3, r1
 8003650:	2208      	movs	r2, #8
 8003652:	18ba      	adds	r2, r7, r2
 8003654:	189a      	adds	r2, r3, r2
 8003656:	235a      	movs	r3, #90	; 0x5a
 8003658:	185b      	adds	r3, r3, r1
 800365a:	2008      	movs	r0, #8
 800365c:	4684      	mov	ip, r0
 800365e:	44bc      	add	ip, r7
 8003660:	4463      	add	r3, ip
 8003662:	8812      	ldrh	r2, [r2, #0]
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d3ae      	bcc.n	80035c8 <printASCIIarray+0x974>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 800366a:	2366      	movs	r3, #102	; 0x66
 800366c:	185b      	adds	r3, r3, r1
 800366e:	2208      	movs	r2, #8
 8003670:	18ba      	adds	r2, r7, r2
 8003672:	189a      	adds	r2, r3, r2
 8003674:	2300      	movs	r3, #0
 8003676:	8013      	strh	r3, [r2, #0]
 8003678:	e030      	b.n	80036dc <printASCIIarray+0xa88>
						weoBuffer[k]=weoBuffer[k] & contrast;
 800367a:	2066      	movs	r0, #102	; 0x66
 800367c:	248c      	movs	r4, #140	; 0x8c
 800367e:	0064      	lsls	r4, r4, #1
 8003680:	1903      	adds	r3, r0, r4
 8003682:	2208      	movs	r2, #8
 8003684:	4694      	mov	ip, r2
 8003686:	44bc      	add	ip, r7
 8003688:	4463      	add	r3, ip
 800368a:	881a      	ldrh	r2, [r3, #0]
 800368c:	25a6      	movs	r5, #166	; 0xa6
 800368e:	006d      	lsls	r5, r5, #1
 8003690:	2308      	movs	r3, #8
 8003692:	18eb      	adds	r3, r5, r3
 8003694:	19db      	adds	r3, r3, r7
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	5c9a      	ldrb	r2, [r3, r2]
 800369a:	1903      	adds	r3, r0, r4
 800369c:	2108      	movs	r1, #8
 800369e:	468c      	mov	ip, r1
 80036a0:	44bc      	add	ip, r7
 80036a2:	4463      	add	r3, ip
 80036a4:	8819      	ldrh	r1, [r3, #0]
 80036a6:	235c      	movs	r3, #92	; 0x5c
 80036a8:	191b      	adds	r3, r3, r4
 80036aa:	2608      	movs	r6, #8
 80036ac:	46b4      	mov	ip, r6
 80036ae:	44bc      	add	ip, r7
 80036b0:	4463      	add	r3, ip
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	4013      	ands	r3, r2
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2208      	movs	r2, #8
 80036ba:	18aa      	adds	r2, r5, r2
 80036bc:	19d2      	adds	r2, r2, r7
 80036be:	6812      	ldr	r2, [r2, #0]
 80036c0:	5453      	strb	r3, [r2, r1]
					for (k=0;k<symLen;k++){
 80036c2:	1903      	adds	r3, r0, r4
 80036c4:	2208      	movs	r2, #8
 80036c6:	4694      	mov	ip, r2
 80036c8:	44bc      	add	ip, r7
 80036ca:	4463      	add	r3, ip
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	1902      	adds	r2, r0, r4
 80036d0:	2108      	movs	r1, #8
 80036d2:	468c      	mov	ip, r1
 80036d4:	44bc      	add	ip, r7
 80036d6:	4462      	add	r2, ip
 80036d8:	3301      	adds	r3, #1
 80036da:	8013      	strh	r3, [r2, #0]
 80036dc:	2366      	movs	r3, #102	; 0x66
 80036de:	268c      	movs	r6, #140	; 0x8c
 80036e0:	0076      	lsls	r6, r6, #1
 80036e2:	199b      	adds	r3, r3, r6
 80036e4:	2208      	movs	r2, #8
 80036e6:	18ba      	adds	r2, r7, r2
 80036e8:	189a      	adds	r2, r3, r2
 80036ea:	235a      	movs	r3, #90	; 0x5a
 80036ec:	199b      	adds	r3, r3, r6
 80036ee:	2108      	movs	r1, #8
 80036f0:	468c      	mov	ip, r1
 80036f2:	44bc      	add	ip, r7
 80036f4:	4463      	add	r3, ip
 80036f6:	8812      	ldrh	r2, [r2, #0]
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d3bd      	bcc.n	800367a <printASCIIarray+0xa26>
					}
				weoDrawRectangleFilled(ASCII_X, imY, (ASCII_X+X_increment-1), imY + ASCII_height - decY, 0xFF, weoBuffer);
 80036fe:	205f      	movs	r0, #95	; 0x5f
 8003700:	1983      	adds	r3, r0, r6
 8003702:	2208      	movs	r2, #8
 8003704:	18ba      	adds	r2, r7, r2
 8003706:	189a      	adds	r2, r3, r2
 8003708:	233f      	movs	r3, #63	; 0x3f
 800370a:	199b      	adds	r3, r3, r6
 800370c:	2108      	movs	r1, #8
 800370e:	468c      	mov	ip, r1
 8003710:	44bc      	add	ip, r7
 8003712:	4463      	add	r3, ip
 8003714:	7812      	ldrb	r2, [r2, #0]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	b2db      	uxtb	r3, r3
 800371c:	3b01      	subs	r3, #1
 800371e:	b2dc      	uxtb	r4, r3
 8003720:	258f      	movs	r5, #143	; 0x8f
 8003722:	006d      	lsls	r5, r5, #1
 8003724:	2308      	movs	r3, #8
 8003726:	18eb      	adds	r3, r5, r3
 8003728:	19da      	adds	r2, r3, r7
 800372a:	213e      	movs	r1, #62	; 0x3e
 800372c:	198b      	adds	r3, r1, r6
 800372e:	2108      	movs	r1, #8
 8003730:	468c      	mov	ip, r1
 8003732:	44bc      	add	ip, r7
 8003734:	4463      	add	r3, ip
 8003736:	7812      	ldrb	r2, [r2, #0]
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	18d3      	adds	r3, r2, r3
 800373c:	b2da      	uxtb	r2, r3
 800373e:	2160      	movs	r1, #96	; 0x60
 8003740:	1989      	adds	r1, r1, r6
 8003742:	2308      	movs	r3, #8
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	18cb      	adds	r3, r1, r3
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	b2da      	uxtb	r2, r3
 800374e:	2308      	movs	r3, #8
 8003750:	18eb      	adds	r3, r5, r3
 8003752:	19db      	adds	r3, r3, r7
 8003754:	7819      	ldrb	r1, [r3, #0]
 8003756:	0006      	movs	r6, r0
 8003758:	238c      	movs	r3, #140	; 0x8c
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	18c5      	adds	r5, r0, r3
 800375e:	2308      	movs	r3, #8
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	18eb      	adds	r3, r5, r3
 8003764:	7818      	ldrb	r0, [r3, #0]
 8003766:	25a6      	movs	r5, #166	; 0xa6
 8003768:	006d      	lsls	r5, r5, #1
 800376a:	2308      	movs	r3, #8
 800376c:	18eb      	adds	r3, r5, r3
 800376e:	19dd      	adds	r5, r3, r7
 8003770:	682b      	ldr	r3, [r5, #0]
 8003772:	9301      	str	r3, [sp, #4]
 8003774:	23ff      	movs	r3, #255	; 0xff
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	0013      	movs	r3, r2
 800377a:	0022      	movs	r2, r4
 800377c:	f7fd fec4 	bl	8001508 <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 8003780:	208c      	movs	r0, #140	; 0x8c
 8003782:	0040      	lsls	r0, r0, #1
 8003784:	1833      	adds	r3, r6, r0
 8003786:	2208      	movs	r2, #8
 8003788:	18ba      	adds	r2, r7, r2
 800378a:	1899      	adds	r1, r3, r2
 800378c:	1833      	adds	r3, r6, r0
 800378e:	2208      	movs	r2, #8
 8003790:	18ba      	adds	r2, r7, r2
 8003792:	189a      	adds	r2, r3, r2
 8003794:	233f      	movs	r3, #63	; 0x3f
 8003796:	181b      	adds	r3, r3, r0
 8003798:	2408      	movs	r4, #8
 800379a:	46a4      	mov	ip, r4
 800379c:	44bc      	add	ip, r7
 800379e:	4463      	add	r3, ip
 80037a0:	7812      	ldrb	r2, [r2, #0]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	18d3      	adds	r3, r2, r3
 80037a6:	700b      	strb	r3, [r1, #0]
				for(i=0;i<strLen;i++){
 80037a8:	2262      	movs	r2, #98	; 0x62
 80037aa:	1813      	adds	r3, r2, r0
 80037ac:	2108      	movs	r1, #8
 80037ae:	468c      	mov	ip, r1
 80037b0:	44bc      	add	ip, r7
 80037b2:	4463      	add	r3, ip
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	1812      	adds	r2, r2, r0
 80037b8:	2108      	movs	r1, #8
 80037ba:	468c      	mov	ip, r1
 80037bc:	44bc      	add	ip, r7
 80037be:	4462      	add	r2, ip
 80037c0:	3301      	adds	r3, #1
 80037c2:	8013      	strh	r3, [r2, #0]
 80037c4:	231e      	movs	r3, #30
 80037c6:	33ff      	adds	r3, #255	; 0xff
 80037c8:	2208      	movs	r2, #8
 80037ca:	189b      	adds	r3, r3, r2
 80037cc:	19db      	adds	r3, r3, r7
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	2162      	movs	r1, #98	; 0x62
 80037d4:	208c      	movs	r0, #140	; 0x8c
 80037d6:	0040      	lsls	r0, r0, #1
 80037d8:	180b      	adds	r3, r1, r0
 80037da:	2408      	movs	r4, #8
 80037dc:	46a4      	mov	ip, r4
 80037de:	44bc      	add	ip, r7
 80037e0:	4463      	add	r3, ip
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d200      	bcs.n	80037ea <printASCIIarray+0xb96>
 80037e8:	e6e4      	b.n	80035b4 <printASCIIarray+0x960>
				}
				for(i=0;i<symLen;i++){
 80037ea:	180b      	adds	r3, r1, r0
 80037ec:	2208      	movs	r2, #8
 80037ee:	18ba      	adds	r2, r7, r2
 80037f0:	189a      	adds	r2, r3, r2
 80037f2:	2300      	movs	r3, #0
 80037f4:	8013      	strh	r3, [r2, #0]
 80037f6:	e020      	b.n	800383a <printASCIIarray+0xbe6>
 80037f8:	0800f938 	.word	0x0800f938
									weoBuffer[j]=0x00;
 80037fc:	2364      	movs	r3, #100	; 0x64
 80037fe:	208c      	movs	r0, #140	; 0x8c
 8003800:	0040      	lsls	r0, r0, #1
 8003802:	181b      	adds	r3, r3, r0
 8003804:	2208      	movs	r2, #8
 8003806:	4694      	mov	ip, r2
 8003808:	44bc      	add	ip, r7
 800380a:	4463      	add	r3, ip
 800380c:	8819      	ldrh	r1, [r3, #0]
 800380e:	23a6      	movs	r3, #166	; 0xa6
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	2208      	movs	r2, #8
 8003814:	189b      	adds	r3, r3, r2
 8003816:	19db      	adds	r3, r3, r7
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	2300      	movs	r3, #0
 800381c:	5453      	strb	r3, [r2, r1]
				for(i=0;i<symLen;i++){
 800381e:	2262      	movs	r2, #98	; 0x62
 8003820:	1813      	adds	r3, r2, r0
 8003822:	2108      	movs	r1, #8
 8003824:	468c      	mov	ip, r1
 8003826:	44bc      	add	ip, r7
 8003828:	4463      	add	r3, ip
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	1812      	adds	r2, r2, r0
 800382e:	2108      	movs	r1, #8
 8003830:	468c      	mov	ip, r1
 8003832:	44bc      	add	ip, r7
 8003834:	4462      	add	r2, ip
 8003836:	3301      	adds	r3, #1
 8003838:	8013      	strh	r3, [r2, #0]
 800383a:	2362      	movs	r3, #98	; 0x62
 800383c:	218c      	movs	r1, #140	; 0x8c
 800383e:	0049      	lsls	r1, r1, #1
 8003840:	185b      	adds	r3, r3, r1
 8003842:	2208      	movs	r2, #8
 8003844:	18ba      	adds	r2, r7, r2
 8003846:	189a      	adds	r2, r3, r2
 8003848:	235a      	movs	r3, #90	; 0x5a
 800384a:	185b      	adds	r3, r3, r1
 800384c:	2108      	movs	r1, #8
 800384e:	468c      	mov	ip, r1
 8003850:	44bc      	add	ip, r7
 8003852:	4463      	add	r3, ip
 8003854:	8812      	ldrh	r2, [r2, #0]
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d3cf      	bcc.n	80037fc <printASCIIarray+0xba8>
 800385c:	46c5      	mov	sp, r8
							}
			}
			if(fontCur==2){
 800385e:	2361      	movs	r3, #97	; 0x61
 8003860:	268c      	movs	r6, #140	; 0x8c
 8003862:	0076      	lsls	r6, r6, #1
 8003864:	199b      	adds	r3, r3, r6
 8003866:	2208      	movs	r2, #8
 8003868:	4694      	mov	ip, r2
 800386a:	44bc      	add	ip, r7
 800386c:	4463      	add	r3, ip
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d001      	beq.n	8003878 <printASCIIarray+0xc24>
 8003874:	f001 f82b 	bl	80048ce <printASCIIarray+0x1c7a>
 8003878:	466b      	mov	r3, sp
 800387a:	001d      	movs	r5, r3
				symLen=304;
 800387c:	245a      	movs	r4, #90	; 0x5a
 800387e:	19a3      	adds	r3, r4, r6
 8003880:	2208      	movs	r2, #8
 8003882:	18ba      	adds	r2, r7, r2
 8003884:	189a      	adds	r2, r3, r2
 8003886:	2398      	movs	r3, #152	; 0x98
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 800388c:	607c      	str	r4, [r7, #4]
 800388e:	19a3      	adds	r3, r4, r6
 8003890:	2208      	movs	r2, #8
 8003892:	4694      	mov	ip, r2
 8003894:	44bc      	add	ip, r7
 8003896:	4463      	add	r3, ip
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	2290      	movs	r2, #144	; 0x90
 800389c:	0052      	lsls	r2, r2, #1
 800389e:	18ba      	adds	r2, r7, r2
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	2390      	movs	r3, #144	; 0x90
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	18fb      	adds	r3, r7, r3
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	219c      	movs	r1, #156	; 0x9c
 80038ae:	0049      	lsls	r1, r1, #1
 80038b0:	2208      	movs	r2, #8
 80038b2:	188a      	adds	r2, r1, r2
 80038b4:	19d1      	adds	r1, r2, r7
 80038b6:	600b      	str	r3, [r1, #0]
 80038b8:	2390      	movs	r3, #144	; 0x90
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	18fb      	adds	r3, r7, r3
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	633b      	str	r3, [r7, #48]	; 0x30
 80038c2:	2300      	movs	r3, #0
 80038c4:	637b      	str	r3, [r7, #52]	; 0x34
 80038c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80038ca:	0003      	movs	r3, r0
 80038cc:	0f5b      	lsrs	r3, r3, #29
 80038ce:	000e      	movs	r6, r1
 80038d0:	00f6      	lsls	r6, r6, #3
 80038d2:	24bc      	movs	r4, #188	; 0xbc
 80038d4:	2208      	movs	r2, #8
 80038d6:	18a2      	adds	r2, r4, r2
 80038d8:	19d2      	adds	r2, r2, r7
 80038da:	6016      	str	r6, [r2, #0]
 80038dc:	2208      	movs	r2, #8
 80038de:	18a2      	adds	r2, r4, r2
 80038e0:	19d6      	adds	r6, r2, r7
 80038e2:	6836      	ldr	r6, [r6, #0]
 80038e4:	431e      	orrs	r6, r3
 80038e6:	2308      	movs	r3, #8
 80038e8:	18e3      	adds	r3, r4, r3
 80038ea:	19db      	adds	r3, r3, r7
 80038ec:	601e      	str	r6, [r3, #0]
 80038ee:	0003      	movs	r3, r0
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	21b8      	movs	r1, #184	; 0xb8
 80038f4:	2208      	movs	r2, #8
 80038f6:	188a      	adds	r2, r1, r2
 80038f8:	19d1      	adds	r1, r2, r7
 80038fa:	600b      	str	r3, [r1, #0]
 80038fc:	2390      	movs	r3, #144	; 0x90
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	18fb      	adds	r3, r7, r3
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	62bb      	str	r3, [r7, #40]	; 0x28
 8003906:	2300      	movs	r3, #0
 8003908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800390a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800390c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800390e:	0003      	movs	r3, r0
 8003910:	0f5b      	lsrs	r3, r3, #29
 8003912:	469c      	mov	ip, r3
 8003914:	000e      	movs	r6, r1
 8003916:	00f6      	lsls	r6, r6, #3
 8003918:	24b4      	movs	r4, #180	; 0xb4
 800391a:	0022      	movs	r2, r4
 800391c:	2308      	movs	r3, #8
 800391e:	18e4      	adds	r4, r4, r3
 8003920:	19e4      	adds	r4, r4, r7
 8003922:	6026      	str	r6, [r4, #0]
 8003924:	0016      	movs	r6, r2
 8003926:	0032      	movs	r2, r6
 8003928:	2308      	movs	r3, #8
 800392a:	18f3      	adds	r3, r6, r3
 800392c:	19dc      	adds	r4, r3, r7
 800392e:	6826      	ldr	r6, [r4, #0]
 8003930:	4663      	mov	r3, ip
 8003932:	431e      	orrs	r6, r3
 8003934:	0013      	movs	r3, r2
 8003936:	2208      	movs	r2, #8
 8003938:	189b      	adds	r3, r3, r2
 800393a:	19db      	adds	r3, r3, r7
 800393c:	601e      	str	r6, [r3, #0]
 800393e:	0003      	movs	r3, r0
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	21b0      	movs	r1, #176	; 0xb0
 8003944:	2208      	movs	r2, #8
 8003946:	188a      	adds	r2, r1, r2
 8003948:	19d1      	adds	r1, r2, r7
 800394a:	600b      	str	r3, [r1, #0]
 800394c:	2390      	movs	r3, #144	; 0x90
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	18fb      	adds	r3, r7, r3
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3307      	adds	r3, #7
 8003956:	08db      	lsrs	r3, r3, #3
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	466a      	mov	r2, sp
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	469d      	mov	sp, r3
 8003960:	ab02      	add	r3, sp, #8
 8003962:	3300      	adds	r3, #0
 8003964:	229a      	movs	r2, #154	; 0x9a
 8003966:	0052      	lsls	r2, r2, #1
 8003968:	2108      	movs	r1, #8
 800396a:	1852      	adds	r2, r2, r1
 800396c:	19d2      	adds	r2, r2, r7
 800396e:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer1[symLen];
 8003970:	687c      	ldr	r4, [r7, #4]
 8003972:	607c      	str	r4, [r7, #4]
 8003974:	268c      	movs	r6, #140	; 0x8c
 8003976:	0076      	lsls	r6, r6, #1
 8003978:	19a3      	adds	r3, r4, r6
 800397a:	2208      	movs	r2, #8
 800397c:	4694      	mov	ip, r2
 800397e:	44bc      	add	ip, r7
 8003980:	4463      	add	r3, ip
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	2290      	movs	r2, #144	; 0x90
 8003986:	0052      	lsls	r2, r2, #1
 8003988:	18ba      	adds	r2, r7, r2
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	2390      	movs	r3, #144	; 0x90
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3b01      	subs	r3, #1
 8003996:	2198      	movs	r1, #152	; 0x98
 8003998:	0049      	lsls	r1, r1, #1
 800399a:	2208      	movs	r2, #8
 800399c:	188a      	adds	r2, r1, r2
 800399e:	19d1      	adds	r1, r2, r7
 80039a0:	600b      	str	r3, [r1, #0]
 80039a2:	2390      	movs	r3, #144	; 0x90
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	623b      	str	r3, [r7, #32]
 80039ac:	2300      	movs	r3, #0
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
 80039b0:	6a38      	ldr	r0, [r7, #32]
 80039b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039b4:	0003      	movs	r3, r0
 80039b6:	0f5b      	lsrs	r3, r3, #29
 80039b8:	000e      	movs	r6, r1
 80039ba:	00f6      	lsls	r6, r6, #3
 80039bc:	24ac      	movs	r4, #172	; 0xac
 80039be:	2208      	movs	r2, #8
 80039c0:	18a2      	adds	r2, r4, r2
 80039c2:	19d2      	adds	r2, r2, r7
 80039c4:	6016      	str	r6, [r2, #0]
 80039c6:	2208      	movs	r2, #8
 80039c8:	18a2      	adds	r2, r4, r2
 80039ca:	19d6      	adds	r6, r2, r7
 80039cc:	6836      	ldr	r6, [r6, #0]
 80039ce:	431e      	orrs	r6, r3
 80039d0:	2308      	movs	r3, #8
 80039d2:	18e3      	adds	r3, r4, r3
 80039d4:	19db      	adds	r3, r3, r7
 80039d6:	601e      	str	r6, [r3, #0]
 80039d8:	0003      	movs	r3, r0
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	21a8      	movs	r1, #168	; 0xa8
 80039de:	2208      	movs	r2, #8
 80039e0:	188a      	adds	r2, r1, r2
 80039e2:	19d1      	adds	r1, r2, r7
 80039e4:	600b      	str	r3, [r1, #0]
 80039e6:	2390      	movs	r3, #144	; 0x90
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	18fb      	adds	r3, r7, r3
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	61bb      	str	r3, [r7, #24]
 80039f0:	2300      	movs	r3, #0
 80039f2:	61fb      	str	r3, [r7, #28]
 80039f4:	69b8      	ldr	r0, [r7, #24]
 80039f6:	69f9      	ldr	r1, [r7, #28]
 80039f8:	0003      	movs	r3, r0
 80039fa:	0f5b      	lsrs	r3, r3, #29
 80039fc:	469c      	mov	ip, r3
 80039fe:	000e      	movs	r6, r1
 8003a00:	00f6      	lsls	r6, r6, #3
 8003a02:	24a4      	movs	r4, #164	; 0xa4
 8003a04:	0022      	movs	r2, r4
 8003a06:	2308      	movs	r3, #8
 8003a08:	18e4      	adds	r4, r4, r3
 8003a0a:	19e4      	adds	r4, r4, r7
 8003a0c:	6026      	str	r6, [r4, #0]
 8003a0e:	0016      	movs	r6, r2
 8003a10:	0032      	movs	r2, r6
 8003a12:	2308      	movs	r3, #8
 8003a14:	18f3      	adds	r3, r6, r3
 8003a16:	19dc      	adds	r4, r3, r7
 8003a18:	6826      	ldr	r6, [r4, #0]
 8003a1a:	4663      	mov	r3, ip
 8003a1c:	431e      	orrs	r6, r3
 8003a1e:	0013      	movs	r3, r2
 8003a20:	2208      	movs	r2, #8
 8003a22:	189b      	adds	r3, r3, r2
 8003a24:	19db      	adds	r3, r3, r7
 8003a26:	601e      	str	r6, [r3, #0]
 8003a28:	0003      	movs	r3, r0
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	21a0      	movs	r1, #160	; 0xa0
 8003a2e:	2208      	movs	r2, #8
 8003a30:	188a      	adds	r2, r1, r2
 8003a32:	19d1      	adds	r1, r2, r7
 8003a34:	600b      	str	r3, [r1, #0]
 8003a36:	2390      	movs	r3, #144	; 0x90
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	18fb      	adds	r3, r7, r3
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3307      	adds	r3, #7
 8003a40:	08db      	lsrs	r3, r3, #3
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	466a      	mov	r2, sp
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	469d      	mov	sp, r3
 8003a4a:	ab02      	add	r3, sp, #8
 8003a4c:	3300      	adds	r3, #0
 8003a4e:	2296      	movs	r2, #150	; 0x96
 8003a50:	0052      	lsls	r2, r2, #1
 8003a52:	2108      	movs	r1, #8
 8003a54:	1852      	adds	r2, r2, r1
 8003a56:	19d2      	adds	r2, r2, r7
 8003a58:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer2[symLen];
 8003a5a:	687c      	ldr	r4, [r7, #4]
 8003a5c:	268c      	movs	r6, #140	; 0x8c
 8003a5e:	0076      	lsls	r6, r6, #1
 8003a60:	19a3      	adds	r3, r4, r6
 8003a62:	2208      	movs	r2, #8
 8003a64:	4694      	mov	ip, r2
 8003a66:	44bc      	add	ip, r7
 8003a68:	4463      	add	r3, ip
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	2290      	movs	r2, #144	; 0x90
 8003a6e:	0052      	lsls	r2, r2, #1
 8003a70:	18ba      	adds	r2, r7, r2
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	2390      	movs	r3, #144	; 0x90
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	18fb      	adds	r3, r7, r3
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	3a01      	subs	r2, #1
 8003a7e:	2194      	movs	r1, #148	; 0x94
 8003a80:	0049      	lsls	r1, r1, #1
 8003a82:	2308      	movs	r3, #8
 8003a84:	18cb      	adds	r3, r1, r3
 8003a86:	19d9      	adds	r1, r3, r7
 8003a88:	600a      	str	r2, [r1, #0]
 8003a8a:	2390      	movs	r3, #144	; 0x90
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	18fb      	adds	r3, r7, r3
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	2200      	movs	r2, #0
 8003a96:	617a      	str	r2, [r7, #20]
 8003a98:	6938      	ldr	r0, [r7, #16]
 8003a9a:	6979      	ldr	r1, [r7, #20]
 8003a9c:	0002      	movs	r2, r0
 8003a9e:	0f52      	lsrs	r2, r2, #29
 8003aa0:	000c      	movs	r4, r1
 8003aa2:	00e4      	lsls	r4, r4, #3
 8003aa4:	269c      	movs	r6, #156	; 0x9c
 8003aa6:	2308      	movs	r3, #8
 8003aa8:	18f3      	adds	r3, r6, r3
 8003aaa:	19db      	adds	r3, r3, r7
 8003aac:	601c      	str	r4, [r3, #0]
 8003aae:	2308      	movs	r3, #8
 8003ab0:	18f3      	adds	r3, r6, r3
 8003ab2:	19dc      	adds	r4, r3, r7
 8003ab4:	6824      	ldr	r4, [r4, #0]
 8003ab6:	4314      	orrs	r4, r2
 8003ab8:	2308      	movs	r3, #8
 8003aba:	18f3      	adds	r3, r6, r3
 8003abc:	19da      	adds	r2, r3, r7
 8003abe:	6014      	str	r4, [r2, #0]
 8003ac0:	0002      	movs	r2, r0
 8003ac2:	00d2      	lsls	r2, r2, #3
 8003ac4:	2198      	movs	r1, #152	; 0x98
 8003ac6:	2308      	movs	r3, #8
 8003ac8:	18cb      	adds	r3, r1, r3
 8003aca:	19d9      	adds	r1, r3, r7
 8003acc:	600a      	str	r2, [r1, #0]
 8003ace:	2390      	movs	r3, #144	; 0x90
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	18fb      	adds	r3, r7, r3
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	60bb      	str	r3, [r7, #8]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	60fa      	str	r2, [r7, #12]
 8003adc:	68b8      	ldr	r0, [r7, #8]
 8003ade:	68f9      	ldr	r1, [r7, #12]
 8003ae0:	0002      	movs	r2, r0
 8003ae2:	0f52      	lsrs	r2, r2, #29
 8003ae4:	000c      	movs	r4, r1
 8003ae6:	00e4      	lsls	r4, r4, #3
 8003ae8:	2694      	movs	r6, #148	; 0x94
 8003aea:	603e      	str	r6, [r7, #0]
 8003aec:	2308      	movs	r3, #8
 8003aee:	18f6      	adds	r6, r6, r3
 8003af0:	19f6      	adds	r6, r6, r7
 8003af2:	6034      	str	r4, [r6, #0]
 8003af4:	683c      	ldr	r4, [r7, #0]
 8003af6:	0023      	movs	r3, r4
 8003af8:	2608      	movs	r6, #8
 8003afa:	19a4      	adds	r4, r4, r6
 8003afc:	19e6      	adds	r6, r4, r7
 8003afe:	6834      	ldr	r4, [r6, #0]
 8003b00:	4314      	orrs	r4, r2
 8003b02:	001a      	movs	r2, r3
 8003b04:	2308      	movs	r3, #8
 8003b06:	18d3      	adds	r3, r2, r3
 8003b08:	19da      	adds	r2, r3, r7
 8003b0a:	6014      	str	r4, [r2, #0]
 8003b0c:	0002      	movs	r2, r0
 8003b0e:	00d2      	lsls	r2, r2, #3
 8003b10:	2190      	movs	r1, #144	; 0x90
 8003b12:	2308      	movs	r3, #8
 8003b14:	18cb      	adds	r3, r1, r3
 8003b16:	19d9      	adds	r1, r3, r7
 8003b18:	600a      	str	r2, [r1, #0]
 8003b1a:	2390      	movs	r3, #144	; 0x90
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	18fb      	adds	r3, r7, r3
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	3307      	adds	r3, #7
 8003b24:	08db      	lsrs	r3, r3, #3
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	466a      	mov	r2, sp
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	469d      	mov	sp, r3
 8003b2e:	ab02      	add	r3, sp, #8
 8003b30:	3300      	adds	r3, #0
 8003b32:	2292      	movs	r2, #146	; 0x92
 8003b34:	0052      	lsls	r2, r2, #1
 8003b36:	2108      	movs	r1, #8
 8003b38:	1852      	adds	r2, r2, r1
 8003b3a:	19d2      	adds	r2, r2, r7
 8003b3c:	6013      	str	r3, [r2, #0]
				X_increment=0x10;
 8003b3e:	233f      	movs	r3, #63	; 0x3f
 8003b40:	268c      	movs	r6, #140	; 0x8c
 8003b42:	0076      	lsls	r6, r6, #1
 8003b44:	199b      	adds	r3, r3, r6
 8003b46:	2208      	movs	r2, #8
 8003b48:	4694      	mov	ip, r2
 8003b4a:	44bc      	add	ip, r7
 8003b4c:	4463      	add	r3, ip
 8003b4e:	2210      	movs	r2, #16
 8003b50:	701a      	strb	r2, [r3, #0]
				ASCII_height=0x26;
 8003b52:	233e      	movs	r3, #62	; 0x3e
 8003b54:	199b      	adds	r3, r3, r6
 8003b56:	2208      	movs	r2, #8
 8003b58:	4694      	mov	ip, r2
 8003b5a:	44bc      	add	ip, r7
 8003b5c:	4463      	add	r3, ip
 8003b5e:	2226      	movs	r2, #38	; 0x26
 8003b60:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 8003b62:	2362      	movs	r3, #98	; 0x62
 8003b64:	199b      	adds	r3, r3, r6
 8003b66:	2208      	movs	r2, #8
 8003b68:	4694      	mov	ip, r2
 8003b6a:	44bc      	add	ip, r7
 8003b6c:	4463      	add	r3, ip
 8003b6e:	2200      	movs	r2, #0
 8003b70:	801a      	strh	r2, [r3, #0]
 8003b72:	f000 fd30 	bl	80045d6 <printASCIIarray+0x1982>
					if(dataASCII[i]==0x20){dataASCII[i]=0x00;}
 8003b76:	2162      	movs	r1, #98	; 0x62
 8003b78:	248c      	movs	r4, #140	; 0x8c
 8003b7a:	0064      	lsls	r4, r4, #1
 8003b7c:	190b      	adds	r3, r1, r4
 8003b7e:	2208      	movs	r2, #8
 8003b80:	4694      	mov	ip, r2
 8003b82:	44bc      	add	ip, r7
 8003b84:	4463      	add	r3, ip
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	2080      	movs	r0, #128	; 0x80
 8003b8a:	1902      	adds	r2, r0, r4
 8003b8c:	2608      	movs	r6, #8
 8003b8e:	46b4      	mov	ip, r6
 8003b90:	2608      	movs	r6, #8
 8003b92:	46b0      	mov	r8, r6
 8003b94:	44b8      	add	r8, r7
 8003b96:	44c4      	add	ip, r8
 8003b98:	4462      	add	r2, ip
 8003b9a:	6812      	ldr	r2, [r2, #0]
 8003b9c:	18d3      	adds	r3, r2, r3
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d111      	bne.n	8003bc8 <printASCIIarray+0xf74>
 8003ba4:	190b      	adds	r3, r1, r4
 8003ba6:	2208      	movs	r2, #8
 8003ba8:	4694      	mov	ip, r2
 8003baa:	44bc      	add	ip, r7
 8003bac:	4463      	add	r3, ip
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	1902      	adds	r2, r0, r4
 8003bb2:	2108      	movs	r1, #8
 8003bb4:	468c      	mov	ip, r1
 8003bb6:	2108      	movs	r1, #8
 8003bb8:	4688      	mov	r8, r1
 8003bba:	44b8      	add	r8, r7
 8003bbc:	44c4      	add	ip, r8
 8003bbe:	4462      	add	r2, ip
 8003bc0:	6812      	ldr	r2, [r2, #0]
 8003bc2:	18d3      	adds	r3, r2, r3
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x21){dataASCII[i]=0x01;}
 8003bc8:	2162      	movs	r1, #98	; 0x62
 8003bca:	248c      	movs	r4, #140	; 0x8c
 8003bcc:	0064      	lsls	r4, r4, #1
 8003bce:	190b      	adds	r3, r1, r4
 8003bd0:	2208      	movs	r2, #8
 8003bd2:	4694      	mov	ip, r2
 8003bd4:	44bc      	add	ip, r7
 8003bd6:	4463      	add	r3, ip
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	2080      	movs	r0, #128	; 0x80
 8003bdc:	1902      	adds	r2, r0, r4
 8003bde:	2608      	movs	r6, #8
 8003be0:	46b4      	mov	ip, r6
 8003be2:	2608      	movs	r6, #8
 8003be4:	46b0      	mov	r8, r6
 8003be6:	44b8      	add	r8, r7
 8003be8:	44c4      	add	ip, r8
 8003bea:	4462      	add	r2, ip
 8003bec:	6812      	ldr	r2, [r2, #0]
 8003bee:	18d3      	adds	r3, r2, r3
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b21      	cmp	r3, #33	; 0x21
 8003bf4:	d111      	bne.n	8003c1a <printASCIIarray+0xfc6>
 8003bf6:	190b      	adds	r3, r1, r4
 8003bf8:	2208      	movs	r2, #8
 8003bfa:	4694      	mov	ip, r2
 8003bfc:	44bc      	add	ip, r7
 8003bfe:	4463      	add	r3, ip
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	1902      	adds	r2, r0, r4
 8003c04:	2108      	movs	r1, #8
 8003c06:	468c      	mov	ip, r1
 8003c08:	2108      	movs	r1, #8
 8003c0a:	4688      	mov	r8, r1
 8003c0c:	44b8      	add	r8, r7
 8003c0e:	44c4      	add	ip, r8
 8003c10:	4462      	add	r2, ip
 8003c12:	6812      	ldr	r2, [r2, #0]
 8003c14:	18d3      	adds	r3, r2, r3
 8003c16:	2201      	movs	r2, #1
 8003c18:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x25){dataASCII[i]=0x02;}
 8003c1a:	2162      	movs	r1, #98	; 0x62
 8003c1c:	248c      	movs	r4, #140	; 0x8c
 8003c1e:	0064      	lsls	r4, r4, #1
 8003c20:	190b      	adds	r3, r1, r4
 8003c22:	2208      	movs	r2, #8
 8003c24:	4694      	mov	ip, r2
 8003c26:	44bc      	add	ip, r7
 8003c28:	4463      	add	r3, ip
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	2080      	movs	r0, #128	; 0x80
 8003c2e:	1902      	adds	r2, r0, r4
 8003c30:	2608      	movs	r6, #8
 8003c32:	46b4      	mov	ip, r6
 8003c34:	2608      	movs	r6, #8
 8003c36:	46b0      	mov	r8, r6
 8003c38:	44b8      	add	r8, r7
 8003c3a:	44c4      	add	ip, r8
 8003c3c:	4462      	add	r2, ip
 8003c3e:	6812      	ldr	r2, [r2, #0]
 8003c40:	18d3      	adds	r3, r2, r3
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b25      	cmp	r3, #37	; 0x25
 8003c46:	d111      	bne.n	8003c6c <printASCIIarray+0x1018>
 8003c48:	190b      	adds	r3, r1, r4
 8003c4a:	2208      	movs	r2, #8
 8003c4c:	4694      	mov	ip, r2
 8003c4e:	44bc      	add	ip, r7
 8003c50:	4463      	add	r3, ip
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	1902      	adds	r2, r0, r4
 8003c56:	2108      	movs	r1, #8
 8003c58:	468c      	mov	ip, r1
 8003c5a:	2108      	movs	r1, #8
 8003c5c:	4688      	mov	r8, r1
 8003c5e:	44b8      	add	r8, r7
 8003c60:	44c4      	add	ip, r8
 8003c62:	4462      	add	r2, ip
 8003c64:	6812      	ldr	r2, [r2, #0]
 8003c66:	18d3      	adds	r3, r2, r3
 8003c68:	2202      	movs	r2, #2
 8003c6a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x28){dataASCII[i]=0x03;}
 8003c6c:	2162      	movs	r1, #98	; 0x62
 8003c6e:	248c      	movs	r4, #140	; 0x8c
 8003c70:	0064      	lsls	r4, r4, #1
 8003c72:	190b      	adds	r3, r1, r4
 8003c74:	2208      	movs	r2, #8
 8003c76:	4694      	mov	ip, r2
 8003c78:	44bc      	add	ip, r7
 8003c7a:	4463      	add	r3, ip
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	2080      	movs	r0, #128	; 0x80
 8003c80:	1902      	adds	r2, r0, r4
 8003c82:	2608      	movs	r6, #8
 8003c84:	46b4      	mov	ip, r6
 8003c86:	2608      	movs	r6, #8
 8003c88:	46b0      	mov	r8, r6
 8003c8a:	44b8      	add	r8, r7
 8003c8c:	44c4      	add	ip, r8
 8003c8e:	4462      	add	r2, ip
 8003c90:	6812      	ldr	r2, [r2, #0]
 8003c92:	18d3      	adds	r3, r2, r3
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	2b28      	cmp	r3, #40	; 0x28
 8003c98:	d111      	bne.n	8003cbe <printASCIIarray+0x106a>
 8003c9a:	190b      	adds	r3, r1, r4
 8003c9c:	2208      	movs	r2, #8
 8003c9e:	4694      	mov	ip, r2
 8003ca0:	44bc      	add	ip, r7
 8003ca2:	4463      	add	r3, ip
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	1902      	adds	r2, r0, r4
 8003ca8:	2108      	movs	r1, #8
 8003caa:	468c      	mov	ip, r1
 8003cac:	2108      	movs	r1, #8
 8003cae:	4688      	mov	r8, r1
 8003cb0:	44b8      	add	r8, r7
 8003cb2:	44c4      	add	ip, r8
 8003cb4:	4462      	add	r2, ip
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	18d3      	adds	r3, r2, r3
 8003cba:	2203      	movs	r2, #3
 8003cbc:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x29){dataASCII[i]=0x04;}
 8003cbe:	2162      	movs	r1, #98	; 0x62
 8003cc0:	248c      	movs	r4, #140	; 0x8c
 8003cc2:	0064      	lsls	r4, r4, #1
 8003cc4:	190b      	adds	r3, r1, r4
 8003cc6:	2208      	movs	r2, #8
 8003cc8:	4694      	mov	ip, r2
 8003cca:	44bc      	add	ip, r7
 8003ccc:	4463      	add	r3, ip
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	2080      	movs	r0, #128	; 0x80
 8003cd2:	1902      	adds	r2, r0, r4
 8003cd4:	2608      	movs	r6, #8
 8003cd6:	46b4      	mov	ip, r6
 8003cd8:	2608      	movs	r6, #8
 8003cda:	46b0      	mov	r8, r6
 8003cdc:	44b8      	add	r8, r7
 8003cde:	44c4      	add	ip, r8
 8003ce0:	4462      	add	r2, ip
 8003ce2:	6812      	ldr	r2, [r2, #0]
 8003ce4:	18d3      	adds	r3, r2, r3
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b29      	cmp	r3, #41	; 0x29
 8003cea:	d111      	bne.n	8003d10 <printASCIIarray+0x10bc>
 8003cec:	190b      	adds	r3, r1, r4
 8003cee:	2208      	movs	r2, #8
 8003cf0:	4694      	mov	ip, r2
 8003cf2:	44bc      	add	ip, r7
 8003cf4:	4463      	add	r3, ip
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	1902      	adds	r2, r0, r4
 8003cfa:	2108      	movs	r1, #8
 8003cfc:	468c      	mov	ip, r1
 8003cfe:	2108      	movs	r1, #8
 8003d00:	4688      	mov	r8, r1
 8003d02:	44b8      	add	r8, r7
 8003d04:	44c4      	add	ip, r8
 8003d06:	4462      	add	r2, ip
 8003d08:	6812      	ldr	r2, [r2, #0]
 8003d0a:	18d3      	adds	r3, r2, r3
 8003d0c:	2204      	movs	r2, #4
 8003d0e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2a){dataASCII[i]=0x05;}
 8003d10:	2162      	movs	r1, #98	; 0x62
 8003d12:	248c      	movs	r4, #140	; 0x8c
 8003d14:	0064      	lsls	r4, r4, #1
 8003d16:	190b      	adds	r3, r1, r4
 8003d18:	2208      	movs	r2, #8
 8003d1a:	4694      	mov	ip, r2
 8003d1c:	44bc      	add	ip, r7
 8003d1e:	4463      	add	r3, ip
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	2080      	movs	r0, #128	; 0x80
 8003d24:	1902      	adds	r2, r0, r4
 8003d26:	2608      	movs	r6, #8
 8003d28:	46b4      	mov	ip, r6
 8003d2a:	2608      	movs	r6, #8
 8003d2c:	46b0      	mov	r8, r6
 8003d2e:	44b8      	add	r8, r7
 8003d30:	44c4      	add	ip, r8
 8003d32:	4462      	add	r2, ip
 8003d34:	6812      	ldr	r2, [r2, #0]
 8003d36:	18d3      	adds	r3, r2, r3
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b2a      	cmp	r3, #42	; 0x2a
 8003d3c:	d111      	bne.n	8003d62 <printASCIIarray+0x110e>
 8003d3e:	190b      	adds	r3, r1, r4
 8003d40:	2208      	movs	r2, #8
 8003d42:	4694      	mov	ip, r2
 8003d44:	44bc      	add	ip, r7
 8003d46:	4463      	add	r3, ip
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	1902      	adds	r2, r0, r4
 8003d4c:	2108      	movs	r1, #8
 8003d4e:	468c      	mov	ip, r1
 8003d50:	2108      	movs	r1, #8
 8003d52:	4688      	mov	r8, r1
 8003d54:	44b8      	add	r8, r7
 8003d56:	44c4      	add	ip, r8
 8003d58:	4462      	add	r2, ip
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	18d3      	adds	r3, r2, r3
 8003d5e:	2205      	movs	r2, #5
 8003d60:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2b){dataASCII[i]=0x06;}
 8003d62:	2162      	movs	r1, #98	; 0x62
 8003d64:	248c      	movs	r4, #140	; 0x8c
 8003d66:	0064      	lsls	r4, r4, #1
 8003d68:	190b      	adds	r3, r1, r4
 8003d6a:	2208      	movs	r2, #8
 8003d6c:	4694      	mov	ip, r2
 8003d6e:	44bc      	add	ip, r7
 8003d70:	4463      	add	r3, ip
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	2080      	movs	r0, #128	; 0x80
 8003d76:	1902      	adds	r2, r0, r4
 8003d78:	2608      	movs	r6, #8
 8003d7a:	46b4      	mov	ip, r6
 8003d7c:	2608      	movs	r6, #8
 8003d7e:	46b0      	mov	r8, r6
 8003d80:	44b8      	add	r8, r7
 8003d82:	44c4      	add	ip, r8
 8003d84:	4462      	add	r2, ip
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	18d3      	adds	r3, r2, r3
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	2b2b      	cmp	r3, #43	; 0x2b
 8003d8e:	d111      	bne.n	8003db4 <printASCIIarray+0x1160>
 8003d90:	190b      	adds	r3, r1, r4
 8003d92:	2208      	movs	r2, #8
 8003d94:	4694      	mov	ip, r2
 8003d96:	44bc      	add	ip, r7
 8003d98:	4463      	add	r3, ip
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	1902      	adds	r2, r0, r4
 8003d9e:	2108      	movs	r1, #8
 8003da0:	468c      	mov	ip, r1
 8003da2:	2108      	movs	r1, #8
 8003da4:	4688      	mov	r8, r1
 8003da6:	44b8      	add	r8, r7
 8003da8:	44c4      	add	ip, r8
 8003daa:	4462      	add	r2, ip
 8003dac:	6812      	ldr	r2, [r2, #0]
 8003dae:	18d3      	adds	r3, r2, r3
 8003db0:	2206      	movs	r2, #6
 8003db2:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2c){dataASCII[i]=0x07;}
 8003db4:	2162      	movs	r1, #98	; 0x62
 8003db6:	248c      	movs	r4, #140	; 0x8c
 8003db8:	0064      	lsls	r4, r4, #1
 8003dba:	190b      	adds	r3, r1, r4
 8003dbc:	2208      	movs	r2, #8
 8003dbe:	4694      	mov	ip, r2
 8003dc0:	44bc      	add	ip, r7
 8003dc2:	4463      	add	r3, ip
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	2080      	movs	r0, #128	; 0x80
 8003dc8:	1902      	adds	r2, r0, r4
 8003dca:	2608      	movs	r6, #8
 8003dcc:	46b4      	mov	ip, r6
 8003dce:	2608      	movs	r6, #8
 8003dd0:	46b0      	mov	r8, r6
 8003dd2:	44b8      	add	r8, r7
 8003dd4:	44c4      	add	ip, r8
 8003dd6:	4462      	add	r2, ip
 8003dd8:	6812      	ldr	r2, [r2, #0]
 8003dda:	18d3      	adds	r3, r2, r3
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	2b2c      	cmp	r3, #44	; 0x2c
 8003de0:	d111      	bne.n	8003e06 <printASCIIarray+0x11b2>
 8003de2:	190b      	adds	r3, r1, r4
 8003de4:	2208      	movs	r2, #8
 8003de6:	4694      	mov	ip, r2
 8003de8:	44bc      	add	ip, r7
 8003dea:	4463      	add	r3, ip
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	1902      	adds	r2, r0, r4
 8003df0:	2108      	movs	r1, #8
 8003df2:	468c      	mov	ip, r1
 8003df4:	2108      	movs	r1, #8
 8003df6:	4688      	mov	r8, r1
 8003df8:	44b8      	add	r8, r7
 8003dfa:	44c4      	add	ip, r8
 8003dfc:	4462      	add	r2, ip
 8003dfe:	6812      	ldr	r2, [r2, #0]
 8003e00:	18d3      	adds	r3, r2, r3
 8003e02:	2207      	movs	r2, #7
 8003e04:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2d){dataASCII[i]=0x08;}
 8003e06:	2162      	movs	r1, #98	; 0x62
 8003e08:	248c      	movs	r4, #140	; 0x8c
 8003e0a:	0064      	lsls	r4, r4, #1
 8003e0c:	190b      	adds	r3, r1, r4
 8003e0e:	2208      	movs	r2, #8
 8003e10:	4694      	mov	ip, r2
 8003e12:	44bc      	add	ip, r7
 8003e14:	4463      	add	r3, ip
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	2080      	movs	r0, #128	; 0x80
 8003e1a:	1902      	adds	r2, r0, r4
 8003e1c:	2608      	movs	r6, #8
 8003e1e:	46b4      	mov	ip, r6
 8003e20:	2608      	movs	r6, #8
 8003e22:	46b0      	mov	r8, r6
 8003e24:	44b8      	add	r8, r7
 8003e26:	44c4      	add	ip, r8
 8003e28:	4462      	add	r2, ip
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	18d3      	adds	r3, r2, r3
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b2d      	cmp	r3, #45	; 0x2d
 8003e32:	d111      	bne.n	8003e58 <printASCIIarray+0x1204>
 8003e34:	190b      	adds	r3, r1, r4
 8003e36:	2208      	movs	r2, #8
 8003e38:	4694      	mov	ip, r2
 8003e3a:	44bc      	add	ip, r7
 8003e3c:	4463      	add	r3, ip
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	1902      	adds	r2, r0, r4
 8003e42:	2108      	movs	r1, #8
 8003e44:	468c      	mov	ip, r1
 8003e46:	2108      	movs	r1, #8
 8003e48:	4688      	mov	r8, r1
 8003e4a:	44b8      	add	r8, r7
 8003e4c:	44c4      	add	ip, r8
 8003e4e:	4462      	add	r2, ip
 8003e50:	6812      	ldr	r2, [r2, #0]
 8003e52:	18d3      	adds	r3, r2, r3
 8003e54:	2208      	movs	r2, #8
 8003e56:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2e){dataASCII[i]=0x09;}
 8003e58:	2162      	movs	r1, #98	; 0x62
 8003e5a:	248c      	movs	r4, #140	; 0x8c
 8003e5c:	0064      	lsls	r4, r4, #1
 8003e5e:	190b      	adds	r3, r1, r4
 8003e60:	2208      	movs	r2, #8
 8003e62:	4694      	mov	ip, r2
 8003e64:	44bc      	add	ip, r7
 8003e66:	4463      	add	r3, ip
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	2080      	movs	r0, #128	; 0x80
 8003e6c:	1902      	adds	r2, r0, r4
 8003e6e:	2608      	movs	r6, #8
 8003e70:	46b4      	mov	ip, r6
 8003e72:	2608      	movs	r6, #8
 8003e74:	46b0      	mov	r8, r6
 8003e76:	44b8      	add	r8, r7
 8003e78:	44c4      	add	ip, r8
 8003e7a:	4462      	add	r2, ip
 8003e7c:	6812      	ldr	r2, [r2, #0]
 8003e7e:	18d3      	adds	r3, r2, r3
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b2e      	cmp	r3, #46	; 0x2e
 8003e84:	d111      	bne.n	8003eaa <printASCIIarray+0x1256>
 8003e86:	190b      	adds	r3, r1, r4
 8003e88:	2208      	movs	r2, #8
 8003e8a:	4694      	mov	ip, r2
 8003e8c:	44bc      	add	ip, r7
 8003e8e:	4463      	add	r3, ip
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	1902      	adds	r2, r0, r4
 8003e94:	2108      	movs	r1, #8
 8003e96:	468c      	mov	ip, r1
 8003e98:	2108      	movs	r1, #8
 8003e9a:	4688      	mov	r8, r1
 8003e9c:	44b8      	add	r8, r7
 8003e9e:	44c4      	add	ip, r8
 8003ea0:	4462      	add	r2, ip
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	18d3      	adds	r3, r2, r3
 8003ea6:	2209      	movs	r2, #9
 8003ea8:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2f){dataASCII[i]=0x0a;}
 8003eaa:	2162      	movs	r1, #98	; 0x62
 8003eac:	248c      	movs	r4, #140	; 0x8c
 8003eae:	0064      	lsls	r4, r4, #1
 8003eb0:	190b      	adds	r3, r1, r4
 8003eb2:	2208      	movs	r2, #8
 8003eb4:	4694      	mov	ip, r2
 8003eb6:	44bc      	add	ip, r7
 8003eb8:	4463      	add	r3, ip
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	2080      	movs	r0, #128	; 0x80
 8003ebe:	1902      	adds	r2, r0, r4
 8003ec0:	2608      	movs	r6, #8
 8003ec2:	46b4      	mov	ip, r6
 8003ec4:	2608      	movs	r6, #8
 8003ec6:	46b0      	mov	r8, r6
 8003ec8:	44b8      	add	r8, r7
 8003eca:	44c4      	add	ip, r8
 8003ecc:	4462      	add	r2, ip
 8003ece:	6812      	ldr	r2, [r2, #0]
 8003ed0:	18d3      	adds	r3, r2, r3
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2b2f      	cmp	r3, #47	; 0x2f
 8003ed6:	d111      	bne.n	8003efc <printASCIIarray+0x12a8>
 8003ed8:	190b      	adds	r3, r1, r4
 8003eda:	2208      	movs	r2, #8
 8003edc:	4694      	mov	ip, r2
 8003ede:	44bc      	add	ip, r7
 8003ee0:	4463      	add	r3, ip
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	1902      	adds	r2, r0, r4
 8003ee6:	2108      	movs	r1, #8
 8003ee8:	468c      	mov	ip, r1
 8003eea:	2108      	movs	r1, #8
 8003eec:	4688      	mov	r8, r1
 8003eee:	44b8      	add	r8, r7
 8003ef0:	44c4      	add	ip, r8
 8003ef2:	4462      	add	r2, ip
 8003ef4:	6812      	ldr	r2, [r2, #0]
 8003ef6:	18d3      	adds	r3, r2, r3
 8003ef8:	220a      	movs	r2, #10
 8003efa:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x30){dataASCII[i]=0x0b;}
 8003efc:	2162      	movs	r1, #98	; 0x62
 8003efe:	248c      	movs	r4, #140	; 0x8c
 8003f00:	0064      	lsls	r4, r4, #1
 8003f02:	190b      	adds	r3, r1, r4
 8003f04:	2208      	movs	r2, #8
 8003f06:	4694      	mov	ip, r2
 8003f08:	44bc      	add	ip, r7
 8003f0a:	4463      	add	r3, ip
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	2080      	movs	r0, #128	; 0x80
 8003f10:	1902      	adds	r2, r0, r4
 8003f12:	2608      	movs	r6, #8
 8003f14:	46b4      	mov	ip, r6
 8003f16:	2608      	movs	r6, #8
 8003f18:	46b0      	mov	r8, r6
 8003f1a:	44b8      	add	r8, r7
 8003f1c:	44c4      	add	ip, r8
 8003f1e:	4462      	add	r2, ip
 8003f20:	6812      	ldr	r2, [r2, #0]
 8003f22:	18d3      	adds	r3, r2, r3
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	2b30      	cmp	r3, #48	; 0x30
 8003f28:	d111      	bne.n	8003f4e <printASCIIarray+0x12fa>
 8003f2a:	190b      	adds	r3, r1, r4
 8003f2c:	2208      	movs	r2, #8
 8003f2e:	4694      	mov	ip, r2
 8003f30:	44bc      	add	ip, r7
 8003f32:	4463      	add	r3, ip
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	1902      	adds	r2, r0, r4
 8003f38:	2108      	movs	r1, #8
 8003f3a:	468c      	mov	ip, r1
 8003f3c:	2108      	movs	r1, #8
 8003f3e:	4688      	mov	r8, r1
 8003f40:	44b8      	add	r8, r7
 8003f42:	44c4      	add	ip, r8
 8003f44:	4462      	add	r2, ip
 8003f46:	6812      	ldr	r2, [r2, #0]
 8003f48:	18d3      	adds	r3, r2, r3
 8003f4a:	220b      	movs	r2, #11
 8003f4c:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x31){dataASCII[i]=0x0c;}
 8003f4e:	2162      	movs	r1, #98	; 0x62
 8003f50:	248c      	movs	r4, #140	; 0x8c
 8003f52:	0064      	lsls	r4, r4, #1
 8003f54:	190b      	adds	r3, r1, r4
 8003f56:	2208      	movs	r2, #8
 8003f58:	4694      	mov	ip, r2
 8003f5a:	44bc      	add	ip, r7
 8003f5c:	4463      	add	r3, ip
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	2080      	movs	r0, #128	; 0x80
 8003f62:	1902      	adds	r2, r0, r4
 8003f64:	2608      	movs	r6, #8
 8003f66:	46b4      	mov	ip, r6
 8003f68:	2608      	movs	r6, #8
 8003f6a:	46b0      	mov	r8, r6
 8003f6c:	44b8      	add	r8, r7
 8003f6e:	44c4      	add	ip, r8
 8003f70:	4462      	add	r2, ip
 8003f72:	6812      	ldr	r2, [r2, #0]
 8003f74:	18d3      	adds	r3, r2, r3
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b31      	cmp	r3, #49	; 0x31
 8003f7a:	d111      	bne.n	8003fa0 <printASCIIarray+0x134c>
 8003f7c:	190b      	adds	r3, r1, r4
 8003f7e:	2208      	movs	r2, #8
 8003f80:	4694      	mov	ip, r2
 8003f82:	44bc      	add	ip, r7
 8003f84:	4463      	add	r3, ip
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	1902      	adds	r2, r0, r4
 8003f8a:	2108      	movs	r1, #8
 8003f8c:	468c      	mov	ip, r1
 8003f8e:	2108      	movs	r1, #8
 8003f90:	4688      	mov	r8, r1
 8003f92:	44b8      	add	r8, r7
 8003f94:	44c4      	add	ip, r8
 8003f96:	4462      	add	r2, ip
 8003f98:	6812      	ldr	r2, [r2, #0]
 8003f9a:	18d3      	adds	r3, r2, r3
 8003f9c:	220c      	movs	r2, #12
 8003f9e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x32){dataASCII[i]=0x0d;}
 8003fa0:	2162      	movs	r1, #98	; 0x62
 8003fa2:	248c      	movs	r4, #140	; 0x8c
 8003fa4:	0064      	lsls	r4, r4, #1
 8003fa6:	190b      	adds	r3, r1, r4
 8003fa8:	2208      	movs	r2, #8
 8003faa:	4694      	mov	ip, r2
 8003fac:	44bc      	add	ip, r7
 8003fae:	4463      	add	r3, ip
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	2080      	movs	r0, #128	; 0x80
 8003fb4:	1902      	adds	r2, r0, r4
 8003fb6:	2608      	movs	r6, #8
 8003fb8:	46b4      	mov	ip, r6
 8003fba:	2608      	movs	r6, #8
 8003fbc:	46b0      	mov	r8, r6
 8003fbe:	44b8      	add	r8, r7
 8003fc0:	44c4      	add	ip, r8
 8003fc2:	4462      	add	r2, ip
 8003fc4:	6812      	ldr	r2, [r2, #0]
 8003fc6:	18d3      	adds	r3, r2, r3
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b32      	cmp	r3, #50	; 0x32
 8003fcc:	d111      	bne.n	8003ff2 <printASCIIarray+0x139e>
 8003fce:	190b      	adds	r3, r1, r4
 8003fd0:	2208      	movs	r2, #8
 8003fd2:	4694      	mov	ip, r2
 8003fd4:	44bc      	add	ip, r7
 8003fd6:	4463      	add	r3, ip
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	1902      	adds	r2, r0, r4
 8003fdc:	2108      	movs	r1, #8
 8003fde:	468c      	mov	ip, r1
 8003fe0:	2108      	movs	r1, #8
 8003fe2:	4688      	mov	r8, r1
 8003fe4:	44b8      	add	r8, r7
 8003fe6:	44c4      	add	ip, r8
 8003fe8:	4462      	add	r2, ip
 8003fea:	6812      	ldr	r2, [r2, #0]
 8003fec:	18d3      	adds	r3, r2, r3
 8003fee:	220d      	movs	r2, #13
 8003ff0:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x33){dataASCII[i]=0x0e;}
 8003ff2:	2162      	movs	r1, #98	; 0x62
 8003ff4:	248c      	movs	r4, #140	; 0x8c
 8003ff6:	0064      	lsls	r4, r4, #1
 8003ff8:	190b      	adds	r3, r1, r4
 8003ffa:	2208      	movs	r2, #8
 8003ffc:	4694      	mov	ip, r2
 8003ffe:	44bc      	add	ip, r7
 8004000:	4463      	add	r3, ip
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	2080      	movs	r0, #128	; 0x80
 8004006:	1902      	adds	r2, r0, r4
 8004008:	2608      	movs	r6, #8
 800400a:	46b4      	mov	ip, r6
 800400c:	2608      	movs	r6, #8
 800400e:	46b0      	mov	r8, r6
 8004010:	44b8      	add	r8, r7
 8004012:	44c4      	add	ip, r8
 8004014:	4462      	add	r2, ip
 8004016:	6812      	ldr	r2, [r2, #0]
 8004018:	18d3      	adds	r3, r2, r3
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b33      	cmp	r3, #51	; 0x33
 800401e:	d111      	bne.n	8004044 <printASCIIarray+0x13f0>
 8004020:	190b      	adds	r3, r1, r4
 8004022:	2208      	movs	r2, #8
 8004024:	4694      	mov	ip, r2
 8004026:	44bc      	add	ip, r7
 8004028:	4463      	add	r3, ip
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	1902      	adds	r2, r0, r4
 800402e:	2108      	movs	r1, #8
 8004030:	468c      	mov	ip, r1
 8004032:	2108      	movs	r1, #8
 8004034:	4688      	mov	r8, r1
 8004036:	44b8      	add	r8, r7
 8004038:	44c4      	add	ip, r8
 800403a:	4462      	add	r2, ip
 800403c:	6812      	ldr	r2, [r2, #0]
 800403e:	18d3      	adds	r3, r2, r3
 8004040:	220e      	movs	r2, #14
 8004042:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x34){dataASCII[i]=0x0f;}
 8004044:	2162      	movs	r1, #98	; 0x62
 8004046:	248c      	movs	r4, #140	; 0x8c
 8004048:	0064      	lsls	r4, r4, #1
 800404a:	190b      	adds	r3, r1, r4
 800404c:	2208      	movs	r2, #8
 800404e:	4694      	mov	ip, r2
 8004050:	44bc      	add	ip, r7
 8004052:	4463      	add	r3, ip
 8004054:	881b      	ldrh	r3, [r3, #0]
 8004056:	2080      	movs	r0, #128	; 0x80
 8004058:	1902      	adds	r2, r0, r4
 800405a:	2608      	movs	r6, #8
 800405c:	46b4      	mov	ip, r6
 800405e:	2608      	movs	r6, #8
 8004060:	46b0      	mov	r8, r6
 8004062:	44b8      	add	r8, r7
 8004064:	44c4      	add	ip, r8
 8004066:	4462      	add	r2, ip
 8004068:	6812      	ldr	r2, [r2, #0]
 800406a:	18d3      	adds	r3, r2, r3
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	2b34      	cmp	r3, #52	; 0x34
 8004070:	d111      	bne.n	8004096 <printASCIIarray+0x1442>
 8004072:	190b      	adds	r3, r1, r4
 8004074:	2208      	movs	r2, #8
 8004076:	4694      	mov	ip, r2
 8004078:	44bc      	add	ip, r7
 800407a:	4463      	add	r3, ip
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	1902      	adds	r2, r0, r4
 8004080:	2108      	movs	r1, #8
 8004082:	468c      	mov	ip, r1
 8004084:	2108      	movs	r1, #8
 8004086:	4688      	mov	r8, r1
 8004088:	44b8      	add	r8, r7
 800408a:	44c4      	add	ip, r8
 800408c:	4462      	add	r2, ip
 800408e:	6812      	ldr	r2, [r2, #0]
 8004090:	18d3      	adds	r3, r2, r3
 8004092:	220f      	movs	r2, #15
 8004094:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x35){dataASCII[i]=0x10;}
 8004096:	2162      	movs	r1, #98	; 0x62
 8004098:	248c      	movs	r4, #140	; 0x8c
 800409a:	0064      	lsls	r4, r4, #1
 800409c:	190b      	adds	r3, r1, r4
 800409e:	2208      	movs	r2, #8
 80040a0:	4694      	mov	ip, r2
 80040a2:	44bc      	add	ip, r7
 80040a4:	4463      	add	r3, ip
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	2080      	movs	r0, #128	; 0x80
 80040aa:	1902      	adds	r2, r0, r4
 80040ac:	2608      	movs	r6, #8
 80040ae:	46b4      	mov	ip, r6
 80040b0:	2608      	movs	r6, #8
 80040b2:	46b0      	mov	r8, r6
 80040b4:	44b8      	add	r8, r7
 80040b6:	44c4      	add	ip, r8
 80040b8:	4462      	add	r2, ip
 80040ba:	6812      	ldr	r2, [r2, #0]
 80040bc:	18d3      	adds	r3, r2, r3
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b35      	cmp	r3, #53	; 0x35
 80040c2:	d111      	bne.n	80040e8 <printASCIIarray+0x1494>
 80040c4:	190b      	adds	r3, r1, r4
 80040c6:	2208      	movs	r2, #8
 80040c8:	4694      	mov	ip, r2
 80040ca:	44bc      	add	ip, r7
 80040cc:	4463      	add	r3, ip
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	1902      	adds	r2, r0, r4
 80040d2:	2108      	movs	r1, #8
 80040d4:	468c      	mov	ip, r1
 80040d6:	2108      	movs	r1, #8
 80040d8:	4688      	mov	r8, r1
 80040da:	44b8      	add	r8, r7
 80040dc:	44c4      	add	ip, r8
 80040de:	4462      	add	r2, ip
 80040e0:	6812      	ldr	r2, [r2, #0]
 80040e2:	18d3      	adds	r3, r2, r3
 80040e4:	2210      	movs	r2, #16
 80040e6:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x36){dataASCII[i]=0x11;}
 80040e8:	2162      	movs	r1, #98	; 0x62
 80040ea:	248c      	movs	r4, #140	; 0x8c
 80040ec:	0064      	lsls	r4, r4, #1
 80040ee:	190b      	adds	r3, r1, r4
 80040f0:	2208      	movs	r2, #8
 80040f2:	4694      	mov	ip, r2
 80040f4:	44bc      	add	ip, r7
 80040f6:	4463      	add	r3, ip
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	2080      	movs	r0, #128	; 0x80
 80040fc:	1902      	adds	r2, r0, r4
 80040fe:	2608      	movs	r6, #8
 8004100:	46b4      	mov	ip, r6
 8004102:	2608      	movs	r6, #8
 8004104:	46b0      	mov	r8, r6
 8004106:	44b8      	add	r8, r7
 8004108:	44c4      	add	ip, r8
 800410a:	4462      	add	r2, ip
 800410c:	6812      	ldr	r2, [r2, #0]
 800410e:	18d3      	adds	r3, r2, r3
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b36      	cmp	r3, #54	; 0x36
 8004114:	d111      	bne.n	800413a <printASCIIarray+0x14e6>
 8004116:	190b      	adds	r3, r1, r4
 8004118:	2208      	movs	r2, #8
 800411a:	4694      	mov	ip, r2
 800411c:	44bc      	add	ip, r7
 800411e:	4463      	add	r3, ip
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	1902      	adds	r2, r0, r4
 8004124:	2108      	movs	r1, #8
 8004126:	468c      	mov	ip, r1
 8004128:	2108      	movs	r1, #8
 800412a:	4688      	mov	r8, r1
 800412c:	44b8      	add	r8, r7
 800412e:	44c4      	add	ip, r8
 8004130:	4462      	add	r2, ip
 8004132:	6812      	ldr	r2, [r2, #0]
 8004134:	18d3      	adds	r3, r2, r3
 8004136:	2211      	movs	r2, #17
 8004138:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x37){dataASCII[i]=0x12;}
 800413a:	2162      	movs	r1, #98	; 0x62
 800413c:	248c      	movs	r4, #140	; 0x8c
 800413e:	0064      	lsls	r4, r4, #1
 8004140:	190b      	adds	r3, r1, r4
 8004142:	2208      	movs	r2, #8
 8004144:	4694      	mov	ip, r2
 8004146:	44bc      	add	ip, r7
 8004148:	4463      	add	r3, ip
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	2080      	movs	r0, #128	; 0x80
 800414e:	1902      	adds	r2, r0, r4
 8004150:	2608      	movs	r6, #8
 8004152:	46b4      	mov	ip, r6
 8004154:	2608      	movs	r6, #8
 8004156:	46b0      	mov	r8, r6
 8004158:	44b8      	add	r8, r7
 800415a:	44c4      	add	ip, r8
 800415c:	4462      	add	r2, ip
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	18d3      	adds	r3, r2, r3
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b37      	cmp	r3, #55	; 0x37
 8004166:	d111      	bne.n	800418c <printASCIIarray+0x1538>
 8004168:	190b      	adds	r3, r1, r4
 800416a:	2208      	movs	r2, #8
 800416c:	4694      	mov	ip, r2
 800416e:	44bc      	add	ip, r7
 8004170:	4463      	add	r3, ip
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	1902      	adds	r2, r0, r4
 8004176:	2108      	movs	r1, #8
 8004178:	468c      	mov	ip, r1
 800417a:	2108      	movs	r1, #8
 800417c:	4688      	mov	r8, r1
 800417e:	44b8      	add	r8, r7
 8004180:	44c4      	add	ip, r8
 8004182:	4462      	add	r2, ip
 8004184:	6812      	ldr	r2, [r2, #0]
 8004186:	18d3      	adds	r3, r2, r3
 8004188:	2212      	movs	r2, #18
 800418a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x38){dataASCII[i]=0x13;}
 800418c:	2162      	movs	r1, #98	; 0x62
 800418e:	248c      	movs	r4, #140	; 0x8c
 8004190:	0064      	lsls	r4, r4, #1
 8004192:	190b      	adds	r3, r1, r4
 8004194:	2208      	movs	r2, #8
 8004196:	4694      	mov	ip, r2
 8004198:	44bc      	add	ip, r7
 800419a:	4463      	add	r3, ip
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	2080      	movs	r0, #128	; 0x80
 80041a0:	1902      	adds	r2, r0, r4
 80041a2:	2608      	movs	r6, #8
 80041a4:	46b4      	mov	ip, r6
 80041a6:	2608      	movs	r6, #8
 80041a8:	46b0      	mov	r8, r6
 80041aa:	44b8      	add	r8, r7
 80041ac:	44c4      	add	ip, r8
 80041ae:	4462      	add	r2, ip
 80041b0:	6812      	ldr	r2, [r2, #0]
 80041b2:	18d3      	adds	r3, r2, r3
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b38      	cmp	r3, #56	; 0x38
 80041b8:	d111      	bne.n	80041de <printASCIIarray+0x158a>
 80041ba:	190b      	adds	r3, r1, r4
 80041bc:	2208      	movs	r2, #8
 80041be:	4694      	mov	ip, r2
 80041c0:	44bc      	add	ip, r7
 80041c2:	4463      	add	r3, ip
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	1902      	adds	r2, r0, r4
 80041c8:	2108      	movs	r1, #8
 80041ca:	468c      	mov	ip, r1
 80041cc:	2108      	movs	r1, #8
 80041ce:	4688      	mov	r8, r1
 80041d0:	44b8      	add	r8, r7
 80041d2:	44c4      	add	ip, r8
 80041d4:	4462      	add	r2, ip
 80041d6:	6812      	ldr	r2, [r2, #0]
 80041d8:	18d3      	adds	r3, r2, r3
 80041da:	2213      	movs	r2, #19
 80041dc:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x39){dataASCII[i]=0x14;}
 80041de:	2162      	movs	r1, #98	; 0x62
 80041e0:	248c      	movs	r4, #140	; 0x8c
 80041e2:	0064      	lsls	r4, r4, #1
 80041e4:	190b      	adds	r3, r1, r4
 80041e6:	2208      	movs	r2, #8
 80041e8:	4694      	mov	ip, r2
 80041ea:	44bc      	add	ip, r7
 80041ec:	4463      	add	r3, ip
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	2080      	movs	r0, #128	; 0x80
 80041f2:	1902      	adds	r2, r0, r4
 80041f4:	2608      	movs	r6, #8
 80041f6:	46b4      	mov	ip, r6
 80041f8:	2608      	movs	r6, #8
 80041fa:	46b0      	mov	r8, r6
 80041fc:	44b8      	add	r8, r7
 80041fe:	44c4      	add	ip, r8
 8004200:	4462      	add	r2, ip
 8004202:	6812      	ldr	r2, [r2, #0]
 8004204:	18d3      	adds	r3, r2, r3
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	2b39      	cmp	r3, #57	; 0x39
 800420a:	d111      	bne.n	8004230 <printASCIIarray+0x15dc>
 800420c:	190b      	adds	r3, r1, r4
 800420e:	2208      	movs	r2, #8
 8004210:	4694      	mov	ip, r2
 8004212:	44bc      	add	ip, r7
 8004214:	4463      	add	r3, ip
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	1902      	adds	r2, r0, r4
 800421a:	2108      	movs	r1, #8
 800421c:	468c      	mov	ip, r1
 800421e:	2108      	movs	r1, #8
 8004220:	4688      	mov	r8, r1
 8004222:	44b8      	add	r8, r7
 8004224:	44c4      	add	ip, r8
 8004226:	4462      	add	r2, ip
 8004228:	6812      	ldr	r2, [r2, #0]
 800422a:	18d3      	adds	r3, r2, r3
 800422c:	2214      	movs	r2, #20
 800422e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3a){dataASCII[i]=0x15;}
 8004230:	2162      	movs	r1, #98	; 0x62
 8004232:	248c      	movs	r4, #140	; 0x8c
 8004234:	0064      	lsls	r4, r4, #1
 8004236:	190b      	adds	r3, r1, r4
 8004238:	2208      	movs	r2, #8
 800423a:	4694      	mov	ip, r2
 800423c:	44bc      	add	ip, r7
 800423e:	4463      	add	r3, ip
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	2080      	movs	r0, #128	; 0x80
 8004244:	1902      	adds	r2, r0, r4
 8004246:	2608      	movs	r6, #8
 8004248:	46b4      	mov	ip, r6
 800424a:	2608      	movs	r6, #8
 800424c:	46b0      	mov	r8, r6
 800424e:	44b8      	add	r8, r7
 8004250:	44c4      	add	ip, r8
 8004252:	4462      	add	r2, ip
 8004254:	6812      	ldr	r2, [r2, #0]
 8004256:	18d3      	adds	r3, r2, r3
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b3a      	cmp	r3, #58	; 0x3a
 800425c:	d111      	bne.n	8004282 <printASCIIarray+0x162e>
 800425e:	190b      	adds	r3, r1, r4
 8004260:	2208      	movs	r2, #8
 8004262:	4694      	mov	ip, r2
 8004264:	44bc      	add	ip, r7
 8004266:	4463      	add	r3, ip
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	1902      	adds	r2, r0, r4
 800426c:	2108      	movs	r1, #8
 800426e:	468c      	mov	ip, r1
 8004270:	2108      	movs	r1, #8
 8004272:	4688      	mov	r8, r1
 8004274:	44b8      	add	r8, r7
 8004276:	44c4      	add	ip, r8
 8004278:	4462      	add	r2, ip
 800427a:	6812      	ldr	r2, [r2, #0]
 800427c:	18d3      	adds	r3, r2, r3
 800427e:	2215      	movs	r2, #21
 8004280:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3b){dataASCII[i]=0x16;}
 8004282:	2162      	movs	r1, #98	; 0x62
 8004284:	248c      	movs	r4, #140	; 0x8c
 8004286:	0064      	lsls	r4, r4, #1
 8004288:	190b      	adds	r3, r1, r4
 800428a:	2208      	movs	r2, #8
 800428c:	4694      	mov	ip, r2
 800428e:	44bc      	add	ip, r7
 8004290:	4463      	add	r3, ip
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	2080      	movs	r0, #128	; 0x80
 8004296:	1902      	adds	r2, r0, r4
 8004298:	2608      	movs	r6, #8
 800429a:	46b4      	mov	ip, r6
 800429c:	2608      	movs	r6, #8
 800429e:	46b0      	mov	r8, r6
 80042a0:	44b8      	add	r8, r7
 80042a2:	44c4      	add	ip, r8
 80042a4:	4462      	add	r2, ip
 80042a6:	6812      	ldr	r2, [r2, #0]
 80042a8:	18d3      	adds	r3, r2, r3
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b3b      	cmp	r3, #59	; 0x3b
 80042ae:	d111      	bne.n	80042d4 <printASCIIarray+0x1680>
 80042b0:	190b      	adds	r3, r1, r4
 80042b2:	2208      	movs	r2, #8
 80042b4:	4694      	mov	ip, r2
 80042b6:	44bc      	add	ip, r7
 80042b8:	4463      	add	r3, ip
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	1902      	adds	r2, r0, r4
 80042be:	2108      	movs	r1, #8
 80042c0:	468c      	mov	ip, r1
 80042c2:	2108      	movs	r1, #8
 80042c4:	4688      	mov	r8, r1
 80042c6:	44b8      	add	r8, r7
 80042c8:	44c4      	add	ip, r8
 80042ca:	4462      	add	r2, ip
 80042cc:	6812      	ldr	r2, [r2, #0]
 80042ce:	18d3      	adds	r3, r2, r3
 80042d0:	2216      	movs	r2, #22
 80042d2:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3c){dataASCII[i]=0x17;}
 80042d4:	2162      	movs	r1, #98	; 0x62
 80042d6:	248c      	movs	r4, #140	; 0x8c
 80042d8:	0064      	lsls	r4, r4, #1
 80042da:	190b      	adds	r3, r1, r4
 80042dc:	2208      	movs	r2, #8
 80042de:	4694      	mov	ip, r2
 80042e0:	44bc      	add	ip, r7
 80042e2:	4463      	add	r3, ip
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	2080      	movs	r0, #128	; 0x80
 80042e8:	1902      	adds	r2, r0, r4
 80042ea:	2608      	movs	r6, #8
 80042ec:	46b4      	mov	ip, r6
 80042ee:	2608      	movs	r6, #8
 80042f0:	46b0      	mov	r8, r6
 80042f2:	44b8      	add	r8, r7
 80042f4:	44c4      	add	ip, r8
 80042f6:	4462      	add	r2, ip
 80042f8:	6812      	ldr	r2, [r2, #0]
 80042fa:	18d3      	adds	r3, r2, r3
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	2b3c      	cmp	r3, #60	; 0x3c
 8004300:	d111      	bne.n	8004326 <printASCIIarray+0x16d2>
 8004302:	190b      	adds	r3, r1, r4
 8004304:	2208      	movs	r2, #8
 8004306:	4694      	mov	ip, r2
 8004308:	44bc      	add	ip, r7
 800430a:	4463      	add	r3, ip
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	1902      	adds	r2, r0, r4
 8004310:	2108      	movs	r1, #8
 8004312:	468c      	mov	ip, r1
 8004314:	2108      	movs	r1, #8
 8004316:	4688      	mov	r8, r1
 8004318:	44b8      	add	r8, r7
 800431a:	44c4      	add	ip, r8
 800431c:	4462      	add	r2, ip
 800431e:	6812      	ldr	r2, [r2, #0]
 8004320:	18d3      	adds	r3, r2, r3
 8004322:	2217      	movs	r2, #23
 8004324:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3d){dataASCII[i]=0x18;}
 8004326:	2162      	movs	r1, #98	; 0x62
 8004328:	248c      	movs	r4, #140	; 0x8c
 800432a:	0064      	lsls	r4, r4, #1
 800432c:	190b      	adds	r3, r1, r4
 800432e:	2208      	movs	r2, #8
 8004330:	4694      	mov	ip, r2
 8004332:	44bc      	add	ip, r7
 8004334:	4463      	add	r3, ip
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	2080      	movs	r0, #128	; 0x80
 800433a:	1902      	adds	r2, r0, r4
 800433c:	2608      	movs	r6, #8
 800433e:	46b4      	mov	ip, r6
 8004340:	2608      	movs	r6, #8
 8004342:	46b0      	mov	r8, r6
 8004344:	44b8      	add	r8, r7
 8004346:	44c4      	add	ip, r8
 8004348:	4462      	add	r2, ip
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	18d3      	adds	r3, r2, r3
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b3d      	cmp	r3, #61	; 0x3d
 8004352:	d111      	bne.n	8004378 <printASCIIarray+0x1724>
 8004354:	190b      	adds	r3, r1, r4
 8004356:	2208      	movs	r2, #8
 8004358:	4694      	mov	ip, r2
 800435a:	44bc      	add	ip, r7
 800435c:	4463      	add	r3, ip
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	1902      	adds	r2, r0, r4
 8004362:	2108      	movs	r1, #8
 8004364:	468c      	mov	ip, r1
 8004366:	2108      	movs	r1, #8
 8004368:	4688      	mov	r8, r1
 800436a:	44b8      	add	r8, r7
 800436c:	44c4      	add	ip, r8
 800436e:	4462      	add	r2, ip
 8004370:	6812      	ldr	r2, [r2, #0]
 8004372:	18d3      	adds	r3, r2, r3
 8004374:	2218      	movs	r2, #24
 8004376:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3e){dataASCII[i]=0x19;}
 8004378:	2162      	movs	r1, #98	; 0x62
 800437a:	248c      	movs	r4, #140	; 0x8c
 800437c:	0064      	lsls	r4, r4, #1
 800437e:	190b      	adds	r3, r1, r4
 8004380:	2208      	movs	r2, #8
 8004382:	4694      	mov	ip, r2
 8004384:	44bc      	add	ip, r7
 8004386:	4463      	add	r3, ip
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	2080      	movs	r0, #128	; 0x80
 800438c:	1902      	adds	r2, r0, r4
 800438e:	2608      	movs	r6, #8
 8004390:	46b4      	mov	ip, r6
 8004392:	2608      	movs	r6, #8
 8004394:	46b0      	mov	r8, r6
 8004396:	44b8      	add	r8, r7
 8004398:	44c4      	add	ip, r8
 800439a:	4462      	add	r2, ip
 800439c:	6812      	ldr	r2, [r2, #0]
 800439e:	18d3      	adds	r3, r2, r3
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b3e      	cmp	r3, #62	; 0x3e
 80043a4:	d111      	bne.n	80043ca <printASCIIarray+0x1776>
 80043a6:	190b      	adds	r3, r1, r4
 80043a8:	2208      	movs	r2, #8
 80043aa:	4694      	mov	ip, r2
 80043ac:	44bc      	add	ip, r7
 80043ae:	4463      	add	r3, ip
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	1902      	adds	r2, r0, r4
 80043b4:	2108      	movs	r1, #8
 80043b6:	468c      	mov	ip, r1
 80043b8:	2108      	movs	r1, #8
 80043ba:	4688      	mov	r8, r1
 80043bc:	44b8      	add	r8, r7
 80043be:	44c4      	add	ip, r8
 80043c0:	4462      	add	r2, ip
 80043c2:	6812      	ldr	r2, [r2, #0]
 80043c4:	18d3      	adds	r3, r2, r3
 80043c6:	2219      	movs	r2, #25
 80043c8:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3f){dataASCII[i]=0x1a;}
 80043ca:	2162      	movs	r1, #98	; 0x62
 80043cc:	248c      	movs	r4, #140	; 0x8c
 80043ce:	0064      	lsls	r4, r4, #1
 80043d0:	190b      	adds	r3, r1, r4
 80043d2:	2208      	movs	r2, #8
 80043d4:	4694      	mov	ip, r2
 80043d6:	44bc      	add	ip, r7
 80043d8:	4463      	add	r3, ip
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	2080      	movs	r0, #128	; 0x80
 80043de:	1902      	adds	r2, r0, r4
 80043e0:	2608      	movs	r6, #8
 80043e2:	46b4      	mov	ip, r6
 80043e4:	2608      	movs	r6, #8
 80043e6:	46b0      	mov	r8, r6
 80043e8:	44b8      	add	r8, r7
 80043ea:	44c4      	add	ip, r8
 80043ec:	4462      	add	r2, ip
 80043ee:	6812      	ldr	r2, [r2, #0]
 80043f0:	18d3      	adds	r3, r2, r3
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b3f      	cmp	r3, #63	; 0x3f
 80043f6:	d111      	bne.n	800441c <printASCIIarray+0x17c8>
 80043f8:	190b      	adds	r3, r1, r4
 80043fa:	2208      	movs	r2, #8
 80043fc:	4694      	mov	ip, r2
 80043fe:	44bc      	add	ip, r7
 8004400:	4463      	add	r3, ip
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	1902      	adds	r2, r0, r4
 8004406:	2108      	movs	r1, #8
 8004408:	468c      	mov	ip, r1
 800440a:	2108      	movs	r1, #8
 800440c:	4688      	mov	r8, r1
 800440e:	44b8      	add	r8, r7
 8004410:	44c4      	add	ip, r8
 8004412:	4462      	add	r2, ip
 8004414:	6812      	ldr	r2, [r2, #0]
 8004416:	18d3      	adds	r3, r2, r3
 8004418:	221a      	movs	r2, #26
 800441a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5b){dataASCII[i]=0x1b;}
 800441c:	2162      	movs	r1, #98	; 0x62
 800441e:	248c      	movs	r4, #140	; 0x8c
 8004420:	0064      	lsls	r4, r4, #1
 8004422:	190b      	adds	r3, r1, r4
 8004424:	2208      	movs	r2, #8
 8004426:	4694      	mov	ip, r2
 8004428:	44bc      	add	ip, r7
 800442a:	4463      	add	r3, ip
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	2080      	movs	r0, #128	; 0x80
 8004430:	1902      	adds	r2, r0, r4
 8004432:	2608      	movs	r6, #8
 8004434:	46b4      	mov	ip, r6
 8004436:	2608      	movs	r6, #8
 8004438:	46b0      	mov	r8, r6
 800443a:	44b8      	add	r8, r7
 800443c:	44c4      	add	ip, r8
 800443e:	4462      	add	r2, ip
 8004440:	6812      	ldr	r2, [r2, #0]
 8004442:	18d3      	adds	r3, r2, r3
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2b5b      	cmp	r3, #91	; 0x5b
 8004448:	d111      	bne.n	800446e <printASCIIarray+0x181a>
 800444a:	190b      	adds	r3, r1, r4
 800444c:	2208      	movs	r2, #8
 800444e:	4694      	mov	ip, r2
 8004450:	44bc      	add	ip, r7
 8004452:	4463      	add	r3, ip
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	1902      	adds	r2, r0, r4
 8004458:	2108      	movs	r1, #8
 800445a:	468c      	mov	ip, r1
 800445c:	2108      	movs	r1, #8
 800445e:	4688      	mov	r8, r1
 8004460:	44b8      	add	r8, r7
 8004462:	44c4      	add	ip, r8
 8004464:	4462      	add	r2, ip
 8004466:	6812      	ldr	r2, [r2, #0]
 8004468:	18d3      	adds	r3, r2, r3
 800446a:	221b      	movs	r2, #27
 800446c:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5c){dataASCII[i]=0x1c;}
 800446e:	2162      	movs	r1, #98	; 0x62
 8004470:	248c      	movs	r4, #140	; 0x8c
 8004472:	0064      	lsls	r4, r4, #1
 8004474:	190b      	adds	r3, r1, r4
 8004476:	2208      	movs	r2, #8
 8004478:	4694      	mov	ip, r2
 800447a:	44bc      	add	ip, r7
 800447c:	4463      	add	r3, ip
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	2080      	movs	r0, #128	; 0x80
 8004482:	1902      	adds	r2, r0, r4
 8004484:	2608      	movs	r6, #8
 8004486:	46b4      	mov	ip, r6
 8004488:	2608      	movs	r6, #8
 800448a:	46b0      	mov	r8, r6
 800448c:	44b8      	add	r8, r7
 800448e:	44c4      	add	ip, r8
 8004490:	4462      	add	r2, ip
 8004492:	6812      	ldr	r2, [r2, #0]
 8004494:	18d3      	adds	r3, r2, r3
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	2b5c      	cmp	r3, #92	; 0x5c
 800449a:	d111      	bne.n	80044c0 <printASCIIarray+0x186c>
 800449c:	190b      	adds	r3, r1, r4
 800449e:	2208      	movs	r2, #8
 80044a0:	4694      	mov	ip, r2
 80044a2:	44bc      	add	ip, r7
 80044a4:	4463      	add	r3, ip
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	1902      	adds	r2, r0, r4
 80044aa:	2108      	movs	r1, #8
 80044ac:	468c      	mov	ip, r1
 80044ae:	2108      	movs	r1, #8
 80044b0:	4688      	mov	r8, r1
 80044b2:	44b8      	add	r8, r7
 80044b4:	44c4      	add	ip, r8
 80044b6:	4462      	add	r2, ip
 80044b8:	6812      	ldr	r2, [r2, #0]
 80044ba:	18d3      	adds	r3, r2, r3
 80044bc:	221c      	movs	r2, #28
 80044be:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5d){dataASCII[i]=0x1d;}
 80044c0:	2162      	movs	r1, #98	; 0x62
 80044c2:	248c      	movs	r4, #140	; 0x8c
 80044c4:	0064      	lsls	r4, r4, #1
 80044c6:	190b      	adds	r3, r1, r4
 80044c8:	2208      	movs	r2, #8
 80044ca:	4694      	mov	ip, r2
 80044cc:	44bc      	add	ip, r7
 80044ce:	4463      	add	r3, ip
 80044d0:	881b      	ldrh	r3, [r3, #0]
 80044d2:	2080      	movs	r0, #128	; 0x80
 80044d4:	1902      	adds	r2, r0, r4
 80044d6:	2608      	movs	r6, #8
 80044d8:	46b4      	mov	ip, r6
 80044da:	2608      	movs	r6, #8
 80044dc:	46b0      	mov	r8, r6
 80044de:	44b8      	add	r8, r7
 80044e0:	44c4      	add	ip, r8
 80044e2:	4462      	add	r2, ip
 80044e4:	6812      	ldr	r2, [r2, #0]
 80044e6:	18d3      	adds	r3, r2, r3
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b5d      	cmp	r3, #93	; 0x5d
 80044ec:	d111      	bne.n	8004512 <printASCIIarray+0x18be>
 80044ee:	190b      	adds	r3, r1, r4
 80044f0:	2208      	movs	r2, #8
 80044f2:	4694      	mov	ip, r2
 80044f4:	44bc      	add	ip, r7
 80044f6:	4463      	add	r3, ip
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	1902      	adds	r2, r0, r4
 80044fc:	2108      	movs	r1, #8
 80044fe:	468c      	mov	ip, r1
 8004500:	2108      	movs	r1, #8
 8004502:	4688      	mov	r8, r1
 8004504:	44b8      	add	r8, r7
 8004506:	44c4      	add	ip, r8
 8004508:	4462      	add	r2, ip
 800450a:	6812      	ldr	r2, [r2, #0]
 800450c:	18d3      	adds	r3, r2, r3
 800450e:	221d      	movs	r2, #29
 8004510:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5f){dataASCII[i]=0x1e;}
 8004512:	2162      	movs	r1, #98	; 0x62
 8004514:	248c      	movs	r4, #140	; 0x8c
 8004516:	0064      	lsls	r4, r4, #1
 8004518:	190b      	adds	r3, r1, r4
 800451a:	2208      	movs	r2, #8
 800451c:	4694      	mov	ip, r2
 800451e:	44bc      	add	ip, r7
 8004520:	4463      	add	r3, ip
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	2080      	movs	r0, #128	; 0x80
 8004526:	1902      	adds	r2, r0, r4
 8004528:	2608      	movs	r6, #8
 800452a:	46b4      	mov	ip, r6
 800452c:	2608      	movs	r6, #8
 800452e:	46b0      	mov	r8, r6
 8004530:	44b8      	add	r8, r7
 8004532:	44c4      	add	ip, r8
 8004534:	4462      	add	r2, ip
 8004536:	6812      	ldr	r2, [r2, #0]
 8004538:	18d3      	adds	r3, r2, r3
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b5f      	cmp	r3, #95	; 0x5f
 800453e:	d111      	bne.n	8004564 <printASCIIarray+0x1910>
 8004540:	190b      	adds	r3, r1, r4
 8004542:	2208      	movs	r2, #8
 8004544:	4694      	mov	ip, r2
 8004546:	44bc      	add	ip, r7
 8004548:	4463      	add	r3, ip
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	1902      	adds	r2, r0, r4
 800454e:	2108      	movs	r1, #8
 8004550:	468c      	mov	ip, r1
 8004552:	2108      	movs	r1, #8
 8004554:	4688      	mov	r8, r1
 8004556:	44b8      	add	r8, r7
 8004558:	44c4      	add	ip, r8
 800455a:	4462      	add	r2, ip
 800455c:	6812      	ldr	r2, [r2, #0]
 800455e:	18d3      	adds	r3, r2, r3
 8004560:	221e      	movs	r2, #30
 8004562:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x7c){dataASCII[i]=0x1f;}
 8004564:	2162      	movs	r1, #98	; 0x62
 8004566:	248c      	movs	r4, #140	; 0x8c
 8004568:	0064      	lsls	r4, r4, #1
 800456a:	190b      	adds	r3, r1, r4
 800456c:	2208      	movs	r2, #8
 800456e:	4694      	mov	ip, r2
 8004570:	44bc      	add	ip, r7
 8004572:	4463      	add	r3, ip
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	2080      	movs	r0, #128	; 0x80
 8004578:	1902      	adds	r2, r0, r4
 800457a:	2608      	movs	r6, #8
 800457c:	46b4      	mov	ip, r6
 800457e:	2608      	movs	r6, #8
 8004580:	46b0      	mov	r8, r6
 8004582:	44b8      	add	r8, r7
 8004584:	44c4      	add	ip, r8
 8004586:	4462      	add	r2, ip
 8004588:	6812      	ldr	r2, [r2, #0]
 800458a:	18d3      	adds	r3, r2, r3
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2b7c      	cmp	r3, #124	; 0x7c
 8004590:	d111      	bne.n	80045b6 <printASCIIarray+0x1962>
 8004592:	190b      	adds	r3, r1, r4
 8004594:	2208      	movs	r2, #8
 8004596:	4694      	mov	ip, r2
 8004598:	44bc      	add	ip, r7
 800459a:	4463      	add	r3, ip
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	1902      	adds	r2, r0, r4
 80045a0:	2108      	movs	r1, #8
 80045a2:	468c      	mov	ip, r1
 80045a4:	2108      	movs	r1, #8
 80045a6:	4688      	mov	r8, r1
 80045a8:	44b8      	add	r8, r7
 80045aa:	44c4      	add	ip, r8
 80045ac:	4462      	add	r2, ip
 80045ae:	6812      	ldr	r2, [r2, #0]
 80045b0:	18d3      	adds	r3, r2, r3
 80045b2:	221f      	movs	r2, #31
 80045b4:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 80045b6:	2162      	movs	r1, #98	; 0x62
 80045b8:	208c      	movs	r0, #140	; 0x8c
 80045ba:	0040      	lsls	r0, r0, #1
 80045bc:	180b      	adds	r3, r1, r0
 80045be:	2208      	movs	r2, #8
 80045c0:	4694      	mov	ip, r2
 80045c2:	44bc      	add	ip, r7
 80045c4:	4463      	add	r3, ip
 80045c6:	881a      	ldrh	r2, [r3, #0]
 80045c8:	180b      	adds	r3, r1, r0
 80045ca:	2108      	movs	r1, #8
 80045cc:	468c      	mov	ip, r1
 80045ce:	44bc      	add	ip, r7
 80045d0:	4463      	add	r3, ip
 80045d2:	3201      	adds	r2, #1
 80045d4:	801a      	strh	r2, [r3, #0]
 80045d6:	231e      	movs	r3, #30
 80045d8:	33ff      	adds	r3, #255	; 0xff
 80045da:	2208      	movs	r2, #8
 80045dc:	189b      	adds	r3, r3, r2
 80045de:	19db      	adds	r3, r3, r7
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	2162      	movs	r1, #98	; 0x62
 80045e6:	208c      	movs	r0, #140	; 0x8c
 80045e8:	0040      	lsls	r0, r0, #1
 80045ea:	180a      	adds	r2, r1, r0
 80045ec:	2408      	movs	r4, #8
 80045ee:	46a4      	mov	ip, r4
 80045f0:	44bc      	add	ip, r7
 80045f2:	4462      	add	r2, ip
 80045f4:	8812      	ldrh	r2, [r2, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d201      	bcs.n	80045fe <printASCIIarray+0x19aa>
 80045fa:	f7ff fabc 	bl	8003b76 <printASCIIarray+0xf22>
				}
				for(i=0;i<strLen;i++){
 80045fe:	180b      	adds	r3, r1, r0
 8004600:	2208      	movs	r2, #8
 8004602:	4694      	mov	ip, r2
 8004604:	44bc      	add	ip, r7
 8004606:	4463      	add	r3, ip
 8004608:	2200      	movs	r2, #0
 800460a:	801a      	strh	r2, [r3, #0]
 800460c:	e113      	b.n	8004836 <printASCIIarray+0x1be2>
					for(j=0;j<symLen;j++){
 800460e:	2364      	movs	r3, #100	; 0x64
 8004610:	228c      	movs	r2, #140	; 0x8c
 8004612:	0052      	lsls	r2, r2, #1
 8004614:	189b      	adds	r3, r3, r2
 8004616:	2208      	movs	r2, #8
 8004618:	4694      	mov	ip, r2
 800461a:	44bc      	add	ip, r7
 800461c:	4463      	add	r3, ip
 800461e:	2200      	movs	r2, #0
 8004620:	801a      	strh	r2, [r3, #0]
 8004622:	e041      	b.n	80046a8 <printASCIIarray+0x1a54>
						weoBuffer[j]=F3[dataASCII[i]][j];
 8004624:	2362      	movs	r3, #98	; 0x62
 8004626:	218c      	movs	r1, #140	; 0x8c
 8004628:	0049      	lsls	r1, r1, #1
 800462a:	185b      	adds	r3, r3, r1
 800462c:	2208      	movs	r2, #8
 800462e:	4694      	mov	ip, r2
 8004630:	44bc      	add	ip, r7
 8004632:	4463      	add	r3, ip
 8004634:	881b      	ldrh	r3, [r3, #0]
 8004636:	2280      	movs	r2, #128	; 0x80
 8004638:	1852      	adds	r2, r2, r1
 800463a:	2008      	movs	r0, #8
 800463c:	4684      	mov	ip, r0
 800463e:	2008      	movs	r0, #8
 8004640:	4680      	mov	r8, r0
 8004642:	44b8      	add	r8, r7
 8004644:	44c4      	add	ip, r8
 8004646:	4462      	add	r2, ip
 8004648:	6812      	ldr	r2, [r2, #0]
 800464a:	18d3      	adds	r3, r2, r3
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	001a      	movs	r2, r3
 8004650:	2664      	movs	r6, #100	; 0x64
 8004652:	1873      	adds	r3, r6, r1
 8004654:	2008      	movs	r0, #8
 8004656:	4684      	mov	ip, r0
 8004658:	44bc      	add	ip, r7
 800465a:	4463      	add	r3, ip
 800465c:	8818      	ldrh	r0, [r3, #0]
 800465e:	1873      	adds	r3, r6, r1
 8004660:	2108      	movs	r1, #8
 8004662:	468c      	mov	ip, r1
 8004664:	44bc      	add	ip, r7
 8004666:	4463      	add	r3, ip
 8004668:	8819      	ldrh	r1, [r3, #0]
 800466a:	4ca1      	ldr	r4, [pc, #644]	; (80048f0 <printASCIIarray+0x1c9c>)
 800466c:	0013      	movs	r3, r2
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	189b      	adds	r3, r3, r2
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	189b      	adds	r3, r3, r2
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	18e3      	adds	r3, r4, r3
 800467a:	5c1a      	ldrb	r2, [r3, r0]
 800467c:	239a      	movs	r3, #154	; 0x9a
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	2008      	movs	r0, #8
 8004682:	181b      	adds	r3, r3, r0
 8004684:	19db      	adds	r3, r3, r7
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	545a      	strb	r2, [r3, r1]
					for(j=0;j<symLen;j++){
 800468a:	218c      	movs	r1, #140	; 0x8c
 800468c:	0049      	lsls	r1, r1, #1
 800468e:	1873      	adds	r3, r6, r1
 8004690:	2208      	movs	r2, #8
 8004692:	4694      	mov	ip, r2
 8004694:	44bc      	add	ip, r7
 8004696:	4463      	add	r3, ip
 8004698:	881a      	ldrh	r2, [r3, #0]
 800469a:	1873      	adds	r3, r6, r1
 800469c:	2108      	movs	r1, #8
 800469e:	468c      	mov	ip, r1
 80046a0:	44bc      	add	ip, r7
 80046a2:	4463      	add	r3, ip
 80046a4:	3201      	adds	r2, #1
 80046a6:	801a      	strh	r2, [r3, #0]
 80046a8:	2364      	movs	r3, #100	; 0x64
 80046aa:	218c      	movs	r1, #140	; 0x8c
 80046ac:	0049      	lsls	r1, r1, #1
 80046ae:	185b      	adds	r3, r3, r1
 80046b0:	2208      	movs	r2, #8
 80046b2:	18ba      	adds	r2, r7, r2
 80046b4:	189a      	adds	r2, r3, r2
 80046b6:	235a      	movs	r3, #90	; 0x5a
 80046b8:	185b      	adds	r3, r3, r1
 80046ba:	2008      	movs	r0, #8
 80046bc:	4684      	mov	ip, r0
 80046be:	44bc      	add	ip, r7
 80046c0:	4463      	add	r3, ip
 80046c2:	8812      	ldrh	r2, [r2, #0]
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d3ac      	bcc.n	8004624 <printASCIIarray+0x19d0>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 80046ca:	2366      	movs	r3, #102	; 0x66
 80046cc:	185b      	adds	r3, r3, r1
 80046ce:	2208      	movs	r2, #8
 80046d0:	4694      	mov	ip, r2
 80046d2:	44bc      	add	ip, r7
 80046d4:	4463      	add	r3, ip
 80046d6:	2200      	movs	r2, #0
 80046d8:	801a      	strh	r2, [r3, #0]
 80046da:	e032      	b.n	8004742 <printASCIIarray+0x1aee>
						weoBuffer[k]=weoBuffer[k] & contrast;
 80046dc:	2066      	movs	r0, #102	; 0x66
 80046de:	248c      	movs	r4, #140	; 0x8c
 80046e0:	0064      	lsls	r4, r4, #1
 80046e2:	1903      	adds	r3, r0, r4
 80046e4:	2208      	movs	r2, #8
 80046e6:	4694      	mov	ip, r2
 80046e8:	44bc      	add	ip, r7
 80046ea:	4463      	add	r3, ip
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	269a      	movs	r6, #154	; 0x9a
 80046f0:	0076      	lsls	r6, r6, #1
 80046f2:	2208      	movs	r2, #8
 80046f4:	18b2      	adds	r2, r6, r2
 80046f6:	19d2      	adds	r2, r2, r7
 80046f8:	6812      	ldr	r2, [r2, #0]
 80046fa:	5cd2      	ldrb	r2, [r2, r3]
 80046fc:	1903      	adds	r3, r0, r4
 80046fe:	2108      	movs	r1, #8
 8004700:	468c      	mov	ip, r1
 8004702:	44bc      	add	ip, r7
 8004704:	4463      	add	r3, ip
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	4698      	mov	r8, r3
 800470a:	215c      	movs	r1, #92	; 0x5c
 800470c:	1909      	adds	r1, r1, r4
 800470e:	2308      	movs	r3, #8
 8004710:	469c      	mov	ip, r3
 8004712:	44bc      	add	ip, r7
 8004714:	4461      	add	r1, ip
 8004716:	7809      	ldrb	r1, [r1, #0]
 8004718:	400a      	ands	r2, r1
 800471a:	b2d1      	uxtb	r1, r2
 800471c:	2208      	movs	r2, #8
 800471e:	18b2      	adds	r2, r6, r2
 8004720:	19d2      	adds	r2, r2, r7
 8004722:	6812      	ldr	r2, [r2, #0]
 8004724:	4643      	mov	r3, r8
 8004726:	54d1      	strb	r1, [r2, r3]
					for (k=0;k<symLen;k++){
 8004728:	1903      	adds	r3, r0, r4
 800472a:	2208      	movs	r2, #8
 800472c:	4694      	mov	ip, r2
 800472e:	44bc      	add	ip, r7
 8004730:	4463      	add	r3, ip
 8004732:	881a      	ldrh	r2, [r3, #0]
 8004734:	1903      	adds	r3, r0, r4
 8004736:	2108      	movs	r1, #8
 8004738:	468c      	mov	ip, r1
 800473a:	44bc      	add	ip, r7
 800473c:	4463      	add	r3, ip
 800473e:	3201      	adds	r2, #1
 8004740:	801a      	strh	r2, [r3, #0]
 8004742:	2366      	movs	r3, #102	; 0x66
 8004744:	268c      	movs	r6, #140	; 0x8c
 8004746:	0076      	lsls	r6, r6, #1
 8004748:	199b      	adds	r3, r3, r6
 800474a:	2208      	movs	r2, #8
 800474c:	18ba      	adds	r2, r7, r2
 800474e:	189a      	adds	r2, r3, r2
 8004750:	235a      	movs	r3, #90	; 0x5a
 8004752:	199b      	adds	r3, r3, r6
 8004754:	2108      	movs	r1, #8
 8004756:	468c      	mov	ip, r1
 8004758:	44bc      	add	ip, r7
 800475a:	4463      	add	r3, ip
 800475c:	8812      	ldrh	r2, [r2, #0]
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	429a      	cmp	r2, r3
 8004762:	d3bb      	bcc.n	80046dc <printASCIIarray+0x1a88>
					}
				weoDrawRectangleFilled(ASCII_X, imY, ASCII_X+X_increment-1, imY + ASCII_height - decY, 0xFF, weoBuffer);
 8004764:	205f      	movs	r0, #95	; 0x5f
 8004766:	1983      	adds	r3, r0, r6
 8004768:	2208      	movs	r2, #8
 800476a:	18ba      	adds	r2, r7, r2
 800476c:	189a      	adds	r2, r3, r2
 800476e:	233f      	movs	r3, #63	; 0x3f
 8004770:	199b      	adds	r3, r3, r6
 8004772:	2108      	movs	r1, #8
 8004774:	468c      	mov	ip, r1
 8004776:	44bc      	add	ip, r7
 8004778:	4463      	add	r3, ip
 800477a:	7812      	ldrb	r2, [r2, #0]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	18d3      	adds	r3, r2, r3
 8004780:	b2db      	uxtb	r3, r3
 8004782:	3b01      	subs	r3, #1
 8004784:	b2dc      	uxtb	r4, r3
 8004786:	218f      	movs	r1, #143	; 0x8f
 8004788:	0049      	lsls	r1, r1, #1
 800478a:	2308      	movs	r3, #8
 800478c:	18cb      	adds	r3, r1, r3
 800478e:	19da      	adds	r2, r3, r7
 8004790:	213e      	movs	r1, #62	; 0x3e
 8004792:	198b      	adds	r3, r1, r6
 8004794:	2108      	movs	r1, #8
 8004796:	468c      	mov	ip, r1
 8004798:	44bc      	add	ip, r7
 800479a:	4463      	add	r3, ip
 800479c:	7812      	ldrb	r2, [r2, #0]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	18d3      	adds	r3, r2, r3
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	2160      	movs	r1, #96	; 0x60
 80047a6:	198b      	adds	r3, r1, r6
 80047a8:	2108      	movs	r1, #8
 80047aa:	468c      	mov	ip, r1
 80047ac:	44bc      	add	ip, r7
 80047ae:	4463      	add	r3, ip
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	4698      	mov	r8, r3
 80047b8:	218f      	movs	r1, #143	; 0x8f
 80047ba:	0049      	lsls	r1, r1, #1
 80047bc:	2308      	movs	r3, #8
 80047be:	18cb      	adds	r3, r1, r3
 80047c0:	19db      	adds	r3, r3, r7
 80047c2:	7819      	ldrb	r1, [r3, #0]
 80047c4:	0006      	movs	r6, r0
 80047c6:	238c      	movs	r3, #140	; 0x8c
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	18c3      	adds	r3, r0, r3
 80047cc:	2208      	movs	r2, #8
 80047ce:	4694      	mov	ip, r2
 80047d0:	44bc      	add	ip, r7
 80047d2:	4463      	add	r3, ip
 80047d4:	7818      	ldrb	r0, [r3, #0]
 80047d6:	239a      	movs	r3, #154	; 0x9a
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	2208      	movs	r2, #8
 80047dc:	189b      	adds	r3, r3, r2
 80047de:	19db      	adds	r3, r3, r7
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	9301      	str	r3, [sp, #4]
 80047e4:	23ff      	movs	r3, #255	; 0xff
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	4643      	mov	r3, r8
 80047ea:	0022      	movs	r2, r4
 80047ec:	f7fc fe8c 	bl	8001508 <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 80047f0:	208c      	movs	r0, #140	; 0x8c
 80047f2:	0040      	lsls	r0, r0, #1
 80047f4:	1833      	adds	r3, r6, r0
 80047f6:	2208      	movs	r2, #8
 80047f8:	4694      	mov	ip, r2
 80047fa:	44bc      	add	ip, r7
 80047fc:	4463      	add	r3, ip
 80047fe:	1832      	adds	r2, r6, r0
 8004800:	2108      	movs	r1, #8
 8004802:	1879      	adds	r1, r7, r1
 8004804:	1851      	adds	r1, r2, r1
 8004806:	223f      	movs	r2, #63	; 0x3f
 8004808:	1812      	adds	r2, r2, r0
 800480a:	2408      	movs	r4, #8
 800480c:	46a4      	mov	ip, r4
 800480e:	44bc      	add	ip, r7
 8004810:	4462      	add	r2, ip
 8004812:	7809      	ldrb	r1, [r1, #0]
 8004814:	7812      	ldrb	r2, [r2, #0]
 8004816:	188a      	adds	r2, r1, r2
 8004818:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 800481a:	2162      	movs	r1, #98	; 0x62
 800481c:	180b      	adds	r3, r1, r0
 800481e:	2208      	movs	r2, #8
 8004820:	4694      	mov	ip, r2
 8004822:	44bc      	add	ip, r7
 8004824:	4463      	add	r3, ip
 8004826:	881a      	ldrh	r2, [r3, #0]
 8004828:	180b      	adds	r3, r1, r0
 800482a:	2108      	movs	r1, #8
 800482c:	468c      	mov	ip, r1
 800482e:	44bc      	add	ip, r7
 8004830:	4463      	add	r3, ip
 8004832:	3201      	adds	r2, #1
 8004834:	801a      	strh	r2, [r3, #0]
 8004836:	231e      	movs	r3, #30
 8004838:	33ff      	adds	r3, #255	; 0xff
 800483a:	2208      	movs	r2, #8
 800483c:	189b      	adds	r3, r3, r2
 800483e:	19db      	adds	r3, r3, r7
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	b29b      	uxth	r3, r3
 8004844:	2162      	movs	r1, #98	; 0x62
 8004846:	208c      	movs	r0, #140	; 0x8c
 8004848:	0040      	lsls	r0, r0, #1
 800484a:	180a      	adds	r2, r1, r0
 800484c:	2408      	movs	r4, #8
 800484e:	46a4      	mov	ip, r4
 8004850:	44bc      	add	ip, r7
 8004852:	4462      	add	r2, ip
 8004854:	8812      	ldrh	r2, [r2, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d200      	bcs.n	800485c <printASCIIarray+0x1c08>
 800485a:	e6d8      	b.n	800460e <printASCIIarray+0x19ba>
				}
				for(i=0;i<symLen;i++){
 800485c:	180b      	adds	r3, r1, r0
 800485e:	2208      	movs	r2, #8
 8004860:	4694      	mov	ip, r2
 8004862:	44bc      	add	ip, r7
 8004864:	4463      	add	r3, ip
 8004866:	2200      	movs	r2, #0
 8004868:	801a      	strh	r2, [r3, #0]
 800486a:	e01e      	b.n	80048aa <printASCIIarray+0x1c56>
									weoBuffer[j]=0x00;
 800486c:	2364      	movs	r3, #100	; 0x64
 800486e:	208c      	movs	r0, #140	; 0x8c
 8004870:	0040      	lsls	r0, r0, #1
 8004872:	181b      	adds	r3, r3, r0
 8004874:	2208      	movs	r2, #8
 8004876:	4694      	mov	ip, r2
 8004878:	44bc      	add	ip, r7
 800487a:	4463      	add	r3, ip
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	229a      	movs	r2, #154	; 0x9a
 8004880:	0052      	lsls	r2, r2, #1
 8004882:	2108      	movs	r1, #8
 8004884:	1852      	adds	r2, r2, r1
 8004886:	19d2      	adds	r2, r2, r7
 8004888:	6812      	ldr	r2, [r2, #0]
 800488a:	2100      	movs	r1, #0
 800488c:	54d1      	strb	r1, [r2, r3]
				for(i=0;i<symLen;i++){
 800488e:	2162      	movs	r1, #98	; 0x62
 8004890:	180b      	adds	r3, r1, r0
 8004892:	2208      	movs	r2, #8
 8004894:	4694      	mov	ip, r2
 8004896:	44bc      	add	ip, r7
 8004898:	4463      	add	r3, ip
 800489a:	881a      	ldrh	r2, [r3, #0]
 800489c:	180b      	adds	r3, r1, r0
 800489e:	2108      	movs	r1, #8
 80048a0:	468c      	mov	ip, r1
 80048a2:	44bc      	add	ip, r7
 80048a4:	4463      	add	r3, ip
 80048a6:	3201      	adds	r2, #1
 80048a8:	801a      	strh	r2, [r3, #0]
 80048aa:	2362      	movs	r3, #98	; 0x62
 80048ac:	218c      	movs	r1, #140	; 0x8c
 80048ae:	0049      	lsls	r1, r1, #1
 80048b0:	185b      	adds	r3, r3, r1
 80048b2:	2208      	movs	r2, #8
 80048b4:	18ba      	adds	r2, r7, r2
 80048b6:	189a      	adds	r2, r3, r2
 80048b8:	235a      	movs	r3, #90	; 0x5a
 80048ba:	185b      	adds	r3, r3, r1
 80048bc:	2108      	movs	r1, #8
 80048be:	468c      	mov	ip, r1
 80048c0:	44bc      	add	ip, r7
 80048c2:	4463      	add	r3, ip
 80048c4:	8812      	ldrh	r2, [r2, #0]
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d3cf      	bcc.n	800486c <printASCIIarray+0x1c18>
 80048cc:	46ad      	mov	sp, r5
							}
			}
			cmd2Execute=0;
 80048ce:	4b09      	ldr	r3, [pc, #36]	; (80048f4 <printASCIIarray+0x1ca0>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
			GPIOC->ODR |= 1 << 6;	//set BF
 80048d4:	4b08      	ldr	r3, [pc, #32]	; (80048f8 <printASCIIarray+0x1ca4>)
 80048d6:	695a      	ldr	r2, [r3, #20]
 80048d8:	4b07      	ldr	r3, [pc, #28]	; (80048f8 <printASCIIarray+0x1ca4>)
 80048da:	2140      	movs	r1, #64	; 0x40
 80048dc:	430a      	orrs	r2, r1
 80048de:	615a      	str	r2, [r3, #20]

	}
 80048e0:	46c0      	nop			; (mov r8, r8)
 80048e2:	0018      	movs	r0, r3
 80048e4:	46bd      	mov	sp, r7
 80048e6:	b063      	add	sp, #396	; 0x18c
 80048e8:	bcc0      	pop	{r6, r7}
 80048ea:	46b9      	mov	r9, r7
 80048ec:	46b0      	mov	r8, r6
 80048ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048f0:	08013838 	.word	0x08013838
 80048f4:	20000312 	.word	0x20000312
 80048f8:	50000800 	.word	0x50000800

080048fc <LIS3DHsendCMD>:
//		HAL_Delay(500);
//		GPIOC->ODR |= 1 << 6;	//set BF
//		cmd2Execute=0;
	}
//=============================================================================================================
	void LIS3DHsendCMD(uint8_t reg, uint8_t data) {
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af02      	add	r7, sp, #8
 8004902:	0002      	movs	r2, r0
 8004904:	1dfb      	adds	r3, r7, #7
 8004906:	701a      	strb	r2, [r3, #0]
 8004908:	1dbb      	adds	r3, r7, #6
 800490a:	1c0a      	adds	r2, r1, #0
 800490c:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 800490e:	210c      	movs	r1, #12
 8004910:	187b      	adds	r3, r7, r1
 8004912:	1dfa      	adds	r2, r7, #7
 8004914:	7812      	ldrb	r2, [r2, #0]
 8004916:	701a      	strb	r2, [r3, #0]
 8004918:	187b      	adds	r3, r7, r1
 800491a:	1dba      	adds	r2, r7, #6
 800491c:	7812      	ldrb	r2, [r2, #0]
 800491e:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x32, buf, 2, 1000);	//32h - address for writing
 8004920:	187a      	adds	r2, r7, r1
 8004922:	4806      	ldr	r0, [pc, #24]	; (800493c <LIS3DHsendCMD+0x40>)
 8004924:	23fa      	movs	r3, #250	; 0xfa
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	2302      	movs	r3, #2
 800492c:	2132      	movs	r1, #50	; 0x32
 800492e:	f001 fd17 	bl	8006360 <HAL_I2C_Master_Transmit>
	}
 8004932:	46c0      	nop			; (mov r8, r8)
 8004934:	46bd      	mov	sp, r7
 8004936:	b004      	add	sp, #16
 8004938:	bd80      	pop	{r7, pc}
 800493a:	46c0      	nop			; (mov r8, r8)
 800493c:	200000bc 	.word	0x200000bc

08004940 <LIS3DHsetup>:
//	  xVal = buffer[0];
//	  yVal = buffer[1];
//	  zVal = buffer[2];
//	}
//=============================================================================================================
	void LIS3DHsetup(void){
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
		uint8_t CTRL_REG1_val=0x00;
 8004946:	1dfb      	adds	r3, r7, #7
 8004948:	2200      	movs	r2, #0
 800494a:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG4_val=0x00;
 800494c:	1dbb      	adds	r3, r7, #6
 800494e:	2200      	movs	r2, #0
 8004950:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG5_val=0x00;
 8004952:	1d7b      	adds	r3, r7, #5
 8004954:	2200      	movs	r2, #0
 8004956:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG6_val=0x00;
 8004958:	1d3b      	adds	r3, r7, #4
 800495a:	2200      	movs	r2, #0
 800495c:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_CTRL_REG_val=0x00;
 800495e:	1cfb      	adds	r3, r7, #3
 8004960:	2200      	movs	r2, #0
 8004962:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_SRC_REG_val=0x00;
 8004964:	1cbb      	adds	r3, r7, #2
 8004966:	2200      	movs	r2, #0
 8004968:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_CFG_val=0x00;
 800496a:	1c7b      	adds	r3, r7, #1
 800496c:	2200      	movs	r2, #0
 800496e:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_SRC_val=0x00;
 8004970:	003b      	movs	r3, r7
 8004972:	2200      	movs	r2, #0
 8004974:	701a      	strb	r2, [r3, #0]

		LIS3DHsendCMD(CTRL_REG1,(CTRL_REG1_val|accelDataRate_25_Hz|Xen|Yen|Zen));//data rate selection
 8004976:	1dfb      	adds	r3, r7, #7
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	2237      	movs	r2, #55	; 0x37
 800497c:	4313      	orrs	r3, r2
 800497e:	b2db      	uxtb	r3, r3
 8004980:	0019      	movs	r1, r3
 8004982:	2020      	movs	r0, #32
 8004984:	f7ff ffba 	bl	80048fc <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG2,);//HPFilter
//		LIS3DHsendCMD(CTRL_REG3,);
		LIS3DHsendCMD(CTRL_REG4,(CTRL_REG4_val|BDU|FULL_SCALE_2G|HR));
 8004988:	1dbb      	adds	r3, r7, #6
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	227c      	movs	r2, #124	; 0x7c
 800498e:	4252      	negs	r2, r2
 8004990:	4313      	orrs	r3, r2
 8004992:	b2db      	uxtb	r3, r3
 8004994:	0019      	movs	r1, r3
 8004996:	2023      	movs	r0, #35	; 0x23
 8004998:	f7ff ffb0 	bl	80048fc <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG6,);
//		LIS3DHsendCMD(FIFO_CTRL_REG,FIFO_CTRL_REG_val);	//	2B configured
//		LIS3DHsendCMD(FIFO_SRC_REG,FIFO_SRC_REG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_CFG,INT_1_CFG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_SRC_val,INT_1_SRC_val);	//	2B configured
	}
 800499c:	46c0      	nop			; (mov r8, r8)
 800499e:	46bd      	mov	sp, r7
 80049a0:	b002      	add	sp, #8
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80049a8:	46c0      	nop			; (mov r8, r8)
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049b6:	4b11      	ldr	r3, [pc, #68]	; (80049fc <HAL_MspInit+0x4c>)
 80049b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049ba:	4b10      	ldr	r3, [pc, #64]	; (80049fc <HAL_MspInit+0x4c>)
 80049bc:	2101      	movs	r1, #1
 80049be:	430a      	orrs	r2, r1
 80049c0:	641a      	str	r2, [r3, #64]	; 0x40
 80049c2:	4b0e      	ldr	r3, [pc, #56]	; (80049fc <HAL_MspInit+0x4c>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	2201      	movs	r2, #1
 80049c8:	4013      	ands	r3, r2
 80049ca:	607b      	str	r3, [r7, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80049ce:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <HAL_MspInit+0x4c>)
 80049d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049d2:	4b0a      	ldr	r3, [pc, #40]	; (80049fc <HAL_MspInit+0x4c>)
 80049d4:	2180      	movs	r1, #128	; 0x80
 80049d6:	0549      	lsls	r1, r1, #21
 80049d8:	430a      	orrs	r2, r1
 80049da:	63da      	str	r2, [r3, #60]	; 0x3c
 80049dc:	4b07      	ldr	r3, [pc, #28]	; (80049fc <HAL_MspInit+0x4c>)
 80049de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049e0:	2380      	movs	r3, #128	; 0x80
 80049e2:	055b      	lsls	r3, r3, #21
 80049e4:	4013      	ands	r3, r2
 80049e6:	603b      	str	r3, [r7, #0]
 80049e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 80049ea:	2380      	movs	r3, #128	; 0x80
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	0018      	movs	r0, r3
 80049f0:	f000 fca0 	bl	8005334 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049f4:	46c0      	nop			; (mov r8, r8)
 80049f6:	46bd      	mov	sp, r7
 80049f8:	b002      	add	sp, #8
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40021000 	.word	0x40021000

08004a00 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8004a00:	b590      	push	{r4, r7, lr}
 8004a02:	b089      	sub	sp, #36	; 0x24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a08:	240c      	movs	r4, #12
 8004a0a:	193b      	adds	r3, r7, r4
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	2314      	movs	r3, #20
 8004a10:	001a      	movs	r2, r3
 8004a12:	2100      	movs	r1, #0
 8004a14:	f007 fefa 	bl	800c80c <memset>
  if(hcomp->Instance==COMP1)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a10      	ldr	r2, [pc, #64]	; (8004a60 <HAL_COMP_MspInit+0x60>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d11a      	bne.n	8004a58 <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a22:	4b10      	ldr	r3, [pc, #64]	; (8004a64 <HAL_COMP_MspInit+0x64>)
 8004a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a26:	4b0f      	ldr	r3, [pc, #60]	; (8004a64 <HAL_COMP_MspInit+0x64>)
 8004a28:	2102      	movs	r1, #2
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	635a      	str	r2, [r3, #52]	; 0x34
 8004a2e:	4b0d      	ldr	r3, [pc, #52]	; (8004a64 <HAL_COMP_MspInit+0x64>)
 8004a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a32:	2202      	movs	r2, #2
 8004a34:	4013      	ands	r3, r2
 8004a36:	60bb      	str	r3, [r7, #8]
 8004a38:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004a3a:	193b      	adds	r3, r7, r4
 8004a3c:	2204      	movs	r2, #4
 8004a3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a40:	193b      	adds	r3, r7, r4
 8004a42:	2203      	movs	r2, #3
 8004a44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a46:	193b      	adds	r3, r7, r4
 8004a48:	2200      	movs	r2, #0
 8004a4a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a4c:	193b      	adds	r3, r7, r4
 8004a4e:	4a06      	ldr	r2, [pc, #24]	; (8004a68 <HAL_COMP_MspInit+0x68>)
 8004a50:	0019      	movs	r1, r3
 8004a52:	0010      	movs	r0, r2
 8004a54:	f001 fa8a 	bl	8005f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8004a58:	46c0      	nop			; (mov r8, r8)
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	b009      	add	sp, #36	; 0x24
 8004a5e:	bd90      	pop	{r4, r7, pc}
 8004a60:	40010200 	.word	0x40010200
 8004a64:	40021000 	.word	0x40021000
 8004a68:	50000400 	.word	0x50000400

08004a6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004a6c:	b590      	push	{r4, r7, lr}
 8004a6e:	b097      	sub	sp, #92	; 0x5c
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a74:	2344      	movs	r3, #68	; 0x44
 8004a76:	18fb      	adds	r3, r7, r3
 8004a78:	0018      	movs	r0, r3
 8004a7a:	2314      	movs	r3, #20
 8004a7c:	001a      	movs	r2, r3
 8004a7e:	2100      	movs	r1, #0
 8004a80:	f007 fec4 	bl	800c80c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a84:	2410      	movs	r4, #16
 8004a86:	193b      	adds	r3, r7, r4
 8004a88:	0018      	movs	r0, r3
 8004a8a:	2334      	movs	r3, #52	; 0x34
 8004a8c:	001a      	movs	r2, r3
 8004a8e:	2100      	movs	r1, #0
 8004a90:	f007 febc 	bl	800c80c <memset>
  if(hi2c->Instance==I2C1)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a27      	ldr	r2, [pc, #156]	; (8004b38 <HAL_I2C_MspInit+0xcc>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d147      	bne.n	8004b2e <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004a9e:	193b      	adds	r3, r7, r4
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004aa4:	193b      	adds	r3, r7, r4
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004aaa:	193b      	adds	r3, r7, r4
 8004aac:	0018      	movs	r0, r3
 8004aae:	f003 fddb 	bl	8008668 <HAL_RCCEx_PeriphCLKConfig>
 8004ab2:	1e03      	subs	r3, r0, #0
 8004ab4:	d001      	beq.n	8004aba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004ab6:	f7ff ff75 	bl	80049a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aba:	4b20      	ldr	r3, [pc, #128]	; (8004b3c <HAL_I2C_MspInit+0xd0>)
 8004abc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004abe:	4b1f      	ldr	r3, [pc, #124]	; (8004b3c <HAL_I2C_MspInit+0xd0>)
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	635a      	str	r2, [r3, #52]	; 0x34
 8004ac6:	4b1d      	ldr	r3, [pc, #116]	; (8004b3c <HAL_I2C_MspInit+0xd0>)
 8004ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aca:	2201      	movs	r2, #1
 8004acc:	4013      	ands	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004ad2:	2144      	movs	r1, #68	; 0x44
 8004ad4:	187b      	adds	r3, r7, r1
 8004ad6:	22c0      	movs	r2, #192	; 0xc0
 8004ad8:	00d2      	lsls	r2, r2, #3
 8004ada:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004adc:	187b      	adds	r3, r7, r1
 8004ade:	2212      	movs	r2, #18
 8004ae0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ae2:	187b      	adds	r3, r7, r1
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ae8:	187b      	adds	r3, r7, r1
 8004aea:	2200      	movs	r2, #0
 8004aec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8004aee:	187b      	adds	r3, r7, r1
 8004af0:	2206      	movs	r2, #6
 8004af2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004af4:	187a      	adds	r2, r7, r1
 8004af6:	23a0      	movs	r3, #160	; 0xa0
 8004af8:	05db      	lsls	r3, r3, #23
 8004afa:	0011      	movs	r1, r2
 8004afc:	0018      	movs	r0, r3
 8004afe:	f001 fa35 	bl	8005f6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b02:	4b0e      	ldr	r3, [pc, #56]	; (8004b3c <HAL_I2C_MspInit+0xd0>)
 8004b04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b06:	4b0d      	ldr	r3, [pc, #52]	; (8004b3c <HAL_I2C_MspInit+0xd0>)
 8004b08:	2180      	movs	r1, #128	; 0x80
 8004b0a:	0389      	lsls	r1, r1, #14
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b10:	4b0a      	ldr	r3, [pc, #40]	; (8004b3c <HAL_I2C_MspInit+0xd0>)
 8004b12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b14:	2380      	movs	r3, #128	; 0x80
 8004b16:	039b      	lsls	r3, r3, #14
 8004b18:	4013      	ands	r3, r2
 8004b1a:	60bb      	str	r3, [r7, #8]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2100      	movs	r1, #0
 8004b22:	2017      	movs	r0, #23
 8004b24:	f000 ff28 	bl	8005978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8004b28:	2017      	movs	r0, #23
 8004b2a:	f000 ff3a 	bl	80059a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004b2e:	46c0      	nop			; (mov r8, r8)
 8004b30:	46bd      	mov	sp, r7
 8004b32:	b017      	add	sp, #92	; 0x5c
 8004b34:	bd90      	pop	{r4, r7, pc}
 8004b36:	46c0      	nop			; (mov r8, r8)
 8004b38:	40005400 	.word	0x40005400
 8004b3c:	40021000 	.word	0x40021000

08004b40 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8004b40:	b590      	push	{r4, r7, lr}
 8004b42:	b099      	sub	sp, #100	; 0x64
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b48:	234c      	movs	r3, #76	; 0x4c
 8004b4a:	18fb      	adds	r3, r7, r3
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	2314      	movs	r3, #20
 8004b50:	001a      	movs	r2, r3
 8004b52:	2100      	movs	r1, #0
 8004b54:	f007 fe5a 	bl	800c80c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b58:	2418      	movs	r4, #24
 8004b5a:	193b      	adds	r3, r7, r4
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	2334      	movs	r3, #52	; 0x34
 8004b60:	001a      	movs	r2, r3
 8004b62:	2100      	movs	r1, #0
 8004b64:	f007 fe52 	bl	800c80c <memset>
  if(hi2s->Instance==SPI1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a4f      	ldr	r2, [pc, #316]	; (8004cac <HAL_I2S_MspInit+0x16c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d000      	beq.n	8004b74 <HAL_I2S_MspInit+0x34>
 8004b72:	e097      	b.n	8004ca4 <HAL_I2S_MspInit+0x164>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8004b74:	193b      	adds	r3, r7, r4
 8004b76:	2280      	movs	r2, #128	; 0x80
 8004b78:	0112      	lsls	r2, r2, #4
 8004b7a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8004b7c:	193b      	adds	r3, r7, r4
 8004b7e:	2200      	movs	r2, #0
 8004b80:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b82:	193b      	adds	r3, r7, r4
 8004b84:	0018      	movs	r0, r3
 8004b86:	f003 fd6f 	bl	8008668 <HAL_RCCEx_PeriphCLKConfig>
 8004b8a:	1e03      	subs	r3, r0, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8004b8e:	f7ff ff09 	bl	80049a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004b92:	4b47      	ldr	r3, [pc, #284]	; (8004cb0 <HAL_I2S_MspInit+0x170>)
 8004b94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b96:	4b46      	ldr	r3, [pc, #280]	; (8004cb0 <HAL_I2S_MspInit+0x170>)
 8004b98:	2180      	movs	r1, #128	; 0x80
 8004b9a:	0149      	lsls	r1, r1, #5
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	641a      	str	r2, [r3, #64]	; 0x40
 8004ba0:	4b43      	ldr	r3, [pc, #268]	; (8004cb0 <HAL_I2S_MspInit+0x170>)
 8004ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ba4:	2380      	movs	r3, #128	; 0x80
 8004ba6:	015b      	lsls	r3, r3, #5
 8004ba8:	4013      	ands	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bae:	4b40      	ldr	r3, [pc, #256]	; (8004cb0 <HAL_I2S_MspInit+0x170>)
 8004bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bb2:	4b3f      	ldr	r3, [pc, #252]	; (8004cb0 <HAL_I2S_MspInit+0x170>)
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	635a      	str	r2, [r3, #52]	; 0x34
 8004bba:	4b3d      	ldr	r3, [pc, #244]	; (8004cb0 <HAL_I2S_MspInit+0x170>)
 8004bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bc6:	4b3a      	ldr	r3, [pc, #232]	; (8004cb0 <HAL_I2S_MspInit+0x170>)
 8004bc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bca:	4b39      	ldr	r3, [pc, #228]	; (8004cb0 <HAL_I2S_MspInit+0x170>)
 8004bcc:	2102      	movs	r1, #2
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	635a      	str	r2, [r3, #52]	; 0x34
 8004bd2:	4b37      	ldr	r3, [pc, #220]	; (8004cb0 <HAL_I2S_MspInit+0x170>)
 8004bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	4013      	ands	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004bde:	214c      	movs	r1, #76	; 0x4c
 8004be0:	187b      	adds	r3, r7, r1
 8004be2:	2280      	movs	r2, #128	; 0x80
 8004be4:	0212      	lsls	r2, r2, #8
 8004be6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be8:	000c      	movs	r4, r1
 8004bea:	193b      	adds	r3, r7, r4
 8004bec:	2202      	movs	r2, #2
 8004bee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf0:	193b      	adds	r3, r7, r4
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bf6:	193b      	adds	r3, r7, r4
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004bfc:	193b      	adds	r3, r7, r4
 8004bfe:	2200      	movs	r2, #0
 8004c00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c02:	193a      	adds	r2, r7, r4
 8004c04:	23a0      	movs	r3, #160	; 0xa0
 8004c06:	05db      	lsls	r3, r3, #23
 8004c08:	0011      	movs	r1, r2
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f001 f9ae 	bl	8005f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004c10:	0021      	movs	r1, r4
 8004c12:	187b      	adds	r3, r7, r1
 8004c14:	2238      	movs	r2, #56	; 0x38
 8004c16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c18:	187b      	adds	r3, r7, r1
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c1e:	187b      	adds	r3, r7, r1
 8004c20:	2200      	movs	r2, #0
 8004c22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c24:	187b      	adds	r3, r7, r1
 8004c26:	2200      	movs	r2, #0
 8004c28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004c2a:	187b      	adds	r3, r7, r1
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c30:	187b      	adds	r3, r7, r1
 8004c32:	4a20      	ldr	r2, [pc, #128]	; (8004cb4 <HAL_I2S_MspInit+0x174>)
 8004c34:	0019      	movs	r1, r3
 8004c36:	0010      	movs	r0, r2
 8004c38:	f001 f998 	bl	8005f6c <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8004c3c:	4b1e      	ldr	r3, [pc, #120]	; (8004cb8 <HAL_I2S_MspInit+0x178>)
 8004c3e:	4a1f      	ldr	r2, [pc, #124]	; (8004cbc <HAL_I2S_MspInit+0x17c>)
 8004c40:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8004c42:	4b1d      	ldr	r3, [pc, #116]	; (8004cb8 <HAL_I2S_MspInit+0x178>)
 8004c44:	2211      	movs	r2, #17
 8004c46:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c48:	4b1b      	ldr	r3, [pc, #108]	; (8004cb8 <HAL_I2S_MspInit+0x178>)
 8004c4a:	2210      	movs	r2, #16
 8004c4c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c4e:	4b1a      	ldr	r3, [pc, #104]	; (8004cb8 <HAL_I2S_MspInit+0x178>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c54:	4b18      	ldr	r3, [pc, #96]	; (8004cb8 <HAL_I2S_MspInit+0x178>)
 8004c56:	2280      	movs	r2, #128	; 0x80
 8004c58:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004c5a:	4b17      	ldr	r3, [pc, #92]	; (8004cb8 <HAL_I2S_MspInit+0x178>)
 8004c5c:	2280      	movs	r2, #128	; 0x80
 8004c5e:	0052      	lsls	r2, r2, #1
 8004c60:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004c62:	4b15      	ldr	r3, [pc, #84]	; (8004cb8 <HAL_I2S_MspInit+0x178>)
 8004c64:	2280      	movs	r2, #128	; 0x80
 8004c66:	00d2      	lsls	r2, r2, #3
 8004c68:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004c6a:	4b13      	ldr	r3, [pc, #76]	; (8004cb8 <HAL_I2S_MspInit+0x178>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004c70:	4b11      	ldr	r3, [pc, #68]	; (8004cb8 <HAL_I2S_MspInit+0x178>)
 8004c72:	22c0      	movs	r2, #192	; 0xc0
 8004c74:	0192      	lsls	r2, r2, #6
 8004c76:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004c78:	4b0f      	ldr	r3, [pc, #60]	; (8004cb8 <HAL_I2S_MspInit+0x178>)
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	f000 feae 	bl	80059dc <HAL_DMA_Init>
 8004c80:	1e03      	subs	r3, r0, #0
 8004c82:	d001      	beq.n	8004c88 <HAL_I2S_MspInit+0x148>
    {
      Error_Handler();
 8004c84:	f7ff fe8e 	bl	80049a4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a0b      	ldr	r2, [pc, #44]	; (8004cb8 <HAL_I2S_MspInit+0x178>)
 8004c8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c8e:	4b0a      	ldr	r3, [pc, #40]	; (8004cb8 <HAL_I2S_MspInit+0x178>)
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004c94:	2200      	movs	r2, #0
 8004c96:	2100      	movs	r1, #0
 8004c98:	2019      	movs	r0, #25
 8004c9a:	f000 fe6d 	bl	8005978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004c9e:	2019      	movs	r0, #25
 8004ca0:	f000 fe7f 	bl	80059a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004ca4:	46c0      	nop			; (mov r8, r8)
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	b019      	add	sp, #100	; 0x64
 8004caa:	bd90      	pop	{r4, r7, pc}
 8004cac:	40013000 	.word	0x40013000
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	50000400 	.word	0x50000400
 8004cb8:	20000144 	.word	0x20000144
 8004cbc:	40020008 	.word	0x40020008

08004cc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004cc0:	b590      	push	{r4, r7, lr}
 8004cc2:	b08b      	sub	sp, #44	; 0x2c
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cc8:	2414      	movs	r4, #20
 8004cca:	193b      	adds	r3, r7, r4
 8004ccc:	0018      	movs	r0, r3
 8004cce:	2314      	movs	r3, #20
 8004cd0:	001a      	movs	r2, r3
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	f007 fd9a 	bl	800c80c <memset>
  if(hspi->Instance==SPI2)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a2a      	ldr	r2, [pc, #168]	; (8004d88 <HAL_SPI_MspInit+0xc8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d14d      	bne.n	8004d7e <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004ce2:	4b2a      	ldr	r3, [pc, #168]	; (8004d8c <HAL_SPI_MspInit+0xcc>)
 8004ce4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ce6:	4b29      	ldr	r3, [pc, #164]	; (8004d8c <HAL_SPI_MspInit+0xcc>)
 8004ce8:	2180      	movs	r1, #128	; 0x80
 8004cea:	01c9      	lsls	r1, r1, #7
 8004cec:	430a      	orrs	r2, r1
 8004cee:	63da      	str	r2, [r3, #60]	; 0x3c
 8004cf0:	4b26      	ldr	r3, [pc, #152]	; (8004d8c <HAL_SPI_MspInit+0xcc>)
 8004cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cf4:	2380      	movs	r3, #128	; 0x80
 8004cf6:	01db      	lsls	r3, r3, #7
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]
 8004cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cfe:	4b23      	ldr	r3, [pc, #140]	; (8004d8c <HAL_SPI_MspInit+0xcc>)
 8004d00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d02:	4b22      	ldr	r3, [pc, #136]	; (8004d8c <HAL_SPI_MspInit+0xcc>)
 8004d04:	2102      	movs	r1, #2
 8004d06:	430a      	orrs	r2, r1
 8004d08:	635a      	str	r2, [r3, #52]	; 0x34
 8004d0a:	4b20      	ldr	r3, [pc, #128]	; (8004d8c <HAL_SPI_MspInit+0xcc>)
 8004d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0e:	2202      	movs	r2, #2
 8004d10:	4013      	ands	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004d16:	193b      	adds	r3, r7, r4
 8004d18:	2240      	movs	r2, #64	; 0x40
 8004d1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d1c:	193b      	adds	r3, r7, r4
 8004d1e:	2202      	movs	r2, #2
 8004d20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d22:	193b      	adds	r3, r7, r4
 8004d24:	2200      	movs	r2, #0
 8004d26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d28:	193b      	adds	r3, r7, r4
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8004d2e:	193b      	adds	r3, r7, r4
 8004d30:	2204      	movs	r2, #4
 8004d32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d34:	193b      	adds	r3, r7, r4
 8004d36:	4a16      	ldr	r2, [pc, #88]	; (8004d90 <HAL_SPI_MspInit+0xd0>)
 8004d38:	0019      	movs	r1, r3
 8004d3a:	0010      	movs	r0, r2
 8004d3c:	f001 f916 	bl	8005f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004d40:	0021      	movs	r1, r4
 8004d42:	187b      	adds	r3, r7, r1
 8004d44:	22c0      	movs	r2, #192	; 0xc0
 8004d46:	0052      	lsls	r2, r2, #1
 8004d48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d4a:	187b      	adds	r3, r7, r1
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d50:	187b      	adds	r3, r7, r1
 8004d52:	2200      	movs	r2, #0
 8004d54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d56:	187b      	adds	r3, r7, r1
 8004d58:	2200      	movs	r2, #0
 8004d5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8004d5c:	187b      	adds	r3, r7, r1
 8004d5e:	2201      	movs	r2, #1
 8004d60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d62:	187b      	adds	r3, r7, r1
 8004d64:	4a0a      	ldr	r2, [pc, #40]	; (8004d90 <HAL_SPI_MspInit+0xd0>)
 8004d66:	0019      	movs	r1, r3
 8004d68:	0010      	movs	r0, r2
 8004d6a:	f001 f8ff 	bl	8005f6c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004d6e:	2200      	movs	r2, #0
 8004d70:	2100      	movs	r1, #0
 8004d72:	201a      	movs	r0, #26
 8004d74:	f000 fe00 	bl	8005978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004d78:	201a      	movs	r0, #26
 8004d7a:	f000 fe12 	bl	80059a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004d7e:	46c0      	nop			; (mov r8, r8)
 8004d80:	46bd      	mov	sp, r7
 8004d82:	b00b      	add	sp, #44	; 0x2c
 8004d84:	bd90      	pop	{r4, r7, pc}
 8004d86:	46c0      	nop			; (mov r8, r8)
 8004d88:	40003800 	.word	0x40003800
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	50000400 	.word	0x50000400

08004d94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d94:	b590      	push	{r4, r7, lr}
 8004d96:	b091      	sub	sp, #68	; 0x44
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d9c:	240c      	movs	r4, #12
 8004d9e:	193b      	adds	r3, r7, r4
 8004da0:	0018      	movs	r0, r3
 8004da2:	2334      	movs	r3, #52	; 0x34
 8004da4:	001a      	movs	r2, r3
 8004da6:	2100      	movs	r1, #0
 8004da8:	f007 fd30 	bl	800c80c <memset>
  if(htim_base->Instance==TIM1)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a11      	ldr	r2, [pc, #68]	; (8004df8 <HAL_TIM_Base_MspInit+0x64>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d11c      	bne.n	8004df0 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8004db6:	193b      	adds	r3, r7, r4
 8004db8:	2280      	movs	r2, #128	; 0x80
 8004dba:	0392      	lsls	r2, r2, #14
 8004dbc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8004dbe:	193b      	adds	r3, r7, r4
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004dc4:	193b      	adds	r3, r7, r4
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	f003 fc4e 	bl	8008668 <HAL_RCCEx_PeriphCLKConfig>
 8004dcc:	1e03      	subs	r3, r0, #0
 8004dce:	d001      	beq.n	8004dd4 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8004dd0:	f7ff fde8 	bl	80049a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004dd4:	4b09      	ldr	r3, [pc, #36]	; (8004dfc <HAL_TIM_Base_MspInit+0x68>)
 8004dd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dd8:	4b08      	ldr	r3, [pc, #32]	; (8004dfc <HAL_TIM_Base_MspInit+0x68>)
 8004dda:	2180      	movs	r1, #128	; 0x80
 8004ddc:	0109      	lsls	r1, r1, #4
 8004dde:	430a      	orrs	r2, r1
 8004de0:	641a      	str	r2, [r3, #64]	; 0x40
 8004de2:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <HAL_TIM_Base_MspInit+0x68>)
 8004de4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004de6:	2380      	movs	r3, #128	; 0x80
 8004de8:	011b      	lsls	r3, r3, #4
 8004dea:	4013      	ands	r3, r2
 8004dec:	60bb      	str	r3, [r7, #8]
 8004dee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004df0:	46c0      	nop			; (mov r8, r8)
 8004df2:	46bd      	mov	sp, r7
 8004df4:	b011      	add	sp, #68	; 0x44
 8004df6:	bd90      	pop	{r4, r7, pc}
 8004df8:	40012c00 	.word	0x40012c00
 8004dfc:	40021000 	.word	0x40021000

08004e00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004e00:	b590      	push	{r4, r7, lr}
 8004e02:	b089      	sub	sp, #36	; 0x24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e08:	240c      	movs	r4, #12
 8004e0a:	193b      	adds	r3, r7, r4
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	2314      	movs	r3, #20
 8004e10:	001a      	movs	r2, r3
 8004e12:	2100      	movs	r1, #0
 8004e14:	f007 fcfa 	bl	800c80c <memset>
  if(htim->Instance==TIM1)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a15      	ldr	r2, [pc, #84]	; (8004e74 <HAL_TIM_MspPostInit+0x74>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d123      	bne.n	8004e6a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e22:	4b15      	ldr	r3, [pc, #84]	; (8004e78 <HAL_TIM_MspPostInit+0x78>)
 8004e24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e26:	4b14      	ldr	r3, [pc, #80]	; (8004e78 <HAL_TIM_MspPostInit+0x78>)
 8004e28:	2101      	movs	r1, #1
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	635a      	str	r2, [r3, #52]	; 0x34
 8004e2e:	4b12      	ldr	r3, [pc, #72]	; (8004e78 <HAL_TIM_MspPostInit+0x78>)
 8004e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e32:	2201      	movs	r2, #1
 8004e34:	4013      	ands	r3, r2
 8004e36:	60bb      	str	r3, [r7, #8]
 8004e38:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004e3a:	193b      	adds	r3, r7, r4
 8004e3c:	2280      	movs	r2, #128	; 0x80
 8004e3e:	0052      	lsls	r2, r2, #1
 8004e40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e42:	0021      	movs	r1, r4
 8004e44:	187b      	adds	r3, r7, r1
 8004e46:	2202      	movs	r2, #2
 8004e48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004e4a:	187b      	adds	r3, r7, r1
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e50:	187b      	adds	r3, r7, r1
 8004e52:	2203      	movs	r2, #3
 8004e54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004e56:	187b      	adds	r3, r7, r1
 8004e58:	2202      	movs	r2, #2
 8004e5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e5c:	187a      	adds	r2, r7, r1
 8004e5e:	23a0      	movs	r3, #160	; 0xa0
 8004e60:	05db      	lsls	r3, r3, #23
 8004e62:	0011      	movs	r1, r2
 8004e64:	0018      	movs	r0, r3
 8004e66:	f001 f881 	bl	8005f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004e6a:	46c0      	nop			; (mov r8, r8)
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	b009      	add	sp, #36	; 0x24
 8004e70:	bd90      	pop	{r4, r7, pc}
 8004e72:	46c0      	nop			; (mov r8, r8)
 8004e74:	40012c00 	.word	0x40012c00
 8004e78:	40021000 	.word	0x40021000

08004e7c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8004e7c:	b590      	push	{r4, r7, lr}
 8004e7e:	b08b      	sub	sp, #44	; 0x2c
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e84:	2414      	movs	r4, #20
 8004e86:	193b      	adds	r3, r7, r4
 8004e88:	0018      	movs	r0, r3
 8004e8a:	2314      	movs	r3, #20
 8004e8c:	001a      	movs	r2, r3
 8004e8e:	2100      	movs	r1, #0
 8004e90:	f007 fcbc 	bl	800c80c <memset>
  if(husart->Instance==USART3)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a30      	ldr	r2, [pc, #192]	; (8004f5c <HAL_USART_MspInit+0xe0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d159      	bne.n	8004f52 <HAL_USART_MspInit+0xd6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004e9e:	4b30      	ldr	r3, [pc, #192]	; (8004f60 <HAL_USART_MspInit+0xe4>)
 8004ea0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ea2:	4b2f      	ldr	r3, [pc, #188]	; (8004f60 <HAL_USART_MspInit+0xe4>)
 8004ea4:	2180      	movs	r1, #128	; 0x80
 8004ea6:	02c9      	lsls	r1, r1, #11
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	63da      	str	r2, [r3, #60]	; 0x3c
 8004eac:	4b2c      	ldr	r3, [pc, #176]	; (8004f60 <HAL_USART_MspInit+0xe4>)
 8004eae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eb0:	2380      	movs	r3, #128	; 0x80
 8004eb2:	02db      	lsls	r3, r3, #11
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]
 8004eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eba:	4b29      	ldr	r3, [pc, #164]	; (8004f60 <HAL_USART_MspInit+0xe4>)
 8004ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ebe:	4b28      	ldr	r3, [pc, #160]	; (8004f60 <HAL_USART_MspInit+0xe4>)
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	635a      	str	r2, [r3, #52]	; 0x34
 8004ec6:	4b26      	ldr	r3, [pc, #152]	; (8004f60 <HAL_USART_MspInit+0xe4>)
 8004ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eca:	2201      	movs	r2, #1
 8004ecc:	4013      	ands	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ed2:	4b23      	ldr	r3, [pc, #140]	; (8004f60 <HAL_USART_MspInit+0xe4>)
 8004ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ed6:	4b22      	ldr	r3, [pc, #136]	; (8004f60 <HAL_USART_MspInit+0xe4>)
 8004ed8:	2102      	movs	r1, #2
 8004eda:	430a      	orrs	r2, r1
 8004edc:	635a      	str	r2, [r3, #52]	; 0x34
 8004ede:	4b20      	ldr	r3, [pc, #128]	; (8004f60 <HAL_USART_MspInit+0xe4>)
 8004ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	60bb      	str	r3, [r7, #8]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004eea:	193b      	adds	r3, r7, r4
 8004eec:	2220      	movs	r2, #32
 8004eee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ef0:	193b      	adds	r3, r7, r4
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef6:	193b      	adds	r3, r7, r4
 8004ef8:	2200      	movs	r2, #0
 8004efa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004efc:	193b      	adds	r3, r7, r4
 8004efe:	2203      	movs	r2, #3
 8004f00:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8004f02:	193b      	adds	r3, r7, r4
 8004f04:	2204      	movs	r2, #4
 8004f06:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f08:	193a      	adds	r2, r7, r4
 8004f0a:	23a0      	movs	r3, #160	; 0xa0
 8004f0c:	05db      	lsls	r3, r3, #23
 8004f0e:	0011      	movs	r1, r2
 8004f10:	0018      	movs	r0, r3
 8004f12:	f001 f82b 	bl	8005f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004f16:	0021      	movs	r1, r4
 8004f18:	187b      	adds	r3, r7, r1
 8004f1a:	2203      	movs	r2, #3
 8004f1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f1e:	187b      	adds	r3, r7, r1
 8004f20:	2202      	movs	r2, #2
 8004f22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f24:	187b      	adds	r3, r7, r1
 8004f26:	2200      	movs	r2, #0
 8004f28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f2a:	187b      	adds	r3, r7, r1
 8004f2c:	2203      	movs	r2, #3
 8004f2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8004f30:	187b      	adds	r3, r7, r1
 8004f32:	2204      	movs	r2, #4
 8004f34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f36:	187b      	adds	r3, r7, r1
 8004f38:	4a0a      	ldr	r2, [pc, #40]	; (8004f64 <HAL_USART_MspInit+0xe8>)
 8004f3a:	0019      	movs	r1, r3
 8004f3c:	0010      	movs	r0, r2
 8004f3e:	f001 f815 	bl	8005f6c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8004f42:	2200      	movs	r2, #0
 8004f44:	2100      	movs	r1, #0
 8004f46:	201d      	movs	r0, #29
 8004f48:	f000 fd16 	bl	8005978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8004f4c:	201d      	movs	r0, #29
 8004f4e:	f000 fd28 	bl	80059a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004f52:	46c0      	nop			; (mov r8, r8)
 8004f54:	46bd      	mov	sp, r7
 8004f56:	b00b      	add	sp, #44	; 0x2c
 8004f58:	bd90      	pop	{r4, r7, pc}
 8004f5a:	46c0      	nop			; (mov r8, r8)
 8004f5c:	40004800 	.word	0x40004800
 8004f60:	40021000 	.word	0x40021000
 8004f64:	50000400 	.word	0x50000400

08004f68 <LL_USART_IsActiveFlag_FE>:
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	2202      	movs	r2, #2
 8004f76:	4013      	ands	r3, r2
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d101      	bne.n	8004f80 <LL_USART_IsActiveFlag_FE+0x18>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e000      	b.n	8004f82 <LL_USART_IsActiveFlag_FE+0x1a>
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	0018      	movs	r0, r3
 8004f84:	46bd      	mov	sp, r7
 8004f86:	b002      	add	sp, #8
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <LL_USART_IsActiveFlag_NE>:
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b082      	sub	sp, #8
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	2204      	movs	r2, #4
 8004f98:	4013      	ands	r3, r2
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	d101      	bne.n	8004fa2 <LL_USART_IsActiveFlag_NE+0x18>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e000      	b.n	8004fa4 <LL_USART_IsActiveFlag_NE+0x1a>
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	0018      	movs	r0, r3
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	b002      	add	sp, #8
 8004faa:	bd80      	pop	{r7, pc}

08004fac <LL_USART_IsActiveFlag_ORE>:
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	69db      	ldr	r3, [r3, #28]
 8004fb8:	2208      	movs	r2, #8
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d101      	bne.n	8004fc4 <LL_USART_IsActiveFlag_ORE+0x18>
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e000      	b.n	8004fc6 <LL_USART_IsActiveFlag_ORE+0x1a>
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	0018      	movs	r0, r3
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	b002      	add	sp, #8
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b082      	sub	sp, #8
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	4013      	ands	r3, r2
 8004fde:	2b20      	cmp	r3, #32
 8004fe0:	d101      	bne.n	8004fe6 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	0018      	movs	r0, r3
 8004fea:	46bd      	mov	sp, r7
 8004fec:	b002      	add	sp, #8
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	4013      	ands	r3, r2
 8005000:	2b20      	cmp	r3, #32
 8005002:	d101      	bne.n	8005008 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8005004:	2301      	movs	r3, #1
 8005006:	e000      	b.n	800500a <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8005008:	2300      	movs	r3, #0
}
 800500a:	0018      	movs	r0, r3
 800500c:	46bd      	mov	sp, r7
 800500e:	b002      	add	sp, #8
 8005010:	bd80      	pop	{r7, pc}

08005012 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005016:	46c0      	nop			; (mov r8, r8)
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005020:	e7fe      	b.n	8005020 <HardFault_Handler+0x4>

08005022 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005026:	46c0      	nop			; (mov r8, r8)
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005030:	46c0      	nop			; (mov r8, r8)
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800503a:	f000 f93b 	bl	80052b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800503e:	46c0      	nop			; (mov r8, r8)
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005048:	4b03      	ldr	r3, [pc, #12]	; (8005058 <DMA1_Channel1_IRQHandler+0x14>)
 800504a:	0018      	movs	r0, r3
 800504c:	f000 fe40 	bl	8005cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005050:	46c0      	nop			; (mov r8, r8)
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	46c0      	nop			; (mov r8, r8)
 8005058:	20000144 	.word	0x20000144

0800505c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8005060:	4b09      	ldr	r3, [pc, #36]	; (8005088 <I2C1_IRQHandler+0x2c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	699a      	ldr	r2, [r3, #24]
 8005066:	23e0      	movs	r3, #224	; 0xe0
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	4013      	ands	r3, r2
 800506c:	d004      	beq.n	8005078 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800506e:	4b06      	ldr	r3, [pc, #24]	; (8005088 <I2C1_IRQHandler+0x2c>)
 8005070:	0018      	movs	r0, r3
 8005072:	f001 fa97 	bl	80065a4 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8005076:	e003      	b.n	8005080 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8005078:	4b03      	ldr	r3, [pc, #12]	; (8005088 <I2C1_IRQHandler+0x2c>)
 800507a:	0018      	movs	r0, r3
 800507c:	f001 fa78 	bl	8006570 <HAL_I2C_EV_IRQHandler>
}
 8005080:	46c0      	nop			; (mov r8, r8)
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	46c0      	nop			; (mov r8, r8)
 8005088:	200000bc 	.word	0x200000bc

0800508c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8005090:	4b03      	ldr	r3, [pc, #12]	; (80050a0 <SPI1_IRQHandler+0x14>)
 8005092:	0018      	movs	r0, r3
 8005094:	f002 fca6 	bl	80079e4 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8005098:	46c0      	nop			; (mov r8, r8)
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	46c0      	nop			; (mov r8, r8)
 80050a0:	20000108 	.word	0x20000108

080050a4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80050a8:	4b03      	ldr	r3, [pc, #12]	; (80050b8 <SPI2_IRQHandler+0x14>)
 80050aa:	0018      	movs	r0, r3
 80050ac:	f004 fd0a 	bl	8009ac4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80050b0:	46c0      	nop			; (mov r8, r8)
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	46c0      	nop			; (mov r8, r8)
 80050b8:	200001a0 	.word	0x200001a0

080050bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 80050c0:	4b25      	ldr	r3, [pc, #148]	; (8005158 <USART2_IRQHandler+0x9c>)
 80050c2:	6a1a      	ldr	r2, [r3, #32]
 80050c4:	4b24      	ldr	r3, [pc, #144]	; (8005158 <USART2_IRQHandler+0x9c>)
 80050c6:	2108      	movs	r1, #8
 80050c8:	430a      	orrs	r2, r1
 80050ca:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 80050cc:	4b22      	ldr	r3, [pc, #136]	; (8005158 <USART2_IRQHandler+0x9c>)
 80050ce:	6a1a      	ldr	r2, [r3, #32]
 80050d0:	4b21      	ldr	r3, [pc, #132]	; (8005158 <USART2_IRQHandler+0x9c>)
 80050d2:	2102      	movs	r1, #2
 80050d4:	430a      	orrs	r2, r1
 80050d6:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 80050d8:	4b1f      	ldr	r3, [pc, #124]	; (8005158 <USART2_IRQHandler+0x9c>)
 80050da:	6a1a      	ldr	r2, [r3, #32]
 80050dc:	4b1e      	ldr	r3, [pc, #120]	; (8005158 <USART2_IRQHandler+0x9c>)
 80050de:	2104      	movs	r1, #4
 80050e0:	430a      	orrs	r2, r1
 80050e2:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 80050e4:	4b1c      	ldr	r3, [pc, #112]	; (8005158 <USART2_IRQHandler+0x9c>)
 80050e6:	0018      	movs	r0, r3
 80050e8:	f7ff ff71 	bl	8004fce <LL_USART_IsActiveFlag_RXNE_RXFNE>
 80050ec:	1e03      	subs	r3, r0, #0
 80050ee:	d009      	beq.n	8005104 <USART2_IRQHandler+0x48>
 80050f0:	4b19      	ldr	r3, [pc, #100]	; (8005158 <USART2_IRQHandler+0x9c>)
 80050f2:	0018      	movs	r0, r3
 80050f4:	f7ff ff7c 	bl	8004ff0 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 80050f8:	1e03      	subs	r3, r0, #0
 80050fa:	d003      	beq.n	8005104 <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 80050fc:	f7fb ffe0 	bl	80010c0 <USART2_RX_Callback>
	  {
 8005100:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005102:	e025      	b.n	8005150 <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 8005104:	4b14      	ldr	r3, [pc, #80]	; (8005158 <USART2_IRQHandler+0x9c>)
 8005106:	6a1a      	ldr	r2, [r3, #32]
 8005108:	4b13      	ldr	r3, [pc, #76]	; (8005158 <USART2_IRQHandler+0x9c>)
 800510a:	2108      	movs	r1, #8
 800510c:	430a      	orrs	r2, r1
 800510e:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 8005110:	4b11      	ldr	r3, [pc, #68]	; (8005158 <USART2_IRQHandler+0x9c>)
 8005112:	0018      	movs	r0, r3
 8005114:	f7ff ff4a 	bl	8004fac <LL_USART_IsActiveFlag_ORE>
 8005118:	1e03      	subs	r3, r0, #0
 800511a:	d008      	beq.n	800512e <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 800511c:	4b0e      	ldr	r3, [pc, #56]	; (8005158 <USART2_IRQHandler+0x9c>)
 800511e:	6a1a      	ldr	r2, [r3, #32]
 8005120:	4b0d      	ldr	r3, [pc, #52]	; (8005158 <USART2_IRQHandler+0x9c>)
 8005122:	2108      	movs	r1, #8
 8005124:	430a      	orrs	r2, r1
 8005126:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 8005128:	4b0b      	ldr	r3, [pc, #44]	; (8005158 <USART2_IRQHandler+0x9c>)
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800512c:	e010      	b.n	8005150 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 800512e:	4b0a      	ldr	r3, [pc, #40]	; (8005158 <USART2_IRQHandler+0x9c>)
 8005130:	0018      	movs	r0, r3
 8005132:	f7ff ff19 	bl	8004f68 <LL_USART_IsActiveFlag_FE>
 8005136:	1e03      	subs	r3, r0, #0
 8005138:	d002      	beq.n	8005140 <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 800513a:	4b07      	ldr	r3, [pc, #28]	; (8005158 <USART2_IRQHandler+0x9c>)
 800513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800513e:	e007      	b.n	8005150 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 8005140:	4b05      	ldr	r3, [pc, #20]	; (8005158 <USART2_IRQHandler+0x9c>)
 8005142:	0018      	movs	r0, r3
 8005144:	f7ff ff21 	bl	8004f8a <LL_USART_IsActiveFlag_NE>
 8005148:	1e03      	subs	r3, r0, #0
 800514a:	d001      	beq.n	8005150 <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 800514c:	4b02      	ldr	r3, [pc, #8]	; (8005158 <USART2_IRQHandler+0x9c>)
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8005150:	46c0      	nop			; (mov r8, r8)
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	46c0      	nop			; (mov r8, r8)
 8005158:	40004400 	.word	0x40004400

0800515c <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 8005160:	4b03      	ldr	r3, [pc, #12]	; (8005170 <USART3_4_LPUART1_IRQHandler+0x14>)
 8005162:	0018      	movs	r0, r3
 8005164:	f006 f9e8 	bl	800b538 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8005168:	46c0      	nop			; (mov r8, r8)
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	46c0      	nop			; (mov r8, r8)
 8005170:	20000250 	.word	0x20000250

08005174 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005178:	4b03      	ldr	r3, [pc, #12]	; (8005188 <SystemInit+0x14>)
 800517a:	2280      	movs	r2, #128	; 0x80
 800517c:	0512      	lsls	r2, r2, #20
 800517e:	609a      	str	r2, [r3, #8]
#endif
}
 8005180:	46c0      	nop			; (mov r8, r8)
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	e000ed00 	.word	0xe000ed00

0800518c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800518c:	480d      	ldr	r0, [pc, #52]	; (80051c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800518e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005190:	f7ff fff0 	bl	8005174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005194:	480c      	ldr	r0, [pc, #48]	; (80051c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005196:	490d      	ldr	r1, [pc, #52]	; (80051cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8005198:	4a0d      	ldr	r2, [pc, #52]	; (80051d0 <LoopForever+0xe>)
  movs r3, #0
 800519a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800519c:	e002      	b.n	80051a4 <LoopCopyDataInit>

0800519e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800519e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051a2:	3304      	adds	r3, #4

080051a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80051a8:	d3f9      	bcc.n	800519e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80051aa:	4a0a      	ldr	r2, [pc, #40]	; (80051d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80051ac:	4c0a      	ldr	r4, [pc, #40]	; (80051d8 <LoopForever+0x16>)
  movs r3, #0
 80051ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80051b0:	e001      	b.n	80051b6 <LoopFillZerobss>

080051b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80051b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80051b4:	3204      	adds	r2, #4

080051b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80051b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80051b8:	d3fb      	bcc.n	80051b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80051ba:	f007 fb03 	bl	800c7c4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80051be:	f7fb f9fd 	bl	80005bc <main>

080051c2 <LoopForever>:

LoopForever:
  b LoopForever
 80051c2:	e7fe      	b.n	80051c2 <LoopForever>
  ldr   r0, =_estack
 80051c4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80051c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80051cc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80051d0:	08015f24 	.word	0x08015f24
  ldr r2, =_sbss
 80051d4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80051d8:	20001338 	.word	0x20001338

080051dc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80051dc:	e7fe      	b.n	80051dc <ADC1_COMP_IRQHandler>
	...

080051e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80051e6:	1dfb      	adds	r3, r7, #7
 80051e8:	2200      	movs	r2, #0
 80051ea:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051ec:	4b0b      	ldr	r3, [pc, #44]	; (800521c <HAL_Init+0x3c>)
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	4b0a      	ldr	r3, [pc, #40]	; (800521c <HAL_Init+0x3c>)
 80051f2:	2180      	movs	r1, #128	; 0x80
 80051f4:	0049      	lsls	r1, r1, #1
 80051f6:	430a      	orrs	r2, r1
 80051f8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80051fa:	2000      	movs	r0, #0
 80051fc:	f000 f810 	bl	8005220 <HAL_InitTick>
 8005200:	1e03      	subs	r3, r0, #0
 8005202:	d003      	beq.n	800520c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005204:	1dfb      	adds	r3, r7, #7
 8005206:	2201      	movs	r2, #1
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	e001      	b.n	8005210 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800520c:	f7ff fbd0 	bl	80049b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005210:	1dfb      	adds	r3, r7, #7
 8005212:	781b      	ldrb	r3, [r3, #0]
}
 8005214:	0018      	movs	r0, r3
 8005216:	46bd      	mov	sp, r7
 8005218:	b002      	add	sp, #8
 800521a:	bd80      	pop	{r7, pc}
 800521c:	40022000 	.word	0x40022000

08005220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005220:	b590      	push	{r4, r7, lr}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005228:	230f      	movs	r3, #15
 800522a:	18fb      	adds	r3, r7, r3
 800522c:	2200      	movs	r2, #0
 800522e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005230:	4b1d      	ldr	r3, [pc, #116]	; (80052a8 <HAL_InitTick+0x88>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d02b      	beq.n	8005290 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8005238:	4b1c      	ldr	r3, [pc, #112]	; (80052ac <HAL_InitTick+0x8c>)
 800523a:	681c      	ldr	r4, [r3, #0]
 800523c:	4b1a      	ldr	r3, [pc, #104]	; (80052a8 <HAL_InitTick+0x88>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	0019      	movs	r1, r3
 8005242:	23fa      	movs	r3, #250	; 0xfa
 8005244:	0098      	lsls	r0, r3, #2
 8005246:	f7fa ff5d 	bl	8000104 <__udivsi3>
 800524a:	0003      	movs	r3, r0
 800524c:	0019      	movs	r1, r3
 800524e:	0020      	movs	r0, r4
 8005250:	f7fa ff58 	bl	8000104 <__udivsi3>
 8005254:	0003      	movs	r3, r0
 8005256:	0018      	movs	r0, r3
 8005258:	f000 fbb3 	bl	80059c2 <HAL_SYSTICK_Config>
 800525c:	1e03      	subs	r3, r0, #0
 800525e:	d112      	bne.n	8005286 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b03      	cmp	r3, #3
 8005264:	d80a      	bhi.n	800527c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	2301      	movs	r3, #1
 800526a:	425b      	negs	r3, r3
 800526c:	2200      	movs	r2, #0
 800526e:	0018      	movs	r0, r3
 8005270:	f000 fb82 	bl	8005978 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005274:	4b0e      	ldr	r3, [pc, #56]	; (80052b0 <HAL_InitTick+0x90>)
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	e00d      	b.n	8005298 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800527c:	230f      	movs	r3, #15
 800527e:	18fb      	adds	r3, r7, r3
 8005280:	2201      	movs	r2, #1
 8005282:	701a      	strb	r2, [r3, #0]
 8005284:	e008      	b.n	8005298 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005286:	230f      	movs	r3, #15
 8005288:	18fb      	adds	r3, r7, r3
 800528a:	2201      	movs	r2, #1
 800528c:	701a      	strb	r2, [r3, #0]
 800528e:	e003      	b.n	8005298 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005290:	230f      	movs	r3, #15
 8005292:	18fb      	adds	r3, r7, r3
 8005294:	2201      	movs	r2, #1
 8005296:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005298:	230f      	movs	r3, #15
 800529a:	18fb      	adds	r3, r7, r3
 800529c:	781b      	ldrb	r3, [r3, #0]
}
 800529e:	0018      	movs	r0, r3
 80052a0:	46bd      	mov	sp, r7
 80052a2:	b005      	add	sp, #20
 80052a4:	bd90      	pop	{r4, r7, pc}
 80052a6:	46c0      	nop			; (mov r8, r8)
 80052a8:	2000006c 	.word	0x2000006c
 80052ac:	20000064 	.word	0x20000064
 80052b0:	20000068 	.word	0x20000068

080052b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80052b8:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <HAL_IncTick+0x1c>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	001a      	movs	r2, r3
 80052be:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <HAL_IncTick+0x20>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	18d2      	adds	r2, r2, r3
 80052c4:	4b03      	ldr	r3, [pc, #12]	; (80052d4 <HAL_IncTick+0x20>)
 80052c6:	601a      	str	r2, [r3, #0]
}
 80052c8:	46c0      	nop			; (mov r8, r8)
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	2000006c 	.word	0x2000006c
 80052d4:	20001334 	.word	0x20001334

080052d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	af00      	add	r7, sp, #0
  return uwTick;
 80052dc:	4b02      	ldr	r3, [pc, #8]	; (80052e8 <HAL_GetTick+0x10>)
 80052de:	681b      	ldr	r3, [r3, #0]
}
 80052e0:	0018      	movs	r0, r3
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	46c0      	nop			; (mov r8, r8)
 80052e8:	20001334 	.word	0x20001334

080052ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052f4:	f7ff fff0 	bl	80052d8 <HAL_GetTick>
 80052f8:	0003      	movs	r3, r0
 80052fa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	3301      	adds	r3, #1
 8005304:	d005      	beq.n	8005312 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005306:	4b0a      	ldr	r3, [pc, #40]	; (8005330 <HAL_Delay+0x44>)
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	001a      	movs	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	189b      	adds	r3, r3, r2
 8005310:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005312:	46c0      	nop			; (mov r8, r8)
 8005314:	f7ff ffe0 	bl	80052d8 <HAL_GetTick>
 8005318:	0002      	movs	r2, r0
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	429a      	cmp	r2, r3
 8005322:	d8f7      	bhi.n	8005314 <HAL_Delay+0x28>
  {
  }
}
 8005324:	46c0      	nop			; (mov r8, r8)
 8005326:	46c0      	nop			; (mov r8, r8)
 8005328:	46bd      	mov	sp, r7
 800532a:	b004      	add	sp, #16
 800532c:	bd80      	pop	{r7, pc}
 800532e:	46c0      	nop			; (mov r8, r8)
 8005330:	2000006c 	.word	0x2000006c

08005334 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800533c:	4b06      	ldr	r3, [pc, #24]	; (8005358 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a06      	ldr	r2, [pc, #24]	; (800535c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8005342:	4013      	ands	r3, r2
 8005344:	0019      	movs	r1, r3
 8005346:	4b04      	ldr	r3, [pc, #16]	; (8005358 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	430a      	orrs	r2, r1
 800534c:	601a      	str	r2, [r3, #0]
}
 800534e:	46c0      	nop			; (mov r8, r8)
 8005350:	46bd      	mov	sp, r7
 8005352:	b002      	add	sp, #8
 8005354:	bd80      	pop	{r7, pc}
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	40010000 	.word	0x40010000
 800535c:	fffff9ff 	.word	0xfffff9ff

08005360 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005368:	4a05      	ldr	r2, [pc, #20]	; (8005380 <LL_EXTI_EnableIT_0_31+0x20>)
 800536a:	2380      	movs	r3, #128	; 0x80
 800536c:	58d2      	ldr	r2, [r2, r3]
 800536e:	4904      	ldr	r1, [pc, #16]	; (8005380 <LL_EXTI_EnableIT_0_31+0x20>)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4313      	orrs	r3, r2
 8005374:	2280      	movs	r2, #128	; 0x80
 8005376:	508b      	str	r3, [r1, r2]
}
 8005378:	46c0      	nop			; (mov r8, r8)
 800537a:	46bd      	mov	sp, r7
 800537c:	b002      	add	sp, #8
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40021800 	.word	0x40021800

08005384 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800538c:	4a06      	ldr	r2, [pc, #24]	; (80053a8 <LL_EXTI_DisableIT_0_31+0x24>)
 800538e:	2380      	movs	r3, #128	; 0x80
 8005390:	58d3      	ldr	r3, [r2, r3]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	43d2      	mvns	r2, r2
 8005396:	4904      	ldr	r1, [pc, #16]	; (80053a8 <LL_EXTI_DisableIT_0_31+0x24>)
 8005398:	4013      	ands	r3, r2
 800539a:	2280      	movs	r2, #128	; 0x80
 800539c:	508b      	str	r3, [r1, r2]
}
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	46bd      	mov	sp, r7
 80053a2:	b002      	add	sp, #8
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	46c0      	nop			; (mov r8, r8)
 80053a8:	40021800 	.word	0x40021800

080053ac <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80053b4:	4a05      	ldr	r2, [pc, #20]	; (80053cc <LL_EXTI_EnableEvent_0_31+0x20>)
 80053b6:	2384      	movs	r3, #132	; 0x84
 80053b8:	58d2      	ldr	r2, [r2, r3]
 80053ba:	4904      	ldr	r1, [pc, #16]	; (80053cc <LL_EXTI_EnableEvent_0_31+0x20>)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4313      	orrs	r3, r2
 80053c0:	2284      	movs	r2, #132	; 0x84
 80053c2:	508b      	str	r3, [r1, r2]

}
 80053c4:	46c0      	nop			; (mov r8, r8)
 80053c6:	46bd      	mov	sp, r7
 80053c8:	b002      	add	sp, #8
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	40021800 	.word	0x40021800

080053d0 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80053d8:	4a06      	ldr	r2, [pc, #24]	; (80053f4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80053da:	2384      	movs	r3, #132	; 0x84
 80053dc:	58d3      	ldr	r3, [r2, r3]
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	43d2      	mvns	r2, r2
 80053e2:	4904      	ldr	r1, [pc, #16]	; (80053f4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80053e4:	4013      	ands	r3, r2
 80053e6:	2284      	movs	r2, #132	; 0x84
 80053e8:	508b      	str	r3, [r1, r2]
}
 80053ea:	46c0      	nop			; (mov r8, r8)
 80053ec:	46bd      	mov	sp, r7
 80053ee:	b002      	add	sp, #8
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	46c0      	nop			; (mov r8, r8)
 80053f4:	40021800 	.word	0x40021800

080053f8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005400:	4b04      	ldr	r3, [pc, #16]	; (8005414 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8005402:	6819      	ldr	r1, [r3, #0]
 8005404:	4b03      	ldr	r3, [pc, #12]	; (8005414 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	430a      	orrs	r2, r1
 800540a:	601a      	str	r2, [r3, #0]

}
 800540c:	46c0      	nop			; (mov r8, r8)
 800540e:	46bd      	mov	sp, r7
 8005410:	b002      	add	sp, #8
 8005412:	bd80      	pop	{r7, pc}
 8005414:	40021800 	.word	0x40021800

08005418 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005420:	4b05      	ldr	r3, [pc, #20]	; (8005438 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	43d9      	mvns	r1, r3
 8005428:	4b03      	ldr	r3, [pc, #12]	; (8005438 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800542a:	400a      	ands	r2, r1
 800542c:	601a      	str	r2, [r3, #0]

}
 800542e:	46c0      	nop			; (mov r8, r8)
 8005430:	46bd      	mov	sp, r7
 8005432:	b002      	add	sp, #8
 8005434:	bd80      	pop	{r7, pc}
 8005436:	46c0      	nop			; (mov r8, r8)
 8005438:	40021800 	.word	0x40021800

0800543c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005444:	4b04      	ldr	r3, [pc, #16]	; (8005458 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8005446:	6859      	ldr	r1, [r3, #4]
 8005448:	4b03      	ldr	r3, [pc, #12]	; (8005458 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	430a      	orrs	r2, r1
 800544e:	605a      	str	r2, [r3, #4]
}
 8005450:	46c0      	nop			; (mov r8, r8)
 8005452:	46bd      	mov	sp, r7
 8005454:	b002      	add	sp, #8
 8005456:	bd80      	pop	{r7, pc}
 8005458:	40021800 	.word	0x40021800

0800545c <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005464:	4b05      	ldr	r3, [pc, #20]	; (800547c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	43d9      	mvns	r1, r3
 800546c:	4b03      	ldr	r3, [pc, #12]	; (800547c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800546e:	400a      	ands	r2, r1
 8005470:	605a      	str	r2, [r3, #4]
}
 8005472:	46c0      	nop			; (mov r8, r8)
 8005474:	46bd      	mov	sp, r7
 8005476:	b002      	add	sp, #8
 8005478:	bd80      	pop	{r7, pc}
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	40021800 	.word	0x40021800

08005480 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8005488:	4b03      	ldr	r3, [pc, #12]	; (8005498 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	611a      	str	r2, [r3, #16]
}
 800548e:	46c0      	nop			; (mov r8, r8)
 8005490:	46bd      	mov	sp, r7
 8005492:	b002      	add	sp, #8
 8005494:	bd80      	pop	{r7, pc}
 8005496:	46c0      	nop			; (mov r8, r8)
 8005498:	40021800 	.word	0x40021800

0800549c <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 80054a4:	4b03      	ldr	r3, [pc, #12]	; (80054b4 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	60da      	str	r2, [r3, #12]
}
 80054aa:	46c0      	nop			; (mov r8, r8)
 80054ac:	46bd      	mov	sp, r7
 80054ae:	b002      	add	sp, #8
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	46c0      	nop			; (mov r8, r8)
 80054b4:	40021800 	.word	0x40021800

080054b8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80054c0:	2300      	movs	r3, #0
 80054c2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80054c4:	211f      	movs	r1, #31
 80054c6:	187b      	adds	r3, r7, r1
 80054c8:	2200      	movs	r2, #0
 80054ca:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif /* COMP3 */

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d103      	bne.n	80054da <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 80054d2:	187b      	adds	r3, r7, r1
 80054d4:	2201      	movs	r2, #1
 80054d6:	701a      	strb	r2, [r3, #0]
 80054d8:	e13d      	b.n	8005756 <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	0fdb      	lsrs	r3, r3, #31
 80054e2:	07da      	lsls	r2, r3, #31
 80054e4:	2380      	movs	r3, #128	; 0x80
 80054e6:	061b      	lsls	r3, r3, #24
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d104      	bne.n	80054f6 <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 80054ec:	231f      	movs	r3, #31
 80054ee:	18fb      	adds	r3, r7, r3
 80054f0:	2201      	movs	r2, #1
 80054f2:	701a      	strb	r2, [r3, #0]
 80054f4:	e12f      	b.n	8005756 <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2229      	movs	r2, #41	; 0x29
 80054fa:	5c9b      	ldrb	r3, [r3, r2]
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10a      	bne.n	8005518 <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2228      	movs	r2, #40	; 0x28
 8005506:	2100      	movs	r1, #0
 8005508:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	0018      	movs	r0, r3
 8005514:	f7ff fa74 	bl	8004a00 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2230      	movs	r2, #48	; 0x30
 8005520:	4013      	ands	r3, r2
 8005522:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 8005544:	4313      	orrs	r3, r2
 8005546:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a85      	ldr	r2, [pc, #532]	; (8005764 <HAL_COMP_Init+0x2ac>)
 8005550:	4013      	ands	r3, r2
 8005552:	0019      	movs	r1, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	430a      	orrs	r2, r1
 800555c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	2380      	movs	r3, #128	; 0x80
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	429a      	cmp	r2, r3
 8005568:	d10d      	bne.n	8005586 <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800556a:	4b7f      	ldr	r3, [pc, #508]	; (8005768 <HAL_COMP_Init+0x2b0>)
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	4b7e      	ldr	r3, [pc, #504]	; (8005768 <HAL_COMP_Init+0x2b0>)
 8005570:	497e      	ldr	r1, [pc, #504]	; (800576c <HAL_COMP_Init+0x2b4>)
 8005572:	400a      	ands	r2, r1
 8005574:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8005576:	4b7c      	ldr	r3, [pc, #496]	; (8005768 <HAL_COMP_Init+0x2b0>)
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	4b7b      	ldr	r3, [pc, #492]	; (8005768 <HAL_COMP_Init+0x2b0>)
 800557c:	2180      	movs	r1, #128	; 0x80
 800557e:	0109      	lsls	r1, r1, #4
 8005580:	430a      	orrs	r2, r1
 8005582:	605a      	str	r2, [r3, #4]
 8005584:	e01f      	b.n	80055c6 <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	23c0      	movs	r3, #192	; 0xc0
 800558c:	015b      	lsls	r3, r3, #5
 800558e:	429a      	cmp	r2, r3
 8005590:	d10d      	bne.n	80055ae <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8005592:	4b75      	ldr	r3, [pc, #468]	; (8005768 <HAL_COMP_Init+0x2b0>)
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	4b74      	ldr	r3, [pc, #464]	; (8005768 <HAL_COMP_Init+0x2b0>)
 8005598:	2180      	movs	r1, #128	; 0x80
 800559a:	0109      	lsls	r1, r1, #4
 800559c:	430a      	orrs	r2, r1
 800559e:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80055a0:	4b71      	ldr	r3, [pc, #452]	; (8005768 <HAL_COMP_Init+0x2b0>)
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	4b70      	ldr	r3, [pc, #448]	; (8005768 <HAL_COMP_Init+0x2b0>)
 80055a6:	4971      	ldr	r1, [pc, #452]	; (800576c <HAL_COMP_Init+0x2b4>)
 80055a8:	400a      	ands	r2, r1
 80055aa:	605a      	str	r2, [r3, #4]
 80055ac:	e00b      	b.n	80055c6 <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80055ae:	4b6e      	ldr	r3, [pc, #440]	; (8005768 <HAL_COMP_Init+0x2b0>)
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	4b6d      	ldr	r3, [pc, #436]	; (8005768 <HAL_COMP_Init+0x2b0>)
 80055b4:	496d      	ldr	r1, [pc, #436]	; (800576c <HAL_COMP_Init+0x2b4>)
 80055b6:	400a      	ands	r2, r1
 80055b8:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80055ba:	4b6b      	ldr	r3, [pc, #428]	; (8005768 <HAL_COMP_Init+0x2b0>)
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	4b6a      	ldr	r3, [pc, #424]	; (8005768 <HAL_COMP_Init+0x2b0>)
 80055c0:	496a      	ldr	r1, [pc, #424]	; (800576c <HAL_COMP_Init+0x2b4>)
 80055c2:	400a      	ands	r2, r1
 80055c4:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	22a0      	movs	r2, #160	; 0xa0
 80055cc:	01d2      	lsls	r2, r2, #7
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d017      	beq.n	8005602 <HAL_COMP_Init+0x14a>
 80055d2:	22a0      	movs	r2, #160	; 0xa0
 80055d4:	01d2      	lsls	r2, r2, #7
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d830      	bhi.n	800563c <HAL_COMP_Init+0x184>
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d01f      	beq.n	800561e <HAL_COMP_Init+0x166>
 80055de:	2280      	movs	r2, #128	; 0x80
 80055e0:	01d2      	lsls	r2, r2, #7
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d12a      	bne.n	800563c <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80055e6:	4b60      	ldr	r3, [pc, #384]	; (8005768 <HAL_COMP_Init+0x2b0>)
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	4b5f      	ldr	r3, [pc, #380]	; (8005768 <HAL_COMP_Init+0x2b0>)
 80055ec:	2180      	movs	r1, #128	; 0x80
 80055ee:	01c9      	lsls	r1, r1, #7
 80055f0:	430a      	orrs	r2, r1
 80055f2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80055f4:	4b5c      	ldr	r3, [pc, #368]	; (8005768 <HAL_COMP_Init+0x2b0>)
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	4b5b      	ldr	r3, [pc, #364]	; (8005768 <HAL_COMP_Init+0x2b0>)
 80055fa:	495d      	ldr	r1, [pc, #372]	; (8005770 <HAL_COMP_Init+0x2b8>)
 80055fc:	400a      	ands	r2, r1
 80055fe:	605a      	str	r2, [r3, #4]
        break;
 8005600:	e029      	b.n	8005656 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8005602:	4b59      	ldr	r3, [pc, #356]	; (8005768 <HAL_COMP_Init+0x2b0>)
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	4b58      	ldr	r3, [pc, #352]	; (8005768 <HAL_COMP_Init+0x2b0>)
 8005608:	4959      	ldr	r1, [pc, #356]	; (8005770 <HAL_COMP_Init+0x2b8>)
 800560a:	400a      	ands	r2, r1
 800560c:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800560e:	4b56      	ldr	r3, [pc, #344]	; (8005768 <HAL_COMP_Init+0x2b0>)
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	4b55      	ldr	r3, [pc, #340]	; (8005768 <HAL_COMP_Init+0x2b0>)
 8005614:	2180      	movs	r1, #128	; 0x80
 8005616:	01c9      	lsls	r1, r1, #7
 8005618:	430a      	orrs	r2, r1
 800561a:	605a      	str	r2, [r3, #4]
        break;
 800561c:	e01b      	b.n	8005656 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800561e:	4b52      	ldr	r3, [pc, #328]	; (8005768 <HAL_COMP_Init+0x2b0>)
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	4b51      	ldr	r3, [pc, #324]	; (8005768 <HAL_COMP_Init+0x2b0>)
 8005624:	2180      	movs	r1, #128	; 0x80
 8005626:	01c9      	lsls	r1, r1, #7
 8005628:	430a      	orrs	r2, r1
 800562a:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800562c:	4b4e      	ldr	r3, [pc, #312]	; (8005768 <HAL_COMP_Init+0x2b0>)
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	4b4d      	ldr	r3, [pc, #308]	; (8005768 <HAL_COMP_Init+0x2b0>)
 8005632:	2180      	movs	r1, #128	; 0x80
 8005634:	01c9      	lsls	r1, r1, #7
 8005636:	430a      	orrs	r2, r1
 8005638:	605a      	str	r2, [r3, #4]
        break;
 800563a:	e00c      	b.n	8005656 <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800563c:	4b4a      	ldr	r3, [pc, #296]	; (8005768 <HAL_COMP_Init+0x2b0>)
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	4b49      	ldr	r3, [pc, #292]	; (8005768 <HAL_COMP_Init+0x2b0>)
 8005642:	494b      	ldr	r1, [pc, #300]	; (8005770 <HAL_COMP_Init+0x2b8>)
 8005644:	400a      	ands	r2, r1
 8005646:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8005648:	4b47      	ldr	r3, [pc, #284]	; (8005768 <HAL_COMP_Init+0x2b0>)
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	4b46      	ldr	r3, [pc, #280]	; (8005768 <HAL_COMP_Init+0x2b0>)
 800564e:	4948      	ldr	r1, [pc, #288]	; (8005770 <HAL_COMP_Init+0x2b8>)
 8005650:	400a      	ands	r2, r1
 8005652:	605a      	str	r2, [r3, #4]
        break;
 8005654:	46c0      	nop			; (mov r8, r8)
    }
#endif /* COMP3 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2230      	movs	r2, #48	; 0x30
 800565e:	4013      	ands	r3, r2
 8005660:	d016      	beq.n	8005690 <HAL_COMP_Init+0x1d8>
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d113      	bne.n	8005690 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005668:	4b42      	ldr	r3, [pc, #264]	; (8005774 <HAL_COMP_Init+0x2bc>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4942      	ldr	r1, [pc, #264]	; (8005778 <HAL_COMP_Init+0x2c0>)
 800566e:	0018      	movs	r0, r3
 8005670:	f7fa fd48 	bl	8000104 <__udivsi3>
 8005674:	0003      	movs	r3, r0
 8005676:	1c5a      	adds	r2, r3, #1
 8005678:	0013      	movs	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	189b      	adds	r3, r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8005682:	e002      	b.n	800568a <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	3b01      	subs	r3, #1
 8005688:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1f9      	bne.n	8005684 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a34      	ldr	r2, [pc, #208]	; (8005768 <HAL_COMP_Init+0x2b0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d102      	bne.n	80056a0 <HAL_COMP_Init+0x1e8>
 800569a:	2380      	movs	r3, #128	; 0x80
 800569c:	029b      	lsls	r3, r3, #10
 800569e:	e001      	b.n	80056a4 <HAL_COMP_Init+0x1ec>
 80056a0:	2380      	movs	r3, #128	; 0x80
 80056a2:	02db      	lsls	r3, r3, #11
 80056a4:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056aa:	2203      	movs	r2, #3
 80056ac:	4013      	ands	r3, r2
 80056ae:	d040      	beq.n	8005732 <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	2210      	movs	r2, #16
 80056b6:	4013      	ands	r3, r2
 80056b8:	d004      	beq.n	80056c4 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	0018      	movs	r0, r3
 80056be:	f7ff fe9b 	bl	80053f8 <LL_EXTI_EnableRisingTrig_0_31>
 80056c2:	e003      	b.n	80056cc <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	0018      	movs	r0, r3
 80056c8:	f7ff fea6 	bl	8005418 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	2220      	movs	r2, #32
 80056d2:	4013      	ands	r3, r2
 80056d4:	d004      	beq.n	80056e0 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	0018      	movs	r0, r3
 80056da:	f7ff feaf 	bl	800543c <LL_EXTI_EnableFallingTrig_0_31>
 80056de:	e003      	b.n	80056e8 <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	0018      	movs	r0, r3
 80056e4:	f7ff feba 	bl	800545c <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	0018      	movs	r0, r3
 80056ec:	f7ff fed6 	bl	800549c <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	0018      	movs	r0, r3
 80056f4:	f7ff fec4 	bl	8005480 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	2202      	movs	r2, #2
 80056fe:	4013      	ands	r3, r2
 8005700:	d004      	beq.n	800570c <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	0018      	movs	r0, r3
 8005706:	f7ff fe51 	bl	80053ac <LL_EXTI_EnableEvent_0_31>
 800570a:	e003      	b.n	8005714 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	0018      	movs	r0, r3
 8005710:	f7ff fe5e 	bl	80053d0 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	2201      	movs	r2, #1
 800571a:	4013      	ands	r3, r2
 800571c:	d004      	beq.n	8005728 <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	0018      	movs	r0, r3
 8005722:	f7ff fe1d 	bl	8005360 <LL_EXTI_EnableIT_0_31>
 8005726:	e00c      	b.n	8005742 <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	0018      	movs	r0, r3
 800572c:	f7ff fe2a 	bl	8005384 <LL_EXTI_DisableIT_0_31>
 8005730:	e007      	b.n	8005742 <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	0018      	movs	r0, r3
 8005736:	f7ff fe4b 	bl	80053d0 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	0018      	movs	r0, r3
 800573e:	f7ff fe21 	bl	8005384 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2229      	movs	r2, #41	; 0x29
 8005746:	5c9b      	ldrb	r3, [r3, r2]
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d103      	bne.n	8005756 <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2229      	movs	r2, #41	; 0x29
 8005752:	2101      	movs	r1, #1
 8005754:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8005756:	231f      	movs	r3, #31
 8005758:	18fb      	adds	r3, r7, r3
 800575a:	781b      	ldrb	r3, [r3, #0]
}
 800575c:	0018      	movs	r0, r3
 800575e:	46bd      	mov	sp, r7
 8005760:	b008      	add	sp, #32
 8005762:	bd80      	pop	{r7, pc}
 8005764:	fe00740f 	.word	0xfe00740f
 8005768:	40010200 	.word	0x40010200
 800576c:	fffff7ff 	.word	0xfffff7ff
 8005770:	ffffbfff 	.word	0xffffbfff
 8005774:	20000064 	.word	0x20000064
 8005778:	00030d40 	.word	0x00030d40

0800577c <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8005784:	2300      	movs	r3, #0
 8005786:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005788:	210f      	movs	r1, #15
 800578a:	187b      	adds	r3, r7, r1
 800578c:	2200      	movs	r2, #0
 800578e:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d103      	bne.n	800579e <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 8005796:	187b      	adds	r3, r7, r1
 8005798:	2201      	movs	r2, #1
 800579a:	701a      	strb	r2, [r3, #0]
 800579c:	e035      	b.n	800580a <HAL_COMP_Start+0x8e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	0fdb      	lsrs	r3, r3, #31
 80057a6:	07da      	lsls	r2, r3, #31
 80057a8:	2380      	movs	r3, #128	; 0x80
 80057aa:	061b      	lsls	r3, r3, #24
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d104      	bne.n	80057ba <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 80057b0:	230f      	movs	r3, #15
 80057b2:	18fb      	adds	r3, r7, r3
 80057b4:	2201      	movs	r2, #1
 80057b6:	701a      	strb	r2, [r3, #0]
 80057b8:	e027      	b.n	800580a <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2229      	movs	r2, #41	; 0x29
 80057be:	5c9b      	ldrb	r3, [r3, r2]
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d11d      	bne.n	8005802 <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2101      	movs	r1, #1
 80057d2:	430a      	orrs	r2, r1
 80057d4:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2229      	movs	r2, #41	; 0x29
 80057da:	2102      	movs	r1, #2
 80057dc:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80057de:	4b0e      	ldr	r3, [pc, #56]	; (8005818 <HAL_COMP_Start+0x9c>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	490e      	ldr	r1, [pc, #56]	; (800581c <HAL_COMP_Start+0xa0>)
 80057e4:	0018      	movs	r0, r3
 80057e6:	f7fa fc8d 	bl	8000104 <__udivsi3>
 80057ea:	0003      	movs	r3, r0
 80057ec:	3301      	adds	r3, #1
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80057f2:	e002      	b.n	80057fa <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	3b01      	subs	r3, #1
 80057f8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1f9      	bne.n	80057f4 <HAL_COMP_Start+0x78>
 8005800:	e003      	b.n	800580a <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005802:	230f      	movs	r3, #15
 8005804:	18fb      	adds	r3, r7, r3
 8005806:	2201      	movs	r2, #1
 8005808:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800580a:	230f      	movs	r3, #15
 800580c:	18fb      	adds	r3, r7, r3
 800580e:	781b      	ldrb	r3, [r3, #0]
}
 8005810:	0018      	movs	r0, r3
 8005812:	46bd      	mov	sp, r7
 8005814:	b004      	add	sp, #16
 8005816:	bd80      	pop	{r7, pc}
 8005818:	20000064 	.word	0x20000064
 800581c:	00030d40 	.word	0x00030d40

08005820 <__NVIC_EnableIRQ>:
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	0002      	movs	r2, r0
 8005828:	1dfb      	adds	r3, r7, #7
 800582a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800582c:	1dfb      	adds	r3, r7, #7
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	2b7f      	cmp	r3, #127	; 0x7f
 8005832:	d809      	bhi.n	8005848 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005834:	1dfb      	adds	r3, r7, #7
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	001a      	movs	r2, r3
 800583a:	231f      	movs	r3, #31
 800583c:	401a      	ands	r2, r3
 800583e:	4b04      	ldr	r3, [pc, #16]	; (8005850 <__NVIC_EnableIRQ+0x30>)
 8005840:	2101      	movs	r1, #1
 8005842:	4091      	lsls	r1, r2
 8005844:	000a      	movs	r2, r1
 8005846:	601a      	str	r2, [r3, #0]
}
 8005848:	46c0      	nop			; (mov r8, r8)
 800584a:	46bd      	mov	sp, r7
 800584c:	b002      	add	sp, #8
 800584e:	bd80      	pop	{r7, pc}
 8005850:	e000e100 	.word	0xe000e100

08005854 <__NVIC_SetPriority>:
{
 8005854:	b590      	push	{r4, r7, lr}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	0002      	movs	r2, r0
 800585c:	6039      	str	r1, [r7, #0]
 800585e:	1dfb      	adds	r3, r7, #7
 8005860:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005862:	1dfb      	adds	r3, r7, #7
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	2b7f      	cmp	r3, #127	; 0x7f
 8005868:	d828      	bhi.n	80058bc <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800586a:	4a2f      	ldr	r2, [pc, #188]	; (8005928 <__NVIC_SetPriority+0xd4>)
 800586c:	1dfb      	adds	r3, r7, #7
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	b25b      	sxtb	r3, r3
 8005872:	089b      	lsrs	r3, r3, #2
 8005874:	33c0      	adds	r3, #192	; 0xc0
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	589b      	ldr	r3, [r3, r2]
 800587a:	1dfa      	adds	r2, r7, #7
 800587c:	7812      	ldrb	r2, [r2, #0]
 800587e:	0011      	movs	r1, r2
 8005880:	2203      	movs	r2, #3
 8005882:	400a      	ands	r2, r1
 8005884:	00d2      	lsls	r2, r2, #3
 8005886:	21ff      	movs	r1, #255	; 0xff
 8005888:	4091      	lsls	r1, r2
 800588a:	000a      	movs	r2, r1
 800588c:	43d2      	mvns	r2, r2
 800588e:	401a      	ands	r2, r3
 8005890:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	019b      	lsls	r3, r3, #6
 8005896:	22ff      	movs	r2, #255	; 0xff
 8005898:	401a      	ands	r2, r3
 800589a:	1dfb      	adds	r3, r7, #7
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	0018      	movs	r0, r3
 80058a0:	2303      	movs	r3, #3
 80058a2:	4003      	ands	r3, r0
 80058a4:	00db      	lsls	r3, r3, #3
 80058a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80058a8:	481f      	ldr	r0, [pc, #124]	; (8005928 <__NVIC_SetPriority+0xd4>)
 80058aa:	1dfb      	adds	r3, r7, #7
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	b25b      	sxtb	r3, r3
 80058b0:	089b      	lsrs	r3, r3, #2
 80058b2:	430a      	orrs	r2, r1
 80058b4:	33c0      	adds	r3, #192	; 0xc0
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	501a      	str	r2, [r3, r0]
}
 80058ba:	e031      	b.n	8005920 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80058bc:	4a1b      	ldr	r2, [pc, #108]	; (800592c <__NVIC_SetPriority+0xd8>)
 80058be:	1dfb      	adds	r3, r7, #7
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	0019      	movs	r1, r3
 80058c4:	230f      	movs	r3, #15
 80058c6:	400b      	ands	r3, r1
 80058c8:	3b08      	subs	r3, #8
 80058ca:	089b      	lsrs	r3, r3, #2
 80058cc:	3306      	adds	r3, #6
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	18d3      	adds	r3, r2, r3
 80058d2:	3304      	adds	r3, #4
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	1dfa      	adds	r2, r7, #7
 80058d8:	7812      	ldrb	r2, [r2, #0]
 80058da:	0011      	movs	r1, r2
 80058dc:	2203      	movs	r2, #3
 80058de:	400a      	ands	r2, r1
 80058e0:	00d2      	lsls	r2, r2, #3
 80058e2:	21ff      	movs	r1, #255	; 0xff
 80058e4:	4091      	lsls	r1, r2
 80058e6:	000a      	movs	r2, r1
 80058e8:	43d2      	mvns	r2, r2
 80058ea:	401a      	ands	r2, r3
 80058ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	019b      	lsls	r3, r3, #6
 80058f2:	22ff      	movs	r2, #255	; 0xff
 80058f4:	401a      	ands	r2, r3
 80058f6:	1dfb      	adds	r3, r7, #7
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	0018      	movs	r0, r3
 80058fc:	2303      	movs	r3, #3
 80058fe:	4003      	ands	r3, r0
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005904:	4809      	ldr	r0, [pc, #36]	; (800592c <__NVIC_SetPriority+0xd8>)
 8005906:	1dfb      	adds	r3, r7, #7
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	001c      	movs	r4, r3
 800590c:	230f      	movs	r3, #15
 800590e:	4023      	ands	r3, r4
 8005910:	3b08      	subs	r3, #8
 8005912:	089b      	lsrs	r3, r3, #2
 8005914:	430a      	orrs	r2, r1
 8005916:	3306      	adds	r3, #6
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	18c3      	adds	r3, r0, r3
 800591c:	3304      	adds	r3, #4
 800591e:	601a      	str	r2, [r3, #0]
}
 8005920:	46c0      	nop			; (mov r8, r8)
 8005922:	46bd      	mov	sp, r7
 8005924:	b003      	add	sp, #12
 8005926:	bd90      	pop	{r4, r7, pc}
 8005928:	e000e100 	.word	0xe000e100
 800592c:	e000ed00 	.word	0xe000ed00

08005930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	1e5a      	subs	r2, r3, #1
 800593c:	2380      	movs	r3, #128	; 0x80
 800593e:	045b      	lsls	r3, r3, #17
 8005940:	429a      	cmp	r2, r3
 8005942:	d301      	bcc.n	8005948 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005944:	2301      	movs	r3, #1
 8005946:	e010      	b.n	800596a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005948:	4b0a      	ldr	r3, [pc, #40]	; (8005974 <SysTick_Config+0x44>)
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	3a01      	subs	r2, #1
 800594e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005950:	2301      	movs	r3, #1
 8005952:	425b      	negs	r3, r3
 8005954:	2103      	movs	r1, #3
 8005956:	0018      	movs	r0, r3
 8005958:	f7ff ff7c 	bl	8005854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800595c:	4b05      	ldr	r3, [pc, #20]	; (8005974 <SysTick_Config+0x44>)
 800595e:	2200      	movs	r2, #0
 8005960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005962:	4b04      	ldr	r3, [pc, #16]	; (8005974 <SysTick_Config+0x44>)
 8005964:	2207      	movs	r2, #7
 8005966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005968:	2300      	movs	r3, #0
}
 800596a:	0018      	movs	r0, r3
 800596c:	46bd      	mov	sp, r7
 800596e:	b002      	add	sp, #8
 8005970:	bd80      	pop	{r7, pc}
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	e000e010 	.word	0xe000e010

08005978 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	60b9      	str	r1, [r7, #8]
 8005980:	607a      	str	r2, [r7, #4]
 8005982:	210f      	movs	r1, #15
 8005984:	187b      	adds	r3, r7, r1
 8005986:	1c02      	adds	r2, r0, #0
 8005988:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	187b      	adds	r3, r7, r1
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	b25b      	sxtb	r3, r3
 8005992:	0011      	movs	r1, r2
 8005994:	0018      	movs	r0, r3
 8005996:	f7ff ff5d 	bl	8005854 <__NVIC_SetPriority>
}
 800599a:	46c0      	nop			; (mov r8, r8)
 800599c:	46bd      	mov	sp, r7
 800599e:	b004      	add	sp, #16
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b082      	sub	sp, #8
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	0002      	movs	r2, r0
 80059aa:	1dfb      	adds	r3, r7, #7
 80059ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059ae:	1dfb      	adds	r3, r7, #7
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	b25b      	sxtb	r3, r3
 80059b4:	0018      	movs	r0, r3
 80059b6:	f7ff ff33 	bl	8005820 <__NVIC_EnableIRQ>
}
 80059ba:	46c0      	nop			; (mov r8, r8)
 80059bc:	46bd      	mov	sp, r7
 80059be:	b002      	add	sp, #8
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b082      	sub	sp, #8
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	0018      	movs	r0, r3
 80059ce:	f7ff ffaf 	bl	8005930 <SysTick_Config>
 80059d2:	0003      	movs	r3, r0
}
 80059d4:	0018      	movs	r0, r3
 80059d6:	46bd      	mov	sp, r7
 80059d8:	b002      	add	sp, #8
 80059da:	bd80      	pop	{r7, pc}

080059dc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e077      	b.n	8005ade <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a3d      	ldr	r2, [pc, #244]	; (8005ae8 <HAL_DMA_Init+0x10c>)
 80059f4:	4694      	mov	ip, r2
 80059f6:	4463      	add	r3, ip
 80059f8:	2114      	movs	r1, #20
 80059fa:	0018      	movs	r0, r3
 80059fc:	f7fa fb82 	bl	8000104 <__udivsi3>
 8005a00:	0003      	movs	r3, r0
 8005a02:	009a      	lsls	r2, r3, #2
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2225      	movs	r2, #37	; 0x25
 8005a0c:	2102      	movs	r1, #2
 8005a0e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4934      	ldr	r1, [pc, #208]	; (8005aec <HAL_DMA_Init+0x110>)
 8005a1c:	400a      	ands	r2, r1
 8005a1e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6819      	ldr	r1, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689a      	ldr	r2, [r3, #8]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	431a      	orrs	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	431a      	orrs	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	0018      	movs	r0, r3
 8005a5a:	f000 fa37 	bl	8005ecc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689a      	ldr	r2, [r3, #8]
 8005a62:	2380      	movs	r3, #128	; 0x80
 8005a64:	01db      	lsls	r3, r3, #7
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d102      	bne.n	8005a70 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a78:	213f      	movs	r1, #63	; 0x3f
 8005a7a:	400a      	ands	r2, r1
 8005a7c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005a86:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d011      	beq.n	8005ab4 <HAL_DMA_Init+0xd8>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	2b04      	cmp	r3, #4
 8005a96:	d80d      	bhi.n	8005ab4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	0018      	movs	r0, r3
 8005a9c:	f000 fa42 	bl	8005f24 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005ab0:	605a      	str	r2, [r3, #4]
 8005ab2:	e008      	b.n	8005ac6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2225      	movs	r2, #37	; 0x25
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2224      	movs	r2, #36	; 0x24
 8005ad8:	2100      	movs	r1, #0
 8005ada:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	0018      	movs	r0, r3
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	b002      	add	sp, #8
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	46c0      	nop			; (mov r8, r8)
 8005ae8:	bffdfff8 	.word	0xbffdfff8
 8005aec:	ffff800f 	.word	0xffff800f

08005af0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
 8005afc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005afe:	2317      	movs	r3, #23
 8005b00:	18fb      	adds	r3, r7, r3
 8005b02:	2200      	movs	r2, #0
 8005b04:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2224      	movs	r2, #36	; 0x24
 8005b0a:	5c9b      	ldrb	r3, [r3, r2]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d101      	bne.n	8005b14 <HAL_DMA_Start_IT+0x24>
 8005b10:	2302      	movs	r3, #2
 8005b12:	e06f      	b.n	8005bf4 <HAL_DMA_Start_IT+0x104>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2224      	movs	r2, #36	; 0x24
 8005b18:	2101      	movs	r1, #1
 8005b1a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2225      	movs	r2, #37	; 0x25
 8005b20:	5c9b      	ldrb	r3, [r3, r2]
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d157      	bne.n	8005bd8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2225      	movs	r2, #37	; 0x25
 8005b2c:	2102      	movs	r1, #2
 8005b2e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2101      	movs	r1, #1
 8005b42:	438a      	bics	r2, r1
 8005b44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	68b9      	ldr	r1, [r7, #8]
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 f97d 	bl	8005e4c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d008      	beq.n	8005b6c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	210e      	movs	r1, #14
 8005b66:	430a      	orrs	r2, r1
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	e00f      	b.n	8005b8c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2104      	movs	r1, #4
 8005b78:	438a      	bics	r2, r1
 8005b7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	210a      	movs	r1, #10
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	2380      	movs	r3, #128	; 0x80
 8005b94:	025b      	lsls	r3, r3, #9
 8005b96:	4013      	ands	r3, r2
 8005b98:	d008      	beq.n	8005bac <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba4:	2180      	movs	r1, #128	; 0x80
 8005ba6:	0049      	lsls	r1, r1, #1
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d008      	beq.n	8005bc6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bbe:	2180      	movs	r1, #128	; 0x80
 8005bc0:	0049      	lsls	r1, r1, #1
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	e00a      	b.n	8005bee <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2280      	movs	r2, #128	; 0x80
 8005bdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2224      	movs	r2, #36	; 0x24
 8005be2:	2100      	movs	r1, #0
 8005be4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8005be6:	2317      	movs	r3, #23
 8005be8:	18fb      	adds	r3, r7, r3
 8005bea:	2201      	movs	r2, #1
 8005bec:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005bee:	2317      	movs	r3, #23
 8005bf0:	18fb      	adds	r3, r7, r3
 8005bf2:	781b      	ldrb	r3, [r3, #0]
}
 8005bf4:	0018      	movs	r0, r3
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	b006      	add	sp, #24
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c04:	210f      	movs	r1, #15
 8005c06:	187b      	adds	r3, r7, r1
 8005c08:	2200      	movs	r2, #0
 8005c0a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2225      	movs	r2, #37	; 0x25
 8005c10:	5c9b      	ldrb	r3, [r3, r2]
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d006      	beq.n	8005c26 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2204      	movs	r2, #4
 8005c1c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005c1e:	187b      	adds	r3, r7, r1
 8005c20:	2201      	movs	r2, #1
 8005c22:	701a      	strb	r2, [r3, #0]
 8005c24:	e049      	b.n	8005cba <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	210e      	movs	r1, #14
 8005c32:	438a      	bics	r2, r1
 8005c34:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2101      	movs	r1, #1
 8005c42:	438a      	bics	r2, r1
 8005c44:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c50:	491d      	ldr	r1, [pc, #116]	; (8005cc8 <HAL_DMA_Abort_IT+0xcc>)
 8005c52:	400a      	ands	r2, r1
 8005c54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8005c56:	4b1d      	ldr	r3, [pc, #116]	; (8005ccc <HAL_DMA_Abort_IT+0xd0>)
 8005c58:	6859      	ldr	r1, [r3, #4]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	221c      	movs	r2, #28
 8005c60:	4013      	ands	r3, r2
 8005c62:	2201      	movs	r2, #1
 8005c64:	409a      	lsls	r2, r3
 8005c66:	4b19      	ldr	r3, [pc, #100]	; (8005ccc <HAL_DMA_Abort_IT+0xd0>)
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005c74:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00c      	beq.n	8005c98 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c88:	490f      	ldr	r1, [pc, #60]	; (8005cc8 <HAL_DMA_Abort_IT+0xcc>)
 8005c8a:	400a      	ands	r2, r1
 8005c8c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005c96:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2225      	movs	r2, #37	; 0x25
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2224      	movs	r2, #36	; 0x24
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d004      	beq.n	8005cba <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	0010      	movs	r0, r2
 8005cb8:	4798      	blx	r3
    }
  }
  return status;
 8005cba:	230f      	movs	r3, #15
 8005cbc:	18fb      	adds	r3, r7, r3
 8005cbe:	781b      	ldrb	r3, [r3, #0]
}
 8005cc0:	0018      	movs	r0, r3
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	b004      	add	sp, #16
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	fffffeff 	.word	0xfffffeff
 8005ccc:	40020000 	.word	0x40020000

08005cd0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8005cd8:	4b55      	ldr	r3, [pc, #340]	; (8005e30 <HAL_DMA_IRQHandler+0x160>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cea:	221c      	movs	r2, #28
 8005cec:	4013      	ands	r3, r2
 8005cee:	2204      	movs	r2, #4
 8005cf0:	409a      	lsls	r2, r3
 8005cf2:	0013      	movs	r3, r2
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	d027      	beq.n	8005d4a <HAL_DMA_IRQHandler+0x7a>
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2204      	movs	r2, #4
 8005cfe:	4013      	ands	r3, r2
 8005d00:	d023      	beq.n	8005d4a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	d107      	bne.n	8005d1e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2104      	movs	r1, #4
 8005d1a:	438a      	bics	r2, r1
 8005d1c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8005d1e:	4b44      	ldr	r3, [pc, #272]	; (8005e30 <HAL_DMA_IRQHandler+0x160>)
 8005d20:	6859      	ldr	r1, [r3, #4]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	221c      	movs	r2, #28
 8005d28:	4013      	ands	r3, r2
 8005d2a:	2204      	movs	r2, #4
 8005d2c:	409a      	lsls	r2, r3
 8005d2e:	4b40      	ldr	r3, [pc, #256]	; (8005e30 <HAL_DMA_IRQHandler+0x160>)
 8005d30:	430a      	orrs	r2, r1
 8005d32:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d100      	bne.n	8005d3e <HAL_DMA_IRQHandler+0x6e>
 8005d3c:	e073      	b.n	8005e26 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	0010      	movs	r0, r2
 8005d46:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005d48:	e06d      	b.n	8005e26 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	221c      	movs	r2, #28
 8005d50:	4013      	ands	r3, r2
 8005d52:	2202      	movs	r2, #2
 8005d54:	409a      	lsls	r2, r3
 8005d56:	0013      	movs	r3, r2
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	d02e      	beq.n	8005dbc <HAL_DMA_IRQHandler+0xec>
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	2202      	movs	r2, #2
 8005d62:	4013      	ands	r3, r2
 8005d64:	d02a      	beq.n	8005dbc <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	4013      	ands	r3, r2
 8005d70:	d10b      	bne.n	8005d8a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	210a      	movs	r1, #10
 8005d7e:	438a      	bics	r2, r1
 8005d80:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2225      	movs	r2, #37	; 0x25
 8005d86:	2101      	movs	r1, #1
 8005d88:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005d8a:	4b29      	ldr	r3, [pc, #164]	; (8005e30 <HAL_DMA_IRQHandler+0x160>)
 8005d8c:	6859      	ldr	r1, [r3, #4]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	221c      	movs	r2, #28
 8005d94:	4013      	ands	r3, r2
 8005d96:	2202      	movs	r2, #2
 8005d98:	409a      	lsls	r2, r3
 8005d9a:	4b25      	ldr	r3, [pc, #148]	; (8005e30 <HAL_DMA_IRQHandler+0x160>)
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2224      	movs	r2, #36	; 0x24
 8005da4:	2100      	movs	r1, #0
 8005da6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d03a      	beq.n	8005e26 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	0010      	movs	r0, r2
 8005db8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005dba:	e034      	b.n	8005e26 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc0:	221c      	movs	r2, #28
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	2208      	movs	r2, #8
 8005dc6:	409a      	lsls	r2, r3
 8005dc8:	0013      	movs	r3, r2
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	4013      	ands	r3, r2
 8005dce:	d02b      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x158>
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	2208      	movs	r2, #8
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	d027      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	210e      	movs	r1, #14
 8005de4:	438a      	bics	r2, r1
 8005de6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005de8:	4b11      	ldr	r3, [pc, #68]	; (8005e30 <HAL_DMA_IRQHandler+0x160>)
 8005dea:	6859      	ldr	r1, [r3, #4]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df0:	221c      	movs	r2, #28
 8005df2:	4013      	ands	r3, r2
 8005df4:	2201      	movs	r2, #1
 8005df6:	409a      	lsls	r2, r3
 8005df8:	4b0d      	ldr	r3, [pc, #52]	; (8005e30 <HAL_DMA_IRQHandler+0x160>)
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2225      	movs	r2, #37	; 0x25
 8005e08:	2101      	movs	r1, #1
 8005e0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2224      	movs	r2, #36	; 0x24
 8005e10:	2100      	movs	r1, #0
 8005e12:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d005      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	0010      	movs	r0, r2
 8005e24:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005e26:	46c0      	nop			; (mov r8, r8)
 8005e28:	46c0      	nop			; (mov r8, r8)
}
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	b004      	add	sp, #16
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	40020000 	.word	0x40020000

08005e34 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2225      	movs	r2, #37	; 0x25
 8005e40:	5c9b      	ldrb	r3, [r3, r2]
 8005e42:	b2db      	uxtb	r3, r3
}
 8005e44:	0018      	movs	r0, r3
 8005e46:	46bd      	mov	sp, r7
 8005e48:	b002      	add	sp, #8
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
 8005e58:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005e62:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d004      	beq.n	8005e76 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005e74:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005e76:	4b14      	ldr	r3, [pc, #80]	; (8005ec8 <DMA_SetConfig+0x7c>)
 8005e78:	6859      	ldr	r1, [r3, #4]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	221c      	movs	r2, #28
 8005e80:	4013      	ands	r3, r2
 8005e82:	2201      	movs	r2, #1
 8005e84:	409a      	lsls	r2, r3
 8005e86:	4b10      	ldr	r3, [pc, #64]	; (8005ec8 <DMA_SetConfig+0x7c>)
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	2b10      	cmp	r3, #16
 8005e9a:	d108      	bne.n	8005eae <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005eac:	e007      	b.n	8005ebe <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	60da      	str	r2, [r3, #12]
}
 8005ebe:	46c0      	nop			; (mov r8, r8)
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	b004      	add	sp, #16
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	46c0      	nop			; (mov r8, r8)
 8005ec8:	40020000 	.word	0x40020000

08005ecc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed8:	089b      	lsrs	r3, r3, #2
 8005eda:	4a10      	ldr	r2, [pc, #64]	; (8005f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8005edc:	4694      	mov	ip, r2
 8005ede:	4463      	add	r3, ip
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	001a      	movs	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	001a      	movs	r2, r3
 8005eee:	23ff      	movs	r3, #255	; 0xff
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	3b08      	subs	r3, #8
 8005ef4:	2114      	movs	r1, #20
 8005ef6:	0018      	movs	r0, r3
 8005ef8:	f7fa f904 	bl	8000104 <__udivsi3>
 8005efc:	0003      	movs	r3, r0
 8005efe:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a07      	ldr	r2, [pc, #28]	; (8005f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8005f04:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	221f      	movs	r2, #31
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	409a      	lsls	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8005f14:	46c0      	nop			; (mov r8, r8)
 8005f16:	46bd      	mov	sp, r7
 8005f18:	b004      	add	sp, #16
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	10008200 	.word	0x10008200
 8005f20:	40020880 	.word	0x40020880

08005f24 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	223f      	movs	r2, #63	; 0x3f
 8005f32:	4013      	ands	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4a0a      	ldr	r2, [pc, #40]	; (8005f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005f3a:	4694      	mov	ip, r2
 8005f3c:	4463      	add	r3, ip
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	001a      	movs	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a07      	ldr	r2, [pc, #28]	; (8005f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005f4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	2203      	movs	r2, #3
 8005f52:	4013      	ands	r3, r2
 8005f54:	2201      	movs	r2, #1
 8005f56:	409a      	lsls	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	659a      	str	r2, [r3, #88]	; 0x58
}
 8005f5c:	46c0      	nop			; (mov r8, r8)
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	b004      	add	sp, #16
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	1000823f 	.word	0x1000823f
 8005f68:	40020940 	.word	0x40020940

08005f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f76:	2300      	movs	r3, #0
 8005f78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f7a:	e147      	b.n	800620c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2101      	movs	r1, #1
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	4091      	lsls	r1, r2
 8005f86:	000a      	movs	r2, r1
 8005f88:	4013      	ands	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d100      	bne.n	8005f94 <HAL_GPIO_Init+0x28>
 8005f92:	e138      	b.n	8006206 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	2203      	movs	r2, #3
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d005      	beq.n	8005fac <HAL_GPIO_Init+0x40>
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	2203      	movs	r2, #3
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d130      	bne.n	800600e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	005b      	lsls	r3, r3, #1
 8005fb6:	2203      	movs	r2, #3
 8005fb8:	409a      	lsls	r2, r3
 8005fba:	0013      	movs	r3, r2
 8005fbc:	43da      	mvns	r2, r3
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	68da      	ldr	r2, [r3, #12]
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	005b      	lsls	r3, r3, #1
 8005fcc:	409a      	lsls	r2, r3
 8005fce:	0013      	movs	r3, r2
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	409a      	lsls	r2, r3
 8005fe8:	0013      	movs	r3, r2
 8005fea:	43da      	mvns	r2, r3
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	4013      	ands	r3, r2
 8005ff0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	091b      	lsrs	r3, r3, #4
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	401a      	ands	r2, r3
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	409a      	lsls	r2, r3
 8006000:	0013      	movs	r3, r2
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	4313      	orrs	r3, r2
 8006006:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	2203      	movs	r2, #3
 8006014:	4013      	ands	r3, r2
 8006016:	2b03      	cmp	r3, #3
 8006018:	d017      	beq.n	800604a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	005b      	lsls	r3, r3, #1
 8006024:	2203      	movs	r2, #3
 8006026:	409a      	lsls	r2, r3
 8006028:	0013      	movs	r3, r2
 800602a:	43da      	mvns	r2, r3
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	4013      	ands	r3, r2
 8006030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	689a      	ldr	r2, [r3, #8]
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	005b      	lsls	r3, r3, #1
 800603a:	409a      	lsls	r2, r3
 800603c:	0013      	movs	r3, r2
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	4313      	orrs	r3, r2
 8006042:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	2203      	movs	r2, #3
 8006050:	4013      	ands	r3, r2
 8006052:	2b02      	cmp	r3, #2
 8006054:	d123      	bne.n	800609e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	08da      	lsrs	r2, r3, #3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	3208      	adds	r2, #8
 800605e:	0092      	lsls	r2, r2, #2
 8006060:	58d3      	ldr	r3, [r2, r3]
 8006062:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	2207      	movs	r2, #7
 8006068:	4013      	ands	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	220f      	movs	r2, #15
 800606e:	409a      	lsls	r2, r3
 8006070:	0013      	movs	r3, r2
 8006072:	43da      	mvns	r2, r3
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	4013      	ands	r3, r2
 8006078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	691a      	ldr	r2, [r3, #16]
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2107      	movs	r1, #7
 8006082:	400b      	ands	r3, r1
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	409a      	lsls	r2, r3
 8006088:	0013      	movs	r3, r2
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	4313      	orrs	r3, r2
 800608e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	08da      	lsrs	r2, r3, #3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	3208      	adds	r2, #8
 8006098:	0092      	lsls	r2, r2, #2
 800609a:	6939      	ldr	r1, [r7, #16]
 800609c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	2203      	movs	r2, #3
 80060aa:	409a      	lsls	r2, r3
 80060ac:	0013      	movs	r3, r2
 80060ae:	43da      	mvns	r2, r3
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	4013      	ands	r3, r2
 80060b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	2203      	movs	r2, #3
 80060bc:	401a      	ands	r2, r3
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	005b      	lsls	r3, r3, #1
 80060c2:	409a      	lsls	r2, r3
 80060c4:	0013      	movs	r3, r2
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	23c0      	movs	r3, #192	; 0xc0
 80060d8:	029b      	lsls	r3, r3, #10
 80060da:	4013      	ands	r3, r2
 80060dc:	d100      	bne.n	80060e0 <HAL_GPIO_Init+0x174>
 80060de:	e092      	b.n	8006206 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80060e0:	4a50      	ldr	r2, [pc, #320]	; (8006224 <HAL_GPIO_Init+0x2b8>)
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	089b      	lsrs	r3, r3, #2
 80060e6:	3318      	adds	r3, #24
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	589b      	ldr	r3, [r3, r2]
 80060ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2203      	movs	r2, #3
 80060f2:	4013      	ands	r3, r2
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	220f      	movs	r2, #15
 80060f8:	409a      	lsls	r2, r3
 80060fa:	0013      	movs	r3, r2
 80060fc:	43da      	mvns	r2, r3
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	4013      	ands	r3, r2
 8006102:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	23a0      	movs	r3, #160	; 0xa0
 8006108:	05db      	lsls	r3, r3, #23
 800610a:	429a      	cmp	r2, r3
 800610c:	d013      	beq.n	8006136 <HAL_GPIO_Init+0x1ca>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a45      	ldr	r2, [pc, #276]	; (8006228 <HAL_GPIO_Init+0x2bc>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d00d      	beq.n	8006132 <HAL_GPIO_Init+0x1c6>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a44      	ldr	r2, [pc, #272]	; (800622c <HAL_GPIO_Init+0x2c0>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d007      	beq.n	800612e <HAL_GPIO_Init+0x1c2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a43      	ldr	r2, [pc, #268]	; (8006230 <HAL_GPIO_Init+0x2c4>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d101      	bne.n	800612a <HAL_GPIO_Init+0x1be>
 8006126:	2303      	movs	r3, #3
 8006128:	e006      	b.n	8006138 <HAL_GPIO_Init+0x1cc>
 800612a:	2305      	movs	r3, #5
 800612c:	e004      	b.n	8006138 <HAL_GPIO_Init+0x1cc>
 800612e:	2302      	movs	r3, #2
 8006130:	e002      	b.n	8006138 <HAL_GPIO_Init+0x1cc>
 8006132:	2301      	movs	r3, #1
 8006134:	e000      	b.n	8006138 <HAL_GPIO_Init+0x1cc>
 8006136:	2300      	movs	r3, #0
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	2103      	movs	r1, #3
 800613c:	400a      	ands	r2, r1
 800613e:	00d2      	lsls	r2, r2, #3
 8006140:	4093      	lsls	r3, r2
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	4313      	orrs	r3, r2
 8006146:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006148:	4936      	ldr	r1, [pc, #216]	; (8006224 <HAL_GPIO_Init+0x2b8>)
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	089b      	lsrs	r3, r3, #2
 800614e:	3318      	adds	r3, #24
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006156:	4b33      	ldr	r3, [pc, #204]	; (8006224 <HAL_GPIO_Init+0x2b8>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	43da      	mvns	r2, r3
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	4013      	ands	r3, r2
 8006164:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	2380      	movs	r3, #128	; 0x80
 800616c:	035b      	lsls	r3, r3, #13
 800616e:	4013      	ands	r3, r2
 8006170:	d003      	beq.n	800617a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4313      	orrs	r3, r2
 8006178:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800617a:	4b2a      	ldr	r3, [pc, #168]	; (8006224 <HAL_GPIO_Init+0x2b8>)
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006180:	4b28      	ldr	r3, [pc, #160]	; (8006224 <HAL_GPIO_Init+0x2b8>)
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	43da      	mvns	r2, r3
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	4013      	ands	r3, r2
 800618e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	2380      	movs	r3, #128	; 0x80
 8006196:	039b      	lsls	r3, r3, #14
 8006198:	4013      	ands	r3, r2
 800619a:	d003      	beq.n	80061a4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80061a4:	4b1f      	ldr	r3, [pc, #124]	; (8006224 <HAL_GPIO_Init+0x2b8>)
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80061aa:	4a1e      	ldr	r2, [pc, #120]	; (8006224 <HAL_GPIO_Init+0x2b8>)
 80061ac:	2384      	movs	r3, #132	; 0x84
 80061ae:	58d3      	ldr	r3, [r2, r3]
 80061b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	43da      	mvns	r2, r3
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	4013      	ands	r3, r2
 80061ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	2380      	movs	r3, #128	; 0x80
 80061c2:	029b      	lsls	r3, r3, #10
 80061c4:	4013      	ands	r3, r2
 80061c6:	d003      	beq.n	80061d0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80061d0:	4914      	ldr	r1, [pc, #80]	; (8006224 <HAL_GPIO_Init+0x2b8>)
 80061d2:	2284      	movs	r2, #132	; 0x84
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80061d8:	4a12      	ldr	r2, [pc, #72]	; (8006224 <HAL_GPIO_Init+0x2b8>)
 80061da:	2380      	movs	r3, #128	; 0x80
 80061dc:	58d3      	ldr	r3, [r2, r3]
 80061de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	43da      	mvns	r2, r3
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	4013      	ands	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	685a      	ldr	r2, [r3, #4]
 80061ee:	2380      	movs	r3, #128	; 0x80
 80061f0:	025b      	lsls	r3, r3, #9
 80061f2:	4013      	ands	r3, r2
 80061f4:	d003      	beq.n	80061fe <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80061fe:	4909      	ldr	r1, [pc, #36]	; (8006224 <HAL_GPIO_Init+0x2b8>)
 8006200:	2280      	movs	r2, #128	; 0x80
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	3301      	adds	r3, #1
 800620a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	40da      	lsrs	r2, r3
 8006214:	1e13      	subs	r3, r2, #0
 8006216:	d000      	beq.n	800621a <HAL_GPIO_Init+0x2ae>
 8006218:	e6b0      	b.n	8005f7c <HAL_GPIO_Init+0x10>
  }
}
 800621a:	46c0      	nop			; (mov r8, r8)
 800621c:	46c0      	nop			; (mov r8, r8)
 800621e:	46bd      	mov	sp, r7
 8006220:	b006      	add	sp, #24
 8006222:	bd80      	pop	{r7, pc}
 8006224:	40021800 	.word	0x40021800
 8006228:	50000400 	.word	0x50000400
 800622c:	50000800 	.word	0x50000800
 8006230:	50000c00 	.word	0x50000c00

08006234 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e082      	b.n	800634c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2241      	movs	r2, #65	; 0x41
 800624a:	5c9b      	ldrb	r3, [r3, r2]
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d107      	bne.n	8006262 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2240      	movs	r2, #64	; 0x40
 8006256:	2100      	movs	r1, #0
 8006258:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	0018      	movs	r0, r3
 800625e:	f7fe fc05 	bl	8004a6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2241      	movs	r2, #65	; 0x41
 8006266:	2124      	movs	r1, #36	; 0x24
 8006268:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2101      	movs	r1, #1
 8006276:	438a      	bics	r2, r1
 8006278:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4934      	ldr	r1, [pc, #208]	; (8006354 <HAL_I2C_Init+0x120>)
 8006284:	400a      	ands	r2, r1
 8006286:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689a      	ldr	r2, [r3, #8]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4931      	ldr	r1, [pc, #196]	; (8006358 <HAL_I2C_Init+0x124>)
 8006294:	400a      	ands	r2, r1
 8006296:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d108      	bne.n	80062b2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2180      	movs	r1, #128	; 0x80
 80062aa:	0209      	lsls	r1, r1, #8
 80062ac:	430a      	orrs	r2, r1
 80062ae:	609a      	str	r2, [r3, #8]
 80062b0:	e007      	b.n	80062c2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	689a      	ldr	r2, [r3, #8]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2184      	movs	r1, #132	; 0x84
 80062bc:	0209      	lsls	r1, r1, #8
 80062be:	430a      	orrs	r2, r1
 80062c0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d104      	bne.n	80062d4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2280      	movs	r2, #128	; 0x80
 80062d0:	0112      	lsls	r2, r2, #4
 80062d2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	491f      	ldr	r1, [pc, #124]	; (800635c <HAL_I2C_Init+0x128>)
 80062e0:	430a      	orrs	r2, r1
 80062e2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68da      	ldr	r2, [r3, #12]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	491a      	ldr	r1, [pc, #104]	; (8006358 <HAL_I2C_Init+0x124>)
 80062f0:	400a      	ands	r2, r1
 80062f2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	691a      	ldr	r2, [r3, #16]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	431a      	orrs	r2, r3
 80062fe:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	430a      	orrs	r2, r1
 800630c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	69d9      	ldr	r1, [r3, #28]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1a      	ldr	r2, [r3, #32]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2101      	movs	r1, #1
 800632a:	430a      	orrs	r2, r1
 800632c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2241      	movs	r2, #65	; 0x41
 8006338:	2120      	movs	r1, #32
 800633a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2242      	movs	r2, #66	; 0x42
 8006346:	2100      	movs	r1, #0
 8006348:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	0018      	movs	r0, r3
 800634e:	46bd      	mov	sp, r7
 8006350:	b002      	add	sp, #8
 8006352:	bd80      	pop	{r7, pc}
 8006354:	f0ffffff 	.word	0xf0ffffff
 8006358:	ffff7fff 	.word	0xffff7fff
 800635c:	02008000 	.word	0x02008000

08006360 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006360:	b590      	push	{r4, r7, lr}
 8006362:	b089      	sub	sp, #36	; 0x24
 8006364:	af02      	add	r7, sp, #8
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	0008      	movs	r0, r1
 800636a:	607a      	str	r2, [r7, #4]
 800636c:	0019      	movs	r1, r3
 800636e:	230a      	movs	r3, #10
 8006370:	18fb      	adds	r3, r7, r3
 8006372:	1c02      	adds	r2, r0, #0
 8006374:	801a      	strh	r2, [r3, #0]
 8006376:	2308      	movs	r3, #8
 8006378:	18fb      	adds	r3, r7, r3
 800637a:	1c0a      	adds	r2, r1, #0
 800637c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2241      	movs	r2, #65	; 0x41
 8006382:	5c9b      	ldrb	r3, [r3, r2]
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b20      	cmp	r3, #32
 8006388:	d000      	beq.n	800638c <HAL_I2C_Master_Transmit+0x2c>
 800638a:	e0e7      	b.n	800655c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2240      	movs	r2, #64	; 0x40
 8006390:	5c9b      	ldrb	r3, [r3, r2]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d101      	bne.n	800639a <HAL_I2C_Master_Transmit+0x3a>
 8006396:	2302      	movs	r3, #2
 8006398:	e0e1      	b.n	800655e <HAL_I2C_Master_Transmit+0x1fe>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2240      	movs	r2, #64	; 0x40
 800639e:	2101      	movs	r1, #1
 80063a0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80063a2:	f7fe ff99 	bl	80052d8 <HAL_GetTick>
 80063a6:	0003      	movs	r3, r0
 80063a8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80063aa:	2380      	movs	r3, #128	; 0x80
 80063ac:	0219      	lsls	r1, r3, #8
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	2319      	movs	r3, #25
 80063b6:	2201      	movs	r2, #1
 80063b8:	f000 fe76 	bl	80070a8 <I2C_WaitOnFlagUntilTimeout>
 80063bc:	1e03      	subs	r3, r0, #0
 80063be:	d001      	beq.n	80063c4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e0cc      	b.n	800655e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2241      	movs	r2, #65	; 0x41
 80063c8:	2121      	movs	r1, #33	; 0x21
 80063ca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2242      	movs	r2, #66	; 0x42
 80063d0:	2110      	movs	r1, #16
 80063d2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2208      	movs	r2, #8
 80063e4:	18ba      	adds	r2, r7, r2
 80063e6:	8812      	ldrh	r2, [r2, #0]
 80063e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	2bff      	cmp	r3, #255	; 0xff
 80063f8:	d911      	bls.n	800641e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	22ff      	movs	r2, #255	; 0xff
 80063fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006404:	b2da      	uxtb	r2, r3
 8006406:	2380      	movs	r3, #128	; 0x80
 8006408:	045c      	lsls	r4, r3, #17
 800640a:	230a      	movs	r3, #10
 800640c:	18fb      	adds	r3, r7, r3
 800640e:	8819      	ldrh	r1, [r3, #0]
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	4b55      	ldr	r3, [pc, #340]	; (8006568 <HAL_I2C_Master_Transmit+0x208>)
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	0023      	movs	r3, r4
 8006418:	f001 f80c 	bl	8007434 <I2C_TransferConfig>
 800641c:	e075      	b.n	800650a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006422:	b29a      	uxth	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800642c:	b2da      	uxtb	r2, r3
 800642e:	2380      	movs	r3, #128	; 0x80
 8006430:	049c      	lsls	r4, r3, #18
 8006432:	230a      	movs	r3, #10
 8006434:	18fb      	adds	r3, r7, r3
 8006436:	8819      	ldrh	r1, [r3, #0]
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	4b4b      	ldr	r3, [pc, #300]	; (8006568 <HAL_I2C_Master_Transmit+0x208>)
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	0023      	movs	r3, r4
 8006440:	f000 fff8 	bl	8007434 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006444:	e061      	b.n	800650a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	0018      	movs	r0, r3
 800644e:	f000 fe6a 	bl	8007126 <I2C_WaitOnTXISFlagUntilTimeout>
 8006452:	1e03      	subs	r3, r0, #0
 8006454:	d001      	beq.n	800645a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e081      	b.n	800655e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	781a      	ldrb	r2, [r3, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006474:	b29b      	uxth	r3, r3
 8006476:	3b01      	subs	r3, #1
 8006478:	b29a      	uxth	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006482:	3b01      	subs	r3, #1
 8006484:	b29a      	uxth	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800648e:	b29b      	uxth	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	d03a      	beq.n	800650a <HAL_I2C_Master_Transmit+0x1aa>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006498:	2b00      	cmp	r3, #0
 800649a:	d136      	bne.n	800650a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800649c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	0013      	movs	r3, r2
 80064a6:	2200      	movs	r2, #0
 80064a8:	2180      	movs	r1, #128	; 0x80
 80064aa:	f000 fdfd 	bl	80070a8 <I2C_WaitOnFlagUntilTimeout>
 80064ae:	1e03      	subs	r3, r0, #0
 80064b0:	d001      	beq.n	80064b6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e053      	b.n	800655e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	2bff      	cmp	r3, #255	; 0xff
 80064be:	d911      	bls.n	80064e4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	22ff      	movs	r2, #255	; 0xff
 80064c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	2380      	movs	r3, #128	; 0x80
 80064ce:	045c      	lsls	r4, r3, #17
 80064d0:	230a      	movs	r3, #10
 80064d2:	18fb      	adds	r3, r7, r3
 80064d4:	8819      	ldrh	r1, [r3, #0]
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	2300      	movs	r3, #0
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	0023      	movs	r3, r4
 80064de:	f000 ffa9 	bl	8007434 <I2C_TransferConfig>
 80064e2:	e012      	b.n	800650a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	2380      	movs	r3, #128	; 0x80
 80064f6:	049c      	lsls	r4, r3, #18
 80064f8:	230a      	movs	r3, #10
 80064fa:	18fb      	adds	r3, r7, r3
 80064fc:	8819      	ldrh	r1, [r3, #0]
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	2300      	movs	r3, #0
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	0023      	movs	r3, r4
 8006506:	f000 ff95 	bl	8007434 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800650e:	b29b      	uxth	r3, r3
 8006510:	2b00      	cmp	r3, #0
 8006512:	d198      	bne.n	8006446 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	0018      	movs	r0, r3
 800651c:	f000 fe42 	bl	80071a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006520:	1e03      	subs	r3, r0, #0
 8006522:	d001      	beq.n	8006528 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e01a      	b.n	800655e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2220      	movs	r2, #32
 800652e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	490c      	ldr	r1, [pc, #48]	; (800656c <HAL_I2C_Master_Transmit+0x20c>)
 800653c:	400a      	ands	r2, r1
 800653e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2241      	movs	r2, #65	; 0x41
 8006544:	2120      	movs	r1, #32
 8006546:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2242      	movs	r2, #66	; 0x42
 800654c:	2100      	movs	r1, #0
 800654e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2240      	movs	r2, #64	; 0x40
 8006554:	2100      	movs	r1, #0
 8006556:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006558:	2300      	movs	r3, #0
 800655a:	e000      	b.n	800655e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800655c:	2302      	movs	r3, #2
  }
}
 800655e:	0018      	movs	r0, r3
 8006560:	46bd      	mov	sp, r7
 8006562:	b007      	add	sp, #28
 8006564:	bd90      	pop	{r4, r7, pc}
 8006566:	46c0      	nop			; (mov r8, r8)
 8006568:	80002000 	.word	0x80002000
 800656c:	fe00e800 	.word	0xfe00e800

08006570 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658c:	2b00      	cmp	r3, #0
 800658e:	d005      	beq.n	800659c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	68f9      	ldr	r1, [r7, #12]
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	4798      	blx	r3
  }
}
 800659c:	46c0      	nop			; (mov r8, r8)
 800659e:	46bd      	mov	sp, r7
 80065a0:	b004      	add	sp, #16
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	0a1b      	lsrs	r3, r3, #8
 80065c0:	001a      	movs	r2, r3
 80065c2:	2301      	movs	r3, #1
 80065c4:	4013      	ands	r3, r2
 80065c6:	d010      	beq.n	80065ea <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	09db      	lsrs	r3, r3, #7
 80065cc:	001a      	movs	r2, r3
 80065ce:	2301      	movs	r3, #1
 80065d0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80065d2:	d00a      	beq.n	80065ea <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d8:	2201      	movs	r2, #1
 80065da:	431a      	orrs	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2280      	movs	r2, #128	; 0x80
 80065e6:	0052      	lsls	r2, r2, #1
 80065e8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	0a9b      	lsrs	r3, r3, #10
 80065ee:	001a      	movs	r2, r3
 80065f0:	2301      	movs	r3, #1
 80065f2:	4013      	ands	r3, r2
 80065f4:	d010      	beq.n	8006618 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	09db      	lsrs	r3, r3, #7
 80065fa:	001a      	movs	r2, r3
 80065fc:	2301      	movs	r3, #1
 80065fe:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006600:	d00a      	beq.n	8006618 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006606:	2208      	movs	r2, #8
 8006608:	431a      	orrs	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2280      	movs	r2, #128	; 0x80
 8006614:	00d2      	lsls	r2, r2, #3
 8006616:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	0a5b      	lsrs	r3, r3, #9
 800661c:	001a      	movs	r2, r3
 800661e:	2301      	movs	r3, #1
 8006620:	4013      	ands	r3, r2
 8006622:	d010      	beq.n	8006646 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	09db      	lsrs	r3, r3, #7
 8006628:	001a      	movs	r2, r3
 800662a:	2301      	movs	r3, #1
 800662c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800662e:	d00a      	beq.n	8006646 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006634:	2202      	movs	r2, #2
 8006636:	431a      	orrs	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2280      	movs	r2, #128	; 0x80
 8006642:	0092      	lsls	r2, r2, #2
 8006644:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800664a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	220b      	movs	r2, #11
 8006650:	4013      	ands	r3, r2
 8006652:	d005      	beq.n	8006660 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	0011      	movs	r1, r2
 800665a:	0018      	movs	r0, r3
 800665c:	f000 fbd8 	bl	8006e10 <I2C_ITError>
  }
}
 8006660:	46c0      	nop			; (mov r8, r8)
 8006662:	46bd      	mov	sp, r7
 8006664:	b006      	add	sp, #24
 8006666:	bd80      	pop	{r7, pc}

08006668 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006670:	46c0      	nop			; (mov r8, r8)
 8006672:	46bd      	mov	sp, r7
 8006674:	b002      	add	sp, #8
 8006676:	bd80      	pop	{r7, pc}

08006678 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006680:	46c0      	nop			; (mov r8, r8)
 8006682:	46bd      	mov	sp, r7
 8006684:	b002      	add	sp, #8
 8006686:	bd80      	pop	{r7, pc}

08006688 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	0008      	movs	r0, r1
 8006692:	0011      	movs	r1, r2
 8006694:	1cfb      	adds	r3, r7, #3
 8006696:	1c02      	adds	r2, r0, #0
 8006698:	701a      	strb	r2, [r3, #0]
 800669a:	003b      	movs	r3, r7
 800669c:	1c0a      	adds	r2, r1, #0
 800669e:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80066a0:	46c0      	nop			; (mov r8, r8)
 80066a2:	46bd      	mov	sp, r7
 80066a4:	b002      	add	sp, #8
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80066b0:	46c0      	nop			; (mov r8, r8)
 80066b2:	46bd      	mov	sp, r7
 80066b4:	b002      	add	sp, #8
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80066c0:	46c0      	nop			; (mov r8, r8)
 80066c2:	46bd      	mov	sp, r7
 80066c4:	b002      	add	sp, #8
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80066d0:	46c0      	nop			; (mov r8, r8)
 80066d2:	46bd      	mov	sp, r7
 80066d4:	b002      	add	sp, #8
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2240      	movs	r2, #64	; 0x40
 80066f2:	5c9b      	ldrb	r3, [r3, r2]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d101      	bne.n	80066fc <I2C_Slave_ISR_IT+0x24>
 80066f8:	2302      	movs	r3, #2
 80066fa:	e0fa      	b.n	80068f2 <I2C_Slave_ISR_IT+0x21a>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2240      	movs	r2, #64	; 0x40
 8006700:	2101      	movs	r1, #1
 8006702:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	095b      	lsrs	r3, r3, #5
 8006708:	001a      	movs	r2, r3
 800670a:	2301      	movs	r3, #1
 800670c:	4013      	ands	r3, r2
 800670e:	d00b      	beq.n	8006728 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	095b      	lsrs	r3, r3, #5
 8006714:	001a      	movs	r2, r3
 8006716:	2301      	movs	r3, #1
 8006718:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800671a:	d005      	beq.n	8006728 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	0011      	movs	r1, r2
 8006722:	0018      	movs	r0, r3
 8006724:	f000 f9f6 	bl	8006b14 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	091b      	lsrs	r3, r3, #4
 800672c:	001a      	movs	r2, r3
 800672e:	2301      	movs	r3, #1
 8006730:	4013      	ands	r3, r2
 8006732:	d054      	beq.n	80067de <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	091b      	lsrs	r3, r3, #4
 8006738:	001a      	movs	r2, r3
 800673a:	2301      	movs	r3, #1
 800673c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800673e:	d04e      	beq.n	80067de <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006744:	b29b      	uxth	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d12d      	bne.n	80067a6 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2241      	movs	r2, #65	; 0x41
 800674e:	5c9b      	ldrb	r3, [r3, r2]
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b28      	cmp	r3, #40	; 0x28
 8006754:	d10b      	bne.n	800676e <I2C_Slave_ISR_IT+0x96>
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	2380      	movs	r3, #128	; 0x80
 800675a:	049b      	lsls	r3, r3, #18
 800675c:	429a      	cmp	r2, r3
 800675e:	d106      	bne.n	800676e <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	0011      	movs	r1, r2
 8006766:	0018      	movs	r0, r3
 8006768:	f000 faf8 	bl	8006d5c <I2C_ITListenCplt>
 800676c:	e036      	b.n	80067dc <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2241      	movs	r2, #65	; 0x41
 8006772:	5c9b      	ldrb	r3, [r3, r2]
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b29      	cmp	r3, #41	; 0x29
 8006778:	d110      	bne.n	800679c <I2C_Slave_ISR_IT+0xc4>
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	4a5f      	ldr	r2, [pc, #380]	; (80068fc <I2C_Slave_ISR_IT+0x224>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d00c      	beq.n	800679c <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2210      	movs	r2, #16
 8006788:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	0018      	movs	r0, r3
 800678e:	f000 fc4a 	bl	8007026 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	0018      	movs	r0, r3
 8006796:	f000 f957 	bl	8006a48 <I2C_ITSlaveSeqCplt>
 800679a:	e01f      	b.n	80067dc <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2210      	movs	r2, #16
 80067a2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80067a4:	e09d      	b.n	80068e2 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2210      	movs	r2, #16
 80067ac:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b2:	2204      	movs	r2, #4
 80067b4:	431a      	orrs	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d005      	beq.n	80067cc <I2C_Slave_ISR_IT+0xf4>
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	2380      	movs	r3, #128	; 0x80
 80067c4:	045b      	lsls	r3, r3, #17
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d000      	beq.n	80067cc <I2C_Slave_ISR_IT+0xf4>
 80067ca:	e08a      	b.n	80068e2 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	0011      	movs	r1, r2
 80067d4:	0018      	movs	r0, r3
 80067d6:	f000 fb1b 	bl	8006e10 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80067da:	e082      	b.n	80068e2 <I2C_Slave_ISR_IT+0x20a>
 80067dc:	e081      	b.n	80068e2 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	089b      	lsrs	r3, r3, #2
 80067e2:	001a      	movs	r2, r3
 80067e4:	2301      	movs	r3, #1
 80067e6:	4013      	ands	r3, r2
 80067e8:	d031      	beq.n	800684e <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	089b      	lsrs	r3, r3, #2
 80067ee:	001a      	movs	r2, r3
 80067f0:	2301      	movs	r3, #1
 80067f2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80067f4:	d02b      	beq.n	800684e <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d018      	beq.n	8006832 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680a:	b2d2      	uxtb	r2, r2
 800680c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006812:	1c5a      	adds	r2, r3, #1
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800681c:	3b01      	subs	r3, #1
 800681e:	b29a      	uxth	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006828:	b29b      	uxth	r3, r3
 800682a:	3b01      	subs	r3, #1
 800682c:	b29a      	uxth	r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006836:	b29b      	uxth	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	d154      	bne.n	80068e6 <I2C_Slave_ISR_IT+0x20e>
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	4a2f      	ldr	r2, [pc, #188]	; (80068fc <I2C_Slave_ISR_IT+0x224>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d050      	beq.n	80068e6 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	0018      	movs	r0, r3
 8006848:	f000 f8fe 	bl	8006a48 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800684c:	e04b      	b.n	80068e6 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	08db      	lsrs	r3, r3, #3
 8006852:	001a      	movs	r2, r3
 8006854:	2301      	movs	r3, #1
 8006856:	4013      	ands	r3, r2
 8006858:	d00c      	beq.n	8006874 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	08db      	lsrs	r3, r3, #3
 800685e:	001a      	movs	r2, r3
 8006860:	2301      	movs	r3, #1
 8006862:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006864:	d006      	beq.n	8006874 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	0011      	movs	r1, r2
 800686c:	0018      	movs	r0, r3
 800686e:	f000 f847 	bl	8006900 <I2C_ITAddrCplt>
 8006872:	e039      	b.n	80068e8 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	085b      	lsrs	r3, r3, #1
 8006878:	001a      	movs	r2, r3
 800687a:	2301      	movs	r3, #1
 800687c:	4013      	ands	r3, r2
 800687e:	d033      	beq.n	80068e8 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	085b      	lsrs	r3, r3, #1
 8006884:	001a      	movs	r2, r3
 8006886:	2301      	movs	r3, #1
 8006888:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800688a:	d02d      	beq.n	80068e8 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006890:	b29b      	uxth	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d018      	beq.n	80068c8 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689a:	781a      	ldrb	r2, [r3, #0]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a6:	1c5a      	adds	r2, r3, #1
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	3b01      	subs	r3, #1
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068be:	3b01      	subs	r3, #1
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	851a      	strh	r2, [r3, #40]	; 0x28
 80068c6:	e00f      	b.n	80068e8 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	2380      	movs	r3, #128	; 0x80
 80068cc:	045b      	lsls	r3, r3, #17
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d002      	beq.n	80068d8 <I2C_Slave_ISR_IT+0x200>
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d107      	bne.n	80068e8 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	0018      	movs	r0, r3
 80068dc:	f000 f8b4 	bl	8006a48 <I2C_ITSlaveSeqCplt>
 80068e0:	e002      	b.n	80068e8 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80068e2:	46c0      	nop			; (mov r8, r8)
 80068e4:	e000      	b.n	80068e8 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80068e6:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2240      	movs	r2, #64	; 0x40
 80068ec:	2100      	movs	r1, #0
 80068ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	0018      	movs	r0, r3
 80068f4:	46bd      	mov	sp, r7
 80068f6:	b006      	add	sp, #24
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	46c0      	nop			; (mov r8, r8)
 80068fc:	ffff0000 	.word	0xffff0000

08006900 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006900:	b5b0      	push	{r4, r5, r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2241      	movs	r2, #65	; 0x41
 800690e:	5c9b      	ldrb	r3, [r3, r2]
 8006910:	b2db      	uxtb	r3, r3
 8006912:	001a      	movs	r2, r3
 8006914:	2328      	movs	r3, #40	; 0x28
 8006916:	4013      	ands	r3, r2
 8006918:	2b28      	cmp	r3, #40	; 0x28
 800691a:	d000      	beq.n	800691e <I2C_ITAddrCplt+0x1e>
 800691c:	e088      	b.n	8006a30 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	0c1b      	lsrs	r3, r3, #16
 8006926:	b2da      	uxtb	r2, r3
 8006928:	250f      	movs	r5, #15
 800692a:	197b      	adds	r3, r7, r5
 800692c:	2101      	movs	r1, #1
 800692e:	400a      	ands	r2, r1
 8006930:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	0c1b      	lsrs	r3, r3, #16
 800693a:	b29a      	uxth	r2, r3
 800693c:	200c      	movs	r0, #12
 800693e:	183b      	adds	r3, r7, r0
 8006940:	21fe      	movs	r1, #254	; 0xfe
 8006942:	400a      	ands	r2, r1
 8006944:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	b29a      	uxth	r2, r3
 800694e:	240a      	movs	r4, #10
 8006950:	193b      	adds	r3, r7, r4
 8006952:	0592      	lsls	r2, r2, #22
 8006954:	0d92      	lsrs	r2, r2, #22
 8006956:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	b29a      	uxth	r2, r3
 8006960:	2308      	movs	r3, #8
 8006962:	18fb      	adds	r3, r7, r3
 8006964:	21fe      	movs	r1, #254	; 0xfe
 8006966:	400a      	ands	r2, r1
 8006968:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	2b02      	cmp	r3, #2
 8006970:	d148      	bne.n	8006a04 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006972:	0021      	movs	r1, r4
 8006974:	187b      	adds	r3, r7, r1
 8006976:	881b      	ldrh	r3, [r3, #0]
 8006978:	09db      	lsrs	r3, r3, #7
 800697a:	b29a      	uxth	r2, r3
 800697c:	183b      	adds	r3, r7, r0
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	4053      	eors	r3, r2
 8006982:	b29b      	uxth	r3, r3
 8006984:	001a      	movs	r2, r3
 8006986:	2306      	movs	r3, #6
 8006988:	4013      	ands	r3, r2
 800698a:	d120      	bne.n	80069ce <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800698c:	183b      	adds	r3, r7, r0
 800698e:	187a      	adds	r2, r7, r1
 8006990:	8812      	ldrh	r2, [r2, #0]
 8006992:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006998:	1c5a      	adds	r2, r3, #1
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d14c      	bne.n	8006a40 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2208      	movs	r2, #8
 80069b2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2240      	movs	r2, #64	; 0x40
 80069b8:	2100      	movs	r1, #0
 80069ba:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80069bc:	183b      	adds	r3, r7, r0
 80069be:	881a      	ldrh	r2, [r3, #0]
 80069c0:	197b      	adds	r3, r7, r5
 80069c2:	7819      	ldrb	r1, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	0018      	movs	r0, r3
 80069c8:	f7ff fe5e 	bl	8006688 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80069cc:	e038      	b.n	8006a40 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80069ce:	240c      	movs	r4, #12
 80069d0:	193b      	adds	r3, r7, r4
 80069d2:	2208      	movs	r2, #8
 80069d4:	18ba      	adds	r2, r7, r2
 80069d6:	8812      	ldrh	r2, [r2, #0]
 80069d8:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80069da:	2380      	movs	r3, #128	; 0x80
 80069dc:	021a      	lsls	r2, r3, #8
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	0011      	movs	r1, r2
 80069e2:	0018      	movs	r0, r3
 80069e4:	f000 fd60 	bl	80074a8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2240      	movs	r2, #64	; 0x40
 80069ec:	2100      	movs	r1, #0
 80069ee:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80069f0:	193b      	adds	r3, r7, r4
 80069f2:	881a      	ldrh	r2, [r3, #0]
 80069f4:	230f      	movs	r3, #15
 80069f6:	18fb      	adds	r3, r7, r3
 80069f8:	7819      	ldrb	r1, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	0018      	movs	r0, r3
 80069fe:	f7ff fe43 	bl	8006688 <HAL_I2C_AddrCallback>
}
 8006a02:	e01d      	b.n	8006a40 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006a04:	2380      	movs	r3, #128	; 0x80
 8006a06:	021a      	lsls	r2, r3, #8
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	0011      	movs	r1, r2
 8006a0c:	0018      	movs	r0, r3
 8006a0e:	f000 fd4b 	bl	80074a8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2240      	movs	r2, #64	; 0x40
 8006a16:	2100      	movs	r1, #0
 8006a18:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006a1a:	230c      	movs	r3, #12
 8006a1c:	18fb      	adds	r3, r7, r3
 8006a1e:	881a      	ldrh	r2, [r3, #0]
 8006a20:	230f      	movs	r3, #15
 8006a22:	18fb      	adds	r3, r7, r3
 8006a24:	7819      	ldrb	r1, [r3, #0]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	0018      	movs	r0, r3
 8006a2a:	f7ff fe2d 	bl	8006688 <HAL_I2C_AddrCallback>
}
 8006a2e:	e007      	b.n	8006a40 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2208      	movs	r2, #8
 8006a36:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2240      	movs	r2, #64	; 0x40
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	5499      	strb	r1, [r3, r2]
}
 8006a40:	46c0      	nop			; (mov r8, r8)
 8006a42:	46bd      	mov	sp, r7
 8006a44:	b004      	add	sp, #16
 8006a46:	bdb0      	pop	{r4, r5, r7, pc}

08006a48 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2242      	movs	r2, #66	; 0x42
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	0b9b      	lsrs	r3, r3, #14
 8006a64:	001a      	movs	r2, r3
 8006a66:	2301      	movs	r3, #1
 8006a68:	4013      	ands	r3, r2
 8006a6a:	d008      	beq.n	8006a7e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4925      	ldr	r1, [pc, #148]	; (8006b0c <I2C_ITSlaveSeqCplt+0xc4>)
 8006a78:	400a      	ands	r2, r1
 8006a7a:	601a      	str	r2, [r3, #0]
 8006a7c:	e00d      	b.n	8006a9a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	0bdb      	lsrs	r3, r3, #15
 8006a82:	001a      	movs	r2, r3
 8006a84:	2301      	movs	r3, #1
 8006a86:	4013      	ands	r3, r2
 8006a88:	d007      	beq.n	8006a9a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	491e      	ldr	r1, [pc, #120]	; (8006b10 <I2C_ITSlaveSeqCplt+0xc8>)
 8006a96:	400a      	ands	r2, r1
 8006a98:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2241      	movs	r2, #65	; 0x41
 8006a9e:	5c9b      	ldrb	r3, [r3, r2]
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b29      	cmp	r3, #41	; 0x29
 8006aa4:	d114      	bne.n	8006ad0 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2241      	movs	r2, #65	; 0x41
 8006aaa:	2128      	movs	r1, #40	; 0x28
 8006aac:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2221      	movs	r2, #33	; 0x21
 8006ab2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2101      	movs	r1, #1
 8006ab8:	0018      	movs	r0, r3
 8006aba:	f000 fcf5 	bl	80074a8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2240      	movs	r2, #64	; 0x40
 8006ac2:	2100      	movs	r1, #0
 8006ac4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	0018      	movs	r0, r3
 8006aca:	f7ff fdcd 	bl	8006668 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006ace:	e019      	b.n	8006b04 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2241      	movs	r2, #65	; 0x41
 8006ad4:	5c9b      	ldrb	r3, [r3, r2]
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	2b2a      	cmp	r3, #42	; 0x2a
 8006ada:	d113      	bne.n	8006b04 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2241      	movs	r2, #65	; 0x41
 8006ae0:	2128      	movs	r1, #40	; 0x28
 8006ae2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2222      	movs	r2, #34	; 0x22
 8006ae8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2102      	movs	r1, #2
 8006aee:	0018      	movs	r0, r3
 8006af0:	f000 fcda 	bl	80074a8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2240      	movs	r2, #64	; 0x40
 8006af8:	2100      	movs	r1, #0
 8006afa:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	0018      	movs	r0, r3
 8006b00:	f7ff fdba 	bl	8006678 <HAL_I2C_SlaveRxCpltCallback>
}
 8006b04:	46c0      	nop			; (mov r8, r8)
 8006b06:	46bd      	mov	sp, r7
 8006b08:	b004      	add	sp, #16
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	ffffbfff 	.word	0xffffbfff
 8006b10:	ffff7fff 	.word	0xffff7fff

08006b14 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006b2a:	200f      	movs	r0, #15
 8006b2c:	183b      	adds	r3, r7, r0
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	2141      	movs	r1, #65	; 0x41
 8006b32:	5c52      	ldrb	r2, [r2, r1]
 8006b34:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006b3e:	183b      	adds	r3, r7, r0
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	2b21      	cmp	r3, #33	; 0x21
 8006b44:	d003      	beq.n	8006b4e <I2C_ITSlaveCplt+0x3a>
 8006b46:	183b      	adds	r3, r7, r0
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	2b29      	cmp	r3, #41	; 0x29
 8006b4c:	d109      	bne.n	8006b62 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006b4e:	4a7d      	ldr	r2, [pc, #500]	; (8006d44 <I2C_ITSlaveCplt+0x230>)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	0011      	movs	r1, r2
 8006b54:	0018      	movs	r0, r3
 8006b56:	f000 fca7 	bl	80074a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2221      	movs	r2, #33	; 0x21
 8006b5e:	631a      	str	r2, [r3, #48]	; 0x30
 8006b60:	e011      	b.n	8006b86 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006b62:	220f      	movs	r2, #15
 8006b64:	18bb      	adds	r3, r7, r2
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	2b22      	cmp	r3, #34	; 0x22
 8006b6a:	d003      	beq.n	8006b74 <I2C_ITSlaveCplt+0x60>
 8006b6c:	18bb      	adds	r3, r7, r2
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	2b2a      	cmp	r3, #42	; 0x2a
 8006b72:	d108      	bne.n	8006b86 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006b74:	4a74      	ldr	r2, [pc, #464]	; (8006d48 <I2C_ITSlaveCplt+0x234>)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	0011      	movs	r1, r2
 8006b7a:	0018      	movs	r0, r3
 8006b7c:	f000 fc94 	bl	80074a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2222      	movs	r2, #34	; 0x22
 8006b84:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2180      	movs	r1, #128	; 0x80
 8006b92:	0209      	lsls	r1, r1, #8
 8006b94:	430a      	orrs	r2, r1
 8006b96:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	496a      	ldr	r1, [pc, #424]	; (8006d4c <I2C_ITSlaveCplt+0x238>)
 8006ba4:	400a      	ands	r2, r1
 8006ba6:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	0018      	movs	r0, r3
 8006bac:	f000 fa3b 	bl	8007026 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	0b9b      	lsrs	r3, r3, #14
 8006bb4:	001a      	movs	r2, r3
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	4013      	ands	r3, r2
 8006bba:	d013      	beq.n	8006be4 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4962      	ldr	r1, [pc, #392]	; (8006d50 <I2C_ITSlaveCplt+0x23c>)
 8006bc8:	400a      	ands	r2, r1
 8006bca:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d020      	beq.n	8006c16 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006be2:	e018      	b.n	8006c16 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	0bdb      	lsrs	r3, r3, #15
 8006be8:	001a      	movs	r2, r3
 8006bea:	2301      	movs	r3, #1
 8006bec:	4013      	ands	r3, r2
 8006bee:	d012      	beq.n	8006c16 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4956      	ldr	r1, [pc, #344]	; (8006d54 <I2C_ITSlaveCplt+0x240>)
 8006bfc:	400a      	ands	r2, r1
 8006bfe:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d006      	beq.n	8006c16 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	089b      	lsrs	r3, r3, #2
 8006c1a:	001a      	movs	r2, r3
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	4013      	ands	r3, r2
 8006c20:	d020      	beq.n	8006c64 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	2204      	movs	r2, #4
 8006c26:	4393      	bics	r3, r2
 8006c28:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c34:	b2d2      	uxtb	r2, r2
 8006c36:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3c:	1c5a      	adds	r2, r3, #1
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00c      	beq.n	8006c64 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d005      	beq.n	8006c7a <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c72:	2204      	movs	r2, #4
 8006c74:	431a      	orrs	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2242      	movs	r2, #66	; 0x42
 8006c7e:	2100      	movs	r1, #0
 8006c80:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d013      	beq.n	8006cb8 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	0011      	movs	r1, r2
 8006c98:	0018      	movs	r0, r3
 8006c9a:	f000 f8b9 	bl	8006e10 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2241      	movs	r2, #65	; 0x41
 8006ca2:	5c9b      	ldrb	r3, [r3, r2]
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b28      	cmp	r3, #40	; 0x28
 8006ca8:	d147      	bne.n	8006d3a <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	0011      	movs	r1, r2
 8006cb0:	0018      	movs	r0, r3
 8006cb2:	f000 f853 	bl	8006d5c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006cb6:	e040      	b.n	8006d3a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cbc:	4a26      	ldr	r2, [pc, #152]	; (8006d58 <I2C_ITSlaveCplt+0x244>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d016      	beq.n	8006cf0 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	0018      	movs	r0, r3
 8006cc6:	f7ff febf 	bl	8006a48 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a22      	ldr	r2, [pc, #136]	; (8006d58 <I2C_ITSlaveCplt+0x244>)
 8006cce:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2241      	movs	r2, #65	; 0x41
 8006cd4:	2120      	movs	r1, #32
 8006cd6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2240      	movs	r2, #64	; 0x40
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	0018      	movs	r0, r3
 8006cea:	f7ff fcdd 	bl	80066a8 <HAL_I2C_ListenCpltCallback>
}
 8006cee:	e024      	b.n	8006d3a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2241      	movs	r2, #65	; 0x41
 8006cf4:	5c9b      	ldrb	r3, [r3, r2]
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b22      	cmp	r3, #34	; 0x22
 8006cfa:	d10f      	bne.n	8006d1c <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2241      	movs	r2, #65	; 0x41
 8006d00:	2120      	movs	r1, #32
 8006d02:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2240      	movs	r2, #64	; 0x40
 8006d0e:	2100      	movs	r1, #0
 8006d10:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	0018      	movs	r0, r3
 8006d16:	f7ff fcaf 	bl	8006678 <HAL_I2C_SlaveRxCpltCallback>
}
 8006d1a:	e00e      	b.n	8006d3a <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2241      	movs	r2, #65	; 0x41
 8006d20:	2120      	movs	r1, #32
 8006d22:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2240      	movs	r2, #64	; 0x40
 8006d2e:	2100      	movs	r1, #0
 8006d30:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	0018      	movs	r0, r3
 8006d36:	f7ff fc97 	bl	8006668 <HAL_I2C_SlaveTxCpltCallback>
}
 8006d3a:	46c0      	nop			; (mov r8, r8)
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	b006      	add	sp, #24
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	46c0      	nop			; (mov r8, r8)
 8006d44:	00008001 	.word	0x00008001
 8006d48:	00008002 	.word	0x00008002
 8006d4c:	fe00e800 	.word	0xfe00e800
 8006d50:	ffffbfff 	.word	0xffffbfff
 8006d54:	ffff7fff 	.word	0xffff7fff
 8006d58:	ffff0000 	.word	0xffff0000

08006d5c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a27      	ldr	r2, [pc, #156]	; (8006e08 <I2C_ITListenCplt+0xac>)
 8006d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2241      	movs	r2, #65	; 0x41
 8006d76:	2120      	movs	r1, #32
 8006d78:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2242      	movs	r2, #66	; 0x42
 8006d7e:	2100      	movs	r1, #0
 8006d80:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	089b      	lsrs	r3, r3, #2
 8006d8c:	001a      	movs	r2, r3
 8006d8e:	2301      	movs	r3, #1
 8006d90:	4013      	ands	r3, r2
 8006d92:	d022      	beq.n	8006dda <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9e:	b2d2      	uxtb	r2, r2
 8006da0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da6:	1c5a      	adds	r2, r3, #1
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d012      	beq.n	8006dda <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db8:	3b01      	subs	r3, #1
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd2:	2204      	movs	r2, #4
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006dda:	4a0c      	ldr	r2, [pc, #48]	; (8006e0c <I2C_ITListenCplt+0xb0>)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	0011      	movs	r1, r2
 8006de0:	0018      	movs	r0, r3
 8006de2:	f000 fb61 	bl	80074a8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2210      	movs	r2, #16
 8006dec:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2240      	movs	r2, #64	; 0x40
 8006df2:	2100      	movs	r1, #0
 8006df4:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	0018      	movs	r0, r3
 8006dfa:	f7ff fc55 	bl	80066a8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006dfe:	46c0      	nop			; (mov r8, r8)
 8006e00:	46bd      	mov	sp, r7
 8006e02:	b002      	add	sp, #8
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	46c0      	nop			; (mov r8, r8)
 8006e08:	ffff0000 	.word	0xffff0000
 8006e0c:	00008003 	.word	0x00008003

08006e10 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006e1a:	200f      	movs	r0, #15
 8006e1c:	183b      	adds	r3, r7, r0
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	2141      	movs	r1, #65	; 0x41
 8006e22:	5c52      	ldrb	r2, [r2, r1]
 8006e24:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2242      	movs	r2, #66	; 0x42
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a62      	ldr	r2, [pc, #392]	; (8006fbc <I2C_ITError+0x1ac>)
 8006e32:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	431a      	orrs	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006e46:	183b      	adds	r3, r7, r0
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	2b28      	cmp	r3, #40	; 0x28
 8006e4c:	d007      	beq.n	8006e5e <I2C_ITError+0x4e>
 8006e4e:	183b      	adds	r3, r7, r0
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	2b29      	cmp	r3, #41	; 0x29
 8006e54:	d003      	beq.n	8006e5e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006e56:	183b      	adds	r3, r7, r0
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	2b2a      	cmp	r3, #42	; 0x2a
 8006e5c:	d10c      	bne.n	8006e78 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2103      	movs	r1, #3
 8006e62:	0018      	movs	r0, r3
 8006e64:	f000 fb20 	bl	80074a8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2241      	movs	r2, #65	; 0x41
 8006e6c:	2128      	movs	r1, #40	; 0x28
 8006e6e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a53      	ldr	r2, [pc, #332]	; (8006fc0 <I2C_ITError+0x1b0>)
 8006e74:	635a      	str	r2, [r3, #52]	; 0x34
 8006e76:	e012      	b.n	8006e9e <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006e78:	4a52      	ldr	r2, [pc, #328]	; (8006fc4 <I2C_ITError+0x1b4>)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	0011      	movs	r1, r2
 8006e7e:	0018      	movs	r0, r3
 8006e80:	f000 fb12 	bl	80074a8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2241      	movs	r2, #65	; 0x41
 8006e88:	5c9b      	ldrb	r3, [r3, r2]
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b60      	cmp	r3, #96	; 0x60
 8006e8e:	d003      	beq.n	8006e98 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2241      	movs	r2, #65	; 0x41
 8006e94:	2120      	movs	r1, #32
 8006e96:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea2:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d03b      	beq.n	8006f24 <I2C_ITError+0x114>
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	2b11      	cmp	r3, #17
 8006eb0:	d002      	beq.n	8006eb8 <I2C_ITError+0xa8>
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	2b21      	cmp	r3, #33	; 0x21
 8006eb6:	d135      	bne.n	8006f24 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	2380      	movs	r3, #128	; 0x80
 8006ec0:	01db      	lsls	r3, r3, #7
 8006ec2:	401a      	ands	r2, r3
 8006ec4:	2380      	movs	r3, #128	; 0x80
 8006ec6:	01db      	lsls	r3, r3, #7
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d107      	bne.n	8006edc <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	493c      	ldr	r1, [pc, #240]	; (8006fc8 <I2C_ITError+0x1b8>)
 8006ed8:	400a      	ands	r2, r1
 8006eda:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee0:	0018      	movs	r0, r3
 8006ee2:	f7fe ffa7 	bl	8005e34 <HAL_DMA_GetState>
 8006ee6:	0003      	movs	r3, r0
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d016      	beq.n	8006f1a <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef0:	4a36      	ldr	r2, [pc, #216]	; (8006fcc <I2C_ITError+0x1bc>)
 8006ef2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2240      	movs	r2, #64	; 0x40
 8006ef8:	2100      	movs	r1, #0
 8006efa:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f00:	0018      	movs	r0, r3
 8006f02:	f7fe fe7b 	bl	8005bfc <HAL_DMA_Abort_IT>
 8006f06:	1e03      	subs	r3, r0, #0
 8006f08:	d051      	beq.n	8006fae <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f14:	0018      	movs	r0, r3
 8006f16:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006f18:	e049      	b.n	8006fae <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	0018      	movs	r0, r3
 8006f1e:	f000 f859 	bl	8006fd4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006f22:	e044      	b.n	8006fae <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d03b      	beq.n	8006fa4 <I2C_ITError+0x194>
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2b12      	cmp	r3, #18
 8006f30:	d002      	beq.n	8006f38 <I2C_ITError+0x128>
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2b22      	cmp	r3, #34	; 0x22
 8006f36:	d135      	bne.n	8006fa4 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	2380      	movs	r3, #128	; 0x80
 8006f40:	021b      	lsls	r3, r3, #8
 8006f42:	401a      	ands	r2, r3
 8006f44:	2380      	movs	r3, #128	; 0x80
 8006f46:	021b      	lsls	r3, r3, #8
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d107      	bne.n	8006f5c <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	491e      	ldr	r1, [pc, #120]	; (8006fd0 <I2C_ITError+0x1c0>)
 8006f58:	400a      	ands	r2, r1
 8006f5a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f60:	0018      	movs	r0, r3
 8006f62:	f7fe ff67 	bl	8005e34 <HAL_DMA_GetState>
 8006f66:	0003      	movs	r3, r0
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d016      	beq.n	8006f9a <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f70:	4a16      	ldr	r2, [pc, #88]	; (8006fcc <I2C_ITError+0x1bc>)
 8006f72:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2240      	movs	r2, #64	; 0x40
 8006f78:	2100      	movs	r1, #0
 8006f7a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f80:	0018      	movs	r0, r3
 8006f82:	f7fe fe3b 	bl	8005bfc <HAL_DMA_Abort_IT>
 8006f86:	1e03      	subs	r3, r0, #0
 8006f88:	d013      	beq.n	8006fb2 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f94:	0018      	movs	r0, r3
 8006f96:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f98:	e00b      	b.n	8006fb2 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	0018      	movs	r0, r3
 8006f9e:	f000 f819 	bl	8006fd4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006fa2:	e006      	b.n	8006fb2 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	0018      	movs	r0, r3
 8006fa8:	f000 f814 	bl	8006fd4 <I2C_TreatErrorCallback>
  }
}
 8006fac:	e002      	b.n	8006fb4 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006fae:	46c0      	nop			; (mov r8, r8)
 8006fb0:	e000      	b.n	8006fb4 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006fb2:	46c0      	nop			; (mov r8, r8)
}
 8006fb4:	46c0      	nop			; (mov r8, r8)
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	b004      	add	sp, #16
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	ffff0000 	.word	0xffff0000
 8006fc0:	080066d9 	.word	0x080066d9
 8006fc4:	00008003 	.word	0x00008003
 8006fc8:	ffffbfff 	.word	0xffffbfff
 8006fcc:	0800706b 	.word	0x0800706b
 8006fd0:	ffff7fff 	.word	0xffff7fff

08006fd4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2241      	movs	r2, #65	; 0x41
 8006fe0:	5c9b      	ldrb	r3, [r3, r2]
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b60      	cmp	r3, #96	; 0x60
 8006fe6:	d10f      	bne.n	8007008 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2241      	movs	r2, #65	; 0x41
 8006fec:	2120      	movs	r1, #32
 8006fee:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2240      	movs	r2, #64	; 0x40
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	0018      	movs	r0, r3
 8007002:	f7ff fb61 	bl	80066c8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007006:	e00a      	b.n	800701e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2240      	movs	r2, #64	; 0x40
 8007012:	2100      	movs	r1, #0
 8007014:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	0018      	movs	r0, r3
 800701a:	f7ff fb4d 	bl	80066b8 <HAL_I2C_ErrorCallback>
}
 800701e:	46c0      	nop			; (mov r8, r8)
 8007020:	46bd      	mov	sp, r7
 8007022:	b002      	add	sp, #8
 8007024:	bd80      	pop	{r7, pc}

08007026 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b082      	sub	sp, #8
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	2202      	movs	r2, #2
 8007036:	4013      	ands	r3, r2
 8007038:	2b02      	cmp	r3, #2
 800703a:	d103      	bne.n	8007044 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2200      	movs	r2, #0
 8007042:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	2201      	movs	r2, #1
 800704c:	4013      	ands	r3, r2
 800704e:	2b01      	cmp	r3, #1
 8007050:	d007      	beq.n	8007062 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	699a      	ldr	r2, [r3, #24]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2101      	movs	r1, #1
 800705e:	430a      	orrs	r2, r1
 8007060:	619a      	str	r2, [r3, #24]
  }
}
 8007062:	46c0      	nop			; (mov r8, r8)
 8007064:	46bd      	mov	sp, r7
 8007066:	b002      	add	sp, #8
 8007068:	bd80      	pop	{r7, pc}

0800706a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b084      	sub	sp, #16
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007076:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707c:	2b00      	cmp	r3, #0
 800707e:	d003      	beq.n	8007088 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007084:	2200      	movs	r2, #0
 8007086:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800708c:	2b00      	cmp	r3, #0
 800708e:	d003      	beq.n	8007098 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007094:	2200      	movs	r2, #0
 8007096:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	0018      	movs	r0, r3
 800709c:	f7ff ff9a 	bl	8006fd4 <I2C_TreatErrorCallback>
}
 80070a0:	46c0      	nop			; (mov r8, r8)
 80070a2:	46bd      	mov	sp, r7
 80070a4:	b004      	add	sp, #16
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	603b      	str	r3, [r7, #0]
 80070b4:	1dfb      	adds	r3, r7, #7
 80070b6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070b8:	e021      	b.n	80070fe <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	3301      	adds	r3, #1
 80070be:	d01e      	beq.n	80070fe <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070c0:	f7fe f90a 	bl	80052d8 <HAL_GetTick>
 80070c4:	0002      	movs	r2, r0
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d302      	bcc.n	80070d6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d113      	bne.n	80070fe <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070da:	2220      	movs	r2, #32
 80070dc:	431a      	orrs	r2, r3
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2241      	movs	r2, #65	; 0x41
 80070e6:	2120      	movs	r1, #32
 80070e8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2242      	movs	r2, #66	; 0x42
 80070ee:	2100      	movs	r1, #0
 80070f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2240      	movs	r2, #64	; 0x40
 80070f6:	2100      	movs	r1, #0
 80070f8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e00f      	b.n	800711e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	4013      	ands	r3, r2
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	425a      	negs	r2, r3
 800710e:	4153      	adcs	r3, r2
 8007110:	b2db      	uxtb	r3, r3
 8007112:	001a      	movs	r2, r3
 8007114:	1dfb      	adds	r3, r7, #7
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	429a      	cmp	r2, r3
 800711a:	d0ce      	beq.n	80070ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	0018      	movs	r0, r3
 8007120:	46bd      	mov	sp, r7
 8007122:	b004      	add	sp, #16
 8007124:	bd80      	pop	{r7, pc}

08007126 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b084      	sub	sp, #16
 800712a:	af00      	add	r7, sp, #0
 800712c:	60f8      	str	r0, [r7, #12]
 800712e:	60b9      	str	r1, [r7, #8]
 8007130:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007132:	e02b      	b.n	800718c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	68b9      	ldr	r1, [r7, #8]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	0018      	movs	r0, r3
 800713c:	f000 f86e 	bl	800721c <I2C_IsErrorOccurred>
 8007140:	1e03      	subs	r3, r0, #0
 8007142:	d001      	beq.n	8007148 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e029      	b.n	800719c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	3301      	adds	r3, #1
 800714c:	d01e      	beq.n	800718c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800714e:	f7fe f8c3 	bl	80052d8 <HAL_GetTick>
 8007152:	0002      	movs	r2, r0
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	429a      	cmp	r2, r3
 800715c:	d302      	bcc.n	8007164 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d113      	bne.n	800718c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007168:	2220      	movs	r2, #32
 800716a:	431a      	orrs	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2241      	movs	r2, #65	; 0x41
 8007174:	2120      	movs	r1, #32
 8007176:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2242      	movs	r2, #66	; 0x42
 800717c:	2100      	movs	r1, #0
 800717e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2240      	movs	r2, #64	; 0x40
 8007184:	2100      	movs	r1, #0
 8007186:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e007      	b.n	800719c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	2202      	movs	r2, #2
 8007194:	4013      	ands	r3, r2
 8007196:	2b02      	cmp	r3, #2
 8007198:	d1cc      	bne.n	8007134 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	0018      	movs	r0, r3
 800719e:	46bd      	mov	sp, r7
 80071a0:	b004      	add	sp, #16
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071b0:	e028      	b.n	8007204 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	68b9      	ldr	r1, [r7, #8]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	0018      	movs	r0, r3
 80071ba:	f000 f82f 	bl	800721c <I2C_IsErrorOccurred>
 80071be:	1e03      	subs	r3, r0, #0
 80071c0:	d001      	beq.n	80071c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e026      	b.n	8007214 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071c6:	f7fe f887 	bl	80052d8 <HAL_GetTick>
 80071ca:	0002      	movs	r2, r0
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d302      	bcc.n	80071dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d113      	bne.n	8007204 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e0:	2220      	movs	r2, #32
 80071e2:	431a      	orrs	r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2241      	movs	r2, #65	; 0x41
 80071ec:	2120      	movs	r1, #32
 80071ee:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2242      	movs	r2, #66	; 0x42
 80071f4:	2100      	movs	r1, #0
 80071f6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2240      	movs	r2, #64	; 0x40
 80071fc:	2100      	movs	r1, #0
 80071fe:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	e007      	b.n	8007214 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	2220      	movs	r2, #32
 800720c:	4013      	ands	r3, r2
 800720e:	2b20      	cmp	r3, #32
 8007210:	d1cf      	bne.n	80071b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	0018      	movs	r0, r3
 8007216:	46bd      	mov	sp, r7
 8007218:	b004      	add	sp, #16
 800721a:	bd80      	pop	{r7, pc}

0800721c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800721c:	b590      	push	{r4, r7, lr}
 800721e:	b08b      	sub	sp, #44	; 0x2c
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007228:	2327      	movs	r3, #39	; 0x27
 800722a:	18fb      	adds	r3, r7, r3
 800722c:	2200      	movs	r2, #0
 800722e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007238:	2300      	movs	r3, #0
 800723a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	2210      	movs	r2, #16
 8007244:	4013      	ands	r3, r2
 8007246:	d100      	bne.n	800724a <I2C_IsErrorOccurred+0x2e>
 8007248:	e08e      	b.n	8007368 <I2C_IsErrorOccurred+0x14c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2210      	movs	r2, #16
 8007250:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007252:	e06c      	b.n	800732e <I2C_IsErrorOccurred+0x112>
 8007254:	2427      	movs	r4, #39	; 0x27
 8007256:	193b      	adds	r3, r7, r4
 8007258:	193a      	adds	r2, r7, r4
 800725a:	7812      	ldrb	r2, [r2, #0]
 800725c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	3301      	adds	r3, #1
 8007262:	d064      	beq.n	800732e <I2C_IsErrorOccurred+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007264:	f7fe f838 	bl	80052d8 <HAL_GetTick>
 8007268:	0002      	movs	r2, r0
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	429a      	cmp	r2, r3
 8007272:	d306      	bcc.n	8007282 <I2C_IsErrorOccurred+0x66>
 8007274:	193b      	adds	r3, r7, r4
 8007276:	193a      	adds	r2, r7, r4
 8007278:	7812      	ldrb	r2, [r2, #0]
 800727a:	701a      	strb	r2, [r3, #0]
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d155      	bne.n	800732e <I2C_IsErrorOccurred+0x112>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	685a      	ldr	r2, [r3, #4]
 8007288:	2380      	movs	r3, #128	; 0x80
 800728a:	01db      	lsls	r3, r3, #7
 800728c:	4013      	ands	r3, r2
 800728e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007290:	2013      	movs	r0, #19
 8007292:	183b      	adds	r3, r7, r0
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	2142      	movs	r1, #66	; 0x42
 8007298:	5c52      	ldrb	r2, [r2, r1]
 800729a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	699a      	ldr	r2, [r3, #24]
 80072a2:	2380      	movs	r3, #128	; 0x80
 80072a4:	021b      	lsls	r3, r3, #8
 80072a6:	401a      	ands	r2, r3
 80072a8:	2380      	movs	r3, #128	; 0x80
 80072aa:	021b      	lsls	r3, r3, #8
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d137      	bne.n	8007320 <I2C_IsErrorOccurred+0x104>
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	2380      	movs	r3, #128	; 0x80
 80072b4:	01db      	lsls	r3, r3, #7
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d032      	beq.n	8007320 <I2C_IsErrorOccurred+0x104>
              (tmp1 != I2C_CR2_STOP) && \
 80072ba:	183b      	adds	r3, r7, r0
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	2b20      	cmp	r3, #32
 80072c0:	d02e      	beq.n	8007320 <I2C_IsErrorOccurred+0x104>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	685a      	ldr	r2, [r3, #4]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2180      	movs	r1, #128	; 0x80
 80072ce:	01c9      	lsls	r1, r1, #7
 80072d0:	430a      	orrs	r2, r1
 80072d2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80072d4:	f7fe f800 	bl	80052d8 <HAL_GetTick>
 80072d8:	0003      	movs	r3, r0
 80072da:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072dc:	e020      	b.n	8007320 <I2C_IsErrorOccurred+0x104>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80072de:	f7fd fffb 	bl	80052d8 <HAL_GetTick>
 80072e2:	0002      	movs	r2, r0
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	2027      	movs	r0, #39	; 0x27
 80072ea:	183a      	adds	r2, r7, r0
 80072ec:	1839      	adds	r1, r7, r0
 80072ee:	7809      	ldrb	r1, [r1, #0]
 80072f0:	7011      	strb	r1, [r2, #0]
 80072f2:	2b19      	cmp	r3, #25
 80072f4:	d914      	bls.n	8007320 <I2C_IsErrorOccurred+0x104>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072fa:	2220      	movs	r2, #32
 80072fc:	431a      	orrs	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2241      	movs	r2, #65	; 0x41
 8007306:	2120      	movs	r1, #32
 8007308:	5499      	strb	r1, [r3, r2]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2242      	movs	r2, #66	; 0x42
 800730e:	2100      	movs	r1, #0
 8007310:	5499      	strb	r1, [r3, r2]

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2240      	movs	r2, #64	; 0x40
 8007316:	2100      	movs	r1, #0
 8007318:	5499      	strb	r1, [r3, r2]

              status = HAL_ERROR;
 800731a:	183b      	adds	r3, r7, r0
 800731c:	2201      	movs	r2, #1
 800731e:	701a      	strb	r2, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	2220      	movs	r2, #32
 8007328:	4013      	ands	r3, r2
 800732a:	2b20      	cmp	r3, #32
 800732c:	d1d7      	bne.n	80072de <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	2220      	movs	r2, #32
 8007336:	4013      	ands	r3, r2
 8007338:	2b20      	cmp	r3, #32
 800733a:	d004      	beq.n	8007346 <I2C_IsErrorOccurred+0x12a>
 800733c:	2327      	movs	r3, #39	; 0x27
 800733e:	18fb      	adds	r3, r7, r3
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d086      	beq.n	8007254 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007346:	2327      	movs	r3, #39	; 0x27
 8007348:	18fb      	adds	r3, r7, r3
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d103      	bne.n	8007358 <I2C_IsErrorOccurred+0x13c>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2220      	movs	r2, #32
 8007356:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	2204      	movs	r2, #4
 800735c:	4313      	orrs	r3, r2
 800735e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007360:	2327      	movs	r3, #39	; 0x27
 8007362:	18fb      	adds	r3, r7, r3
 8007364:	2201      	movs	r2, #1
 8007366:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	2380      	movs	r3, #128	; 0x80
 8007374:	005b      	lsls	r3, r3, #1
 8007376:	4013      	ands	r3, r2
 8007378:	d00c      	beq.n	8007394 <I2C_IsErrorOccurred+0x178>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800737a:	6a3b      	ldr	r3, [r7, #32]
 800737c:	2201      	movs	r2, #1
 800737e:	4313      	orrs	r3, r2
 8007380:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2280      	movs	r2, #128	; 0x80
 8007388:	0052      	lsls	r2, r2, #1
 800738a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800738c:	2327      	movs	r3, #39	; 0x27
 800738e:	18fb      	adds	r3, r7, r3
 8007390:	2201      	movs	r2, #1
 8007392:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007394:	69ba      	ldr	r2, [r7, #24]
 8007396:	2380      	movs	r3, #128	; 0x80
 8007398:	00db      	lsls	r3, r3, #3
 800739a:	4013      	ands	r3, r2
 800739c:	d00c      	beq.n	80073b8 <I2C_IsErrorOccurred+0x19c>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	2208      	movs	r2, #8
 80073a2:	4313      	orrs	r3, r2
 80073a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2280      	movs	r2, #128	; 0x80
 80073ac:	00d2      	lsls	r2, r2, #3
 80073ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80073b0:	2327      	movs	r3, #39	; 0x27
 80073b2:	18fb      	adds	r3, r7, r3
 80073b4:	2201      	movs	r2, #1
 80073b6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80073b8:	69ba      	ldr	r2, [r7, #24]
 80073ba:	2380      	movs	r3, #128	; 0x80
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4013      	ands	r3, r2
 80073c0:	d00c      	beq.n	80073dc <I2C_IsErrorOccurred+0x1c0>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80073c2:	6a3b      	ldr	r3, [r7, #32]
 80073c4:	2202      	movs	r2, #2
 80073c6:	4313      	orrs	r3, r2
 80073c8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2280      	movs	r2, #128	; 0x80
 80073d0:	0092      	lsls	r2, r2, #2
 80073d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80073d4:	2327      	movs	r3, #39	; 0x27
 80073d6:	18fb      	adds	r3, r7, r3
 80073d8:	2201      	movs	r2, #1
 80073da:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80073dc:	2327      	movs	r3, #39	; 0x27
 80073de:	18fb      	adds	r3, r7, r3
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d01d      	beq.n	8007422 <I2C_IsErrorOccurred+0x206>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	0018      	movs	r0, r3
 80073ea:	f7ff fe1c 	bl	8007026 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	685a      	ldr	r2, [r3, #4]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	490d      	ldr	r1, [pc, #52]	; (8007430 <I2C_IsErrorOccurred+0x214>)
 80073fa:	400a      	ands	r2, r1
 80073fc:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007402:	6a3b      	ldr	r3, [r7, #32]
 8007404:	431a      	orrs	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2241      	movs	r2, #65	; 0x41
 800740e:	2120      	movs	r1, #32
 8007410:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2242      	movs	r2, #66	; 0x42
 8007416:	2100      	movs	r1, #0
 8007418:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2240      	movs	r2, #64	; 0x40
 800741e:	2100      	movs	r1, #0
 8007420:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8007422:	2327      	movs	r3, #39	; 0x27
 8007424:	18fb      	adds	r3, r7, r3
 8007426:	781b      	ldrb	r3, [r3, #0]
}
 8007428:	0018      	movs	r0, r3
 800742a:	46bd      	mov	sp, r7
 800742c:	b00b      	add	sp, #44	; 0x2c
 800742e:	bd90      	pop	{r4, r7, pc}
 8007430:	fe00e800 	.word	0xfe00e800

08007434 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007434:	b590      	push	{r4, r7, lr}
 8007436:	b087      	sub	sp, #28
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	0008      	movs	r0, r1
 800743e:	0011      	movs	r1, r2
 8007440:	607b      	str	r3, [r7, #4]
 8007442:	240a      	movs	r4, #10
 8007444:	193b      	adds	r3, r7, r4
 8007446:	1c02      	adds	r2, r0, #0
 8007448:	801a      	strh	r2, [r3, #0]
 800744a:	2009      	movs	r0, #9
 800744c:	183b      	adds	r3, r7, r0
 800744e:	1c0a      	adds	r2, r1, #0
 8007450:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007452:	193b      	adds	r3, r7, r4
 8007454:	881b      	ldrh	r3, [r3, #0]
 8007456:	059b      	lsls	r3, r3, #22
 8007458:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800745a:	183b      	adds	r3, r7, r0
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	0419      	lsls	r1, r3, #16
 8007460:	23ff      	movs	r3, #255	; 0xff
 8007462:	041b      	lsls	r3, r3, #16
 8007464:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007466:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800746c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746e:	4313      	orrs	r3, r2
 8007470:	005b      	lsls	r3, r3, #1
 8007472:	085b      	lsrs	r3, r3, #1
 8007474:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800747e:	0d51      	lsrs	r1, r2, #21
 8007480:	2280      	movs	r2, #128	; 0x80
 8007482:	00d2      	lsls	r2, r2, #3
 8007484:	400a      	ands	r2, r1
 8007486:	4907      	ldr	r1, [pc, #28]	; (80074a4 <I2C_TransferConfig+0x70>)
 8007488:	430a      	orrs	r2, r1
 800748a:	43d2      	mvns	r2, r2
 800748c:	401a      	ands	r2, r3
 800748e:	0011      	movs	r1, r2
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	430a      	orrs	r2, r1
 8007498:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800749a:	46c0      	nop			; (mov r8, r8)
 800749c:	46bd      	mov	sp, r7
 800749e:	b007      	add	sp, #28
 80074a0:	bd90      	pop	{r4, r7, pc}
 80074a2:	46c0      	nop			; (mov r8, r8)
 80074a4:	03ff63ff 	.word	0x03ff63ff

080074a8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	000a      	movs	r2, r1
 80074b2:	1cbb      	adds	r3, r7, #2
 80074b4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80074b6:	2300      	movs	r3, #0
 80074b8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80074ba:	1cbb      	adds	r3, r7, #2
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	2201      	movs	r2, #1
 80074c0:	4013      	ands	r3, r2
 80074c2:	d010      	beq.n	80074e6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2242      	movs	r2, #66	; 0x42
 80074c8:	4313      	orrs	r3, r2
 80074ca:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2241      	movs	r2, #65	; 0x41
 80074d0:	5c9b      	ldrb	r3, [r3, r2]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	001a      	movs	r2, r3
 80074d6:	2328      	movs	r3, #40	; 0x28
 80074d8:	4013      	ands	r3, r2
 80074da:	2b28      	cmp	r3, #40	; 0x28
 80074dc:	d003      	beq.n	80074e6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	22b0      	movs	r2, #176	; 0xb0
 80074e2:	4313      	orrs	r3, r2
 80074e4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80074e6:	1cbb      	adds	r3, r7, #2
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	2202      	movs	r2, #2
 80074ec:	4013      	ands	r3, r2
 80074ee:	d010      	beq.n	8007512 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2244      	movs	r2, #68	; 0x44
 80074f4:	4313      	orrs	r3, r2
 80074f6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2241      	movs	r2, #65	; 0x41
 80074fc:	5c9b      	ldrb	r3, [r3, r2]
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	001a      	movs	r2, r3
 8007502:	2328      	movs	r3, #40	; 0x28
 8007504:	4013      	ands	r3, r2
 8007506:	2b28      	cmp	r3, #40	; 0x28
 8007508:	d003      	beq.n	8007512 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	22b0      	movs	r2, #176	; 0xb0
 800750e:	4313      	orrs	r3, r2
 8007510:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007512:	1cbb      	adds	r3, r7, #2
 8007514:	2200      	movs	r2, #0
 8007516:	5e9b      	ldrsh	r3, [r3, r2]
 8007518:	2b00      	cmp	r3, #0
 800751a:	da03      	bge.n	8007524 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	22b8      	movs	r2, #184	; 0xb8
 8007520:	4313      	orrs	r3, r2
 8007522:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007524:	1cbb      	adds	r3, r7, #2
 8007526:	881b      	ldrh	r3, [r3, #0]
 8007528:	2b10      	cmp	r3, #16
 800752a:	d103      	bne.n	8007534 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2290      	movs	r2, #144	; 0x90
 8007530:	4313      	orrs	r3, r2
 8007532:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007534:	1cbb      	adds	r3, r7, #2
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	2b20      	cmp	r3, #32
 800753a:	d103      	bne.n	8007544 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2220      	movs	r2, #32
 8007540:	4313      	orrs	r3, r2
 8007542:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007544:	1cbb      	adds	r3, r7, #2
 8007546:	881b      	ldrh	r3, [r3, #0]
 8007548:	2b40      	cmp	r3, #64	; 0x40
 800754a:	d103      	bne.n	8007554 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2240      	movs	r2, #64	; 0x40
 8007550:	4313      	orrs	r3, r2
 8007552:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	43d9      	mvns	r1, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	400a      	ands	r2, r1
 8007564:	601a      	str	r2, [r3, #0]
}
 8007566:	46c0      	nop			; (mov r8, r8)
 8007568:	46bd      	mov	sp, r7
 800756a:	b004      	add	sp, #16
 800756c:	bd80      	pop	{r7, pc}
	...

08007570 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2241      	movs	r2, #65	; 0x41
 800757e:	5c9b      	ldrb	r3, [r3, r2]
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b20      	cmp	r3, #32
 8007584:	d138      	bne.n	80075f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2240      	movs	r2, #64	; 0x40
 800758a:	5c9b      	ldrb	r3, [r3, r2]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d101      	bne.n	8007594 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007590:	2302      	movs	r3, #2
 8007592:	e032      	b.n	80075fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2240      	movs	r2, #64	; 0x40
 8007598:	2101      	movs	r1, #1
 800759a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2241      	movs	r2, #65	; 0x41
 80075a0:	2124      	movs	r1, #36	; 0x24
 80075a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2101      	movs	r1, #1
 80075b0:	438a      	bics	r2, r1
 80075b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4911      	ldr	r1, [pc, #68]	; (8007604 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80075c0:	400a      	ands	r2, r1
 80075c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	6819      	ldr	r1, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	430a      	orrs	r2, r1
 80075d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2101      	movs	r1, #1
 80075e0:	430a      	orrs	r2, r1
 80075e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2241      	movs	r2, #65	; 0x41
 80075e8:	2120      	movs	r1, #32
 80075ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2240      	movs	r2, #64	; 0x40
 80075f0:	2100      	movs	r1, #0
 80075f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80075f4:	2300      	movs	r3, #0
 80075f6:	e000      	b.n	80075fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80075f8:	2302      	movs	r3, #2
  }
}
 80075fa:	0018      	movs	r0, r3
 80075fc:	46bd      	mov	sp, r7
 80075fe:	b002      	add	sp, #8
 8007600:	bd80      	pop	{r7, pc}
 8007602:	46c0      	nop			; (mov r8, r8)
 8007604:	ffffefff 	.word	0xffffefff

08007608 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2241      	movs	r2, #65	; 0x41
 8007616:	5c9b      	ldrb	r3, [r3, r2]
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b20      	cmp	r3, #32
 800761c:	d139      	bne.n	8007692 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2240      	movs	r2, #64	; 0x40
 8007622:	5c9b      	ldrb	r3, [r3, r2]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d101      	bne.n	800762c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007628:	2302      	movs	r3, #2
 800762a:	e033      	b.n	8007694 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2240      	movs	r2, #64	; 0x40
 8007630:	2101      	movs	r1, #1
 8007632:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2241      	movs	r2, #65	; 0x41
 8007638:	2124      	movs	r1, #36	; 0x24
 800763a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2101      	movs	r1, #1
 8007648:	438a      	bics	r2, r1
 800764a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	4a11      	ldr	r2, [pc, #68]	; (800769c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007658:	4013      	ands	r3, r2
 800765a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	021b      	lsls	r3, r3, #8
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	4313      	orrs	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2101      	movs	r1, #1
 800767a:	430a      	orrs	r2, r1
 800767c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2241      	movs	r2, #65	; 0x41
 8007682:	2120      	movs	r1, #32
 8007684:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2240      	movs	r2, #64	; 0x40
 800768a:	2100      	movs	r1, #0
 800768c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800768e:	2300      	movs	r3, #0
 8007690:	e000      	b.n	8007694 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007692:	2302      	movs	r3, #2
  }
}
 8007694:	0018      	movs	r0, r3
 8007696:	46bd      	mov	sp, r7
 8007698:	b004      	add	sp, #16
 800769a:	bd80      	pop	{r7, pc}
 800769c:	fffff0ff 	.word	0xfffff0ff

080076a0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b088      	sub	sp, #32
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d101      	bne.n	80076b2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e0e5      	b.n	800787e <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2235      	movs	r2, #53	; 0x35
 80076b6:	5c9b      	ldrb	r3, [r3, r2]
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d107      	bne.n	80076ce <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2234      	movs	r2, #52	; 0x34
 80076c2:	2100      	movs	r1, #0
 80076c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	0018      	movs	r0, r3
 80076ca:	f7fd fa39 	bl	8004b40 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2235      	movs	r2, #53	; 0x35
 80076d2:	2102      	movs	r1, #2
 80076d4:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	69da      	ldr	r2, [r3, #28]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4969      	ldr	r1, [pc, #420]	; (8007888 <HAL_I2S_Init+0x1e8>)
 80076e2:	400a      	ands	r2, r1
 80076e4:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2202      	movs	r2, #2
 80076ec:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d100      	bne.n	80076f8 <HAL_I2S_Init+0x58>
 80076f6:	e076      	b.n	80077e6 <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d102      	bne.n	8007706 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8007700:	2310      	movs	r3, #16
 8007702:	617b      	str	r3, [r7, #20]
 8007704:	e001      	b.n	800770a <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8007706:	2320      	movs	r3, #32
 8007708:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	2b20      	cmp	r3, #32
 8007710:	d802      	bhi.n	8007718 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	005b      	lsls	r3, r3, #1
 8007716:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8007718:	2380      	movs	r3, #128	; 0x80
 800771a:	011b      	lsls	r3, r3, #4
 800771c:	0018      	movs	r0, r3
 800771e:	f001 f95b 	bl	80089d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007722:	0003      	movs	r3, r0
 8007724:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	691a      	ldr	r2, [r3, #16]
 800772a:	2380      	movs	r3, #128	; 0x80
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	429a      	cmp	r2, r3
 8007730:	d131      	bne.n	8007796 <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d016      	beq.n	8007768 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	0019      	movs	r1, r3
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f7f8 fcdf 	bl	8000104 <__udivsi3>
 8007746:	0003      	movs	r3, r0
 8007748:	001a      	movs	r2, r3
 800774a:	0013      	movs	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	189b      	adds	r3, r3, r2
 8007750:	005b      	lsls	r3, r3, #1
 8007752:	001a      	movs	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	695b      	ldr	r3, [r3, #20]
 8007758:	0019      	movs	r1, r3
 800775a:	0010      	movs	r0, r2
 800775c:	f7f8 fcd2 	bl	8000104 <__udivsi3>
 8007760:	0003      	movs	r3, r0
 8007762:	3305      	adds	r3, #5
 8007764:	613b      	str	r3, [r7, #16]
 8007766:	e02a      	b.n	80077be <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	00db      	lsls	r3, r3, #3
 800776c:	0019      	movs	r1, r3
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f7f8 fcc8 	bl	8000104 <__udivsi3>
 8007774:	0003      	movs	r3, r0
 8007776:	001a      	movs	r2, r3
 8007778:	0013      	movs	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	189b      	adds	r3, r3, r2
 800777e:	005b      	lsls	r3, r3, #1
 8007780:	001a      	movs	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	695b      	ldr	r3, [r3, #20]
 8007786:	0019      	movs	r1, r3
 8007788:	0010      	movs	r0, r2
 800778a:	f7f8 fcbb 	bl	8000104 <__udivsi3>
 800778e:	0003      	movs	r3, r0
 8007790:	3305      	adds	r3, #5
 8007792:	613b      	str	r3, [r7, #16]
 8007794:	e013      	b.n	80077be <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007796:	6979      	ldr	r1, [r7, #20]
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f7f8 fcb3 	bl	8000104 <__udivsi3>
 800779e:	0003      	movs	r3, r0
 80077a0:	001a      	movs	r2, r3
 80077a2:	0013      	movs	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	189b      	adds	r3, r3, r2
 80077a8:	005b      	lsls	r3, r3, #1
 80077aa:	001a      	movs	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	695b      	ldr	r3, [r3, #20]
 80077b0:	0019      	movs	r1, r3
 80077b2:	0010      	movs	r0, r2
 80077b4:	f7f8 fca6 	bl	8000104 <__udivsi3>
 80077b8:	0003      	movs	r3, r0
 80077ba:	3305      	adds	r3, #5
 80077bc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	210a      	movs	r1, #10
 80077c2:	0018      	movs	r0, r3
 80077c4:	f7f8 fc9e 	bl	8000104 <__udivsi3>
 80077c8:	0003      	movs	r3, r0
 80077ca:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	2201      	movs	r2, #1
 80077d0:	4013      	ands	r3, r2
 80077d2:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	085b      	lsrs	r3, r3, #1
 80077dc:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	021b      	lsls	r3, r3, #8
 80077e2:	61bb      	str	r3, [r7, #24]
 80077e4:	e003      	b.n	80077ee <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80077e6:	2302      	movs	r3, #2
 80077e8:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80077ea:	2300      	movs	r3, #0
 80077ec:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d902      	bls.n	80077fa <HAL_I2S_Init+0x15a>
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	2bff      	cmp	r3, #255	; 0xff
 80077f8:	d907      	bls.n	800780a <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fe:	2210      	movs	r2, #16
 8007800:	431a      	orrs	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e039      	b.n	800787e <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	691a      	ldr	r2, [r3, #16]
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	431a      	orrs	r2, r3
 8007812:	0011      	movs	r1, r2
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	69fa      	ldr	r2, [r7, #28]
 800781a:	430a      	orrs	r2, r1
 800781c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	69db      	ldr	r3, [r3, #28]
 8007824:	4a18      	ldr	r2, [pc, #96]	; (8007888 <HAL_I2S_Init+0x1e8>)
 8007826:	401a      	ands	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6859      	ldr	r1, [r3, #4]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	4319      	orrs	r1, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	4319      	orrs	r1, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	430b      	orrs	r3, r1
 800783e:	431a      	orrs	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2180      	movs	r1, #128	; 0x80
 8007846:	0109      	lsls	r1, r1, #4
 8007848:	430a      	orrs	r2, r1
 800784a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	2b30      	cmp	r3, #48	; 0x30
 8007852:	d003      	beq.n	800785c <HAL_I2S_Init+0x1bc>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	2bb0      	cmp	r3, #176	; 0xb0
 800785a:	d108      	bne.n	800786e <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	69da      	ldr	r2, [r3, #28]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2180      	movs	r1, #128	; 0x80
 8007868:	0149      	lsls	r1, r1, #5
 800786a:	430a      	orrs	r2, r1
 800786c:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2235      	movs	r2, #53	; 0x35
 8007878:	2101      	movs	r1, #1
 800787a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	0018      	movs	r0, r3
 8007880:	46bd      	mov	sp, r7
 8007882:	b008      	add	sp, #32
 8007884:	bd80      	pop	{r7, pc}
 8007886:	46c0      	nop			; (mov r8, r8)
 8007888:	fffff040 	.word	0xfffff040

0800788c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	1dbb      	adds	r3, r7, #6
 8007898:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d003      	beq.n	80078a8 <HAL_I2S_Transmit_DMA+0x1c>
 80078a0:	1dbb      	adds	r3, r7, #6
 80078a2:	881b      	ldrh	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d101      	bne.n	80078ac <HAL_I2S_Transmit_DMA+0x20>
  {
    return  HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e091      	b.n	80079d0 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2234      	movs	r2, #52	; 0x34
 80078b0:	5c9b      	ldrb	r3, [r3, r2]
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d101      	bne.n	80078bc <HAL_I2S_Transmit_DMA+0x30>
 80078b8:	2302      	movs	r3, #2
 80078ba:	e089      	b.n	80079d0 <HAL_I2S_Transmit_DMA+0x144>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2234      	movs	r2, #52	; 0x34
 80078c0:	2101      	movs	r1, #1
 80078c2:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2235      	movs	r2, #53	; 0x35
 80078c8:	5c9b      	ldrb	r3, [r3, r2]
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d005      	beq.n	80078dc <HAL_I2S_Transmit_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2234      	movs	r2, #52	; 0x34
 80078d4:	2100      	movs	r1, #0
 80078d6:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 80078d8:	2302      	movs	r3, #2
 80078da:	e079      	b.n	80079d0 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2235      	movs	r2, #53	; 0x35
 80078e0:	2103      	movs	r1, #3
 80078e2:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	68ba      	ldr	r2, [r7, #8]
 80078ee:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	69db      	ldr	r3, [r3, #28]
 80078f6:	2207      	movs	r2, #7
 80078f8:	4013      	ands	r3, r2
 80078fa:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	2b03      	cmp	r3, #3
 8007900:	d002      	beq.n	8007908 <HAL_I2S_Transmit_DMA+0x7c>
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	2b05      	cmp	r3, #5
 8007906:	d10c      	bne.n	8007922 <HAL_I2S_Transmit_DMA+0x96>
  {
    hi2s->TxXferSize = (Size << 1U);
 8007908:	1dbb      	adds	r3, r7, #6
 800790a:	881b      	ldrh	r3, [r3, #0]
 800790c:	18db      	adds	r3, r3, r3
 800790e:	b29a      	uxth	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8007914:	1dbb      	adds	r3, r7, #6
 8007916:	881b      	ldrh	r3, [r3, #0]
 8007918:	18db      	adds	r3, r3, r3
 800791a:	b29a      	uxth	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	845a      	strh	r2, [r3, #34]	; 0x22
 8007920:	e007      	b.n	8007932 <HAL_I2S_Transmit_DMA+0xa6>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	1dba      	adds	r2, r7, #6
 8007926:	8812      	ldrh	r2, [r2, #0]
 8007928:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	1dba      	adds	r2, r7, #6
 800792e:	8812      	ldrh	r2, [r2, #0]
 8007930:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007936:	4a28      	ldr	r2, [pc, #160]	; (80079d8 <HAL_I2S_Transmit_DMA+0x14c>)
 8007938:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793e:	4a27      	ldr	r2, [pc, #156]	; (80079dc <HAL_I2S_Transmit_DMA+0x150>)
 8007940:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007946:	4a26      	ldr	r2, [pc, #152]	; (80079e0 <HAL_I2S_Transmit_DMA+0x154>)
 8007948:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007952:	0019      	movs	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800795a:	001a      	movs	r2, r3
                                 hi2s->TxXferSize))
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	8c1b      	ldrh	r3, [r3, #32]
 8007960:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007962:	f7fe f8c5 	bl	8005af0 <HAL_DMA_Start_IT>
 8007966:	1e03      	subs	r3, r0, #0
 8007968:	d00f      	beq.n	800798a <HAL_I2S_Transmit_DMA+0xfe>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796e:	2208      	movs	r2, #8
 8007970:	431a      	orrs	r2, r3
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2235      	movs	r2, #53	; 0x35
 800797a:	2101      	movs	r1, #1
 800797c:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2234      	movs	r2, #52	; 0x34
 8007982:	2100      	movs	r1, #0
 8007984:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e022      	b.n	80079d0 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	69da      	ldr	r2, [r3, #28]
 8007990:	2380      	movs	r3, #128	; 0x80
 8007992:	00db      	lsls	r3, r3, #3
 8007994:	4013      	ands	r3, r2
 8007996:	d108      	bne.n	80079aa <HAL_I2S_Transmit_DMA+0x11e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	69da      	ldr	r2, [r3, #28]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2180      	movs	r1, #128	; 0x80
 80079a4:	00c9      	lsls	r1, r1, #3
 80079a6:	430a      	orrs	r2, r1
 80079a8:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	2202      	movs	r2, #2
 80079b2:	4013      	ands	r3, r2
 80079b4:	d107      	bne.n	80079c6 <HAL_I2S_Transmit_DMA+0x13a>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	685a      	ldr	r2, [r3, #4]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2102      	movs	r1, #2
 80079c2:	430a      	orrs	r2, r1
 80079c4:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2234      	movs	r2, #52	; 0x34
 80079ca:	2100      	movs	r1, #0
 80079cc:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 80079ce:	2300      	movs	r3, #0
}
 80079d0:	0018      	movs	r0, r3
 80079d2:	46bd      	mov	sp, r7
 80079d4:	b006      	add	sp, #24
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	08007b1f 	.word	0x08007b1f
 80079dc:	08007adb 	.word	0x08007adb
 80079e0:	08007b3d 	.word	0x08007b3d

080079e4 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	099b      	lsrs	r3, r3, #6
 8007a00:	001a      	movs	r2, r3
 8007a02:	2301      	movs	r3, #1
 8007a04:	4013      	ands	r3, r2
 8007a06:	d10e      	bne.n	8007a26 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8007a0e:	d00a      	beq.n	8007a26 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	099b      	lsrs	r3, r3, #6
 8007a14:	001a      	movs	r2, r3
 8007a16:	2301      	movs	r3, #1
 8007a18:	4013      	ands	r3, r2
 8007a1a:	d004      	beq.n	8007a26 <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	0018      	movs	r0, r3
 8007a20:	f000 f8e2 	bl	8007be8 <I2S_Receive_IT>
    return;
 8007a24:	e046      	b.n	8007ab4 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	085b      	lsrs	r3, r3, #1
 8007a2a:	001a      	movs	r2, r3
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	4013      	ands	r3, r2
 8007a30:	d00a      	beq.n	8007a48 <HAL_I2S_IRQHandler+0x64>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	09db      	lsrs	r3, r3, #7
 8007a36:	001a      	movs	r2, r3
 8007a38:	2301      	movs	r3, #1
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	d004      	beq.n	8007a48 <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	0018      	movs	r0, r3
 8007a42:	f000 f8a2 	bl	8007b8a <I2S_Transmit_IT>
    return;
 8007a46:	e035      	b.n	8007ab4 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	095b      	lsrs	r3, r3, #5
 8007a4c:	001a      	movs	r2, r3
 8007a4e:	2301      	movs	r3, #1
 8007a50:	4013      	ands	r3, r2
 8007a52:	d02f      	beq.n	8007ab4 <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	099b      	lsrs	r3, r3, #6
 8007a58:	001a      	movs	r2, r3
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	d00d      	beq.n	8007a7c <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	685a      	ldr	r2, [r3, #4]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2160      	movs	r1, #96	; 0x60
 8007a6c:	438a      	bics	r2, r1
 8007a6e:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a74:	2202      	movs	r2, #2
 8007a76:	431a      	orrs	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	08db      	lsrs	r3, r3, #3
 8007a80:	001a      	movs	r2, r3
 8007a82:	2301      	movs	r3, #1
 8007a84:	4013      	ands	r3, r2
 8007a86:	d00d      	beq.n	8007aa4 <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	685a      	ldr	r2, [r3, #4]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	21a0      	movs	r1, #160	; 0xa0
 8007a94:	438a      	bics	r2, r1
 8007a96:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a9c:	2204      	movs	r2, #4
 8007a9e:	431a      	orrs	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2235      	movs	r2, #53	; 0x35
 8007aa8:	2101      	movs	r1, #1
 8007aaa:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	0018      	movs	r0, r3
 8007ab0:	f000 f80b 	bl	8007aca <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	b004      	add	sp, #16
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b082      	sub	sp, #8
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8007ac2:	46c0      	nop			; (mov r8, r8)
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	b002      	add	sp, #8
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b082      	sub	sp, #8
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8007ad2:	46c0      	nop			; (mov r8, r8)
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	b002      	add	sp, #8
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b084      	sub	sp, #16
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae6:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	69db      	ldr	r3, [r3, #28]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10e      	bne.n	8007b0e <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685a      	ldr	r2, [r3, #4]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2102      	movs	r1, #2
 8007afc:	438a      	bics	r2, r1
 8007afe:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	845a      	strh	r2, [r3, #34]	; 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2235      	movs	r2, #53	; 0x35
 8007b0a:	2101      	movs	r1, #1
 8007b0c:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	0018      	movs	r0, r3
 8007b12:	f7f9 fb4b 	bl	80011ac <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007b16:	46c0      	nop			; (mov r8, r8)
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	b004      	add	sp, #16
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b084      	sub	sp, #16
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	0018      	movs	r0, r3
 8007b30:	f7f9 fb24 	bl	800117c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007b34:	46c0      	nop			; (mov r8, r8)
 8007b36:	46bd      	mov	sp, r7
 8007b38:	b004      	add	sp, #16
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b48:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	685a      	ldr	r2, [r3, #4]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2103      	movs	r1, #3
 8007b56:	438a      	bics	r2, r1
 8007b58:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	845a      	strh	r2, [r3, #34]	; 0x22
  hi2s->RxXferCount = 0U;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	855a      	strh	r2, [r3, #42]	; 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2235      	movs	r2, #53	; 0x35
 8007b6a:	2101      	movs	r1, #1
 8007b6c:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b72:	2208      	movs	r2, #8
 8007b74:	431a      	orrs	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	639a      	str	r2, [r3, #56]	; 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	0018      	movs	r0, r3
 8007b7e:	f7ff ffa4 	bl	8007aca <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007b82:	46c0      	nop			; (mov r8, r8)
 8007b84:	46bd      	mov	sp, r7
 8007b86:	b004      	add	sp, #16
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b082      	sub	sp, #8
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	69db      	ldr	r3, [r3, #28]
 8007b96:	881a      	ldrh	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	69db      	ldr	r3, [r3, #28]
 8007ba2:	1c9a      	adds	r2, r3, #2
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10f      	bne.n	8007be0 <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	685a      	ldr	r2, [r3, #4]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	21a0      	movs	r1, #160	; 0xa0
 8007bcc:	438a      	bics	r2, r1
 8007bce:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2235      	movs	r2, #53	; 0x35
 8007bd4:	2101      	movs	r1, #1
 8007bd6:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	0018      	movs	r0, r3
 8007bdc:	f7f9 fae6 	bl	80011ac <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007be0:	46c0      	nop			; (mov r8, r8)
 8007be2:	46bd      	mov	sp, r7
 8007be4:	b002      	add	sp, #8
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68da      	ldr	r2, [r3, #12]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfa:	b292      	uxth	r2, r2
 8007bfc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c02:	1c9a      	adds	r2, r3, #2
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d10f      	bne.n	8007c40 <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2160      	movs	r1, #96	; 0x60
 8007c2c:	438a      	bics	r2, r1
 8007c2e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2235      	movs	r2, #53	; 0x35
 8007c34:	2101      	movs	r1, #1
 8007c36:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	0018      	movs	r0, r3
 8007c3c:	f7ff ff3d 	bl	8007aba <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007c40:	46c0      	nop			; (mov r8, r8)
 8007c42:	46bd      	mov	sp, r7
 8007c44:	b002      	add	sp, #8
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007c50:	4b19      	ldr	r3, [pc, #100]	; (8007cb8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a19      	ldr	r2, [pc, #100]	; (8007cbc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8007c56:	4013      	ands	r3, r2
 8007c58:	0019      	movs	r1, r3
 8007c5a:	4b17      	ldr	r3, [pc, #92]	; (8007cb8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	430a      	orrs	r2, r1
 8007c60:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	2380      	movs	r3, #128	; 0x80
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d11f      	bne.n	8007cac <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8007c6c:	4b14      	ldr	r3, [pc, #80]	; (8007cc0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	0013      	movs	r3, r2
 8007c72:	005b      	lsls	r3, r3, #1
 8007c74:	189b      	adds	r3, r3, r2
 8007c76:	005b      	lsls	r3, r3, #1
 8007c78:	4912      	ldr	r1, [pc, #72]	; (8007cc4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8007c7a:	0018      	movs	r0, r3
 8007c7c:	f7f8 fa42 	bl	8000104 <__udivsi3>
 8007c80:	0003      	movs	r3, r0
 8007c82:	3301      	adds	r3, #1
 8007c84:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007c86:	e008      	b.n	8007c9a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d003      	beq.n	8007c96 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	3b01      	subs	r3, #1
 8007c92:	60fb      	str	r3, [r7, #12]
 8007c94:	e001      	b.n	8007c9a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007c96:	2303      	movs	r3, #3
 8007c98:	e009      	b.n	8007cae <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007c9a:	4b07      	ldr	r3, [pc, #28]	; (8007cb8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007c9c:	695a      	ldr	r2, [r3, #20]
 8007c9e:	2380      	movs	r3, #128	; 0x80
 8007ca0:	00db      	lsls	r3, r3, #3
 8007ca2:	401a      	ands	r2, r3
 8007ca4:	2380      	movs	r3, #128	; 0x80
 8007ca6:	00db      	lsls	r3, r3, #3
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d0ed      	beq.n	8007c88 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	0018      	movs	r0, r3
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	b004      	add	sp, #16
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	46c0      	nop			; (mov r8, r8)
 8007cb8:	40007000 	.word	0x40007000
 8007cbc:	fffff9ff 	.word	0xfffff9ff
 8007cc0:	20000064 	.word	0x20000064
 8007cc4:	000f4240 	.word	0x000f4240

08007cc8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007ccc:	4b03      	ldr	r3, [pc, #12]	; (8007cdc <LL_RCC_GetAPB1Prescaler+0x14>)
 8007cce:	689a      	ldr	r2, [r3, #8]
 8007cd0:	23e0      	movs	r3, #224	; 0xe0
 8007cd2:	01db      	lsls	r3, r3, #7
 8007cd4:	4013      	ands	r3, r2
}
 8007cd6:	0018      	movs	r0, r3
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	40021000 	.word	0x40021000

08007ce0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b088      	sub	sp, #32
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d101      	bne.n	8007cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e2fe      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	d100      	bne.n	8007cfe <HAL_RCC_OscConfig+0x1e>
 8007cfc:	e07c      	b.n	8007df8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cfe:	4bc3      	ldr	r3, [pc, #780]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	2238      	movs	r2, #56	; 0x38
 8007d04:	4013      	ands	r3, r2
 8007d06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007d08:	4bc0      	ldr	r3, [pc, #768]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	2203      	movs	r2, #3
 8007d0e:	4013      	ands	r3, r2
 8007d10:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	2b10      	cmp	r3, #16
 8007d16:	d102      	bne.n	8007d1e <HAL_RCC_OscConfig+0x3e>
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	2b03      	cmp	r3, #3
 8007d1c:	d002      	beq.n	8007d24 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	2b08      	cmp	r3, #8
 8007d22:	d10b      	bne.n	8007d3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d24:	4bb9      	ldr	r3, [pc, #740]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	2380      	movs	r3, #128	; 0x80
 8007d2a:	029b      	lsls	r3, r3, #10
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	d062      	beq.n	8007df6 <HAL_RCC_OscConfig+0x116>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d15e      	bne.n	8007df6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e2d9      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685a      	ldr	r2, [r3, #4]
 8007d40:	2380      	movs	r3, #128	; 0x80
 8007d42:	025b      	lsls	r3, r3, #9
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d107      	bne.n	8007d58 <HAL_RCC_OscConfig+0x78>
 8007d48:	4bb0      	ldr	r3, [pc, #704]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	4baf      	ldr	r3, [pc, #700]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007d4e:	2180      	movs	r1, #128	; 0x80
 8007d50:	0249      	lsls	r1, r1, #9
 8007d52:	430a      	orrs	r2, r1
 8007d54:	601a      	str	r2, [r3, #0]
 8007d56:	e020      	b.n	8007d9a <HAL_RCC_OscConfig+0xba>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	23a0      	movs	r3, #160	; 0xa0
 8007d5e:	02db      	lsls	r3, r3, #11
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d10e      	bne.n	8007d82 <HAL_RCC_OscConfig+0xa2>
 8007d64:	4ba9      	ldr	r3, [pc, #676]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	4ba8      	ldr	r3, [pc, #672]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007d6a:	2180      	movs	r1, #128	; 0x80
 8007d6c:	02c9      	lsls	r1, r1, #11
 8007d6e:	430a      	orrs	r2, r1
 8007d70:	601a      	str	r2, [r3, #0]
 8007d72:	4ba6      	ldr	r3, [pc, #664]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	4ba5      	ldr	r3, [pc, #660]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007d78:	2180      	movs	r1, #128	; 0x80
 8007d7a:	0249      	lsls	r1, r1, #9
 8007d7c:	430a      	orrs	r2, r1
 8007d7e:	601a      	str	r2, [r3, #0]
 8007d80:	e00b      	b.n	8007d9a <HAL_RCC_OscConfig+0xba>
 8007d82:	4ba2      	ldr	r3, [pc, #648]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	4ba1      	ldr	r3, [pc, #644]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007d88:	49a1      	ldr	r1, [pc, #644]	; (8008010 <HAL_RCC_OscConfig+0x330>)
 8007d8a:	400a      	ands	r2, r1
 8007d8c:	601a      	str	r2, [r3, #0]
 8007d8e:	4b9f      	ldr	r3, [pc, #636]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	4b9e      	ldr	r3, [pc, #632]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007d94:	499f      	ldr	r1, [pc, #636]	; (8008014 <HAL_RCC_OscConfig+0x334>)
 8007d96:	400a      	ands	r2, r1
 8007d98:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d014      	beq.n	8007dcc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007da2:	f7fd fa99 	bl	80052d8 <HAL_GetTick>
 8007da6:	0003      	movs	r3, r0
 8007da8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007daa:	e008      	b.n	8007dbe <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007dac:	f7fd fa94 	bl	80052d8 <HAL_GetTick>
 8007db0:	0002      	movs	r2, r0
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	2b64      	cmp	r3, #100	; 0x64
 8007db8:	d901      	bls.n	8007dbe <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e298      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007dbe:	4b93      	ldr	r3, [pc, #588]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	2380      	movs	r3, #128	; 0x80
 8007dc4:	029b      	lsls	r3, r3, #10
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	d0f0      	beq.n	8007dac <HAL_RCC_OscConfig+0xcc>
 8007dca:	e015      	b.n	8007df8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dcc:	f7fd fa84 	bl	80052d8 <HAL_GetTick>
 8007dd0:	0003      	movs	r3, r0
 8007dd2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007dd4:	e008      	b.n	8007de8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007dd6:	f7fd fa7f 	bl	80052d8 <HAL_GetTick>
 8007dda:	0002      	movs	r2, r0
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	2b64      	cmp	r3, #100	; 0x64
 8007de2:	d901      	bls.n	8007de8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e283      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007de8:	4b88      	ldr	r3, [pc, #544]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	2380      	movs	r3, #128	; 0x80
 8007dee:	029b      	lsls	r3, r3, #10
 8007df0:	4013      	ands	r3, r2
 8007df2:	d1f0      	bne.n	8007dd6 <HAL_RCC_OscConfig+0xf6>
 8007df4:	e000      	b.n	8007df8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007df6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2202      	movs	r2, #2
 8007dfe:	4013      	ands	r3, r2
 8007e00:	d100      	bne.n	8007e04 <HAL_RCC_OscConfig+0x124>
 8007e02:	e099      	b.n	8007f38 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e04:	4b81      	ldr	r3, [pc, #516]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	2238      	movs	r2, #56	; 0x38
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e0e:	4b7f      	ldr	r3, [pc, #508]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	2203      	movs	r2, #3
 8007e14:	4013      	ands	r3, r2
 8007e16:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	2b10      	cmp	r3, #16
 8007e1c:	d102      	bne.n	8007e24 <HAL_RCC_OscConfig+0x144>
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d002      	beq.n	8007e2a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d135      	bne.n	8007e96 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e2a:	4b78      	ldr	r3, [pc, #480]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	2380      	movs	r3, #128	; 0x80
 8007e30:	00db      	lsls	r3, r3, #3
 8007e32:	4013      	ands	r3, r2
 8007e34:	d005      	beq.n	8007e42 <HAL_RCC_OscConfig+0x162>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d101      	bne.n	8007e42 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e256      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e42:	4b72      	ldr	r3, [pc, #456]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	4a74      	ldr	r2, [pc, #464]	; (8008018 <HAL_RCC_OscConfig+0x338>)
 8007e48:	4013      	ands	r3, r2
 8007e4a:	0019      	movs	r1, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	695b      	ldr	r3, [r3, #20]
 8007e50:	021a      	lsls	r2, r3, #8
 8007e52:	4b6e      	ldr	r3, [pc, #440]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007e54:	430a      	orrs	r2, r1
 8007e56:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d112      	bne.n	8007e84 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007e5e:	4b6b      	ldr	r3, [pc, #428]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a6e      	ldr	r2, [pc, #440]	; (800801c <HAL_RCC_OscConfig+0x33c>)
 8007e64:	4013      	ands	r3, r2
 8007e66:	0019      	movs	r1, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	691a      	ldr	r2, [r3, #16]
 8007e6c:	4b67      	ldr	r3, [pc, #412]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8007e72:	4b66      	ldr	r3, [pc, #408]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	0adb      	lsrs	r3, r3, #11
 8007e78:	2207      	movs	r2, #7
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	4a68      	ldr	r2, [pc, #416]	; (8008020 <HAL_RCC_OscConfig+0x340>)
 8007e7e:	40da      	lsrs	r2, r3
 8007e80:	4b68      	ldr	r3, [pc, #416]	; (8008024 <HAL_RCC_OscConfig+0x344>)
 8007e82:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007e84:	4b68      	ldr	r3, [pc, #416]	; (8008028 <HAL_RCC_OscConfig+0x348>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	0018      	movs	r0, r3
 8007e8a:	f7fd f9c9 	bl	8005220 <HAL_InitTick>
 8007e8e:	1e03      	subs	r3, r0, #0
 8007e90:	d051      	beq.n	8007f36 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e22c      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d030      	beq.n	8007f00 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007e9e:	4b5b      	ldr	r3, [pc, #364]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a5e      	ldr	r2, [pc, #376]	; (800801c <HAL_RCC_OscConfig+0x33c>)
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	0019      	movs	r1, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	691a      	ldr	r2, [r3, #16]
 8007eac:	4b57      	ldr	r3, [pc, #348]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007eae:	430a      	orrs	r2, r1
 8007eb0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8007eb2:	4b56      	ldr	r3, [pc, #344]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	4b55      	ldr	r3, [pc, #340]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007eb8:	2180      	movs	r1, #128	; 0x80
 8007eba:	0049      	lsls	r1, r1, #1
 8007ebc:	430a      	orrs	r2, r1
 8007ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ec0:	f7fd fa0a 	bl	80052d8 <HAL_GetTick>
 8007ec4:	0003      	movs	r3, r0
 8007ec6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ec8:	e008      	b.n	8007edc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007eca:	f7fd fa05 	bl	80052d8 <HAL_GetTick>
 8007ece:	0002      	movs	r2, r0
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d901      	bls.n	8007edc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	e209      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007edc:	4b4b      	ldr	r3, [pc, #300]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	2380      	movs	r3, #128	; 0x80
 8007ee2:	00db      	lsls	r3, r3, #3
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	d0f0      	beq.n	8007eca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ee8:	4b48      	ldr	r3, [pc, #288]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	4a4a      	ldr	r2, [pc, #296]	; (8008018 <HAL_RCC_OscConfig+0x338>)
 8007eee:	4013      	ands	r3, r2
 8007ef0:	0019      	movs	r1, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	695b      	ldr	r3, [r3, #20]
 8007ef6:	021a      	lsls	r2, r3, #8
 8007ef8:	4b44      	ldr	r3, [pc, #272]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007efa:	430a      	orrs	r2, r1
 8007efc:	605a      	str	r2, [r3, #4]
 8007efe:	e01b      	b.n	8007f38 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8007f00:	4b42      	ldr	r3, [pc, #264]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	4b41      	ldr	r3, [pc, #260]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007f06:	4949      	ldr	r1, [pc, #292]	; (800802c <HAL_RCC_OscConfig+0x34c>)
 8007f08:	400a      	ands	r2, r1
 8007f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f0c:	f7fd f9e4 	bl	80052d8 <HAL_GetTick>
 8007f10:	0003      	movs	r3, r0
 8007f12:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007f14:	e008      	b.n	8007f28 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f16:	f7fd f9df 	bl	80052d8 <HAL_GetTick>
 8007f1a:	0002      	movs	r2, r0
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d901      	bls.n	8007f28 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007f24:	2303      	movs	r3, #3
 8007f26:	e1e3      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007f28:	4b38      	ldr	r3, [pc, #224]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	2380      	movs	r3, #128	; 0x80
 8007f2e:	00db      	lsls	r3, r3, #3
 8007f30:	4013      	ands	r3, r2
 8007f32:	d1f0      	bne.n	8007f16 <HAL_RCC_OscConfig+0x236>
 8007f34:	e000      	b.n	8007f38 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f36:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2208      	movs	r2, #8
 8007f3e:	4013      	ands	r3, r2
 8007f40:	d047      	beq.n	8007fd2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007f42:	4b32      	ldr	r3, [pc, #200]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	2238      	movs	r2, #56	; 0x38
 8007f48:	4013      	ands	r3, r2
 8007f4a:	2b18      	cmp	r3, #24
 8007f4c:	d10a      	bne.n	8007f64 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8007f4e:	4b2f      	ldr	r3, [pc, #188]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f52:	2202      	movs	r2, #2
 8007f54:	4013      	ands	r3, r2
 8007f56:	d03c      	beq.n	8007fd2 <HAL_RCC_OscConfig+0x2f2>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d138      	bne.n	8007fd2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e1c5      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d019      	beq.n	8007fa0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8007f6c:	4b27      	ldr	r3, [pc, #156]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007f6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007f70:	4b26      	ldr	r3, [pc, #152]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007f72:	2101      	movs	r1, #1
 8007f74:	430a      	orrs	r2, r1
 8007f76:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f78:	f7fd f9ae 	bl	80052d8 <HAL_GetTick>
 8007f7c:	0003      	movs	r3, r0
 8007f7e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f80:	e008      	b.n	8007f94 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f82:	f7fd f9a9 	bl	80052d8 <HAL_GetTick>
 8007f86:	0002      	movs	r2, r0
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d901      	bls.n	8007f94 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8007f90:	2303      	movs	r3, #3
 8007f92:	e1ad      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f94:	4b1d      	ldr	r3, [pc, #116]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f98:	2202      	movs	r2, #2
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	d0f1      	beq.n	8007f82 <HAL_RCC_OscConfig+0x2a2>
 8007f9e:	e018      	b.n	8007fd2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8007fa0:	4b1a      	ldr	r3, [pc, #104]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007fa2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007fa4:	4b19      	ldr	r3, [pc, #100]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007fa6:	2101      	movs	r1, #1
 8007fa8:	438a      	bics	r2, r1
 8007faa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fac:	f7fd f994 	bl	80052d8 <HAL_GetTick>
 8007fb0:	0003      	movs	r3, r0
 8007fb2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007fb4:	e008      	b.n	8007fc8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007fb6:	f7fd f98f 	bl	80052d8 <HAL_GetTick>
 8007fba:	0002      	movs	r2, r0
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	d901      	bls.n	8007fc8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	e193      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007fc8:	4b10      	ldr	r3, [pc, #64]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fcc:	2202      	movs	r2, #2
 8007fce:	4013      	ands	r3, r2
 8007fd0:	d1f1      	bne.n	8007fb6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2204      	movs	r2, #4
 8007fd8:	4013      	ands	r3, r2
 8007fda:	d100      	bne.n	8007fde <HAL_RCC_OscConfig+0x2fe>
 8007fdc:	e0c6      	b.n	800816c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007fde:	231f      	movs	r3, #31
 8007fe0:	18fb      	adds	r3, r7, r3
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007fe6:	4b09      	ldr	r3, [pc, #36]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	2238      	movs	r2, #56	; 0x38
 8007fec:	4013      	ands	r3, r2
 8007fee:	2b20      	cmp	r3, #32
 8007ff0:	d11e      	bne.n	8008030 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8007ff2:	4b06      	ldr	r3, [pc, #24]	; (800800c <HAL_RCC_OscConfig+0x32c>)
 8007ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ff6:	2202      	movs	r2, #2
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	d100      	bne.n	8007ffe <HAL_RCC_OscConfig+0x31e>
 8007ffc:	e0b6      	b.n	800816c <HAL_RCC_OscConfig+0x48c>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d000      	beq.n	8008008 <HAL_RCC_OscConfig+0x328>
 8008006:	e0b1      	b.n	800816c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	e171      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
 800800c:	40021000 	.word	0x40021000
 8008010:	fffeffff 	.word	0xfffeffff
 8008014:	fffbffff 	.word	0xfffbffff
 8008018:	ffff80ff 	.word	0xffff80ff
 800801c:	ffffc7ff 	.word	0xffffc7ff
 8008020:	00f42400 	.word	0x00f42400
 8008024:	20000064 	.word	0x20000064
 8008028:	20000068 	.word	0x20000068
 800802c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008030:	4bb1      	ldr	r3, [pc, #708]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 8008032:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008034:	2380      	movs	r3, #128	; 0x80
 8008036:	055b      	lsls	r3, r3, #21
 8008038:	4013      	ands	r3, r2
 800803a:	d101      	bne.n	8008040 <HAL_RCC_OscConfig+0x360>
 800803c:	2301      	movs	r3, #1
 800803e:	e000      	b.n	8008042 <HAL_RCC_OscConfig+0x362>
 8008040:	2300      	movs	r3, #0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d011      	beq.n	800806a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008046:	4bac      	ldr	r3, [pc, #688]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 8008048:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800804a:	4bab      	ldr	r3, [pc, #684]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 800804c:	2180      	movs	r1, #128	; 0x80
 800804e:	0549      	lsls	r1, r1, #21
 8008050:	430a      	orrs	r2, r1
 8008052:	63da      	str	r2, [r3, #60]	; 0x3c
 8008054:	4ba8      	ldr	r3, [pc, #672]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 8008056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008058:	2380      	movs	r3, #128	; 0x80
 800805a:	055b      	lsls	r3, r3, #21
 800805c:	4013      	ands	r3, r2
 800805e:	60fb      	str	r3, [r7, #12]
 8008060:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8008062:	231f      	movs	r3, #31
 8008064:	18fb      	adds	r3, r7, r3
 8008066:	2201      	movs	r2, #1
 8008068:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800806a:	4ba4      	ldr	r3, [pc, #656]	; (80082fc <HAL_RCC_OscConfig+0x61c>)
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	2380      	movs	r3, #128	; 0x80
 8008070:	005b      	lsls	r3, r3, #1
 8008072:	4013      	ands	r3, r2
 8008074:	d11a      	bne.n	80080ac <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008076:	4ba1      	ldr	r3, [pc, #644]	; (80082fc <HAL_RCC_OscConfig+0x61c>)
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	4ba0      	ldr	r3, [pc, #640]	; (80082fc <HAL_RCC_OscConfig+0x61c>)
 800807c:	2180      	movs	r1, #128	; 0x80
 800807e:	0049      	lsls	r1, r1, #1
 8008080:	430a      	orrs	r2, r1
 8008082:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8008084:	f7fd f928 	bl	80052d8 <HAL_GetTick>
 8008088:	0003      	movs	r3, r0
 800808a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800808c:	e008      	b.n	80080a0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800808e:	f7fd f923 	bl	80052d8 <HAL_GetTick>
 8008092:	0002      	movs	r2, r0
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	2b02      	cmp	r3, #2
 800809a:	d901      	bls.n	80080a0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800809c:	2303      	movs	r3, #3
 800809e:	e127      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80080a0:	4b96      	ldr	r3, [pc, #600]	; (80082fc <HAL_RCC_OscConfig+0x61c>)
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	2380      	movs	r3, #128	; 0x80
 80080a6:	005b      	lsls	r3, r3, #1
 80080a8:	4013      	ands	r3, r2
 80080aa:	d0f0      	beq.n	800808e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d106      	bne.n	80080c2 <HAL_RCC_OscConfig+0x3e2>
 80080b4:	4b90      	ldr	r3, [pc, #576]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 80080b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080b8:	4b8f      	ldr	r3, [pc, #572]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 80080ba:	2101      	movs	r1, #1
 80080bc:	430a      	orrs	r2, r1
 80080be:	65da      	str	r2, [r3, #92]	; 0x5c
 80080c0:	e01c      	b.n	80080fc <HAL_RCC_OscConfig+0x41c>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	2b05      	cmp	r3, #5
 80080c8:	d10c      	bne.n	80080e4 <HAL_RCC_OscConfig+0x404>
 80080ca:	4b8b      	ldr	r3, [pc, #556]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 80080cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080ce:	4b8a      	ldr	r3, [pc, #552]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 80080d0:	2104      	movs	r1, #4
 80080d2:	430a      	orrs	r2, r1
 80080d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80080d6:	4b88      	ldr	r3, [pc, #544]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 80080d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080da:	4b87      	ldr	r3, [pc, #540]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 80080dc:	2101      	movs	r1, #1
 80080de:	430a      	orrs	r2, r1
 80080e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80080e2:	e00b      	b.n	80080fc <HAL_RCC_OscConfig+0x41c>
 80080e4:	4b84      	ldr	r3, [pc, #528]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 80080e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080e8:	4b83      	ldr	r3, [pc, #524]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 80080ea:	2101      	movs	r1, #1
 80080ec:	438a      	bics	r2, r1
 80080ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80080f0:	4b81      	ldr	r3, [pc, #516]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 80080f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080f4:	4b80      	ldr	r3, [pc, #512]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 80080f6:	2104      	movs	r1, #4
 80080f8:	438a      	bics	r2, r1
 80080fa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d014      	beq.n	800812e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008104:	f7fd f8e8 	bl	80052d8 <HAL_GetTick>
 8008108:	0003      	movs	r3, r0
 800810a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800810c:	e009      	b.n	8008122 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800810e:	f7fd f8e3 	bl	80052d8 <HAL_GetTick>
 8008112:	0002      	movs	r2, r0
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	4a79      	ldr	r2, [pc, #484]	; (8008300 <HAL_RCC_OscConfig+0x620>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d901      	bls.n	8008122 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800811e:	2303      	movs	r3, #3
 8008120:	e0e6      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008122:	4b75      	ldr	r3, [pc, #468]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 8008124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008126:	2202      	movs	r2, #2
 8008128:	4013      	ands	r3, r2
 800812a:	d0f0      	beq.n	800810e <HAL_RCC_OscConfig+0x42e>
 800812c:	e013      	b.n	8008156 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800812e:	f7fd f8d3 	bl	80052d8 <HAL_GetTick>
 8008132:	0003      	movs	r3, r0
 8008134:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008136:	e009      	b.n	800814c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008138:	f7fd f8ce 	bl	80052d8 <HAL_GetTick>
 800813c:	0002      	movs	r2, r0
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	1ad3      	subs	r3, r2, r3
 8008142:	4a6f      	ldr	r2, [pc, #444]	; (8008300 <HAL_RCC_OscConfig+0x620>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d901      	bls.n	800814c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8008148:	2303      	movs	r3, #3
 800814a:	e0d1      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800814c:	4b6a      	ldr	r3, [pc, #424]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 800814e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008150:	2202      	movs	r2, #2
 8008152:	4013      	ands	r3, r2
 8008154:	d1f0      	bne.n	8008138 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8008156:	231f      	movs	r3, #31
 8008158:	18fb      	adds	r3, r7, r3
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d105      	bne.n	800816c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008160:	4b65      	ldr	r3, [pc, #404]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 8008162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008164:	4b64      	ldr	r3, [pc, #400]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 8008166:	4967      	ldr	r1, [pc, #412]	; (8008304 <HAL_RCC_OscConfig+0x624>)
 8008168:	400a      	ands	r2, r1
 800816a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	69db      	ldr	r3, [r3, #28]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d100      	bne.n	8008176 <HAL_RCC_OscConfig+0x496>
 8008174:	e0bb      	b.n	80082ee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008176:	4b60      	ldr	r3, [pc, #384]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	2238      	movs	r2, #56	; 0x38
 800817c:	4013      	ands	r3, r2
 800817e:	2b10      	cmp	r3, #16
 8008180:	d100      	bne.n	8008184 <HAL_RCC_OscConfig+0x4a4>
 8008182:	e07b      	b.n	800827c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	69db      	ldr	r3, [r3, #28]
 8008188:	2b02      	cmp	r3, #2
 800818a:	d156      	bne.n	800823a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800818c:	4b5a      	ldr	r3, [pc, #360]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	4b59      	ldr	r3, [pc, #356]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 8008192:	495d      	ldr	r1, [pc, #372]	; (8008308 <HAL_RCC_OscConfig+0x628>)
 8008194:	400a      	ands	r2, r1
 8008196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008198:	f7fd f89e 	bl	80052d8 <HAL_GetTick>
 800819c:	0003      	movs	r3, r0
 800819e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80081a0:	e008      	b.n	80081b4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081a2:	f7fd f899 	bl	80052d8 <HAL_GetTick>
 80081a6:	0002      	movs	r2, r0
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d901      	bls.n	80081b4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e09d      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80081b4:	4b50      	ldr	r3, [pc, #320]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	2380      	movs	r3, #128	; 0x80
 80081ba:	049b      	lsls	r3, r3, #18
 80081bc:	4013      	ands	r3, r2
 80081be:	d1f0      	bne.n	80081a2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80081c0:	4b4d      	ldr	r3, [pc, #308]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	4a51      	ldr	r2, [pc, #324]	; (800830c <HAL_RCC_OscConfig+0x62c>)
 80081c6:	4013      	ands	r3, r2
 80081c8:	0019      	movs	r1, r3
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a1a      	ldr	r2, [r3, #32]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d2:	431a      	orrs	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d8:	021b      	lsls	r3, r3, #8
 80081da:	431a      	orrs	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e0:	431a      	orrs	r2, r3
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e6:	431a      	orrs	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ec:	431a      	orrs	r2, r3
 80081ee:	4b42      	ldr	r3, [pc, #264]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 80081f0:	430a      	orrs	r2, r1
 80081f2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081f4:	4b40      	ldr	r3, [pc, #256]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	4b3f      	ldr	r3, [pc, #252]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 80081fa:	2180      	movs	r1, #128	; 0x80
 80081fc:	0449      	lsls	r1, r1, #17
 80081fe:	430a      	orrs	r2, r1
 8008200:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8008202:	4b3d      	ldr	r3, [pc, #244]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 8008204:	68da      	ldr	r2, [r3, #12]
 8008206:	4b3c      	ldr	r3, [pc, #240]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 8008208:	2180      	movs	r1, #128	; 0x80
 800820a:	0549      	lsls	r1, r1, #21
 800820c:	430a      	orrs	r2, r1
 800820e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008210:	f7fd f862 	bl	80052d8 <HAL_GetTick>
 8008214:	0003      	movs	r3, r0
 8008216:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008218:	e008      	b.n	800822c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800821a:	f7fd f85d 	bl	80052d8 <HAL_GetTick>
 800821e:	0002      	movs	r2, r0
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	2b02      	cmp	r3, #2
 8008226:	d901      	bls.n	800822c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8008228:	2303      	movs	r3, #3
 800822a:	e061      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800822c:	4b32      	ldr	r3, [pc, #200]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	2380      	movs	r3, #128	; 0x80
 8008232:	049b      	lsls	r3, r3, #18
 8008234:	4013      	ands	r3, r2
 8008236:	d0f0      	beq.n	800821a <HAL_RCC_OscConfig+0x53a>
 8008238:	e059      	b.n	80082ee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800823a:	4b2f      	ldr	r3, [pc, #188]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	4b2e      	ldr	r3, [pc, #184]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 8008240:	4931      	ldr	r1, [pc, #196]	; (8008308 <HAL_RCC_OscConfig+0x628>)
 8008242:	400a      	ands	r2, r1
 8008244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008246:	f7fd f847 	bl	80052d8 <HAL_GetTick>
 800824a:	0003      	movs	r3, r0
 800824c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800824e:	e008      	b.n	8008262 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008250:	f7fd f842 	bl	80052d8 <HAL_GetTick>
 8008254:	0002      	movs	r2, r0
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	2b02      	cmp	r3, #2
 800825c:	d901      	bls.n	8008262 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800825e:	2303      	movs	r3, #3
 8008260:	e046      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008262:	4b25      	ldr	r3, [pc, #148]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	2380      	movs	r3, #128	; 0x80
 8008268:	049b      	lsls	r3, r3, #18
 800826a:	4013      	ands	r3, r2
 800826c:	d1f0      	bne.n	8008250 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800826e:	4b22      	ldr	r3, [pc, #136]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 8008270:	68da      	ldr	r2, [r3, #12]
 8008272:	4b21      	ldr	r3, [pc, #132]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 8008274:	4926      	ldr	r1, [pc, #152]	; (8008310 <HAL_RCC_OscConfig+0x630>)
 8008276:	400a      	ands	r2, r1
 8008278:	60da      	str	r2, [r3, #12]
 800827a:	e038      	b.n	80082ee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	69db      	ldr	r3, [r3, #28]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d101      	bne.n	8008288 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e033      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8008288:	4b1b      	ldr	r3, [pc, #108]	; (80082f8 <HAL_RCC_OscConfig+0x618>)
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	2203      	movs	r2, #3
 8008292:	401a      	ands	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a1b      	ldr	r3, [r3, #32]
 8008298:	429a      	cmp	r2, r3
 800829a:	d126      	bne.n	80082ea <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	2270      	movs	r2, #112	; 0x70
 80082a0:	401a      	ands	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d11f      	bne.n	80082ea <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	23fe      	movs	r3, #254	; 0xfe
 80082ae:	01db      	lsls	r3, r3, #7
 80082b0:	401a      	ands	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d116      	bne.n	80082ea <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	23f8      	movs	r3, #248	; 0xf8
 80082c0:	039b      	lsls	r3, r3, #14
 80082c2:	401a      	ands	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d10e      	bne.n	80082ea <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80082cc:	697a      	ldr	r2, [r7, #20]
 80082ce:	23e0      	movs	r3, #224	; 0xe0
 80082d0:	051b      	lsls	r3, r3, #20
 80082d2:	401a      	ands	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80082d8:	429a      	cmp	r2, r3
 80082da:	d106      	bne.n	80082ea <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	0f5b      	lsrs	r3, r3, #29
 80082e0:	075a      	lsls	r2, r3, #29
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d001      	beq.n	80082ee <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e000      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	0018      	movs	r0, r3
 80082f2:	46bd      	mov	sp, r7
 80082f4:	b008      	add	sp, #32
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	40021000 	.word	0x40021000
 80082fc:	40007000 	.word	0x40007000
 8008300:	00001388 	.word	0x00001388
 8008304:	efffffff 	.word	0xefffffff
 8008308:	feffffff 	.word	0xfeffffff
 800830c:	11c1808c 	.word	0x11c1808c
 8008310:	eefefffc 	.word	0xeefefffc

08008314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d101      	bne.n	8008328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	e0e9      	b.n	80084fc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008328:	4b76      	ldr	r3, [pc, #472]	; (8008504 <HAL_RCC_ClockConfig+0x1f0>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2207      	movs	r2, #7
 800832e:	4013      	ands	r3, r2
 8008330:	683a      	ldr	r2, [r7, #0]
 8008332:	429a      	cmp	r2, r3
 8008334:	d91e      	bls.n	8008374 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008336:	4b73      	ldr	r3, [pc, #460]	; (8008504 <HAL_RCC_ClockConfig+0x1f0>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2207      	movs	r2, #7
 800833c:	4393      	bics	r3, r2
 800833e:	0019      	movs	r1, r3
 8008340:	4b70      	ldr	r3, [pc, #448]	; (8008504 <HAL_RCC_ClockConfig+0x1f0>)
 8008342:	683a      	ldr	r2, [r7, #0]
 8008344:	430a      	orrs	r2, r1
 8008346:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008348:	f7fc ffc6 	bl	80052d8 <HAL_GetTick>
 800834c:	0003      	movs	r3, r0
 800834e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008350:	e009      	b.n	8008366 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008352:	f7fc ffc1 	bl	80052d8 <HAL_GetTick>
 8008356:	0002      	movs	r2, r0
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	1ad3      	subs	r3, r2, r3
 800835c:	4a6a      	ldr	r2, [pc, #424]	; (8008508 <HAL_RCC_ClockConfig+0x1f4>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d901      	bls.n	8008366 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e0ca      	b.n	80084fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008366:	4b67      	ldr	r3, [pc, #412]	; (8008504 <HAL_RCC_ClockConfig+0x1f0>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2207      	movs	r2, #7
 800836c:	4013      	ands	r3, r2
 800836e:	683a      	ldr	r2, [r7, #0]
 8008370:	429a      	cmp	r2, r3
 8008372:	d1ee      	bne.n	8008352 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2202      	movs	r2, #2
 800837a:	4013      	ands	r3, r2
 800837c:	d015      	beq.n	80083aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2204      	movs	r2, #4
 8008384:	4013      	ands	r3, r2
 8008386:	d006      	beq.n	8008396 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008388:	4b60      	ldr	r3, [pc, #384]	; (800850c <HAL_RCC_ClockConfig+0x1f8>)
 800838a:	689a      	ldr	r2, [r3, #8]
 800838c:	4b5f      	ldr	r3, [pc, #380]	; (800850c <HAL_RCC_ClockConfig+0x1f8>)
 800838e:	21e0      	movs	r1, #224	; 0xe0
 8008390:	01c9      	lsls	r1, r1, #7
 8008392:	430a      	orrs	r2, r1
 8008394:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008396:	4b5d      	ldr	r3, [pc, #372]	; (800850c <HAL_RCC_ClockConfig+0x1f8>)
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	4a5d      	ldr	r2, [pc, #372]	; (8008510 <HAL_RCC_ClockConfig+0x1fc>)
 800839c:	4013      	ands	r3, r2
 800839e:	0019      	movs	r1, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	689a      	ldr	r2, [r3, #8]
 80083a4:	4b59      	ldr	r3, [pc, #356]	; (800850c <HAL_RCC_ClockConfig+0x1f8>)
 80083a6:	430a      	orrs	r2, r1
 80083a8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2201      	movs	r2, #1
 80083b0:	4013      	ands	r3, r2
 80083b2:	d057      	beq.n	8008464 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d107      	bne.n	80083cc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80083bc:	4b53      	ldr	r3, [pc, #332]	; (800850c <HAL_RCC_ClockConfig+0x1f8>)
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	2380      	movs	r3, #128	; 0x80
 80083c2:	029b      	lsls	r3, r3, #10
 80083c4:	4013      	ands	r3, r2
 80083c6:	d12b      	bne.n	8008420 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	e097      	b.n	80084fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d107      	bne.n	80083e4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083d4:	4b4d      	ldr	r3, [pc, #308]	; (800850c <HAL_RCC_ClockConfig+0x1f8>)
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	2380      	movs	r3, #128	; 0x80
 80083da:	049b      	lsls	r3, r3, #18
 80083dc:	4013      	ands	r3, r2
 80083de:	d11f      	bne.n	8008420 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	e08b      	b.n	80084fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d107      	bne.n	80083fc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80083ec:	4b47      	ldr	r3, [pc, #284]	; (800850c <HAL_RCC_ClockConfig+0x1f8>)
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	2380      	movs	r3, #128	; 0x80
 80083f2:	00db      	lsls	r3, r3, #3
 80083f4:	4013      	ands	r3, r2
 80083f6:	d113      	bne.n	8008420 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e07f      	b.n	80084fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	2b03      	cmp	r3, #3
 8008402:	d106      	bne.n	8008412 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008404:	4b41      	ldr	r3, [pc, #260]	; (800850c <HAL_RCC_ClockConfig+0x1f8>)
 8008406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008408:	2202      	movs	r2, #2
 800840a:	4013      	ands	r3, r2
 800840c:	d108      	bne.n	8008420 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e074      	b.n	80084fc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008412:	4b3e      	ldr	r3, [pc, #248]	; (800850c <HAL_RCC_ClockConfig+0x1f8>)
 8008414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008416:	2202      	movs	r2, #2
 8008418:	4013      	ands	r3, r2
 800841a:	d101      	bne.n	8008420 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	e06d      	b.n	80084fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008420:	4b3a      	ldr	r3, [pc, #232]	; (800850c <HAL_RCC_ClockConfig+0x1f8>)
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	2207      	movs	r2, #7
 8008426:	4393      	bics	r3, r2
 8008428:	0019      	movs	r1, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	685a      	ldr	r2, [r3, #4]
 800842e:	4b37      	ldr	r3, [pc, #220]	; (800850c <HAL_RCC_ClockConfig+0x1f8>)
 8008430:	430a      	orrs	r2, r1
 8008432:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008434:	f7fc ff50 	bl	80052d8 <HAL_GetTick>
 8008438:	0003      	movs	r3, r0
 800843a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800843c:	e009      	b.n	8008452 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800843e:	f7fc ff4b 	bl	80052d8 <HAL_GetTick>
 8008442:	0002      	movs	r2, r0
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	4a2f      	ldr	r2, [pc, #188]	; (8008508 <HAL_RCC_ClockConfig+0x1f4>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d901      	bls.n	8008452 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800844e:	2303      	movs	r3, #3
 8008450:	e054      	b.n	80084fc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008452:	4b2e      	ldr	r3, [pc, #184]	; (800850c <HAL_RCC_ClockConfig+0x1f8>)
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	2238      	movs	r2, #56	; 0x38
 8008458:	401a      	ands	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	00db      	lsls	r3, r3, #3
 8008460:	429a      	cmp	r2, r3
 8008462:	d1ec      	bne.n	800843e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008464:	4b27      	ldr	r3, [pc, #156]	; (8008504 <HAL_RCC_ClockConfig+0x1f0>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2207      	movs	r2, #7
 800846a:	4013      	ands	r3, r2
 800846c:	683a      	ldr	r2, [r7, #0]
 800846e:	429a      	cmp	r2, r3
 8008470:	d21e      	bcs.n	80084b0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008472:	4b24      	ldr	r3, [pc, #144]	; (8008504 <HAL_RCC_ClockConfig+0x1f0>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2207      	movs	r2, #7
 8008478:	4393      	bics	r3, r2
 800847a:	0019      	movs	r1, r3
 800847c:	4b21      	ldr	r3, [pc, #132]	; (8008504 <HAL_RCC_ClockConfig+0x1f0>)
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	430a      	orrs	r2, r1
 8008482:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008484:	f7fc ff28 	bl	80052d8 <HAL_GetTick>
 8008488:	0003      	movs	r3, r0
 800848a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800848c:	e009      	b.n	80084a2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800848e:	f7fc ff23 	bl	80052d8 <HAL_GetTick>
 8008492:	0002      	movs	r2, r0
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	1ad3      	subs	r3, r2, r3
 8008498:	4a1b      	ldr	r2, [pc, #108]	; (8008508 <HAL_RCC_ClockConfig+0x1f4>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d901      	bls.n	80084a2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800849e:	2303      	movs	r3, #3
 80084a0:	e02c      	b.n	80084fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80084a2:	4b18      	ldr	r3, [pc, #96]	; (8008504 <HAL_RCC_ClockConfig+0x1f0>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2207      	movs	r2, #7
 80084a8:	4013      	ands	r3, r2
 80084aa:	683a      	ldr	r2, [r7, #0]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d1ee      	bne.n	800848e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2204      	movs	r2, #4
 80084b6:	4013      	ands	r3, r2
 80084b8:	d009      	beq.n	80084ce <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80084ba:	4b14      	ldr	r3, [pc, #80]	; (800850c <HAL_RCC_ClockConfig+0x1f8>)
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	4a15      	ldr	r2, [pc, #84]	; (8008514 <HAL_RCC_ClockConfig+0x200>)
 80084c0:	4013      	ands	r3, r2
 80084c2:	0019      	movs	r1, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	68da      	ldr	r2, [r3, #12]
 80084c8:	4b10      	ldr	r3, [pc, #64]	; (800850c <HAL_RCC_ClockConfig+0x1f8>)
 80084ca:	430a      	orrs	r2, r1
 80084cc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80084ce:	f000 f829 	bl	8008524 <HAL_RCC_GetSysClockFreq>
 80084d2:	0001      	movs	r1, r0
 80084d4:	4b0d      	ldr	r3, [pc, #52]	; (800850c <HAL_RCC_ClockConfig+0x1f8>)
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	0a1b      	lsrs	r3, r3, #8
 80084da:	220f      	movs	r2, #15
 80084dc:	401a      	ands	r2, r3
 80084de:	4b0e      	ldr	r3, [pc, #56]	; (8008518 <HAL_RCC_ClockConfig+0x204>)
 80084e0:	0092      	lsls	r2, r2, #2
 80084e2:	58d3      	ldr	r3, [r2, r3]
 80084e4:	221f      	movs	r2, #31
 80084e6:	4013      	ands	r3, r2
 80084e8:	000a      	movs	r2, r1
 80084ea:	40da      	lsrs	r2, r3
 80084ec:	4b0b      	ldr	r3, [pc, #44]	; (800851c <HAL_RCC_ClockConfig+0x208>)
 80084ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80084f0:	4b0b      	ldr	r3, [pc, #44]	; (8008520 <HAL_RCC_ClockConfig+0x20c>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	0018      	movs	r0, r3
 80084f6:	f7fc fe93 	bl	8005220 <HAL_InitTick>
 80084fa:	0003      	movs	r3, r0
}
 80084fc:	0018      	movs	r0, r3
 80084fe:	46bd      	mov	sp, r7
 8008500:	b004      	add	sp, #16
 8008502:	bd80      	pop	{r7, pc}
 8008504:	40022000 	.word	0x40022000
 8008508:	00001388 	.word	0x00001388
 800850c:	40021000 	.word	0x40021000
 8008510:	fffff0ff 	.word	0xfffff0ff
 8008514:	ffff8fff 	.word	0xffff8fff
 8008518:	08015e38 	.word	0x08015e38
 800851c:	20000064 	.word	0x20000064
 8008520:	20000068 	.word	0x20000068

08008524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b086      	sub	sp, #24
 8008528:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800852a:	4b3c      	ldr	r3, [pc, #240]	; (800861c <HAL_RCC_GetSysClockFreq+0xf8>)
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	2238      	movs	r2, #56	; 0x38
 8008530:	4013      	ands	r3, r2
 8008532:	d10f      	bne.n	8008554 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008534:	4b39      	ldr	r3, [pc, #228]	; (800861c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	0adb      	lsrs	r3, r3, #11
 800853a:	2207      	movs	r2, #7
 800853c:	4013      	ands	r3, r2
 800853e:	2201      	movs	r2, #1
 8008540:	409a      	lsls	r2, r3
 8008542:	0013      	movs	r3, r2
 8008544:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8008546:	6839      	ldr	r1, [r7, #0]
 8008548:	4835      	ldr	r0, [pc, #212]	; (8008620 <HAL_RCC_GetSysClockFreq+0xfc>)
 800854a:	f7f7 fddb 	bl	8000104 <__udivsi3>
 800854e:	0003      	movs	r3, r0
 8008550:	613b      	str	r3, [r7, #16]
 8008552:	e05d      	b.n	8008610 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008554:	4b31      	ldr	r3, [pc, #196]	; (800861c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	2238      	movs	r2, #56	; 0x38
 800855a:	4013      	ands	r3, r2
 800855c:	2b08      	cmp	r3, #8
 800855e:	d102      	bne.n	8008566 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008560:	4b30      	ldr	r3, [pc, #192]	; (8008624 <HAL_RCC_GetSysClockFreq+0x100>)
 8008562:	613b      	str	r3, [r7, #16]
 8008564:	e054      	b.n	8008610 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008566:	4b2d      	ldr	r3, [pc, #180]	; (800861c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	2238      	movs	r2, #56	; 0x38
 800856c:	4013      	ands	r3, r2
 800856e:	2b10      	cmp	r3, #16
 8008570:	d138      	bne.n	80085e4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008572:	4b2a      	ldr	r3, [pc, #168]	; (800861c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	2203      	movs	r2, #3
 8008578:	4013      	ands	r3, r2
 800857a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800857c:	4b27      	ldr	r3, [pc, #156]	; (800861c <HAL_RCC_GetSysClockFreq+0xf8>)
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	091b      	lsrs	r3, r3, #4
 8008582:	2207      	movs	r2, #7
 8008584:	4013      	ands	r3, r2
 8008586:	3301      	adds	r3, #1
 8008588:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2b03      	cmp	r3, #3
 800858e:	d10d      	bne.n	80085ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008590:	68b9      	ldr	r1, [r7, #8]
 8008592:	4824      	ldr	r0, [pc, #144]	; (8008624 <HAL_RCC_GetSysClockFreq+0x100>)
 8008594:	f7f7 fdb6 	bl	8000104 <__udivsi3>
 8008598:	0003      	movs	r3, r0
 800859a:	0019      	movs	r1, r3
 800859c:	4b1f      	ldr	r3, [pc, #124]	; (800861c <HAL_RCC_GetSysClockFreq+0xf8>)
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	0a1b      	lsrs	r3, r3, #8
 80085a2:	227f      	movs	r2, #127	; 0x7f
 80085a4:	4013      	ands	r3, r2
 80085a6:	434b      	muls	r3, r1
 80085a8:	617b      	str	r3, [r7, #20]
        break;
 80085aa:	e00d      	b.n	80085c8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80085ac:	68b9      	ldr	r1, [r7, #8]
 80085ae:	481c      	ldr	r0, [pc, #112]	; (8008620 <HAL_RCC_GetSysClockFreq+0xfc>)
 80085b0:	f7f7 fda8 	bl	8000104 <__udivsi3>
 80085b4:	0003      	movs	r3, r0
 80085b6:	0019      	movs	r1, r3
 80085b8:	4b18      	ldr	r3, [pc, #96]	; (800861c <HAL_RCC_GetSysClockFreq+0xf8>)
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	0a1b      	lsrs	r3, r3, #8
 80085be:	227f      	movs	r2, #127	; 0x7f
 80085c0:	4013      	ands	r3, r2
 80085c2:	434b      	muls	r3, r1
 80085c4:	617b      	str	r3, [r7, #20]
        break;
 80085c6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80085c8:	4b14      	ldr	r3, [pc, #80]	; (800861c <HAL_RCC_GetSysClockFreq+0xf8>)
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	0f5b      	lsrs	r3, r3, #29
 80085ce:	2207      	movs	r2, #7
 80085d0:	4013      	ands	r3, r2
 80085d2:	3301      	adds	r3, #1
 80085d4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80085d6:	6879      	ldr	r1, [r7, #4]
 80085d8:	6978      	ldr	r0, [r7, #20]
 80085da:	f7f7 fd93 	bl	8000104 <__udivsi3>
 80085de:	0003      	movs	r3, r0
 80085e0:	613b      	str	r3, [r7, #16]
 80085e2:	e015      	b.n	8008610 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80085e4:	4b0d      	ldr	r3, [pc, #52]	; (800861c <HAL_RCC_GetSysClockFreq+0xf8>)
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	2238      	movs	r2, #56	; 0x38
 80085ea:	4013      	ands	r3, r2
 80085ec:	2b20      	cmp	r3, #32
 80085ee:	d103      	bne.n	80085f8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80085f0:	2380      	movs	r3, #128	; 0x80
 80085f2:	021b      	lsls	r3, r3, #8
 80085f4:	613b      	str	r3, [r7, #16]
 80085f6:	e00b      	b.n	8008610 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80085f8:	4b08      	ldr	r3, [pc, #32]	; (800861c <HAL_RCC_GetSysClockFreq+0xf8>)
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	2238      	movs	r2, #56	; 0x38
 80085fe:	4013      	ands	r3, r2
 8008600:	2b18      	cmp	r3, #24
 8008602:	d103      	bne.n	800860c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008604:	23fa      	movs	r3, #250	; 0xfa
 8008606:	01db      	lsls	r3, r3, #7
 8008608:	613b      	str	r3, [r7, #16]
 800860a:	e001      	b.n	8008610 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800860c:	2300      	movs	r3, #0
 800860e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008610:	693b      	ldr	r3, [r7, #16]
}
 8008612:	0018      	movs	r0, r3
 8008614:	46bd      	mov	sp, r7
 8008616:	b006      	add	sp, #24
 8008618:	bd80      	pop	{r7, pc}
 800861a:	46c0      	nop			; (mov r8, r8)
 800861c:	40021000 	.word	0x40021000
 8008620:	00f42400 	.word	0x00f42400
 8008624:	007a1200 	.word	0x007a1200

08008628 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800862c:	4b02      	ldr	r3, [pc, #8]	; (8008638 <HAL_RCC_GetHCLKFreq+0x10>)
 800862e:	681b      	ldr	r3, [r3, #0]
}
 8008630:	0018      	movs	r0, r3
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	46c0      	nop			; (mov r8, r8)
 8008638:	20000064 	.word	0x20000064

0800863c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800863c:	b5b0      	push	{r4, r5, r7, lr}
 800863e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008640:	f7ff fff2 	bl	8008628 <HAL_RCC_GetHCLKFreq>
 8008644:	0004      	movs	r4, r0
 8008646:	f7ff fb3f 	bl	8007cc8 <LL_RCC_GetAPB1Prescaler>
 800864a:	0003      	movs	r3, r0
 800864c:	0b1a      	lsrs	r2, r3, #12
 800864e:	4b05      	ldr	r3, [pc, #20]	; (8008664 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008650:	0092      	lsls	r2, r2, #2
 8008652:	58d3      	ldr	r3, [r2, r3]
 8008654:	221f      	movs	r2, #31
 8008656:	4013      	ands	r3, r2
 8008658:	40dc      	lsrs	r4, r3
 800865a:	0023      	movs	r3, r4
}
 800865c:	0018      	movs	r0, r3
 800865e:	46bd      	mov	sp, r7
 8008660:	bdb0      	pop	{r4, r5, r7, pc}
 8008662:	46c0      	nop			; (mov r8, r8)
 8008664:	08015e78 	.word	0x08015e78

08008668 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008670:	2313      	movs	r3, #19
 8008672:	18fb      	adds	r3, r7, r3
 8008674:	2200      	movs	r2, #0
 8008676:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008678:	2312      	movs	r3, #18
 800867a:	18fb      	adds	r3, r7, r3
 800867c:	2200      	movs	r2, #0
 800867e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	2380      	movs	r3, #128	; 0x80
 8008686:	029b      	lsls	r3, r3, #10
 8008688:	4013      	ands	r3, r2
 800868a:	d100      	bne.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800868c:	e0a3      	b.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800868e:	2011      	movs	r0, #17
 8008690:	183b      	adds	r3, r7, r0
 8008692:	2200      	movs	r2, #0
 8008694:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008696:	4bc3      	ldr	r3, [pc, #780]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008698:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800869a:	2380      	movs	r3, #128	; 0x80
 800869c:	055b      	lsls	r3, r3, #21
 800869e:	4013      	ands	r3, r2
 80086a0:	d110      	bne.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086a2:	4bc0      	ldr	r3, [pc, #768]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80086a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086a6:	4bbf      	ldr	r3, [pc, #764]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80086a8:	2180      	movs	r1, #128	; 0x80
 80086aa:	0549      	lsls	r1, r1, #21
 80086ac:	430a      	orrs	r2, r1
 80086ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80086b0:	4bbc      	ldr	r3, [pc, #752]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80086b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086b4:	2380      	movs	r3, #128	; 0x80
 80086b6:	055b      	lsls	r3, r3, #21
 80086b8:	4013      	ands	r3, r2
 80086ba:	60bb      	str	r3, [r7, #8]
 80086bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80086be:	183b      	adds	r3, r7, r0
 80086c0:	2201      	movs	r2, #1
 80086c2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80086c4:	4bb8      	ldr	r3, [pc, #736]	; (80089a8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	4bb7      	ldr	r3, [pc, #732]	; (80089a8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80086ca:	2180      	movs	r1, #128	; 0x80
 80086cc:	0049      	lsls	r1, r1, #1
 80086ce:	430a      	orrs	r2, r1
 80086d0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80086d2:	f7fc fe01 	bl	80052d8 <HAL_GetTick>
 80086d6:	0003      	movs	r3, r0
 80086d8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086da:	e00b      	b.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086dc:	f7fc fdfc 	bl	80052d8 <HAL_GetTick>
 80086e0:	0002      	movs	r2, r0
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	1ad3      	subs	r3, r2, r3
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d904      	bls.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80086ea:	2313      	movs	r3, #19
 80086ec:	18fb      	adds	r3, r7, r3
 80086ee:	2203      	movs	r2, #3
 80086f0:	701a      	strb	r2, [r3, #0]
        break;
 80086f2:	e005      	b.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086f4:	4bac      	ldr	r3, [pc, #688]	; (80089a8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	2380      	movs	r3, #128	; 0x80
 80086fa:	005b      	lsls	r3, r3, #1
 80086fc:	4013      	ands	r3, r2
 80086fe:	d0ed      	beq.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8008700:	2313      	movs	r3, #19
 8008702:	18fb      	adds	r3, r7, r3
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d154      	bne.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800870a:	4ba6      	ldr	r3, [pc, #664]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800870c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800870e:	23c0      	movs	r3, #192	; 0xc0
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4013      	ands	r3, r2
 8008714:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d019      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008720:	697a      	ldr	r2, [r7, #20]
 8008722:	429a      	cmp	r2, r3
 8008724:	d014      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008726:	4b9f      	ldr	r3, [pc, #636]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800872a:	4aa0      	ldr	r2, [pc, #640]	; (80089ac <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800872c:	4013      	ands	r3, r2
 800872e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008730:	4b9c      	ldr	r3, [pc, #624]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008732:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008734:	4b9b      	ldr	r3, [pc, #620]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008736:	2180      	movs	r1, #128	; 0x80
 8008738:	0249      	lsls	r1, r1, #9
 800873a:	430a      	orrs	r2, r1
 800873c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800873e:	4b99      	ldr	r3, [pc, #612]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008740:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008742:	4b98      	ldr	r3, [pc, #608]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008744:	499a      	ldr	r1, [pc, #616]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8008746:	400a      	ands	r2, r1
 8008748:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800874a:	4b96      	ldr	r3, [pc, #600]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800874c:	697a      	ldr	r2, [r7, #20]
 800874e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	2201      	movs	r2, #1
 8008754:	4013      	ands	r3, r2
 8008756:	d016      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008758:	f7fc fdbe 	bl	80052d8 <HAL_GetTick>
 800875c:	0003      	movs	r3, r0
 800875e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008760:	e00c      	b.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008762:	f7fc fdb9 	bl	80052d8 <HAL_GetTick>
 8008766:	0002      	movs	r2, r0
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	1ad3      	subs	r3, r2, r3
 800876c:	4a91      	ldr	r2, [pc, #580]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d904      	bls.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8008772:	2313      	movs	r3, #19
 8008774:	18fb      	adds	r3, r7, r3
 8008776:	2203      	movs	r2, #3
 8008778:	701a      	strb	r2, [r3, #0]
            break;
 800877a:	e004      	b.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800877c:	4b89      	ldr	r3, [pc, #548]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800877e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008780:	2202      	movs	r2, #2
 8008782:	4013      	ands	r3, r2
 8008784:	d0ed      	beq.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8008786:	2313      	movs	r3, #19
 8008788:	18fb      	adds	r3, r7, r3
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10a      	bne.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008790:	4b84      	ldr	r3, [pc, #528]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008794:	4a85      	ldr	r2, [pc, #532]	; (80089ac <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8008796:	4013      	ands	r3, r2
 8008798:	0019      	movs	r1, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800879e:	4b81      	ldr	r3, [pc, #516]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80087a0:	430a      	orrs	r2, r1
 80087a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80087a4:	e00c      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80087a6:	2312      	movs	r3, #18
 80087a8:	18fb      	adds	r3, r7, r3
 80087aa:	2213      	movs	r2, #19
 80087ac:	18ba      	adds	r2, r7, r2
 80087ae:	7812      	ldrb	r2, [r2, #0]
 80087b0:	701a      	strb	r2, [r3, #0]
 80087b2:	e005      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087b4:	2312      	movs	r3, #18
 80087b6:	18fb      	adds	r3, r7, r3
 80087b8:	2213      	movs	r2, #19
 80087ba:	18ba      	adds	r2, r7, r2
 80087bc:	7812      	ldrb	r2, [r2, #0]
 80087be:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80087c0:	2311      	movs	r3, #17
 80087c2:	18fb      	adds	r3, r7, r3
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d105      	bne.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087ca:	4b76      	ldr	r3, [pc, #472]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80087cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087ce:	4b75      	ldr	r3, [pc, #468]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80087d0:	4979      	ldr	r1, [pc, #484]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80087d2:	400a      	ands	r2, r1
 80087d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2201      	movs	r2, #1
 80087dc:	4013      	ands	r3, r2
 80087de:	d009      	beq.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80087e0:	4b70      	ldr	r3, [pc, #448]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80087e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087e4:	2203      	movs	r2, #3
 80087e6:	4393      	bics	r3, r2
 80087e8:	0019      	movs	r1, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685a      	ldr	r2, [r3, #4]
 80087ee:	4b6d      	ldr	r3, [pc, #436]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80087f0:	430a      	orrs	r2, r1
 80087f2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2202      	movs	r2, #2
 80087fa:	4013      	ands	r3, r2
 80087fc:	d009      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80087fe:	4b69      	ldr	r3, [pc, #420]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008802:	220c      	movs	r2, #12
 8008804:	4393      	bics	r3, r2
 8008806:	0019      	movs	r1, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	689a      	ldr	r2, [r3, #8]
 800880c:	4b65      	ldr	r3, [pc, #404]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800880e:	430a      	orrs	r2, r1
 8008810:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2210      	movs	r2, #16
 8008818:	4013      	ands	r3, r2
 800881a:	d009      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800881c:	4b61      	ldr	r3, [pc, #388]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800881e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008820:	4a66      	ldr	r2, [pc, #408]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8008822:	4013      	ands	r3, r2
 8008824:	0019      	movs	r1, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	68da      	ldr	r2, [r3, #12]
 800882a:	4b5e      	ldr	r3, [pc, #376]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800882c:	430a      	orrs	r2, r1
 800882e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	2380      	movs	r3, #128	; 0x80
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	4013      	ands	r3, r2
 800883a:	d009      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800883c:	4b59      	ldr	r3, [pc, #356]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800883e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008840:	4a5f      	ldr	r2, [pc, #380]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008842:	4013      	ands	r3, r2
 8008844:	0019      	movs	r1, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	699a      	ldr	r2, [r3, #24]
 800884a:	4b56      	ldr	r3, [pc, #344]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800884c:	430a      	orrs	r2, r1
 800884e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	2380      	movs	r3, #128	; 0x80
 8008856:	00db      	lsls	r3, r3, #3
 8008858:	4013      	ands	r3, r2
 800885a:	d009      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800885c:	4b51      	ldr	r3, [pc, #324]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800885e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008860:	4a58      	ldr	r2, [pc, #352]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008862:	4013      	ands	r3, r2
 8008864:	0019      	movs	r1, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	69da      	ldr	r2, [r3, #28]
 800886a:	4b4e      	ldr	r3, [pc, #312]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800886c:	430a      	orrs	r2, r1
 800886e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2220      	movs	r2, #32
 8008876:	4013      	ands	r3, r2
 8008878:	d009      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800887a:	4b4a      	ldr	r3, [pc, #296]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800887c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800887e:	4a52      	ldr	r2, [pc, #328]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8008880:	4013      	ands	r3, r2
 8008882:	0019      	movs	r1, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	691a      	ldr	r2, [r3, #16]
 8008888:	4b46      	ldr	r3, [pc, #280]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800888a:	430a      	orrs	r2, r1
 800888c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	2380      	movs	r3, #128	; 0x80
 8008894:	01db      	lsls	r3, r3, #7
 8008896:	4013      	ands	r3, r2
 8008898:	d015      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800889a:	4b42      	ldr	r3, [pc, #264]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800889c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	0899      	lsrs	r1, r3, #2
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a1a      	ldr	r2, [r3, #32]
 80088a6:	4b3f      	ldr	r3, [pc, #252]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088a8:	430a      	orrs	r2, r1
 80088aa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6a1a      	ldr	r2, [r3, #32]
 80088b0:	2380      	movs	r3, #128	; 0x80
 80088b2:	05db      	lsls	r3, r3, #23
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d106      	bne.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80088b8:	4b3a      	ldr	r3, [pc, #232]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088ba:	68da      	ldr	r2, [r3, #12]
 80088bc:	4b39      	ldr	r3, [pc, #228]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088be:	2180      	movs	r1, #128	; 0x80
 80088c0:	0249      	lsls	r1, r1, #9
 80088c2:	430a      	orrs	r2, r1
 80088c4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	2380      	movs	r3, #128	; 0x80
 80088cc:	031b      	lsls	r3, r3, #12
 80088ce:	4013      	ands	r3, r2
 80088d0:	d009      	beq.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80088d2:	4b34      	ldr	r3, [pc, #208]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088d6:	2240      	movs	r2, #64	; 0x40
 80088d8:	4393      	bics	r3, r2
 80088da:	0019      	movs	r1, r3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088e0:	4b30      	ldr	r3, [pc, #192]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088e2:	430a      	orrs	r2, r1
 80088e4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	2380      	movs	r3, #128	; 0x80
 80088ec:	039b      	lsls	r3, r3, #14
 80088ee:	4013      	ands	r3, r2
 80088f0:	d016      	beq.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80088f2:	4b2c      	ldr	r3, [pc, #176]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088f6:	4a35      	ldr	r2, [pc, #212]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80088f8:	4013      	ands	r3, r2
 80088fa:	0019      	movs	r1, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008900:	4b28      	ldr	r3, [pc, #160]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008902:	430a      	orrs	r2, r1
 8008904:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800890a:	2380      	movs	r3, #128	; 0x80
 800890c:	03db      	lsls	r3, r3, #15
 800890e:	429a      	cmp	r2, r3
 8008910:	d106      	bne.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008912:	4b24      	ldr	r3, [pc, #144]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008914:	68da      	ldr	r2, [r3, #12]
 8008916:	4b23      	ldr	r3, [pc, #140]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008918:	2180      	movs	r1, #128	; 0x80
 800891a:	0449      	lsls	r1, r1, #17
 800891c:	430a      	orrs	r2, r1
 800891e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	2380      	movs	r3, #128	; 0x80
 8008926:	03db      	lsls	r3, r3, #15
 8008928:	4013      	ands	r3, r2
 800892a:	d016      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800892c:	4b1d      	ldr	r3, [pc, #116]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800892e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008930:	4a27      	ldr	r2, [pc, #156]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8008932:	4013      	ands	r3, r2
 8008934:	0019      	movs	r1, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800893a:	4b1a      	ldr	r3, [pc, #104]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800893c:	430a      	orrs	r2, r1
 800893e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008944:	2380      	movs	r3, #128	; 0x80
 8008946:	045b      	lsls	r3, r3, #17
 8008948:	429a      	cmp	r2, r3
 800894a:	d106      	bne.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800894c:	4b15      	ldr	r3, [pc, #84]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800894e:	68da      	ldr	r2, [r3, #12]
 8008950:	4b14      	ldr	r3, [pc, #80]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008952:	2180      	movs	r1, #128	; 0x80
 8008954:	0449      	lsls	r1, r1, #17
 8008956:	430a      	orrs	r2, r1
 8008958:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	2380      	movs	r3, #128	; 0x80
 8008960:	011b      	lsls	r3, r3, #4
 8008962:	4013      	ands	r3, r2
 8008964:	d016      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008966:	4b0f      	ldr	r3, [pc, #60]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800896a:	4a1a      	ldr	r2, [pc, #104]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800896c:	4013      	ands	r3, r2
 800896e:	0019      	movs	r1, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	695a      	ldr	r2, [r3, #20]
 8008974:	4b0b      	ldr	r3, [pc, #44]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008976:	430a      	orrs	r2, r1
 8008978:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	695a      	ldr	r2, [r3, #20]
 800897e:	2380      	movs	r3, #128	; 0x80
 8008980:	01db      	lsls	r3, r3, #7
 8008982:	429a      	cmp	r2, r3
 8008984:	d106      	bne.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008986:	4b07      	ldr	r3, [pc, #28]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008988:	68da      	ldr	r2, [r3, #12]
 800898a:	4b06      	ldr	r3, [pc, #24]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800898c:	2180      	movs	r1, #128	; 0x80
 800898e:	0249      	lsls	r1, r1, #9
 8008990:	430a      	orrs	r2, r1
 8008992:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8008994:	2312      	movs	r3, #18
 8008996:	18fb      	adds	r3, r7, r3
 8008998:	781b      	ldrb	r3, [r3, #0]
}
 800899a:	0018      	movs	r0, r3
 800899c:	46bd      	mov	sp, r7
 800899e:	b006      	add	sp, #24
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	46c0      	nop			; (mov r8, r8)
 80089a4:	40021000 	.word	0x40021000
 80089a8:	40007000 	.word	0x40007000
 80089ac:	fffffcff 	.word	0xfffffcff
 80089b0:	fffeffff 	.word	0xfffeffff
 80089b4:	00001388 	.word	0x00001388
 80089b8:	efffffff 	.word	0xefffffff
 80089bc:	fffff3ff 	.word	0xfffff3ff
 80089c0:	fff3ffff 	.word	0xfff3ffff
 80089c4:	ffcfffff 	.word	0xffcfffff
 80089c8:	ffffcfff 	.word	0xffffcfff
 80089cc:	ffbfffff 	.word	0xffbfffff
 80089d0:	feffffff 	.word	0xfeffffff
 80089d4:	ffff3fff 	.word	0xffff3fff

080089d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80089e0:	2300      	movs	r3, #0
 80089e2:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	2380      	movs	r3, #128	; 0x80
 80089e8:	029b      	lsls	r3, r3, #10
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d136      	bne.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80089ee:	4bcd      	ldr	r3, [pc, #820]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80089f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80089f2:	23c0      	movs	r3, #192	; 0xc0
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	4013      	ands	r3, r2
 80089f8:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80089fa:	4bca      	ldr	r3, [pc, #808]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80089fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089fe:	2202      	movs	r2, #2
 8008a00:	4013      	ands	r3, r2
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	d108      	bne.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	2380      	movs	r3, #128	; 0x80
 8008a0a:	005b      	lsls	r3, r3, #1
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d103      	bne.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8008a10:	2380      	movs	r3, #128	; 0x80
 8008a12:	021b      	lsls	r3, r3, #8
 8008a14:	617b      	str	r3, [r7, #20]
 8008a16:	e31c      	b.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008a18:	4bc2      	ldr	r3, [pc, #776]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a1c:	2202      	movs	r2, #2
 8008a1e:	4013      	ands	r3, r2
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d108      	bne.n	8008a36 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	2380      	movs	r3, #128	; 0x80
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d103      	bne.n	8008a36 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8008a2e:	23fa      	movs	r3, #250	; 0xfa
 8008a30:	01db      	lsls	r3, r3, #7
 8008a32:	617b      	str	r3, [r7, #20]
 8008a34:	e30d      	b.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008a36:	4bbb      	ldr	r3, [pc, #748]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	2380      	movs	r3, #128	; 0x80
 8008a3c:	029b      	lsls	r3, r3, #10
 8008a3e:	401a      	ands	r2, r3
 8008a40:	2380      	movs	r3, #128	; 0x80
 8008a42:	029b      	lsls	r3, r3, #10
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d000      	beq.n	8008a4a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8008a48:	e303      	b.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	23c0      	movs	r3, #192	; 0xc0
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d000      	beq.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8008a54:	e2fd      	b.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 8008a56:	4bb4      	ldr	r3, [pc, #720]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8008a58:	617b      	str	r3, [r7, #20]
 8008a5a:	e2fa      	b.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8008a5c:	4bb1      	ldr	r3, [pc, #708]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	2203      	movs	r2, #3
 8008a62:	4013      	ands	r3, r2
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d102      	bne.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8008a68:	4bb0      	ldr	r3, [pc, #704]	; (8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008a6a:	613b      	str	r3, [r7, #16]
 8008a6c:	e00a      	b.n	8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 8008a6e:	4bad      	ldr	r3, [pc, #692]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	2203      	movs	r2, #3
 8008a74:	4013      	ands	r3, r2
 8008a76:	2b03      	cmp	r3, #3
 8008a78:	d102      	bne.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 8008a7a:	4bad      	ldr	r3, [pc, #692]	; (8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8008a7c:	613b      	str	r3, [r7, #16]
 8008a7e:	e001      	b.n	8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8008a80:	2300      	movs	r3, #0
 8008a82:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008a84:	4ba7      	ldr	r3, [pc, #668]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	091b      	lsrs	r3, r3, #4
 8008a8a:	2207      	movs	r2, #7
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	3301      	adds	r3, #1
 8008a90:	0019      	movs	r1, r3
 8008a92:	6938      	ldr	r0, [r7, #16]
 8008a94:	f7f7 fb36 	bl	8000104 <__udivsi3>
 8008a98:	0003      	movs	r3, r0
 8008a9a:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	2380      	movs	r3, #128	; 0x80
 8008aa0:	03db      	lsls	r3, r3, #15
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d100      	bne.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8008aa6:	e28e      	b.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	2380      	movs	r3, #128	; 0x80
 8008aac:	03db      	lsls	r3, r3, #15
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d900      	bls.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8008ab2:	e2b7      	b.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	2380      	movs	r3, #128	; 0x80
 8008ab8:	039b      	lsls	r3, r3, #14
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d100      	bne.n	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008abe:	e253      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	2380      	movs	r3, #128	; 0x80
 8008ac4:	039b      	lsls	r3, r3, #14
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d900      	bls.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008aca:	e2ab      	b.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	2380      	movs	r3, #128	; 0x80
 8008ad0:	031b      	lsls	r3, r3, #12
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d100      	bne.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8008ad6:	e0b2      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	2380      	movs	r3, #128	; 0x80
 8008adc:	031b      	lsls	r3, r3, #12
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d900      	bls.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8008ae2:	e29f      	b.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	2380      	movs	r3, #128	; 0x80
 8008ae8:	01db      	lsls	r3, r3, #7
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d100      	bne.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8008aee:	e103      	b.n	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	2380      	movs	r3, #128	; 0x80
 8008af4:	01db      	lsls	r3, r3, #7
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d900      	bls.n	8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008afa:	e293      	b.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	2380      	movs	r3, #128	; 0x80
 8008b00:	011b      	lsls	r3, r3, #4
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d100      	bne.n	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8008b06:	e165      	b.n	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	2380      	movs	r3, #128	; 0x80
 8008b0c:	011b      	lsls	r3, r3, #4
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d900      	bls.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8008b12:	e287      	b.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	2380      	movs	r3, #128	; 0x80
 8008b18:	00db      	lsls	r3, r3, #3
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d100      	bne.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8008b1e:	e1e3      	b.n	8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	2380      	movs	r3, #128	; 0x80
 8008b24:	00db      	lsls	r3, r3, #3
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d900      	bls.n	8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8008b2a:	e27b      	b.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	2380      	movs	r3, #128	; 0x80
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d100      	bne.n	8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8008b36:	e197      	b.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	2380      	movs	r3, #128	; 0x80
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d900      	bls.n	8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8008b42:	e26f      	b.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b20      	cmp	r3, #32
 8008b48:	d100      	bne.n	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8008b4a:	e118      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2b20      	cmp	r3, #32
 8008b50:	d900      	bls.n	8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 8008b52:	e267      	b.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2b10      	cmp	r3, #16
 8008b58:	d100      	bne.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8008b5a:	e093      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2b10      	cmp	r3, #16
 8008b60:	d900      	bls.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8008b62:	e25f      	b.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d003      	beq.n	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	d033      	beq.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8008b70:	e258      	b.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008b72:	4b6c      	ldr	r3, [pc, #432]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b76:	2203      	movs	r2, #3
 8008b78:	4013      	ands	r3, r2
 8008b7a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d104      	bne.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008b82:	f7ff fd5b 	bl	800863c <HAL_RCC_GetPCLK1Freq>
 8008b86:	0003      	movs	r3, r0
 8008b88:	617b      	str	r3, [r7, #20]
        break;
 8008b8a:	e24d      	b.n	8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d104      	bne.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 8008b92:	f7ff fcc7 	bl	8008524 <HAL_RCC_GetSysClockFreq>
 8008b96:	0003      	movs	r3, r0
 8008b98:	617b      	str	r3, [r7, #20]
        break;
 8008b9a:	e245      	b.n	8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008b9c:	4b61      	ldr	r3, [pc, #388]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	2380      	movs	r3, #128	; 0x80
 8008ba2:	00db      	lsls	r3, r3, #3
 8008ba4:	401a      	ands	r2, r3
 8008ba6:	2380      	movs	r3, #128	; 0x80
 8008ba8:	00db      	lsls	r3, r3, #3
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d105      	bne.n	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d102      	bne.n	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 8008bb4:	4b5d      	ldr	r3, [pc, #372]	; (8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008bb6:	617b      	str	r3, [r7, #20]
        break;
 8008bb8:	e236      	b.n	8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008bba:	4b5a      	ldr	r3, [pc, #360]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bbe:	2202      	movs	r2, #2
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d000      	beq.n	8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 8008bc6:	e22f      	b.n	8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2b03      	cmp	r3, #3
 8008bcc:	d000      	beq.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 8008bce:	e22b      	b.n	8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 8008bd0:	2380      	movs	r3, #128	; 0x80
 8008bd2:	021b      	lsls	r3, r3, #8
 8008bd4:	617b      	str	r3, [r7, #20]
        break;
 8008bd6:	e227      	b.n	8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008bd8:	4b52      	ldr	r3, [pc, #328]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bdc:	220c      	movs	r2, #12
 8008bde:	4013      	ands	r3, r2
 8008be0:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d104      	bne.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008be8:	f7ff fd28 	bl	800863c <HAL_RCC_GetPCLK1Freq>
 8008bec:	0003      	movs	r3, r0
 8008bee:	617b      	str	r3, [r7, #20]
        break;
 8008bf0:	e21c      	b.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2b04      	cmp	r3, #4
 8008bf6:	d104      	bne.n	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008bf8:	f7ff fc94 	bl	8008524 <HAL_RCC_GetSysClockFreq>
 8008bfc:	0003      	movs	r3, r0
 8008bfe:	617b      	str	r3, [r7, #20]
        break;
 8008c00:	e214      	b.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008c02:	4b48      	ldr	r3, [pc, #288]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	2380      	movs	r3, #128	; 0x80
 8008c08:	00db      	lsls	r3, r3, #3
 8008c0a:	401a      	ands	r2, r3
 8008c0c:	2380      	movs	r3, #128	; 0x80
 8008c0e:	00db      	lsls	r3, r3, #3
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d105      	bne.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2b08      	cmp	r3, #8
 8008c18:	d102      	bne.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 8008c1a:	4b44      	ldr	r3, [pc, #272]	; (8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008c1c:	617b      	str	r3, [r7, #20]
        break;
 8008c1e:	e205      	b.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008c20:	4b40      	ldr	r3, [pc, #256]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c24:	2202      	movs	r2, #2
 8008c26:	4013      	ands	r3, r2
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	d000      	beq.n	8008c2e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008c2c:	e1fe      	b.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2b0c      	cmp	r3, #12
 8008c32:	d000      	beq.n	8008c36 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8008c34:	e1fa      	b.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 8008c36:	2380      	movs	r3, #128	; 0x80
 8008c38:	021b      	lsls	r3, r3, #8
 8008c3a:	617b      	str	r3, [r7, #20]
        break;
 8008c3c:	e1f6      	b.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8008c3e:	4b39      	ldr	r3, [pc, #228]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c42:	2240      	movs	r2, #64	; 0x40
 8008c44:	4013      	ands	r3, r2
 8008c46:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 8008c48:	4b36      	ldr	r3, [pc, #216]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	2380      	movs	r3, #128	; 0x80
 8008c4e:	00db      	lsls	r3, r3, #3
 8008c50:	401a      	ands	r2, r3
 8008c52:	2380      	movs	r3, #128	; 0x80
 8008c54:	00db      	lsls	r3, r3, #3
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d105      	bne.n	8008c66 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d102      	bne.n	8008c66 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 8008c60:	4b34      	ldr	r3, [pc, #208]	; (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8008c62:	617b      	str	r3, [r7, #20]
        break;
 8008c64:	e1e4      	b.n	8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8008c66:	4b2f      	ldr	r3, [pc, #188]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	4013      	ands	r3, r2
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d000      	beq.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8008c72:	e1dd      	b.n	8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2b40      	cmp	r3, #64	; 0x40
 8008c78:	d000      	beq.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8008c7a:	e1d9      	b.n	8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 8008c7c:	2380      	movs	r3, #128	; 0x80
 8008c7e:	021b      	lsls	r3, r3, #8
 8008c80:	617b      	str	r3, [r7, #20]
        break;
 8008c82:	e1d5      	b.n	8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008c84:	4b27      	ldr	r3, [pc, #156]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008c86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008c88:	23c0      	movs	r3, #192	; 0xc0
 8008c8a:	011b      	lsls	r3, r3, #4
 8008c8c:	4013      	ands	r3, r2
 8008c8e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d104      	bne.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008c96:	f7ff fcd1 	bl	800863c <HAL_RCC_GetPCLK1Freq>
 8008c9a:	0003      	movs	r3, r0
 8008c9c:	617b      	str	r3, [r7, #20]
        break;
 8008c9e:	e1c9      	b.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	2380      	movs	r3, #128	; 0x80
 8008ca4:	00db      	lsls	r3, r3, #3
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d104      	bne.n	8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8008caa:	f7ff fc3b 	bl	8008524 <HAL_RCC_GetSysClockFreq>
 8008cae:	0003      	movs	r3, r0
 8008cb0:	617b      	str	r3, [r7, #20]
        break;
 8008cb2:	e1bf      	b.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008cb4:	4b1b      	ldr	r3, [pc, #108]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	2380      	movs	r3, #128	; 0x80
 8008cba:	00db      	lsls	r3, r3, #3
 8008cbc:	401a      	ands	r2, r3
 8008cbe:	2380      	movs	r3, #128	; 0x80
 8008cc0:	00db      	lsls	r3, r3, #3
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d107      	bne.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	2380      	movs	r3, #128	; 0x80
 8008cca:	011b      	lsls	r3, r3, #4
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d102      	bne.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 8008cd0:	4b16      	ldr	r3, [pc, #88]	; (8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008cd2:	617b      	str	r3, [r7, #20]
        break;
 8008cd4:	e1ae      	b.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008cd6:	4b13      	ldr	r3, [pc, #76]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cda:	2202      	movs	r2, #2
 8008cdc:	4013      	ands	r3, r2
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d000      	beq.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8008ce2:	e1a7      	b.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	23c0      	movs	r3, #192	; 0xc0
 8008ce8:	011b      	lsls	r3, r3, #4
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d000      	beq.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008cee:	e1a1      	b.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 8008cf0:	2380      	movs	r3, #128	; 0x80
 8008cf2:	021b      	lsls	r3, r3, #8
 8008cf4:	617b      	str	r3, [r7, #20]
        break;
 8008cf6:	e19d      	b.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008cf8:	4b0a      	ldr	r3, [pc, #40]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cfc:	0f9b      	lsrs	r3, r3, #30
 8008cfe:	079b      	lsls	r3, r3, #30
 8008d00:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d104      	bne.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008d08:	f7ff fc0c 	bl	8008524 <HAL_RCC_GetSysClockFreq>
 8008d0c:	0003      	movs	r3, r0
 8008d0e:	617b      	str	r3, [r7, #20]
        break;
 8008d10:	e192      	b.n	8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	2380      	movs	r3, #128	; 0x80
 8008d16:	061b      	lsls	r3, r3, #24
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d10d      	bne.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 8008d1c:	4b03      	ldr	r3, [pc, #12]	; (8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008d1e:	617b      	str	r3, [r7, #20]
        break;
 8008d20:	e18a      	b.n	8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008d22:	46c0      	nop			; (mov r8, r8)
 8008d24:	40021000 	.word	0x40021000
 8008d28:	0003d090 	.word	0x0003d090
 8008d2c:	00f42400 	.word	0x00f42400
 8008d30:	007a1200 	.word	0x007a1200
 8008d34:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	2380      	movs	r3, #128	; 0x80
 8008d3c:	05db      	lsls	r3, r3, #23
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d000      	beq.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 8008d42:	e179      	b.n	8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8008d44:	4bc5      	ldr	r3, [pc, #788]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008d46:	68da      	ldr	r2, [r3, #12]
 8008d48:	2380      	movs	r3, #128	; 0x80
 8008d4a:	025b      	lsls	r3, r3, #9
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	d100      	bne.n	8008d52 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8008d50:	e172      	b.n	8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008d52:	4bc2      	ldr	r3, [pc, #776]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	0a1b      	lsrs	r3, r3, #8
 8008d58:	227f      	movs	r2, #127	; 0x7f
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	68ba      	ldr	r2, [r7, #8]
 8008d62:	435a      	muls	r2, r3
 8008d64:	4bbd      	ldr	r3, [pc, #756]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	0c5b      	lsrs	r3, r3, #17
 8008d6a:	211f      	movs	r1, #31
 8008d6c:	400b      	ands	r3, r1
 8008d6e:	3301      	adds	r3, #1
 8008d70:	0019      	movs	r1, r3
 8008d72:	0010      	movs	r0, r2
 8008d74:	f7f7 f9c6 	bl	8000104 <__udivsi3>
 8008d78:	0003      	movs	r3, r0
 8008d7a:	617b      	str	r3, [r7, #20]
        break;
 8008d7c:	e15c      	b.n	8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008d7e:	4bb7      	ldr	r3, [pc, #732]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008d80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d82:	23c0      	movs	r3, #192	; 0xc0
 8008d84:	019b      	lsls	r3, r3, #6
 8008d86:	4013      	ands	r3, r2
 8008d88:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d104      	bne.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008d90:	f7ff fc54 	bl	800863c <HAL_RCC_GetPCLK1Freq>
 8008d94:	0003      	movs	r3, r0
 8008d96:	617b      	str	r3, [r7, #20]
        break;
 8008d98:	e150      	b.n	800903c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	2380      	movs	r3, #128	; 0x80
 8008d9e:	015b      	lsls	r3, r3, #5
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d104      	bne.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 8008da4:	f7ff fbbe 	bl	8008524 <HAL_RCC_GetSysClockFreq>
 8008da8:	0003      	movs	r3, r0
 8008daa:	617b      	str	r3, [r7, #20]
        break;
 8008dac:	e146      	b.n	800903c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008dae:	4bab      	ldr	r3, [pc, #684]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	2380      	movs	r3, #128	; 0x80
 8008db4:	00db      	lsls	r3, r3, #3
 8008db6:	401a      	ands	r2, r3
 8008db8:	2380      	movs	r3, #128	; 0x80
 8008dba:	00db      	lsls	r3, r3, #3
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d000      	beq.n	8008dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8008dc0:	e13c      	b.n	800903c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	2380      	movs	r3, #128	; 0x80
 8008dc6:	019b      	lsls	r3, r3, #6
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d000      	beq.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8008dcc:	e136      	b.n	800903c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 8008dce:	4ba4      	ldr	r3, [pc, #656]	; (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8008dd0:	617b      	str	r3, [r7, #20]
        break;
 8008dd2:	e133      	b.n	800903c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8008dd4:	4ba1      	ldr	r3, [pc, #644]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008dd6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008dd8:	23c0      	movs	r3, #192	; 0xc0
 8008dda:	021b      	lsls	r3, r3, #8
 8008ddc:	4013      	ands	r3, r2
 8008dde:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8008de0:	68fa      	ldr	r2, [r7, #12]
 8008de2:	2380      	movs	r3, #128	; 0x80
 8008de4:	01db      	lsls	r3, r3, #7
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d11c      	bne.n	8008e24 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8008dea:	4b9c      	ldr	r3, [pc, #624]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008dec:	68da      	ldr	r2, [r3, #12]
 8008dee:	2380      	movs	r3, #128	; 0x80
 8008df0:	025b      	lsls	r3, r3, #9
 8008df2:	4013      	ands	r3, r2
 8008df4:	d100      	bne.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8008df6:	e123      	b.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008df8:	4b98      	ldr	r3, [pc, #608]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	0a1b      	lsrs	r3, r3, #8
 8008dfe:	227f      	movs	r2, #127	; 0x7f
 8008e00:	4013      	ands	r3, r2
 8008e02:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	435a      	muls	r2, r3
 8008e0a:	4b94      	ldr	r3, [pc, #592]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	0c5b      	lsrs	r3, r3, #17
 8008e10:	211f      	movs	r1, #31
 8008e12:	400b      	ands	r3, r1
 8008e14:	3301      	adds	r3, #1
 8008e16:	0019      	movs	r1, r3
 8008e18:	0010      	movs	r0, r2
 8008e1a:	f7f7 f973 	bl	8000104 <__udivsi3>
 8008e1e:	0003      	movs	r3, r0
 8008e20:	617b      	str	r3, [r7, #20]
        break;
 8008e22:	e10d      	b.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d104      	bne.n	8008e34 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 8008e2a:	f7ff fb7b 	bl	8008524 <HAL_RCC_GetSysClockFreq>
 8008e2e:	0003      	movs	r3, r0
 8008e30:	617b      	str	r3, [r7, #20]
        break;
 8008e32:	e105      	b.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8008e34:	4b89      	ldr	r3, [pc, #548]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	2380      	movs	r3, #128	; 0x80
 8008e3a:	00db      	lsls	r3, r3, #3
 8008e3c:	401a      	ands	r2, r3
 8008e3e:	2380      	movs	r3, #128	; 0x80
 8008e40:	00db      	lsls	r3, r3, #3
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d107      	bne.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 8008e46:	68fa      	ldr	r2, [r7, #12]
 8008e48:	2380      	movs	r3, #128	; 0x80
 8008e4a:	021b      	lsls	r3, r3, #8
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d102      	bne.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 8008e50:	4b83      	ldr	r3, [pc, #524]	; (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8008e52:	617b      	str	r3, [r7, #20]
        break;
 8008e54:	e0f4      	b.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	23c0      	movs	r3, #192	; 0xc0
 8008e5a:	021b      	lsls	r3, r3, #8
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d000      	beq.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008e60:	e0ee      	b.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 8008e62:	4b80      	ldr	r3, [pc, #512]	; (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8008e64:	617b      	str	r3, [r7, #20]
        break;
 8008e66:	e0eb      	b.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008e68:	4b7c      	ldr	r3, [pc, #496]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008e6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e6c:	23c0      	movs	r3, #192	; 0xc0
 8008e6e:	031b      	lsls	r3, r3, #12
 8008e70:	4013      	ands	r3, r2
 8008e72:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d104      	bne.n	8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e7a:	f7ff fbdf 	bl	800863c <HAL_RCC_GetPCLK1Freq>
 8008e7e:	0003      	movs	r3, r0
 8008e80:	617b      	str	r3, [r7, #20]
        break;
 8008e82:	e0df      	b.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8008e84:	4b75      	ldr	r3, [pc, #468]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e88:	2202      	movs	r2, #2
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d108      	bne.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	2380      	movs	r3, #128	; 0x80
 8008e94:	02db      	lsls	r3, r3, #11
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d103      	bne.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 8008e9a:	23fa      	movs	r3, #250	; 0xfa
 8008e9c:	01db      	lsls	r3, r3, #7
 8008e9e:	617b      	str	r3, [r7, #20]
 8008ea0:	e021      	b.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8008ea2:	4b6e      	ldr	r3, [pc, #440]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	2380      	movs	r3, #128	; 0x80
 8008ea8:	00db      	lsls	r3, r3, #3
 8008eaa:	401a      	ands	r2, r3
 8008eac:	2380      	movs	r3, #128	; 0x80
 8008eae:	00db      	lsls	r3, r3, #3
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d107      	bne.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	2380      	movs	r3, #128	; 0x80
 8008eb8:	031b      	lsls	r3, r3, #12
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d102      	bne.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 8008ebe:	4b68      	ldr	r3, [pc, #416]	; (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8008ec0:	617b      	str	r3, [r7, #20]
 8008ec2:	e010      	b.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8008ec4:	4b65      	ldr	r3, [pc, #404]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ec8:	2202      	movs	r2, #2
 8008eca:	4013      	ands	r3, r2
 8008ecc:	2b02      	cmp	r3, #2
 8008ece:	d000      	beq.n	8008ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008ed0:	e0b8      	b.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	23c0      	movs	r3, #192	; 0xc0
 8008ed6:	031b      	lsls	r3, r3, #12
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d000      	beq.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008edc:	e0b2      	b.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 8008ede:	2380      	movs	r3, #128	; 0x80
 8008ee0:	021b      	lsls	r3, r3, #8
 8008ee2:	617b      	str	r3, [r7, #20]
        break;
 8008ee4:	e0ae      	b.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8008ee6:	e0ad      	b.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008ee8:	4b5c      	ldr	r3, [pc, #368]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008eea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008eec:	23c0      	movs	r3, #192	; 0xc0
 8008eee:	039b      	lsls	r3, r3, #14
 8008ef0:	4013      	ands	r3, r2
 8008ef2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d104      	bne.n	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008efa:	f7ff fb9f 	bl	800863c <HAL_RCC_GetPCLK1Freq>
 8008efe:	0003      	movs	r3, r0
 8008f00:	617b      	str	r3, [r7, #20]
        break;
 8008f02:	e0a1      	b.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8008f04:	4b55      	ldr	r3, [pc, #340]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f08:	2202      	movs	r2, #2
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	d108      	bne.n	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	2380      	movs	r3, #128	; 0x80
 8008f14:	035b      	lsls	r3, r3, #13
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d103      	bne.n	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 8008f1a:	23fa      	movs	r3, #250	; 0xfa
 8008f1c:	01db      	lsls	r3, r3, #7
 8008f1e:	617b      	str	r3, [r7, #20]
 8008f20:	e021      	b.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8008f22:	4b4e      	ldr	r3, [pc, #312]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	2380      	movs	r3, #128	; 0x80
 8008f28:	00db      	lsls	r3, r3, #3
 8008f2a:	401a      	ands	r2, r3
 8008f2c:	2380      	movs	r3, #128	; 0x80
 8008f2e:	00db      	lsls	r3, r3, #3
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d107      	bne.n	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	2380      	movs	r3, #128	; 0x80
 8008f38:	039b      	lsls	r3, r3, #14
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d102      	bne.n	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 8008f3e:	4b48      	ldr	r3, [pc, #288]	; (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8008f40:	617b      	str	r3, [r7, #20]
 8008f42:	e010      	b.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8008f44:	4b45      	ldr	r3, [pc, #276]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f48:	2202      	movs	r2, #2
 8008f4a:	4013      	ands	r3, r2
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d000      	beq.n	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8008f50:	e07a      	b.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	23c0      	movs	r3, #192	; 0xc0
 8008f56:	039b      	lsls	r3, r3, #14
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d000      	beq.n	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 8008f5c:	e074      	b.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 8008f5e:	2380      	movs	r3, #128	; 0x80
 8008f60:	021b      	lsls	r3, r3, #8
 8008f62:	617b      	str	r3, [r7, #20]
        break;
 8008f64:	e070      	b.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 8008f66:	e06f      	b.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 8008f68:	4b3c      	ldr	r3, [pc, #240]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f6c:	2380      	movs	r3, #128	; 0x80
 8008f6e:	03db      	lsls	r3, r3, #15
 8008f70:	4013      	ands	r3, r2
 8008f72:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	2380      	movs	r3, #128	; 0x80
 8008f78:	03db      	lsls	r3, r3, #15
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d11b      	bne.n	8008fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8008f7e:	4b37      	ldr	r3, [pc, #220]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f80:	68da      	ldr	r2, [r3, #12]
 8008f82:	2380      	movs	r3, #128	; 0x80
 8008f84:	045b      	lsls	r3, r3, #17
 8008f86:	4013      	ands	r3, r2
 8008f88:	d060      	beq.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008f8a:	4b34      	ldr	r3, [pc, #208]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	0a1b      	lsrs	r3, r3, #8
 8008f90:	227f      	movs	r2, #127	; 0x7f
 8008f92:	4013      	ands	r3, r2
 8008f94:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	435a      	muls	r2, r3
 8008f9c:	4b2f      	ldr	r3, [pc, #188]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	0e5b      	lsrs	r3, r3, #25
 8008fa2:	2107      	movs	r1, #7
 8008fa4:	400b      	ands	r3, r1
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	0019      	movs	r1, r3
 8008faa:	0010      	movs	r0, r2
 8008fac:	f7f7 f8aa 	bl	8000104 <__udivsi3>
 8008fb0:	0003      	movs	r3, r0
 8008fb2:	617b      	str	r3, [r7, #20]
        break;
 8008fb4:	e04a      	b.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d147      	bne.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008fbc:	f7ff fb3e 	bl	800863c <HAL_RCC_GetPCLK1Freq>
 8008fc0:	0003      	movs	r3, r0
 8008fc2:	617b      	str	r3, [r7, #20]
        break;
 8008fc4:	e042      	b.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 8008fc6:	4b25      	ldr	r3, [pc, #148]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008fc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008fca:	2380      	movs	r3, #128	; 0x80
 8008fcc:	045b      	lsls	r3, r3, #17
 8008fce:	4013      	ands	r3, r2
 8008fd0:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	2380      	movs	r3, #128	; 0x80
 8008fd6:	045b      	lsls	r3, r3, #17
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d11b      	bne.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8008fdc:	4b1f      	ldr	r3, [pc, #124]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008fde:	68da      	ldr	r2, [r3, #12]
 8008fe0:	2380      	movs	r3, #128	; 0x80
 8008fe2:	045b      	lsls	r3, r3, #17
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	d033      	beq.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008fe8:	4b1c      	ldr	r3, [pc, #112]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	0a1b      	lsrs	r3, r3, #8
 8008fee:	227f      	movs	r2, #127	; 0x7f
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	435a      	muls	r2, r3
 8008ffa:	4b18      	ldr	r3, [pc, #96]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	0e5b      	lsrs	r3, r3, #25
 8009000:	2107      	movs	r1, #7
 8009002:	400b      	ands	r3, r1
 8009004:	3301      	adds	r3, #1
 8009006:	0019      	movs	r1, r3
 8009008:	0010      	movs	r0, r2
 800900a:	f7f7 f87b 	bl	8000104 <__udivsi3>
 800900e:	0003      	movs	r3, r0
 8009010:	617b      	str	r3, [r7, #20]
        break;
 8009012:	e01d      	b.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d11a      	bne.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 800901a:	f7ff fb0f 	bl	800863c <HAL_RCC_GetPCLK1Freq>
 800901e:	0003      	movs	r3, r0
 8009020:	617b      	str	r3, [r7, #20]
        break;
 8009022:	e015      	b.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 8009024:	46c0      	nop			; (mov r8, r8)
 8009026:	e014      	b.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009028:	46c0      	nop			; (mov r8, r8)
 800902a:	e012      	b.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800902c:	46c0      	nop			; (mov r8, r8)
 800902e:	e010      	b.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009030:	46c0      	nop			; (mov r8, r8)
 8009032:	e00e      	b.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009034:	46c0      	nop			; (mov r8, r8)
 8009036:	e00c      	b.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009038:	46c0      	nop			; (mov r8, r8)
 800903a:	e00a      	b.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800903c:	46c0      	nop			; (mov r8, r8)
 800903e:	e008      	b.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009040:	46c0      	nop			; (mov r8, r8)
 8009042:	e006      	b.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009044:	46c0      	nop			; (mov r8, r8)
 8009046:	e004      	b.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009048:	46c0      	nop			; (mov r8, r8)
 800904a:	e002      	b.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800904c:	46c0      	nop			; (mov r8, r8)
 800904e:	e000      	b.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009050:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 8009052:	697b      	ldr	r3, [r7, #20]
}
 8009054:	0018      	movs	r0, r3
 8009056:	46bd      	mov	sp, r7
 8009058:	b006      	add	sp, #24
 800905a:	bd80      	pop	{r7, pc}
 800905c:	40021000 	.word	0x40021000
 8009060:	00f42400 	.word	0x00f42400
 8009064:	0000bb80 	.word	0x0000bb80

08009068 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d101      	bne.n	800907a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009076:	2301      	movs	r3, #1
 8009078:	e0a8      	b.n	80091cc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907e:	2b00      	cmp	r3, #0
 8009080:	d109      	bne.n	8009096 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	685a      	ldr	r2, [r3, #4]
 8009086:	2382      	movs	r3, #130	; 0x82
 8009088:	005b      	lsls	r3, r3, #1
 800908a:	429a      	cmp	r2, r3
 800908c:	d009      	beq.n	80090a2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	61da      	str	r2, [r3, #28]
 8009094:	e005      	b.n	80090a2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	225d      	movs	r2, #93	; 0x5d
 80090ac:	5c9b      	ldrb	r3, [r3, r2]
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d107      	bne.n	80090c4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	225c      	movs	r2, #92	; 0x5c
 80090b8:	2100      	movs	r1, #0
 80090ba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	0018      	movs	r0, r3
 80090c0:	f7fb fdfe 	bl	8004cc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	225d      	movs	r2, #93	; 0x5d
 80090c8:	2102      	movs	r1, #2
 80090ca:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2140      	movs	r1, #64	; 0x40
 80090d8:	438a      	bics	r2, r1
 80090da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	68da      	ldr	r2, [r3, #12]
 80090e0:	23e0      	movs	r3, #224	; 0xe0
 80090e2:	00db      	lsls	r3, r3, #3
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d902      	bls.n	80090ee <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80090e8:	2300      	movs	r3, #0
 80090ea:	60fb      	str	r3, [r7, #12]
 80090ec:	e002      	b.n	80090f4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80090ee:	2380      	movs	r3, #128	; 0x80
 80090f0:	015b      	lsls	r3, r3, #5
 80090f2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	68da      	ldr	r2, [r3, #12]
 80090f8:	23f0      	movs	r3, #240	; 0xf0
 80090fa:	011b      	lsls	r3, r3, #4
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d008      	beq.n	8009112 <HAL_SPI_Init+0xaa>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	68da      	ldr	r2, [r3, #12]
 8009104:	23e0      	movs	r3, #224	; 0xe0
 8009106:	00db      	lsls	r3, r3, #3
 8009108:	429a      	cmp	r2, r3
 800910a:	d002      	beq.n	8009112 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	685a      	ldr	r2, [r3, #4]
 8009116:	2382      	movs	r3, #130	; 0x82
 8009118:	005b      	lsls	r3, r3, #1
 800911a:	401a      	ands	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6899      	ldr	r1, [r3, #8]
 8009120:	2384      	movs	r3, #132	; 0x84
 8009122:	021b      	lsls	r3, r3, #8
 8009124:	400b      	ands	r3, r1
 8009126:	431a      	orrs	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	691b      	ldr	r3, [r3, #16]
 800912c:	2102      	movs	r1, #2
 800912e:	400b      	ands	r3, r1
 8009130:	431a      	orrs	r2, r3
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	695b      	ldr	r3, [r3, #20]
 8009136:	2101      	movs	r1, #1
 8009138:	400b      	ands	r3, r1
 800913a:	431a      	orrs	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6999      	ldr	r1, [r3, #24]
 8009140:	2380      	movs	r3, #128	; 0x80
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	400b      	ands	r3, r1
 8009146:	431a      	orrs	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	69db      	ldr	r3, [r3, #28]
 800914c:	2138      	movs	r1, #56	; 0x38
 800914e:	400b      	ands	r3, r1
 8009150:	431a      	orrs	r2, r3
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6a1b      	ldr	r3, [r3, #32]
 8009156:	2180      	movs	r1, #128	; 0x80
 8009158:	400b      	ands	r3, r1
 800915a:	431a      	orrs	r2, r3
 800915c:	0011      	movs	r1, r2
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009162:	2380      	movs	r3, #128	; 0x80
 8009164:	019b      	lsls	r3, r3, #6
 8009166:	401a      	ands	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	430a      	orrs	r2, r1
 800916e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	699b      	ldr	r3, [r3, #24]
 8009174:	0c1b      	lsrs	r3, r3, #16
 8009176:	2204      	movs	r2, #4
 8009178:	401a      	ands	r2, r3
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917e:	2110      	movs	r1, #16
 8009180:	400b      	ands	r3, r1
 8009182:	431a      	orrs	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009188:	2108      	movs	r1, #8
 800918a:	400b      	ands	r3, r1
 800918c:	431a      	orrs	r2, r3
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	68d9      	ldr	r1, [r3, #12]
 8009192:	23f0      	movs	r3, #240	; 0xf0
 8009194:	011b      	lsls	r3, r3, #4
 8009196:	400b      	ands	r3, r1
 8009198:	431a      	orrs	r2, r3
 800919a:	0011      	movs	r1, r2
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	2380      	movs	r3, #128	; 0x80
 80091a0:	015b      	lsls	r3, r3, #5
 80091a2:	401a      	ands	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	430a      	orrs	r2, r1
 80091aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	69da      	ldr	r2, [r3, #28]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4907      	ldr	r1, [pc, #28]	; (80091d4 <HAL_SPI_Init+0x16c>)
 80091b8:	400a      	ands	r2, r1
 80091ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	225d      	movs	r2, #93	; 0x5d
 80091c6:	2101      	movs	r1, #1
 80091c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	0018      	movs	r0, r3
 80091ce:	46bd      	mov	sp, r7
 80091d0:	b004      	add	sp, #16
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	fffff7ff 	.word	0xfffff7ff

080091d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b088      	sub	sp, #32
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	603b      	str	r3, [r7, #0]
 80091e4:	1dbb      	adds	r3, r7, #6
 80091e6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80091e8:	231f      	movs	r3, #31
 80091ea:	18fb      	adds	r3, r7, r3
 80091ec:	2200      	movs	r2, #0
 80091ee:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	225c      	movs	r2, #92	; 0x5c
 80091f4:	5c9b      	ldrb	r3, [r3, r2]
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d101      	bne.n	80091fe <HAL_SPI_Transmit+0x26>
 80091fa:	2302      	movs	r3, #2
 80091fc:	e140      	b.n	8009480 <HAL_SPI_Transmit+0x2a8>
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	225c      	movs	r2, #92	; 0x5c
 8009202:	2101      	movs	r1, #1
 8009204:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009206:	f7fc f867 	bl	80052d8 <HAL_GetTick>
 800920a:	0003      	movs	r3, r0
 800920c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800920e:	2316      	movs	r3, #22
 8009210:	18fb      	adds	r3, r7, r3
 8009212:	1dba      	adds	r2, r7, #6
 8009214:	8812      	ldrh	r2, [r2, #0]
 8009216:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	225d      	movs	r2, #93	; 0x5d
 800921c:	5c9b      	ldrb	r3, [r3, r2]
 800921e:	b2db      	uxtb	r3, r3
 8009220:	2b01      	cmp	r3, #1
 8009222:	d004      	beq.n	800922e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8009224:	231f      	movs	r3, #31
 8009226:	18fb      	adds	r3, r7, r3
 8009228:	2202      	movs	r2, #2
 800922a:	701a      	strb	r2, [r3, #0]
    goto error;
 800922c:	e11d      	b.n	800946a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d003      	beq.n	800923c <HAL_SPI_Transmit+0x64>
 8009234:	1dbb      	adds	r3, r7, #6
 8009236:	881b      	ldrh	r3, [r3, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d104      	bne.n	8009246 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800923c:	231f      	movs	r3, #31
 800923e:	18fb      	adds	r3, r7, r3
 8009240:	2201      	movs	r2, #1
 8009242:	701a      	strb	r2, [r3, #0]
    goto error;
 8009244:	e111      	b.n	800946a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	225d      	movs	r2, #93	; 0x5d
 800924a:	2103      	movs	r1, #3
 800924c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	1dba      	adds	r2, r7, #6
 800925e:	8812      	ldrh	r2, [r2, #0]
 8009260:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	1dba      	adds	r2, r7, #6
 8009266:	8812      	ldrh	r2, [r2, #0]
 8009268:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2244      	movs	r2, #68	; 0x44
 8009274:	2100      	movs	r1, #0
 8009276:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2246      	movs	r2, #70	; 0x46
 800927c:	2100      	movs	r1, #0
 800927e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2200      	movs	r2, #0
 8009284:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2200      	movs	r2, #0
 800928a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	689a      	ldr	r2, [r3, #8]
 8009290:	2380      	movs	r3, #128	; 0x80
 8009292:	021b      	lsls	r3, r3, #8
 8009294:	429a      	cmp	r2, r3
 8009296:	d110      	bne.n	80092ba <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2140      	movs	r1, #64	; 0x40
 80092a4:	438a      	bics	r2, r1
 80092a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	2180      	movs	r1, #128	; 0x80
 80092b4:	01c9      	lsls	r1, r1, #7
 80092b6:	430a      	orrs	r2, r1
 80092b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2240      	movs	r2, #64	; 0x40
 80092c2:	4013      	ands	r3, r2
 80092c4:	2b40      	cmp	r3, #64	; 0x40
 80092c6:	d007      	beq.n	80092d8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2140      	movs	r1, #64	; 0x40
 80092d4:	430a      	orrs	r2, r1
 80092d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	68da      	ldr	r2, [r3, #12]
 80092dc:	23e0      	movs	r3, #224	; 0xe0
 80092de:	00db      	lsls	r3, r3, #3
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d94e      	bls.n	8009382 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d004      	beq.n	80092f6 <HAL_SPI_Transmit+0x11e>
 80092ec:	2316      	movs	r3, #22
 80092ee:	18fb      	adds	r3, r7, r3
 80092f0:	881b      	ldrh	r3, [r3, #0]
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d13f      	bne.n	8009376 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092fa:	881a      	ldrh	r2, [r3, #0]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009306:	1c9a      	adds	r2, r3, #2
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009310:	b29b      	uxth	r3, r3
 8009312:	3b01      	subs	r3, #1
 8009314:	b29a      	uxth	r2, r3
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800931a:	e02c      	b.n	8009376 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	2202      	movs	r2, #2
 8009324:	4013      	ands	r3, r2
 8009326:	2b02      	cmp	r3, #2
 8009328:	d112      	bne.n	8009350 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800932e:	881a      	ldrh	r2, [r3, #0]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800933a:	1c9a      	adds	r2, r3, #2
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009344:	b29b      	uxth	r3, r3
 8009346:	3b01      	subs	r3, #1
 8009348:	b29a      	uxth	r2, r3
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800934e:	e012      	b.n	8009376 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009350:	f7fb ffc2 	bl	80052d8 <HAL_GetTick>
 8009354:	0002      	movs	r2, r0
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	1ad3      	subs	r3, r2, r3
 800935a:	683a      	ldr	r2, [r7, #0]
 800935c:	429a      	cmp	r2, r3
 800935e:	d802      	bhi.n	8009366 <HAL_SPI_Transmit+0x18e>
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	3301      	adds	r3, #1
 8009364:	d102      	bne.n	800936c <HAL_SPI_Transmit+0x194>
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d104      	bne.n	8009376 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800936c:	231f      	movs	r3, #31
 800936e:	18fb      	adds	r3, r7, r3
 8009370:	2203      	movs	r2, #3
 8009372:	701a      	strb	r2, [r3, #0]
          goto error;
 8009374:	e079      	b.n	800946a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800937a:	b29b      	uxth	r3, r3
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1cd      	bne.n	800931c <HAL_SPI_Transmit+0x144>
 8009380:	e04f      	b.n	8009422 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d004      	beq.n	8009394 <HAL_SPI_Transmit+0x1bc>
 800938a:	2316      	movs	r3, #22
 800938c:	18fb      	adds	r3, r7, r3
 800938e:	881b      	ldrh	r3, [r3, #0]
 8009390:	2b01      	cmp	r3, #1
 8009392:	d141      	bne.n	8009418 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	330c      	adds	r3, #12
 800939e:	7812      	ldrb	r2, [r2, #0]
 80093a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a6:	1c5a      	adds	r2, r3, #1
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	3b01      	subs	r3, #1
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80093ba:	e02d      	b.n	8009418 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	2202      	movs	r2, #2
 80093c4:	4013      	ands	r3, r2
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	d113      	bne.n	80093f2 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	330c      	adds	r3, #12
 80093d4:	7812      	ldrb	r2, [r2, #0]
 80093d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093dc:	1c5a      	adds	r2, r3, #1
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	3b01      	subs	r3, #1
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80093f0:	e012      	b.n	8009418 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093f2:	f7fb ff71 	bl	80052d8 <HAL_GetTick>
 80093f6:	0002      	movs	r2, r0
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	683a      	ldr	r2, [r7, #0]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d802      	bhi.n	8009408 <HAL_SPI_Transmit+0x230>
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	3301      	adds	r3, #1
 8009406:	d102      	bne.n	800940e <HAL_SPI_Transmit+0x236>
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d104      	bne.n	8009418 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800940e:	231f      	movs	r3, #31
 8009410:	18fb      	adds	r3, r7, r3
 8009412:	2203      	movs	r2, #3
 8009414:	701a      	strb	r2, [r3, #0]
          goto error;
 8009416:	e028      	b.n	800946a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800941c:	b29b      	uxth	r3, r3
 800941e:	2b00      	cmp	r3, #0
 8009420:	d1cc      	bne.n	80093bc <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009422:	69ba      	ldr	r2, [r7, #24]
 8009424:	6839      	ldr	r1, [r7, #0]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	0018      	movs	r0, r3
 800942a:	f000 fdf5 	bl	800a018 <SPI_EndRxTxTransaction>
 800942e:	1e03      	subs	r3, r0, #0
 8009430:	d002      	beq.n	8009438 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2220      	movs	r2, #32
 8009436:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d10a      	bne.n	8009456 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009440:	2300      	movs	r3, #0
 8009442:	613b      	str	r3, [r7, #16]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	613b      	str	r3, [r7, #16]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	613b      	str	r3, [r7, #16]
 8009454:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800945a:	2b00      	cmp	r3, #0
 800945c:	d004      	beq.n	8009468 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800945e:	231f      	movs	r3, #31
 8009460:	18fb      	adds	r3, r7, r3
 8009462:	2201      	movs	r2, #1
 8009464:	701a      	strb	r2, [r3, #0]
 8009466:	e000      	b.n	800946a <HAL_SPI_Transmit+0x292>
  }

error:
 8009468:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	225d      	movs	r2, #93	; 0x5d
 800946e:	2101      	movs	r1, #1
 8009470:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	225c      	movs	r2, #92	; 0x5c
 8009476:	2100      	movs	r1, #0
 8009478:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800947a:	231f      	movs	r3, #31
 800947c:	18fb      	adds	r3, r7, r3
 800947e:	781b      	ldrb	r3, [r3, #0]
}
 8009480:	0018      	movs	r0, r3
 8009482:	46bd      	mov	sp, r7
 8009484:	b008      	add	sp, #32
 8009486:	bd80      	pop	{r7, pc}

08009488 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009488:	b590      	push	{r4, r7, lr}
 800948a:	b089      	sub	sp, #36	; 0x24
 800948c:	af02      	add	r7, sp, #8
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	603b      	str	r3, [r7, #0]
 8009494:	1dbb      	adds	r3, r7, #6
 8009496:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009498:	2317      	movs	r3, #23
 800949a:	18fb      	adds	r3, r7, r3
 800949c:	2200      	movs	r2, #0
 800949e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	685a      	ldr	r2, [r3, #4]
 80094a4:	2382      	movs	r3, #130	; 0x82
 80094a6:	005b      	lsls	r3, r3, #1
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d113      	bne.n	80094d4 <HAL_SPI_Receive+0x4c>
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d10f      	bne.n	80094d4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	225d      	movs	r2, #93	; 0x5d
 80094b8:	2104      	movs	r1, #4
 80094ba:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80094bc:	1dbb      	adds	r3, r7, #6
 80094be:	881c      	ldrh	r4, [r3, #0]
 80094c0:	68ba      	ldr	r2, [r7, #8]
 80094c2:	68b9      	ldr	r1, [r7, #8]
 80094c4:	68f8      	ldr	r0, [r7, #12]
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	9300      	str	r3, [sp, #0]
 80094ca:	0023      	movs	r3, r4
 80094cc:	f000 f928 	bl	8009720 <HAL_SPI_TransmitReceive>
 80094d0:	0003      	movs	r3, r0
 80094d2:	e11c      	b.n	800970e <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	225c      	movs	r2, #92	; 0x5c
 80094d8:	5c9b      	ldrb	r3, [r3, r2]
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d101      	bne.n	80094e2 <HAL_SPI_Receive+0x5a>
 80094de:	2302      	movs	r3, #2
 80094e0:	e115      	b.n	800970e <HAL_SPI_Receive+0x286>
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	225c      	movs	r2, #92	; 0x5c
 80094e6:	2101      	movs	r1, #1
 80094e8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80094ea:	f7fb fef5 	bl	80052d8 <HAL_GetTick>
 80094ee:	0003      	movs	r3, r0
 80094f0:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	225d      	movs	r2, #93	; 0x5d
 80094f6:	5c9b      	ldrb	r3, [r3, r2]
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d004      	beq.n	8009508 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80094fe:	2317      	movs	r3, #23
 8009500:	18fb      	adds	r3, r7, r3
 8009502:	2202      	movs	r2, #2
 8009504:	701a      	strb	r2, [r3, #0]
    goto error;
 8009506:	e0f7      	b.n	80096f8 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d003      	beq.n	8009516 <HAL_SPI_Receive+0x8e>
 800950e:	1dbb      	adds	r3, r7, #6
 8009510:	881b      	ldrh	r3, [r3, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d104      	bne.n	8009520 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8009516:	2317      	movs	r3, #23
 8009518:	18fb      	adds	r3, r7, r3
 800951a:	2201      	movs	r2, #1
 800951c:	701a      	strb	r2, [r3, #0]
    goto error;
 800951e:	e0eb      	b.n	80096f8 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	225d      	movs	r2, #93	; 0x5d
 8009524:	2104      	movs	r1, #4
 8009526:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2200      	movs	r2, #0
 800952c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	1dba      	adds	r2, r7, #6
 8009538:	2144      	movs	r1, #68	; 0x44
 800953a:	8812      	ldrh	r2, [r2, #0]
 800953c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	1dba      	adds	r2, r7, #6
 8009542:	2146      	movs	r1, #70	; 0x46
 8009544:	8812      	ldrh	r2, [r2, #0]
 8009546:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2200      	movs	r2, #0
 800954c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2200      	movs	r2, #0
 8009558:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	68da      	ldr	r2, [r3, #12]
 800956a:	23e0      	movs	r3, #224	; 0xe0
 800956c:	00db      	lsls	r3, r3, #3
 800956e:	429a      	cmp	r2, r3
 8009570:	d908      	bls.n	8009584 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	685a      	ldr	r2, [r3, #4]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4966      	ldr	r1, [pc, #408]	; (8009718 <HAL_SPI_Receive+0x290>)
 800957e:	400a      	ands	r2, r1
 8009580:	605a      	str	r2, [r3, #4]
 8009582:	e008      	b.n	8009596 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	685a      	ldr	r2, [r3, #4]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	2180      	movs	r1, #128	; 0x80
 8009590:	0149      	lsls	r1, r1, #5
 8009592:	430a      	orrs	r2, r1
 8009594:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	689a      	ldr	r2, [r3, #8]
 800959a:	2380      	movs	r3, #128	; 0x80
 800959c:	021b      	lsls	r3, r3, #8
 800959e:	429a      	cmp	r2, r3
 80095a0:	d10f      	bne.n	80095c2 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2140      	movs	r1, #64	; 0x40
 80095ae:	438a      	bics	r2, r1
 80095b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4957      	ldr	r1, [pc, #348]	; (800971c <HAL_SPI_Receive+0x294>)
 80095be:	400a      	ands	r2, r1
 80095c0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2240      	movs	r2, #64	; 0x40
 80095ca:	4013      	ands	r3, r2
 80095cc:	2b40      	cmp	r3, #64	; 0x40
 80095ce:	d007      	beq.n	80095e0 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2140      	movs	r1, #64	; 0x40
 80095dc:	430a      	orrs	r2, r1
 80095de:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	68da      	ldr	r2, [r3, #12]
 80095e4:	23e0      	movs	r3, #224	; 0xe0
 80095e6:	00db      	lsls	r3, r3, #3
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d900      	bls.n	80095ee <HAL_SPI_Receive+0x166>
 80095ec:	e069      	b.n	80096c2 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80095ee:	e031      	b.n	8009654 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	2201      	movs	r2, #1
 80095f8:	4013      	ands	r3, r2
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d117      	bne.n	800962e <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	330c      	adds	r3, #12
 8009604:	001a      	movs	r2, r3
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960a:	7812      	ldrb	r2, [r2, #0]
 800960c:	b2d2      	uxtb	r2, r2
 800960e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009614:	1c5a      	adds	r2, r3, #1
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2246      	movs	r2, #70	; 0x46
 800961e:	5a9b      	ldrh	r3, [r3, r2]
 8009620:	b29b      	uxth	r3, r3
 8009622:	3b01      	subs	r3, #1
 8009624:	b299      	uxth	r1, r3
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2246      	movs	r2, #70	; 0x46
 800962a:	5299      	strh	r1, [r3, r2]
 800962c:	e012      	b.n	8009654 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800962e:	f7fb fe53 	bl	80052d8 <HAL_GetTick>
 8009632:	0002      	movs	r2, r0
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	1ad3      	subs	r3, r2, r3
 8009638:	683a      	ldr	r2, [r7, #0]
 800963a:	429a      	cmp	r2, r3
 800963c:	d802      	bhi.n	8009644 <HAL_SPI_Receive+0x1bc>
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	3301      	adds	r3, #1
 8009642:	d102      	bne.n	800964a <HAL_SPI_Receive+0x1c2>
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d104      	bne.n	8009654 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800964a:	2317      	movs	r3, #23
 800964c:	18fb      	adds	r3, r7, r3
 800964e:	2203      	movs	r2, #3
 8009650:	701a      	strb	r2, [r3, #0]
          goto error;
 8009652:	e051      	b.n	80096f8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2246      	movs	r2, #70	; 0x46
 8009658:	5a9b      	ldrh	r3, [r3, r2]
 800965a:	b29b      	uxth	r3, r3
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1c7      	bne.n	80095f0 <HAL_SPI_Receive+0x168>
 8009660:	e035      	b.n	80096ce <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	2201      	movs	r2, #1
 800966a:	4013      	ands	r3, r2
 800966c:	2b01      	cmp	r3, #1
 800966e:	d115      	bne.n	800969c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	68da      	ldr	r2, [r3, #12]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800967a:	b292      	uxth	r2, r2
 800967c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009682:	1c9a      	adds	r2, r3, #2
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2246      	movs	r2, #70	; 0x46
 800968c:	5a9b      	ldrh	r3, [r3, r2]
 800968e:	b29b      	uxth	r3, r3
 8009690:	3b01      	subs	r3, #1
 8009692:	b299      	uxth	r1, r3
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2246      	movs	r2, #70	; 0x46
 8009698:	5299      	strh	r1, [r3, r2]
 800969a:	e012      	b.n	80096c2 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800969c:	f7fb fe1c 	bl	80052d8 <HAL_GetTick>
 80096a0:	0002      	movs	r2, r0
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	1ad3      	subs	r3, r2, r3
 80096a6:	683a      	ldr	r2, [r7, #0]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d802      	bhi.n	80096b2 <HAL_SPI_Receive+0x22a>
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	3301      	adds	r3, #1
 80096b0:	d102      	bne.n	80096b8 <HAL_SPI_Receive+0x230>
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d104      	bne.n	80096c2 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80096b8:	2317      	movs	r3, #23
 80096ba:	18fb      	adds	r3, r7, r3
 80096bc:	2203      	movs	r2, #3
 80096be:	701a      	strb	r2, [r3, #0]
          goto error;
 80096c0:	e01a      	b.n	80096f8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2246      	movs	r2, #70	; 0x46
 80096c6:	5a9b      	ldrh	r3, [r3, r2]
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d1c9      	bne.n	8009662 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80096ce:	693a      	ldr	r2, [r7, #16]
 80096d0:	6839      	ldr	r1, [r7, #0]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	0018      	movs	r0, r3
 80096d6:	f000 fc41 	bl	8009f5c <SPI_EndRxTransaction>
 80096da:	1e03      	subs	r3, r0, #0
 80096dc:	d002      	beq.n	80096e4 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2220      	movs	r2, #32
 80096e2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d004      	beq.n	80096f6 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80096ec:	2317      	movs	r3, #23
 80096ee:	18fb      	adds	r3, r7, r3
 80096f0:	2201      	movs	r2, #1
 80096f2:	701a      	strb	r2, [r3, #0]
 80096f4:	e000      	b.n	80096f8 <HAL_SPI_Receive+0x270>
  }

error :
 80096f6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	225d      	movs	r2, #93	; 0x5d
 80096fc:	2101      	movs	r1, #1
 80096fe:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	225c      	movs	r2, #92	; 0x5c
 8009704:	2100      	movs	r1, #0
 8009706:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009708:	2317      	movs	r3, #23
 800970a:	18fb      	adds	r3, r7, r3
 800970c:	781b      	ldrb	r3, [r3, #0]
}
 800970e:	0018      	movs	r0, r3
 8009710:	46bd      	mov	sp, r7
 8009712:	b007      	add	sp, #28
 8009714:	bd90      	pop	{r4, r7, pc}
 8009716:	46c0      	nop			; (mov r8, r8)
 8009718:	ffffefff 	.word	0xffffefff
 800971c:	ffffbfff 	.word	0xffffbfff

08009720 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b08a      	sub	sp, #40	; 0x28
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
 800972c:	001a      	movs	r2, r3
 800972e:	1cbb      	adds	r3, r7, #2
 8009730:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009732:	2301      	movs	r3, #1
 8009734:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009736:	2323      	movs	r3, #35	; 0x23
 8009738:	18fb      	adds	r3, r7, r3
 800973a:	2200      	movs	r2, #0
 800973c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	225c      	movs	r2, #92	; 0x5c
 8009742:	5c9b      	ldrb	r3, [r3, r2]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d101      	bne.n	800974c <HAL_SPI_TransmitReceive+0x2c>
 8009748:	2302      	movs	r3, #2
 800974a:	e1b5      	b.n	8009ab8 <HAL_SPI_TransmitReceive+0x398>
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	225c      	movs	r2, #92	; 0x5c
 8009750:	2101      	movs	r1, #1
 8009752:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009754:	f7fb fdc0 	bl	80052d8 <HAL_GetTick>
 8009758:	0003      	movs	r3, r0
 800975a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800975c:	201b      	movs	r0, #27
 800975e:	183b      	adds	r3, r7, r0
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	215d      	movs	r1, #93	; 0x5d
 8009764:	5c52      	ldrb	r2, [r2, r1]
 8009766:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800976e:	2312      	movs	r3, #18
 8009770:	18fb      	adds	r3, r7, r3
 8009772:	1cba      	adds	r2, r7, #2
 8009774:	8812      	ldrh	r2, [r2, #0]
 8009776:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009778:	183b      	adds	r3, r7, r0
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	2b01      	cmp	r3, #1
 800977e:	d011      	beq.n	80097a4 <HAL_SPI_TransmitReceive+0x84>
 8009780:	697a      	ldr	r2, [r7, #20]
 8009782:	2382      	movs	r3, #130	; 0x82
 8009784:	005b      	lsls	r3, r3, #1
 8009786:	429a      	cmp	r2, r3
 8009788:	d107      	bne.n	800979a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d103      	bne.n	800979a <HAL_SPI_TransmitReceive+0x7a>
 8009792:	183b      	adds	r3, r7, r0
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	2b04      	cmp	r3, #4
 8009798:	d004      	beq.n	80097a4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800979a:	2323      	movs	r3, #35	; 0x23
 800979c:	18fb      	adds	r3, r7, r3
 800979e:	2202      	movs	r2, #2
 80097a0:	701a      	strb	r2, [r3, #0]
    goto error;
 80097a2:	e17e      	b.n	8009aa2 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d006      	beq.n	80097b8 <HAL_SPI_TransmitReceive+0x98>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d003      	beq.n	80097b8 <HAL_SPI_TransmitReceive+0x98>
 80097b0:	1cbb      	adds	r3, r7, #2
 80097b2:	881b      	ldrh	r3, [r3, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d104      	bne.n	80097c2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80097b8:	2323      	movs	r3, #35	; 0x23
 80097ba:	18fb      	adds	r3, r7, r3
 80097bc:	2201      	movs	r2, #1
 80097be:	701a      	strb	r2, [r3, #0]
    goto error;
 80097c0:	e16f      	b.n	8009aa2 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	225d      	movs	r2, #93	; 0x5d
 80097c6:	5c9b      	ldrb	r3, [r3, r2]
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	2b04      	cmp	r3, #4
 80097cc:	d003      	beq.n	80097d6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	225d      	movs	r2, #93	; 0x5d
 80097d2:	2105      	movs	r1, #5
 80097d4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	1cba      	adds	r2, r7, #2
 80097e6:	2146      	movs	r1, #70	; 0x46
 80097e8:	8812      	ldrh	r2, [r2, #0]
 80097ea:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	1cba      	adds	r2, r7, #2
 80097f0:	2144      	movs	r1, #68	; 0x44
 80097f2:	8812      	ldrh	r2, [r2, #0]
 80097f4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	68ba      	ldr	r2, [r7, #8]
 80097fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	1cba      	adds	r2, r7, #2
 8009800:	8812      	ldrh	r2, [r2, #0]
 8009802:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	1cba      	adds	r2, r7, #2
 8009808:	8812      	ldrh	r2, [r2, #0]
 800980a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2200      	movs	r2, #0
 8009816:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	68da      	ldr	r2, [r3, #12]
 800981c:	23e0      	movs	r3, #224	; 0xe0
 800981e:	00db      	lsls	r3, r3, #3
 8009820:	429a      	cmp	r2, r3
 8009822:	d908      	bls.n	8009836 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	685a      	ldr	r2, [r3, #4]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	49a4      	ldr	r1, [pc, #656]	; (8009ac0 <HAL_SPI_TransmitReceive+0x3a0>)
 8009830:	400a      	ands	r2, r1
 8009832:	605a      	str	r2, [r3, #4]
 8009834:	e008      	b.n	8009848 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	685a      	ldr	r2, [r3, #4]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2180      	movs	r1, #128	; 0x80
 8009842:	0149      	lsls	r1, r1, #5
 8009844:	430a      	orrs	r2, r1
 8009846:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2240      	movs	r2, #64	; 0x40
 8009850:	4013      	ands	r3, r2
 8009852:	2b40      	cmp	r3, #64	; 0x40
 8009854:	d007      	beq.n	8009866 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2140      	movs	r1, #64	; 0x40
 8009862:	430a      	orrs	r2, r1
 8009864:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	68da      	ldr	r2, [r3, #12]
 800986a:	23e0      	movs	r3, #224	; 0xe0
 800986c:	00db      	lsls	r3, r3, #3
 800986e:	429a      	cmp	r2, r3
 8009870:	d800      	bhi.n	8009874 <HAL_SPI_TransmitReceive+0x154>
 8009872:	e07f      	b.n	8009974 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d005      	beq.n	8009888 <HAL_SPI_TransmitReceive+0x168>
 800987c:	2312      	movs	r3, #18
 800987e:	18fb      	adds	r3, r7, r3
 8009880:	881b      	ldrh	r3, [r3, #0]
 8009882:	2b01      	cmp	r3, #1
 8009884:	d000      	beq.n	8009888 <HAL_SPI_TransmitReceive+0x168>
 8009886:	e069      	b.n	800995c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800988c:	881a      	ldrh	r2, [r3, #0]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009898:	1c9a      	adds	r2, r3, #2
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	3b01      	subs	r3, #1
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098ac:	e056      	b.n	800995c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	2202      	movs	r2, #2
 80098b6:	4013      	ands	r3, r2
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	d11b      	bne.n	80098f4 <HAL_SPI_TransmitReceive+0x1d4>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d016      	beq.n	80098f4 <HAL_SPI_TransmitReceive+0x1d4>
 80098c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d113      	bne.n	80098f4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d0:	881a      	ldrh	r2, [r3, #0]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098dc:	1c9a      	adds	r2, r3, #2
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	3b01      	subs	r3, #1
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80098f0:	2300      	movs	r3, #0
 80098f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	2201      	movs	r2, #1
 80098fc:	4013      	ands	r3, r2
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d11c      	bne.n	800993c <HAL_SPI_TransmitReceive+0x21c>
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2246      	movs	r2, #70	; 0x46
 8009906:	5a9b      	ldrh	r3, [r3, r2]
 8009908:	b29b      	uxth	r3, r3
 800990a:	2b00      	cmp	r3, #0
 800990c:	d016      	beq.n	800993c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	68da      	ldr	r2, [r3, #12]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009918:	b292      	uxth	r2, r2
 800991a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009920:	1c9a      	adds	r2, r3, #2
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2246      	movs	r2, #70	; 0x46
 800992a:	5a9b      	ldrh	r3, [r3, r2]
 800992c:	b29b      	uxth	r3, r3
 800992e:	3b01      	subs	r3, #1
 8009930:	b299      	uxth	r1, r3
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2246      	movs	r2, #70	; 0x46
 8009936:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009938:	2301      	movs	r3, #1
 800993a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800993c:	f7fb fccc 	bl	80052d8 <HAL_GetTick>
 8009940:	0002      	movs	r2, r0
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	1ad3      	subs	r3, r2, r3
 8009946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009948:	429a      	cmp	r2, r3
 800994a:	d807      	bhi.n	800995c <HAL_SPI_TransmitReceive+0x23c>
 800994c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994e:	3301      	adds	r3, #1
 8009950:	d004      	beq.n	800995c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8009952:	2323      	movs	r3, #35	; 0x23
 8009954:	18fb      	adds	r3, r7, r3
 8009956:	2203      	movs	r2, #3
 8009958:	701a      	strb	r2, [r3, #0]
        goto error;
 800995a:	e0a2      	b.n	8009aa2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009960:	b29b      	uxth	r3, r3
 8009962:	2b00      	cmp	r3, #0
 8009964:	d1a3      	bne.n	80098ae <HAL_SPI_TransmitReceive+0x18e>
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2246      	movs	r2, #70	; 0x46
 800996a:	5a9b      	ldrh	r3, [r3, r2]
 800996c:	b29b      	uxth	r3, r3
 800996e:	2b00      	cmp	r3, #0
 8009970:	d19d      	bne.n	80098ae <HAL_SPI_TransmitReceive+0x18e>
 8009972:	e085      	b.n	8009a80 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d005      	beq.n	8009988 <HAL_SPI_TransmitReceive+0x268>
 800997c:	2312      	movs	r3, #18
 800997e:	18fb      	adds	r3, r7, r3
 8009980:	881b      	ldrh	r3, [r3, #0]
 8009982:	2b01      	cmp	r3, #1
 8009984:	d000      	beq.n	8009988 <HAL_SPI_TransmitReceive+0x268>
 8009986:	e070      	b.n	8009a6a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	330c      	adds	r3, #12
 8009992:	7812      	ldrb	r2, [r2, #0]
 8009994:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800999a:	1c5a      	adds	r2, r3, #1
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	3b01      	subs	r3, #1
 80099a8:	b29a      	uxth	r2, r3
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099ae:	e05c      	b.n	8009a6a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	2202      	movs	r2, #2
 80099b8:	4013      	ands	r3, r2
 80099ba:	2b02      	cmp	r3, #2
 80099bc:	d11c      	bne.n	80099f8 <HAL_SPI_TransmitReceive+0x2d8>
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d017      	beq.n	80099f8 <HAL_SPI_TransmitReceive+0x2d8>
 80099c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d114      	bne.n	80099f8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	330c      	adds	r3, #12
 80099d8:	7812      	ldrb	r2, [r2, #0]
 80099da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e0:	1c5a      	adds	r2, r3, #1
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	3b01      	subs	r3, #1
 80099ee:	b29a      	uxth	r2, r3
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80099f4:	2300      	movs	r3, #0
 80099f6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	2201      	movs	r2, #1
 8009a00:	4013      	ands	r3, r2
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d11e      	bne.n	8009a44 <HAL_SPI_TransmitReceive+0x324>
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2246      	movs	r2, #70	; 0x46
 8009a0a:	5a9b      	ldrh	r3, [r3, r2]
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d018      	beq.n	8009a44 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	330c      	adds	r3, #12
 8009a18:	001a      	movs	r2, r3
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1e:	7812      	ldrb	r2, [r2, #0]
 8009a20:	b2d2      	uxtb	r2, r2
 8009a22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a28:	1c5a      	adds	r2, r3, #1
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2246      	movs	r2, #70	; 0x46
 8009a32:	5a9b      	ldrh	r3, [r3, r2]
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	3b01      	subs	r3, #1
 8009a38:	b299      	uxth	r1, r3
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2246      	movs	r2, #70	; 0x46
 8009a3e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a40:	2301      	movs	r3, #1
 8009a42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009a44:	f7fb fc48 	bl	80052d8 <HAL_GetTick>
 8009a48:	0002      	movs	r2, r0
 8009a4a:	69fb      	ldr	r3, [r7, #28]
 8009a4c:	1ad3      	subs	r3, r2, r3
 8009a4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d802      	bhi.n	8009a5a <HAL_SPI_TransmitReceive+0x33a>
 8009a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a56:	3301      	adds	r3, #1
 8009a58:	d102      	bne.n	8009a60 <HAL_SPI_TransmitReceive+0x340>
 8009a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d104      	bne.n	8009a6a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8009a60:	2323      	movs	r3, #35	; 0x23
 8009a62:	18fb      	adds	r3, r7, r3
 8009a64:	2203      	movs	r2, #3
 8009a66:	701a      	strb	r2, [r3, #0]
        goto error;
 8009a68:	e01b      	b.n	8009aa2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d19d      	bne.n	80099b0 <HAL_SPI_TransmitReceive+0x290>
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2246      	movs	r2, #70	; 0x46
 8009a78:	5a9b      	ldrh	r3, [r3, r2]
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d197      	bne.n	80099b0 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009a80:	69fa      	ldr	r2, [r7, #28]
 8009a82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	0018      	movs	r0, r3
 8009a88:	f000 fac6 	bl	800a018 <SPI_EndRxTxTransaction>
 8009a8c:	1e03      	subs	r3, r0, #0
 8009a8e:	d007      	beq.n	8009aa0 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8009a90:	2323      	movs	r3, #35	; 0x23
 8009a92:	18fb      	adds	r3, r7, r3
 8009a94:	2201      	movs	r2, #1
 8009a96:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2220      	movs	r2, #32
 8009a9c:	661a      	str	r2, [r3, #96]	; 0x60
 8009a9e:	e000      	b.n	8009aa2 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8009aa0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	225d      	movs	r2, #93	; 0x5d
 8009aa6:	2101      	movs	r1, #1
 8009aa8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	225c      	movs	r2, #92	; 0x5c
 8009aae:	2100      	movs	r1, #0
 8009ab0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009ab2:	2323      	movs	r3, #35	; 0x23
 8009ab4:	18fb      	adds	r3, r7, r3
 8009ab6:	781b      	ldrb	r3, [r3, #0]
}
 8009ab8:	0018      	movs	r0, r3
 8009aba:	46bd      	mov	sp, r7
 8009abc:	b00a      	add	sp, #40	; 0x28
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	ffffefff 	.word	0xffffefff

08009ac4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b088      	sub	sp, #32
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	099b      	lsrs	r3, r3, #6
 8009ae0:	001a      	movs	r2, r3
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	4013      	ands	r3, r2
 8009ae6:	d10f      	bne.n	8009b08 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	2201      	movs	r2, #1
 8009aec:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009aee:	d00b      	beq.n	8009b08 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	099b      	lsrs	r3, r3, #6
 8009af4:	001a      	movs	r2, r3
 8009af6:	2301      	movs	r3, #1
 8009af8:	4013      	ands	r3, r2
 8009afa:	d005      	beq.n	8009b08 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	0010      	movs	r0, r2
 8009b04:	4798      	blx	r3
    return;
 8009b06:	e0d5      	b.n	8009cb4 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	085b      	lsrs	r3, r3, #1
 8009b0c:	001a      	movs	r2, r3
 8009b0e:	2301      	movs	r3, #1
 8009b10:	4013      	ands	r3, r2
 8009b12:	d00b      	beq.n	8009b2c <HAL_SPI_IRQHandler+0x68>
 8009b14:	69fb      	ldr	r3, [r7, #28]
 8009b16:	09db      	lsrs	r3, r3, #7
 8009b18:	001a      	movs	r2, r3
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	4013      	ands	r3, r2
 8009b1e:	d005      	beq.n	8009b2c <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	0010      	movs	r0, r2
 8009b28:	4798      	blx	r3
    return;
 8009b2a:	e0c3      	b.n	8009cb4 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009b2c:	69bb      	ldr	r3, [r7, #24]
 8009b2e:	095b      	lsrs	r3, r3, #5
 8009b30:	001a      	movs	r2, r3
 8009b32:	2301      	movs	r3, #1
 8009b34:	4013      	ands	r3, r2
 8009b36:	d10c      	bne.n	8009b52 <HAL_SPI_IRQHandler+0x8e>
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	099b      	lsrs	r3, r3, #6
 8009b3c:	001a      	movs	r2, r3
 8009b3e:	2301      	movs	r3, #1
 8009b40:	4013      	ands	r3, r2
 8009b42:	d106      	bne.n	8009b52 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	0a1b      	lsrs	r3, r3, #8
 8009b48:	001a      	movs	r2, r3
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	4013      	ands	r3, r2
 8009b4e:	d100      	bne.n	8009b52 <HAL_SPI_IRQHandler+0x8e>
 8009b50:	e0b0      	b.n	8009cb4 <HAL_SPI_IRQHandler+0x1f0>
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	095b      	lsrs	r3, r3, #5
 8009b56:	001a      	movs	r2, r3
 8009b58:	2301      	movs	r3, #1
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	d100      	bne.n	8009b60 <HAL_SPI_IRQHandler+0x9c>
 8009b5e:	e0a9      	b.n	8009cb4 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	099b      	lsrs	r3, r3, #6
 8009b64:	001a      	movs	r2, r3
 8009b66:	2301      	movs	r3, #1
 8009b68:	4013      	ands	r3, r2
 8009b6a:	d023      	beq.n	8009bb4 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	225d      	movs	r2, #93	; 0x5d
 8009b70:	5c9b      	ldrb	r3, [r3, r2]
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	2b03      	cmp	r3, #3
 8009b76:	d011      	beq.n	8009b9c <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b7c:	2204      	movs	r2, #4
 8009b7e:	431a      	orrs	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009b84:	2300      	movs	r3, #0
 8009b86:	617b      	str	r3, [r7, #20]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	617b      	str	r3, [r7, #20]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	617b      	str	r3, [r7, #20]
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	e00b      	b.n	8009bb4 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	613b      	str	r3, [r7, #16]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	613b      	str	r3, [r7, #16]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	613b      	str	r3, [r7, #16]
 8009bb0:	693b      	ldr	r3, [r7, #16]
        return;
 8009bb2:	e07f      	b.n	8009cb4 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009bb4:	69bb      	ldr	r3, [r7, #24]
 8009bb6:	095b      	lsrs	r3, r3, #5
 8009bb8:	001a      	movs	r2, r3
 8009bba:	2301      	movs	r3, #1
 8009bbc:	4013      	ands	r3, r2
 8009bbe:	d014      	beq.n	8009bea <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	431a      	orrs	r2, r3
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009bcc:	2300      	movs	r3, #0
 8009bce:	60fb      	str	r3, [r7, #12]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	60fb      	str	r3, [r7, #12]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2140      	movs	r1, #64	; 0x40
 8009be4:	438a      	bics	r2, r1
 8009be6:	601a      	str	r2, [r3, #0]
 8009be8:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009bea:	69bb      	ldr	r3, [r7, #24]
 8009bec:	0a1b      	lsrs	r3, r3, #8
 8009bee:	001a      	movs	r2, r3
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	4013      	ands	r3, r2
 8009bf4:	d00c      	beq.n	8009c10 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bfa:	2208      	movs	r2, #8
 8009bfc:	431a      	orrs	r2, r3
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009c02:	2300      	movs	r3, #0
 8009c04:	60bb      	str	r3, [r7, #8]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	60bb      	str	r3, [r7, #8]
 8009c0e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d04c      	beq.n	8009cb2 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	685a      	ldr	r2, [r3, #4]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	21e0      	movs	r1, #224	; 0xe0
 8009c24:	438a      	bics	r2, r1
 8009c26:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	225d      	movs	r2, #93	; 0x5d
 8009c2c:	2101      	movs	r1, #1
 8009c2e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009c30:	69fb      	ldr	r3, [r7, #28]
 8009c32:	2202      	movs	r2, #2
 8009c34:	4013      	ands	r3, r2
 8009c36:	d103      	bne.n	8009c40 <HAL_SPI_IRQHandler+0x17c>
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	d032      	beq.n	8009ca6 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	685a      	ldr	r2, [r3, #4]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2103      	movs	r1, #3
 8009c4c:	438a      	bics	r2, r1
 8009c4e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d010      	beq.n	8009c7a <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c5c:	4a17      	ldr	r2, [pc, #92]	; (8009cbc <HAL_SPI_IRQHandler+0x1f8>)
 8009c5e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c64:	0018      	movs	r0, r3
 8009c66:	f7fb ffc9 	bl	8005bfc <HAL_DMA_Abort_IT>
 8009c6a:	1e03      	subs	r3, r0, #0
 8009c6c:	d005      	beq.n	8009c7a <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c72:	2240      	movs	r2, #64	; 0x40
 8009c74:	431a      	orrs	r2, r3
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d016      	beq.n	8009cb0 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c86:	4a0d      	ldr	r2, [pc, #52]	; (8009cbc <HAL_SPI_IRQHandler+0x1f8>)
 8009c88:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c8e:	0018      	movs	r0, r3
 8009c90:	f7fb ffb4 	bl	8005bfc <HAL_DMA_Abort_IT>
 8009c94:	1e03      	subs	r3, r0, #0
 8009c96:	d00b      	beq.n	8009cb0 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c9c:	2240      	movs	r2, #64	; 0x40
 8009c9e:	431a      	orrs	r2, r3
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009ca4:	e004      	b.n	8009cb0 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	0018      	movs	r0, r3
 8009caa:	f000 f809 	bl	8009cc0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009cae:	e000      	b.n	8009cb2 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8009cb0:	46c0      	nop			; (mov r8, r8)
    return;
 8009cb2:	46c0      	nop			; (mov r8, r8)
  }
}
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	b008      	add	sp, #32
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	46c0      	nop			; (mov r8, r8)
 8009cbc:	08009cd1 	.word	0x08009cd1

08009cc0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009cc8:	46c0      	nop			; (mov r8, r8)
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	b002      	add	sp, #8
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cdc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2246      	movs	r2, #70	; 0x46
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	0018      	movs	r0, r3
 8009cf0:	f7ff ffe6 	bl	8009cc0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009cf4:	46c0      	nop			; (mov r8, r8)
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	b004      	add	sp, #16
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b088      	sub	sp, #32
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	603b      	str	r3, [r7, #0]
 8009d08:	1dfb      	adds	r3, r7, #7
 8009d0a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009d0c:	f7fb fae4 	bl	80052d8 <HAL_GetTick>
 8009d10:	0002      	movs	r2, r0
 8009d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d14:	1a9b      	subs	r3, r3, r2
 8009d16:	683a      	ldr	r2, [r7, #0]
 8009d18:	18d3      	adds	r3, r2, r3
 8009d1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009d1c:	f7fb fadc 	bl	80052d8 <HAL_GetTick>
 8009d20:	0003      	movs	r3, r0
 8009d22:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009d24:	4b3a      	ldr	r3, [pc, #232]	; (8009e10 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	015b      	lsls	r3, r3, #5
 8009d2a:	0d1b      	lsrs	r3, r3, #20
 8009d2c:	69fa      	ldr	r2, [r7, #28]
 8009d2e:	4353      	muls	r3, r2
 8009d30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009d32:	e058      	b.n	8009de6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	3301      	adds	r3, #1
 8009d38:	d055      	beq.n	8009de6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009d3a:	f7fb facd 	bl	80052d8 <HAL_GetTick>
 8009d3e:	0002      	movs	r2, r0
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	1ad3      	subs	r3, r2, r3
 8009d44:	69fa      	ldr	r2, [r7, #28]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d902      	bls.n	8009d50 <SPI_WaitFlagStateUntilTimeout+0x54>
 8009d4a:	69fb      	ldr	r3, [r7, #28]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d142      	bne.n	8009dd6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	685a      	ldr	r2, [r3, #4]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	21e0      	movs	r1, #224	; 0xe0
 8009d5c:	438a      	bics	r2, r1
 8009d5e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	685a      	ldr	r2, [r3, #4]
 8009d64:	2382      	movs	r3, #130	; 0x82
 8009d66:	005b      	lsls	r3, r3, #1
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d113      	bne.n	8009d94 <SPI_WaitFlagStateUntilTimeout+0x98>
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	689a      	ldr	r2, [r3, #8]
 8009d70:	2380      	movs	r3, #128	; 0x80
 8009d72:	021b      	lsls	r3, r3, #8
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d005      	beq.n	8009d84 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	689a      	ldr	r2, [r3, #8]
 8009d7c:	2380      	movs	r3, #128	; 0x80
 8009d7e:	00db      	lsls	r3, r3, #3
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d107      	bne.n	8009d94 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	2140      	movs	r1, #64	; 0x40
 8009d90:	438a      	bics	r2, r1
 8009d92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d98:	2380      	movs	r3, #128	; 0x80
 8009d9a:	019b      	lsls	r3, r3, #6
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d110      	bne.n	8009dc2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	491a      	ldr	r1, [pc, #104]	; (8009e14 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8009dac:	400a      	ands	r2, r1
 8009dae:	601a      	str	r2, [r3, #0]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2180      	movs	r1, #128	; 0x80
 8009dbc:	0189      	lsls	r1, r1, #6
 8009dbe:	430a      	orrs	r2, r1
 8009dc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	225d      	movs	r2, #93	; 0x5d
 8009dc6:	2101      	movs	r1, #1
 8009dc8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	225c      	movs	r2, #92	; 0x5c
 8009dce:	2100      	movs	r1, #0
 8009dd0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009dd2:	2303      	movs	r3, #3
 8009dd4:	e017      	b.n	8009e06 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d101      	bne.n	8009de0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	3b01      	subs	r3, #1
 8009de4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	68ba      	ldr	r2, [r7, #8]
 8009dee:	4013      	ands	r3, r2
 8009df0:	68ba      	ldr	r2, [r7, #8]
 8009df2:	1ad3      	subs	r3, r2, r3
 8009df4:	425a      	negs	r2, r3
 8009df6:	4153      	adcs	r3, r2
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	001a      	movs	r2, r3
 8009dfc:	1dfb      	adds	r3, r7, #7
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d197      	bne.n	8009d34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	0018      	movs	r0, r3
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	b008      	add	sp, #32
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	46c0      	nop			; (mov r8, r8)
 8009e10:	20000064 	.word	0x20000064
 8009e14:	ffffdfff 	.word	0xffffdfff

08009e18 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b08a      	sub	sp, #40	; 0x28
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	607a      	str	r2, [r7, #4]
 8009e24:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009e26:	2317      	movs	r3, #23
 8009e28:	18fb      	adds	r3, r7, r3
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009e2e:	f7fb fa53 	bl	80052d8 <HAL_GetTick>
 8009e32:	0002      	movs	r2, r0
 8009e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e36:	1a9b      	subs	r3, r3, r2
 8009e38:	683a      	ldr	r2, [r7, #0]
 8009e3a:	18d3      	adds	r3, r2, r3
 8009e3c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009e3e:	f7fb fa4b 	bl	80052d8 <HAL_GetTick>
 8009e42:	0003      	movs	r3, r0
 8009e44:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	330c      	adds	r3, #12
 8009e4c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009e4e:	4b41      	ldr	r3, [pc, #260]	; (8009f54 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	0013      	movs	r3, r2
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	189b      	adds	r3, r3, r2
 8009e58:	00da      	lsls	r2, r3, #3
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	0d1b      	lsrs	r3, r3, #20
 8009e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e60:	4353      	muls	r3, r2
 8009e62:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009e64:	e068      	b.n	8009f38 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009e66:	68ba      	ldr	r2, [r7, #8]
 8009e68:	23c0      	movs	r3, #192	; 0xc0
 8009e6a:	00db      	lsls	r3, r3, #3
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d10a      	bne.n	8009e86 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d107      	bne.n	8009e86 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	b2da      	uxtb	r2, r3
 8009e7c:	2117      	movs	r1, #23
 8009e7e:	187b      	adds	r3, r7, r1
 8009e80:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009e82:	187b      	adds	r3, r7, r1
 8009e84:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	d055      	beq.n	8009f38 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009e8c:	f7fb fa24 	bl	80052d8 <HAL_GetTick>
 8009e90:	0002      	movs	r2, r0
 8009e92:	6a3b      	ldr	r3, [r7, #32]
 8009e94:	1ad3      	subs	r3, r2, r3
 8009e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d902      	bls.n	8009ea2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8009e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d142      	bne.n	8009f28 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	685a      	ldr	r2, [r3, #4]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	21e0      	movs	r1, #224	; 0xe0
 8009eae:	438a      	bics	r2, r1
 8009eb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	685a      	ldr	r2, [r3, #4]
 8009eb6:	2382      	movs	r3, #130	; 0x82
 8009eb8:	005b      	lsls	r3, r3, #1
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d113      	bne.n	8009ee6 <SPI_WaitFifoStateUntilTimeout+0xce>
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	689a      	ldr	r2, [r3, #8]
 8009ec2:	2380      	movs	r3, #128	; 0x80
 8009ec4:	021b      	lsls	r3, r3, #8
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d005      	beq.n	8009ed6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	689a      	ldr	r2, [r3, #8]
 8009ece:	2380      	movs	r3, #128	; 0x80
 8009ed0:	00db      	lsls	r3, r3, #3
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d107      	bne.n	8009ee6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	2140      	movs	r1, #64	; 0x40
 8009ee2:	438a      	bics	r2, r1
 8009ee4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009eea:	2380      	movs	r3, #128	; 0x80
 8009eec:	019b      	lsls	r3, r3, #6
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d110      	bne.n	8009f14 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4916      	ldr	r1, [pc, #88]	; (8009f58 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8009efe:	400a      	ands	r2, r1
 8009f00:	601a      	str	r2, [r3, #0]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2180      	movs	r1, #128	; 0x80
 8009f0e:	0189      	lsls	r1, r1, #6
 8009f10:	430a      	orrs	r2, r1
 8009f12:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	225d      	movs	r2, #93	; 0x5d
 8009f18:	2101      	movs	r1, #1
 8009f1a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	225c      	movs	r2, #92	; 0x5c
 8009f20:	2100      	movs	r1, #0
 8009f22:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009f24:	2303      	movs	r3, #3
 8009f26:	e010      	b.n	8009f4a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d101      	bne.n	8009f32 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	3b01      	subs	r3, #1
 8009f36:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	4013      	ands	r3, r2
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d18e      	bne.n	8009e66 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	0018      	movs	r0, r3
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	b00a      	add	sp, #40	; 0x28
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	46c0      	nop			; (mov r8, r8)
 8009f54:	20000064 	.word	0x20000064
 8009f58:	ffffdfff 	.word	0xffffdfff

08009f5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b086      	sub	sp, #24
 8009f60:	af02      	add	r7, sp, #8
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	685a      	ldr	r2, [r3, #4]
 8009f6c:	2382      	movs	r3, #130	; 0x82
 8009f6e:	005b      	lsls	r3, r3, #1
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d113      	bne.n	8009f9c <SPI_EndRxTransaction+0x40>
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	689a      	ldr	r2, [r3, #8]
 8009f78:	2380      	movs	r3, #128	; 0x80
 8009f7a:	021b      	lsls	r3, r3, #8
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d005      	beq.n	8009f8c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	689a      	ldr	r2, [r3, #8]
 8009f84:	2380      	movs	r3, #128	; 0x80
 8009f86:	00db      	lsls	r3, r3, #3
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d107      	bne.n	8009f9c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2140      	movs	r1, #64	; 0x40
 8009f98:	438a      	bics	r2, r1
 8009f9a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009f9c:	68ba      	ldr	r2, [r7, #8]
 8009f9e:	68f8      	ldr	r0, [r7, #12]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	9300      	str	r3, [sp, #0]
 8009fa4:	0013      	movs	r3, r2
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	2180      	movs	r1, #128	; 0x80
 8009faa:	f7ff fea7 	bl	8009cfc <SPI_WaitFlagStateUntilTimeout>
 8009fae:	1e03      	subs	r3, r0, #0
 8009fb0:	d007      	beq.n	8009fc2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fb6:	2220      	movs	r2, #32
 8009fb8:	431a      	orrs	r2, r3
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	e026      	b.n	800a010 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	685a      	ldr	r2, [r3, #4]
 8009fc6:	2382      	movs	r3, #130	; 0x82
 8009fc8:	005b      	lsls	r3, r3, #1
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d11f      	bne.n	800a00e <SPI_EndRxTransaction+0xb2>
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	689a      	ldr	r2, [r3, #8]
 8009fd2:	2380      	movs	r3, #128	; 0x80
 8009fd4:	021b      	lsls	r3, r3, #8
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d005      	beq.n	8009fe6 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	689a      	ldr	r2, [r3, #8]
 8009fde:	2380      	movs	r3, #128	; 0x80
 8009fe0:	00db      	lsls	r3, r3, #3
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d113      	bne.n	800a00e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009fe6:	68ba      	ldr	r2, [r7, #8]
 8009fe8:	23c0      	movs	r3, #192	; 0xc0
 8009fea:	00d9      	lsls	r1, r3, #3
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	9300      	str	r3, [sp, #0]
 8009ff2:	0013      	movs	r3, r2
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f7ff ff0f 	bl	8009e18 <SPI_WaitFifoStateUntilTimeout>
 8009ffa:	1e03      	subs	r3, r0, #0
 8009ffc:	d007      	beq.n	800a00e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a002:	2220      	movs	r2, #32
 800a004:	431a      	orrs	r2, r3
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a00a:	2303      	movs	r3, #3
 800a00c:	e000      	b.n	800a010 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	0018      	movs	r0, r3
 800a012:	46bd      	mov	sp, r7
 800a014:	b004      	add	sp, #16
 800a016:	bd80      	pop	{r7, pc}

0800a018 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b086      	sub	sp, #24
 800a01c:	af02      	add	r7, sp, #8
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	23c0      	movs	r3, #192	; 0xc0
 800a028:	0159      	lsls	r1, r3, #5
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	9300      	str	r3, [sp, #0]
 800a030:	0013      	movs	r3, r2
 800a032:	2200      	movs	r2, #0
 800a034:	f7ff fef0 	bl	8009e18 <SPI_WaitFifoStateUntilTimeout>
 800a038:	1e03      	subs	r3, r0, #0
 800a03a:	d007      	beq.n	800a04c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a040:	2220      	movs	r2, #32
 800a042:	431a      	orrs	r2, r3
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a048:	2303      	movs	r3, #3
 800a04a:	e027      	b.n	800a09c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a04c:	68ba      	ldr	r2, [r7, #8]
 800a04e:	68f8      	ldr	r0, [r7, #12]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	9300      	str	r3, [sp, #0]
 800a054:	0013      	movs	r3, r2
 800a056:	2200      	movs	r2, #0
 800a058:	2180      	movs	r1, #128	; 0x80
 800a05a:	f7ff fe4f 	bl	8009cfc <SPI_WaitFlagStateUntilTimeout>
 800a05e:	1e03      	subs	r3, r0, #0
 800a060:	d007      	beq.n	800a072 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a066:	2220      	movs	r2, #32
 800a068:	431a      	orrs	r2, r3
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a06e:	2303      	movs	r3, #3
 800a070:	e014      	b.n	800a09c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a072:	68ba      	ldr	r2, [r7, #8]
 800a074:	23c0      	movs	r3, #192	; 0xc0
 800a076:	00d9      	lsls	r1, r3, #3
 800a078:	68f8      	ldr	r0, [r7, #12]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	0013      	movs	r3, r2
 800a080:	2200      	movs	r2, #0
 800a082:	f7ff fec9 	bl	8009e18 <SPI_WaitFifoStateUntilTimeout>
 800a086:	1e03      	subs	r3, r0, #0
 800a088:	d007      	beq.n	800a09a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a08e:	2220      	movs	r2, #32
 800a090:	431a      	orrs	r2, r3
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a096:	2303      	movs	r3, #3
 800a098:	e000      	b.n	800a09c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a09a:	2300      	movs	r3, #0
}
 800a09c:	0018      	movs	r0, r3
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	b004      	add	sp, #16
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d101      	bne.n	800a0b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e04a      	b.n	800a14c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	223d      	movs	r2, #61	; 0x3d
 800a0ba:	5c9b      	ldrb	r3, [r3, r2]
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d107      	bne.n	800a0d2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	223c      	movs	r2, #60	; 0x3c
 800a0c6:	2100      	movs	r1, #0
 800a0c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	0018      	movs	r0, r3
 800a0ce:	f7fa fe61 	bl	8004d94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	223d      	movs	r2, #61	; 0x3d
 800a0d6:	2102      	movs	r1, #2
 800a0d8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	3304      	adds	r3, #4
 800a0e2:	0019      	movs	r1, r3
 800a0e4:	0010      	movs	r0, r2
 800a0e6:	f000 fb55 	bl	800a794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2248      	movs	r2, #72	; 0x48
 800a0ee:	2101      	movs	r1, #1
 800a0f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	223e      	movs	r2, #62	; 0x3e
 800a0f6:	2101      	movs	r1, #1
 800a0f8:	5499      	strb	r1, [r3, r2]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	223f      	movs	r2, #63	; 0x3f
 800a0fe:	2101      	movs	r1, #1
 800a100:	5499      	strb	r1, [r3, r2]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2240      	movs	r2, #64	; 0x40
 800a106:	2101      	movs	r1, #1
 800a108:	5499      	strb	r1, [r3, r2]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2241      	movs	r2, #65	; 0x41
 800a10e:	2101      	movs	r1, #1
 800a110:	5499      	strb	r1, [r3, r2]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2242      	movs	r2, #66	; 0x42
 800a116:	2101      	movs	r1, #1
 800a118:	5499      	strb	r1, [r3, r2]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2243      	movs	r2, #67	; 0x43
 800a11e:	2101      	movs	r1, #1
 800a120:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2244      	movs	r2, #68	; 0x44
 800a126:	2101      	movs	r1, #1
 800a128:	5499      	strb	r1, [r3, r2]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2245      	movs	r2, #69	; 0x45
 800a12e:	2101      	movs	r1, #1
 800a130:	5499      	strb	r1, [r3, r2]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2246      	movs	r2, #70	; 0x46
 800a136:	2101      	movs	r1, #1
 800a138:	5499      	strb	r1, [r3, r2]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2247      	movs	r2, #71	; 0x47
 800a13e:	2101      	movs	r1, #1
 800a140:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	223d      	movs	r2, #61	; 0x3d
 800a146:	2101      	movs	r1, #1
 800a148:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	0018      	movs	r0, r3
 800a14e:	46bd      	mov	sp, r7
 800a150:	b002      	add	sp, #8
 800a152:	bd80      	pop	{r7, pc}

0800a154 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d101      	bne.n	800a166 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a162:	2301      	movs	r3, #1
 800a164:	e04a      	b.n	800a1fc <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	223d      	movs	r2, #61	; 0x3d
 800a16a:	5c9b      	ldrb	r3, [r3, r2]
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d107      	bne.n	800a182 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	223c      	movs	r2, #60	; 0x3c
 800a176:	2100      	movs	r1, #0
 800a178:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	0018      	movs	r0, r3
 800a17e:	f000 f841 	bl	800a204 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	223d      	movs	r2, #61	; 0x3d
 800a186:	2102      	movs	r1, #2
 800a188:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	3304      	adds	r3, #4
 800a192:	0019      	movs	r1, r3
 800a194:	0010      	movs	r0, r2
 800a196:	f000 fafd 	bl	800a794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2248      	movs	r2, #72	; 0x48
 800a19e:	2101      	movs	r1, #1
 800a1a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	223e      	movs	r2, #62	; 0x3e
 800a1a6:	2101      	movs	r1, #1
 800a1a8:	5499      	strb	r1, [r3, r2]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	223f      	movs	r2, #63	; 0x3f
 800a1ae:	2101      	movs	r1, #1
 800a1b0:	5499      	strb	r1, [r3, r2]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2240      	movs	r2, #64	; 0x40
 800a1b6:	2101      	movs	r1, #1
 800a1b8:	5499      	strb	r1, [r3, r2]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2241      	movs	r2, #65	; 0x41
 800a1be:	2101      	movs	r1, #1
 800a1c0:	5499      	strb	r1, [r3, r2]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2242      	movs	r2, #66	; 0x42
 800a1c6:	2101      	movs	r1, #1
 800a1c8:	5499      	strb	r1, [r3, r2]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2243      	movs	r2, #67	; 0x43
 800a1ce:	2101      	movs	r1, #1
 800a1d0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2244      	movs	r2, #68	; 0x44
 800a1d6:	2101      	movs	r1, #1
 800a1d8:	5499      	strb	r1, [r3, r2]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2245      	movs	r2, #69	; 0x45
 800a1de:	2101      	movs	r1, #1
 800a1e0:	5499      	strb	r1, [r3, r2]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2246      	movs	r2, #70	; 0x46
 800a1e6:	2101      	movs	r1, #1
 800a1e8:	5499      	strb	r1, [r3, r2]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2247      	movs	r2, #71	; 0x47
 800a1ee:	2101      	movs	r1, #1
 800a1f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	223d      	movs	r2, #61	; 0x3d
 800a1f6:	2101      	movs	r1, #1
 800a1f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a1fa:	2300      	movs	r3, #0
}
 800a1fc:	0018      	movs	r0, r3
 800a1fe:	46bd      	mov	sp, r7
 800a200:	b002      	add	sp, #8
 800a202:	bd80      	pop	{r7, pc}

0800a204 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a20c:	46c0      	nop			; (mov r8, r8)
 800a20e:	46bd      	mov	sp, r7
 800a210:	b002      	add	sp, #8
 800a212:	bd80      	pop	{r7, pc}

0800a214 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d108      	bne.n	800a236 <HAL_TIM_PWM_Start+0x22>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	223e      	movs	r2, #62	; 0x3e
 800a228:	5c9b      	ldrb	r3, [r3, r2]
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	3b01      	subs	r3, #1
 800a22e:	1e5a      	subs	r2, r3, #1
 800a230:	4193      	sbcs	r3, r2
 800a232:	b2db      	uxtb	r3, r3
 800a234:	e037      	b.n	800a2a6 <HAL_TIM_PWM_Start+0x92>
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	2b04      	cmp	r3, #4
 800a23a:	d108      	bne.n	800a24e <HAL_TIM_PWM_Start+0x3a>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	223f      	movs	r2, #63	; 0x3f
 800a240:	5c9b      	ldrb	r3, [r3, r2]
 800a242:	b2db      	uxtb	r3, r3
 800a244:	3b01      	subs	r3, #1
 800a246:	1e5a      	subs	r2, r3, #1
 800a248:	4193      	sbcs	r3, r2
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	e02b      	b.n	800a2a6 <HAL_TIM_PWM_Start+0x92>
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	2b08      	cmp	r3, #8
 800a252:	d108      	bne.n	800a266 <HAL_TIM_PWM_Start+0x52>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2240      	movs	r2, #64	; 0x40
 800a258:	5c9b      	ldrb	r3, [r3, r2]
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	3b01      	subs	r3, #1
 800a25e:	1e5a      	subs	r2, r3, #1
 800a260:	4193      	sbcs	r3, r2
 800a262:	b2db      	uxtb	r3, r3
 800a264:	e01f      	b.n	800a2a6 <HAL_TIM_PWM_Start+0x92>
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	2b0c      	cmp	r3, #12
 800a26a:	d108      	bne.n	800a27e <HAL_TIM_PWM_Start+0x6a>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2241      	movs	r2, #65	; 0x41
 800a270:	5c9b      	ldrb	r3, [r3, r2]
 800a272:	b2db      	uxtb	r3, r3
 800a274:	3b01      	subs	r3, #1
 800a276:	1e5a      	subs	r2, r3, #1
 800a278:	4193      	sbcs	r3, r2
 800a27a:	b2db      	uxtb	r3, r3
 800a27c:	e013      	b.n	800a2a6 <HAL_TIM_PWM_Start+0x92>
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	2b10      	cmp	r3, #16
 800a282:	d108      	bne.n	800a296 <HAL_TIM_PWM_Start+0x82>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2242      	movs	r2, #66	; 0x42
 800a288:	5c9b      	ldrb	r3, [r3, r2]
 800a28a:	b2db      	uxtb	r3, r3
 800a28c:	3b01      	subs	r3, #1
 800a28e:	1e5a      	subs	r2, r3, #1
 800a290:	4193      	sbcs	r3, r2
 800a292:	b2db      	uxtb	r3, r3
 800a294:	e007      	b.n	800a2a6 <HAL_TIM_PWM_Start+0x92>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2243      	movs	r2, #67	; 0x43
 800a29a:	5c9b      	ldrb	r3, [r3, r2]
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	3b01      	subs	r3, #1
 800a2a0:	1e5a      	subs	r2, r3, #1
 800a2a2:	4193      	sbcs	r3, r2
 800a2a4:	b2db      	uxtb	r3, r3
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d001      	beq.n	800a2ae <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e08b      	b.n	800a3c6 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d104      	bne.n	800a2be <HAL_TIM_PWM_Start+0xaa>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	223e      	movs	r2, #62	; 0x3e
 800a2b8:	2102      	movs	r1, #2
 800a2ba:	5499      	strb	r1, [r3, r2]
 800a2bc:	e023      	b.n	800a306 <HAL_TIM_PWM_Start+0xf2>
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	2b04      	cmp	r3, #4
 800a2c2:	d104      	bne.n	800a2ce <HAL_TIM_PWM_Start+0xba>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	223f      	movs	r2, #63	; 0x3f
 800a2c8:	2102      	movs	r1, #2
 800a2ca:	5499      	strb	r1, [r3, r2]
 800a2cc:	e01b      	b.n	800a306 <HAL_TIM_PWM_Start+0xf2>
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	2b08      	cmp	r3, #8
 800a2d2:	d104      	bne.n	800a2de <HAL_TIM_PWM_Start+0xca>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2240      	movs	r2, #64	; 0x40
 800a2d8:	2102      	movs	r1, #2
 800a2da:	5499      	strb	r1, [r3, r2]
 800a2dc:	e013      	b.n	800a306 <HAL_TIM_PWM_Start+0xf2>
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	2b0c      	cmp	r3, #12
 800a2e2:	d104      	bne.n	800a2ee <HAL_TIM_PWM_Start+0xda>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2241      	movs	r2, #65	; 0x41
 800a2e8:	2102      	movs	r1, #2
 800a2ea:	5499      	strb	r1, [r3, r2]
 800a2ec:	e00b      	b.n	800a306 <HAL_TIM_PWM_Start+0xf2>
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	2b10      	cmp	r3, #16
 800a2f2:	d104      	bne.n	800a2fe <HAL_TIM_PWM_Start+0xea>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2242      	movs	r2, #66	; 0x42
 800a2f8:	2102      	movs	r1, #2
 800a2fa:	5499      	strb	r1, [r3, r2]
 800a2fc:	e003      	b.n	800a306 <HAL_TIM_PWM_Start+0xf2>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2243      	movs	r2, #67	; 0x43
 800a302:	2102      	movs	r1, #2
 800a304:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	6839      	ldr	r1, [r7, #0]
 800a30c:	2201      	movs	r2, #1
 800a30e:	0018      	movs	r0, r3
 800a310:	f000 fe20 	bl	800af54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a2d      	ldr	r2, [pc, #180]	; (800a3d0 <HAL_TIM_PWM_Start+0x1bc>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d00e      	beq.n	800a33c <HAL_TIM_PWM_Start+0x128>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4a2c      	ldr	r2, [pc, #176]	; (800a3d4 <HAL_TIM_PWM_Start+0x1c0>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d009      	beq.n	800a33c <HAL_TIM_PWM_Start+0x128>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a2a      	ldr	r2, [pc, #168]	; (800a3d8 <HAL_TIM_PWM_Start+0x1c4>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d004      	beq.n	800a33c <HAL_TIM_PWM_Start+0x128>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a29      	ldr	r2, [pc, #164]	; (800a3dc <HAL_TIM_PWM_Start+0x1c8>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d101      	bne.n	800a340 <HAL_TIM_PWM_Start+0x12c>
 800a33c:	2301      	movs	r3, #1
 800a33e:	e000      	b.n	800a342 <HAL_TIM_PWM_Start+0x12e>
 800a340:	2300      	movs	r3, #0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d008      	beq.n	800a358 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2180      	movs	r1, #128	; 0x80
 800a352:	0209      	lsls	r1, r1, #8
 800a354:	430a      	orrs	r2, r1
 800a356:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a1c      	ldr	r2, [pc, #112]	; (800a3d0 <HAL_TIM_PWM_Start+0x1bc>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d00f      	beq.n	800a382 <HAL_TIM_PWM_Start+0x16e>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	2380      	movs	r3, #128	; 0x80
 800a368:	05db      	lsls	r3, r3, #23
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d009      	beq.n	800a382 <HAL_TIM_PWM_Start+0x16e>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a1b      	ldr	r2, [pc, #108]	; (800a3e0 <HAL_TIM_PWM_Start+0x1cc>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d004      	beq.n	800a382 <HAL_TIM_PWM_Start+0x16e>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a15      	ldr	r2, [pc, #84]	; (800a3d4 <HAL_TIM_PWM_Start+0x1c0>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d116      	bne.n	800a3b0 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	4a16      	ldr	r2, [pc, #88]	; (800a3e4 <HAL_TIM_PWM_Start+0x1d0>)
 800a38a:	4013      	ands	r3, r2
 800a38c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2b06      	cmp	r3, #6
 800a392:	d016      	beq.n	800a3c2 <HAL_TIM_PWM_Start+0x1ae>
 800a394:	68fa      	ldr	r2, [r7, #12]
 800a396:	2380      	movs	r3, #128	; 0x80
 800a398:	025b      	lsls	r3, r3, #9
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d011      	beq.n	800a3c2 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	2101      	movs	r1, #1
 800a3aa:	430a      	orrs	r2, r1
 800a3ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3ae:	e008      	b.n	800a3c2 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2101      	movs	r1, #1
 800a3bc:	430a      	orrs	r2, r1
 800a3be:	601a      	str	r2, [r3, #0]
 800a3c0:	e000      	b.n	800a3c4 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3c2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	0018      	movs	r0, r3
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	b004      	add	sp, #16
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	46c0      	nop			; (mov r8, r8)
 800a3d0:	40012c00 	.word	0x40012c00
 800a3d4:	40014000 	.word	0x40014000
 800a3d8:	40014400 	.word	0x40014400
 800a3dc:	40014800 	.word	0x40014800
 800a3e0:	40000400 	.word	0x40000400
 800a3e4:	00010007 	.word	0x00010007

0800a3e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b086      	sub	sp, #24
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a3f4:	2317      	movs	r3, #23
 800a3f6:	18fb      	adds	r3, r7, r3
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	223c      	movs	r2, #60	; 0x3c
 800a400:	5c9b      	ldrb	r3, [r3, r2]
 800a402:	2b01      	cmp	r3, #1
 800a404:	d101      	bne.n	800a40a <HAL_TIM_PWM_ConfigChannel+0x22>
 800a406:	2302      	movs	r3, #2
 800a408:	e0e5      	b.n	800a5d6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	223c      	movs	r2, #60	; 0x3c
 800a40e:	2101      	movs	r1, #1
 800a410:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2b14      	cmp	r3, #20
 800a416:	d900      	bls.n	800a41a <HAL_TIM_PWM_ConfigChannel+0x32>
 800a418:	e0d1      	b.n	800a5be <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	009a      	lsls	r2, r3, #2
 800a41e:	4b70      	ldr	r3, [pc, #448]	; (800a5e0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800a420:	18d3      	adds	r3, r2, r3
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	68ba      	ldr	r2, [r7, #8]
 800a42c:	0011      	movs	r1, r2
 800a42e:	0018      	movs	r0, r3
 800a430:	f000 fa30 	bl	800a894 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	699a      	ldr	r2, [r3, #24]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	2108      	movs	r1, #8
 800a440:	430a      	orrs	r2, r1
 800a442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	699a      	ldr	r2, [r3, #24]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2104      	movs	r1, #4
 800a450:	438a      	bics	r2, r1
 800a452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	6999      	ldr	r1, [r3, #24]
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	691a      	ldr	r2, [r3, #16]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	430a      	orrs	r2, r1
 800a464:	619a      	str	r2, [r3, #24]
      break;
 800a466:	e0af      	b.n	800a5c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	68ba      	ldr	r2, [r7, #8]
 800a46e:	0011      	movs	r1, r2
 800a470:	0018      	movs	r0, r3
 800a472:	f000 fa99 	bl	800a9a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	699a      	ldr	r2, [r3, #24]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2180      	movs	r1, #128	; 0x80
 800a482:	0109      	lsls	r1, r1, #4
 800a484:	430a      	orrs	r2, r1
 800a486:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	699a      	ldr	r2, [r3, #24]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4954      	ldr	r1, [pc, #336]	; (800a5e4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a494:	400a      	ands	r2, r1
 800a496:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	6999      	ldr	r1, [r3, #24]
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	021a      	lsls	r2, r3, #8
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	430a      	orrs	r2, r1
 800a4aa:	619a      	str	r2, [r3, #24]
      break;
 800a4ac:	e08c      	b.n	800a5c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	68ba      	ldr	r2, [r7, #8]
 800a4b4:	0011      	movs	r1, r2
 800a4b6:	0018      	movs	r0, r3
 800a4b8:	f000 fafa 	bl	800aab0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	69da      	ldr	r2, [r3, #28]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2108      	movs	r1, #8
 800a4c8:	430a      	orrs	r2, r1
 800a4ca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	69da      	ldr	r2, [r3, #28]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2104      	movs	r1, #4
 800a4d8:	438a      	bics	r2, r1
 800a4da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	69d9      	ldr	r1, [r3, #28]
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	691a      	ldr	r2, [r3, #16]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	430a      	orrs	r2, r1
 800a4ec:	61da      	str	r2, [r3, #28]
      break;
 800a4ee:	e06b      	b.n	800a5c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	68ba      	ldr	r2, [r7, #8]
 800a4f6:	0011      	movs	r1, r2
 800a4f8:	0018      	movs	r0, r3
 800a4fa:	f000 fb61 	bl	800abc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	69da      	ldr	r2, [r3, #28]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	2180      	movs	r1, #128	; 0x80
 800a50a:	0109      	lsls	r1, r1, #4
 800a50c:	430a      	orrs	r2, r1
 800a50e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	69da      	ldr	r2, [r3, #28]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4932      	ldr	r1, [pc, #200]	; (800a5e4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a51c:	400a      	ands	r2, r1
 800a51e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	69d9      	ldr	r1, [r3, #28]
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	691b      	ldr	r3, [r3, #16]
 800a52a:	021a      	lsls	r2, r3, #8
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	430a      	orrs	r2, r1
 800a532:	61da      	str	r2, [r3, #28]
      break;
 800a534:	e048      	b.n	800a5c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	68ba      	ldr	r2, [r7, #8]
 800a53c:	0011      	movs	r1, r2
 800a53e:	0018      	movs	r0, r3
 800a540:	f000 fba8 	bl	800ac94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	2108      	movs	r1, #8
 800a550:	430a      	orrs	r2, r1
 800a552:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	2104      	movs	r1, #4
 800a560:	438a      	bics	r2, r1
 800a562:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	691a      	ldr	r2, [r3, #16]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	430a      	orrs	r2, r1
 800a574:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a576:	e027      	b.n	800a5c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	68ba      	ldr	r2, [r7, #8]
 800a57e:	0011      	movs	r1, r2
 800a580:	0018      	movs	r0, r3
 800a582:	f000 fbe7 	bl	800ad54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2180      	movs	r1, #128	; 0x80
 800a592:	0109      	lsls	r1, r1, #4
 800a594:	430a      	orrs	r2, r1
 800a596:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4910      	ldr	r1, [pc, #64]	; (800a5e4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a5a4:	400a      	ands	r2, r1
 800a5a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	691b      	ldr	r3, [r3, #16]
 800a5b2:	021a      	lsls	r2, r3, #8
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	430a      	orrs	r2, r1
 800a5ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a5bc:	e004      	b.n	800a5c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800a5be:	2317      	movs	r3, #23
 800a5c0:	18fb      	adds	r3, r7, r3
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	701a      	strb	r2, [r3, #0]
      break;
 800a5c6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	223c      	movs	r2, #60	; 0x3c
 800a5cc:	2100      	movs	r1, #0
 800a5ce:	5499      	strb	r1, [r3, r2]

  return status;
 800a5d0:	2317      	movs	r3, #23
 800a5d2:	18fb      	adds	r3, r7, r3
 800a5d4:	781b      	ldrb	r3, [r3, #0]
}
 800a5d6:	0018      	movs	r0, r3
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	b006      	add	sp, #24
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	46c0      	nop			; (mov r8, r8)
 800a5e0:	08015e98 	.word	0x08015e98
 800a5e4:	fffffbff 	.word	0xfffffbff

0800a5e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a5f2:	230f      	movs	r3, #15
 800a5f4:	18fb      	adds	r3, r7, r3
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	223c      	movs	r2, #60	; 0x3c
 800a5fe:	5c9b      	ldrb	r3, [r3, r2]
 800a600:	2b01      	cmp	r3, #1
 800a602:	d101      	bne.n	800a608 <HAL_TIM_ConfigClockSource+0x20>
 800a604:	2302      	movs	r3, #2
 800a606:	e0bc      	b.n	800a782 <HAL_TIM_ConfigClockSource+0x19a>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	223c      	movs	r2, #60	; 0x3c
 800a60c:	2101      	movs	r1, #1
 800a60e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	223d      	movs	r2, #61	; 0x3d
 800a614:	2102      	movs	r1, #2
 800a616:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	4a5a      	ldr	r2, [pc, #360]	; (800a78c <HAL_TIM_ConfigClockSource+0x1a4>)
 800a624:	4013      	ands	r3, r2
 800a626:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	4a59      	ldr	r2, [pc, #356]	; (800a790 <HAL_TIM_ConfigClockSource+0x1a8>)
 800a62c:	4013      	ands	r3, r2
 800a62e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	68ba      	ldr	r2, [r7, #8]
 800a636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2280      	movs	r2, #128	; 0x80
 800a63e:	0192      	lsls	r2, r2, #6
 800a640:	4293      	cmp	r3, r2
 800a642:	d040      	beq.n	800a6c6 <HAL_TIM_ConfigClockSource+0xde>
 800a644:	2280      	movs	r2, #128	; 0x80
 800a646:	0192      	lsls	r2, r2, #6
 800a648:	4293      	cmp	r3, r2
 800a64a:	d900      	bls.n	800a64e <HAL_TIM_ConfigClockSource+0x66>
 800a64c:	e088      	b.n	800a760 <HAL_TIM_ConfigClockSource+0x178>
 800a64e:	2280      	movs	r2, #128	; 0x80
 800a650:	0152      	lsls	r2, r2, #5
 800a652:	4293      	cmp	r3, r2
 800a654:	d100      	bne.n	800a658 <HAL_TIM_ConfigClockSource+0x70>
 800a656:	e088      	b.n	800a76a <HAL_TIM_ConfigClockSource+0x182>
 800a658:	2280      	movs	r2, #128	; 0x80
 800a65a:	0152      	lsls	r2, r2, #5
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d900      	bls.n	800a662 <HAL_TIM_ConfigClockSource+0x7a>
 800a660:	e07e      	b.n	800a760 <HAL_TIM_ConfigClockSource+0x178>
 800a662:	2b70      	cmp	r3, #112	; 0x70
 800a664:	d018      	beq.n	800a698 <HAL_TIM_ConfigClockSource+0xb0>
 800a666:	d900      	bls.n	800a66a <HAL_TIM_ConfigClockSource+0x82>
 800a668:	e07a      	b.n	800a760 <HAL_TIM_ConfigClockSource+0x178>
 800a66a:	2b60      	cmp	r3, #96	; 0x60
 800a66c:	d04f      	beq.n	800a70e <HAL_TIM_ConfigClockSource+0x126>
 800a66e:	d900      	bls.n	800a672 <HAL_TIM_ConfigClockSource+0x8a>
 800a670:	e076      	b.n	800a760 <HAL_TIM_ConfigClockSource+0x178>
 800a672:	2b50      	cmp	r3, #80	; 0x50
 800a674:	d03b      	beq.n	800a6ee <HAL_TIM_ConfigClockSource+0x106>
 800a676:	d900      	bls.n	800a67a <HAL_TIM_ConfigClockSource+0x92>
 800a678:	e072      	b.n	800a760 <HAL_TIM_ConfigClockSource+0x178>
 800a67a:	2b40      	cmp	r3, #64	; 0x40
 800a67c:	d057      	beq.n	800a72e <HAL_TIM_ConfigClockSource+0x146>
 800a67e:	d900      	bls.n	800a682 <HAL_TIM_ConfigClockSource+0x9a>
 800a680:	e06e      	b.n	800a760 <HAL_TIM_ConfigClockSource+0x178>
 800a682:	2b30      	cmp	r3, #48	; 0x30
 800a684:	d063      	beq.n	800a74e <HAL_TIM_ConfigClockSource+0x166>
 800a686:	d86b      	bhi.n	800a760 <HAL_TIM_ConfigClockSource+0x178>
 800a688:	2b20      	cmp	r3, #32
 800a68a:	d060      	beq.n	800a74e <HAL_TIM_ConfigClockSource+0x166>
 800a68c:	d868      	bhi.n	800a760 <HAL_TIM_ConfigClockSource+0x178>
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d05d      	beq.n	800a74e <HAL_TIM_ConfigClockSource+0x166>
 800a692:	2b10      	cmp	r3, #16
 800a694:	d05b      	beq.n	800a74e <HAL_TIM_ConfigClockSource+0x166>
 800a696:	e063      	b.n	800a760 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6818      	ldr	r0, [r3, #0]
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	6899      	ldr	r1, [r3, #8]
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	685a      	ldr	r2, [r3, #4]
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	f000 fc34 	bl	800af14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	2277      	movs	r2, #119	; 0x77
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	68ba      	ldr	r2, [r7, #8]
 800a6c2:	609a      	str	r2, [r3, #8]
      break;
 800a6c4:	e052      	b.n	800a76c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6818      	ldr	r0, [r3, #0]
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	6899      	ldr	r1, [r3, #8]
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	685a      	ldr	r2, [r3, #4]
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	f000 fc1d 	bl	800af14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	689a      	ldr	r2, [r3, #8]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	2180      	movs	r1, #128	; 0x80
 800a6e6:	01c9      	lsls	r1, r1, #7
 800a6e8:	430a      	orrs	r2, r1
 800a6ea:	609a      	str	r2, [r3, #8]
      break;
 800a6ec:	e03e      	b.n	800a76c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6818      	ldr	r0, [r3, #0]
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	6859      	ldr	r1, [r3, #4]
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	001a      	movs	r2, r3
 800a6fc:	f000 fb8e 	bl	800ae1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	2150      	movs	r1, #80	; 0x50
 800a706:	0018      	movs	r0, r3
 800a708:	f000 fbe8 	bl	800aedc <TIM_ITRx_SetConfig>
      break;
 800a70c:	e02e      	b.n	800a76c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6818      	ldr	r0, [r3, #0]
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	6859      	ldr	r1, [r3, #4]
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	001a      	movs	r2, r3
 800a71c:	f000 fbac 	bl	800ae78 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	2160      	movs	r1, #96	; 0x60
 800a726:	0018      	movs	r0, r3
 800a728:	f000 fbd8 	bl	800aedc <TIM_ITRx_SetConfig>
      break;
 800a72c:	e01e      	b.n	800a76c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6818      	ldr	r0, [r3, #0]
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	6859      	ldr	r1, [r3, #4]
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	001a      	movs	r2, r3
 800a73c:	f000 fb6e 	bl	800ae1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	2140      	movs	r1, #64	; 0x40
 800a746:	0018      	movs	r0, r3
 800a748:	f000 fbc8 	bl	800aedc <TIM_ITRx_SetConfig>
      break;
 800a74c:	e00e      	b.n	800a76c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	0019      	movs	r1, r3
 800a758:	0010      	movs	r0, r2
 800a75a:	f000 fbbf 	bl	800aedc <TIM_ITRx_SetConfig>
      break;
 800a75e:	e005      	b.n	800a76c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800a760:	230f      	movs	r3, #15
 800a762:	18fb      	adds	r3, r7, r3
 800a764:	2201      	movs	r2, #1
 800a766:	701a      	strb	r2, [r3, #0]
      break;
 800a768:	e000      	b.n	800a76c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800a76a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	223d      	movs	r2, #61	; 0x3d
 800a770:	2101      	movs	r1, #1
 800a772:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	223c      	movs	r2, #60	; 0x3c
 800a778:	2100      	movs	r1, #0
 800a77a:	5499      	strb	r1, [r3, r2]

  return status;
 800a77c:	230f      	movs	r3, #15
 800a77e:	18fb      	adds	r3, r7, r3
 800a780:	781b      	ldrb	r3, [r3, #0]
}
 800a782:	0018      	movs	r0, r3
 800a784:	46bd      	mov	sp, r7
 800a786:	b004      	add	sp, #16
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	46c0      	nop			; (mov r8, r8)
 800a78c:	ffceff88 	.word	0xffceff88
 800a790:	ffff00ff 	.word	0xffff00ff

0800a794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	4a34      	ldr	r2, [pc, #208]	; (800a878 <TIM_Base_SetConfig+0xe4>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d008      	beq.n	800a7be <TIM_Base_SetConfig+0x2a>
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	2380      	movs	r3, #128	; 0x80
 800a7b0:	05db      	lsls	r3, r3, #23
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d003      	beq.n	800a7be <TIM_Base_SetConfig+0x2a>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	4a30      	ldr	r2, [pc, #192]	; (800a87c <TIM_Base_SetConfig+0xe8>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d108      	bne.n	800a7d0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2270      	movs	r2, #112	; 0x70
 800a7c2:	4393      	bics	r3, r2
 800a7c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	68fa      	ldr	r2, [r7, #12]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4a29      	ldr	r2, [pc, #164]	; (800a878 <TIM_Base_SetConfig+0xe4>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d018      	beq.n	800a80a <TIM_Base_SetConfig+0x76>
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	2380      	movs	r3, #128	; 0x80
 800a7dc:	05db      	lsls	r3, r3, #23
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d013      	beq.n	800a80a <TIM_Base_SetConfig+0x76>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4a25      	ldr	r2, [pc, #148]	; (800a87c <TIM_Base_SetConfig+0xe8>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d00f      	beq.n	800a80a <TIM_Base_SetConfig+0x76>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a24      	ldr	r2, [pc, #144]	; (800a880 <TIM_Base_SetConfig+0xec>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d00b      	beq.n	800a80a <TIM_Base_SetConfig+0x76>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a23      	ldr	r2, [pc, #140]	; (800a884 <TIM_Base_SetConfig+0xf0>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d007      	beq.n	800a80a <TIM_Base_SetConfig+0x76>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	4a22      	ldr	r2, [pc, #136]	; (800a888 <TIM_Base_SetConfig+0xf4>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d003      	beq.n	800a80a <TIM_Base_SetConfig+0x76>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	4a21      	ldr	r2, [pc, #132]	; (800a88c <TIM_Base_SetConfig+0xf8>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d108      	bne.n	800a81c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	4a20      	ldr	r2, [pc, #128]	; (800a890 <TIM_Base_SetConfig+0xfc>)
 800a80e:	4013      	ands	r3, r2
 800a810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	68fa      	ldr	r2, [r7, #12]
 800a818:	4313      	orrs	r3, r2
 800a81a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2280      	movs	r2, #128	; 0x80
 800a820:	4393      	bics	r3, r2
 800a822:	001a      	movs	r2, r3
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	695b      	ldr	r3, [r3, #20]
 800a828:	4313      	orrs	r3, r2
 800a82a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	68fa      	ldr	r2, [r7, #12]
 800a830:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	689a      	ldr	r2, [r3, #8]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4a0c      	ldr	r2, [pc, #48]	; (800a878 <TIM_Base_SetConfig+0xe4>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d00b      	beq.n	800a862 <TIM_Base_SetConfig+0xce>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	4a0d      	ldr	r2, [pc, #52]	; (800a884 <TIM_Base_SetConfig+0xf0>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d007      	beq.n	800a862 <TIM_Base_SetConfig+0xce>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	4a0c      	ldr	r2, [pc, #48]	; (800a888 <TIM_Base_SetConfig+0xf4>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d003      	beq.n	800a862 <TIM_Base_SetConfig+0xce>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4a0b      	ldr	r2, [pc, #44]	; (800a88c <TIM_Base_SetConfig+0xf8>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d103      	bne.n	800a86a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	691a      	ldr	r2, [r3, #16]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2201      	movs	r2, #1
 800a86e:	615a      	str	r2, [r3, #20]
}
 800a870:	46c0      	nop			; (mov r8, r8)
 800a872:	46bd      	mov	sp, r7
 800a874:	b004      	add	sp, #16
 800a876:	bd80      	pop	{r7, pc}
 800a878:	40012c00 	.word	0x40012c00
 800a87c:	40000400 	.word	0x40000400
 800a880:	40002000 	.word	0x40002000
 800a884:	40014000 	.word	0x40014000
 800a888:	40014400 	.word	0x40014400
 800a88c:	40014800 	.word	0x40014800
 800a890:	fffffcff 	.word	0xfffffcff

0800a894 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b086      	sub	sp, #24
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a1b      	ldr	r3, [r3, #32]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	4393      	bics	r3, r2
 800a8a6:	001a      	movs	r2, r3
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6a1b      	ldr	r3, [r3, #32]
 800a8b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	699b      	ldr	r3, [r3, #24]
 800a8bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	4a32      	ldr	r2, [pc, #200]	; (800a98c <TIM_OC1_SetConfig+0xf8>)
 800a8c2:	4013      	ands	r3, r2
 800a8c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2203      	movs	r2, #3
 800a8ca:	4393      	bics	r3, r2
 800a8cc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	68fa      	ldr	r2, [r7, #12]
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	2202      	movs	r2, #2
 800a8dc:	4393      	bics	r3, r2
 800a8de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	697a      	ldr	r2, [r7, #20]
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	4a28      	ldr	r2, [pc, #160]	; (800a990 <TIM_OC1_SetConfig+0xfc>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d00b      	beq.n	800a90a <TIM_OC1_SetConfig+0x76>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	4a27      	ldr	r2, [pc, #156]	; (800a994 <TIM_OC1_SetConfig+0x100>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d007      	beq.n	800a90a <TIM_OC1_SetConfig+0x76>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	4a26      	ldr	r2, [pc, #152]	; (800a998 <TIM_OC1_SetConfig+0x104>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d003      	beq.n	800a90a <TIM_OC1_SetConfig+0x76>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	4a25      	ldr	r2, [pc, #148]	; (800a99c <TIM_OC1_SetConfig+0x108>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d10c      	bne.n	800a924 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	2208      	movs	r2, #8
 800a90e:	4393      	bics	r3, r2
 800a910:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	697a      	ldr	r2, [r7, #20]
 800a918:	4313      	orrs	r3, r2
 800a91a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	2204      	movs	r2, #4
 800a920:	4393      	bics	r3, r2
 800a922:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4a1a      	ldr	r2, [pc, #104]	; (800a990 <TIM_OC1_SetConfig+0xfc>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d00b      	beq.n	800a944 <TIM_OC1_SetConfig+0xb0>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4a19      	ldr	r2, [pc, #100]	; (800a994 <TIM_OC1_SetConfig+0x100>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d007      	beq.n	800a944 <TIM_OC1_SetConfig+0xb0>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	4a18      	ldr	r2, [pc, #96]	; (800a998 <TIM_OC1_SetConfig+0x104>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d003      	beq.n	800a944 <TIM_OC1_SetConfig+0xb0>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	4a17      	ldr	r2, [pc, #92]	; (800a99c <TIM_OC1_SetConfig+0x108>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d111      	bne.n	800a968 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	4a16      	ldr	r2, [pc, #88]	; (800a9a0 <TIM_OC1_SetConfig+0x10c>)
 800a948:	4013      	ands	r3, r2
 800a94a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	4a15      	ldr	r2, [pc, #84]	; (800a9a4 <TIM_OC1_SetConfig+0x110>)
 800a950:	4013      	ands	r3, r2
 800a952:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	695b      	ldr	r3, [r3, #20]
 800a958:	693a      	ldr	r2, [r7, #16]
 800a95a:	4313      	orrs	r3, r2
 800a95c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	699b      	ldr	r3, [r3, #24]
 800a962:	693a      	ldr	r2, [r7, #16]
 800a964:	4313      	orrs	r3, r2
 800a966:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	693a      	ldr	r2, [r7, #16]
 800a96c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	68fa      	ldr	r2, [r7, #12]
 800a972:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	685a      	ldr	r2, [r3, #4]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	697a      	ldr	r2, [r7, #20]
 800a980:	621a      	str	r2, [r3, #32]
}
 800a982:	46c0      	nop			; (mov r8, r8)
 800a984:	46bd      	mov	sp, r7
 800a986:	b006      	add	sp, #24
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	46c0      	nop			; (mov r8, r8)
 800a98c:	fffeff8f 	.word	0xfffeff8f
 800a990:	40012c00 	.word	0x40012c00
 800a994:	40014000 	.word	0x40014000
 800a998:	40014400 	.word	0x40014400
 800a99c:	40014800 	.word	0x40014800
 800a9a0:	fffffeff 	.word	0xfffffeff
 800a9a4:	fffffdff 	.word	0xfffffdff

0800a9a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b086      	sub	sp, #24
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6a1b      	ldr	r3, [r3, #32]
 800a9b6:	2210      	movs	r2, #16
 800a9b8:	4393      	bics	r3, r2
 800a9ba:	001a      	movs	r2, r3
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6a1b      	ldr	r3, [r3, #32]
 800a9c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	699b      	ldr	r3, [r3, #24]
 800a9d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	4a2e      	ldr	r2, [pc, #184]	; (800aa90 <TIM_OC2_SetConfig+0xe8>)
 800a9d6:	4013      	ands	r3, r2
 800a9d8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	4a2d      	ldr	r2, [pc, #180]	; (800aa94 <TIM_OC2_SetConfig+0xec>)
 800a9de:	4013      	ands	r3, r2
 800a9e0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	021b      	lsls	r3, r3, #8
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	2220      	movs	r2, #32
 800a9f2:	4393      	bics	r3, r2
 800a9f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	689b      	ldr	r3, [r3, #8]
 800a9fa:	011b      	lsls	r3, r3, #4
 800a9fc:	697a      	ldr	r2, [r7, #20]
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	4a24      	ldr	r2, [pc, #144]	; (800aa98 <TIM_OC2_SetConfig+0xf0>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d10d      	bne.n	800aa26 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	2280      	movs	r2, #128	; 0x80
 800aa0e:	4393      	bics	r3, r2
 800aa10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	68db      	ldr	r3, [r3, #12]
 800aa16:	011b      	lsls	r3, r3, #4
 800aa18:	697a      	ldr	r2, [r7, #20]
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	2240      	movs	r2, #64	; 0x40
 800aa22:	4393      	bics	r3, r2
 800aa24:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	4a1b      	ldr	r2, [pc, #108]	; (800aa98 <TIM_OC2_SetConfig+0xf0>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d00b      	beq.n	800aa46 <TIM_OC2_SetConfig+0x9e>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4a1a      	ldr	r2, [pc, #104]	; (800aa9c <TIM_OC2_SetConfig+0xf4>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d007      	beq.n	800aa46 <TIM_OC2_SetConfig+0x9e>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4a19      	ldr	r2, [pc, #100]	; (800aaa0 <TIM_OC2_SetConfig+0xf8>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d003      	beq.n	800aa46 <TIM_OC2_SetConfig+0x9e>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4a18      	ldr	r2, [pc, #96]	; (800aaa4 <TIM_OC2_SetConfig+0xfc>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d113      	bne.n	800aa6e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	4a17      	ldr	r2, [pc, #92]	; (800aaa8 <TIM_OC2_SetConfig+0x100>)
 800aa4a:	4013      	ands	r3, r2
 800aa4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	4a16      	ldr	r2, [pc, #88]	; (800aaac <TIM_OC2_SetConfig+0x104>)
 800aa52:	4013      	ands	r3, r2
 800aa54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	695b      	ldr	r3, [r3, #20]
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	693a      	ldr	r2, [r7, #16]
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	699b      	ldr	r3, [r3, #24]
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	693a      	ldr	r2, [r7, #16]
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	693a      	ldr	r2, [r7, #16]
 800aa72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	68fa      	ldr	r2, [r7, #12]
 800aa78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	685a      	ldr	r2, [r3, #4]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	697a      	ldr	r2, [r7, #20]
 800aa86:	621a      	str	r2, [r3, #32]
}
 800aa88:	46c0      	nop			; (mov r8, r8)
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	b006      	add	sp, #24
 800aa8e:	bd80      	pop	{r7, pc}
 800aa90:	feff8fff 	.word	0xfeff8fff
 800aa94:	fffffcff 	.word	0xfffffcff
 800aa98:	40012c00 	.word	0x40012c00
 800aa9c:	40014000 	.word	0x40014000
 800aaa0:	40014400 	.word	0x40014400
 800aaa4:	40014800 	.word	0x40014800
 800aaa8:	fffffbff 	.word	0xfffffbff
 800aaac:	fffff7ff 	.word	0xfffff7ff

0800aab0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b086      	sub	sp, #24
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6a1b      	ldr	r3, [r3, #32]
 800aabe:	4a35      	ldr	r2, [pc, #212]	; (800ab94 <TIM_OC3_SetConfig+0xe4>)
 800aac0:	401a      	ands	r2, r3
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6a1b      	ldr	r3, [r3, #32]
 800aaca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	69db      	ldr	r3, [r3, #28]
 800aad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	4a2f      	ldr	r2, [pc, #188]	; (800ab98 <TIM_OC3_SetConfig+0xe8>)
 800aadc:	4013      	ands	r3, r2
 800aade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2203      	movs	r2, #3
 800aae4:	4393      	bics	r3, r2
 800aae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	68fa      	ldr	r2, [r7, #12]
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	4a29      	ldr	r2, [pc, #164]	; (800ab9c <TIM_OC3_SetConfig+0xec>)
 800aaf6:	4013      	ands	r3, r2
 800aaf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	689b      	ldr	r3, [r3, #8]
 800aafe:	021b      	lsls	r3, r3, #8
 800ab00:	697a      	ldr	r2, [r7, #20]
 800ab02:	4313      	orrs	r3, r2
 800ab04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4a25      	ldr	r2, [pc, #148]	; (800aba0 <TIM_OC3_SetConfig+0xf0>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d10d      	bne.n	800ab2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	4a24      	ldr	r2, [pc, #144]	; (800aba4 <TIM_OC3_SetConfig+0xf4>)
 800ab12:	4013      	ands	r3, r2
 800ab14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	021b      	lsls	r3, r3, #8
 800ab1c:	697a      	ldr	r2, [r7, #20]
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	4a20      	ldr	r2, [pc, #128]	; (800aba8 <TIM_OC3_SetConfig+0xf8>)
 800ab26:	4013      	ands	r3, r2
 800ab28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	4a1c      	ldr	r2, [pc, #112]	; (800aba0 <TIM_OC3_SetConfig+0xf0>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d00b      	beq.n	800ab4a <TIM_OC3_SetConfig+0x9a>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	4a1d      	ldr	r2, [pc, #116]	; (800abac <TIM_OC3_SetConfig+0xfc>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d007      	beq.n	800ab4a <TIM_OC3_SetConfig+0x9a>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4a1c      	ldr	r2, [pc, #112]	; (800abb0 <TIM_OC3_SetConfig+0x100>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d003      	beq.n	800ab4a <TIM_OC3_SetConfig+0x9a>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a1b      	ldr	r2, [pc, #108]	; (800abb4 <TIM_OC3_SetConfig+0x104>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d113      	bne.n	800ab72 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	4a1a      	ldr	r2, [pc, #104]	; (800abb8 <TIM_OC3_SetConfig+0x108>)
 800ab4e:	4013      	ands	r3, r2
 800ab50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	4a19      	ldr	r2, [pc, #100]	; (800abbc <TIM_OC3_SetConfig+0x10c>)
 800ab56:	4013      	ands	r3, r2
 800ab58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	695b      	ldr	r3, [r3, #20]
 800ab5e:	011b      	lsls	r3, r3, #4
 800ab60:	693a      	ldr	r2, [r7, #16]
 800ab62:	4313      	orrs	r3, r2
 800ab64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	699b      	ldr	r3, [r3, #24]
 800ab6a:	011b      	lsls	r3, r3, #4
 800ab6c:	693a      	ldr	r2, [r7, #16]
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	693a      	ldr	r2, [r7, #16]
 800ab76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	68fa      	ldr	r2, [r7, #12]
 800ab7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	685a      	ldr	r2, [r3, #4]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	697a      	ldr	r2, [r7, #20]
 800ab8a:	621a      	str	r2, [r3, #32]
}
 800ab8c:	46c0      	nop			; (mov r8, r8)
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	b006      	add	sp, #24
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	fffffeff 	.word	0xfffffeff
 800ab98:	fffeff8f 	.word	0xfffeff8f
 800ab9c:	fffffdff 	.word	0xfffffdff
 800aba0:	40012c00 	.word	0x40012c00
 800aba4:	fffff7ff 	.word	0xfffff7ff
 800aba8:	fffffbff 	.word	0xfffffbff
 800abac:	40014000 	.word	0x40014000
 800abb0:	40014400 	.word	0x40014400
 800abb4:	40014800 	.word	0x40014800
 800abb8:	ffffefff 	.word	0xffffefff
 800abbc:	ffffdfff 	.word	0xffffdfff

0800abc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b086      	sub	sp, #24
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6a1b      	ldr	r3, [r3, #32]
 800abce:	4a28      	ldr	r2, [pc, #160]	; (800ac70 <TIM_OC4_SetConfig+0xb0>)
 800abd0:	401a      	ands	r2, r3
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6a1b      	ldr	r3, [r3, #32]
 800abda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	69db      	ldr	r3, [r3, #28]
 800abe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	4a22      	ldr	r2, [pc, #136]	; (800ac74 <TIM_OC4_SetConfig+0xb4>)
 800abec:	4013      	ands	r3, r2
 800abee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	4a21      	ldr	r2, [pc, #132]	; (800ac78 <TIM_OC4_SetConfig+0xb8>)
 800abf4:	4013      	ands	r3, r2
 800abf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	021b      	lsls	r3, r3, #8
 800abfe:	68fa      	ldr	r2, [r7, #12]
 800ac00:	4313      	orrs	r3, r2
 800ac02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	4a1d      	ldr	r2, [pc, #116]	; (800ac7c <TIM_OC4_SetConfig+0xbc>)
 800ac08:	4013      	ands	r3, r2
 800ac0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	031b      	lsls	r3, r3, #12
 800ac12:	693a      	ldr	r2, [r7, #16]
 800ac14:	4313      	orrs	r3, r2
 800ac16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	4a19      	ldr	r2, [pc, #100]	; (800ac80 <TIM_OC4_SetConfig+0xc0>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d00b      	beq.n	800ac38 <TIM_OC4_SetConfig+0x78>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	4a18      	ldr	r2, [pc, #96]	; (800ac84 <TIM_OC4_SetConfig+0xc4>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d007      	beq.n	800ac38 <TIM_OC4_SetConfig+0x78>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	4a17      	ldr	r2, [pc, #92]	; (800ac88 <TIM_OC4_SetConfig+0xc8>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d003      	beq.n	800ac38 <TIM_OC4_SetConfig+0x78>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	4a16      	ldr	r2, [pc, #88]	; (800ac8c <TIM_OC4_SetConfig+0xcc>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d109      	bne.n	800ac4c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	4a15      	ldr	r2, [pc, #84]	; (800ac90 <TIM_OC4_SetConfig+0xd0>)
 800ac3c:	4013      	ands	r3, r2
 800ac3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	695b      	ldr	r3, [r3, #20]
 800ac44:	019b      	lsls	r3, r3, #6
 800ac46:	697a      	ldr	r2, [r7, #20]
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	697a      	ldr	r2, [r7, #20]
 800ac50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	685a      	ldr	r2, [r3, #4]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	693a      	ldr	r2, [r7, #16]
 800ac64:	621a      	str	r2, [r3, #32]
}
 800ac66:	46c0      	nop			; (mov r8, r8)
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	b006      	add	sp, #24
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	46c0      	nop			; (mov r8, r8)
 800ac70:	ffffefff 	.word	0xffffefff
 800ac74:	feff8fff 	.word	0xfeff8fff
 800ac78:	fffffcff 	.word	0xfffffcff
 800ac7c:	ffffdfff 	.word	0xffffdfff
 800ac80:	40012c00 	.word	0x40012c00
 800ac84:	40014000 	.word	0x40014000
 800ac88:	40014400 	.word	0x40014400
 800ac8c:	40014800 	.word	0x40014800
 800ac90:	ffffbfff 	.word	0xffffbfff

0800ac94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b086      	sub	sp, #24
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6a1b      	ldr	r3, [r3, #32]
 800aca2:	4a25      	ldr	r2, [pc, #148]	; (800ad38 <TIM_OC5_SetConfig+0xa4>)
 800aca4:	401a      	ands	r2, r3
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a1b      	ldr	r3, [r3, #32]
 800acae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	4a1f      	ldr	r2, [pc, #124]	; (800ad3c <TIM_OC5_SetConfig+0xa8>)
 800acc0:	4013      	ands	r3, r2
 800acc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	4313      	orrs	r3, r2
 800accc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	4a1b      	ldr	r2, [pc, #108]	; (800ad40 <TIM_OC5_SetConfig+0xac>)
 800acd2:	4013      	ands	r3, r2
 800acd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	689b      	ldr	r3, [r3, #8]
 800acda:	041b      	lsls	r3, r3, #16
 800acdc:	693a      	ldr	r2, [r7, #16]
 800acde:	4313      	orrs	r3, r2
 800ace0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	4a17      	ldr	r2, [pc, #92]	; (800ad44 <TIM_OC5_SetConfig+0xb0>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d00b      	beq.n	800ad02 <TIM_OC5_SetConfig+0x6e>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4a16      	ldr	r2, [pc, #88]	; (800ad48 <TIM_OC5_SetConfig+0xb4>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d007      	beq.n	800ad02 <TIM_OC5_SetConfig+0x6e>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4a15      	ldr	r2, [pc, #84]	; (800ad4c <TIM_OC5_SetConfig+0xb8>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d003      	beq.n	800ad02 <TIM_OC5_SetConfig+0x6e>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	4a14      	ldr	r2, [pc, #80]	; (800ad50 <TIM_OC5_SetConfig+0xbc>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d109      	bne.n	800ad16 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	4a0c      	ldr	r2, [pc, #48]	; (800ad38 <TIM_OC5_SetConfig+0xa4>)
 800ad06:	4013      	ands	r3, r2
 800ad08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	695b      	ldr	r3, [r3, #20]
 800ad0e:	021b      	lsls	r3, r3, #8
 800ad10:	697a      	ldr	r2, [r7, #20]
 800ad12:	4313      	orrs	r3, r2
 800ad14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	697a      	ldr	r2, [r7, #20]
 800ad1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	68fa      	ldr	r2, [r7, #12]
 800ad20:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	685a      	ldr	r2, [r3, #4]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	693a      	ldr	r2, [r7, #16]
 800ad2e:	621a      	str	r2, [r3, #32]
}
 800ad30:	46c0      	nop			; (mov r8, r8)
 800ad32:	46bd      	mov	sp, r7
 800ad34:	b006      	add	sp, #24
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	fffeffff 	.word	0xfffeffff
 800ad3c:	fffeff8f 	.word	0xfffeff8f
 800ad40:	fffdffff 	.word	0xfffdffff
 800ad44:	40012c00 	.word	0x40012c00
 800ad48:	40014000 	.word	0x40014000
 800ad4c:	40014400 	.word	0x40014400
 800ad50:	40014800 	.word	0x40014800

0800ad54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b086      	sub	sp, #24
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6a1b      	ldr	r3, [r3, #32]
 800ad62:	4a26      	ldr	r2, [pc, #152]	; (800adfc <TIM_OC6_SetConfig+0xa8>)
 800ad64:	401a      	ands	r2, r3
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6a1b      	ldr	r3, [r3, #32]
 800ad6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	4a20      	ldr	r2, [pc, #128]	; (800ae00 <TIM_OC6_SetConfig+0xac>)
 800ad80:	4013      	ands	r3, r2
 800ad82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	021b      	lsls	r3, r3, #8
 800ad8a:	68fa      	ldr	r2, [r7, #12]
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	4a1c      	ldr	r2, [pc, #112]	; (800ae04 <TIM_OC6_SetConfig+0xb0>)
 800ad94:	4013      	ands	r3, r2
 800ad96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	689b      	ldr	r3, [r3, #8]
 800ad9c:	051b      	lsls	r3, r3, #20
 800ad9e:	693a      	ldr	r2, [r7, #16]
 800ada0:	4313      	orrs	r3, r2
 800ada2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	4a18      	ldr	r2, [pc, #96]	; (800ae08 <TIM_OC6_SetConfig+0xb4>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d00b      	beq.n	800adc4 <TIM_OC6_SetConfig+0x70>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	4a17      	ldr	r2, [pc, #92]	; (800ae0c <TIM_OC6_SetConfig+0xb8>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d007      	beq.n	800adc4 <TIM_OC6_SetConfig+0x70>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4a16      	ldr	r2, [pc, #88]	; (800ae10 <TIM_OC6_SetConfig+0xbc>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d003      	beq.n	800adc4 <TIM_OC6_SetConfig+0x70>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a15      	ldr	r2, [pc, #84]	; (800ae14 <TIM_OC6_SetConfig+0xc0>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d109      	bne.n	800add8 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	4a14      	ldr	r2, [pc, #80]	; (800ae18 <TIM_OC6_SetConfig+0xc4>)
 800adc8:	4013      	ands	r3, r2
 800adca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	695b      	ldr	r3, [r3, #20]
 800add0:	029b      	lsls	r3, r3, #10
 800add2:	697a      	ldr	r2, [r7, #20]
 800add4:	4313      	orrs	r3, r2
 800add6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	697a      	ldr	r2, [r7, #20]
 800addc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	685a      	ldr	r2, [r3, #4]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	693a      	ldr	r2, [r7, #16]
 800adf0:	621a      	str	r2, [r3, #32]
}
 800adf2:	46c0      	nop			; (mov r8, r8)
 800adf4:	46bd      	mov	sp, r7
 800adf6:	b006      	add	sp, #24
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	46c0      	nop			; (mov r8, r8)
 800adfc:	ffefffff 	.word	0xffefffff
 800ae00:	feff8fff 	.word	0xfeff8fff
 800ae04:	ffdfffff 	.word	0xffdfffff
 800ae08:	40012c00 	.word	0x40012c00
 800ae0c:	40014000 	.word	0x40014000
 800ae10:	40014400 	.word	0x40014400
 800ae14:	40014800 	.word	0x40014800
 800ae18:	fffbffff 	.word	0xfffbffff

0800ae1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b086      	sub	sp, #24
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	60b9      	str	r1, [r7, #8]
 800ae26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	6a1b      	ldr	r3, [r3, #32]
 800ae2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	6a1b      	ldr	r3, [r3, #32]
 800ae32:	2201      	movs	r2, #1
 800ae34:	4393      	bics	r3, r2
 800ae36:	001a      	movs	r2, r3
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	699b      	ldr	r3, [r3, #24]
 800ae40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	22f0      	movs	r2, #240	; 0xf0
 800ae46:	4393      	bics	r3, r2
 800ae48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	011b      	lsls	r3, r3, #4
 800ae4e:	693a      	ldr	r2, [r7, #16]
 800ae50:	4313      	orrs	r3, r2
 800ae52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	220a      	movs	r2, #10
 800ae58:	4393      	bics	r3, r2
 800ae5a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae5c:	697a      	ldr	r2, [r7, #20]
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	4313      	orrs	r3, r2
 800ae62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	693a      	ldr	r2, [r7, #16]
 800ae68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	697a      	ldr	r2, [r7, #20]
 800ae6e:	621a      	str	r2, [r3, #32]
}
 800ae70:	46c0      	nop			; (mov r8, r8)
 800ae72:	46bd      	mov	sp, r7
 800ae74:	b006      	add	sp, #24
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b086      	sub	sp, #24
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	60f8      	str	r0, [r7, #12]
 800ae80:	60b9      	str	r1, [r7, #8]
 800ae82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6a1b      	ldr	r3, [r3, #32]
 800ae88:	2210      	movs	r2, #16
 800ae8a:	4393      	bics	r3, r2
 800ae8c:	001a      	movs	r2, r3
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	699b      	ldr	r3, [r3, #24]
 800ae96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	6a1b      	ldr	r3, [r3, #32]
 800ae9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	4a0d      	ldr	r2, [pc, #52]	; (800aed8 <TIM_TI2_ConfigInputStage+0x60>)
 800aea2:	4013      	ands	r3, r2
 800aea4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	031b      	lsls	r3, r3, #12
 800aeaa:	697a      	ldr	r2, [r7, #20]
 800aeac:	4313      	orrs	r3, r2
 800aeae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	22a0      	movs	r2, #160	; 0xa0
 800aeb4:	4393      	bics	r3, r2
 800aeb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	011b      	lsls	r3, r3, #4
 800aebc:	693a      	ldr	r2, [r7, #16]
 800aebe:	4313      	orrs	r3, r2
 800aec0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	697a      	ldr	r2, [r7, #20]
 800aec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	693a      	ldr	r2, [r7, #16]
 800aecc:	621a      	str	r2, [r3, #32]
}
 800aece:	46c0      	nop			; (mov r8, r8)
 800aed0:	46bd      	mov	sp, r7
 800aed2:	b006      	add	sp, #24
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	46c0      	nop			; (mov r8, r8)
 800aed8:	ffff0fff 	.word	0xffff0fff

0800aedc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	4a08      	ldr	r2, [pc, #32]	; (800af10 <TIM_ITRx_SetConfig+0x34>)
 800aef0:	4013      	ands	r3, r2
 800aef2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aef4:	683a      	ldr	r2, [r7, #0]
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	4313      	orrs	r3, r2
 800aefa:	2207      	movs	r2, #7
 800aefc:	4313      	orrs	r3, r2
 800aefe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	68fa      	ldr	r2, [r7, #12]
 800af04:	609a      	str	r2, [r3, #8]
}
 800af06:	46c0      	nop			; (mov r8, r8)
 800af08:	46bd      	mov	sp, r7
 800af0a:	b004      	add	sp, #16
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	46c0      	nop			; (mov r8, r8)
 800af10:	ffcfff8f 	.word	0xffcfff8f

0800af14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b086      	sub	sp, #24
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	607a      	str	r2, [r7, #4]
 800af20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	689b      	ldr	r3, [r3, #8]
 800af26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	4a09      	ldr	r2, [pc, #36]	; (800af50 <TIM_ETR_SetConfig+0x3c>)
 800af2c:	4013      	ands	r3, r2
 800af2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	021a      	lsls	r2, r3, #8
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	431a      	orrs	r2, r3
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	697a      	ldr	r2, [r7, #20]
 800af3e:	4313      	orrs	r3, r2
 800af40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	697a      	ldr	r2, [r7, #20]
 800af46:	609a      	str	r2, [r3, #8]
}
 800af48:	46c0      	nop			; (mov r8, r8)
 800af4a:	46bd      	mov	sp, r7
 800af4c:	b006      	add	sp, #24
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	ffff00ff 	.word	0xffff00ff

0800af54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b086      	sub	sp, #24
 800af58:	af00      	add	r7, sp, #0
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	221f      	movs	r2, #31
 800af64:	4013      	ands	r3, r2
 800af66:	2201      	movs	r2, #1
 800af68:	409a      	lsls	r2, r3
 800af6a:	0013      	movs	r3, r2
 800af6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	6a1b      	ldr	r3, [r3, #32]
 800af72:	697a      	ldr	r2, [r7, #20]
 800af74:	43d2      	mvns	r2, r2
 800af76:	401a      	ands	r2, r3
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	6a1a      	ldr	r2, [r3, #32]
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	211f      	movs	r1, #31
 800af84:	400b      	ands	r3, r1
 800af86:	6879      	ldr	r1, [r7, #4]
 800af88:	4099      	lsls	r1, r3
 800af8a:	000b      	movs	r3, r1
 800af8c:	431a      	orrs	r2, r3
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	621a      	str	r2, [r3, #32]
}
 800af92:	46c0      	nop			; (mov r8, r8)
 800af94:	46bd      	mov	sp, r7
 800af96:	b006      	add	sp, #24
 800af98:	bd80      	pop	{r7, pc}
	...

0800af9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	223c      	movs	r2, #60	; 0x3c
 800afaa:	5c9b      	ldrb	r3, [r3, r2]
 800afac:	2b01      	cmp	r3, #1
 800afae:	d101      	bne.n	800afb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800afb0:	2302      	movs	r3, #2
 800afb2:	e055      	b.n	800b060 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	223c      	movs	r2, #60	; 0x3c
 800afb8:	2101      	movs	r1, #1
 800afba:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	223d      	movs	r2, #61	; 0x3d
 800afc0:	2102      	movs	r1, #2
 800afc2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	689b      	ldr	r3, [r3, #8]
 800afd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4a23      	ldr	r2, [pc, #140]	; (800b068 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d108      	bne.n	800aff0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	4a22      	ldr	r2, [pc, #136]	; (800b06c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800afe2:	4013      	ands	r3, r2
 800afe4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	4313      	orrs	r3, r2
 800afee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2270      	movs	r2, #112	; 0x70
 800aff4:	4393      	bics	r3, r2
 800aff6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	68fa      	ldr	r2, [r7, #12]
 800affe:	4313      	orrs	r3, r2
 800b000:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	68fa      	ldr	r2, [r7, #12]
 800b008:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a16      	ldr	r2, [pc, #88]	; (800b068 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d00f      	beq.n	800b034 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	2380      	movs	r3, #128	; 0x80
 800b01a:	05db      	lsls	r3, r3, #23
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d009      	beq.n	800b034 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a12      	ldr	r2, [pc, #72]	; (800b070 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d004      	beq.n	800b034 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4a11      	ldr	r2, [pc, #68]	; (800b074 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d10c      	bne.n	800b04e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	2280      	movs	r2, #128	; 0x80
 800b038:	4393      	bics	r3, r2
 800b03a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	689b      	ldr	r3, [r3, #8]
 800b040:	68ba      	ldr	r2, [r7, #8]
 800b042:	4313      	orrs	r3, r2
 800b044:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	68ba      	ldr	r2, [r7, #8]
 800b04c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	223d      	movs	r2, #61	; 0x3d
 800b052:	2101      	movs	r1, #1
 800b054:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	223c      	movs	r2, #60	; 0x3c
 800b05a:	2100      	movs	r1, #0
 800b05c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b05e:	2300      	movs	r3, #0
}
 800b060:	0018      	movs	r0, r3
 800b062:	46bd      	mov	sp, r7
 800b064:	b004      	add	sp, #16
 800b066:	bd80      	pop	{r7, pc}
 800b068:	40012c00 	.word	0x40012c00
 800b06c:	ff0fffff 	.word	0xff0fffff
 800b070:	40000400 	.word	0x40000400
 800b074:	40014000 	.word	0x40014000

0800b078 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b082:	2300      	movs	r3, #0
 800b084:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	223c      	movs	r2, #60	; 0x3c
 800b08a:	5c9b      	ldrb	r3, [r3, r2]
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	d101      	bne.n	800b094 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b090:	2302      	movs	r3, #2
 800b092:	e079      	b.n	800b188 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	223c      	movs	r2, #60	; 0x3c
 800b098:	2101      	movs	r1, #1
 800b09a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	22ff      	movs	r2, #255	; 0xff
 800b0a0:	4393      	bics	r3, r2
 800b0a2:	001a      	movs	r2, r3
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	4a38      	ldr	r2, [pc, #224]	; (800b190 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800b0b0:	401a      	ands	r2, r3
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	689b      	ldr	r3, [r3, #8]
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	4a35      	ldr	r2, [pc, #212]	; (800b194 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b0be:	401a      	ands	r2, r3
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	4a33      	ldr	r2, [pc, #204]	; (800b198 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b0cc:	401a      	ands	r2, r3
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	4a30      	ldr	r2, [pc, #192]	; (800b19c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b0da:	401a      	ands	r2, r3
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	691b      	ldr	r3, [r3, #16]
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	4a2e      	ldr	r2, [pc, #184]	; (800b1a0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800b0e8:	401a      	ands	r2, r3
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	695b      	ldr	r3, [r3, #20]
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	4a2b      	ldr	r2, [pc, #172]	; (800b1a4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800b0f6:	401a      	ands	r2, r3
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	4a29      	ldr	r2, [pc, #164]	; (800b1a8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800b104:	401a      	ands	r2, r3
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	699b      	ldr	r3, [r3, #24]
 800b10a:	041b      	lsls	r3, r3, #16
 800b10c:	4313      	orrs	r3, r2
 800b10e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4a25      	ldr	r2, [pc, #148]	; (800b1ac <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d106      	bne.n	800b128 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	4a24      	ldr	r2, [pc, #144]	; (800b1b0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b11e:	401a      	ands	r2, r3
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	69db      	ldr	r3, [r3, #28]
 800b124:	4313      	orrs	r3, r2
 800b126:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a1f      	ldr	r2, [pc, #124]	; (800b1ac <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d121      	bne.n	800b176 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	4a1f      	ldr	r2, [pc, #124]	; (800b1b4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b136:	401a      	ands	r2, r3
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b13c:	051b      	lsls	r3, r3, #20
 800b13e:	4313      	orrs	r3, r2
 800b140:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	4a1c      	ldr	r2, [pc, #112]	; (800b1b8 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800b146:	401a      	ands	r2, r3
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	6a1b      	ldr	r3, [r3, #32]
 800b14c:	4313      	orrs	r3, r2
 800b14e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	4a1a      	ldr	r2, [pc, #104]	; (800b1bc <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800b154:	401a      	ands	r2, r3
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15a:	4313      	orrs	r3, r2
 800b15c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4a12      	ldr	r2, [pc, #72]	; (800b1ac <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d106      	bne.n	800b176 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	4a15      	ldr	r2, [pc, #84]	; (800b1c0 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800b16c:	401a      	ands	r2, r3
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b172:	4313      	orrs	r3, r2
 800b174:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	68fa      	ldr	r2, [r7, #12]
 800b17c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	223c      	movs	r2, #60	; 0x3c
 800b182:	2100      	movs	r1, #0
 800b184:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b186:	2300      	movs	r3, #0
}
 800b188:	0018      	movs	r0, r3
 800b18a:	46bd      	mov	sp, r7
 800b18c:	b004      	add	sp, #16
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	fffffcff 	.word	0xfffffcff
 800b194:	fffffbff 	.word	0xfffffbff
 800b198:	fffff7ff 	.word	0xfffff7ff
 800b19c:	ffffefff 	.word	0xffffefff
 800b1a0:	ffffdfff 	.word	0xffffdfff
 800b1a4:	ffffbfff 	.word	0xffffbfff
 800b1a8:	fff0ffff 	.word	0xfff0ffff
 800b1ac:	40012c00 	.word	0x40012c00
 800b1b0:	efffffff 	.word	0xefffffff
 800b1b4:	ff0fffff 	.word	0xff0fffff
 800b1b8:	feffffff 	.word	0xfeffffff
 800b1bc:	fdffffff 	.word	0xfdffffff
 800b1c0:	dfffffff 	.word	0xdfffffff

0800b1c4 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b08a      	sub	sp, #40	; 0x28
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	60f8      	str	r0, [r7, #12]
 800b1cc:	60b9      	str	r1, [r7, #8]
 800b1ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b1d0:	2327      	movs	r3, #39	; 0x27
 800b1d2:	18fb      	adds	r3, r7, r3
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	223c      	movs	r2, #60	; 0x3c
 800b1dc:	5c9b      	ldrb	r3, [r3, r2]
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d101      	bne.n	800b1e6 <HAL_TIMEx_ConfigBreakInput+0x22>
 800b1e2:	2302      	movs	r3, #2
 800b1e4:	e095      	b.n	800b312 <HAL_TIMEx_ConfigBreakInput+0x14e>
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	223c      	movs	r2, #60	; 0x3c
 800b1ea:	2101      	movs	r1, #1
 800b1ec:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	2b04      	cmp	r3, #4
 800b1f4:	d019      	beq.n	800b22a <HAL_TIMEx_ConfigBreakInput+0x66>
 800b1f6:	d822      	bhi.n	800b23e <HAL_TIMEx_ConfigBreakInput+0x7a>
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	d002      	beq.n	800b202 <HAL_TIMEx_ConfigBreakInput+0x3e>
 800b1fc:	2b02      	cmp	r3, #2
 800b1fe:	d00a      	beq.n	800b216 <HAL_TIMEx_ConfigBreakInput+0x52>
 800b200:	e01d      	b.n	800b23e <HAL_TIMEx_ConfigBreakInput+0x7a>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800b202:	2301      	movs	r3, #1
 800b204:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800b206:	2300      	movs	r3, #0
 800b208:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800b20a:	2380      	movs	r3, #128	; 0x80
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800b210:	2309      	movs	r3, #9
 800b212:	617b      	str	r3, [r7, #20]
      break;
 800b214:	e01c      	b.n	800b250 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800b216:	2302      	movs	r3, #2
 800b218:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800b21a:	2301      	movs	r3, #1
 800b21c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800b21e:	2380      	movs	r3, #128	; 0x80
 800b220:	00db      	lsls	r3, r3, #3
 800b222:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800b224:	230a      	movs	r3, #10
 800b226:	617b      	str	r3, [r7, #20]
      break;
 800b228:	e012      	b.n	800b250 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800b22a:	2304      	movs	r3, #4
 800b22c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800b22e:	2302      	movs	r3, #2
 800b230:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800b232:	2380      	movs	r3, #128	; 0x80
 800b234:	011b      	lsls	r3, r3, #4
 800b236:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800b238:	230b      	movs	r3, #11
 800b23a:	617b      	str	r3, [r7, #20]
      break;
 800b23c:	e008      	b.n	800b250 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 800b23e:	2300      	movs	r3, #0
 800b240:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 800b242:	2300      	movs	r3, #0
 800b244:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 800b246:	2300      	movs	r3, #0
 800b248:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800b24a:	2300      	movs	r3, #0
 800b24c:	617b      	str	r3, [r7, #20]
      break;
 800b24e:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	2b01      	cmp	r3, #1
 800b254:	d003      	beq.n	800b25e <HAL_TIMEx_ConfigBreakInput+0x9a>
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	2b02      	cmp	r3, #2
 800b25a:	d027      	beq.n	800b2ac <HAL_TIMEx_ConfigBreakInput+0xe8>
 800b25c:	e04d      	b.n	800b2fa <HAL_TIMEx_ConfigBreakInput+0x136>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b264:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800b266:	6a3b      	ldr	r3, [r7, #32]
 800b268:	43da      	mvns	r2, r3
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	4013      	ands	r3, r2
 800b26e:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	685a      	ldr	r2, [r3, #4]
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	409a      	lsls	r2, r3
 800b278:	0013      	movs	r3, r2
 800b27a:	6a3a      	ldr	r2, [r7, #32]
 800b27c:	4013      	ands	r3, r2
 800b27e:	693a      	ldr	r2, [r7, #16]
 800b280:	4313      	orrs	r3, r2
 800b282:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800b284:	69fb      	ldr	r3, [r7, #28]
 800b286:	43da      	mvns	r2, r3
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	4013      	ands	r3, r2
 800b28c:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	689a      	ldr	r2, [r3, #8]
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	409a      	lsls	r2, r3
 800b296:	0013      	movs	r3, r2
 800b298:	69fa      	ldr	r2, [r7, #28]
 800b29a:	4013      	ands	r3, r2
 800b29c:	693a      	ldr	r2, [r7, #16]
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	693a      	ldr	r2, [r7, #16]
 800b2a8:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800b2aa:	e02b      	b.n	800b304 <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2b2:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800b2b4:	6a3b      	ldr	r3, [r7, #32]
 800b2b6:	43da      	mvns	r2, r3
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	4013      	ands	r3, r2
 800b2bc:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	685a      	ldr	r2, [r3, #4]
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	409a      	lsls	r2, r3
 800b2c6:	0013      	movs	r3, r2
 800b2c8:	6a3a      	ldr	r2, [r7, #32]
 800b2ca:	4013      	ands	r3, r2
 800b2cc:	693a      	ldr	r2, [r7, #16]
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800b2d2:	69fb      	ldr	r3, [r7, #28]
 800b2d4:	43da      	mvns	r2, r3
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	4013      	ands	r3, r2
 800b2da:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	689a      	ldr	r2, [r3, #8]
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	409a      	lsls	r2, r3
 800b2e4:	0013      	movs	r3, r2
 800b2e6:	69fa      	ldr	r2, [r7, #28]
 800b2e8:	4013      	ands	r3, r2
 800b2ea:	693a      	ldr	r2, [r7, #16]
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	693a      	ldr	r2, [r7, #16]
 800b2f6:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800b2f8:	e004      	b.n	800b304 <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    default:
      status = HAL_ERROR;
 800b2fa:	2327      	movs	r3, #39	; 0x27
 800b2fc:	18fb      	adds	r3, r7, r3
 800b2fe:	2201      	movs	r2, #1
 800b300:	701a      	strb	r2, [r3, #0]
      break;
 800b302:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	223c      	movs	r2, #60	; 0x3c
 800b308:	2100      	movs	r1, #0
 800b30a:	5499      	strb	r1, [r3, r2]

  return status;
 800b30c:	2327      	movs	r3, #39	; 0x27
 800b30e:	18fb      	adds	r3, r7, r3
 800b310:	781b      	ldrb	r3, [r3, #0]
}
 800b312:	0018      	movs	r0, r3
 800b314:	46bd      	mov	sp, r7
 800b316:	b00a      	add	sp, #40	; 0x28
 800b318:	bd80      	pop	{r7, pc}
	...

0800b31c <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d101      	bne.n	800b32e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800b32a:	2301      	movs	r3, #1
 800b32c:	e03f      	b.n	800b3ae <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2259      	movs	r2, #89	; 0x59
 800b332:	5c9b      	ldrb	r3, [r3, r2]
 800b334:	b2db      	uxtb	r3, r3
 800b336:	2b00      	cmp	r3, #0
 800b338:	d107      	bne.n	800b34a <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2258      	movs	r2, #88	; 0x58
 800b33e:	2100      	movs	r1, #0
 800b340:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	0018      	movs	r0, r3
 800b346:	f7f9 fd99 	bl	8004e7c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2259      	movs	r2, #89	; 0x59
 800b34e:	2102      	movs	r1, #2
 800b350:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	2101      	movs	r1, #1
 800b35e:	438a      	bics	r2, r1
 800b360:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	0018      	movs	r0, r3
 800b366:	f000 fae3 	bl	800b930 <USART_SetConfig>
 800b36a:	0003      	movs	r3, r0
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d101      	bne.n	800b374 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 800b370:	2301      	movs	r3, #1
 800b372:	e01c      	b.n	800b3ae <HAL_USART_Init+0x92>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	685a      	ldr	r2, [r3, #4]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	490e      	ldr	r1, [pc, #56]	; (800b3b8 <HAL_USART_Init+0x9c>)
 800b380:	400a      	ands	r2, r1
 800b382:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	689a      	ldr	r2, [r3, #8]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	212a      	movs	r1, #42	; 0x2a
 800b390:	438a      	bics	r2, r1
 800b392:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	2101      	movs	r1, #1
 800b3a0:	430a      	orrs	r2, r1
 800b3a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	0018      	movs	r0, r3
 800b3a8:	f000 fd5e 	bl	800be68 <USART_CheckIdleState>
 800b3ac:	0003      	movs	r3, r0
}
 800b3ae:	0018      	movs	r0, r3
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	b002      	add	sp, #8
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	46c0      	nop			; (mov r8, r8)
 800b3b8:	ffffbfff 	.word	0xffffbfff

0800b3bc <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b08a      	sub	sp, #40	; 0x28
 800b3c0:	af02      	add	r7, sp, #8
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	603b      	str	r3, [r7, #0]
 800b3c8:	1dbb      	adds	r3, r7, #6
 800b3ca:	801a      	strh	r2, [r3, #0]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2259      	movs	r2, #89	; 0x59
 800b3d0:	5c9b      	ldrb	r3, [r3, r2]
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d000      	beq.n	800b3da <HAL_USART_Transmit+0x1e>
 800b3d8:	e0a9      	b.n	800b52e <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d003      	beq.n	800b3e8 <HAL_USART_Transmit+0x2c>
 800b3e0:	1dbb      	adds	r3, r7, #6
 800b3e2:	881b      	ldrh	r3, [r3, #0]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d101      	bne.n	800b3ec <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	e0a1      	b.n	800b530 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	689a      	ldr	r2, [r3, #8]
 800b3f0:	2380      	movs	r3, #128	; 0x80
 800b3f2:	015b      	lsls	r3, r3, #5
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d109      	bne.n	800b40c <HAL_USART_Transmit+0x50>
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	691b      	ldr	r3, [r3, #16]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d105      	bne.n	800b40c <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	2201      	movs	r2, #1
 800b404:	4013      	ands	r3, r2
 800b406:	d001      	beq.n	800b40c <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 800b408:	2301      	movs	r3, #1
 800b40a:	e091      	b.n	800b530 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2258      	movs	r2, #88	; 0x58
 800b410:	5c9b      	ldrb	r3, [r3, r2]
 800b412:	2b01      	cmp	r3, #1
 800b414:	d101      	bne.n	800b41a <HAL_USART_Transmit+0x5e>
 800b416:	2302      	movs	r3, #2
 800b418:	e08a      	b.n	800b530 <HAL_USART_Transmit+0x174>
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2258      	movs	r2, #88	; 0x58
 800b41e:	2101      	movs	r1, #1
 800b420:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	2200      	movs	r2, #0
 800b426:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2259      	movs	r2, #89	; 0x59
 800b42c:	2112      	movs	r1, #18
 800b42e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b430:	f7f9 ff52 	bl	80052d8 <HAL_GetTick>
 800b434:	0003      	movs	r3, r0
 800b436:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	1dba      	adds	r2, r7, #6
 800b43c:	8812      	ldrh	r2, [r2, #0]
 800b43e:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	1dba      	adds	r2, r7, #6
 800b444:	8812      	ldrh	r2, [r2, #0]
 800b446:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	689a      	ldr	r2, [r3, #8]
 800b44c:	2380      	movs	r3, #128	; 0x80
 800b44e:	015b      	lsls	r3, r3, #5
 800b450:	429a      	cmp	r2, r3
 800b452:	d108      	bne.n	800b466 <HAL_USART_Transmit+0xaa>
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	691b      	ldr	r3, [r3, #16]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d104      	bne.n	800b466 <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 800b45c:	2300      	movs	r3, #0
 800b45e:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	61bb      	str	r3, [r7, #24]
 800b464:	e003      	b.n	800b46e <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800b46a:	2300      	movs	r3, #0
 800b46c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800b46e:	e02a      	b.n	800b4c6 <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b470:	697a      	ldr	r2, [r7, #20]
 800b472:	68f8      	ldr	r0, [r7, #12]
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	9300      	str	r3, [sp, #0]
 800b478:	0013      	movs	r3, r2
 800b47a:	2200      	movs	r2, #0
 800b47c:	2180      	movs	r1, #128	; 0x80
 800b47e:	f000 fa22 	bl	800b8c6 <USART_WaitOnFlagUntilTimeout>
 800b482:	1e03      	subs	r3, r0, #0
 800b484:	d001      	beq.n	800b48a <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800b486:	2303      	movs	r3, #3
 800b488:	e052      	b.n	800b530 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 800b48a:	69fb      	ldr	r3, [r7, #28]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d10b      	bne.n	800b4a8 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 800b490:	69bb      	ldr	r3, [r7, #24]
 800b492:	881b      	ldrh	r3, [r3, #0]
 800b494:	001a      	movs	r2, r3
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	05d2      	lsls	r2, r2, #23
 800b49c:	0dd2      	lsrs	r2, r2, #23
 800b49e:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	3302      	adds	r3, #2
 800b4a4:	61bb      	str	r3, [r7, #24]
 800b4a6:	e007      	b.n	800b4b8 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800b4a8:	69fb      	ldr	r3, [r7, #28]
 800b4aa:	781a      	ldrb	r2, [r3, #0]
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 800b4b2:	69fb      	ldr	r3, [r7, #28]
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	3b01      	subs	r3, #1
 800b4c0:	b29a      	uxth	r2, r3
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d1cf      	bne.n	800b470 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b4d0:	697a      	ldr	r2, [r7, #20]
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	9300      	str	r3, [sp, #0]
 800b4d8:	0013      	movs	r3, r2
 800b4da:	2200      	movs	r2, #0
 800b4dc:	2140      	movs	r1, #64	; 0x40
 800b4de:	f000 f9f2 	bl	800b8c6 <USART_WaitOnFlagUntilTimeout>
 800b4e2:	1e03      	subs	r3, r0, #0
 800b4e4:	d001      	beq.n	800b4ea <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 800b4e6:	2303      	movs	r3, #3
 800b4e8:	e022      	b.n	800b530 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	2240      	movs	r2, #64	; 0x40
 800b4f0:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	2208      	movs	r2, #8
 800b4f8:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	699a      	ldr	r2, [r3, #24]
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2108      	movs	r1, #8
 800b506:	430a      	orrs	r2, r1
 800b508:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	699a      	ldr	r2, [r3, #24]
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	2110      	movs	r1, #16
 800b516:	430a      	orrs	r2, r1
 800b518:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2259      	movs	r2, #89	; 0x59
 800b51e:	2101      	movs	r1, #1
 800b520:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2258      	movs	r2, #88	; 0x58
 800b526:	2100      	movs	r1, #0
 800b528:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800b52a:	2300      	movs	r3, #0
 800b52c:	e000      	b.n	800b530 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b52e:	2302      	movs	r3, #2
  }
}
 800b530:	0018      	movs	r0, r3
 800b532:	46bd      	mov	sp, r7
 800b534:	b008      	add	sp, #32
 800b536:	bd80      	pop	{r7, pc}

0800b538 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b088      	sub	sp, #32
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	69db      	ldr	r3, [r3, #28]
 800b546:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	689b      	ldr	r3, [r3, #8]
 800b556:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
 800b558:	69fb      	ldr	r3, [r7, #28]
 800b55a:	4ab3      	ldr	r2, [pc, #716]	; (800b828 <HAL_USART_IRQHandler+0x2f0>)
 800b55c:	4013      	ands	r3, r2
 800b55e:	613b      	str	r3, [r7, #16]
                                      USART_ISR_UDR));
  if (errorflags == 0U)
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d117      	bne.n	800b596 <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b566:	69fb      	ldr	r3, [r7, #28]
 800b568:	2220      	movs	r2, #32
 800b56a:	4013      	ands	r3, r2
 800b56c:	d013      	beq.n	800b596 <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b56e:	69bb      	ldr	r3, [r7, #24]
 800b570:	2220      	movs	r2, #32
 800b572:	4013      	ands	r3, r2
 800b574:	d104      	bne.n	800b580 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b576:	697a      	ldr	r2, [r7, #20]
 800b578:	2380      	movs	r3, #128	; 0x80
 800b57a:	055b      	lsls	r3, r3, #21
 800b57c:	4013      	ands	r3, r2
 800b57e:	d00a      	beq.n	800b596 <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b584:	2b00      	cmp	r3, #0
 800b586:	d100      	bne.n	800b58a <HAL_USART_IRQHandler+0x52>
 800b588:	e14a      	b.n	800b820 <HAL_USART_IRQHandler+0x2e8>
      {
        husart->RxISR(husart);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	0010      	movs	r0, r2
 800b592:	4798      	blx	r3
      }
      return;
 800b594:	e144      	b.n	800b820 <HAL_USART_IRQHandler+0x2e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d100      	bne.n	800b59e <HAL_USART_IRQHandler+0x66>
 800b59c:	e100      	b.n	800b7a0 <HAL_USART_IRQHandler+0x268>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	4aa2      	ldr	r2, [pc, #648]	; (800b82c <HAL_USART_IRQHandler+0x2f4>)
 800b5a2:	4013      	ands	r3, r2
 800b5a4:	d105      	bne.n	800b5b2 <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 800b5a6:	69ba      	ldr	r2, [r7, #24]
 800b5a8:	2390      	movs	r3, #144	; 0x90
 800b5aa:	005b      	lsls	r3, r3, #1
 800b5ac:	4013      	ands	r3, r2
 800b5ae:	d100      	bne.n	800b5b2 <HAL_USART_IRQHandler+0x7a>
 800b5b0:	e0f6      	b.n	800b7a0 <HAL_USART_IRQHandler+0x268>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	4013      	ands	r3, r2
 800b5b8:	d00e      	beq.n	800b5d8 <HAL_USART_IRQHandler+0xa0>
 800b5ba:	69ba      	ldr	r2, [r7, #24]
 800b5bc:	2380      	movs	r3, #128	; 0x80
 800b5be:	005b      	lsls	r3, r3, #1
 800b5c0:	4013      	ands	r3, r2
 800b5c2:	d009      	beq.n	800b5d8 <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	2201      	movs	r2, #1
 800b5ca:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	431a      	orrs	r2, r3
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	2202      	movs	r2, #2
 800b5dc:	4013      	ands	r3, r2
 800b5de:	d00d      	beq.n	800b5fc <HAL_USART_IRQHandler+0xc4>
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	4013      	ands	r3, r2
 800b5e6:	d009      	beq.n	800b5fc <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2202      	movs	r2, #2
 800b5ee:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5f4:	2204      	movs	r2, #4
 800b5f6:	431a      	orrs	r2, r3
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b5fc:	69fb      	ldr	r3, [r7, #28]
 800b5fe:	2204      	movs	r2, #4
 800b600:	4013      	ands	r3, r2
 800b602:	d00d      	beq.n	800b620 <HAL_USART_IRQHandler+0xe8>
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	2201      	movs	r2, #1
 800b608:	4013      	ands	r3, r2
 800b60a:	d009      	beq.n	800b620 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	2204      	movs	r2, #4
 800b612:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b618:	2202      	movs	r2, #2
 800b61a:	431a      	orrs	r2, r3
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	2208      	movs	r2, #8
 800b624:	4013      	ands	r3, r2
 800b626:	d011      	beq.n	800b64c <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b628:	69bb      	ldr	r3, [r7, #24]
 800b62a:	2220      	movs	r2, #32
 800b62c:	4013      	ands	r3, r2
 800b62e:	d103      	bne.n	800b638 <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	4a7e      	ldr	r2, [pc, #504]	; (800b82c <HAL_USART_IRQHandler+0x2f4>)
 800b634:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b636:	d009      	beq.n	800b64c <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2208      	movs	r2, #8
 800b63e:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b644:	2208      	movs	r2, #8
 800b646:	431a      	orrs	r2, r3
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b64c:	69fa      	ldr	r2, [r7, #28]
 800b64e:	2380      	movs	r3, #128	; 0x80
 800b650:	011b      	lsls	r3, r3, #4
 800b652:	4013      	ands	r3, r2
 800b654:	d00f      	beq.n	800b676 <HAL_USART_IRQHandler+0x13e>
 800b656:	69ba      	ldr	r2, [r7, #24]
 800b658:	2380      	movs	r3, #128	; 0x80
 800b65a:	04db      	lsls	r3, r3, #19
 800b65c:	4013      	ands	r3, r2
 800b65e:	d00a      	beq.n	800b676 <HAL_USART_IRQHandler+0x13e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	2280      	movs	r2, #128	; 0x80
 800b666:	0112      	lsls	r2, r2, #4
 800b668:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b66e:	2280      	movs	r2, #128	; 0x80
 800b670:	431a      	orrs	r2, r3
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b676:	69fa      	ldr	r2, [r7, #28]
 800b678:	2380      	movs	r3, #128	; 0x80
 800b67a:	019b      	lsls	r3, r3, #6
 800b67c:	4013      	ands	r3, r2
 800b67e:	d01a      	beq.n	800b6b6 <HAL_USART_IRQHandler+0x17e>
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	2201      	movs	r2, #1
 800b684:	4013      	ands	r3, r2
 800b686:	d016      	beq.n	800b6b6 <HAL_USART_IRQHandler+0x17e>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2259      	movs	r2, #89	; 0x59
 800b68c:	5c9b      	ldrb	r3, [r3, r2]
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	2b22      	cmp	r3, #34	; 0x22
 800b692:	d105      	bne.n	800b6a0 <HAL_USART_IRQHandler+0x168>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2280      	movs	r2, #128	; 0x80
 800b69a:	0192      	lsls	r2, r2, #6
 800b69c:	621a      	str	r2, [r3, #32]
        return;
 800b69e:	e0ca      	b.n	800b836 <HAL_USART_IRQHandler+0x2fe>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	2280      	movs	r2, #128	; 0x80
 800b6a6:	0192      	lsls	r2, r2, #6
 800b6a8:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6ae:	2220      	movs	r2, #32
 800b6b0:	431a      	orrs	r2, r3
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d100      	bne.n	800b6c0 <HAL_USART_IRQHandler+0x188>
 800b6be:	e0b1      	b.n	800b824 <HAL_USART_IRQHandler+0x2ec>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b6c0:	69fb      	ldr	r3, [r7, #28]
 800b6c2:	2220      	movs	r2, #32
 800b6c4:	4013      	ands	r3, r2
 800b6c6:	d011      	beq.n	800b6ec <HAL_USART_IRQHandler+0x1b4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b6c8:	69bb      	ldr	r3, [r7, #24]
 800b6ca:	2220      	movs	r2, #32
 800b6cc:	4013      	ands	r3, r2
 800b6ce:	d104      	bne.n	800b6da <HAL_USART_IRQHandler+0x1a2>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b6d0:	697a      	ldr	r2, [r7, #20]
 800b6d2:	2380      	movs	r3, #128	; 0x80
 800b6d4:	055b      	lsls	r3, r3, #21
 800b6d6:	4013      	ands	r3, r2
 800b6d8:	d008      	beq.n	800b6ec <HAL_USART_IRQHandler+0x1b4>
      {
        if (husart->RxISR != NULL)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d004      	beq.n	800b6ec <HAL_USART_IRQHandler+0x1b4>
        {
          husart->RxISR(husart);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	0010      	movs	r0, r2
 800b6ea:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6f0:	2208      	movs	r2, #8
 800b6f2:	4013      	ands	r3, r2
 800b6f4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	689b      	ldr	r3, [r3, #8]
 800b6fc:	2240      	movs	r2, #64	; 0x40
 800b6fe:	4013      	ands	r3, r2
 800b700:	2b40      	cmp	r3, #64	; 0x40
 800b702:	d002      	beq.n	800b70a <HAL_USART_IRQHandler+0x1d2>
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d040      	beq.n	800b78c <HAL_USART_IRQHandler+0x254>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	0018      	movs	r0, r3
 800b70e:	f000 f8a5 	bl	800b85c <USART_EndTransfer>

        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	689b      	ldr	r3, [r3, #8]
 800b718:	2240      	movs	r2, #64	; 0x40
 800b71a:	4013      	ands	r3, r2
 800b71c:	2b40      	cmp	r3, #64	; 0x40
 800b71e:	d130      	bne.n	800b782 <HAL_USART_IRQHandler+0x24a>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	689a      	ldr	r2, [r3, #8]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	2140      	movs	r1, #64	; 0x40
 800b72c:	438a      	bics	r2, r1
 800b72e:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b734:	2b00      	cmp	r3, #0
 800b736:	d008      	beq.n	800b74a <HAL_USART_IRQHandler+0x212>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b73c:	2200      	movs	r2, #0
 800b73e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b744:	0018      	movs	r0, r3
 800b746:	f7fa fa59 	bl	8005bfc <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d012      	beq.n	800b778 <HAL_USART_IRQHandler+0x240>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b756:	4a36      	ldr	r2, [pc, #216]	; (800b830 <HAL_USART_IRQHandler+0x2f8>)
 800b758:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b75e:	0018      	movs	r0, r3
 800b760:	f7fa fa4c 	bl	8005bfc <HAL_DMA_Abort_IT>
 800b764:	1e03      	subs	r3, r0, #0
 800b766:	d019      	beq.n	800b79c <HAL_USART_IRQHandler+0x264>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b76c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b772:	0018      	movs	r0, r3
 800b774:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b776:	e011      	b.n	800b79c <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	0018      	movs	r0, r3
 800b77c:	f000 f866 	bl	800b84c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b780:	e00c      	b.n	800b79c <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	0018      	movs	r0, r3
 800b786:	f000 f861 	bl	800b84c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b78a:	e007      	b.n	800b79c <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	0018      	movs	r0, r3
 800b790:	f000 f85c 	bl	800b84c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 800b79a:	e043      	b.n	800b824 <HAL_USART_IRQHandler+0x2ec>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b79c:	46c0      	nop			; (mov r8, r8)
    return;
 800b79e:	e041      	b.n	800b824 <HAL_USART_IRQHandler+0x2ec>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b7a0:	69fb      	ldr	r3, [r7, #28]
 800b7a2:	2280      	movs	r2, #128	; 0x80
 800b7a4:	4013      	ands	r3, r2
 800b7a6:	d012      	beq.n	800b7ce <HAL_USART_IRQHandler+0x296>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b7a8:	69bb      	ldr	r3, [r7, #24]
 800b7aa:	2280      	movs	r2, #128	; 0x80
 800b7ac:	4013      	ands	r3, r2
 800b7ae:	d104      	bne.n	800b7ba <HAL_USART_IRQHandler+0x282>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b7b0:	697a      	ldr	r2, [r7, #20]
 800b7b2:	2380      	movs	r3, #128	; 0x80
 800b7b4:	041b      	lsls	r3, r3, #16
 800b7b6:	4013      	ands	r3, r2
 800b7b8:	d009      	beq.n	800b7ce <HAL_USART_IRQHandler+0x296>
  {
    if (husart->TxISR != NULL)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d038      	beq.n	800b834 <HAL_USART_IRQHandler+0x2fc>
    {
      husart->TxISR(husart);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	0010      	movs	r0, r2
 800b7ca:	4798      	blx	r3
    }
    return;
 800b7cc:	e032      	b.n	800b834 <HAL_USART_IRQHandler+0x2fc>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b7ce:	69fb      	ldr	r3, [r7, #28]
 800b7d0:	2240      	movs	r2, #64	; 0x40
 800b7d2:	4013      	ands	r3, r2
 800b7d4:	d008      	beq.n	800b7e8 <HAL_USART_IRQHandler+0x2b0>
 800b7d6:	69bb      	ldr	r3, [r7, #24]
 800b7d8:	2240      	movs	r2, #64	; 0x40
 800b7da:	4013      	ands	r3, r2
 800b7dc:	d004      	beq.n	800b7e8 <HAL_USART_IRQHandler+0x2b0>
  {
    USART_EndTransmit_IT(husart);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	0018      	movs	r0, r3
 800b7e2:	f000 fb85 	bl	800bef0 <USART_EndTransmit_IT>
    return;
 800b7e6:	e026      	b.n	800b836 <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b7e8:	69fa      	ldr	r2, [r7, #28]
 800b7ea:	2380      	movs	r3, #128	; 0x80
 800b7ec:	041b      	lsls	r3, r3, #16
 800b7ee:	4013      	ands	r3, r2
 800b7f0:	d009      	beq.n	800b806 <HAL_USART_IRQHandler+0x2ce>
 800b7f2:	69ba      	ldr	r2, [r7, #24]
 800b7f4:	2380      	movs	r3, #128	; 0x80
 800b7f6:	05db      	lsls	r3, r3, #23
 800b7f8:	4013      	ands	r3, r2
 800b7fa:	d004      	beq.n	800b806 <HAL_USART_IRQHandler+0x2ce>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	0018      	movs	r0, r3
 800b800:	f000 fbc1 	bl	800bf86 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800b804:	e017      	b.n	800b836 <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b806:	69fa      	ldr	r2, [r7, #28]
 800b808:	2380      	movs	r3, #128	; 0x80
 800b80a:	045b      	lsls	r3, r3, #17
 800b80c:	4013      	ands	r3, r2
 800b80e:	d012      	beq.n	800b836 <HAL_USART_IRQHandler+0x2fe>
 800b810:	69bb      	ldr	r3, [r7, #24]
 800b812:	2b00      	cmp	r3, #0
 800b814:	da0f      	bge.n	800b836 <HAL_USART_IRQHandler+0x2fe>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	0018      	movs	r0, r3
 800b81a:	f000 fbac 	bl	800bf76 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800b81e:	e00a      	b.n	800b836 <HAL_USART_IRQHandler+0x2fe>
      return;
 800b820:	46c0      	nop			; (mov r8, r8)
 800b822:	e008      	b.n	800b836 <HAL_USART_IRQHandler+0x2fe>
    return;
 800b824:	46c0      	nop			; (mov r8, r8)
 800b826:	e006      	b.n	800b836 <HAL_USART_IRQHandler+0x2fe>
 800b828:	0000280f 	.word	0x0000280f
 800b82c:	10000001 	.word	0x10000001
 800b830:	0800b89d 	.word	0x0800b89d
    return;
 800b834:	46c0      	nop			; (mov r8, r8)
  }
}
 800b836:	46bd      	mov	sp, r7
 800b838:	b008      	add	sp, #32
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b082      	sub	sp, #8
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 800b844:	46c0      	nop			; (mov r8, r8)
 800b846:	46bd      	mov	sp, r7
 800b848:	b002      	add	sp, #8
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b082      	sub	sp, #8
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 800b854:	46c0      	nop			; (mov r8, r8)
 800b856:	46bd      	mov	sp, r7
 800b858:	b002      	add	sp, #8
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b082      	sub	sp, #8
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4909      	ldr	r1, [pc, #36]	; (800b894 <USART_EndTransfer+0x38>)
 800b870:	400a      	ands	r2, r1
 800b872:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	689a      	ldr	r2, [r3, #8]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	4906      	ldr	r1, [pc, #24]	; (800b898 <USART_EndTransfer+0x3c>)
 800b880:	400a      	ands	r2, r1
 800b882:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2259      	movs	r2, #89	; 0x59
 800b888:	2101      	movs	r1, #1
 800b88a:	5499      	strb	r1, [r3, r2]
}
 800b88c:	46c0      	nop			; (mov r8, r8)
 800b88e:	46bd      	mov	sp, r7
 800b890:	b002      	add	sp, #8
 800b892:	bd80      	pop	{r7, pc}
 800b894:	fffffe1f 	.word	0xfffffe1f
 800b898:	ef7ffffe 	.word	0xef7ffffe

0800b89c <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8a8:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	0018      	movs	r0, r3
 800b8ba:	f7ff ffc7 	bl	800b84c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800b8be:	46c0      	nop			; (mov r8, r8)
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	b004      	add	sp, #16
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800b8c6:	b580      	push	{r7, lr}
 800b8c8:	b084      	sub	sp, #16
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	60f8      	str	r0, [r7, #12]
 800b8ce:	60b9      	str	r1, [r7, #8]
 800b8d0:	603b      	str	r3, [r7, #0]
 800b8d2:	1dfb      	adds	r3, r7, #7
 800b8d4:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800b8d6:	e017      	b.n	800b908 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8d8:	69bb      	ldr	r3, [r7, #24]
 800b8da:	3301      	adds	r3, #1
 800b8dc:	d014      	beq.n	800b908 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8de:	f7f9 fcfb 	bl	80052d8 <HAL_GetTick>
 800b8e2:	0002      	movs	r2, r0
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	1ad3      	subs	r3, r2, r3
 800b8e8:	69ba      	ldr	r2, [r7, #24]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d302      	bcc.n	800b8f4 <USART_WaitOnFlagUntilTimeout+0x2e>
 800b8ee:	69bb      	ldr	r3, [r7, #24]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d109      	bne.n	800b908 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2259      	movs	r2, #89	; 0x59
 800b8f8:	2101      	movs	r1, #1
 800b8fa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2258      	movs	r2, #88	; 0x58
 800b900:	2100      	movs	r1, #0
 800b902:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b904:	2303      	movs	r3, #3
 800b906:	e00f      	b.n	800b928 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	69db      	ldr	r3, [r3, #28]
 800b90e:	68ba      	ldr	r2, [r7, #8]
 800b910:	4013      	ands	r3, r2
 800b912:	68ba      	ldr	r2, [r7, #8]
 800b914:	1ad3      	subs	r3, r2, r3
 800b916:	425a      	negs	r2, r3
 800b918:	4153      	adcs	r3, r2
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	001a      	movs	r2, r3
 800b91e:	1dfb      	adds	r3, r7, #7
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	429a      	cmp	r2, r3
 800b924:	d0d8      	beq.n	800b8d8 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b926:	2300      	movs	r3, #0
}
 800b928:	0018      	movs	r0, r3
 800b92a:	46bd      	mov	sp, r7
 800b92c:	b004      	add	sp, #16
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b088      	sub	sp, #32
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800b938:	231e      	movs	r3, #30
 800b93a:	18fb      	adds	r3, r7, r3
 800b93c:	2200      	movs	r2, #0
 800b93e:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800b940:	2300      	movs	r3, #0
 800b942:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	689a      	ldr	r2, [r3, #8]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	691b      	ldr	r3, [r3, #16]
 800b94c:	431a      	orrs	r2, r3
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	695b      	ldr	r3, [r3, #20]
 800b952:	4313      	orrs	r3, r2
 800b954:	2280      	movs	r2, #128	; 0x80
 800b956:	0212      	lsls	r2, r2, #8
 800b958:	4313      	orrs	r3, r2
 800b95a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	4ab1      	ldr	r2, [pc, #708]	; (800bc28 <USART_SetConfig+0x2f8>)
 800b964:	4013      	ands	r3, r2
 800b966:	0019      	movs	r1, r3
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	697a      	ldr	r2, [r7, #20]
 800b96e:	430a      	orrs	r2, r1
 800b970:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800b972:	2380      	movs	r3, #128	; 0x80
 800b974:	011b      	lsls	r3, r3, #4
 800b976:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6a1b      	ldr	r3, [r3, #32]
 800b97c:	697a      	ldr	r2, [r7, #20]
 800b97e:	4313      	orrs	r3, r2
 800b980:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	699a      	ldr	r2, [r3, #24]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	69db      	ldr	r3, [r3, #28]
 800b98a:	4313      	orrs	r3, r2
 800b98c:	697a      	ldr	r2, [r7, #20]
 800b98e:	4313      	orrs	r3, r2
 800b990:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	697a      	ldr	r2, [r7, #20]
 800b998:	4313      	orrs	r3, r2
 800b99a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	4aa2      	ldr	r2, [pc, #648]	; (800bc2c <USART_SetConfig+0x2fc>)
 800b9a4:	4013      	ands	r3, r2
 800b9a6:	0019      	movs	r1, r3
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	697a      	ldr	r2, [r7, #20]
 800b9ae:	430a      	orrs	r2, r1
 800b9b0:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b8:	220f      	movs	r2, #15
 800b9ba:	4393      	bics	r3, r2
 800b9bc:	0019      	movs	r1, r3
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	430a      	orrs	r2, r1
 800b9c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4a98      	ldr	r2, [pc, #608]	; (800bc30 <USART_SetConfig+0x300>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d127      	bne.n	800ba24 <USART_SetConfig+0xf4>
 800b9d4:	4b97      	ldr	r3, [pc, #604]	; (800bc34 <USART_SetConfig+0x304>)
 800b9d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9d8:	2203      	movs	r2, #3
 800b9da:	4013      	ands	r3, r2
 800b9dc:	2b03      	cmp	r3, #3
 800b9de:	d017      	beq.n	800ba10 <USART_SetConfig+0xe0>
 800b9e0:	d81b      	bhi.n	800ba1a <USART_SetConfig+0xea>
 800b9e2:	2b02      	cmp	r3, #2
 800b9e4:	d00a      	beq.n	800b9fc <USART_SetConfig+0xcc>
 800b9e6:	d818      	bhi.n	800ba1a <USART_SetConfig+0xea>
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d002      	beq.n	800b9f2 <USART_SetConfig+0xc2>
 800b9ec:	2b01      	cmp	r3, #1
 800b9ee:	d00a      	beq.n	800ba06 <USART_SetConfig+0xd6>
 800b9f0:	e013      	b.n	800ba1a <USART_SetConfig+0xea>
 800b9f2:	231f      	movs	r3, #31
 800b9f4:	18fb      	adds	r3, r7, r3
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	701a      	strb	r2, [r3, #0]
 800b9fa:	e058      	b.n	800baae <USART_SetConfig+0x17e>
 800b9fc:	231f      	movs	r3, #31
 800b9fe:	18fb      	adds	r3, r7, r3
 800ba00:	2202      	movs	r2, #2
 800ba02:	701a      	strb	r2, [r3, #0]
 800ba04:	e053      	b.n	800baae <USART_SetConfig+0x17e>
 800ba06:	231f      	movs	r3, #31
 800ba08:	18fb      	adds	r3, r7, r3
 800ba0a:	2204      	movs	r2, #4
 800ba0c:	701a      	strb	r2, [r3, #0]
 800ba0e:	e04e      	b.n	800baae <USART_SetConfig+0x17e>
 800ba10:	231f      	movs	r3, #31
 800ba12:	18fb      	adds	r3, r7, r3
 800ba14:	2208      	movs	r2, #8
 800ba16:	701a      	strb	r2, [r3, #0]
 800ba18:	e049      	b.n	800baae <USART_SetConfig+0x17e>
 800ba1a:	231f      	movs	r3, #31
 800ba1c:	18fb      	adds	r3, r7, r3
 800ba1e:	2210      	movs	r2, #16
 800ba20:	701a      	strb	r2, [r3, #0]
 800ba22:	e044      	b.n	800baae <USART_SetConfig+0x17e>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4a83      	ldr	r2, [pc, #524]	; (800bc38 <USART_SetConfig+0x308>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d127      	bne.n	800ba7e <USART_SetConfig+0x14e>
 800ba2e:	4b81      	ldr	r3, [pc, #516]	; (800bc34 <USART_SetConfig+0x304>)
 800ba30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba32:	220c      	movs	r2, #12
 800ba34:	4013      	ands	r3, r2
 800ba36:	2b0c      	cmp	r3, #12
 800ba38:	d017      	beq.n	800ba6a <USART_SetConfig+0x13a>
 800ba3a:	d81b      	bhi.n	800ba74 <USART_SetConfig+0x144>
 800ba3c:	2b08      	cmp	r3, #8
 800ba3e:	d00a      	beq.n	800ba56 <USART_SetConfig+0x126>
 800ba40:	d818      	bhi.n	800ba74 <USART_SetConfig+0x144>
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d002      	beq.n	800ba4c <USART_SetConfig+0x11c>
 800ba46:	2b04      	cmp	r3, #4
 800ba48:	d00a      	beq.n	800ba60 <USART_SetConfig+0x130>
 800ba4a:	e013      	b.n	800ba74 <USART_SetConfig+0x144>
 800ba4c:	231f      	movs	r3, #31
 800ba4e:	18fb      	adds	r3, r7, r3
 800ba50:	2200      	movs	r2, #0
 800ba52:	701a      	strb	r2, [r3, #0]
 800ba54:	e02b      	b.n	800baae <USART_SetConfig+0x17e>
 800ba56:	231f      	movs	r3, #31
 800ba58:	18fb      	adds	r3, r7, r3
 800ba5a:	2202      	movs	r2, #2
 800ba5c:	701a      	strb	r2, [r3, #0]
 800ba5e:	e026      	b.n	800baae <USART_SetConfig+0x17e>
 800ba60:	231f      	movs	r3, #31
 800ba62:	18fb      	adds	r3, r7, r3
 800ba64:	2204      	movs	r2, #4
 800ba66:	701a      	strb	r2, [r3, #0]
 800ba68:	e021      	b.n	800baae <USART_SetConfig+0x17e>
 800ba6a:	231f      	movs	r3, #31
 800ba6c:	18fb      	adds	r3, r7, r3
 800ba6e:	2208      	movs	r2, #8
 800ba70:	701a      	strb	r2, [r3, #0]
 800ba72:	e01c      	b.n	800baae <USART_SetConfig+0x17e>
 800ba74:	231f      	movs	r3, #31
 800ba76:	18fb      	adds	r3, r7, r3
 800ba78:	2210      	movs	r2, #16
 800ba7a:	701a      	strb	r2, [r3, #0]
 800ba7c:	e017      	b.n	800baae <USART_SetConfig+0x17e>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	4a6e      	ldr	r2, [pc, #440]	; (800bc3c <USART_SetConfig+0x30c>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d104      	bne.n	800ba92 <USART_SetConfig+0x162>
 800ba88:	231f      	movs	r3, #31
 800ba8a:	18fb      	adds	r3, r7, r3
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	701a      	strb	r2, [r3, #0]
 800ba90:	e00d      	b.n	800baae <USART_SetConfig+0x17e>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4a6a      	ldr	r2, [pc, #424]	; (800bc40 <USART_SetConfig+0x310>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d104      	bne.n	800baa6 <USART_SetConfig+0x176>
 800ba9c:	231f      	movs	r3, #31
 800ba9e:	18fb      	adds	r3, r7, r3
 800baa0:	2200      	movs	r2, #0
 800baa2:	701a      	strb	r2, [r3, #0]
 800baa4:	e003      	b.n	800baae <USART_SetConfig+0x17e>
 800baa6:	231f      	movs	r3, #31
 800baa8:	18fb      	adds	r3, r7, r3
 800baaa:	2210      	movs	r2, #16
 800baac:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 800baae:	231f      	movs	r3, #31
 800bab0:	18fb      	adds	r3, r7, r3
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	2b08      	cmp	r3, #8
 800bab6:	d100      	bne.n	800baba <USART_SetConfig+0x18a>
 800bab8:	e139      	b.n	800bd2e <USART_SetConfig+0x3fe>
 800baba:	dd00      	ble.n	800babe <USART_SetConfig+0x18e>
 800babc:	e195      	b.n	800bdea <USART_SetConfig+0x4ba>
 800babe:	2b04      	cmp	r3, #4
 800bac0:	d100      	bne.n	800bac4 <USART_SetConfig+0x194>
 800bac2:	e0d3      	b.n	800bc6c <USART_SetConfig+0x33c>
 800bac4:	dd00      	ble.n	800bac8 <USART_SetConfig+0x198>
 800bac6:	e190      	b.n	800bdea <USART_SetConfig+0x4ba>
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d003      	beq.n	800bad4 <USART_SetConfig+0x1a4>
 800bacc:	2b02      	cmp	r3, #2
 800bace:	d100      	bne.n	800bad2 <USART_SetConfig+0x1a2>
 800bad0:	e061      	b.n	800bb96 <USART_SetConfig+0x266>
 800bad2:	e18a      	b.n	800bdea <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800bad4:	f7fc fdb2 	bl	800863c <HAL_RCC_GetPCLK1Freq>
 800bad8:	0003      	movs	r3, r0
 800bada:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d044      	beq.n	800bb6e <USART_SetConfig+0x23e>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae8:	2b01      	cmp	r3, #1
 800baea:	d03e      	beq.n	800bb6a <USART_SetConfig+0x23a>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf0:	2b02      	cmp	r3, #2
 800baf2:	d038      	beq.n	800bb66 <USART_SetConfig+0x236>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf8:	2b03      	cmp	r3, #3
 800bafa:	d032      	beq.n	800bb62 <USART_SetConfig+0x232>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb00:	2b04      	cmp	r3, #4
 800bb02:	d02c      	beq.n	800bb5e <USART_SetConfig+0x22e>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb08:	2b05      	cmp	r3, #5
 800bb0a:	d026      	beq.n	800bb5a <USART_SetConfig+0x22a>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb10:	2b06      	cmp	r3, #6
 800bb12:	d020      	beq.n	800bb56 <USART_SetConfig+0x226>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb18:	2b07      	cmp	r3, #7
 800bb1a:	d01a      	beq.n	800bb52 <USART_SetConfig+0x222>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb20:	2b08      	cmp	r3, #8
 800bb22:	d014      	beq.n	800bb4e <USART_SetConfig+0x21e>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb28:	2b09      	cmp	r3, #9
 800bb2a:	d00e      	beq.n	800bb4a <USART_SetConfig+0x21a>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb30:	2b0a      	cmp	r3, #10
 800bb32:	d008      	beq.n	800bb46 <USART_SetConfig+0x216>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb38:	2b0b      	cmp	r3, #11
 800bb3a:	d102      	bne.n	800bb42 <USART_SetConfig+0x212>
 800bb3c:	2380      	movs	r3, #128	; 0x80
 800bb3e:	005b      	lsls	r3, r3, #1
 800bb40:	e016      	b.n	800bb70 <USART_SetConfig+0x240>
 800bb42:	2301      	movs	r3, #1
 800bb44:	e014      	b.n	800bb70 <USART_SetConfig+0x240>
 800bb46:	2380      	movs	r3, #128	; 0x80
 800bb48:	e012      	b.n	800bb70 <USART_SetConfig+0x240>
 800bb4a:	2340      	movs	r3, #64	; 0x40
 800bb4c:	e010      	b.n	800bb70 <USART_SetConfig+0x240>
 800bb4e:	2320      	movs	r3, #32
 800bb50:	e00e      	b.n	800bb70 <USART_SetConfig+0x240>
 800bb52:	2310      	movs	r3, #16
 800bb54:	e00c      	b.n	800bb70 <USART_SetConfig+0x240>
 800bb56:	230c      	movs	r3, #12
 800bb58:	e00a      	b.n	800bb70 <USART_SetConfig+0x240>
 800bb5a:	230a      	movs	r3, #10
 800bb5c:	e008      	b.n	800bb70 <USART_SetConfig+0x240>
 800bb5e:	2308      	movs	r3, #8
 800bb60:	e006      	b.n	800bb70 <USART_SetConfig+0x240>
 800bb62:	2306      	movs	r3, #6
 800bb64:	e004      	b.n	800bb70 <USART_SetConfig+0x240>
 800bb66:	2304      	movs	r3, #4
 800bb68:	e002      	b.n	800bb70 <USART_SetConfig+0x240>
 800bb6a:	2302      	movs	r3, #2
 800bb6c:	e000      	b.n	800bb70 <USART_SetConfig+0x240>
 800bb6e:	2301      	movs	r3, #1
 800bb70:	0019      	movs	r1, r3
 800bb72:	6938      	ldr	r0, [r7, #16]
 800bb74:	f7f4 fac6 	bl	8000104 <__udivsi3>
 800bb78:	0003      	movs	r3, r0
 800bb7a:	005a      	lsls	r2, r3, #1
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	085b      	lsrs	r3, r3, #1
 800bb82:	18d2      	adds	r2, r2, r3
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	0019      	movs	r1, r3
 800bb8a:	0010      	movs	r0, r2
 800bb8c:	f7f4 faba 	bl	8000104 <__udivsi3>
 800bb90:	0003      	movs	r3, r0
 800bb92:	61bb      	str	r3, [r7, #24]
      break;
 800bb94:	e12e      	b.n	800bdf4 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d052      	beq.n	800bc44 <USART_SetConfig+0x314>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d03e      	beq.n	800bc24 <USART_SetConfig+0x2f4>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbaa:	2b02      	cmp	r3, #2
 800bbac:	d038      	beq.n	800bc20 <USART_SetConfig+0x2f0>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb2:	2b03      	cmp	r3, #3
 800bbb4:	d032      	beq.n	800bc1c <USART_SetConfig+0x2ec>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbba:	2b04      	cmp	r3, #4
 800bbbc:	d02c      	beq.n	800bc18 <USART_SetConfig+0x2e8>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc2:	2b05      	cmp	r3, #5
 800bbc4:	d026      	beq.n	800bc14 <USART_SetConfig+0x2e4>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbca:	2b06      	cmp	r3, #6
 800bbcc:	d020      	beq.n	800bc10 <USART_SetConfig+0x2e0>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd2:	2b07      	cmp	r3, #7
 800bbd4:	d01a      	beq.n	800bc0c <USART_SetConfig+0x2dc>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbda:	2b08      	cmp	r3, #8
 800bbdc:	d014      	beq.n	800bc08 <USART_SetConfig+0x2d8>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe2:	2b09      	cmp	r3, #9
 800bbe4:	d00e      	beq.n	800bc04 <USART_SetConfig+0x2d4>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbea:	2b0a      	cmp	r3, #10
 800bbec:	d008      	beq.n	800bc00 <USART_SetConfig+0x2d0>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf2:	2b0b      	cmp	r3, #11
 800bbf4:	d102      	bne.n	800bbfc <USART_SetConfig+0x2cc>
 800bbf6:	2380      	movs	r3, #128	; 0x80
 800bbf8:	005b      	lsls	r3, r3, #1
 800bbfa:	e024      	b.n	800bc46 <USART_SetConfig+0x316>
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	e022      	b.n	800bc46 <USART_SetConfig+0x316>
 800bc00:	2380      	movs	r3, #128	; 0x80
 800bc02:	e020      	b.n	800bc46 <USART_SetConfig+0x316>
 800bc04:	2340      	movs	r3, #64	; 0x40
 800bc06:	e01e      	b.n	800bc46 <USART_SetConfig+0x316>
 800bc08:	2320      	movs	r3, #32
 800bc0a:	e01c      	b.n	800bc46 <USART_SetConfig+0x316>
 800bc0c:	2310      	movs	r3, #16
 800bc0e:	e01a      	b.n	800bc46 <USART_SetConfig+0x316>
 800bc10:	230c      	movs	r3, #12
 800bc12:	e018      	b.n	800bc46 <USART_SetConfig+0x316>
 800bc14:	230a      	movs	r3, #10
 800bc16:	e016      	b.n	800bc46 <USART_SetConfig+0x316>
 800bc18:	2308      	movs	r3, #8
 800bc1a:	e014      	b.n	800bc46 <USART_SetConfig+0x316>
 800bc1c:	2306      	movs	r3, #6
 800bc1e:	e012      	b.n	800bc46 <USART_SetConfig+0x316>
 800bc20:	2304      	movs	r3, #4
 800bc22:	e010      	b.n	800bc46 <USART_SetConfig+0x316>
 800bc24:	2302      	movs	r3, #2
 800bc26:	e00e      	b.n	800bc46 <USART_SetConfig+0x316>
 800bc28:	cfff69f3 	.word	0xcfff69f3
 800bc2c:	ffffc0f6 	.word	0xffffc0f6
 800bc30:	40013800 	.word	0x40013800
 800bc34:	40021000 	.word	0x40021000
 800bc38:	40004400 	.word	0x40004400
 800bc3c:	40004800 	.word	0x40004800
 800bc40:	40004c00 	.word	0x40004c00
 800bc44:	2301      	movs	r3, #1
 800bc46:	0019      	movs	r1, r3
 800bc48:	4886      	ldr	r0, [pc, #536]	; (800be64 <USART_SetConfig+0x534>)
 800bc4a:	f7f4 fa5b 	bl	8000104 <__udivsi3>
 800bc4e:	0003      	movs	r3, r0
 800bc50:	005a      	lsls	r2, r3, #1
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	685b      	ldr	r3, [r3, #4]
 800bc56:	085b      	lsrs	r3, r3, #1
 800bc58:	18d2      	adds	r2, r2, r3
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	0019      	movs	r1, r3
 800bc60:	0010      	movs	r0, r2
 800bc62:	f7f4 fa4f 	bl	8000104 <__udivsi3>
 800bc66:	0003      	movs	r3, r0
 800bc68:	61bb      	str	r3, [r7, #24]
      break;
 800bc6a:	e0c3      	b.n	800bdf4 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800bc6c:	f7fc fc5a 	bl	8008524 <HAL_RCC_GetSysClockFreq>
 800bc70:	0003      	movs	r3, r0
 800bc72:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d044      	beq.n	800bd06 <USART_SetConfig+0x3d6>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d03e      	beq.n	800bd02 <USART_SetConfig+0x3d2>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc88:	2b02      	cmp	r3, #2
 800bc8a:	d038      	beq.n	800bcfe <USART_SetConfig+0x3ce>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc90:	2b03      	cmp	r3, #3
 800bc92:	d032      	beq.n	800bcfa <USART_SetConfig+0x3ca>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc98:	2b04      	cmp	r3, #4
 800bc9a:	d02c      	beq.n	800bcf6 <USART_SetConfig+0x3c6>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca0:	2b05      	cmp	r3, #5
 800bca2:	d026      	beq.n	800bcf2 <USART_SetConfig+0x3c2>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca8:	2b06      	cmp	r3, #6
 800bcaa:	d020      	beq.n	800bcee <USART_SetConfig+0x3be>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb0:	2b07      	cmp	r3, #7
 800bcb2:	d01a      	beq.n	800bcea <USART_SetConfig+0x3ba>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb8:	2b08      	cmp	r3, #8
 800bcba:	d014      	beq.n	800bce6 <USART_SetConfig+0x3b6>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc0:	2b09      	cmp	r3, #9
 800bcc2:	d00e      	beq.n	800bce2 <USART_SetConfig+0x3b2>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc8:	2b0a      	cmp	r3, #10
 800bcca:	d008      	beq.n	800bcde <USART_SetConfig+0x3ae>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd0:	2b0b      	cmp	r3, #11
 800bcd2:	d102      	bne.n	800bcda <USART_SetConfig+0x3aa>
 800bcd4:	2380      	movs	r3, #128	; 0x80
 800bcd6:	005b      	lsls	r3, r3, #1
 800bcd8:	e016      	b.n	800bd08 <USART_SetConfig+0x3d8>
 800bcda:	2301      	movs	r3, #1
 800bcdc:	e014      	b.n	800bd08 <USART_SetConfig+0x3d8>
 800bcde:	2380      	movs	r3, #128	; 0x80
 800bce0:	e012      	b.n	800bd08 <USART_SetConfig+0x3d8>
 800bce2:	2340      	movs	r3, #64	; 0x40
 800bce4:	e010      	b.n	800bd08 <USART_SetConfig+0x3d8>
 800bce6:	2320      	movs	r3, #32
 800bce8:	e00e      	b.n	800bd08 <USART_SetConfig+0x3d8>
 800bcea:	2310      	movs	r3, #16
 800bcec:	e00c      	b.n	800bd08 <USART_SetConfig+0x3d8>
 800bcee:	230c      	movs	r3, #12
 800bcf0:	e00a      	b.n	800bd08 <USART_SetConfig+0x3d8>
 800bcf2:	230a      	movs	r3, #10
 800bcf4:	e008      	b.n	800bd08 <USART_SetConfig+0x3d8>
 800bcf6:	2308      	movs	r3, #8
 800bcf8:	e006      	b.n	800bd08 <USART_SetConfig+0x3d8>
 800bcfa:	2306      	movs	r3, #6
 800bcfc:	e004      	b.n	800bd08 <USART_SetConfig+0x3d8>
 800bcfe:	2304      	movs	r3, #4
 800bd00:	e002      	b.n	800bd08 <USART_SetConfig+0x3d8>
 800bd02:	2302      	movs	r3, #2
 800bd04:	e000      	b.n	800bd08 <USART_SetConfig+0x3d8>
 800bd06:	2301      	movs	r3, #1
 800bd08:	0019      	movs	r1, r3
 800bd0a:	6938      	ldr	r0, [r7, #16]
 800bd0c:	f7f4 f9fa 	bl	8000104 <__udivsi3>
 800bd10:	0003      	movs	r3, r0
 800bd12:	005a      	lsls	r2, r3, #1
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	685b      	ldr	r3, [r3, #4]
 800bd18:	085b      	lsrs	r3, r3, #1
 800bd1a:	18d2      	adds	r2, r2, r3
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	0019      	movs	r1, r3
 800bd22:	0010      	movs	r0, r2
 800bd24:	f7f4 f9ee 	bl	8000104 <__udivsi3>
 800bd28:	0003      	movs	r3, r0
 800bd2a:	61bb      	str	r3, [r7, #24]
      break;
 800bd2c:	e062      	b.n	800bdf4 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d044      	beq.n	800bdc0 <USART_SetConfig+0x490>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd3a:	2b01      	cmp	r3, #1
 800bd3c:	d03e      	beq.n	800bdbc <USART_SetConfig+0x48c>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd42:	2b02      	cmp	r3, #2
 800bd44:	d038      	beq.n	800bdb8 <USART_SetConfig+0x488>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd4a:	2b03      	cmp	r3, #3
 800bd4c:	d032      	beq.n	800bdb4 <USART_SetConfig+0x484>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd52:	2b04      	cmp	r3, #4
 800bd54:	d02c      	beq.n	800bdb0 <USART_SetConfig+0x480>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd5a:	2b05      	cmp	r3, #5
 800bd5c:	d026      	beq.n	800bdac <USART_SetConfig+0x47c>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd62:	2b06      	cmp	r3, #6
 800bd64:	d020      	beq.n	800bda8 <USART_SetConfig+0x478>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd6a:	2b07      	cmp	r3, #7
 800bd6c:	d01a      	beq.n	800bda4 <USART_SetConfig+0x474>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd72:	2b08      	cmp	r3, #8
 800bd74:	d014      	beq.n	800bda0 <USART_SetConfig+0x470>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd7a:	2b09      	cmp	r3, #9
 800bd7c:	d00e      	beq.n	800bd9c <USART_SetConfig+0x46c>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd82:	2b0a      	cmp	r3, #10
 800bd84:	d008      	beq.n	800bd98 <USART_SetConfig+0x468>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd8a:	2b0b      	cmp	r3, #11
 800bd8c:	d102      	bne.n	800bd94 <USART_SetConfig+0x464>
 800bd8e:	2380      	movs	r3, #128	; 0x80
 800bd90:	005b      	lsls	r3, r3, #1
 800bd92:	e016      	b.n	800bdc2 <USART_SetConfig+0x492>
 800bd94:	2301      	movs	r3, #1
 800bd96:	e014      	b.n	800bdc2 <USART_SetConfig+0x492>
 800bd98:	2380      	movs	r3, #128	; 0x80
 800bd9a:	e012      	b.n	800bdc2 <USART_SetConfig+0x492>
 800bd9c:	2340      	movs	r3, #64	; 0x40
 800bd9e:	e010      	b.n	800bdc2 <USART_SetConfig+0x492>
 800bda0:	2320      	movs	r3, #32
 800bda2:	e00e      	b.n	800bdc2 <USART_SetConfig+0x492>
 800bda4:	2310      	movs	r3, #16
 800bda6:	e00c      	b.n	800bdc2 <USART_SetConfig+0x492>
 800bda8:	230c      	movs	r3, #12
 800bdaa:	e00a      	b.n	800bdc2 <USART_SetConfig+0x492>
 800bdac:	230a      	movs	r3, #10
 800bdae:	e008      	b.n	800bdc2 <USART_SetConfig+0x492>
 800bdb0:	2308      	movs	r3, #8
 800bdb2:	e006      	b.n	800bdc2 <USART_SetConfig+0x492>
 800bdb4:	2306      	movs	r3, #6
 800bdb6:	e004      	b.n	800bdc2 <USART_SetConfig+0x492>
 800bdb8:	2304      	movs	r3, #4
 800bdba:	e002      	b.n	800bdc2 <USART_SetConfig+0x492>
 800bdbc:	2302      	movs	r3, #2
 800bdbe:	e000      	b.n	800bdc2 <USART_SetConfig+0x492>
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	0019      	movs	r1, r3
 800bdc4:	2380      	movs	r3, #128	; 0x80
 800bdc6:	0218      	lsls	r0, r3, #8
 800bdc8:	f7f4 f99c 	bl	8000104 <__udivsi3>
 800bdcc:	0003      	movs	r3, r0
 800bdce:	005a      	lsls	r2, r3, #1
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	085b      	lsrs	r3, r3, #1
 800bdd6:	18d2      	adds	r2, r2, r3
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	0019      	movs	r1, r3
 800bdde:	0010      	movs	r0, r2
 800bde0:	f7f4 f990 	bl	8000104 <__udivsi3>
 800bde4:	0003      	movs	r3, r0
 800bde6:	61bb      	str	r3, [r7, #24]
      break;
 800bde8:	e004      	b.n	800bdf4 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 800bdea:	231e      	movs	r3, #30
 800bdec:	18fb      	adds	r3, r7, r3
 800bdee:	2201      	movs	r2, #1
 800bdf0:	701a      	strb	r2, [r3, #0]
      break;
 800bdf2:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800bdf4:	69bb      	ldr	r3, [r7, #24]
 800bdf6:	2b0f      	cmp	r3, #15
 800bdf8:	d91c      	bls.n	800be34 <USART_SetConfig+0x504>
 800bdfa:	69ba      	ldr	r2, [r7, #24]
 800bdfc:	2380      	movs	r3, #128	; 0x80
 800bdfe:	025b      	lsls	r3, r3, #9
 800be00:	429a      	cmp	r2, r3
 800be02:	d217      	bcs.n	800be34 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800be04:	69bb      	ldr	r3, [r7, #24]
 800be06:	b29a      	uxth	r2, r3
 800be08:	200e      	movs	r0, #14
 800be0a:	183b      	adds	r3, r7, r0
 800be0c:	210f      	movs	r1, #15
 800be0e:	438a      	bics	r2, r1
 800be10:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800be12:	69bb      	ldr	r3, [r7, #24]
 800be14:	085b      	lsrs	r3, r3, #1
 800be16:	b29b      	uxth	r3, r3
 800be18:	2207      	movs	r2, #7
 800be1a:	4013      	ands	r3, r2
 800be1c:	b299      	uxth	r1, r3
 800be1e:	183b      	adds	r3, r7, r0
 800be20:	183a      	adds	r2, r7, r0
 800be22:	8812      	ldrh	r2, [r2, #0]
 800be24:	430a      	orrs	r2, r1
 800be26:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	183a      	adds	r2, r7, r0
 800be2e:	8812      	ldrh	r2, [r2, #0]
 800be30:	60da      	str	r2, [r3, #12]
 800be32:	e003      	b.n	800be3c <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 800be34:	231e      	movs	r3, #30
 800be36:	18fb      	adds	r3, r7, r3
 800be38:	2201      	movs	r2, #1
 800be3a:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2201      	movs	r2, #1
 800be40:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2201      	movs	r2, #1
 800be46:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2200      	movs	r2, #0
 800be4c:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2200      	movs	r2, #0
 800be52:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 800be54:	231e      	movs	r3, #30
 800be56:	18fb      	adds	r3, r7, r3
 800be58:	781b      	ldrb	r3, [r3, #0]
}
 800be5a:	0018      	movs	r0, r3
 800be5c:	46bd      	mov	sp, r7
 800be5e:	b008      	add	sp, #32
 800be60:	bd80      	pop	{r7, pc}
 800be62:	46c0      	nop			; (mov r8, r8)
 800be64:	00f42400 	.word	0x00f42400

0800be68 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b086      	sub	sp, #24
 800be6c:	af02      	add	r7, sp, #8
 800be6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800be76:	f7f9 fa2f 	bl	80052d8 <HAL_GetTick>
 800be7a:	0003      	movs	r3, r0
 800be7c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2208      	movs	r2, #8
 800be86:	4013      	ands	r3, r2
 800be88:	2b08      	cmp	r3, #8
 800be8a:	d10e      	bne.n	800beaa <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800be8c:	68fa      	ldr	r2, [r7, #12]
 800be8e:	2380      	movs	r3, #128	; 0x80
 800be90:	0399      	lsls	r1, r3, #14
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	23fa      	movs	r3, #250	; 0xfa
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	9300      	str	r3, [sp, #0]
 800be9a:	0013      	movs	r3, r2
 800be9c:	2200      	movs	r2, #0
 800be9e:	f7ff fd12 	bl	800b8c6 <USART_WaitOnFlagUntilTimeout>
 800bea2:	1e03      	subs	r3, r0, #0
 800bea4:	d001      	beq.n	800beaa <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bea6:	2303      	movs	r3, #3
 800bea8:	e01e      	b.n	800bee8 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	2204      	movs	r2, #4
 800beb2:	4013      	ands	r3, r2
 800beb4:	2b04      	cmp	r3, #4
 800beb6:	d10e      	bne.n	800bed6 <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800beb8:	68fa      	ldr	r2, [r7, #12]
 800beba:	2380      	movs	r3, #128	; 0x80
 800bebc:	03d9      	lsls	r1, r3, #15
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	23fa      	movs	r3, #250	; 0xfa
 800bec2:	009b      	lsls	r3, r3, #2
 800bec4:	9300      	str	r3, [sp, #0]
 800bec6:	0013      	movs	r3, r2
 800bec8:	2200      	movs	r2, #0
 800beca:	f7ff fcfc 	bl	800b8c6 <USART_WaitOnFlagUntilTimeout>
 800bece:	1e03      	subs	r3, r0, #0
 800bed0:	d001      	beq.n	800bed6 <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bed2:	2303      	movs	r3, #3
 800bed4:	e008      	b.n	800bee8 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2259      	movs	r2, #89	; 0x59
 800beda:	2101      	movs	r1, #1
 800bedc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2258      	movs	r2, #88	; 0x58
 800bee2:	2100      	movs	r1, #0
 800bee4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bee6:	2300      	movs	r3, #0
}
 800bee8:	0018      	movs	r0, r3
 800beea:	46bd      	mov	sp, r7
 800beec:	b004      	add	sp, #16
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b082      	sub	sp, #8
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	2140      	movs	r1, #64	; 0x40
 800bf04:	438a      	bics	r2, r1
 800bf06:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	689a      	ldr	r2, [r3, #8]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	2101      	movs	r1, #1
 800bf14:	438a      	bics	r2, r1
 800bf16:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2259      	movs	r2, #89	; 0x59
 800bf22:	5c9b      	ldrb	r3, [r3, r2]
 800bf24:	b2db      	uxtb	r3, r3
 800bf26:	2b12      	cmp	r3, #18
 800bf28:	d114      	bne.n	800bf54 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	2208      	movs	r2, #8
 800bf30:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	699a      	ldr	r2, [r3, #24]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	2108      	movs	r1, #8
 800bf3e:	430a      	orrs	r2, r1
 800bf40:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2259      	movs	r2, #89	; 0x59
 800bf46:	2101      	movs	r1, #1
 800bf48:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	0018      	movs	r0, r3
 800bf4e:	f7f5 f8ef 	bl	8001130 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800bf52:	e00c      	b.n	800bf6e <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d107      	bne.n	800bf6e <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2259      	movs	r2, #89	; 0x59
 800bf62:	2101      	movs	r1, #1
 800bf64:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	0018      	movs	r0, r3
 800bf6a:	f7ff fc67 	bl	800b83c <HAL_USART_TxRxCpltCallback>
}
 800bf6e:	46c0      	nop			; (mov r8, r8)
 800bf70:	46bd      	mov	sp, r7
 800bf72:	b002      	add	sp, #8
 800bf74:	bd80      	pop	{r7, pc}

0800bf76 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 800bf76:	b580      	push	{r7, lr}
 800bf78:	b082      	sub	sp, #8
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bf7e:	46c0      	nop			; (mov r8, r8)
 800bf80:	46bd      	mov	sp, r7
 800bf82:	b002      	add	sp, #8
 800bf84:	bd80      	pop	{r7, pc}

0800bf86 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 800bf86:	b580      	push	{r7, lr}
 800bf88:	b082      	sub	sp, #8
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bf8e:	46c0      	nop			; (mov r8, r8)
 800bf90:	46bd      	mov	sp, r7
 800bf92:	b002      	add	sp, #8
 800bf94:	bd80      	pop	{r7, pc}

0800bf96 <LL_GPIO_SetPinMode>:
{
 800bf96:	b580      	push	{r7, lr}
 800bf98:	b084      	sub	sp, #16
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	60f8      	str	r0, [r7, #12]
 800bf9e:	60b9      	str	r1, [r7, #8]
 800bfa0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	6819      	ldr	r1, [r3, #0]
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	435b      	muls	r3, r3
 800bfaa:	001a      	movs	r2, r3
 800bfac:	0013      	movs	r3, r2
 800bfae:	005b      	lsls	r3, r3, #1
 800bfb0:	189b      	adds	r3, r3, r2
 800bfb2:	43db      	mvns	r3, r3
 800bfb4:	400b      	ands	r3, r1
 800bfb6:	001a      	movs	r2, r3
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	435b      	muls	r3, r3
 800bfbc:	6879      	ldr	r1, [r7, #4]
 800bfbe:	434b      	muls	r3, r1
 800bfc0:	431a      	orrs	r2, r3
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	601a      	str	r2, [r3, #0]
}
 800bfc6:	46c0      	nop			; (mov r8, r8)
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	b004      	add	sp, #16
 800bfcc:	bd80      	pop	{r7, pc}

0800bfce <LL_GPIO_SetPinOutputType>:
{
 800bfce:	b580      	push	{r7, lr}
 800bfd0:	b084      	sub	sp, #16
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	60f8      	str	r0, [r7, #12]
 800bfd6:	60b9      	str	r1, [r7, #8]
 800bfd8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	68ba      	ldr	r2, [r7, #8]
 800bfe0:	43d2      	mvns	r2, r2
 800bfe2:	401a      	ands	r2, r3
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	6879      	ldr	r1, [r7, #4]
 800bfe8:	434b      	muls	r3, r1
 800bfea:	431a      	orrs	r2, r3
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	605a      	str	r2, [r3, #4]
}
 800bff0:	46c0      	nop			; (mov r8, r8)
 800bff2:	46bd      	mov	sp, r7
 800bff4:	b004      	add	sp, #16
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <LL_GPIO_SetPinSpeed>:
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	60b9      	str	r1, [r7, #8]
 800c002:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	6899      	ldr	r1, [r3, #8]
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	435b      	muls	r3, r3
 800c00c:	001a      	movs	r2, r3
 800c00e:	0013      	movs	r3, r2
 800c010:	005b      	lsls	r3, r3, #1
 800c012:	189b      	adds	r3, r3, r2
 800c014:	43db      	mvns	r3, r3
 800c016:	400b      	ands	r3, r1
 800c018:	001a      	movs	r2, r3
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	435b      	muls	r3, r3
 800c01e:	6879      	ldr	r1, [r7, #4]
 800c020:	434b      	muls	r3, r1
 800c022:	431a      	orrs	r2, r3
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	609a      	str	r2, [r3, #8]
}
 800c028:	46c0      	nop			; (mov r8, r8)
 800c02a:	46bd      	mov	sp, r7
 800c02c:	b004      	add	sp, #16
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <LL_GPIO_SetPinPull>:
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b084      	sub	sp, #16
 800c034:	af00      	add	r7, sp, #0
 800c036:	60f8      	str	r0, [r7, #12]
 800c038:	60b9      	str	r1, [r7, #8]
 800c03a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	68d9      	ldr	r1, [r3, #12]
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	435b      	muls	r3, r3
 800c044:	001a      	movs	r2, r3
 800c046:	0013      	movs	r3, r2
 800c048:	005b      	lsls	r3, r3, #1
 800c04a:	189b      	adds	r3, r3, r2
 800c04c:	43db      	mvns	r3, r3
 800c04e:	400b      	ands	r3, r1
 800c050:	001a      	movs	r2, r3
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	435b      	muls	r3, r3
 800c056:	6879      	ldr	r1, [r7, #4]
 800c058:	434b      	muls	r3, r1
 800c05a:	431a      	orrs	r2, r3
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	60da      	str	r2, [r3, #12]
}
 800c060:	46c0      	nop			; (mov r8, r8)
 800c062:	46bd      	mov	sp, r7
 800c064:	b004      	add	sp, #16
 800c066:	bd80      	pop	{r7, pc}

0800c068 <LL_GPIO_SetAFPin_0_7>:
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b084      	sub	sp, #16
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	60f8      	str	r0, [r7, #12]
 800c070:	60b9      	str	r1, [r7, #8]
 800c072:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	6a19      	ldr	r1, [r3, #32]
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	435b      	muls	r3, r3
 800c07c:	68ba      	ldr	r2, [r7, #8]
 800c07e:	4353      	muls	r3, r2
 800c080:	68ba      	ldr	r2, [r7, #8]
 800c082:	435a      	muls	r2, r3
 800c084:	0013      	movs	r3, r2
 800c086:	011b      	lsls	r3, r3, #4
 800c088:	1a9b      	subs	r3, r3, r2
 800c08a:	43db      	mvns	r3, r3
 800c08c:	400b      	ands	r3, r1
 800c08e:	001a      	movs	r2, r3
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	435b      	muls	r3, r3
 800c094:	68b9      	ldr	r1, [r7, #8]
 800c096:	434b      	muls	r3, r1
 800c098:	68b9      	ldr	r1, [r7, #8]
 800c09a:	434b      	muls	r3, r1
 800c09c:	6879      	ldr	r1, [r7, #4]
 800c09e:	434b      	muls	r3, r1
 800c0a0:	431a      	orrs	r2, r3
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	621a      	str	r2, [r3, #32]
}
 800c0a6:	46c0      	nop			; (mov r8, r8)
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	b004      	add	sp, #16
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <LL_GPIO_SetAFPin_8_15>:
{
 800c0ae:	b580      	push	{r7, lr}
 800c0b0:	b084      	sub	sp, #16
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	60f8      	str	r0, [r7, #12]
 800c0b6:	60b9      	str	r1, [r7, #8]
 800c0b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	0a1b      	lsrs	r3, r3, #8
 800c0c2:	68ba      	ldr	r2, [r7, #8]
 800c0c4:	0a12      	lsrs	r2, r2, #8
 800c0c6:	4353      	muls	r3, r2
 800c0c8:	68ba      	ldr	r2, [r7, #8]
 800c0ca:	0a12      	lsrs	r2, r2, #8
 800c0cc:	4353      	muls	r3, r2
 800c0ce:	68ba      	ldr	r2, [r7, #8]
 800c0d0:	0a12      	lsrs	r2, r2, #8
 800c0d2:	435a      	muls	r2, r3
 800c0d4:	0013      	movs	r3, r2
 800c0d6:	011b      	lsls	r3, r3, #4
 800c0d8:	1a9b      	subs	r3, r3, r2
 800c0da:	43db      	mvns	r3, r3
 800c0dc:	400b      	ands	r3, r1
 800c0de:	001a      	movs	r2, r3
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	0a1b      	lsrs	r3, r3, #8
 800c0e4:	68b9      	ldr	r1, [r7, #8]
 800c0e6:	0a09      	lsrs	r1, r1, #8
 800c0e8:	434b      	muls	r3, r1
 800c0ea:	68b9      	ldr	r1, [r7, #8]
 800c0ec:	0a09      	lsrs	r1, r1, #8
 800c0ee:	434b      	muls	r3, r1
 800c0f0:	68b9      	ldr	r1, [r7, #8]
 800c0f2:	0a09      	lsrs	r1, r1, #8
 800c0f4:	434b      	muls	r3, r1
 800c0f6:	6879      	ldr	r1, [r7, #4]
 800c0f8:	434b      	muls	r3, r1
 800c0fa:	431a      	orrs	r2, r3
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c100:	46c0      	nop			; (mov r8, r8)
 800c102:	46bd      	mov	sp, r7
 800c104:	b004      	add	sp, #16
 800c106:	bd80      	pop	{r7, pc}

0800c108 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800c112:	2300      	movs	r3, #0
 800c114:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800c116:	e047      	b.n	800c1a8 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	2101      	movs	r1, #1
 800c11e:	68fa      	ldr	r2, [r7, #12]
 800c120:	4091      	lsls	r1, r2
 800c122:	000a      	movs	r2, r1
 800c124:	4013      	ands	r3, r2
 800c126:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d039      	beq.n	800c1a2 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	2b01      	cmp	r3, #1
 800c134:	d003      	beq.n	800c13e <LL_GPIO_Init+0x36>
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	2b02      	cmp	r3, #2
 800c13c:	d10d      	bne.n	800c15a <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	689a      	ldr	r2, [r3, #8]
 800c142:	68b9      	ldr	r1, [r7, #8]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	0018      	movs	r0, r3
 800c148:	f7ff ff56 	bl	800bff8 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	68da      	ldr	r2, [r3, #12]
 800c150:	68b9      	ldr	r1, [r7, #8]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	0018      	movs	r0, r3
 800c156:	f7ff ff3a 	bl	800bfce <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	691a      	ldr	r2, [r3, #16]
 800c15e:	68b9      	ldr	r1, [r7, #8]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	0018      	movs	r0, r3
 800c164:	f7ff ff64 	bl	800c030 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	685b      	ldr	r3, [r3, #4]
 800c16c:	2b02      	cmp	r3, #2
 800c16e:	d111      	bne.n	800c194 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	2bff      	cmp	r3, #255	; 0xff
 800c174:	d807      	bhi.n	800c186 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	695a      	ldr	r2, [r3, #20]
 800c17a:	68b9      	ldr	r1, [r7, #8]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	0018      	movs	r0, r3
 800c180:	f7ff ff72 	bl	800c068 <LL_GPIO_SetAFPin_0_7>
 800c184:	e006      	b.n	800c194 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	695a      	ldr	r2, [r3, #20]
 800c18a:	68b9      	ldr	r1, [r7, #8]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	0018      	movs	r0, r3
 800c190:	f7ff ff8d 	bl	800c0ae <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	685a      	ldr	r2, [r3, #4]
 800c198:	68b9      	ldr	r1, [r7, #8]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	0018      	movs	r0, r3
 800c19e:	f7ff fefa 	bl	800bf96 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	3301      	adds	r3, #1
 800c1a6:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	681a      	ldr	r2, [r3, #0]
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	40da      	lsrs	r2, r3
 800c1b0:	1e13      	subs	r3, r2, #0
 800c1b2:	d1b1      	bne.n	800c118 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800c1b4:	2300      	movs	r3, #0
}
 800c1b6:	0018      	movs	r0, r3
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	b004      	add	sp, #16
 800c1bc:	bd80      	pop	{r7, pc}
	...

0800c1c0 <LL_RCC_HSI_IsReady>:
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800c1c4:	4b07      	ldr	r3, [pc, #28]	; (800c1e4 <LL_RCC_HSI_IsReady+0x24>)
 800c1c6:	681a      	ldr	r2, [r3, #0]
 800c1c8:	2380      	movs	r3, #128	; 0x80
 800c1ca:	00db      	lsls	r3, r3, #3
 800c1cc:	401a      	ands	r2, r3
 800c1ce:	2380      	movs	r3, #128	; 0x80
 800c1d0:	00db      	lsls	r3, r3, #3
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d101      	bne.n	800c1da <LL_RCC_HSI_IsReady+0x1a>
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	e000      	b.n	800c1dc <LL_RCC_HSI_IsReady+0x1c>
 800c1da:	2300      	movs	r3, #0
}
 800c1dc:	0018      	movs	r0, r3
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
 800c1e2:	46c0      	nop			; (mov r8, r8)
 800c1e4:	40021000 	.word	0x40021000

0800c1e8 <LL_RCC_LSE_IsReady>:
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c1ec:	4b05      	ldr	r3, [pc, #20]	; (800c204 <LL_RCC_LSE_IsReady+0x1c>)
 800c1ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1f0:	2202      	movs	r2, #2
 800c1f2:	4013      	ands	r3, r2
 800c1f4:	2b02      	cmp	r3, #2
 800c1f6:	d101      	bne.n	800c1fc <LL_RCC_LSE_IsReady+0x14>
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	e000      	b.n	800c1fe <LL_RCC_LSE_IsReady+0x16>
 800c1fc:	2300      	movs	r3, #0
}
 800c1fe:	0018      	movs	r0, r3
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}
 800c204:	40021000 	.word	0x40021000

0800c208 <LL_RCC_GetSysClkSource>:
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c20c:	4b03      	ldr	r3, [pc, #12]	; (800c21c <LL_RCC_GetSysClkSource+0x14>)
 800c20e:	689b      	ldr	r3, [r3, #8]
 800c210:	2238      	movs	r2, #56	; 0x38
 800c212:	4013      	ands	r3, r2
}
 800c214:	0018      	movs	r0, r3
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}
 800c21a:	46c0      	nop			; (mov r8, r8)
 800c21c:	40021000 	.word	0x40021000

0800c220 <LL_RCC_GetAHBPrescaler>:
{
 800c220:	b580      	push	{r7, lr}
 800c222:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c224:	4b03      	ldr	r3, [pc, #12]	; (800c234 <LL_RCC_GetAHBPrescaler+0x14>)
 800c226:	689a      	ldr	r2, [r3, #8]
 800c228:	23f0      	movs	r3, #240	; 0xf0
 800c22a:	011b      	lsls	r3, r3, #4
 800c22c:	4013      	ands	r3, r2
}
 800c22e:	0018      	movs	r0, r3
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}
 800c234:	40021000 	.word	0x40021000

0800c238 <LL_RCC_GetAPB1Prescaler>:
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800c23c:	4b03      	ldr	r3, [pc, #12]	; (800c24c <LL_RCC_GetAPB1Prescaler+0x14>)
 800c23e:	689a      	ldr	r2, [r3, #8]
 800c240:	23e0      	movs	r3, #224	; 0xe0
 800c242:	01db      	lsls	r3, r3, #7
 800c244:	4013      	ands	r3, r2
}
 800c246:	0018      	movs	r0, r3
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}
 800c24c:	40021000 	.word	0x40021000

0800c250 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800c258:	4b05      	ldr	r3, [pc, #20]	; (800c270 <LL_RCC_GetUSARTClockSource+0x20>)
 800c25a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	401a      	ands	r2, r3
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	041b      	lsls	r3, r3, #16
 800c264:	4313      	orrs	r3, r2
}
 800c266:	0018      	movs	r0, r3
 800c268:	46bd      	mov	sp, r7
 800c26a:	b002      	add	sp, #8
 800c26c:	bd80      	pop	{r7, pc}
 800c26e:	46c0      	nop			; (mov r8, r8)
 800c270:	40021000 	.word	0x40021000

0800c274 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800c278:	4b03      	ldr	r3, [pc, #12]	; (800c288 <LL_RCC_PLL_GetN+0x14>)
 800c27a:	68db      	ldr	r3, [r3, #12]
 800c27c:	0a1b      	lsrs	r3, r3, #8
 800c27e:	227f      	movs	r2, #127	; 0x7f
 800c280:	4013      	ands	r3, r2
}
 800c282:	0018      	movs	r0, r3
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	40021000 	.word	0x40021000

0800c28c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800c290:	4b03      	ldr	r3, [pc, #12]	; (800c2a0 <LL_RCC_PLL_GetR+0x14>)
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	0f5b      	lsrs	r3, r3, #29
 800c296:	075b      	lsls	r3, r3, #29
}
 800c298:	0018      	movs	r0, r3
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
 800c29e:	46c0      	nop			; (mov r8, r8)
 800c2a0:	40021000 	.word	0x40021000

0800c2a4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c2a8:	4b03      	ldr	r3, [pc, #12]	; (800c2b8 <LL_RCC_PLL_GetMainSource+0x14>)
 800c2aa:	68db      	ldr	r3, [r3, #12]
 800c2ac:	2203      	movs	r2, #3
 800c2ae:	4013      	ands	r3, r2
}
 800c2b0:	0018      	movs	r0, r3
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	46c0      	nop			; (mov r8, r8)
 800c2b8:	40021000 	.word	0x40021000

0800c2bc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800c2c0:	4b03      	ldr	r3, [pc, #12]	; (800c2d0 <LL_RCC_PLL_GetDivider+0x14>)
 800c2c2:	68db      	ldr	r3, [r3, #12]
 800c2c4:	2270      	movs	r2, #112	; 0x70
 800c2c6:	4013      	ands	r3, r2
}
 800c2c8:	0018      	movs	r0, r3
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	46c0      	nop			; (mov r8, r8)
 800c2d0:	40021000 	.word	0x40021000

0800c2d4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800c2dc:	f000 f8a8 	bl	800c430 <RCC_GetSystemClockFreq>
 800c2e0:	0002      	movs	r2, r0
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	0018      	movs	r0, r3
 800c2ec:	f000 f8ce 	bl	800c48c <RCC_GetHCLKClockFreq>
 800c2f0:	0002      	movs	r2, r0
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	0018      	movs	r0, r3
 800c2fc:	f000 f8de 	bl	800c4bc <RCC_GetPCLK1ClockFreq>
 800c300:	0002      	movs	r2, r0
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	609a      	str	r2, [r3, #8]
}
 800c306:	46c0      	nop			; (mov r8, r8)
 800c308:	46bd      	mov	sp, r7
 800c30a:	b002      	add	sp, #8
 800c30c:	bd80      	pop	{r7, pc}
	...

0800c310 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800c318:	2300      	movs	r3, #0
 800c31a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2b03      	cmp	r3, #3
 800c320:	d134      	bne.n	800c38c <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	0018      	movs	r0, r3
 800c326:	f7ff ff93 	bl	800c250 <LL_RCC_GetUSARTClockSource>
 800c32a:	0003      	movs	r3, r0
 800c32c:	4a39      	ldr	r2, [pc, #228]	; (800c414 <LL_RCC_GetUSARTClockFreq+0x104>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d016      	beq.n	800c360 <LL_RCC_GetUSARTClockFreq+0x50>
 800c332:	4a38      	ldr	r2, [pc, #224]	; (800c414 <LL_RCC_GetUSARTClockFreq+0x104>)
 800c334:	4293      	cmp	r3, r2
 800c336:	d81c      	bhi.n	800c372 <LL_RCC_GetUSARTClockFreq+0x62>
 800c338:	4a37      	ldr	r2, [pc, #220]	; (800c418 <LL_RCC_GetUSARTClockFreq+0x108>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d003      	beq.n	800c346 <LL_RCC_GetUSARTClockFreq+0x36>
 800c33e:	4a37      	ldr	r2, [pc, #220]	; (800c41c <LL_RCC_GetUSARTClockFreq+0x10c>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d005      	beq.n	800c350 <LL_RCC_GetUSARTClockFreq+0x40>
 800c344:	e015      	b.n	800c372 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800c346:	f000 f873 	bl	800c430 <RCC_GetSystemClockFreq>
 800c34a:	0003      	movs	r3, r0
 800c34c:	60fb      	str	r3, [r7, #12]
        break;
 800c34e:	e05c      	b.n	800c40a <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800c350:	f7ff ff36 	bl	800c1c0 <LL_RCC_HSI_IsReady>
 800c354:	0003      	movs	r3, r0
 800c356:	2b01      	cmp	r3, #1
 800c358:	d150      	bne.n	800c3fc <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 800c35a:	4b31      	ldr	r3, [pc, #196]	; (800c420 <LL_RCC_GetUSARTClockFreq+0x110>)
 800c35c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c35e:	e04d      	b.n	800c3fc <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800c360:	f7ff ff42 	bl	800c1e8 <LL_RCC_LSE_IsReady>
 800c364:	0003      	movs	r3, r0
 800c366:	2b01      	cmp	r3, #1
 800c368:	d14a      	bne.n	800c400 <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 800c36a:	2380      	movs	r3, #128	; 0x80
 800c36c:	021b      	lsls	r3, r3, #8
 800c36e:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c370:	e046      	b.n	800c400 <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800c372:	f000 f85d 	bl	800c430 <RCC_GetSystemClockFreq>
 800c376:	0003      	movs	r3, r0
 800c378:	0018      	movs	r0, r3
 800c37a:	f000 f887 	bl	800c48c <RCC_GetHCLKClockFreq>
 800c37e:	0003      	movs	r3, r0
 800c380:	0018      	movs	r0, r3
 800c382:	f000 f89b 	bl	800c4bc <RCC_GetPCLK1ClockFreq>
 800c386:	0003      	movs	r3, r0
 800c388:	60fb      	str	r3, [r7, #12]
        break;
 800c38a:	e03e      	b.n	800c40a <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2b0c      	cmp	r3, #12
 800c390:	d13b      	bne.n	800c40a <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	0018      	movs	r0, r3
 800c396:	f7ff ff5b 	bl	800c250 <LL_RCC_GetUSARTClockSource>
 800c39a:	0003      	movs	r3, r0
 800c39c:	4a21      	ldr	r2, [pc, #132]	; (800c424 <LL_RCC_GetUSARTClockFreq+0x114>)
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	d016      	beq.n	800c3d0 <LL_RCC_GetUSARTClockFreq+0xc0>
 800c3a2:	4a20      	ldr	r2, [pc, #128]	; (800c424 <LL_RCC_GetUSARTClockFreq+0x114>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d81c      	bhi.n	800c3e2 <LL_RCC_GetUSARTClockFreq+0xd2>
 800c3a8:	4a1f      	ldr	r2, [pc, #124]	; (800c428 <LL_RCC_GetUSARTClockFreq+0x118>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d003      	beq.n	800c3b6 <LL_RCC_GetUSARTClockFreq+0xa6>
 800c3ae:	4a1f      	ldr	r2, [pc, #124]	; (800c42c <LL_RCC_GetUSARTClockFreq+0x11c>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d005      	beq.n	800c3c0 <LL_RCC_GetUSARTClockFreq+0xb0>
 800c3b4:	e015      	b.n	800c3e2 <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800c3b6:	f000 f83b 	bl	800c430 <RCC_GetSystemClockFreq>
 800c3ba:	0003      	movs	r3, r0
 800c3bc:	60fb      	str	r3, [r7, #12]
        break;
 800c3be:	e024      	b.n	800c40a <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800c3c0:	f7ff fefe 	bl	800c1c0 <LL_RCC_HSI_IsReady>
 800c3c4:	0003      	movs	r3, r0
 800c3c6:	2b01      	cmp	r3, #1
 800c3c8:	d11c      	bne.n	800c404 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800c3ca:	4b15      	ldr	r3, [pc, #84]	; (800c420 <LL_RCC_GetUSARTClockFreq+0x110>)
 800c3cc:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c3ce:	e019      	b.n	800c404 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800c3d0:	f7ff ff0a 	bl	800c1e8 <LL_RCC_LSE_IsReady>
 800c3d4:	0003      	movs	r3, r0
 800c3d6:	2b01      	cmp	r3, #1
 800c3d8:	d116      	bne.n	800c408 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800c3da:	2380      	movs	r3, #128	; 0x80
 800c3dc:	021b      	lsls	r3, r3, #8
 800c3de:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c3e0:	e012      	b.n	800c408 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800c3e2:	f000 f825 	bl	800c430 <RCC_GetSystemClockFreq>
 800c3e6:	0003      	movs	r3, r0
 800c3e8:	0018      	movs	r0, r3
 800c3ea:	f000 f84f 	bl	800c48c <RCC_GetHCLKClockFreq>
 800c3ee:	0003      	movs	r3, r0
 800c3f0:	0018      	movs	r0, r3
 800c3f2:	f000 f863 	bl	800c4bc <RCC_GetPCLK1ClockFreq>
 800c3f6:	0003      	movs	r3, r0
 800c3f8:	60fb      	str	r3, [r7, #12]
        break;
 800c3fa:	e006      	b.n	800c40a <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c3fc:	46c0      	nop			; (mov r8, r8)
 800c3fe:	e004      	b.n	800c40a <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c400:	46c0      	nop			; (mov r8, r8)
 800c402:	e002      	b.n	800c40a <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c404:	46c0      	nop			; (mov r8, r8)
 800c406:	e000      	b.n	800c40a <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c408:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800c40a:	68fb      	ldr	r3, [r7, #12]
}
 800c40c:	0018      	movs	r0, r3
 800c40e:	46bd      	mov	sp, r7
 800c410:	b004      	add	sp, #16
 800c412:	bd80      	pop	{r7, pc}
 800c414:	00030003 	.word	0x00030003
 800c418:	00030001 	.word	0x00030001
 800c41c:	00030002 	.word	0x00030002
 800c420:	00f42400 	.word	0x00f42400
 800c424:	000c000c 	.word	0x000c000c
 800c428:	000c0004 	.word	0x000c0004
 800c42c:	000c0008 	.word	0x000c0008

0800c430 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b082      	sub	sp, #8
 800c434:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800c436:	f7ff fee7 	bl	800c208 <LL_RCC_GetSysClkSource>
 800c43a:	0003      	movs	r3, r0
 800c43c:	2b08      	cmp	r3, #8
 800c43e:	d002      	beq.n	800c446 <RCC_GetSystemClockFreq+0x16>
 800c440:	2b10      	cmp	r3, #16
 800c442:	d003      	beq.n	800c44c <RCC_GetSystemClockFreq+0x1c>
 800c444:	e007      	b.n	800c456 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800c446:	4b0e      	ldr	r3, [pc, #56]	; (800c480 <RCC_GetSystemClockFreq+0x50>)
 800c448:	607b      	str	r3, [r7, #4]
      break;
 800c44a:	e014      	b.n	800c476 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800c44c:	f000 f84c 	bl	800c4e8 <RCC_PLL_GetFreqDomain_SYS>
 800c450:	0003      	movs	r3, r0
 800c452:	607b      	str	r3, [r7, #4]
      break;
 800c454:	e00f      	b.n	800c476 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800c456:	4b0b      	ldr	r3, [pc, #44]	; (800c484 <RCC_GetSystemClockFreq+0x54>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	0adb      	lsrs	r3, r3, #11
 800c45c:	2207      	movs	r2, #7
 800c45e:	4013      	ands	r3, r2
 800c460:	2201      	movs	r2, #1
 800c462:	409a      	lsls	r2, r3
 800c464:	0013      	movs	r3, r2
 800c466:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800c468:	6839      	ldr	r1, [r7, #0]
 800c46a:	4807      	ldr	r0, [pc, #28]	; (800c488 <RCC_GetSystemClockFreq+0x58>)
 800c46c:	f7f3 fe4a 	bl	8000104 <__udivsi3>
 800c470:	0003      	movs	r3, r0
 800c472:	607b      	str	r3, [r7, #4]
      break;
 800c474:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800c476:	687b      	ldr	r3, [r7, #4]
}
 800c478:	0018      	movs	r0, r3
 800c47a:	46bd      	mov	sp, r7
 800c47c:	b002      	add	sp, #8
 800c47e:	bd80      	pop	{r7, pc}
 800c480:	007a1200 	.word	0x007a1200
 800c484:	40021000 	.word	0x40021000
 800c488:	00f42400 	.word	0x00f42400

0800c48c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b082      	sub	sp, #8
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800c494:	f7ff fec4 	bl	800c220 <LL_RCC_GetAHBPrescaler>
 800c498:	0003      	movs	r3, r0
 800c49a:	0a1b      	lsrs	r3, r3, #8
 800c49c:	220f      	movs	r2, #15
 800c49e:	401a      	ands	r2, r3
 800c4a0:	4b05      	ldr	r3, [pc, #20]	; (800c4b8 <RCC_GetHCLKClockFreq+0x2c>)
 800c4a2:	0092      	lsls	r2, r2, #2
 800c4a4:	58d3      	ldr	r3, [r2, r3]
 800c4a6:	221f      	movs	r2, #31
 800c4a8:	4013      	ands	r3, r2
 800c4aa:	687a      	ldr	r2, [r7, #4]
 800c4ac:	40da      	lsrs	r2, r3
 800c4ae:	0013      	movs	r3, r2
}
 800c4b0:	0018      	movs	r0, r3
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	b002      	add	sp, #8
 800c4b6:	bd80      	pop	{r7, pc}
 800c4b8:	08015e38 	.word	0x08015e38

0800c4bc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b082      	sub	sp, #8
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800c4c4:	f7ff feb8 	bl	800c238 <LL_RCC_GetAPB1Prescaler>
 800c4c8:	0003      	movs	r3, r0
 800c4ca:	0b1a      	lsrs	r2, r3, #12
 800c4cc:	4b05      	ldr	r3, [pc, #20]	; (800c4e4 <RCC_GetPCLK1ClockFreq+0x28>)
 800c4ce:	0092      	lsls	r2, r2, #2
 800c4d0:	58d3      	ldr	r3, [r2, r3]
 800c4d2:	221f      	movs	r2, #31
 800c4d4:	4013      	ands	r3, r2
 800c4d6:	687a      	ldr	r2, [r7, #4]
 800c4d8:	40da      	lsrs	r2, r3
 800c4da:	0013      	movs	r3, r2
}
 800c4dc:	0018      	movs	r0, r3
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	b002      	add	sp, #8
 800c4e2:	bd80      	pop	{r7, pc}
 800c4e4:	08015e78 	.word	0x08015e78

0800c4e8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800c4e8:	b590      	push	{r4, r7, lr}
 800c4ea:	b083      	sub	sp, #12
 800c4ec:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800c4ee:	f7ff fed9 	bl	800c2a4 <LL_RCC_PLL_GetMainSource>
 800c4f2:	0003      	movs	r3, r0
 800c4f4:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	2b02      	cmp	r3, #2
 800c4fa:	d003      	beq.n	800c504 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	2b03      	cmp	r3, #3
 800c500:	d003      	beq.n	800c50a <RCC_PLL_GetFreqDomain_SYS+0x22>
 800c502:	e005      	b.n	800c510 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800c504:	4b13      	ldr	r3, [pc, #76]	; (800c554 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800c506:	607b      	str	r3, [r7, #4]
      break;
 800c508:	e005      	b.n	800c516 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800c50a:	4b13      	ldr	r3, [pc, #76]	; (800c558 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800c50c:	607b      	str	r3, [r7, #4]
      break;
 800c50e:	e002      	b.n	800c516 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800c510:	4b10      	ldr	r3, [pc, #64]	; (800c554 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800c512:	607b      	str	r3, [r7, #4]
      break;
 800c514:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800c516:	f7ff fead 	bl	800c274 <LL_RCC_PLL_GetN>
 800c51a:	0002      	movs	r2, r0
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	4353      	muls	r3, r2
 800c520:	001c      	movs	r4, r3
 800c522:	f7ff fecb 	bl	800c2bc <LL_RCC_PLL_GetDivider>
 800c526:	0003      	movs	r3, r0
 800c528:	091b      	lsrs	r3, r3, #4
 800c52a:	3301      	adds	r3, #1
 800c52c:	0019      	movs	r1, r3
 800c52e:	0020      	movs	r0, r4
 800c530:	f7f3 fde8 	bl	8000104 <__udivsi3>
 800c534:	0003      	movs	r3, r0
 800c536:	001c      	movs	r4, r3
 800c538:	f7ff fea8 	bl	800c28c <LL_RCC_PLL_GetR>
 800c53c:	0003      	movs	r3, r0
 800c53e:	0f5b      	lsrs	r3, r3, #29
 800c540:	3301      	adds	r3, #1
 800c542:	0019      	movs	r1, r3
 800c544:	0020      	movs	r0, r4
 800c546:	f7f3 fddd 	bl	8000104 <__udivsi3>
 800c54a:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800c54c:	0018      	movs	r0, r3
 800c54e:	46bd      	mov	sp, r7
 800c550:	b003      	add	sp, #12
 800c552:	bd90      	pop	{r4, r7, pc}
 800c554:	00f42400 	.word	0x00f42400
 800c558:	007a1200 	.word	0x007a1200

0800c55c <LL_USART_IsEnabled>:
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b082      	sub	sp, #8
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2201      	movs	r2, #1
 800c56a:	4013      	ands	r3, r2
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	d101      	bne.n	800c574 <LL_USART_IsEnabled+0x18>
 800c570:	2301      	movs	r3, #1
 800c572:	e000      	b.n	800c576 <LL_USART_IsEnabled+0x1a>
 800c574:	2300      	movs	r3, #0
}
 800c576:	0018      	movs	r0, r3
 800c578:	46bd      	mov	sp, r7
 800c57a:	b002      	add	sp, #8
 800c57c:	bd80      	pop	{r7, pc}

0800c57e <LL_USART_SetPrescaler>:
{
 800c57e:	b580      	push	{r7, lr}
 800c580:	b082      	sub	sp, #8
 800c582:	af00      	add	r7, sp, #0
 800c584:	6078      	str	r0, [r7, #4]
 800c586:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c58c:	220f      	movs	r2, #15
 800c58e:	4393      	bics	r3, r2
 800c590:	683a      	ldr	r2, [r7, #0]
 800c592:	b292      	uxth	r2, r2
 800c594:	431a      	orrs	r2, r3
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800c59a:	46c0      	nop			; (mov r8, r8)
 800c59c:	46bd      	mov	sp, r7
 800c59e:	b002      	add	sp, #8
 800c5a0:	bd80      	pop	{r7, pc}
	...

0800c5a4 <LL_USART_SetStopBitsLength>:
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	685b      	ldr	r3, [r3, #4]
 800c5b2:	4a05      	ldr	r2, [pc, #20]	; (800c5c8 <LL_USART_SetStopBitsLength+0x24>)
 800c5b4:	401a      	ands	r2, r3
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	431a      	orrs	r2, r3
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	605a      	str	r2, [r3, #4]
}
 800c5be:	46c0      	nop			; (mov r8, r8)
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	b002      	add	sp, #8
 800c5c4:	bd80      	pop	{r7, pc}
 800c5c6:	46c0      	nop			; (mov r8, r8)
 800c5c8:	ffffcfff 	.word	0xffffcfff

0800c5cc <LL_USART_SetHWFlowCtrl>:
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b082      	sub	sp, #8
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	689b      	ldr	r3, [r3, #8]
 800c5da:	4a05      	ldr	r2, [pc, #20]	; (800c5f0 <LL_USART_SetHWFlowCtrl+0x24>)
 800c5dc:	401a      	ands	r2, r3
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	431a      	orrs	r2, r3
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	609a      	str	r2, [r3, #8]
}
 800c5e6:	46c0      	nop			; (mov r8, r8)
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	b002      	add	sp, #8
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	46c0      	nop			; (mov r8, r8)
 800c5f0:	fffffcff 	.word	0xfffffcff

0800c5f4 <LL_USART_SetBaudRate>:
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b086      	sub	sp, #24
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	607a      	str	r2, [r7, #4]
 800c600:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2b0b      	cmp	r3, #11
 800c606:	d846      	bhi.n	800c696 <LL_USART_SetBaudRate+0xa2>
  else if (BaudRate == 0U)
 800c608:	6a3b      	ldr	r3, [r7, #32]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d043      	beq.n	800c696 <LL_USART_SetBaudRate+0xa2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800c60e:	683a      	ldr	r2, [r7, #0]
 800c610:	2380      	movs	r3, #128	; 0x80
 800c612:	021b      	lsls	r3, r3, #8
 800c614:	429a      	cmp	r2, r3
 800c616:	d126      	bne.n	800c666 <LL_USART_SetBaudRate+0x72>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	b2db      	uxtb	r3, r3
 800c61c:	001a      	movs	r2, r3
 800c61e:	4b20      	ldr	r3, [pc, #128]	; (800c6a0 <LL_USART_SetBaudRate+0xac>)
 800c620:	0092      	lsls	r2, r2, #2
 800c622:	58d3      	ldr	r3, [r2, r3]
 800c624:	0019      	movs	r1, r3
 800c626:	68b8      	ldr	r0, [r7, #8]
 800c628:	f7f3 fd6c 	bl	8000104 <__udivsi3>
 800c62c:	0003      	movs	r3, r0
 800c62e:	005a      	lsls	r2, r3, #1
 800c630:	6a3b      	ldr	r3, [r7, #32]
 800c632:	085b      	lsrs	r3, r3, #1
 800c634:	18d3      	adds	r3, r2, r3
 800c636:	6a39      	ldr	r1, [r7, #32]
 800c638:	0018      	movs	r0, r3
 800c63a:	f7f3 fd63 	bl	8000104 <__udivsi3>
 800c63e:	0003      	movs	r3, r0
 800c640:	b29b      	uxth	r3, r3
 800c642:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	4a17      	ldr	r2, [pc, #92]	; (800c6a4 <LL_USART_SetBaudRate+0xb0>)
 800c648:	4013      	ands	r3, r2
 800c64a:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	085b      	lsrs	r3, r3, #1
 800c650:	b29b      	uxth	r3, r3
 800c652:	001a      	movs	r2, r3
 800c654:	2307      	movs	r3, #7
 800c656:	4013      	ands	r3, r2
 800c658:	693a      	ldr	r2, [r7, #16]
 800c65a:	4313      	orrs	r3, r2
 800c65c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	693a      	ldr	r2, [r7, #16]
 800c662:	60da      	str	r2, [r3, #12]
}
 800c664:	e017      	b.n	800c696 <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	b2db      	uxtb	r3, r3
 800c66a:	001a      	movs	r2, r3
 800c66c:	4b0c      	ldr	r3, [pc, #48]	; (800c6a0 <LL_USART_SetBaudRate+0xac>)
 800c66e:	0092      	lsls	r2, r2, #2
 800c670:	58d3      	ldr	r3, [r2, r3]
 800c672:	0019      	movs	r1, r3
 800c674:	68b8      	ldr	r0, [r7, #8]
 800c676:	f7f3 fd45 	bl	8000104 <__udivsi3>
 800c67a:	0003      	movs	r3, r0
 800c67c:	001a      	movs	r2, r3
 800c67e:	6a3b      	ldr	r3, [r7, #32]
 800c680:	085b      	lsrs	r3, r3, #1
 800c682:	18d3      	adds	r3, r2, r3
 800c684:	6a39      	ldr	r1, [r7, #32]
 800c686:	0018      	movs	r0, r3
 800c688:	f7f3 fd3c 	bl	8000104 <__udivsi3>
 800c68c:	0003      	movs	r3, r0
 800c68e:	b29b      	uxth	r3, r3
 800c690:	001a      	movs	r2, r3
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	60da      	str	r2, [r3, #12]
}
 800c696:	46c0      	nop			; (mov r8, r8)
 800c698:	46bd      	mov	sp, r7
 800c69a:	b006      	add	sp, #24
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	46c0      	nop			; (mov r8, r8)
 800c6a0:	08015eec 	.word	0x08015eec
 800c6a4:	0000fff0 	.word	0x0000fff0

0800c6a8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800c6a8:	b590      	push	{r4, r7, lr}
 800c6aa:	b08b      	sub	sp, #44	; 0x2c
 800c6ac:	af02      	add	r7, sp, #8
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800c6b2:	231f      	movs	r3, #31
 800c6b4:	18fb      	adds	r3, r7, r3
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	0018      	movs	r0, r3
 800c6c2:	f7ff ff4b 	bl	800c55c <LL_USART_IsEnabled>
 800c6c6:	1e03      	subs	r3, r0, #0
 800c6c8:	d16a      	bne.n	800c7a0 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	4a38      	ldr	r2, [pc, #224]	; (800c7b0 <LL_USART_Init+0x108>)
 800c6d0:	401a      	ands	r2, r3
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	6899      	ldr	r1, [r3, #8]
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	691b      	ldr	r3, [r3, #16]
 800c6da:	4319      	orrs	r1, r3
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	695b      	ldr	r3, [r3, #20]
 800c6e0:	4319      	orrs	r1, r3
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	69db      	ldr	r3, [r3, #28]
 800c6e6:	430b      	orrs	r3, r1
 800c6e8:	431a      	orrs	r2, r3
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	68da      	ldr	r2, [r3, #12]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	0011      	movs	r1, r2
 800c6f6:	0018      	movs	r0, r3
 800c6f8:	f7ff ff54 	bl	800c5a4 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	699a      	ldr	r2, [r3, #24]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	0011      	movs	r1, r2
 800c704:	0018      	movs	r0, r3
 800c706:	f7ff ff61 	bl	800c5cc <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	4a29      	ldr	r2, [pc, #164]	; (800c7b4 <LL_USART_Init+0x10c>)
 800c70e:	4293      	cmp	r3, r2
 800c710:	d105      	bne.n	800c71e <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800c712:	2003      	movs	r0, #3
 800c714:	f7ff fdfc 	bl	800c310 <LL_RCC_GetUSARTClockFreq>
 800c718:	0003      	movs	r3, r0
 800c71a:	61bb      	str	r3, [r7, #24]
 800c71c:	e022      	b.n	800c764 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	4a25      	ldr	r2, [pc, #148]	; (800c7b8 <LL_USART_Init+0x110>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d105      	bne.n	800c732 <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800c726:	200c      	movs	r0, #12
 800c728:	f7ff fdf2 	bl	800c310 <LL_RCC_GetUSARTClockFreq>
 800c72c:	0003      	movs	r3, r0
 800c72e:	61bb      	str	r3, [r7, #24]
 800c730:	e018      	b.n	800c764 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	4a21      	ldr	r2, [pc, #132]	; (800c7bc <LL_USART_Init+0x114>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d108      	bne.n	800c74c <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800c73a:	240c      	movs	r4, #12
 800c73c:	193b      	adds	r3, r7, r4
 800c73e:	0018      	movs	r0, r3
 800c740:	f7ff fdc8 	bl	800c2d4 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800c744:	193b      	adds	r3, r7, r4
 800c746:	689b      	ldr	r3, [r3, #8]
 800c748:	61bb      	str	r3, [r7, #24]
 800c74a:	e00b      	b.n	800c764 <LL_USART_Init+0xbc>
#endif
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	4a1c      	ldr	r2, [pc, #112]	; (800c7c0 <LL_USART_Init+0x118>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d107      	bne.n	800c764 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800c754:	240c      	movs	r4, #12
 800c756:	193b      	adds	r3, r7, r4
 800c758:	0018      	movs	r0, r3
 800c75a:	f7ff fdbb 	bl	800c2d4 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800c75e:	193b      	adds	r3, r7, r4
 800c760:	689b      	ldr	r3, [r3, #8]
 800c762:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d013      	beq.n	800c792 <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	685b      	ldr	r3, [r3, #4]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d00f      	beq.n	800c792 <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800c772:	231f      	movs	r3, #31
 800c774:	18fb      	adds	r3, r7, r3
 800c776:	2200      	movs	r2, #0
 800c778:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	681a      	ldr	r2, [r3, #0]
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	69dc      	ldr	r4, [r3, #28]
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	69b9      	ldr	r1, [r7, #24]
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	9300      	str	r3, [sp, #0]
 800c78c:	0023      	movs	r3, r4
 800c78e:	f7ff ff31 	bl	800c5f4 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	0011      	movs	r1, r2
 800c79a:	0018      	movs	r0, r3
 800c79c:	f7ff feef 	bl	800c57e <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800c7a0:	231f      	movs	r3, #31
 800c7a2:	18fb      	adds	r3, r7, r3
 800c7a4:	781b      	ldrb	r3, [r3, #0]
}
 800c7a6:	0018      	movs	r0, r3
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	b009      	add	sp, #36	; 0x24
 800c7ac:	bd90      	pop	{r4, r7, pc}
 800c7ae:	46c0      	nop			; (mov r8, r8)
 800c7b0:	efff69f3 	.word	0xefff69f3
 800c7b4:	40013800 	.word	0x40013800
 800c7b8:	40004400 	.word	0x40004400
 800c7bc:	40004800 	.word	0x40004800
 800c7c0:	40004c00 	.word	0x40004c00

0800c7c4 <__libc_init_array>:
 800c7c4:	b570      	push	{r4, r5, r6, lr}
 800c7c6:	2600      	movs	r6, #0
 800c7c8:	4d0c      	ldr	r5, [pc, #48]	; (800c7fc <__libc_init_array+0x38>)
 800c7ca:	4c0d      	ldr	r4, [pc, #52]	; (800c800 <__libc_init_array+0x3c>)
 800c7cc:	1b64      	subs	r4, r4, r5
 800c7ce:	10a4      	asrs	r4, r4, #2
 800c7d0:	42a6      	cmp	r6, r4
 800c7d2:	d109      	bne.n	800c7e8 <__libc_init_array+0x24>
 800c7d4:	2600      	movs	r6, #0
 800c7d6:	f000 f821 	bl	800c81c <_init>
 800c7da:	4d0a      	ldr	r5, [pc, #40]	; (800c804 <__libc_init_array+0x40>)
 800c7dc:	4c0a      	ldr	r4, [pc, #40]	; (800c808 <__libc_init_array+0x44>)
 800c7de:	1b64      	subs	r4, r4, r5
 800c7e0:	10a4      	asrs	r4, r4, #2
 800c7e2:	42a6      	cmp	r6, r4
 800c7e4:	d105      	bne.n	800c7f2 <__libc_init_array+0x2e>
 800c7e6:	bd70      	pop	{r4, r5, r6, pc}
 800c7e8:	00b3      	lsls	r3, r6, #2
 800c7ea:	58eb      	ldr	r3, [r5, r3]
 800c7ec:	4798      	blx	r3
 800c7ee:	3601      	adds	r6, #1
 800c7f0:	e7ee      	b.n	800c7d0 <__libc_init_array+0xc>
 800c7f2:	00b3      	lsls	r3, r6, #2
 800c7f4:	58eb      	ldr	r3, [r5, r3]
 800c7f6:	4798      	blx	r3
 800c7f8:	3601      	adds	r6, #1
 800c7fa:	e7f2      	b.n	800c7e2 <__libc_init_array+0x1e>
 800c7fc:	08015f1c 	.word	0x08015f1c
 800c800:	08015f1c 	.word	0x08015f1c
 800c804:	08015f1c 	.word	0x08015f1c
 800c808:	08015f20 	.word	0x08015f20

0800c80c <memset>:
 800c80c:	0003      	movs	r3, r0
 800c80e:	1882      	adds	r2, r0, r2
 800c810:	4293      	cmp	r3, r2
 800c812:	d100      	bne.n	800c816 <memset+0xa>
 800c814:	4770      	bx	lr
 800c816:	7019      	strb	r1, [r3, #0]
 800c818:	3301      	adds	r3, #1
 800c81a:	e7f9      	b.n	800c810 <memset+0x4>

0800c81c <_init>:
 800c81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c81e:	46c0      	nop			; (mov r8, r8)
 800c820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c822:	bc08      	pop	{r3}
 800c824:	469e      	mov	lr, r3
 800c826:	4770      	bx	lr

0800c828 <_fini>:
 800c828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c82a:	46c0      	nop			; (mov r8, r8)
 800c82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c82e:	bc08      	pop	{r3}
 800c830:	469e      	mov	lr, r3
 800c832:	4770      	bx	lr
