
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c938  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000bae8  0800c9f4  0800c9f4  0001c9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080184dc  080184dc  00030040  2**0
                  CONTENTS
  4 .ARM          00000000  080184dc  080184dc  00030040  2**0
                  CONTENTS
  5 .preinit_array 00000000  080184dc  080184dc  00030040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080184dc  080184dc  000284dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080184e0  080184e0  000284e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  080184e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027ec  20000040  08018524  00030040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000282c  08018524  0003282c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019256  00000000  00000000  00030068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035aa  00000000  00000000  000492be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001928  00000000  00000000  0004c868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b0  00000000  00000000  0004e190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c89a  00000000  00000000  0004f940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c997  00000000  00000000  0006c1da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afb62  00000000  00000000  00088b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001386d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c24  00000000  00000000  00138724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000040 	.word	0x20000040
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800c9dc 	.word	0x0800c9dc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000044 	.word	0x20000044
 8000100:	0800c9dc 	.word	0x0800c9dc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}

08000348 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <LL_USART_DisableFIFO+0x1c>)
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	dfffffff 	.word	0xdfffffff

08000368 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b086      	sub	sp, #24
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000372:	f3ef 8310 	mrs	r3, PRIMASK
 8000376:	60bb      	str	r3, [r7, #8]
  return(result);
 8000378:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800037a:	617b      	str	r3, [r7, #20]
 800037c:	2301      	movs	r3, #1
 800037e:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f383 8810 	msr	PRIMASK, r3
}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	00db      	lsls	r3, r3, #3
 800038e:	08da      	lsrs	r2, r3, #3
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	075b      	lsls	r3, r3, #29
 8000394:	431a      	orrs	r2, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	697b      	ldr	r3, [r7, #20]
 800039c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800039e:	693b      	ldr	r3, [r7, #16]
 80003a0:	f383 8810 	msr	PRIMASK, r3
}
 80003a4:	46c0      	nop			; (mov r8, r8)
}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	b006      	add	sp, #24
 80003ac:	bd80      	pop	{r7, pc}
	...

080003b0 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80003ba:	f3ef 8310 	mrs	r3, PRIMASK
 80003be:	60bb      	str	r3, [r7, #8]
  return(result);
 80003c0:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80003c2:	617b      	str	r3, [r7, #20]
 80003c4:	2301      	movs	r3, #1
 80003c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f383 8810 	msr	PRIMASK, r3
}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	689b      	ldr	r3, [r3, #8]
 80003d4:	4a08      	ldr	r2, [pc, #32]	; (80003f8 <LL_USART_SetRXFIFOThreshold+0x48>)
 80003d6:	401a      	ands	r2, r3
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	065b      	lsls	r3, r3, #25
 80003dc:	431a      	orrs	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	f383 8810 	msr	PRIMASK, r3
}
 80003ec:	46c0      	nop			; (mov r8, r8)
}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b006      	add	sp, #24
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	f1ffffff 	.word	0xf1ffffff

080003fc <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	4a07      	ldr	r2, [pc, #28]	; (8000428 <LL_USART_ConfigAsyncMode+0x2c>)
 800040a:	401a      	ands	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	689b      	ldr	r3, [r3, #8]
 8000414:	222a      	movs	r2, #42	; 0x2a
 8000416:	4393      	bics	r3, r2
 8000418:	001a      	movs	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	609a      	str	r2, [r3, #8]
}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b002      	add	sp, #8
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffb7ff 	.word	0xffffb7ff

0800042c <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	69da      	ldr	r2, [r3, #28]
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	039b      	lsls	r3, r3, #14
 800043c:	401a      	ands	r2, r3
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	039b      	lsls	r3, r3, #14
 8000442:	429a      	cmp	r2, r3
 8000444:	d101      	bne.n	800044a <LL_USART_IsActiveFlag_TEACK+0x1e>
 8000446:	2301      	movs	r3, #1
 8000448:	e000      	b.n	800044c <LL_USART_IsActiveFlag_TEACK+0x20>
 800044a:	2300      	movs	r3, #0
}
 800044c:	0018      	movs	r0, r3
 800044e:	46bd      	mov	sp, r7
 8000450:	b002      	add	sp, #8
 8000452:	bd80      	pop	{r7, pc}

08000454 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	69da      	ldr	r2, [r3, #28]
 8000460:	2380      	movs	r3, #128	; 0x80
 8000462:	03db      	lsls	r3, r3, #15
 8000464:	401a      	ands	r2, r3
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	03db      	lsls	r3, r3, #15
 800046a:	429a      	cmp	r2, r3
 800046c:	d101      	bne.n	8000472 <LL_USART_IsActiveFlag_REACK+0x1e>
 800046e:	2301      	movs	r3, #1
 8000470:	e000      	b.n	8000474 <LL_USART_IsActiveFlag_REACK+0x20>
 8000472:	2300      	movs	r3, #0
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	b002      	add	sp, #8
 800047a:	bd80      	pop	{r7, pc}

0800047c <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000484:	f3ef 8310 	mrs	r3, PRIMASK
 8000488:	60bb      	str	r3, [r7, #8]
  return(result);
 800048a:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800048c:	617b      	str	r3, [r7, #20]
 800048e:	2301      	movs	r3, #1
 8000490:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	f383 8810 	msr	PRIMASK, r3
}
 8000498:	46c0      	nop			; (mov r8, r8)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2220      	movs	r2, #32
 80004a0:	431a      	orrs	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	f383 8810 	msr	PRIMASK, r3
}
 80004b0:	46c0      	nop			; (mov r8, r8)
}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b006      	add	sp, #24
 80004b8:	bd80      	pop	{r7, pc}

080004ba <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b086      	sub	sp, #24
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80004c2:	f3ef 8310 	mrs	r3, PRIMASK
 80004c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80004c8:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80004ca:	617b      	str	r3, [r7, #20]
 80004cc:	2301      	movs	r3, #1
 80004ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	f383 8810 	msr	PRIMASK, r3
}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	2201      	movs	r2, #1
 80004de:	431a      	orrs	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004e8:	693b      	ldr	r3, [r7, #16]
 80004ea:	f383 8810 	msr	PRIMASK, r3
}
 80004ee:	46c0      	nop			; (mov r8, r8)
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b006      	add	sp, #24
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(const USART_TypeDef *USARTx)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000504:	b29b      	uxth	r3, r3
 8000506:	05db      	lsls	r3, r3, #23
 8000508:	0ddb      	lsrs	r3, r3, #23
 800050a:	b29b      	uxth	r3, r3
}
 800050c:	0018      	movs	r0, r3
 800050e:	46bd      	mov	sp, r7
 8000510:	b002      	add	sp, #8
 8000512:	bd80      	pop	{r7, pc}

08000514 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 800051c:	4b04      	ldr	r3, [pc, #16]	; (8000530 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 800051e:	6819      	ldr	r1, [r3, #0]
 8000520:	4b03      	ldr	r3, [pc, #12]	; (8000530 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	430a      	orrs	r2, r1
 8000526:	601a      	str	r2, [r3, #0]
}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b002      	add	sp, #8
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40010000 	.word	0x40010000

08000534 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	619a      	str	r2, [r3, #24]
}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b002      	add	sp, #8
 800054a:	bd80      	pop	{r7, pc}

0800054c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	683a      	ldr	r2, [r7, #0]
 800055a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b002      	add	sp, #8
 8000562:	bd80      	pop	{r7, pc}

08000564 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 800056c:	4b07      	ldr	r3, [pc, #28]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 800056e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	430a      	orrs	r2, r1
 8000576:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 800057a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	4013      	ands	r3, r2
 8000580:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000582:	68fb      	ldr	r3, [r7, #12]
}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b004      	add	sp, #16
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40021000 	.word	0x40021000

08000590 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 800059a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	430a      	orrs	r2, r1
 80005a2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 80005a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4013      	ands	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ae:	68fb      	ldr	r3, [r7, #12]
}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b004      	add	sp, #16
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40021000 	.word	0x40021000

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 80005c2:	231e      	movs	r3, #30
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	2200      	movs	r2, #0
 80005c8:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 80005ca:	231c      	movs	r3, #28
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	2200      	movs	r2, #0
 80005d0:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 80005d2:	231a      	movs	r3, #26
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	2200      	movs	r2, #0
 80005d8:	801a      	strh	r2, [r3, #0]
	uint16_t beep1 = 0x0000;
 80005da:	2318      	movs	r3, #24
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	2200      	movs	r2, #0
 80005e0:	801a      	strh	r2, [r3, #0]
	uint16_t beep2 = 0xFFFF;
 80005e2:	2316      	movs	r3, #22
 80005e4:	18fb      	adds	r3, r7, r3
 80005e6:	2201      	movs	r2, #1
 80005e8:	4252      	negs	r2, r2
 80005ea:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f004 f88e 	bl	800470c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f878 	bl	80006e4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005f4:	4b35      	ldr	r3, [pc, #212]	; (80006cc <main+0x110>)
 80005f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005f8:	4b34      	ldr	r3, [pc, #208]	; (80006cc <main+0x110>)
 80005fa:	2101      	movs	r1, #1
 80005fc:	430a      	orrs	r2, r1
 80005fe:	635a      	str	r2, [r3, #52]	; 0x34
 8000600:	4b32      	ldr	r3, [pc, #200]	; (80006cc <main+0x110>)
 8000602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000604:	2201      	movs	r2, #1
 8000606:	4013      	ands	r3, r2
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800060c:	4b2f      	ldr	r3, [pc, #188]	; (80006cc <main+0x110>)
 800060e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000610:	4b2e      	ldr	r3, [pc, #184]	; (80006cc <main+0x110>)
 8000612:	2102      	movs	r1, #2
 8000614:	430a      	orrs	r2, r1
 8000616:	635a      	str	r2, [r3, #52]	; 0x34
 8000618:	4b2c      	ldr	r3, [pc, #176]	; (80006cc <main+0x110>)
 800061a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800061c:	2202      	movs	r2, #2
 800061e:	4013      	ands	r3, r2
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000624:	4b29      	ldr	r3, [pc, #164]	; (80006cc <main+0x110>)
 8000626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000628:	4b28      	ldr	r3, [pc, #160]	; (80006cc <main+0x110>)
 800062a:	2104      	movs	r1, #4
 800062c:	430a      	orrs	r2, r1
 800062e:	635a      	str	r2, [r3, #52]	; 0x34
 8000630:	4b26      	ldr	r3, [pc, #152]	; (80006cc <main+0x110>)
 8000632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000634:	2204      	movs	r2, #4
 8000636:	4013      	ands	r3, r2
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 fbb0 	bl	8000da0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000640:	f000 fb80 	bl	8000d44 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000644:	f000 fa86 	bl	8000b54 <MX_USART2_UART_Init>
  MX_COMP1_Init();
 8000648:	f000 f8aa 	bl	80007a0 <MX_COMP1_Init>
  MX_TIM1_Init();
 800064c:	f000 f988 	bl	8000960 <MX_TIM1_Init>
  MX_USART3_Init();
 8000650:	f000 fb36 	bl	8000cc0 <MX_USART3_Init>
  MX_I2S1_Init();
 8000654:	f000 f916 	bl	8000884 <MX_I2S1_Init>
  MX_I2C1_Init();
 8000658:	f000 f8d4 	bl	8000804 <MX_I2C1_Init>
  MX_SPI2_Init();
 800065c:	f000 f93c 	bl	80008d8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 8000660:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <main+0x114>)
 8000662:	0018      	movs	r0, r3
 8000664:	f004 fb20 	bl	8004ca8 <HAL_COMP_Start>
	HAL_Delay(100);
 8000668:	2064      	movs	r0, #100	; 0x64
 800066a:	f004 f8d5 	bl	8004818 <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 800066e:	f001 fe1d 	bl	80022ac <MEM_Reset>

	weoInit();
 8000672:	f000 fe7b 	bl	800136c <weoInit>
	HAL_Delay(1);
 8000676:	2001      	movs	r0, #1
 8000678:	f004 f8ce 	bl	8004818 <HAL_Delay>
	weoClear();
 800067c:	f000 ff12 	bl	80014a4 <weoClear>
	MEM_GetID();
 8000680:	f002 fb10 	bl	8002ca4 <MEM_GetID>
	soundSetup();
 8000684:	f001 f920 	bl	80018c8 <soundSetup>
	LIS3DHsetup();
 8000688:	f003 fb4e 	bl	8003d28 <LIS3DHsetup>
//	I2C_SOUND_ChangePage(0x01);
//	WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
//	WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
//    squeak_triple(signal);
//    squeak_long();
  USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <main+0x118>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <main+0x118>)
 8000692:	4911      	ldr	r1, [pc, #68]	; (80006d8 <main+0x11c>)
 8000694:	430a      	orrs	r2, r1
 8000696:	601a      	str	r2, [r3, #0]
	LL_USART_EnableIT_RXNE(USART2);
 8000698:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <main+0x118>)
 800069a:	0018      	movs	r0, r3
 800069c:	f7ff feee 	bl	800047c <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <main+0x118>)
 80006a2:	0018      	movs	r0, r3
 80006a4:	f7ff ff09 	bl	80004ba <LL_USART_EnableIT_ERROR>
	USART2->ICR|=USART_ICR_ORECF;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <main+0x118>)
 80006aa:	6a1a      	ldr	r2, [r3, #32]
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <main+0x118>)
 80006ae:	2108      	movs	r1, #8
 80006b0:	430a      	orrs	r2, r1
 80006b2:	621a      	str	r2, [r3, #32]
//		soundPlay(k);
//		HAL_I2S_DMAStop(&hi2s1);
//		HAL_Delay(200);
//	}
//    GPIOB->PUPDR &= ~0x3F000;
	GPIOC->ODR |= 1 << 6;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <main+0x120>)
 80006b6:	695a      	ldr	r2, [r3, #20]
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <main+0x120>)
 80006ba:	2140      	movs	r1, #64	; 0x40
 80006bc:	430a      	orrs	r2, r1
 80006be:	615a      	str	r2, [r3, #20]
//	weoShowFullScreen(4);
	while (1) {
//		weoShowSmallImage(0x02,0x70,0x00);
//		LIS3DHreadData();
		cmdExecute(cmd2Execute);
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <main+0x124>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	0018      	movs	r0, r3
 80006c6:	f002 fb4f 	bl	8002d68 <cmdExecute>
 80006ca:	e7f9      	b.n	80006c0 <main+0x104>
 80006cc:	40021000 	.word	0x40021000
 80006d0:	2000005c 	.word	0x2000005c
 80006d4:	40004400 	.word	0x40004400
 80006d8:	1000100d 	.word	0x1000100d
 80006dc:	50000800 	.word	0x50000800
 80006e0:	20000402 	.word	0x20000402

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b093      	sub	sp, #76	; 0x4c
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	2410      	movs	r4, #16
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	0018      	movs	r0, r3
 80006f0:	2338      	movs	r3, #56	; 0x38
 80006f2:	001a      	movs	r2, r3
 80006f4:	2100      	movs	r1, #0
 80006f6:	f00c f969 	bl	800c9cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fa:	003b      	movs	r3, r7
 80006fc:	0018      	movs	r0, r3
 80006fe:	2310      	movs	r3, #16
 8000700:	001a      	movs	r2, r3
 8000702:	2100      	movs	r1, #0
 8000704:	f00c f962 	bl	800c9cc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	0018      	movs	r0, r3
 800070e:	f006 fe8d 	bl	800742c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000712:	193b      	adds	r3, r7, r4
 8000714:	2202      	movs	r2, #2
 8000716:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	193b      	adds	r3, r7, r4
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	0052      	lsls	r2, r2, #1
 800071e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000720:	0021      	movs	r1, r4
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2240      	movs	r2, #64	; 0x40
 800072c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2202      	movs	r2, #2
 8000732:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2202      	movs	r2, #2
 8000738:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2208      	movs	r2, #8
 8000744:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	0292      	lsls	r2, r2, #10
 800074c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2280      	movs	r2, #128	; 0x80
 8000752:	0492      	lsls	r2, r2, #18
 8000754:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2280      	movs	r2, #128	; 0x80
 800075a:	0592      	lsls	r2, r2, #22
 800075c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075e:	187b      	adds	r3, r7, r1
 8000760:	0018      	movs	r0, r3
 8000762:	f006 feaf 	bl	80074c4 <HAL_RCC_OscConfig>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800076a:	f003 fb0f 	bl	8003d8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076e:	003b      	movs	r3, r7
 8000770:	2207      	movs	r2, #7
 8000772:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	003b      	movs	r3, r7
 8000776:	2202      	movs	r2, #2
 8000778:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	003b      	movs	r3, r7
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000780:	003b      	movs	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000786:	003b      	movs	r3, r7
 8000788:	2102      	movs	r1, #2
 800078a:	0018      	movs	r0, r3
 800078c:	f007 f9b4 	bl	8007af8 <HAL_RCC_ClockConfig>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000794:	f003 fafa 	bl	8003d8c <Error_Handler>
  }
}
 8000798:	46c0      	nop			; (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	b013      	add	sp, #76	; 0x4c
 800079e:	bd90      	pop	{r4, r7, pc}

080007a0 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007a6:	4a16      	ldr	r2, [pc, #88]	; (8000800 <MX_COMP1_Init+0x60>)
 80007a8:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007ac:	2280      	movs	r2, #128	; 0x80
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007b4:	2230      	movs	r2, #48	; 0x30
 80007b6:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80007b8:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80007c4:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007cc:	2280      	movs	r2, #128	; 0x80
 80007ce:	0392      	lsls	r2, r2, #14
 80007d0:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 80007de:	4b07      	ldr	r3, [pc, #28]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007e0:	2212      	movs	r2, #18
 80007e2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007e6:	0018      	movs	r0, r3
 80007e8:	f004 f8fc 	bl	80049e4 <HAL_COMP_Init>
 80007ec:	1e03      	subs	r3, r0, #0
 80007ee:	d001      	beq.n	80007f4 <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 80007f0:	f003 facc 	bl	8003d8c <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	2000005c 	.word	0x2000005c
 8000800:	40010200 	.word	0x40010200

08000804 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000808:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <MX_I2C1_Init+0x74>)
 800080a:	4a1c      	ldr	r2, [pc, #112]	; (800087c <MX_I2C1_Init+0x78>)
 800080c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_I2C1_Init+0x74>)
 8000810:	4a1b      	ldr	r2, [pc, #108]	; (8000880 <MX_I2C1_Init+0x7c>)
 8000812:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000814:	4b18      	ldr	r3, [pc, #96]	; (8000878 <MX_I2C1_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <MX_I2C1_Init+0x74>)
 800081c:	2201      	movs	r2, #1
 800081e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000820:	4b15      	ldr	r3, [pc, #84]	; (8000878 <MX_I2C1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_I2C1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_I2C1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_I2C1_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_I2C1_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_I2C1_Init+0x74>)
 8000840:	0018      	movs	r0, r3
 8000842:	f004 ffef 	bl	8005824 <HAL_I2C_Init>
 8000846:	1e03      	subs	r3, r0, #0
 8000848:	d001      	beq.n	800084e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800084a:	f003 fa9f 	bl	8003d8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <MX_I2C1_Init+0x74>)
 8000850:	2100      	movs	r1, #0
 8000852:	0018      	movs	r0, r3
 8000854:	f006 f978 	bl	8006b48 <HAL_I2CEx_ConfigAnalogFilter>
 8000858:	1e03      	subs	r3, r0, #0
 800085a:	d001      	beq.n	8000860 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800085c:	f003 fa96 	bl	8003d8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <MX_I2C1_Init+0x74>)
 8000862:	2100      	movs	r1, #0
 8000864:	0018      	movs	r0, r3
 8000866:	f006 f9bb 	bl	8006be0 <HAL_I2CEx_ConfigDigitalFilter>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d001      	beq.n	8000872 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800086e:	f003 fa8d 	bl	8003d8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	2000008c 	.word	0x2000008c
 800087c:	40005400 	.word	0x40005400
 8000880:	1094102c 	.word	0x1094102c

08000884 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_I2S1_Init+0x4c>)
 800088a:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <MX_I2S1_Init+0x50>)
 800088c:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <MX_I2S1_Init+0x4c>)
 8000890:	2280      	movs	r2, #128	; 0x80
 8000892:	0092      	lsls	r2, r2, #2
 8000894:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_I2S1_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_I2S1_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_I2S1_Init+0x4c>)
 80008a4:	2280      	movs	r2, #128	; 0x80
 80008a6:	0092      	lsls	r2, r2, #2
 80008a8:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_I2S1_Init+0x4c>)
 80008ac:	22fa      	movs	r2, #250	; 0xfa
 80008ae:	0192      	lsls	r2, r2, #6
 80008b0:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <MX_I2S1_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <MX_I2S1_Init+0x4c>)
 80008ba:	0018      	movs	r0, r3
 80008bc:	f006 f9dc 	bl	8006c78 <HAL_I2S_Init>
 80008c0:	1e03      	subs	r3, r0, #0
 80008c2:	d001      	beq.n	80008c8 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 80008c4:	f003 fa62 	bl	8003d8c <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	200000e0 	.word	0x200000e0
 80008d4:	40013000 	.word	0x40013000

080008d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008dc:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <MX_SPI2_Init+0x80>)
 80008de:	2208      	movs	r2, #8
 80008e0:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008e2:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <MX_SPI2_Init+0x80>)
 80008e4:	4a1d      	ldr	r2, [pc, #116]	; (800095c <MX_SPI2_Init+0x84>)
 80008e6:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_SPI2_Init+0x80>)
 80008ea:	2282      	movs	r2, #130	; 0x82
 80008ec:	0052      	lsls	r2, r2, #1
 80008ee:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <MX_SPI2_Init+0x80>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_SPI2_Init+0x80>)
 80008f8:	22e0      	movs	r2, #224	; 0xe0
 80008fa:	00d2      	lsls	r2, r2, #3
 80008fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008fe:	4b16      	ldr	r3, [pc, #88]	; (8000958 <MX_SPI2_Init+0x80>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_SPI2_Init+0x80>)
 8000906:	2200      	movs	r2, #0
 8000908:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_SPI2_Init+0x80>)
 800090c:	2280      	movs	r2, #128	; 0x80
 800090e:	0092      	lsls	r2, r2, #2
 8000910:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_SPI2_Init+0x80>)
 8000914:	2210      	movs	r2, #16
 8000916:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_SPI2_Init+0x80>)
 800091a:	2200      	movs	r2, #0
 800091c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_SPI2_Init+0x80>)
 8000920:	2200      	movs	r2, #0
 8000922:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_SPI2_Init+0x80>)
 8000926:	2200      	movs	r2, #0
 8000928:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_SPI2_Init+0x80>)
 800092c:	2207      	movs	r2, #7
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_SPI2_Init+0x80>)
 8000932:	2200      	movs	r2, #0
 8000934:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_SPI2_Init+0x80>)
 8000938:	2208      	movs	r2, #8
 800093a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_SPI2_Init+0x80>)
 800093e:	0018      	movs	r0, r3
 8000940:	f007 ff84 	bl	800884c <HAL_SPI_Init>
 8000944:	1e03      	subs	r3, r0, #0
 8000946:	d001      	beq.n	800094c <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 8000948:	f003 fa20 	bl	8003d8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800094c:	4b02      	ldr	r3, [pc, #8]	; (8000958 <MX_SPI2_Init+0x80>)
 800094e:	2208      	movs	r2, #8
 8000950:	61da      	str	r2, [r3, #28]
  /* USER CODE END SPI2_Init 2 */

}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000178 	.word	0x20000178
 800095c:	40003800 	.word	0x40003800

08000960 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b09e      	sub	sp, #120	; 0x78
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000966:	2368      	movs	r3, #104	; 0x68
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	0018      	movs	r0, r3
 800096c:	2310      	movs	r3, #16
 800096e:	001a      	movs	r2, r3
 8000970:	2100      	movs	r1, #0
 8000972:	f00c f82b 	bl	800c9cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000976:	235c      	movs	r3, #92	; 0x5c
 8000978:	18fb      	adds	r3, r7, r3
 800097a:	0018      	movs	r0, r3
 800097c:	230c      	movs	r3, #12
 800097e:	001a      	movs	r2, r3
 8000980:	2100      	movs	r1, #0
 8000982:	f00c f823 	bl	800c9cc <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000986:	2350      	movs	r3, #80	; 0x50
 8000988:	18fb      	adds	r3, r7, r3
 800098a:	0018      	movs	r0, r3
 800098c:	230c      	movs	r3, #12
 800098e:	001a      	movs	r2, r3
 8000990:	2100      	movs	r1, #0
 8000992:	f00c f81b 	bl	800c9cc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000996:	2334      	movs	r3, #52	; 0x34
 8000998:	18fb      	adds	r3, r7, r3
 800099a:	0018      	movs	r0, r3
 800099c:	231c      	movs	r3, #28
 800099e:	001a      	movs	r2, r3
 80009a0:	2100      	movs	r1, #0
 80009a2:	f00c f813 	bl	800c9cc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009a6:	003b      	movs	r3, r7
 80009a8:	0018      	movs	r0, r3
 80009aa:	2334      	movs	r3, #52	; 0x34
 80009ac:	001a      	movs	r2, r3
 80009ae:	2100      	movs	r1, #0
 80009b0:	f00c f80c 	bl	800c9cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009b4:	4b64      	ldr	r3, [pc, #400]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 80009b6:	4a65      	ldr	r2, [pc, #404]	; (8000b4c <MX_TIM1_Init+0x1ec>)
 80009b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009ba:	4b63      	ldr	r3, [pc, #396]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c0:	4b61      	ldr	r3, [pc, #388]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 80009c6:	4b60      	ldr	r3, [pc, #384]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 80009c8:	4a61      	ldr	r2, [pc, #388]	; (8000b50 <MX_TIM1_Init+0x1f0>)
 80009ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009cc:	4b5e      	ldr	r3, [pc, #376]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009d2:	4b5d      	ldr	r3, [pc, #372]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009d8:	4b5b      	ldr	r3, [pc, #364]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 80009da:	2280      	movs	r2, #128	; 0x80
 80009dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009de:	4b5a      	ldr	r3, [pc, #360]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 80009e0:	0018      	movs	r0, r3
 80009e2:	f009 fb33 	bl	800a04c <HAL_TIM_Base_Init>
 80009e6:	1e03      	subs	r3, r0, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80009ea:	f003 f9cf 	bl	8003d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ee:	2168      	movs	r1, #104	; 0x68
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	0152      	lsls	r2, r2, #5
 80009f6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009f8:	187a      	adds	r2, r7, r1
 80009fa:	4b53      	ldr	r3, [pc, #332]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 80009fc:	0011      	movs	r1, r2
 80009fe:	0018      	movs	r0, r3
 8000a00:	f009 fdc6 	bl	800a590 <HAL_TIM_ConfigClockSource>
 8000a04:	1e03      	subs	r3, r0, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000a08:	f003 f9c0 	bl	8003d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a0c:	4b4e      	ldr	r3, [pc, #312]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f009 fb74 	bl	800a0fc <HAL_TIM_PWM_Init>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000a18:	f003 f9b8 	bl	8003d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a1c:	215c      	movs	r1, #92	; 0x5c
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2200      	movs	r2, #0
 8000a28:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a30:	187a      	adds	r2, r7, r1
 8000a32:	4b45      	ldr	r3, [pc, #276]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 8000a34:	0011      	movs	r1, r2
 8000a36:	0018      	movs	r0, r3
 8000a38:	f00a fa84 	bl	800af44 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3c:	1e03      	subs	r3, r0, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000a40:	f003 f9a4 	bl	8003d8c <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8000a44:	2150      	movs	r1, #80	; 0x50
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2202      	movs	r2, #2
 8000a4a:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2201      	movs	r2, #1
 8000a50:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000a58:	187a      	adds	r2, r7, r1
 8000a5a:	4b3b      	ldr	r3, [pc, #236]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f00a fb84 	bl	800b16c <HAL_TIMEx_ConfigBreakInput>
 8000a64:	1e03      	subs	r3, r0, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000a68:	f003 f990 	bl	8003d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a6c:	2134      	movs	r1, #52	; 0x34
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2260      	movs	r2, #96	; 0x60
 8000a72:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 200;
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	22c8      	movs	r2, #200	; 0xc8
 8000a78:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	2204      	movs	r2, #4
 8000a8a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	2200      	movs	r2, #0
 8000a90:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a92:	187b      	adds	r3, r7, r1
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a98:	1879      	adds	r1, r7, r1
 8000a9a:	4b2b      	ldr	r3, [pc, #172]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f009 fc76 	bl	800a390 <HAL_TIM_PWM_ConfigChannel>
 8000aa4:	1e03      	subs	r3, r0, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8000aa8:	f003 f970 	bl	8003d8c <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000aac:	2134      	movs	r1, #52	; 0x34
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2232      	movs	r2, #50	; 0x32
 8000ab2:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000ab4:	1879      	adds	r1, r7, r1
 8000ab6:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 8000ab8:	2210      	movs	r2, #16
 8000aba:	0018      	movs	r0, r3
 8000abc:	f009 fc68 	bl	800a390 <HAL_TIM_PWM_ConfigChannel>
 8000ac0:	1e03      	subs	r3, r0, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 8000ac4:	f003 f962 	bl	8003d8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000ac8:	003b      	movs	r3, r7
 8000aca:	2280      	movs	r2, #128	; 0x80
 8000acc:	0112      	lsls	r2, r2, #4
 8000ace:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000ad0:	003b      	movs	r3, r7
 8000ad2:	2280      	movs	r2, #128	; 0x80
 8000ad4:	00d2      	lsls	r2, r2, #3
 8000ad6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ad8:	003b      	movs	r3, r7
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ade:	003b      	movs	r3, r7
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000ae4:	003b      	movs	r3, r7
 8000ae6:	2280      	movs	r2, #128	; 0x80
 8000ae8:	0152      	lsls	r2, r2, #5
 8000aea:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aec:	003b      	movs	r3, r7
 8000aee:	2280      	movs	r2, #128	; 0x80
 8000af0:	0192      	lsls	r2, r2, #6
 8000af2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8000af4:	003b      	movs	r3, r7
 8000af6:	220a      	movs	r2, #10
 8000af8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000afa:	003b      	movs	r3, r7
 8000afc:	2200      	movs	r2, #0
 8000afe:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b00:	003b      	movs	r3, r7
 8000b02:	2200      	movs	r2, #0
 8000b04:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b06:	003b      	movs	r3, r7
 8000b08:	2280      	movs	r2, #128	; 0x80
 8000b0a:	0492      	lsls	r2, r2, #18
 8000b0c:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b0e:	003b      	movs	r3, r7
 8000b10:	2200      	movs	r2, #0
 8000b12:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b14:	003b      	movs	r3, r7
 8000b16:	2200      	movs	r2, #0
 8000b18:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000b1a:	003b      	movs	r3, r7
 8000b1c:	2280      	movs	r2, #128	; 0x80
 8000b1e:	01d2      	lsls	r2, r2, #7
 8000b20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b22:	003a      	movs	r2, r7
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 8000b26:	0011      	movs	r1, r2
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f00a fa79 	bl	800b020 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b2e:	1e03      	subs	r3, r0, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM1_Init+0x1d6>
  {
    Error_Handler();
 8000b32:	f003 f92b 	bl	8003d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b36:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f003 fbb1 	bl	80042a0 <HAL_TIM_MspPostInit>

}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b01e      	add	sp, #120	; 0x78
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	20000294 	.word	0x20000294
 8000b4c:	40012c00 	.word	0x40012c00
 8000b50:	0000027f 	.word	0x0000027f

08000b54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b09d      	sub	sp, #116	; 0x74
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000b5a:	2350      	movs	r3, #80	; 0x50
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	0018      	movs	r0, r3
 8000b60:	2320      	movs	r3, #32
 8000b62:	001a      	movs	r2, r3
 8000b64:	2100      	movs	r1, #0
 8000b66:	f00b ff31 	bl	800c9cc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	2338      	movs	r3, #56	; 0x38
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	0018      	movs	r0, r3
 8000b70:	2318      	movs	r3, #24
 8000b72:	001a      	movs	r2, r3
 8000b74:	2100      	movs	r1, #0
 8000b76:	f00b ff29 	bl	800c9cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	2334      	movs	r3, #52	; 0x34
 8000b80:	001a      	movs	r2, r3
 8000b82:	2100      	movs	r1, #0
 8000b84:	f00b ff22 	bl	800c9cc <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	0018      	movs	r0, r3
 8000b98:	f007 f958 	bl	8007e4c <HAL_RCCEx_PeriphCLKConfig>
 8000b9c:	1e03      	subs	r3, r0, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8000ba0:	f003 f8f4 	bl	8003d8c <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	029b      	lsls	r3, r3, #10
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f7ff fcdb 	bl	8000564 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f7ff fcee 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000bb4:	2438      	movs	r4, #56	; 0x38
 8000bb6:	193b      	adds	r3, r7, r4
 8000bb8:	2204      	movs	r2, #4
 8000bba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	193b      	adds	r3, r7, r4
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bc8:	193b      	adds	r3, r7, r4
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	193a      	adds	r2, r7, r4
 8000bdc:	23a0      	movs	r3, #160	; 0xa0
 8000bde:	05db      	lsls	r3, r3, #23
 8000be0:	0011      	movs	r1, r2
 8000be2:	0018      	movs	r0, r3
 8000be4:	f00b fb70 	bl	800c2c8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000be8:	0021      	movs	r1, r4
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	2208      	movs	r2, #8
 8000bee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	2201      	movs	r2, #1
 8000c06:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	187a      	adds	r2, r7, r1
 8000c10:	23a0      	movs	r3, #160	; 0xa0
 8000c12:	05db      	lsls	r3, r3, #23
 8000c14:	0011      	movs	r1, r2
 8000c16:	0018      	movs	r0, r3
 8000c18:	f00b fb56 	bl	800c2c8 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	201c      	movs	r0, #28
 8000c20:	f7ff fb16 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000c24:	201c      	movs	r0, #28
 8000c26:	f7ff faf9 	bl	800021c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000c2a:	2150      	movs	r1, #80	; 0x50
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	22e1      	movs	r2, #225	; 0xe1
 8000c36:	0212      	lsls	r2, r2, #8
 8000c38:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	2280      	movs	r2, #128	; 0x80
 8000c3e:	0152      	lsls	r2, r2, #5
 8000c40:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	220c      	movs	r2, #12
 8000c52:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	2200      	movs	r2, #0
 8000c58:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	4a16      	ldr	r2, [pc, #88]	; (8000cbc <MX_USART2_UART_Init+0x168>)
 8000c64:	0019      	movs	r1, r3
 8000c66:	0010      	movs	r0, r2
 8000c68:	f00b fdfe 	bl	800c868 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000c6c:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <MX_USART2_UART_Init+0x168>)
 8000c6e:	2100      	movs	r1, #0
 8000c70:	0018      	movs	r0, r3
 8000c72:	f7ff fb79 	bl	8000368 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_USART2_UART_Init+0x168>)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f7ff fb98 	bl	80003b0 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_USART2_UART_Init+0x168>)
 8000c82:	0018      	movs	r0, r3
 8000c84:	f7ff fb60 	bl	8000348 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_USART2_UART_Init+0x168>)
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f7ff fbb6 	bl	80003fc <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <MX_USART2_UART_Init+0x168>)
 8000c92:	0018      	movs	r0, r3
 8000c94:	f7ff fb4a 	bl	800032c <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <MX_USART2_UART_Init+0x168>)
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f7ff fbc5 	bl	800042c <LL_USART_IsActiveFlag_TEACK>
 8000ca2:	1e03      	subs	r3, r0, #0
 8000ca4:	d0f9      	beq.n	8000c9a <MX_USART2_UART_Init+0x146>
 8000ca6:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <MX_USART2_UART_Init+0x168>)
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f7ff fbd3 	bl	8000454 <LL_USART_IsActiveFlag_REACK>
 8000cae:	1e03      	subs	r3, r0, #0
 8000cb0:	d0f3      	beq.n	8000c9a <MX_USART2_UART_Init+0x146>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b01d      	add	sp, #116	; 0x74
 8000cba:	bd90      	pop	{r4, r7, pc}
 8000cbc:	40004400 	.word	0x40004400

08000cc0 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8000cc4:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <MX_USART3_Init+0x78>)
 8000cc6:	685a      	ldr	r2, [r3, #4]
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <MX_USART3_Init+0x78>)
 8000cca:	2180      	movs	r1, #128	; 0x80
 8000ccc:	0309      	lsls	r1, r1, #12
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000cd4:	4a18      	ldr	r2, [pc, #96]	; (8000d38 <MX_USART3_Init+0x78>)
 8000cd6:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8000000;
 8000cd8:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000cda:	4a19      	ldr	r2, [pc, #100]	; (8000d40 <MX_USART3_Init+0x80>)
 8000cdc:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000cde:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000ce4:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000cf2:	2208      	movs	r2, #8
 8000cf4:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000cf8:	2280      	movs	r2, #128	; 0x80
 8000cfa:	00d2      	lsls	r2, r2, #3
 8000cfc:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000d00:	2280      	movs	r2, #128	; 0x80
 8000d02:	0092      	lsls	r2, r2, #2
 8000d04:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000d06:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000d08:	2280      	movs	r2, #128	; 0x80
 8000d0a:	0052      	lsls	r2, r2, #1
 8000d0c:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f00a fad1 	bl	800b2c4 <HAL_USART_Init>
 8000d22:	1e03      	subs	r3, r0, #0
 8000d24:	d001      	beq.n	8000d2a <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8000d26:	f003 f831 	bl	8003d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  husart3.Init.BaudRate = 8000000;
 8000d2a:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000d2c:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <MX_USART3_Init+0x80>)
 8000d2e:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 2 */

}
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	40004800 	.word	0x40004800
 8000d3c:	200002e0 	.word	0x200002e0
 8000d40:	007a1200 	.word	0x007a1200

08000d44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d4a:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <MX_DMA_Init+0x58>)
 8000d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <MX_DMA_Init+0x58>)
 8000d50:	2101      	movs	r1, #1
 8000d52:	430a      	orrs	r2, r1
 8000d54:	639a      	str	r2, [r3, #56]	; 0x38
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_DMA_Init+0x58>)
 8000d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	2009      	movs	r0, #9
 8000d68:	f004 f89c 	bl	8004ea4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d6c:	2009      	movs	r0, #9
 8000d6e:	f004 f8ae 	bl	8004ece <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	200a      	movs	r0, #10
 8000d78:	f004 f894 	bl	8004ea4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000d7c:	200a      	movs	r0, #10
 8000d7e:	f004 f8a6 	bl	8004ece <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2100      	movs	r1, #0
 8000d86:	200b      	movs	r0, #11
 8000d88:	f004 f88c 	bl	8004ea4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8000d8c:	200b      	movs	r0, #11
 8000d8e:	f004 f89e 	bl	8004ece <HAL_NVIC_EnableIRQ>

}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b002      	add	sp, #8
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	40021000 	.word	0x40021000

08000da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da6:	003b      	movs	r3, r7
 8000da8:	0018      	movs	r0, r3
 8000daa:	2318      	movs	r3, #24
 8000dac:	001a      	movs	r2, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	f00b fe0c 	bl	800c9cc <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000db4:	2002      	movs	r0, #2
 8000db6:	f7ff fbeb 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000dba:	2004      	movs	r0, #4
 8000dbc:	f7ff fbe8 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f7ff fbe5 	bl	8000590 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8000dc6:	2380      	movs	r3, #128	; 0x80
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4aa0      	ldr	r2, [pc, #640]	; (800104c <MX_GPIO_Init+0x2ac>)
 8000dcc:	0019      	movs	r1, r3
 8000dce:	0010      	movs	r0, r2
 8000dd0:	f7ff fbb0 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	01db      	lsls	r3, r3, #7
 8000dd8:	4a9d      	ldr	r2, [pc, #628]	; (8001050 <MX_GPIO_Init+0x2b0>)
 8000dda:	0019      	movs	r1, r3
 8000ddc:	0010      	movs	r0, r2
 8000dde:	f7ff fba9 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8000de2:	2380      	movs	r3, #128	; 0x80
 8000de4:	021b      	lsls	r3, r3, #8
 8000de6:	4a9a      	ldr	r2, [pc, #616]	; (8001050 <MX_GPIO_Init+0x2b0>)
 8000de8:	0019      	movs	r1, r3
 8000dea:	0010      	movs	r0, r2
 8000dec:	f7ff fba2 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8000df0:	23a0      	movs	r3, #160	; 0xa0
 8000df2:	05db      	lsls	r3, r3, #23
 8000df4:	2140      	movs	r1, #64	; 0x40
 8000df6:	0018      	movs	r0, r3
 8000df8:	f7ff fb9c 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8000dfc:	23a0      	movs	r3, #160	; 0xa0
 8000dfe:	05db      	lsls	r3, r3, #23
 8000e00:	2180      	movs	r1, #128	; 0x80
 8000e02:	0018      	movs	r0, r3
 8000e04:	f7ff fb96 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8000e08:	4b91      	ldr	r3, [pc, #580]	; (8001050 <MX_GPIO_Init+0x2b0>)
 8000e0a:	2140      	movs	r1, #64	; 0x40
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f7ff fb91 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_1_GPIO_Port, TEST_1_Pin);
 8000e12:	2380      	movs	r3, #128	; 0x80
 8000e14:	011a      	lsls	r2, r3, #4
 8000e16:	23a0      	movs	r3, #160	; 0xa0
 8000e18:	05db      	lsls	r3, r3, #23
 8000e1a:	0011      	movs	r1, r2
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f7ff fb95 	bl	800054c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_2_GPIO_Port, TEST_2_Pin);
 8000e22:	2380      	movs	r3, #128	; 0x80
 8000e24:	015a      	lsls	r2, r3, #5
 8000e26:	23a0      	movs	r3, #160	; 0xa0
 8000e28:	05db      	lsls	r3, r3, #23
 8000e2a:	0011      	movs	r1, r2
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f7ff fb8d 	bl	800054c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8000e32:	003b      	movs	r3, r7
 8000e34:	2280      	movs	r2, #128	; 0x80
 8000e36:	0092      	lsls	r2, r2, #2
 8000e38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e3a:	003b      	movs	r3, r7
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	003b      	movs	r3, r7
 8000e42:	2203      	movs	r2, #3
 8000e44:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e46:	003b      	movs	r3, r7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e4c:	003b      	movs	r3, r7
 8000e4e:	2201      	movs	r2, #1
 8000e50:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000e52:	003b      	movs	r3, r7
 8000e54:	4a7d      	ldr	r2, [pc, #500]	; (800104c <MX_GPIO_Init+0x2ac>)
 8000e56:	0019      	movs	r1, r3
 8000e58:	0010      	movs	r0, r2
 8000e5a:	f00b fa35 	bl	800c2c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8000e5e:	003b      	movs	r3, r7
 8000e60:	2280      	movs	r2, #128	; 0x80
 8000e62:	01d2      	lsls	r2, r2, #7
 8000e64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e66:	003b      	movs	r3, r7
 8000e68:	2201      	movs	r2, #1
 8000e6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e6c:	003b      	movs	r3, r7
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e72:	003b      	movs	r3, r7
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e78:	003b      	movs	r3, r7
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	003b      	movs	r3, r7
 8000e80:	4a73      	ldr	r2, [pc, #460]	; (8001050 <MX_GPIO_Init+0x2b0>)
 8000e82:	0019      	movs	r1, r3
 8000e84:	0010      	movs	r0, r2
 8000e86:	f00b fa1f 	bl	800c2c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8000e8a:	003b      	movs	r3, r7
 8000e8c:	2280      	movs	r2, #128	; 0x80
 8000e8e:	0212      	lsls	r2, r2, #8
 8000e90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e92:	003b      	movs	r3, r7
 8000e94:	2201      	movs	r2, #1
 8000e96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e98:	003b      	movs	r3, r7
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e9e:	003b      	movs	r3, r7
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000ea4:	003b      	movs	r3, r7
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8000eaa:	003b      	movs	r3, r7
 8000eac:	4a68      	ldr	r2, [pc, #416]	; (8001050 <MX_GPIO_Init+0x2b0>)
 8000eae:	0019      	movs	r1, r3
 8000eb0:	0010      	movs	r0, r2
 8000eb2:	f00b fa09 	bl	800c2c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8000eb6:	003b      	movs	r3, r7
 8000eb8:	2201      	movs	r2, #1
 8000eba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000ebc:	003b      	movs	r3, r7
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000ec2:	003b      	movs	r3, r7
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	003a      	movs	r2, r7
 8000eca:	23a0      	movs	r3, #160	; 0xa0
 8000ecc:	05db      	lsls	r3, r3, #23
 8000ece:	0011      	movs	r1, r2
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f00b f9f9 	bl	800c2c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8000ed6:	003b      	movs	r3, r7
 8000ed8:	2202      	movs	r2, #2
 8000eda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000edc:	003b      	movs	r3, r7
 8000ede:	2200      	movs	r2, #0
 8000ee0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000ee2:	003b      	movs	r3, r7
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	003a      	movs	r2, r7
 8000eea:	23a0      	movs	r3, #160	; 0xa0
 8000eec:	05db      	lsls	r3, r3, #23
 8000eee:	0011      	movs	r1, r2
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f00b f9e9 	bl	800c2c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000ef6:	003b      	movs	r3, r7
 8000ef8:	2210      	movs	r2, #16
 8000efa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000efc:	003b      	movs	r3, r7
 8000efe:	2200      	movs	r2, #0
 8000f00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f02:	003b      	movs	r3, r7
 8000f04:	2201      	movs	r2, #1
 8000f06:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8000f08:	003a      	movs	r2, r7
 8000f0a:	23a0      	movs	r3, #160	; 0xa0
 8000f0c:	05db      	lsls	r3, r3, #23
 8000f0e:	0011      	movs	r1, r2
 8000f10:	0018      	movs	r0, r3
 8000f12:	f00b f9d9 	bl	800c2c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000f16:	003b      	movs	r3, r7
 8000f18:	2240      	movs	r2, #64	; 0x40
 8000f1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f1c:	003b      	movs	r3, r7
 8000f1e:	2201      	movs	r2, #1
 8000f20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	003b      	movs	r3, r7
 8000f24:	2203      	movs	r2, #3
 8000f26:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f28:	003b      	movs	r3, r7
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f2e:	003b      	movs	r3, r7
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8000f34:	003a      	movs	r2, r7
 8000f36:	23a0      	movs	r3, #160	; 0xa0
 8000f38:	05db      	lsls	r3, r3, #23
 8000f3a:	0011      	movs	r1, r2
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f00b f9c3 	bl	800c2c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8000f42:	003b      	movs	r3, r7
 8000f44:	2280      	movs	r2, #128	; 0x80
 8000f46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f48:	003b      	movs	r3, r7
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	003b      	movs	r3, r7
 8000f50:	2203      	movs	r2, #3
 8000f52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f54:	003b      	movs	r3, r7
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f5a:	003b      	movs	r3, r7
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8000f60:	003a      	movs	r2, r7
 8000f62:	23a0      	movs	r3, #160	; 0xa0
 8000f64:	05db      	lsls	r3, r3, #23
 8000f66:	0011      	movs	r1, r2
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f00b f9ad 	bl	800c2c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8000f6e:	003b      	movs	r3, r7
 8000f70:	2240      	movs	r2, #64	; 0x40
 8000f72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f74:	003b      	movs	r3, r7
 8000f76:	2201      	movs	r2, #1
 8000f78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7a:	003b      	movs	r3, r7
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f80:	003b      	movs	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f86:	003b      	movs	r3, r7
 8000f88:	2201      	movs	r2, #1
 8000f8a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	003b      	movs	r3, r7
 8000f8e:	4a30      	ldr	r2, [pc, #192]	; (8001050 <MX_GPIO_Init+0x2b0>)
 8000f90:	0019      	movs	r1, r3
 8000f92:	0010      	movs	r0, r2
 8000f94:	f00b f998 	bl	800c2c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_1_Pin;
 8000f98:	003b      	movs	r3, r7
 8000f9a:	2280      	movs	r2, #128	; 0x80
 8000f9c:	0112      	lsls	r2, r2, #4
 8000f9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fa0:	003b      	movs	r3, r7
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa6:	003b      	movs	r3, r7
 8000fa8:	2203      	movs	r2, #3
 8000faa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fac:	003b      	movs	r3, r7
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fb2:	003b      	movs	r3, r7
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_1_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	003a      	movs	r2, r7
 8000fba:	23a0      	movs	r3, #160	; 0xa0
 8000fbc:	05db      	lsls	r3, r3, #23
 8000fbe:	0011      	movs	r1, r2
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f00b f981 	bl	800c2c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_2_Pin;
 8000fc6:	003b      	movs	r3, r7
 8000fc8:	2280      	movs	r2, #128	; 0x80
 8000fca:	0152      	lsls	r2, r2, #5
 8000fcc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fce:	003b      	movs	r3, r7
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd4:	003b      	movs	r3, r7
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fda:	003b      	movs	r3, r7
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fe0:	003b      	movs	r3, r7
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_2_GPIO_Port, &GPIO_InitStruct);
 8000fe6:	003a      	movs	r2, r7
 8000fe8:	23a0      	movs	r3, #160	; 0xa0
 8000fea:	05db      	lsls	r3, r3, #23
 8000fec:	0011      	movs	r1, r2
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f00b f96a 	bl	800c2c8 <LL_GPIO_Init>
  /**/
    GPIO_InitStruct.Pin = KEY_4_Pin;
 8000ff4:	003b      	movs	r3, r7
 8000ff6:	2280      	movs	r2, #128	; 0x80
 8000ff8:	0192      	lsls	r2, r2, #6
 8000ffa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000ffc:	003b      	movs	r3, r7
 8000ffe:	2200      	movs	r2, #0
 8001000:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001002:	003b      	movs	r3, r7
 8001004:	2201      	movs	r2, #1
 8001006:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8001008:	003a      	movs	r2, r7
 800100a:	23a0      	movs	r3, #160	; 0xa0
 800100c:	05db      	lsls	r3, r3, #23
 800100e:	0011      	movs	r1, r2
 8001010:	0018      	movs	r0, r3
 8001012:	f00b f959 	bl	800c2c8 <LL_GPIO_Init>
    /**/
      GPIO_InitStruct.Pin = KEY_5_Pin;
 8001016:	003b      	movs	r3, r7
 8001018:	2280      	movs	r2, #128	; 0x80
 800101a:	01d2      	lsls	r2, r2, #7
 800101c:	601a      	str	r2, [r3, #0]
      GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800101e:	003b      	movs	r3, r7
 8001020:	2200      	movs	r2, #0
 8001022:	605a      	str	r2, [r3, #4]
      GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001024:	003b      	movs	r3, r7
 8001026:	2201      	movs	r2, #1
 8001028:	611a      	str	r2, [r3, #16]
      LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 800102a:	003a      	movs	r2, r7
 800102c:	23a0      	movs	r3, #160	; 0xa0
 800102e:	05db      	lsls	r3, r3, #23
 8001030:	0011      	movs	r1, r2
 8001032:	0018      	movs	r0, r3
 8001034:	f00b f948 	bl	800c2c8 <LL_GPIO_Init>
  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	031b      	lsls	r3, r3, #12
 800103c:	0018      	movs	r0, r3
 800103e:	f7ff fa69 	bl	8000514 <LL_SYSCFG_EnableFastModePlus>

}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	b006      	add	sp, #24
 8001048:	bd80      	pop	{r7, pc}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	50000400 	.word	0x50000400
 8001050:	50000800 	.word	0x50000800

08001054 <USART2_RX_Callback>:
//    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
    /**/

void  USART2_RX_Callback(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <USART2_RX_Callback+0x58>)
 800105a:	0018      	movs	r0, r3
 800105c:	f7ff fa4c 	bl	80004f8 <LL_USART_ReceiveData9>
 8001060:	0003      	movs	r3, r0
 8001062:	001a      	movs	r2, r3
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <USART2_RX_Callback+0x5c>)
 8001066:	801a      	strh	r2, [r3, #0]
//	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
  ByteReceived=1;
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <USART2_RX_Callback+0x60>)
 800106a:	2201      	movs	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]
  if(dt1 & 0x100){
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <USART2_RX_Callback+0x5c>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	001a      	movs	r2, r3
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	4013      	ands	r3, r2
 800107a:	d00a      	beq.n	8001092 <USART2_RX_Callback+0x3e>
	  cmd[0]=dt1;
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <USART2_RX_Callback+0x5c>)
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <USART2_RX_Callback+0x64>)
 8001084:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <USART2_RX_Callback+0x68>)
 8001088:	2200      	movs	r2, #0
 800108a:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <USART2_RX_Callback+0x6c>)
 800108e:	2201      	movs	r2, #1
 8001090:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <USART2_RX_Callback+0x6c>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d104      	bne.n	80010a4 <USART2_RX_Callback+0x50>
	  cmdReceive(dt1);
 800109a:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <USART2_RX_Callback+0x5c>)
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	0018      	movs	r0, r3
 80010a0:	f000 f8aa 	bl	80011f8 <cmdReceive>
  }
}
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	40004400 	.word	0x40004400
 80010b0:	200003fe 	.word	0x200003fe
 80010b4:	200003fc 	.word	0x200003fc
 80010b8:	200003cc 	.word	0x200003cc
 80010bc:	20000400 	.word	0x20000400
 80010c0:	200003fd 	.word	0x200003fd

080010c4 <HAL_SPI_RxHalfCpltCallback>:
//====================================================================================================================
void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi2)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
//  	GPIOA->ODR &= ~(1 << 11);	//reset test 1
//  	decY=0x01;
//  			if(imY % 2 !=0){
//  				decY=0x02;
//  			}
  	if(cmdCur == 0x11)
 80010cc:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <HAL_SPI_RxHalfCpltCallback+0x7c>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b11      	cmp	r3, #17
 80010d2:	d116      	bne.n	8001102 <HAL_SPI_RxHalfCpltCallback+0x3e>
  	{
  	GPIOA->ODR &= ~(1 << 6);	//reset cs of DISPLAY
 80010d4:	23a0      	movs	r3, #160	; 0xa0
 80010d6:	05db      	lsls	r3, r3, #23
 80010d8:	695a      	ldr	r2, [r3, #20]
 80010da:	23a0      	movs	r3, #160	; 0xa0
 80010dc:	05db      	lsls	r3, r3, #23
 80010de:	2140      	movs	r1, #64	; 0x40
 80010e0:	438a      	bics	r2, r1
 80010e2:	615a      	str	r2, [r3, #20]
  		GPIOA->ODR |= 1 << 7;	//set   dc of DISPLAY
 80010e4:	23a0      	movs	r3, #160	; 0xa0
 80010e6:	05db      	lsls	r3, r3, #23
 80010e8:	695a      	ldr	r2, [r3, #20]
 80010ea:	23a0      	movs	r3, #160	; 0xa0
 80010ec:	05db      	lsls	r3, r3, #23
 80010ee:	2180      	movs	r1, #128	; 0x80
 80010f0:	430a      	orrs	r2, r1
 80010f2:	615a      	str	r2, [r3, #20]
  		HAL_USART_Transmit_DMA(&husart3, MEM_Buffer,imLen);
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <HAL_SPI_RxHalfCpltCallback+0x80>)
 80010f6:	881a      	ldrh	r2, [r3, #0]
 80010f8:	4913      	ldr	r1, [pc, #76]	; (8001148 <HAL_SPI_RxHalfCpltCallback+0x84>)
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <HAL_SPI_RxHalfCpltCallback+0x88>)
 80010fc:	0018      	movs	r0, r3
 80010fe:	f00a f9ef 	bl	800b4e0 <HAL_USART_Transmit_DMA>
  	}
  	if(cmdCur == 0x12)
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <HAL_SPI_RxHalfCpltCallback+0x7c>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b12      	cmp	r3, #18
 8001108:	d116      	bne.n	8001138 <HAL_SPI_RxHalfCpltCallback+0x74>
  	{
  	GPIOA->ODR &= ~(1 << 6);	//reset cs of DISPLAY
 800110a:	23a0      	movs	r3, #160	; 0xa0
 800110c:	05db      	lsls	r3, r3, #23
 800110e:	695a      	ldr	r2, [r3, #20]
 8001110:	23a0      	movs	r3, #160	; 0xa0
 8001112:	05db      	lsls	r3, r3, #23
 8001114:	2140      	movs	r1, #64	; 0x40
 8001116:	438a      	bics	r2, r1
 8001118:	615a      	str	r2, [r3, #20]
  		GPIOA->ODR |= 1 << 7;	//set   dc of DISPLAY
 800111a:	23a0      	movs	r3, #160	; 0xa0
 800111c:	05db      	lsls	r3, r3, #23
 800111e:	695a      	ldr	r2, [r3, #20]
 8001120:	23a0      	movs	r3, #160	; 0xa0
 8001122:	05db      	lsls	r3, r3, #23
 8001124:	2180      	movs	r1, #128	; 0x80
 8001126:	430a      	orrs	r2, r1
 8001128:	615a      	str	r2, [r3, #20]
  		HAL_USART_Transmit_DMA(&husart3, MEM_Buffer,imLen);
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_SPI_RxHalfCpltCallback+0x80>)
 800112c:	881a      	ldrh	r2, [r3, #0]
 800112e:	4906      	ldr	r1, [pc, #24]	; (8001148 <HAL_SPI_RxHalfCpltCallback+0x84>)
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_SPI_RxHalfCpltCallback+0x88>)
 8001132:	0018      	movs	r0, r3
 8001134:	f00a f9d4 	bl	800b4e0 <HAL_USART_Transmit_DMA>
//  	{
//
////  	  		HAL_I2S_Transmit_DMA(&hi2s1, MEM_Buffer,len*2);
//	}

}
 8001138:	46c0      	nop			; (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	b002      	add	sp, #8
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000403 	.word	0x20000403
 8001144:	20000406 	.word	0x20000406
 8001148:	20000408 	.word	0x20000408
 800114c:	200002e0 	.word	0x200002e0

08001150 <HAL_SPI_RxCpltCallback>:
//==========================================================
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi2)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
//	if(cmd2Execute==0x11){
		GPIOB->ODR |= 1 << 9; // set cs
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <HAL_SPI_RxCpltCallback+0x20>)
 800115a:	695a      	ldr	r2, [r3, #20]
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <HAL_SPI_RxCpltCallback+0x20>)
 800115e:	2180      	movs	r1, #128	; 0x80
 8001160:	0089      	lsls	r1, r1, #2
 8001162:	430a      	orrs	r2, r1
 8001164:	615a      	str	r2, [r3, #20]

//	}
//	if(cmd2Execute==0x14){
//return;
//	}
}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	46bd      	mov	sp, r7
 800116a:	b002      	add	sp, #8
 800116c:	bd80      	pop	{r7, pc}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	50000400 	.word	0x50000400

08001174 <HAL_USART_TxCpltCallback>:
//==============================================================
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart3)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	while(!(USART3->ISR & USART_ISR_TXE)){};
 800117c:	46c0      	nop			; (mov r8, r8)
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <HAL_USART_TxCpltCallback+0x50>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	4013      	ands	r3, r2
 8001186:	d0fa      	beq.n	800117e <HAL_USART_TxCpltCallback+0xa>
	GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001188:	23a0      	movs	r3, #160	; 0xa0
 800118a:	05db      	lsls	r3, r3, #23
 800118c:	695a      	ldr	r2, [r3, #20]
 800118e:	23a0      	movs	r3, #160	; 0xa0
 8001190:	05db      	lsls	r3, r3, #23
 8001192:	2180      	movs	r1, #128	; 0x80
 8001194:	438a      	bics	r2, r1
 8001196:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= 1 << 6;	//set Display CS
 8001198:	23a0      	movs	r3, #160	; 0xa0
 800119a:	05db      	lsls	r3, r3, #23
 800119c:	695a      	ldr	r2, [r3, #20]
 800119e:	23a0      	movs	r3, #160	; 0xa0
 80011a0:	05db      	lsls	r3, r3, #23
 80011a2:	2140      	movs	r1, #64	; 0x40
 80011a4:	430a      	orrs	r2, r1
 80011a6:	615a      	str	r2, [r3, #20]

//	while(BFEN==0){};
	cmd2Execute=0;
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <HAL_USART_TxCpltCallback+0x54>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
	GPIOC->ODR |= 1 << 6;	//set BF
 80011ae:	4b07      	ldr	r3, [pc, #28]	; (80011cc <HAL_USART_TxCpltCallback+0x58>)
 80011b0:	695a      	ldr	r2, [r3, #20]
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_USART_TxCpltCallback+0x58>)
 80011b4:	2140      	movs	r1, #64	; 0x40
 80011b6:	430a      	orrs	r2, r1
 80011b8:	615a      	str	r2, [r3, #20]

}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	46bd      	mov	sp, r7
 80011be:	b002      	add	sp, #8
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	40004800 	.word	0x40004800
 80011c8:	20000402 	.word	0x20000402
 80011cc:	50000800 	.word	0x50000800

080011d0 <HAL_I2S_TxHalfCpltCallback>:
	//	cmd2Execute=0;
//	GPIOC->ODR |= 1 << 6;	//set BF
}
//======================================================================================================================
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s1)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	sound_half_transfer_callback();
 80011d8:	f001 fcb6 	bl	8002b48 <sound_half_transfer_callback>
}
 80011dc:	46c0      	nop			; (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	b002      	add	sp, #8
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <HAL_I2S_TxCpltCallback>:
//======================================================================================================================
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s1)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	sound_full_transfer_callback();
 80011ec:	f001 fcb6 	bl	8002b5c <sound_full_transfer_callback>
}
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b002      	add	sp, #8
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <cmdReceive>:
//=======================================================================================================================
	void cmdReceive (uint16_t dt1)
	{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	0002      	movs	r2, r0
 8001200:	1dbb      	adds	r3, r7, #6
 8001202:	801a      	strh	r2, [r3, #0]
		//	  uint8_t inputCS=0;
			  uint8_t i=0;
 8001204:	230f      	movs	r3, #15
 8001206:	18fb      	adds	r3, r7, r3
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
			  while (!ByteReceived) {}
 800120c:	46c0      	nop			; (mov r8, r8)
 800120e:	4b46      	ldr	r3, [pc, #280]	; (8001328 <cmdReceive+0x130>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0fb      	beq.n	800120e <cmdReceive+0x16>
			  ByteReceived=0;
 8001216:	4b44      	ldr	r3, [pc, #272]	; (8001328 <cmdReceive+0x130>)
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
			  cmd[ind] = dt1;
 800121c:	4b43      	ldr	r3, [pc, #268]	; (800132c <cmdReceive+0x134>)
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	001a      	movs	r2, r3
 8001222:	1dbb      	adds	r3, r7, #6
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	b2d9      	uxtb	r1, r3
 8001228:	4b41      	ldr	r3, [pc, #260]	; (8001330 <cmdReceive+0x138>)
 800122a:	5499      	strb	r1, [r3, r2]
		//	  if(dt1==0x110){
		//		  BFEN=0;
		//	  }
			  cmdLen = cmd[1];
 800122c:	4b40      	ldr	r3, [pc, #256]	; (8001330 <cmdReceive+0x138>)
 800122e:	785a      	ldrb	r2, [r3, #1]
 8001230:	4b40      	ldr	r3, [pc, #256]	; (8001334 <cmdReceive+0x13c>)
 8001232:	701a      	strb	r2, [r3, #0]
			  if((cmd[1] & 0x80) == 0x80)
 8001234:	4b3e      	ldr	r3, [pc, #248]	; (8001330 <cmdReceive+0x138>)
 8001236:	785b      	ldrb	r3, [r3, #1]
 8001238:	b25b      	sxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	da09      	bge.n	8001252 <cmdReceive+0x5a>
			  		  {
			  			  picWithSound = 1;
 800123e:	4b3e      	ldr	r3, [pc, #248]	; (8001338 <cmdReceive+0x140>)
 8001240:	2201      	movs	r2, #1
 8001242:	701a      	strb	r2, [r3, #0]
			  			  cmdLen &= 0x7F;
 8001244:	4b3b      	ldr	r3, [pc, #236]	; (8001334 <cmdReceive+0x13c>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	227f      	movs	r2, #127	; 0x7f
 800124a:	4013      	ands	r3, r2
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4b39      	ldr	r3, [pc, #228]	; (8001334 <cmdReceive+0x13c>)
 8001250:	701a      	strb	r2, [r3, #0]
			  		  }
			  ind++;
 8001252:	4b36      	ldr	r3, [pc, #216]	; (800132c <cmdReceive+0x134>)
 8001254:	881b      	ldrh	r3, [r3, #0]
 8001256:	3301      	adds	r3, #1
 8001258:	b29a      	uxth	r2, r3
 800125a:	4b34      	ldr	r3, [pc, #208]	; (800132c <cmdReceive+0x134>)
 800125c:	801a      	strh	r2, [r3, #0]
			  if(ind>=1){
 800125e:	4b33      	ldr	r3, [pc, #204]	; (800132c <cmdReceive+0x134>)
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d056      	beq.n	8001314 <cmdReceive+0x11c>
		//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
				  if(ind>(cmdLen+1)){
 8001266:	4b31      	ldr	r3, [pc, #196]	; (800132c <cmdReceive+0x134>)
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	001a      	movs	r2, r3
 800126c:	4b31      	ldr	r3, [pc, #196]	; (8001334 <cmdReceive+0x13c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	3301      	adds	r3, #1
 8001272:	429a      	cmp	r2, r3
 8001274:	dd4e      	ble.n	8001314 <cmdReceive+0x11c>
		//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
					 for(i=0;i<(cmdLen+2);i++){
 8001276:	230f      	movs	r3, #15
 8001278:	18fb      	adds	r3, r7, r3
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
 800127e:	e00f      	b.n	80012a0 <cmdReceive+0xa8>
						 inputCS+=cmd[i];
 8001280:	210f      	movs	r1, #15
 8001282:	187b      	adds	r3, r7, r1
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	4a2a      	ldr	r2, [pc, #168]	; (8001330 <cmdReceive+0x138>)
 8001288:	5cd2      	ldrb	r2, [r2, r3]
 800128a:	4b2c      	ldr	r3, [pc, #176]	; (800133c <cmdReceive+0x144>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	18d3      	adds	r3, r2, r3
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4b2a      	ldr	r3, [pc, #168]	; (800133c <cmdReceive+0x144>)
 8001294:	701a      	strb	r2, [r3, #0]
					 for(i=0;i<(cmdLen+2);i++){
 8001296:	187b      	adds	r3, r7, r1
 8001298:	781a      	ldrb	r2, [r3, #0]
 800129a:	187b      	adds	r3, r7, r1
 800129c:	3201      	adds	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]
 80012a0:	4b24      	ldr	r3, [pc, #144]	; (8001334 <cmdReceive+0x13c>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	210f      	movs	r1, #15
 80012a8:	187b      	adds	r3, r7, r1
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	dae7      	bge.n	8001280 <cmdReceive+0x88>
					 }
					 if(!(inputCS==0x00)&&(ind==(cmdLen+2))){
 80012b0:	4b22      	ldr	r3, [pc, #136]	; (800133c <cmdReceive+0x144>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d022      	beq.n	80012fe <cmdReceive+0x106>
 80012b8:	4b1c      	ldr	r3, [pc, #112]	; (800132c <cmdReceive+0x134>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	001a      	movs	r2, r3
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <cmdReceive+0x13c>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	3302      	adds	r3, #2
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d11a      	bne.n	80012fe <cmdReceive+0x106>
		//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
						 firstByteReceived=0;
 80012c8:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <cmdReceive+0x148>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
						 				 for (i=0;i<(cmdLen+2);i++){
 80012ce:	187b      	adds	r3, r7, r1
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
 80012d4:	e00a      	b.n	80012ec <cmdReceive+0xf4>
						 					 cmd[i]=0;
 80012d6:	200f      	movs	r0, #15
 80012d8:	183b      	adds	r3, r7, r0
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4a14      	ldr	r2, [pc, #80]	; (8001330 <cmdReceive+0x138>)
 80012de:	2100      	movs	r1, #0
 80012e0:	54d1      	strb	r1, [r2, r3]
						 				 for (i=0;i<(cmdLen+2);i++){
 80012e2:	183b      	adds	r3, r7, r0
 80012e4:	781a      	ldrb	r2, [r3, #0]
 80012e6:	183b      	adds	r3, r7, r0
 80012e8:	3201      	adds	r2, #1
 80012ea:	701a      	strb	r2, [r3, #0]
 80012ec:	4b11      	ldr	r3, [pc, #68]	; (8001334 <cmdReceive+0x13c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	1c5a      	adds	r2, r3, #1
 80012f2:	230f      	movs	r3, #15
 80012f4:	18fb      	adds	r3, r7, r3
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	daec      	bge.n	80012d6 <cmdReceive+0xde>
					 if(!(inputCS==0x00)&&(ind==(cmdLen+2))){
 80012fc:	e00a      	b.n	8001314 <cmdReceive+0x11c>
						 				 }
					 }
					 else{
						 cmd[1] &= 0x7F;
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <cmdReceive+0x138>)
 8001300:	785b      	ldrb	r3, [r3, #1]
 8001302:	227f      	movs	r2, #127	; 0x7f
 8001304:	4013      	ands	r3, r2
 8001306:	b2da      	uxtb	r2, r3
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <cmdReceive+0x138>)
 800130a:	705a      	strb	r2, [r3, #1]
						 answer2CPU(cmd);
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <cmdReceive+0x138>)
 800130e:	0018      	movs	r0, r3
 8001310:	f000 fb64 	bl	80019dc <answer2CPU>
		//				 GPIOC->ODR |= 1 << 6;	//set BF
		//			 }
				  }
			  }
		//	  ind = 0;
			  USART2->ICR|=USART_ICR_ORECF;
 8001314:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <cmdReceive+0x14c>)
 8001316:	6a1a      	ldr	r2, [r3, #32]
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <cmdReceive+0x14c>)
 800131a:	2108      	movs	r1, #8
 800131c:	430a      	orrs	r2, r1
 800131e:	621a      	str	r2, [r3, #32]
	}
 8001320:	46c0      	nop			; (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	b004      	add	sp, #16
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200003fc 	.word	0x200003fc
 800132c:	20000400 	.word	0x20000400
 8001330:	200003cc 	.word	0x200003cc
 8001334:	200003c8 	.word	0x200003c8
 8001338:	200003e5 	.word	0x200003e5
 800133c:	20000405 	.word	0x20000405
 8001340:	200003fd 	.word	0x200003fd
 8001344:	40004400 	.word	0x40004400

08001348 <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	0002      	movs	r2, r0
 8001350:	1dfb      	adds	r3, r7, #7
 8001352:	701a      	strb	r2, [r3, #0]
			HAL_USART_Transmit(&husart3, (uint8_t*)&byte, 1, 10);
 8001354:	1df9      	adds	r1, r7, #7
 8001356:	4804      	ldr	r0, [pc, #16]	; (8001368 <USART_AS_SPI_sendCMD+0x20>)
 8001358:	230a      	movs	r3, #10
 800135a:	2201      	movs	r2, #1
 800135c:	f00a f802 	bl	800b364 <HAL_USART_Transmit>
		}
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	b002      	add	sp, #8
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200002e0 	.word	0x200002e0

0800136c <weoInit>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 10);
	}
	void weoInit(void) {
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0

		USART3->CR1 &= ~(USART_CR1_UE);
 8001370:	4b4a      	ldr	r3, [pc, #296]	; (800149c <weoInit+0x130>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b49      	ldr	r3, [pc, #292]	; (800149c <weoInit+0x130>)
 8001376:	2101      	movs	r1, #1
 8001378:	438a      	bics	r2, r1
 800137a:	601a      	str	r2, [r3, #0]
		USART3->CR2 |= USART_CR2_MSBFIRST;
 800137c:	4b47      	ldr	r3, [pc, #284]	; (800149c <weoInit+0x130>)
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	4b46      	ldr	r3, [pc, #280]	; (800149c <weoInit+0x130>)
 8001382:	2180      	movs	r1, #128	; 0x80
 8001384:	0309      	lsls	r1, r1, #12
 8001386:	430a      	orrs	r2, r1
 8001388:	605a      	str	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_UE;
 800138a:	4b44      	ldr	r3, [pc, #272]	; (800149c <weoInit+0x130>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	4b43      	ldr	r3, [pc, #268]	; (800149c <weoInit+0x130>)
 8001390:	2101      	movs	r1, #1
 8001392:	430a      	orrs	r2, r1
 8001394:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 8001396:	2001      	movs	r0, #1
 8001398:	f003 fa3e 	bl	8004818 <HAL_Delay>
		HAL_Delay(1);
 800139c:	2001      	movs	r0, #1
 800139e:	f003 fa3b 	bl	8004818 <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013a2:	4b3f      	ldr	r3, [pc, #252]	; (80014a0 <weoInit+0x134>)
 80013a4:	2100      	movs	r1, #0
 80013a6:	0018      	movs	r0, r3
 80013a8:	f008 ff08 	bl	800a1bc <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 80013ac:	2001      	movs	r0, #1
 80013ae:	f003 fa33 	bl	8004818 <HAL_Delay>

		GPIOA->ODR &= ~(1 << 6);	//reset cs
 80013b2:	23a0      	movs	r3, #160	; 0xa0
 80013b4:	05db      	lsls	r3, r3, #23
 80013b6:	695a      	ldr	r2, [r3, #20]
 80013b8:	23a0      	movs	r3, #160	; 0xa0
 80013ba:	05db      	lsls	r3, r3, #23
 80013bc:	2140      	movs	r1, #64	; 0x40
 80013be:	438a      	bics	r2, r1
 80013c0:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 80013c2:	23a0      	movs	r3, #160	; 0xa0
 80013c4:	05db      	lsls	r3, r3, #23
 80013c6:	695a      	ldr	r2, [r3, #20]
 80013c8:	23a0      	movs	r3, #160	; 0xa0
 80013ca:	05db      	lsls	r3, r3, #23
 80013cc:	2180      	movs	r1, #128	; 0x80
 80013ce:	438a      	bics	r2, r1
 80013d0:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 80013d2:	20af      	movs	r0, #175	; 0xaf
 80013d4:	f7ff ffb8 	bl	8001348 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0xB6);	//Set Second precharge Period
//		USART_AS_SPI_sendCMD(0x0F);	// 0x00 - 0x0F availible default = 0x04 = 0b0100
//		USART_AS_SPI_sendCMD(0xBC);	//Set Vp
//		USART_AS_SPI_sendCMD(0x08);	// 0x05 - default

		USART_AS_SPI_sendCMD(0xB8);
 80013d8:	20b8      	movs	r0, #184	; 0xb8
 80013da:	f7ff ffb5 	bl	8001348 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0);
 80013de:	2000      	movs	r0, #0
 80013e0:	f7ff ffb2 	bl	8001348 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0);
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff ffaf 	bl	8001348 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(1);
 80013ea:	2001      	movs	r0, #1
 80013ec:	f7ff ffac 	bl	8001348 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(2);
 80013f0:	2002      	movs	r0, #2
 80013f2:	f7ff ffa9 	bl	8001348 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(4);
 80013f6:	2004      	movs	r0, #4
 80013f8:	f7ff ffa6 	bl	8001348 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(7);
 80013fc:	2007      	movs	r0, #7
 80013fe:	f7ff ffa3 	bl	8001348 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(11);
 8001402:	200b      	movs	r0, #11
 8001404:	f7ff ffa0 	bl	8001348 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(14);
 8001408:	200e      	movs	r0, #14
 800140a:	f7ff ff9d 	bl	8001348 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(18);
 800140e:	2012      	movs	r0, #18
 8001410:	f7ff ff9a 	bl	8001348 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(23);
 8001414:	2017      	movs	r0, #23
 8001416:	f7ff ff97 	bl	8001348 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(27);
 800141a:	201b      	movs	r0, #27
 800141c:	f7ff ff94 	bl	8001348 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(33);
 8001420:	2021      	movs	r0, #33	; 0x21
 8001422:	f7ff ff91 	bl	8001348 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(40);
 8001426:	2028      	movs	r0, #40	; 0x28
 8001428:	f7ff ff8e 	bl	8001348 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(49);
 800142c:	2031      	movs	r0, #49	; 0x31
 800142e:	f7ff ff8b 	bl	8001348 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(63);
 8001432:	203f      	movs	r0, #63	; 0x3f
 8001434:	f7ff ff88 	bl	8001348 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 8001438:	20a0      	movs	r0, #160	; 0xa0
 800143a:	f7ff ff85 	bl	8001348 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0b00010100);
		USART_AS_SPI_sendCMD(0x51); //	0x51 is a proper remap!
 800143e:	2051      	movs	r0, #81	; 0x51
 8001440:	f7ff ff82 	bl	8001348 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8001444:	2081      	movs	r0, #129	; 0x81
 8001446:	f7ff ff7f 	bl	8001348 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 800144a:	20ff      	movs	r0, #255	; 0xff
 800144c:	f7ff ff7c 	bl	8001348 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 8001450:	20a1      	movs	r0, #161	; 0xa1
 8001452:	f7ff ff79 	bl	8001348 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 8001456:	2000      	movs	r0, #0
 8001458:	f7ff ff76 	bl	8001348 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 800145c:	20a2      	movs	r0, #162	; 0xa2
 800145e:	f7ff ff73 	bl	8001348 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 8001462:	2000      	movs	r0, #0
 8001464:	f7ff ff70 	bl	8001348 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 8001468:	20a8      	movs	r0, #168	; 0xa8
 800146a:	f7ff ff6d 	bl	8001348 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 800146e:	207f      	movs	r0, #127	; 0x7f
 8001470:	f7ff ff6a 	bl	8001348 <USART_AS_SPI_sendCMD>


//		USART_AS_SPI_sendCMD(0xFF);
//		USART_AS_SPI_sendCMD(0xFF);
		GPIOA->ODR |= 1 << 7;	//set dc
 8001474:	23a0      	movs	r3, #160	; 0xa0
 8001476:	05db      	lsls	r3, r3, #23
 8001478:	695a      	ldr	r2, [r3, #20]
 800147a:	23a0      	movs	r3, #160	; 0xa0
 800147c:	05db      	lsls	r3, r3, #23
 800147e:	2180      	movs	r1, #128	; 0x80
 8001480:	430a      	orrs	r2, r1
 8001482:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 8001484:	23a0      	movs	r3, #160	; 0xa0
 8001486:	05db      	lsls	r3, r3, #23
 8001488:	695a      	ldr	r2, [r3, #20]
 800148a:	23a0      	movs	r3, #160	; 0xa0
 800148c:	05db      	lsls	r3, r3, #23
 800148e:	2140      	movs	r1, #64	; 0x40
 8001490:	430a      	orrs	r2, r1
 8001492:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 8001494:	46c0      	nop			; (mov r8, r8)
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	40004800 	.word	0x40004800
 80014a0:	20000294 	.word	0x20000294

080014a4 <weoClear>:
	void weoClear(void) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
		uint16_t i;

					GPIOA->ODR &= ~(1 << 6);	//reset cs
 80014aa:	23a0      	movs	r3, #160	; 0xa0
 80014ac:	05db      	lsls	r3, r3, #23
 80014ae:	695a      	ldr	r2, [r3, #20]
 80014b0:	23a0      	movs	r3, #160	; 0xa0
 80014b2:	05db      	lsls	r3, r3, #23
 80014b4:	2140      	movs	r1, #64	; 0x40
 80014b6:	438a      	bics	r2, r1
 80014b8:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 7);	// reset dc
 80014ba:	23a0      	movs	r3, #160	; 0xa0
 80014bc:	05db      	lsls	r3, r3, #23
 80014be:	695a      	ldr	r2, [r3, #20]
 80014c0:	23a0      	movs	r3, #160	; 0xa0
 80014c2:	05db      	lsls	r3, r3, #23
 80014c4:	2180      	movs	r1, #128	; 0x80
 80014c6:	438a      	bics	r2, r1
 80014c8:	615a      	str	r2, [r3, #20]
						USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 80014ca:	2075      	movs	r0, #117	; 0x75
 80014cc:	f7ff ff3c 	bl	8001348 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 80014d0:	2000      	movs	r0, #0
 80014d2:	f7ff ff39 	bl	8001348 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 80014d6:	207f      	movs	r0, #127	; 0x7f
 80014d8:	f7ff ff36 	bl	8001348 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 80014dc:	2015      	movs	r0, #21
 80014de:	f7ff ff33 	bl	8001348 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 80014e2:	2000      	movs	r0, #0
 80014e4:	f7ff ff30 	bl	8001348 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 80014e8:	207f      	movs	r0, #127	; 0x7f
 80014ea:	f7ff ff2d 	bl	8001348 <USART_AS_SPI_sendCMD>
					GPIOA->ODR &= ~(1 << 6);	//reset cs
 80014ee:	23a0      	movs	r3, #160	; 0xa0
 80014f0:	05db      	lsls	r3, r3, #23
 80014f2:	695a      	ldr	r2, [r3, #20]
 80014f4:	23a0      	movs	r3, #160	; 0xa0
 80014f6:	05db      	lsls	r3, r3, #23
 80014f8:	2140      	movs	r1, #64	; 0x40
 80014fa:	438a      	bics	r2, r1
 80014fc:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 7;	// set dc
 80014fe:	23a0      	movs	r3, #160	; 0xa0
 8001500:	05db      	lsls	r3, r3, #23
 8001502:	695a      	ldr	r2, [r3, #20]
 8001504:	23a0      	movs	r3, #160	; 0xa0
 8001506:	05db      	lsls	r3, r3, #23
 8001508:	2180      	movs	r1, #128	; 0x80
 800150a:	430a      	orrs	r2, r1
 800150c:	615a      	str	r2, [r3, #20]
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 800150e:	1dbb      	adds	r3, r7, #6
 8001510:	2200      	movs	r2, #0
 8001512:	801a      	strh	r2, [r3, #0]
 8001514:	e00d      	b.n	8001532 <weoClear+0x8e>
						while(!(USART3->ISR & USART_ISR_TXE)){};
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <weoClear+0xc0>)
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	2280      	movs	r2, #128	; 0x80
 800151e:	4013      	ands	r3, r2
 8001520:	d0fa      	beq.n	8001518 <weoClear+0x74>
						USART3->TDR = (uint8_t) 0x00;
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <weoClear+0xc0>)
 8001524:	2200      	movs	r2, #0
 8001526:	629a      	str	r2, [r3, #40]	; 0x28
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 8001528:	1dbb      	adds	r3, r7, #6
 800152a:	881a      	ldrh	r2, [r3, #0]
 800152c:	1dbb      	adds	r3, r7, #6
 800152e:	3201      	adds	r2, #1
 8001530:	801a      	strh	r2, [r3, #0]
 8001532:	1dbb      	adds	r3, r7, #6
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	4a0c      	ldr	r2, [pc, #48]	; (8001568 <weoClear+0xc4>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d9ec      	bls.n	8001516 <weoClear+0x72>
					}
					GPIOA->ODR &= ~(1 << 7);	//reset dc
 800153c:	23a0      	movs	r3, #160	; 0xa0
 800153e:	05db      	lsls	r3, r3, #23
 8001540:	695a      	ldr	r2, [r3, #20]
 8001542:	23a0      	movs	r3, #160	; 0xa0
 8001544:	05db      	lsls	r3, r3, #23
 8001546:	2180      	movs	r1, #128	; 0x80
 8001548:	438a      	bics	r2, r1
 800154a:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 800154c:	23a0      	movs	r3, #160	; 0xa0
 800154e:	05db      	lsls	r3, r3, #23
 8001550:	695a      	ldr	r2, [r3, #20]
 8001552:	23a0      	movs	r3, #160	; 0xa0
 8001554:	05db      	lsls	r3, r3, #23
 8001556:	2140      	movs	r1, #64	; 0x40
 8001558:	430a      	orrs	r2, r1
 800155a:	615a      	str	r2, [r3, #20]
	}
 800155c:	46c0      	nop			; (mov r8, r8)
 800155e:	46bd      	mov	sp, r7
 8001560:	b002      	add	sp, #8
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40004800 	.word	0x40004800
 8001568:	00002001 	.word	0x00002001

0800156c <weoDrawRectangleFilled>:
//========================================================================================================================
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char contrast,
				uint8_t MEM_Buffer[]) {
 800156c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	0005      	movs	r5, r0
 8001574:	000c      	movs	r4, r1
 8001576:	0010      	movs	r0, r2
 8001578:	0019      	movs	r1, r3
 800157a:	1dfb      	adds	r3, r7, #7
 800157c:	1c2a      	adds	r2, r5, #0
 800157e:	701a      	strb	r2, [r3, #0]
 8001580:	1dbb      	adds	r3, r7, #6
 8001582:	1c22      	adds	r2, r4, #0
 8001584:	701a      	strb	r2, [r3, #0]
 8001586:	1d7b      	adds	r3, r7, #5
 8001588:	1c02      	adds	r2, r0, #0
 800158a:	701a      	strb	r2, [r3, #0]
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	1c0a      	adds	r2, r1, #0
 8001590:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 8001592:	240e      	movs	r4, #14
 8001594:	193b      	adds	r3, r7, r4
 8001596:	2200      	movs	r2, #0
 8001598:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 800159a:	1dfb      	adds	r3, r7, #7
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	b25b      	sxtb	r3, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	da00      	bge.n	80015a6 <weoDrawRectangleFilled+0x3a>
 80015a4:	e0c2      	b.n	800172c <weoDrawRectangleFilled+0x1c0>
 80015a6:	1dbb      	adds	r3, r7, #6
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	b25b      	sxtb	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	da00      	bge.n	80015b2 <weoDrawRectangleFilled+0x46>
 80015b0:	e0bc      	b.n	800172c <weoDrawRectangleFilled+0x1c0>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 80015b2:	1d7b      	adds	r3, r7, #5
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b25b      	sxtb	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	da00      	bge.n	80015be <weoDrawRectangleFilled+0x52>
 80015bc:	e0b6      	b.n	800172c <weoDrawRectangleFilled+0x1c0>
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	b25b      	sxtb	r3, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	da00      	bge.n	80015ca <weoDrawRectangleFilled+0x5e>
 80015c8:	e0b0      	b.n	800172c <weoDrawRectangleFilled+0x1c0>
				return;
			}

			start_x_New=start_x;
 80015ca:	250d      	movs	r5, #13
 80015cc:	197b      	adds	r3, r7, r5
 80015ce:	1dfa      	adds	r2, r7, #7
 80015d0:	7812      	ldrb	r2, [r2, #0]
 80015d2:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 80015d4:	260c      	movs	r6, #12
 80015d6:	19bb      	adds	r3, r7, r6
 80015d8:	1d3a      	adds	r2, r7, #4
 80015da:	7812      	ldrb	r2, [r2, #0]
 80015dc:	217f      	movs	r1, #127	; 0x7f
 80015de:	1a8a      	subs	r2, r1, r2
 80015e0:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 80015e2:	230b      	movs	r3, #11
 80015e4:	18fb      	adds	r3, r7, r3
 80015e6:	1d7a      	adds	r2, r7, #5
 80015e8:	7812      	ldrb	r2, [r2, #0]
 80015ea:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 80015ec:	220a      	movs	r2, #10
 80015ee:	18bb      	adds	r3, r7, r2
 80015f0:	1dba      	adds	r2, r7, #6
 80015f2:	7812      	ldrb	r2, [r2, #0]
 80015f4:	217f      	movs	r1, #127	; 0x7f
 80015f6:	1a8a      	subs	r2, r1, r2
 80015f8:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80015fa:	23a0      	movs	r3, #160	; 0xa0
 80015fc:	05db      	lsls	r3, r3, #23
 80015fe:	695a      	ldr	r2, [r3, #20]
 8001600:	23a0      	movs	r3, #160	; 0xa0
 8001602:	05db      	lsls	r3, r3, #23
 8001604:	2140      	movs	r1, #64	; 0x40
 8001606:	438a      	bics	r2, r1
 8001608:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 800160a:	23a0      	movs	r3, #160	; 0xa0
 800160c:	05db      	lsls	r3, r3, #23
 800160e:	695a      	ldr	r2, [r3, #20]
 8001610:	23a0      	movs	r3, #160	; 0xa0
 8001612:	05db      	lsls	r3, r3, #23
 8001614:	2180      	movs	r1, #128	; 0x80
 8001616:	438a      	bics	r2, r1
 8001618:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 800161a:	2075      	movs	r0, #117	; 0x75
 800161c:	f7ff fe94 	bl	8001348 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New);
 8001620:	197b      	adds	r3, r7, r5
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	0018      	movs	r0, r3
 8001626:	f7ff fe8f 	bl	8001348 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New);
 800162a:	230b      	movs	r3, #11
 800162c:	18fb      	adds	r3, r7, r3
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	0018      	movs	r0, r3
 8001632:	f7ff fe89 	bl	8001348 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8001636:	2015      	movs	r0, #21
 8001638:	f7ff fe86 	bl	8001348 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 800163c:	19bb      	adds	r3, r7, r6
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	085b      	lsrs	r3, r3, #1
 8001642:	b2db      	uxtb	r3, r3
 8001644:	0018      	movs	r0, r3
 8001646:	f7ff fe7f 	bl	8001348 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 800164a:	220a      	movs	r2, #10
 800164c:	18bb      	adds	r3, r7, r2
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	085b      	lsrs	r3, r3, #1
 8001652:	b2db      	uxtb	r3, r3
 8001654:	0018      	movs	r0, r3
 8001656:	f7ff fe77 	bl	8001348 <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 800165a:	23a0      	movs	r3, #160	; 0xa0
 800165c:	05db      	lsls	r3, r3, #23
 800165e:	695a      	ldr	r2, [r3, #20]
 8001660:	23a0      	movs	r3, #160	; 0xa0
 8001662:	05db      	lsls	r3, r3, #23
 8001664:	2180      	movs	r1, #128	; 0x80
 8001666:	430a      	orrs	r2, r1
 8001668:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 800166a:	23a0      	movs	r3, #160	; 0xa0
 800166c:	05db      	lsls	r3, r3, #23
 800166e:	695a      	ldr	r2, [r3, #20]
 8001670:	23a0      	movs	r3, #160	; 0xa0
 8001672:	05db      	lsls	r3, r3, #23
 8001674:	2140      	movs	r1, #64	; 0x40
 8001676:	430a      	orrs	r2, r1
 8001678:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 800167a:	23a0      	movs	r3, #160	; 0xa0
 800167c:	05db      	lsls	r3, r3, #23
 800167e:	695a      	ldr	r2, [r3, #20]
 8001680:	23a0      	movs	r3, #160	; 0xa0
 8001682:	05db      	lsls	r3, r3, #23
 8001684:	2140      	movs	r1, #64	; 0x40
 8001686:	438a      	bics	r2, r1
 8001688:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 800168a:	23a0      	movs	r3, #160	; 0xa0
 800168c:	05db      	lsls	r3, r3, #23
 800168e:	695a      	ldr	r2, [r3, #20]
 8001690:	23a0      	movs	r3, #160	; 0xa0
 8001692:	05db      	lsls	r3, r3, #23
 8001694:	2180      	movs	r1, #128	; 0x80
 8001696:	430a      	orrs	r2, r1
 8001698:	615a      	str	r2, [r3, #20]

			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1)+1);i++) {
 800169a:	193b      	adds	r3, r7, r4
 800169c:	2200      	movs	r2, #0
 800169e:	801a      	strh	r2, [r3, #0]
 80016a0:	e012      	b.n	80016c8 <weoDrawRectangleFilled+0x15c>
//			for (i = 0; i < len;i++) {
				while(!(USART3->ISR & USART_ISR_TXE)){};
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	4b23      	ldr	r3, [pc, #140]	; (8001734 <weoDrawRectangleFilled+0x1c8>)
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	2280      	movs	r2, #128	; 0x80
 80016aa:	4013      	ands	r3, r2
 80016ac:	d0fa      	beq.n	80016a4 <weoDrawRectangleFilled+0x138>
				USART3->TDR =MEM_Buffer[i];
 80016ae:	210e      	movs	r1, #14
 80016b0:	187b      	adds	r3, r7, r1
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016b6:	18d3      	adds	r3, r2, r3
 80016b8:	781a      	ldrb	r2, [r3, #0]
 80016ba:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <weoDrawRectangleFilled+0x1c8>)
 80016bc:	629a      	str	r2, [r3, #40]	; 0x28
			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1)+1);i++) {
 80016be:	187b      	adds	r3, r7, r1
 80016c0:	881a      	ldrh	r2, [r3, #0]
 80016c2:	187b      	adds	r3, r7, r1
 80016c4:	3201      	adds	r2, #1
 80016c6:	801a      	strh	r2, [r3, #0]
 80016c8:	230b      	movs	r3, #11
 80016ca:	18fb      	adds	r3, r7, r3
 80016cc:	781a      	ldrb	r2, [r3, #0]
 80016ce:	230d      	movs	r3, #13
 80016d0:	18fb      	adds	r3, r7, r3
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	3301      	adds	r3, #1
 80016d8:	220a      	movs	r2, #10
 80016da:	18ba      	adds	r2, r7, r2
 80016dc:	7812      	ldrb	r2, [r2, #0]
 80016de:	0852      	lsrs	r2, r2, #1
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	0011      	movs	r1, r2
 80016e4:	220c      	movs	r2, #12
 80016e6:	18ba      	adds	r2, r7, r2
 80016e8:	7812      	ldrb	r2, [r2, #0]
 80016ea:	0852      	lsrs	r2, r2, #1
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	1a8a      	subs	r2, r1, r2
 80016f0:	3201      	adds	r2, #1
 80016f2:	435a      	muls	r2, r3
 80016f4:	230e      	movs	r3, #14
 80016f6:	18fb      	adds	r3, r7, r3
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	dad1      	bge.n	80016a2 <weoDrawRectangleFilled+0x136>
			}
			while(!(USART3->ISR & USART_ISR_TXE)){};
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <weoDrawRectangleFilled+0x1c8>)
 8001702:	69db      	ldr	r3, [r3, #28]
 8001704:	2280      	movs	r2, #128	; 0x80
 8001706:	4013      	ands	r3, r2
 8001708:	d0fa      	beq.n	8001700 <weoDrawRectangleFilled+0x194>
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 800170a:	23a0      	movs	r3, #160	; 0xa0
 800170c:	05db      	lsls	r3, r3, #23
 800170e:	695a      	ldr	r2, [r3, #20]
 8001710:	23a0      	movs	r3, #160	; 0xa0
 8001712:	05db      	lsls	r3, r3, #23
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	438a      	bics	r2, r1
 8001718:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 800171a:	23a0      	movs	r3, #160	; 0xa0
 800171c:	05db      	lsls	r3, r3, #23
 800171e:	695a      	ldr	r2, [r3, #20]
 8001720:	23a0      	movs	r3, #160	; 0xa0
 8001722:	05db      	lsls	r3, r3, #23
 8001724:	2140      	movs	r1, #64	; 0x40
 8001726:	430a      	orrs	r2, r1
 8001728:	615a      	str	r2, [r3, #20]
 800172a:	e000      	b.n	800172e <weoDrawRectangleFilled+0x1c2>
				return;
 800172c:	46c0      	nop			; (mov r8, r8)
		}
 800172e:	46bd      	mov	sp, r7
 8001730:	b005      	add	sp, #20
 8001732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001734:	40004800 	.word	0x40004800

08001738 <weoDrawRectangleInit>:
//========================================================================================================================
	void weoDrawRectangleInit(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y) {
 8001738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	0005      	movs	r5, r0
 8001740:	000c      	movs	r4, r1
 8001742:	0010      	movs	r0, r2
 8001744:	0019      	movs	r1, r3
 8001746:	1dfb      	adds	r3, r7, #7
 8001748:	1c2a      	adds	r2, r5, #0
 800174a:	701a      	strb	r2, [r3, #0]
 800174c:	1dbb      	adds	r3, r7, #6
 800174e:	1c22      	adds	r2, r4, #0
 8001750:	701a      	strb	r2, [r3, #0]
 8001752:	1d7b      	adds	r3, r7, #5
 8001754:	1c02      	adds	r2, r0, #0
 8001756:	701a      	strb	r2, [r3, #0]
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	1c0a      	adds	r2, r1, #0
 800175c:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 800175e:	230e      	movs	r3, #14
 8001760:	18fb      	adds	r3, r7, r3
 8001762:	2200      	movs	r2, #0
 8001764:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 8001766:	1dfb      	adds	r3, r7, #7
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	b25b      	sxtb	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	db66      	blt.n	800183e <weoDrawRectangleInit+0x106>
 8001770:	1dbb      	adds	r3, r7, #6
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	b25b      	sxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	db61      	blt.n	800183e <weoDrawRectangleInit+0x106>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 800177a:	1d7b      	adds	r3, r7, #5
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	b25b      	sxtb	r3, r3
 8001780:	2b00      	cmp	r3, #0
 8001782:	db5c      	blt.n	800183e <weoDrawRectangleInit+0x106>
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	b25b      	sxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	db57      	blt.n	800183e <weoDrawRectangleInit+0x106>
				return;
			}
			start_x_New=start_x;
 800178e:	240d      	movs	r4, #13
 8001790:	193b      	adds	r3, r7, r4
 8001792:	1dfa      	adds	r2, r7, #7
 8001794:	7812      	ldrb	r2, [r2, #0]
 8001796:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 8001798:	250c      	movs	r5, #12
 800179a:	197b      	adds	r3, r7, r5
 800179c:	1d3a      	adds	r2, r7, #4
 800179e:	7812      	ldrb	r2, [r2, #0]
 80017a0:	217f      	movs	r1, #127	; 0x7f
 80017a2:	1a8a      	subs	r2, r1, r2
 80017a4:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 80017a6:	260b      	movs	r6, #11
 80017a8:	19bb      	adds	r3, r7, r6
 80017aa:	1d7a      	adds	r2, r7, #5
 80017ac:	7812      	ldrb	r2, [r2, #0]
 80017ae:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 80017b0:	230a      	movs	r3, #10
 80017b2:	18fb      	adds	r3, r7, r3
 80017b4:	1dba      	adds	r2, r7, #6
 80017b6:	7812      	ldrb	r2, [r2, #0]
 80017b8:	217f      	movs	r1, #127	; 0x7f
 80017ba:	1a8a      	subs	r2, r1, r2
 80017bc:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80017be:	23a0      	movs	r3, #160	; 0xa0
 80017c0:	05db      	lsls	r3, r3, #23
 80017c2:	695a      	ldr	r2, [r3, #20]
 80017c4:	23a0      	movs	r3, #160	; 0xa0
 80017c6:	05db      	lsls	r3, r3, #23
 80017c8:	2140      	movs	r1, #64	; 0x40
 80017ca:	438a      	bics	r2, r1
 80017cc:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 80017ce:	23a0      	movs	r3, #160	; 0xa0
 80017d0:	05db      	lsls	r3, r3, #23
 80017d2:	695a      	ldr	r2, [r3, #20]
 80017d4:	23a0      	movs	r3, #160	; 0xa0
 80017d6:	05db      	lsls	r3, r3, #23
 80017d8:	2180      	movs	r1, #128	; 0x80
 80017da:	438a      	bics	r2, r1
 80017dc:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 80017de:	2075      	movs	r0, #117	; 0x75
 80017e0:	f7ff fdb2 	bl	8001348 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New);
 80017e4:	193b      	adds	r3, r7, r4
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	0018      	movs	r0, r3
 80017ea:	f7ff fdad 	bl	8001348 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New);
 80017ee:	19bb      	adds	r3, r7, r6
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	0018      	movs	r0, r3
 80017f4:	f7ff fda8 	bl	8001348 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 80017f8:	2015      	movs	r0, #21
 80017fa:	f7ff fda5 	bl	8001348 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 80017fe:	197b      	adds	r3, r7, r5
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	085b      	lsrs	r3, r3, #1
 8001804:	b2db      	uxtb	r3, r3
 8001806:	0018      	movs	r0, r3
 8001808:	f7ff fd9e 	bl	8001348 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 800180c:	230a      	movs	r3, #10
 800180e:	18fb      	adds	r3, r7, r3
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	085b      	lsrs	r3, r3, #1
 8001814:	b2db      	uxtb	r3, r3
 8001816:	0018      	movs	r0, r3
 8001818:	f7ff fd96 	bl	8001348 <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 800181c:	23a0      	movs	r3, #160	; 0xa0
 800181e:	05db      	lsls	r3, r3, #23
 8001820:	695a      	ldr	r2, [r3, #20]
 8001822:	23a0      	movs	r3, #160	; 0xa0
 8001824:	05db      	lsls	r3, r3, #23
 8001826:	2180      	movs	r1, #128	; 0x80
 8001828:	430a      	orrs	r2, r1
 800182a:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 800182c:	23a0      	movs	r3, #160	; 0xa0
 800182e:	05db      	lsls	r3, r3, #23
 8001830:	695a      	ldr	r2, [r3, #20]
 8001832:	23a0      	movs	r3, #160	; 0xa0
 8001834:	05db      	lsls	r3, r3, #23
 8001836:	2140      	movs	r1, #64	; 0x40
 8001838:	430a      	orrs	r2, r1
 800183a:	615a      	str	r2, [r3, #20]
 800183c:	e000      	b.n	8001840 <weoDrawRectangleInit+0x108>
				return;
 800183e:	46c0      	nop			; (mov r8, r8)
		}
 8001840:	46bd      	mov	sp, r7
 8001842:	b005      	add	sp, #20
 8001844:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001848 <I2C_SOUND_ChangePage>:
//		LL_GPIO_ResetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
//		LL_GPIO_SetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
	}
	void I2C_SOUND_ChangePage(uint8_t pageNum) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af02      	add	r7, sp, #8
 800184e:	0002      	movs	r2, r0
 8001850:	1dfb      	adds	r3, r7, #7
 8001852:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { 0x00, pageNum };
 8001854:	210c      	movs	r1, #12
 8001856:	187b      	adds	r3, r7, r1
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
 800185c:	187b      	adds	r3, r7, r1
 800185e:	1dfa      	adds	r2, r7, #7
 8001860:	7812      	ldrb	r2, [r2, #0]
 8001862:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);
 8001864:	187a      	adds	r2, r7, r1
 8001866:	4806      	ldr	r0, [pc, #24]	; (8001880 <I2C_SOUND_ChangePage+0x38>)
 8001868:	23fa      	movs	r3, #250	; 0xfa
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2302      	movs	r3, #2
 8001870:	2130      	movs	r1, #48	; 0x30
 8001872:	f004 f86d 	bl	8005950 <HAL_I2C_Master_Transmit>
	}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	46bd      	mov	sp, r7
 800187a:	b004      	add	sp, #16
 800187c:	bd80      	pop	{r7, pc}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	2000008c 	.word	0x2000008c

08001884 <WriteReg_I2C_SOUND>:
	void WriteReg_I2C_SOUND(uint8_t reg, uint8_t data) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af02      	add	r7, sp, #8
 800188a:	0002      	movs	r2, r0
 800188c:	1dfb      	adds	r3, r7, #7
 800188e:	701a      	strb	r2, [r3, #0]
 8001890:	1dbb      	adds	r3, r7, #6
 8001892:	1c0a      	adds	r2, r1, #0
 8001894:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 8001896:	210c      	movs	r1, #12
 8001898:	187b      	adds	r3, r7, r1
 800189a:	1dfa      	adds	r2, r7, #7
 800189c:	7812      	ldrb	r2, [r2, #0]
 800189e:	701a      	strb	r2, [r3, #0]
 80018a0:	187b      	adds	r3, r7, r1
 80018a2:	1dba      	adds	r2, r7, #6
 80018a4:	7812      	ldrb	r2, [r2, #0]
 80018a6:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);	//(uint8_t*)&
 80018a8:	187a      	adds	r2, r7, r1
 80018aa:	4806      	ldr	r0, [pc, #24]	; (80018c4 <WriteReg_I2C_SOUND+0x40>)
 80018ac:	23fa      	movs	r3, #250	; 0xfa
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	2302      	movs	r3, #2
 80018b4:	2130      	movs	r1, #48	; 0x30
 80018b6:	f004 f84b 	bl	8005950 <HAL_I2C_Master_Transmit>
	}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	46bd      	mov	sp, r7
 80018be:	b004      	add	sp, #16
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	2000008c 	.word	0x2000008c

080018c8 <soundSetup>:
	void soundSetup(void) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
		I2C_SOUND_ChangePage(0x00);
 80018cc:	2000      	movs	r0, #0
 80018ce:	f7ff ffbb 	bl	8001848 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x01);	//Assert Software reset (P0, R1, D0=1)
 80018d2:	2101      	movs	r1, #1
 80018d4:	2001      	movs	r0, #1
 80018d6:	f7ff ffd5 	bl	8001884 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 80018da:	2001      	movs	r0, #1
 80018dc:	f7ff ffb4 	bl	8001848 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x02, 0x00);	//LDO output programmed as 1.8V and Level shifters powered up. (P1, R2, D5-D4=00, D3=0)
 80018e0:	2100      	movs	r1, #0
 80018e2:	2002      	movs	r0, #2
 80018e4:	f7ff ffce 	bl	8001884 <WriteReg_I2C_SOUND>
		HAL_Delay(15);
 80018e8:	200f      	movs	r0, #15
 80018ea:	f002 ff95 	bl	8004818 <HAL_Delay>
		I2C_SOUND_ChangePage(0x00);
 80018ee:	2000      	movs	r0, #0
 80018f0:	f7ff ffaa 	bl	8001848 <I2C_SOUND_ChangePage>
	WriteReg_I2C_SOUND(0x04,0x03);//PLL_clkin = MCLK, codec_clkin = PLL_CLK, MCLK should be 11.2896MHz
 80018f4:	2103      	movs	r1, #3
 80018f6:	2004      	movs	r0, #4
 80018f8:	f7ff ffc4 	bl	8001884 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x05,0x91);//Power up PLL, set P=1, R=1
 80018fc:	2191      	movs	r1, #145	; 0x91
 80018fe:	2005      	movs	r0, #5
 8001900:	f7ff ffc0 	bl	8001884 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x06,0x04);//Set J = 4
 8001904:	2104      	movs	r1, #4
 8001906:	2006      	movs	r0, #6
 8001908:	f7ff ffbc 	bl	8001884 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x07,0x00);//SET D=0000
 800190c:	2100      	movs	r1, #0
 800190e:	2007      	movs	r0, #7
 8001910:	f7ff ffb8 	bl	8001884 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x08,0x00);//SET D=0000
 8001914:	2100      	movs	r1, #0
 8001916:	2008      	movs	r0, #8
 8001918:	f7ff ffb4 	bl	8001884 <WriteReg_I2C_SOUND>
	HAL_Delay(15);
 800191c:	200f      	movs	r0, #15
 800191e:	f002 ff7b 	bl	8004818 <HAL_Delay>
	WriteReg_I2C_SOUND(0x0B,0x84);//DAC NDAC Powered up, set NDAC = 4
 8001922:	2184      	movs	r1, #132	; 0x84
 8001924:	200b      	movs	r0, #11
 8001926:	f7ff ffad 	bl	8001884 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0C,0x82);//DAC MDAC Powered up, set MDAC = 2
 800192a:	2182      	movs	r1, #130	; 0x82
 800192c:	200c      	movs	r0, #12
 800192e:	f7ff ffa9 	bl	8001884 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0D,0x00);//DAC OSR(9:0)-> DOSR=128
 8001932:	2100      	movs	r1, #0
 8001934:	200d      	movs	r0, #13
 8001936:	f7ff ffa5 	bl	8001884 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0E,0x80);//DAC OSR(9:0)
 800193a:	2180      	movs	r1, #128	; 0x80
 800193c:	200e      	movs	r0, #14
 800193e:	f7ff ffa1 	bl	8001884 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x1B, 0x00);	//Codec Interface control Word length = 16bits, BCLK&WCLK inputs, I2S mode. (P0, R27, D7-D6=00, D5-D4=00, D3-D2=00)
 8001942:	2100      	movs	r1, #0
 8001944:	201b      	movs	r0, #27
 8001946:	f7ff ff9d 	bl	8001884 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x1C,0x00);//Data slot offset
 800194a:	2100      	movs	r1, #0
 800194c:	201c      	movs	r0, #28
 800194e:	f7ff ff99 	bl	8001884 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x3c,0x02);//Dac Instruction programming PRB #2 for Mono routing. Type interpolation (x8) and 3 programmable	Biquads. (P0, R60, D4-D0=0010)
 8001952:	2102      	movs	r1, #2
 8001954:	203c      	movs	r0, #60	; 0x3c
 8001956:	f7ff ff95 	bl	8001884 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 800195a:	2001      	movs	r0, #1
 800195c:	f7ff ff74 	bl	8001848 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x10);	//Master Reference Powered on (P1, R1, D4=1)
 8001960:	2110      	movs	r1, #16
 8001962:	2001      	movs	r0, #1
 8001964:	f7ff ff8e 	bl	8001884 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x0A, 0x00);	//Output common mode for DAC set to 0.9V (default) (P1, R10)
 8001968:	2100      	movs	r1, #0
 800196a:	200a      	movs	r0, #10
 800196c:	f7ff ff8a 	bl	8001884 <WriteReg_I2C_SOUND>
		////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x0C, 0x00);	// No analog routing to headphone//0x0c,0x15 by SB
 8001970:	2100      	movs	r1, #0
 8001972:	200c      	movs	r0, #12
 8001974:	f7ff ff86 	bl	8001884 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x16, 0x00);	// Headphone volume=0//0x16,0x75 by SB
 8001978:	2100      	movs	r1, #0
 800197a:	2016      	movs	r0, #22
 800197c:	f7ff ff82 	bl	8001884 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x18, 0x00);	//No need to enable Mixer M and Mixer P, AINL Voulme, 0dB Gain 0x18,0x75 by SB
 8001980:	2100      	movs	r1, #0
 8001982:	2018      	movs	r0, #24
 8001984:	f7ff ff7e 	bl	8001884 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x19, 0x00);	//No need to enable Mixer M and Mixer P, AINR Voulme, 0dB Gain 0x19,0x75 by SB
 8001988:	2100      	movs	r1, #0
 800198a:	2019      	movs	r0, #25
 800198c:	f7ff ff7a 	bl	8001884 <WriteReg_I2C_SOUND>
		//////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x09, 0x00);	//AINL,AINR are powered down
 8001990:	2100      	movs	r1, #0
 8001992:	2009      	movs	r0, #9
 8001994:	f7ff ff76 	bl	8001884 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 8001998:	2100      	movs	r1, #0
 800199a:	2010      	movs	r0, #16
 800199c:	f7ff ff72 	bl	8001884 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x00);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000)
 80019a0:	2100      	movs	r1, #0
 80019a2:	202e      	movs	r0, #46	; 0x2e
 80019a4:	f7ff ff6e 	bl	8001884 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x30, 0x10);	//SPK driver Gain=6.0dB (P1, R48, D6-D4=001)
 80019a8:	2110      	movs	r1, #16
 80019aa:	2030      	movs	r0, #48	; 0x30
 80019ac:	f7ff ff6a 	bl	8001884 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2D, 0x02);	//SPK powered up (P1, R45, D1=1)
 80019b0:	2102      	movs	r1, #2
 80019b2:	202d      	movs	r0, #45	; 0x2d
 80019b4:	f7ff ff66 	bl	8001884 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 80019b8:	2000      	movs	r0, #0
 80019ba:	f7ff ff45 	bl	8001848 <I2C_SOUND_ChangePage>
		//////////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
 80019be:	2190      	movs	r1, #144	; 0x90
 80019c0:	203f      	movs	r0, #63	; 0x3f
 80019c2:	f7ff ff5f 	bl	8001884 <WriteReg_I2C_SOUND>
		// 1<<7|1<<4|2 by SB
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000) cnDacValueOn by SB
 80019c6:	2100      	movs	r1, #0
 80019c8:	2041      	movs	r0, #65	; 0x41
 80019ca:	f7ff ff5b 	bl	8001884 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1) 1<<4 by SB
 80019ce:	2104      	movs	r1, #4
 80019d0:	2040      	movs	r0, #64	; 0x40
 80019d2:	f7ff ff57 	bl	8001884 <WriteReg_I2C_SOUND>
	}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <answer2CPU>:
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 80019e4:	230f      	movs	r3, #15
 80019e6:	18fb      	adds	r3, r7, r3
 80019e8:	22ff      	movs	r2, #255	; 0xff
 80019ea:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 80019ec:	230d      	movs	r3, #13
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		isReceiverDisabled=1;
 80019f4:	4bd7      	ldr	r3, [pc, #860]	; (8001d54 <answer2CPU+0x378>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	701a      	strb	r2, [r3, #0]

		cmd2Execute=0;
 80019fa:	4bd7      	ldr	r3, [pc, #860]	; (8001d58 <answer2CPU+0x37c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]
		cmd[0]&=~0x100;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	781a      	ldrb	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	701a      	strb	r2, [r3, #0]
		if ((cmd[0] == 0x11)||(cmd[0] == 0x12)||(cmd[0] == 0x13)||(cmd[0] == 0x14)||(cmd[0] == 0x15)) {GPIOC->ODR &= ~(1 << 6);}//reset BF
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b11      	cmp	r3, #17
 8001a0e:	d00f      	beq.n	8001a30 <answer2CPU+0x54>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b12      	cmp	r3, #18
 8001a16:	d00b      	beq.n	8001a30 <answer2CPU+0x54>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b13      	cmp	r3, #19
 8001a1e:	d007      	beq.n	8001a30 <answer2CPU+0x54>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b14      	cmp	r3, #20
 8001a26:	d003      	beq.n	8001a30 <answer2CPU+0x54>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b15      	cmp	r3, #21
 8001a2e:	d105      	bne.n	8001a3c <answer2CPU+0x60>
 8001a30:	4bca      	ldr	r3, [pc, #808]	; (8001d5c <answer2CPU+0x380>)
 8001a32:	695a      	ldr	r2, [r3, #20]
 8001a34:	4bc9      	ldr	r3, [pc, #804]	; (8001d5c <answer2CPU+0x380>)
 8001a36:	2140      	movs	r1, #64	; 0x40
 8001a38:	438a      	bics	r2, r1
 8001a3a:	615a      	str	r2, [r3, #20]
		if (cmd[0] == 0x11) {
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b11      	cmp	r3, #17
 8001a42:	d105      	bne.n	8001a50 <answer2CPU+0x74>
//			GPIOC->ODR &= ~(1 << 6);
			GPIOC->ODR &=~ GPIO_ODR_OD6;
 8001a44:	4bc5      	ldr	r3, [pc, #788]	; (8001d5c <answer2CPU+0x380>)
 8001a46:	695a      	ldr	r2, [r3, #20]
 8001a48:	4bc4      	ldr	r3, [pc, #784]	; (8001d5c <answer2CPU+0x380>)
 8001a4a:	2140      	movs	r1, #64	; 0x40
 8001a4c:	438a      	bics	r2, r1
 8001a4e:	615a      	str	r2, [r3, #20]
		}//reset BF
		ans[0] = cmd[0]|0x80;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2280      	movs	r2, #128	; 0x80
 8001a56:	4252      	negs	r2, r2
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	4bc0      	ldr	r3, [pc, #768]	; (8001d60 <answer2CPU+0x384>)
 8001a60:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b0f      	cmp	r3, #15
 8001a68:	d800      	bhi.n	8001a6c <answer2CPU+0x90>
 8001a6a:	e15e      	b.n	8001d2a <answer2CPU+0x34e>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b15      	cmp	r3, #21
 8001a72:	d900      	bls.n	8001a76 <answer2CPU+0x9a>
 8001a74:	e159      	b.n	8001d2a <answer2CPU+0x34e>
//		if (cmd[0] != 0x10) {
//			GPIOC->ODR &= ~(1 << 6);
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 8001a76:	23a0      	movs	r3, #160	; 0xa0
 8001a78:	05db      	lsls	r3, r3, #23
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	2210      	movs	r2, #16
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d106      	bne.n	8001a90 <answer2CPU+0xb4>
					keyboard &= 0b11111110;
 8001a82:	220f      	movs	r2, #15
 8001a84:	18bb      	adds	r3, r7, r2
 8001a86:	18ba      	adds	r2, r7, r2
 8001a88:	7812      	ldrb	r2, [r2, #0]
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	438a      	bics	r2, r1
 8001a8e:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 8001a90:	23a0      	movs	r3, #160	; 0xa0
 8001a92:	05db      	lsls	r3, r3, #23
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	2202      	movs	r2, #2
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d106      	bne.n	8001aaa <answer2CPU+0xce>
					keyboard &= 0b11111101;
 8001a9c:	220f      	movs	r2, #15
 8001a9e:	18bb      	adds	r3, r7, r2
 8001aa0:	18ba      	adds	r2, r7, r2
 8001aa2:	7812      	ldrb	r2, [r2, #0]
 8001aa4:	2102      	movs	r1, #2
 8001aa6:	438a      	bics	r2, r1
 8001aa8:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 8001aaa:	23a0      	movs	r3, #160	; 0xa0
 8001aac:	05db      	lsls	r3, r3, #23
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d106      	bne.n	8001ac4 <answer2CPU+0xe8>
					keyboard &= 0b11111011;
 8001ab6:	220f      	movs	r2, #15
 8001ab8:	18bb      	adds	r3, r7, r2
 8001aba:	18ba      	adds	r2, r7, r2
 8001abc:	7812      	ldrb	r2, [r2, #0]
 8001abe:	2104      	movs	r1, #4
 8001ac0:	438a      	bics	r2, r1
 8001ac2:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 8001ac4:	23a0      	movs	r3, #160	; 0xa0
 8001ac6:	05db      	lsls	r3, r3, #23
 8001ac8:	691a      	ldr	r2, [r3, #16]
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	019b      	lsls	r3, r3, #6
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d106      	bne.n	8001ae0 <answer2CPU+0x104>
					keyboard &= 0b11110111;
 8001ad2:	220f      	movs	r2, #15
 8001ad4:	18bb      	adds	r3, r7, r2
 8001ad6:	18ba      	adds	r2, r7, r2
 8001ad8:	7812      	ldrb	r2, [r2, #0]
 8001ada:	2108      	movs	r1, #8
 8001adc:	438a      	bics	r2, r1
 8001ade:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 8001ae0:	23a0      	movs	r3, #160	; 0xa0
 8001ae2:	05db      	lsls	r3, r3, #23
 8001ae4:	691a      	ldr	r2, [r3, #16]
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	01db      	lsls	r3, r3, #7
 8001aea:	4013      	ands	r3, r2
 8001aec:	d106      	bne.n	8001afc <answer2CPU+0x120>
					keyboard &= 0b11101111;
 8001aee:	220f      	movs	r2, #15
 8001af0:	18bb      	adds	r3, r7, r2
 8001af2:	18ba      	adds	r2, r7, r2
 8001af4:	7812      	ldrb	r2, [r2, #0]
 8001af6:	2110      	movs	r1, #16
 8001af8:	438a      	bics	r2, r1
 8001afa:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 8001afc:	210f      	movs	r1, #15
 8001afe:	187b      	adds	r3, r7, r1
 8001b00:	187a      	adds	r2, r7, r1
 8001b02:	7812      	ldrb	r2, [r2, #0]
 8001b04:	43d2      	mvns	r2, r2
 8001b06:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 8001b08:	200c      	movs	r0, #12
 8001b0a:	183b      	adds	r3, r7, r0
 8001b0c:	2204      	movs	r2, #4
 8001b0e:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001b10:	183b      	adds	r3, r7, r0
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	3b02      	subs	r3, #2
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	4b91      	ldr	r3, [pc, #580]	; (8001d60 <answer2CPU+0x384>)
 8001b1c:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 8001b1e:	187b      	adds	r3, r7, r1
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	4b8e      	ldr	r3, [pc, #568]	; (8001d60 <answer2CPU+0x384>)
 8001b26:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 8001b28:	230e      	movs	r3, #14
 8001b2a:	18fb      	adds	r3, r7, r3
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
 8001b30:	e011      	b.n	8001b56 <answer2CPU+0x17a>
					myCS = myCS + ans[i];
 8001b32:	200e      	movs	r0, #14
 8001b34:	183b      	adds	r3, r7, r0
 8001b36:	781a      	ldrb	r2, [r3, #0]
 8001b38:	4b89      	ldr	r3, [pc, #548]	; (8001d60 <answer2CPU+0x384>)
 8001b3a:	0052      	lsls	r2, r2, #1
 8001b3c:	5ad3      	ldrh	r3, [r2, r3]
 8001b3e:	b2d9      	uxtb	r1, r3
 8001b40:	220d      	movs	r2, #13
 8001b42:	18bb      	adds	r3, r7, r2
 8001b44:	18ba      	adds	r2, r7, r2
 8001b46:	7812      	ldrb	r2, [r2, #0]
 8001b48:	188a      	adds	r2, r1, r2
 8001b4a:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001b4c:	183b      	adds	r3, r7, r0
 8001b4e:	781a      	ldrb	r2, [r3, #0]
 8001b50:	183b      	adds	r3, r7, r0
 8001b52:	3201      	adds	r2, #1
 8001b54:	701a      	strb	r2, [r3, #0]
 8001b56:	200e      	movs	r0, #14
 8001b58:	183b      	adds	r3, r7, r0
 8001b5a:	781a      	ldrb	r2, [r3, #0]
 8001b5c:	230c      	movs	r3, #12
 8001b5e:	18fb      	adds	r3, r7, r3
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	429a      	cmp	r2, r3
 8001b66:	dbe4      	blt.n	8001b32 <answer2CPU+0x156>
				}
				myCS = 0 - myCS;
 8001b68:	210d      	movs	r1, #13
 8001b6a:	187b      	adds	r3, r7, r1
 8001b6c:	187a      	adds	r2, r7, r1
 8001b6e:	7812      	ldrb	r2, [r2, #0]
 8001b70:	4252      	negs	r2, r2
 8001b72:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 8001b74:	187b      	adds	r3, r7, r1
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	4b79      	ldr	r3, [pc, #484]	; (8001d60 <answer2CPU+0x384>)
 8001b7c:	80da      	strh	r2, [r3, #6]
				i=0;
 8001b7e:	183b      	adds	r3, r7, r0
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================

				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001b84:	46c0      	nop			; (mov r8, r8)
 8001b86:	4b77      	ldr	r3, [pc, #476]	; (8001d64 <answer2CPU+0x388>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	2280      	movs	r2, #128	; 0x80
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d0fa      	beq.n	8001b86 <answer2CPU+0x1aa>
				USART2->TDR = ans[0]|0x0100;
 8001b90:	4b73      	ldr	r3, [pc, #460]	; (8001d60 <answer2CPU+0x384>)
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	2280      	movs	r2, #128	; 0x80
 8001b96:	0052      	lsls	r2, r2, #1
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	4b71      	ldr	r3, [pc, #452]	; (8001d64 <answer2CPU+0x388>)
 8001b9e:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001ba0:	230e      	movs	r3, #14
 8001ba2:	18fb      	adds	r3, r7, r3
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	701a      	strb	r2, [r3, #0]
 8001ba8:	e013      	b.n	8001bd2 <answer2CPU+0x1f6>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	4b6d      	ldr	r3, [pc, #436]	; (8001d64 <answer2CPU+0x388>)
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	2280      	movs	r2, #128	; 0x80
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d0fa      	beq.n	8001bac <answer2CPU+0x1d0>
				    USART2->TDR = (uint8_t)ans[i];
 8001bb6:	210e      	movs	r1, #14
 8001bb8:	187b      	adds	r3, r7, r1
 8001bba:	781a      	ldrb	r2, [r3, #0]
 8001bbc:	4b68      	ldr	r3, [pc, #416]	; (8001d60 <answer2CPU+0x384>)
 8001bbe:	0052      	lsls	r2, r2, #1
 8001bc0:	5ad3      	ldrh	r3, [r2, r3]
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	4b67      	ldr	r3, [pc, #412]	; (8001d64 <answer2CPU+0x388>)
 8001bc6:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001bc8:	187b      	adds	r3, r7, r1
 8001bca:	781a      	ldrb	r2, [r3, #0]
 8001bcc:	187b      	adds	r3, r7, r1
 8001bce:	3201      	adds	r2, #1
 8001bd0:	701a      	strb	r2, [r3, #0]
 8001bd2:	230e      	movs	r3, #14
 8001bd4:	18fa      	adds	r2, r7, r3
 8001bd6:	230c      	movs	r3, #12
 8001bd8:	18fb      	adds	r3, r7, r3
 8001bda:	7812      	ldrb	r2, [r2, #0]
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d3e3      	bcc.n	8001baa <answer2CPU+0x1ce>
				  }
//				HAL_Delay(1);
				USART2->CR1 |= USART_CR1_RE;
 8001be2:	4b60      	ldr	r3, [pc, #384]	; (8001d64 <answer2CPU+0x388>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	4b5f      	ldr	r3, [pc, #380]	; (8001d64 <answer2CPU+0x388>)
 8001be8:	2104      	movs	r1, #4
 8001bea:	430a      	orrs	r2, r1
 8001bec:	601a      	str	r2, [r3, #0]
				isReceiverDisabled=0;
 8001bee:	4b59      	ldr	r3, [pc, #356]	; (8001d54 <answer2CPU+0x378>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
//				BFEN=1;
//=======================================================================================================================================
				if (cmd[0] == 0x10)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b10      	cmp	r3, #16
 8001bfa:	d102      	bne.n	8001c02 <answer2CPU+0x226>
				{
					cmd2Execute=0x10;
 8001bfc:	4b56      	ldr	r3, [pc, #344]	; (8001d58 <answer2CPU+0x37c>)
 8001bfe:	2210      	movs	r2, #16
 8001c00:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x11) {//Show full screen background;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b11      	cmp	r3, #17
 8001c08:	d109      	bne.n	8001c1e <answer2CPU+0x242>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					picNum = cmd[2];
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	789a      	ldrb	r2, [r3, #2]
 8001c0e:	4b56      	ldr	r3, [pc, #344]	; (8001d68 <answer2CPU+0x38c>)
 8001c10:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 8001c12:	4b51      	ldr	r3, [pc, #324]	; (8001d58 <answer2CPU+0x37c>)
 8001c14:	2211      	movs	r2, #17
 8001c16:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001c18:	4b54      	ldr	r3, [pc, #336]	; (8001d6c <answer2CPU+0x390>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b12      	cmp	r3, #18
 8001c24:	d115      	bne.n	8001c52 <answer2CPU+0x276>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3302      	adds	r3, #2
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	001a      	movs	r2, r3
 8001c2e:	4b50      	ldr	r3, [pc, #320]	; (8001d70 <answer2CPU+0x394>)
 8001c30:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3303      	adds	r3, #3
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	001a      	movs	r2, r3
 8001c3a:	4b4e      	ldr	r3, [pc, #312]	; (8001d74 <answer2CPU+0x398>)
 8001c3c:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	791a      	ldrb	r2, [r3, #4]
 8001c42:	4b49      	ldr	r3, [pc, #292]	; (8001d68 <answer2CPU+0x38c>)
 8001c44:	701a      	strb	r2, [r3, #0]
//					weoShowSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 8001c46:	4b44      	ldr	r3, [pc, #272]	; (8001d58 <answer2CPU+0x37c>)
 8001c48:	2212      	movs	r2, #18
 8001c4a:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001c4c:	4b47      	ldr	r3, [pc, #284]	; (8001d6c <answer2CPU+0x390>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b13      	cmp	r3, #19
 8001c58:	d140      	bne.n	8001cdc <answer2CPU+0x300>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	001a      	movs	r2, r3
 8001c62:	4b43      	ldr	r3, [pc, #268]	; (8001d70 <answer2CPU+0x394>)
 8001c64:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3303      	adds	r3, #3
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	001a      	movs	r2, r3
 8001c6e:	4b41      	ldr	r3, [pc, #260]	; (8001d74 <answer2CPU+0x398>)
 8001c70:	601a      	str	r2, [r3, #0]
					fontInfo= cmd[4];
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	791a      	ldrb	r2, [r3, #4]
 8001c76:	4b40      	ldr	r3, [pc, #256]	; (8001d78 <answer2CPU+0x39c>)
 8001c78:	701a      	strb	r2, [r3, #0]
					color=fontInfo|0xF0;
 8001c7a:	4b3f      	ldr	r3, [pc, #252]	; (8001d78 <answer2CPU+0x39c>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2210      	movs	r2, #16
 8001c80:	4252      	negs	r2, r2
 8001c82:	4313      	orrs	r3, r2
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4b3d      	ldr	r3, [pc, #244]	; (8001d7c <answer2CPU+0x3a0>)
 8001c88:	701a      	strb	r2, [r3, #0]
					strLen = cmd[1] - 0x04;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	3b04      	subs	r3, #4
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	4b3a      	ldr	r3, [pc, #232]	; (8001d80 <answer2CPU+0x3a4>)
 8001c96:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 8001c98:	230e      	movs	r3, #14
 8001c9a:	18fb      	adds	r3, r7, r3
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
 8001ca0:	e00f      	b.n	8001cc2 <answer2CPU+0x2e6>
					dataASCII[i] = cmd[i+5];
 8001ca2:	200e      	movs	r0, #14
 8001ca4:	183b      	adds	r3, r7, r0
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	3305      	adds	r3, #5
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	18d2      	adds	r2, r2, r3
 8001cae:	183b      	adds	r3, r7, r0
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	7811      	ldrb	r1, [r2, #0]
 8001cb4:	4a33      	ldr	r2, [pc, #204]	; (8001d84 <answer2CPU+0x3a8>)
 8001cb6:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 8001cb8:	183b      	adds	r3, r7, r0
 8001cba:	781a      	ldrb	r2, [r3, #0]
 8001cbc:	183b      	adds	r3, r7, r0
 8001cbe:	3201      	adds	r2, #1
 8001cc0:	701a      	strb	r2, [r3, #0]
 8001cc2:	4b2f      	ldr	r3, [pc, #188]	; (8001d80 <answer2CPU+0x3a4>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	220e      	movs	r2, #14
 8001cc8:	18ba      	adds	r2, r7, r2
 8001cca:	7812      	ldrb	r2, [r2, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d3e8      	bcc.n	8001ca2 <answer2CPU+0x2c6>
				}
					cmd2Execute=0x13;
 8001cd0:	4b21      	ldr	r3, [pc, #132]	; (8001d58 <answer2CPU+0x37c>)
 8001cd2:	2213      	movs	r2, #19
 8001cd4:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001cd6:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <answer2CPU+0x390>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b14      	cmp	r3, #20
 8001ce2:	d109      	bne.n	8001cf8 <answer2CPU+0x31c>
//					isSoundOver = 1;
					numSound = cmd[2];
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	789a      	ldrb	r2, [r3, #2]
 8001ce8:	4b27      	ldr	r3, [pc, #156]	; (8001d88 <answer2CPU+0x3ac>)
 8001cea:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 8001cec:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <answer2CPU+0x37c>)
 8001cee:	2214      	movs	r2, #20
 8001cf0:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001cf2:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <answer2CPU+0x390>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b15      	cmp	r3, #21
 8001cfe:	d10d      	bne.n	8001d1c <answer2CPU+0x340>
					volume = cmd[2];
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	789a      	ldrb	r2, [r3, #2]
 8001d04:	4b21      	ldr	r3, [pc, #132]	; (8001d8c <answer2CPU+0x3b0>)
 8001d06:	701a      	strb	r2, [r3, #0]
					contrast = cmd[3];
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	78da      	ldrb	r2, [r3, #3]
 8001d0c:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <answer2CPU+0x3b4>)
 8001d0e:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <answer2CPU+0x37c>)
 8001d12:	2215      	movs	r2, #21
 8001d14:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <answer2CPU+0x390>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b16      	cmp	r3, #22
 8001d22:	d102      	bne.n	8001d2a <answer2CPU+0x34e>
//					volume = cmd[3];
//					contrast = cmd[4];
//					cmd2Execute=0x16;
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <answer2CPU+0x390>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d000      	beq.n	8001d34 <answer2CPU+0x358>
 8001d32:	e09f      	b.n	8001e74 <answer2CPU+0x498>
				myLength = 0x14; //20 bytes length answer
 8001d34:	210c      	movs	r1, #12
 8001d36:	187b      	adds	r3, r7, r1
 8001d38:	2214      	movs	r2, #20
 8001d3a:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001d3c:	187b      	adds	r3, r7, r1
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	3b02      	subs	r3, #2
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <answer2CPU+0x384>)
 8001d48:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001d4a:	230e      	movs	r3, #14
 8001d4c:	18fb      	adds	r3, r7, r3
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
 8001d52:	e030      	b.n	8001db6 <answer2CPU+0x3da>
 8001d54:	2000039c 	.word	0x2000039c
 8001d58:	20000402 	.word	0x20000402
 8001d5c:	50000800 	.word	0x50000800
 8001d60:	200003e8 	.word	0x200003e8
 8001d64:	40004400 	.word	0x40004400
 8001d68:	2000039d 	.word	0x2000039d
 8001d6c:	20000404 	.word	0x20000404
 8001d70:	200003a4 	.word	0x200003a4
 8001d74:	200003a8 	.word	0x200003a8
 8001d78:	20002408 	.word	0x20002408
 8001d7c:	20002409 	.word	0x20002409
 8001d80:	200003a2 	.word	0x200003a2
 8001d84:	200003b0 	.word	0x200003b0
 8001d88:	2000039e 	.word	0x2000039e
 8001d8c:	2000039f 	.word	0x2000039f
 8001d90:	200003a0 	.word	0x200003a0
					ans[i + 2] = PCB_type[i];
 8001d94:	200e      	movs	r0, #14
 8001d96:	183b      	adds	r3, r7, r0
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	4acb      	ldr	r2, [pc, #812]	; (80020c8 <answer2CPU+0x6ec>)
 8001d9c:	5cd1      	ldrb	r1, [r2, r3]
 8001d9e:	183b      	adds	r3, r7, r0
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	1c9a      	adds	r2, r3, #2
 8001da4:	b289      	uxth	r1, r1
 8001da6:	4bc9      	ldr	r3, [pc, #804]	; (80020cc <answer2CPU+0x6f0>)
 8001da8:	0052      	lsls	r2, r2, #1
 8001daa:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001dac:	183b      	adds	r3, r7, r0
 8001dae:	781a      	ldrb	r2, [r3, #0]
 8001db0:	183b      	adds	r3, r7, r0
 8001db2:	3201      	adds	r2, #1
 8001db4:	701a      	strb	r2, [r3, #0]
 8001db6:	220e      	movs	r2, #14
 8001db8:	18bb      	adds	r3, r7, r2
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b10      	cmp	r3, #16
 8001dbe:	d9e9      	bls.n	8001d94 <answer2CPU+0x3b8>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001dc0:	18bb      	adds	r3, r7, r2
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
 8001dc6:	e011      	b.n	8001dec <answer2CPU+0x410>
					myCS = myCS + ans[i];
 8001dc8:	200e      	movs	r0, #14
 8001dca:	183b      	adds	r3, r7, r0
 8001dcc:	781a      	ldrb	r2, [r3, #0]
 8001dce:	4bbf      	ldr	r3, [pc, #764]	; (80020cc <answer2CPU+0x6f0>)
 8001dd0:	0052      	lsls	r2, r2, #1
 8001dd2:	5ad3      	ldrh	r3, [r2, r3]
 8001dd4:	b2d9      	uxtb	r1, r3
 8001dd6:	220d      	movs	r2, #13
 8001dd8:	18bb      	adds	r3, r7, r2
 8001dda:	18ba      	adds	r2, r7, r2
 8001ddc:	7812      	ldrb	r2, [r2, #0]
 8001dde:	188a      	adds	r2, r1, r2
 8001de0:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001de2:	183b      	adds	r3, r7, r0
 8001de4:	781a      	ldrb	r2, [r3, #0]
 8001de6:	183b      	adds	r3, r7, r0
 8001de8:	3201      	adds	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
 8001dec:	230e      	movs	r3, #14
 8001dee:	18fb      	adds	r3, r7, r3
 8001df0:	781a      	ldrb	r2, [r3, #0]
 8001df2:	200c      	movs	r0, #12
 8001df4:	183b      	adds	r3, r7, r0
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	dbe4      	blt.n	8001dc8 <answer2CPU+0x3ec>
				}
				myCS = 0 - myCS;
 8001dfe:	210d      	movs	r1, #13
 8001e00:	187b      	adds	r3, r7, r1
 8001e02:	187a      	adds	r2, r7, r1
 8001e04:	7812      	ldrb	r2, [r2, #0]
 8001e06:	4252      	negs	r2, r2
 8001e08:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001e0a:	183b      	adds	r3, r7, r0
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	1e5a      	subs	r2, r3, #1
 8001e10:	187b      	adds	r3, r7, r1
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	b299      	uxth	r1, r3
 8001e16:	4bad      	ldr	r3, [pc, #692]	; (80020cc <answer2CPU+0x6f0>)
 8001e18:	0052      	lsls	r2, r2, #1
 8001e1a:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001e1c:	46c0      	nop			; (mov r8, r8)
 8001e1e:	4bac      	ldr	r3, [pc, #688]	; (80020d0 <answer2CPU+0x6f4>)
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	2280      	movs	r2, #128	; 0x80
 8001e24:	4013      	ands	r3, r2
 8001e26:	d0fa      	beq.n	8001e1e <answer2CPU+0x442>
				USART2->TDR = ans[0]|0x0100;
 8001e28:	4ba8      	ldr	r3, [pc, #672]	; (80020cc <answer2CPU+0x6f0>)
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	2280      	movs	r2, #128	; 0x80
 8001e2e:	0052      	lsls	r2, r2, #1
 8001e30:	4313      	orrs	r3, r2
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	4ba6      	ldr	r3, [pc, #664]	; (80020d0 <answer2CPU+0x6f4>)
 8001e36:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001e38:	e014      	b.n	8001e64 <answer2CPU+0x488>
				  {
				    i++;
 8001e3a:	210e      	movs	r1, #14
 8001e3c:	187b      	adds	r3, r7, r1
 8001e3e:	781a      	ldrb	r2, [r3, #0]
 8001e40:	187b      	adds	r3, r7, r1
 8001e42:	3201      	adds	r2, #1
 8001e44:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	4ba1      	ldr	r3, [pc, #644]	; (80020d0 <answer2CPU+0x6f4>)
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	2280      	movs	r2, #128	; 0x80
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d0fa      	beq.n	8001e48 <answer2CPU+0x46c>
				    USART2->TDR = (uint8_t)ans[i];
 8001e52:	230e      	movs	r3, #14
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	781a      	ldrb	r2, [r3, #0]
 8001e58:	4b9c      	ldr	r3, [pc, #624]	; (80020cc <answer2CPU+0x6f0>)
 8001e5a:	0052      	lsls	r2, r2, #1
 8001e5c:	5ad3      	ldrh	r3, [r2, r3]
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	4b9b      	ldr	r3, [pc, #620]	; (80020d0 <answer2CPU+0x6f4>)
 8001e62:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001e64:	230e      	movs	r3, #14
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	781a      	ldrb	r2, [r3, #0]
 8001e6a:	4b98      	ldr	r3, [pc, #608]	; (80020cc <answer2CPU+0x6f0>)
 8001e6c:	0052      	lsls	r2, r2, #1
 8001e6e:	5ad3      	ldrh	r3, [r2, r3]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1e2      	bne.n	8001e3a <answer2CPU+0x45e>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d000      	beq.n	8001e7e <answer2CPU+0x4a2>
 8001e7c:	e07f      	b.n	8001f7e <answer2CPU+0x5a2>
				myLength = 0x0B; //19 bytes length answer
 8001e7e:	210c      	movs	r1, #12
 8001e80:	187b      	adds	r3, r7, r1
 8001e82:	220b      	movs	r2, #11
 8001e84:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001e86:	187b      	adds	r3, r7, r1
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	3b02      	subs	r3, #2
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	4b8e      	ldr	r3, [pc, #568]	; (80020cc <answer2CPU+0x6f0>)
 8001e92:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001e94:	230e      	movs	r3, #14
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
 8001e9c:	e010      	b.n	8001ec0 <answer2CPU+0x4e4>
					ans[i + 2] = PCB_rev[i];
 8001e9e:	200e      	movs	r0, #14
 8001ea0:	183b      	adds	r3, r7, r0
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	4a8b      	ldr	r2, [pc, #556]	; (80020d4 <answer2CPU+0x6f8>)
 8001ea6:	5cd1      	ldrb	r1, [r2, r3]
 8001ea8:	183b      	adds	r3, r7, r0
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	1c9a      	adds	r2, r3, #2
 8001eae:	b289      	uxth	r1, r1
 8001eb0:	4b86      	ldr	r3, [pc, #536]	; (80020cc <answer2CPU+0x6f0>)
 8001eb2:	0052      	lsls	r2, r2, #1
 8001eb4:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001eb6:	183b      	adds	r3, r7, r0
 8001eb8:	781a      	ldrb	r2, [r3, #0]
 8001eba:	183b      	adds	r3, r7, r0
 8001ebc:	3201      	adds	r2, #1
 8001ebe:	701a      	strb	r2, [r3, #0]
 8001ec0:	220e      	movs	r2, #14
 8001ec2:	18bb      	adds	r3, r7, r2
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b10      	cmp	r3, #16
 8001ec8:	d9e9      	bls.n	8001e9e <answer2CPU+0x4c2>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001eca:	18bb      	adds	r3, r7, r2
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
 8001ed0:	e011      	b.n	8001ef6 <answer2CPU+0x51a>
					myCS = myCS + ans[i];
 8001ed2:	200e      	movs	r0, #14
 8001ed4:	183b      	adds	r3, r7, r0
 8001ed6:	781a      	ldrb	r2, [r3, #0]
 8001ed8:	4b7c      	ldr	r3, [pc, #496]	; (80020cc <answer2CPU+0x6f0>)
 8001eda:	0052      	lsls	r2, r2, #1
 8001edc:	5ad3      	ldrh	r3, [r2, r3]
 8001ede:	b2d9      	uxtb	r1, r3
 8001ee0:	220d      	movs	r2, #13
 8001ee2:	18bb      	adds	r3, r7, r2
 8001ee4:	18ba      	adds	r2, r7, r2
 8001ee6:	7812      	ldrb	r2, [r2, #0]
 8001ee8:	188a      	adds	r2, r1, r2
 8001eea:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001eec:	183b      	adds	r3, r7, r0
 8001eee:	781a      	ldrb	r2, [r3, #0]
 8001ef0:	183b      	adds	r3, r7, r0
 8001ef2:	3201      	adds	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
 8001ef6:	230e      	movs	r3, #14
 8001ef8:	18fb      	adds	r3, r7, r3
 8001efa:	781a      	ldrb	r2, [r3, #0]
 8001efc:	200c      	movs	r0, #12
 8001efe:	183b      	adds	r3, r7, r0
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	429a      	cmp	r2, r3
 8001f06:	dbe4      	blt.n	8001ed2 <answer2CPU+0x4f6>
				}
				myCS = 0 - myCS;
 8001f08:	210d      	movs	r1, #13
 8001f0a:	187b      	adds	r3, r7, r1
 8001f0c:	187a      	adds	r2, r7, r1
 8001f0e:	7812      	ldrb	r2, [r2, #0]
 8001f10:	4252      	negs	r2, r2
 8001f12:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001f14:	183b      	adds	r3, r7, r0
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	1e5a      	subs	r2, r3, #1
 8001f1a:	187b      	adds	r3, r7, r1
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	b299      	uxth	r1, r3
 8001f20:	4b6a      	ldr	r3, [pc, #424]	; (80020cc <answer2CPU+0x6f0>)
 8001f22:	0052      	lsls	r2, r2, #1
 8001f24:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	4b69      	ldr	r3, [pc, #420]	; (80020d0 <answer2CPU+0x6f4>)
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	2280      	movs	r2, #128	; 0x80
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d0fa      	beq.n	8001f28 <answer2CPU+0x54c>
				USART2->TDR = ans[0]|0x0100;
 8001f32:	4b66      	ldr	r3, [pc, #408]	; (80020cc <answer2CPU+0x6f0>)
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	2280      	movs	r2, #128	; 0x80
 8001f38:	0052      	lsls	r2, r2, #1
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	4b64      	ldr	r3, [pc, #400]	; (80020d0 <answer2CPU+0x6f4>)
 8001f40:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001f42:	e014      	b.n	8001f6e <answer2CPU+0x592>
					  {
					    i++;
 8001f44:	210e      	movs	r1, #14
 8001f46:	187b      	adds	r3, r7, r1
 8001f48:	781a      	ldrb	r2, [r3, #0]
 8001f4a:	187b      	adds	r3, r7, r1
 8001f4c:	3201      	adds	r2, #1
 8001f4e:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001f50:	46c0      	nop			; (mov r8, r8)
 8001f52:	4b5f      	ldr	r3, [pc, #380]	; (80020d0 <answer2CPU+0x6f4>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	2280      	movs	r2, #128	; 0x80
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d0fa      	beq.n	8001f52 <answer2CPU+0x576>
					    USART2->TDR = (uint8_t)ans[i];
 8001f5c:	230e      	movs	r3, #14
 8001f5e:	18fb      	adds	r3, r7, r3
 8001f60:	781a      	ldrb	r2, [r3, #0]
 8001f62:	4b5a      	ldr	r3, [pc, #360]	; (80020cc <answer2CPU+0x6f0>)
 8001f64:	0052      	lsls	r2, r2, #1
 8001f66:	5ad3      	ldrh	r3, [r2, r3]
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	4b59      	ldr	r3, [pc, #356]	; (80020d0 <answer2CPU+0x6f4>)
 8001f6c:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001f6e:	230e      	movs	r3, #14
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	781a      	ldrb	r2, [r3, #0]
 8001f74:	4b55      	ldr	r3, [pc, #340]	; (80020cc <answer2CPU+0x6f0>)
 8001f76:	0052      	lsls	r2, r2, #1
 8001f78:	5ad3      	ldrh	r3, [r2, r3]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1e2      	bne.n	8001f44 <answer2CPU+0x568>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d000      	beq.n	8001f88 <answer2CPU+0x5ac>
 8001f86:	e07f      	b.n	8002088 <answer2CPU+0x6ac>
				myLength = 0x13; //19 bytes length answer
 8001f88:	210c      	movs	r1, #12
 8001f8a:	187b      	adds	r3, r7, r1
 8001f8c:	2213      	movs	r2, #19
 8001f8e:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001f90:	187b      	adds	r3, r7, r1
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	3b02      	subs	r3, #2
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	4b4c      	ldr	r3, [pc, #304]	; (80020cc <answer2CPU+0x6f0>)
 8001f9c:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001f9e:	230e      	movs	r3, #14
 8001fa0:	18fb      	adds	r3, r7, r3
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	701a      	strb	r2, [r3, #0]
 8001fa6:	e010      	b.n	8001fca <answer2CPU+0x5ee>
					ans[i + 2] = EmitterSN[i];
 8001fa8:	200e      	movs	r0, #14
 8001faa:	183b      	adds	r3, r7, r0
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	4a4a      	ldr	r2, [pc, #296]	; (80020d8 <answer2CPU+0x6fc>)
 8001fb0:	5cd1      	ldrb	r1, [r2, r3]
 8001fb2:	183b      	adds	r3, r7, r0
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	1c9a      	adds	r2, r3, #2
 8001fb8:	b289      	uxth	r1, r1
 8001fba:	4b44      	ldr	r3, [pc, #272]	; (80020cc <answer2CPU+0x6f0>)
 8001fbc:	0052      	lsls	r2, r2, #1
 8001fbe:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001fc0:	183b      	adds	r3, r7, r0
 8001fc2:	781a      	ldrb	r2, [r3, #0]
 8001fc4:	183b      	adds	r3, r7, r0
 8001fc6:	3201      	adds	r2, #1
 8001fc8:	701a      	strb	r2, [r3, #0]
 8001fca:	220e      	movs	r2, #14
 8001fcc:	18bb      	adds	r3, r7, r2
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b10      	cmp	r3, #16
 8001fd2:	d9e9      	bls.n	8001fa8 <answer2CPU+0x5cc>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001fd4:	18bb      	adds	r3, r7, r2
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
 8001fda:	e011      	b.n	8002000 <answer2CPU+0x624>
					myCS = myCS + ans[i];
 8001fdc:	200e      	movs	r0, #14
 8001fde:	183b      	adds	r3, r7, r0
 8001fe0:	781a      	ldrb	r2, [r3, #0]
 8001fe2:	4b3a      	ldr	r3, [pc, #232]	; (80020cc <answer2CPU+0x6f0>)
 8001fe4:	0052      	lsls	r2, r2, #1
 8001fe6:	5ad3      	ldrh	r3, [r2, r3]
 8001fe8:	b2d9      	uxtb	r1, r3
 8001fea:	220d      	movs	r2, #13
 8001fec:	18bb      	adds	r3, r7, r2
 8001fee:	18ba      	adds	r2, r7, r2
 8001ff0:	7812      	ldrb	r2, [r2, #0]
 8001ff2:	188a      	adds	r2, r1, r2
 8001ff4:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001ff6:	183b      	adds	r3, r7, r0
 8001ff8:	781a      	ldrb	r2, [r3, #0]
 8001ffa:	183b      	adds	r3, r7, r0
 8001ffc:	3201      	adds	r2, #1
 8001ffe:	701a      	strb	r2, [r3, #0]
 8002000:	230e      	movs	r3, #14
 8002002:	18fb      	adds	r3, r7, r3
 8002004:	781a      	ldrb	r2, [r3, #0]
 8002006:	200c      	movs	r0, #12
 8002008:	183b      	adds	r3, r7, r0
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	3b01      	subs	r3, #1
 800200e:	429a      	cmp	r2, r3
 8002010:	dbe4      	blt.n	8001fdc <answer2CPU+0x600>
				}
				myCS = 0 - myCS;
 8002012:	210d      	movs	r1, #13
 8002014:	187b      	adds	r3, r7, r1
 8002016:	187a      	adds	r2, r7, r1
 8002018:	7812      	ldrb	r2, [r2, #0]
 800201a:	4252      	negs	r2, r2
 800201c:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 800201e:	183b      	adds	r3, r7, r0
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	1e5a      	subs	r2, r3, #1
 8002024:	187b      	adds	r3, r7, r1
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	b299      	uxth	r1, r3
 800202a:	4b28      	ldr	r3, [pc, #160]	; (80020cc <answer2CPU+0x6f0>)
 800202c:	0052      	lsls	r2, r2, #1
 800202e:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8002030:	46c0      	nop			; (mov r8, r8)
 8002032:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <answer2CPU+0x6f4>)
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	2280      	movs	r2, #128	; 0x80
 8002038:	4013      	ands	r3, r2
 800203a:	d0fa      	beq.n	8002032 <answer2CPU+0x656>
				USART2->TDR = ans[0]|0x0100;
 800203c:	4b23      	ldr	r3, [pc, #140]	; (80020cc <answer2CPU+0x6f0>)
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	2280      	movs	r2, #128	; 0x80
 8002042:	0052      	lsls	r2, r2, #1
 8002044:	4313      	orrs	r3, r2
 8002046:	b29a      	uxth	r2, r3
 8002048:	4b21      	ldr	r3, [pc, #132]	; (80020d0 <answer2CPU+0x6f4>)
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 800204c:	e014      	b.n	8002078 <answer2CPU+0x69c>
				  {
				    i++;
 800204e:	210e      	movs	r1, #14
 8002050:	187b      	adds	r3, r7, r1
 8002052:	781a      	ldrb	r2, [r3, #0]
 8002054:	187b      	adds	r3, r7, r1
 8002056:	3201      	adds	r2, #1
 8002058:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <answer2CPU+0x6f4>)
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	2280      	movs	r2, #128	; 0x80
 8002062:	4013      	ands	r3, r2
 8002064:	d0fa      	beq.n	800205c <answer2CPU+0x680>
				    	USART2->TDR = (uint8_t)ans[i];
 8002066:	230e      	movs	r3, #14
 8002068:	18fb      	adds	r3, r7, r3
 800206a:	781a      	ldrb	r2, [r3, #0]
 800206c:	4b17      	ldr	r3, [pc, #92]	; (80020cc <answer2CPU+0x6f0>)
 800206e:	0052      	lsls	r2, r2, #1
 8002070:	5ad3      	ldrh	r3, [r2, r3]
 8002072:	b2da      	uxtb	r2, r3
 8002074:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <answer2CPU+0x6f4>)
 8002076:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8002078:	230e      	movs	r3, #14
 800207a:	18fb      	adds	r3, r7, r3
 800207c:	781a      	ldrb	r2, [r3, #0]
 800207e:	4b13      	ldr	r3, [pc, #76]	; (80020cc <answer2CPU+0x6f0>)
 8002080:	0052      	lsls	r2, r2, #1
 8002082:	5ad3      	ldrh	r3, [r2, r3]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1e2      	bne.n	800204e <answer2CPU+0x672>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b03      	cmp	r3, #3
 800208e:	d000      	beq.n	8002092 <answer2CPU+0x6b6>
 8002090:	e07c      	b.n	800218c <answer2CPU+0x7b0>
				myLength = 0x04; //4 bytes length answer
 8002092:	210c      	movs	r1, #12
 8002094:	187b      	adds	r3, r7, r1
 8002096:	2204      	movs	r2, #4
 8002098:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 800209a:	187b      	adds	r3, r7, r1
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	3b02      	subs	r3, #2
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	4b09      	ldr	r3, [pc, #36]	; (80020cc <answer2CPU+0x6f0>)
 80020a6:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 80020a8:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <answer2CPU+0x700>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	4b07      	ldr	r3, [pc, #28]	; (80020cc <answer2CPU+0x6f0>)
 80020b0:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 80020b2:	230d      	movs	r3, #13
 80020b4:	18fb      	adds	r3, r7, r3
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	4b04      	ldr	r3, [pc, #16]	; (80020cc <answer2CPU+0x6f0>)
 80020bc:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 80020be:	230e      	movs	r3, #14
 80020c0:	18fb      	adds	r3, r7, r3
 80020c2:	2200      	movs	r2, #0
 80020c4:	701a      	strb	r2, [r3, #0]
 80020c6:	e01d      	b.n	8002104 <answer2CPU+0x728>
 80020c8:	20000000 	.word	0x20000000
 80020cc:	200003e8 	.word	0x200003e8
 80020d0:	40004400 	.word	0x40004400
 80020d4:	20000014 	.word	0x20000014
 80020d8:	20000020 	.word	0x20000020
 80020dc:	2000001c 	.word	0x2000001c
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 80020e0:	200e      	movs	r0, #14
 80020e2:	183b      	adds	r3, r7, r0
 80020e4:	781a      	ldrb	r2, [r3, #0]
 80020e6:	4b6d      	ldr	r3, [pc, #436]	; (800229c <answer2CPU+0x8c0>)
 80020e8:	0052      	lsls	r2, r2, #1
 80020ea:	5ad3      	ldrh	r3, [r2, r3]
 80020ec:	b2d9      	uxtb	r1, r3
 80020ee:	220d      	movs	r2, #13
 80020f0:	18bb      	adds	r3, r7, r2
 80020f2:	18ba      	adds	r2, r7, r2
 80020f4:	7812      	ldrb	r2, [r2, #0]
 80020f6:	188a      	adds	r2, r1, r2
 80020f8:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 80020fa:	183b      	adds	r3, r7, r0
 80020fc:	781a      	ldrb	r2, [r3, #0]
 80020fe:	183b      	adds	r3, r7, r0
 8002100:	3201      	adds	r2, #1
 8002102:	701a      	strb	r2, [r3, #0]
 8002104:	230e      	movs	r3, #14
 8002106:	18fb      	adds	r3, r7, r3
 8002108:	781a      	ldrb	r2, [r3, #0]
 800210a:	200c      	movs	r0, #12
 800210c:	183b      	adds	r3, r7, r0
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	3b01      	subs	r3, #1
 8002112:	429a      	cmp	r2, r3
 8002114:	dbe4      	blt.n	80020e0 <answer2CPU+0x704>
				}
				myCS = 0 - myCS;
 8002116:	210d      	movs	r1, #13
 8002118:	187b      	adds	r3, r7, r1
 800211a:	187a      	adds	r2, r7, r1
 800211c:	7812      	ldrb	r2, [r2, #0]
 800211e:	4252      	negs	r2, r2
 8002120:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8002122:	183b      	adds	r3, r7, r0
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	1e5a      	subs	r2, r3, #1
 8002128:	187b      	adds	r3, r7, r1
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	b299      	uxth	r1, r3
 800212e:	4b5b      	ldr	r3, [pc, #364]	; (800229c <answer2CPU+0x8c0>)
 8002130:	0052      	lsls	r2, r2, #1
 8002132:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8002134:	46c0      	nop			; (mov r8, r8)
 8002136:	4b5a      	ldr	r3, [pc, #360]	; (80022a0 <answer2CPU+0x8c4>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	2280      	movs	r2, #128	; 0x80
 800213c:	4013      	ands	r3, r2
 800213e:	d0fa      	beq.n	8002136 <answer2CPU+0x75a>
					USART2->TDR = ans[0]|0x0100;
 8002140:	4b56      	ldr	r3, [pc, #344]	; (800229c <answer2CPU+0x8c0>)
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	2280      	movs	r2, #128	; 0x80
 8002146:	0052      	lsls	r2, r2, #1
 8002148:	4313      	orrs	r3, r2
 800214a:	b29a      	uxth	r2, r3
 800214c:	4b54      	ldr	r3, [pc, #336]	; (80022a0 <answer2CPU+0x8c4>)
 800214e:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8002150:	e014      	b.n	800217c <answer2CPU+0x7a0>
						{
						  i++;
 8002152:	210e      	movs	r1, #14
 8002154:	187b      	adds	r3, r7, r1
 8002156:	781a      	ldrb	r2, [r3, #0]
 8002158:	187b      	adds	r3, r7, r1
 800215a:	3201      	adds	r2, #1
 800215c:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	4b4f      	ldr	r3, [pc, #316]	; (80022a0 <answer2CPU+0x8c4>)
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	2280      	movs	r2, #128	; 0x80
 8002166:	4013      	ands	r3, r2
 8002168:	d0fa      	beq.n	8002160 <answer2CPU+0x784>
						     USART2->TDR = (uint8_t)ans[i];
 800216a:	230e      	movs	r3, #14
 800216c:	18fb      	adds	r3, r7, r3
 800216e:	781a      	ldrb	r2, [r3, #0]
 8002170:	4b4a      	ldr	r3, [pc, #296]	; (800229c <answer2CPU+0x8c0>)
 8002172:	0052      	lsls	r2, r2, #1
 8002174:	5ad3      	ldrh	r3, [r2, r3]
 8002176:	b2da      	uxtb	r2, r3
 8002178:	4b49      	ldr	r3, [pc, #292]	; (80022a0 <answer2CPU+0x8c4>)
 800217a:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 800217c:	230e      	movs	r3, #14
 800217e:	18fb      	adds	r3, r7, r3
 8002180:	781a      	ldrb	r2, [r3, #0]
 8002182:	4b46      	ldr	r3, [pc, #280]	; (800229c <answer2CPU+0x8c0>)
 8002184:	0052      	lsls	r2, r2, #1
 8002186:	5ad3      	ldrh	r3, [r2, r3]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1e2      	bne.n	8002152 <answer2CPU+0x776>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b04      	cmp	r3, #4
 8002192:	d000      	beq.n	8002196 <answer2CPU+0x7ba>
 8002194:	e076      	b.n	8002284 <answer2CPU+0x8a8>
				myLength = 0x04; //4 bytes length answer
 8002196:	210c      	movs	r1, #12
 8002198:	187b      	adds	r3, r7, r1
 800219a:	2204      	movs	r2, #4
 800219c:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 800219e:	187b      	adds	r3, r7, r1
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	3b02      	subs	r3, #2
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	4b3c      	ldr	r3, [pc, #240]	; (800229c <answer2CPU+0x8c0>)
 80021aa:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3302      	adds	r3, #2
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	001a      	movs	r2, r3
 80021b4:	4b3b      	ldr	r3, [pc, #236]	; (80022a4 <answer2CPU+0x8c8>)
 80021b6:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 80021b8:	4b3b      	ldr	r3, [pc, #236]	; (80022a8 <answer2CPU+0x8cc>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	b29a      	uxth	r2, r3
 80021be:	4b37      	ldr	r3, [pc, #220]	; (800229c <answer2CPU+0x8c0>)
 80021c0:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 80021c2:	230d      	movs	r3, #13
 80021c4:	18fb      	adds	r3, r7, r3
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	4b34      	ldr	r3, [pc, #208]	; (800229c <answer2CPU+0x8c0>)
 80021cc:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 80021ce:	230e      	movs	r3, #14
 80021d0:	18fb      	adds	r3, r7, r3
 80021d2:	2200      	movs	r2, #0
 80021d4:	701a      	strb	r2, [r3, #0]
 80021d6:	e011      	b.n	80021fc <answer2CPU+0x820>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 80021d8:	200e      	movs	r0, #14
 80021da:	183b      	adds	r3, r7, r0
 80021dc:	781a      	ldrb	r2, [r3, #0]
 80021de:	4b2f      	ldr	r3, [pc, #188]	; (800229c <answer2CPU+0x8c0>)
 80021e0:	0052      	lsls	r2, r2, #1
 80021e2:	5ad3      	ldrh	r3, [r2, r3]
 80021e4:	b2d9      	uxtb	r1, r3
 80021e6:	220d      	movs	r2, #13
 80021e8:	18bb      	adds	r3, r7, r2
 80021ea:	18ba      	adds	r2, r7, r2
 80021ec:	7812      	ldrb	r2, [r2, #0]
 80021ee:	188a      	adds	r2, r1, r2
 80021f0:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 80021f2:	183b      	adds	r3, r7, r0
 80021f4:	781a      	ldrb	r2, [r3, #0]
 80021f6:	183b      	adds	r3, r7, r0
 80021f8:	3201      	adds	r2, #1
 80021fa:	701a      	strb	r2, [r3, #0]
 80021fc:	230e      	movs	r3, #14
 80021fe:	18fb      	adds	r3, r7, r3
 8002200:	781a      	ldrb	r2, [r3, #0]
 8002202:	200c      	movs	r0, #12
 8002204:	183b      	adds	r3, r7, r0
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	3b01      	subs	r3, #1
 800220a:	429a      	cmp	r2, r3
 800220c:	dbe4      	blt.n	80021d8 <answer2CPU+0x7fc>
				}
				myCS = 0 - myCS;
 800220e:	210d      	movs	r1, #13
 8002210:	187b      	adds	r3, r7, r1
 8002212:	187a      	adds	r2, r7, r1
 8002214:	7812      	ldrb	r2, [r2, #0]
 8002216:	4252      	negs	r2, r2
 8002218:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 800221a:	183b      	adds	r3, r7, r0
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	1e5a      	subs	r2, r3, #1
 8002220:	187b      	adds	r3, r7, r1
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	b299      	uxth	r1, r3
 8002226:	4b1d      	ldr	r3, [pc, #116]	; (800229c <answer2CPU+0x8c0>)
 8002228:	0052      	lsls	r2, r2, #1
 800222a:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 800222c:	46c0      	nop			; (mov r8, r8)
 800222e:	4b1c      	ldr	r3, [pc, #112]	; (80022a0 <answer2CPU+0x8c4>)
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	2280      	movs	r2, #128	; 0x80
 8002234:	4013      	ands	r3, r2
 8002236:	d0fa      	beq.n	800222e <answer2CPU+0x852>
				USART2->TDR = ans[0]|0x0100;
 8002238:	4b18      	ldr	r3, [pc, #96]	; (800229c <answer2CPU+0x8c0>)
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	2280      	movs	r2, #128	; 0x80
 800223e:	0052      	lsls	r2, r2, #1
 8002240:	4313      	orrs	r3, r2
 8002242:	b29a      	uxth	r2, r3
 8002244:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <answer2CPU+0x8c4>)
 8002246:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8002248:	e014      	b.n	8002274 <answer2CPU+0x898>
				{
				  i++;
 800224a:	210e      	movs	r1, #14
 800224c:	187b      	adds	r3, r7, r1
 800224e:	781a      	ldrb	r2, [r3, #0]
 8002250:	187b      	adds	r3, r7, r1
 8002252:	3201      	adds	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <answer2CPU+0x8c4>)
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	2280      	movs	r2, #128	; 0x80
 800225e:	4013      	ands	r3, r2
 8002260:	d0fa      	beq.n	8002258 <answer2CPU+0x87c>
				  USART2->TDR = (uint8_t)ans[i];
 8002262:	230e      	movs	r3, #14
 8002264:	18fb      	adds	r3, r7, r3
 8002266:	781a      	ldrb	r2, [r3, #0]
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <answer2CPU+0x8c0>)
 800226a:	0052      	lsls	r2, r2, #1
 800226c:	5ad3      	ldrh	r3, [r2, r3]
 800226e:	b2da      	uxtb	r2, r3
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <answer2CPU+0x8c4>)
 8002272:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8002274:	230e      	movs	r3, #14
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	781a      	ldrb	r2, [r3, #0]
 800227a:	4b08      	ldr	r3, [pc, #32]	; (800229c <answer2CPU+0x8c0>)
 800227c:	0052      	lsls	r2, r2, #1
 800227e:	5ad3      	ldrh	r3, [r2, r3]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1e2      	bne.n	800224a <answer2CPU+0x86e>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <answer2CPU+0x8c4>)
 8002286:	6a1a      	ldr	r2, [r3, #32]
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <answer2CPU+0x8c4>)
 800228a:	2108      	movs	r1, #8
 800228c:	430a      	orrs	r2, r1
 800228e:	621a      	str	r2, [r3, #32]
}
 8002290:	46c0      	nop			; (mov r8, r8)
 8002292:	0018      	movs	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	b004      	add	sp, #16
 8002298:	bd80      	pop	{r7, pc}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	200003e8 	.word	0x200003e8
 80022a0:	40004400 	.word	0x40004400
 80022a4:	200003ac 	.word	0x200003ac
 80022a8:	200003a1 	.word	0x200003a1

080022ac <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 80022b2:	2001      	movs	r0, #1
 80022b4:	f002 fab0 	bl	8004818 <HAL_Delay>
		GPIOB->ODR &= ~(1 << 9); //reset cs
 80022b8:	4b28      	ldr	r3, [pc, #160]	; (800235c <MEM_Reset+0xb0>)
 80022ba:	695a      	ldr	r2, [r3, #20]
 80022bc:	4b27      	ldr	r3, [pc, #156]	; (800235c <MEM_Reset+0xb0>)
 80022be:	4928      	ldr	r1, [pc, #160]	; (8002360 <MEM_Reset+0xb4>)
 80022c0:	400a      	ands	r2, r1
 80022c2:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 80022c4:	1dfb      	adds	r3, r7, #7
 80022c6:	2266      	movs	r2, #102	; 0x66
 80022c8:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 80022ca:	1df9      	adds	r1, r7, #7
 80022cc:	4825      	ldr	r0, [pc, #148]	; (8002364 <MEM_Reset+0xb8>)
 80022ce:	2305      	movs	r3, #5
 80022d0:	2201      	movs	r2, #1
 80022d2:	f006 fb73 	bl	80089bc <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 80022d6:	4b21      	ldr	r3, [pc, #132]	; (800235c <MEM_Reset+0xb0>)
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	4b20      	ldr	r3, [pc, #128]	; (800235c <MEM_Reset+0xb0>)
 80022dc:	2180      	movs	r1, #128	; 0x80
 80022de:	0089      	lsls	r1, r1, #2
 80022e0:	430a      	orrs	r2, r1
 80022e2:	615a      	str	r2, [r3, #20]
		asm("NOP");
 80022e4:	46c0      	nop			; (mov r8, r8)
		__NOP();
 80022e6:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 80022e8:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 80022ea:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 80022ec:	46c0      	nop			; (mov r8, r8)
		__NOP();
 80022ee:	46c0      	nop			; (mov r8, r8)
		GPIOB->ODR &= ~(1 << 9);			//reset cs
 80022f0:	4b1a      	ldr	r3, [pc, #104]	; (800235c <MEM_Reset+0xb0>)
 80022f2:	695a      	ldr	r2, [r3, #20]
 80022f4:	4b19      	ldr	r3, [pc, #100]	; (800235c <MEM_Reset+0xb0>)
 80022f6:	491a      	ldr	r1, [pc, #104]	; (8002360 <MEM_Reset+0xb4>)
 80022f8:	400a      	ands	r2, r1
 80022fa:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 80022fc:	1dfb      	adds	r3, r7, #7
 80022fe:	2299      	movs	r2, #153	; 0x99
 8002300:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 8002302:	1df9      	adds	r1, r7, #7
 8002304:	4817      	ldr	r0, [pc, #92]	; (8002364 <MEM_Reset+0xb8>)
 8002306:	2305      	movs	r3, #5
 8002308:	2201      	movs	r2, #1
 800230a:	f006 fb57 	bl	80089bc <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 800230e:	4b13      	ldr	r3, [pc, #76]	; (800235c <MEM_Reset+0xb0>)
 8002310:	695a      	ldr	r2, [r3, #20]
 8002312:	4b12      	ldr	r3, [pc, #72]	; (800235c <MEM_Reset+0xb0>)
 8002314:	2180      	movs	r1, #128	; 0x80
 8002316:	0089      	lsls	r1, r1, #2
 8002318:	430a      	orrs	r2, r1
 800231a:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 800231c:	2001      	movs	r0, #1
 800231e:	f002 fa7b 	bl	8004818 <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 8002322:	1dfb      	adds	r3, r7, #7
 8002324:	22b7      	movs	r2, #183	; 0xb7
 8002326:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 << 9); //reset cs
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <MEM_Reset+0xb0>)
 800232a:	695a      	ldr	r2, [r3, #20]
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <MEM_Reset+0xb0>)
 800232e:	490c      	ldr	r1, [pc, #48]	; (8002360 <MEM_Reset+0xb4>)
 8002330:	400a      	ands	r2, r1
 8002332:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8002334:	1df9      	adds	r1, r7, #7
 8002336:	480b      	ldr	r0, [pc, #44]	; (8002364 <MEM_Reset+0xb8>)
 8002338:	2305      	movs	r3, #5
 800233a:	2201      	movs	r2, #1
 800233c:	f006 fb3e 	bl	80089bc <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <MEM_Reset+0xb0>)
 8002342:	695a      	ldr	r2, [r3, #20]
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <MEM_Reset+0xb0>)
 8002346:	2180      	movs	r1, #128	; 0x80
 8002348:	0089      	lsls	r1, r1, #2
 800234a:	430a      	orrs	r2, r1
 800234c:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 800234e:	2001      	movs	r0, #1
 8002350:	f002 fa62 	bl	8004818 <HAL_Delay>
	}
 8002354:	46c0      	nop			; (mov r8, r8)
 8002356:	46bd      	mov	sp, r7
 8002358:	b002      	add	sp, #8
 800235a:	bd80      	pop	{r7, pc}
 800235c:	50000400 	.word	0x50000400
 8002360:	fffffdff 	.word	0xfffffdff
 8002364:	20000178 	.word	0x20000178

08002368 <weoShowFullScreenDMA>:
//		while(BFEN==0){};
		GPIOC->ODR |= 1 << 6;	//set BF
	}
//==========================================================================================================================

	uint8_t weoShowFullScreenDMA(uint8_t picNum) {
 8002368:	b590      	push	{r4, r7, lr}
 800236a:	b087      	sub	sp, #28
 800236c:	af00      	add	r7, sp, #0
 800236e:	0002      	movs	r2, r0
 8002370:	1dfb      	adds	r3, r7, #7
 8002372:	701a      	strb	r2, [r3, #0]
//		uint8_t MEM_Buffer[8192];
//		uint8_t DUMMY_Buffer[8192], firstImAddrArray[4];
		uint8_t addrArray[4];
		uint16_t i;
		uint32_t addrInfo,addr;
		GPIOC->ODR &= ~(1 << 6);
 8002374:	4b31      	ldr	r3, [pc, #196]	; (800243c <weoShowFullScreenDMA+0xd4>)
 8002376:	695a      	ldr	r2, [r3, #20]
 8002378:	4b30      	ldr	r3, [pc, #192]	; (800243c <weoShowFullScreenDMA+0xd4>)
 800237a:	2140      	movs	r1, #64	; 0x40
 800237c:	438a      	bics	r2, r1
 800237e:	615a      	str	r2, [r3, #20]

		weoDrawRectangleInit(0x00, 0x00, 0x7F, 0x7F); // Здесь ещё работает
 8002380:	237f      	movs	r3, #127	; 0x7f
 8002382:	227f      	movs	r2, #127	; 0x7f
 8002384:	2100      	movs	r1, #0
 8002386:	2000      	movs	r0, #0
 8002388:	f7ff f9d6 	bl	8001738 <weoDrawRectangleInit>

		imLen=8192;
 800238c:	4b2c      	ldr	r3, [pc, #176]	; (8002440 <weoShowFullScreenDMA+0xd8>)
 800238e:	2280      	movs	r2, #128	; 0x80
 8002390:	0192      	lsls	r2, r2, #6
 8002392:	801a      	strh	r2, [r3, #0]
		dma_spi_cnt=imLen;
 8002394:	4b2a      	ldr	r3, [pc, #168]	; (8002440 <weoShowFullScreenDMA+0xd8>)
 8002396:	881a      	ldrh	r2, [r3, #0]
 8002398:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <weoShowFullScreenDMA+0xdc>)
 800239a:	801a      	strh	r2, [r3, #0]
		memCMD = 0x13; //read command with 4-byte address
 800239c:	2013      	movs	r0, #19
 800239e:	183b      	adds	r3, r7, r0
 80023a0:	2213      	movs	r2, #19
 80023a2:	701a      	strb	r2, [r3, #0]

		addr=((picNum)*0x2000);
 80023a4:	1dfb      	adds	r3, r7, #7
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	035b      	lsls	r3, r3, #13
 80023aa:	617b      	str	r3, [r7, #20]

		addrArray[0]=addr & 0xFF;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	240c      	movs	r4, #12
 80023b2:	193b      	adds	r3, r7, r4
 80023b4:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	0a1b      	lsrs	r3, r3, #8
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	193b      	adds	r3, r7, r4
 80023be:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	0c1b      	lsrs	r3, r3, #16
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	193b      	adds	r3, r7, r4
 80023c8:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	0e1b      	lsrs	r3, r3, #24
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	193b      	adds	r3, r7, r4
 80023d2:	70da      	strb	r2, [r3, #3]

		GPIOB->ODR &= ~(1 << 9); //reset cs
 80023d4:	4b1c      	ldr	r3, [pc, #112]	; (8002448 <weoShowFullScreenDMA+0xe0>)
 80023d6:	695a      	ldr	r2, [r3, #20]
 80023d8:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <weoShowFullScreenDMA+0xe0>)
 80023da:	491c      	ldr	r1, [pc, #112]	; (800244c <weoShowFullScreenDMA+0xe4>)
 80023dc:	400a      	ands	r2, r1
 80023de:	615a      	str	r2, [r3, #20]

		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 80023e0:	1839      	adds	r1, r7, r0
 80023e2:	481b      	ldr	r0, [pc, #108]	; (8002450 <weoShowFullScreenDMA+0xe8>)
 80023e4:	2332      	movs	r3, #50	; 0x32
 80023e6:	2201      	movs	r2, #1
 80023e8:	f006 fae8 	bl	80089bc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 80023ec:	193b      	adds	r3, r7, r4
 80023ee:	1cd9      	adds	r1, r3, #3
 80023f0:	4817      	ldr	r0, [pc, #92]	; (8002450 <weoShowFullScreenDMA+0xe8>)
 80023f2:	2332      	movs	r3, #50	; 0x32
 80023f4:	2201      	movs	r2, #1
 80023f6:	f006 fae1 	bl	80089bc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 80023fa:	193b      	adds	r3, r7, r4
 80023fc:	1c99      	adds	r1, r3, #2
 80023fe:	4814      	ldr	r0, [pc, #80]	; (8002450 <weoShowFullScreenDMA+0xe8>)
 8002400:	2332      	movs	r3, #50	; 0x32
 8002402:	2201      	movs	r2, #1
 8002404:	f006 fada 	bl	80089bc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8002408:	193b      	adds	r3, r7, r4
 800240a:	1c59      	adds	r1, r3, #1
 800240c:	4810      	ldr	r0, [pc, #64]	; (8002450 <weoShowFullScreenDMA+0xe8>)
 800240e:	2332      	movs	r3, #50	; 0x32
 8002410:	2201      	movs	r2, #1
 8002412:	f006 fad3 	bl	80089bc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8002416:	1939      	adds	r1, r7, r4
 8002418:	480d      	ldr	r0, [pc, #52]	; (8002450 <weoShowFullScreenDMA+0xe8>)
 800241a:	2332      	movs	r3, #50	; 0x32
 800241c:	2201      	movs	r2, #1
 800241e:	f006 facd 	bl	80089bc <HAL_SPI_Transmit>
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,imLen);
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <weoShowFullScreenDMA+0xd8>)
 8002424:	881a      	ldrh	r2, [r3, #0]
 8002426:	490b      	ldr	r1, [pc, #44]	; (8002454 <weoShowFullScreenDMA+0xec>)
 8002428:	4b09      	ldr	r3, [pc, #36]	; (8002450 <weoShowFullScreenDMA+0xe8>)
 800242a:	0018      	movs	r0, r3
 800242c:	f006 ff3c 	bl	80092a8 <HAL_SPI_Receive_DMA>
	}
 8002430:	46c0      	nop			; (mov r8, r8)
 8002432:	0018      	movs	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	b007      	add	sp, #28
 8002438:	bd90      	pop	{r4, r7, pc}
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	50000800 	.word	0x50000800
 8002440:	20000406 	.word	0x20000406
 8002444:	20000030 	.word	0x20000030
 8002448:	50000400 	.word	0x50000400
 800244c:	fffffdff 	.word	0xfffffdff
 8002450:	20000178 	.word	0x20000178
 8002454:	20000408 	.word	0x20000408

08002458 <weoShowSmallImageDMA>:
		weoDrawRectangleFilled(imX, imY, imX+width-1, imY+height-decY, 0xFF,MEM_Buffer);	// Здесь ещё работает 0xFF - затычка
		cmd2Execute=0;
//		while(BFEN==0){};
		GPIOC->ODR |= 1 << 6;	//set BF
	}
	uint8_t weoShowSmallImageDMA(uint8_t picNum, uint8_t imX, uint8_t imY) {
 8002458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800245a:	b089      	sub	sp, #36	; 0x24
 800245c:	af00      	add	r7, sp, #0
 800245e:	0004      	movs	r4, r0
 8002460:	0008      	movs	r0, r1
 8002462:	0011      	movs	r1, r2
 8002464:	1dfb      	adds	r3, r7, #7
 8002466:	1c22      	adds	r2, r4, #0
 8002468:	701a      	strb	r2, [r3, #0]
 800246a:	1dbb      	adds	r3, r7, #6
 800246c:	1c02      	adds	r2, r0, #0
 800246e:	701a      	strb	r2, [r3, #0]
 8002470:	1d7b      	adds	r3, r7, #5
 8002472:	1c0a      	adds	r2, r1, #0
 8002474:	701a      	strb	r2, [r3, #0]
//		uint8_t MEM_Buffer[8192];
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H, decY;
		uint8_t imInfo[2],addrArray[4];
		uint16_t i;
		uint32_t addr,addrData;
		addr=0x00000000;
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
		memCMD = 0x13; //read command with 4-byte address
 800247a:	2013      	movs	r0, #19
 800247c:	183b      	adds	r3, r7, r0
 800247e:	2213      	movs	r2, #19
 8002480:	701a      	strb	r2, [r3, #0]
		//look at info about image
		addr=(picNum*0x2000)+0x200000;;// the right path is to multiply picNum * image repeat period!
 8002482:	1dfb      	adds	r3, r7, #7
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	3301      	adds	r3, #1
 8002488:	33ff      	adds	r3, #255	; 0xff
 800248a:	035b      	lsls	r3, r3, #13
 800248c:	61fb      	str	r3, [r7, #28]

		addrArray[0]=addr & 0xFF;
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	b2da      	uxtb	r2, r3
 8002492:	240c      	movs	r4, #12
 8002494:	193b      	adds	r3, r7, r4
 8002496:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	0a1b      	lsrs	r3, r3, #8
 800249c:	b2da      	uxtb	r2, r3
 800249e:	193b      	adds	r3, r7, r4
 80024a0:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	0c1b      	lsrs	r3, r3, #16
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	193b      	adds	r3, r7, r4
 80024aa:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	0e1b      	lsrs	r3, r3, #24
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	193b      	adds	r3, r7, r4
 80024b4:	70da      	strb	r2, [r3, #3]

		GPIOB->ODR &= ~(1 << 9); //reset cs
 80024b6:	4b66      	ldr	r3, [pc, #408]	; (8002650 <weoShowSmallImageDMA+0x1f8>)
 80024b8:	695a      	ldr	r2, [r3, #20]
 80024ba:	4b65      	ldr	r3, [pc, #404]	; (8002650 <weoShowSmallImageDMA+0x1f8>)
 80024bc:	4965      	ldr	r1, [pc, #404]	; (8002654 <weoShowSmallImageDMA+0x1fc>)
 80024be:	400a      	ands	r2, r1
 80024c0:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 80024c2:	1839      	adds	r1, r7, r0
 80024c4:	4864      	ldr	r0, [pc, #400]	; (8002658 <weoShowSmallImageDMA+0x200>)
 80024c6:	2332      	movs	r3, #50	; 0x32
 80024c8:	2201      	movs	r2, #1
 80024ca:	f006 fa77 	bl	80089bc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 80024ce:	193b      	adds	r3, r7, r4
 80024d0:	1cd9      	adds	r1, r3, #3
 80024d2:	4861      	ldr	r0, [pc, #388]	; (8002658 <weoShowSmallImageDMA+0x200>)
 80024d4:	2332      	movs	r3, #50	; 0x32
 80024d6:	2201      	movs	r2, #1
 80024d8:	f006 fa70 	bl	80089bc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 80024dc:	193b      	adds	r3, r7, r4
 80024de:	1c99      	adds	r1, r3, #2
 80024e0:	485d      	ldr	r0, [pc, #372]	; (8002658 <weoShowSmallImageDMA+0x200>)
 80024e2:	2332      	movs	r3, #50	; 0x32
 80024e4:	2201      	movs	r2, #1
 80024e6:	f006 fa69 	bl	80089bc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 80024ea:	193b      	adds	r3, r7, r4
 80024ec:	1c59      	adds	r1, r3, #1
 80024ee:	485a      	ldr	r0, [pc, #360]	; (8002658 <weoShowSmallImageDMA+0x200>)
 80024f0:	2332      	movs	r3, #50	; 0x32
 80024f2:	2201      	movs	r2, #1
 80024f4:	f006 fa62 	bl	80089bc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 80024f8:	1939      	adds	r1, r7, r4
 80024fa:	4857      	ldr	r0, [pc, #348]	; (8002658 <weoShowSmallImageDMA+0x200>)
 80024fc:	2332      	movs	r3, #50	; 0x32
 80024fe:	2201      	movs	r2, #1
 8002500:	f006 fa5c 	bl	80089bc <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 8002504:	4b55      	ldr	r3, [pc, #340]	; (800265c <weoShowSmallImageDMA+0x204>)
 8002506:	2410      	movs	r4, #16
 8002508:	1939      	adds	r1, r7, r4
 800250a:	4853      	ldr	r0, [pc, #332]	; (8002658 <weoShowSmallImageDMA+0x200>)
 800250c:	2202      	movs	r2, #2
 800250e:	f006 fbad 	bl	8008c6c <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9; // set cs
 8002512:	4b4f      	ldr	r3, [pc, #316]	; (8002650 <weoShowSmallImageDMA+0x1f8>)
 8002514:	695a      	ldr	r2, [r3, #20]
 8002516:	4b4e      	ldr	r3, [pc, #312]	; (8002650 <weoShowSmallImageDMA+0x1f8>)
 8002518:	2180      	movs	r1, #128	; 0x80
 800251a:	0089      	lsls	r1, r1, #2
 800251c:	430a      	orrs	r2, r1
 800251e:	615a      	str	r2, [r3, #20]

		width=imInfo[0];
 8002520:	231b      	movs	r3, #27
 8002522:	18fb      	adds	r3, r7, r3
 8002524:	193a      	adds	r2, r7, r4
 8002526:	7812      	ldrb	r2, [r2, #0]
 8002528:	701a      	strb	r2, [r3, #0]
		height=imInfo[1];
 800252a:	231a      	movs	r3, #26
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	193a      	adds	r2, r7, r4
 8002530:	7852      	ldrb	r2, [r2, #1]
 8002532:	701a      	strb	r2, [r3, #0]

		decY=0x01;
 8002534:	2119      	movs	r1, #25
 8002536:	187b      	adds	r3, r7, r1
 8002538:	2201      	movs	r2, #1
 800253a:	701a      	strb	r2, [r3, #0]
		if(imY % 2 !=0){
 800253c:	1d7b      	adds	r3, r7, #5
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2201      	movs	r2, #1
 8002542:	4013      	ands	r3, r2
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <weoShowSmallImageDMA+0xf8>
			decY=0x02;
 800254a:	187b      	adds	r3, r7, r1
 800254c:	2202      	movs	r2, #2
 800254e:	701a      	strb	r2, [r3, #0]
		}
		decY=0x01;
 8002550:	2119      	movs	r1, #25
 8002552:	187b      	adds	r3, r7, r1
 8002554:	2201      	movs	r2, #1
 8002556:	701a      	strb	r2, [r3, #0]

		weoDrawRectangleInit(imX, imY, imX + width - 1, imY + height - decY);
 8002558:	1dba      	adds	r2, r7, #6
 800255a:	251b      	movs	r5, #27
 800255c:	197b      	adds	r3, r7, r5
 800255e:	7812      	ldrb	r2, [r2, #0]
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	18d3      	adds	r3, r2, r3
 8002564:	b2db      	uxtb	r3, r3
 8002566:	3b01      	subs	r3, #1
 8002568:	b2dc      	uxtb	r4, r3
 800256a:	1d7a      	adds	r2, r7, #5
 800256c:	261a      	movs	r6, #26
 800256e:	19bb      	adds	r3, r7, r6
 8002570:	7812      	ldrb	r2, [r2, #0]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	18d3      	adds	r3, r2, r3
 8002576:	b2da      	uxtb	r2, r3
 8002578:	187b      	adds	r3, r7, r1
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	b2da      	uxtb	r2, r3
 8002580:	1d7b      	adds	r3, r7, #5
 8002582:	7819      	ldrb	r1, [r3, #0]
 8002584:	1dbb      	adds	r3, r7, #6
 8002586:	7818      	ldrb	r0, [r3, #0]
 8002588:	0013      	movs	r3, r2
 800258a:	0022      	movs	r2, r4
 800258c:	f7ff f8d4 	bl	8001738 <weoDrawRectangleInit>

//		weoDrawRectangleInit(0, 0, 0x7F, 0x7F);

		addrData=addr+0x02;
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	3302      	adds	r3, #2
 8002594:	617b      	str	r3, [r7, #20]
		imLen=width*height/2 + 0;
 8002596:	197b      	adds	r3, r7, r5
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	19ba      	adds	r2, r7, r6
 800259c:	7812      	ldrb	r2, [r2, #0]
 800259e:	4353      	muls	r3, r2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	da00      	bge.n	80025a6 <weoShowSmallImageDMA+0x14e>
 80025a4:	3301      	adds	r3, #1
 80025a6:	105b      	asrs	r3, r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	4b2d      	ldr	r3, [pc, #180]	; (8002660 <weoShowSmallImageDMA+0x208>)
 80025ac:	801a      	strh	r2, [r3, #0]

//		imLen = 8192;

		addrArray[0]=addrData & 0xFF;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	240c      	movs	r4, #12
 80025b4:	193b      	adds	r3, r7, r4
 80025b6:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addrData >> 8) & 0xFF;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	0a1b      	lsrs	r3, r3, #8
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	193b      	adds	r3, r7, r4
 80025c0:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addrData >> 16) & 0xFF;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	0c1b      	lsrs	r3, r3, #16
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	193b      	adds	r3, r7, r4
 80025ca:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addrData >> 24) & 0xFF;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	0e1b      	lsrs	r3, r3, #24
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	193b      	adds	r3, r7, r4
 80025d4:	70da      	strb	r2, [r3, #3]

		USART2->ICR|=USART_ICR_ORECF;
 80025d6:	4b23      	ldr	r3, [pc, #140]	; (8002664 <weoShowSmallImageDMA+0x20c>)
 80025d8:	6a1a      	ldr	r2, [r3, #32]
 80025da:	4b22      	ldr	r3, [pc, #136]	; (8002664 <weoShowSmallImageDMA+0x20c>)
 80025dc:	2108      	movs	r1, #8
 80025de:	430a      	orrs	r2, r1
 80025e0:	621a      	str	r2, [r3, #32]
		memCMD = 0x13; //read command with 4-byte address
 80025e2:	2013      	movs	r0, #19
 80025e4:	183b      	adds	r3, r7, r0
 80025e6:	2213      	movs	r2, #19
 80025e8:	701a      	strb	r2, [r3, #0]

		GPIOB->ODR &= ~(1 <<9);	//reset MEM_CS
 80025ea:	4b19      	ldr	r3, [pc, #100]	; (8002650 <weoShowSmallImageDMA+0x1f8>)
 80025ec:	695a      	ldr	r2, [r3, #20]
 80025ee:	4b18      	ldr	r3, [pc, #96]	; (8002650 <weoShowSmallImageDMA+0x1f8>)
 80025f0:	4918      	ldr	r1, [pc, #96]	; (8002654 <weoShowSmallImageDMA+0x1fc>)
 80025f2:	400a      	ands	r2, r1
 80025f4:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 80025f6:	1839      	adds	r1, r7, r0
 80025f8:	4817      	ldr	r0, [pc, #92]	; (8002658 <weoShowSmallImageDMA+0x200>)
 80025fa:	2332      	movs	r3, #50	; 0x32
 80025fc:	2201      	movs	r2, #1
 80025fe:	f006 f9dd 	bl	80089bc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 8002602:	193b      	adds	r3, r7, r4
 8002604:	1cd9      	adds	r1, r3, #3
 8002606:	4814      	ldr	r0, [pc, #80]	; (8002658 <weoShowSmallImageDMA+0x200>)
 8002608:	2332      	movs	r3, #50	; 0x32
 800260a:	2201      	movs	r2, #1
 800260c:	f006 f9d6 	bl	80089bc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 8002610:	193b      	adds	r3, r7, r4
 8002612:	1c99      	adds	r1, r3, #2
 8002614:	4810      	ldr	r0, [pc, #64]	; (8002658 <weoShowSmallImageDMA+0x200>)
 8002616:	2332      	movs	r3, #50	; 0x32
 8002618:	2201      	movs	r2, #1
 800261a:	f006 f9cf 	bl	80089bc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 800261e:	193b      	adds	r3, r7, r4
 8002620:	1c59      	adds	r1, r3, #1
 8002622:	480d      	ldr	r0, [pc, #52]	; (8002658 <weoShowSmallImageDMA+0x200>)
 8002624:	2332      	movs	r3, #50	; 0x32
 8002626:	2201      	movs	r2, #1
 8002628:	f006 f9c8 	bl	80089bc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 800262c:	1939      	adds	r1, r7, r4
 800262e:	480a      	ldr	r0, [pc, #40]	; (8002658 <weoShowSmallImageDMA+0x200>)
 8002630:	2332      	movs	r3, #50	; 0x32
 8002632:	2201      	movs	r2, #1
 8002634:	f006 f9c2 	bl	80089bc <HAL_SPI_Transmit>
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) MEM_Buffer ,imLen);
 8002638:	4b09      	ldr	r3, [pc, #36]	; (8002660 <weoShowSmallImageDMA+0x208>)
 800263a:	881a      	ldrh	r2, [r3, #0]
 800263c:	490a      	ldr	r1, [pc, #40]	; (8002668 <weoShowSmallImageDMA+0x210>)
 800263e:	4b06      	ldr	r3, [pc, #24]	; (8002658 <weoShowSmallImageDMA+0x200>)
 8002640:	0018      	movs	r0, r3
 8002642:	f006 fe31 	bl	80092a8 <HAL_SPI_Receive_DMA>
//		GPIOA->ODR |= 1 << 7;	// set dc
//		HAL_USART_Transmit_DMA(&husart3, MEM_Buffer,imLen);
//		HAL_USART_Transmit(&husart3, MEM_Buffer,imLen, 5000);
//		GPIOA->ODR |= 1 << 6;	//set cs
//		GPIOC->ODR |= 1 << 6;	//set BF
	}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	0018      	movs	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	b009      	add	sp, #36	; 0x24
 800264e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002650:	50000400 	.word	0x50000400
 8002654:	fffffdff 	.word	0xfffffdff
 8002658:	20000178 	.word	0x20000178
 800265c:	00001388 	.word	0x00001388
 8002660:	20000406 	.word	0x20000406
 8002664:	40004400 	.word	0x40004400
 8002668:	20000408 	.word	0x20000408

0800266c <soundPlay>:
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		uint8_t soundPlay(uint8_t soundNum) {
 800266c:	b590      	push	{r4, r7, lr}
 800266e:	b08d      	sub	sp, #52	; 0x34
 8002670:	af00      	add	r7, sp, #0
 8002672:	0002      	movs	r2, r0
 8002674:	1dfb      	adds	r3, r7, #7
 8002676:	701a      	strb	r2, [r3, #0]
			uint8_t memCMD = 0x13; //read command with 4-byte address
 8002678:	202b      	movs	r0, #43	; 0x2b
 800267a:	183b      	adds	r3, r7, r0
 800267c:	2213      	movs	r2, #19
 800267e:	701a      	strb	r2, [r3, #0]
			uint32_t i;
//			GPIOC->ODR |= 1 << 6;	//set BF //just 4 test
//			setVolume(0x10, 0x30, 10);	// it was setVolume(0x10, 0x30, 0x00);
//			soundNum = 13;
//			soundNum = 4;
			address = 4194304 + (soundNum * 9);
 8002680:	1dfb      	adds	r3, r7, #7
 8002682:	781a      	ldrb	r2, [r3, #0]
 8002684:	0013      	movs	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	189b      	adds	r3, r3, r2
 800268a:	2280      	movs	r2, #128	; 0x80
 800268c:	03d2      	lsls	r2, r2, #15
 800268e:	4694      	mov	ip, r2
 8002690:	4463      	add	r3, ip
 8002692:	60fb      	str	r3, [r7, #12]
//			address = 0 + (soundNum * 9);

			curBuf = 0;
 8002694:	4bb2      	ldr	r3, [pc, #712]	; (8002960 <soundPlay+0x2f4>)
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
			uint32_t lenOfsound = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	62fb      	str	r3, [r7, #44]	; 0x2c
			isSoundOver = 0;
 800269e:	4bb1      	ldr	r3, [pc, #708]	; (8002964 <soundPlay+0x2f8>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]
			addrSound = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	613b      	str	r3, [r7, #16]

			if(isSoundOver == 1)
 80026a8:	4bae      	ldr	r3, [pc, #696]	; (8002964 <soundPlay+0x2f8>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d100      	bne.n	80026b2 <soundPlay+0x46>
 80026b0:	e230      	b.n	8002b14 <soundPlay+0x4a8>
//				 cmd2Execute=0;
//				 GPIOC->ODR |= 1 << 6;	//set BF
				 return;
			}

			if (curBuf == 0)
 80026b2:	4bab      	ldr	r3, [pc, #684]	; (8002960 <soundPlay+0x2f4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d000      	beq.n	80026bc <soundPlay+0x50>
 80026ba:	e0b3      	b.n	8002824 <soundPlay+0x1b8>
			{
				addrINFO[0] = address & 0xFF;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	241c      	movs	r4, #28
 80026c2:	193b      	adds	r3, r7, r4
 80026c4:	701a      	strb	r2, [r3, #0]
				addrINFO[1] = (address >> 8) & 0xFF;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	0a1b      	lsrs	r3, r3, #8
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	193b      	adds	r3, r7, r4
 80026ce:	705a      	strb	r2, [r3, #1]
				addrINFO[2] = (address >> 16) & 0xFF;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	0c1b      	lsrs	r3, r3, #16
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	193b      	adds	r3, r7, r4
 80026d8:	709a      	strb	r2, [r3, #2]
				addrINFO[3] = (address >> 24) & 0xFF;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	0e1b      	lsrs	r3, r3, #24
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	193b      	adds	r3, r7, r4
 80026e2:	70da      	strb	r2, [r3, #3]

				GPIOB->ODR &= ~(1 << 9); //reset cs
 80026e4:	4ba0      	ldr	r3, [pc, #640]	; (8002968 <soundPlay+0x2fc>)
 80026e6:	695a      	ldr	r2, [r3, #20]
 80026e8:	4b9f      	ldr	r3, [pc, #636]	; (8002968 <soundPlay+0x2fc>)
 80026ea:	49a0      	ldr	r1, [pc, #640]	; (800296c <soundPlay+0x300>)
 80026ec:	400a      	ands	r2, r1
 80026ee:	615a      	str	r2, [r3, #20]
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & memCMD, 1, 50); //read command with 4-byte address
 80026f0:	1839      	adds	r1, r7, r0
 80026f2:	489f      	ldr	r0, [pc, #636]	; (8002970 <soundPlay+0x304>)
 80026f4:	2332      	movs	r3, #50	; 0x32
 80026f6:	2201      	movs	r2, #1
 80026f8:	f006 f960 	bl	80089bc <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addrINFO[3], 1, 50); //send address
 80026fc:	193b      	adds	r3, r7, r4
 80026fe:	1cd9      	adds	r1, r3, #3
 8002700:	489b      	ldr	r0, [pc, #620]	; (8002970 <soundPlay+0x304>)
 8002702:	2332      	movs	r3, #50	; 0x32
 8002704:	2201      	movs	r2, #1
 8002706:	f006 f959 	bl	80089bc <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addrINFO[2], 1, 50); //send address
 800270a:	193b      	adds	r3, r7, r4
 800270c:	1c99      	adds	r1, r3, #2
 800270e:	4898      	ldr	r0, [pc, #608]	; (8002970 <soundPlay+0x304>)
 8002710:	2332      	movs	r3, #50	; 0x32
 8002712:	2201      	movs	r2, #1
 8002714:	f006 f952 	bl	80089bc <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addrINFO[1], 1, 50); //send address
 8002718:	193b      	adds	r3, r7, r4
 800271a:	1c59      	adds	r1, r3, #1
 800271c:	4894      	ldr	r0, [pc, #592]	; (8002970 <soundPlay+0x304>)
 800271e:	2332      	movs	r3, #50	; 0x32
 8002720:	2201      	movs	r2, #1
 8002722:	f006 f94b 	bl	80089bc <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addrINFO[0], 1, 50); //send address
 8002726:	1939      	adds	r1, r7, r4
 8002728:	4891      	ldr	r0, [pc, #580]	; (8002970 <soundPlay+0x304>)
 800272a:	2332      	movs	r3, #50	; 0x32
 800272c:	2201      	movs	r2, #1
 800272e:	f006 f945 	bl	80089bc <HAL_SPI_Transmit>
				HAL_SPI_Receive(&hspi2, (uint8_t*) & soundInfo, 9, 5000);//9 bytes of soundInfo
 8002732:	4b90      	ldr	r3, [pc, #576]	; (8002974 <soundPlay+0x308>)
 8002734:	2420      	movs	r4, #32
 8002736:	1939      	adds	r1, r7, r4
 8002738:	488d      	ldr	r0, [pc, #564]	; (8002970 <soundPlay+0x304>)
 800273a:	2209      	movs	r2, #9
 800273c:	f006 fa96 	bl	8008c6c <HAL_SPI_Receive>
				GPIOB->ODR |= 1 << 9; // set cs
 8002740:	4b89      	ldr	r3, [pc, #548]	; (8002968 <soundPlay+0x2fc>)
 8002742:	695a      	ldr	r2, [r3, #20]
 8002744:	4b88      	ldr	r3, [pc, #544]	; (8002968 <soundPlay+0x2fc>)
 8002746:	2180      	movs	r1, #128	; 0x80
 8002748:	0089      	lsls	r1, r1, #2
 800274a:	430a      	orrs	r2, r1
 800274c:	615a      	str	r2, [r3, #20]

				addr[0] = soundInfo[4];
 800274e:	0021      	movs	r1, r4
 8002750:	187b      	adds	r3, r7, r1
 8002752:	791a      	ldrb	r2, [r3, #4]
 8002754:	2018      	movs	r0, #24
 8002756:	183b      	adds	r3, r7, r0
 8002758:	701a      	strb	r2, [r3, #0]
				addr[1] = soundInfo[3];
 800275a:	187b      	adds	r3, r7, r1
 800275c:	78da      	ldrb	r2, [r3, #3]
 800275e:	183b      	adds	r3, r7, r0
 8002760:	705a      	strb	r2, [r3, #1]
				addr[2] = soundInfo[2];
 8002762:	187b      	adds	r3, r7, r1
 8002764:	789a      	ldrb	r2, [r3, #2]
 8002766:	183b      	adds	r3, r7, r0
 8002768:	709a      	strb	r2, [r3, #2]
				addr[3] = soundInfo[1];
 800276a:	187b      	adds	r3, r7, r1
 800276c:	785a      	ldrb	r2, [r3, #1]
 800276e:	183b      	adds	r3, r7, r0
 8002770:	70da      	strb	r2, [r3, #3]

//				address = 0;
	//			address = 0x29f170;

				address *= 4;		// just 4 test    !!!! IT'S TEMPORARY!!!!!! FIND THE REASON!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	60fb      	str	r3, [r7, #12]

				address |= addr[3];
 8002778:	183b      	adds	r3, r7, r0
 800277a:	78db      	ldrb	r3, [r3, #3]
 800277c:	001a      	movs	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4313      	orrs	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]
				address <<= 8;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	021b      	lsls	r3, r3, #8
 8002788:	60fb      	str	r3, [r7, #12]
				address |= addr[2];
 800278a:	183b      	adds	r3, r7, r0
 800278c:	789b      	ldrb	r3, [r3, #2]
 800278e:	001a      	movs	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]
				address <<= 8;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	60fb      	str	r3, [r7, #12]
				address |= addr[1];
 800279c:	183b      	adds	r3, r7, r0
 800279e:	785b      	ldrb	r3, [r3, #1]
 80027a0:	001a      	movs	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]
				address <<= 8;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	021b      	lsls	r3, r3, #8
 80027ac:	60fb      	str	r3, [r7, #12]
				address |= addr[0];
 80027ae:	183b      	adds	r3, r7, r0
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	001a      	movs	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
	//									address <<= 8;
	//									address |= addr[1];
	//									address <<= 8;
	//									address |= addr[0];

				length[0] = soundInfo[8];	//Commented 4 test
 80027ba:	187b      	adds	r3, r7, r1
 80027bc:	7a1a      	ldrb	r2, [r3, #8]
 80027be:	2014      	movs	r0, #20
 80027c0:	183b      	adds	r3, r7, r0
 80027c2:	701a      	strb	r2, [r3, #0]
				length[1] = soundInfo[7];	//Commented 4 test
 80027c4:	187b      	adds	r3, r7, r1
 80027c6:	79da      	ldrb	r2, [r3, #7]
 80027c8:	183b      	adds	r3, r7, r0
 80027ca:	705a      	strb	r2, [r3, #1]
				length[2] = soundInfo[6];	//Commented 4 test
 80027cc:	187b      	adds	r3, r7, r1
 80027ce:	799a      	ldrb	r2, [r3, #6]
 80027d0:	183b      	adds	r3, r7, r0
 80027d2:	709a      	strb	r2, [r3, #2]
				length[3] = soundInfo[5];	//Commented 4 test
 80027d4:	187b      	adds	r3, r7, r1
 80027d6:	795a      	ldrb	r2, [r3, #5]
 80027d8:	0001      	movs	r1, r0
 80027da:	187b      	adds	r3, r7, r1
 80027dc:	70da      	strb	r2, [r3, #3]

				lenOfsound |= length[3];
 80027de:	187b      	adds	r3, r7, r1
 80027e0:	78db      	ldrb	r3, [r3, #3]
 80027e2:	001a      	movs	r2, r3
 80027e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e6:	4313      	orrs	r3, r2
 80027e8:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound <<= 8;
 80027ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ec:	021b      	lsls	r3, r3, #8
 80027ee:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound |= length[2];
 80027f0:	187b      	adds	r3, r7, r1
 80027f2:	789b      	ldrb	r3, [r3, #2]
 80027f4:	001a      	movs	r2, r3
 80027f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f8:	4313      	orrs	r3, r2
 80027fa:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound <<= 8;
 80027fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fe:	021b      	lsls	r3, r3, #8
 8002800:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound |= length[1];
 8002802:	187b      	adds	r3, r7, r1
 8002804:	785b      	ldrb	r3, [r3, #1]
 8002806:	001a      	movs	r2, r3
 8002808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280a:	4313      	orrs	r3, r2
 800280c:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound <<= 8;
 800280e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002810:	021b      	lsls	r3, r3, #8
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound |= length[0];
 8002814:	187b      	adds	r3, r7, r1
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	001a      	movs	r2, r3
 800281a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281c:	4313      	orrs	r3, r2
 800281e:	62fb      	str	r3, [r7, #44]	; 0x2c
				speakerPowerUp();
 8002820:	f000 fa33 	bl	8002c8a <speakerPowerUp>
			}

			if(lenOfsound % bufLen == 0)
 8002824:	4b54      	ldr	r3, [pc, #336]	; (8002978 <soundPlay+0x30c>)
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	001a      	movs	r2, r3
 800282a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282c:	0011      	movs	r1, r2
 800282e:	0018      	movs	r0, r3
 8002830:	f7fd fcee 	bl	8000210 <__aeabi_uidivmod>
 8002834:	1e0b      	subs	r3, r1, #0
 8002836:	d116      	bne.n	8002866 <soundPlay+0x1fa>
			{
				bufCount = lenOfsound / bufLen;			//	 N of buffers is determined
 8002838:	4b4f      	ldr	r3, [pc, #316]	; (8002978 <soundPlay+0x30c>)
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	0019      	movs	r1, r3
 800283e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002840:	f7fd fc60 	bl	8000104 <__udivsi3>
 8002844:	0003      	movs	r3, r0
 8002846:	001a      	movs	r2, r3
 8002848:	4b4c      	ldr	r3, [pc, #304]	; (800297c <soundPlay+0x310>)
 800284a:	601a      	str	r2, [r3, #0]
				bufLast = bufCount - 1;						//	number of last buffer is determined
 800284c:	4b4b      	ldr	r3, [pc, #300]	; (800297c <soundPlay+0x310>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	1e5a      	subs	r2, r3, #1
 8002852:	4b4b      	ldr	r3, [pc, #300]	; (8002980 <soundPlay+0x314>)
 8002854:	601a      	str	r2, [r3, #0]
				lastSoundBufferSize = (bufLen >> 1);
 8002856:	4b48      	ldr	r3, [pc, #288]	; (8002978 <soundPlay+0x30c>)
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	085b      	lsrs	r3, r3, #1
 800285c:	b29b      	uxth	r3, r3
 800285e:	001a      	movs	r2, r3
 8002860:	4b48      	ldr	r3, [pc, #288]	; (8002984 <soundPlay+0x318>)
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	e019      	b.n	800289a <soundPlay+0x22e>
			}
			else
			{
				bufCount = (lenOfsound / bufLen) + 1;	//	 N of buffers is determined
 8002866:	4b44      	ldr	r3, [pc, #272]	; (8002978 <soundPlay+0x30c>)
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	0019      	movs	r1, r3
 800286c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800286e:	f7fd fc49 	bl	8000104 <__udivsi3>
 8002872:	0003      	movs	r3, r0
 8002874:	1c5a      	adds	r2, r3, #1
 8002876:	4b41      	ldr	r3, [pc, #260]	; (800297c <soundPlay+0x310>)
 8002878:	601a      	str	r2, [r3, #0]
				bufLast = bufCount - 1;					//	number of last buffer is determined
 800287a:	4b40      	ldr	r3, [pc, #256]	; (800297c <soundPlay+0x310>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	1e5a      	subs	r2, r3, #1
 8002880:	4b3f      	ldr	r3, [pc, #252]	; (8002980 <soundPlay+0x314>)
 8002882:	601a      	str	r2, [r3, #0]
				lastSoundBufferSize = (lenOfsound - ((bufCount - 1) *  bufLen)) >> 1;
 8002884:	4b3d      	ldr	r3, [pc, #244]	; (800297c <soundPlay+0x310>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	3b01      	subs	r3, #1
 800288a:	4a3b      	ldr	r2, [pc, #236]	; (8002978 <soundPlay+0x30c>)
 800288c:	8812      	ldrh	r2, [r2, #0]
 800288e:	4353      	muls	r3, r2
 8002890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	085a      	lsrs	r2, r3, #1
 8002896:	4b3b      	ldr	r3, [pc, #236]	; (8002984 <soundPlay+0x318>)
 8002898:	601a      	str	r2, [r3, #0]
			}
				lenOfData = bufLen >> 1;
 800289a:	4b37      	ldr	r3, [pc, #220]	; (8002978 <soundPlay+0x30c>)
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	085b      	lsrs	r3, r3, #1
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	001a      	movs	r2, r3
 80028a4:	4b38      	ldr	r3, [pc, #224]	; (8002988 <soundPlay+0x31c>)
 80028a6:	601a      	str	r2, [r3, #0]
	//////////////////////////////////////////////////////////////////////////////////////// IF before is correct, after is correct //////////
				GPIOB->ODR &= ~(1 << 9); //reset FLASH CS
 80028a8:	4b2f      	ldr	r3, [pc, #188]	; (8002968 <soundPlay+0x2fc>)
 80028aa:	695a      	ldr	r2, [r3, #20]
 80028ac:	4b2e      	ldr	r3, [pc, #184]	; (8002968 <soundPlay+0x2fc>)
 80028ae:	492f      	ldr	r1, [pc, #188]	; (800296c <soundPlay+0x300>)
 80028b0:	400a      	ands	r2, r1
 80028b2:	615a      	str	r2, [r3, #20]
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & memCMD, 1, 50); //read command with 4-byte address
 80028b4:	232b      	movs	r3, #43	; 0x2b
 80028b6:	18f9      	adds	r1, r7, r3
 80028b8:	482d      	ldr	r0, [pc, #180]	; (8002970 <soundPlay+0x304>)
 80028ba:	2332      	movs	r3, #50	; 0x32
 80028bc:	2201      	movs	r2, #1
 80028be:	f006 f87d 	bl	80089bc <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[3], 1, 50); //send address
 80028c2:	2418      	movs	r4, #24
 80028c4:	193b      	adds	r3, r7, r4
 80028c6:	1cd9      	adds	r1, r3, #3
 80028c8:	4829      	ldr	r0, [pc, #164]	; (8002970 <soundPlay+0x304>)
 80028ca:	2332      	movs	r3, #50	; 0x32
 80028cc:	2201      	movs	r2, #1
 80028ce:	f006 f875 	bl	80089bc <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[2], 1, 50); //send address
 80028d2:	193b      	adds	r3, r7, r4
 80028d4:	1c99      	adds	r1, r3, #2
 80028d6:	4826      	ldr	r0, [pc, #152]	; (8002970 <soundPlay+0x304>)
 80028d8:	2332      	movs	r3, #50	; 0x32
 80028da:	2201      	movs	r2, #1
 80028dc:	f006 f86e 	bl	80089bc <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[1], 1, 50); //send address
 80028e0:	193b      	adds	r3, r7, r4
 80028e2:	1c59      	adds	r1, r3, #1
 80028e4:	4822      	ldr	r0, [pc, #136]	; (8002970 <soundPlay+0x304>)
 80028e6:	2332      	movs	r3, #50	; 0x32
 80028e8:	2201      	movs	r2, #1
 80028ea:	f006 f867 	bl	80089bc <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[0], 1, 50); //send address
 80028ee:	1939      	adds	r1, r7, r4
 80028f0:	481f      	ldr	r0, [pc, #124]	; (8002970 <soundPlay+0x304>)
 80028f2:	2332      	movs	r3, #50	; 0x32
 80028f4:	2201      	movs	r2, #1
 80028f6:	f006 f861 	bl	80089bc <HAL_SPI_Transmit>
				HAL_SPI_Receive(&hspi2, (uint8_t*)  & soundBuf[0], bufLen, 5000);
 80028fa:	4b1f      	ldr	r3, [pc, #124]	; (8002978 <soundPlay+0x30c>)
 80028fc:	881a      	ldrh	r2, [r3, #0]
 80028fe:	4b1d      	ldr	r3, [pc, #116]	; (8002974 <soundPlay+0x308>)
 8002900:	4922      	ldr	r1, [pc, #136]	; (800298c <soundPlay+0x320>)
 8002902:	481b      	ldr	r0, [pc, #108]	; (8002970 <soundPlay+0x304>)
 8002904:	f006 f9b2 	bl	8008c6c <HAL_SPI_Receive>
//				HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)  & soundBuf[0], bufLen);

				GPIOB->ODR |= 1 << 9;	//set FLASH CS
 8002908:	4b17      	ldr	r3, [pc, #92]	; (8002968 <soundPlay+0x2fc>)
 800290a:	695a      	ldr	r2, [r3, #20]
 800290c:	4b16      	ldr	r3, [pc, #88]	; (8002968 <soundPlay+0x2fc>)
 800290e:	2180      	movs	r1, #128	; 0x80
 8002910:	0089      	lsls	r1, r1, #2
 8002912:	430a      	orrs	r2, r1
 8002914:	615a      	str	r2, [r3, #20]



	//			addrSound = 9;	// 4 test only!
				addrSound = address;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	613b      	str	r3, [r7, #16]



				HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*) & soundBuf[0], (lenOfData));
 800291a:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <soundPlay+0x31c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	b29a      	uxth	r2, r3
 8002920:	491a      	ldr	r1, [pc, #104]	; (800298c <soundPlay+0x320>)
 8002922:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <soundPlay+0x324>)
 8002924:	0018      	movs	r0, r3
 8002926:	f004 fa9d 	bl	8006e64 <HAL_I2S_Transmit_DMA>
				half_of_buf = 1;
 800292a:	4b1a      	ldr	r3, [pc, #104]	; (8002994 <soundPlay+0x328>)
 800292c:	2201      	movs	r2, #1
 800292e:	701a      	strb	r2, [r3, #0]
	//==================================================1st time play buffer =========================================================
	//			GPIOC->ODR |= 1 << 6;	//set BF
	//			GPIOC->ODR &= ~(1 << 6);	//set BF сюда приходит
//				while(curBuf < bufCount)
				while(curBuf <= bufLast)
 8002930:	e0e5      	b.n	8002afe <soundPlay+0x492>
				{
//					if(curBuf == (bufCount - 2))
					if(curBuf == bufLast)
 8002932:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <soundPlay+0x2f4>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	4b12      	ldr	r3, [pc, #72]	; (8002980 <soundPlay+0x314>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d103      	bne.n	8002946 <soundPlay+0x2da>
					{
						lenOfData = lastSoundBufferSize;
 800293e:	4b11      	ldr	r3, [pc, #68]	; (8002984 <soundPlay+0x318>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	4b11      	ldr	r3, [pc, #68]	; (8002988 <soundPlay+0x31c>)
 8002944:	601a      	str	r2, [r3, #0]
//						isSoundOver = 1;		//just 4 test
//						HAL_I2S_DMAStop(&hi2s1);
//					}
	//							GPIOC->ODR |= 1 << 6;	//set BF
	//							GPIOC->ODR &= ~(1 << 6);	//set BF сюда приходит
					if(isSoundOver == 1)
 8002946:	4b07      	ldr	r3, [pc, #28]	; (8002964 <soundPlay+0x2f8>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d126      	bne.n	800299c <soundPlay+0x330>
//
//									__disable_irq();
//									/* might not be necessary */
//
//									 hi2s1.hdmarx->XferCpltCallback = NULL;
									 HAL_I2S_DMAStop(&hi2s1);
 800294e:	4b10      	ldr	r3, [pc, #64]	; (8002990 <soundPlay+0x324>)
 8002950:	0018      	movs	r0, r3
 8002952:	f004 fb33 	bl	8006fbc <HAL_I2S_DMAStop>
//									 __enable_irq();
									/* might not be necessary */
									 cmd2Execute=0;
 8002956:	4b10      	ldr	r3, [pc, #64]	; (8002998 <soundPlay+0x32c>)
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
//									 GPIOC->ODR |= 1 << 6;	//set BF
									 return;
 800295c:	e0db      	b.n	8002b16 <soundPlay+0x4aa>
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	2000240c 	.word	0x2000240c
 8002964:	20002824 	.word	0x20002824
 8002968:	50000400 	.word	0x50000400
 800296c:	fffffdff 	.word	0xfffffdff
 8002970:	20000178 	.word	0x20000178
 8002974:	00001388 	.word	0x00001388
 8002978:	20000032 	.word	0x20000032
 800297c:	20002410 	.word	0x20002410
 8002980:	20002820 	.word	0x20002820
 8002984:	20002818 	.word	0x20002818
 8002988:	20002814 	.word	0x20002814
 800298c:	20002414 	.word	0x20002414
 8002990:	200000e0 	.word	0x200000e0
 8002994:	2000281c 	.word	0x2000281c
 8002998:	20000402 	.word	0x20000402
								}

					if(half_of_buf == 2)
 800299c:	4b60      	ldr	r3, [pc, #384]	; (8002b20 <soundPlay+0x4b4>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d152      	bne.n	8002a4a <soundPlay+0x3de>
					{
//						GPIOC->ODR |= 1 << 6;	//set BF
	//					GPIOC->ODR &= ~(1 << 6);	//set BF сюда приходит
						addrSound = (addrSound + (lenOfData));
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4b5f      	ldr	r3, [pc, #380]	; (8002b24 <soundPlay+0x4b8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	18d3      	adds	r3, r2, r3
 80029ac:	613b      	str	r3, [r7, #16]

						addr[0] = addrSound & 0xFF;
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	2418      	movs	r4, #24
 80029b4:	193b      	adds	r3, r7, r4
 80029b6:	701a      	strb	r2, [r3, #0]
						addr[1] = (addrSound >> 8) & 0xFF;
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	0a1b      	lsrs	r3, r3, #8
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	193b      	adds	r3, r7, r4
 80029c0:	705a      	strb	r2, [r3, #1]
						addr[2] = (addrSound >> 16) & 0xFF;
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	0c1b      	lsrs	r3, r3, #16
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	193b      	adds	r3, r7, r4
 80029ca:	709a      	strb	r2, [r3, #2]
						addr[3] = (addrSound >> 24) & 0xFF;
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	0e1b      	lsrs	r3, r3, #24
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	193b      	adds	r3, r7, r4
 80029d4:	70da      	strb	r2, [r3, #3]

						GPIOB->ODR &= ~(1 << 9); //reset FLASH CS
 80029d6:	4b54      	ldr	r3, [pc, #336]	; (8002b28 <soundPlay+0x4bc>)
 80029d8:	695a      	ldr	r2, [r3, #20]
 80029da:	4b53      	ldr	r3, [pc, #332]	; (8002b28 <soundPlay+0x4bc>)
 80029dc:	4953      	ldr	r1, [pc, #332]	; (8002b2c <soundPlay+0x4c0>)
 80029de:	400a      	ands	r2, r1
 80029e0:	615a      	str	r2, [r3, #20]
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & memCMD, 1, 50); //read command with 4-byte address
 80029e2:	232b      	movs	r3, #43	; 0x2b
 80029e4:	18f9      	adds	r1, r7, r3
 80029e6:	4852      	ldr	r0, [pc, #328]	; (8002b30 <soundPlay+0x4c4>)
 80029e8:	2332      	movs	r3, #50	; 0x32
 80029ea:	2201      	movs	r2, #1
 80029ec:	f005 ffe6 	bl	80089bc <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[3], 1, 50); //send address
 80029f0:	193b      	adds	r3, r7, r4
 80029f2:	1cd9      	adds	r1, r3, #3
 80029f4:	484e      	ldr	r0, [pc, #312]	; (8002b30 <soundPlay+0x4c4>)
 80029f6:	2332      	movs	r3, #50	; 0x32
 80029f8:	2201      	movs	r2, #1
 80029fa:	f005 ffdf 	bl	80089bc <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[2], 1, 50); //send address
 80029fe:	193b      	adds	r3, r7, r4
 8002a00:	1c99      	adds	r1, r3, #2
 8002a02:	484b      	ldr	r0, [pc, #300]	; (8002b30 <soundPlay+0x4c4>)
 8002a04:	2332      	movs	r3, #50	; 0x32
 8002a06:	2201      	movs	r2, #1
 8002a08:	f005 ffd8 	bl	80089bc <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[1], 1, 50); //send address
 8002a0c:	193b      	adds	r3, r7, r4
 8002a0e:	1c59      	adds	r1, r3, #1
 8002a10:	4847      	ldr	r0, [pc, #284]	; (8002b30 <soundPlay+0x4c4>)
 8002a12:	2332      	movs	r3, #50	; 0x32
 8002a14:	2201      	movs	r2, #1
 8002a16:	f005 ffd1 	bl	80089bc <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[0], 1, 50); //send address
 8002a1a:	1939      	adds	r1, r7, r4
 8002a1c:	4844      	ldr	r0, [pc, #272]	; (8002b30 <soundPlay+0x4c4>)
 8002a1e:	2332      	movs	r3, #50	; 0x32
 8002a20:	2201      	movs	r2, #1
 8002a22:	f005 ffcb 	bl	80089bc <HAL_SPI_Transmit>
//						HAL_SPI_Receive(&hspi2, (uint8_t*)&soundBuf[0], (bufLen >> 1), 5000);
						HAL_SPI_Receive(&hspi2, (uint8_t*)&soundBuf[0], lenOfData, 5000);
 8002a26:	4b3f      	ldr	r3, [pc, #252]	; (8002b24 <soundPlay+0x4b8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	4b41      	ldr	r3, [pc, #260]	; (8002b34 <soundPlay+0x4c8>)
 8002a2e:	4942      	ldr	r1, [pc, #264]	; (8002b38 <soundPlay+0x4cc>)
 8002a30:	483f      	ldr	r0, [pc, #252]	; (8002b30 <soundPlay+0x4c4>)
 8002a32:	f006 f91b 	bl	8008c6c <HAL_SPI_Receive>
//						HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)  & soundBuf[0], (bufLen >> 1));
						GPIOB->ODR |= 1 << 9;	//set FLASH CS
 8002a36:	4b3c      	ldr	r3, [pc, #240]	; (8002b28 <soundPlay+0x4bc>)
 8002a38:	695a      	ldr	r2, [r3, #20]
 8002a3a:	4b3b      	ldr	r3, [pc, #236]	; (8002b28 <soundPlay+0x4bc>)
 8002a3c:	2180      	movs	r1, #128	; 0x80
 8002a3e:	0089      	lsls	r1, r1, #2
 8002a40:	430a      	orrs	r2, r1
 8002a42:	615a      	str	r2, [r3, #20]
						half_of_buf = 1;
 8002a44:	4b36      	ldr	r3, [pc, #216]	; (8002b20 <soundPlay+0x4b4>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	701a      	strb	r2, [r3, #0]
					}
					if(half_of_buf == 0)
 8002a4a:	4b35      	ldr	r3, [pc, #212]	; (8002b20 <soundPlay+0x4b4>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d155      	bne.n	8002afe <soundPlay+0x492>
					{
	//					GPIOC->ODR |= 1 << 6;	//set BF
//						GPIOC->ODR &= ~(1 << 6);	//set BF сюда приходит
						addrSound = (addrSound + (lenOfData));
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4b33      	ldr	r3, [pc, #204]	; (8002b24 <soundPlay+0x4b8>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	18d3      	adds	r3, r2, r3
 8002a5a:	613b      	str	r3, [r7, #16]

						addr[0] = addrSound & 0xFF;
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	2418      	movs	r4, #24
 8002a62:	193b      	adds	r3, r7, r4
 8002a64:	701a      	strb	r2, [r3, #0]
						addr[1] = (addrSound >> 8) & 0xFF;
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	0a1b      	lsrs	r3, r3, #8
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	193b      	adds	r3, r7, r4
 8002a6e:	705a      	strb	r2, [r3, #1]
						addr[2] = (addrSound >> 16) & 0xFF;
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	0c1b      	lsrs	r3, r3, #16
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	193b      	adds	r3, r7, r4
 8002a78:	709a      	strb	r2, [r3, #2]
						addr[3] = (addrSound >> 24) & 0xFF;
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	0e1b      	lsrs	r3, r3, #24
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	193b      	adds	r3, r7, r4
 8002a82:	70da      	strb	r2, [r3, #3]

						GPIOB->ODR &= ~(1 << 9); //reset FLASH CS
 8002a84:	4b28      	ldr	r3, [pc, #160]	; (8002b28 <soundPlay+0x4bc>)
 8002a86:	695a      	ldr	r2, [r3, #20]
 8002a88:	4b27      	ldr	r3, [pc, #156]	; (8002b28 <soundPlay+0x4bc>)
 8002a8a:	4928      	ldr	r1, [pc, #160]	; (8002b2c <soundPlay+0x4c0>)
 8002a8c:	400a      	ands	r2, r1
 8002a8e:	615a      	str	r2, [r3, #20]
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & memCMD, 1, 50); //read command with 4-byte address
 8002a90:	232b      	movs	r3, #43	; 0x2b
 8002a92:	18f9      	adds	r1, r7, r3
 8002a94:	4826      	ldr	r0, [pc, #152]	; (8002b30 <soundPlay+0x4c4>)
 8002a96:	2332      	movs	r3, #50	; 0x32
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f005 ff8f 	bl	80089bc <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[3], 1, 50); //send address
 8002a9e:	193b      	adds	r3, r7, r4
 8002aa0:	1cd9      	adds	r1, r3, #3
 8002aa2:	4823      	ldr	r0, [pc, #140]	; (8002b30 <soundPlay+0x4c4>)
 8002aa4:	2332      	movs	r3, #50	; 0x32
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f005 ff88 	bl	80089bc <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[2], 1, 50); //send address
 8002aac:	193b      	adds	r3, r7, r4
 8002aae:	1c99      	adds	r1, r3, #2
 8002ab0:	481f      	ldr	r0, [pc, #124]	; (8002b30 <soundPlay+0x4c4>)
 8002ab2:	2332      	movs	r3, #50	; 0x32
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f005 ff81 	bl	80089bc <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[1], 1, 50); //send address
 8002aba:	193b      	adds	r3, r7, r4
 8002abc:	1c59      	adds	r1, r3, #1
 8002abe:	481c      	ldr	r0, [pc, #112]	; (8002b30 <soundPlay+0x4c4>)
 8002ac0:	2332      	movs	r3, #50	; 0x32
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f005 ff7a 	bl	80089bc <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[0], 1, 50); //send address
 8002ac8:	1939      	adds	r1, r7, r4
 8002aca:	4819      	ldr	r0, [pc, #100]	; (8002b30 <soundPlay+0x4c4>)
 8002acc:	2332      	movs	r3, #50	; 0x32
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f005 ff74 	bl	80089bc <HAL_SPI_Transmit>
//						HAL_SPI_Receive(&hspi2, (uint8_t*)&soundBuf[bufLen >> 1], (bufLen >> 1), 5000);
						HAL_SPI_Receive(&hspi2, (uint8_t*)&soundBuf[lenOfData], lenOfData, 5000);
 8002ad4:	4b13      	ldr	r3, [pc, #76]	; (8002b24 <soundPlay+0x4b8>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <soundPlay+0x4cc>)
 8002ada:	18d1      	adds	r1, r2, r3
 8002adc:	4b11      	ldr	r3, [pc, #68]	; (8002b24 <soundPlay+0x4b8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	4b14      	ldr	r3, [pc, #80]	; (8002b34 <soundPlay+0x4c8>)
 8002ae4:	4812      	ldr	r0, [pc, #72]	; (8002b30 <soundPlay+0x4c4>)
 8002ae6:	f006 f8c1 	bl	8008c6c <HAL_SPI_Receive>
//						HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)  & soundBuf[0], (bufLen >> 1));
						GPIOB->ODR |= 1 << 9;	//set FLASH CS
 8002aea:	4b0f      	ldr	r3, [pc, #60]	; (8002b28 <soundPlay+0x4bc>)
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <soundPlay+0x4bc>)
 8002af0:	2180      	movs	r1, #128	; 0x80
 8002af2:	0089      	lsls	r1, r1, #2
 8002af4:	430a      	orrs	r2, r1
 8002af6:	615a      	str	r2, [r3, #20]
						half_of_buf = 1;
 8002af8:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <soundPlay+0x4b4>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	701a      	strb	r2, [r3, #0]
				while(curBuf <= bufLast)
 8002afe:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <soundPlay+0x4d0>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <soundPlay+0x4d4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d800      	bhi.n	8002b0c <soundPlay+0x4a0>
 8002b0a:	e712      	b.n	8002932 <soundPlay+0x2c6>
					}
				}
				cmd2Execute=0;
 8002b0c:	4b0d      	ldr	r3, [pc, #52]	; (8002b44 <soundPlay+0x4d8>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	701a      	strb	r2, [r3, #0]
//				GPIOC->ODR |= 1 << 6;	//set BF
				return;
 8002b12:	e000      	b.n	8002b16 <soundPlay+0x4aa>
				 return;
 8002b14:	46c0      	nop			; (mov r8, r8)
			}
 8002b16:	0018      	movs	r0, r3
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	b00d      	add	sp, #52	; 0x34
 8002b1c:	bd90      	pop	{r4, r7, pc}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	2000281c 	.word	0x2000281c
 8002b24:	20002814 	.word	0x20002814
 8002b28:	50000400 	.word	0x50000400
 8002b2c:	fffffdff 	.word	0xfffffdff
 8002b30:	20000178 	.word	0x20000178
 8002b34:	00001388 	.word	0x00001388
 8002b38:	20002414 	.word	0x20002414
 8002b3c:	2000240c 	.word	0x2000240c
 8002b40:	20002820 	.word	0x20002820
 8002b44:	20000402 	.word	0x20000402

08002b48 <sound_half_transfer_callback>:
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void sound_half_transfer_callback()
		{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
			half_of_buf = 2;
 8002b4c:	4b02      	ldr	r3, [pc, #8]	; (8002b58 <sound_half_transfer_callback+0x10>)
 8002b4e:	2202      	movs	r2, #2
 8002b50:	701a      	strb	r2, [r3, #0]
		}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	2000281c 	.word	0x2000281c

08002b5c <sound_full_transfer_callback>:
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void sound_full_transfer_callback()
		{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0

			if(curBuf < (bufLast - 1))
 8002b60:	4b16      	ldr	r3, [pc, #88]	; (8002bbc <sound_full_transfer_callback+0x60>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	1e5a      	subs	r2, r3, #1
 8002b66:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <sound_full_transfer_callback+0x64>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d910      	bls.n	8002b90 <sound_full_transfer_callback+0x34>
			{
//				HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*) & soundBuf[0], (bufLen >> 1));
				HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*) & soundBuf[0], lenOfData);
 8002b6e:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <sound_full_transfer_callback+0x68>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	4914      	ldr	r1, [pc, #80]	; (8002bc8 <sound_full_transfer_callback+0x6c>)
 8002b76:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <sound_full_transfer_callback+0x70>)
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f004 f973 	bl	8006e64 <HAL_I2S_Transmit_DMA>
				half_of_buf = 0;
 8002b7e:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <sound_full_transfer_callback+0x74>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]
				curBuf += 1;
 8002b84:	4b0e      	ldr	r3, [pc, #56]	; (8002bc0 <sound_full_transfer_callback+0x64>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <sound_full_transfer_callback+0x64>)
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	e013      	b.n	8002bb8 <sound_full_transfer_callback+0x5c>
			}
			else
			{
				HAL_I2S_DMAStop(&hi2s1);
 8002b90:	4b0e      	ldr	r3, [pc, #56]	; (8002bcc <sound_full_transfer_callback+0x70>)
 8002b92:	0018      	movs	r0, r3
 8002b94:	f004 fa12 	bl	8006fbc <HAL_I2S_DMAStop>
				isSoundOver = 1;
 8002b98:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <sound_full_transfer_callback+0x78>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	701a      	strb	r2, [r3, #0]
				cmd2Execute=0;
 8002b9e:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <sound_full_transfer_callback+0x7c>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	701a      	strb	r2, [r3, #0]
				half_of_buf = 3;
 8002ba4:	4b0a      	ldr	r3, [pc, #40]	; (8002bd0 <sound_full_transfer_callback+0x74>)
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	701a      	strb	r2, [r3, #0]
//				speakerMute();
//				HAL_Delay(1);
				GPIOC->ODR |= 1 << 6;	//set BF
 8002baa:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <sound_full_transfer_callback+0x80>)
 8002bac:	695a      	ldr	r2, [r3, #20]
 8002bae:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <sound_full_transfer_callback+0x80>)
 8002bb0:	2140      	movs	r1, #64	; 0x40
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	615a      	str	r2, [r3, #20]
				return;
 8002bb6:	46c0      	nop			; (mov r8, r8)
			}

		}
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20002820 	.word	0x20002820
 8002bc0:	2000240c 	.word	0x2000240c
 8002bc4:	20002814 	.word	0x20002814
 8002bc8:	20002414 	.word	0x20002414
 8002bcc:	200000e0 	.word	0x200000e0
 8002bd0:	2000281c 	.word	0x2000281c
 8002bd4:	20002824 	.word	0x20002824
 8002bd8:	20000402 	.word	0x20000402
 8002bdc:	50000800 	.word	0x50000800

08002be0 <setVolume>:
		//=============================================================================================
			void setVolume(uint8_t AMP, uint8_t DAC_Gain, uint8_t volume)
			{
 8002be0:	b590      	push	{r4, r7, lr}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	0004      	movs	r4, r0
 8002be8:	0008      	movs	r0, r1
 8002bea:	0011      	movs	r1, r2
 8002bec:	1dfb      	adds	r3, r7, #7
 8002bee:	1c22      	adds	r2, r4, #0
 8002bf0:	701a      	strb	r2, [r3, #0]
 8002bf2:	1dbb      	adds	r3, r7, #6
 8002bf4:	1c02      	adds	r2, r0, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
 8002bf8:	1d7b      	adds	r3, r7, #5
 8002bfa:	1c0a      	adds	r2, r1, #0
 8002bfc:	701a      	strb	r2, [r3, #0]
				uint8_t volumeResult = 0;
 8002bfe:	210f      	movs	r1, #15
 8002c00:	187b      	adds	r3, r7, r1
 8002c02:	2200      	movs	r2, #0
 8002c04:	701a      	strb	r2, [r3, #0]
				volumeResult = 116 - (volume * 10);
 8002c06:	1d7b      	adds	r3, r7, #5
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	1c1a      	adds	r2, r3, #0
 8002c0c:	0152      	lsls	r2, r2, #5
 8002c0e:	1ad2      	subs	r2, r2, r3
 8002c10:	0092      	lsls	r2, r2, #2
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	18db      	adds	r3, r3, r3
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	000c      	movs	r4, r1
 8002c1a:	187b      	adds	r3, r7, r1
 8002c1c:	3274      	adds	r2, #116	; 0x74
 8002c1e:	701a      	strb	r2, [r3, #0]
				AMP = 16*5;
 8002c20:	1dfb      	adds	r3, r7, #7
 8002c22:	2250      	movs	r2, #80	; 0x50
 8002c24:	701a      	strb	r2, [r3, #0]
				DAC_Gain = 48;
 8002c26:	1dbb      	adds	r3, r7, #6
 8002c28:	2230      	movs	r2, #48	; 0x30
 8002c2a:	701a      	strb	r2, [r3, #0]
				I2C_SOUND_ChangePage(0x00);
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	f7fe fe0b 	bl	8001848 <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x41, DAC_Gain);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000) cnDacValueOn by SB
 8002c32:	1dbb      	adds	r3, r7, #6
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	0019      	movs	r1, r3
 8002c38:	2041      	movs	r0, #65	; 0x41
 8002c3a:	f7fe fe23 	bl	8001884 <WriteReg_I2C_SOUND>
					I2C_SOUND_ChangePage(0x01);
 8002c3e:	2001      	movs	r0, #1
 8002c40:	f7fe fe02 	bl	8001848 <I2C_SOUND_ChangePage>
					WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 8002c44:	2100      	movs	r1, #0
 8002c46:	2010      	movs	r0, #16
 8002c48:	f7fe fe1c 	bl	8001884 <WriteReg_I2C_SOUND>
					WriteReg_I2C_SOUND(0x2E, volumeResult);	//SPK attn. Gain =0dB (P1, R46, 0d - 116 d, 255d)
 8002c4c:	193b      	adds	r3, r7, r4
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	0019      	movs	r1, r3
 8002c52:	202e      	movs	r0, #46	; 0x2e
 8002c54:	f7fe fe16 	bl	8001884 <WriteReg_I2C_SOUND>
					WriteReg_I2C_SOUND(0x30, AMP);	//SPK driver Gain=6.0dB (P1, R48, 16d - 80d)
 8002c58:	1dfb      	adds	r3, r7, #7
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	0019      	movs	r1, r3
 8002c5e:	2030      	movs	r0, #48	; 0x30
 8002c60:	f7fe fe10 	bl	8001884 <WriteReg_I2C_SOUND>
//					WriteReg_I2C_SOUND(0x30, volume);	//SPK driver Gain=6.0dB (P1, R48, D6-D4=001
					HAL_Delay(3);
 8002c64:	2003      	movs	r0, #3
 8002c66:	f001 fdd7 	bl	8004818 <HAL_Delay>
			}
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	b005      	add	sp, #20
 8002c70:	bd90      	pop	{r4, r7, pc}

08002c72 <speakerMute>:
			//=============================================================================================
			void speakerMute(void)
			{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	af00      	add	r7, sp, #0
				I2C_SOUND_ChangePage(0x01);
 8002c76:	2001      	movs	r0, #1
 8002c78:	f7fe fde6 	bl	8001848 <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x2D, 0);
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	202d      	movs	r0, #45	; 0x2d
 8002c80:	f7fe fe00 	bl	8001884 <WriteReg_I2C_SOUND>
			}
 8002c84:	46c0      	nop			; (mov r8, r8)
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <speakerPowerUp>:
			//=============================================================================================
			void speakerPowerUp(void)
			{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	af00      	add	r7, sp, #0
				I2C_SOUND_ChangePage(0x01);
 8002c8e:	2001      	movs	r0, #1
 8002c90:	f7fe fdda 	bl	8001848 <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x2D, 2);
 8002c94:	2102      	movs	r1, #2
 8002c96:	202d      	movs	r0, #45	; 0x2d
 8002c98:	f7fe fdf4 	bl	8001884 <WriteReg_I2C_SOUND>
			}
 8002c9c:	46c0      	nop			; (mov r8, r8)
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOB->ODR |= 1 << 9;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 8002caa:	1d3b      	adds	r3, r7, #4
 8002cac:	4a29      	ldr	r2, [pc, #164]	; (8002d54 <MEM_GetID+0xb0>)
 8002cae:	7812      	ldrb	r2, [r2, #0]
 8002cb0:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 8002cb2:	1dfb      	adds	r3, r7, #7
 8002cb4:	229e      	movs	r2, #158	; 0x9e
 8002cb6:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 <<9);	//reset cs
 8002cb8:	4b27      	ldr	r3, [pc, #156]	; (8002d58 <MEM_GetID+0xb4>)
 8002cba:	695a      	ldr	r2, [r3, #20]
 8002cbc:	4b26      	ldr	r3, [pc, #152]	; (8002d58 <MEM_GetID+0xb4>)
 8002cbe:	4927      	ldr	r1, [pc, #156]	; (8002d5c <MEM_GetID+0xb8>)
 8002cc0:	400a      	ands	r2, r1
 8002cc2:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 8002cc4:	1df9      	adds	r1, r7, #7
 8002cc6:	4826      	ldr	r0, [pc, #152]	; (8002d60 <MEM_GetID+0xbc>)
 8002cc8:	2332      	movs	r3, #50	; 0x32
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f005 fe76 	bl	80089bc <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002cd0:	23fa      	movs	r3, #250	; 0xfa
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	1d39      	adds	r1, r7, #4
 8002cd6:	4822      	ldr	r0, [pc, #136]	; (8002d60 <MEM_GetID+0xbc>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f005 ffc7 	bl	8008c6c <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 8002cde:	1d3b      	adds	r3, r7, #4
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	001a      	movs	r2, r3
 8002ce4:	4b1f      	ldr	r3, [pc, #124]	; (8002d64 <MEM_GetID+0xc0>)
 8002ce6:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 8002ce8:	4b1e      	ldr	r3, [pc, #120]	; (8002d64 <MEM_GetID+0xc0>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	021a      	lsls	r2, r3, #8
 8002cee:	4b1d      	ldr	r3, [pc, #116]	; (8002d64 <MEM_GetID+0xc0>)
 8002cf0:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002cf2:	23fa      	movs	r3, #250	; 0xfa
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	1d39      	adds	r1, r7, #4
 8002cf8:	4819      	ldr	r0, [pc, #100]	; (8002d60 <MEM_GetID+0xbc>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f005 ffb6 	bl	8008c6c <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002d00:	1d3b      	adds	r3, r7, #4
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	001a      	movs	r2, r3
 8002d06:	4b17      	ldr	r3, [pc, #92]	; (8002d64 <MEM_GetID+0xc0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	18d2      	adds	r2, r2, r3
 8002d0c:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <MEM_GetID+0xc0>)
 8002d0e:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 8002d10:	4b14      	ldr	r3, [pc, #80]	; (8002d64 <MEM_GetID+0xc0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	021a      	lsls	r2, r3, #8
 8002d16:	4b13      	ldr	r3, [pc, #76]	; (8002d64 <MEM_GetID+0xc0>)
 8002d18:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002d1a:	23fa      	movs	r3, #250	; 0xfa
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	1d39      	adds	r1, r7, #4
 8002d20:	480f      	ldr	r0, [pc, #60]	; (8002d60 <MEM_GetID+0xbc>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	f005 ffa2 	bl	8008c6c <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002d28:	1d3b      	adds	r3, r7, #4
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	001a      	movs	r2, r3
 8002d2e:	4b0d      	ldr	r3, [pc, #52]	; (8002d64 <MEM_GetID+0xc0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	18d2      	adds	r2, r2, r3
 8002d34:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <MEM_GetID+0xc0>)
 8002d36:	601a      	str	r2, [r3, #0]
		GPIOB->ODR |= 1 << 9;                    			// set cs
 8002d38:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <MEM_GetID+0xb4>)
 8002d3a:	695a      	ldr	r2, [r3, #20]
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <MEM_GetID+0xb4>)
 8002d3e:	2180      	movs	r1, #128	; 0x80
 8002d40:	0089      	lsls	r1, r1, #2
 8002d42:	430a      	orrs	r2, r1
 8002d44:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 8002d46:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <MEM_GetID+0xc0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
	}
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	b002      	add	sp, #8
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	0800c9f4 	.word	0x0800c9f4
 8002d58:	50000400 	.word	0x50000400
 8002d5c:	fffffdff 	.word	0xfffffdff
 8002d60:	20000178 	.word	0x20000178
 8002d64:	200003c4 	.word	0x200003c4

08002d68 <cmdExecute>:
	uint16_t Scount(void){
		LIS3DHreadData();

	}
//====================================================================================================================
	void cmdExecute(uint8_t cmd2Execute){
 8002d68:	b590      	push	{r4, r7, lr}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af02      	add	r7, sp, #8
 8002d6e:	0002      	movs	r2, r0
 8002d70:	1dfb      	adds	r3, r7, #7
 8002d72:	701a      	strb	r2, [r3, #0]
		if(cmd2Execute==0x10){return;}	// protection against short peaks while cmd 10h
 8002d74:	1dfb      	adds	r3, r7, #7
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b10      	cmp	r3, #16
 8002d7a:	d100      	bne.n	8002d7e <cmdExecute+0x16>
 8002d7c:	e0e0      	b.n	8002f40 <cmdExecute+0x1d8>
//		if(soundReady==0){return;}
//		if(cmd[0]==00){return;}
		if (bf4me!=0x00){return;}	// protection against false BF resets
 8002d7e:	4b74      	ldr	r3, [pc, #464]	; (8002f50 <cmdExecute+0x1e8>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d000      	beq.n	8002d88 <cmdExecute+0x20>
 8002d86:	e0dd      	b.n	8002f44 <cmdExecute+0x1dc>
		if (cmd2Execute == 0x00){return;}	// protection against false BF resets
 8002d88:	1dfb      	adds	r3, r7, #7
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d100      	bne.n	8002d92 <cmdExecute+0x2a>
 8002d90:	e0da      	b.n	8002f48 <cmdExecute+0x1e0>
		USART2->ICR|=USART_ICR_ORECF;
 8002d92:	4b70      	ldr	r3, [pc, #448]	; (8002f54 <cmdExecute+0x1ec>)
 8002d94:	6a1a      	ldr	r2, [r3, #32]
 8002d96:	4b6f      	ldr	r3, [pc, #444]	; (8002f54 <cmdExecute+0x1ec>)
 8002d98:	2108      	movs	r1, #8
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	621a      	str	r2, [r3, #32]
		if(cmd2Execute==0x02){}
		if(cmd2Execute==0x03){}
		if(cmd2Execute==0x04){}
		if(cmd2Execute==0x10){}

		if(cmd2Execute==0x11)
 8002d9e:	1dfb      	adds	r3, r7, #7
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b11      	cmp	r3, #17
 8002da4:	d117      	bne.n	8002dd6 <cmdExecute+0x6e>
		{
			GPIOC->ODR &=~ GPIO_ODR_OD6;
 8002da6:	4b6c      	ldr	r3, [pc, #432]	; (8002f58 <cmdExecute+0x1f0>)
 8002da8:	695a      	ldr	r2, [r3, #20]
 8002daa:	4b6b      	ldr	r3, [pc, #428]	; (8002f58 <cmdExecute+0x1f0>)
 8002dac:	2140      	movs	r1, #64	; 0x40
 8002dae:	438a      	bics	r2, r1
 8002db0:	615a      	str	r2, [r3, #20]
			bf4me=0x11;	//set BF flag 4 me
 8002db2:	4b67      	ldr	r3, [pc, #412]	; (8002f50 <cmdExecute+0x1e8>)
 8002db4:	2211      	movs	r2, #17
 8002db6:	701a      	strb	r2, [r3, #0]
			cmdCur = 0x11;
 8002db8:	4b68      	ldr	r3, [pc, #416]	; (8002f5c <cmdExecute+0x1f4>)
 8002dba:	2211      	movs	r2, #17
 8002dbc:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowFullScreen(picNum);
			weoShowFullScreenDMA(picNum);
 8002dbe:	4b68      	ldr	r3, [pc, #416]	; (8002f60 <cmdExecute+0x1f8>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f7ff fad0 	bl	8002368 <weoShowFullScreenDMA>
			USART2->ICR|=USART_ICR_ORECF;
 8002dc8:	4b62      	ldr	r3, [pc, #392]	; (8002f54 <cmdExecute+0x1ec>)
 8002dca:	6a1a      	ldr	r2, [r3, #32]
 8002dcc:	4b61      	ldr	r3, [pc, #388]	; (8002f54 <cmdExecute+0x1ec>)
 8002dce:	2108      	movs	r1, #8
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	621a      	str	r2, [r3, #32]
			return;
 8002dd4:	e0b9      	b.n	8002f4a <cmdExecute+0x1e2>
		}

		if(cmd2Execute==0x12)
 8002dd6:	1dfb      	adds	r3, r7, #7
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b12      	cmp	r3, #18
 8002ddc:	d121      	bne.n	8002e22 <cmdExecute+0xba>
		{
			bf4me=0x12;	//set BF flag 4 me
 8002dde:	4b5c      	ldr	r3, [pc, #368]	; (8002f50 <cmdExecute+0x1e8>)
 8002de0:	2212      	movs	r2, #18
 8002de2:	701a      	strb	r2, [r3, #0]
			cmdCur = 0x12;
 8002de4:	4b5d      	ldr	r3, [pc, #372]	; (8002f5c <cmdExecute+0x1f4>)
 8002de6:	2212      	movs	r2, #18
 8002de8:	701a      	strb	r2, [r3, #0]
			if(picWithSound == 1)
 8002dea:	4b5e      	ldr	r3, [pc, #376]	; (8002f64 <cmdExecute+0x1fc>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d105      	bne.n	8002dfe <cmdExecute+0x96>
			{
				picWithSound = 0;
 8002df2:	4b5c      	ldr	r3, [pc, #368]	; (8002f64 <cmdExecute+0x1fc>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]
				soundPlay(14);
 8002df8:	200e      	movs	r0, #14
 8002dfa:	f7ff fc37 	bl	800266c <soundPlay>
			}
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
			weoShowSmallImageDMA(picNum,imX,imY);
 8002dfe:	4b58      	ldr	r3, [pc, #352]	; (8002f60 <cmdExecute+0x1f8>)
 8002e00:	7818      	ldrb	r0, [r3, #0]
 8002e02:	4b59      	ldr	r3, [pc, #356]	; (8002f68 <cmdExecute+0x200>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	b2d9      	uxtb	r1, r3
 8002e08:	4b58      	ldr	r3, [pc, #352]	; (8002f6c <cmdExecute+0x204>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	001a      	movs	r2, r3
 8002e10:	f7ff fb22 	bl	8002458 <weoShowSmallImageDMA>
//			weoShowSmallImage(picNum,imX,imY);
			USART2->ICR|=USART_ICR_ORECF;
 8002e14:	4b4f      	ldr	r3, [pc, #316]	; (8002f54 <cmdExecute+0x1ec>)
 8002e16:	6a1a      	ldr	r2, [r3, #32]
 8002e18:	4b4e      	ldr	r3, [pc, #312]	; (8002f54 <cmdExecute+0x1ec>)
 8002e1a:	2108      	movs	r1, #8
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	621a      	str	r2, [r3, #32]
//			GPIOC->ODR |= 1 << 6;	//set BF
			return;
 8002e20:	e093      	b.n	8002f4a <cmdExecute+0x1e2>
		}

		if(cmd2Execute==0x13)
 8002e22:	1dfb      	adds	r3, r7, #7
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b13      	cmp	r3, #19
 8002e28:	d115      	bne.n	8002e56 <cmdExecute+0xee>
		{
			bf4me=0x13;	//set BF flag 4 me
 8002e2a:	4b49      	ldr	r3, [pc, #292]	; (8002f50 <cmdExecute+0x1e8>)
 8002e2c:	2213      	movs	r2, #19
 8002e2e:	701a      	strb	r2, [r3, #0]
			cmdCur = 0x13;
 8002e30:	4b4a      	ldr	r3, [pc, #296]	; (8002f5c <cmdExecute+0x1f4>)
 8002e32:	2213      	movs	r2, #19
 8002e34:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY,strLen,fontInfo,dataASCII);
 8002e36:	4b4c      	ldr	r3, [pc, #304]	; (8002f68 <cmdExecute+0x200>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	b2d8      	uxtb	r0, r3
 8002e3c:	4b4b      	ldr	r3, [pc, #300]	; (8002f6c <cmdExecute+0x204>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	b2d9      	uxtb	r1, r3
 8002e42:	4b4b      	ldr	r3, [pc, #300]	; (8002f70 <cmdExecute+0x208>)
 8002e44:	781a      	ldrb	r2, [r3, #0]
 8002e46:	4b4b      	ldr	r3, [pc, #300]	; (8002f74 <cmdExecute+0x20c>)
 8002e48:	781c      	ldrb	r4, [r3, #0]
 8002e4a:	4b4b      	ldr	r3, [pc, #300]	; (8002f78 <cmdExecute+0x210>)
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	0023      	movs	r3, r4
 8002e50:	f000 f89c 	bl	8002f8c <printASCIIarray>
			return;
 8002e54:	e079      	b.n	8002f4a <cmdExecute+0x1e2>
		}

		if(cmd2Execute==0x14)
 8002e56:	1dfb      	adds	r3, r7, #7
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b14      	cmp	r3, #20
 8002e5c:	d116      	bne.n	8002e8c <cmdExecute+0x124>
		{
//			if(soundReady!=1){return;}
			bf4me=0x14;	//set BF flag 4 me
 8002e5e:	4b3c      	ldr	r3, [pc, #240]	; (8002f50 <cmdExecute+0x1e8>)
 8002e60:	2214      	movs	r2, #20
 8002e62:	701a      	strb	r2, [r3, #0]
			cmdCur = 0x14;
 8002e64:	4b3d      	ldr	r3, [pc, #244]	; (8002f5c <cmdExecute+0x1f4>)
 8002e66:	2214      	movs	r2, #20
 8002e68:	701a      	strb	r2, [r3, #0]
			isSoundOver = 1;
 8002e6a:	4b44      	ldr	r3, [pc, #272]	; (8002f7c <cmdExecute+0x214>)
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	701a      	strb	r2, [r3, #0]
			soundPlay(numSound);
 8002e70:	4b43      	ldr	r3, [pc, #268]	; (8002f80 <cmdExecute+0x218>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	0018      	movs	r0, r3
 8002e76:	f7ff fbf9 	bl	800266c <soundPlay>
			speakerMute();
 8002e7a:	f7ff fefa 	bl	8002c72 <speakerMute>
//			GPIOC->ODR |= 1 << 6;	//set BF
			USART2->ICR|=USART_ICR_ORECF;
 8002e7e:	4b35      	ldr	r3, [pc, #212]	; (8002f54 <cmdExecute+0x1ec>)
 8002e80:	6a1a      	ldr	r2, [r3, #32]
 8002e82:	4b34      	ldr	r3, [pc, #208]	; (8002f54 <cmdExecute+0x1ec>)
 8002e84:	2108      	movs	r1, #8
 8002e86:	430a      	orrs	r2, r1
 8002e88:	621a      	str	r2, [r3, #32]
			return;
 8002e8a:	e05e      	b.n	8002f4a <cmdExecute+0x1e2>
		}

		if(cmd2Execute==0x15)
 8002e8c:	1dfb      	adds	r3, r7, #7
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b15      	cmp	r3, #21
 8002e92:	d147      	bne.n	8002f24 <cmdExecute+0x1bc>
		{
			bf4me=0x15;	//set BF flag 4 me
 8002e94:	4b2e      	ldr	r3, [pc, #184]	; (8002f50 <cmdExecute+0x1e8>)
 8002e96:	2215      	movs	r2, #21
 8002e98:	701a      	strb	r2, [r3, #0]
			if(volume==0x00)
 8002e9a:	4b3a      	ldr	r3, [pc, #232]	; (8002f84 <cmdExecute+0x21c>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <cmdExecute+0x13e>
			{
				speakerMute();
 8002ea2:	f7ff fee6 	bl	8002c72 <speakerMute>
			}
			setVolume(0, 0, volume);
 8002ea6:	4b37      	ldr	r3, [pc, #220]	; (8002f84 <cmdExecute+0x21c>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	001a      	movs	r2, r3
 8002eac:	2100      	movs	r1, #0
 8002eae:	2000      	movs	r0, #0
 8002eb0:	f7ff fe96 	bl	8002be0 <setVolume>
			if(contrast==0x00)
 8002eb4:	4b34      	ldr	r3, [pc, #208]	; (8002f88 <cmdExecute+0x220>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d102      	bne.n	8002ec2 <cmdExecute+0x15a>
			{
				weoClear();
 8002ebc:	f7fe faf2 	bl	80014a4 <weoClear>
 8002ec0:	e029      	b.n	8002f16 <cmdExecute+0x1ae>
			}
			else{
				GPIOA->ODR &= ~(1 << 6);	//reset cs
 8002ec2:	23a0      	movs	r3, #160	; 0xa0
 8002ec4:	05db      	lsls	r3, r3, #23
 8002ec6:	695a      	ldr	r2, [r3, #20]
 8002ec8:	23a0      	movs	r3, #160	; 0xa0
 8002eca:	05db      	lsls	r3, r3, #23
 8002ecc:	2140      	movs	r1, #64	; 0x40
 8002ece:	438a      	bics	r2, r1
 8002ed0:	615a      	str	r2, [r3, #20]
				GPIOA->ODR &= ~(1 << 7);	// reset dc
 8002ed2:	23a0      	movs	r3, #160	; 0xa0
 8002ed4:	05db      	lsls	r3, r3, #23
 8002ed6:	695a      	ldr	r2, [r3, #20]
 8002ed8:	23a0      	movs	r3, #160	; 0xa0
 8002eda:	05db      	lsls	r3, r3, #23
 8002edc:	2180      	movs	r1, #128	; 0x80
 8002ede:	438a      	bics	r2, r1
 8002ee0:	615a      	str	r2, [r3, #20]
				USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8002ee2:	2081      	movs	r0, #129	; 0x81
 8002ee4:	f7fe fa30 	bl	8001348 <USART_AS_SPI_sendCMD>
				USART_AS_SPI_sendCMD(contrast*0x10);
 8002ee8:	4b27      	ldr	r3, [pc, #156]	; (8002f88 <cmdExecute+0x220>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f7fe fa29 	bl	8001348 <USART_AS_SPI_sendCMD>
				GPIOA->ODR |= 1 << 7;	//set dc
 8002ef6:	23a0      	movs	r3, #160	; 0xa0
 8002ef8:	05db      	lsls	r3, r3, #23
 8002efa:	695a      	ldr	r2, [r3, #20]
 8002efc:	23a0      	movs	r3, #160	; 0xa0
 8002efe:	05db      	lsls	r3, r3, #23
 8002f00:	2180      	movs	r1, #128	; 0x80
 8002f02:	430a      	orrs	r2, r1
 8002f04:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= 1 << 6;	//set cs
 8002f06:	23a0      	movs	r3, #160	; 0xa0
 8002f08:	05db      	lsls	r3, r3, #23
 8002f0a:	695a      	ldr	r2, [r3, #20]
 8002f0c:	23a0      	movs	r3, #160	; 0xa0
 8002f0e:	05db      	lsls	r3, r3, #23
 8002f10:	2140      	movs	r1, #64	; 0x40
 8002f12:	430a      	orrs	r2, r1
 8002f14:	615a      	str	r2, [r3, #20]
			}
			GPIOC->ODR |= 1 << 6;	//set BF
 8002f16:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <cmdExecute+0x1f0>)
 8002f18:	695a      	ldr	r2, [r3, #20]
 8002f1a:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <cmdExecute+0x1f0>)
 8002f1c:	2140      	movs	r1, #64	; 0x40
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	615a      	str	r2, [r3, #20]
			return;
 8002f22:	e012      	b.n	8002f4a <cmdExecute+0x1e2>
		}

		if(cmd2Execute==0x16)
 8002f24:	1dfb      	adds	r3, r7, #7
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b16      	cmp	r3, #22
 8002f2a:	d102      	bne.n	8002f32 <cmdExecute+0x1ca>
		{
			bf4me=0x16;	//set BF flag 4 me
 8002f2c:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <cmdExecute+0x1e8>)
 8002f2e:	2216      	movs	r2, #22
 8002f30:	701a      	strb	r2, [r3, #0]
//		if(cmd2Execute=0x00){
//
//				}
//			}
//		}
		USART2->ICR|=USART_ICR_ORECF;
 8002f32:	4b08      	ldr	r3, [pc, #32]	; (8002f54 <cmdExecute+0x1ec>)
 8002f34:	6a1a      	ldr	r2, [r3, #32]
 8002f36:	4b07      	ldr	r3, [pc, #28]	; (8002f54 <cmdExecute+0x1ec>)
 8002f38:	2108      	movs	r1, #8
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	621a      	str	r2, [r3, #32]
 8002f3e:	e004      	b.n	8002f4a <cmdExecute+0x1e2>
		if(cmd2Execute==0x10){return;}	// protection against short peaks while cmd 10h
 8002f40:	46c0      	nop			; (mov r8, r8)
 8002f42:	e002      	b.n	8002f4a <cmdExecute+0x1e2>
		if (bf4me!=0x00){return;}	// protection against false BF resets
 8002f44:	46c0      	nop			; (mov r8, r8)
 8002f46:	e000      	b.n	8002f4a <cmdExecute+0x1e2>
		if (cmd2Execute == 0x00){return;}	// protection against false BF resets
 8002f48:	46c0      	nop			; (mov r8, r8)
	}
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b003      	add	sp, #12
 8002f4e:	bd90      	pop	{r4, r7, pc}
 8002f50:	20000404 	.word	0x20000404
 8002f54:	40004400 	.word	0x40004400
 8002f58:	50000800 	.word	0x50000800
 8002f5c:	20000403 	.word	0x20000403
 8002f60:	2000039d 	.word	0x2000039d
 8002f64:	200003e5 	.word	0x200003e5
 8002f68:	200003a4 	.word	0x200003a4
 8002f6c:	200003a8 	.word	0x200003a8
 8002f70:	200003a2 	.word	0x200003a2
 8002f74:	20002408 	.word	0x20002408
 8002f78:	200003b0 	.word	0x200003b0
 8002f7c:	20002824 	.word	0x20002824
 8002f80:	2000039e 	.word	0x2000039e
 8002f84:	2000039f 	.word	0x2000039f
 8002f88:	200003a0 	.word	0x200003a0

08002f8c <printASCIIarray>:
//========================================================================================================================
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t fontInfo,uint8_t dataASCII[]){
 8002f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f8e:	46c6      	mov	lr, r8
 8002f90:	b500      	push	{lr}
 8002f92:	b0a6      	sub	sp, #152	; 0x98
 8002f94:	af02      	add	r7, sp, #8
 8002f96:	0016      	movs	r6, r2
 8002f98:	469c      	mov	ip, r3
 8002f9a:	235f      	movs	r3, #95	; 0x5f
 8002f9c:	18fa      	adds	r2, r7, r3
 8002f9e:	1c03      	adds	r3, r0, #0
 8002fa0:	7013      	strb	r3, [r2, #0]
 8002fa2:	235e      	movs	r3, #94	; 0x5e
 8002fa4:	18fa      	adds	r2, r7, r3
 8002fa6:	1c0b      	adds	r3, r1, #0
 8002fa8:	7013      	strb	r3, [r2, #0]
 8002faa:	225d      	movs	r2, #93	; 0x5d
 8002fac:	18ba      	adds	r2, r7, r2
 8002fae:	1c33      	adds	r3, r6, #0
 8002fb0:	7013      	strb	r3, [r2, #0]
 8002fb2:	265c      	movs	r6, #92	; 0x5c
 8002fb4:	19ba      	adds	r2, r7, r6
 8002fb6:	4663      	mov	r3, ip
 8002fb8:	7013      	strb	r3, [r2, #0]
			uint8_t X_increment,ASCII_height,X_width,ASCII_X,decY,fontCur,contrast,contrastH,contrastL;
			uint16_t i,j,k, symLen;
			ASCII_X=imX;
 8002fba:	2333      	movs	r3, #51	; 0x33
 8002fbc:	2158      	movs	r1, #88	; 0x58
 8002fbe:	185a      	adds	r2, r3, r1
 8002fc0:	19d2      	adds	r2, r2, r7
 8002fc2:	205f      	movs	r0, #95	; 0x5f
 8002fc4:	183b      	adds	r3, r7, r0
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	7013      	strb	r3, [r2, #0]

			contrastL = (fontInfo & 0xF0)>>4;
 8002fca:	202d      	movs	r0, #45	; 0x2d
 8002fcc:	1842      	adds	r2, r0, r1
 8002fce:	19d2      	adds	r2, r2, r7
 8002fd0:	19bb      	adds	r3, r7, r6
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	7013      	strb	r3, [r2, #0]
			contrastH = (contrastL)<<4;
 8002fd8:	262c      	movs	r6, #44	; 0x2c
 8002fda:	1872      	adds	r2, r6, r1
 8002fdc:	19d2      	adds	r2, r2, r7
 8002fde:	1843      	adds	r3, r0, r1
 8002fe0:	19db      	adds	r3, r3, r7
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	7013      	strb	r3, [r2, #0]
			contrast = contrastH|contrastL;
 8002fe8:	232b      	movs	r3, #43	; 0x2b
 8002fea:	000a      	movs	r2, r1
 8002fec:	1859      	adds	r1, r3, r1
 8002fee:	19c9      	adds	r1, r1, r7
 8002ff0:	0013      	movs	r3, r2
 8002ff2:	18f2      	adds	r2, r6, r3
 8002ff4:	19d2      	adds	r2, r2, r7
 8002ff6:	001e      	movs	r6, r3
 8002ff8:	18c0      	adds	r0, r0, r3
 8002ffa:	19c3      	adds	r3, r0, r7
 8002ffc:	7812      	ldrb	r2, [r2, #0]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	4313      	orrs	r3, r2
 8003002:	700b      	strb	r3, [r1, #0]


			decY=0x01;
 8003004:	2134      	movs	r1, #52	; 0x34
 8003006:	0030      	movs	r0, r6
 8003008:	180a      	adds	r2, r1, r0
 800300a:	19d2      	adds	r2, r2, r7
 800300c:	2301      	movs	r3, #1
 800300e:	7013      	strb	r3, [r2, #0]
			if(imY % 2 !=0){
 8003010:	235e      	movs	r3, #94	; 0x5e
 8003012:	18fb      	adds	r3, r7, r3
 8003014:	781a      	ldrb	r2, [r3, #0]
 8003016:	2301      	movs	r3, #1
 8003018:	4013      	ands	r3, r2
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <printASCIIarray+0x9c>
				decY=0x02;
 8003020:	180b      	adds	r3, r1, r0
 8003022:	19da      	adds	r2, r3, r7
 8003024:	2302      	movs	r3, #2
 8003026:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x00)==0){
				fontCur=0;
 8003028:	2135      	movs	r1, #53	; 0x35
 800302a:	2058      	movs	r0, #88	; 0x58
 800302c:	180b      	adds	r3, r1, r0
 800302e:	19da      	adds	r2, r3, r7
 8003030:	2300      	movs	r3, #0
 8003032:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x01)==1){
 8003034:	235c      	movs	r3, #92	; 0x5c
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	781a      	ldrb	r2, [r3, #0]
 800303a:	2301      	movs	r3, #1
 800303c:	4013      	ands	r3, r2
 800303e:	d003      	beq.n	8003048 <printASCIIarray+0xbc>
				fontCur=1;
 8003040:	180b      	adds	r3, r1, r0
 8003042:	19da      	adds	r2, r3, r7
 8003044:	2301      	movs	r3, #1
 8003046:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x02)==2){
 8003048:	235c      	movs	r3, #92	; 0x5c
 800304a:	18fb      	adds	r3, r7, r3
 800304c:	781a      	ldrb	r2, [r3, #0]
 800304e:	2302      	movs	r3, #2
 8003050:	4013      	ands	r3, r2
 8003052:	d005      	beq.n	8003060 <printASCIIarray+0xd4>
				fontCur=2;
 8003054:	2335      	movs	r3, #53	; 0x35
 8003056:	2258      	movs	r2, #88	; 0x58
 8003058:	189b      	adds	r3, r3, r2
 800305a:	19da      	adds	r2, r3, r7
 800305c:	2302      	movs	r3, #2
 800305e:	7013      	strb	r3, [r2, #0]
			}

			if(fontCur==0){
 8003060:	2335      	movs	r3, #53	; 0x35
 8003062:	2258      	movs	r2, #88	; 0x58
 8003064:	189b      	adds	r3, r3, r2
 8003066:	19db      	adds	r3, r3, r7
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d000      	beq.n	8003070 <printASCIIarray+0xe4>
 800306e:	e12e      	b.n	80032ce <printASCIIarray+0x342>
 8003070:	466b      	mov	r3, sp
 8003072:	4698      	mov	r8, r3
				symLen=49;
 8003074:	2128      	movs	r1, #40	; 0x28
 8003076:	0010      	movs	r0, r2
 8003078:	188b      	adds	r3, r1, r2
 800307a:	19da      	adds	r2, r3, r7
 800307c:	2331      	movs	r3, #49	; 0x31
 800307e:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 8003080:	180b      	adds	r3, r1, r0
 8003082:	19db      	adds	r3, r3, r7
 8003084:	881a      	ldrh	r2, [r3, #0]
 8003086:	0013      	movs	r3, r2
 8003088:	3b01      	subs	r3, #1
 800308a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800308c:	62ba      	str	r2, [r7, #40]	; 0x28
 800308e:	2300      	movs	r3, #0
 8003090:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003094:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003096:	0003      	movs	r3, r0
 8003098:	0f5b      	lsrs	r3, r3, #29
 800309a:	000e      	movs	r6, r1
 800309c:	00f5      	lsls	r5, r6, #3
 800309e:	431d      	orrs	r5, r3
 80030a0:	0003      	movs	r3, r0
 80030a2:	00dc      	lsls	r4, r3, #3
 80030a4:	623a      	str	r2, [r7, #32]
 80030a6:	2300      	movs	r3, #0
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
 80030aa:	6a38      	ldr	r0, [r7, #32]
 80030ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030ae:	0003      	movs	r3, r0
 80030b0:	0f5b      	lsrs	r3, r3, #29
 80030b2:	000c      	movs	r4, r1
 80030b4:	00e4      	lsls	r4, r4, #3
 80030b6:	657c      	str	r4, [r7, #84]	; 0x54
 80030b8:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 80030ba:	431c      	orrs	r4, r3
 80030bc:	657c      	str	r4, [r7, #84]	; 0x54
 80030be:	0003      	movs	r3, r0
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	653b      	str	r3, [r7, #80]	; 0x50
 80030c4:	0013      	movs	r3, r2
 80030c6:	3307      	adds	r3, #7
 80030c8:	08db      	lsrs	r3, r3, #3
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	466a      	mov	r2, sp
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	469d      	mov	sp, r3
 80030d2:	ab02      	add	r3, sp, #8
 80030d4:	3300      	adds	r3, #0
 80030d6:	67bb      	str	r3, [r7, #120]	; 0x78
				X_increment=0x07;
 80030d8:	231f      	movs	r3, #31
 80030da:	2158      	movs	r1, #88	; 0x58
 80030dc:	185b      	adds	r3, r3, r1
 80030de:	19da      	adds	r2, r3, r7
 80030e0:	2307      	movs	r3, #7
 80030e2:	7013      	strb	r3, [r2, #0]
				ASCII_height=0x0E;
 80030e4:	231e      	movs	r3, #30
 80030e6:	185b      	adds	r3, r3, r1
 80030e8:	19da      	adds	r2, r3, r7
 80030ea:	230e      	movs	r3, #14
 80030ec:	7013      	strb	r3, [r2, #0]
				for(i=0;i<strLen;i++){
 80030ee:	2336      	movs	r3, #54	; 0x36
 80030f0:	185b      	adds	r3, r3, r1
 80030f2:	19da      	adds	r2, r3, r7
 80030f4:	2300      	movs	r3, #0
 80030f6:	8013      	strh	r3, [r2, #0]
 80030f8:	e0bc      	b.n	8003274 <printASCIIarray+0x2e8>
					for(j=0;j<symLen;j++){
 80030fa:	2330      	movs	r3, #48	; 0x30
 80030fc:	2258      	movs	r2, #88	; 0x58
 80030fe:	189b      	adds	r3, r3, r2
 8003100:	19da      	adds	r2, r3, r7
 8003102:	2300      	movs	r3, #0
 8003104:	8013      	strh	r3, [r2, #0]
 8003106:	e025      	b.n	8003154 <printASCIIarray+0x1c8>
						weoBuffer[j]=F1[dataASCII[i]][j];
 8003108:	2336      	movs	r3, #54	; 0x36
 800310a:	2158      	movs	r1, #88	; 0x58
 800310c:	185b      	adds	r3, r3, r1
 800310e:	19db      	adds	r3, r3, r7
 8003110:	881a      	ldrh	r2, [r3, #0]
 8003112:	23a8      	movs	r3, #168	; 0xa8
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	189b      	adds	r3, r3, r2
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	001d      	movs	r5, r3
 800311e:	2230      	movs	r2, #48	; 0x30
 8003120:	1853      	adds	r3, r2, r1
 8003122:	19db      	adds	r3, r3, r7
 8003124:	8818      	ldrh	r0, [r3, #0]
 8003126:	0016      	movs	r6, r2
 8003128:	1853      	adds	r3, r2, r1
 800312a:	19db      	adds	r3, r3, r7
 800312c:	881c      	ldrh	r4, [r3, #0]
 800312e:	49e2      	ldr	r1, [pc, #904]	; (80034b8 <printASCIIarray+0x52c>)
 8003130:	002a      	movs	r2, r5
 8003132:	00d2      	lsls	r2, r2, #3
 8003134:	1b52      	subs	r2, r2, r5
 8003136:	00d3      	lsls	r3, r2, #3
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	18cb      	adds	r3, r1, r3
 800313c:	5c1b      	ldrb	r3, [r3, r0]
 800313e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003140:	5513      	strb	r3, [r2, r4]
					for(j=0;j<symLen;j++){
 8003142:	0032      	movs	r2, r6
 8003144:	2158      	movs	r1, #88	; 0x58
 8003146:	1853      	adds	r3, r2, r1
 8003148:	19db      	adds	r3, r3, r7
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	1852      	adds	r2, r2, r1
 800314e:	19d2      	adds	r2, r2, r7
 8003150:	3301      	adds	r3, #1
 8003152:	8013      	strh	r3, [r2, #0]
 8003154:	2330      	movs	r3, #48	; 0x30
 8003156:	2158      	movs	r1, #88	; 0x58
 8003158:	185b      	adds	r3, r3, r1
 800315a:	19da      	adds	r2, r3, r7
 800315c:	2328      	movs	r3, #40	; 0x28
 800315e:	185b      	adds	r3, r3, r1
 8003160:	19db      	adds	r3, r3, r7
 8003162:	8812      	ldrh	r2, [r2, #0]
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d3ce      	bcc.n	8003108 <printASCIIarray+0x17c>
							}
					if(dataASCII[i] != 1)
 800316a:	2336      	movs	r3, #54	; 0x36
 800316c:	185b      	adds	r3, r3, r1
 800316e:	19db      	adds	r3, r3, r7
 8003170:	881a      	ldrh	r2, [r3, #0]
 8003172:	23a8      	movs	r3, #168	; 0xa8
 8003174:	18fb      	adds	r3, r7, r3
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	189b      	adds	r3, r3, r2
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d062      	beq.n	8003246 <printASCIIarray+0x2ba>
					{
						for (k=0;k<symLen;k++){
 8003180:	232e      	movs	r3, #46	; 0x2e
 8003182:	185b      	adds	r3, r3, r1
 8003184:	19da      	adds	r2, r3, r7
 8003186:	2300      	movs	r3, #0
 8003188:	8013      	strh	r3, [r2, #0]
 800318a:	e018      	b.n	80031be <printASCIIarray+0x232>
							weoBuffer[k]=weoBuffer[k] & contrast;
 800318c:	202e      	movs	r0, #46	; 0x2e
 800318e:	2458      	movs	r4, #88	; 0x58
 8003190:	1903      	adds	r3, r0, r4
 8003192:	19db      	adds	r3, r3, r7
 8003194:	881a      	ldrh	r2, [r3, #0]
 8003196:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003198:	5c9a      	ldrb	r2, [r3, r2]
 800319a:	1903      	adds	r3, r0, r4
 800319c:	19db      	adds	r3, r3, r7
 800319e:	8819      	ldrh	r1, [r3, #0]
 80031a0:	232b      	movs	r3, #43	; 0x2b
 80031a2:	191b      	adds	r3, r3, r4
 80031a4:	19db      	adds	r3, r3, r7
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	4013      	ands	r3, r2
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80031ae:	5453      	strb	r3, [r2, r1]
						for (k=0;k<symLen;k++){
 80031b0:	1903      	adds	r3, r0, r4
 80031b2:	19db      	adds	r3, r3, r7
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	1902      	adds	r2, r0, r4
 80031b8:	19d2      	adds	r2, r2, r7
 80031ba:	3301      	adds	r3, #1
 80031bc:	8013      	strh	r3, [r2, #0]
 80031be:	232e      	movs	r3, #46	; 0x2e
 80031c0:	2558      	movs	r5, #88	; 0x58
 80031c2:	195b      	adds	r3, r3, r5
 80031c4:	19da      	adds	r2, r3, r7
 80031c6:	2328      	movs	r3, #40	; 0x28
 80031c8:	195b      	adds	r3, r3, r5
 80031ca:	19db      	adds	r3, r3, r7
 80031cc:	8812      	ldrh	r2, [r2, #0]
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d3db      	bcc.n	800318c <printASCIIarray+0x200>
						}
							weoDrawRectangleFilled(ASCII_X, imY, ASCII_X+X_increment-1, imY + ASCII_height - decY, 0xFF, weoBuffer);
 80031d4:	2033      	movs	r0, #51	; 0x33
 80031d6:	1943      	adds	r3, r0, r5
 80031d8:	19da      	adds	r2, r3, r7
 80031da:	231f      	movs	r3, #31
 80031dc:	001e      	movs	r6, r3
 80031de:	195b      	adds	r3, r3, r5
 80031e0:	19db      	adds	r3, r3, r7
 80031e2:	7812      	ldrb	r2, [r2, #0]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	18d3      	adds	r3, r2, r3
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b2dc      	uxtb	r4, r3
 80031ee:	215e      	movs	r1, #94	; 0x5e
 80031f0:	187a      	adds	r2, r7, r1
 80031f2:	211e      	movs	r1, #30
 80031f4:	194b      	adds	r3, r1, r5
 80031f6:	19db      	adds	r3, r3, r7
 80031f8:	7812      	ldrb	r2, [r2, #0]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	18d3      	adds	r3, r2, r3
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	2134      	movs	r1, #52	; 0x34
 8003202:	194b      	adds	r3, r1, r5
 8003204:	19db      	adds	r3, r3, r7
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	b2da      	uxtb	r2, r3
 800320c:	215e      	movs	r1, #94	; 0x5e
 800320e:	187b      	adds	r3, r7, r1
 8003210:	7819      	ldrb	r1, [r3, #0]
 8003212:	0005      	movs	r5, r0
 8003214:	2358      	movs	r3, #88	; 0x58
 8003216:	18c3      	adds	r3, r0, r3
 8003218:	19db      	adds	r3, r3, r7
 800321a:	7818      	ldrb	r0, [r3, #0]
 800321c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800321e:	9301      	str	r3, [sp, #4]
 8003220:	23ff      	movs	r3, #255	; 0xff
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	0013      	movs	r3, r2
 8003226:	0022      	movs	r2, r4
 8003228:	f7fe f9a0 	bl	800156c <weoDrawRectangleFilled>
							ASCII_X += X_increment;
 800322c:	2058      	movs	r0, #88	; 0x58
 800322e:	182b      	adds	r3, r5, r0
 8003230:	19d9      	adds	r1, r3, r7
 8003232:	182b      	adds	r3, r5, r0
 8003234:	19da      	adds	r2, r3, r7
 8003236:	0033      	movs	r3, r6
 8003238:	181b      	adds	r3, r3, r0
 800323a:	19db      	adds	r3, r3, r7
 800323c:	7812      	ldrb	r2, [r2, #0]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	18d3      	adds	r3, r2, r3
 8003242:	700b      	strb	r3, [r1, #0]
 8003244:	e00d      	b.n	8003262 <printASCIIarray+0x2d6>
					}
					else
					{
						ASCII_X += X_increment;
 8003246:	2333      	movs	r3, #51	; 0x33
 8003248:	2258      	movs	r2, #88	; 0x58
 800324a:	1899      	adds	r1, r3, r2
 800324c:	19c9      	adds	r1, r1, r7
 800324e:	0010      	movs	r0, r2
 8003250:	189b      	adds	r3, r3, r2
 8003252:	19da      	adds	r2, r3, r7
 8003254:	231f      	movs	r3, #31
 8003256:	181b      	adds	r3, r3, r0
 8003258:	19db      	adds	r3, r3, r7
 800325a:	7812      	ldrb	r2, [r2, #0]
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	18d3      	adds	r3, r2, r3
 8003260:	700b      	strb	r3, [r1, #0]
				for(i=0;i<strLen;i++){
 8003262:	2236      	movs	r2, #54	; 0x36
 8003264:	2158      	movs	r1, #88	; 0x58
 8003266:	1853      	adds	r3, r2, r1
 8003268:	19db      	adds	r3, r3, r7
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	1852      	adds	r2, r2, r1
 800326e:	19d2      	adds	r2, r2, r7
 8003270:	3301      	adds	r3, #1
 8003272:	8013      	strh	r3, [r2, #0]
 8003274:	235d      	movs	r3, #93	; 0x5d
 8003276:	18fb      	adds	r3, r7, r3
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	b29a      	uxth	r2, r3
 800327c:	2136      	movs	r1, #54	; 0x36
 800327e:	2058      	movs	r0, #88	; 0x58
 8003280:	180b      	adds	r3, r1, r0
 8003282:	19db      	adds	r3, r3, r7
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	4293      	cmp	r3, r2
 8003288:	d200      	bcs.n	800328c <printASCIIarray+0x300>
 800328a:	e736      	b.n	80030fa <printASCIIarray+0x16e>
					}
				}
				for(i=0;i<symLen;i++)
 800328c:	180b      	adds	r3, r1, r0
 800328e:	19da      	adds	r2, r3, r7
 8003290:	2300      	movs	r3, #0
 8003292:	8013      	strh	r3, [r2, #0]
 8003294:	e00f      	b.n	80032b6 <printASCIIarray+0x32a>
					{
						weoBuffer[j]=0x00;
 8003296:	2330      	movs	r3, #48	; 0x30
 8003298:	2058      	movs	r0, #88	; 0x58
 800329a:	181b      	adds	r3, r3, r0
 800329c:	19db      	adds	r3, r3, r7
 800329e:	8819      	ldrh	r1, [r3, #0]
 80032a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80032a2:	2300      	movs	r3, #0
 80032a4:	5453      	strb	r3, [r2, r1]
				for(i=0;i<symLen;i++)
 80032a6:	2236      	movs	r2, #54	; 0x36
 80032a8:	1813      	adds	r3, r2, r0
 80032aa:	19db      	adds	r3, r3, r7
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	1812      	adds	r2, r2, r0
 80032b0:	19d2      	adds	r2, r2, r7
 80032b2:	3301      	adds	r3, #1
 80032b4:	8013      	strh	r3, [r2, #0]
 80032b6:	2336      	movs	r3, #54	; 0x36
 80032b8:	2158      	movs	r1, #88	; 0x58
 80032ba:	185b      	adds	r3, r3, r1
 80032bc:	19da      	adds	r2, r3, r7
 80032be:	2328      	movs	r3, #40	; 0x28
 80032c0:	185b      	adds	r3, r3, r1
 80032c2:	19db      	adds	r3, r3, r7
 80032c4:	8812      	ldrh	r2, [r2, #0]
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d3e4      	bcc.n	8003296 <printASCIIarray+0x30a>
 80032cc:	46c5      	mov	sp, r8
					}

			}
			if(fontCur==1){
 80032ce:	2335      	movs	r3, #53	; 0x35
 80032d0:	2658      	movs	r6, #88	; 0x58
 80032d2:	199b      	adds	r3, r3, r6
 80032d4:	19db      	adds	r3, r3, r7
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d000      	beq.n	80032de <printASCIIarray+0x352>
 80032dc:	e134      	b.n	8003548 <printASCIIarray+0x5bc>
 80032de:	466b      	mov	r3, sp
 80032e0:	001d      	movs	r5, r3
				symLen=99;
 80032e2:	2128      	movs	r1, #40	; 0x28
 80032e4:	198b      	adds	r3, r1, r6
 80032e6:	19da      	adds	r2, r3, r7
 80032e8:	2363      	movs	r3, #99	; 0x63
 80032ea:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 80032ec:	198b      	adds	r3, r1, r6
 80032ee:	19db      	adds	r3, r3, r7
 80032f0:	881a      	ldrh	r2, [r3, #0]
 80032f2:	0013      	movs	r3, r2
 80032f4:	3b01      	subs	r3, #1
 80032f6:	673b      	str	r3, [r7, #112]	; 0x70
 80032f8:	61ba      	str	r2, [r7, #24]
 80032fa:	2300      	movs	r3, #0
 80032fc:	61fb      	str	r3, [r7, #28]
 80032fe:	69b8      	ldr	r0, [r7, #24]
 8003300:	69f9      	ldr	r1, [r7, #28]
 8003302:	0003      	movs	r3, r0
 8003304:	0f5b      	lsrs	r3, r3, #29
 8003306:	000c      	movs	r4, r1
 8003308:	00e4      	lsls	r4, r4, #3
 800330a:	64fc      	str	r4, [r7, #76]	; 0x4c
 800330c:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800330e:	431c      	orrs	r4, r3
 8003310:	64fc      	str	r4, [r7, #76]	; 0x4c
 8003312:	0003      	movs	r3, r0
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	64bb      	str	r3, [r7, #72]	; 0x48
 8003318:	613a      	str	r2, [r7, #16]
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	6938      	ldr	r0, [r7, #16]
 8003320:	6979      	ldr	r1, [r7, #20]
 8003322:	0003      	movs	r3, r0
 8003324:	0f5b      	lsrs	r3, r3, #29
 8003326:	000c      	movs	r4, r1
 8003328:	00e4      	lsls	r4, r4, #3
 800332a:	647c      	str	r4, [r7, #68]	; 0x44
 800332c:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800332e:	431c      	orrs	r4, r3
 8003330:	647c      	str	r4, [r7, #68]	; 0x44
 8003332:	0003      	movs	r3, r0
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	643b      	str	r3, [r7, #64]	; 0x40
 8003338:	0013      	movs	r3, r2
 800333a:	3307      	adds	r3, #7
 800333c:	08db      	lsrs	r3, r3, #3
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	466a      	mov	r2, sp
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	469d      	mov	sp, r3
 8003346:	ab02      	add	r3, sp, #8
 8003348:	3300      	adds	r3, #0
 800334a:	66fb      	str	r3, [r7, #108]	; 0x6c
				X_increment=0x07;
 800334c:	231f      	movs	r3, #31
 800334e:	199b      	adds	r3, r3, r6
 8003350:	19db      	adds	r3, r3, r7
 8003352:	2207      	movs	r2, #7
 8003354:	701a      	strb	r2, [r3, #0]
				ASCII_height=0x12;
 8003356:	231e      	movs	r3, #30
 8003358:	199b      	adds	r3, r3, r6
 800335a:	19db      	adds	r3, r3, r7
 800335c:	2212      	movs	r2, #18
 800335e:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 8003360:	2336      	movs	r3, #54	; 0x36
 8003362:	199b      	adds	r3, r3, r6
 8003364:	19db      	adds	r3, r3, r7
 8003366:	2200      	movs	r2, #0
 8003368:	801a      	strh	r2, [r3, #0]
 800336a:	e0c0      	b.n	80034ee <printASCIIarray+0x562>
					for(j=0;j<symLen;j++){
 800336c:	2330      	movs	r3, #48	; 0x30
 800336e:	2258      	movs	r2, #88	; 0x58
 8003370:	189b      	adds	r3, r3, r2
 8003372:	19db      	adds	r3, r3, r7
 8003374:	2200      	movs	r2, #0
 8003376:	801a      	strh	r2, [r3, #0]
 8003378:	e023      	b.n	80033c2 <printASCIIarray+0x436>
						weoBuffer[j]=F2[dataASCII[i]][j];
 800337a:	2336      	movs	r3, #54	; 0x36
 800337c:	2158      	movs	r1, #88	; 0x58
 800337e:	185b      	adds	r3, r3, r1
 8003380:	19db      	adds	r3, r3, r7
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	22a8      	movs	r2, #168	; 0xa8
 8003386:	18ba      	adds	r2, r7, r2
 8003388:	6812      	ldr	r2, [r2, #0]
 800338a:	18d3      	adds	r3, r2, r3
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	001a      	movs	r2, r3
 8003390:	2630      	movs	r6, #48	; 0x30
 8003392:	1873      	adds	r3, r6, r1
 8003394:	19db      	adds	r3, r3, r7
 8003396:	8818      	ldrh	r0, [r3, #0]
 8003398:	1873      	adds	r3, r6, r1
 800339a:	19db      	adds	r3, r3, r7
 800339c:	8819      	ldrh	r1, [r3, #0]
 800339e:	4c47      	ldr	r4, [pc, #284]	; (80034bc <printASCIIarray+0x530>)
 80033a0:	0013      	movs	r3, r2
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	189b      	adds	r3, r3, r2
 80033a6:	015a      	lsls	r2, r3, #5
 80033a8:	189b      	adds	r3, r3, r2
 80033aa:	18e3      	adds	r3, r4, r3
 80033ac:	5c1a      	ldrb	r2, [r3, r0]
 80033ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b0:	545a      	strb	r2, [r3, r1]
					for(j=0;j<symLen;j++){
 80033b2:	2158      	movs	r1, #88	; 0x58
 80033b4:	1873      	adds	r3, r6, r1
 80033b6:	19db      	adds	r3, r3, r7
 80033b8:	881a      	ldrh	r2, [r3, #0]
 80033ba:	1873      	adds	r3, r6, r1
 80033bc:	19db      	adds	r3, r3, r7
 80033be:	3201      	adds	r2, #1
 80033c0:	801a      	strh	r2, [r3, #0]
 80033c2:	2330      	movs	r3, #48	; 0x30
 80033c4:	2158      	movs	r1, #88	; 0x58
 80033c6:	185b      	adds	r3, r3, r1
 80033c8:	19da      	adds	r2, r3, r7
 80033ca:	2328      	movs	r3, #40	; 0x28
 80033cc:	185b      	adds	r3, r3, r1
 80033ce:	19db      	adds	r3, r3, r7
 80033d0:	8812      	ldrh	r2, [r2, #0]
 80033d2:	881b      	ldrh	r3, [r3, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d3d0      	bcc.n	800337a <printASCIIarray+0x3ee>
							}
					if(dataASCII[i] != 1)
 80033d8:	2336      	movs	r3, #54	; 0x36
 80033da:	185b      	adds	r3, r3, r1
 80033dc:	19db      	adds	r3, r3, r7
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	22a8      	movs	r2, #168	; 0xa8
 80033e2:	18ba      	adds	r2, r7, r2
 80033e4:	6812      	ldr	r2, [r2, #0]
 80033e6:	18d3      	adds	r3, r2, r3
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d068      	beq.n	80034c0 <printASCIIarray+0x534>
					{
						for (k=0;k<symLen;k++){
 80033ee:	232e      	movs	r3, #46	; 0x2e
 80033f0:	185b      	adds	r3, r3, r1
 80033f2:	19db      	adds	r3, r3, r7
 80033f4:	2200      	movs	r2, #0
 80033f6:	801a      	strh	r2, [r3, #0]
 80033f8:	e018      	b.n	800342c <printASCIIarray+0x4a0>
							weoBuffer[k]=weoBuffer[k] & contrast;
 80033fa:	202e      	movs	r0, #46	; 0x2e
 80033fc:	2458      	movs	r4, #88	; 0x58
 80033fe:	1903      	adds	r3, r0, r4
 8003400:	19db      	adds	r3, r3, r7
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003406:	5cd2      	ldrb	r2, [r2, r3]
 8003408:	1903      	adds	r3, r0, r4
 800340a:	19db      	adds	r3, r3, r7
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	212b      	movs	r1, #43	; 0x2b
 8003410:	1909      	adds	r1, r1, r4
 8003412:	19c9      	adds	r1, r1, r7
 8003414:	7809      	ldrb	r1, [r1, #0]
 8003416:	400a      	ands	r2, r1
 8003418:	b2d1      	uxtb	r1, r2
 800341a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800341c:	54d1      	strb	r1, [r2, r3]
						for (k=0;k<symLen;k++){
 800341e:	1903      	adds	r3, r0, r4
 8003420:	19db      	adds	r3, r3, r7
 8003422:	881a      	ldrh	r2, [r3, #0]
 8003424:	1903      	adds	r3, r0, r4
 8003426:	19db      	adds	r3, r3, r7
 8003428:	3201      	adds	r2, #1
 800342a:	801a      	strh	r2, [r3, #0]
 800342c:	232e      	movs	r3, #46	; 0x2e
 800342e:	2658      	movs	r6, #88	; 0x58
 8003430:	199b      	adds	r3, r3, r6
 8003432:	19da      	adds	r2, r3, r7
 8003434:	2328      	movs	r3, #40	; 0x28
 8003436:	199b      	adds	r3, r3, r6
 8003438:	19db      	adds	r3, r3, r7
 800343a:	8812      	ldrh	r2, [r2, #0]
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d3db      	bcc.n	80033fa <printASCIIarray+0x46e>
						}
							weoDrawRectangleFilled(ASCII_X, imY, ASCII_X+X_increment-1, imY + ASCII_height - decY, 0xFF, weoBuffer);
 8003442:	2033      	movs	r0, #51	; 0x33
 8003444:	1983      	adds	r3, r0, r6
 8003446:	19da      	adds	r2, r3, r7
 8003448:	231f      	movs	r3, #31
 800344a:	199b      	adds	r3, r3, r6
 800344c:	19db      	adds	r3, r3, r7
 800344e:	7812      	ldrb	r2, [r2, #0]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	18d3      	adds	r3, r2, r3
 8003454:	b2db      	uxtb	r3, r3
 8003456:	3b01      	subs	r3, #1
 8003458:	b2d9      	uxtb	r1, r3
 800345a:	245e      	movs	r4, #94	; 0x5e
 800345c:	193a      	adds	r2, r7, r4
 800345e:	241e      	movs	r4, #30
 8003460:	19a3      	adds	r3, r4, r6
 8003462:	19db      	adds	r3, r3, r7
 8003464:	7812      	ldrb	r2, [r2, #0]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	18d3      	adds	r3, r2, r3
 800346a:	b2da      	uxtb	r2, r3
 800346c:	2434      	movs	r4, #52	; 0x34
 800346e:	19a3      	adds	r3, r4, r6
 8003470:	19db      	adds	r3, r3, r7
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	b2da      	uxtb	r2, r3
 8003478:	245e      	movs	r4, #94	; 0x5e
 800347a:	193b      	adds	r3, r7, r4
 800347c:	781c      	ldrb	r4, [r3, #0]
 800347e:	0006      	movs	r6, r0
 8003480:	2358      	movs	r3, #88	; 0x58
 8003482:	18c0      	adds	r0, r0, r3
 8003484:	19c3      	adds	r3, r0, r7
 8003486:	7818      	ldrb	r0, [r3, #0]
 8003488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800348a:	9301      	str	r3, [sp, #4]
 800348c:	23ff      	movs	r3, #255	; 0xff
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	0013      	movs	r3, r2
 8003492:	000a      	movs	r2, r1
 8003494:	0021      	movs	r1, r4
 8003496:	f7fe f869 	bl	800156c <weoDrawRectangleFilled>
							ASCII_X += X_increment;
 800349a:	2258      	movs	r2, #88	; 0x58
 800349c:	18b3      	adds	r3, r6, r2
 800349e:	19db      	adds	r3, r3, r7
 80034a0:	0010      	movs	r0, r2
 80034a2:	18b2      	adds	r2, r6, r2
 80034a4:	19d1      	adds	r1, r2, r7
 80034a6:	221f      	movs	r2, #31
 80034a8:	1812      	adds	r2, r2, r0
 80034aa:	19d2      	adds	r2, r2, r7
 80034ac:	7809      	ldrb	r1, [r1, #0]
 80034ae:	7812      	ldrb	r2, [r2, #0]
 80034b0:	188a      	adds	r2, r1, r2
 80034b2:	701a      	strb	r2, [r3, #0]
 80034b4:	e012      	b.n	80034dc <printASCIIarray+0x550>
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	0800c9f8 	.word	0x0800c9f8
 80034bc:	0800faf8 	.word	0x0800faf8
					}
					else
					{
						ASCII_X += X_increment;
 80034c0:	2233      	movs	r2, #51	; 0x33
 80034c2:	2158      	movs	r1, #88	; 0x58
 80034c4:	1853      	adds	r3, r2, r1
 80034c6:	19db      	adds	r3, r3, r7
 80034c8:	0008      	movs	r0, r1
 80034ca:	1852      	adds	r2, r2, r1
 80034cc:	19d1      	adds	r1, r2, r7
 80034ce:	221f      	movs	r2, #31
 80034d0:	1812      	adds	r2, r2, r0
 80034d2:	19d2      	adds	r2, r2, r7
 80034d4:	7809      	ldrb	r1, [r1, #0]
 80034d6:	7812      	ldrb	r2, [r2, #0]
 80034d8:	188a      	adds	r2, r1, r2
 80034da:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 80034dc:	2136      	movs	r1, #54	; 0x36
 80034de:	2058      	movs	r0, #88	; 0x58
 80034e0:	180b      	adds	r3, r1, r0
 80034e2:	19db      	adds	r3, r3, r7
 80034e4:	881a      	ldrh	r2, [r3, #0]
 80034e6:	180b      	adds	r3, r1, r0
 80034e8:	19db      	adds	r3, r3, r7
 80034ea:	3201      	adds	r2, #1
 80034ec:	801a      	strh	r2, [r3, #0]
 80034ee:	235d      	movs	r3, #93	; 0x5d
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	2136      	movs	r1, #54	; 0x36
 80034f8:	2058      	movs	r0, #88	; 0x58
 80034fa:	180a      	adds	r2, r1, r0
 80034fc:	19d2      	adds	r2, r2, r7
 80034fe:	8812      	ldrh	r2, [r2, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d200      	bcs.n	8003506 <printASCIIarray+0x57a>
 8003504:	e732      	b.n	800336c <printASCIIarray+0x3e0>
					}
				}
				for(i=0;i<symLen;i++)
 8003506:	180b      	adds	r3, r1, r0
 8003508:	19db      	adds	r3, r3, r7
 800350a:	2200      	movs	r2, #0
 800350c:	801a      	strh	r2, [r3, #0]
 800350e:	e00f      	b.n	8003530 <printASCIIarray+0x5a4>
					{
						weoBuffer[j]=0x00;
 8003510:	2330      	movs	r3, #48	; 0x30
 8003512:	2058      	movs	r0, #88	; 0x58
 8003514:	181b      	adds	r3, r3, r0
 8003516:	19db      	adds	r3, r3, r7
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800351c:	2100      	movs	r1, #0
 800351e:	54d1      	strb	r1, [r2, r3]
				for(i=0;i<symLen;i++)
 8003520:	2136      	movs	r1, #54	; 0x36
 8003522:	180b      	adds	r3, r1, r0
 8003524:	19db      	adds	r3, r3, r7
 8003526:	881a      	ldrh	r2, [r3, #0]
 8003528:	180b      	adds	r3, r1, r0
 800352a:	19db      	adds	r3, r3, r7
 800352c:	3201      	adds	r2, #1
 800352e:	801a      	strh	r2, [r3, #0]
 8003530:	2336      	movs	r3, #54	; 0x36
 8003532:	2158      	movs	r1, #88	; 0x58
 8003534:	185b      	adds	r3, r3, r1
 8003536:	19da      	adds	r2, r3, r7
 8003538:	2328      	movs	r3, #40	; 0x28
 800353a:	185b      	adds	r3, r3, r1
 800353c:	19db      	adds	r3, r3, r7
 800353e:	8812      	ldrh	r2, [r2, #0]
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d3e4      	bcc.n	8003510 <printASCIIarray+0x584>
 8003546:	46ad      	mov	sp, r5
					}
			}
			if(fontCur==2){
 8003548:	2335      	movs	r3, #53	; 0x35
 800354a:	2658      	movs	r6, #88	; 0x58
 800354c:	199b      	adds	r3, r3, r6
 800354e:	19db      	adds	r3, r3, r7
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b02      	cmp	r3, #2
 8003554:	d001      	beq.n	800355a <printASCIIarray+0x5ce>
 8003556:	f000 fbae 	bl	8003cb6 <printASCIIarray+0xd2a>
 800355a:	466b      	mov	r3, sp
 800355c:	001d      	movs	r5, r3
				symLen=304;
 800355e:	2128      	movs	r1, #40	; 0x28
 8003560:	198b      	adds	r3, r1, r6
 8003562:	19db      	adds	r3, r3, r7
 8003564:	2298      	movs	r2, #152	; 0x98
 8003566:	0052      	lsls	r2, r2, #1
 8003568:	801a      	strh	r2, [r3, #0]
				uint8_t weoBuffer[symLen];
 800356a:	198b      	adds	r3, r1, r6
 800356c:	19db      	adds	r3, r3, r7
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	001a      	movs	r2, r3
 8003572:	3a01      	subs	r2, #1
 8003574:	66ba      	str	r2, [r7, #104]	; 0x68
 8003576:	60bb      	str	r3, [r7, #8]
 8003578:	2200      	movs	r2, #0
 800357a:	60fa      	str	r2, [r7, #12]
 800357c:	68b8      	ldr	r0, [r7, #8]
 800357e:	68f9      	ldr	r1, [r7, #12]
 8003580:	0002      	movs	r2, r0
 8003582:	0f52      	lsrs	r2, r2, #29
 8003584:	000c      	movs	r4, r1
 8003586:	00e4      	lsls	r4, r4, #3
 8003588:	63fc      	str	r4, [r7, #60]	; 0x3c
 800358a:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 800358c:	4314      	orrs	r4, r2
 800358e:	63fc      	str	r4, [r7, #60]	; 0x3c
 8003590:	0002      	movs	r2, r0
 8003592:	00d2      	lsls	r2, r2, #3
 8003594:	63ba      	str	r2, [r7, #56]	; 0x38
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	2200      	movs	r2, #0
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	6838      	ldr	r0, [r7, #0]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	0002      	movs	r2, r0
 80035a2:	0f52      	lsrs	r2, r2, #29
 80035a4:	000c      	movs	r4, r1
 80035a6:	00e4      	lsls	r4, r4, #3
 80035a8:	637c      	str	r4, [r7, #52]	; 0x34
 80035aa:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80035ac:	4314      	orrs	r4, r2
 80035ae:	637c      	str	r4, [r7, #52]	; 0x34
 80035b0:	0002      	movs	r2, r0
 80035b2:	00d2      	lsls	r2, r2, #3
 80035b4:	633a      	str	r2, [r7, #48]	; 0x30
 80035b6:	3307      	adds	r3, #7
 80035b8:	08db      	lsrs	r3, r3, #3
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	466a      	mov	r2, sp
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	469d      	mov	sp, r3
 80035c2:	ab02      	add	r3, sp, #8
 80035c4:	3300      	adds	r3, #0
 80035c6:	667b      	str	r3, [r7, #100]	; 0x64
				X_increment=0x10;
 80035c8:	231f      	movs	r3, #31
 80035ca:	199b      	adds	r3, r3, r6
 80035cc:	19db      	adds	r3, r3, r7
 80035ce:	2210      	movs	r2, #16
 80035d0:	701a      	strb	r2, [r3, #0]
				ASCII_height=0x26;
 80035d2:	231e      	movs	r3, #30
 80035d4:	199b      	adds	r3, r3, r6
 80035d6:	19db      	adds	r3, r3, r7
 80035d8:	2226      	movs	r2, #38	; 0x26
 80035da:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 80035dc:	2336      	movs	r3, #54	; 0x36
 80035de:	199b      	adds	r3, r3, r6
 80035e0:	19db      	adds	r3, r3, r7
 80035e2:	2200      	movs	r2, #0
 80035e4:	801a      	strh	r2, [r3, #0]
 80035e6:	e288      	b.n	8003afa <printASCIIarray+0xb6e>
					if(dataASCII[i]==0x20){dataASCII[i]=0x00;}
 80035e8:	2136      	movs	r1, #54	; 0x36
 80035ea:	2458      	movs	r4, #88	; 0x58
 80035ec:	190b      	adds	r3, r1, r4
 80035ee:	19db      	adds	r3, r3, r7
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	20a8      	movs	r0, #168	; 0xa8
 80035f4:	183a      	adds	r2, r7, r0
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	18d3      	adds	r3, r2, r3
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b20      	cmp	r3, #32
 80035fe:	d107      	bne.n	8003610 <printASCIIarray+0x684>
 8003600:	190b      	adds	r3, r1, r4
 8003602:	19db      	adds	r3, r3, r7
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	183a      	adds	r2, r7, r0
 8003608:	6812      	ldr	r2, [r2, #0]
 800360a:	18d3      	adds	r3, r2, r3
 800360c:	2200      	movs	r2, #0
 800360e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x21){dataASCII[i]=0x01;}
 8003610:	2136      	movs	r1, #54	; 0x36
 8003612:	2458      	movs	r4, #88	; 0x58
 8003614:	190b      	adds	r3, r1, r4
 8003616:	19db      	adds	r3, r3, r7
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	20a8      	movs	r0, #168	; 0xa8
 800361c:	183a      	adds	r2, r7, r0
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	18d3      	adds	r3, r2, r3
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b21      	cmp	r3, #33	; 0x21
 8003626:	d107      	bne.n	8003638 <printASCIIarray+0x6ac>
 8003628:	190b      	adds	r3, r1, r4
 800362a:	19db      	adds	r3, r3, r7
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	183a      	adds	r2, r7, r0
 8003630:	6812      	ldr	r2, [r2, #0]
 8003632:	18d3      	adds	r3, r2, r3
 8003634:	2201      	movs	r2, #1
 8003636:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x25){dataASCII[i]=0x02;}
 8003638:	2136      	movs	r1, #54	; 0x36
 800363a:	2458      	movs	r4, #88	; 0x58
 800363c:	190b      	adds	r3, r1, r4
 800363e:	19db      	adds	r3, r3, r7
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	20a8      	movs	r0, #168	; 0xa8
 8003644:	183a      	adds	r2, r7, r0
 8003646:	6812      	ldr	r2, [r2, #0]
 8003648:	18d3      	adds	r3, r2, r3
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b25      	cmp	r3, #37	; 0x25
 800364e:	d107      	bne.n	8003660 <printASCIIarray+0x6d4>
 8003650:	190b      	adds	r3, r1, r4
 8003652:	19db      	adds	r3, r3, r7
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	183a      	adds	r2, r7, r0
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	18d3      	adds	r3, r2, r3
 800365c:	2202      	movs	r2, #2
 800365e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x28){dataASCII[i]=0x03;}
 8003660:	2136      	movs	r1, #54	; 0x36
 8003662:	2458      	movs	r4, #88	; 0x58
 8003664:	190b      	adds	r3, r1, r4
 8003666:	19db      	adds	r3, r3, r7
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	20a8      	movs	r0, #168	; 0xa8
 800366c:	183a      	adds	r2, r7, r0
 800366e:	6812      	ldr	r2, [r2, #0]
 8003670:	18d3      	adds	r3, r2, r3
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b28      	cmp	r3, #40	; 0x28
 8003676:	d107      	bne.n	8003688 <printASCIIarray+0x6fc>
 8003678:	190b      	adds	r3, r1, r4
 800367a:	19db      	adds	r3, r3, r7
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	183a      	adds	r2, r7, r0
 8003680:	6812      	ldr	r2, [r2, #0]
 8003682:	18d3      	adds	r3, r2, r3
 8003684:	2203      	movs	r2, #3
 8003686:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x29){dataASCII[i]=0x04;}
 8003688:	2136      	movs	r1, #54	; 0x36
 800368a:	2458      	movs	r4, #88	; 0x58
 800368c:	190b      	adds	r3, r1, r4
 800368e:	19db      	adds	r3, r3, r7
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	20a8      	movs	r0, #168	; 0xa8
 8003694:	183a      	adds	r2, r7, r0
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	18d3      	adds	r3, r2, r3
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b29      	cmp	r3, #41	; 0x29
 800369e:	d107      	bne.n	80036b0 <printASCIIarray+0x724>
 80036a0:	190b      	adds	r3, r1, r4
 80036a2:	19db      	adds	r3, r3, r7
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	183a      	adds	r2, r7, r0
 80036a8:	6812      	ldr	r2, [r2, #0]
 80036aa:	18d3      	adds	r3, r2, r3
 80036ac:	2204      	movs	r2, #4
 80036ae:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2a){dataASCII[i]=0x05;}
 80036b0:	2136      	movs	r1, #54	; 0x36
 80036b2:	2458      	movs	r4, #88	; 0x58
 80036b4:	190b      	adds	r3, r1, r4
 80036b6:	19db      	adds	r3, r3, r7
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	20a8      	movs	r0, #168	; 0xa8
 80036bc:	183a      	adds	r2, r7, r0
 80036be:	6812      	ldr	r2, [r2, #0]
 80036c0:	18d3      	adds	r3, r2, r3
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b2a      	cmp	r3, #42	; 0x2a
 80036c6:	d107      	bne.n	80036d8 <printASCIIarray+0x74c>
 80036c8:	190b      	adds	r3, r1, r4
 80036ca:	19db      	adds	r3, r3, r7
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	183a      	adds	r2, r7, r0
 80036d0:	6812      	ldr	r2, [r2, #0]
 80036d2:	18d3      	adds	r3, r2, r3
 80036d4:	2205      	movs	r2, #5
 80036d6:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2b){dataASCII[i]=0x06;}
 80036d8:	2136      	movs	r1, #54	; 0x36
 80036da:	2458      	movs	r4, #88	; 0x58
 80036dc:	190b      	adds	r3, r1, r4
 80036de:	19db      	adds	r3, r3, r7
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	20a8      	movs	r0, #168	; 0xa8
 80036e4:	183a      	adds	r2, r7, r0
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	18d3      	adds	r3, r2, r3
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b2b      	cmp	r3, #43	; 0x2b
 80036ee:	d107      	bne.n	8003700 <printASCIIarray+0x774>
 80036f0:	190b      	adds	r3, r1, r4
 80036f2:	19db      	adds	r3, r3, r7
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	183a      	adds	r2, r7, r0
 80036f8:	6812      	ldr	r2, [r2, #0]
 80036fa:	18d3      	adds	r3, r2, r3
 80036fc:	2206      	movs	r2, #6
 80036fe:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2c){dataASCII[i]=0x07;}
 8003700:	2136      	movs	r1, #54	; 0x36
 8003702:	2458      	movs	r4, #88	; 0x58
 8003704:	190b      	adds	r3, r1, r4
 8003706:	19db      	adds	r3, r3, r7
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	20a8      	movs	r0, #168	; 0xa8
 800370c:	183a      	adds	r2, r7, r0
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	18d3      	adds	r3, r2, r3
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	2b2c      	cmp	r3, #44	; 0x2c
 8003716:	d107      	bne.n	8003728 <printASCIIarray+0x79c>
 8003718:	190b      	adds	r3, r1, r4
 800371a:	19db      	adds	r3, r3, r7
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	183a      	adds	r2, r7, r0
 8003720:	6812      	ldr	r2, [r2, #0]
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	2207      	movs	r2, #7
 8003726:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2d){dataASCII[i]=0x08;}
 8003728:	2136      	movs	r1, #54	; 0x36
 800372a:	2458      	movs	r4, #88	; 0x58
 800372c:	190b      	adds	r3, r1, r4
 800372e:	19db      	adds	r3, r3, r7
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	20a8      	movs	r0, #168	; 0xa8
 8003734:	183a      	adds	r2, r7, r0
 8003736:	6812      	ldr	r2, [r2, #0]
 8003738:	18d3      	adds	r3, r2, r3
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b2d      	cmp	r3, #45	; 0x2d
 800373e:	d107      	bne.n	8003750 <printASCIIarray+0x7c4>
 8003740:	190b      	adds	r3, r1, r4
 8003742:	19db      	adds	r3, r3, r7
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	183a      	adds	r2, r7, r0
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	18d3      	adds	r3, r2, r3
 800374c:	2208      	movs	r2, #8
 800374e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2e){dataASCII[i]=0x09;}
 8003750:	2136      	movs	r1, #54	; 0x36
 8003752:	2458      	movs	r4, #88	; 0x58
 8003754:	190b      	adds	r3, r1, r4
 8003756:	19db      	adds	r3, r3, r7
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	20a8      	movs	r0, #168	; 0xa8
 800375c:	183a      	adds	r2, r7, r0
 800375e:	6812      	ldr	r2, [r2, #0]
 8003760:	18d3      	adds	r3, r2, r3
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2b2e      	cmp	r3, #46	; 0x2e
 8003766:	d107      	bne.n	8003778 <printASCIIarray+0x7ec>
 8003768:	190b      	adds	r3, r1, r4
 800376a:	19db      	adds	r3, r3, r7
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	183a      	adds	r2, r7, r0
 8003770:	6812      	ldr	r2, [r2, #0]
 8003772:	18d3      	adds	r3, r2, r3
 8003774:	2209      	movs	r2, #9
 8003776:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2f){dataASCII[i]=0x0a;}
 8003778:	2136      	movs	r1, #54	; 0x36
 800377a:	2458      	movs	r4, #88	; 0x58
 800377c:	190b      	adds	r3, r1, r4
 800377e:	19db      	adds	r3, r3, r7
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	20a8      	movs	r0, #168	; 0xa8
 8003784:	183a      	adds	r2, r7, r0
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	18d3      	adds	r3, r2, r3
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b2f      	cmp	r3, #47	; 0x2f
 800378e:	d107      	bne.n	80037a0 <printASCIIarray+0x814>
 8003790:	190b      	adds	r3, r1, r4
 8003792:	19db      	adds	r3, r3, r7
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	183a      	adds	r2, r7, r0
 8003798:	6812      	ldr	r2, [r2, #0]
 800379a:	18d3      	adds	r3, r2, r3
 800379c:	220a      	movs	r2, #10
 800379e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x30){dataASCII[i]=0x0b;}
 80037a0:	2136      	movs	r1, #54	; 0x36
 80037a2:	2458      	movs	r4, #88	; 0x58
 80037a4:	190b      	adds	r3, r1, r4
 80037a6:	19db      	adds	r3, r3, r7
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	20a8      	movs	r0, #168	; 0xa8
 80037ac:	183a      	adds	r2, r7, r0
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	18d3      	adds	r3, r2, r3
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b30      	cmp	r3, #48	; 0x30
 80037b6:	d107      	bne.n	80037c8 <printASCIIarray+0x83c>
 80037b8:	190b      	adds	r3, r1, r4
 80037ba:	19db      	adds	r3, r3, r7
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	183a      	adds	r2, r7, r0
 80037c0:	6812      	ldr	r2, [r2, #0]
 80037c2:	18d3      	adds	r3, r2, r3
 80037c4:	220b      	movs	r2, #11
 80037c6:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x31){dataASCII[i]=0x0c;}
 80037c8:	2136      	movs	r1, #54	; 0x36
 80037ca:	2458      	movs	r4, #88	; 0x58
 80037cc:	190b      	adds	r3, r1, r4
 80037ce:	19db      	adds	r3, r3, r7
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	20a8      	movs	r0, #168	; 0xa8
 80037d4:	183a      	adds	r2, r7, r0
 80037d6:	6812      	ldr	r2, [r2, #0]
 80037d8:	18d3      	adds	r3, r2, r3
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b31      	cmp	r3, #49	; 0x31
 80037de:	d107      	bne.n	80037f0 <printASCIIarray+0x864>
 80037e0:	190b      	adds	r3, r1, r4
 80037e2:	19db      	adds	r3, r3, r7
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	183a      	adds	r2, r7, r0
 80037e8:	6812      	ldr	r2, [r2, #0]
 80037ea:	18d3      	adds	r3, r2, r3
 80037ec:	220c      	movs	r2, #12
 80037ee:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x32){dataASCII[i]=0x0d;}
 80037f0:	2136      	movs	r1, #54	; 0x36
 80037f2:	2458      	movs	r4, #88	; 0x58
 80037f4:	190b      	adds	r3, r1, r4
 80037f6:	19db      	adds	r3, r3, r7
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	20a8      	movs	r0, #168	; 0xa8
 80037fc:	183a      	adds	r2, r7, r0
 80037fe:	6812      	ldr	r2, [r2, #0]
 8003800:	18d3      	adds	r3, r2, r3
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b32      	cmp	r3, #50	; 0x32
 8003806:	d107      	bne.n	8003818 <printASCIIarray+0x88c>
 8003808:	190b      	adds	r3, r1, r4
 800380a:	19db      	adds	r3, r3, r7
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	183a      	adds	r2, r7, r0
 8003810:	6812      	ldr	r2, [r2, #0]
 8003812:	18d3      	adds	r3, r2, r3
 8003814:	220d      	movs	r2, #13
 8003816:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x33){dataASCII[i]=0x0e;}
 8003818:	2136      	movs	r1, #54	; 0x36
 800381a:	2458      	movs	r4, #88	; 0x58
 800381c:	190b      	adds	r3, r1, r4
 800381e:	19db      	adds	r3, r3, r7
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	20a8      	movs	r0, #168	; 0xa8
 8003824:	183a      	adds	r2, r7, r0
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	18d3      	adds	r3, r2, r3
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b33      	cmp	r3, #51	; 0x33
 800382e:	d107      	bne.n	8003840 <printASCIIarray+0x8b4>
 8003830:	190b      	adds	r3, r1, r4
 8003832:	19db      	adds	r3, r3, r7
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	183a      	adds	r2, r7, r0
 8003838:	6812      	ldr	r2, [r2, #0]
 800383a:	18d3      	adds	r3, r2, r3
 800383c:	220e      	movs	r2, #14
 800383e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x34){dataASCII[i]=0x0f;}
 8003840:	2136      	movs	r1, #54	; 0x36
 8003842:	2458      	movs	r4, #88	; 0x58
 8003844:	190b      	adds	r3, r1, r4
 8003846:	19db      	adds	r3, r3, r7
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	20a8      	movs	r0, #168	; 0xa8
 800384c:	183a      	adds	r2, r7, r0
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	18d3      	adds	r3, r2, r3
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b34      	cmp	r3, #52	; 0x34
 8003856:	d107      	bne.n	8003868 <printASCIIarray+0x8dc>
 8003858:	190b      	adds	r3, r1, r4
 800385a:	19db      	adds	r3, r3, r7
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	183a      	adds	r2, r7, r0
 8003860:	6812      	ldr	r2, [r2, #0]
 8003862:	18d3      	adds	r3, r2, r3
 8003864:	220f      	movs	r2, #15
 8003866:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x35){dataASCII[i]=0x10;}
 8003868:	2136      	movs	r1, #54	; 0x36
 800386a:	2458      	movs	r4, #88	; 0x58
 800386c:	190b      	adds	r3, r1, r4
 800386e:	19db      	adds	r3, r3, r7
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	20a8      	movs	r0, #168	; 0xa8
 8003874:	183a      	adds	r2, r7, r0
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	18d3      	adds	r3, r2, r3
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b35      	cmp	r3, #53	; 0x35
 800387e:	d107      	bne.n	8003890 <printASCIIarray+0x904>
 8003880:	190b      	adds	r3, r1, r4
 8003882:	19db      	adds	r3, r3, r7
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	183a      	adds	r2, r7, r0
 8003888:	6812      	ldr	r2, [r2, #0]
 800388a:	18d3      	adds	r3, r2, r3
 800388c:	2210      	movs	r2, #16
 800388e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x36){dataASCII[i]=0x11;}
 8003890:	2136      	movs	r1, #54	; 0x36
 8003892:	2458      	movs	r4, #88	; 0x58
 8003894:	190b      	adds	r3, r1, r4
 8003896:	19db      	adds	r3, r3, r7
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	20a8      	movs	r0, #168	; 0xa8
 800389c:	183a      	adds	r2, r7, r0
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	18d3      	adds	r3, r2, r3
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b36      	cmp	r3, #54	; 0x36
 80038a6:	d107      	bne.n	80038b8 <printASCIIarray+0x92c>
 80038a8:	190b      	adds	r3, r1, r4
 80038aa:	19db      	adds	r3, r3, r7
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	183a      	adds	r2, r7, r0
 80038b0:	6812      	ldr	r2, [r2, #0]
 80038b2:	18d3      	adds	r3, r2, r3
 80038b4:	2211      	movs	r2, #17
 80038b6:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x37){dataASCII[i]=0x12;}
 80038b8:	2136      	movs	r1, #54	; 0x36
 80038ba:	2458      	movs	r4, #88	; 0x58
 80038bc:	190b      	adds	r3, r1, r4
 80038be:	19db      	adds	r3, r3, r7
 80038c0:	881b      	ldrh	r3, [r3, #0]
 80038c2:	20a8      	movs	r0, #168	; 0xa8
 80038c4:	183a      	adds	r2, r7, r0
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	18d3      	adds	r3, r2, r3
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b37      	cmp	r3, #55	; 0x37
 80038ce:	d107      	bne.n	80038e0 <printASCIIarray+0x954>
 80038d0:	190b      	adds	r3, r1, r4
 80038d2:	19db      	adds	r3, r3, r7
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	183a      	adds	r2, r7, r0
 80038d8:	6812      	ldr	r2, [r2, #0]
 80038da:	18d3      	adds	r3, r2, r3
 80038dc:	2212      	movs	r2, #18
 80038de:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x38){dataASCII[i]=0x13;}
 80038e0:	2136      	movs	r1, #54	; 0x36
 80038e2:	2458      	movs	r4, #88	; 0x58
 80038e4:	190b      	adds	r3, r1, r4
 80038e6:	19db      	adds	r3, r3, r7
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	20a8      	movs	r0, #168	; 0xa8
 80038ec:	183a      	adds	r2, r7, r0
 80038ee:	6812      	ldr	r2, [r2, #0]
 80038f0:	18d3      	adds	r3, r2, r3
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b38      	cmp	r3, #56	; 0x38
 80038f6:	d107      	bne.n	8003908 <printASCIIarray+0x97c>
 80038f8:	190b      	adds	r3, r1, r4
 80038fa:	19db      	adds	r3, r3, r7
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	183a      	adds	r2, r7, r0
 8003900:	6812      	ldr	r2, [r2, #0]
 8003902:	18d3      	adds	r3, r2, r3
 8003904:	2213      	movs	r2, #19
 8003906:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x39){dataASCII[i]=0x14;}
 8003908:	2136      	movs	r1, #54	; 0x36
 800390a:	2458      	movs	r4, #88	; 0x58
 800390c:	190b      	adds	r3, r1, r4
 800390e:	19db      	adds	r3, r3, r7
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	20a8      	movs	r0, #168	; 0xa8
 8003914:	183a      	adds	r2, r7, r0
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	18d3      	adds	r3, r2, r3
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b39      	cmp	r3, #57	; 0x39
 800391e:	d107      	bne.n	8003930 <printASCIIarray+0x9a4>
 8003920:	190b      	adds	r3, r1, r4
 8003922:	19db      	adds	r3, r3, r7
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	183a      	adds	r2, r7, r0
 8003928:	6812      	ldr	r2, [r2, #0]
 800392a:	18d3      	adds	r3, r2, r3
 800392c:	2214      	movs	r2, #20
 800392e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3a){dataASCII[i]=0x15;}
 8003930:	2136      	movs	r1, #54	; 0x36
 8003932:	2458      	movs	r4, #88	; 0x58
 8003934:	190b      	adds	r3, r1, r4
 8003936:	19db      	adds	r3, r3, r7
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	20a8      	movs	r0, #168	; 0xa8
 800393c:	183a      	adds	r2, r7, r0
 800393e:	6812      	ldr	r2, [r2, #0]
 8003940:	18d3      	adds	r3, r2, r3
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b3a      	cmp	r3, #58	; 0x3a
 8003946:	d107      	bne.n	8003958 <printASCIIarray+0x9cc>
 8003948:	190b      	adds	r3, r1, r4
 800394a:	19db      	adds	r3, r3, r7
 800394c:	881b      	ldrh	r3, [r3, #0]
 800394e:	183a      	adds	r2, r7, r0
 8003950:	6812      	ldr	r2, [r2, #0]
 8003952:	18d3      	adds	r3, r2, r3
 8003954:	2215      	movs	r2, #21
 8003956:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3b){dataASCII[i]=0x16;}
 8003958:	2136      	movs	r1, #54	; 0x36
 800395a:	2458      	movs	r4, #88	; 0x58
 800395c:	190b      	adds	r3, r1, r4
 800395e:	19db      	adds	r3, r3, r7
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	20a8      	movs	r0, #168	; 0xa8
 8003964:	183a      	adds	r2, r7, r0
 8003966:	6812      	ldr	r2, [r2, #0]
 8003968:	18d3      	adds	r3, r2, r3
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b3b      	cmp	r3, #59	; 0x3b
 800396e:	d107      	bne.n	8003980 <printASCIIarray+0x9f4>
 8003970:	190b      	adds	r3, r1, r4
 8003972:	19db      	adds	r3, r3, r7
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	183a      	adds	r2, r7, r0
 8003978:	6812      	ldr	r2, [r2, #0]
 800397a:	18d3      	adds	r3, r2, r3
 800397c:	2216      	movs	r2, #22
 800397e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3c){dataASCII[i]=0x17;}
 8003980:	2136      	movs	r1, #54	; 0x36
 8003982:	2458      	movs	r4, #88	; 0x58
 8003984:	190b      	adds	r3, r1, r4
 8003986:	19db      	adds	r3, r3, r7
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	20a8      	movs	r0, #168	; 0xa8
 800398c:	183a      	adds	r2, r7, r0
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	18d3      	adds	r3, r2, r3
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b3c      	cmp	r3, #60	; 0x3c
 8003996:	d107      	bne.n	80039a8 <printASCIIarray+0xa1c>
 8003998:	190b      	adds	r3, r1, r4
 800399a:	19db      	adds	r3, r3, r7
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	183a      	adds	r2, r7, r0
 80039a0:	6812      	ldr	r2, [r2, #0]
 80039a2:	18d3      	adds	r3, r2, r3
 80039a4:	2217      	movs	r2, #23
 80039a6:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3d){dataASCII[i]=0x18;}
 80039a8:	2136      	movs	r1, #54	; 0x36
 80039aa:	2458      	movs	r4, #88	; 0x58
 80039ac:	190b      	adds	r3, r1, r4
 80039ae:	19db      	adds	r3, r3, r7
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	20a8      	movs	r0, #168	; 0xa8
 80039b4:	183a      	adds	r2, r7, r0
 80039b6:	6812      	ldr	r2, [r2, #0]
 80039b8:	18d3      	adds	r3, r2, r3
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b3d      	cmp	r3, #61	; 0x3d
 80039be:	d107      	bne.n	80039d0 <printASCIIarray+0xa44>
 80039c0:	190b      	adds	r3, r1, r4
 80039c2:	19db      	adds	r3, r3, r7
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	183a      	adds	r2, r7, r0
 80039c8:	6812      	ldr	r2, [r2, #0]
 80039ca:	18d3      	adds	r3, r2, r3
 80039cc:	2218      	movs	r2, #24
 80039ce:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3e){dataASCII[i]=0x19;}
 80039d0:	2136      	movs	r1, #54	; 0x36
 80039d2:	2458      	movs	r4, #88	; 0x58
 80039d4:	190b      	adds	r3, r1, r4
 80039d6:	19db      	adds	r3, r3, r7
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	20a8      	movs	r0, #168	; 0xa8
 80039dc:	183a      	adds	r2, r7, r0
 80039de:	6812      	ldr	r2, [r2, #0]
 80039e0:	18d3      	adds	r3, r2, r3
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b3e      	cmp	r3, #62	; 0x3e
 80039e6:	d107      	bne.n	80039f8 <printASCIIarray+0xa6c>
 80039e8:	190b      	adds	r3, r1, r4
 80039ea:	19db      	adds	r3, r3, r7
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	183a      	adds	r2, r7, r0
 80039f0:	6812      	ldr	r2, [r2, #0]
 80039f2:	18d3      	adds	r3, r2, r3
 80039f4:	2219      	movs	r2, #25
 80039f6:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3f){dataASCII[i]=0x1a;}
 80039f8:	2136      	movs	r1, #54	; 0x36
 80039fa:	2458      	movs	r4, #88	; 0x58
 80039fc:	190b      	adds	r3, r1, r4
 80039fe:	19db      	adds	r3, r3, r7
 8003a00:	881b      	ldrh	r3, [r3, #0]
 8003a02:	20a8      	movs	r0, #168	; 0xa8
 8003a04:	183a      	adds	r2, r7, r0
 8003a06:	6812      	ldr	r2, [r2, #0]
 8003a08:	18d3      	adds	r3, r2, r3
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b3f      	cmp	r3, #63	; 0x3f
 8003a0e:	d107      	bne.n	8003a20 <printASCIIarray+0xa94>
 8003a10:	190b      	adds	r3, r1, r4
 8003a12:	19db      	adds	r3, r3, r7
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	183a      	adds	r2, r7, r0
 8003a18:	6812      	ldr	r2, [r2, #0]
 8003a1a:	18d3      	adds	r3, r2, r3
 8003a1c:	221a      	movs	r2, #26
 8003a1e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5b){dataASCII[i]=0x1b;}
 8003a20:	2136      	movs	r1, #54	; 0x36
 8003a22:	2458      	movs	r4, #88	; 0x58
 8003a24:	190b      	adds	r3, r1, r4
 8003a26:	19db      	adds	r3, r3, r7
 8003a28:	881b      	ldrh	r3, [r3, #0]
 8003a2a:	20a8      	movs	r0, #168	; 0xa8
 8003a2c:	183a      	adds	r2, r7, r0
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	18d3      	adds	r3, r2, r3
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	2b5b      	cmp	r3, #91	; 0x5b
 8003a36:	d107      	bne.n	8003a48 <printASCIIarray+0xabc>
 8003a38:	190b      	adds	r3, r1, r4
 8003a3a:	19db      	adds	r3, r3, r7
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	183a      	adds	r2, r7, r0
 8003a40:	6812      	ldr	r2, [r2, #0]
 8003a42:	18d3      	adds	r3, r2, r3
 8003a44:	221b      	movs	r2, #27
 8003a46:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5c){dataASCII[i]=0x1c;}
 8003a48:	2136      	movs	r1, #54	; 0x36
 8003a4a:	2458      	movs	r4, #88	; 0x58
 8003a4c:	190b      	adds	r3, r1, r4
 8003a4e:	19db      	adds	r3, r3, r7
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	20a8      	movs	r0, #168	; 0xa8
 8003a54:	183a      	adds	r2, r7, r0
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	18d3      	adds	r3, r2, r3
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b5c      	cmp	r3, #92	; 0x5c
 8003a5e:	d107      	bne.n	8003a70 <printASCIIarray+0xae4>
 8003a60:	190b      	adds	r3, r1, r4
 8003a62:	19db      	adds	r3, r3, r7
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	183a      	adds	r2, r7, r0
 8003a68:	6812      	ldr	r2, [r2, #0]
 8003a6a:	18d3      	adds	r3, r2, r3
 8003a6c:	221c      	movs	r2, #28
 8003a6e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5d){dataASCII[i]=0x1d;}
 8003a70:	2136      	movs	r1, #54	; 0x36
 8003a72:	2458      	movs	r4, #88	; 0x58
 8003a74:	190b      	adds	r3, r1, r4
 8003a76:	19db      	adds	r3, r3, r7
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	20a8      	movs	r0, #168	; 0xa8
 8003a7c:	183a      	adds	r2, r7, r0
 8003a7e:	6812      	ldr	r2, [r2, #0]
 8003a80:	18d3      	adds	r3, r2, r3
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b5d      	cmp	r3, #93	; 0x5d
 8003a86:	d107      	bne.n	8003a98 <printASCIIarray+0xb0c>
 8003a88:	190b      	adds	r3, r1, r4
 8003a8a:	19db      	adds	r3, r3, r7
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	183a      	adds	r2, r7, r0
 8003a90:	6812      	ldr	r2, [r2, #0]
 8003a92:	18d3      	adds	r3, r2, r3
 8003a94:	221d      	movs	r2, #29
 8003a96:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5f){dataASCII[i]=0x1e;}
 8003a98:	2136      	movs	r1, #54	; 0x36
 8003a9a:	2458      	movs	r4, #88	; 0x58
 8003a9c:	190b      	adds	r3, r1, r4
 8003a9e:	19db      	adds	r3, r3, r7
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	20a8      	movs	r0, #168	; 0xa8
 8003aa4:	183a      	adds	r2, r7, r0
 8003aa6:	6812      	ldr	r2, [r2, #0]
 8003aa8:	18d3      	adds	r3, r2, r3
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b5f      	cmp	r3, #95	; 0x5f
 8003aae:	d107      	bne.n	8003ac0 <printASCIIarray+0xb34>
 8003ab0:	190b      	adds	r3, r1, r4
 8003ab2:	19db      	adds	r3, r3, r7
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	183a      	adds	r2, r7, r0
 8003ab8:	6812      	ldr	r2, [r2, #0]
 8003aba:	18d3      	adds	r3, r2, r3
 8003abc:	221e      	movs	r2, #30
 8003abe:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x7c){dataASCII[i]=0x1f;}
 8003ac0:	2136      	movs	r1, #54	; 0x36
 8003ac2:	2458      	movs	r4, #88	; 0x58
 8003ac4:	190b      	adds	r3, r1, r4
 8003ac6:	19db      	adds	r3, r3, r7
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	20a8      	movs	r0, #168	; 0xa8
 8003acc:	183a      	adds	r2, r7, r0
 8003ace:	6812      	ldr	r2, [r2, #0]
 8003ad0:	18d3      	adds	r3, r2, r3
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b7c      	cmp	r3, #124	; 0x7c
 8003ad6:	d107      	bne.n	8003ae8 <printASCIIarray+0xb5c>
 8003ad8:	190b      	adds	r3, r1, r4
 8003ada:	19db      	adds	r3, r3, r7
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	183a      	adds	r2, r7, r0
 8003ae0:	6812      	ldr	r2, [r2, #0]
 8003ae2:	18d3      	adds	r3, r2, r3
 8003ae4:	221f      	movs	r2, #31
 8003ae6:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 8003ae8:	2136      	movs	r1, #54	; 0x36
 8003aea:	2058      	movs	r0, #88	; 0x58
 8003aec:	180b      	adds	r3, r1, r0
 8003aee:	19db      	adds	r3, r3, r7
 8003af0:	881a      	ldrh	r2, [r3, #0]
 8003af2:	180b      	adds	r3, r1, r0
 8003af4:	19db      	adds	r3, r3, r7
 8003af6:	3201      	adds	r2, #1
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	235d      	movs	r3, #93	; 0x5d
 8003afc:	18fb      	adds	r3, r7, r3
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2136      	movs	r1, #54	; 0x36
 8003b04:	2058      	movs	r0, #88	; 0x58
 8003b06:	180a      	adds	r2, r1, r0
 8003b08:	19d2      	adds	r2, r2, r7
 8003b0a:	8812      	ldrh	r2, [r2, #0]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d200      	bcs.n	8003b12 <printASCIIarray+0xb86>
 8003b10:	e56a      	b.n	80035e8 <printASCIIarray+0x65c>
				}
				for(i=0;i<strLen;i++){
 8003b12:	180b      	adds	r3, r1, r0
 8003b14:	19db      	adds	r3, r3, r7
 8003b16:	2200      	movs	r2, #0
 8003b18:	801a      	strh	r2, [r3, #0]
 8003b1a:	e09f      	b.n	8003c5c <printASCIIarray+0xcd0>
					for(j=0;j<symLen;j++){
 8003b1c:	2330      	movs	r3, #48	; 0x30
 8003b1e:	2258      	movs	r2, #88	; 0x58
 8003b20:	189b      	adds	r3, r3, r2
 8003b22:	19db      	adds	r3, r3, r7
 8003b24:	2200      	movs	r2, #0
 8003b26:	801a      	strh	r2, [r3, #0]
 8003b28:	e024      	b.n	8003b74 <printASCIIarray+0xbe8>
						weoBuffer[j]=F3[dataASCII[i]][j];
 8003b2a:	2336      	movs	r3, #54	; 0x36
 8003b2c:	2158      	movs	r1, #88	; 0x58
 8003b2e:	185b      	adds	r3, r3, r1
 8003b30:	19db      	adds	r3, r3, r7
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	22a8      	movs	r2, #168	; 0xa8
 8003b36:	18ba      	adds	r2, r7, r2
 8003b38:	6812      	ldr	r2, [r2, #0]
 8003b3a:	18d3      	adds	r3, r2, r3
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	001a      	movs	r2, r3
 8003b40:	2630      	movs	r6, #48	; 0x30
 8003b42:	1873      	adds	r3, r6, r1
 8003b44:	19db      	adds	r3, r3, r7
 8003b46:	8818      	ldrh	r0, [r3, #0]
 8003b48:	1873      	adds	r3, r6, r1
 8003b4a:	19db      	adds	r3, r3, r7
 8003b4c:	8819      	ldrh	r1, [r3, #0]
 8003b4e:	4c62      	ldr	r4, [pc, #392]	; (8003cd8 <printASCIIarray+0xd4c>)
 8003b50:	0013      	movs	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	189b      	adds	r3, r3, r2
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	189b      	adds	r3, r3, r2
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	18e3      	adds	r3, r4, r3
 8003b5e:	5c1a      	ldrb	r2, [r3, r0]
 8003b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b62:	545a      	strb	r2, [r3, r1]
					for(j=0;j<symLen;j++){
 8003b64:	2158      	movs	r1, #88	; 0x58
 8003b66:	1873      	adds	r3, r6, r1
 8003b68:	19db      	adds	r3, r3, r7
 8003b6a:	881a      	ldrh	r2, [r3, #0]
 8003b6c:	1873      	adds	r3, r6, r1
 8003b6e:	19db      	adds	r3, r3, r7
 8003b70:	3201      	adds	r2, #1
 8003b72:	801a      	strh	r2, [r3, #0]
 8003b74:	2330      	movs	r3, #48	; 0x30
 8003b76:	2158      	movs	r1, #88	; 0x58
 8003b78:	185b      	adds	r3, r3, r1
 8003b7a:	19da      	adds	r2, r3, r7
 8003b7c:	2328      	movs	r3, #40	; 0x28
 8003b7e:	185b      	adds	r3, r3, r1
 8003b80:	19db      	adds	r3, r3, r7
 8003b82:	8812      	ldrh	r2, [r2, #0]
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d3cf      	bcc.n	8003b2a <printASCIIarray+0xb9e>
							}
					for (k=0;k<symLen;k++){
 8003b8a:	232e      	movs	r3, #46	; 0x2e
 8003b8c:	185b      	adds	r3, r3, r1
 8003b8e:	19db      	adds	r3, r3, r7
 8003b90:	2200      	movs	r2, #0
 8003b92:	801a      	strh	r2, [r3, #0]
 8003b94:	e018      	b.n	8003bc8 <printASCIIarray+0xc3c>
						weoBuffer[k]=weoBuffer[k] & contrast;
 8003b96:	202e      	movs	r0, #46	; 0x2e
 8003b98:	2458      	movs	r4, #88	; 0x58
 8003b9a:	1903      	adds	r3, r0, r4
 8003b9c:	19db      	adds	r3, r3, r7
 8003b9e:	881b      	ldrh	r3, [r3, #0]
 8003ba0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003ba2:	5cd2      	ldrb	r2, [r2, r3]
 8003ba4:	1903      	adds	r3, r0, r4
 8003ba6:	19db      	adds	r3, r3, r7
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	212b      	movs	r1, #43	; 0x2b
 8003bac:	1909      	adds	r1, r1, r4
 8003bae:	19c9      	adds	r1, r1, r7
 8003bb0:	7809      	ldrb	r1, [r1, #0]
 8003bb2:	400a      	ands	r2, r1
 8003bb4:	b2d1      	uxtb	r1, r2
 8003bb6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003bb8:	54d1      	strb	r1, [r2, r3]
					for (k=0;k<symLen;k++){
 8003bba:	1903      	adds	r3, r0, r4
 8003bbc:	19db      	adds	r3, r3, r7
 8003bbe:	881a      	ldrh	r2, [r3, #0]
 8003bc0:	1903      	adds	r3, r0, r4
 8003bc2:	19db      	adds	r3, r3, r7
 8003bc4:	3201      	adds	r2, #1
 8003bc6:	801a      	strh	r2, [r3, #0]
 8003bc8:	232e      	movs	r3, #46	; 0x2e
 8003bca:	2658      	movs	r6, #88	; 0x58
 8003bcc:	199b      	adds	r3, r3, r6
 8003bce:	19da      	adds	r2, r3, r7
 8003bd0:	2328      	movs	r3, #40	; 0x28
 8003bd2:	199b      	adds	r3, r3, r6
 8003bd4:	19db      	adds	r3, r3, r7
 8003bd6:	8812      	ldrh	r2, [r2, #0]
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d3db      	bcc.n	8003b96 <printASCIIarray+0xc0a>
					}
				weoDrawRectangleFilled(ASCII_X, imY, ASCII_X+X_increment-1, imY + ASCII_height - decY, 0xFF, weoBuffer);
 8003bde:	2033      	movs	r0, #51	; 0x33
 8003be0:	1983      	adds	r3, r0, r6
 8003be2:	19da      	adds	r2, r3, r7
 8003be4:	231f      	movs	r3, #31
 8003be6:	199b      	adds	r3, r3, r6
 8003be8:	19db      	adds	r3, r3, r7
 8003bea:	7812      	ldrb	r2, [r2, #0]
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	18d3      	adds	r3, r2, r3
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b2dc      	uxtb	r4, r3
 8003bf6:	215e      	movs	r1, #94	; 0x5e
 8003bf8:	187a      	adds	r2, r7, r1
 8003bfa:	211e      	movs	r1, #30
 8003bfc:	198b      	adds	r3, r1, r6
 8003bfe:	19db      	adds	r3, r3, r7
 8003c00:	7812      	ldrb	r2, [r2, #0]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	18d3      	adds	r3, r2, r3
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	2134      	movs	r1, #52	; 0x34
 8003c0a:	198b      	adds	r3, r1, r6
 8003c0c:	19db      	adds	r3, r3, r7
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	215e      	movs	r1, #94	; 0x5e
 8003c16:	187b      	adds	r3, r7, r1
 8003c18:	7819      	ldrb	r1, [r3, #0]
 8003c1a:	0006      	movs	r6, r0
 8003c1c:	2358      	movs	r3, #88	; 0x58
 8003c1e:	18c3      	adds	r3, r0, r3
 8003c20:	19db      	adds	r3, r3, r7
 8003c22:	7818      	ldrb	r0, [r3, #0]
 8003c24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c26:	9301      	str	r3, [sp, #4]
 8003c28:	23ff      	movs	r3, #255	; 0xff
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	0013      	movs	r3, r2
 8003c2e:	0022      	movs	r2, r4
 8003c30:	f7fd fc9c 	bl	800156c <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 8003c34:	2058      	movs	r0, #88	; 0x58
 8003c36:	1833      	adds	r3, r6, r0
 8003c38:	19db      	adds	r3, r3, r7
 8003c3a:	1832      	adds	r2, r6, r0
 8003c3c:	19d1      	adds	r1, r2, r7
 8003c3e:	221f      	movs	r2, #31
 8003c40:	1812      	adds	r2, r2, r0
 8003c42:	19d2      	adds	r2, r2, r7
 8003c44:	7809      	ldrb	r1, [r1, #0]
 8003c46:	7812      	ldrb	r2, [r2, #0]
 8003c48:	188a      	adds	r2, r1, r2
 8003c4a:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 8003c4c:	2136      	movs	r1, #54	; 0x36
 8003c4e:	180b      	adds	r3, r1, r0
 8003c50:	19db      	adds	r3, r3, r7
 8003c52:	881a      	ldrh	r2, [r3, #0]
 8003c54:	180b      	adds	r3, r1, r0
 8003c56:	19db      	adds	r3, r3, r7
 8003c58:	3201      	adds	r2, #1
 8003c5a:	801a      	strh	r2, [r3, #0]
 8003c5c:	235d      	movs	r3, #93	; 0x5d
 8003c5e:	18fb      	adds	r3, r7, r3
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2136      	movs	r1, #54	; 0x36
 8003c66:	2058      	movs	r0, #88	; 0x58
 8003c68:	180a      	adds	r2, r1, r0
 8003c6a:	19d2      	adds	r2, r2, r7
 8003c6c:	8812      	ldrh	r2, [r2, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d200      	bcs.n	8003c74 <printASCIIarray+0xce8>
 8003c72:	e753      	b.n	8003b1c <printASCIIarray+0xb90>
				}
				for(i=0;i<symLen;i++){
 8003c74:	180b      	adds	r3, r1, r0
 8003c76:	19db      	adds	r3, r3, r7
 8003c78:	2200      	movs	r2, #0
 8003c7a:	801a      	strh	r2, [r3, #0]
 8003c7c:	e00f      	b.n	8003c9e <printASCIIarray+0xd12>
									weoBuffer[j]=0x00;
 8003c7e:	2330      	movs	r3, #48	; 0x30
 8003c80:	2058      	movs	r0, #88	; 0x58
 8003c82:	181b      	adds	r3, r3, r0
 8003c84:	19db      	adds	r3, r3, r7
 8003c86:	881b      	ldrh	r3, [r3, #0]
 8003c88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	54d1      	strb	r1, [r2, r3]
				for(i=0;i<symLen;i++){
 8003c8e:	2136      	movs	r1, #54	; 0x36
 8003c90:	180b      	adds	r3, r1, r0
 8003c92:	19db      	adds	r3, r3, r7
 8003c94:	881a      	ldrh	r2, [r3, #0]
 8003c96:	180b      	adds	r3, r1, r0
 8003c98:	19db      	adds	r3, r3, r7
 8003c9a:	3201      	adds	r2, #1
 8003c9c:	801a      	strh	r2, [r3, #0]
 8003c9e:	2336      	movs	r3, #54	; 0x36
 8003ca0:	2158      	movs	r1, #88	; 0x58
 8003ca2:	185b      	adds	r3, r3, r1
 8003ca4:	19da      	adds	r2, r3, r7
 8003ca6:	2328      	movs	r3, #40	; 0x28
 8003ca8:	185b      	adds	r3, r3, r1
 8003caa:	19db      	adds	r3, r3, r7
 8003cac:	8812      	ldrh	r2, [r2, #0]
 8003cae:	881b      	ldrh	r3, [r3, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d3e4      	bcc.n	8003c7e <printASCIIarray+0xcf2>
 8003cb4:	46ad      	mov	sp, r5
							}
			}
			cmd2Execute=0;
 8003cb6:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <printASCIIarray+0xd50>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	701a      	strb	r2, [r3, #0]

			GPIOC->ODR |= 1 << 6;	//set BF
 8003cbc:	4b08      	ldr	r3, [pc, #32]	; (8003ce0 <printASCIIarray+0xd54>)
 8003cbe:	695a      	ldr	r2, [r3, #20]
 8003cc0:	4b07      	ldr	r3, [pc, #28]	; (8003ce0 <printASCIIarray+0xd54>)
 8003cc2:	2140      	movs	r1, #64	; 0x40
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	615a      	str	r2, [r3, #20]

	}
 8003cc8:	46c0      	nop			; (mov r8, r8)
 8003cca:	0018      	movs	r0, r3
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	b024      	add	sp, #144	; 0x90
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	46b8      	mov	r8, r7
 8003cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	08015df8 	.word	0x08015df8
 8003cdc:	20000402 	.word	0x20000402
 8003ce0:	50000800 	.word	0x50000800

08003ce4 <LIS3DHsendCMD>:
////		HAL_Delay(500);
////		GPIOC->ODR |= 1 << 6;	//set BF
////		cmd2Execute=0;
//	}
//=============================================================================================================
	void LIS3DHsendCMD(uint8_t reg, uint8_t data) {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	0002      	movs	r2, r0
 8003cec:	1dfb      	adds	r3, r7, #7
 8003cee:	701a      	strb	r2, [r3, #0]
 8003cf0:	1dbb      	adds	r3, r7, #6
 8003cf2:	1c0a      	adds	r2, r1, #0
 8003cf4:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 8003cf6:	210c      	movs	r1, #12
 8003cf8:	187b      	adds	r3, r7, r1
 8003cfa:	1dfa      	adds	r2, r7, #7
 8003cfc:	7812      	ldrb	r2, [r2, #0]
 8003cfe:	701a      	strb	r2, [r3, #0]
 8003d00:	187b      	adds	r3, r7, r1
 8003d02:	1dba      	adds	r2, r7, #6
 8003d04:	7812      	ldrb	r2, [r2, #0]
 8003d06:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x32, buf, 2, 1000);	//32h - address for writing
 8003d08:	187a      	adds	r2, r7, r1
 8003d0a:	4806      	ldr	r0, [pc, #24]	; (8003d24 <LIS3DHsendCMD+0x40>)
 8003d0c:	23fa      	movs	r3, #250	; 0xfa
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	2302      	movs	r3, #2
 8003d14:	2132      	movs	r1, #50	; 0x32
 8003d16:	f001 fe1b 	bl	8005950 <HAL_I2C_Master_Transmit>
	}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b004      	add	sp, #16
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	2000008c 	.word	0x2000008c

08003d28 <LIS3DHsetup>:
//	  xVal = buffer[0];
//	  yVal = buffer[1];
//	  zVal = buffer[2];
//	}
//=============================================================================================================
	void LIS3DHsetup(void){
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
		uint8_t CTRL_REG1_val=0x00;
 8003d2e:	1dfb      	adds	r3, r7, #7
 8003d30:	2200      	movs	r2, #0
 8003d32:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG4_val=0x00;
 8003d34:	1dbb      	adds	r3, r7, #6
 8003d36:	2200      	movs	r2, #0
 8003d38:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG5_val=0x00;
 8003d3a:	1d7b      	adds	r3, r7, #5
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG6_val=0x00;
 8003d40:	1d3b      	adds	r3, r7, #4
 8003d42:	2200      	movs	r2, #0
 8003d44:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_CTRL_REG_val=0x00;
 8003d46:	1cfb      	adds	r3, r7, #3
 8003d48:	2200      	movs	r2, #0
 8003d4a:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_SRC_REG_val=0x00;
 8003d4c:	1cbb      	adds	r3, r7, #2
 8003d4e:	2200      	movs	r2, #0
 8003d50:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_CFG_val=0x00;
 8003d52:	1c7b      	adds	r3, r7, #1
 8003d54:	2200      	movs	r2, #0
 8003d56:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_SRC_val=0x00;
 8003d58:	003b      	movs	r3, r7
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	701a      	strb	r2, [r3, #0]

		LIS3DHsendCMD(CTRL_REG1,(CTRL_REG1_val|accelDataRate_25_Hz|Xen|Yen|Zen));//data rate selection
 8003d5e:	1dfb      	adds	r3, r7, #7
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2237      	movs	r2, #55	; 0x37
 8003d64:	4313      	orrs	r3, r2
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	0019      	movs	r1, r3
 8003d6a:	2020      	movs	r0, #32
 8003d6c:	f7ff ffba 	bl	8003ce4 <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG2,);//HPFilter
//		LIS3DHsendCMD(CTRL_REG3,);
		LIS3DHsendCMD(CTRL_REG4,(CTRL_REG4_val|BDU|FULL_SCALE_2G|HR));
 8003d70:	1dbb      	adds	r3, r7, #6
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	227c      	movs	r2, #124	; 0x7c
 8003d76:	4252      	negs	r2, r2
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	0019      	movs	r1, r3
 8003d7e:	2023      	movs	r0, #35	; 0x23
 8003d80:	f7ff ffb0 	bl	8003ce4 <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG6,);
//		LIS3DHsendCMD(FIFO_CTRL_REG,FIFO_CTRL_REG_val);	//	2B configured
//		LIS3DHsendCMD(FIFO_SRC_REG,FIFO_SRC_REG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_CFG,INT_1_CFG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_SRC_val,INT_1_SRC_val);	//	2B configured
	}
 8003d84:	46c0      	nop			; (mov r8, r8)
 8003d86:	46bd      	mov	sp, r7
 8003d88:	b002      	add	sp, #8
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003d90:	46c0      	nop			; (mov r8, r8)
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d9e:	4b11      	ldr	r3, [pc, #68]	; (8003de4 <HAL_MspInit+0x4c>)
 8003da0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003da2:	4b10      	ldr	r3, [pc, #64]	; (8003de4 <HAL_MspInit+0x4c>)
 8003da4:	2101      	movs	r1, #1
 8003da6:	430a      	orrs	r2, r1
 8003da8:	641a      	str	r2, [r3, #64]	; 0x40
 8003daa:	4b0e      	ldr	r3, [pc, #56]	; (8003de4 <HAL_MspInit+0x4c>)
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	2201      	movs	r2, #1
 8003db0:	4013      	ands	r3, r2
 8003db2:	607b      	str	r3, [r7, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003db6:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <HAL_MspInit+0x4c>)
 8003db8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dba:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <HAL_MspInit+0x4c>)
 8003dbc:	2180      	movs	r1, #128	; 0x80
 8003dbe:	0549      	lsls	r1, r1, #21
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8003dc4:	4b07      	ldr	r3, [pc, #28]	; (8003de4 <HAL_MspInit+0x4c>)
 8003dc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dc8:	2380      	movs	r3, #128	; 0x80
 8003dca:	055b      	lsls	r3, r3, #21
 8003dcc:	4013      	ands	r3, r2
 8003dce:	603b      	str	r3, [r7, #0]
 8003dd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8003dd2:	2380      	movs	r3, #128	; 0x80
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f000 fd42 	bl	8004860 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ddc:	46c0      	nop			; (mov r8, r8)
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b002      	add	sp, #8
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40021000 	.word	0x40021000

08003de8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003de8:	b590      	push	{r4, r7, lr}
 8003dea:	b089      	sub	sp, #36	; 0x24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df0:	240c      	movs	r4, #12
 8003df2:	193b      	adds	r3, r7, r4
 8003df4:	0018      	movs	r0, r3
 8003df6:	2314      	movs	r3, #20
 8003df8:	001a      	movs	r2, r3
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	f008 fde6 	bl	800c9cc <memset>
  if(hcomp->Instance==COMP1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a10      	ldr	r2, [pc, #64]	; (8003e48 <HAL_COMP_MspInit+0x60>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d11a      	bne.n	8003e40 <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e0a:	4b10      	ldr	r3, [pc, #64]	; (8003e4c <HAL_COMP_MspInit+0x64>)
 8003e0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e0e:	4b0f      	ldr	r3, [pc, #60]	; (8003e4c <HAL_COMP_MspInit+0x64>)
 8003e10:	2102      	movs	r1, #2
 8003e12:	430a      	orrs	r2, r1
 8003e14:	635a      	str	r2, [r3, #52]	; 0x34
 8003e16:	4b0d      	ldr	r3, [pc, #52]	; (8003e4c <HAL_COMP_MspInit+0x64>)
 8003e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	60bb      	str	r3, [r7, #8]
 8003e20:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e22:	193b      	adds	r3, r7, r4
 8003e24:	2204      	movs	r2, #4
 8003e26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e28:	193b      	adds	r3, r7, r4
 8003e2a:	2203      	movs	r2, #3
 8003e2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2e:	193b      	adds	r3, r7, r4
 8003e30:	2200      	movs	r2, #0
 8003e32:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e34:	193b      	adds	r3, r7, r4
 8003e36:	4a06      	ldr	r2, [pc, #24]	; (8003e50 <HAL_COMP_MspInit+0x68>)
 8003e38:	0019      	movs	r1, r3
 8003e3a:	0010      	movs	r0, r2
 8003e3c:	f001 fb8e 	bl	800555c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8003e40:	46c0      	nop			; (mov r8, r8)
 8003e42:	46bd      	mov	sp, r7
 8003e44:	b009      	add	sp, #36	; 0x24
 8003e46:	bd90      	pop	{r4, r7, pc}
 8003e48:	40010200 	.word	0x40010200
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	50000400 	.word	0x50000400

08003e54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e54:	b590      	push	{r4, r7, lr}
 8003e56:	b097      	sub	sp, #92	; 0x5c
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e5c:	2344      	movs	r3, #68	; 0x44
 8003e5e:	18fb      	adds	r3, r7, r3
 8003e60:	0018      	movs	r0, r3
 8003e62:	2314      	movs	r3, #20
 8003e64:	001a      	movs	r2, r3
 8003e66:	2100      	movs	r1, #0
 8003e68:	f008 fdb0 	bl	800c9cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e6c:	2410      	movs	r4, #16
 8003e6e:	193b      	adds	r3, r7, r4
 8003e70:	0018      	movs	r0, r3
 8003e72:	2334      	movs	r3, #52	; 0x34
 8003e74:	001a      	movs	r2, r3
 8003e76:	2100      	movs	r1, #0
 8003e78:	f008 fda8 	bl	800c9cc <memset>
  if(hi2c->Instance==I2C1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a27      	ldr	r2, [pc, #156]	; (8003f20 <HAL_I2C_MspInit+0xcc>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d147      	bne.n	8003f16 <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003e86:	193b      	adds	r3, r7, r4
 8003e88:	2220      	movs	r2, #32
 8003e8a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003e8c:	193b      	adds	r3, r7, r4
 8003e8e:	2200      	movs	r2, #0
 8003e90:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e92:	193b      	adds	r3, r7, r4
 8003e94:	0018      	movs	r0, r3
 8003e96:	f003 ffd9 	bl	8007e4c <HAL_RCCEx_PeriphCLKConfig>
 8003e9a:	1e03      	subs	r3, r0, #0
 8003e9c:	d001      	beq.n	8003ea2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003e9e:	f7ff ff75 	bl	8003d8c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ea2:	4b20      	ldr	r3, [pc, #128]	; (8003f24 <HAL_I2C_MspInit+0xd0>)
 8003ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ea6:	4b1f      	ldr	r3, [pc, #124]	; (8003f24 <HAL_I2C_MspInit+0xd0>)
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	635a      	str	r2, [r3, #52]	; 0x34
 8003eae:	4b1d      	ldr	r3, [pc, #116]	; (8003f24 <HAL_I2C_MspInit+0xd0>)
 8003eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003eba:	2144      	movs	r1, #68	; 0x44
 8003ebc:	187b      	adds	r3, r7, r1
 8003ebe:	22c0      	movs	r2, #192	; 0xc0
 8003ec0:	00d2      	lsls	r2, r2, #3
 8003ec2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ec4:	187b      	adds	r3, r7, r1
 8003ec6:	2212      	movs	r2, #18
 8003ec8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003eca:	187b      	adds	r3, r7, r1
 8003ecc:	2201      	movs	r2, #1
 8003ece:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ed0:	187b      	adds	r3, r7, r1
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003ed6:	187b      	adds	r3, r7, r1
 8003ed8:	2206      	movs	r2, #6
 8003eda:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003edc:	187a      	adds	r2, r7, r1
 8003ede:	23a0      	movs	r3, #160	; 0xa0
 8003ee0:	05db      	lsls	r3, r3, #23
 8003ee2:	0011      	movs	r1, r2
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f001 fb39 	bl	800555c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003eea:	4b0e      	ldr	r3, [pc, #56]	; (8003f24 <HAL_I2C_MspInit+0xd0>)
 8003eec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eee:	4b0d      	ldr	r3, [pc, #52]	; (8003f24 <HAL_I2C_MspInit+0xd0>)
 8003ef0:	2180      	movs	r1, #128	; 0x80
 8003ef2:	0389      	lsls	r1, r1, #14
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ef8:	4b0a      	ldr	r3, [pc, #40]	; (8003f24 <HAL_I2C_MspInit+0xd0>)
 8003efa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003efc:	2380      	movs	r3, #128	; 0x80
 8003efe:	039b      	lsls	r3, r3, #14
 8003f00:	4013      	ands	r3, r2
 8003f02:	60bb      	str	r3, [r7, #8]
 8003f04:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8003f06:	2200      	movs	r2, #0
 8003f08:	2100      	movs	r1, #0
 8003f0a:	2017      	movs	r0, #23
 8003f0c:	f000 ffca 	bl	8004ea4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8003f10:	2017      	movs	r0, #23
 8003f12:	f000 ffdc 	bl	8004ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	b017      	add	sp, #92	; 0x5c
 8003f1c:	bd90      	pop	{r4, r7, pc}
 8003f1e:	46c0      	nop			; (mov r8, r8)
 8003f20:	40005400 	.word	0x40005400
 8003f24:	40021000 	.word	0x40021000

08003f28 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003f28:	b590      	push	{r4, r7, lr}
 8003f2a:	b099      	sub	sp, #100	; 0x64
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f30:	234c      	movs	r3, #76	; 0x4c
 8003f32:	18fb      	adds	r3, r7, r3
 8003f34:	0018      	movs	r0, r3
 8003f36:	2314      	movs	r3, #20
 8003f38:	001a      	movs	r2, r3
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	f008 fd46 	bl	800c9cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f40:	2418      	movs	r4, #24
 8003f42:	193b      	adds	r3, r7, r4
 8003f44:	0018      	movs	r0, r3
 8003f46:	2334      	movs	r3, #52	; 0x34
 8003f48:	001a      	movs	r2, r3
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	f008 fd3e 	bl	800c9cc <memset>
  if(hi2s->Instance==SPI1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a4f      	ldr	r2, [pc, #316]	; (8004094 <HAL_I2S_MspInit+0x16c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d000      	beq.n	8003f5c <HAL_I2S_MspInit+0x34>
 8003f5a:	e097      	b.n	800408c <HAL_I2S_MspInit+0x164>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8003f5c:	193b      	adds	r3, r7, r4
 8003f5e:	2280      	movs	r2, #128	; 0x80
 8003f60:	0112      	lsls	r2, r2, #4
 8003f62:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8003f64:	193b      	adds	r3, r7, r4
 8003f66:	2200      	movs	r2, #0
 8003f68:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f6a:	193b      	adds	r3, r7, r4
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f003 ff6d 	bl	8007e4c <HAL_RCCEx_PeriphCLKConfig>
 8003f72:	1e03      	subs	r3, r0, #0
 8003f74:	d001      	beq.n	8003f7a <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8003f76:	f7ff ff09 	bl	8003d8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f7a:	4b47      	ldr	r3, [pc, #284]	; (8004098 <HAL_I2S_MspInit+0x170>)
 8003f7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f7e:	4b46      	ldr	r3, [pc, #280]	; (8004098 <HAL_I2S_MspInit+0x170>)
 8003f80:	2180      	movs	r1, #128	; 0x80
 8003f82:	0149      	lsls	r1, r1, #5
 8003f84:	430a      	orrs	r2, r1
 8003f86:	641a      	str	r2, [r3, #64]	; 0x40
 8003f88:	4b43      	ldr	r3, [pc, #268]	; (8004098 <HAL_I2S_MspInit+0x170>)
 8003f8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f8c:	2380      	movs	r3, #128	; 0x80
 8003f8e:	015b      	lsls	r3, r3, #5
 8003f90:	4013      	ands	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f96:	4b40      	ldr	r3, [pc, #256]	; (8004098 <HAL_I2S_MspInit+0x170>)
 8003f98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f9a:	4b3f      	ldr	r3, [pc, #252]	; (8004098 <HAL_I2S_MspInit+0x170>)
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	635a      	str	r2, [r3, #52]	; 0x34
 8003fa2:	4b3d      	ldr	r3, [pc, #244]	; (8004098 <HAL_I2S_MspInit+0x170>)
 8003fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	4013      	ands	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
 8003fac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fae:	4b3a      	ldr	r3, [pc, #232]	; (8004098 <HAL_I2S_MspInit+0x170>)
 8003fb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fb2:	4b39      	ldr	r3, [pc, #228]	; (8004098 <HAL_I2S_MspInit+0x170>)
 8003fb4:	2102      	movs	r1, #2
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	635a      	str	r2, [r3, #52]	; 0x34
 8003fba:	4b37      	ldr	r3, [pc, #220]	; (8004098 <HAL_I2S_MspInit+0x170>)
 8003fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003fc6:	214c      	movs	r1, #76	; 0x4c
 8003fc8:	187b      	adds	r3, r7, r1
 8003fca:	2280      	movs	r2, #128	; 0x80
 8003fcc:	0212      	lsls	r2, r2, #8
 8003fce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd0:	000c      	movs	r4, r1
 8003fd2:	193b      	adds	r3, r7, r4
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fd8:	193b      	adds	r3, r7, r4
 8003fda:	2201      	movs	r2, #1
 8003fdc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fde:	193b      	adds	r3, r7, r4
 8003fe0:	2203      	movs	r2, #3
 8003fe2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003fe4:	193b      	adds	r3, r7, r4
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fea:	193a      	adds	r2, r7, r4
 8003fec:	23a0      	movs	r3, #160	; 0xa0
 8003fee:	05db      	lsls	r3, r3, #23
 8003ff0:	0011      	movs	r1, r2
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	f001 fab2 	bl	800555c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003ff8:	0021      	movs	r1, r4
 8003ffa:	187b      	adds	r3, r7, r1
 8003ffc:	2238      	movs	r2, #56	; 0x38
 8003ffe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004000:	187b      	adds	r3, r7, r1
 8004002:	2202      	movs	r2, #2
 8004004:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004006:	187b      	adds	r3, r7, r1
 8004008:	2201      	movs	r2, #1
 800400a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800400c:	187b      	adds	r3, r7, r1
 800400e:	2203      	movs	r2, #3
 8004010:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004012:	187b      	adds	r3, r7, r1
 8004014:	2200      	movs	r2, #0
 8004016:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004018:	187b      	adds	r3, r7, r1
 800401a:	4a20      	ldr	r2, [pc, #128]	; (800409c <HAL_I2S_MspInit+0x174>)
 800401c:	0019      	movs	r1, r3
 800401e:	0010      	movs	r0, r2
 8004020:	f001 fa9c 	bl	800555c <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8004024:	4b1e      	ldr	r3, [pc, #120]	; (80040a0 <HAL_I2S_MspInit+0x178>)
 8004026:	4a1f      	ldr	r2, [pc, #124]	; (80040a4 <HAL_I2S_MspInit+0x17c>)
 8004028:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800402a:	4b1d      	ldr	r3, [pc, #116]	; (80040a0 <HAL_I2S_MspInit+0x178>)
 800402c:	2211      	movs	r2, #17
 800402e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004030:	4b1b      	ldr	r3, [pc, #108]	; (80040a0 <HAL_I2S_MspInit+0x178>)
 8004032:	2210      	movs	r2, #16
 8004034:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004036:	4b1a      	ldr	r3, [pc, #104]	; (80040a0 <HAL_I2S_MspInit+0x178>)
 8004038:	2200      	movs	r2, #0
 800403a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800403c:	4b18      	ldr	r3, [pc, #96]	; (80040a0 <HAL_I2S_MspInit+0x178>)
 800403e:	2280      	movs	r2, #128	; 0x80
 8004040:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004042:	4b17      	ldr	r3, [pc, #92]	; (80040a0 <HAL_I2S_MspInit+0x178>)
 8004044:	2280      	movs	r2, #128	; 0x80
 8004046:	0052      	lsls	r2, r2, #1
 8004048:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800404a:	4b15      	ldr	r3, [pc, #84]	; (80040a0 <HAL_I2S_MspInit+0x178>)
 800404c:	2280      	movs	r2, #128	; 0x80
 800404e:	00d2      	lsls	r2, r2, #3
 8004050:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004052:	4b13      	ldr	r3, [pc, #76]	; (80040a0 <HAL_I2S_MspInit+0x178>)
 8004054:	2200      	movs	r2, #0
 8004056:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004058:	4b11      	ldr	r3, [pc, #68]	; (80040a0 <HAL_I2S_MspInit+0x178>)
 800405a:	22c0      	movs	r2, #192	; 0xc0
 800405c:	0192      	lsls	r2, r2, #6
 800405e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004060:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <HAL_I2S_MspInit+0x178>)
 8004062:	0018      	movs	r0, r3
 8004064:	f000 ff50 	bl	8004f08 <HAL_DMA_Init>
 8004068:	1e03      	subs	r3, r0, #0
 800406a:	d001      	beq.n	8004070 <HAL_I2S_MspInit+0x148>
    {
      Error_Handler();
 800406c:	f7ff fe8e 	bl	8003d8c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a0b      	ldr	r2, [pc, #44]	; (80040a0 <HAL_I2S_MspInit+0x178>)
 8004074:	62da      	str	r2, [r3, #44]	; 0x2c
 8004076:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <HAL_I2S_MspInit+0x178>)
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800407c:	2200      	movs	r2, #0
 800407e:	2100      	movs	r1, #0
 8004080:	2019      	movs	r0, #25
 8004082:	f000 ff0f 	bl	8004ea4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004086:	2019      	movs	r0, #25
 8004088:	f000 ff21 	bl	8004ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800408c:	46c0      	nop			; (mov r8, r8)
 800408e:	46bd      	mov	sp, r7
 8004090:	b019      	add	sp, #100	; 0x64
 8004092:	bd90      	pop	{r4, r7, pc}
 8004094:	40013000 	.word	0x40013000
 8004098:	40021000 	.word	0x40021000
 800409c:	50000400 	.word	0x50000400
 80040a0:	2000011c 	.word	0x2000011c
 80040a4:	40020008 	.word	0x40020008

080040a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80040a8:	b590      	push	{r4, r7, lr}
 80040aa:	b08b      	sub	sp, #44	; 0x2c
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040b0:	2414      	movs	r4, #20
 80040b2:	193b      	adds	r3, r7, r4
 80040b4:	0018      	movs	r0, r3
 80040b6:	2314      	movs	r3, #20
 80040b8:	001a      	movs	r2, r3
 80040ba:	2100      	movs	r1, #0
 80040bc:	f008 fc86 	bl	800c9cc <memset>
  if(hspi->Instance==SPI2)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a54      	ldr	r2, [pc, #336]	; (8004218 <HAL_SPI_MspInit+0x170>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d000      	beq.n	80040cc <HAL_SPI_MspInit+0x24>
 80040ca:	e0a0      	b.n	800420e <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80040cc:	4b53      	ldr	r3, [pc, #332]	; (800421c <HAL_SPI_MspInit+0x174>)
 80040ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040d0:	4b52      	ldr	r3, [pc, #328]	; (800421c <HAL_SPI_MspInit+0x174>)
 80040d2:	2180      	movs	r1, #128	; 0x80
 80040d4:	01c9      	lsls	r1, r1, #7
 80040d6:	430a      	orrs	r2, r1
 80040d8:	63da      	str	r2, [r3, #60]	; 0x3c
 80040da:	4b50      	ldr	r3, [pc, #320]	; (800421c <HAL_SPI_MspInit+0x174>)
 80040dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040de:	2380      	movs	r3, #128	; 0x80
 80040e0:	01db      	lsls	r3, r3, #7
 80040e2:	4013      	ands	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
 80040e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040e8:	4b4c      	ldr	r3, [pc, #304]	; (800421c <HAL_SPI_MspInit+0x174>)
 80040ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ec:	4b4b      	ldr	r3, [pc, #300]	; (800421c <HAL_SPI_MspInit+0x174>)
 80040ee:	2102      	movs	r1, #2
 80040f0:	430a      	orrs	r2, r1
 80040f2:	635a      	str	r2, [r3, #52]	; 0x34
 80040f4:	4b49      	ldr	r3, [pc, #292]	; (800421c <HAL_SPI_MspInit+0x174>)
 80040f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f8:	2202      	movs	r2, #2
 80040fa:	4013      	ands	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004100:	193b      	adds	r3, r7, r4
 8004102:	2240      	movs	r2, #64	; 0x40
 8004104:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004106:	193b      	adds	r3, r7, r4
 8004108:	2202      	movs	r2, #2
 800410a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800410c:	193b      	adds	r3, r7, r4
 800410e:	2201      	movs	r2, #1
 8004110:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004112:	193b      	adds	r3, r7, r4
 8004114:	2200      	movs	r2, #0
 8004116:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8004118:	193b      	adds	r3, r7, r4
 800411a:	2204      	movs	r2, #4
 800411c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800411e:	193b      	adds	r3, r7, r4
 8004120:	4a3f      	ldr	r2, [pc, #252]	; (8004220 <HAL_SPI_MspInit+0x178>)
 8004122:	0019      	movs	r1, r3
 8004124:	0010      	movs	r0, r2
 8004126:	f001 fa19 	bl	800555c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800412a:	0021      	movs	r1, r4
 800412c:	187b      	adds	r3, r7, r1
 800412e:	22c0      	movs	r2, #192	; 0xc0
 8004130:	0052      	lsls	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004134:	187b      	adds	r3, r7, r1
 8004136:	2202      	movs	r2, #2
 8004138:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800413a:	187b      	adds	r3, r7, r1
 800413c:	2201      	movs	r2, #1
 800413e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004140:	187b      	adds	r3, r7, r1
 8004142:	2200      	movs	r2, #0
 8004144:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8004146:	187b      	adds	r3, r7, r1
 8004148:	2201      	movs	r2, #1
 800414a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800414c:	187b      	adds	r3, r7, r1
 800414e:	4a34      	ldr	r2, [pc, #208]	; (8004220 <HAL_SPI_MspInit+0x178>)
 8004150:	0019      	movs	r1, r3
 8004152:	0010      	movs	r0, r2
 8004154:	f001 fa02 	bl	800555c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel2;
 8004158:	4b32      	ldr	r3, [pc, #200]	; (8004224 <HAL_SPI_MspInit+0x17c>)
 800415a:	4a33      	ldr	r2, [pc, #204]	; (8004228 <HAL_SPI_MspInit+0x180>)
 800415c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800415e:	4b31      	ldr	r3, [pc, #196]	; (8004224 <HAL_SPI_MspInit+0x17c>)
 8004160:	2212      	movs	r2, #18
 8004162:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004164:	4b2f      	ldr	r3, [pc, #188]	; (8004224 <HAL_SPI_MspInit+0x17c>)
 8004166:	2200      	movs	r2, #0
 8004168:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800416a:	4b2e      	ldr	r3, [pc, #184]	; (8004224 <HAL_SPI_MspInit+0x17c>)
 800416c:	2200      	movs	r2, #0
 800416e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004170:	4b2c      	ldr	r3, [pc, #176]	; (8004224 <HAL_SPI_MspInit+0x17c>)
 8004172:	2280      	movs	r2, #128	; 0x80
 8004174:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004176:	4b2b      	ldr	r3, [pc, #172]	; (8004224 <HAL_SPI_MspInit+0x17c>)
 8004178:	2200      	movs	r2, #0
 800417a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800417c:	4b29      	ldr	r3, [pc, #164]	; (8004224 <HAL_SPI_MspInit+0x17c>)
 800417e:	2200      	movs	r2, #0
 8004180:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8004182:	4b28      	ldr	r3, [pc, #160]	; (8004224 <HAL_SPI_MspInit+0x17c>)
 8004184:	2200      	movs	r2, #0
 8004186:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004188:	4b26      	ldr	r3, [pc, #152]	; (8004224 <HAL_SPI_MspInit+0x17c>)
 800418a:	2280      	movs	r2, #128	; 0x80
 800418c:	0192      	lsls	r2, r2, #6
 800418e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004190:	4b24      	ldr	r3, [pc, #144]	; (8004224 <HAL_SPI_MspInit+0x17c>)
 8004192:	0018      	movs	r0, r3
 8004194:	f000 feb8 	bl	8004f08 <HAL_DMA_Init>
 8004198:	1e03      	subs	r3, r0, #0
 800419a:	d001      	beq.n	80041a0 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 800419c:	f7ff fdf6 	bl	8003d8c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a20      	ldr	r2, [pc, #128]	; (8004224 <HAL_SPI_MspInit+0x17c>)
 80041a4:	659a      	str	r2, [r3, #88]	; 0x58
 80041a6:	4b1f      	ldr	r3, [pc, #124]	; (8004224 <HAL_SPI_MspInit+0x17c>)
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel4;
 80041ac:	4b1f      	ldr	r3, [pc, #124]	; (800422c <HAL_SPI_MspInit+0x184>)
 80041ae:	4a20      	ldr	r2, [pc, #128]	; (8004230 <HAL_SPI_MspInit+0x188>)
 80041b0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80041b2:	4b1e      	ldr	r3, [pc, #120]	; (800422c <HAL_SPI_MspInit+0x184>)
 80041b4:	2213      	movs	r2, #19
 80041b6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80041b8:	4b1c      	ldr	r3, [pc, #112]	; (800422c <HAL_SPI_MspInit+0x184>)
 80041ba:	2210      	movs	r2, #16
 80041bc:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041be:	4b1b      	ldr	r3, [pc, #108]	; (800422c <HAL_SPI_MspInit+0x184>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80041c4:	4b19      	ldr	r3, [pc, #100]	; (800422c <HAL_SPI_MspInit+0x184>)
 80041c6:	2280      	movs	r2, #128	; 0x80
 80041c8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041ca:	4b18      	ldr	r3, [pc, #96]	; (800422c <HAL_SPI_MspInit+0x184>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041d0:	4b16      	ldr	r3, [pc, #88]	; (800422c <HAL_SPI_MspInit+0x184>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80041d6:	4b15      	ldr	r3, [pc, #84]	; (800422c <HAL_SPI_MspInit+0x184>)
 80041d8:	2200      	movs	r2, #0
 80041da:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80041dc:	4b13      	ldr	r3, [pc, #76]	; (800422c <HAL_SPI_MspInit+0x184>)
 80041de:	2200      	movs	r2, #0
 80041e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80041e2:	4b12      	ldr	r3, [pc, #72]	; (800422c <HAL_SPI_MspInit+0x184>)
 80041e4:	0018      	movs	r0, r3
 80041e6:	f000 fe8f 	bl	8004f08 <HAL_DMA_Init>
 80041ea:	1e03      	subs	r3, r0, #0
 80041ec:	d001      	beq.n	80041f2 <HAL_SPI_MspInit+0x14a>
    {
      Error_Handler();
 80041ee:	f7ff fdcd 	bl	8003d8c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a0d      	ldr	r2, [pc, #52]	; (800422c <HAL_SPI_MspInit+0x184>)
 80041f6:	655a      	str	r2, [r3, #84]	; 0x54
 80041f8:	4b0c      	ldr	r3, [pc, #48]	; (800422c <HAL_SPI_MspInit+0x184>)
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80041fe:	2200      	movs	r2, #0
 8004200:	2100      	movs	r1, #0
 8004202:	201a      	movs	r0, #26
 8004204:	f000 fe4e 	bl	8004ea4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004208:	201a      	movs	r0, #26
 800420a:	f000 fe60 	bl	8004ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	46bd      	mov	sp, r7
 8004212:	b00b      	add	sp, #44	; 0x2c
 8004214:	bd90      	pop	{r4, r7, pc}
 8004216:	46c0      	nop			; (mov r8, r8)
 8004218:	40003800 	.word	0x40003800
 800421c:	40021000 	.word	0x40021000
 8004220:	50000400 	.word	0x50000400
 8004224:	200001dc 	.word	0x200001dc
 8004228:	4002001c 	.word	0x4002001c
 800422c:	20000238 	.word	0x20000238
 8004230:	40020044 	.word	0x40020044

08004234 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004234:	b590      	push	{r4, r7, lr}
 8004236:	b091      	sub	sp, #68	; 0x44
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800423c:	240c      	movs	r4, #12
 800423e:	193b      	adds	r3, r7, r4
 8004240:	0018      	movs	r0, r3
 8004242:	2334      	movs	r3, #52	; 0x34
 8004244:	001a      	movs	r2, r3
 8004246:	2100      	movs	r1, #0
 8004248:	f008 fbc0 	bl	800c9cc <memset>
  if(htim_base->Instance==TIM1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a11      	ldr	r2, [pc, #68]	; (8004298 <HAL_TIM_Base_MspInit+0x64>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d11c      	bne.n	8004290 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8004256:	193b      	adds	r3, r7, r4
 8004258:	2280      	movs	r2, #128	; 0x80
 800425a:	0392      	lsls	r2, r2, #14
 800425c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800425e:	193b      	adds	r3, r7, r4
 8004260:	2200      	movs	r2, #0
 8004262:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004264:	193b      	adds	r3, r7, r4
 8004266:	0018      	movs	r0, r3
 8004268:	f003 fdf0 	bl	8007e4c <HAL_RCCEx_PeriphCLKConfig>
 800426c:	1e03      	subs	r3, r0, #0
 800426e:	d001      	beq.n	8004274 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8004270:	f7ff fd8c 	bl	8003d8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004274:	4b09      	ldr	r3, [pc, #36]	; (800429c <HAL_TIM_Base_MspInit+0x68>)
 8004276:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004278:	4b08      	ldr	r3, [pc, #32]	; (800429c <HAL_TIM_Base_MspInit+0x68>)
 800427a:	2180      	movs	r1, #128	; 0x80
 800427c:	0109      	lsls	r1, r1, #4
 800427e:	430a      	orrs	r2, r1
 8004280:	641a      	str	r2, [r3, #64]	; 0x40
 8004282:	4b06      	ldr	r3, [pc, #24]	; (800429c <HAL_TIM_Base_MspInit+0x68>)
 8004284:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004286:	2380      	movs	r3, #128	; 0x80
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	4013      	ands	r3, r2
 800428c:	60bb      	str	r3, [r7, #8]
 800428e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004290:	46c0      	nop			; (mov r8, r8)
 8004292:	46bd      	mov	sp, r7
 8004294:	b011      	add	sp, #68	; 0x44
 8004296:	bd90      	pop	{r4, r7, pc}
 8004298:	40012c00 	.word	0x40012c00
 800429c:	40021000 	.word	0x40021000

080042a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80042a0:	b590      	push	{r4, r7, lr}
 80042a2:	b089      	sub	sp, #36	; 0x24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a8:	240c      	movs	r4, #12
 80042aa:	193b      	adds	r3, r7, r4
 80042ac:	0018      	movs	r0, r3
 80042ae:	2314      	movs	r3, #20
 80042b0:	001a      	movs	r2, r3
 80042b2:	2100      	movs	r1, #0
 80042b4:	f008 fb8a 	bl	800c9cc <memset>
  if(htim->Instance==TIM1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a15      	ldr	r2, [pc, #84]	; (8004314 <HAL_TIM_MspPostInit+0x74>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d123      	bne.n	800430a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042c2:	4b15      	ldr	r3, [pc, #84]	; (8004318 <HAL_TIM_MspPostInit+0x78>)
 80042c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042c6:	4b14      	ldr	r3, [pc, #80]	; (8004318 <HAL_TIM_MspPostInit+0x78>)
 80042c8:	2101      	movs	r1, #1
 80042ca:	430a      	orrs	r2, r1
 80042cc:	635a      	str	r2, [r3, #52]	; 0x34
 80042ce:	4b12      	ldr	r3, [pc, #72]	; (8004318 <HAL_TIM_MspPostInit+0x78>)
 80042d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d2:	2201      	movs	r2, #1
 80042d4:	4013      	ands	r3, r2
 80042d6:	60bb      	str	r3, [r7, #8]
 80042d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80042da:	193b      	adds	r3, r7, r4
 80042dc:	2280      	movs	r2, #128	; 0x80
 80042de:	0052      	lsls	r2, r2, #1
 80042e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e2:	0021      	movs	r1, r4
 80042e4:	187b      	adds	r3, r7, r1
 80042e6:	2202      	movs	r2, #2
 80042e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80042ea:	187b      	adds	r3, r7, r1
 80042ec:	2202      	movs	r2, #2
 80042ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042f0:	187b      	adds	r3, r7, r1
 80042f2:	2203      	movs	r2, #3
 80042f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80042f6:	187b      	adds	r3, r7, r1
 80042f8:	2202      	movs	r2, #2
 80042fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042fc:	187a      	adds	r2, r7, r1
 80042fe:	23a0      	movs	r3, #160	; 0xa0
 8004300:	05db      	lsls	r3, r3, #23
 8004302:	0011      	movs	r1, r2
 8004304:	0018      	movs	r0, r3
 8004306:	f001 f929 	bl	800555c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800430a:	46c0      	nop			; (mov r8, r8)
 800430c:	46bd      	mov	sp, r7
 800430e:	b009      	add	sp, #36	; 0x24
 8004310:	bd90      	pop	{r4, r7, pc}
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	40012c00 	.word	0x40012c00
 8004318:	40021000 	.word	0x40021000

0800431c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 800431c:	b590      	push	{r4, r7, lr}
 800431e:	b08b      	sub	sp, #44	; 0x2c
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004324:	2414      	movs	r4, #20
 8004326:	193b      	adds	r3, r7, r4
 8004328:	0018      	movs	r0, r3
 800432a:	2314      	movs	r3, #20
 800432c:	001a      	movs	r2, r3
 800432e:	2100      	movs	r1, #0
 8004330:	f008 fb4c 	bl	800c9cc <memset>
  if(husart->Instance==USART3)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a45      	ldr	r2, [pc, #276]	; (8004450 <HAL_USART_MspInit+0x134>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d000      	beq.n	8004340 <HAL_USART_MspInit+0x24>
 800433e:	e083      	b.n	8004448 <HAL_USART_MspInit+0x12c>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004340:	4b44      	ldr	r3, [pc, #272]	; (8004454 <HAL_USART_MspInit+0x138>)
 8004342:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004344:	4b43      	ldr	r3, [pc, #268]	; (8004454 <HAL_USART_MspInit+0x138>)
 8004346:	2180      	movs	r1, #128	; 0x80
 8004348:	02c9      	lsls	r1, r1, #11
 800434a:	430a      	orrs	r2, r1
 800434c:	63da      	str	r2, [r3, #60]	; 0x3c
 800434e:	4b41      	ldr	r3, [pc, #260]	; (8004454 <HAL_USART_MspInit+0x138>)
 8004350:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004352:	2380      	movs	r3, #128	; 0x80
 8004354:	02db      	lsls	r3, r3, #11
 8004356:	4013      	ands	r3, r2
 8004358:	613b      	str	r3, [r7, #16]
 800435a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800435c:	4b3d      	ldr	r3, [pc, #244]	; (8004454 <HAL_USART_MspInit+0x138>)
 800435e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004360:	4b3c      	ldr	r3, [pc, #240]	; (8004454 <HAL_USART_MspInit+0x138>)
 8004362:	2101      	movs	r1, #1
 8004364:	430a      	orrs	r2, r1
 8004366:	635a      	str	r2, [r3, #52]	; 0x34
 8004368:	4b3a      	ldr	r3, [pc, #232]	; (8004454 <HAL_USART_MspInit+0x138>)
 800436a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436c:	2201      	movs	r2, #1
 800436e:	4013      	ands	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004374:	4b37      	ldr	r3, [pc, #220]	; (8004454 <HAL_USART_MspInit+0x138>)
 8004376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004378:	4b36      	ldr	r3, [pc, #216]	; (8004454 <HAL_USART_MspInit+0x138>)
 800437a:	2102      	movs	r1, #2
 800437c:	430a      	orrs	r2, r1
 800437e:	635a      	str	r2, [r3, #52]	; 0x34
 8004380:	4b34      	ldr	r3, [pc, #208]	; (8004454 <HAL_USART_MspInit+0x138>)
 8004382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004384:	2202      	movs	r2, #2
 8004386:	4013      	ands	r3, r2
 8004388:	60bb      	str	r3, [r7, #8]
 800438a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800438c:	193b      	adds	r3, r7, r4
 800438e:	2220      	movs	r2, #32
 8004390:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004392:	193b      	adds	r3, r7, r4
 8004394:	2202      	movs	r2, #2
 8004396:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004398:	193b      	adds	r3, r7, r4
 800439a:	2200      	movs	r2, #0
 800439c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800439e:	193b      	adds	r3, r7, r4
 80043a0:	2203      	movs	r2, #3
 80043a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80043a4:	193b      	adds	r3, r7, r4
 80043a6:	2204      	movs	r2, #4
 80043a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043aa:	193a      	adds	r2, r7, r4
 80043ac:	23a0      	movs	r3, #160	; 0xa0
 80043ae:	05db      	lsls	r3, r3, #23
 80043b0:	0011      	movs	r1, r2
 80043b2:	0018      	movs	r0, r3
 80043b4:	f001 f8d2 	bl	800555c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80043b8:	0021      	movs	r1, r4
 80043ba:	187b      	adds	r3, r7, r1
 80043bc:	2203      	movs	r2, #3
 80043be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c0:	187b      	adds	r3, r7, r1
 80043c2:	2202      	movs	r2, #2
 80043c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c6:	187b      	adds	r3, r7, r1
 80043c8:	2200      	movs	r2, #0
 80043ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043cc:	187b      	adds	r3, r7, r1
 80043ce:	2203      	movs	r2, #3
 80043d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80043d2:	187b      	adds	r3, r7, r1
 80043d4:	2204      	movs	r2, #4
 80043d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043d8:	187b      	adds	r3, r7, r1
 80043da:	4a1f      	ldr	r2, [pc, #124]	; (8004458 <HAL_USART_MspInit+0x13c>)
 80043dc:	0019      	movs	r1, r3
 80043de:	0010      	movs	r0, r2
 80043e0:	f001 f8bc 	bl	800555c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel3;
 80043e4:	4b1d      	ldr	r3, [pc, #116]	; (800445c <HAL_USART_MspInit+0x140>)
 80043e6:	4a1e      	ldr	r2, [pc, #120]	; (8004460 <HAL_USART_MspInit+0x144>)
 80043e8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80043ea:	4b1c      	ldr	r3, [pc, #112]	; (800445c <HAL_USART_MspInit+0x140>)
 80043ec:	2237      	movs	r2, #55	; 0x37
 80043ee:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043f0:	4b1a      	ldr	r3, [pc, #104]	; (800445c <HAL_USART_MspInit+0x140>)
 80043f2:	2210      	movs	r2, #16
 80043f4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043f6:	4b19      	ldr	r3, [pc, #100]	; (800445c <HAL_USART_MspInit+0x140>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80043fc:	4b17      	ldr	r3, [pc, #92]	; (800445c <HAL_USART_MspInit+0x140>)
 80043fe:	2280      	movs	r2, #128	; 0x80
 8004400:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004402:	4b16      	ldr	r3, [pc, #88]	; (800445c <HAL_USART_MspInit+0x140>)
 8004404:	2200      	movs	r2, #0
 8004406:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004408:	4b14      	ldr	r3, [pc, #80]	; (800445c <HAL_USART_MspInit+0x140>)
 800440a:	2200      	movs	r2, #0
 800440c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800440e:	4b13      	ldr	r3, [pc, #76]	; (800445c <HAL_USART_MspInit+0x140>)
 8004410:	2200      	movs	r2, #0
 8004412:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004414:	4b11      	ldr	r3, [pc, #68]	; (800445c <HAL_USART_MspInit+0x140>)
 8004416:	2280      	movs	r2, #128	; 0x80
 8004418:	0152      	lsls	r2, r2, #5
 800441a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800441c:	4b0f      	ldr	r3, [pc, #60]	; (800445c <HAL_USART_MspInit+0x140>)
 800441e:	0018      	movs	r0, r3
 8004420:	f000 fd72 	bl	8004f08 <HAL_DMA_Init>
 8004424:	1e03      	subs	r3, r0, #0
 8004426:	d001      	beq.n	800442c <HAL_USART_MspInit+0x110>
    {
      Error_Handler();
 8004428:	f7ff fcb0 	bl	8003d8c <Error_Handler>
    }

    __HAL_LINKDMA(husart,hdmatx,hdma_usart3_tx);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a0b      	ldr	r2, [pc, #44]	; (800445c <HAL_USART_MspInit+0x140>)
 8004430:	651a      	str	r2, [r3, #80]	; 0x50
 8004432:	4b0a      	ldr	r3, [pc, #40]	; (800445c <HAL_USART_MspInit+0x140>)
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8004438:	2200      	movs	r2, #0
 800443a:	2100      	movs	r1, #0
 800443c:	201d      	movs	r0, #29
 800443e:	f000 fd31 	bl	8004ea4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8004442:	201d      	movs	r0, #29
 8004444:	f000 fd43 	bl	8004ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004448:	46c0      	nop			; (mov r8, r8)
 800444a:	46bd      	mov	sp, r7
 800444c:	b00b      	add	sp, #44	; 0x2c
 800444e:	bd90      	pop	{r4, r7, pc}
 8004450:	40004800 	.word	0x40004800
 8004454:	40021000 	.word	0x40021000
 8004458:	50000400 	.word	0x50000400
 800445c:	20000340 	.word	0x20000340
 8004460:	40020030 	.word	0x40020030

08004464 <LL_USART_IsActiveFlag_FE>:
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	2202      	movs	r2, #2
 8004472:	4013      	ands	r3, r2
 8004474:	2b02      	cmp	r3, #2
 8004476:	d101      	bne.n	800447c <LL_USART_IsActiveFlag_FE+0x18>
 8004478:	2301      	movs	r3, #1
 800447a:	e000      	b.n	800447e <LL_USART_IsActiveFlag_FE+0x1a>
 800447c:	2300      	movs	r3, #0
}
 800447e:	0018      	movs	r0, r3
 8004480:	46bd      	mov	sp, r7
 8004482:	b002      	add	sp, #8
 8004484:	bd80      	pop	{r7, pc}

08004486 <LL_USART_IsActiveFlag_NE>:
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b082      	sub	sp, #8
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	2204      	movs	r2, #4
 8004494:	4013      	ands	r3, r2
 8004496:	2b04      	cmp	r3, #4
 8004498:	d101      	bne.n	800449e <LL_USART_IsActiveFlag_NE+0x18>
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <LL_USART_IsActiveFlag_NE+0x1a>
 800449e:	2300      	movs	r3, #0
}
 80044a0:	0018      	movs	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b002      	add	sp, #8
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <LL_USART_IsActiveFlag_ORE>:
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	2208      	movs	r2, #8
 80044b6:	4013      	ands	r3, r2
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d101      	bne.n	80044c0 <LL_USART_IsActiveFlag_ORE+0x18>
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <LL_USART_IsActiveFlag_ORE+0x1a>
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	0018      	movs	r0, r3
 80044c4:	46bd      	mov	sp, r7
 80044c6:	b002      	add	sp, #8
 80044c8:	bd80      	pop	{r7, pc}

080044ca <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	2220      	movs	r2, #32
 80044d8:	4013      	ands	r3, r2
 80044da:	2b20      	cmp	r3, #32
 80044dc:	d101      	bne.n	80044e2 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 80044de:	2301      	movs	r3, #1
 80044e0:	e000      	b.n	80044e4 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	0018      	movs	r0, r3
 80044e6:	46bd      	mov	sp, r7
 80044e8:	b002      	add	sp, #8
 80044ea:	bd80      	pop	{r7, pc}

080044ec <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2220      	movs	r2, #32
 80044fa:	4013      	ands	r3, r2
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	d101      	bne.n	8004504 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8004500:	2301      	movs	r3, #1
 8004502:	e000      	b.n	8004506 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8004504:	2300      	movs	r3, #0
}
 8004506:	0018      	movs	r0, r3
 8004508:	46bd      	mov	sp, r7
 800450a:	b002      	add	sp, #8
 800450c:	bd80      	pop	{r7, pc}

0800450e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004512:	46c0      	nop			; (mov r8, r8)
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800451c:	e7fe      	b.n	800451c <HardFault_Handler+0x4>

0800451e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004522:	46c0      	nop			; (mov r8, r8)
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800452c:	46c0      	nop			; (mov r8, r8)
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004536:	f000 f953 	bl	80047e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004544:	4b03      	ldr	r3, [pc, #12]	; (8004554 <DMA1_Channel1_IRQHandler+0x14>)
 8004546:	0018      	movs	r0, r3
 8004548:	f000 feba 	bl	80052c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800454c:	46c0      	nop			; (mov r8, r8)
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	46c0      	nop			; (mov r8, r8)
 8004554:	2000011c 	.word	0x2000011c

08004558 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800455c:	4b05      	ldr	r3, [pc, #20]	; (8004574 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800455e:	0018      	movs	r0, r3
 8004560:	f000 feae 	bl	80052c0 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004564:	4b04      	ldr	r3, [pc, #16]	; (8004578 <DMA1_Channel2_3_IRQHandler+0x20>)
 8004566:	0018      	movs	r0, r3
 8004568:	f000 feaa 	bl	80052c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800456c:	46c0      	nop			; (mov r8, r8)
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	200001dc 	.word	0x200001dc
 8004578:	20000340 	.word	0x20000340

0800457c <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004580:	4b03      	ldr	r3, [pc, #12]	; (8004590 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 8004582:	0018      	movs	r0, r3
 8004584:	f000 fe9c 	bl	80052c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8004588:	46c0      	nop			; (mov r8, r8)
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	46c0      	nop			; (mov r8, r8)
 8004590:	20000238 	.word	0x20000238

08004594 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8004598:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <I2C1_IRQHandler+0x2c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699a      	ldr	r2, [r3, #24]
 800459e:	23e0      	movs	r3, #224	; 0xe0
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	4013      	ands	r3, r2
 80045a4:	d004      	beq.n	80045b0 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80045a6:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <I2C1_IRQHandler+0x2c>)
 80045a8:	0018      	movs	r0, r3
 80045aa:	f001 faf3 	bl	8005b94 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80045ae:	e003      	b.n	80045b8 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80045b0:	4b03      	ldr	r3, [pc, #12]	; (80045c0 <I2C1_IRQHandler+0x2c>)
 80045b2:	0018      	movs	r0, r3
 80045b4:	f001 fad4 	bl	8005b60 <HAL_I2C_EV_IRQHandler>
}
 80045b8:	46c0      	nop			; (mov r8, r8)
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	46c0      	nop			; (mov r8, r8)
 80045c0:	2000008c 	.word	0x2000008c

080045c4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 80045c8:	4b03      	ldr	r3, [pc, #12]	; (80045d8 <SPI1_IRQHandler+0x14>)
 80045ca:	0018      	movs	r0, r3
 80045cc:	f002 fdc2 	bl	8007154 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80045d0:	46c0      	nop			; (mov r8, r8)
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	46c0      	nop			; (mov r8, r8)
 80045d8:	200000e0 	.word	0x200000e0

080045dc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80045e0:	4b03      	ldr	r3, [pc, #12]	; (80045f0 <SPI2_IRQHandler+0x14>)
 80045e2:	0018      	movs	r0, r3
 80045e4:	f005 f950 	bl	8009888 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80045e8:	46c0      	nop			; (mov r8, r8)
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	20000178 	.word	0x20000178

080045f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 80045f8:	4b25      	ldr	r3, [pc, #148]	; (8004690 <USART2_IRQHandler+0x9c>)
 80045fa:	6a1a      	ldr	r2, [r3, #32]
 80045fc:	4b24      	ldr	r3, [pc, #144]	; (8004690 <USART2_IRQHandler+0x9c>)
 80045fe:	2108      	movs	r1, #8
 8004600:	430a      	orrs	r2, r1
 8004602:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 8004604:	4b22      	ldr	r3, [pc, #136]	; (8004690 <USART2_IRQHandler+0x9c>)
 8004606:	6a1a      	ldr	r2, [r3, #32]
 8004608:	4b21      	ldr	r3, [pc, #132]	; (8004690 <USART2_IRQHandler+0x9c>)
 800460a:	2102      	movs	r1, #2
 800460c:	430a      	orrs	r2, r1
 800460e:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 8004610:	4b1f      	ldr	r3, [pc, #124]	; (8004690 <USART2_IRQHandler+0x9c>)
 8004612:	6a1a      	ldr	r2, [r3, #32]
 8004614:	4b1e      	ldr	r3, [pc, #120]	; (8004690 <USART2_IRQHandler+0x9c>)
 8004616:	2104      	movs	r1, #4
 8004618:	430a      	orrs	r2, r1
 800461a:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 800461c:	4b1c      	ldr	r3, [pc, #112]	; (8004690 <USART2_IRQHandler+0x9c>)
 800461e:	0018      	movs	r0, r3
 8004620:	f7ff ff53 	bl	80044ca <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8004624:	1e03      	subs	r3, r0, #0
 8004626:	d009      	beq.n	800463c <USART2_IRQHandler+0x48>
 8004628:	4b19      	ldr	r3, [pc, #100]	; (8004690 <USART2_IRQHandler+0x9c>)
 800462a:	0018      	movs	r0, r3
 800462c:	f7ff ff5e 	bl	80044ec <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8004630:	1e03      	subs	r3, r0, #0
 8004632:	d003      	beq.n	800463c <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 8004634:	f7fc fd0e 	bl	8001054 <USART2_RX_Callback>
	  {
 8004638:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800463a:	e025      	b.n	8004688 <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 800463c:	4b14      	ldr	r3, [pc, #80]	; (8004690 <USART2_IRQHandler+0x9c>)
 800463e:	6a1a      	ldr	r2, [r3, #32]
 8004640:	4b13      	ldr	r3, [pc, #76]	; (8004690 <USART2_IRQHandler+0x9c>)
 8004642:	2108      	movs	r1, #8
 8004644:	430a      	orrs	r2, r1
 8004646:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 8004648:	4b11      	ldr	r3, [pc, #68]	; (8004690 <USART2_IRQHandler+0x9c>)
 800464a:	0018      	movs	r0, r3
 800464c:	f7ff ff2c 	bl	80044a8 <LL_USART_IsActiveFlag_ORE>
 8004650:	1e03      	subs	r3, r0, #0
 8004652:	d008      	beq.n	8004666 <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 8004654:	4b0e      	ldr	r3, [pc, #56]	; (8004690 <USART2_IRQHandler+0x9c>)
 8004656:	6a1a      	ldr	r2, [r3, #32]
 8004658:	4b0d      	ldr	r3, [pc, #52]	; (8004690 <USART2_IRQHandler+0x9c>)
 800465a:	2108      	movs	r1, #8
 800465c:	430a      	orrs	r2, r1
 800465e:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 8004660:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <USART2_IRQHandler+0x9c>)
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8004664:	e010      	b.n	8004688 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 8004666:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <USART2_IRQHandler+0x9c>)
 8004668:	0018      	movs	r0, r3
 800466a:	f7ff fefb 	bl	8004464 <LL_USART_IsActiveFlag_FE>
 800466e:	1e03      	subs	r3, r0, #0
 8004670:	d002      	beq.n	8004678 <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 8004672:	4b07      	ldr	r3, [pc, #28]	; (8004690 <USART2_IRQHandler+0x9c>)
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8004676:	e007      	b.n	8004688 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 8004678:	4b05      	ldr	r3, [pc, #20]	; (8004690 <USART2_IRQHandler+0x9c>)
 800467a:	0018      	movs	r0, r3
 800467c:	f7ff ff03 	bl	8004486 <LL_USART_IsActiveFlag_NE>
 8004680:	1e03      	subs	r3, r0, #0
 8004682:	d001      	beq.n	8004688 <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 8004684:	4b02      	ldr	r3, [pc, #8]	; (8004690 <USART2_IRQHandler+0x9c>)
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8004688:	46c0      	nop			; (mov r8, r8)
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	46c0      	nop			; (mov r8, r8)
 8004690:	40004400 	.word	0x40004400

08004694 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 8004698:	4b03      	ldr	r3, [pc, #12]	; (80046a8 <USART3_4_LPUART1_IRQHandler+0x14>)
 800469a:	0018      	movs	r0, r3
 800469c:	f006 ffbc 	bl	800b618 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 80046a0:	46c0      	nop			; (mov r8, r8)
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	200002e0 	.word	0x200002e0

080046ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80046b0:	46c0      	nop			; (mov r8, r8)
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
	...

080046b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80046b8:	480d      	ldr	r0, [pc, #52]	; (80046f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80046ba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80046bc:	f7ff fff6 	bl	80046ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80046c0:	480c      	ldr	r0, [pc, #48]	; (80046f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80046c2:	490d      	ldr	r1, [pc, #52]	; (80046f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80046c4:	4a0d      	ldr	r2, [pc, #52]	; (80046fc <LoopForever+0xe>)
  movs r3, #0
 80046c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046c8:	e002      	b.n	80046d0 <LoopCopyDataInit>

080046ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046ce:	3304      	adds	r3, #4

080046d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046d4:	d3f9      	bcc.n	80046ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046d6:	4a0a      	ldr	r2, [pc, #40]	; (8004700 <LoopForever+0x12>)
  ldr r4, =_ebss
 80046d8:	4c0a      	ldr	r4, [pc, #40]	; (8004704 <LoopForever+0x16>)
  movs r3, #0
 80046da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046dc:	e001      	b.n	80046e2 <LoopFillZerobss>

080046de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046e0:	3204      	adds	r2, #4

080046e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046e4:	d3fb      	bcc.n	80046de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80046e6:	f008 f94d 	bl	800c984 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80046ea:	f7fb ff67 	bl	80005bc <main>

080046ee <LoopForever>:

LoopForever:
  b LoopForever
 80046ee:	e7fe      	b.n	80046ee <LoopForever>
  ldr   r0, =_estack
 80046f0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80046f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046f8:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 80046fc:	080184e4 	.word	0x080184e4
  ldr r2, =_sbss
 8004700:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8004704:	2000282c 	.word	0x2000282c

08004708 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004708:	e7fe      	b.n	8004708 <ADC1_COMP_IRQHandler>
	...

0800470c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004712:	1dfb      	adds	r3, r7, #7
 8004714:	2200      	movs	r2, #0
 8004716:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004718:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <HAL_Init+0x3c>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	4b0a      	ldr	r3, [pc, #40]	; (8004748 <HAL_Init+0x3c>)
 800471e:	2180      	movs	r1, #128	; 0x80
 8004720:	0049      	lsls	r1, r1, #1
 8004722:	430a      	orrs	r2, r1
 8004724:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004726:	2000      	movs	r0, #0
 8004728:	f000 f810 	bl	800474c <HAL_InitTick>
 800472c:	1e03      	subs	r3, r0, #0
 800472e:	d003      	beq.n	8004738 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004730:	1dfb      	adds	r3, r7, #7
 8004732:	2201      	movs	r2, #1
 8004734:	701a      	strb	r2, [r3, #0]
 8004736:	e001      	b.n	800473c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004738:	f7ff fb2e 	bl	8003d98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800473c:	1dfb      	adds	r3, r7, #7
 800473e:	781b      	ldrb	r3, [r3, #0]
}
 8004740:	0018      	movs	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	b002      	add	sp, #8
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40022000 	.word	0x40022000

0800474c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800474c:	b590      	push	{r4, r7, lr}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004754:	230f      	movs	r3, #15
 8004756:	18fb      	adds	r3, r7, r3
 8004758:	2200      	movs	r2, #0
 800475a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800475c:	4b1d      	ldr	r3, [pc, #116]	; (80047d4 <HAL_InitTick+0x88>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d02b      	beq.n	80047bc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004764:	4b1c      	ldr	r3, [pc, #112]	; (80047d8 <HAL_InitTick+0x8c>)
 8004766:	681c      	ldr	r4, [r3, #0]
 8004768:	4b1a      	ldr	r3, [pc, #104]	; (80047d4 <HAL_InitTick+0x88>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	0019      	movs	r1, r3
 800476e:	23fa      	movs	r3, #250	; 0xfa
 8004770:	0098      	lsls	r0, r3, #2
 8004772:	f7fb fcc7 	bl	8000104 <__udivsi3>
 8004776:	0003      	movs	r3, r0
 8004778:	0019      	movs	r1, r3
 800477a:	0020      	movs	r0, r4
 800477c:	f7fb fcc2 	bl	8000104 <__udivsi3>
 8004780:	0003      	movs	r3, r0
 8004782:	0018      	movs	r0, r3
 8004784:	f000 fbb3 	bl	8004eee <HAL_SYSTICK_Config>
 8004788:	1e03      	subs	r3, r0, #0
 800478a:	d112      	bne.n	80047b2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b03      	cmp	r3, #3
 8004790:	d80a      	bhi.n	80047a8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	2301      	movs	r3, #1
 8004796:	425b      	negs	r3, r3
 8004798:	2200      	movs	r2, #0
 800479a:	0018      	movs	r0, r3
 800479c:	f000 fb82 	bl	8004ea4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80047a0:	4b0e      	ldr	r3, [pc, #56]	; (80047dc <HAL_InitTick+0x90>)
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	e00d      	b.n	80047c4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80047a8:	230f      	movs	r3, #15
 80047aa:	18fb      	adds	r3, r7, r3
 80047ac:	2201      	movs	r2, #1
 80047ae:	701a      	strb	r2, [r3, #0]
 80047b0:	e008      	b.n	80047c4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80047b2:	230f      	movs	r3, #15
 80047b4:	18fb      	adds	r3, r7, r3
 80047b6:	2201      	movs	r2, #1
 80047b8:	701a      	strb	r2, [r3, #0]
 80047ba:	e003      	b.n	80047c4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80047bc:	230f      	movs	r3, #15
 80047be:	18fb      	adds	r3, r7, r3
 80047c0:	2201      	movs	r2, #1
 80047c2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80047c4:	230f      	movs	r3, #15
 80047c6:	18fb      	adds	r3, r7, r3
 80047c8:	781b      	ldrb	r3, [r3, #0]
}
 80047ca:	0018      	movs	r0, r3
 80047cc:	46bd      	mov	sp, r7
 80047ce:	b005      	add	sp, #20
 80047d0:	bd90      	pop	{r4, r7, pc}
 80047d2:	46c0      	nop			; (mov r8, r8)
 80047d4:	2000003c 	.word	0x2000003c
 80047d8:	20000034 	.word	0x20000034
 80047dc:	20000038 	.word	0x20000038

080047e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80047e4:	4b05      	ldr	r3, [pc, #20]	; (80047fc <HAL_IncTick+0x1c>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	001a      	movs	r2, r3
 80047ea:	4b05      	ldr	r3, [pc, #20]	; (8004800 <HAL_IncTick+0x20>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	18d2      	adds	r2, r2, r3
 80047f0:	4b03      	ldr	r3, [pc, #12]	; (8004800 <HAL_IncTick+0x20>)
 80047f2:	601a      	str	r2, [r3, #0]
}
 80047f4:	46c0      	nop			; (mov r8, r8)
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	2000003c 	.word	0x2000003c
 8004800:	20002828 	.word	0x20002828

08004804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  return uwTick;
 8004808:	4b02      	ldr	r3, [pc, #8]	; (8004814 <HAL_GetTick+0x10>)
 800480a:	681b      	ldr	r3, [r3, #0]
}
 800480c:	0018      	movs	r0, r3
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	46c0      	nop			; (mov r8, r8)
 8004814:	20002828 	.word	0x20002828

08004818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004820:	f7ff fff0 	bl	8004804 <HAL_GetTick>
 8004824:	0003      	movs	r3, r0
 8004826:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	3301      	adds	r3, #1
 8004830:	d005      	beq.n	800483e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004832:	4b0a      	ldr	r3, [pc, #40]	; (800485c <HAL_Delay+0x44>)
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	001a      	movs	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	189b      	adds	r3, r3, r2
 800483c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800483e:	46c0      	nop			; (mov r8, r8)
 8004840:	f7ff ffe0 	bl	8004804 <HAL_GetTick>
 8004844:	0002      	movs	r2, r0
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	429a      	cmp	r2, r3
 800484e:	d8f7      	bhi.n	8004840 <HAL_Delay+0x28>
  {
  }
}
 8004850:	46c0      	nop			; (mov r8, r8)
 8004852:	46c0      	nop			; (mov r8, r8)
 8004854:	46bd      	mov	sp, r7
 8004856:	b004      	add	sp, #16
 8004858:	bd80      	pop	{r7, pc}
 800485a:	46c0      	nop			; (mov r8, r8)
 800485c:	2000003c 	.word	0x2000003c

08004860 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8004868:	4b06      	ldr	r3, [pc, #24]	; (8004884 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a06      	ldr	r2, [pc, #24]	; (8004888 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800486e:	4013      	ands	r3, r2
 8004870:	0019      	movs	r1, r3
 8004872:	4b04      	ldr	r3, [pc, #16]	; (8004884 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	430a      	orrs	r2, r1
 8004878:	601a      	str	r2, [r3, #0]
}
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	46bd      	mov	sp, r7
 800487e:	b002      	add	sp, #8
 8004880:	bd80      	pop	{r7, pc}
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	40010000 	.word	0x40010000
 8004888:	fffff9ff 	.word	0xfffff9ff

0800488c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004894:	4a05      	ldr	r2, [pc, #20]	; (80048ac <LL_EXTI_EnableIT_0_31+0x20>)
 8004896:	2380      	movs	r3, #128	; 0x80
 8004898:	58d2      	ldr	r2, [r2, r3]
 800489a:	4904      	ldr	r1, [pc, #16]	; (80048ac <LL_EXTI_EnableIT_0_31+0x20>)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4313      	orrs	r3, r2
 80048a0:	2280      	movs	r2, #128	; 0x80
 80048a2:	508b      	str	r3, [r1, r2]
}
 80048a4:	46c0      	nop			; (mov r8, r8)
 80048a6:	46bd      	mov	sp, r7
 80048a8:	b002      	add	sp, #8
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40021800 	.word	0x40021800

080048b0 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80048b8:	4a06      	ldr	r2, [pc, #24]	; (80048d4 <LL_EXTI_DisableIT_0_31+0x24>)
 80048ba:	2380      	movs	r3, #128	; 0x80
 80048bc:	58d3      	ldr	r3, [r2, r3]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	43d2      	mvns	r2, r2
 80048c2:	4904      	ldr	r1, [pc, #16]	; (80048d4 <LL_EXTI_DisableIT_0_31+0x24>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	2280      	movs	r2, #128	; 0x80
 80048c8:	508b      	str	r3, [r1, r2]
}
 80048ca:	46c0      	nop			; (mov r8, r8)
 80048cc:	46bd      	mov	sp, r7
 80048ce:	b002      	add	sp, #8
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	46c0      	nop			; (mov r8, r8)
 80048d4:	40021800 	.word	0x40021800

080048d8 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80048e0:	4a05      	ldr	r2, [pc, #20]	; (80048f8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80048e2:	2384      	movs	r3, #132	; 0x84
 80048e4:	58d2      	ldr	r2, [r2, r3]
 80048e6:	4904      	ldr	r1, [pc, #16]	; (80048f8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	2284      	movs	r2, #132	; 0x84
 80048ee:	508b      	str	r3, [r1, r2]

}
 80048f0:	46c0      	nop			; (mov r8, r8)
 80048f2:	46bd      	mov	sp, r7
 80048f4:	b002      	add	sp, #8
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	40021800 	.word	0x40021800

080048fc <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004904:	4a06      	ldr	r2, [pc, #24]	; (8004920 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004906:	2384      	movs	r3, #132	; 0x84
 8004908:	58d3      	ldr	r3, [r2, r3]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	43d2      	mvns	r2, r2
 800490e:	4904      	ldr	r1, [pc, #16]	; (8004920 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004910:	4013      	ands	r3, r2
 8004912:	2284      	movs	r2, #132	; 0x84
 8004914:	508b      	str	r3, [r1, r2]
}
 8004916:	46c0      	nop			; (mov r8, r8)
 8004918:	46bd      	mov	sp, r7
 800491a:	b002      	add	sp, #8
 800491c:	bd80      	pop	{r7, pc}
 800491e:	46c0      	nop			; (mov r8, r8)
 8004920:	40021800 	.word	0x40021800

08004924 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800492c:	4b04      	ldr	r3, [pc, #16]	; (8004940 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800492e:	6819      	ldr	r1, [r3, #0]
 8004930:	4b03      	ldr	r3, [pc, #12]	; (8004940 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	430a      	orrs	r2, r1
 8004936:	601a      	str	r2, [r3, #0]

}
 8004938:	46c0      	nop			; (mov r8, r8)
 800493a:	46bd      	mov	sp, r7
 800493c:	b002      	add	sp, #8
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40021800 	.word	0x40021800

08004944 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800494c:	4b05      	ldr	r3, [pc, #20]	; (8004964 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	43d9      	mvns	r1, r3
 8004954:	4b03      	ldr	r3, [pc, #12]	; (8004964 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8004956:	400a      	ands	r2, r1
 8004958:	601a      	str	r2, [r3, #0]

}
 800495a:	46c0      	nop			; (mov r8, r8)
 800495c:	46bd      	mov	sp, r7
 800495e:	b002      	add	sp, #8
 8004960:	bd80      	pop	{r7, pc}
 8004962:	46c0      	nop			; (mov r8, r8)
 8004964:	40021800 	.word	0x40021800

08004968 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004970:	4b04      	ldr	r3, [pc, #16]	; (8004984 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8004972:	6859      	ldr	r1, [r3, #4]
 8004974:	4b03      	ldr	r3, [pc, #12]	; (8004984 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	430a      	orrs	r2, r1
 800497a:	605a      	str	r2, [r3, #4]
}
 800497c:	46c0      	nop			; (mov r8, r8)
 800497e:	46bd      	mov	sp, r7
 8004980:	b002      	add	sp, #8
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40021800 	.word	0x40021800

08004988 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004990:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	43d9      	mvns	r1, r3
 8004998:	4b03      	ldr	r3, [pc, #12]	; (80049a8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800499a:	400a      	ands	r2, r1
 800499c:	605a      	str	r2, [r3, #4]
}
 800499e:	46c0      	nop			; (mov r8, r8)
 80049a0:	46bd      	mov	sp, r7
 80049a2:	b002      	add	sp, #8
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	46c0      	nop			; (mov r8, r8)
 80049a8:	40021800 	.word	0x40021800

080049ac <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 80049b4:	4b03      	ldr	r3, [pc, #12]	; (80049c4 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	611a      	str	r2, [r3, #16]
}
 80049ba:	46c0      	nop			; (mov r8, r8)
 80049bc:	46bd      	mov	sp, r7
 80049be:	b002      	add	sp, #8
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	40021800 	.word	0x40021800

080049c8 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 80049d0:	4b03      	ldr	r3, [pc, #12]	; (80049e0 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	60da      	str	r2, [r3, #12]
}
 80049d6:	46c0      	nop			; (mov r8, r8)
 80049d8:	46bd      	mov	sp, r7
 80049da:	b002      	add	sp, #8
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	40021800 	.word	0x40021800

080049e4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80049f0:	211f      	movs	r1, #31
 80049f2:	187b      	adds	r3, r7, r1
 80049f4:	2200      	movs	r2, #0
 80049f6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif /* COMP3 */

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d103      	bne.n	8004a06 <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 80049fe:	187b      	adds	r3, r7, r1
 8004a00:	2201      	movs	r2, #1
 8004a02:	701a      	strb	r2, [r3, #0]
 8004a04:	e13d      	b.n	8004c82 <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	0fdb      	lsrs	r3, r3, #31
 8004a0e:	07da      	lsls	r2, r3, #31
 8004a10:	2380      	movs	r3, #128	; 0x80
 8004a12:	061b      	lsls	r3, r3, #24
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d104      	bne.n	8004a22 <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 8004a18:	231f      	movs	r3, #31
 8004a1a:	18fb      	adds	r3, r7, r3
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	701a      	strb	r2, [r3, #0]
 8004a20:	e12f      	b.n	8004c82 <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2229      	movs	r2, #41	; 0x29
 8004a26:	5c9b      	ldrb	r3, [r3, r2]
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10a      	bne.n	8004a44 <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2228      	movs	r2, #40	; 0x28
 8004a32:	2100      	movs	r1, #0
 8004a34:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	0018      	movs	r0, r3
 8004a40:	f7ff f9d2 	bl	8003de8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2230      	movs	r2, #48	; 0x30
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 8004a70:	4313      	orrs	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a85      	ldr	r2, [pc, #532]	; (8004c90 <HAL_COMP_Init+0x2ac>)
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	0019      	movs	r1, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	2380      	movs	r3, #128	; 0x80
 8004a90:	011b      	lsls	r3, r3, #4
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d10d      	bne.n	8004ab2 <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8004a96:	4b7f      	ldr	r3, [pc, #508]	; (8004c94 <HAL_COMP_Init+0x2b0>)
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	4b7e      	ldr	r3, [pc, #504]	; (8004c94 <HAL_COMP_Init+0x2b0>)
 8004a9c:	497e      	ldr	r1, [pc, #504]	; (8004c98 <HAL_COMP_Init+0x2b4>)
 8004a9e:	400a      	ands	r2, r1
 8004aa0:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8004aa2:	4b7c      	ldr	r3, [pc, #496]	; (8004c94 <HAL_COMP_Init+0x2b0>)
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	4b7b      	ldr	r3, [pc, #492]	; (8004c94 <HAL_COMP_Init+0x2b0>)
 8004aa8:	2180      	movs	r1, #128	; 0x80
 8004aaa:	0109      	lsls	r1, r1, #4
 8004aac:	430a      	orrs	r2, r1
 8004aae:	605a      	str	r2, [r3, #4]
 8004ab0:	e01f      	b.n	8004af2 <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	23c0      	movs	r3, #192	; 0xc0
 8004ab8:	015b      	lsls	r3, r3, #5
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d10d      	bne.n	8004ada <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8004abe:	4b75      	ldr	r3, [pc, #468]	; (8004c94 <HAL_COMP_Init+0x2b0>)
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	4b74      	ldr	r3, [pc, #464]	; (8004c94 <HAL_COMP_Init+0x2b0>)
 8004ac4:	2180      	movs	r1, #128	; 0x80
 8004ac6:	0109      	lsls	r1, r1, #4
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8004acc:	4b71      	ldr	r3, [pc, #452]	; (8004c94 <HAL_COMP_Init+0x2b0>)
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	4b70      	ldr	r3, [pc, #448]	; (8004c94 <HAL_COMP_Init+0x2b0>)
 8004ad2:	4971      	ldr	r1, [pc, #452]	; (8004c98 <HAL_COMP_Init+0x2b4>)
 8004ad4:	400a      	ands	r2, r1
 8004ad6:	605a      	str	r2, [r3, #4]
 8004ad8:	e00b      	b.n	8004af2 <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8004ada:	4b6e      	ldr	r3, [pc, #440]	; (8004c94 <HAL_COMP_Init+0x2b0>)
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	4b6d      	ldr	r3, [pc, #436]	; (8004c94 <HAL_COMP_Init+0x2b0>)
 8004ae0:	496d      	ldr	r1, [pc, #436]	; (8004c98 <HAL_COMP_Init+0x2b4>)
 8004ae2:	400a      	ands	r2, r1
 8004ae4:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8004ae6:	4b6b      	ldr	r3, [pc, #428]	; (8004c94 <HAL_COMP_Init+0x2b0>)
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	4b6a      	ldr	r3, [pc, #424]	; (8004c94 <HAL_COMP_Init+0x2b0>)
 8004aec:	496a      	ldr	r1, [pc, #424]	; (8004c98 <HAL_COMP_Init+0x2b4>)
 8004aee:	400a      	ands	r2, r1
 8004af0:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	22a0      	movs	r2, #160	; 0xa0
 8004af8:	01d2      	lsls	r2, r2, #7
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d017      	beq.n	8004b2e <HAL_COMP_Init+0x14a>
 8004afe:	22a0      	movs	r2, #160	; 0xa0
 8004b00:	01d2      	lsls	r2, r2, #7
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d830      	bhi.n	8004b68 <HAL_COMP_Init+0x184>
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d01f      	beq.n	8004b4a <HAL_COMP_Init+0x166>
 8004b0a:	2280      	movs	r2, #128	; 0x80
 8004b0c:	01d2      	lsls	r2, r2, #7
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d12a      	bne.n	8004b68 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8004b12:	4b60      	ldr	r3, [pc, #384]	; (8004c94 <HAL_COMP_Init+0x2b0>)
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	4b5f      	ldr	r3, [pc, #380]	; (8004c94 <HAL_COMP_Init+0x2b0>)
 8004b18:	2180      	movs	r1, #128	; 0x80
 8004b1a:	01c9      	lsls	r1, r1, #7
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8004b20:	4b5c      	ldr	r3, [pc, #368]	; (8004c94 <HAL_COMP_Init+0x2b0>)
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	4b5b      	ldr	r3, [pc, #364]	; (8004c94 <HAL_COMP_Init+0x2b0>)
 8004b26:	495d      	ldr	r1, [pc, #372]	; (8004c9c <HAL_COMP_Init+0x2b8>)
 8004b28:	400a      	ands	r2, r1
 8004b2a:	605a      	str	r2, [r3, #4]
        break;
 8004b2c:	e029      	b.n	8004b82 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8004b2e:	4b59      	ldr	r3, [pc, #356]	; (8004c94 <HAL_COMP_Init+0x2b0>)
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	4b58      	ldr	r3, [pc, #352]	; (8004c94 <HAL_COMP_Init+0x2b0>)
 8004b34:	4959      	ldr	r1, [pc, #356]	; (8004c9c <HAL_COMP_Init+0x2b8>)
 8004b36:	400a      	ands	r2, r1
 8004b38:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8004b3a:	4b56      	ldr	r3, [pc, #344]	; (8004c94 <HAL_COMP_Init+0x2b0>)
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	4b55      	ldr	r3, [pc, #340]	; (8004c94 <HAL_COMP_Init+0x2b0>)
 8004b40:	2180      	movs	r1, #128	; 0x80
 8004b42:	01c9      	lsls	r1, r1, #7
 8004b44:	430a      	orrs	r2, r1
 8004b46:	605a      	str	r2, [r3, #4]
        break;
 8004b48:	e01b      	b.n	8004b82 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8004b4a:	4b52      	ldr	r3, [pc, #328]	; (8004c94 <HAL_COMP_Init+0x2b0>)
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	4b51      	ldr	r3, [pc, #324]	; (8004c94 <HAL_COMP_Init+0x2b0>)
 8004b50:	2180      	movs	r1, #128	; 0x80
 8004b52:	01c9      	lsls	r1, r1, #7
 8004b54:	430a      	orrs	r2, r1
 8004b56:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8004b58:	4b4e      	ldr	r3, [pc, #312]	; (8004c94 <HAL_COMP_Init+0x2b0>)
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	4b4d      	ldr	r3, [pc, #308]	; (8004c94 <HAL_COMP_Init+0x2b0>)
 8004b5e:	2180      	movs	r1, #128	; 0x80
 8004b60:	01c9      	lsls	r1, r1, #7
 8004b62:	430a      	orrs	r2, r1
 8004b64:	605a      	str	r2, [r3, #4]
        break;
 8004b66:	e00c      	b.n	8004b82 <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8004b68:	4b4a      	ldr	r3, [pc, #296]	; (8004c94 <HAL_COMP_Init+0x2b0>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	4b49      	ldr	r3, [pc, #292]	; (8004c94 <HAL_COMP_Init+0x2b0>)
 8004b6e:	494b      	ldr	r1, [pc, #300]	; (8004c9c <HAL_COMP_Init+0x2b8>)
 8004b70:	400a      	ands	r2, r1
 8004b72:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8004b74:	4b47      	ldr	r3, [pc, #284]	; (8004c94 <HAL_COMP_Init+0x2b0>)
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	4b46      	ldr	r3, [pc, #280]	; (8004c94 <HAL_COMP_Init+0x2b0>)
 8004b7a:	4948      	ldr	r1, [pc, #288]	; (8004c9c <HAL_COMP_Init+0x2b8>)
 8004b7c:	400a      	ands	r2, r1
 8004b7e:	605a      	str	r2, [r3, #4]
        break;
 8004b80:	46c0      	nop			; (mov r8, r8)
    }
#endif /* COMP3 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2230      	movs	r2, #48	; 0x30
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	d016      	beq.n	8004bbc <HAL_COMP_Init+0x1d8>
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d113      	bne.n	8004bbc <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b94:	4b42      	ldr	r3, [pc, #264]	; (8004ca0 <HAL_COMP_Init+0x2bc>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4942      	ldr	r1, [pc, #264]	; (8004ca4 <HAL_COMP_Init+0x2c0>)
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	f7fb fab2 	bl	8000104 <__udivsi3>
 8004ba0:	0003      	movs	r3, r0
 8004ba2:	1c5a      	adds	r2, r3, #1
 8004ba4:	0013      	movs	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	189b      	adds	r3, r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8004bae:	e002      	b.n	8004bb6 <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1f9      	bne.n	8004bb0 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a34      	ldr	r2, [pc, #208]	; (8004c94 <HAL_COMP_Init+0x2b0>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d102      	bne.n	8004bcc <HAL_COMP_Init+0x1e8>
 8004bc6:	2380      	movs	r3, #128	; 0x80
 8004bc8:	029b      	lsls	r3, r3, #10
 8004bca:	e001      	b.n	8004bd0 <HAL_COMP_Init+0x1ec>
 8004bcc:	2380      	movs	r3, #128	; 0x80
 8004bce:	02db      	lsls	r3, r3, #11
 8004bd0:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	2203      	movs	r2, #3
 8004bd8:	4013      	ands	r3, r2
 8004bda:	d040      	beq.n	8004c5e <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	2210      	movs	r2, #16
 8004be2:	4013      	ands	r3, r2
 8004be4:	d004      	beq.n	8004bf0 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	0018      	movs	r0, r3
 8004bea:	f7ff fe9b 	bl	8004924 <LL_EXTI_EnableRisingTrig_0_31>
 8004bee:	e003      	b.n	8004bf8 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	0018      	movs	r0, r3
 8004bf4:	f7ff fea6 	bl	8004944 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	4013      	ands	r3, r2
 8004c00:	d004      	beq.n	8004c0c <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	0018      	movs	r0, r3
 8004c06:	f7ff feaf 	bl	8004968 <LL_EXTI_EnableFallingTrig_0_31>
 8004c0a:	e003      	b.n	8004c14 <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	0018      	movs	r0, r3
 8004c10:	f7ff feba 	bl	8004988 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	0018      	movs	r0, r3
 8004c18:	f7ff fed6 	bl	80049c8 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f7ff fec4 	bl	80049ac <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	2202      	movs	r2, #2
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	d004      	beq.n	8004c38 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	0018      	movs	r0, r3
 8004c32:	f7ff fe51 	bl	80048d8 <LL_EXTI_EnableEvent_0_31>
 8004c36:	e003      	b.n	8004c40 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	f7ff fe5e 	bl	80048fc <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c44:	2201      	movs	r2, #1
 8004c46:	4013      	ands	r3, r2
 8004c48:	d004      	beq.n	8004c54 <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f7ff fe1d 	bl	800488c <LL_EXTI_EnableIT_0_31>
 8004c52:	e00c      	b.n	8004c6e <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	0018      	movs	r0, r3
 8004c58:	f7ff fe2a 	bl	80048b0 <LL_EXTI_DisableIT_0_31>
 8004c5c:	e007      	b.n	8004c6e <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	0018      	movs	r0, r3
 8004c62:	f7ff fe4b 	bl	80048fc <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f7ff fe21 	bl	80048b0 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2229      	movs	r2, #41	; 0x29
 8004c72:	5c9b      	ldrb	r3, [r3, r2]
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d103      	bne.n	8004c82 <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2229      	movs	r2, #41	; 0x29
 8004c7e:	2101      	movs	r1, #1
 8004c80:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004c82:	231f      	movs	r3, #31
 8004c84:	18fb      	adds	r3, r7, r3
 8004c86:	781b      	ldrb	r3, [r3, #0]
}
 8004c88:	0018      	movs	r0, r3
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	b008      	add	sp, #32
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	fe00740f 	.word	0xfe00740f
 8004c94:	40010200 	.word	0x40010200
 8004c98:	fffff7ff 	.word	0xfffff7ff
 8004c9c:	ffffbfff 	.word	0xffffbfff
 8004ca0:	20000034 	.word	0x20000034
 8004ca4:	00030d40 	.word	0x00030d40

08004ca8 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb4:	210f      	movs	r1, #15
 8004cb6:	187b      	adds	r3, r7, r1
 8004cb8:	2200      	movs	r2, #0
 8004cba:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d103      	bne.n	8004cca <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 8004cc2:	187b      	adds	r3, r7, r1
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	701a      	strb	r2, [r3, #0]
 8004cc8:	e035      	b.n	8004d36 <HAL_COMP_Start+0x8e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	0fdb      	lsrs	r3, r3, #31
 8004cd2:	07da      	lsls	r2, r3, #31
 8004cd4:	2380      	movs	r3, #128	; 0x80
 8004cd6:	061b      	lsls	r3, r3, #24
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d104      	bne.n	8004ce6 <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 8004cdc:	230f      	movs	r3, #15
 8004cde:	18fb      	adds	r3, r7, r3
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	701a      	strb	r2, [r3, #0]
 8004ce4:	e027      	b.n	8004d36 <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2229      	movs	r2, #41	; 0x29
 8004cea:	5c9b      	ldrb	r3, [r3, r2]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d11d      	bne.n	8004d2e <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2229      	movs	r2, #41	; 0x29
 8004d06:	2102      	movs	r1, #2
 8004d08:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d0a:	4b0e      	ldr	r3, [pc, #56]	; (8004d44 <HAL_COMP_Start+0x9c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	490e      	ldr	r1, [pc, #56]	; (8004d48 <HAL_COMP_Start+0xa0>)
 8004d10:	0018      	movs	r0, r3
 8004d12:	f7fb f9f7 	bl	8000104 <__udivsi3>
 8004d16:	0003      	movs	r3, r0
 8004d18:	3301      	adds	r3, #1
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004d1e:	e002      	b.n	8004d26 <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1f9      	bne.n	8004d20 <HAL_COMP_Start+0x78>
 8004d2c:	e003      	b.n	8004d36 <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004d2e:	230f      	movs	r3, #15
 8004d30:	18fb      	adds	r3, r7, r3
 8004d32:	2201      	movs	r2, #1
 8004d34:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8004d36:	230f      	movs	r3, #15
 8004d38:	18fb      	adds	r3, r7, r3
 8004d3a:	781b      	ldrb	r3, [r3, #0]
}
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	b004      	add	sp, #16
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	20000034 	.word	0x20000034
 8004d48:	00030d40 	.word	0x00030d40

08004d4c <__NVIC_EnableIRQ>:
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	0002      	movs	r2, r0
 8004d54:	1dfb      	adds	r3, r7, #7
 8004d56:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004d58:	1dfb      	adds	r3, r7, #7
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d5e:	d809      	bhi.n	8004d74 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d60:	1dfb      	adds	r3, r7, #7
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	001a      	movs	r2, r3
 8004d66:	231f      	movs	r3, #31
 8004d68:	401a      	ands	r2, r3
 8004d6a:	4b04      	ldr	r3, [pc, #16]	; (8004d7c <__NVIC_EnableIRQ+0x30>)
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	4091      	lsls	r1, r2
 8004d70:	000a      	movs	r2, r1
 8004d72:	601a      	str	r2, [r3, #0]
}
 8004d74:	46c0      	nop			; (mov r8, r8)
 8004d76:	46bd      	mov	sp, r7
 8004d78:	b002      	add	sp, #8
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	e000e100 	.word	0xe000e100

08004d80 <__NVIC_SetPriority>:
{
 8004d80:	b590      	push	{r4, r7, lr}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	0002      	movs	r2, r0
 8004d88:	6039      	str	r1, [r7, #0]
 8004d8a:	1dfb      	adds	r3, r7, #7
 8004d8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004d8e:	1dfb      	adds	r3, r7, #7
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	2b7f      	cmp	r3, #127	; 0x7f
 8004d94:	d828      	bhi.n	8004de8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d96:	4a2f      	ldr	r2, [pc, #188]	; (8004e54 <__NVIC_SetPriority+0xd4>)
 8004d98:	1dfb      	adds	r3, r7, #7
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	b25b      	sxtb	r3, r3
 8004d9e:	089b      	lsrs	r3, r3, #2
 8004da0:	33c0      	adds	r3, #192	; 0xc0
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	589b      	ldr	r3, [r3, r2]
 8004da6:	1dfa      	adds	r2, r7, #7
 8004da8:	7812      	ldrb	r2, [r2, #0]
 8004daa:	0011      	movs	r1, r2
 8004dac:	2203      	movs	r2, #3
 8004dae:	400a      	ands	r2, r1
 8004db0:	00d2      	lsls	r2, r2, #3
 8004db2:	21ff      	movs	r1, #255	; 0xff
 8004db4:	4091      	lsls	r1, r2
 8004db6:	000a      	movs	r2, r1
 8004db8:	43d2      	mvns	r2, r2
 8004dba:	401a      	ands	r2, r3
 8004dbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	019b      	lsls	r3, r3, #6
 8004dc2:	22ff      	movs	r2, #255	; 0xff
 8004dc4:	401a      	ands	r2, r3
 8004dc6:	1dfb      	adds	r3, r7, #7
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	0018      	movs	r0, r3
 8004dcc:	2303      	movs	r3, #3
 8004dce:	4003      	ands	r3, r0
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004dd4:	481f      	ldr	r0, [pc, #124]	; (8004e54 <__NVIC_SetPriority+0xd4>)
 8004dd6:	1dfb      	adds	r3, r7, #7
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	b25b      	sxtb	r3, r3
 8004ddc:	089b      	lsrs	r3, r3, #2
 8004dde:	430a      	orrs	r2, r1
 8004de0:	33c0      	adds	r3, #192	; 0xc0
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	501a      	str	r2, [r3, r0]
}
 8004de6:	e031      	b.n	8004e4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004de8:	4a1b      	ldr	r2, [pc, #108]	; (8004e58 <__NVIC_SetPriority+0xd8>)
 8004dea:	1dfb      	adds	r3, r7, #7
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	0019      	movs	r1, r3
 8004df0:	230f      	movs	r3, #15
 8004df2:	400b      	ands	r3, r1
 8004df4:	3b08      	subs	r3, #8
 8004df6:	089b      	lsrs	r3, r3, #2
 8004df8:	3306      	adds	r3, #6
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	18d3      	adds	r3, r2, r3
 8004dfe:	3304      	adds	r3, #4
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	1dfa      	adds	r2, r7, #7
 8004e04:	7812      	ldrb	r2, [r2, #0]
 8004e06:	0011      	movs	r1, r2
 8004e08:	2203      	movs	r2, #3
 8004e0a:	400a      	ands	r2, r1
 8004e0c:	00d2      	lsls	r2, r2, #3
 8004e0e:	21ff      	movs	r1, #255	; 0xff
 8004e10:	4091      	lsls	r1, r2
 8004e12:	000a      	movs	r2, r1
 8004e14:	43d2      	mvns	r2, r2
 8004e16:	401a      	ands	r2, r3
 8004e18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	019b      	lsls	r3, r3, #6
 8004e1e:	22ff      	movs	r2, #255	; 0xff
 8004e20:	401a      	ands	r2, r3
 8004e22:	1dfb      	adds	r3, r7, #7
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	0018      	movs	r0, r3
 8004e28:	2303      	movs	r3, #3
 8004e2a:	4003      	ands	r3, r0
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e30:	4809      	ldr	r0, [pc, #36]	; (8004e58 <__NVIC_SetPriority+0xd8>)
 8004e32:	1dfb      	adds	r3, r7, #7
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	001c      	movs	r4, r3
 8004e38:	230f      	movs	r3, #15
 8004e3a:	4023      	ands	r3, r4
 8004e3c:	3b08      	subs	r3, #8
 8004e3e:	089b      	lsrs	r3, r3, #2
 8004e40:	430a      	orrs	r2, r1
 8004e42:	3306      	adds	r3, #6
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	18c3      	adds	r3, r0, r3
 8004e48:	3304      	adds	r3, #4
 8004e4a:	601a      	str	r2, [r3, #0]
}
 8004e4c:	46c0      	nop			; (mov r8, r8)
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	b003      	add	sp, #12
 8004e52:	bd90      	pop	{r4, r7, pc}
 8004e54:	e000e100 	.word	0xe000e100
 8004e58:	e000ed00 	.word	0xe000ed00

08004e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	1e5a      	subs	r2, r3, #1
 8004e68:	2380      	movs	r3, #128	; 0x80
 8004e6a:	045b      	lsls	r3, r3, #17
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d301      	bcc.n	8004e74 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e70:	2301      	movs	r3, #1
 8004e72:	e010      	b.n	8004e96 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e74:	4b0a      	ldr	r3, [pc, #40]	; (8004ea0 <SysTick_Config+0x44>)
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	3a01      	subs	r2, #1
 8004e7a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	425b      	negs	r3, r3
 8004e80:	2103      	movs	r1, #3
 8004e82:	0018      	movs	r0, r3
 8004e84:	f7ff ff7c 	bl	8004d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e88:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <SysTick_Config+0x44>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e8e:	4b04      	ldr	r3, [pc, #16]	; (8004ea0 <SysTick_Config+0x44>)
 8004e90:	2207      	movs	r2, #7
 8004e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	0018      	movs	r0, r3
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	b002      	add	sp, #8
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	46c0      	nop			; (mov r8, r8)
 8004ea0:	e000e010 	.word	0xe000e010

08004ea4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60b9      	str	r1, [r7, #8]
 8004eac:	607a      	str	r2, [r7, #4]
 8004eae:	210f      	movs	r1, #15
 8004eb0:	187b      	adds	r3, r7, r1
 8004eb2:	1c02      	adds	r2, r0, #0
 8004eb4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	187b      	adds	r3, r7, r1
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	b25b      	sxtb	r3, r3
 8004ebe:	0011      	movs	r1, r2
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	f7ff ff5d 	bl	8004d80 <__NVIC_SetPriority>
}
 8004ec6:	46c0      	nop			; (mov r8, r8)
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	b004      	add	sp, #16
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b082      	sub	sp, #8
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	0002      	movs	r2, r0
 8004ed6:	1dfb      	adds	r3, r7, #7
 8004ed8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004eda:	1dfb      	adds	r3, r7, #7
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	b25b      	sxtb	r3, r3
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f7ff ff33 	bl	8004d4c <__NVIC_EnableIRQ>
}
 8004ee6:	46c0      	nop			; (mov r8, r8)
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	b002      	add	sp, #8
 8004eec:	bd80      	pop	{r7, pc}

08004eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b082      	sub	sp, #8
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	0018      	movs	r0, r3
 8004efa:	f7ff ffaf 	bl	8004e5c <SysTick_Config>
 8004efe:	0003      	movs	r3, r0
}
 8004f00:	0018      	movs	r0, r3
 8004f02:	46bd      	mov	sp, r7
 8004f04:	b002      	add	sp, #8
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e077      	b.n	800500a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a3d      	ldr	r2, [pc, #244]	; (8005014 <HAL_DMA_Init+0x10c>)
 8004f20:	4694      	mov	ip, r2
 8004f22:	4463      	add	r3, ip
 8004f24:	2114      	movs	r1, #20
 8004f26:	0018      	movs	r0, r3
 8004f28:	f7fb f8ec 	bl	8000104 <__udivsi3>
 8004f2c:	0003      	movs	r3, r0
 8004f2e:	009a      	lsls	r2, r3, #2
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2225      	movs	r2, #37	; 0x25
 8004f38:	2102      	movs	r1, #2
 8004f3a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4934      	ldr	r1, [pc, #208]	; (8005018 <HAL_DMA_Init+0x110>)
 8004f48:	400a      	ands	r2, r1
 8004f4a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6819      	ldr	r1, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	431a      	orrs	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	0018      	movs	r0, r3
 8004f86:	f000 fa99 	bl	80054bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689a      	ldr	r2, [r3, #8]
 8004f8e:	2380      	movs	r3, #128	; 0x80
 8004f90:	01db      	lsls	r3, r3, #7
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d102      	bne.n	8004f9c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa4:	213f      	movs	r1, #63	; 0x3f
 8004fa6:	400a      	ands	r2, r1
 8004fa8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004fb2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d011      	beq.n	8004fe0 <HAL_DMA_Init+0xd8>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	d80d      	bhi.n	8004fe0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	0018      	movs	r0, r3
 8004fc8:	f000 faa4 	bl	8005514 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004fdc:	605a      	str	r2, [r3, #4]
 8004fde:	e008      	b.n	8004ff2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2225      	movs	r2, #37	; 0x25
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2224      	movs	r2, #36	; 0x24
 8005004:	2100      	movs	r1, #0
 8005006:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	0018      	movs	r0, r3
 800500c:	46bd      	mov	sp, r7
 800500e:	b002      	add	sp, #8
 8005010:	bd80      	pop	{r7, pc}
 8005012:	46c0      	nop			; (mov r8, r8)
 8005014:	bffdfff8 	.word	0xbffdfff8
 8005018:	ffff800f 	.word	0xffff800f

0800501c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
 8005028:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800502a:	2317      	movs	r3, #23
 800502c:	18fb      	adds	r3, r7, r3
 800502e:	2200      	movs	r2, #0
 8005030:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2224      	movs	r2, #36	; 0x24
 8005036:	5c9b      	ldrb	r3, [r3, r2]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d101      	bne.n	8005040 <HAL_DMA_Start_IT+0x24>
 800503c:	2302      	movs	r3, #2
 800503e:	e06f      	b.n	8005120 <HAL_DMA_Start_IT+0x104>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2224      	movs	r2, #36	; 0x24
 8005044:	2101      	movs	r1, #1
 8005046:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2225      	movs	r2, #37	; 0x25
 800504c:	5c9b      	ldrb	r3, [r3, r2]
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b01      	cmp	r3, #1
 8005052:	d157      	bne.n	8005104 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2225      	movs	r2, #37	; 0x25
 8005058:	2102      	movs	r1, #2
 800505a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2101      	movs	r1, #1
 800506e:	438a      	bics	r2, r1
 8005070:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	68b9      	ldr	r1, [r7, #8]
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 f9df 	bl	800543c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005082:	2b00      	cmp	r3, #0
 8005084:	d008      	beq.n	8005098 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	210e      	movs	r1, #14
 8005092:	430a      	orrs	r2, r1
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	e00f      	b.n	80050b8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2104      	movs	r1, #4
 80050a4:	438a      	bics	r2, r1
 80050a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	210a      	movs	r1, #10
 80050b4:	430a      	orrs	r2, r1
 80050b6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	2380      	movs	r3, #128	; 0x80
 80050c0:	025b      	lsls	r3, r3, #9
 80050c2:	4013      	ands	r3, r2
 80050c4:	d008      	beq.n	80050d8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d0:	2180      	movs	r1, #128	; 0x80
 80050d2:	0049      	lsls	r1, r1, #1
 80050d4:	430a      	orrs	r2, r1
 80050d6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d008      	beq.n	80050f2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ea:	2180      	movs	r1, #128	; 0x80
 80050ec:	0049      	lsls	r1, r1, #1
 80050ee:	430a      	orrs	r2, r1
 80050f0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2101      	movs	r1, #1
 80050fe:	430a      	orrs	r2, r1
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	e00a      	b.n	800511a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2280      	movs	r2, #128	; 0x80
 8005108:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2224      	movs	r2, #36	; 0x24
 800510e:	2100      	movs	r1, #0
 8005110:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8005112:	2317      	movs	r3, #23
 8005114:	18fb      	adds	r3, r7, r3
 8005116:	2201      	movs	r2, #1
 8005118:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800511a:	2317      	movs	r3, #23
 800511c:	18fb      	adds	r3, r7, r3
 800511e:	781b      	ldrb	r3, [r3, #0]
}
 8005120:	0018      	movs	r0, r3
 8005122:	46bd      	mov	sp, r7
 8005124:	b006      	add	sp, #24
 8005126:	bd80      	pop	{r7, pc}

08005128 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e050      	b.n	80051dc <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2225      	movs	r2, #37	; 0x25
 800513e:	5c9b      	ldrb	r3, [r3, r2]
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d008      	beq.n	8005158 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2204      	movs	r2, #4
 800514a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2224      	movs	r2, #36	; 0x24
 8005150:	2100      	movs	r1, #0
 8005152:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e041      	b.n	80051dc <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	210e      	movs	r1, #14
 8005164:	438a      	bics	r2, r1
 8005166:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005172:	491c      	ldr	r1, [pc, #112]	; (80051e4 <HAL_DMA_Abort+0xbc>)
 8005174:	400a      	ands	r2, r1
 8005176:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2101      	movs	r1, #1
 8005184:	438a      	bics	r2, r1
 8005186:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8005188:	4b17      	ldr	r3, [pc, #92]	; (80051e8 <HAL_DMA_Abort+0xc0>)
 800518a:	6859      	ldr	r1, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005190:	221c      	movs	r2, #28
 8005192:	4013      	ands	r3, r2
 8005194:	2201      	movs	r2, #1
 8005196:	409a      	lsls	r2, r3
 8005198:	4b13      	ldr	r3, [pc, #76]	; (80051e8 <HAL_DMA_Abort+0xc0>)
 800519a:	430a      	orrs	r2, r1
 800519c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80051a6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00c      	beq.n	80051ca <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ba:	490a      	ldr	r1, [pc, #40]	; (80051e4 <HAL_DMA_Abort+0xbc>)
 80051bc:	400a      	ands	r2, r1
 80051be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80051c8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2225      	movs	r2, #37	; 0x25
 80051ce:	2101      	movs	r1, #1
 80051d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2224      	movs	r2, #36	; 0x24
 80051d6:	2100      	movs	r1, #0
 80051d8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	0018      	movs	r0, r3
 80051de:	46bd      	mov	sp, r7
 80051e0:	b002      	add	sp, #8
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	fffffeff 	.word	0xfffffeff
 80051e8:	40020000 	.word	0x40020000

080051ec <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051f4:	210f      	movs	r1, #15
 80051f6:	187b      	adds	r3, r7, r1
 80051f8:	2200      	movs	r2, #0
 80051fa:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2225      	movs	r2, #37	; 0x25
 8005200:	5c9b      	ldrb	r3, [r3, r2]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d006      	beq.n	8005216 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2204      	movs	r2, #4
 800520c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800520e:	187b      	adds	r3, r7, r1
 8005210:	2201      	movs	r2, #1
 8005212:	701a      	strb	r2, [r3, #0]
 8005214:	e049      	b.n	80052aa <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	210e      	movs	r1, #14
 8005222:	438a      	bics	r2, r1
 8005224:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2101      	movs	r1, #1
 8005232:	438a      	bics	r2, r1
 8005234:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005240:	491d      	ldr	r1, [pc, #116]	; (80052b8 <HAL_DMA_Abort_IT+0xcc>)
 8005242:	400a      	ands	r2, r1
 8005244:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8005246:	4b1d      	ldr	r3, [pc, #116]	; (80052bc <HAL_DMA_Abort_IT+0xd0>)
 8005248:	6859      	ldr	r1, [r3, #4]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	221c      	movs	r2, #28
 8005250:	4013      	ands	r3, r2
 8005252:	2201      	movs	r2, #1
 8005254:	409a      	lsls	r2, r3
 8005256:	4b19      	ldr	r3, [pc, #100]	; (80052bc <HAL_DMA_Abort_IT+0xd0>)
 8005258:	430a      	orrs	r2, r1
 800525a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005264:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00c      	beq.n	8005288 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005278:	490f      	ldr	r1, [pc, #60]	; (80052b8 <HAL_DMA_Abort_IT+0xcc>)
 800527a:	400a      	ands	r2, r1
 800527c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005286:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2225      	movs	r2, #37	; 0x25
 800528c:	2101      	movs	r1, #1
 800528e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2224      	movs	r2, #36	; 0x24
 8005294:	2100      	movs	r1, #0
 8005296:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529c:	2b00      	cmp	r3, #0
 800529e:	d004      	beq.n	80052aa <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	0010      	movs	r0, r2
 80052a8:	4798      	blx	r3
    }
  }
  return status;
 80052aa:	230f      	movs	r3, #15
 80052ac:	18fb      	adds	r3, r7, r3
 80052ae:	781b      	ldrb	r3, [r3, #0]
}
 80052b0:	0018      	movs	r0, r3
 80052b2:	46bd      	mov	sp, r7
 80052b4:	b004      	add	sp, #16
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	fffffeff 	.word	0xfffffeff
 80052bc:	40020000 	.word	0x40020000

080052c0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80052c8:	4b55      	ldr	r3, [pc, #340]	; (8005420 <HAL_DMA_IRQHandler+0x160>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	221c      	movs	r2, #28
 80052dc:	4013      	ands	r3, r2
 80052de:	2204      	movs	r2, #4
 80052e0:	409a      	lsls	r2, r3
 80052e2:	0013      	movs	r3, r2
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	4013      	ands	r3, r2
 80052e8:	d027      	beq.n	800533a <HAL_DMA_IRQHandler+0x7a>
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2204      	movs	r2, #4
 80052ee:	4013      	ands	r3, r2
 80052f0:	d023      	beq.n	800533a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2220      	movs	r2, #32
 80052fa:	4013      	ands	r3, r2
 80052fc:	d107      	bne.n	800530e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2104      	movs	r1, #4
 800530a:	438a      	bics	r2, r1
 800530c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800530e:	4b44      	ldr	r3, [pc, #272]	; (8005420 <HAL_DMA_IRQHandler+0x160>)
 8005310:	6859      	ldr	r1, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	221c      	movs	r2, #28
 8005318:	4013      	ands	r3, r2
 800531a:	2204      	movs	r2, #4
 800531c:	409a      	lsls	r2, r3
 800531e:	4b40      	ldr	r3, [pc, #256]	; (8005420 <HAL_DMA_IRQHandler+0x160>)
 8005320:	430a      	orrs	r2, r1
 8005322:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005328:	2b00      	cmp	r3, #0
 800532a:	d100      	bne.n	800532e <HAL_DMA_IRQHandler+0x6e>
 800532c:	e073      	b.n	8005416 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	0010      	movs	r0, r2
 8005336:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005338:	e06d      	b.n	8005416 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	221c      	movs	r2, #28
 8005340:	4013      	ands	r3, r2
 8005342:	2202      	movs	r2, #2
 8005344:	409a      	lsls	r2, r3
 8005346:	0013      	movs	r3, r2
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	4013      	ands	r3, r2
 800534c:	d02e      	beq.n	80053ac <HAL_DMA_IRQHandler+0xec>
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2202      	movs	r2, #2
 8005352:	4013      	ands	r3, r2
 8005354:	d02a      	beq.n	80053ac <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2220      	movs	r2, #32
 800535e:	4013      	ands	r3, r2
 8005360:	d10b      	bne.n	800537a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	210a      	movs	r1, #10
 800536e:	438a      	bics	r2, r1
 8005370:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2225      	movs	r2, #37	; 0x25
 8005376:	2101      	movs	r1, #1
 8005378:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800537a:	4b29      	ldr	r3, [pc, #164]	; (8005420 <HAL_DMA_IRQHandler+0x160>)
 800537c:	6859      	ldr	r1, [r3, #4]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	221c      	movs	r2, #28
 8005384:	4013      	ands	r3, r2
 8005386:	2202      	movs	r2, #2
 8005388:	409a      	lsls	r2, r3
 800538a:	4b25      	ldr	r3, [pc, #148]	; (8005420 <HAL_DMA_IRQHandler+0x160>)
 800538c:	430a      	orrs	r2, r1
 800538e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2224      	movs	r2, #36	; 0x24
 8005394:	2100      	movs	r1, #0
 8005396:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539c:	2b00      	cmp	r3, #0
 800539e:	d03a      	beq.n	8005416 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	0010      	movs	r0, r2
 80053a8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80053aa:	e034      	b.n	8005416 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b0:	221c      	movs	r2, #28
 80053b2:	4013      	ands	r3, r2
 80053b4:	2208      	movs	r2, #8
 80053b6:	409a      	lsls	r2, r3
 80053b8:	0013      	movs	r3, r2
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4013      	ands	r3, r2
 80053be:	d02b      	beq.n	8005418 <HAL_DMA_IRQHandler+0x158>
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2208      	movs	r2, #8
 80053c4:	4013      	ands	r3, r2
 80053c6:	d027      	beq.n	8005418 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	210e      	movs	r1, #14
 80053d4:	438a      	bics	r2, r1
 80053d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80053d8:	4b11      	ldr	r3, [pc, #68]	; (8005420 <HAL_DMA_IRQHandler+0x160>)
 80053da:	6859      	ldr	r1, [r3, #4]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e0:	221c      	movs	r2, #28
 80053e2:	4013      	ands	r3, r2
 80053e4:	2201      	movs	r2, #1
 80053e6:	409a      	lsls	r2, r3
 80053e8:	4b0d      	ldr	r3, [pc, #52]	; (8005420 <HAL_DMA_IRQHandler+0x160>)
 80053ea:	430a      	orrs	r2, r1
 80053ec:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2225      	movs	r2, #37	; 0x25
 80053f8:	2101      	movs	r1, #1
 80053fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2224      	movs	r2, #36	; 0x24
 8005400:	2100      	movs	r1, #0
 8005402:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005408:	2b00      	cmp	r3, #0
 800540a:	d005      	beq.n	8005418 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	0010      	movs	r0, r2
 8005414:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005416:	46c0      	nop			; (mov r8, r8)
 8005418:	46c0      	nop			; (mov r8, r8)
}
 800541a:	46bd      	mov	sp, r7
 800541c:	b004      	add	sp, #16
 800541e:	bd80      	pop	{r7, pc}
 8005420:	40020000 	.word	0x40020000

08005424 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2225      	movs	r2, #37	; 0x25
 8005430:	5c9b      	ldrb	r3, [r3, r2]
 8005432:	b2db      	uxtb	r3, r3
}
 8005434:	0018      	movs	r0, r3
 8005436:	46bd      	mov	sp, r7
 8005438:	b002      	add	sp, #8
 800543a:	bd80      	pop	{r7, pc}

0800543c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005452:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005458:	2b00      	cmp	r3, #0
 800545a:	d004      	beq.n	8005466 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005464:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005466:	4b14      	ldr	r3, [pc, #80]	; (80054b8 <DMA_SetConfig+0x7c>)
 8005468:	6859      	ldr	r1, [r3, #4]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	221c      	movs	r2, #28
 8005470:	4013      	ands	r3, r2
 8005472:	2201      	movs	r2, #1
 8005474:	409a      	lsls	r2, r3
 8005476:	4b10      	ldr	r3, [pc, #64]	; (80054b8 <DMA_SetConfig+0x7c>)
 8005478:	430a      	orrs	r2, r1
 800547a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	2b10      	cmp	r3, #16
 800548a:	d108      	bne.n	800549e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800549c:	e007      	b.n	80054ae <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	60da      	str	r2, [r3, #12]
}
 80054ae:	46c0      	nop			; (mov r8, r8)
 80054b0:	46bd      	mov	sp, r7
 80054b2:	b004      	add	sp, #16
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	46c0      	nop			; (mov r8, r8)
 80054b8:	40020000 	.word	0x40020000

080054bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c8:	089b      	lsrs	r3, r3, #2
 80054ca:	4a10      	ldr	r2, [pc, #64]	; (800550c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80054cc:	4694      	mov	ip, r2
 80054ce:	4463      	add	r3, ip
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	001a      	movs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	001a      	movs	r2, r3
 80054de:	23ff      	movs	r3, #255	; 0xff
 80054e0:	4013      	ands	r3, r2
 80054e2:	3b08      	subs	r3, #8
 80054e4:	2114      	movs	r1, #20
 80054e6:	0018      	movs	r0, r3
 80054e8:	f7fa fe0c 	bl	8000104 <__udivsi3>
 80054ec:	0003      	movs	r3, r0
 80054ee:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a07      	ldr	r2, [pc, #28]	; (8005510 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80054f4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	221f      	movs	r2, #31
 80054fa:	4013      	ands	r3, r2
 80054fc:	2201      	movs	r2, #1
 80054fe:	409a      	lsls	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8005504:	46c0      	nop			; (mov r8, r8)
 8005506:	46bd      	mov	sp, r7
 8005508:	b004      	add	sp, #16
 800550a:	bd80      	pop	{r7, pc}
 800550c:	10008200 	.word	0x10008200
 8005510:	40020880 	.word	0x40020880

08005514 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	223f      	movs	r2, #63	; 0x3f
 8005522:	4013      	ands	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4a0a      	ldr	r2, [pc, #40]	; (8005554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800552a:	4694      	mov	ip, r2
 800552c:	4463      	add	r3, ip
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	001a      	movs	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a07      	ldr	r2, [pc, #28]	; (8005558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800553a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	3b01      	subs	r3, #1
 8005540:	2203      	movs	r2, #3
 8005542:	4013      	ands	r3, r2
 8005544:	2201      	movs	r2, #1
 8005546:	409a      	lsls	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800554c:	46c0      	nop			; (mov r8, r8)
 800554e:	46bd      	mov	sp, r7
 8005550:	b004      	add	sp, #16
 8005552:	bd80      	pop	{r7, pc}
 8005554:	1000823f 	.word	0x1000823f
 8005558:	40020940 	.word	0x40020940

0800555c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005566:	2300      	movs	r3, #0
 8005568:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800556a:	e147      	b.n	80057fc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2101      	movs	r1, #1
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	4091      	lsls	r1, r2
 8005576:	000a      	movs	r2, r1
 8005578:	4013      	ands	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d100      	bne.n	8005584 <HAL_GPIO_Init+0x28>
 8005582:	e138      	b.n	80057f6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2203      	movs	r2, #3
 800558a:	4013      	ands	r3, r2
 800558c:	2b01      	cmp	r3, #1
 800558e:	d005      	beq.n	800559c <HAL_GPIO_Init+0x40>
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	2203      	movs	r2, #3
 8005596:	4013      	ands	r3, r2
 8005598:	2b02      	cmp	r3, #2
 800559a:	d130      	bne.n	80055fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	2203      	movs	r2, #3
 80055a8:	409a      	lsls	r2, r3
 80055aa:	0013      	movs	r3, r2
 80055ac:	43da      	mvns	r2, r3
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	4013      	ands	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	409a      	lsls	r2, r3
 80055be:	0013      	movs	r3, r2
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055d2:	2201      	movs	r2, #1
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	409a      	lsls	r2, r3
 80055d8:	0013      	movs	r3, r2
 80055da:	43da      	mvns	r2, r3
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	4013      	ands	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	091b      	lsrs	r3, r3, #4
 80055e8:	2201      	movs	r2, #1
 80055ea:	401a      	ands	r2, r3
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	409a      	lsls	r2, r3
 80055f0:	0013      	movs	r3, r2
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2203      	movs	r2, #3
 8005604:	4013      	ands	r3, r2
 8005606:	2b03      	cmp	r3, #3
 8005608:	d017      	beq.n	800563a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	2203      	movs	r2, #3
 8005616:	409a      	lsls	r2, r3
 8005618:	0013      	movs	r3, r2
 800561a:	43da      	mvns	r2, r3
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	4013      	ands	r3, r2
 8005620:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	689a      	ldr	r2, [r3, #8]
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	005b      	lsls	r3, r3, #1
 800562a:	409a      	lsls	r2, r3
 800562c:	0013      	movs	r3, r2
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	2203      	movs	r2, #3
 8005640:	4013      	ands	r3, r2
 8005642:	2b02      	cmp	r3, #2
 8005644:	d123      	bne.n	800568e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	08da      	lsrs	r2, r3, #3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	3208      	adds	r2, #8
 800564e:	0092      	lsls	r2, r2, #2
 8005650:	58d3      	ldr	r3, [r2, r3]
 8005652:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	2207      	movs	r2, #7
 8005658:	4013      	ands	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	220f      	movs	r2, #15
 800565e:	409a      	lsls	r2, r3
 8005660:	0013      	movs	r3, r2
 8005662:	43da      	mvns	r2, r3
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	4013      	ands	r3, r2
 8005668:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	691a      	ldr	r2, [r3, #16]
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2107      	movs	r1, #7
 8005672:	400b      	ands	r3, r1
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	409a      	lsls	r2, r3
 8005678:	0013      	movs	r3, r2
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	4313      	orrs	r3, r2
 800567e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	08da      	lsrs	r2, r3, #3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	3208      	adds	r2, #8
 8005688:	0092      	lsls	r2, r2, #2
 800568a:	6939      	ldr	r1, [r7, #16]
 800568c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	2203      	movs	r2, #3
 800569a:	409a      	lsls	r2, r3
 800569c:	0013      	movs	r3, r2
 800569e:	43da      	mvns	r2, r3
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	4013      	ands	r3, r2
 80056a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	2203      	movs	r2, #3
 80056ac:	401a      	ands	r2, r3
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	409a      	lsls	r2, r3
 80056b4:	0013      	movs	r3, r2
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	23c0      	movs	r3, #192	; 0xc0
 80056c8:	029b      	lsls	r3, r3, #10
 80056ca:	4013      	ands	r3, r2
 80056cc:	d100      	bne.n	80056d0 <HAL_GPIO_Init+0x174>
 80056ce:	e092      	b.n	80057f6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80056d0:	4a50      	ldr	r2, [pc, #320]	; (8005814 <HAL_GPIO_Init+0x2b8>)
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	089b      	lsrs	r3, r3, #2
 80056d6:	3318      	adds	r3, #24
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	589b      	ldr	r3, [r3, r2]
 80056dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2203      	movs	r2, #3
 80056e2:	4013      	ands	r3, r2
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	220f      	movs	r2, #15
 80056e8:	409a      	lsls	r2, r3
 80056ea:	0013      	movs	r3, r2
 80056ec:	43da      	mvns	r2, r3
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	4013      	ands	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	23a0      	movs	r3, #160	; 0xa0
 80056f8:	05db      	lsls	r3, r3, #23
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d013      	beq.n	8005726 <HAL_GPIO_Init+0x1ca>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a45      	ldr	r2, [pc, #276]	; (8005818 <HAL_GPIO_Init+0x2bc>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d00d      	beq.n	8005722 <HAL_GPIO_Init+0x1c6>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a44      	ldr	r2, [pc, #272]	; (800581c <HAL_GPIO_Init+0x2c0>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d007      	beq.n	800571e <HAL_GPIO_Init+0x1c2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a43      	ldr	r2, [pc, #268]	; (8005820 <HAL_GPIO_Init+0x2c4>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d101      	bne.n	800571a <HAL_GPIO_Init+0x1be>
 8005716:	2303      	movs	r3, #3
 8005718:	e006      	b.n	8005728 <HAL_GPIO_Init+0x1cc>
 800571a:	2305      	movs	r3, #5
 800571c:	e004      	b.n	8005728 <HAL_GPIO_Init+0x1cc>
 800571e:	2302      	movs	r3, #2
 8005720:	e002      	b.n	8005728 <HAL_GPIO_Init+0x1cc>
 8005722:	2301      	movs	r3, #1
 8005724:	e000      	b.n	8005728 <HAL_GPIO_Init+0x1cc>
 8005726:	2300      	movs	r3, #0
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	2103      	movs	r1, #3
 800572c:	400a      	ands	r2, r1
 800572e:	00d2      	lsls	r2, r2, #3
 8005730:	4093      	lsls	r3, r2
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	4313      	orrs	r3, r2
 8005736:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005738:	4936      	ldr	r1, [pc, #216]	; (8005814 <HAL_GPIO_Init+0x2b8>)
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	089b      	lsrs	r3, r3, #2
 800573e:	3318      	adds	r3, #24
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005746:	4b33      	ldr	r3, [pc, #204]	; (8005814 <HAL_GPIO_Init+0x2b8>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	43da      	mvns	r2, r3
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	4013      	ands	r3, r2
 8005754:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	2380      	movs	r3, #128	; 0x80
 800575c:	035b      	lsls	r3, r3, #13
 800575e:	4013      	ands	r3, r2
 8005760:	d003      	beq.n	800576a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4313      	orrs	r3, r2
 8005768:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800576a:	4b2a      	ldr	r3, [pc, #168]	; (8005814 <HAL_GPIO_Init+0x2b8>)
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005770:	4b28      	ldr	r3, [pc, #160]	; (8005814 <HAL_GPIO_Init+0x2b8>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	43da      	mvns	r2, r3
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	4013      	ands	r3, r2
 800577e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	2380      	movs	r3, #128	; 0x80
 8005786:	039b      	lsls	r3, r3, #14
 8005788:	4013      	ands	r3, r2
 800578a:	d003      	beq.n	8005794 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4313      	orrs	r3, r2
 8005792:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005794:	4b1f      	ldr	r3, [pc, #124]	; (8005814 <HAL_GPIO_Init+0x2b8>)
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800579a:	4a1e      	ldr	r2, [pc, #120]	; (8005814 <HAL_GPIO_Init+0x2b8>)
 800579c:	2384      	movs	r3, #132	; 0x84
 800579e:	58d3      	ldr	r3, [r2, r3]
 80057a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	43da      	mvns	r2, r3
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	4013      	ands	r3, r2
 80057aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	2380      	movs	r3, #128	; 0x80
 80057b2:	029b      	lsls	r3, r3, #10
 80057b4:	4013      	ands	r3, r2
 80057b6:	d003      	beq.n	80057c0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	4313      	orrs	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80057c0:	4914      	ldr	r1, [pc, #80]	; (8005814 <HAL_GPIO_Init+0x2b8>)
 80057c2:	2284      	movs	r2, #132	; 0x84
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80057c8:	4a12      	ldr	r2, [pc, #72]	; (8005814 <HAL_GPIO_Init+0x2b8>)
 80057ca:	2380      	movs	r3, #128	; 0x80
 80057cc:	58d3      	ldr	r3, [r2, r3]
 80057ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	43da      	mvns	r2, r3
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	4013      	ands	r3, r2
 80057d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	2380      	movs	r3, #128	; 0x80
 80057e0:	025b      	lsls	r3, r3, #9
 80057e2:	4013      	ands	r3, r2
 80057e4:	d003      	beq.n	80057ee <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80057ee:	4909      	ldr	r1, [pc, #36]	; (8005814 <HAL_GPIO_Init+0x2b8>)
 80057f0:	2280      	movs	r2, #128	; 0x80
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	3301      	adds	r3, #1
 80057fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	40da      	lsrs	r2, r3
 8005804:	1e13      	subs	r3, r2, #0
 8005806:	d000      	beq.n	800580a <HAL_GPIO_Init+0x2ae>
 8005808:	e6b0      	b.n	800556c <HAL_GPIO_Init+0x10>
  }
}
 800580a:	46c0      	nop			; (mov r8, r8)
 800580c:	46c0      	nop			; (mov r8, r8)
 800580e:	46bd      	mov	sp, r7
 8005810:	b006      	add	sp, #24
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40021800 	.word	0x40021800
 8005818:	50000400 	.word	0x50000400
 800581c:	50000800 	.word	0x50000800
 8005820:	50000c00 	.word	0x50000c00

08005824 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e082      	b.n	800593c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2241      	movs	r2, #65	; 0x41
 800583a:	5c9b      	ldrb	r3, [r3, r2]
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d107      	bne.n	8005852 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2240      	movs	r2, #64	; 0x40
 8005846:	2100      	movs	r1, #0
 8005848:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	0018      	movs	r0, r3
 800584e:	f7fe fb01 	bl	8003e54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2241      	movs	r2, #65	; 0x41
 8005856:	2124      	movs	r1, #36	; 0x24
 8005858:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2101      	movs	r1, #1
 8005866:	438a      	bics	r2, r1
 8005868:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4934      	ldr	r1, [pc, #208]	; (8005944 <HAL_I2C_Init+0x120>)
 8005874:	400a      	ands	r2, r1
 8005876:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689a      	ldr	r2, [r3, #8]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4931      	ldr	r1, [pc, #196]	; (8005948 <HAL_I2C_Init+0x124>)
 8005884:	400a      	ands	r2, r1
 8005886:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d108      	bne.n	80058a2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2180      	movs	r1, #128	; 0x80
 800589a:	0209      	lsls	r1, r1, #8
 800589c:	430a      	orrs	r2, r1
 800589e:	609a      	str	r2, [r3, #8]
 80058a0:	e007      	b.n	80058b2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	689a      	ldr	r2, [r3, #8]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2184      	movs	r1, #132	; 0x84
 80058ac:	0209      	lsls	r1, r1, #8
 80058ae:	430a      	orrs	r2, r1
 80058b0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d104      	bne.n	80058c4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2280      	movs	r2, #128	; 0x80
 80058c0:	0112      	lsls	r2, r2, #4
 80058c2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	491f      	ldr	r1, [pc, #124]	; (800594c <HAL_I2C_Init+0x128>)
 80058d0:	430a      	orrs	r2, r1
 80058d2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68da      	ldr	r2, [r3, #12]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	491a      	ldr	r1, [pc, #104]	; (8005948 <HAL_I2C_Init+0x124>)
 80058e0:	400a      	ands	r2, r1
 80058e2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	691a      	ldr	r2, [r3, #16]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	431a      	orrs	r2, r3
 80058ee:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	69d9      	ldr	r1, [r3, #28]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1a      	ldr	r2, [r3, #32]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2101      	movs	r1, #1
 800591a:	430a      	orrs	r2, r1
 800591c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2241      	movs	r2, #65	; 0x41
 8005928:	2120      	movs	r1, #32
 800592a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2242      	movs	r2, #66	; 0x42
 8005936:	2100      	movs	r1, #0
 8005938:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	0018      	movs	r0, r3
 800593e:	46bd      	mov	sp, r7
 8005940:	b002      	add	sp, #8
 8005942:	bd80      	pop	{r7, pc}
 8005944:	f0ffffff 	.word	0xf0ffffff
 8005948:	ffff7fff 	.word	0xffff7fff
 800594c:	02008000 	.word	0x02008000

08005950 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005950:	b590      	push	{r4, r7, lr}
 8005952:	b089      	sub	sp, #36	; 0x24
 8005954:	af02      	add	r7, sp, #8
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	0008      	movs	r0, r1
 800595a:	607a      	str	r2, [r7, #4]
 800595c:	0019      	movs	r1, r3
 800595e:	230a      	movs	r3, #10
 8005960:	18fb      	adds	r3, r7, r3
 8005962:	1c02      	adds	r2, r0, #0
 8005964:	801a      	strh	r2, [r3, #0]
 8005966:	2308      	movs	r3, #8
 8005968:	18fb      	adds	r3, r7, r3
 800596a:	1c0a      	adds	r2, r1, #0
 800596c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2241      	movs	r2, #65	; 0x41
 8005972:	5c9b      	ldrb	r3, [r3, r2]
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b20      	cmp	r3, #32
 8005978:	d000      	beq.n	800597c <HAL_I2C_Master_Transmit+0x2c>
 800597a:	e0e7      	b.n	8005b4c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2240      	movs	r2, #64	; 0x40
 8005980:	5c9b      	ldrb	r3, [r3, r2]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d101      	bne.n	800598a <HAL_I2C_Master_Transmit+0x3a>
 8005986:	2302      	movs	r3, #2
 8005988:	e0e1      	b.n	8005b4e <HAL_I2C_Master_Transmit+0x1fe>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2240      	movs	r2, #64	; 0x40
 800598e:	2101      	movs	r1, #1
 8005990:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005992:	f7fe ff37 	bl	8004804 <HAL_GetTick>
 8005996:	0003      	movs	r3, r0
 8005998:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800599a:	2380      	movs	r3, #128	; 0x80
 800599c:	0219      	lsls	r1, r3, #8
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	2319      	movs	r3, #25
 80059a6:	2201      	movs	r2, #1
 80059a8:	f000 fe76 	bl	8006698 <I2C_WaitOnFlagUntilTimeout>
 80059ac:	1e03      	subs	r3, r0, #0
 80059ae:	d001      	beq.n	80059b4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e0cc      	b.n	8005b4e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2241      	movs	r2, #65	; 0x41
 80059b8:	2121      	movs	r1, #33	; 0x21
 80059ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2242      	movs	r2, #66	; 0x42
 80059c0:	2110      	movs	r1, #16
 80059c2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2208      	movs	r2, #8
 80059d4:	18ba      	adds	r2, r7, r2
 80059d6:	8812      	ldrh	r2, [r2, #0]
 80059d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	2bff      	cmp	r3, #255	; 0xff
 80059e8:	d911      	bls.n	8005a0e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	22ff      	movs	r2, #255	; 0xff
 80059ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	2380      	movs	r3, #128	; 0x80
 80059f8:	045c      	lsls	r4, r3, #17
 80059fa:	230a      	movs	r3, #10
 80059fc:	18fb      	adds	r3, r7, r3
 80059fe:	8819      	ldrh	r1, [r3, #0]
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	4b55      	ldr	r3, [pc, #340]	; (8005b58 <HAL_I2C_Master_Transmit+0x208>)
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	0023      	movs	r3, r4
 8005a08:	f001 f800 	bl	8006a0c <I2C_TransferConfig>
 8005a0c:	e075      	b.n	8005afa <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	2380      	movs	r3, #128	; 0x80
 8005a20:	049c      	lsls	r4, r3, #18
 8005a22:	230a      	movs	r3, #10
 8005a24:	18fb      	adds	r3, r7, r3
 8005a26:	8819      	ldrh	r1, [r3, #0]
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	4b4b      	ldr	r3, [pc, #300]	; (8005b58 <HAL_I2C_Master_Transmit+0x208>)
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	0023      	movs	r3, r4
 8005a30:	f000 ffec 	bl	8006a0c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005a34:	e061      	b.n	8005afa <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	0018      	movs	r0, r3
 8005a3e:	f000 fe6a 	bl	8006716 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a42:	1e03      	subs	r3, r0, #0
 8005a44:	d001      	beq.n	8005a4a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e081      	b.n	8005b4e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4e:	781a      	ldrb	r2, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	1c5a      	adds	r2, r3, #1
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	3b01      	subs	r3, #1
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a72:	3b01      	subs	r3, #1
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d03a      	beq.n	8005afa <HAL_I2C_Master_Transmit+0x1aa>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d136      	bne.n	8005afa <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	0013      	movs	r3, r2
 8005a96:	2200      	movs	r2, #0
 8005a98:	2180      	movs	r1, #128	; 0x80
 8005a9a:	f000 fdfd 	bl	8006698 <I2C_WaitOnFlagUntilTimeout>
 8005a9e:	1e03      	subs	r3, r0, #0
 8005aa0:	d001      	beq.n	8005aa6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e053      	b.n	8005b4e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	2bff      	cmp	r3, #255	; 0xff
 8005aae:	d911      	bls.n	8005ad4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	22ff      	movs	r2, #255	; 0xff
 8005ab4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aba:	b2da      	uxtb	r2, r3
 8005abc:	2380      	movs	r3, #128	; 0x80
 8005abe:	045c      	lsls	r4, r3, #17
 8005ac0:	230a      	movs	r3, #10
 8005ac2:	18fb      	adds	r3, r7, r3
 8005ac4:	8819      	ldrh	r1, [r3, #0]
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	2300      	movs	r3, #0
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	0023      	movs	r3, r4
 8005ace:	f000 ff9d 	bl	8006a0c <I2C_TransferConfig>
 8005ad2:	e012      	b.n	8005afa <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	2380      	movs	r3, #128	; 0x80
 8005ae6:	049c      	lsls	r4, r3, #18
 8005ae8:	230a      	movs	r3, #10
 8005aea:	18fb      	adds	r3, r7, r3
 8005aec:	8819      	ldrh	r1, [r3, #0]
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	2300      	movs	r3, #0
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	0023      	movs	r3, r4
 8005af6:	f000 ff89 	bl	8006a0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d198      	bne.n	8005a36 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	0018      	movs	r0, r3
 8005b0c:	f000 fe42 	bl	8006794 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b10:	1e03      	subs	r3, r0, #0
 8005b12:	d001      	beq.n	8005b18 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e01a      	b.n	8005b4e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	490c      	ldr	r1, [pc, #48]	; (8005b5c <HAL_I2C_Master_Transmit+0x20c>)
 8005b2c:	400a      	ands	r2, r1
 8005b2e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2241      	movs	r2, #65	; 0x41
 8005b34:	2120      	movs	r1, #32
 8005b36:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2242      	movs	r2, #66	; 0x42
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2240      	movs	r2, #64	; 0x40
 8005b44:	2100      	movs	r1, #0
 8005b46:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	e000      	b.n	8005b4e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8005b4c:	2302      	movs	r3, #2
  }
}
 8005b4e:	0018      	movs	r0, r3
 8005b50:	46bd      	mov	sp, r7
 8005b52:	b007      	add	sp, #28
 8005b54:	bd90      	pop	{r4, r7, pc}
 8005b56:	46c0      	nop			; (mov r8, r8)
 8005b58:	80002000 	.word	0x80002000
 8005b5c:	fe00e800 	.word	0xfe00e800

08005b60 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d005      	beq.n	8005b8c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	68f9      	ldr	r1, [r7, #12]
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	4798      	blx	r3
  }
}
 8005b8c:	46c0      	nop			; (mov r8, r8)
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	b004      	add	sp, #16
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	0a1b      	lsrs	r3, r3, #8
 8005bb0:	001a      	movs	r2, r3
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	d010      	beq.n	8005bda <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	09db      	lsrs	r3, r3, #7
 8005bbc:	001a      	movs	r2, r3
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005bc2:	d00a      	beq.n	8005bda <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc8:	2201      	movs	r2, #1
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2280      	movs	r2, #128	; 0x80
 8005bd6:	0052      	lsls	r2, r2, #1
 8005bd8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	0a9b      	lsrs	r3, r3, #10
 8005bde:	001a      	movs	r2, r3
 8005be0:	2301      	movs	r3, #1
 8005be2:	4013      	ands	r3, r2
 8005be4:	d010      	beq.n	8005c08 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	09db      	lsrs	r3, r3, #7
 8005bea:	001a      	movs	r2, r3
 8005bec:	2301      	movs	r3, #1
 8005bee:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005bf0:	d00a      	beq.n	8005c08 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf6:	2208      	movs	r2, #8
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2280      	movs	r2, #128	; 0x80
 8005c04:	00d2      	lsls	r2, r2, #3
 8005c06:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	0a5b      	lsrs	r3, r3, #9
 8005c0c:	001a      	movs	r2, r3
 8005c0e:	2301      	movs	r3, #1
 8005c10:	4013      	ands	r3, r2
 8005c12:	d010      	beq.n	8005c36 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	09db      	lsrs	r3, r3, #7
 8005c18:	001a      	movs	r2, r3
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005c1e:	d00a      	beq.n	8005c36 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c24:	2202      	movs	r2, #2
 8005c26:	431a      	orrs	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2280      	movs	r2, #128	; 0x80
 8005c32:	0092      	lsls	r2, r2, #2
 8005c34:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	220b      	movs	r2, #11
 8005c40:	4013      	ands	r3, r2
 8005c42:	d005      	beq.n	8005c50 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	0011      	movs	r1, r2
 8005c4a:	0018      	movs	r0, r3
 8005c4c:	f000 fbd8 	bl	8006400 <I2C_ITError>
  }
}
 8005c50:	46c0      	nop			; (mov r8, r8)
 8005c52:	46bd      	mov	sp, r7
 8005c54:	b006      	add	sp, #24
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005c60:	46c0      	nop			; (mov r8, r8)
 8005c62:	46bd      	mov	sp, r7
 8005c64:	b002      	add	sp, #8
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005c70:	46c0      	nop			; (mov r8, r8)
 8005c72:	46bd      	mov	sp, r7
 8005c74:	b002      	add	sp, #8
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	0008      	movs	r0, r1
 8005c82:	0011      	movs	r1, r2
 8005c84:	1cfb      	adds	r3, r7, #3
 8005c86:	1c02      	adds	r2, r0, #0
 8005c88:	701a      	strb	r2, [r3, #0]
 8005c8a:	003b      	movs	r3, r7
 8005c8c:	1c0a      	adds	r2, r1, #0
 8005c8e:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005c90:	46c0      	nop			; (mov r8, r8)
 8005c92:	46bd      	mov	sp, r7
 8005c94:	b002      	add	sp, #8
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005ca0:	46c0      	nop			; (mov r8, r8)
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	b002      	add	sp, #8
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005cb0:	46c0      	nop			; (mov r8, r8)
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	b002      	add	sp, #8
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005cc0:	46c0      	nop			; (mov r8, r8)
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	b002      	add	sp, #8
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2240      	movs	r2, #64	; 0x40
 8005ce2:	5c9b      	ldrb	r3, [r3, r2]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d101      	bne.n	8005cec <I2C_Slave_ISR_IT+0x24>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	e0fa      	b.n	8005ee2 <I2C_Slave_ISR_IT+0x21a>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2240      	movs	r2, #64	; 0x40
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	095b      	lsrs	r3, r3, #5
 8005cf8:	001a      	movs	r2, r3
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	d00b      	beq.n	8005d18 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	095b      	lsrs	r3, r3, #5
 8005d04:	001a      	movs	r2, r3
 8005d06:	2301      	movs	r3, #1
 8005d08:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005d0a:	d005      	beq.n	8005d18 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	0011      	movs	r1, r2
 8005d12:	0018      	movs	r0, r3
 8005d14:	f000 f9f6 	bl	8006104 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	091b      	lsrs	r3, r3, #4
 8005d1c:	001a      	movs	r2, r3
 8005d1e:	2301      	movs	r3, #1
 8005d20:	4013      	ands	r3, r2
 8005d22:	d054      	beq.n	8005dce <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	091b      	lsrs	r3, r3, #4
 8005d28:	001a      	movs	r2, r3
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005d2e:	d04e      	beq.n	8005dce <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d12d      	bne.n	8005d96 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2241      	movs	r2, #65	; 0x41
 8005d3e:	5c9b      	ldrb	r3, [r3, r2]
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b28      	cmp	r3, #40	; 0x28
 8005d44:	d10b      	bne.n	8005d5e <I2C_Slave_ISR_IT+0x96>
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	2380      	movs	r3, #128	; 0x80
 8005d4a:	049b      	lsls	r3, r3, #18
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d106      	bne.n	8005d5e <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	0011      	movs	r1, r2
 8005d56:	0018      	movs	r0, r3
 8005d58:	f000 faf8 	bl	800634c <I2C_ITListenCplt>
 8005d5c:	e036      	b.n	8005dcc <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2241      	movs	r2, #65	; 0x41
 8005d62:	5c9b      	ldrb	r3, [r3, r2]
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b29      	cmp	r3, #41	; 0x29
 8005d68:	d110      	bne.n	8005d8c <I2C_Slave_ISR_IT+0xc4>
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	4a5f      	ldr	r2, [pc, #380]	; (8005eec <I2C_Slave_ISR_IT+0x224>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d00c      	beq.n	8005d8c <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2210      	movs	r2, #16
 8005d78:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	0018      	movs	r0, r3
 8005d7e:	f000 fc4a 	bl	8006616 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	0018      	movs	r0, r3
 8005d86:	f000 f957 	bl	8006038 <I2C_ITSlaveSeqCplt>
 8005d8a:	e01f      	b.n	8005dcc <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2210      	movs	r2, #16
 8005d92:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005d94:	e09d      	b.n	8005ed2 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2210      	movs	r2, #16
 8005d9c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da2:	2204      	movs	r2, #4
 8005da4:	431a      	orrs	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d005      	beq.n	8005dbc <I2C_Slave_ISR_IT+0xf4>
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	2380      	movs	r3, #128	; 0x80
 8005db4:	045b      	lsls	r3, r3, #17
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d000      	beq.n	8005dbc <I2C_Slave_ISR_IT+0xf4>
 8005dba:	e08a      	b.n	8005ed2 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	0011      	movs	r1, r2
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	f000 fb1b 	bl	8006400 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005dca:	e082      	b.n	8005ed2 <I2C_Slave_ISR_IT+0x20a>
 8005dcc:	e081      	b.n	8005ed2 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	089b      	lsrs	r3, r3, #2
 8005dd2:	001a      	movs	r2, r3
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	d031      	beq.n	8005e3e <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	089b      	lsrs	r3, r3, #2
 8005dde:	001a      	movs	r2, r3
 8005de0:	2301      	movs	r3, #1
 8005de2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005de4:	d02b      	beq.n	8005e3e <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d018      	beq.n	8005e22 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfa:	b2d2      	uxtb	r2, r2
 8005dfc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d154      	bne.n	8005ed6 <I2C_Slave_ISR_IT+0x20e>
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	4a2f      	ldr	r2, [pc, #188]	; (8005eec <I2C_Slave_ISR_IT+0x224>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d050      	beq.n	8005ed6 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	0018      	movs	r0, r3
 8005e38:	f000 f8fe 	bl	8006038 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005e3c:	e04b      	b.n	8005ed6 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	08db      	lsrs	r3, r3, #3
 8005e42:	001a      	movs	r2, r3
 8005e44:	2301      	movs	r3, #1
 8005e46:	4013      	ands	r3, r2
 8005e48:	d00c      	beq.n	8005e64 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	08db      	lsrs	r3, r3, #3
 8005e4e:	001a      	movs	r2, r3
 8005e50:	2301      	movs	r3, #1
 8005e52:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005e54:	d006      	beq.n	8005e64 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	0011      	movs	r1, r2
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	f000 f847 	bl	8005ef0 <I2C_ITAddrCplt>
 8005e62:	e039      	b.n	8005ed8 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	085b      	lsrs	r3, r3, #1
 8005e68:	001a      	movs	r2, r3
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	d033      	beq.n	8005ed8 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	085b      	lsrs	r3, r3, #1
 8005e74:	001a      	movs	r2, r3
 8005e76:	2301      	movs	r3, #1
 8005e78:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005e7a:	d02d      	beq.n	8005ed8 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d018      	beq.n	8005eb8 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8a:	781a      	ldrb	r2, [r3, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	1c5a      	adds	r2, r3, #1
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	851a      	strh	r2, [r3, #40]	; 0x28
 8005eb6:	e00f      	b.n	8005ed8 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	2380      	movs	r3, #128	; 0x80
 8005ebc:	045b      	lsls	r3, r3, #17
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d002      	beq.n	8005ec8 <I2C_Slave_ISR_IT+0x200>
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d107      	bne.n	8005ed8 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	0018      	movs	r0, r3
 8005ecc:	f000 f8b4 	bl	8006038 <I2C_ITSlaveSeqCplt>
 8005ed0:	e002      	b.n	8005ed8 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8005ed2:	46c0      	nop			; (mov r8, r8)
 8005ed4:	e000      	b.n	8005ed8 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8005ed6:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2240      	movs	r2, #64	; 0x40
 8005edc:	2100      	movs	r1, #0
 8005ede:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	b006      	add	sp, #24
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	46c0      	nop			; (mov r8, r8)
 8005eec:	ffff0000 	.word	0xffff0000

08005ef0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005ef0:	b5b0      	push	{r4, r5, r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2241      	movs	r2, #65	; 0x41
 8005efe:	5c9b      	ldrb	r3, [r3, r2]
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	001a      	movs	r2, r3
 8005f04:	2328      	movs	r3, #40	; 0x28
 8005f06:	4013      	ands	r3, r2
 8005f08:	2b28      	cmp	r3, #40	; 0x28
 8005f0a:	d000      	beq.n	8005f0e <I2C_ITAddrCplt+0x1e>
 8005f0c:	e088      	b.n	8006020 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	0c1b      	lsrs	r3, r3, #16
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	250f      	movs	r5, #15
 8005f1a:	197b      	adds	r3, r7, r5
 8005f1c:	2101      	movs	r1, #1
 8005f1e:	400a      	ands	r2, r1
 8005f20:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	0c1b      	lsrs	r3, r3, #16
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	200c      	movs	r0, #12
 8005f2e:	183b      	adds	r3, r7, r0
 8005f30:	21fe      	movs	r1, #254	; 0xfe
 8005f32:	400a      	ands	r2, r1
 8005f34:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	240a      	movs	r4, #10
 8005f40:	193b      	adds	r3, r7, r4
 8005f42:	0592      	lsls	r2, r2, #22
 8005f44:	0d92      	lsrs	r2, r2, #22
 8005f46:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	2308      	movs	r3, #8
 8005f52:	18fb      	adds	r3, r7, r3
 8005f54:	21fe      	movs	r1, #254	; 0xfe
 8005f56:	400a      	ands	r2, r1
 8005f58:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d148      	bne.n	8005ff4 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005f62:	0021      	movs	r1, r4
 8005f64:	187b      	adds	r3, r7, r1
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	09db      	lsrs	r3, r3, #7
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	183b      	adds	r3, r7, r0
 8005f6e:	881b      	ldrh	r3, [r3, #0]
 8005f70:	4053      	eors	r3, r2
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	001a      	movs	r2, r3
 8005f76:	2306      	movs	r3, #6
 8005f78:	4013      	ands	r3, r2
 8005f7a:	d120      	bne.n	8005fbe <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8005f7c:	183b      	adds	r3, r7, r0
 8005f7e:	187a      	adds	r2, r7, r1
 8005f80:	8812      	ldrh	r2, [r2, #0]
 8005f82:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d14c      	bne.n	8006030 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2208      	movs	r2, #8
 8005fa2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2240      	movs	r2, #64	; 0x40
 8005fa8:	2100      	movs	r1, #0
 8005faa:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005fac:	183b      	adds	r3, r7, r0
 8005fae:	881a      	ldrh	r2, [r3, #0]
 8005fb0:	197b      	adds	r3, r7, r5
 8005fb2:	7819      	ldrb	r1, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	0018      	movs	r0, r3
 8005fb8:	f7ff fe5e 	bl	8005c78 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005fbc:	e038      	b.n	8006030 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8005fbe:	240c      	movs	r4, #12
 8005fc0:	193b      	adds	r3, r7, r4
 8005fc2:	2208      	movs	r2, #8
 8005fc4:	18ba      	adds	r2, r7, r2
 8005fc6:	8812      	ldrh	r2, [r2, #0]
 8005fc8:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005fca:	2380      	movs	r3, #128	; 0x80
 8005fcc:	021a      	lsls	r2, r3, #8
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	0011      	movs	r1, r2
 8005fd2:	0018      	movs	r0, r3
 8005fd4:	f000 fd54 	bl	8006a80 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2240      	movs	r2, #64	; 0x40
 8005fdc:	2100      	movs	r1, #0
 8005fde:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005fe0:	193b      	adds	r3, r7, r4
 8005fe2:	881a      	ldrh	r2, [r3, #0]
 8005fe4:	230f      	movs	r3, #15
 8005fe6:	18fb      	adds	r3, r7, r3
 8005fe8:	7819      	ldrb	r1, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	0018      	movs	r0, r3
 8005fee:	f7ff fe43 	bl	8005c78 <HAL_I2C_AddrCallback>
}
 8005ff2:	e01d      	b.n	8006030 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005ff4:	2380      	movs	r3, #128	; 0x80
 8005ff6:	021a      	lsls	r2, r3, #8
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	0011      	movs	r1, r2
 8005ffc:	0018      	movs	r0, r3
 8005ffe:	f000 fd3f 	bl	8006a80 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2240      	movs	r2, #64	; 0x40
 8006006:	2100      	movs	r1, #0
 8006008:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800600a:	230c      	movs	r3, #12
 800600c:	18fb      	adds	r3, r7, r3
 800600e:	881a      	ldrh	r2, [r3, #0]
 8006010:	230f      	movs	r3, #15
 8006012:	18fb      	adds	r3, r7, r3
 8006014:	7819      	ldrb	r1, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	0018      	movs	r0, r3
 800601a:	f7ff fe2d 	bl	8005c78 <HAL_I2C_AddrCallback>
}
 800601e:	e007      	b.n	8006030 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2208      	movs	r2, #8
 8006026:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2240      	movs	r2, #64	; 0x40
 800602c:	2100      	movs	r1, #0
 800602e:	5499      	strb	r1, [r3, r2]
}
 8006030:	46c0      	nop			; (mov r8, r8)
 8006032:	46bd      	mov	sp, r7
 8006034:	b004      	add	sp, #16
 8006036:	bdb0      	pop	{r4, r5, r7, pc}

08006038 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2242      	movs	r2, #66	; 0x42
 800604c:	2100      	movs	r1, #0
 800604e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	0b9b      	lsrs	r3, r3, #14
 8006054:	001a      	movs	r2, r3
 8006056:	2301      	movs	r3, #1
 8006058:	4013      	ands	r3, r2
 800605a:	d008      	beq.n	800606e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4925      	ldr	r1, [pc, #148]	; (80060fc <I2C_ITSlaveSeqCplt+0xc4>)
 8006068:	400a      	ands	r2, r1
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	e00d      	b.n	800608a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	0bdb      	lsrs	r3, r3, #15
 8006072:	001a      	movs	r2, r3
 8006074:	2301      	movs	r3, #1
 8006076:	4013      	ands	r3, r2
 8006078:	d007      	beq.n	800608a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	491e      	ldr	r1, [pc, #120]	; (8006100 <I2C_ITSlaveSeqCplt+0xc8>)
 8006086:	400a      	ands	r2, r1
 8006088:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2241      	movs	r2, #65	; 0x41
 800608e:	5c9b      	ldrb	r3, [r3, r2]
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b29      	cmp	r3, #41	; 0x29
 8006094:	d114      	bne.n	80060c0 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2241      	movs	r2, #65	; 0x41
 800609a:	2128      	movs	r1, #40	; 0x28
 800609c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2221      	movs	r2, #33	; 0x21
 80060a2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2101      	movs	r1, #1
 80060a8:	0018      	movs	r0, r3
 80060aa:	f000 fce9 	bl	8006a80 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2240      	movs	r2, #64	; 0x40
 80060b2:	2100      	movs	r1, #0
 80060b4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	0018      	movs	r0, r3
 80060ba:	f7ff fdcd 	bl	8005c58 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80060be:	e019      	b.n	80060f4 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2241      	movs	r2, #65	; 0x41
 80060c4:	5c9b      	ldrb	r3, [r3, r2]
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b2a      	cmp	r3, #42	; 0x2a
 80060ca:	d113      	bne.n	80060f4 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2241      	movs	r2, #65	; 0x41
 80060d0:	2128      	movs	r1, #40	; 0x28
 80060d2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2222      	movs	r2, #34	; 0x22
 80060d8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2102      	movs	r1, #2
 80060de:	0018      	movs	r0, r3
 80060e0:	f000 fcce 	bl	8006a80 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2240      	movs	r2, #64	; 0x40
 80060e8:	2100      	movs	r1, #0
 80060ea:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	0018      	movs	r0, r3
 80060f0:	f7ff fdba 	bl	8005c68 <HAL_I2C_SlaveRxCpltCallback>
}
 80060f4:	46c0      	nop			; (mov r8, r8)
 80060f6:	46bd      	mov	sp, r7
 80060f8:	b004      	add	sp, #16
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	ffffbfff 	.word	0xffffbfff
 8006100:	ffff7fff 	.word	0xffff7fff

08006104 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800611a:	200f      	movs	r0, #15
 800611c:	183b      	adds	r3, r7, r0
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	2141      	movs	r1, #65	; 0x41
 8006122:	5c52      	ldrb	r2, [r2, r1]
 8006124:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2220      	movs	r2, #32
 800612c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800612e:	183b      	adds	r3, r7, r0
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	2b21      	cmp	r3, #33	; 0x21
 8006134:	d003      	beq.n	800613e <I2C_ITSlaveCplt+0x3a>
 8006136:	183b      	adds	r3, r7, r0
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	2b29      	cmp	r3, #41	; 0x29
 800613c:	d109      	bne.n	8006152 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800613e:	4a7d      	ldr	r2, [pc, #500]	; (8006334 <I2C_ITSlaveCplt+0x230>)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	0011      	movs	r1, r2
 8006144:	0018      	movs	r0, r3
 8006146:	f000 fc9b 	bl	8006a80 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2221      	movs	r2, #33	; 0x21
 800614e:	631a      	str	r2, [r3, #48]	; 0x30
 8006150:	e011      	b.n	8006176 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006152:	220f      	movs	r2, #15
 8006154:	18bb      	adds	r3, r7, r2
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	2b22      	cmp	r3, #34	; 0x22
 800615a:	d003      	beq.n	8006164 <I2C_ITSlaveCplt+0x60>
 800615c:	18bb      	adds	r3, r7, r2
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	2b2a      	cmp	r3, #42	; 0x2a
 8006162:	d108      	bne.n	8006176 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006164:	4a74      	ldr	r2, [pc, #464]	; (8006338 <I2C_ITSlaveCplt+0x234>)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	0011      	movs	r1, r2
 800616a:	0018      	movs	r0, r3
 800616c:	f000 fc88 	bl	8006a80 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2222      	movs	r2, #34	; 0x22
 8006174:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2180      	movs	r1, #128	; 0x80
 8006182:	0209      	lsls	r1, r1, #8
 8006184:	430a      	orrs	r2, r1
 8006186:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	496a      	ldr	r1, [pc, #424]	; (800633c <I2C_ITSlaveCplt+0x238>)
 8006194:	400a      	ands	r2, r1
 8006196:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	0018      	movs	r0, r3
 800619c:	f000 fa3b 	bl	8006616 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	0b9b      	lsrs	r3, r3, #14
 80061a4:	001a      	movs	r2, r3
 80061a6:	2301      	movs	r3, #1
 80061a8:	4013      	ands	r3, r2
 80061aa:	d013      	beq.n	80061d4 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4962      	ldr	r1, [pc, #392]	; (8006340 <I2C_ITSlaveCplt+0x23c>)
 80061b8:	400a      	ands	r2, r1
 80061ba:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d020      	beq.n	8006206 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061d2:	e018      	b.n	8006206 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	0bdb      	lsrs	r3, r3, #15
 80061d8:	001a      	movs	r2, r3
 80061da:	2301      	movs	r3, #1
 80061dc:	4013      	ands	r3, r2
 80061de:	d012      	beq.n	8006206 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4956      	ldr	r1, [pc, #344]	; (8006344 <I2C_ITSlaveCplt+0x240>)
 80061ec:	400a      	ands	r2, r1
 80061ee:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d006      	beq.n	8006206 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	b29a      	uxth	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	089b      	lsrs	r3, r3, #2
 800620a:	001a      	movs	r2, r3
 800620c:	2301      	movs	r3, #1
 800620e:	4013      	ands	r3, r2
 8006210:	d020      	beq.n	8006254 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	2204      	movs	r2, #4
 8006216:	4393      	bics	r3, r2
 8006218:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006224:	b2d2      	uxtb	r2, r2
 8006226:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622c:	1c5a      	adds	r2, r3, #1
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00c      	beq.n	8006254 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800623e:	3b01      	subs	r3, #1
 8006240:	b29a      	uxth	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800624a:	b29b      	uxth	r3, r3
 800624c:	3b01      	subs	r3, #1
 800624e:	b29a      	uxth	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006258:	b29b      	uxth	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d005      	beq.n	800626a <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006262:	2204      	movs	r2, #4
 8006264:	431a      	orrs	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2242      	movs	r2, #66	; 0x42
 800626e:	2100      	movs	r1, #0
 8006270:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800627c:	2b00      	cmp	r3, #0
 800627e:	d013      	beq.n	80062a8 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	0011      	movs	r1, r2
 8006288:	0018      	movs	r0, r3
 800628a:	f000 f8b9 	bl	8006400 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2241      	movs	r2, #65	; 0x41
 8006292:	5c9b      	ldrb	r3, [r3, r2]
 8006294:	b2db      	uxtb	r3, r3
 8006296:	2b28      	cmp	r3, #40	; 0x28
 8006298:	d147      	bne.n	800632a <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	0011      	movs	r1, r2
 80062a0:	0018      	movs	r0, r3
 80062a2:	f000 f853 	bl	800634c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80062a6:	e040      	b.n	800632a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ac:	4a26      	ldr	r2, [pc, #152]	; (8006348 <I2C_ITSlaveCplt+0x244>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d016      	beq.n	80062e0 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	0018      	movs	r0, r3
 80062b6:	f7ff febf 	bl	8006038 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a22      	ldr	r2, [pc, #136]	; (8006348 <I2C_ITSlaveCplt+0x244>)
 80062be:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2241      	movs	r2, #65	; 0x41
 80062c4:	2120      	movs	r1, #32
 80062c6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2240      	movs	r2, #64	; 0x40
 80062d2:	2100      	movs	r1, #0
 80062d4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	0018      	movs	r0, r3
 80062da:	f7ff fcdd 	bl	8005c98 <HAL_I2C_ListenCpltCallback>
}
 80062de:	e024      	b.n	800632a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2241      	movs	r2, #65	; 0x41
 80062e4:	5c9b      	ldrb	r3, [r3, r2]
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b22      	cmp	r3, #34	; 0x22
 80062ea:	d10f      	bne.n	800630c <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2241      	movs	r2, #65	; 0x41
 80062f0:	2120      	movs	r1, #32
 80062f2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2240      	movs	r2, #64	; 0x40
 80062fe:	2100      	movs	r1, #0
 8006300:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	0018      	movs	r0, r3
 8006306:	f7ff fcaf 	bl	8005c68 <HAL_I2C_SlaveRxCpltCallback>
}
 800630a:	e00e      	b.n	800632a <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2241      	movs	r2, #65	; 0x41
 8006310:	2120      	movs	r1, #32
 8006312:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2240      	movs	r2, #64	; 0x40
 800631e:	2100      	movs	r1, #0
 8006320:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	0018      	movs	r0, r3
 8006326:	f7ff fc97 	bl	8005c58 <HAL_I2C_SlaveTxCpltCallback>
}
 800632a:	46c0      	nop			; (mov r8, r8)
 800632c:	46bd      	mov	sp, r7
 800632e:	b006      	add	sp, #24
 8006330:	bd80      	pop	{r7, pc}
 8006332:	46c0      	nop			; (mov r8, r8)
 8006334:	00008001 	.word	0x00008001
 8006338:	00008002 	.word	0x00008002
 800633c:	fe00e800 	.word	0xfe00e800
 8006340:	ffffbfff 	.word	0xffffbfff
 8006344:	ffff7fff 	.word	0xffff7fff
 8006348:	ffff0000 	.word	0xffff0000

0800634c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a27      	ldr	r2, [pc, #156]	; (80063f8 <I2C_ITListenCplt+0xac>)
 800635a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2241      	movs	r2, #65	; 0x41
 8006366:	2120      	movs	r1, #32
 8006368:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2242      	movs	r2, #66	; 0x42
 800636e:	2100      	movs	r1, #0
 8006370:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	089b      	lsrs	r3, r3, #2
 800637c:	001a      	movs	r2, r3
 800637e:	2301      	movs	r3, #1
 8006380:	4013      	ands	r3, r2
 8006382:	d022      	beq.n	80063ca <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638e:	b2d2      	uxtb	r2, r2
 8006390:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006396:	1c5a      	adds	r2, r3, #1
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d012      	beq.n	80063ca <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a8:	3b01      	subs	r3, #1
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	3b01      	subs	r3, #1
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c2:	2204      	movs	r2, #4
 80063c4:	431a      	orrs	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80063ca:	4a0c      	ldr	r2, [pc, #48]	; (80063fc <I2C_ITListenCplt+0xb0>)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	0011      	movs	r1, r2
 80063d0:	0018      	movs	r0, r3
 80063d2:	f000 fb55 	bl	8006a80 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2210      	movs	r2, #16
 80063dc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2240      	movs	r2, #64	; 0x40
 80063e2:	2100      	movs	r1, #0
 80063e4:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	0018      	movs	r0, r3
 80063ea:	f7ff fc55 	bl	8005c98 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80063ee:	46c0      	nop			; (mov r8, r8)
 80063f0:	46bd      	mov	sp, r7
 80063f2:	b002      	add	sp, #8
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	46c0      	nop			; (mov r8, r8)
 80063f8:	ffff0000 	.word	0xffff0000
 80063fc:	00008003 	.word	0x00008003

08006400 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800640a:	200f      	movs	r0, #15
 800640c:	183b      	adds	r3, r7, r0
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	2141      	movs	r1, #65	; 0x41
 8006412:	5c52      	ldrb	r2, [r2, r1]
 8006414:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2242      	movs	r2, #66	; 0x42
 800641a:	2100      	movs	r1, #0
 800641c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a62      	ldr	r2, [pc, #392]	; (80065ac <I2C_ITError+0x1ac>)
 8006422:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	431a      	orrs	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006436:	183b      	adds	r3, r7, r0
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	2b28      	cmp	r3, #40	; 0x28
 800643c:	d007      	beq.n	800644e <I2C_ITError+0x4e>
 800643e:	183b      	adds	r3, r7, r0
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	2b29      	cmp	r3, #41	; 0x29
 8006444:	d003      	beq.n	800644e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006446:	183b      	adds	r3, r7, r0
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	2b2a      	cmp	r3, #42	; 0x2a
 800644c:	d10c      	bne.n	8006468 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2103      	movs	r1, #3
 8006452:	0018      	movs	r0, r3
 8006454:	f000 fb14 	bl	8006a80 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2241      	movs	r2, #65	; 0x41
 800645c:	2128      	movs	r1, #40	; 0x28
 800645e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a53      	ldr	r2, [pc, #332]	; (80065b0 <I2C_ITError+0x1b0>)
 8006464:	635a      	str	r2, [r3, #52]	; 0x34
 8006466:	e012      	b.n	800648e <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006468:	4a52      	ldr	r2, [pc, #328]	; (80065b4 <I2C_ITError+0x1b4>)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	0011      	movs	r1, r2
 800646e:	0018      	movs	r0, r3
 8006470:	f000 fb06 	bl	8006a80 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2241      	movs	r2, #65	; 0x41
 8006478:	5c9b      	ldrb	r3, [r3, r2]
 800647a:	b2db      	uxtb	r3, r3
 800647c:	2b60      	cmp	r3, #96	; 0x60
 800647e:	d003      	beq.n	8006488 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2241      	movs	r2, #65	; 0x41
 8006484:	2120      	movs	r1, #32
 8006486:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006492:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006498:	2b00      	cmp	r3, #0
 800649a:	d03b      	beq.n	8006514 <I2C_ITError+0x114>
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b11      	cmp	r3, #17
 80064a0:	d002      	beq.n	80064a8 <I2C_ITError+0xa8>
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2b21      	cmp	r3, #33	; 0x21
 80064a6:	d135      	bne.n	8006514 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	2380      	movs	r3, #128	; 0x80
 80064b0:	01db      	lsls	r3, r3, #7
 80064b2:	401a      	ands	r2, r3
 80064b4:	2380      	movs	r3, #128	; 0x80
 80064b6:	01db      	lsls	r3, r3, #7
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d107      	bne.n	80064cc <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	493c      	ldr	r1, [pc, #240]	; (80065b8 <I2C_ITError+0x1b8>)
 80064c8:	400a      	ands	r2, r1
 80064ca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d0:	0018      	movs	r0, r3
 80064d2:	f7fe ffa7 	bl	8005424 <HAL_DMA_GetState>
 80064d6:	0003      	movs	r3, r0
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d016      	beq.n	800650a <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e0:	4a36      	ldr	r2, [pc, #216]	; (80065bc <I2C_ITError+0x1bc>)
 80064e2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2240      	movs	r2, #64	; 0x40
 80064e8:	2100      	movs	r1, #0
 80064ea:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f0:	0018      	movs	r0, r3
 80064f2:	f7fe fe7b 	bl	80051ec <HAL_DMA_Abort_IT>
 80064f6:	1e03      	subs	r3, r0, #0
 80064f8:	d051      	beq.n	800659e <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006504:	0018      	movs	r0, r3
 8006506:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006508:	e049      	b.n	800659e <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	0018      	movs	r0, r3
 800650e:	f000 f859 	bl	80065c4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006512:	e044      	b.n	800659e <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006518:	2b00      	cmp	r3, #0
 800651a:	d03b      	beq.n	8006594 <I2C_ITError+0x194>
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2b12      	cmp	r3, #18
 8006520:	d002      	beq.n	8006528 <I2C_ITError+0x128>
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2b22      	cmp	r3, #34	; 0x22
 8006526:	d135      	bne.n	8006594 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	2380      	movs	r3, #128	; 0x80
 8006530:	021b      	lsls	r3, r3, #8
 8006532:	401a      	ands	r2, r3
 8006534:	2380      	movs	r3, #128	; 0x80
 8006536:	021b      	lsls	r3, r3, #8
 8006538:	429a      	cmp	r2, r3
 800653a:	d107      	bne.n	800654c <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	491e      	ldr	r1, [pc, #120]	; (80065c0 <I2C_ITError+0x1c0>)
 8006548:	400a      	ands	r2, r1
 800654a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006550:	0018      	movs	r0, r3
 8006552:	f7fe ff67 	bl	8005424 <HAL_DMA_GetState>
 8006556:	0003      	movs	r3, r0
 8006558:	2b01      	cmp	r3, #1
 800655a:	d016      	beq.n	800658a <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006560:	4a16      	ldr	r2, [pc, #88]	; (80065bc <I2C_ITError+0x1bc>)
 8006562:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2240      	movs	r2, #64	; 0x40
 8006568:	2100      	movs	r1, #0
 800656a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006570:	0018      	movs	r0, r3
 8006572:	f7fe fe3b 	bl	80051ec <HAL_DMA_Abort_IT>
 8006576:	1e03      	subs	r3, r0, #0
 8006578:	d013      	beq.n	80065a2 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006584:	0018      	movs	r0, r3
 8006586:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006588:	e00b      	b.n	80065a2 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	0018      	movs	r0, r3
 800658e:	f000 f819 	bl	80065c4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006592:	e006      	b.n	80065a2 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	0018      	movs	r0, r3
 8006598:	f000 f814 	bl	80065c4 <I2C_TreatErrorCallback>
  }
}
 800659c:	e002      	b.n	80065a4 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800659e:	46c0      	nop			; (mov r8, r8)
 80065a0:	e000      	b.n	80065a4 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80065a2:	46c0      	nop			; (mov r8, r8)
}
 80065a4:	46c0      	nop			; (mov r8, r8)
 80065a6:	46bd      	mov	sp, r7
 80065a8:	b004      	add	sp, #16
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	ffff0000 	.word	0xffff0000
 80065b0:	08005cc9 	.word	0x08005cc9
 80065b4:	00008003 	.word	0x00008003
 80065b8:	ffffbfff 	.word	0xffffbfff
 80065bc:	0800665b 	.word	0x0800665b
 80065c0:	ffff7fff 	.word	0xffff7fff

080065c4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2241      	movs	r2, #65	; 0x41
 80065d0:	5c9b      	ldrb	r3, [r3, r2]
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b60      	cmp	r3, #96	; 0x60
 80065d6:	d10f      	bne.n	80065f8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2241      	movs	r2, #65	; 0x41
 80065dc:	2120      	movs	r1, #32
 80065de:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2240      	movs	r2, #64	; 0x40
 80065ea:	2100      	movs	r1, #0
 80065ec:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	0018      	movs	r0, r3
 80065f2:	f7ff fb61 	bl	8005cb8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80065f6:	e00a      	b.n	800660e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2240      	movs	r2, #64	; 0x40
 8006602:	2100      	movs	r1, #0
 8006604:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	0018      	movs	r0, r3
 800660a:	f7ff fb4d 	bl	8005ca8 <HAL_I2C_ErrorCallback>
}
 800660e:	46c0      	nop			; (mov r8, r8)
 8006610:	46bd      	mov	sp, r7
 8006612:	b002      	add	sp, #8
 8006614:	bd80      	pop	{r7, pc}

08006616 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b082      	sub	sp, #8
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	2202      	movs	r2, #2
 8006626:	4013      	ands	r3, r2
 8006628:	2b02      	cmp	r3, #2
 800662a:	d103      	bne.n	8006634 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2200      	movs	r2, #0
 8006632:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	2201      	movs	r2, #1
 800663c:	4013      	ands	r3, r2
 800663e:	2b01      	cmp	r3, #1
 8006640:	d007      	beq.n	8006652 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	699a      	ldr	r2, [r3, #24]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2101      	movs	r1, #1
 800664e:	430a      	orrs	r2, r1
 8006650:	619a      	str	r2, [r3, #24]
  }
}
 8006652:	46c0      	nop			; (mov r8, r8)
 8006654:	46bd      	mov	sp, r7
 8006656:	b002      	add	sp, #8
 8006658:	bd80      	pop	{r7, pc}

0800665a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b084      	sub	sp, #16
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006666:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666c:	2b00      	cmp	r3, #0
 800666e:	d003      	beq.n	8006678 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006674:	2200      	movs	r2, #0
 8006676:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800667c:	2b00      	cmp	r3, #0
 800667e:	d003      	beq.n	8006688 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006684:	2200      	movs	r2, #0
 8006686:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	0018      	movs	r0, r3
 800668c:	f7ff ff9a 	bl	80065c4 <I2C_TreatErrorCallback>
}
 8006690:	46c0      	nop			; (mov r8, r8)
 8006692:	46bd      	mov	sp, r7
 8006694:	b004      	add	sp, #16
 8006696:	bd80      	pop	{r7, pc}

08006698 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	603b      	str	r3, [r7, #0]
 80066a4:	1dfb      	adds	r3, r7, #7
 80066a6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066a8:	e021      	b.n	80066ee <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	3301      	adds	r3, #1
 80066ae:	d01e      	beq.n	80066ee <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066b0:	f7fe f8a8 	bl	8004804 <HAL_GetTick>
 80066b4:	0002      	movs	r2, r0
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	683a      	ldr	r2, [r7, #0]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d302      	bcc.n	80066c6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d113      	bne.n	80066ee <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ca:	2220      	movs	r2, #32
 80066cc:	431a      	orrs	r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2241      	movs	r2, #65	; 0x41
 80066d6:	2120      	movs	r1, #32
 80066d8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2242      	movs	r2, #66	; 0x42
 80066de:	2100      	movs	r1, #0
 80066e0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2240      	movs	r2, #64	; 0x40
 80066e6:	2100      	movs	r1, #0
 80066e8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e00f      	b.n	800670e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	4013      	ands	r3, r2
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	425a      	negs	r2, r3
 80066fe:	4153      	adcs	r3, r2
 8006700:	b2db      	uxtb	r3, r3
 8006702:	001a      	movs	r2, r3
 8006704:	1dfb      	adds	r3, r7, #7
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	429a      	cmp	r2, r3
 800670a:	d0ce      	beq.n	80066aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	0018      	movs	r0, r3
 8006710:	46bd      	mov	sp, r7
 8006712:	b004      	add	sp, #16
 8006714:	bd80      	pop	{r7, pc}

08006716 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b084      	sub	sp, #16
 800671a:	af00      	add	r7, sp, #0
 800671c:	60f8      	str	r0, [r7, #12]
 800671e:	60b9      	str	r1, [r7, #8]
 8006720:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006722:	e02b      	b.n	800677c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	68b9      	ldr	r1, [r7, #8]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	0018      	movs	r0, r3
 800672c:	f000 f86e 	bl	800680c <I2C_IsErrorOccurred>
 8006730:	1e03      	subs	r3, r0, #0
 8006732:	d001      	beq.n	8006738 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e029      	b.n	800678c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	3301      	adds	r3, #1
 800673c:	d01e      	beq.n	800677c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800673e:	f7fe f861 	bl	8004804 <HAL_GetTick>
 8006742:	0002      	movs	r2, r0
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	429a      	cmp	r2, r3
 800674c:	d302      	bcc.n	8006754 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d113      	bne.n	800677c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006758:	2220      	movs	r2, #32
 800675a:	431a      	orrs	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2241      	movs	r2, #65	; 0x41
 8006764:	2120      	movs	r1, #32
 8006766:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2242      	movs	r2, #66	; 0x42
 800676c:	2100      	movs	r1, #0
 800676e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2240      	movs	r2, #64	; 0x40
 8006774:	2100      	movs	r1, #0
 8006776:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e007      	b.n	800678c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	2202      	movs	r2, #2
 8006784:	4013      	ands	r3, r2
 8006786:	2b02      	cmp	r3, #2
 8006788:	d1cc      	bne.n	8006724 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	0018      	movs	r0, r3
 800678e:	46bd      	mov	sp, r7
 8006790:	b004      	add	sp, #16
 8006792:	bd80      	pop	{r7, pc}

08006794 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067a0:	e028      	b.n	80067f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	68b9      	ldr	r1, [r7, #8]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	0018      	movs	r0, r3
 80067aa:	f000 f82f 	bl	800680c <I2C_IsErrorOccurred>
 80067ae:	1e03      	subs	r3, r0, #0
 80067b0:	d001      	beq.n	80067b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e026      	b.n	8006804 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067b6:	f7fe f825 	bl	8004804 <HAL_GetTick>
 80067ba:	0002      	movs	r2, r0
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d302      	bcc.n	80067cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d113      	bne.n	80067f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d0:	2220      	movs	r2, #32
 80067d2:	431a      	orrs	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2241      	movs	r2, #65	; 0x41
 80067dc:	2120      	movs	r1, #32
 80067de:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2242      	movs	r2, #66	; 0x42
 80067e4:	2100      	movs	r1, #0
 80067e6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2240      	movs	r2, #64	; 0x40
 80067ec:	2100      	movs	r1, #0
 80067ee:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e007      	b.n	8006804 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	2220      	movs	r2, #32
 80067fc:	4013      	ands	r3, r2
 80067fe:	2b20      	cmp	r3, #32
 8006800:	d1cf      	bne.n	80067a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	0018      	movs	r0, r3
 8006806:	46bd      	mov	sp, r7
 8006808:	b004      	add	sp, #16
 800680a:	bd80      	pop	{r7, pc}

0800680c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800680c:	b590      	push	{r4, r7, lr}
 800680e:	b08b      	sub	sp, #44	; 0x2c
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006818:	2327      	movs	r3, #39	; 0x27
 800681a:	18fb      	adds	r3, r7, r3
 800681c:	2200      	movs	r2, #0
 800681e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006828:	2300      	movs	r3, #0
 800682a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	2210      	movs	r2, #16
 8006834:	4013      	ands	r3, r2
 8006836:	d100      	bne.n	800683a <I2C_IsErrorOccurred+0x2e>
 8006838:	e082      	b.n	8006940 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2210      	movs	r2, #16
 8006840:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006842:	e060      	b.n	8006906 <I2C_IsErrorOccurred+0xfa>
 8006844:	2427      	movs	r4, #39	; 0x27
 8006846:	193b      	adds	r3, r7, r4
 8006848:	193a      	adds	r2, r7, r4
 800684a:	7812      	ldrb	r2, [r2, #0]
 800684c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	3301      	adds	r3, #1
 8006852:	d058      	beq.n	8006906 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006854:	f7fd ffd6 	bl	8004804 <HAL_GetTick>
 8006858:	0002      	movs	r2, r0
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	429a      	cmp	r2, r3
 8006862:	d306      	bcc.n	8006872 <I2C_IsErrorOccurred+0x66>
 8006864:	193b      	adds	r3, r7, r4
 8006866:	193a      	adds	r2, r7, r4
 8006868:	7812      	ldrb	r2, [r2, #0]
 800686a:	701a      	strb	r2, [r3, #0]
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d149      	bne.n	8006906 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	2380      	movs	r3, #128	; 0x80
 800687a:	01db      	lsls	r3, r3, #7
 800687c:	4013      	ands	r3, r2
 800687e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006880:	2013      	movs	r0, #19
 8006882:	183b      	adds	r3, r7, r0
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	2142      	movs	r1, #66	; 0x42
 8006888:	5c52      	ldrb	r2, [r2, r1]
 800688a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	699a      	ldr	r2, [r3, #24]
 8006892:	2380      	movs	r3, #128	; 0x80
 8006894:	021b      	lsls	r3, r3, #8
 8006896:	401a      	ands	r2, r3
 8006898:	2380      	movs	r3, #128	; 0x80
 800689a:	021b      	lsls	r3, r3, #8
 800689c:	429a      	cmp	r2, r3
 800689e:	d126      	bne.n	80068ee <I2C_IsErrorOccurred+0xe2>
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	2380      	movs	r3, #128	; 0x80
 80068a4:	01db      	lsls	r3, r3, #7
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d021      	beq.n	80068ee <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80068aa:	183b      	adds	r3, r7, r0
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	2b20      	cmp	r3, #32
 80068b0:	d01d      	beq.n	80068ee <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2180      	movs	r1, #128	; 0x80
 80068be:	01c9      	lsls	r1, r1, #7
 80068c0:	430a      	orrs	r2, r1
 80068c2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80068c4:	f7fd ff9e 	bl	8004804 <HAL_GetTick>
 80068c8:	0003      	movs	r3, r0
 80068ca:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068cc:	e00f      	b.n	80068ee <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80068ce:	f7fd ff99 	bl	8004804 <HAL_GetTick>
 80068d2:	0002      	movs	r2, r0
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	2b19      	cmp	r3, #25
 80068da:	d908      	bls.n	80068ee <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	2220      	movs	r2, #32
 80068e0:	4313      	orrs	r3, r2
 80068e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80068e4:	2327      	movs	r3, #39	; 0x27
 80068e6:	18fb      	adds	r3, r7, r3
 80068e8:	2201      	movs	r2, #1
 80068ea:	701a      	strb	r2, [r3, #0]

              break;
 80068ec:	e00b      	b.n	8006906 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	2220      	movs	r2, #32
 80068f6:	4013      	ands	r3, r2
 80068f8:	2127      	movs	r1, #39	; 0x27
 80068fa:	187a      	adds	r2, r7, r1
 80068fc:	1879      	adds	r1, r7, r1
 80068fe:	7809      	ldrb	r1, [r1, #0]
 8006900:	7011      	strb	r1, [r2, #0]
 8006902:	2b20      	cmp	r3, #32
 8006904:	d1e3      	bne.n	80068ce <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	2220      	movs	r2, #32
 800690e:	4013      	ands	r3, r2
 8006910:	2b20      	cmp	r3, #32
 8006912:	d004      	beq.n	800691e <I2C_IsErrorOccurred+0x112>
 8006914:	2327      	movs	r3, #39	; 0x27
 8006916:	18fb      	adds	r3, r7, r3
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d092      	beq.n	8006844 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800691e:	2327      	movs	r3, #39	; 0x27
 8006920:	18fb      	adds	r3, r7, r3
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d103      	bne.n	8006930 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2220      	movs	r2, #32
 800692e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006930:	6a3b      	ldr	r3, [r7, #32]
 8006932:	2204      	movs	r2, #4
 8006934:	4313      	orrs	r3, r2
 8006936:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006938:	2327      	movs	r3, #39	; 0x27
 800693a:	18fb      	adds	r3, r7, r3
 800693c:	2201      	movs	r2, #1
 800693e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006948:	69ba      	ldr	r2, [r7, #24]
 800694a:	2380      	movs	r3, #128	; 0x80
 800694c:	005b      	lsls	r3, r3, #1
 800694e:	4013      	ands	r3, r2
 8006950:	d00c      	beq.n	800696c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	2201      	movs	r2, #1
 8006956:	4313      	orrs	r3, r2
 8006958:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2280      	movs	r2, #128	; 0x80
 8006960:	0052      	lsls	r2, r2, #1
 8006962:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006964:	2327      	movs	r3, #39	; 0x27
 8006966:	18fb      	adds	r3, r7, r3
 8006968:	2201      	movs	r2, #1
 800696a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800696c:	69ba      	ldr	r2, [r7, #24]
 800696e:	2380      	movs	r3, #128	; 0x80
 8006970:	00db      	lsls	r3, r3, #3
 8006972:	4013      	ands	r3, r2
 8006974:	d00c      	beq.n	8006990 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	2208      	movs	r2, #8
 800697a:	4313      	orrs	r3, r2
 800697c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2280      	movs	r2, #128	; 0x80
 8006984:	00d2      	lsls	r2, r2, #3
 8006986:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006988:	2327      	movs	r3, #39	; 0x27
 800698a:	18fb      	adds	r3, r7, r3
 800698c:	2201      	movs	r2, #1
 800698e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006990:	69ba      	ldr	r2, [r7, #24]
 8006992:	2380      	movs	r3, #128	; 0x80
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4013      	ands	r3, r2
 8006998:	d00c      	beq.n	80069b4 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	2202      	movs	r2, #2
 800699e:	4313      	orrs	r3, r2
 80069a0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2280      	movs	r2, #128	; 0x80
 80069a8:	0092      	lsls	r2, r2, #2
 80069aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80069ac:	2327      	movs	r3, #39	; 0x27
 80069ae:	18fb      	adds	r3, r7, r3
 80069b0:	2201      	movs	r2, #1
 80069b2:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80069b4:	2327      	movs	r3, #39	; 0x27
 80069b6:	18fb      	adds	r3, r7, r3
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d01d      	beq.n	80069fa <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	0018      	movs	r0, r3
 80069c2:	f7ff fe28 	bl	8006616 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	490d      	ldr	r1, [pc, #52]	; (8006a08 <I2C_IsErrorOccurred+0x1fc>)
 80069d2:	400a      	ands	r2, r1
 80069d4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069da:	6a3b      	ldr	r3, [r7, #32]
 80069dc:	431a      	orrs	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2241      	movs	r2, #65	; 0x41
 80069e6:	2120      	movs	r1, #32
 80069e8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2242      	movs	r2, #66	; 0x42
 80069ee:	2100      	movs	r1, #0
 80069f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2240      	movs	r2, #64	; 0x40
 80069f6:	2100      	movs	r1, #0
 80069f8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80069fa:	2327      	movs	r3, #39	; 0x27
 80069fc:	18fb      	adds	r3, r7, r3
 80069fe:	781b      	ldrb	r3, [r3, #0]
}
 8006a00:	0018      	movs	r0, r3
 8006a02:	46bd      	mov	sp, r7
 8006a04:	b00b      	add	sp, #44	; 0x2c
 8006a06:	bd90      	pop	{r4, r7, pc}
 8006a08:	fe00e800 	.word	0xfe00e800

08006a0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006a0c:	b590      	push	{r4, r7, lr}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	0008      	movs	r0, r1
 8006a16:	0011      	movs	r1, r2
 8006a18:	607b      	str	r3, [r7, #4]
 8006a1a:	240a      	movs	r4, #10
 8006a1c:	193b      	adds	r3, r7, r4
 8006a1e:	1c02      	adds	r2, r0, #0
 8006a20:	801a      	strh	r2, [r3, #0]
 8006a22:	2009      	movs	r0, #9
 8006a24:	183b      	adds	r3, r7, r0
 8006a26:	1c0a      	adds	r2, r1, #0
 8006a28:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a2a:	193b      	adds	r3, r7, r4
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	059b      	lsls	r3, r3, #22
 8006a30:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a32:	183b      	adds	r3, r7, r0
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	0419      	lsls	r1, r3, #16
 8006a38:	23ff      	movs	r3, #255	; 0xff
 8006a3a:	041b      	lsls	r3, r3, #16
 8006a3c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a3e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a46:	4313      	orrs	r3, r2
 8006a48:	005b      	lsls	r3, r3, #1
 8006a4a:	085b      	lsrs	r3, r3, #1
 8006a4c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a56:	0d51      	lsrs	r1, r2, #21
 8006a58:	2280      	movs	r2, #128	; 0x80
 8006a5a:	00d2      	lsls	r2, r2, #3
 8006a5c:	400a      	ands	r2, r1
 8006a5e:	4907      	ldr	r1, [pc, #28]	; (8006a7c <I2C_TransferConfig+0x70>)
 8006a60:	430a      	orrs	r2, r1
 8006a62:	43d2      	mvns	r2, r2
 8006a64:	401a      	ands	r2, r3
 8006a66:	0011      	movs	r1, r2
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006a72:	46c0      	nop			; (mov r8, r8)
 8006a74:	46bd      	mov	sp, r7
 8006a76:	b007      	add	sp, #28
 8006a78:	bd90      	pop	{r4, r7, pc}
 8006a7a:	46c0      	nop			; (mov r8, r8)
 8006a7c:	03ff63ff 	.word	0x03ff63ff

08006a80 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	000a      	movs	r2, r1
 8006a8a:	1cbb      	adds	r3, r7, #2
 8006a8c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006a92:	1cbb      	adds	r3, r7, #2
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	2201      	movs	r2, #1
 8006a98:	4013      	ands	r3, r2
 8006a9a:	d010      	beq.n	8006abe <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2242      	movs	r2, #66	; 0x42
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2241      	movs	r2, #65	; 0x41
 8006aa8:	5c9b      	ldrb	r3, [r3, r2]
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	001a      	movs	r2, r3
 8006aae:	2328      	movs	r3, #40	; 0x28
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	2b28      	cmp	r3, #40	; 0x28
 8006ab4:	d003      	beq.n	8006abe <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	22b0      	movs	r2, #176	; 0xb0
 8006aba:	4313      	orrs	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006abe:	1cbb      	adds	r3, r7, #2
 8006ac0:	881b      	ldrh	r3, [r3, #0]
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	d010      	beq.n	8006aea <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2244      	movs	r2, #68	; 0x44
 8006acc:	4313      	orrs	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2241      	movs	r2, #65	; 0x41
 8006ad4:	5c9b      	ldrb	r3, [r3, r2]
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	001a      	movs	r2, r3
 8006ada:	2328      	movs	r3, #40	; 0x28
 8006adc:	4013      	ands	r3, r2
 8006ade:	2b28      	cmp	r3, #40	; 0x28
 8006ae0:	d003      	beq.n	8006aea <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	22b0      	movs	r2, #176	; 0xb0
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006aea:	1cbb      	adds	r3, r7, #2
 8006aec:	2200      	movs	r2, #0
 8006aee:	5e9b      	ldrsh	r3, [r3, r2]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	da03      	bge.n	8006afc <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	22b8      	movs	r2, #184	; 0xb8
 8006af8:	4313      	orrs	r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006afc:	1cbb      	adds	r3, r7, #2
 8006afe:	881b      	ldrh	r3, [r3, #0]
 8006b00:	2b10      	cmp	r3, #16
 8006b02:	d103      	bne.n	8006b0c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2290      	movs	r2, #144	; 0x90
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006b0c:	1cbb      	adds	r3, r7, #2
 8006b0e:	881b      	ldrh	r3, [r3, #0]
 8006b10:	2b20      	cmp	r3, #32
 8006b12:	d103      	bne.n	8006b1c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2220      	movs	r2, #32
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006b1c:	1cbb      	adds	r3, r7, #2
 8006b1e:	881b      	ldrh	r3, [r3, #0]
 8006b20:	2b40      	cmp	r3, #64	; 0x40
 8006b22:	d103      	bne.n	8006b2c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2240      	movs	r2, #64	; 0x40
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	43d9      	mvns	r1, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	400a      	ands	r2, r1
 8006b3c:	601a      	str	r2, [r3, #0]
}
 8006b3e:	46c0      	nop			; (mov r8, r8)
 8006b40:	46bd      	mov	sp, r7
 8006b42:	b004      	add	sp, #16
 8006b44:	bd80      	pop	{r7, pc}
	...

08006b48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2241      	movs	r2, #65	; 0x41
 8006b56:	5c9b      	ldrb	r3, [r3, r2]
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b20      	cmp	r3, #32
 8006b5c:	d138      	bne.n	8006bd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2240      	movs	r2, #64	; 0x40
 8006b62:	5c9b      	ldrb	r3, [r3, r2]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d101      	bne.n	8006b6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b68:	2302      	movs	r3, #2
 8006b6a:	e032      	b.n	8006bd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2240      	movs	r2, #64	; 0x40
 8006b70:	2101      	movs	r1, #1
 8006b72:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2241      	movs	r2, #65	; 0x41
 8006b78:	2124      	movs	r1, #36	; 0x24
 8006b7a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2101      	movs	r1, #1
 8006b88:	438a      	bics	r2, r1
 8006b8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4911      	ldr	r1, [pc, #68]	; (8006bdc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006b98:	400a      	ands	r2, r1
 8006b9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6819      	ldr	r1, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	683a      	ldr	r2, [r7, #0]
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2101      	movs	r1, #1
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2241      	movs	r2, #65	; 0x41
 8006bc0:	2120      	movs	r1, #32
 8006bc2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2240      	movs	r2, #64	; 0x40
 8006bc8:	2100      	movs	r1, #0
 8006bca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	e000      	b.n	8006bd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006bd0:	2302      	movs	r3, #2
  }
}
 8006bd2:	0018      	movs	r0, r3
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	b002      	add	sp, #8
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	46c0      	nop			; (mov r8, r8)
 8006bdc:	ffffefff 	.word	0xffffefff

08006be0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2241      	movs	r2, #65	; 0x41
 8006bee:	5c9b      	ldrb	r3, [r3, r2]
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b20      	cmp	r3, #32
 8006bf4:	d139      	bne.n	8006c6a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2240      	movs	r2, #64	; 0x40
 8006bfa:	5c9b      	ldrb	r3, [r3, r2]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d101      	bne.n	8006c04 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c00:	2302      	movs	r3, #2
 8006c02:	e033      	b.n	8006c6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2240      	movs	r2, #64	; 0x40
 8006c08:	2101      	movs	r1, #1
 8006c0a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2241      	movs	r2, #65	; 0x41
 8006c10:	2124      	movs	r1, #36	; 0x24
 8006c12:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2101      	movs	r1, #1
 8006c20:	438a      	bics	r2, r1
 8006c22:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4a11      	ldr	r2, [pc, #68]	; (8006c74 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006c30:	4013      	ands	r3, r2
 8006c32:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	021b      	lsls	r3, r3, #8
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2101      	movs	r1, #1
 8006c52:	430a      	orrs	r2, r1
 8006c54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2241      	movs	r2, #65	; 0x41
 8006c5a:	2120      	movs	r1, #32
 8006c5c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2240      	movs	r2, #64	; 0x40
 8006c62:	2100      	movs	r1, #0
 8006c64:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006c66:	2300      	movs	r3, #0
 8006c68:	e000      	b.n	8006c6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c6a:	2302      	movs	r3, #2
  }
}
 8006c6c:	0018      	movs	r0, r3
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	b004      	add	sp, #16
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	fffff0ff 	.word	0xfffff0ff

08006c78 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b088      	sub	sp, #32
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d101      	bne.n	8006c8a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e0e5      	b.n	8006e56 <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2235      	movs	r2, #53	; 0x35
 8006c8e:	5c9b      	ldrb	r3, [r3, r2]
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d107      	bne.n	8006ca6 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2234      	movs	r2, #52	; 0x34
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	0018      	movs	r0, r3
 8006ca2:	f7fd f941 	bl	8003f28 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2235      	movs	r2, #53	; 0x35
 8006caa:	2102      	movs	r1, #2
 8006cac:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	69da      	ldr	r2, [r3, #28]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4969      	ldr	r1, [pc, #420]	; (8006e60 <HAL_I2S_Init+0x1e8>)
 8006cba:	400a      	ands	r2, r1
 8006cbc:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d100      	bne.n	8006cd0 <HAL_I2S_Init+0x58>
 8006cce:	e076      	b.n	8006dbe <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d102      	bne.n	8006cde <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006cd8:	2310      	movs	r3, #16
 8006cda:	617b      	str	r3, [r7, #20]
 8006cdc:	e001      	b.n	8006ce2 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006cde:	2320      	movs	r3, #32
 8006ce0:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	2b20      	cmp	r3, #32
 8006ce8:	d802      	bhi.n	8006cf0 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	005b      	lsls	r3, r3, #1
 8006cee:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8006cf0:	2380      	movs	r3, #128	; 0x80
 8006cf2:	011b      	lsls	r3, r3, #4
 8006cf4:	0018      	movs	r0, r3
 8006cf6:	f001 fa61 	bl	80081bc <HAL_RCCEx_GetPeriphCLKFreq>
 8006cfa:	0003      	movs	r3, r0
 8006cfc:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	691a      	ldr	r2, [r3, #16]
 8006d02:	2380      	movs	r3, #128	; 0x80
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d131      	bne.n	8006d6e <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d016      	beq.n	8006d40 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	0019      	movs	r1, r3
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f7f9 f9f3 	bl	8000104 <__udivsi3>
 8006d1e:	0003      	movs	r3, r0
 8006d20:	001a      	movs	r2, r3
 8006d22:	0013      	movs	r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	189b      	adds	r3, r3, r2
 8006d28:	005b      	lsls	r3, r3, #1
 8006d2a:	001a      	movs	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	0019      	movs	r1, r3
 8006d32:	0010      	movs	r0, r2
 8006d34:	f7f9 f9e6 	bl	8000104 <__udivsi3>
 8006d38:	0003      	movs	r3, r0
 8006d3a:	3305      	adds	r3, #5
 8006d3c:	613b      	str	r3, [r7, #16]
 8006d3e:	e02a      	b.n	8006d96 <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	00db      	lsls	r3, r3, #3
 8006d44:	0019      	movs	r1, r3
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f7f9 f9dc 	bl	8000104 <__udivsi3>
 8006d4c:	0003      	movs	r3, r0
 8006d4e:	001a      	movs	r2, r3
 8006d50:	0013      	movs	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	189b      	adds	r3, r3, r2
 8006d56:	005b      	lsls	r3, r3, #1
 8006d58:	001a      	movs	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	0019      	movs	r1, r3
 8006d60:	0010      	movs	r0, r2
 8006d62:	f7f9 f9cf 	bl	8000104 <__udivsi3>
 8006d66:	0003      	movs	r3, r0
 8006d68:	3305      	adds	r3, #5
 8006d6a:	613b      	str	r3, [r7, #16]
 8006d6c:	e013      	b.n	8006d96 <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006d6e:	6979      	ldr	r1, [r7, #20]
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f7f9 f9c7 	bl	8000104 <__udivsi3>
 8006d76:	0003      	movs	r3, r0
 8006d78:	001a      	movs	r2, r3
 8006d7a:	0013      	movs	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	189b      	adds	r3, r3, r2
 8006d80:	005b      	lsls	r3, r3, #1
 8006d82:	001a      	movs	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	0019      	movs	r1, r3
 8006d8a:	0010      	movs	r0, r2
 8006d8c:	f7f9 f9ba 	bl	8000104 <__udivsi3>
 8006d90:	0003      	movs	r3, r0
 8006d92:	3305      	adds	r3, #5
 8006d94:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	210a      	movs	r1, #10
 8006d9a:	0018      	movs	r0, r3
 8006d9c:	f7f9 f9b2 	bl	8000104 <__udivsi3>
 8006da0:	0003      	movs	r3, r0
 8006da2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	2201      	movs	r2, #1
 8006da8:	4013      	ands	r3, r2
 8006daa:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	085b      	lsrs	r3, r3, #1
 8006db4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	021b      	lsls	r3, r3, #8
 8006dba:	61bb      	str	r3, [r7, #24]
 8006dbc:	e003      	b.n	8006dc6 <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d902      	bls.n	8006dd2 <HAL_I2S_Init+0x15a>
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	2bff      	cmp	r3, #255	; 0xff
 8006dd0:	d907      	bls.n	8006de2 <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd6:	2210      	movs	r2, #16
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e039      	b.n	8006e56 <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	691a      	ldr	r2, [r3, #16]
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	431a      	orrs	r2, r3
 8006dea:	0011      	movs	r1, r2
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	69fa      	ldr	r2, [r7, #28]
 8006df2:	430a      	orrs	r2, r1
 8006df4:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	69db      	ldr	r3, [r3, #28]
 8006dfc:	4a18      	ldr	r2, [pc, #96]	; (8006e60 <HAL_I2S_Init+0x1e8>)
 8006dfe:	401a      	ands	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6859      	ldr	r1, [r3, #4]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	4319      	orrs	r1, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	4319      	orrs	r1, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	430b      	orrs	r3, r1
 8006e16:	431a      	orrs	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2180      	movs	r1, #128	; 0x80
 8006e1e:	0109      	lsls	r1, r1, #4
 8006e20:	430a      	orrs	r2, r1
 8006e22:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	2b30      	cmp	r3, #48	; 0x30
 8006e2a:	d003      	beq.n	8006e34 <HAL_I2S_Init+0x1bc>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	2bb0      	cmp	r3, #176	; 0xb0
 8006e32:	d108      	bne.n	8006e46 <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	69da      	ldr	r2, [r3, #28]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2180      	movs	r1, #128	; 0x80
 8006e40:	0149      	lsls	r1, r1, #5
 8006e42:	430a      	orrs	r2, r1
 8006e44:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2235      	movs	r2, #53	; 0x35
 8006e50:	2101      	movs	r1, #1
 8006e52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	0018      	movs	r0, r3
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	b008      	add	sp, #32
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	46c0      	nop			; (mov r8, r8)
 8006e60:	fffff040 	.word	0xfffff040

08006e64 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	1dbb      	adds	r3, r7, #6
 8006e70:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d003      	beq.n	8006e80 <HAL_I2S_Transmit_DMA+0x1c>
 8006e78:	1dbb      	adds	r3, r7, #6
 8006e7a:	881b      	ldrh	r3, [r3, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <HAL_I2S_Transmit_DMA+0x20>
  {
    return  HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e091      	b.n	8006fa8 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2234      	movs	r2, #52	; 0x34
 8006e88:	5c9b      	ldrb	r3, [r3, r2]
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d101      	bne.n	8006e94 <HAL_I2S_Transmit_DMA+0x30>
 8006e90:	2302      	movs	r3, #2
 8006e92:	e089      	b.n	8006fa8 <HAL_I2S_Transmit_DMA+0x144>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2234      	movs	r2, #52	; 0x34
 8006e98:	2101      	movs	r1, #1
 8006e9a:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2235      	movs	r2, #53	; 0x35
 8006ea0:	5c9b      	ldrb	r3, [r3, r2]
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d005      	beq.n	8006eb4 <HAL_I2S_Transmit_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2234      	movs	r2, #52	; 0x34
 8006eac:	2100      	movs	r1, #0
 8006eae:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	e079      	b.n	8006fa8 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2235      	movs	r2, #53	; 0x35
 8006eb8:	2103      	movs	r1, #3
 8006eba:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	2207      	movs	r2, #7
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d002      	beq.n	8006ee0 <HAL_I2S_Transmit_DMA+0x7c>
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2b05      	cmp	r3, #5
 8006ede:	d10c      	bne.n	8006efa <HAL_I2S_Transmit_DMA+0x96>
  {
    hi2s->TxXferSize = (Size << 1U);
 8006ee0:	1dbb      	adds	r3, r7, #6
 8006ee2:	881b      	ldrh	r3, [r3, #0]
 8006ee4:	18db      	adds	r3, r3, r3
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8006eec:	1dbb      	adds	r3, r7, #6
 8006eee:	881b      	ldrh	r3, [r3, #0]
 8006ef0:	18db      	adds	r3, r3, r3
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	845a      	strh	r2, [r3, #34]	; 0x22
 8006ef8:	e007      	b.n	8006f0a <HAL_I2S_Transmit_DMA+0xa6>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	1dba      	adds	r2, r7, #6
 8006efe:	8812      	ldrh	r2, [r2, #0]
 8006f00:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	1dba      	adds	r2, r7, #6
 8006f06:	8812      	ldrh	r2, [r2, #0]
 8006f08:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0e:	4a28      	ldr	r2, [pc, #160]	; (8006fb0 <HAL_I2S_Transmit_DMA+0x14c>)
 8006f10:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f16:	4a27      	ldr	r2, [pc, #156]	; (8006fb4 <HAL_I2S_Transmit_DMA+0x150>)
 8006f18:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1e:	4a26      	ldr	r2, [pc, #152]	; (8006fb8 <HAL_I2S_Transmit_DMA+0x154>)
 8006f20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006f2a:	0019      	movs	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006f32:	001a      	movs	r2, r3
                                 hi2s->TxXferSize))
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	8c1b      	ldrh	r3, [r3, #32]
 8006f38:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006f3a:	f7fe f86f 	bl	800501c <HAL_DMA_Start_IT>
 8006f3e:	1e03      	subs	r3, r0, #0
 8006f40:	d00f      	beq.n	8006f62 <HAL_I2S_Transmit_DMA+0xfe>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f46:	2208      	movs	r2, #8
 8006f48:	431a      	orrs	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2235      	movs	r2, #53	; 0x35
 8006f52:	2101      	movs	r1, #1
 8006f54:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2234      	movs	r2, #52	; 0x34
 8006f5a:	2100      	movs	r1, #0
 8006f5c:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e022      	b.n	8006fa8 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	69da      	ldr	r2, [r3, #28]
 8006f68:	2380      	movs	r3, #128	; 0x80
 8006f6a:	00db      	lsls	r3, r3, #3
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	d108      	bne.n	8006f82 <HAL_I2S_Transmit_DMA+0x11e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	69da      	ldr	r2, [r3, #28]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2180      	movs	r1, #128	; 0x80
 8006f7c:	00c9      	lsls	r1, r1, #3
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	2202      	movs	r2, #2
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	d107      	bne.n	8006f9e <HAL_I2S_Transmit_DMA+0x13a>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	685a      	ldr	r2, [r3, #4]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2102      	movs	r1, #2
 8006f9a:	430a      	orrs	r2, r1
 8006f9c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2234      	movs	r2, #52	; 0x34
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	0018      	movs	r0, r3
 8006faa:	46bd      	mov	sp, r7
 8006fac:	b006      	add	sp, #24
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	0800728f 	.word	0x0800728f
 8006fb4:	0800724b 	.word	0x0800724b
 8006fb8:	080072ad 	.word	0x080072ad

08006fbc <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006fc4:	2317      	movs	r3, #23
 8006fc6:	18fb      	adds	r3, r7, r3
 8006fc8:	2200      	movs	r2, #0
 8006fca:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	2380      	movs	r3, #128	; 0x80
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d003      	beq.n	8006fe0 <HAL_I2S_DMAStop+0x24>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d158      	bne.n	8007092 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d010      	beq.n	800700a <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fec:	0018      	movs	r0, r3
 8006fee:	f7fe f89b 	bl	8005128 <HAL_DMA_Abort>
 8006ff2:	1e03      	subs	r3, r0, #0
 8006ff4:	d009      	beq.n	800700a <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffa:	2208      	movs	r2, #8
 8006ffc:	431a      	orrs	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	639a      	str	r2, [r3, #56]	; 0x38
        errorcode = HAL_ERROR;
 8007002:	2317      	movs	r3, #23
 8007004:	18fb      	adds	r3, r7, r3
 8007006:	2201      	movs	r2, #1
 8007008:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	2364      	movs	r3, #100	; 0x64
 800700e:	2201      	movs	r2, #1
 8007010:	2102      	movs	r1, #2
 8007012:	f000 f9d1 	bl	80073b8 <I2S_WaitFlagStateUntilTimeout>
 8007016:	1e03      	subs	r3, r0, #0
 8007018:	d00d      	beq.n	8007036 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701e:	2201      	movs	r2, #1
 8007020:	431a      	orrs	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2235      	movs	r2, #53	; 0x35
 800702a:	2101      	movs	r1, #1
 800702c:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800702e:	2317      	movs	r3, #23
 8007030:	18fb      	adds	r3, r7, r3
 8007032:	2201      	movs	r2, #1
 8007034:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	2364      	movs	r3, #100	; 0x64
 800703a:	2200      	movs	r2, #0
 800703c:	2180      	movs	r1, #128	; 0x80
 800703e:	f000 f9bb 	bl	80073b8 <I2S_WaitFlagStateUntilTimeout>
 8007042:	1e03      	subs	r3, r0, #0
 8007044:	d00d      	beq.n	8007062 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704a:	2201      	movs	r2, #1
 800704c:	431a      	orrs	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2235      	movs	r2, #53	; 0x35
 8007056:	2101      	movs	r1, #1
 8007058:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800705a:	2317      	movs	r3, #23
 800705c:	18fb      	adds	r3, r7, r3
 800705e:	2201      	movs	r2, #1
 8007060:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	69da      	ldr	r2, [r3, #28]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4938      	ldr	r1, [pc, #224]	; (8007150 <HAL_I2S_DMAStop+0x194>)
 800706e:	400a      	ands	r2, r1
 8007070:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007072:	2300      	movs	r3, #0
 8007074:	613b      	str	r3, [r7, #16]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	613b      	str	r3, [r7, #16]
 800707e:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2102      	movs	r1, #2
 800708c:	438a      	bics	r2, r1
 800708e:	605a      	str	r2, [r3, #4]
 8007090:	e053      	b.n	800713a <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	23c0      	movs	r3, #192	; 0xc0
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	429a      	cmp	r2, r3
 800709c:	d005      	beq.n	80070aa <HAL_I2S_DMAStop+0xee>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	2380      	movs	r3, #128	; 0x80
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d147      	bne.n	800713a <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d010      	beq.n	80070d4 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b6:	0018      	movs	r0, r3
 80070b8:	f7fe f836 	bl	8005128 <HAL_DMA_Abort>
 80070bc:	1e03      	subs	r3, r0, #0
 80070be:	d009      	beq.n	80070d4 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c4:	2208      	movs	r2, #8
 80070c6:	431a      	orrs	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	639a      	str	r2, [r3, #56]	; 0x38
        errorcode = HAL_ERROR;
 80070cc:	2317      	movs	r3, #23
 80070ce:	18fb      	adds	r3, r7, r3
 80070d0:	2201      	movs	r2, #1
 80070d2:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	69da      	ldr	r2, [r3, #28]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	491c      	ldr	r1, [pc, #112]	; (8007150 <HAL_I2S_DMAStop+0x194>)
 80070e0:	400a      	ands	r2, r1
 80070e2:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80070e4:	2300      	movs	r3, #0
 80070e6:	60fb      	str	r3, [r7, #12]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	60fb      	str	r3, [r7, #12]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	60fb      	str	r3, [r7, #12]
 80070f8:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	685a      	ldr	r2, [r3, #4]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2101      	movs	r1, #1
 8007106:	438a      	bics	r2, r1
 8007108:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	2380      	movs	r3, #128	; 0x80
 8007110:	005b      	lsls	r3, r3, #1
 8007112:	429a      	cmp	r2, r3
 8007114:	d10e      	bne.n	8007134 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711a:	2240      	movs	r2, #64	; 0x40
 800711c:	431a      	orrs	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	639a      	str	r2, [r3, #56]	; 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2235      	movs	r2, #53	; 0x35
 8007126:	2101      	movs	r1, #1
 8007128:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800712a:	2317      	movs	r3, #23
 800712c:	18fb      	adds	r3, r7, r3
 800712e:	2201      	movs	r2, #1
 8007130:	701a      	strb	r2, [r3, #0]
 8007132:	e002      	b.n	800713a <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2235      	movs	r2, #53	; 0x35
 800713e:	2101      	movs	r1, #1
 8007140:	5499      	strb	r1, [r3, r2]

  return errorcode;
 8007142:	2317      	movs	r3, #23
 8007144:	18fb      	adds	r3, r7, r3
 8007146:	781b      	ldrb	r3, [r3, #0]
}
 8007148:	0018      	movs	r0, r3
 800714a:	46bd      	mov	sp, r7
 800714c:	b006      	add	sp, #24
 800714e:	bd80      	pop	{r7, pc}
 8007150:	fffffbff 	.word	0xfffffbff

08007154 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	099b      	lsrs	r3, r3, #6
 8007170:	001a      	movs	r2, r3
 8007172:	2301      	movs	r3, #1
 8007174:	4013      	ands	r3, r2
 8007176:	d10e      	bne.n	8007196 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	2201      	movs	r2, #1
 800717c:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 800717e:	d00a      	beq.n	8007196 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	099b      	lsrs	r3, r3, #6
 8007184:	001a      	movs	r2, r3
 8007186:	2301      	movs	r3, #1
 8007188:	4013      	ands	r3, r2
 800718a:	d004      	beq.n	8007196 <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	0018      	movs	r0, r3
 8007190:	f000 f8e2 	bl	8007358 <I2S_Receive_IT>
    return;
 8007194:	e046      	b.n	8007224 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	085b      	lsrs	r3, r3, #1
 800719a:	001a      	movs	r2, r3
 800719c:	2301      	movs	r3, #1
 800719e:	4013      	ands	r3, r2
 80071a0:	d00a      	beq.n	80071b8 <HAL_I2S_IRQHandler+0x64>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	09db      	lsrs	r3, r3, #7
 80071a6:	001a      	movs	r2, r3
 80071a8:	2301      	movs	r3, #1
 80071aa:	4013      	ands	r3, r2
 80071ac:	d004      	beq.n	80071b8 <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	0018      	movs	r0, r3
 80071b2:	f000 f8a2 	bl	80072fa <I2S_Transmit_IT>
    return;
 80071b6:	e035      	b.n	8007224 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	095b      	lsrs	r3, r3, #5
 80071bc:	001a      	movs	r2, r3
 80071be:	2301      	movs	r3, #1
 80071c0:	4013      	ands	r3, r2
 80071c2:	d02f      	beq.n	8007224 <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	099b      	lsrs	r3, r3, #6
 80071c8:	001a      	movs	r2, r3
 80071ca:	2301      	movs	r3, #1
 80071cc:	4013      	ands	r3, r2
 80071ce:	d00d      	beq.n	80071ec <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	685a      	ldr	r2, [r3, #4]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2160      	movs	r1, #96	; 0x60
 80071dc:	438a      	bics	r2, r1
 80071de:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e4:	2202      	movs	r2, #2
 80071e6:	431a      	orrs	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	08db      	lsrs	r3, r3, #3
 80071f0:	001a      	movs	r2, r3
 80071f2:	2301      	movs	r3, #1
 80071f4:	4013      	ands	r3, r2
 80071f6:	d00d      	beq.n	8007214 <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	21a0      	movs	r1, #160	; 0xa0
 8007204:	438a      	bics	r2, r1
 8007206:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720c:	2204      	movs	r2, #4
 800720e:	431a      	orrs	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2235      	movs	r2, #53	; 0x35
 8007218:	2101      	movs	r1, #1
 800721a:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	0018      	movs	r0, r3
 8007220:	f000 f80b 	bl	800723a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007224:	46bd      	mov	sp, r7
 8007226:	b004      	add	sp, #16
 8007228:	bd80      	pop	{r7, pc}

0800722a <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b082      	sub	sp, #8
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8007232:	46c0      	nop			; (mov r8, r8)
 8007234:	46bd      	mov	sp, r7
 8007236:	b002      	add	sp, #8
 8007238:	bd80      	pop	{r7, pc}

0800723a <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b082      	sub	sp, #8
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8007242:	46c0      	nop			; (mov r8, r8)
 8007244:	46bd      	mov	sp, r7
 8007246:	b002      	add	sp, #8
 8007248:	bd80      	pop	{r7, pc}

0800724a <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b084      	sub	sp, #16
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007256:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	69db      	ldr	r3, [r3, #28]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10e      	bne.n	800727e <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2102      	movs	r1, #2
 800726c:	438a      	bics	r2, r1
 800726e:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	845a      	strh	r2, [r3, #34]	; 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2235      	movs	r2, #53	; 0x35
 800727a:	2101      	movs	r1, #1
 800727c:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	0018      	movs	r0, r3
 8007282:	f7f9 ffaf 	bl	80011e4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007286:	46c0      	nop			; (mov r8, r8)
 8007288:	46bd      	mov	sp, r7
 800728a:	b004      	add	sp, #16
 800728c:	bd80      	pop	{r7, pc}

0800728e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b084      	sub	sp, #16
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800729a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	0018      	movs	r0, r3
 80072a0:	f7f9 ff96 	bl	80011d0 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80072a4:	46c0      	nop			; (mov r8, r8)
 80072a6:	46bd      	mov	sp, r7
 80072a8:	b004      	add	sp, #16
 80072aa:	bd80      	pop	{r7, pc}

080072ac <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b8:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	685a      	ldr	r2, [r3, #4]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2103      	movs	r1, #3
 80072c6:	438a      	bics	r2, r1
 80072c8:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	845a      	strh	r2, [r3, #34]	; 0x22
  hi2s->RxXferCount = 0U;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	855a      	strh	r2, [r3, #42]	; 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2235      	movs	r2, #53	; 0x35
 80072da:	2101      	movs	r1, #1
 80072dc:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e2:	2208      	movs	r2, #8
 80072e4:	431a      	orrs	r2, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	0018      	movs	r0, r3
 80072ee:	f7ff ffa4 	bl	800723a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80072f2:	46c0      	nop			; (mov r8, r8)
 80072f4:	46bd      	mov	sp, r7
 80072f6:	b004      	add	sp, #16
 80072f8:	bd80      	pop	{r7, pc}

080072fa <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b082      	sub	sp, #8
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	881a      	ldrh	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	1c9a      	adds	r2, r3, #2
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800731c:	b29b      	uxth	r3, r3
 800731e:	3b01      	subs	r3, #1
 8007320:	b29a      	uxth	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800732a:	b29b      	uxth	r3, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10f      	bne.n	8007350 <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685a      	ldr	r2, [r3, #4]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	21a0      	movs	r1, #160	; 0xa0
 800733c:	438a      	bics	r2, r1
 800733e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2235      	movs	r2, #53	; 0x35
 8007344:	2101      	movs	r1, #1
 8007346:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	0018      	movs	r0, r3
 800734c:	f7f9 ff4a 	bl	80011e4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007350:	46c0      	nop			; (mov r8, r8)
 8007352:	46bd      	mov	sp, r7
 8007354:	b002      	add	sp, #8
 8007356:	bd80      	pop	{r7, pc}

08007358 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68da      	ldr	r2, [r3, #12]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736a:	b292      	uxth	r2, r2
 800736c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007372:	1c9a      	adds	r2, r3, #2
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800737c:	b29b      	uxth	r3, r3
 800737e:	3b01      	subs	r3, #1
 8007380:	b29a      	uxth	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800738a:	b29b      	uxth	r3, r3
 800738c:	2b00      	cmp	r3, #0
 800738e:	d10f      	bne.n	80073b0 <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685a      	ldr	r2, [r3, #4]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2160      	movs	r1, #96	; 0x60
 800739c:	438a      	bics	r2, r1
 800739e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2235      	movs	r2, #53	; 0x35
 80073a4:	2101      	movs	r1, #1
 80073a6:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	0018      	movs	r0, r3
 80073ac:	f7ff ff3d 	bl	800722a <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80073b0:	46c0      	nop			; (mov r8, r8)
 80073b2:	46bd      	mov	sp, r7
 80073b4:	b002      	add	sp, #8
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b086      	sub	sp, #24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	603b      	str	r3, [r7, #0]
 80073c4:	1dfb      	adds	r3, r7, #7
 80073c6:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80073c8:	f7fd fa1c 	bl	8004804 <HAL_GetTick>
 80073cc:	0003      	movs	r3, r0
 80073ce:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80073d0:	e017      	b.n	8007402 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	3301      	adds	r3, #1
 80073d6:	d014      	beq.n	8007402 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80073d8:	f7fd fa14 	bl	8004804 <HAL_GetTick>
 80073dc:	0002      	movs	r2, r0
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d902      	bls.n	80073ee <I2S_WaitFlagStateUntilTimeout+0x36>
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d109      	bne.n	8007402 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2235      	movs	r2, #53	; 0x35
 80073f2:	2101      	movs	r1, #1
 80073f4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2234      	movs	r2, #52	; 0x34
 80073fa:	2100      	movs	r1, #0
 80073fc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e00f      	b.n	8007422 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	4013      	ands	r3, r2
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	425a      	negs	r2, r3
 8007412:	4153      	adcs	r3, r2
 8007414:	b2db      	uxtb	r3, r3
 8007416:	001a      	movs	r2, r3
 8007418:	1dfb      	adds	r3, r7, #7
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	429a      	cmp	r2, r3
 800741e:	d1d8      	bne.n	80073d2 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	0018      	movs	r0, r3
 8007424:	46bd      	mov	sp, r7
 8007426:	b006      	add	sp, #24
 8007428:	bd80      	pop	{r7, pc}
	...

0800742c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007434:	4b19      	ldr	r3, [pc, #100]	; (800749c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a19      	ldr	r2, [pc, #100]	; (80074a0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800743a:	4013      	ands	r3, r2
 800743c:	0019      	movs	r1, r3
 800743e:	4b17      	ldr	r3, [pc, #92]	; (800749c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	430a      	orrs	r2, r1
 8007444:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	2380      	movs	r3, #128	; 0x80
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	429a      	cmp	r2, r3
 800744e:	d11f      	bne.n	8007490 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8007450:	4b14      	ldr	r3, [pc, #80]	; (80074a4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	0013      	movs	r3, r2
 8007456:	005b      	lsls	r3, r3, #1
 8007458:	189b      	adds	r3, r3, r2
 800745a:	005b      	lsls	r3, r3, #1
 800745c:	4912      	ldr	r1, [pc, #72]	; (80074a8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800745e:	0018      	movs	r0, r3
 8007460:	f7f8 fe50 	bl	8000104 <__udivsi3>
 8007464:	0003      	movs	r3, r0
 8007466:	3301      	adds	r3, #1
 8007468:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800746a:	e008      	b.n	800747e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d003      	beq.n	800747a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	3b01      	subs	r3, #1
 8007476:	60fb      	str	r3, [r7, #12]
 8007478:	e001      	b.n	800747e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e009      	b.n	8007492 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800747e:	4b07      	ldr	r3, [pc, #28]	; (800749c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007480:	695a      	ldr	r2, [r3, #20]
 8007482:	2380      	movs	r3, #128	; 0x80
 8007484:	00db      	lsls	r3, r3, #3
 8007486:	401a      	ands	r2, r3
 8007488:	2380      	movs	r3, #128	; 0x80
 800748a:	00db      	lsls	r3, r3, #3
 800748c:	429a      	cmp	r2, r3
 800748e:	d0ed      	beq.n	800746c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	0018      	movs	r0, r3
 8007494:	46bd      	mov	sp, r7
 8007496:	b004      	add	sp, #16
 8007498:	bd80      	pop	{r7, pc}
 800749a:	46c0      	nop			; (mov r8, r8)
 800749c:	40007000 	.word	0x40007000
 80074a0:	fffff9ff 	.word	0xfffff9ff
 80074a4:	20000034 	.word	0x20000034
 80074a8:	000f4240 	.word	0x000f4240

080074ac <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80074b0:	4b03      	ldr	r3, [pc, #12]	; (80074c0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80074b2:	689a      	ldr	r2, [r3, #8]
 80074b4:	23e0      	movs	r3, #224	; 0xe0
 80074b6:	01db      	lsls	r3, r3, #7
 80074b8:	4013      	ands	r3, r2
}
 80074ba:	0018      	movs	r0, r3
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	40021000 	.word	0x40021000

080074c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b088      	sub	sp, #32
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d101      	bne.n	80074d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e2fe      	b.n	8007ad4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2201      	movs	r2, #1
 80074dc:	4013      	ands	r3, r2
 80074de:	d100      	bne.n	80074e2 <HAL_RCC_OscConfig+0x1e>
 80074e0:	e07c      	b.n	80075dc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074e2:	4bc3      	ldr	r3, [pc, #780]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	2238      	movs	r2, #56	; 0x38
 80074e8:	4013      	ands	r3, r2
 80074ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074ec:	4bc0      	ldr	r3, [pc, #768]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	2203      	movs	r2, #3
 80074f2:	4013      	ands	r3, r2
 80074f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	2b10      	cmp	r3, #16
 80074fa:	d102      	bne.n	8007502 <HAL_RCC_OscConfig+0x3e>
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	2b03      	cmp	r3, #3
 8007500:	d002      	beq.n	8007508 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	2b08      	cmp	r3, #8
 8007506:	d10b      	bne.n	8007520 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007508:	4bb9      	ldr	r3, [pc, #740]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	2380      	movs	r3, #128	; 0x80
 800750e:	029b      	lsls	r3, r3, #10
 8007510:	4013      	ands	r3, r2
 8007512:	d062      	beq.n	80075da <HAL_RCC_OscConfig+0x116>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d15e      	bne.n	80075da <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e2d9      	b.n	8007ad4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685a      	ldr	r2, [r3, #4]
 8007524:	2380      	movs	r3, #128	; 0x80
 8007526:	025b      	lsls	r3, r3, #9
 8007528:	429a      	cmp	r2, r3
 800752a:	d107      	bne.n	800753c <HAL_RCC_OscConfig+0x78>
 800752c:	4bb0      	ldr	r3, [pc, #704]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	4baf      	ldr	r3, [pc, #700]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 8007532:	2180      	movs	r1, #128	; 0x80
 8007534:	0249      	lsls	r1, r1, #9
 8007536:	430a      	orrs	r2, r1
 8007538:	601a      	str	r2, [r3, #0]
 800753a:	e020      	b.n	800757e <HAL_RCC_OscConfig+0xba>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685a      	ldr	r2, [r3, #4]
 8007540:	23a0      	movs	r3, #160	; 0xa0
 8007542:	02db      	lsls	r3, r3, #11
 8007544:	429a      	cmp	r2, r3
 8007546:	d10e      	bne.n	8007566 <HAL_RCC_OscConfig+0xa2>
 8007548:	4ba9      	ldr	r3, [pc, #676]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	4ba8      	ldr	r3, [pc, #672]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 800754e:	2180      	movs	r1, #128	; 0x80
 8007550:	02c9      	lsls	r1, r1, #11
 8007552:	430a      	orrs	r2, r1
 8007554:	601a      	str	r2, [r3, #0]
 8007556:	4ba6      	ldr	r3, [pc, #664]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	4ba5      	ldr	r3, [pc, #660]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 800755c:	2180      	movs	r1, #128	; 0x80
 800755e:	0249      	lsls	r1, r1, #9
 8007560:	430a      	orrs	r2, r1
 8007562:	601a      	str	r2, [r3, #0]
 8007564:	e00b      	b.n	800757e <HAL_RCC_OscConfig+0xba>
 8007566:	4ba2      	ldr	r3, [pc, #648]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	4ba1      	ldr	r3, [pc, #644]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 800756c:	49a1      	ldr	r1, [pc, #644]	; (80077f4 <HAL_RCC_OscConfig+0x330>)
 800756e:	400a      	ands	r2, r1
 8007570:	601a      	str	r2, [r3, #0]
 8007572:	4b9f      	ldr	r3, [pc, #636]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	4b9e      	ldr	r3, [pc, #632]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 8007578:	499f      	ldr	r1, [pc, #636]	; (80077f8 <HAL_RCC_OscConfig+0x334>)
 800757a:	400a      	ands	r2, r1
 800757c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d014      	beq.n	80075b0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007586:	f7fd f93d 	bl	8004804 <HAL_GetTick>
 800758a:	0003      	movs	r3, r0
 800758c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800758e:	e008      	b.n	80075a2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007590:	f7fd f938 	bl	8004804 <HAL_GetTick>
 8007594:	0002      	movs	r2, r0
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	2b64      	cmp	r3, #100	; 0x64
 800759c:	d901      	bls.n	80075a2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e298      	b.n	8007ad4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075a2:	4b93      	ldr	r3, [pc, #588]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	2380      	movs	r3, #128	; 0x80
 80075a8:	029b      	lsls	r3, r3, #10
 80075aa:	4013      	ands	r3, r2
 80075ac:	d0f0      	beq.n	8007590 <HAL_RCC_OscConfig+0xcc>
 80075ae:	e015      	b.n	80075dc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075b0:	f7fd f928 	bl	8004804 <HAL_GetTick>
 80075b4:	0003      	movs	r3, r0
 80075b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80075b8:	e008      	b.n	80075cc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075ba:	f7fd f923 	bl	8004804 <HAL_GetTick>
 80075be:	0002      	movs	r2, r0
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	2b64      	cmp	r3, #100	; 0x64
 80075c6:	d901      	bls.n	80075cc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e283      	b.n	8007ad4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80075cc:	4b88      	ldr	r3, [pc, #544]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	2380      	movs	r3, #128	; 0x80
 80075d2:	029b      	lsls	r3, r3, #10
 80075d4:	4013      	ands	r3, r2
 80075d6:	d1f0      	bne.n	80075ba <HAL_RCC_OscConfig+0xf6>
 80075d8:	e000      	b.n	80075dc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075da:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2202      	movs	r2, #2
 80075e2:	4013      	ands	r3, r2
 80075e4:	d100      	bne.n	80075e8 <HAL_RCC_OscConfig+0x124>
 80075e6:	e099      	b.n	800771c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075e8:	4b81      	ldr	r3, [pc, #516]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	2238      	movs	r2, #56	; 0x38
 80075ee:	4013      	ands	r3, r2
 80075f0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80075f2:	4b7f      	ldr	r3, [pc, #508]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	2203      	movs	r2, #3
 80075f8:	4013      	ands	r3, r2
 80075fa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	2b10      	cmp	r3, #16
 8007600:	d102      	bne.n	8007608 <HAL_RCC_OscConfig+0x144>
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	2b02      	cmp	r3, #2
 8007606:	d002      	beq.n	800760e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d135      	bne.n	800767a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800760e:	4b78      	ldr	r3, [pc, #480]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	2380      	movs	r3, #128	; 0x80
 8007614:	00db      	lsls	r3, r3, #3
 8007616:	4013      	ands	r3, r2
 8007618:	d005      	beq.n	8007626 <HAL_RCC_OscConfig+0x162>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d101      	bne.n	8007626 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e256      	b.n	8007ad4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007626:	4b72      	ldr	r3, [pc, #456]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	4a74      	ldr	r2, [pc, #464]	; (80077fc <HAL_RCC_OscConfig+0x338>)
 800762c:	4013      	ands	r3, r2
 800762e:	0019      	movs	r1, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	695b      	ldr	r3, [r3, #20]
 8007634:	021a      	lsls	r2, r3, #8
 8007636:	4b6e      	ldr	r3, [pc, #440]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 8007638:	430a      	orrs	r2, r1
 800763a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d112      	bne.n	8007668 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007642:	4b6b      	ldr	r3, [pc, #428]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a6e      	ldr	r2, [pc, #440]	; (8007800 <HAL_RCC_OscConfig+0x33c>)
 8007648:	4013      	ands	r3, r2
 800764a:	0019      	movs	r1, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	691a      	ldr	r2, [r3, #16]
 8007650:	4b67      	ldr	r3, [pc, #412]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 8007652:	430a      	orrs	r2, r1
 8007654:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8007656:	4b66      	ldr	r3, [pc, #408]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	0adb      	lsrs	r3, r3, #11
 800765c:	2207      	movs	r2, #7
 800765e:	4013      	ands	r3, r2
 8007660:	4a68      	ldr	r2, [pc, #416]	; (8007804 <HAL_RCC_OscConfig+0x340>)
 8007662:	40da      	lsrs	r2, r3
 8007664:	4b68      	ldr	r3, [pc, #416]	; (8007808 <HAL_RCC_OscConfig+0x344>)
 8007666:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007668:	4b68      	ldr	r3, [pc, #416]	; (800780c <HAL_RCC_OscConfig+0x348>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	0018      	movs	r0, r3
 800766e:	f7fd f86d 	bl	800474c <HAL_InitTick>
 8007672:	1e03      	subs	r3, r0, #0
 8007674:	d051      	beq.n	800771a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e22c      	b.n	8007ad4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d030      	beq.n	80076e4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007682:	4b5b      	ldr	r3, [pc, #364]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a5e      	ldr	r2, [pc, #376]	; (8007800 <HAL_RCC_OscConfig+0x33c>)
 8007688:	4013      	ands	r3, r2
 800768a:	0019      	movs	r1, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	691a      	ldr	r2, [r3, #16]
 8007690:	4b57      	ldr	r3, [pc, #348]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 8007692:	430a      	orrs	r2, r1
 8007694:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8007696:	4b56      	ldr	r3, [pc, #344]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	4b55      	ldr	r3, [pc, #340]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 800769c:	2180      	movs	r1, #128	; 0x80
 800769e:	0049      	lsls	r1, r1, #1
 80076a0:	430a      	orrs	r2, r1
 80076a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076a4:	f7fd f8ae 	bl	8004804 <HAL_GetTick>
 80076a8:	0003      	movs	r3, r0
 80076aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076ac:	e008      	b.n	80076c0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076ae:	f7fd f8a9 	bl	8004804 <HAL_GetTick>
 80076b2:	0002      	movs	r2, r0
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d901      	bls.n	80076c0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80076bc:	2303      	movs	r3, #3
 80076be:	e209      	b.n	8007ad4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076c0:	4b4b      	ldr	r3, [pc, #300]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	2380      	movs	r3, #128	; 0x80
 80076c6:	00db      	lsls	r3, r3, #3
 80076c8:	4013      	ands	r3, r2
 80076ca:	d0f0      	beq.n	80076ae <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076cc:	4b48      	ldr	r3, [pc, #288]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	4a4a      	ldr	r2, [pc, #296]	; (80077fc <HAL_RCC_OscConfig+0x338>)
 80076d2:	4013      	ands	r3, r2
 80076d4:	0019      	movs	r1, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	021a      	lsls	r2, r3, #8
 80076dc:	4b44      	ldr	r3, [pc, #272]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 80076de:	430a      	orrs	r2, r1
 80076e0:	605a      	str	r2, [r3, #4]
 80076e2:	e01b      	b.n	800771c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80076e4:	4b42      	ldr	r3, [pc, #264]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	4b41      	ldr	r3, [pc, #260]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 80076ea:	4949      	ldr	r1, [pc, #292]	; (8007810 <HAL_RCC_OscConfig+0x34c>)
 80076ec:	400a      	ands	r2, r1
 80076ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076f0:	f7fd f888 	bl	8004804 <HAL_GetTick>
 80076f4:	0003      	movs	r3, r0
 80076f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80076f8:	e008      	b.n	800770c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076fa:	f7fd f883 	bl	8004804 <HAL_GetTick>
 80076fe:	0002      	movs	r2, r0
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	2b02      	cmp	r3, #2
 8007706:	d901      	bls.n	800770c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007708:	2303      	movs	r3, #3
 800770a:	e1e3      	b.n	8007ad4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800770c:	4b38      	ldr	r3, [pc, #224]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	2380      	movs	r3, #128	; 0x80
 8007712:	00db      	lsls	r3, r3, #3
 8007714:	4013      	ands	r3, r2
 8007716:	d1f0      	bne.n	80076fa <HAL_RCC_OscConfig+0x236>
 8007718:	e000      	b.n	800771c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800771a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2208      	movs	r2, #8
 8007722:	4013      	ands	r3, r2
 8007724:	d047      	beq.n	80077b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007726:	4b32      	ldr	r3, [pc, #200]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	2238      	movs	r2, #56	; 0x38
 800772c:	4013      	ands	r3, r2
 800772e:	2b18      	cmp	r3, #24
 8007730:	d10a      	bne.n	8007748 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8007732:	4b2f      	ldr	r3, [pc, #188]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 8007734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007736:	2202      	movs	r2, #2
 8007738:	4013      	ands	r3, r2
 800773a:	d03c      	beq.n	80077b6 <HAL_RCC_OscConfig+0x2f2>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d138      	bne.n	80077b6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e1c5      	b.n	8007ad4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d019      	beq.n	8007784 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8007750:	4b27      	ldr	r3, [pc, #156]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 8007752:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007754:	4b26      	ldr	r3, [pc, #152]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 8007756:	2101      	movs	r1, #1
 8007758:	430a      	orrs	r2, r1
 800775a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800775c:	f7fd f852 	bl	8004804 <HAL_GetTick>
 8007760:	0003      	movs	r3, r0
 8007762:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007764:	e008      	b.n	8007778 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007766:	f7fd f84d 	bl	8004804 <HAL_GetTick>
 800776a:	0002      	movs	r2, r0
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	2b02      	cmp	r3, #2
 8007772:	d901      	bls.n	8007778 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	e1ad      	b.n	8007ad4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007778:	4b1d      	ldr	r3, [pc, #116]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 800777a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800777c:	2202      	movs	r2, #2
 800777e:	4013      	ands	r3, r2
 8007780:	d0f1      	beq.n	8007766 <HAL_RCC_OscConfig+0x2a2>
 8007782:	e018      	b.n	80077b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8007784:	4b1a      	ldr	r3, [pc, #104]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 8007786:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007788:	4b19      	ldr	r3, [pc, #100]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 800778a:	2101      	movs	r1, #1
 800778c:	438a      	bics	r2, r1
 800778e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007790:	f7fd f838 	bl	8004804 <HAL_GetTick>
 8007794:	0003      	movs	r3, r0
 8007796:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007798:	e008      	b.n	80077ac <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800779a:	f7fd f833 	bl	8004804 <HAL_GetTick>
 800779e:	0002      	movs	r2, r0
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d901      	bls.n	80077ac <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e193      	b.n	8007ad4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80077ac:	4b10      	ldr	r3, [pc, #64]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 80077ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077b0:	2202      	movs	r2, #2
 80077b2:	4013      	ands	r3, r2
 80077b4:	d1f1      	bne.n	800779a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2204      	movs	r2, #4
 80077bc:	4013      	ands	r3, r2
 80077be:	d100      	bne.n	80077c2 <HAL_RCC_OscConfig+0x2fe>
 80077c0:	e0c6      	b.n	8007950 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077c2:	231f      	movs	r3, #31
 80077c4:	18fb      	adds	r3, r7, r3
 80077c6:	2200      	movs	r2, #0
 80077c8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80077ca:	4b09      	ldr	r3, [pc, #36]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	2238      	movs	r2, #56	; 0x38
 80077d0:	4013      	ands	r3, r2
 80077d2:	2b20      	cmp	r3, #32
 80077d4:	d11e      	bne.n	8007814 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80077d6:	4b06      	ldr	r3, [pc, #24]	; (80077f0 <HAL_RCC_OscConfig+0x32c>)
 80077d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077da:	2202      	movs	r2, #2
 80077dc:	4013      	ands	r3, r2
 80077de:	d100      	bne.n	80077e2 <HAL_RCC_OscConfig+0x31e>
 80077e0:	e0b6      	b.n	8007950 <HAL_RCC_OscConfig+0x48c>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d000      	beq.n	80077ec <HAL_RCC_OscConfig+0x328>
 80077ea:	e0b1      	b.n	8007950 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e171      	b.n	8007ad4 <HAL_RCC_OscConfig+0x610>
 80077f0:	40021000 	.word	0x40021000
 80077f4:	fffeffff 	.word	0xfffeffff
 80077f8:	fffbffff 	.word	0xfffbffff
 80077fc:	ffff80ff 	.word	0xffff80ff
 8007800:	ffffc7ff 	.word	0xffffc7ff
 8007804:	00f42400 	.word	0x00f42400
 8007808:	20000034 	.word	0x20000034
 800780c:	20000038 	.word	0x20000038
 8007810:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007814:	4bb1      	ldr	r3, [pc, #708]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 8007816:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007818:	2380      	movs	r3, #128	; 0x80
 800781a:	055b      	lsls	r3, r3, #21
 800781c:	4013      	ands	r3, r2
 800781e:	d101      	bne.n	8007824 <HAL_RCC_OscConfig+0x360>
 8007820:	2301      	movs	r3, #1
 8007822:	e000      	b.n	8007826 <HAL_RCC_OscConfig+0x362>
 8007824:	2300      	movs	r3, #0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d011      	beq.n	800784e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800782a:	4bac      	ldr	r3, [pc, #688]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 800782c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800782e:	4bab      	ldr	r3, [pc, #684]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 8007830:	2180      	movs	r1, #128	; 0x80
 8007832:	0549      	lsls	r1, r1, #21
 8007834:	430a      	orrs	r2, r1
 8007836:	63da      	str	r2, [r3, #60]	; 0x3c
 8007838:	4ba8      	ldr	r3, [pc, #672]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 800783a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800783c:	2380      	movs	r3, #128	; 0x80
 800783e:	055b      	lsls	r3, r3, #21
 8007840:	4013      	ands	r3, r2
 8007842:	60fb      	str	r3, [r7, #12]
 8007844:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8007846:	231f      	movs	r3, #31
 8007848:	18fb      	adds	r3, r7, r3
 800784a:	2201      	movs	r2, #1
 800784c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800784e:	4ba4      	ldr	r3, [pc, #656]	; (8007ae0 <HAL_RCC_OscConfig+0x61c>)
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	2380      	movs	r3, #128	; 0x80
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	4013      	ands	r3, r2
 8007858:	d11a      	bne.n	8007890 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800785a:	4ba1      	ldr	r3, [pc, #644]	; (8007ae0 <HAL_RCC_OscConfig+0x61c>)
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	4ba0      	ldr	r3, [pc, #640]	; (8007ae0 <HAL_RCC_OscConfig+0x61c>)
 8007860:	2180      	movs	r1, #128	; 0x80
 8007862:	0049      	lsls	r1, r1, #1
 8007864:	430a      	orrs	r2, r1
 8007866:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8007868:	f7fc ffcc 	bl	8004804 <HAL_GetTick>
 800786c:	0003      	movs	r3, r0
 800786e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007870:	e008      	b.n	8007884 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007872:	f7fc ffc7 	bl	8004804 <HAL_GetTick>
 8007876:	0002      	movs	r2, r0
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	2b02      	cmp	r3, #2
 800787e:	d901      	bls.n	8007884 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e127      	b.n	8007ad4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007884:	4b96      	ldr	r3, [pc, #600]	; (8007ae0 <HAL_RCC_OscConfig+0x61c>)
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	2380      	movs	r3, #128	; 0x80
 800788a:	005b      	lsls	r3, r3, #1
 800788c:	4013      	ands	r3, r2
 800788e:	d0f0      	beq.n	8007872 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d106      	bne.n	80078a6 <HAL_RCC_OscConfig+0x3e2>
 8007898:	4b90      	ldr	r3, [pc, #576]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 800789a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800789c:	4b8f      	ldr	r3, [pc, #572]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 800789e:	2101      	movs	r1, #1
 80078a0:	430a      	orrs	r2, r1
 80078a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80078a4:	e01c      	b.n	80078e0 <HAL_RCC_OscConfig+0x41c>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	2b05      	cmp	r3, #5
 80078ac:	d10c      	bne.n	80078c8 <HAL_RCC_OscConfig+0x404>
 80078ae:	4b8b      	ldr	r3, [pc, #556]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 80078b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80078b2:	4b8a      	ldr	r3, [pc, #552]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 80078b4:	2104      	movs	r1, #4
 80078b6:	430a      	orrs	r2, r1
 80078b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80078ba:	4b88      	ldr	r3, [pc, #544]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 80078bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80078be:	4b87      	ldr	r3, [pc, #540]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 80078c0:	2101      	movs	r1, #1
 80078c2:	430a      	orrs	r2, r1
 80078c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80078c6:	e00b      	b.n	80078e0 <HAL_RCC_OscConfig+0x41c>
 80078c8:	4b84      	ldr	r3, [pc, #528]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 80078ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80078cc:	4b83      	ldr	r3, [pc, #524]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 80078ce:	2101      	movs	r1, #1
 80078d0:	438a      	bics	r2, r1
 80078d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80078d4:	4b81      	ldr	r3, [pc, #516]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 80078d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80078d8:	4b80      	ldr	r3, [pc, #512]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 80078da:	2104      	movs	r1, #4
 80078dc:	438a      	bics	r2, r1
 80078de:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d014      	beq.n	8007912 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078e8:	f7fc ff8c 	bl	8004804 <HAL_GetTick>
 80078ec:	0003      	movs	r3, r0
 80078ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078f0:	e009      	b.n	8007906 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078f2:	f7fc ff87 	bl	8004804 <HAL_GetTick>
 80078f6:	0002      	movs	r2, r0
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	1ad3      	subs	r3, r2, r3
 80078fc:	4a79      	ldr	r2, [pc, #484]	; (8007ae4 <HAL_RCC_OscConfig+0x620>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d901      	bls.n	8007906 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e0e6      	b.n	8007ad4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007906:	4b75      	ldr	r3, [pc, #468]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 8007908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800790a:	2202      	movs	r2, #2
 800790c:	4013      	ands	r3, r2
 800790e:	d0f0      	beq.n	80078f2 <HAL_RCC_OscConfig+0x42e>
 8007910:	e013      	b.n	800793a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007912:	f7fc ff77 	bl	8004804 <HAL_GetTick>
 8007916:	0003      	movs	r3, r0
 8007918:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800791a:	e009      	b.n	8007930 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800791c:	f7fc ff72 	bl	8004804 <HAL_GetTick>
 8007920:	0002      	movs	r2, r0
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	4a6f      	ldr	r2, [pc, #444]	; (8007ae4 <HAL_RCC_OscConfig+0x620>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d901      	bls.n	8007930 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800792c:	2303      	movs	r3, #3
 800792e:	e0d1      	b.n	8007ad4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007930:	4b6a      	ldr	r3, [pc, #424]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 8007932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007934:	2202      	movs	r2, #2
 8007936:	4013      	ands	r3, r2
 8007938:	d1f0      	bne.n	800791c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800793a:	231f      	movs	r3, #31
 800793c:	18fb      	adds	r3, r7, r3
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d105      	bne.n	8007950 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007944:	4b65      	ldr	r3, [pc, #404]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 8007946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007948:	4b64      	ldr	r3, [pc, #400]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 800794a:	4967      	ldr	r1, [pc, #412]	; (8007ae8 <HAL_RCC_OscConfig+0x624>)
 800794c:	400a      	ands	r2, r1
 800794e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	69db      	ldr	r3, [r3, #28]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d100      	bne.n	800795a <HAL_RCC_OscConfig+0x496>
 8007958:	e0bb      	b.n	8007ad2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800795a:	4b60      	ldr	r3, [pc, #384]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	2238      	movs	r2, #56	; 0x38
 8007960:	4013      	ands	r3, r2
 8007962:	2b10      	cmp	r3, #16
 8007964:	d100      	bne.n	8007968 <HAL_RCC_OscConfig+0x4a4>
 8007966:	e07b      	b.n	8007a60 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	69db      	ldr	r3, [r3, #28]
 800796c:	2b02      	cmp	r3, #2
 800796e:	d156      	bne.n	8007a1e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007970:	4b5a      	ldr	r3, [pc, #360]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	4b59      	ldr	r3, [pc, #356]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 8007976:	495d      	ldr	r1, [pc, #372]	; (8007aec <HAL_RCC_OscConfig+0x628>)
 8007978:	400a      	ands	r2, r1
 800797a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800797c:	f7fc ff42 	bl	8004804 <HAL_GetTick>
 8007980:	0003      	movs	r3, r0
 8007982:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007984:	e008      	b.n	8007998 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007986:	f7fc ff3d 	bl	8004804 <HAL_GetTick>
 800798a:	0002      	movs	r2, r0
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	2b02      	cmp	r3, #2
 8007992:	d901      	bls.n	8007998 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8007994:	2303      	movs	r3, #3
 8007996:	e09d      	b.n	8007ad4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007998:	4b50      	ldr	r3, [pc, #320]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	2380      	movs	r3, #128	; 0x80
 800799e:	049b      	lsls	r3, r3, #18
 80079a0:	4013      	ands	r3, r2
 80079a2:	d1f0      	bne.n	8007986 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80079a4:	4b4d      	ldr	r3, [pc, #308]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	4a51      	ldr	r2, [pc, #324]	; (8007af0 <HAL_RCC_OscConfig+0x62c>)
 80079aa:	4013      	ands	r3, r2
 80079ac:	0019      	movs	r1, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a1a      	ldr	r2, [r3, #32]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b6:	431a      	orrs	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079bc:	021b      	lsls	r3, r3, #8
 80079be:	431a      	orrs	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c4:	431a      	orrs	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ca:	431a      	orrs	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d0:	431a      	orrs	r2, r3
 80079d2:	4b42      	ldr	r3, [pc, #264]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 80079d4:	430a      	orrs	r2, r1
 80079d6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079d8:	4b40      	ldr	r3, [pc, #256]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	4b3f      	ldr	r3, [pc, #252]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 80079de:	2180      	movs	r1, #128	; 0x80
 80079e0:	0449      	lsls	r1, r1, #17
 80079e2:	430a      	orrs	r2, r1
 80079e4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80079e6:	4b3d      	ldr	r3, [pc, #244]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 80079e8:	68da      	ldr	r2, [r3, #12]
 80079ea:	4b3c      	ldr	r3, [pc, #240]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 80079ec:	2180      	movs	r1, #128	; 0x80
 80079ee:	0549      	lsls	r1, r1, #21
 80079f0:	430a      	orrs	r2, r1
 80079f2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f4:	f7fc ff06 	bl	8004804 <HAL_GetTick>
 80079f8:	0003      	movs	r3, r0
 80079fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079fc:	e008      	b.n	8007a10 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079fe:	f7fc ff01 	bl	8004804 <HAL_GetTick>
 8007a02:	0002      	movs	r2, r0
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d901      	bls.n	8007a10 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e061      	b.n	8007ad4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a10:	4b32      	ldr	r3, [pc, #200]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	2380      	movs	r3, #128	; 0x80
 8007a16:	049b      	lsls	r3, r3, #18
 8007a18:	4013      	ands	r3, r2
 8007a1a:	d0f0      	beq.n	80079fe <HAL_RCC_OscConfig+0x53a>
 8007a1c:	e059      	b.n	8007ad2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a1e:	4b2f      	ldr	r3, [pc, #188]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	4b2e      	ldr	r3, [pc, #184]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 8007a24:	4931      	ldr	r1, [pc, #196]	; (8007aec <HAL_RCC_OscConfig+0x628>)
 8007a26:	400a      	ands	r2, r1
 8007a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a2a:	f7fc feeb 	bl	8004804 <HAL_GetTick>
 8007a2e:	0003      	movs	r3, r0
 8007a30:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a32:	e008      	b.n	8007a46 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a34:	f7fc fee6 	bl	8004804 <HAL_GetTick>
 8007a38:	0002      	movs	r2, r0
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d901      	bls.n	8007a46 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e046      	b.n	8007ad4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a46:	4b25      	ldr	r3, [pc, #148]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	2380      	movs	r3, #128	; 0x80
 8007a4c:	049b      	lsls	r3, r3, #18
 8007a4e:	4013      	ands	r3, r2
 8007a50:	d1f0      	bne.n	8007a34 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8007a52:	4b22      	ldr	r3, [pc, #136]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 8007a54:	68da      	ldr	r2, [r3, #12]
 8007a56:	4b21      	ldr	r3, [pc, #132]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 8007a58:	4926      	ldr	r1, [pc, #152]	; (8007af4 <HAL_RCC_OscConfig+0x630>)
 8007a5a:	400a      	ands	r2, r1
 8007a5c:	60da      	str	r2, [r3, #12]
 8007a5e:	e038      	b.n	8007ad2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	69db      	ldr	r3, [r3, #28]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d101      	bne.n	8007a6c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e033      	b.n	8007ad4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8007a6c:	4b1b      	ldr	r3, [pc, #108]	; (8007adc <HAL_RCC_OscConfig+0x618>)
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	2203      	movs	r2, #3
 8007a76:	401a      	ands	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6a1b      	ldr	r3, [r3, #32]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d126      	bne.n	8007ace <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	2270      	movs	r2, #112	; 0x70
 8007a84:	401a      	ands	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d11f      	bne.n	8007ace <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a8e:	697a      	ldr	r2, [r7, #20]
 8007a90:	23fe      	movs	r3, #254	; 0xfe
 8007a92:	01db      	lsls	r3, r3, #7
 8007a94:	401a      	ands	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d116      	bne.n	8007ace <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	23f8      	movs	r3, #248	; 0xf8
 8007aa4:	039b      	lsls	r3, r3, #14
 8007aa6:	401a      	ands	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d10e      	bne.n	8007ace <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007ab0:	697a      	ldr	r2, [r7, #20]
 8007ab2:	23e0      	movs	r3, #224	; 0xe0
 8007ab4:	051b      	lsls	r3, r3, #20
 8007ab6:	401a      	ands	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d106      	bne.n	8007ace <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	0f5b      	lsrs	r3, r3, #29
 8007ac4:	075a      	lsls	r2, r3, #29
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d001      	beq.n	8007ad2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e000      	b.n	8007ad4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	0018      	movs	r0, r3
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	b008      	add	sp, #32
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	40021000 	.word	0x40021000
 8007ae0:	40007000 	.word	0x40007000
 8007ae4:	00001388 	.word	0x00001388
 8007ae8:	efffffff 	.word	0xefffffff
 8007aec:	feffffff 	.word	0xfeffffff
 8007af0:	11c1808c 	.word	0x11c1808c
 8007af4:	eefefffc 	.word	0xeefefffc

08007af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d101      	bne.n	8007b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e0e9      	b.n	8007ce0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b0c:	4b76      	ldr	r3, [pc, #472]	; (8007ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2207      	movs	r2, #7
 8007b12:	4013      	ands	r3, r2
 8007b14:	683a      	ldr	r2, [r7, #0]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d91e      	bls.n	8007b58 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b1a:	4b73      	ldr	r3, [pc, #460]	; (8007ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2207      	movs	r2, #7
 8007b20:	4393      	bics	r3, r2
 8007b22:	0019      	movs	r1, r3
 8007b24:	4b70      	ldr	r3, [pc, #448]	; (8007ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	430a      	orrs	r2, r1
 8007b2a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007b2c:	f7fc fe6a 	bl	8004804 <HAL_GetTick>
 8007b30:	0003      	movs	r3, r0
 8007b32:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007b34:	e009      	b.n	8007b4a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b36:	f7fc fe65 	bl	8004804 <HAL_GetTick>
 8007b3a:	0002      	movs	r2, r0
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	4a6a      	ldr	r2, [pc, #424]	; (8007cec <HAL_RCC_ClockConfig+0x1f4>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d901      	bls.n	8007b4a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e0ca      	b.n	8007ce0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007b4a:	4b67      	ldr	r3, [pc, #412]	; (8007ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2207      	movs	r2, #7
 8007b50:	4013      	ands	r3, r2
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d1ee      	bne.n	8007b36 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	4013      	ands	r3, r2
 8007b60:	d015      	beq.n	8007b8e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2204      	movs	r2, #4
 8007b68:	4013      	ands	r3, r2
 8007b6a:	d006      	beq.n	8007b7a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007b6c:	4b60      	ldr	r3, [pc, #384]	; (8007cf0 <HAL_RCC_ClockConfig+0x1f8>)
 8007b6e:	689a      	ldr	r2, [r3, #8]
 8007b70:	4b5f      	ldr	r3, [pc, #380]	; (8007cf0 <HAL_RCC_ClockConfig+0x1f8>)
 8007b72:	21e0      	movs	r1, #224	; 0xe0
 8007b74:	01c9      	lsls	r1, r1, #7
 8007b76:	430a      	orrs	r2, r1
 8007b78:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b7a:	4b5d      	ldr	r3, [pc, #372]	; (8007cf0 <HAL_RCC_ClockConfig+0x1f8>)
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	4a5d      	ldr	r2, [pc, #372]	; (8007cf4 <HAL_RCC_ClockConfig+0x1fc>)
 8007b80:	4013      	ands	r3, r2
 8007b82:	0019      	movs	r1, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	689a      	ldr	r2, [r3, #8]
 8007b88:	4b59      	ldr	r3, [pc, #356]	; (8007cf0 <HAL_RCC_ClockConfig+0x1f8>)
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2201      	movs	r2, #1
 8007b94:	4013      	ands	r3, r2
 8007b96:	d057      	beq.n	8007c48 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d107      	bne.n	8007bb0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ba0:	4b53      	ldr	r3, [pc, #332]	; (8007cf0 <HAL_RCC_ClockConfig+0x1f8>)
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	2380      	movs	r3, #128	; 0x80
 8007ba6:	029b      	lsls	r3, r3, #10
 8007ba8:	4013      	ands	r3, r2
 8007baa:	d12b      	bne.n	8007c04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e097      	b.n	8007ce0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d107      	bne.n	8007bc8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bb8:	4b4d      	ldr	r3, [pc, #308]	; (8007cf0 <HAL_RCC_ClockConfig+0x1f8>)
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	2380      	movs	r3, #128	; 0x80
 8007bbe:	049b      	lsls	r3, r3, #18
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	d11f      	bne.n	8007c04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e08b      	b.n	8007ce0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d107      	bne.n	8007be0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007bd0:	4b47      	ldr	r3, [pc, #284]	; (8007cf0 <HAL_RCC_ClockConfig+0x1f8>)
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	2380      	movs	r3, #128	; 0x80
 8007bd6:	00db      	lsls	r3, r3, #3
 8007bd8:	4013      	ands	r3, r2
 8007bda:	d113      	bne.n	8007c04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e07f      	b.n	8007ce0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	2b03      	cmp	r3, #3
 8007be6:	d106      	bne.n	8007bf6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007be8:	4b41      	ldr	r3, [pc, #260]	; (8007cf0 <HAL_RCC_ClockConfig+0x1f8>)
 8007bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bec:	2202      	movs	r2, #2
 8007bee:	4013      	ands	r3, r2
 8007bf0:	d108      	bne.n	8007c04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e074      	b.n	8007ce0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bf6:	4b3e      	ldr	r3, [pc, #248]	; (8007cf0 <HAL_RCC_ClockConfig+0x1f8>)
 8007bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	d101      	bne.n	8007c04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e06d      	b.n	8007ce0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007c04:	4b3a      	ldr	r3, [pc, #232]	; (8007cf0 <HAL_RCC_ClockConfig+0x1f8>)
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	2207      	movs	r2, #7
 8007c0a:	4393      	bics	r3, r2
 8007c0c:	0019      	movs	r1, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685a      	ldr	r2, [r3, #4]
 8007c12:	4b37      	ldr	r3, [pc, #220]	; (8007cf0 <HAL_RCC_ClockConfig+0x1f8>)
 8007c14:	430a      	orrs	r2, r1
 8007c16:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c18:	f7fc fdf4 	bl	8004804 <HAL_GetTick>
 8007c1c:	0003      	movs	r3, r0
 8007c1e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c20:	e009      	b.n	8007c36 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c22:	f7fc fdef 	bl	8004804 <HAL_GetTick>
 8007c26:	0002      	movs	r2, r0
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	4a2f      	ldr	r2, [pc, #188]	; (8007cec <HAL_RCC_ClockConfig+0x1f4>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d901      	bls.n	8007c36 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8007c32:	2303      	movs	r3, #3
 8007c34:	e054      	b.n	8007ce0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c36:	4b2e      	ldr	r3, [pc, #184]	; (8007cf0 <HAL_RCC_ClockConfig+0x1f8>)
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	2238      	movs	r2, #56	; 0x38
 8007c3c:	401a      	ands	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	00db      	lsls	r3, r3, #3
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d1ec      	bne.n	8007c22 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c48:	4b27      	ldr	r3, [pc, #156]	; (8007ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2207      	movs	r2, #7
 8007c4e:	4013      	ands	r3, r2
 8007c50:	683a      	ldr	r2, [r7, #0]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d21e      	bcs.n	8007c94 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c56:	4b24      	ldr	r3, [pc, #144]	; (8007ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2207      	movs	r2, #7
 8007c5c:	4393      	bics	r3, r2
 8007c5e:	0019      	movs	r1, r3
 8007c60:	4b21      	ldr	r3, [pc, #132]	; (8007ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	430a      	orrs	r2, r1
 8007c66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007c68:	f7fc fdcc 	bl	8004804 <HAL_GetTick>
 8007c6c:	0003      	movs	r3, r0
 8007c6e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007c70:	e009      	b.n	8007c86 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c72:	f7fc fdc7 	bl	8004804 <HAL_GetTick>
 8007c76:	0002      	movs	r2, r0
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	4a1b      	ldr	r2, [pc, #108]	; (8007cec <HAL_RCC_ClockConfig+0x1f4>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d901      	bls.n	8007c86 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8007c82:	2303      	movs	r3, #3
 8007c84:	e02c      	b.n	8007ce0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007c86:	4b18      	ldr	r3, [pc, #96]	; (8007ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2207      	movs	r2, #7
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d1ee      	bne.n	8007c72 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2204      	movs	r2, #4
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	d009      	beq.n	8007cb2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007c9e:	4b14      	ldr	r3, [pc, #80]	; (8007cf0 <HAL_RCC_ClockConfig+0x1f8>)
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	4a15      	ldr	r2, [pc, #84]	; (8007cf8 <HAL_RCC_ClockConfig+0x200>)
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	0019      	movs	r1, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	68da      	ldr	r2, [r3, #12]
 8007cac:	4b10      	ldr	r3, [pc, #64]	; (8007cf0 <HAL_RCC_ClockConfig+0x1f8>)
 8007cae:	430a      	orrs	r2, r1
 8007cb0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8007cb2:	f000 f829 	bl	8007d08 <HAL_RCC_GetSysClockFreq>
 8007cb6:	0001      	movs	r1, r0
 8007cb8:	4b0d      	ldr	r3, [pc, #52]	; (8007cf0 <HAL_RCC_ClockConfig+0x1f8>)
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	0a1b      	lsrs	r3, r3, #8
 8007cbe:	220f      	movs	r2, #15
 8007cc0:	401a      	ands	r2, r3
 8007cc2:	4b0e      	ldr	r3, [pc, #56]	; (8007cfc <HAL_RCC_ClockConfig+0x204>)
 8007cc4:	0092      	lsls	r2, r2, #2
 8007cc6:	58d3      	ldr	r3, [r2, r3]
 8007cc8:	221f      	movs	r2, #31
 8007cca:	4013      	ands	r3, r2
 8007ccc:	000a      	movs	r2, r1
 8007cce:	40da      	lsrs	r2, r3
 8007cd0:	4b0b      	ldr	r3, [pc, #44]	; (8007d00 <HAL_RCC_ClockConfig+0x208>)
 8007cd2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007cd4:	4b0b      	ldr	r3, [pc, #44]	; (8007d04 <HAL_RCC_ClockConfig+0x20c>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	0018      	movs	r0, r3
 8007cda:	f7fc fd37 	bl	800474c <HAL_InitTick>
 8007cde:	0003      	movs	r3, r0
}
 8007ce0:	0018      	movs	r0, r3
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	b004      	add	sp, #16
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	40022000 	.word	0x40022000
 8007cec:	00001388 	.word	0x00001388
 8007cf0:	40021000 	.word	0x40021000
 8007cf4:	fffff0ff 	.word	0xfffff0ff
 8007cf8:	ffff8fff 	.word	0xffff8fff
 8007cfc:	080183f8 	.word	0x080183f8
 8007d00:	20000034 	.word	0x20000034
 8007d04:	20000038 	.word	0x20000038

08007d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007d0e:	4b3c      	ldr	r3, [pc, #240]	; (8007e00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	2238      	movs	r2, #56	; 0x38
 8007d14:	4013      	ands	r3, r2
 8007d16:	d10f      	bne.n	8007d38 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8007d18:	4b39      	ldr	r3, [pc, #228]	; (8007e00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	0adb      	lsrs	r3, r3, #11
 8007d1e:	2207      	movs	r2, #7
 8007d20:	4013      	ands	r3, r2
 8007d22:	2201      	movs	r2, #1
 8007d24:	409a      	lsls	r2, r3
 8007d26:	0013      	movs	r3, r2
 8007d28:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8007d2a:	6839      	ldr	r1, [r7, #0]
 8007d2c:	4835      	ldr	r0, [pc, #212]	; (8007e04 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007d2e:	f7f8 f9e9 	bl	8000104 <__udivsi3>
 8007d32:	0003      	movs	r3, r0
 8007d34:	613b      	str	r3, [r7, #16]
 8007d36:	e05d      	b.n	8007df4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007d38:	4b31      	ldr	r3, [pc, #196]	; (8007e00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	2238      	movs	r2, #56	; 0x38
 8007d3e:	4013      	ands	r3, r2
 8007d40:	2b08      	cmp	r3, #8
 8007d42:	d102      	bne.n	8007d4a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007d44:	4b30      	ldr	r3, [pc, #192]	; (8007e08 <HAL_RCC_GetSysClockFreq+0x100>)
 8007d46:	613b      	str	r3, [r7, #16]
 8007d48:	e054      	b.n	8007df4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d4a:	4b2d      	ldr	r3, [pc, #180]	; (8007e00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	2238      	movs	r2, #56	; 0x38
 8007d50:	4013      	ands	r3, r2
 8007d52:	2b10      	cmp	r3, #16
 8007d54:	d138      	bne.n	8007dc8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8007d56:	4b2a      	ldr	r3, [pc, #168]	; (8007e00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	2203      	movs	r2, #3
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007d60:	4b27      	ldr	r3, [pc, #156]	; (8007e00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	091b      	lsrs	r3, r3, #4
 8007d66:	2207      	movs	r2, #7
 8007d68:	4013      	ands	r3, r2
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2b03      	cmp	r3, #3
 8007d72:	d10d      	bne.n	8007d90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d74:	68b9      	ldr	r1, [r7, #8]
 8007d76:	4824      	ldr	r0, [pc, #144]	; (8007e08 <HAL_RCC_GetSysClockFreq+0x100>)
 8007d78:	f7f8 f9c4 	bl	8000104 <__udivsi3>
 8007d7c:	0003      	movs	r3, r0
 8007d7e:	0019      	movs	r1, r3
 8007d80:	4b1f      	ldr	r3, [pc, #124]	; (8007e00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	0a1b      	lsrs	r3, r3, #8
 8007d86:	227f      	movs	r2, #127	; 0x7f
 8007d88:	4013      	ands	r3, r2
 8007d8a:	434b      	muls	r3, r1
 8007d8c:	617b      	str	r3, [r7, #20]
        break;
 8007d8e:	e00d      	b.n	8007dac <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8007d90:	68b9      	ldr	r1, [r7, #8]
 8007d92:	481c      	ldr	r0, [pc, #112]	; (8007e04 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007d94:	f7f8 f9b6 	bl	8000104 <__udivsi3>
 8007d98:	0003      	movs	r3, r0
 8007d9a:	0019      	movs	r1, r3
 8007d9c:	4b18      	ldr	r3, [pc, #96]	; (8007e00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	0a1b      	lsrs	r3, r3, #8
 8007da2:	227f      	movs	r2, #127	; 0x7f
 8007da4:	4013      	ands	r3, r2
 8007da6:	434b      	muls	r3, r1
 8007da8:	617b      	str	r3, [r7, #20]
        break;
 8007daa:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007dac:	4b14      	ldr	r3, [pc, #80]	; (8007e00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	0f5b      	lsrs	r3, r3, #29
 8007db2:	2207      	movs	r2, #7
 8007db4:	4013      	ands	r3, r2
 8007db6:	3301      	adds	r3, #1
 8007db8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8007dba:	6879      	ldr	r1, [r7, #4]
 8007dbc:	6978      	ldr	r0, [r7, #20]
 8007dbe:	f7f8 f9a1 	bl	8000104 <__udivsi3>
 8007dc2:	0003      	movs	r3, r0
 8007dc4:	613b      	str	r3, [r7, #16]
 8007dc6:	e015      	b.n	8007df4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007dc8:	4b0d      	ldr	r3, [pc, #52]	; (8007e00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	2238      	movs	r2, #56	; 0x38
 8007dce:	4013      	ands	r3, r2
 8007dd0:	2b20      	cmp	r3, #32
 8007dd2:	d103      	bne.n	8007ddc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8007dd4:	2380      	movs	r3, #128	; 0x80
 8007dd6:	021b      	lsls	r3, r3, #8
 8007dd8:	613b      	str	r3, [r7, #16]
 8007dda:	e00b      	b.n	8007df4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007ddc:	4b08      	ldr	r3, [pc, #32]	; (8007e00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	2238      	movs	r2, #56	; 0x38
 8007de2:	4013      	ands	r3, r2
 8007de4:	2b18      	cmp	r3, #24
 8007de6:	d103      	bne.n	8007df0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007de8:	23fa      	movs	r3, #250	; 0xfa
 8007dea:	01db      	lsls	r3, r3, #7
 8007dec:	613b      	str	r3, [r7, #16]
 8007dee:	e001      	b.n	8007df4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8007df0:	2300      	movs	r3, #0
 8007df2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007df4:	693b      	ldr	r3, [r7, #16]
}
 8007df6:	0018      	movs	r0, r3
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	b006      	add	sp, #24
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	46c0      	nop			; (mov r8, r8)
 8007e00:	40021000 	.word	0x40021000
 8007e04:	00f42400 	.word	0x00f42400
 8007e08:	007a1200 	.word	0x007a1200

08007e0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e10:	4b02      	ldr	r3, [pc, #8]	; (8007e1c <HAL_RCC_GetHCLKFreq+0x10>)
 8007e12:	681b      	ldr	r3, [r3, #0]
}
 8007e14:	0018      	movs	r0, r3
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	46c0      	nop			; (mov r8, r8)
 8007e1c:	20000034 	.word	0x20000034

08007e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e20:	b5b0      	push	{r4, r5, r7, lr}
 8007e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007e24:	f7ff fff2 	bl	8007e0c <HAL_RCC_GetHCLKFreq>
 8007e28:	0004      	movs	r4, r0
 8007e2a:	f7ff fb3f 	bl	80074ac <LL_RCC_GetAPB1Prescaler>
 8007e2e:	0003      	movs	r3, r0
 8007e30:	0b1a      	lsrs	r2, r3, #12
 8007e32:	4b05      	ldr	r3, [pc, #20]	; (8007e48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007e34:	0092      	lsls	r2, r2, #2
 8007e36:	58d3      	ldr	r3, [r2, r3]
 8007e38:	221f      	movs	r2, #31
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	40dc      	lsrs	r4, r3
 8007e3e:	0023      	movs	r3, r4
}
 8007e40:	0018      	movs	r0, r3
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bdb0      	pop	{r4, r5, r7, pc}
 8007e46:	46c0      	nop			; (mov r8, r8)
 8007e48:	08018438 	.word	0x08018438

08007e4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8007e54:	2313      	movs	r3, #19
 8007e56:	18fb      	adds	r3, r7, r3
 8007e58:	2200      	movs	r2, #0
 8007e5a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007e5c:	2312      	movs	r3, #18
 8007e5e:	18fb      	adds	r3, r7, r3
 8007e60:	2200      	movs	r2, #0
 8007e62:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	2380      	movs	r3, #128	; 0x80
 8007e6a:	029b      	lsls	r3, r3, #10
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	d100      	bne.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8007e70:	e0a3      	b.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e72:	2011      	movs	r0, #17
 8007e74:	183b      	adds	r3, r7, r0
 8007e76:	2200      	movs	r2, #0
 8007e78:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e7a:	4bc3      	ldr	r3, [pc, #780]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007e7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e7e:	2380      	movs	r3, #128	; 0x80
 8007e80:	055b      	lsls	r3, r3, #21
 8007e82:	4013      	ands	r3, r2
 8007e84:	d110      	bne.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e86:	4bc0      	ldr	r3, [pc, #768]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007e88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e8a:	4bbf      	ldr	r3, [pc, #764]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007e8c:	2180      	movs	r1, #128	; 0x80
 8007e8e:	0549      	lsls	r1, r1, #21
 8007e90:	430a      	orrs	r2, r1
 8007e92:	63da      	str	r2, [r3, #60]	; 0x3c
 8007e94:	4bbc      	ldr	r3, [pc, #752]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007e96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e98:	2380      	movs	r3, #128	; 0x80
 8007e9a:	055b      	lsls	r3, r3, #21
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	60bb      	str	r3, [r7, #8]
 8007ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ea2:	183b      	adds	r3, r7, r0
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ea8:	4bb8      	ldr	r3, [pc, #736]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	4bb7      	ldr	r3, [pc, #732]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007eae:	2180      	movs	r1, #128	; 0x80
 8007eb0:	0049      	lsls	r1, r1, #1
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007eb6:	f7fc fca5 	bl	8004804 <HAL_GetTick>
 8007eba:	0003      	movs	r3, r0
 8007ebc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ebe:	e00b      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ec0:	f7fc fca0 	bl	8004804 <HAL_GetTick>
 8007ec4:	0002      	movs	r2, r0
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d904      	bls.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007ece:	2313      	movs	r3, #19
 8007ed0:	18fb      	adds	r3, r7, r3
 8007ed2:	2203      	movs	r2, #3
 8007ed4:	701a      	strb	r2, [r3, #0]
        break;
 8007ed6:	e005      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ed8:	4bac      	ldr	r3, [pc, #688]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	2380      	movs	r3, #128	; 0x80
 8007ede:	005b      	lsls	r3, r3, #1
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	d0ed      	beq.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007ee4:	2313      	movs	r3, #19
 8007ee6:	18fb      	adds	r3, r7, r3
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d154      	bne.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007eee:	4ba6      	ldr	r3, [pc, #664]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007ef0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007ef2:	23c0      	movs	r3, #192	; 0xc0
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d019      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f04:	697a      	ldr	r2, [r7, #20]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d014      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007f0a:	4b9f      	ldr	r3, [pc, #636]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f0e:	4aa0      	ldr	r2, [pc, #640]	; (8008190 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007f10:	4013      	ands	r3, r2
 8007f12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f14:	4b9c      	ldr	r3, [pc, #624]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007f16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007f18:	4b9b      	ldr	r3, [pc, #620]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007f1a:	2180      	movs	r1, #128	; 0x80
 8007f1c:	0249      	lsls	r1, r1, #9
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007f22:	4b99      	ldr	r3, [pc, #612]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007f24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007f26:	4b98      	ldr	r3, [pc, #608]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007f28:	499a      	ldr	r1, [pc, #616]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8007f2a:	400a      	ands	r2, r1
 8007f2c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007f2e:	4b96      	ldr	r3, [pc, #600]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007f30:	697a      	ldr	r2, [r7, #20]
 8007f32:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	2201      	movs	r2, #1
 8007f38:	4013      	ands	r3, r2
 8007f3a:	d016      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f3c:	f7fc fc62 	bl	8004804 <HAL_GetTick>
 8007f40:	0003      	movs	r3, r0
 8007f42:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f44:	e00c      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f46:	f7fc fc5d 	bl	8004804 <HAL_GetTick>
 8007f4a:	0002      	movs	r2, r0
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	1ad3      	subs	r3, r2, r3
 8007f50:	4a91      	ldr	r2, [pc, #580]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d904      	bls.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8007f56:	2313      	movs	r3, #19
 8007f58:	18fb      	adds	r3, r7, r3
 8007f5a:	2203      	movs	r2, #3
 8007f5c:	701a      	strb	r2, [r3, #0]
            break;
 8007f5e:	e004      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f60:	4b89      	ldr	r3, [pc, #548]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f64:	2202      	movs	r2, #2
 8007f66:	4013      	ands	r3, r2
 8007f68:	d0ed      	beq.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8007f6a:	2313      	movs	r3, #19
 8007f6c:	18fb      	adds	r3, r7, r3
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d10a      	bne.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f74:	4b84      	ldr	r3, [pc, #528]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f78:	4a85      	ldr	r2, [pc, #532]	; (8008190 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	0019      	movs	r1, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f82:	4b81      	ldr	r3, [pc, #516]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007f84:	430a      	orrs	r2, r1
 8007f86:	65da      	str	r2, [r3, #92]	; 0x5c
 8007f88:	e00c      	b.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f8a:	2312      	movs	r3, #18
 8007f8c:	18fb      	adds	r3, r7, r3
 8007f8e:	2213      	movs	r2, #19
 8007f90:	18ba      	adds	r2, r7, r2
 8007f92:	7812      	ldrb	r2, [r2, #0]
 8007f94:	701a      	strb	r2, [r3, #0]
 8007f96:	e005      	b.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f98:	2312      	movs	r3, #18
 8007f9a:	18fb      	adds	r3, r7, r3
 8007f9c:	2213      	movs	r2, #19
 8007f9e:	18ba      	adds	r2, r7, r2
 8007fa0:	7812      	ldrb	r2, [r2, #0]
 8007fa2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007fa4:	2311      	movs	r3, #17
 8007fa6:	18fb      	adds	r3, r7, r3
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d105      	bne.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fae:	4b76      	ldr	r3, [pc, #472]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007fb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fb2:	4b75      	ldr	r3, [pc, #468]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007fb4:	4979      	ldr	r1, [pc, #484]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8007fb6:	400a      	ands	r2, r1
 8007fb8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	d009      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007fc4:	4b70      	ldr	r3, [pc, #448]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fc8:	2203      	movs	r2, #3
 8007fca:	4393      	bics	r3, r2
 8007fcc:	0019      	movs	r1, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	685a      	ldr	r2, [r3, #4]
 8007fd2:	4b6d      	ldr	r3, [pc, #436]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007fd4:	430a      	orrs	r2, r1
 8007fd6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2202      	movs	r2, #2
 8007fde:	4013      	ands	r3, r2
 8007fe0:	d009      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007fe2:	4b69      	ldr	r3, [pc, #420]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe6:	220c      	movs	r2, #12
 8007fe8:	4393      	bics	r3, r2
 8007fea:	0019      	movs	r1, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	689a      	ldr	r2, [r3, #8]
 8007ff0:	4b65      	ldr	r3, [pc, #404]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007ff2:	430a      	orrs	r2, r1
 8007ff4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2210      	movs	r2, #16
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	d009      	beq.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008000:	4b61      	ldr	r3, [pc, #388]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008004:	4a66      	ldr	r2, [pc, #408]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8008006:	4013      	ands	r3, r2
 8008008:	0019      	movs	r1, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	68da      	ldr	r2, [r3, #12]
 800800e:	4b5e      	ldr	r3, [pc, #376]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008010:	430a      	orrs	r2, r1
 8008012:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	2380      	movs	r3, #128	; 0x80
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	4013      	ands	r3, r2
 800801e:	d009      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008020:	4b59      	ldr	r3, [pc, #356]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008024:	4a5f      	ldr	r2, [pc, #380]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008026:	4013      	ands	r3, r2
 8008028:	0019      	movs	r1, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	699a      	ldr	r2, [r3, #24]
 800802e:	4b56      	ldr	r3, [pc, #344]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008030:	430a      	orrs	r2, r1
 8008032:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	2380      	movs	r3, #128	; 0x80
 800803a:	00db      	lsls	r3, r3, #3
 800803c:	4013      	ands	r3, r2
 800803e:	d009      	beq.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008040:	4b51      	ldr	r3, [pc, #324]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008044:	4a58      	ldr	r2, [pc, #352]	; (80081a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008046:	4013      	ands	r3, r2
 8008048:	0019      	movs	r1, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	69da      	ldr	r2, [r3, #28]
 800804e:	4b4e      	ldr	r3, [pc, #312]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008050:	430a      	orrs	r2, r1
 8008052:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2220      	movs	r2, #32
 800805a:	4013      	ands	r3, r2
 800805c:	d009      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800805e:	4b4a      	ldr	r3, [pc, #296]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008062:	4a52      	ldr	r2, [pc, #328]	; (80081ac <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8008064:	4013      	ands	r3, r2
 8008066:	0019      	movs	r1, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	691a      	ldr	r2, [r3, #16]
 800806c:	4b46      	ldr	r3, [pc, #280]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800806e:	430a      	orrs	r2, r1
 8008070:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	2380      	movs	r3, #128	; 0x80
 8008078:	01db      	lsls	r3, r3, #7
 800807a:	4013      	ands	r3, r2
 800807c:	d015      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800807e:	4b42      	ldr	r3, [pc, #264]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	0899      	lsrs	r1, r3, #2
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a1a      	ldr	r2, [r3, #32]
 800808a:	4b3f      	ldr	r3, [pc, #252]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800808c:	430a      	orrs	r2, r1
 800808e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a1a      	ldr	r2, [r3, #32]
 8008094:	2380      	movs	r3, #128	; 0x80
 8008096:	05db      	lsls	r3, r3, #23
 8008098:	429a      	cmp	r2, r3
 800809a:	d106      	bne.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800809c:	4b3a      	ldr	r3, [pc, #232]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800809e:	68da      	ldr	r2, [r3, #12]
 80080a0:	4b39      	ldr	r3, [pc, #228]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80080a2:	2180      	movs	r1, #128	; 0x80
 80080a4:	0249      	lsls	r1, r1, #9
 80080a6:	430a      	orrs	r2, r1
 80080a8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	2380      	movs	r3, #128	; 0x80
 80080b0:	031b      	lsls	r3, r3, #12
 80080b2:	4013      	ands	r3, r2
 80080b4:	d009      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80080b6:	4b34      	ldr	r3, [pc, #208]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80080b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ba:	2240      	movs	r2, #64	; 0x40
 80080bc:	4393      	bics	r3, r2
 80080be:	0019      	movs	r1, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080c4:	4b30      	ldr	r3, [pc, #192]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80080c6:	430a      	orrs	r2, r1
 80080c8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	2380      	movs	r3, #128	; 0x80
 80080d0:	039b      	lsls	r3, r3, #14
 80080d2:	4013      	ands	r3, r2
 80080d4:	d016      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80080d6:	4b2c      	ldr	r3, [pc, #176]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80080d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080da:	4a35      	ldr	r2, [pc, #212]	; (80081b0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80080dc:	4013      	ands	r3, r2
 80080de:	0019      	movs	r1, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080e4:	4b28      	ldr	r3, [pc, #160]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80080e6:	430a      	orrs	r2, r1
 80080e8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080ee:	2380      	movs	r3, #128	; 0x80
 80080f0:	03db      	lsls	r3, r3, #15
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d106      	bne.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80080f6:	4b24      	ldr	r3, [pc, #144]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80080f8:	68da      	ldr	r2, [r3, #12]
 80080fa:	4b23      	ldr	r3, [pc, #140]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80080fc:	2180      	movs	r1, #128	; 0x80
 80080fe:	0449      	lsls	r1, r1, #17
 8008100:	430a      	orrs	r2, r1
 8008102:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	2380      	movs	r3, #128	; 0x80
 800810a:	03db      	lsls	r3, r3, #15
 800810c:	4013      	ands	r3, r2
 800810e:	d016      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008110:	4b1d      	ldr	r3, [pc, #116]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008114:	4a27      	ldr	r2, [pc, #156]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8008116:	4013      	ands	r3, r2
 8008118:	0019      	movs	r1, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800811e:	4b1a      	ldr	r3, [pc, #104]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008120:	430a      	orrs	r2, r1
 8008122:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008128:	2380      	movs	r3, #128	; 0x80
 800812a:	045b      	lsls	r3, r3, #17
 800812c:	429a      	cmp	r2, r3
 800812e:	d106      	bne.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008130:	4b15      	ldr	r3, [pc, #84]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008132:	68da      	ldr	r2, [r3, #12]
 8008134:	4b14      	ldr	r3, [pc, #80]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008136:	2180      	movs	r1, #128	; 0x80
 8008138:	0449      	lsls	r1, r1, #17
 800813a:	430a      	orrs	r2, r1
 800813c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	2380      	movs	r3, #128	; 0x80
 8008144:	011b      	lsls	r3, r3, #4
 8008146:	4013      	ands	r3, r2
 8008148:	d016      	beq.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800814a:	4b0f      	ldr	r3, [pc, #60]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800814c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800814e:	4a1a      	ldr	r2, [pc, #104]	; (80081b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8008150:	4013      	ands	r3, r2
 8008152:	0019      	movs	r1, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	695a      	ldr	r2, [r3, #20]
 8008158:	4b0b      	ldr	r3, [pc, #44]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800815a:	430a      	orrs	r2, r1
 800815c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	695a      	ldr	r2, [r3, #20]
 8008162:	2380      	movs	r3, #128	; 0x80
 8008164:	01db      	lsls	r3, r3, #7
 8008166:	429a      	cmp	r2, r3
 8008168:	d106      	bne.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800816a:	4b07      	ldr	r3, [pc, #28]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800816c:	68da      	ldr	r2, [r3, #12]
 800816e:	4b06      	ldr	r3, [pc, #24]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008170:	2180      	movs	r1, #128	; 0x80
 8008172:	0249      	lsls	r1, r1, #9
 8008174:	430a      	orrs	r2, r1
 8008176:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8008178:	2312      	movs	r3, #18
 800817a:	18fb      	adds	r3, r7, r3
 800817c:	781b      	ldrb	r3, [r3, #0]
}
 800817e:	0018      	movs	r0, r3
 8008180:	46bd      	mov	sp, r7
 8008182:	b006      	add	sp, #24
 8008184:	bd80      	pop	{r7, pc}
 8008186:	46c0      	nop			; (mov r8, r8)
 8008188:	40021000 	.word	0x40021000
 800818c:	40007000 	.word	0x40007000
 8008190:	fffffcff 	.word	0xfffffcff
 8008194:	fffeffff 	.word	0xfffeffff
 8008198:	00001388 	.word	0x00001388
 800819c:	efffffff 	.word	0xefffffff
 80081a0:	fffff3ff 	.word	0xfffff3ff
 80081a4:	fff3ffff 	.word	0xfff3ffff
 80081a8:	ffcfffff 	.word	0xffcfffff
 80081ac:	ffffcfff 	.word	0xffffcfff
 80081b0:	ffbfffff 	.word	0xffbfffff
 80081b4:	feffffff 	.word	0xfeffffff
 80081b8:	ffff3fff 	.word	0xffff3fff

080081bc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80081c4:	2300      	movs	r3, #0
 80081c6:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	2380      	movs	r3, #128	; 0x80
 80081cc:	029b      	lsls	r3, r3, #10
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d136      	bne.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80081d2:	4bcd      	ldr	r3, [pc, #820]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80081d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80081d6:	23c0      	movs	r3, #192	; 0xc0
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	4013      	ands	r3, r2
 80081dc:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80081de:	4bca      	ldr	r3, [pc, #808]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80081e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081e2:	2202      	movs	r2, #2
 80081e4:	4013      	ands	r3, r2
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d108      	bne.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	2380      	movs	r3, #128	; 0x80
 80081ee:	005b      	lsls	r3, r3, #1
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d103      	bne.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 80081f4:	2380      	movs	r3, #128	; 0x80
 80081f6:	021b      	lsls	r3, r3, #8
 80081f8:	617b      	str	r3, [r7, #20]
 80081fa:	e31c      	b.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80081fc:	4bc2      	ldr	r3, [pc, #776]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80081fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008200:	2202      	movs	r2, #2
 8008202:	4013      	ands	r3, r2
 8008204:	2b02      	cmp	r3, #2
 8008206:	d108      	bne.n	800821a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	2380      	movs	r3, #128	; 0x80
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	429a      	cmp	r2, r3
 8008210:	d103      	bne.n	800821a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8008212:	23fa      	movs	r3, #250	; 0xfa
 8008214:	01db      	lsls	r3, r3, #7
 8008216:	617b      	str	r3, [r7, #20]
 8008218:	e30d      	b.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800821a:	4bbb      	ldr	r3, [pc, #748]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	2380      	movs	r3, #128	; 0x80
 8008220:	029b      	lsls	r3, r3, #10
 8008222:	401a      	ands	r2, r3
 8008224:	2380      	movs	r3, #128	; 0x80
 8008226:	029b      	lsls	r3, r3, #10
 8008228:	429a      	cmp	r2, r3
 800822a:	d000      	beq.n	800822e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 800822c:	e303      	b.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	23c0      	movs	r3, #192	; 0xc0
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	429a      	cmp	r2, r3
 8008236:	d000      	beq.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8008238:	e2fd      	b.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 800823a:	4bb4      	ldr	r3, [pc, #720]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 800823c:	617b      	str	r3, [r7, #20]
 800823e:	e2fa      	b.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8008240:	4bb1      	ldr	r3, [pc, #708]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	2203      	movs	r2, #3
 8008246:	4013      	ands	r3, r2
 8008248:	2b02      	cmp	r3, #2
 800824a:	d102      	bne.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 800824c:	4bb0      	ldr	r3, [pc, #704]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800824e:	613b      	str	r3, [r7, #16]
 8008250:	e00a      	b.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 8008252:	4bad      	ldr	r3, [pc, #692]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	2203      	movs	r2, #3
 8008258:	4013      	ands	r3, r2
 800825a:	2b03      	cmp	r3, #3
 800825c:	d102      	bne.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 800825e:	4bad      	ldr	r3, [pc, #692]	; (8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8008260:	613b      	str	r3, [r7, #16]
 8008262:	e001      	b.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8008264:	2300      	movs	r3, #0
 8008266:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008268:	4ba7      	ldr	r3, [pc, #668]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	091b      	lsrs	r3, r3, #4
 800826e:	2207      	movs	r2, #7
 8008270:	4013      	ands	r3, r2
 8008272:	3301      	adds	r3, #1
 8008274:	0019      	movs	r1, r3
 8008276:	6938      	ldr	r0, [r7, #16]
 8008278:	f7f7 ff44 	bl	8000104 <__udivsi3>
 800827c:	0003      	movs	r3, r0
 800827e:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	2380      	movs	r3, #128	; 0x80
 8008284:	03db      	lsls	r3, r3, #15
 8008286:	429a      	cmp	r2, r3
 8008288:	d100      	bne.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 800828a:	e28e      	b.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	2380      	movs	r3, #128	; 0x80
 8008290:	03db      	lsls	r3, r3, #15
 8008292:	429a      	cmp	r2, r3
 8008294:	d900      	bls.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8008296:	e2b7      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	2380      	movs	r3, #128	; 0x80
 800829c:	039b      	lsls	r3, r3, #14
 800829e:	429a      	cmp	r2, r3
 80082a0:	d100      	bne.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80082a2:	e253      	b.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	2380      	movs	r3, #128	; 0x80
 80082a8:	039b      	lsls	r3, r3, #14
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d900      	bls.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80082ae:	e2ab      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	2380      	movs	r3, #128	; 0x80
 80082b4:	031b      	lsls	r3, r3, #12
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d100      	bne.n	80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80082ba:	e0b2      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	2380      	movs	r3, #128	; 0x80
 80082c0:	031b      	lsls	r3, r3, #12
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d900      	bls.n	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80082c6:	e29f      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	2380      	movs	r3, #128	; 0x80
 80082cc:	01db      	lsls	r3, r3, #7
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d100      	bne.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 80082d2:	e103      	b.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	2380      	movs	r3, #128	; 0x80
 80082d8:	01db      	lsls	r3, r3, #7
 80082da:	429a      	cmp	r2, r3
 80082dc:	d900      	bls.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80082de:	e293      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	2380      	movs	r3, #128	; 0x80
 80082e4:	011b      	lsls	r3, r3, #4
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d100      	bne.n	80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 80082ea:	e165      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	2380      	movs	r3, #128	; 0x80
 80082f0:	011b      	lsls	r3, r3, #4
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d900      	bls.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 80082f6:	e287      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	2380      	movs	r3, #128	; 0x80
 80082fc:	00db      	lsls	r3, r3, #3
 80082fe:	429a      	cmp	r2, r3
 8008300:	d100      	bne.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8008302:	e1e3      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	2380      	movs	r3, #128	; 0x80
 8008308:	00db      	lsls	r3, r3, #3
 800830a:	429a      	cmp	r2, r3
 800830c:	d900      	bls.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800830e:	e27b      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	2380      	movs	r3, #128	; 0x80
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	429a      	cmp	r2, r3
 8008318:	d100      	bne.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800831a:	e197      	b.n	800864c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	2380      	movs	r3, #128	; 0x80
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	429a      	cmp	r2, r3
 8008324:	d900      	bls.n	8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8008326:	e26f      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2b20      	cmp	r3, #32
 800832c:	d100      	bne.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 800832e:	e118      	b.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2b20      	cmp	r3, #32
 8008334:	d900      	bls.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 8008336:	e267      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2b10      	cmp	r3, #16
 800833c:	d100      	bne.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 800833e:	e093      	b.n	8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b10      	cmp	r3, #16
 8008344:	d900      	bls.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8008346:	e25f      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b01      	cmp	r3, #1
 800834c:	d003      	beq.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2b02      	cmp	r3, #2
 8008352:	d033      	beq.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8008354:	e258      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008356:	4b6c      	ldr	r3, [pc, #432]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800835a:	2203      	movs	r2, #3
 800835c:	4013      	ands	r3, r2
 800835e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d104      	bne.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008366:	f7ff fd5b 	bl	8007e20 <HAL_RCC_GetPCLK1Freq>
 800836a:	0003      	movs	r3, r0
 800836c:	617b      	str	r3, [r7, #20]
        break;
 800836e:	e24d      	b.n	800880c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2b01      	cmp	r3, #1
 8008374:	d104      	bne.n	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 8008376:	f7ff fcc7 	bl	8007d08 <HAL_RCC_GetSysClockFreq>
 800837a:	0003      	movs	r3, r0
 800837c:	617b      	str	r3, [r7, #20]
        break;
 800837e:	e245      	b.n	800880c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008380:	4b61      	ldr	r3, [pc, #388]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	2380      	movs	r3, #128	; 0x80
 8008386:	00db      	lsls	r3, r3, #3
 8008388:	401a      	ands	r2, r3
 800838a:	2380      	movs	r3, #128	; 0x80
 800838c:	00db      	lsls	r3, r3, #3
 800838e:	429a      	cmp	r2, r3
 8008390:	d105      	bne.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2b02      	cmp	r3, #2
 8008396:	d102      	bne.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 8008398:	4b5d      	ldr	r3, [pc, #372]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800839a:	617b      	str	r3, [r7, #20]
        break;
 800839c:	e236      	b.n	800880c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800839e:	4b5a      	ldr	r3, [pc, #360]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80083a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083a2:	2202      	movs	r2, #2
 80083a4:	4013      	ands	r3, r2
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d000      	beq.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 80083aa:	e22f      	b.n	800880c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2b03      	cmp	r3, #3
 80083b0:	d000      	beq.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 80083b2:	e22b      	b.n	800880c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 80083b4:	2380      	movs	r3, #128	; 0x80
 80083b6:	021b      	lsls	r3, r3, #8
 80083b8:	617b      	str	r3, [r7, #20]
        break;
 80083ba:	e227      	b.n	800880c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80083bc:	4b52      	ldr	r3, [pc, #328]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80083be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083c0:	220c      	movs	r2, #12
 80083c2:	4013      	ands	r3, r2
 80083c4:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d104      	bne.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80083cc:	f7ff fd28 	bl	8007e20 <HAL_RCC_GetPCLK1Freq>
 80083d0:	0003      	movs	r3, r0
 80083d2:	617b      	str	r3, [r7, #20]
        break;
 80083d4:	e21c      	b.n	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2b04      	cmp	r3, #4
 80083da:	d104      	bne.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 80083dc:	f7ff fc94 	bl	8007d08 <HAL_RCC_GetSysClockFreq>
 80083e0:	0003      	movs	r3, r0
 80083e2:	617b      	str	r3, [r7, #20]
        break;
 80083e4:	e214      	b.n	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80083e6:	4b48      	ldr	r3, [pc, #288]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	2380      	movs	r3, #128	; 0x80
 80083ec:	00db      	lsls	r3, r3, #3
 80083ee:	401a      	ands	r2, r3
 80083f0:	2380      	movs	r3, #128	; 0x80
 80083f2:	00db      	lsls	r3, r3, #3
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d105      	bne.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2b08      	cmp	r3, #8
 80083fc:	d102      	bne.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 80083fe:	4b44      	ldr	r3, [pc, #272]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008400:	617b      	str	r3, [r7, #20]
        break;
 8008402:	e205      	b.n	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008404:	4b40      	ldr	r3, [pc, #256]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008408:	2202      	movs	r2, #2
 800840a:	4013      	ands	r3, r2
 800840c:	2b02      	cmp	r3, #2
 800840e:	d000      	beq.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008410:	e1fe      	b.n	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2b0c      	cmp	r3, #12
 8008416:	d000      	beq.n	800841a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8008418:	e1fa      	b.n	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 800841a:	2380      	movs	r3, #128	; 0x80
 800841c:	021b      	lsls	r3, r3, #8
 800841e:	617b      	str	r3, [r7, #20]
        break;
 8008420:	e1f6      	b.n	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8008422:	4b39      	ldr	r3, [pc, #228]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008426:	2240      	movs	r2, #64	; 0x40
 8008428:	4013      	ands	r3, r2
 800842a:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 800842c:	4b36      	ldr	r3, [pc, #216]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	2380      	movs	r3, #128	; 0x80
 8008432:	00db      	lsls	r3, r3, #3
 8008434:	401a      	ands	r2, r3
 8008436:	2380      	movs	r3, #128	; 0x80
 8008438:	00db      	lsls	r3, r3, #3
 800843a:	429a      	cmp	r2, r3
 800843c:	d105      	bne.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d102      	bne.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 8008444:	4b34      	ldr	r3, [pc, #208]	; (8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8008446:	617b      	str	r3, [r7, #20]
        break;
 8008448:	e1e4      	b.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800844a:	4b2f      	ldr	r3, [pc, #188]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800844c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800844e:	2202      	movs	r2, #2
 8008450:	4013      	ands	r3, r2
 8008452:	2b02      	cmp	r3, #2
 8008454:	d000      	beq.n	8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8008456:	e1dd      	b.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2b40      	cmp	r3, #64	; 0x40
 800845c:	d000      	beq.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 800845e:	e1d9      	b.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 8008460:	2380      	movs	r3, #128	; 0x80
 8008462:	021b      	lsls	r3, r3, #8
 8008464:	617b      	str	r3, [r7, #20]
        break;
 8008466:	e1d5      	b.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008468:	4b27      	ldr	r3, [pc, #156]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800846a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800846c:	23c0      	movs	r3, #192	; 0xc0
 800846e:	011b      	lsls	r3, r3, #4
 8008470:	4013      	ands	r3, r2
 8008472:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d104      	bne.n	8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800847a:	f7ff fcd1 	bl	8007e20 <HAL_RCC_GetPCLK1Freq>
 800847e:	0003      	movs	r3, r0
 8008480:	617b      	str	r3, [r7, #20]
        break;
 8008482:	e1c9      	b.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	2380      	movs	r3, #128	; 0x80
 8008488:	00db      	lsls	r3, r3, #3
 800848a:	429a      	cmp	r2, r3
 800848c:	d104      	bne.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 800848e:	f7ff fc3b 	bl	8007d08 <HAL_RCC_GetSysClockFreq>
 8008492:	0003      	movs	r3, r0
 8008494:	617b      	str	r3, [r7, #20]
        break;
 8008496:	e1bf      	b.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008498:	4b1b      	ldr	r3, [pc, #108]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	2380      	movs	r3, #128	; 0x80
 800849e:	00db      	lsls	r3, r3, #3
 80084a0:	401a      	ands	r2, r3
 80084a2:	2380      	movs	r3, #128	; 0x80
 80084a4:	00db      	lsls	r3, r3, #3
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d107      	bne.n	80084ba <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	2380      	movs	r3, #128	; 0x80
 80084ae:	011b      	lsls	r3, r3, #4
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d102      	bne.n	80084ba <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 80084b4:	4b16      	ldr	r3, [pc, #88]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80084b6:	617b      	str	r3, [r7, #20]
        break;
 80084b8:	e1ae      	b.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80084ba:	4b13      	ldr	r3, [pc, #76]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80084bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084be:	2202      	movs	r2, #2
 80084c0:	4013      	ands	r3, r2
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d000      	beq.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80084c6:	e1a7      	b.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	23c0      	movs	r3, #192	; 0xc0
 80084cc:	011b      	lsls	r3, r3, #4
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d000      	beq.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80084d2:	e1a1      	b.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 80084d4:	2380      	movs	r3, #128	; 0x80
 80084d6:	021b      	lsls	r3, r3, #8
 80084d8:	617b      	str	r3, [r7, #20]
        break;
 80084da:	e19d      	b.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80084dc:	4b0a      	ldr	r3, [pc, #40]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80084de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084e0:	0f9b      	lsrs	r3, r3, #30
 80084e2:	079b      	lsls	r3, r3, #30
 80084e4:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d104      	bne.n	80084f6 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 80084ec:	f7ff fc0c 	bl	8007d08 <HAL_RCC_GetSysClockFreq>
 80084f0:	0003      	movs	r3, r0
 80084f2:	617b      	str	r3, [r7, #20]
        break;
 80084f4:	e192      	b.n	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	2380      	movs	r3, #128	; 0x80
 80084fa:	061b      	lsls	r3, r3, #24
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d10d      	bne.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 8008500:	4b03      	ldr	r3, [pc, #12]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008502:	617b      	str	r3, [r7, #20]
        break;
 8008504:	e18a      	b.n	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008506:	46c0      	nop			; (mov r8, r8)
 8008508:	40021000 	.word	0x40021000
 800850c:	0003d090 	.word	0x0003d090
 8008510:	00f42400 	.word	0x00f42400
 8008514:	007a1200 	.word	0x007a1200
 8008518:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	2380      	movs	r3, #128	; 0x80
 8008520:	05db      	lsls	r3, r3, #23
 8008522:	429a      	cmp	r2, r3
 8008524:	d000      	beq.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 8008526:	e179      	b.n	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8008528:	4bc5      	ldr	r3, [pc, #788]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800852a:	68da      	ldr	r2, [r3, #12]
 800852c:	2380      	movs	r3, #128	; 0x80
 800852e:	025b      	lsls	r3, r3, #9
 8008530:	4013      	ands	r3, r2
 8008532:	d100      	bne.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8008534:	e172      	b.n	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008536:	4bc2      	ldr	r3, [pc, #776]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	0a1b      	lsrs	r3, r3, #8
 800853c:	227f      	movs	r2, #127	; 0x7f
 800853e:	4013      	ands	r3, r2
 8008540:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	68ba      	ldr	r2, [r7, #8]
 8008546:	435a      	muls	r2, r3
 8008548:	4bbd      	ldr	r3, [pc, #756]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	0c5b      	lsrs	r3, r3, #17
 800854e:	211f      	movs	r1, #31
 8008550:	400b      	ands	r3, r1
 8008552:	3301      	adds	r3, #1
 8008554:	0019      	movs	r1, r3
 8008556:	0010      	movs	r0, r2
 8008558:	f7f7 fdd4 	bl	8000104 <__udivsi3>
 800855c:	0003      	movs	r3, r0
 800855e:	617b      	str	r3, [r7, #20]
        break;
 8008560:	e15c      	b.n	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008562:	4bb7      	ldr	r3, [pc, #732]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008564:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008566:	23c0      	movs	r3, #192	; 0xc0
 8008568:	019b      	lsls	r3, r3, #6
 800856a:	4013      	ands	r3, r2
 800856c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d104      	bne.n	800857e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008574:	f7ff fc54 	bl	8007e20 <HAL_RCC_GetPCLK1Freq>
 8008578:	0003      	movs	r3, r0
 800857a:	617b      	str	r3, [r7, #20]
        break;
 800857c:	e150      	b.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	2380      	movs	r3, #128	; 0x80
 8008582:	015b      	lsls	r3, r3, #5
 8008584:	429a      	cmp	r2, r3
 8008586:	d104      	bne.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 8008588:	f7ff fbbe 	bl	8007d08 <HAL_RCC_GetSysClockFreq>
 800858c:	0003      	movs	r3, r0
 800858e:	617b      	str	r3, [r7, #20]
        break;
 8008590:	e146      	b.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008592:	4bab      	ldr	r3, [pc, #684]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	2380      	movs	r3, #128	; 0x80
 8008598:	00db      	lsls	r3, r3, #3
 800859a:	401a      	ands	r2, r3
 800859c:	2380      	movs	r3, #128	; 0x80
 800859e:	00db      	lsls	r3, r3, #3
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d000      	beq.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 80085a4:	e13c      	b.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	2380      	movs	r3, #128	; 0x80
 80085aa:	019b      	lsls	r3, r3, #6
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d000      	beq.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 80085b0:	e136      	b.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 80085b2:	4ba4      	ldr	r3, [pc, #656]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80085b4:	617b      	str	r3, [r7, #20]
        break;
 80085b6:	e133      	b.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 80085b8:	4ba1      	ldr	r3, [pc, #644]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80085ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085bc:	23c0      	movs	r3, #192	; 0xc0
 80085be:	021b      	lsls	r3, r3, #8
 80085c0:	4013      	ands	r3, r2
 80085c2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	2380      	movs	r3, #128	; 0x80
 80085c8:	01db      	lsls	r3, r3, #7
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d11c      	bne.n	8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 80085ce:	4b9c      	ldr	r3, [pc, #624]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80085d0:	68da      	ldr	r2, [r3, #12]
 80085d2:	2380      	movs	r3, #128	; 0x80
 80085d4:	025b      	lsls	r3, r3, #9
 80085d6:	4013      	ands	r3, r2
 80085d8:	d100      	bne.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 80085da:	e123      	b.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80085dc:	4b98      	ldr	r3, [pc, #608]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	0a1b      	lsrs	r3, r3, #8
 80085e2:	227f      	movs	r2, #127	; 0x7f
 80085e4:	4013      	ands	r3, r2
 80085e6:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	68ba      	ldr	r2, [r7, #8]
 80085ec:	435a      	muls	r2, r3
 80085ee:	4b94      	ldr	r3, [pc, #592]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	0c5b      	lsrs	r3, r3, #17
 80085f4:	211f      	movs	r1, #31
 80085f6:	400b      	ands	r3, r1
 80085f8:	3301      	adds	r3, #1
 80085fa:	0019      	movs	r1, r3
 80085fc:	0010      	movs	r0, r2
 80085fe:	f7f7 fd81 	bl	8000104 <__udivsi3>
 8008602:	0003      	movs	r3, r0
 8008604:	617b      	str	r3, [r7, #20]
        break;
 8008606:	e10d      	b.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d104      	bne.n	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 800860e:	f7ff fb7b 	bl	8007d08 <HAL_RCC_GetSysClockFreq>
 8008612:	0003      	movs	r3, r0
 8008614:	617b      	str	r3, [r7, #20]
        break;
 8008616:	e105      	b.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8008618:	4b89      	ldr	r3, [pc, #548]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	2380      	movs	r3, #128	; 0x80
 800861e:	00db      	lsls	r3, r3, #3
 8008620:	401a      	ands	r2, r3
 8008622:	2380      	movs	r3, #128	; 0x80
 8008624:	00db      	lsls	r3, r3, #3
 8008626:	429a      	cmp	r2, r3
 8008628:	d107      	bne.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	2380      	movs	r3, #128	; 0x80
 800862e:	021b      	lsls	r3, r3, #8
 8008630:	429a      	cmp	r2, r3
 8008632:	d102      	bne.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 8008634:	4b83      	ldr	r3, [pc, #524]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8008636:	617b      	str	r3, [r7, #20]
        break;
 8008638:	e0f4      	b.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	23c0      	movs	r3, #192	; 0xc0
 800863e:	021b      	lsls	r3, r3, #8
 8008640:	429a      	cmp	r2, r3
 8008642:	d000      	beq.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008644:	e0ee      	b.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 8008646:	4b80      	ldr	r3, [pc, #512]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8008648:	617b      	str	r3, [r7, #20]
        break;
 800864a:	e0eb      	b.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800864c:	4b7c      	ldr	r3, [pc, #496]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800864e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008650:	23c0      	movs	r3, #192	; 0xc0
 8008652:	031b      	lsls	r3, r3, #12
 8008654:	4013      	ands	r3, r2
 8008656:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d104      	bne.n	8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 800865e:	f7ff fbdf 	bl	8007e20 <HAL_RCC_GetPCLK1Freq>
 8008662:	0003      	movs	r3, r0
 8008664:	617b      	str	r3, [r7, #20]
        break;
 8008666:	e0df      	b.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8008668:	4b75      	ldr	r3, [pc, #468]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800866a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800866c:	2202      	movs	r2, #2
 800866e:	4013      	ands	r3, r2
 8008670:	2b02      	cmp	r3, #2
 8008672:	d108      	bne.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	2380      	movs	r3, #128	; 0x80
 8008678:	02db      	lsls	r3, r3, #11
 800867a:	429a      	cmp	r2, r3
 800867c:	d103      	bne.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 800867e:	23fa      	movs	r3, #250	; 0xfa
 8008680:	01db      	lsls	r3, r3, #7
 8008682:	617b      	str	r3, [r7, #20]
 8008684:	e021      	b.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8008686:	4b6e      	ldr	r3, [pc, #440]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	2380      	movs	r3, #128	; 0x80
 800868c:	00db      	lsls	r3, r3, #3
 800868e:	401a      	ands	r2, r3
 8008690:	2380      	movs	r3, #128	; 0x80
 8008692:	00db      	lsls	r3, r3, #3
 8008694:	429a      	cmp	r2, r3
 8008696:	d107      	bne.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	2380      	movs	r3, #128	; 0x80
 800869c:	031b      	lsls	r3, r3, #12
 800869e:	429a      	cmp	r2, r3
 80086a0:	d102      	bne.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 80086a2:	4b68      	ldr	r3, [pc, #416]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80086a4:	617b      	str	r3, [r7, #20]
 80086a6:	e010      	b.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80086a8:	4b65      	ldr	r3, [pc, #404]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80086aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086ac:	2202      	movs	r2, #2
 80086ae:	4013      	ands	r3, r2
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d000      	beq.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80086b4:	e0b8      	b.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	23c0      	movs	r3, #192	; 0xc0
 80086ba:	031b      	lsls	r3, r3, #12
 80086bc:	429a      	cmp	r2, r3
 80086be:	d000      	beq.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80086c0:	e0b2      	b.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 80086c2:	2380      	movs	r3, #128	; 0x80
 80086c4:	021b      	lsls	r3, r3, #8
 80086c6:	617b      	str	r3, [r7, #20]
        break;
 80086c8:	e0ae      	b.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80086ca:	e0ad      	b.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80086cc:	4b5c      	ldr	r3, [pc, #368]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80086ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086d0:	23c0      	movs	r3, #192	; 0xc0
 80086d2:	039b      	lsls	r3, r3, #14
 80086d4:	4013      	ands	r3, r2
 80086d6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d104      	bne.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80086de:	f7ff fb9f 	bl	8007e20 <HAL_RCC_GetPCLK1Freq>
 80086e2:	0003      	movs	r3, r0
 80086e4:	617b      	str	r3, [r7, #20]
        break;
 80086e6:	e0a1      	b.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80086e8:	4b55      	ldr	r3, [pc, #340]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80086ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086ec:	2202      	movs	r2, #2
 80086ee:	4013      	ands	r3, r2
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d108      	bne.n	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	2380      	movs	r3, #128	; 0x80
 80086f8:	035b      	lsls	r3, r3, #13
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d103      	bne.n	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 80086fe:	23fa      	movs	r3, #250	; 0xfa
 8008700:	01db      	lsls	r3, r3, #7
 8008702:	617b      	str	r3, [r7, #20]
 8008704:	e021      	b.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8008706:	4b4e      	ldr	r3, [pc, #312]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	2380      	movs	r3, #128	; 0x80
 800870c:	00db      	lsls	r3, r3, #3
 800870e:	401a      	ands	r2, r3
 8008710:	2380      	movs	r3, #128	; 0x80
 8008712:	00db      	lsls	r3, r3, #3
 8008714:	429a      	cmp	r2, r3
 8008716:	d107      	bne.n	8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	2380      	movs	r3, #128	; 0x80
 800871c:	039b      	lsls	r3, r3, #14
 800871e:	429a      	cmp	r2, r3
 8008720:	d102      	bne.n	8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 8008722:	4b48      	ldr	r3, [pc, #288]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8008724:	617b      	str	r3, [r7, #20]
 8008726:	e010      	b.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8008728:	4b45      	ldr	r3, [pc, #276]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800872a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800872c:	2202      	movs	r2, #2
 800872e:	4013      	ands	r3, r2
 8008730:	2b02      	cmp	r3, #2
 8008732:	d000      	beq.n	8008736 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8008734:	e07a      	b.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	23c0      	movs	r3, #192	; 0xc0
 800873a:	039b      	lsls	r3, r3, #14
 800873c:	429a      	cmp	r2, r3
 800873e:	d000      	beq.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 8008740:	e074      	b.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 8008742:	2380      	movs	r3, #128	; 0x80
 8008744:	021b      	lsls	r3, r3, #8
 8008746:	617b      	str	r3, [r7, #20]
        break;
 8008748:	e070      	b.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 800874a:	e06f      	b.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 800874c:	4b3c      	ldr	r3, [pc, #240]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800874e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008750:	2380      	movs	r3, #128	; 0x80
 8008752:	03db      	lsls	r3, r3, #15
 8008754:	4013      	ands	r3, r2
 8008756:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	2380      	movs	r3, #128	; 0x80
 800875c:	03db      	lsls	r3, r3, #15
 800875e:	429a      	cmp	r2, r3
 8008760:	d11b      	bne.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8008762:	4b37      	ldr	r3, [pc, #220]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008764:	68da      	ldr	r2, [r3, #12]
 8008766:	2380      	movs	r3, #128	; 0x80
 8008768:	045b      	lsls	r3, r3, #17
 800876a:	4013      	ands	r3, r2
 800876c:	d060      	beq.n	8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800876e:	4b34      	ldr	r3, [pc, #208]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	0a1b      	lsrs	r3, r3, #8
 8008774:	227f      	movs	r2, #127	; 0x7f
 8008776:	4013      	ands	r3, r2
 8008778:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	435a      	muls	r2, r3
 8008780:	4b2f      	ldr	r3, [pc, #188]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	0e5b      	lsrs	r3, r3, #25
 8008786:	2107      	movs	r1, #7
 8008788:	400b      	ands	r3, r1
 800878a:	3301      	adds	r3, #1
 800878c:	0019      	movs	r1, r3
 800878e:	0010      	movs	r0, r2
 8008790:	f7f7 fcb8 	bl	8000104 <__udivsi3>
 8008794:	0003      	movs	r3, r0
 8008796:	617b      	str	r3, [r7, #20]
        break;
 8008798:	e04a      	b.n	8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d147      	bne.n	8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 80087a0:	f7ff fb3e 	bl	8007e20 <HAL_RCC_GetPCLK1Freq>
 80087a4:	0003      	movs	r3, r0
 80087a6:	617b      	str	r3, [r7, #20]
        break;
 80087a8:	e042      	b.n	8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 80087aa:	4b25      	ldr	r3, [pc, #148]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80087ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087ae:	2380      	movs	r3, #128	; 0x80
 80087b0:	045b      	lsls	r3, r3, #17
 80087b2:	4013      	ands	r3, r2
 80087b4:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	2380      	movs	r3, #128	; 0x80
 80087ba:	045b      	lsls	r3, r3, #17
 80087bc:	429a      	cmp	r2, r3
 80087be:	d11b      	bne.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 80087c0:	4b1f      	ldr	r3, [pc, #124]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80087c2:	68da      	ldr	r2, [r3, #12]
 80087c4:	2380      	movs	r3, #128	; 0x80
 80087c6:	045b      	lsls	r3, r3, #17
 80087c8:	4013      	ands	r3, r2
 80087ca:	d033      	beq.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80087cc:	4b1c      	ldr	r3, [pc, #112]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	0a1b      	lsrs	r3, r3, #8
 80087d2:	227f      	movs	r2, #127	; 0x7f
 80087d4:	4013      	ands	r3, r2
 80087d6:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	68ba      	ldr	r2, [r7, #8]
 80087dc:	435a      	muls	r2, r3
 80087de:	4b18      	ldr	r3, [pc, #96]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	0e5b      	lsrs	r3, r3, #25
 80087e4:	2107      	movs	r1, #7
 80087e6:	400b      	ands	r3, r1
 80087e8:	3301      	adds	r3, #1
 80087ea:	0019      	movs	r1, r3
 80087ec:	0010      	movs	r0, r2
 80087ee:	f7f7 fc89 	bl	8000104 <__udivsi3>
 80087f2:	0003      	movs	r3, r0
 80087f4:	617b      	str	r3, [r7, #20]
        break;
 80087f6:	e01d      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d11a      	bne.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 80087fe:	f7ff fb0f 	bl	8007e20 <HAL_RCC_GetPCLK1Freq>
 8008802:	0003      	movs	r3, r0
 8008804:	617b      	str	r3, [r7, #20]
        break;
 8008806:	e015      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 8008808:	46c0      	nop			; (mov r8, r8)
 800880a:	e014      	b.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800880c:	46c0      	nop			; (mov r8, r8)
 800880e:	e012      	b.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8008810:	46c0      	nop			; (mov r8, r8)
 8008812:	e010      	b.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8008814:	46c0      	nop			; (mov r8, r8)
 8008816:	e00e      	b.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8008818:	46c0      	nop			; (mov r8, r8)
 800881a:	e00c      	b.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800881c:	46c0      	nop			; (mov r8, r8)
 800881e:	e00a      	b.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8008820:	46c0      	nop			; (mov r8, r8)
 8008822:	e008      	b.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8008824:	46c0      	nop			; (mov r8, r8)
 8008826:	e006      	b.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8008828:	46c0      	nop			; (mov r8, r8)
 800882a:	e004      	b.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800882c:	46c0      	nop			; (mov r8, r8)
 800882e:	e002      	b.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8008830:	46c0      	nop			; (mov r8, r8)
 8008832:	e000      	b.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8008834:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 8008836:	697b      	ldr	r3, [r7, #20]
}
 8008838:	0018      	movs	r0, r3
 800883a:	46bd      	mov	sp, r7
 800883c:	b006      	add	sp, #24
 800883e:	bd80      	pop	{r7, pc}
 8008840:	40021000 	.word	0x40021000
 8008844:	00f42400 	.word	0x00f42400
 8008848:	0000bb80 	.word	0x0000bb80

0800884c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d101      	bne.n	800885e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	e0a8      	b.n	80089b0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008862:	2b00      	cmp	r3, #0
 8008864:	d109      	bne.n	800887a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	685a      	ldr	r2, [r3, #4]
 800886a:	2382      	movs	r3, #130	; 0x82
 800886c:	005b      	lsls	r3, r3, #1
 800886e:	429a      	cmp	r2, r3
 8008870:	d009      	beq.n	8008886 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	61da      	str	r2, [r3, #28]
 8008878:	e005      	b.n	8008886 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	225d      	movs	r2, #93	; 0x5d
 8008890:	5c9b      	ldrb	r3, [r3, r2]
 8008892:	b2db      	uxtb	r3, r3
 8008894:	2b00      	cmp	r3, #0
 8008896:	d107      	bne.n	80088a8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	225c      	movs	r2, #92	; 0x5c
 800889c:	2100      	movs	r1, #0
 800889e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	0018      	movs	r0, r3
 80088a4:	f7fb fc00 	bl	80040a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	225d      	movs	r2, #93	; 0x5d
 80088ac:	2102      	movs	r1, #2
 80088ae:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2140      	movs	r1, #64	; 0x40
 80088bc:	438a      	bics	r2, r1
 80088be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	68da      	ldr	r2, [r3, #12]
 80088c4:	23e0      	movs	r3, #224	; 0xe0
 80088c6:	00db      	lsls	r3, r3, #3
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d902      	bls.n	80088d2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80088cc:	2300      	movs	r3, #0
 80088ce:	60fb      	str	r3, [r7, #12]
 80088d0:	e002      	b.n	80088d8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80088d2:	2380      	movs	r3, #128	; 0x80
 80088d4:	015b      	lsls	r3, r3, #5
 80088d6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	68da      	ldr	r2, [r3, #12]
 80088dc:	23f0      	movs	r3, #240	; 0xf0
 80088de:	011b      	lsls	r3, r3, #4
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d008      	beq.n	80088f6 <HAL_SPI_Init+0xaa>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	68da      	ldr	r2, [r3, #12]
 80088e8:	23e0      	movs	r3, #224	; 0xe0
 80088ea:	00db      	lsls	r3, r3, #3
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d002      	beq.n	80088f6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	685a      	ldr	r2, [r3, #4]
 80088fa:	2382      	movs	r3, #130	; 0x82
 80088fc:	005b      	lsls	r3, r3, #1
 80088fe:	401a      	ands	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6899      	ldr	r1, [r3, #8]
 8008904:	2384      	movs	r3, #132	; 0x84
 8008906:	021b      	lsls	r3, r3, #8
 8008908:	400b      	ands	r3, r1
 800890a:	431a      	orrs	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	2102      	movs	r1, #2
 8008912:	400b      	ands	r3, r1
 8008914:	431a      	orrs	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	695b      	ldr	r3, [r3, #20]
 800891a:	2101      	movs	r1, #1
 800891c:	400b      	ands	r3, r1
 800891e:	431a      	orrs	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6999      	ldr	r1, [r3, #24]
 8008924:	2380      	movs	r3, #128	; 0x80
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	400b      	ands	r3, r1
 800892a:	431a      	orrs	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	69db      	ldr	r3, [r3, #28]
 8008930:	2138      	movs	r1, #56	; 0x38
 8008932:	400b      	ands	r3, r1
 8008934:	431a      	orrs	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a1b      	ldr	r3, [r3, #32]
 800893a:	2180      	movs	r1, #128	; 0x80
 800893c:	400b      	ands	r3, r1
 800893e:	431a      	orrs	r2, r3
 8008940:	0011      	movs	r1, r2
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008946:	2380      	movs	r3, #128	; 0x80
 8008948:	019b      	lsls	r3, r3, #6
 800894a:	401a      	ands	r2, r3
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	430a      	orrs	r2, r1
 8008952:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	699b      	ldr	r3, [r3, #24]
 8008958:	0c1b      	lsrs	r3, r3, #16
 800895a:	2204      	movs	r2, #4
 800895c:	401a      	ands	r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008962:	2110      	movs	r1, #16
 8008964:	400b      	ands	r3, r1
 8008966:	431a      	orrs	r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800896c:	2108      	movs	r1, #8
 800896e:	400b      	ands	r3, r1
 8008970:	431a      	orrs	r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	68d9      	ldr	r1, [r3, #12]
 8008976:	23f0      	movs	r3, #240	; 0xf0
 8008978:	011b      	lsls	r3, r3, #4
 800897a:	400b      	ands	r3, r1
 800897c:	431a      	orrs	r2, r3
 800897e:	0011      	movs	r1, r2
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	2380      	movs	r3, #128	; 0x80
 8008984:	015b      	lsls	r3, r3, #5
 8008986:	401a      	ands	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	430a      	orrs	r2, r1
 800898e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	69da      	ldr	r2, [r3, #28]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4907      	ldr	r1, [pc, #28]	; (80089b8 <HAL_SPI_Init+0x16c>)
 800899c:	400a      	ands	r2, r1
 800899e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	225d      	movs	r2, #93	; 0x5d
 80089aa:	2101      	movs	r1, #1
 80089ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	0018      	movs	r0, r3
 80089b2:	46bd      	mov	sp, r7
 80089b4:	b004      	add	sp, #16
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	fffff7ff 	.word	0xfffff7ff

080089bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b088      	sub	sp, #32
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	603b      	str	r3, [r7, #0]
 80089c8:	1dbb      	adds	r3, r7, #6
 80089ca:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80089cc:	231f      	movs	r3, #31
 80089ce:	18fb      	adds	r3, r7, r3
 80089d0:	2200      	movs	r2, #0
 80089d2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	225c      	movs	r2, #92	; 0x5c
 80089d8:	5c9b      	ldrb	r3, [r3, r2]
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d101      	bne.n	80089e2 <HAL_SPI_Transmit+0x26>
 80089de:	2302      	movs	r3, #2
 80089e0:	e140      	b.n	8008c64 <HAL_SPI_Transmit+0x2a8>
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	225c      	movs	r2, #92	; 0x5c
 80089e6:	2101      	movs	r1, #1
 80089e8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80089ea:	f7fb ff0b 	bl	8004804 <HAL_GetTick>
 80089ee:	0003      	movs	r3, r0
 80089f0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80089f2:	2316      	movs	r3, #22
 80089f4:	18fb      	adds	r3, r7, r3
 80089f6:	1dba      	adds	r2, r7, #6
 80089f8:	8812      	ldrh	r2, [r2, #0]
 80089fa:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	225d      	movs	r2, #93	; 0x5d
 8008a00:	5c9b      	ldrb	r3, [r3, r2]
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d004      	beq.n	8008a12 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8008a08:	231f      	movs	r3, #31
 8008a0a:	18fb      	adds	r3, r7, r3
 8008a0c:	2202      	movs	r2, #2
 8008a0e:	701a      	strb	r2, [r3, #0]
    goto error;
 8008a10:	e11d      	b.n	8008c4e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d003      	beq.n	8008a20 <HAL_SPI_Transmit+0x64>
 8008a18:	1dbb      	adds	r3, r7, #6
 8008a1a:	881b      	ldrh	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d104      	bne.n	8008a2a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8008a20:	231f      	movs	r3, #31
 8008a22:	18fb      	adds	r3, r7, r3
 8008a24:	2201      	movs	r2, #1
 8008a26:	701a      	strb	r2, [r3, #0]
    goto error;
 8008a28:	e111      	b.n	8008c4e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	225d      	movs	r2, #93	; 0x5d
 8008a2e:	2103      	movs	r1, #3
 8008a30:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	1dba      	adds	r2, r7, #6
 8008a42:	8812      	ldrh	r2, [r2, #0]
 8008a44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	1dba      	adds	r2, r7, #6
 8008a4a:	8812      	ldrh	r2, [r2, #0]
 8008a4c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2200      	movs	r2, #0
 8008a52:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2244      	movs	r2, #68	; 0x44
 8008a58:	2100      	movs	r1, #0
 8008a5a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2246      	movs	r2, #70	; 0x46
 8008a60:	2100      	movs	r1, #0
 8008a62:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2200      	movs	r2, #0
 8008a68:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	689a      	ldr	r2, [r3, #8]
 8008a74:	2380      	movs	r3, #128	; 0x80
 8008a76:	021b      	lsls	r3, r3, #8
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d110      	bne.n	8008a9e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2140      	movs	r1, #64	; 0x40
 8008a88:	438a      	bics	r2, r1
 8008a8a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2180      	movs	r1, #128	; 0x80
 8008a98:	01c9      	lsls	r1, r1, #7
 8008a9a:	430a      	orrs	r2, r1
 8008a9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2240      	movs	r2, #64	; 0x40
 8008aa6:	4013      	ands	r3, r2
 8008aa8:	2b40      	cmp	r3, #64	; 0x40
 8008aaa:	d007      	beq.n	8008abc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2140      	movs	r1, #64	; 0x40
 8008ab8:	430a      	orrs	r2, r1
 8008aba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	68da      	ldr	r2, [r3, #12]
 8008ac0:	23e0      	movs	r3, #224	; 0xe0
 8008ac2:	00db      	lsls	r3, r3, #3
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d94e      	bls.n	8008b66 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d004      	beq.n	8008ada <HAL_SPI_Transmit+0x11e>
 8008ad0:	2316      	movs	r3, #22
 8008ad2:	18fb      	adds	r3, r7, r3
 8008ad4:	881b      	ldrh	r3, [r3, #0]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d13f      	bne.n	8008b5a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ade:	881a      	ldrh	r2, [r3, #0]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aea:	1c9a      	adds	r2, r3, #2
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	3b01      	subs	r3, #1
 8008af8:	b29a      	uxth	r2, r3
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008afe:	e02c      	b.n	8008b5a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	2202      	movs	r2, #2
 8008b08:	4013      	ands	r3, r2
 8008b0a:	2b02      	cmp	r3, #2
 8008b0c:	d112      	bne.n	8008b34 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b12:	881a      	ldrh	r2, [r3, #0]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1e:	1c9a      	adds	r2, r3, #2
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	b29a      	uxth	r2, r3
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b32:	e012      	b.n	8008b5a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b34:	f7fb fe66 	bl	8004804 <HAL_GetTick>
 8008b38:	0002      	movs	r2, r0
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	683a      	ldr	r2, [r7, #0]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d802      	bhi.n	8008b4a <HAL_SPI_Transmit+0x18e>
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	3301      	adds	r3, #1
 8008b48:	d102      	bne.n	8008b50 <HAL_SPI_Transmit+0x194>
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d104      	bne.n	8008b5a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8008b50:	231f      	movs	r3, #31
 8008b52:	18fb      	adds	r3, r7, r3
 8008b54:	2203      	movs	r2, #3
 8008b56:	701a      	strb	r2, [r3, #0]
          goto error;
 8008b58:	e079      	b.n	8008c4e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d1cd      	bne.n	8008b00 <HAL_SPI_Transmit+0x144>
 8008b64:	e04f      	b.n	8008c06 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d004      	beq.n	8008b78 <HAL_SPI_Transmit+0x1bc>
 8008b6e:	2316      	movs	r3, #22
 8008b70:	18fb      	adds	r3, r7, r3
 8008b72:	881b      	ldrh	r3, [r3, #0]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d141      	bne.n	8008bfc <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	330c      	adds	r3, #12
 8008b82:	7812      	ldrb	r2, [r2, #0]
 8008b84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8a:	1c5a      	adds	r2, r3, #1
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	3b01      	subs	r3, #1
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8008b9e:	e02d      	b.n	8008bfc <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	2202      	movs	r2, #2
 8008ba8:	4013      	ands	r3, r2
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d113      	bne.n	8008bd6 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	330c      	adds	r3, #12
 8008bb8:	7812      	ldrb	r2, [r2, #0]
 8008bba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc0:	1c5a      	adds	r2, r3, #1
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	b29a      	uxth	r2, r3
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008bd4:	e012      	b.n	8008bfc <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bd6:	f7fb fe15 	bl	8004804 <HAL_GetTick>
 8008bda:	0002      	movs	r2, r0
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	1ad3      	subs	r3, r2, r3
 8008be0:	683a      	ldr	r2, [r7, #0]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d802      	bhi.n	8008bec <HAL_SPI_Transmit+0x230>
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	3301      	adds	r3, #1
 8008bea:	d102      	bne.n	8008bf2 <HAL_SPI_Transmit+0x236>
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d104      	bne.n	8008bfc <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8008bf2:	231f      	movs	r3, #31
 8008bf4:	18fb      	adds	r3, r7, r3
 8008bf6:	2203      	movs	r2, #3
 8008bf8:	701a      	strb	r2, [r3, #0]
          goto error;
 8008bfa:	e028      	b.n	8008c4e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1cc      	bne.n	8008ba0 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008c06:	69ba      	ldr	r2, [r7, #24]
 8008c08:	6839      	ldr	r1, [r7, #0]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	0018      	movs	r0, r3
 8008c0e:	f001 f9d7 	bl	8009fc0 <SPI_EndRxTxTransaction>
 8008c12:	1e03      	subs	r3, r0, #0
 8008c14:	d002      	beq.n	8008c1c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2220      	movs	r2, #32
 8008c1a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d10a      	bne.n	8008c3a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c24:	2300      	movs	r3, #0
 8008c26:	613b      	str	r3, [r7, #16]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	613b      	str	r3, [r7, #16]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	613b      	str	r3, [r7, #16]
 8008c38:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d004      	beq.n	8008c4c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8008c42:	231f      	movs	r3, #31
 8008c44:	18fb      	adds	r3, r7, r3
 8008c46:	2201      	movs	r2, #1
 8008c48:	701a      	strb	r2, [r3, #0]
 8008c4a:	e000      	b.n	8008c4e <HAL_SPI_Transmit+0x292>
  }

error:
 8008c4c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	225d      	movs	r2, #93	; 0x5d
 8008c52:	2101      	movs	r1, #1
 8008c54:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	225c      	movs	r2, #92	; 0x5c
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008c5e:	231f      	movs	r3, #31
 8008c60:	18fb      	adds	r3, r7, r3
 8008c62:	781b      	ldrb	r3, [r3, #0]
}
 8008c64:	0018      	movs	r0, r3
 8008c66:	46bd      	mov	sp, r7
 8008c68:	b008      	add	sp, #32
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c6c:	b590      	push	{r4, r7, lr}
 8008c6e:	b089      	sub	sp, #36	; 0x24
 8008c70:	af02      	add	r7, sp, #8
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	603b      	str	r3, [r7, #0]
 8008c78:	1dbb      	adds	r3, r7, #6
 8008c7a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008c7c:	2317      	movs	r3, #23
 8008c7e:	18fb      	adds	r3, r7, r3
 8008c80:	2200      	movs	r2, #0
 8008c82:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	685a      	ldr	r2, [r3, #4]
 8008c88:	2382      	movs	r3, #130	; 0x82
 8008c8a:	005b      	lsls	r3, r3, #1
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d113      	bne.n	8008cb8 <HAL_SPI_Receive+0x4c>
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d10f      	bne.n	8008cb8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	225d      	movs	r2, #93	; 0x5d
 8008c9c:	2104      	movs	r1, #4
 8008c9e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008ca0:	1dbb      	adds	r3, r7, #6
 8008ca2:	881c      	ldrh	r4, [r3, #0]
 8008ca4:	68ba      	ldr	r2, [r7, #8]
 8008ca6:	68b9      	ldr	r1, [r7, #8]
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	9300      	str	r3, [sp, #0]
 8008cae:	0023      	movs	r3, r4
 8008cb0:	f000 f928 	bl	8008f04 <HAL_SPI_TransmitReceive>
 8008cb4:	0003      	movs	r3, r0
 8008cb6:	e11c      	b.n	8008ef2 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	225c      	movs	r2, #92	; 0x5c
 8008cbc:	5c9b      	ldrb	r3, [r3, r2]
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d101      	bne.n	8008cc6 <HAL_SPI_Receive+0x5a>
 8008cc2:	2302      	movs	r3, #2
 8008cc4:	e115      	b.n	8008ef2 <HAL_SPI_Receive+0x286>
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	225c      	movs	r2, #92	; 0x5c
 8008cca:	2101      	movs	r1, #1
 8008ccc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008cce:	f7fb fd99 	bl	8004804 <HAL_GetTick>
 8008cd2:	0003      	movs	r3, r0
 8008cd4:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	225d      	movs	r2, #93	; 0x5d
 8008cda:	5c9b      	ldrb	r3, [r3, r2]
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d004      	beq.n	8008cec <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8008ce2:	2317      	movs	r3, #23
 8008ce4:	18fb      	adds	r3, r7, r3
 8008ce6:	2202      	movs	r2, #2
 8008ce8:	701a      	strb	r2, [r3, #0]
    goto error;
 8008cea:	e0f7      	b.n	8008edc <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d003      	beq.n	8008cfa <HAL_SPI_Receive+0x8e>
 8008cf2:	1dbb      	adds	r3, r7, #6
 8008cf4:	881b      	ldrh	r3, [r3, #0]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d104      	bne.n	8008d04 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8008cfa:	2317      	movs	r3, #23
 8008cfc:	18fb      	adds	r3, r7, r3
 8008cfe:	2201      	movs	r2, #1
 8008d00:	701a      	strb	r2, [r3, #0]
    goto error;
 8008d02:	e0eb      	b.n	8008edc <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	225d      	movs	r2, #93	; 0x5d
 8008d08:	2104      	movs	r1, #4
 8008d0a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	68ba      	ldr	r2, [r7, #8]
 8008d16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	1dba      	adds	r2, r7, #6
 8008d1c:	2144      	movs	r1, #68	; 0x44
 8008d1e:	8812      	ldrh	r2, [r2, #0]
 8008d20:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	1dba      	adds	r2, r7, #6
 8008d26:	2146      	movs	r1, #70	; 0x46
 8008d28:	8812      	ldrh	r2, [r2, #0]
 8008d2a:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2200      	movs	r2, #0
 8008d48:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	68da      	ldr	r2, [r3, #12]
 8008d4e:	23e0      	movs	r3, #224	; 0xe0
 8008d50:	00db      	lsls	r3, r3, #3
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d908      	bls.n	8008d68 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	685a      	ldr	r2, [r3, #4]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4966      	ldr	r1, [pc, #408]	; (8008efc <HAL_SPI_Receive+0x290>)
 8008d62:	400a      	ands	r2, r1
 8008d64:	605a      	str	r2, [r3, #4]
 8008d66:	e008      	b.n	8008d7a <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	685a      	ldr	r2, [r3, #4]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2180      	movs	r1, #128	; 0x80
 8008d74:	0149      	lsls	r1, r1, #5
 8008d76:	430a      	orrs	r2, r1
 8008d78:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	689a      	ldr	r2, [r3, #8]
 8008d7e:	2380      	movs	r3, #128	; 0x80
 8008d80:	021b      	lsls	r3, r3, #8
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d10f      	bne.n	8008da6 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2140      	movs	r1, #64	; 0x40
 8008d92:	438a      	bics	r2, r1
 8008d94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4957      	ldr	r1, [pc, #348]	; (8008f00 <HAL_SPI_Receive+0x294>)
 8008da2:	400a      	ands	r2, r1
 8008da4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2240      	movs	r2, #64	; 0x40
 8008dae:	4013      	ands	r3, r2
 8008db0:	2b40      	cmp	r3, #64	; 0x40
 8008db2:	d007      	beq.n	8008dc4 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2140      	movs	r1, #64	; 0x40
 8008dc0:	430a      	orrs	r2, r1
 8008dc2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	68da      	ldr	r2, [r3, #12]
 8008dc8:	23e0      	movs	r3, #224	; 0xe0
 8008dca:	00db      	lsls	r3, r3, #3
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d900      	bls.n	8008dd2 <HAL_SPI_Receive+0x166>
 8008dd0:	e069      	b.n	8008ea6 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008dd2:	e031      	b.n	8008e38 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	4013      	ands	r3, r2
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d117      	bne.n	8008e12 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	330c      	adds	r3, #12
 8008de8:	001a      	movs	r2, r3
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dee:	7812      	ldrb	r2, [r2, #0]
 8008df0:	b2d2      	uxtb	r2, r2
 8008df2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df8:	1c5a      	adds	r2, r3, #1
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2246      	movs	r2, #70	; 0x46
 8008e02:	5a9b      	ldrh	r3, [r3, r2]
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	3b01      	subs	r3, #1
 8008e08:	b299      	uxth	r1, r3
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2246      	movs	r2, #70	; 0x46
 8008e0e:	5299      	strh	r1, [r3, r2]
 8008e10:	e012      	b.n	8008e38 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e12:	f7fb fcf7 	bl	8004804 <HAL_GetTick>
 8008e16:	0002      	movs	r2, r0
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	683a      	ldr	r2, [r7, #0]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d802      	bhi.n	8008e28 <HAL_SPI_Receive+0x1bc>
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	3301      	adds	r3, #1
 8008e26:	d102      	bne.n	8008e2e <HAL_SPI_Receive+0x1c2>
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d104      	bne.n	8008e38 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8008e2e:	2317      	movs	r3, #23
 8008e30:	18fb      	adds	r3, r7, r3
 8008e32:	2203      	movs	r2, #3
 8008e34:	701a      	strb	r2, [r3, #0]
          goto error;
 8008e36:	e051      	b.n	8008edc <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2246      	movs	r2, #70	; 0x46
 8008e3c:	5a9b      	ldrh	r3, [r3, r2]
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d1c7      	bne.n	8008dd4 <HAL_SPI_Receive+0x168>
 8008e44:	e035      	b.n	8008eb2 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	4013      	ands	r3, r2
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d115      	bne.n	8008e80 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	68da      	ldr	r2, [r3, #12]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5e:	b292      	uxth	r2, r2
 8008e60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e66:	1c9a      	adds	r2, r3, #2
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2246      	movs	r2, #70	; 0x46
 8008e70:	5a9b      	ldrh	r3, [r3, r2]
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	3b01      	subs	r3, #1
 8008e76:	b299      	uxth	r1, r3
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2246      	movs	r2, #70	; 0x46
 8008e7c:	5299      	strh	r1, [r3, r2]
 8008e7e:	e012      	b.n	8008ea6 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e80:	f7fb fcc0 	bl	8004804 <HAL_GetTick>
 8008e84:	0002      	movs	r2, r0
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	683a      	ldr	r2, [r7, #0]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d802      	bhi.n	8008e96 <HAL_SPI_Receive+0x22a>
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	3301      	adds	r3, #1
 8008e94:	d102      	bne.n	8008e9c <HAL_SPI_Receive+0x230>
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d104      	bne.n	8008ea6 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8008e9c:	2317      	movs	r3, #23
 8008e9e:	18fb      	adds	r3, r7, r3
 8008ea0:	2203      	movs	r2, #3
 8008ea2:	701a      	strb	r2, [r3, #0]
          goto error;
 8008ea4:	e01a      	b.n	8008edc <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2246      	movs	r2, #70	; 0x46
 8008eaa:	5a9b      	ldrh	r3, [r3, r2]
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1c9      	bne.n	8008e46 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008eb2:	693a      	ldr	r2, [r7, #16]
 8008eb4:	6839      	ldr	r1, [r7, #0]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	0018      	movs	r0, r3
 8008eba:	f001 f823 	bl	8009f04 <SPI_EndRxTransaction>
 8008ebe:	1e03      	subs	r3, r0, #0
 8008ec0:	d002      	beq.n	8008ec8 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2220      	movs	r2, #32
 8008ec6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d004      	beq.n	8008eda <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8008ed0:	2317      	movs	r3, #23
 8008ed2:	18fb      	adds	r3, r7, r3
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	701a      	strb	r2, [r3, #0]
 8008ed8:	e000      	b.n	8008edc <HAL_SPI_Receive+0x270>
  }

error :
 8008eda:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	225d      	movs	r2, #93	; 0x5d
 8008ee0:	2101      	movs	r1, #1
 8008ee2:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	225c      	movs	r2, #92	; 0x5c
 8008ee8:	2100      	movs	r1, #0
 8008eea:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008eec:	2317      	movs	r3, #23
 8008eee:	18fb      	adds	r3, r7, r3
 8008ef0:	781b      	ldrb	r3, [r3, #0]
}
 8008ef2:	0018      	movs	r0, r3
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	b007      	add	sp, #28
 8008ef8:	bd90      	pop	{r4, r7, pc}
 8008efa:	46c0      	nop			; (mov r8, r8)
 8008efc:	ffffefff 	.word	0xffffefff
 8008f00:	ffffbfff 	.word	0xffffbfff

08008f04 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b08a      	sub	sp, #40	; 0x28
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	607a      	str	r2, [r7, #4]
 8008f10:	001a      	movs	r2, r3
 8008f12:	1cbb      	adds	r3, r7, #2
 8008f14:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008f16:	2301      	movs	r3, #1
 8008f18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008f1a:	2323      	movs	r3, #35	; 0x23
 8008f1c:	18fb      	adds	r3, r7, r3
 8008f1e:	2200      	movs	r2, #0
 8008f20:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	225c      	movs	r2, #92	; 0x5c
 8008f26:	5c9b      	ldrb	r3, [r3, r2]
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d101      	bne.n	8008f30 <HAL_SPI_TransmitReceive+0x2c>
 8008f2c:	2302      	movs	r3, #2
 8008f2e:	e1b5      	b.n	800929c <HAL_SPI_TransmitReceive+0x398>
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	225c      	movs	r2, #92	; 0x5c
 8008f34:	2101      	movs	r1, #1
 8008f36:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f38:	f7fb fc64 	bl	8004804 <HAL_GetTick>
 8008f3c:	0003      	movs	r3, r0
 8008f3e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008f40:	201b      	movs	r0, #27
 8008f42:	183b      	adds	r3, r7, r0
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	215d      	movs	r1, #93	; 0x5d
 8008f48:	5c52      	ldrb	r2, [r2, r1]
 8008f4a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008f52:	2312      	movs	r3, #18
 8008f54:	18fb      	adds	r3, r7, r3
 8008f56:	1cba      	adds	r2, r7, #2
 8008f58:	8812      	ldrh	r2, [r2, #0]
 8008f5a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008f5c:	183b      	adds	r3, r7, r0
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d011      	beq.n	8008f88 <HAL_SPI_TransmitReceive+0x84>
 8008f64:	697a      	ldr	r2, [r7, #20]
 8008f66:	2382      	movs	r3, #130	; 0x82
 8008f68:	005b      	lsls	r3, r3, #1
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d107      	bne.n	8008f7e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d103      	bne.n	8008f7e <HAL_SPI_TransmitReceive+0x7a>
 8008f76:	183b      	adds	r3, r7, r0
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	2b04      	cmp	r3, #4
 8008f7c:	d004      	beq.n	8008f88 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8008f7e:	2323      	movs	r3, #35	; 0x23
 8008f80:	18fb      	adds	r3, r7, r3
 8008f82:	2202      	movs	r2, #2
 8008f84:	701a      	strb	r2, [r3, #0]
    goto error;
 8008f86:	e17e      	b.n	8009286 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d006      	beq.n	8008f9c <HAL_SPI_TransmitReceive+0x98>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d003      	beq.n	8008f9c <HAL_SPI_TransmitReceive+0x98>
 8008f94:	1cbb      	adds	r3, r7, #2
 8008f96:	881b      	ldrh	r3, [r3, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d104      	bne.n	8008fa6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8008f9c:	2323      	movs	r3, #35	; 0x23
 8008f9e:	18fb      	adds	r3, r7, r3
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	701a      	strb	r2, [r3, #0]
    goto error;
 8008fa4:	e16f      	b.n	8009286 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	225d      	movs	r2, #93	; 0x5d
 8008faa:	5c9b      	ldrb	r3, [r3, r2]
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	2b04      	cmp	r3, #4
 8008fb0:	d003      	beq.n	8008fba <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	225d      	movs	r2, #93	; 0x5d
 8008fb6:	2105      	movs	r1, #5
 8008fb8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	1cba      	adds	r2, r7, #2
 8008fca:	2146      	movs	r1, #70	; 0x46
 8008fcc:	8812      	ldrh	r2, [r2, #0]
 8008fce:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	1cba      	adds	r2, r7, #2
 8008fd4:	2144      	movs	r1, #68	; 0x44
 8008fd6:	8812      	ldrh	r2, [r2, #0]
 8008fd8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	68ba      	ldr	r2, [r7, #8]
 8008fde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	1cba      	adds	r2, r7, #2
 8008fe4:	8812      	ldrh	r2, [r2, #0]
 8008fe6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	1cba      	adds	r2, r7, #2
 8008fec:	8812      	ldrh	r2, [r2, #0]
 8008fee:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	68da      	ldr	r2, [r3, #12]
 8009000:	23e0      	movs	r3, #224	; 0xe0
 8009002:	00db      	lsls	r3, r3, #3
 8009004:	429a      	cmp	r2, r3
 8009006:	d908      	bls.n	800901a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	685a      	ldr	r2, [r3, #4]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	49a4      	ldr	r1, [pc, #656]	; (80092a4 <HAL_SPI_TransmitReceive+0x3a0>)
 8009014:	400a      	ands	r2, r1
 8009016:	605a      	str	r2, [r3, #4]
 8009018:	e008      	b.n	800902c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	685a      	ldr	r2, [r3, #4]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2180      	movs	r1, #128	; 0x80
 8009026:	0149      	lsls	r1, r1, #5
 8009028:	430a      	orrs	r2, r1
 800902a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2240      	movs	r2, #64	; 0x40
 8009034:	4013      	ands	r3, r2
 8009036:	2b40      	cmp	r3, #64	; 0x40
 8009038:	d007      	beq.n	800904a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2140      	movs	r1, #64	; 0x40
 8009046:	430a      	orrs	r2, r1
 8009048:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	68da      	ldr	r2, [r3, #12]
 800904e:	23e0      	movs	r3, #224	; 0xe0
 8009050:	00db      	lsls	r3, r3, #3
 8009052:	429a      	cmp	r2, r3
 8009054:	d800      	bhi.n	8009058 <HAL_SPI_TransmitReceive+0x154>
 8009056:	e07f      	b.n	8009158 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d005      	beq.n	800906c <HAL_SPI_TransmitReceive+0x168>
 8009060:	2312      	movs	r3, #18
 8009062:	18fb      	adds	r3, r7, r3
 8009064:	881b      	ldrh	r3, [r3, #0]
 8009066:	2b01      	cmp	r3, #1
 8009068:	d000      	beq.n	800906c <HAL_SPI_TransmitReceive+0x168>
 800906a:	e069      	b.n	8009140 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009070:	881a      	ldrh	r2, [r3, #0]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800907c:	1c9a      	adds	r2, r3, #2
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009086:	b29b      	uxth	r3, r3
 8009088:	3b01      	subs	r3, #1
 800908a:	b29a      	uxth	r2, r3
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009090:	e056      	b.n	8009140 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	2202      	movs	r2, #2
 800909a:	4013      	ands	r3, r2
 800909c:	2b02      	cmp	r3, #2
 800909e:	d11b      	bne.n	80090d8 <HAL_SPI_TransmitReceive+0x1d4>
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d016      	beq.n	80090d8 <HAL_SPI_TransmitReceive+0x1d4>
 80090aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d113      	bne.n	80090d8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b4:	881a      	ldrh	r2, [r3, #0]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c0:	1c9a      	adds	r2, r3, #2
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	3b01      	subs	r3, #1
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80090d4:	2300      	movs	r3, #0
 80090d6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	2201      	movs	r2, #1
 80090e0:	4013      	ands	r3, r2
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d11c      	bne.n	8009120 <HAL_SPI_TransmitReceive+0x21c>
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2246      	movs	r2, #70	; 0x46
 80090ea:	5a9b      	ldrh	r3, [r3, r2]
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d016      	beq.n	8009120 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	68da      	ldr	r2, [r3, #12]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090fc:	b292      	uxth	r2, r2
 80090fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009104:	1c9a      	adds	r2, r3, #2
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2246      	movs	r2, #70	; 0x46
 800910e:	5a9b      	ldrh	r3, [r3, r2]
 8009110:	b29b      	uxth	r3, r3
 8009112:	3b01      	subs	r3, #1
 8009114:	b299      	uxth	r1, r3
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2246      	movs	r2, #70	; 0x46
 800911a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800911c:	2301      	movs	r3, #1
 800911e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009120:	f7fb fb70 	bl	8004804 <HAL_GetTick>
 8009124:	0002      	movs	r2, r0
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800912c:	429a      	cmp	r2, r3
 800912e:	d807      	bhi.n	8009140 <HAL_SPI_TransmitReceive+0x23c>
 8009130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009132:	3301      	adds	r3, #1
 8009134:	d004      	beq.n	8009140 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8009136:	2323      	movs	r3, #35	; 0x23
 8009138:	18fb      	adds	r3, r7, r3
 800913a:	2203      	movs	r2, #3
 800913c:	701a      	strb	r2, [r3, #0]
        goto error;
 800913e:	e0a2      	b.n	8009286 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009144:	b29b      	uxth	r3, r3
 8009146:	2b00      	cmp	r3, #0
 8009148:	d1a3      	bne.n	8009092 <HAL_SPI_TransmitReceive+0x18e>
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2246      	movs	r2, #70	; 0x46
 800914e:	5a9b      	ldrh	r3, [r3, r2]
 8009150:	b29b      	uxth	r3, r3
 8009152:	2b00      	cmp	r3, #0
 8009154:	d19d      	bne.n	8009092 <HAL_SPI_TransmitReceive+0x18e>
 8009156:	e085      	b.n	8009264 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d005      	beq.n	800916c <HAL_SPI_TransmitReceive+0x268>
 8009160:	2312      	movs	r3, #18
 8009162:	18fb      	adds	r3, r7, r3
 8009164:	881b      	ldrh	r3, [r3, #0]
 8009166:	2b01      	cmp	r3, #1
 8009168:	d000      	beq.n	800916c <HAL_SPI_TransmitReceive+0x268>
 800916a:	e070      	b.n	800924e <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	330c      	adds	r3, #12
 8009176:	7812      	ldrb	r2, [r2, #0]
 8009178:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917e:	1c5a      	adds	r2, r3, #1
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009188:	b29b      	uxth	r3, r3
 800918a:	3b01      	subs	r3, #1
 800918c:	b29a      	uxth	r2, r3
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009192:	e05c      	b.n	800924e <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	2202      	movs	r2, #2
 800919c:	4013      	ands	r3, r2
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d11c      	bne.n	80091dc <HAL_SPI_TransmitReceive+0x2d8>
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d017      	beq.n	80091dc <HAL_SPI_TransmitReceive+0x2d8>
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d114      	bne.n	80091dc <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	330c      	adds	r3, #12
 80091bc:	7812      	ldrb	r2, [r2, #0]
 80091be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c4:	1c5a      	adds	r2, r3, #1
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	3b01      	subs	r3, #1
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80091d8:	2300      	movs	r3, #0
 80091da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	2201      	movs	r2, #1
 80091e4:	4013      	ands	r3, r2
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d11e      	bne.n	8009228 <HAL_SPI_TransmitReceive+0x324>
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2246      	movs	r2, #70	; 0x46
 80091ee:	5a9b      	ldrh	r3, [r3, r2]
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d018      	beq.n	8009228 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	330c      	adds	r3, #12
 80091fc:	001a      	movs	r2, r3
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009202:	7812      	ldrb	r2, [r2, #0]
 8009204:	b2d2      	uxtb	r2, r2
 8009206:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920c:	1c5a      	adds	r2, r3, #1
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2246      	movs	r2, #70	; 0x46
 8009216:	5a9b      	ldrh	r3, [r3, r2]
 8009218:	b29b      	uxth	r3, r3
 800921a:	3b01      	subs	r3, #1
 800921c:	b299      	uxth	r1, r3
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2246      	movs	r2, #70	; 0x46
 8009222:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009224:	2301      	movs	r3, #1
 8009226:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009228:	f7fb faec 	bl	8004804 <HAL_GetTick>
 800922c:	0002      	movs	r2, r0
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	1ad3      	subs	r3, r2, r3
 8009232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009234:	429a      	cmp	r2, r3
 8009236:	d802      	bhi.n	800923e <HAL_SPI_TransmitReceive+0x33a>
 8009238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923a:	3301      	adds	r3, #1
 800923c:	d102      	bne.n	8009244 <HAL_SPI_TransmitReceive+0x340>
 800923e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009240:	2b00      	cmp	r3, #0
 8009242:	d104      	bne.n	800924e <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8009244:	2323      	movs	r3, #35	; 0x23
 8009246:	18fb      	adds	r3, r7, r3
 8009248:	2203      	movs	r2, #3
 800924a:	701a      	strb	r2, [r3, #0]
        goto error;
 800924c:	e01b      	b.n	8009286 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009252:	b29b      	uxth	r3, r3
 8009254:	2b00      	cmp	r3, #0
 8009256:	d19d      	bne.n	8009194 <HAL_SPI_TransmitReceive+0x290>
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2246      	movs	r2, #70	; 0x46
 800925c:	5a9b      	ldrh	r3, [r3, r2]
 800925e:	b29b      	uxth	r3, r3
 8009260:	2b00      	cmp	r3, #0
 8009262:	d197      	bne.n	8009194 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009264:	69fa      	ldr	r2, [r7, #28]
 8009266:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	0018      	movs	r0, r3
 800926c:	f000 fea8 	bl	8009fc0 <SPI_EndRxTxTransaction>
 8009270:	1e03      	subs	r3, r0, #0
 8009272:	d007      	beq.n	8009284 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8009274:	2323      	movs	r3, #35	; 0x23
 8009276:	18fb      	adds	r3, r7, r3
 8009278:	2201      	movs	r2, #1
 800927a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2220      	movs	r2, #32
 8009280:	661a      	str	r2, [r3, #96]	; 0x60
 8009282:	e000      	b.n	8009286 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8009284:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	225d      	movs	r2, #93	; 0x5d
 800928a:	2101      	movs	r1, #1
 800928c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	225c      	movs	r2, #92	; 0x5c
 8009292:	2100      	movs	r1, #0
 8009294:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009296:	2323      	movs	r3, #35	; 0x23
 8009298:	18fb      	adds	r3, r7, r3
 800929a:	781b      	ldrb	r3, [r3, #0]
}
 800929c:	0018      	movs	r0, r3
 800929e:	46bd      	mov	sp, r7
 80092a0:	b00a      	add	sp, #40	; 0x28
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	ffffefff 	.word	0xffffefff

080092a8 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80092a8:	b590      	push	{r4, r7, lr}
 80092aa:	b087      	sub	sp, #28
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	1dbb      	adds	r3, r7, #6
 80092b4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80092b6:	2317      	movs	r3, #23
 80092b8:	18fb      	adds	r3, r7, r3
 80092ba:	2200      	movs	r2, #0
 80092bc:	701a      	strb	r2, [r3, #0]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d112      	bne.n	80092ec <HAL_SPI_Receive_DMA+0x44>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	685a      	ldr	r2, [r3, #4]
 80092ca:	2382      	movs	r3, #130	; 0x82
 80092cc:	005b      	lsls	r3, r3, #1
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d10c      	bne.n	80092ec <HAL_SPI_Receive_DMA+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	225d      	movs	r2, #93	; 0x5d
 80092d6:	2104      	movs	r1, #4
 80092d8:	5499      	strb	r1, [r3, r2]

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80092da:	1dbb      	adds	r3, r7, #6
 80092dc:	881b      	ldrh	r3, [r3, #0]
 80092de:	68ba      	ldr	r2, [r7, #8]
 80092e0:	68b9      	ldr	r1, [r7, #8]
 80092e2:	68f8      	ldr	r0, [r7, #12]
 80092e4:	f000 f91e 	bl	8009524 <HAL_SPI_TransmitReceive_DMA>
 80092e8:	0003      	movs	r3, r0
 80092ea:	e10b      	b.n	8009504 <HAL_SPI_Receive_DMA+0x25c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	225c      	movs	r2, #92	; 0x5c
 80092f0:	5c9b      	ldrb	r3, [r3, r2]
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d101      	bne.n	80092fa <HAL_SPI_Receive_DMA+0x52>
 80092f6:	2302      	movs	r3, #2
 80092f8:	e104      	b.n	8009504 <HAL_SPI_Receive_DMA+0x25c>
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	225c      	movs	r2, #92	; 0x5c
 80092fe:	2101      	movs	r1, #1
 8009300:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	225d      	movs	r2, #93	; 0x5d
 8009306:	5c9b      	ldrb	r3, [r3, r2]
 8009308:	b2db      	uxtb	r3, r3
 800930a:	2b01      	cmp	r3, #1
 800930c:	d004      	beq.n	8009318 <HAL_SPI_Receive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 800930e:	2317      	movs	r3, #23
 8009310:	18fb      	adds	r3, r7, r3
 8009312:	2202      	movs	r2, #2
 8009314:	701a      	strb	r2, [r3, #0]
    goto error;
 8009316:	e0ee      	b.n	80094f6 <HAL_SPI_Receive_DMA+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d003      	beq.n	8009326 <HAL_SPI_Receive_DMA+0x7e>
 800931e:	1dbb      	adds	r3, r7, #6
 8009320:	881b      	ldrh	r3, [r3, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d104      	bne.n	8009330 <HAL_SPI_Receive_DMA+0x88>
  {
    errorcode = HAL_ERROR;
 8009326:	2317      	movs	r3, #23
 8009328:	18fb      	adds	r3, r7, r3
 800932a:	2201      	movs	r2, #1
 800932c:	701a      	strb	r2, [r3, #0]
    goto error;
 800932e:	e0e2      	b.n	80094f6 <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	225d      	movs	r2, #93	; 0x5d
 8009334:	2104      	movs	r1, #4
 8009336:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2200      	movs	r2, #0
 800933c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	68ba      	ldr	r2, [r7, #8]
 8009342:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	1dba      	adds	r2, r7, #6
 8009348:	2144      	movs	r1, #68	; 0x44
 800934a:	8812      	ldrh	r2, [r2, #0]
 800934c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	1dba      	adds	r2, r7, #6
 8009352:	2146      	movs	r1, #70	; 0x46
 8009354:	8812      	ldrh	r2, [r2, #0]
 8009356:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2200      	movs	r2, #0
 800935c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2200      	movs	r2, #0
 8009362:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2200      	movs	r2, #0
 8009368:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2200      	movs	r2, #0
 800936e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	689a      	ldr	r2, [r3, #8]
 8009374:	2380      	movs	r3, #128	; 0x80
 8009376:	021b      	lsls	r3, r3, #8
 8009378:	429a      	cmp	r2, r3
 800937a:	d10f      	bne.n	800939c <HAL_SPI_Receive_DMA+0xf4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2140      	movs	r1, #64	; 0x40
 8009388:	438a      	bics	r2, r1
 800938a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	495d      	ldr	r1, [pc, #372]	; (800950c <HAL_SPI_Receive_DMA+0x264>)
 8009398:	400a      	ands	r2, r1
 800939a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	685a      	ldr	r2, [r3, #4]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	495a      	ldr	r1, [pc, #360]	; (8009510 <HAL_SPI_Receive_DMA+0x268>)
 80093a8:	400a      	ands	r2, r1
 80093aa:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	68da      	ldr	r2, [r3, #12]
 80093b0:	23e0      	movs	r3, #224	; 0xe0
 80093b2:	00db      	lsls	r3, r3, #3
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d908      	bls.n	80093ca <HAL_SPI_Receive_DMA+0x122>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	685a      	ldr	r2, [r3, #4]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4954      	ldr	r1, [pc, #336]	; (8009514 <HAL_SPI_Receive_DMA+0x26c>)
 80093c4:	400a      	ands	r2, r1
 80093c6:	605a      	str	r2, [r3, #4]
 80093c8:	e045      	b.n	8009456 <HAL_SPI_Receive_DMA+0x1ae>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	685a      	ldr	r2, [r3, #4]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2180      	movs	r1, #128	; 0x80
 80093d6:	0149      	lsls	r1, r1, #5
 80093d8:	430a      	orrs	r2, r1
 80093da:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093e0:	699a      	ldr	r2, [r3, #24]
 80093e2:	2380      	movs	r3, #128	; 0x80
 80093e4:	00db      	lsls	r3, r3, #3
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d135      	bne.n	8009456 <HAL_SPI_Receive_DMA+0x1ae>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	685a      	ldr	r2, [r3, #4]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4947      	ldr	r1, [pc, #284]	; (8009514 <HAL_SPI_Receive_DMA+0x26c>)
 80093f6:	400a      	ands	r2, r1
 80093f8:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2246      	movs	r2, #70	; 0x46
 80093fe:	5a9b      	ldrh	r3, [r3, r2]
 8009400:	b29b      	uxth	r3, r3
 8009402:	001a      	movs	r2, r3
 8009404:	2301      	movs	r3, #1
 8009406:	4013      	ands	r3, r2
 8009408:	d111      	bne.n	800942e <HAL_SPI_Receive_DMA+0x186>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	685a      	ldr	r2, [r3, #4]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	493e      	ldr	r1, [pc, #248]	; (8009510 <HAL_SPI_Receive_DMA+0x268>)
 8009416:	400a      	ands	r2, r1
 8009418:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2246      	movs	r2, #70	; 0x46
 800941e:	5a9b      	ldrh	r3, [r3, r2]
 8009420:	b29b      	uxth	r3, r3
 8009422:	085b      	lsrs	r3, r3, #1
 8009424:	b299      	uxth	r1, r3
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2246      	movs	r2, #70	; 0x46
 800942a:	5299      	strh	r1, [r3, r2]
 800942c:	e013      	b.n	8009456 <HAL_SPI_Receive_DMA+0x1ae>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	685a      	ldr	r2, [r3, #4]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2180      	movs	r1, #128	; 0x80
 800943a:	0189      	lsls	r1, r1, #6
 800943c:	430a      	orrs	r2, r1
 800943e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2246      	movs	r2, #70	; 0x46
 8009444:	5a9b      	ldrh	r3, [r3, r2]
 8009446:	b29b      	uxth	r3, r3
 8009448:	085b      	lsrs	r3, r3, #1
 800944a:	b29b      	uxth	r3, r3
 800944c:	3301      	adds	r3, #1
 800944e:	b299      	uxth	r1, r3
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2246      	movs	r2, #70	; 0x46
 8009454:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800945a:	4a2f      	ldr	r2, [pc, #188]	; (8009518 <HAL_SPI_Receive_DMA+0x270>)
 800945c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009462:	4a2e      	ldr	r2, [pc, #184]	; (800951c <HAL_SPI_Receive_DMA+0x274>)
 8009464:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800946a:	4a2d      	ldr	r2, [pc, #180]	; (8009520 <HAL_SPI_Receive_DMA+0x278>)
 800946c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009472:	2200      	movs	r2, #0
 8009474:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	330c      	adds	r3, #12
 8009480:	0019      	movs	r1, r3
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009486:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2246      	movs	r2, #70	; 0x46
 800948c:	5a9b      	ldrh	r3, [r3, r2]
 800948e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009490:	0022      	movs	r2, r4
 8009492:	f7fb fdc3 	bl	800501c <HAL_DMA_Start_IT>
 8009496:	1e03      	subs	r3, r0, #0
 8009498:	d00e      	beq.n	80094b8 <HAL_SPI_Receive_DMA+0x210>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800949e:	2210      	movs	r2, #16
 80094a0:	431a      	orrs	r2, r3
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80094a6:	2317      	movs	r3, #23
 80094a8:	18fb      	adds	r3, r7, r3
 80094aa:	2201      	movs	r2, #1
 80094ac:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	225d      	movs	r2, #93	; 0x5d
 80094b2:	2101      	movs	r1, #1
 80094b4:	5499      	strb	r1, [r3, r2]
    goto error;
 80094b6:	e01e      	b.n	80094f6 <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2240      	movs	r2, #64	; 0x40
 80094c0:	4013      	ands	r3, r2
 80094c2:	2b40      	cmp	r3, #64	; 0x40
 80094c4:	d007      	beq.n	80094d6 <HAL_SPI_Receive_DMA+0x22e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2140      	movs	r1, #64	; 0x40
 80094d2:	430a      	orrs	r2, r1
 80094d4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	685a      	ldr	r2, [r3, #4]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2120      	movs	r1, #32
 80094e2:	430a      	orrs	r2, r1
 80094e4:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	685a      	ldr	r2, [r3, #4]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2101      	movs	r1, #1
 80094f2:	430a      	orrs	r2, r1
 80094f4:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	225c      	movs	r2, #92	; 0x5c
 80094fa:	2100      	movs	r1, #0
 80094fc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80094fe:	2317      	movs	r3, #23
 8009500:	18fb      	adds	r3, r7, r3
 8009502:	781b      	ldrb	r3, [r3, #0]
}
 8009504:	0018      	movs	r0, r3
 8009506:	46bd      	mov	sp, r7
 8009508:	b007      	add	sp, #28
 800950a:	bd90      	pop	{r4, r7, pc}
 800950c:	ffffbfff 	.word	0xffffbfff
 8009510:	ffffdfff 	.word	0xffffdfff
 8009514:	ffffefff 	.word	0xffffefff
 8009518:	08009bfb 	.word	0x08009bfb
 800951c:	08009ab5 	.word	0x08009ab5
 8009520:	08009c37 	.word	0x08009c37

08009524 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8009524:	b590      	push	{r4, r7, lr}
 8009526:	b087      	sub	sp, #28
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	607a      	str	r2, [r7, #4]
 8009530:	001a      	movs	r2, r3
 8009532:	1cbb      	adds	r3, r7, #2
 8009534:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009536:	2317      	movs	r3, #23
 8009538:	18fb      	adds	r3, r7, r3
 800953a:	2200      	movs	r2, #0
 800953c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	225c      	movs	r2, #92	; 0x5c
 8009542:	5c9b      	ldrb	r3, [r3, r2]
 8009544:	2b01      	cmp	r3, #1
 8009546:	d101      	bne.n	800954c <HAL_SPI_TransmitReceive_DMA+0x28>
 8009548:	2302      	movs	r3, #2
 800954a:	e186      	b.n	800985a <HAL_SPI_TransmitReceive_DMA+0x336>
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	225c      	movs	r2, #92	; 0x5c
 8009550:	2101      	movs	r1, #1
 8009552:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009554:	2016      	movs	r0, #22
 8009556:	183b      	adds	r3, r7, r0
 8009558:	68fa      	ldr	r2, [r7, #12]
 800955a:	215d      	movs	r1, #93	; 0x5d
 800955c:	5c52      	ldrb	r2, [r2, r1]
 800955e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8009566:	0001      	movs	r1, r0
 8009568:	187b      	adds	r3, r7, r1
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	2b01      	cmp	r3, #1
 800956e:	d011      	beq.n	8009594 <HAL_SPI_TransmitReceive_DMA+0x70>
 8009570:	693a      	ldr	r2, [r7, #16]
 8009572:	2382      	movs	r3, #130	; 0x82
 8009574:	005b      	lsls	r3, r3, #1
 8009576:	429a      	cmp	r2, r3
 8009578:	d107      	bne.n	800958a <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d103      	bne.n	800958a <HAL_SPI_TransmitReceive_DMA+0x66>
 8009582:	187b      	adds	r3, r7, r1
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	2b04      	cmp	r3, #4
 8009588:	d004      	beq.n	8009594 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 800958a:	2317      	movs	r3, #23
 800958c:	18fb      	adds	r3, r7, r3
 800958e:	2202      	movs	r2, #2
 8009590:	701a      	strb	r2, [r3, #0]
    goto error;
 8009592:	e15b      	b.n	800984c <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d006      	beq.n	80095a8 <HAL_SPI_TransmitReceive_DMA+0x84>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d003      	beq.n	80095a8 <HAL_SPI_TransmitReceive_DMA+0x84>
 80095a0:	1cbb      	adds	r3, r7, #2
 80095a2:	881b      	ldrh	r3, [r3, #0]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d104      	bne.n	80095b2 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 80095a8:	2317      	movs	r3, #23
 80095aa:	18fb      	adds	r3, r7, r3
 80095ac:	2201      	movs	r2, #1
 80095ae:	701a      	strb	r2, [r3, #0]
    goto error;
 80095b0:	e14c      	b.n	800984c <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	225d      	movs	r2, #93	; 0x5d
 80095b6:	5c9b      	ldrb	r3, [r3, r2]
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	2b04      	cmp	r3, #4
 80095bc:	d003      	beq.n	80095c6 <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	225d      	movs	r2, #93	; 0x5d
 80095c2:	2105      	movs	r1, #5
 80095c4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2200      	movs	r2, #0
 80095ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	68ba      	ldr	r2, [r7, #8]
 80095d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	1cba      	adds	r2, r7, #2
 80095d6:	8812      	ldrh	r2, [r2, #0]
 80095d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	1cba      	adds	r2, r7, #2
 80095de:	8812      	ldrh	r2, [r2, #0]
 80095e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	1cba      	adds	r2, r7, #2
 80095ec:	2144      	movs	r1, #68	; 0x44
 80095ee:	8812      	ldrh	r2, [r2, #0]
 80095f0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	1cba      	adds	r2, r7, #2
 80095f6:	2146      	movs	r1, #70	; 0x46
 80095f8:	8812      	ldrh	r2, [r2, #0]
 80095fa:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2200      	movs	r2, #0
 8009600:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2200      	movs	r2, #0
 8009606:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	685a      	ldr	r2, [r3, #4]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4994      	ldr	r1, [pc, #592]	; (8009864 <HAL_SPI_TransmitReceive_DMA+0x340>)
 8009614:	400a      	ands	r2, r1
 8009616:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	68da      	ldr	r2, [r3, #12]
 800961c:	23e0      	movs	r3, #224	; 0xe0
 800961e:	00db      	lsls	r3, r3, #3
 8009620:	429a      	cmp	r2, r3
 8009622:	d908      	bls.n	8009636 <HAL_SPI_TransmitReceive_DMA+0x112>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	685a      	ldr	r2, [r3, #4]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	498e      	ldr	r1, [pc, #568]	; (8009868 <HAL_SPI_TransmitReceive_DMA+0x344>)
 8009630:	400a      	ands	r2, r1
 8009632:	605a      	str	r2, [r3, #4]
 8009634:	e074      	b.n	8009720 <HAL_SPI_TransmitReceive_DMA+0x1fc>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	685a      	ldr	r2, [r3, #4]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2180      	movs	r1, #128	; 0x80
 8009642:	0149      	lsls	r1, r1, #5
 8009644:	430a      	orrs	r2, r1
 8009646:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800964c:	699a      	ldr	r2, [r3, #24]
 800964e:	2380      	movs	r3, #128	; 0x80
 8009650:	00db      	lsls	r3, r3, #3
 8009652:	429a      	cmp	r2, r3
 8009654:	d127      	bne.n	80096a6 <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800965a:	001a      	movs	r2, r3
 800965c:	2301      	movs	r3, #1
 800965e:	4013      	ands	r3, r2
 8009660:	d10f      	bne.n	8009682 <HAL_SPI_TransmitReceive_DMA+0x15e>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	685a      	ldr	r2, [r3, #4]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	497f      	ldr	r1, [pc, #508]	; (800986c <HAL_SPI_TransmitReceive_DMA+0x348>)
 800966e:	400a      	ands	r2, r1
 8009670:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009676:	b29b      	uxth	r3, r3
 8009678:	085b      	lsrs	r3, r3, #1
 800967a:	b29a      	uxth	r2, r3
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009680:	e011      	b.n	80096a6 <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	685a      	ldr	r2, [r3, #4]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2180      	movs	r1, #128	; 0x80
 800968e:	01c9      	lsls	r1, r1, #7
 8009690:	430a      	orrs	r2, r1
 8009692:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009698:	b29b      	uxth	r3, r3
 800969a:	085b      	lsrs	r3, r3, #1
 800969c:	b29b      	uxth	r3, r3
 800969e:	3301      	adds	r3, #1
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096aa:	699a      	ldr	r2, [r3, #24]
 80096ac:	2380      	movs	r3, #128	; 0x80
 80096ae:	00db      	lsls	r3, r3, #3
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d135      	bne.n	8009720 <HAL_SPI_TransmitReceive_DMA+0x1fc>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	685a      	ldr	r2, [r3, #4]
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	496a      	ldr	r1, [pc, #424]	; (8009868 <HAL_SPI_TransmitReceive_DMA+0x344>)
 80096c0:	400a      	ands	r2, r1
 80096c2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2246      	movs	r2, #70	; 0x46
 80096c8:	5a9b      	ldrh	r3, [r3, r2]
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	001a      	movs	r2, r3
 80096ce:	2301      	movs	r3, #1
 80096d0:	4013      	ands	r3, r2
 80096d2:	d111      	bne.n	80096f8 <HAL_SPI_TransmitReceive_DMA+0x1d4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	685a      	ldr	r2, [r3, #4]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4964      	ldr	r1, [pc, #400]	; (8009870 <HAL_SPI_TransmitReceive_DMA+0x34c>)
 80096e0:	400a      	ands	r2, r1
 80096e2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2246      	movs	r2, #70	; 0x46
 80096e8:	5a9b      	ldrh	r3, [r3, r2]
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	085b      	lsrs	r3, r3, #1
 80096ee:	b299      	uxth	r1, r3
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2246      	movs	r2, #70	; 0x46
 80096f4:	5299      	strh	r1, [r3, r2]
 80096f6:	e013      	b.n	8009720 <HAL_SPI_TransmitReceive_DMA+0x1fc>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	685a      	ldr	r2, [r3, #4]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2180      	movs	r1, #128	; 0x80
 8009704:	0189      	lsls	r1, r1, #6
 8009706:	430a      	orrs	r2, r1
 8009708:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2246      	movs	r2, #70	; 0x46
 800970e:	5a9b      	ldrh	r3, [r3, r2]
 8009710:	b29b      	uxth	r3, r3
 8009712:	085b      	lsrs	r3, r3, #1
 8009714:	b29b      	uxth	r3, r3
 8009716:	3301      	adds	r3, #1
 8009718:	b299      	uxth	r1, r3
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2246      	movs	r2, #70	; 0x46
 800971e:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	225d      	movs	r2, #93	; 0x5d
 8009724:	5c9b      	ldrb	r3, [r3, r2]
 8009726:	b2db      	uxtb	r3, r3
 8009728:	2b04      	cmp	r3, #4
 800972a:	d108      	bne.n	800973e <HAL_SPI_TransmitReceive_DMA+0x21a>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009730:	4a50      	ldr	r2, [pc, #320]	; (8009874 <HAL_SPI_TransmitReceive_DMA+0x350>)
 8009732:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009738:	4a4f      	ldr	r2, [pc, #316]	; (8009878 <HAL_SPI_TransmitReceive_DMA+0x354>)
 800973a:	62da      	str	r2, [r3, #44]	; 0x2c
 800973c:	e007      	b.n	800974e <HAL_SPI_TransmitReceive_DMA+0x22a>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009742:	4a4e      	ldr	r2, [pc, #312]	; (800987c <HAL_SPI_TransmitReceive_DMA+0x358>)
 8009744:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800974a:	4a4d      	ldr	r2, [pc, #308]	; (8009880 <HAL_SPI_TransmitReceive_DMA+0x35c>)
 800974c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009752:	4a4c      	ldr	r2, [pc, #304]	; (8009884 <HAL_SPI_TransmitReceive_DMA+0x360>)
 8009754:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800975a:	2200      	movs	r2, #0
 800975c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	330c      	adds	r3, #12
 8009768:	0019      	movs	r1, r3
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800976e:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2246      	movs	r2, #70	; 0x46
 8009774:	5a9b      	ldrh	r3, [r3, r2]
 8009776:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009778:	0022      	movs	r2, r4
 800977a:	f7fb fc4f 	bl	800501c <HAL_DMA_Start_IT>
 800977e:	1e03      	subs	r3, r0, #0
 8009780:	d00e      	beq.n	80097a0 <HAL_SPI_TransmitReceive_DMA+0x27c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009786:	2210      	movs	r2, #16
 8009788:	431a      	orrs	r2, r3
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800978e:	2317      	movs	r3, #23
 8009790:	18fb      	adds	r3, r7, r3
 8009792:	2201      	movs	r2, #1
 8009794:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	225d      	movs	r2, #93	; 0x5d
 800979a:	2101      	movs	r1, #1
 800979c:	5499      	strb	r1, [r3, r2]
    goto error;
 800979e:	e055      	b.n	800984c <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	685a      	ldr	r2, [r3, #4]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2101      	movs	r1, #1
 80097ac:	430a      	orrs	r2, r1
 80097ae:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097b4:	2200      	movs	r2, #0
 80097b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097bc:	2200      	movs	r2, #0
 80097be:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c4:	2200      	movs	r2, #0
 80097c6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097cc:	2200      	movs	r2, #0
 80097ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d8:	0019      	movs	r1, r3
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	330c      	adds	r3, #12
 80097e0:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097e6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80097e8:	f7fb fc18 	bl	800501c <HAL_DMA_Start_IT>
 80097ec:	1e03      	subs	r3, r0, #0
 80097ee:	d00e      	beq.n	800980e <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097f4:	2210      	movs	r2, #16
 80097f6:	431a      	orrs	r2, r3
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80097fc:	2317      	movs	r3, #23
 80097fe:	18fb      	adds	r3, r7, r3
 8009800:	2201      	movs	r2, #1
 8009802:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	225d      	movs	r2, #93	; 0x5d
 8009808:	2101      	movs	r1, #1
 800980a:	5499      	strb	r1, [r3, r2]
    goto error;
 800980c:	e01e      	b.n	800984c <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2240      	movs	r2, #64	; 0x40
 8009816:	4013      	ands	r3, r2
 8009818:	2b40      	cmp	r3, #64	; 0x40
 800981a:	d007      	beq.n	800982c <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2140      	movs	r1, #64	; 0x40
 8009828:	430a      	orrs	r2, r1
 800982a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	685a      	ldr	r2, [r3, #4]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2120      	movs	r1, #32
 8009838:	430a      	orrs	r2, r1
 800983a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	685a      	ldr	r2, [r3, #4]
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2102      	movs	r1, #2
 8009848:	430a      	orrs	r2, r1
 800984a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	225c      	movs	r2, #92	; 0x5c
 8009850:	2100      	movs	r1, #0
 8009852:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009854:	2317      	movs	r3, #23
 8009856:	18fb      	adds	r3, r7, r3
 8009858:	781b      	ldrb	r3, [r3, #0]
}
 800985a:	0018      	movs	r0, r3
 800985c:	46bd      	mov	sp, r7
 800985e:	b007      	add	sp, #28
 8009860:	bd90      	pop	{r4, r7, pc}
 8009862:	46c0      	nop			; (mov r8, r8)
 8009864:	ffff9fff 	.word	0xffff9fff
 8009868:	ffffefff 	.word	0xffffefff
 800986c:	ffffbfff 	.word	0xffffbfff
 8009870:	ffffdfff 	.word	0xffffdfff
 8009874:	08009bfb 	.word	0x08009bfb
 8009878:	08009ab5 	.word	0x08009ab5
 800987c:	08009c19 	.word	0x08009c19
 8009880:	08009b65 	.word	0x08009b65
 8009884:	08009c37 	.word	0x08009c37

08009888 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b088      	sub	sp, #32
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	099b      	lsrs	r3, r3, #6
 80098a4:	001a      	movs	r2, r3
 80098a6:	2301      	movs	r3, #1
 80098a8:	4013      	ands	r3, r2
 80098aa:	d10f      	bne.n	80098cc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	2201      	movs	r2, #1
 80098b0:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80098b2:	d00b      	beq.n	80098cc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	099b      	lsrs	r3, r3, #6
 80098b8:	001a      	movs	r2, r3
 80098ba:	2301      	movs	r3, #1
 80098bc:	4013      	ands	r3, r2
 80098be:	d005      	beq.n	80098cc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	0010      	movs	r0, r2
 80098c8:	4798      	blx	r3
    return;
 80098ca:	e0d5      	b.n	8009a78 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80098cc:	69bb      	ldr	r3, [r7, #24]
 80098ce:	085b      	lsrs	r3, r3, #1
 80098d0:	001a      	movs	r2, r3
 80098d2:	2301      	movs	r3, #1
 80098d4:	4013      	ands	r3, r2
 80098d6:	d00b      	beq.n	80098f0 <HAL_SPI_IRQHandler+0x68>
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	09db      	lsrs	r3, r3, #7
 80098dc:	001a      	movs	r2, r3
 80098de:	2301      	movs	r3, #1
 80098e0:	4013      	ands	r3, r2
 80098e2:	d005      	beq.n	80098f0 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	0010      	movs	r0, r2
 80098ec:	4798      	blx	r3
    return;
 80098ee:	e0c3      	b.n	8009a78 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	095b      	lsrs	r3, r3, #5
 80098f4:	001a      	movs	r2, r3
 80098f6:	2301      	movs	r3, #1
 80098f8:	4013      	ands	r3, r2
 80098fa:	d10c      	bne.n	8009916 <HAL_SPI_IRQHandler+0x8e>
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	099b      	lsrs	r3, r3, #6
 8009900:	001a      	movs	r2, r3
 8009902:	2301      	movs	r3, #1
 8009904:	4013      	ands	r3, r2
 8009906:	d106      	bne.n	8009916 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	0a1b      	lsrs	r3, r3, #8
 800990c:	001a      	movs	r2, r3
 800990e:	2301      	movs	r3, #1
 8009910:	4013      	ands	r3, r2
 8009912:	d100      	bne.n	8009916 <HAL_SPI_IRQHandler+0x8e>
 8009914:	e0b0      	b.n	8009a78 <HAL_SPI_IRQHandler+0x1f0>
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	095b      	lsrs	r3, r3, #5
 800991a:	001a      	movs	r2, r3
 800991c:	2301      	movs	r3, #1
 800991e:	4013      	ands	r3, r2
 8009920:	d100      	bne.n	8009924 <HAL_SPI_IRQHandler+0x9c>
 8009922:	e0a9      	b.n	8009a78 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009924:	69bb      	ldr	r3, [r7, #24]
 8009926:	099b      	lsrs	r3, r3, #6
 8009928:	001a      	movs	r2, r3
 800992a:	2301      	movs	r3, #1
 800992c:	4013      	ands	r3, r2
 800992e:	d023      	beq.n	8009978 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	225d      	movs	r2, #93	; 0x5d
 8009934:	5c9b      	ldrb	r3, [r3, r2]
 8009936:	b2db      	uxtb	r3, r3
 8009938:	2b03      	cmp	r3, #3
 800993a:	d011      	beq.n	8009960 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009940:	2204      	movs	r2, #4
 8009942:	431a      	orrs	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009948:	2300      	movs	r3, #0
 800994a:	617b      	str	r3, [r7, #20]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	68db      	ldr	r3, [r3, #12]
 8009952:	617b      	str	r3, [r7, #20]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	617b      	str	r3, [r7, #20]
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	e00b      	b.n	8009978 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009960:	2300      	movs	r3, #0
 8009962:	613b      	str	r3, [r7, #16]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	613b      	str	r3, [r7, #16]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	613b      	str	r3, [r7, #16]
 8009974:	693b      	ldr	r3, [r7, #16]
        return;
 8009976:	e07f      	b.n	8009a78 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	095b      	lsrs	r3, r3, #5
 800997c:	001a      	movs	r2, r3
 800997e:	2301      	movs	r3, #1
 8009980:	4013      	ands	r3, r2
 8009982:	d014      	beq.n	80099ae <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009988:	2201      	movs	r2, #1
 800998a:	431a      	orrs	r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009990:	2300      	movs	r3, #0
 8009992:	60fb      	str	r3, [r7, #12]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	60fb      	str	r3, [r7, #12]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2140      	movs	r1, #64	; 0x40
 80099a8:	438a      	bics	r2, r1
 80099aa:	601a      	str	r2, [r3, #0]
 80099ac:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	0a1b      	lsrs	r3, r3, #8
 80099b2:	001a      	movs	r2, r3
 80099b4:	2301      	movs	r3, #1
 80099b6:	4013      	ands	r3, r2
 80099b8:	d00c      	beq.n	80099d4 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099be:	2208      	movs	r2, #8
 80099c0:	431a      	orrs	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80099c6:	2300      	movs	r3, #0
 80099c8:	60bb      	str	r3, [r7, #8]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	60bb      	str	r3, [r7, #8]
 80099d2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d04c      	beq.n	8009a76 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	685a      	ldr	r2, [r3, #4]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	21e0      	movs	r1, #224	; 0xe0
 80099e8:	438a      	bics	r2, r1
 80099ea:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	225d      	movs	r2, #93	; 0x5d
 80099f0:	2101      	movs	r1, #1
 80099f2:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80099f4:	69fb      	ldr	r3, [r7, #28]
 80099f6:	2202      	movs	r2, #2
 80099f8:	4013      	ands	r3, r2
 80099fa:	d103      	bne.n	8009a04 <HAL_SPI_IRQHandler+0x17c>
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	2201      	movs	r2, #1
 8009a00:	4013      	ands	r3, r2
 8009a02:	d032      	beq.n	8009a6a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	685a      	ldr	r2, [r3, #4]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2103      	movs	r1, #3
 8009a10:	438a      	bics	r2, r1
 8009a12:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d010      	beq.n	8009a3e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a20:	4a17      	ldr	r2, [pc, #92]	; (8009a80 <HAL_SPI_IRQHandler+0x1f8>)
 8009a22:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a28:	0018      	movs	r0, r3
 8009a2a:	f7fb fbdf 	bl	80051ec <HAL_DMA_Abort_IT>
 8009a2e:	1e03      	subs	r3, r0, #0
 8009a30:	d005      	beq.n	8009a3e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a36:	2240      	movs	r2, #64	; 0x40
 8009a38:	431a      	orrs	r2, r3
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d016      	beq.n	8009a74 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a4a:	4a0d      	ldr	r2, [pc, #52]	; (8009a80 <HAL_SPI_IRQHandler+0x1f8>)
 8009a4c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a52:	0018      	movs	r0, r3
 8009a54:	f7fb fbca 	bl	80051ec <HAL_DMA_Abort_IT>
 8009a58:	1e03      	subs	r3, r0, #0
 8009a5a:	d00b      	beq.n	8009a74 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a60:	2240      	movs	r2, #64	; 0x40
 8009a62:	431a      	orrs	r2, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009a68:	e004      	b.n	8009a74 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	0018      	movs	r0, r3
 8009a6e:	f000 f819 	bl	8009aa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009a72:	e000      	b.n	8009a76 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8009a74:	46c0      	nop			; (mov r8, r8)
    return;
 8009a76:	46c0      	nop			; (mov r8, r8)
  }
}
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	b008      	add	sp, #32
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	46c0      	nop			; (mov r8, r8)
 8009a80:	08009c79 	.word	0x08009c79

08009a84 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009a8c:	46c0      	nop			; (mov r8, r8)
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	b002      	add	sp, #8
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009a9c:	46c0      	nop			; (mov r8, r8)
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	b002      	add	sp, #8
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009aac:	46c0      	nop			; (mov r8, r8)
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	b002      	add	sp, #8
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac0:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009ac2:	f7fa fe9f 	bl	8004804 <HAL_GetTick>
 8009ac6:	0003      	movs	r3, r0
 8009ac8:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2220      	movs	r2, #32
 8009ad2:	4013      	ands	r3, r2
 8009ad4:	2b20      	cmp	r3, #32
 8009ad6:	d03e      	beq.n	8009b56 <SPI_DMAReceiveCplt+0xa2>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	685a      	ldr	r2, [r3, #4]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2120      	movs	r1, #32
 8009ae4:	438a      	bics	r2, r1
 8009ae6:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d10e      	bne.n	8009b0e <SPI_DMAReceiveCplt+0x5a>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	685a      	ldr	r2, [r3, #4]
 8009af4:	2382      	movs	r3, #130	; 0x82
 8009af6:	005b      	lsls	r3, r3, #1
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d108      	bne.n	8009b0e <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	685a      	ldr	r2, [r3, #4]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2103      	movs	r1, #3
 8009b08:	438a      	bics	r2, r1
 8009b0a:	605a      	str	r2, [r3, #4]
 8009b0c:	e007      	b.n	8009b1e <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	685a      	ldr	r2, [r3, #4]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2101      	movs	r1, #1
 8009b1a:	438a      	bics	r2, r1
 8009b1c:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2164      	movs	r1, #100	; 0x64
 8009b24:	0018      	movs	r0, r3
 8009b26:	f000 f9ed 	bl	8009f04 <SPI_EndRxTransaction>
 8009b2a:	1e03      	subs	r3, r0, #0
 8009b2c:	d002      	beq.n	8009b34 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2220      	movs	r2, #32
 8009b32:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2246      	movs	r2, #70	; 0x46
 8009b38:	2100      	movs	r1, #0
 8009b3a:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	225d      	movs	r2, #93	; 0x5d
 8009b40:	2101      	movs	r1, #1
 8009b42:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d004      	beq.n	8009b56 <SPI_DMAReceiveCplt+0xa2>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	0018      	movs	r0, r3
 8009b50:	f7ff ffa8 	bl	8009aa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009b54:	e003      	b.n	8009b5e <SPI_DMAReceiveCplt+0xaa>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	0018      	movs	r0, r3
 8009b5a:	f7f7 faf9 	bl	8001150 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	b004      	add	sp, #16
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b70:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009b72:	f7fa fe47 	bl	8004804 <HAL_GetTick>
 8009b76:	0003      	movs	r3, r0
 8009b78:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2220      	movs	r2, #32
 8009b82:	4013      	ands	r3, r2
 8009b84:	2b20      	cmp	r3, #32
 8009b86:	d031      	beq.n	8009bec <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	685a      	ldr	r2, [r3, #4]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	2120      	movs	r1, #32
 8009b94:	438a      	bics	r2, r1
 8009b96:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009b98:	68ba      	ldr	r2, [r7, #8]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2164      	movs	r1, #100	; 0x64
 8009b9e:	0018      	movs	r0, r3
 8009ba0:	f000 fa0e 	bl	8009fc0 <SPI_EndRxTxTransaction>
 8009ba4:	1e03      	subs	r3, r0, #0
 8009ba6:	d005      	beq.n	8009bb4 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bac:	2220      	movs	r2, #32
 8009bae:	431a      	orrs	r2, r3
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	685a      	ldr	r2, [r3, #4]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	2103      	movs	r1, #3
 8009bc0:	438a      	bics	r2, r1
 8009bc2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2246      	movs	r2, #70	; 0x46
 8009bce:	2100      	movs	r1, #0
 8009bd0:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	225d      	movs	r2, #93	; 0x5d
 8009bd6:	2101      	movs	r1, #1
 8009bd8:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d004      	beq.n	8009bec <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	0018      	movs	r0, r3
 8009be6:	f7ff ff5d 	bl	8009aa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009bea:	e003      	b.n	8009bf4 <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	0018      	movs	r0, r3
 8009bf0:	f7ff ff48 	bl	8009a84 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	b004      	add	sp, #16
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b084      	sub	sp, #16
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c06:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	0018      	movs	r0, r3
 8009c0c:	f7f7 fa5a 	bl	80010c4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009c10:	46c0      	nop			; (mov r8, r8)
 8009c12:	46bd      	mov	sp, r7
 8009c14:	b004      	add	sp, #16
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c24:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	0018      	movs	r0, r3
 8009c2a:	f7ff ff33 	bl	8009a94 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009c2e:	46c0      	nop			; (mov r8, r8)
 8009c30:	46bd      	mov	sp, r7
 8009c32:	b004      	add	sp, #16
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b084      	sub	sp, #16
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c42:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	685a      	ldr	r2, [r3, #4]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	2103      	movs	r1, #3
 8009c50:	438a      	bics	r2, r1
 8009c52:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c58:	2210      	movs	r2, #16
 8009c5a:	431a      	orrs	r2, r3
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	225d      	movs	r2, #93	; 0x5d
 8009c64:	2101      	movs	r1, #1
 8009c66:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	0018      	movs	r0, r3
 8009c6c:	f7ff ff1a 	bl	8009aa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009c70:	46c0      	nop			; (mov r8, r8)
 8009c72:	46bd      	mov	sp, r7
 8009c74:	b004      	add	sp, #16
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c84:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2246      	movs	r2, #70	; 0x46
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2200      	movs	r2, #0
 8009c92:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	0018      	movs	r0, r3
 8009c98:	f7ff ff04 	bl	8009aa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009c9c:	46c0      	nop			; (mov r8, r8)
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	b004      	add	sp, #16
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b088      	sub	sp, #32
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	603b      	str	r3, [r7, #0]
 8009cb0:	1dfb      	adds	r3, r7, #7
 8009cb2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009cb4:	f7fa fda6 	bl	8004804 <HAL_GetTick>
 8009cb8:	0002      	movs	r2, r0
 8009cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cbc:	1a9b      	subs	r3, r3, r2
 8009cbe:	683a      	ldr	r2, [r7, #0]
 8009cc0:	18d3      	adds	r3, r2, r3
 8009cc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009cc4:	f7fa fd9e 	bl	8004804 <HAL_GetTick>
 8009cc8:	0003      	movs	r3, r0
 8009cca:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009ccc:	4b3a      	ldr	r3, [pc, #232]	; (8009db8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	015b      	lsls	r3, r3, #5
 8009cd2:	0d1b      	lsrs	r3, r3, #20
 8009cd4:	69fa      	ldr	r2, [r7, #28]
 8009cd6:	4353      	muls	r3, r2
 8009cd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009cda:	e058      	b.n	8009d8e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	3301      	adds	r3, #1
 8009ce0:	d055      	beq.n	8009d8e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009ce2:	f7fa fd8f 	bl	8004804 <HAL_GetTick>
 8009ce6:	0002      	movs	r2, r0
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	1ad3      	subs	r3, r2, r3
 8009cec:	69fa      	ldr	r2, [r7, #28]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d902      	bls.n	8009cf8 <SPI_WaitFlagStateUntilTimeout+0x54>
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d142      	bne.n	8009d7e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	685a      	ldr	r2, [r3, #4]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	21e0      	movs	r1, #224	; 0xe0
 8009d04:	438a      	bics	r2, r1
 8009d06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	685a      	ldr	r2, [r3, #4]
 8009d0c:	2382      	movs	r3, #130	; 0x82
 8009d0e:	005b      	lsls	r3, r3, #1
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d113      	bne.n	8009d3c <SPI_WaitFlagStateUntilTimeout+0x98>
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	689a      	ldr	r2, [r3, #8]
 8009d18:	2380      	movs	r3, #128	; 0x80
 8009d1a:	021b      	lsls	r3, r3, #8
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d005      	beq.n	8009d2c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	689a      	ldr	r2, [r3, #8]
 8009d24:	2380      	movs	r3, #128	; 0x80
 8009d26:	00db      	lsls	r3, r3, #3
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d107      	bne.n	8009d3c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2140      	movs	r1, #64	; 0x40
 8009d38:	438a      	bics	r2, r1
 8009d3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d40:	2380      	movs	r3, #128	; 0x80
 8009d42:	019b      	lsls	r3, r3, #6
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d110      	bne.n	8009d6a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	491a      	ldr	r1, [pc, #104]	; (8009dbc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8009d54:	400a      	ands	r2, r1
 8009d56:	601a      	str	r2, [r3, #0]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2180      	movs	r1, #128	; 0x80
 8009d64:	0189      	lsls	r1, r1, #6
 8009d66:	430a      	orrs	r2, r1
 8009d68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	225d      	movs	r2, #93	; 0x5d
 8009d6e:	2101      	movs	r1, #1
 8009d70:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	225c      	movs	r2, #92	; 0x5c
 8009d76:	2100      	movs	r1, #0
 8009d78:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009d7a:	2303      	movs	r3, #3
 8009d7c:	e017      	b.n	8009dae <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d101      	bne.n	8009d88 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8009d84:	2300      	movs	r3, #0
 8009d86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	3b01      	subs	r3, #1
 8009d8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	68ba      	ldr	r2, [r7, #8]
 8009d96:	4013      	ands	r3, r2
 8009d98:	68ba      	ldr	r2, [r7, #8]
 8009d9a:	1ad3      	subs	r3, r2, r3
 8009d9c:	425a      	negs	r2, r3
 8009d9e:	4153      	adcs	r3, r2
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	001a      	movs	r2, r3
 8009da4:	1dfb      	adds	r3, r7, #7
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d197      	bne.n	8009cdc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	0018      	movs	r0, r3
 8009db0:	46bd      	mov	sp, r7
 8009db2:	b008      	add	sp, #32
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	46c0      	nop			; (mov r8, r8)
 8009db8:	20000034 	.word	0x20000034
 8009dbc:	ffffdfff 	.word	0xffffdfff

08009dc0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b08a      	sub	sp, #40	; 0x28
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]
 8009dcc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009dce:	2317      	movs	r3, #23
 8009dd0:	18fb      	adds	r3, r7, r3
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009dd6:	f7fa fd15 	bl	8004804 <HAL_GetTick>
 8009dda:	0002      	movs	r2, r0
 8009ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dde:	1a9b      	subs	r3, r3, r2
 8009de0:	683a      	ldr	r2, [r7, #0]
 8009de2:	18d3      	adds	r3, r2, r3
 8009de4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009de6:	f7fa fd0d 	bl	8004804 <HAL_GetTick>
 8009dea:	0003      	movs	r3, r0
 8009dec:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	330c      	adds	r3, #12
 8009df4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009df6:	4b41      	ldr	r3, [pc, #260]	; (8009efc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	0013      	movs	r3, r2
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	189b      	adds	r3, r3, r2
 8009e00:	00da      	lsls	r2, r3, #3
 8009e02:	1ad3      	subs	r3, r2, r3
 8009e04:	0d1b      	lsrs	r3, r3, #20
 8009e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e08:	4353      	muls	r3, r2
 8009e0a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009e0c:	e068      	b.n	8009ee0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009e0e:	68ba      	ldr	r2, [r7, #8]
 8009e10:	23c0      	movs	r3, #192	; 0xc0
 8009e12:	00db      	lsls	r3, r3, #3
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d10a      	bne.n	8009e2e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d107      	bne.n	8009e2e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009e1e:	69fb      	ldr	r3, [r7, #28]
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	b2da      	uxtb	r2, r3
 8009e24:	2117      	movs	r1, #23
 8009e26:	187b      	adds	r3, r7, r1
 8009e28:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009e2a:	187b      	adds	r3, r7, r1
 8009e2c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	3301      	adds	r3, #1
 8009e32:	d055      	beq.n	8009ee0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009e34:	f7fa fce6 	bl	8004804 <HAL_GetTick>
 8009e38:	0002      	movs	r2, r0
 8009e3a:	6a3b      	ldr	r3, [r7, #32]
 8009e3c:	1ad3      	subs	r3, r2, r3
 8009e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d902      	bls.n	8009e4a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8009e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d142      	bne.n	8009ed0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	685a      	ldr	r2, [r3, #4]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	21e0      	movs	r1, #224	; 0xe0
 8009e56:	438a      	bics	r2, r1
 8009e58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	685a      	ldr	r2, [r3, #4]
 8009e5e:	2382      	movs	r3, #130	; 0x82
 8009e60:	005b      	lsls	r3, r3, #1
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d113      	bne.n	8009e8e <SPI_WaitFifoStateUntilTimeout+0xce>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	689a      	ldr	r2, [r3, #8]
 8009e6a:	2380      	movs	r3, #128	; 0x80
 8009e6c:	021b      	lsls	r3, r3, #8
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d005      	beq.n	8009e7e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	689a      	ldr	r2, [r3, #8]
 8009e76:	2380      	movs	r3, #128	; 0x80
 8009e78:	00db      	lsls	r3, r3, #3
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d107      	bne.n	8009e8e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	2140      	movs	r1, #64	; 0x40
 8009e8a:	438a      	bics	r2, r1
 8009e8c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e92:	2380      	movs	r3, #128	; 0x80
 8009e94:	019b      	lsls	r3, r3, #6
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d110      	bne.n	8009ebc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4916      	ldr	r1, [pc, #88]	; (8009f00 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8009ea6:	400a      	ands	r2, r1
 8009ea8:	601a      	str	r2, [r3, #0]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2180      	movs	r1, #128	; 0x80
 8009eb6:	0189      	lsls	r1, r1, #6
 8009eb8:	430a      	orrs	r2, r1
 8009eba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	225d      	movs	r2, #93	; 0x5d
 8009ec0:	2101      	movs	r1, #1
 8009ec2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	225c      	movs	r2, #92	; 0x5c
 8009ec8:	2100      	movs	r1, #0
 8009eca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009ecc:	2303      	movs	r3, #3
 8009ece:	e010      	b.n	8009ef2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009ed0:	69bb      	ldr	r3, [r7, #24]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d101      	bne.n	8009eda <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	3b01      	subs	r3, #1
 8009ede:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	68ba      	ldr	r2, [r7, #8]
 8009ee8:	4013      	ands	r3, r2
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d18e      	bne.n	8009e0e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	0018      	movs	r0, r3
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	b00a      	add	sp, #40	; 0x28
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	46c0      	nop			; (mov r8, r8)
 8009efc:	20000034 	.word	0x20000034
 8009f00:	ffffdfff 	.word	0xffffdfff

08009f04 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b086      	sub	sp, #24
 8009f08:	af02      	add	r7, sp, #8
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	685a      	ldr	r2, [r3, #4]
 8009f14:	2382      	movs	r3, #130	; 0x82
 8009f16:	005b      	lsls	r3, r3, #1
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d113      	bne.n	8009f44 <SPI_EndRxTransaction+0x40>
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	689a      	ldr	r2, [r3, #8]
 8009f20:	2380      	movs	r3, #128	; 0x80
 8009f22:	021b      	lsls	r3, r3, #8
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d005      	beq.n	8009f34 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	689a      	ldr	r2, [r3, #8]
 8009f2c:	2380      	movs	r3, #128	; 0x80
 8009f2e:	00db      	lsls	r3, r3, #3
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d107      	bne.n	8009f44 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2140      	movs	r1, #64	; 0x40
 8009f40:	438a      	bics	r2, r1
 8009f42:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009f44:	68ba      	ldr	r2, [r7, #8]
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	0013      	movs	r3, r2
 8009f4e:	2200      	movs	r2, #0
 8009f50:	2180      	movs	r1, #128	; 0x80
 8009f52:	f7ff fea7 	bl	8009ca4 <SPI_WaitFlagStateUntilTimeout>
 8009f56:	1e03      	subs	r3, r0, #0
 8009f58:	d007      	beq.n	8009f6a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f5e:	2220      	movs	r2, #32
 8009f60:	431a      	orrs	r2, r3
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009f66:	2303      	movs	r3, #3
 8009f68:	e026      	b.n	8009fb8 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	685a      	ldr	r2, [r3, #4]
 8009f6e:	2382      	movs	r3, #130	; 0x82
 8009f70:	005b      	lsls	r3, r3, #1
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d11f      	bne.n	8009fb6 <SPI_EndRxTransaction+0xb2>
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	689a      	ldr	r2, [r3, #8]
 8009f7a:	2380      	movs	r3, #128	; 0x80
 8009f7c:	021b      	lsls	r3, r3, #8
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d005      	beq.n	8009f8e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	689a      	ldr	r2, [r3, #8]
 8009f86:	2380      	movs	r3, #128	; 0x80
 8009f88:	00db      	lsls	r3, r3, #3
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d113      	bne.n	8009fb6 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	23c0      	movs	r3, #192	; 0xc0
 8009f92:	00d9      	lsls	r1, r3, #3
 8009f94:	68f8      	ldr	r0, [r7, #12]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	9300      	str	r3, [sp, #0]
 8009f9a:	0013      	movs	r3, r2
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f7ff ff0f 	bl	8009dc0 <SPI_WaitFifoStateUntilTimeout>
 8009fa2:	1e03      	subs	r3, r0, #0
 8009fa4:	d007      	beq.n	8009fb6 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009faa:	2220      	movs	r2, #32
 8009fac:	431a      	orrs	r2, r3
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009fb2:	2303      	movs	r3, #3
 8009fb4:	e000      	b.n	8009fb8 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8009fb6:	2300      	movs	r3, #0
}
 8009fb8:	0018      	movs	r0, r3
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	b004      	add	sp, #16
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b086      	sub	sp, #24
 8009fc4:	af02      	add	r7, sp, #8
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009fcc:	68ba      	ldr	r2, [r7, #8]
 8009fce:	23c0      	movs	r3, #192	; 0xc0
 8009fd0:	0159      	lsls	r1, r3, #5
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	9300      	str	r3, [sp, #0]
 8009fd8:	0013      	movs	r3, r2
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f7ff fef0 	bl	8009dc0 <SPI_WaitFifoStateUntilTimeout>
 8009fe0:	1e03      	subs	r3, r0, #0
 8009fe2:	d007      	beq.n	8009ff4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fe8:	2220      	movs	r2, #32
 8009fea:	431a      	orrs	r2, r3
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009ff0:	2303      	movs	r3, #3
 8009ff2:	e027      	b.n	800a044 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009ff4:	68ba      	ldr	r2, [r7, #8]
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	9300      	str	r3, [sp, #0]
 8009ffc:	0013      	movs	r3, r2
 8009ffe:	2200      	movs	r2, #0
 800a000:	2180      	movs	r1, #128	; 0x80
 800a002:	f7ff fe4f 	bl	8009ca4 <SPI_WaitFlagStateUntilTimeout>
 800a006:	1e03      	subs	r3, r0, #0
 800a008:	d007      	beq.n	800a01a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a00e:	2220      	movs	r2, #32
 800a010:	431a      	orrs	r2, r3
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a016:	2303      	movs	r3, #3
 800a018:	e014      	b.n	800a044 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a01a:	68ba      	ldr	r2, [r7, #8]
 800a01c:	23c0      	movs	r3, #192	; 0xc0
 800a01e:	00d9      	lsls	r1, r3, #3
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	9300      	str	r3, [sp, #0]
 800a026:	0013      	movs	r3, r2
 800a028:	2200      	movs	r2, #0
 800a02a:	f7ff fec9 	bl	8009dc0 <SPI_WaitFifoStateUntilTimeout>
 800a02e:	1e03      	subs	r3, r0, #0
 800a030:	d007      	beq.n	800a042 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a036:	2220      	movs	r2, #32
 800a038:	431a      	orrs	r2, r3
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a03e:	2303      	movs	r3, #3
 800a040:	e000      	b.n	800a044 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a042:	2300      	movs	r3, #0
}
 800a044:	0018      	movs	r0, r3
 800a046:	46bd      	mov	sp, r7
 800a048:	b004      	add	sp, #16
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d101      	bne.n	800a05e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e04a      	b.n	800a0f4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	223d      	movs	r2, #61	; 0x3d
 800a062:	5c9b      	ldrb	r3, [r3, r2]
 800a064:	b2db      	uxtb	r3, r3
 800a066:	2b00      	cmp	r3, #0
 800a068:	d107      	bne.n	800a07a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	223c      	movs	r2, #60	; 0x3c
 800a06e:	2100      	movs	r1, #0
 800a070:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	0018      	movs	r0, r3
 800a076:	f7fa f8dd 	bl	8004234 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	223d      	movs	r2, #61	; 0x3d
 800a07e:	2102      	movs	r1, #2
 800a080:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	3304      	adds	r3, #4
 800a08a:	0019      	movs	r1, r3
 800a08c:	0010      	movs	r0, r2
 800a08e:	f000 fb55 	bl	800a73c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2248      	movs	r2, #72	; 0x48
 800a096:	2101      	movs	r1, #1
 800a098:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	223e      	movs	r2, #62	; 0x3e
 800a09e:	2101      	movs	r1, #1
 800a0a0:	5499      	strb	r1, [r3, r2]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	223f      	movs	r2, #63	; 0x3f
 800a0a6:	2101      	movs	r1, #1
 800a0a8:	5499      	strb	r1, [r3, r2]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2240      	movs	r2, #64	; 0x40
 800a0ae:	2101      	movs	r1, #1
 800a0b0:	5499      	strb	r1, [r3, r2]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2241      	movs	r2, #65	; 0x41
 800a0b6:	2101      	movs	r1, #1
 800a0b8:	5499      	strb	r1, [r3, r2]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2242      	movs	r2, #66	; 0x42
 800a0be:	2101      	movs	r1, #1
 800a0c0:	5499      	strb	r1, [r3, r2]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2243      	movs	r2, #67	; 0x43
 800a0c6:	2101      	movs	r1, #1
 800a0c8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2244      	movs	r2, #68	; 0x44
 800a0ce:	2101      	movs	r1, #1
 800a0d0:	5499      	strb	r1, [r3, r2]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2245      	movs	r2, #69	; 0x45
 800a0d6:	2101      	movs	r1, #1
 800a0d8:	5499      	strb	r1, [r3, r2]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2246      	movs	r2, #70	; 0x46
 800a0de:	2101      	movs	r1, #1
 800a0e0:	5499      	strb	r1, [r3, r2]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2247      	movs	r2, #71	; 0x47
 800a0e6:	2101      	movs	r1, #1
 800a0e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	223d      	movs	r2, #61	; 0x3d
 800a0ee:	2101      	movs	r1, #1
 800a0f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a0f2:	2300      	movs	r3, #0
}
 800a0f4:	0018      	movs	r0, r3
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	b002      	add	sp, #8
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d101      	bne.n	800a10e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a10a:	2301      	movs	r3, #1
 800a10c:	e04a      	b.n	800a1a4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	223d      	movs	r2, #61	; 0x3d
 800a112:	5c9b      	ldrb	r3, [r3, r2]
 800a114:	b2db      	uxtb	r3, r3
 800a116:	2b00      	cmp	r3, #0
 800a118:	d107      	bne.n	800a12a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	223c      	movs	r2, #60	; 0x3c
 800a11e:	2100      	movs	r1, #0
 800a120:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	0018      	movs	r0, r3
 800a126:	f000 f841 	bl	800a1ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	223d      	movs	r2, #61	; 0x3d
 800a12e:	2102      	movs	r1, #2
 800a130:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	3304      	adds	r3, #4
 800a13a:	0019      	movs	r1, r3
 800a13c:	0010      	movs	r0, r2
 800a13e:	f000 fafd 	bl	800a73c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2248      	movs	r2, #72	; 0x48
 800a146:	2101      	movs	r1, #1
 800a148:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	223e      	movs	r2, #62	; 0x3e
 800a14e:	2101      	movs	r1, #1
 800a150:	5499      	strb	r1, [r3, r2]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	223f      	movs	r2, #63	; 0x3f
 800a156:	2101      	movs	r1, #1
 800a158:	5499      	strb	r1, [r3, r2]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2240      	movs	r2, #64	; 0x40
 800a15e:	2101      	movs	r1, #1
 800a160:	5499      	strb	r1, [r3, r2]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2241      	movs	r2, #65	; 0x41
 800a166:	2101      	movs	r1, #1
 800a168:	5499      	strb	r1, [r3, r2]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2242      	movs	r2, #66	; 0x42
 800a16e:	2101      	movs	r1, #1
 800a170:	5499      	strb	r1, [r3, r2]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2243      	movs	r2, #67	; 0x43
 800a176:	2101      	movs	r1, #1
 800a178:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2244      	movs	r2, #68	; 0x44
 800a17e:	2101      	movs	r1, #1
 800a180:	5499      	strb	r1, [r3, r2]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2245      	movs	r2, #69	; 0x45
 800a186:	2101      	movs	r1, #1
 800a188:	5499      	strb	r1, [r3, r2]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2246      	movs	r2, #70	; 0x46
 800a18e:	2101      	movs	r1, #1
 800a190:	5499      	strb	r1, [r3, r2]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2247      	movs	r2, #71	; 0x47
 800a196:	2101      	movs	r1, #1
 800a198:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	223d      	movs	r2, #61	; 0x3d
 800a19e:	2101      	movs	r1, #1
 800a1a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	0018      	movs	r0, r3
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	b002      	add	sp, #8
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a1b4:	46c0      	nop			; (mov r8, r8)
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	b002      	add	sp, #8
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d108      	bne.n	800a1de <HAL_TIM_PWM_Start+0x22>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	223e      	movs	r2, #62	; 0x3e
 800a1d0:	5c9b      	ldrb	r3, [r3, r2]
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	1e5a      	subs	r2, r3, #1
 800a1d8:	4193      	sbcs	r3, r2
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	e037      	b.n	800a24e <HAL_TIM_PWM_Start+0x92>
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	2b04      	cmp	r3, #4
 800a1e2:	d108      	bne.n	800a1f6 <HAL_TIM_PWM_Start+0x3a>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	223f      	movs	r2, #63	; 0x3f
 800a1e8:	5c9b      	ldrb	r3, [r3, r2]
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	1e5a      	subs	r2, r3, #1
 800a1f0:	4193      	sbcs	r3, r2
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	e02b      	b.n	800a24e <HAL_TIM_PWM_Start+0x92>
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	2b08      	cmp	r3, #8
 800a1fa:	d108      	bne.n	800a20e <HAL_TIM_PWM_Start+0x52>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2240      	movs	r2, #64	; 0x40
 800a200:	5c9b      	ldrb	r3, [r3, r2]
 800a202:	b2db      	uxtb	r3, r3
 800a204:	3b01      	subs	r3, #1
 800a206:	1e5a      	subs	r2, r3, #1
 800a208:	4193      	sbcs	r3, r2
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	e01f      	b.n	800a24e <HAL_TIM_PWM_Start+0x92>
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	2b0c      	cmp	r3, #12
 800a212:	d108      	bne.n	800a226 <HAL_TIM_PWM_Start+0x6a>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2241      	movs	r2, #65	; 0x41
 800a218:	5c9b      	ldrb	r3, [r3, r2]
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	3b01      	subs	r3, #1
 800a21e:	1e5a      	subs	r2, r3, #1
 800a220:	4193      	sbcs	r3, r2
 800a222:	b2db      	uxtb	r3, r3
 800a224:	e013      	b.n	800a24e <HAL_TIM_PWM_Start+0x92>
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	2b10      	cmp	r3, #16
 800a22a:	d108      	bne.n	800a23e <HAL_TIM_PWM_Start+0x82>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2242      	movs	r2, #66	; 0x42
 800a230:	5c9b      	ldrb	r3, [r3, r2]
 800a232:	b2db      	uxtb	r3, r3
 800a234:	3b01      	subs	r3, #1
 800a236:	1e5a      	subs	r2, r3, #1
 800a238:	4193      	sbcs	r3, r2
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	e007      	b.n	800a24e <HAL_TIM_PWM_Start+0x92>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2243      	movs	r2, #67	; 0x43
 800a242:	5c9b      	ldrb	r3, [r3, r2]
 800a244:	b2db      	uxtb	r3, r3
 800a246:	3b01      	subs	r3, #1
 800a248:	1e5a      	subs	r2, r3, #1
 800a24a:	4193      	sbcs	r3, r2
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d001      	beq.n	800a256 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	e08b      	b.n	800a36e <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d104      	bne.n	800a266 <HAL_TIM_PWM_Start+0xaa>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	223e      	movs	r2, #62	; 0x3e
 800a260:	2102      	movs	r1, #2
 800a262:	5499      	strb	r1, [r3, r2]
 800a264:	e023      	b.n	800a2ae <HAL_TIM_PWM_Start+0xf2>
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	2b04      	cmp	r3, #4
 800a26a:	d104      	bne.n	800a276 <HAL_TIM_PWM_Start+0xba>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	223f      	movs	r2, #63	; 0x3f
 800a270:	2102      	movs	r1, #2
 800a272:	5499      	strb	r1, [r3, r2]
 800a274:	e01b      	b.n	800a2ae <HAL_TIM_PWM_Start+0xf2>
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	2b08      	cmp	r3, #8
 800a27a:	d104      	bne.n	800a286 <HAL_TIM_PWM_Start+0xca>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2240      	movs	r2, #64	; 0x40
 800a280:	2102      	movs	r1, #2
 800a282:	5499      	strb	r1, [r3, r2]
 800a284:	e013      	b.n	800a2ae <HAL_TIM_PWM_Start+0xf2>
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	2b0c      	cmp	r3, #12
 800a28a:	d104      	bne.n	800a296 <HAL_TIM_PWM_Start+0xda>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2241      	movs	r2, #65	; 0x41
 800a290:	2102      	movs	r1, #2
 800a292:	5499      	strb	r1, [r3, r2]
 800a294:	e00b      	b.n	800a2ae <HAL_TIM_PWM_Start+0xf2>
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	2b10      	cmp	r3, #16
 800a29a:	d104      	bne.n	800a2a6 <HAL_TIM_PWM_Start+0xea>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2242      	movs	r2, #66	; 0x42
 800a2a0:	2102      	movs	r1, #2
 800a2a2:	5499      	strb	r1, [r3, r2]
 800a2a4:	e003      	b.n	800a2ae <HAL_TIM_PWM_Start+0xf2>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2243      	movs	r2, #67	; 0x43
 800a2aa:	2102      	movs	r1, #2
 800a2ac:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	6839      	ldr	r1, [r7, #0]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	0018      	movs	r0, r3
 800a2b8:	f000 fe20 	bl	800aefc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a2d      	ldr	r2, [pc, #180]	; (800a378 <HAL_TIM_PWM_Start+0x1bc>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d00e      	beq.n	800a2e4 <HAL_TIM_PWM_Start+0x128>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a2c      	ldr	r2, [pc, #176]	; (800a37c <HAL_TIM_PWM_Start+0x1c0>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d009      	beq.n	800a2e4 <HAL_TIM_PWM_Start+0x128>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a2a      	ldr	r2, [pc, #168]	; (800a380 <HAL_TIM_PWM_Start+0x1c4>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d004      	beq.n	800a2e4 <HAL_TIM_PWM_Start+0x128>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4a29      	ldr	r2, [pc, #164]	; (800a384 <HAL_TIM_PWM_Start+0x1c8>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d101      	bne.n	800a2e8 <HAL_TIM_PWM_Start+0x12c>
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	e000      	b.n	800a2ea <HAL_TIM_PWM_Start+0x12e>
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d008      	beq.n	800a300 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	2180      	movs	r1, #128	; 0x80
 800a2fa:	0209      	lsls	r1, r1, #8
 800a2fc:	430a      	orrs	r2, r1
 800a2fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a1c      	ldr	r2, [pc, #112]	; (800a378 <HAL_TIM_PWM_Start+0x1bc>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d00f      	beq.n	800a32a <HAL_TIM_PWM_Start+0x16e>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	2380      	movs	r3, #128	; 0x80
 800a310:	05db      	lsls	r3, r3, #23
 800a312:	429a      	cmp	r2, r3
 800a314:	d009      	beq.n	800a32a <HAL_TIM_PWM_Start+0x16e>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a1b      	ldr	r2, [pc, #108]	; (800a388 <HAL_TIM_PWM_Start+0x1cc>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d004      	beq.n	800a32a <HAL_TIM_PWM_Start+0x16e>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a15      	ldr	r2, [pc, #84]	; (800a37c <HAL_TIM_PWM_Start+0x1c0>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d116      	bne.n	800a358 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	4a16      	ldr	r2, [pc, #88]	; (800a38c <HAL_TIM_PWM_Start+0x1d0>)
 800a332:	4013      	ands	r3, r2
 800a334:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2b06      	cmp	r3, #6
 800a33a:	d016      	beq.n	800a36a <HAL_TIM_PWM_Start+0x1ae>
 800a33c:	68fa      	ldr	r2, [r7, #12]
 800a33e:	2380      	movs	r3, #128	; 0x80
 800a340:	025b      	lsls	r3, r3, #9
 800a342:	429a      	cmp	r2, r3
 800a344:	d011      	beq.n	800a36a <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2101      	movs	r1, #1
 800a352:	430a      	orrs	r2, r1
 800a354:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a356:	e008      	b.n	800a36a <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	681a      	ldr	r2, [r3, #0]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2101      	movs	r1, #1
 800a364:	430a      	orrs	r2, r1
 800a366:	601a      	str	r2, [r3, #0]
 800a368:	e000      	b.n	800a36c <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a36a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	0018      	movs	r0, r3
 800a370:	46bd      	mov	sp, r7
 800a372:	b004      	add	sp, #16
 800a374:	bd80      	pop	{r7, pc}
 800a376:	46c0      	nop			; (mov r8, r8)
 800a378:	40012c00 	.word	0x40012c00
 800a37c:	40014000 	.word	0x40014000
 800a380:	40014400 	.word	0x40014400
 800a384:	40014800 	.word	0x40014800
 800a388:	40000400 	.word	0x40000400
 800a38c:	00010007 	.word	0x00010007

0800a390 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a39c:	2317      	movs	r3, #23
 800a39e:	18fb      	adds	r3, r7, r3
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	223c      	movs	r2, #60	; 0x3c
 800a3a8:	5c9b      	ldrb	r3, [r3, r2]
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d101      	bne.n	800a3b2 <HAL_TIM_PWM_ConfigChannel+0x22>
 800a3ae:	2302      	movs	r3, #2
 800a3b0:	e0e5      	b.n	800a57e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	223c      	movs	r2, #60	; 0x3c
 800a3b6:	2101      	movs	r1, #1
 800a3b8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2b14      	cmp	r3, #20
 800a3be:	d900      	bls.n	800a3c2 <HAL_TIM_PWM_ConfigChannel+0x32>
 800a3c0:	e0d1      	b.n	800a566 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	009a      	lsls	r2, r3, #2
 800a3c6:	4b70      	ldr	r3, [pc, #448]	; (800a588 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800a3c8:	18d3      	adds	r3, r2, r3
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	68ba      	ldr	r2, [r7, #8]
 800a3d4:	0011      	movs	r1, r2
 800a3d6:	0018      	movs	r0, r3
 800a3d8:	f000 fa30 	bl	800a83c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	699a      	ldr	r2, [r3, #24]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	2108      	movs	r1, #8
 800a3e8:	430a      	orrs	r2, r1
 800a3ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	699a      	ldr	r2, [r3, #24]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	2104      	movs	r1, #4
 800a3f8:	438a      	bics	r2, r1
 800a3fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	6999      	ldr	r1, [r3, #24]
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	691a      	ldr	r2, [r3, #16]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	430a      	orrs	r2, r1
 800a40c:	619a      	str	r2, [r3, #24]
      break;
 800a40e:	e0af      	b.n	800a570 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	68ba      	ldr	r2, [r7, #8]
 800a416:	0011      	movs	r1, r2
 800a418:	0018      	movs	r0, r3
 800a41a:	f000 fa99 	bl	800a950 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	699a      	ldr	r2, [r3, #24]
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2180      	movs	r1, #128	; 0x80
 800a42a:	0109      	lsls	r1, r1, #4
 800a42c:	430a      	orrs	r2, r1
 800a42e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	699a      	ldr	r2, [r3, #24]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4954      	ldr	r1, [pc, #336]	; (800a58c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a43c:	400a      	ands	r2, r1
 800a43e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	6999      	ldr	r1, [r3, #24]
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	691b      	ldr	r3, [r3, #16]
 800a44a:	021a      	lsls	r2, r3, #8
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	430a      	orrs	r2, r1
 800a452:	619a      	str	r2, [r3, #24]
      break;
 800a454:	e08c      	b.n	800a570 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	68ba      	ldr	r2, [r7, #8]
 800a45c:	0011      	movs	r1, r2
 800a45e:	0018      	movs	r0, r3
 800a460:	f000 fafa 	bl	800aa58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	69da      	ldr	r2, [r3, #28]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	2108      	movs	r1, #8
 800a470:	430a      	orrs	r2, r1
 800a472:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	69da      	ldr	r2, [r3, #28]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	2104      	movs	r1, #4
 800a480:	438a      	bics	r2, r1
 800a482:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	69d9      	ldr	r1, [r3, #28]
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	691a      	ldr	r2, [r3, #16]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	430a      	orrs	r2, r1
 800a494:	61da      	str	r2, [r3, #28]
      break;
 800a496:	e06b      	b.n	800a570 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	68ba      	ldr	r2, [r7, #8]
 800a49e:	0011      	movs	r1, r2
 800a4a0:	0018      	movs	r0, r3
 800a4a2:	f000 fb61 	bl	800ab68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	69da      	ldr	r2, [r3, #28]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2180      	movs	r1, #128	; 0x80
 800a4b2:	0109      	lsls	r1, r1, #4
 800a4b4:	430a      	orrs	r2, r1
 800a4b6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	69da      	ldr	r2, [r3, #28]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4932      	ldr	r1, [pc, #200]	; (800a58c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a4c4:	400a      	ands	r2, r1
 800a4c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	69d9      	ldr	r1, [r3, #28]
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	021a      	lsls	r2, r3, #8
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	430a      	orrs	r2, r1
 800a4da:	61da      	str	r2, [r3, #28]
      break;
 800a4dc:	e048      	b.n	800a570 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	0011      	movs	r1, r2
 800a4e6:	0018      	movs	r0, r3
 800a4e8:	f000 fba8 	bl	800ac3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2108      	movs	r1, #8
 800a4f8:	430a      	orrs	r2, r1
 800a4fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2104      	movs	r1, #4
 800a508:	438a      	bics	r2, r1
 800a50a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	691a      	ldr	r2, [r3, #16]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	430a      	orrs	r2, r1
 800a51c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a51e:	e027      	b.n	800a570 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	68ba      	ldr	r2, [r7, #8]
 800a526:	0011      	movs	r1, r2
 800a528:	0018      	movs	r0, r3
 800a52a:	f000 fbe7 	bl	800acfc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2180      	movs	r1, #128	; 0x80
 800a53a:	0109      	lsls	r1, r1, #4
 800a53c:	430a      	orrs	r2, r1
 800a53e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4910      	ldr	r1, [pc, #64]	; (800a58c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a54c:	400a      	ands	r2, r1
 800a54e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	691b      	ldr	r3, [r3, #16]
 800a55a:	021a      	lsls	r2, r3, #8
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	430a      	orrs	r2, r1
 800a562:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a564:	e004      	b.n	800a570 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800a566:	2317      	movs	r3, #23
 800a568:	18fb      	adds	r3, r7, r3
 800a56a:	2201      	movs	r2, #1
 800a56c:	701a      	strb	r2, [r3, #0]
      break;
 800a56e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	223c      	movs	r2, #60	; 0x3c
 800a574:	2100      	movs	r1, #0
 800a576:	5499      	strb	r1, [r3, r2]

  return status;
 800a578:	2317      	movs	r3, #23
 800a57a:	18fb      	adds	r3, r7, r3
 800a57c:	781b      	ldrb	r3, [r3, #0]
}
 800a57e:	0018      	movs	r0, r3
 800a580:	46bd      	mov	sp, r7
 800a582:	b006      	add	sp, #24
 800a584:	bd80      	pop	{r7, pc}
 800a586:	46c0      	nop			; (mov r8, r8)
 800a588:	08018458 	.word	0x08018458
 800a58c:	fffffbff 	.word	0xfffffbff

0800a590 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a59a:	230f      	movs	r3, #15
 800a59c:	18fb      	adds	r3, r7, r3
 800a59e:	2200      	movs	r2, #0
 800a5a0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	223c      	movs	r2, #60	; 0x3c
 800a5a6:	5c9b      	ldrb	r3, [r3, r2]
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d101      	bne.n	800a5b0 <HAL_TIM_ConfigClockSource+0x20>
 800a5ac:	2302      	movs	r3, #2
 800a5ae:	e0bc      	b.n	800a72a <HAL_TIM_ConfigClockSource+0x19a>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	223c      	movs	r2, #60	; 0x3c
 800a5b4:	2101      	movs	r1, #1
 800a5b6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	223d      	movs	r2, #61	; 0x3d
 800a5bc:	2102      	movs	r1, #2
 800a5be:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	689b      	ldr	r3, [r3, #8]
 800a5c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	4a5a      	ldr	r2, [pc, #360]	; (800a734 <HAL_TIM_ConfigClockSource+0x1a4>)
 800a5cc:	4013      	ands	r3, r2
 800a5ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	4a59      	ldr	r2, [pc, #356]	; (800a738 <HAL_TIM_ConfigClockSource+0x1a8>)
 800a5d4:	4013      	ands	r3, r2
 800a5d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	68ba      	ldr	r2, [r7, #8]
 800a5de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	2280      	movs	r2, #128	; 0x80
 800a5e6:	0192      	lsls	r2, r2, #6
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d040      	beq.n	800a66e <HAL_TIM_ConfigClockSource+0xde>
 800a5ec:	2280      	movs	r2, #128	; 0x80
 800a5ee:	0192      	lsls	r2, r2, #6
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d900      	bls.n	800a5f6 <HAL_TIM_ConfigClockSource+0x66>
 800a5f4:	e088      	b.n	800a708 <HAL_TIM_ConfigClockSource+0x178>
 800a5f6:	2280      	movs	r2, #128	; 0x80
 800a5f8:	0152      	lsls	r2, r2, #5
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d100      	bne.n	800a600 <HAL_TIM_ConfigClockSource+0x70>
 800a5fe:	e088      	b.n	800a712 <HAL_TIM_ConfigClockSource+0x182>
 800a600:	2280      	movs	r2, #128	; 0x80
 800a602:	0152      	lsls	r2, r2, #5
 800a604:	4293      	cmp	r3, r2
 800a606:	d900      	bls.n	800a60a <HAL_TIM_ConfigClockSource+0x7a>
 800a608:	e07e      	b.n	800a708 <HAL_TIM_ConfigClockSource+0x178>
 800a60a:	2b70      	cmp	r3, #112	; 0x70
 800a60c:	d018      	beq.n	800a640 <HAL_TIM_ConfigClockSource+0xb0>
 800a60e:	d900      	bls.n	800a612 <HAL_TIM_ConfigClockSource+0x82>
 800a610:	e07a      	b.n	800a708 <HAL_TIM_ConfigClockSource+0x178>
 800a612:	2b60      	cmp	r3, #96	; 0x60
 800a614:	d04f      	beq.n	800a6b6 <HAL_TIM_ConfigClockSource+0x126>
 800a616:	d900      	bls.n	800a61a <HAL_TIM_ConfigClockSource+0x8a>
 800a618:	e076      	b.n	800a708 <HAL_TIM_ConfigClockSource+0x178>
 800a61a:	2b50      	cmp	r3, #80	; 0x50
 800a61c:	d03b      	beq.n	800a696 <HAL_TIM_ConfigClockSource+0x106>
 800a61e:	d900      	bls.n	800a622 <HAL_TIM_ConfigClockSource+0x92>
 800a620:	e072      	b.n	800a708 <HAL_TIM_ConfigClockSource+0x178>
 800a622:	2b40      	cmp	r3, #64	; 0x40
 800a624:	d057      	beq.n	800a6d6 <HAL_TIM_ConfigClockSource+0x146>
 800a626:	d900      	bls.n	800a62a <HAL_TIM_ConfigClockSource+0x9a>
 800a628:	e06e      	b.n	800a708 <HAL_TIM_ConfigClockSource+0x178>
 800a62a:	2b30      	cmp	r3, #48	; 0x30
 800a62c:	d063      	beq.n	800a6f6 <HAL_TIM_ConfigClockSource+0x166>
 800a62e:	d86b      	bhi.n	800a708 <HAL_TIM_ConfigClockSource+0x178>
 800a630:	2b20      	cmp	r3, #32
 800a632:	d060      	beq.n	800a6f6 <HAL_TIM_ConfigClockSource+0x166>
 800a634:	d868      	bhi.n	800a708 <HAL_TIM_ConfigClockSource+0x178>
 800a636:	2b00      	cmp	r3, #0
 800a638:	d05d      	beq.n	800a6f6 <HAL_TIM_ConfigClockSource+0x166>
 800a63a:	2b10      	cmp	r3, #16
 800a63c:	d05b      	beq.n	800a6f6 <HAL_TIM_ConfigClockSource+0x166>
 800a63e:	e063      	b.n	800a708 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6818      	ldr	r0, [r3, #0]
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	6899      	ldr	r1, [r3, #8]
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	685a      	ldr	r2, [r3, #4]
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	f000 fc34 	bl	800aebc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	2277      	movs	r2, #119	; 0x77
 800a660:	4313      	orrs	r3, r2
 800a662:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	68ba      	ldr	r2, [r7, #8]
 800a66a:	609a      	str	r2, [r3, #8]
      break;
 800a66c:	e052      	b.n	800a714 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6818      	ldr	r0, [r3, #0]
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	6899      	ldr	r1, [r3, #8]
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	685a      	ldr	r2, [r3, #4]
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	f000 fc1d 	bl	800aebc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	689a      	ldr	r2, [r3, #8]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2180      	movs	r1, #128	; 0x80
 800a68e:	01c9      	lsls	r1, r1, #7
 800a690:	430a      	orrs	r2, r1
 800a692:	609a      	str	r2, [r3, #8]
      break;
 800a694:	e03e      	b.n	800a714 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6818      	ldr	r0, [r3, #0]
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	6859      	ldr	r1, [r3, #4]
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	001a      	movs	r2, r3
 800a6a4:	f000 fb8e 	bl	800adc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	2150      	movs	r1, #80	; 0x50
 800a6ae:	0018      	movs	r0, r3
 800a6b0:	f000 fbe8 	bl	800ae84 <TIM_ITRx_SetConfig>
      break;
 800a6b4:	e02e      	b.n	800a714 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6818      	ldr	r0, [r3, #0]
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	6859      	ldr	r1, [r3, #4]
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	001a      	movs	r2, r3
 800a6c4:	f000 fbac 	bl	800ae20 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2160      	movs	r1, #96	; 0x60
 800a6ce:	0018      	movs	r0, r3
 800a6d0:	f000 fbd8 	bl	800ae84 <TIM_ITRx_SetConfig>
      break;
 800a6d4:	e01e      	b.n	800a714 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6818      	ldr	r0, [r3, #0]
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	6859      	ldr	r1, [r3, #4]
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	68db      	ldr	r3, [r3, #12]
 800a6e2:	001a      	movs	r2, r3
 800a6e4:	f000 fb6e 	bl	800adc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2140      	movs	r1, #64	; 0x40
 800a6ee:	0018      	movs	r0, r3
 800a6f0:	f000 fbc8 	bl	800ae84 <TIM_ITRx_SetConfig>
      break;
 800a6f4:	e00e      	b.n	800a714 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	0019      	movs	r1, r3
 800a700:	0010      	movs	r0, r2
 800a702:	f000 fbbf 	bl	800ae84 <TIM_ITRx_SetConfig>
      break;
 800a706:	e005      	b.n	800a714 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800a708:	230f      	movs	r3, #15
 800a70a:	18fb      	adds	r3, r7, r3
 800a70c:	2201      	movs	r2, #1
 800a70e:	701a      	strb	r2, [r3, #0]
      break;
 800a710:	e000      	b.n	800a714 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800a712:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	223d      	movs	r2, #61	; 0x3d
 800a718:	2101      	movs	r1, #1
 800a71a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	223c      	movs	r2, #60	; 0x3c
 800a720:	2100      	movs	r1, #0
 800a722:	5499      	strb	r1, [r3, r2]

  return status;
 800a724:	230f      	movs	r3, #15
 800a726:	18fb      	adds	r3, r7, r3
 800a728:	781b      	ldrb	r3, [r3, #0]
}
 800a72a:	0018      	movs	r0, r3
 800a72c:	46bd      	mov	sp, r7
 800a72e:	b004      	add	sp, #16
 800a730:	bd80      	pop	{r7, pc}
 800a732:	46c0      	nop			; (mov r8, r8)
 800a734:	ffceff88 	.word	0xffceff88
 800a738:	ffff00ff 	.word	0xffff00ff

0800a73c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	4a34      	ldr	r2, [pc, #208]	; (800a820 <TIM_Base_SetConfig+0xe4>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d008      	beq.n	800a766 <TIM_Base_SetConfig+0x2a>
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	2380      	movs	r3, #128	; 0x80
 800a758:	05db      	lsls	r3, r3, #23
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d003      	beq.n	800a766 <TIM_Base_SetConfig+0x2a>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	4a30      	ldr	r2, [pc, #192]	; (800a824 <TIM_Base_SetConfig+0xe8>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d108      	bne.n	800a778 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2270      	movs	r2, #112	; 0x70
 800a76a:	4393      	bics	r3, r2
 800a76c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	68fa      	ldr	r2, [r7, #12]
 800a774:	4313      	orrs	r3, r2
 800a776:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a29      	ldr	r2, [pc, #164]	; (800a820 <TIM_Base_SetConfig+0xe4>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d018      	beq.n	800a7b2 <TIM_Base_SetConfig+0x76>
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	2380      	movs	r3, #128	; 0x80
 800a784:	05db      	lsls	r3, r3, #23
 800a786:	429a      	cmp	r2, r3
 800a788:	d013      	beq.n	800a7b2 <TIM_Base_SetConfig+0x76>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4a25      	ldr	r2, [pc, #148]	; (800a824 <TIM_Base_SetConfig+0xe8>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d00f      	beq.n	800a7b2 <TIM_Base_SetConfig+0x76>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4a24      	ldr	r2, [pc, #144]	; (800a828 <TIM_Base_SetConfig+0xec>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d00b      	beq.n	800a7b2 <TIM_Base_SetConfig+0x76>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4a23      	ldr	r2, [pc, #140]	; (800a82c <TIM_Base_SetConfig+0xf0>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d007      	beq.n	800a7b2 <TIM_Base_SetConfig+0x76>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	4a22      	ldr	r2, [pc, #136]	; (800a830 <TIM_Base_SetConfig+0xf4>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d003      	beq.n	800a7b2 <TIM_Base_SetConfig+0x76>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	4a21      	ldr	r2, [pc, #132]	; (800a834 <TIM_Base_SetConfig+0xf8>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d108      	bne.n	800a7c4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	4a20      	ldr	r2, [pc, #128]	; (800a838 <TIM_Base_SetConfig+0xfc>)
 800a7b6:	4013      	ands	r3, r2
 800a7b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2280      	movs	r2, #128	; 0x80
 800a7c8:	4393      	bics	r3, r2
 800a7ca:	001a      	movs	r2, r3
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	695b      	ldr	r3, [r3, #20]
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	68fa      	ldr	r2, [r7, #12]
 800a7d8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	689a      	ldr	r2, [r3, #8]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a0c      	ldr	r2, [pc, #48]	; (800a820 <TIM_Base_SetConfig+0xe4>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d00b      	beq.n	800a80a <TIM_Base_SetConfig+0xce>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a0d      	ldr	r2, [pc, #52]	; (800a82c <TIM_Base_SetConfig+0xf0>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d007      	beq.n	800a80a <TIM_Base_SetConfig+0xce>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	4a0c      	ldr	r2, [pc, #48]	; (800a830 <TIM_Base_SetConfig+0xf4>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d003      	beq.n	800a80a <TIM_Base_SetConfig+0xce>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	4a0b      	ldr	r2, [pc, #44]	; (800a834 <TIM_Base_SetConfig+0xf8>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d103      	bne.n	800a812 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	691a      	ldr	r2, [r3, #16]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2201      	movs	r2, #1
 800a816:	615a      	str	r2, [r3, #20]
}
 800a818:	46c0      	nop			; (mov r8, r8)
 800a81a:	46bd      	mov	sp, r7
 800a81c:	b004      	add	sp, #16
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	40012c00 	.word	0x40012c00
 800a824:	40000400 	.word	0x40000400
 800a828:	40002000 	.word	0x40002000
 800a82c:	40014000 	.word	0x40014000
 800a830:	40014400 	.word	0x40014400
 800a834:	40014800 	.word	0x40014800
 800a838:	fffffcff 	.word	0xfffffcff

0800a83c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b086      	sub	sp, #24
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6a1b      	ldr	r3, [r3, #32]
 800a84a:	2201      	movs	r2, #1
 800a84c:	4393      	bics	r3, r2
 800a84e:	001a      	movs	r2, r3
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6a1b      	ldr	r3, [r3, #32]
 800a858:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	699b      	ldr	r3, [r3, #24]
 800a864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	4a32      	ldr	r2, [pc, #200]	; (800a934 <TIM_OC1_SetConfig+0xf8>)
 800a86a:	4013      	ands	r3, r2
 800a86c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2203      	movs	r2, #3
 800a872:	4393      	bics	r3, r2
 800a874:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	4313      	orrs	r3, r2
 800a87e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	2202      	movs	r2, #2
 800a884:	4393      	bics	r3, r2
 800a886:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	697a      	ldr	r2, [r7, #20]
 800a88e:	4313      	orrs	r3, r2
 800a890:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	4a28      	ldr	r2, [pc, #160]	; (800a938 <TIM_OC1_SetConfig+0xfc>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d00b      	beq.n	800a8b2 <TIM_OC1_SetConfig+0x76>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	4a27      	ldr	r2, [pc, #156]	; (800a93c <TIM_OC1_SetConfig+0x100>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d007      	beq.n	800a8b2 <TIM_OC1_SetConfig+0x76>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	4a26      	ldr	r2, [pc, #152]	; (800a940 <TIM_OC1_SetConfig+0x104>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d003      	beq.n	800a8b2 <TIM_OC1_SetConfig+0x76>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	4a25      	ldr	r2, [pc, #148]	; (800a944 <TIM_OC1_SetConfig+0x108>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d10c      	bne.n	800a8cc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	2208      	movs	r2, #8
 800a8b6:	4393      	bics	r3, r2
 800a8b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	697a      	ldr	r2, [r7, #20]
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	2204      	movs	r2, #4
 800a8c8:	4393      	bics	r3, r2
 800a8ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4a1a      	ldr	r2, [pc, #104]	; (800a938 <TIM_OC1_SetConfig+0xfc>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d00b      	beq.n	800a8ec <TIM_OC1_SetConfig+0xb0>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	4a19      	ldr	r2, [pc, #100]	; (800a93c <TIM_OC1_SetConfig+0x100>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d007      	beq.n	800a8ec <TIM_OC1_SetConfig+0xb0>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	4a18      	ldr	r2, [pc, #96]	; (800a940 <TIM_OC1_SetConfig+0x104>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d003      	beq.n	800a8ec <TIM_OC1_SetConfig+0xb0>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	4a17      	ldr	r2, [pc, #92]	; (800a944 <TIM_OC1_SetConfig+0x108>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d111      	bne.n	800a910 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	4a16      	ldr	r2, [pc, #88]	; (800a948 <TIM_OC1_SetConfig+0x10c>)
 800a8f0:	4013      	ands	r3, r2
 800a8f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	4a15      	ldr	r2, [pc, #84]	; (800a94c <TIM_OC1_SetConfig+0x110>)
 800a8f8:	4013      	ands	r3, r2
 800a8fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	695b      	ldr	r3, [r3, #20]
 800a900:	693a      	ldr	r2, [r7, #16]
 800a902:	4313      	orrs	r3, r2
 800a904:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	699b      	ldr	r3, [r3, #24]
 800a90a:	693a      	ldr	r2, [r7, #16]
 800a90c:	4313      	orrs	r3, r2
 800a90e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	693a      	ldr	r2, [r7, #16]
 800a914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	68fa      	ldr	r2, [r7, #12]
 800a91a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	685a      	ldr	r2, [r3, #4]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	697a      	ldr	r2, [r7, #20]
 800a928:	621a      	str	r2, [r3, #32]
}
 800a92a:	46c0      	nop			; (mov r8, r8)
 800a92c:	46bd      	mov	sp, r7
 800a92e:	b006      	add	sp, #24
 800a930:	bd80      	pop	{r7, pc}
 800a932:	46c0      	nop			; (mov r8, r8)
 800a934:	fffeff8f 	.word	0xfffeff8f
 800a938:	40012c00 	.word	0x40012c00
 800a93c:	40014000 	.word	0x40014000
 800a940:	40014400 	.word	0x40014400
 800a944:	40014800 	.word	0x40014800
 800a948:	fffffeff 	.word	0xfffffeff
 800a94c:	fffffdff 	.word	0xfffffdff

0800a950 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b086      	sub	sp, #24
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6a1b      	ldr	r3, [r3, #32]
 800a95e:	2210      	movs	r2, #16
 800a960:	4393      	bics	r3, r2
 800a962:	001a      	movs	r2, r3
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6a1b      	ldr	r3, [r3, #32]
 800a96c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	699b      	ldr	r3, [r3, #24]
 800a978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	4a2e      	ldr	r2, [pc, #184]	; (800aa38 <TIM_OC2_SetConfig+0xe8>)
 800a97e:	4013      	ands	r3, r2
 800a980:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	4a2d      	ldr	r2, [pc, #180]	; (800aa3c <TIM_OC2_SetConfig+0xec>)
 800a986:	4013      	ands	r3, r2
 800a988:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	021b      	lsls	r3, r3, #8
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	4313      	orrs	r3, r2
 800a994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	2220      	movs	r2, #32
 800a99a:	4393      	bics	r3, r2
 800a99c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	689b      	ldr	r3, [r3, #8]
 800a9a2:	011b      	lsls	r3, r3, #4
 800a9a4:	697a      	ldr	r2, [r7, #20]
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	4a24      	ldr	r2, [pc, #144]	; (800aa40 <TIM_OC2_SetConfig+0xf0>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d10d      	bne.n	800a9ce <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	2280      	movs	r2, #128	; 0x80
 800a9b6:	4393      	bics	r3, r2
 800a9b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	68db      	ldr	r3, [r3, #12]
 800a9be:	011b      	lsls	r3, r3, #4
 800a9c0:	697a      	ldr	r2, [r7, #20]
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	2240      	movs	r2, #64	; 0x40
 800a9ca:	4393      	bics	r3, r2
 800a9cc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	4a1b      	ldr	r2, [pc, #108]	; (800aa40 <TIM_OC2_SetConfig+0xf0>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d00b      	beq.n	800a9ee <TIM_OC2_SetConfig+0x9e>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	4a1a      	ldr	r2, [pc, #104]	; (800aa44 <TIM_OC2_SetConfig+0xf4>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d007      	beq.n	800a9ee <TIM_OC2_SetConfig+0x9e>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	4a19      	ldr	r2, [pc, #100]	; (800aa48 <TIM_OC2_SetConfig+0xf8>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d003      	beq.n	800a9ee <TIM_OC2_SetConfig+0x9e>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	4a18      	ldr	r2, [pc, #96]	; (800aa4c <TIM_OC2_SetConfig+0xfc>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d113      	bne.n	800aa16 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	4a17      	ldr	r2, [pc, #92]	; (800aa50 <TIM_OC2_SetConfig+0x100>)
 800a9f2:	4013      	ands	r3, r2
 800a9f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	4a16      	ldr	r2, [pc, #88]	; (800aa54 <TIM_OC2_SetConfig+0x104>)
 800a9fa:	4013      	ands	r3, r2
 800a9fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	695b      	ldr	r3, [r3, #20]
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	693a      	ldr	r2, [r7, #16]
 800aa06:	4313      	orrs	r3, r2
 800aa08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	699b      	ldr	r3, [r3, #24]
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	693a      	ldr	r2, [r7, #16]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	693a      	ldr	r2, [r7, #16]
 800aa1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	68fa      	ldr	r2, [r7, #12]
 800aa20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	685a      	ldr	r2, [r3, #4]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	697a      	ldr	r2, [r7, #20]
 800aa2e:	621a      	str	r2, [r3, #32]
}
 800aa30:	46c0      	nop			; (mov r8, r8)
 800aa32:	46bd      	mov	sp, r7
 800aa34:	b006      	add	sp, #24
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	feff8fff 	.word	0xfeff8fff
 800aa3c:	fffffcff 	.word	0xfffffcff
 800aa40:	40012c00 	.word	0x40012c00
 800aa44:	40014000 	.word	0x40014000
 800aa48:	40014400 	.word	0x40014400
 800aa4c:	40014800 	.word	0x40014800
 800aa50:	fffffbff 	.word	0xfffffbff
 800aa54:	fffff7ff 	.word	0xfffff7ff

0800aa58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b086      	sub	sp, #24
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6a1b      	ldr	r3, [r3, #32]
 800aa66:	4a35      	ldr	r2, [pc, #212]	; (800ab3c <TIM_OC3_SetConfig+0xe4>)
 800aa68:	401a      	ands	r2, r3
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6a1b      	ldr	r3, [r3, #32]
 800aa72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	69db      	ldr	r3, [r3, #28]
 800aa7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	4a2f      	ldr	r2, [pc, #188]	; (800ab40 <TIM_OC3_SetConfig+0xe8>)
 800aa84:	4013      	ands	r3, r2
 800aa86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2203      	movs	r2, #3
 800aa8c:	4393      	bics	r3, r2
 800aa8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	68fa      	ldr	r2, [r7, #12]
 800aa96:	4313      	orrs	r3, r2
 800aa98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	4a29      	ldr	r2, [pc, #164]	; (800ab44 <TIM_OC3_SetConfig+0xec>)
 800aa9e:	4013      	ands	r3, r2
 800aaa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	689b      	ldr	r3, [r3, #8]
 800aaa6:	021b      	lsls	r3, r3, #8
 800aaa8:	697a      	ldr	r2, [r7, #20]
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4a25      	ldr	r2, [pc, #148]	; (800ab48 <TIM_OC3_SetConfig+0xf0>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d10d      	bne.n	800aad2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	4a24      	ldr	r2, [pc, #144]	; (800ab4c <TIM_OC3_SetConfig+0xf4>)
 800aaba:	4013      	ands	r3, r2
 800aabc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	021b      	lsls	r3, r3, #8
 800aac4:	697a      	ldr	r2, [r7, #20]
 800aac6:	4313      	orrs	r3, r2
 800aac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	4a20      	ldr	r2, [pc, #128]	; (800ab50 <TIM_OC3_SetConfig+0xf8>)
 800aace:	4013      	ands	r3, r2
 800aad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	4a1c      	ldr	r2, [pc, #112]	; (800ab48 <TIM_OC3_SetConfig+0xf0>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d00b      	beq.n	800aaf2 <TIM_OC3_SetConfig+0x9a>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	4a1d      	ldr	r2, [pc, #116]	; (800ab54 <TIM_OC3_SetConfig+0xfc>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d007      	beq.n	800aaf2 <TIM_OC3_SetConfig+0x9a>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	4a1c      	ldr	r2, [pc, #112]	; (800ab58 <TIM_OC3_SetConfig+0x100>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d003      	beq.n	800aaf2 <TIM_OC3_SetConfig+0x9a>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4a1b      	ldr	r2, [pc, #108]	; (800ab5c <TIM_OC3_SetConfig+0x104>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d113      	bne.n	800ab1a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	4a1a      	ldr	r2, [pc, #104]	; (800ab60 <TIM_OC3_SetConfig+0x108>)
 800aaf6:	4013      	ands	r3, r2
 800aaf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	4a19      	ldr	r2, [pc, #100]	; (800ab64 <TIM_OC3_SetConfig+0x10c>)
 800aafe:	4013      	ands	r3, r2
 800ab00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	695b      	ldr	r3, [r3, #20]
 800ab06:	011b      	lsls	r3, r3, #4
 800ab08:	693a      	ldr	r2, [r7, #16]
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	699b      	ldr	r3, [r3, #24]
 800ab12:	011b      	lsls	r3, r3, #4
 800ab14:	693a      	ldr	r2, [r7, #16]
 800ab16:	4313      	orrs	r3, r2
 800ab18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	693a      	ldr	r2, [r7, #16]
 800ab1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	685a      	ldr	r2, [r3, #4]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	697a      	ldr	r2, [r7, #20]
 800ab32:	621a      	str	r2, [r3, #32]
}
 800ab34:	46c0      	nop			; (mov r8, r8)
 800ab36:	46bd      	mov	sp, r7
 800ab38:	b006      	add	sp, #24
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	fffffeff 	.word	0xfffffeff
 800ab40:	fffeff8f 	.word	0xfffeff8f
 800ab44:	fffffdff 	.word	0xfffffdff
 800ab48:	40012c00 	.word	0x40012c00
 800ab4c:	fffff7ff 	.word	0xfffff7ff
 800ab50:	fffffbff 	.word	0xfffffbff
 800ab54:	40014000 	.word	0x40014000
 800ab58:	40014400 	.word	0x40014400
 800ab5c:	40014800 	.word	0x40014800
 800ab60:	ffffefff 	.word	0xffffefff
 800ab64:	ffffdfff 	.word	0xffffdfff

0800ab68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b086      	sub	sp, #24
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6a1b      	ldr	r3, [r3, #32]
 800ab76:	4a28      	ldr	r2, [pc, #160]	; (800ac18 <TIM_OC4_SetConfig+0xb0>)
 800ab78:	401a      	ands	r2, r3
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6a1b      	ldr	r3, [r3, #32]
 800ab82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	69db      	ldr	r3, [r3, #28]
 800ab8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	4a22      	ldr	r2, [pc, #136]	; (800ac1c <TIM_OC4_SetConfig+0xb4>)
 800ab94:	4013      	ands	r3, r2
 800ab96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	4a21      	ldr	r2, [pc, #132]	; (800ac20 <TIM_OC4_SetConfig+0xb8>)
 800ab9c:	4013      	ands	r3, r2
 800ab9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	021b      	lsls	r3, r3, #8
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	4313      	orrs	r3, r2
 800abaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	4a1d      	ldr	r2, [pc, #116]	; (800ac24 <TIM_OC4_SetConfig+0xbc>)
 800abb0:	4013      	ands	r3, r2
 800abb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	031b      	lsls	r3, r3, #12
 800abba:	693a      	ldr	r2, [r7, #16]
 800abbc:	4313      	orrs	r3, r2
 800abbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4a19      	ldr	r2, [pc, #100]	; (800ac28 <TIM_OC4_SetConfig+0xc0>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d00b      	beq.n	800abe0 <TIM_OC4_SetConfig+0x78>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	4a18      	ldr	r2, [pc, #96]	; (800ac2c <TIM_OC4_SetConfig+0xc4>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d007      	beq.n	800abe0 <TIM_OC4_SetConfig+0x78>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	4a17      	ldr	r2, [pc, #92]	; (800ac30 <TIM_OC4_SetConfig+0xc8>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d003      	beq.n	800abe0 <TIM_OC4_SetConfig+0x78>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	4a16      	ldr	r2, [pc, #88]	; (800ac34 <TIM_OC4_SetConfig+0xcc>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d109      	bne.n	800abf4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	4a15      	ldr	r2, [pc, #84]	; (800ac38 <TIM_OC4_SetConfig+0xd0>)
 800abe4:	4013      	ands	r3, r2
 800abe6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	695b      	ldr	r3, [r3, #20]
 800abec:	019b      	lsls	r3, r3, #6
 800abee:	697a      	ldr	r2, [r7, #20]
 800abf0:	4313      	orrs	r3, r2
 800abf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	697a      	ldr	r2, [r7, #20]
 800abf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	68fa      	ldr	r2, [r7, #12]
 800abfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	685a      	ldr	r2, [r3, #4]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	693a      	ldr	r2, [r7, #16]
 800ac0c:	621a      	str	r2, [r3, #32]
}
 800ac0e:	46c0      	nop			; (mov r8, r8)
 800ac10:	46bd      	mov	sp, r7
 800ac12:	b006      	add	sp, #24
 800ac14:	bd80      	pop	{r7, pc}
 800ac16:	46c0      	nop			; (mov r8, r8)
 800ac18:	ffffefff 	.word	0xffffefff
 800ac1c:	feff8fff 	.word	0xfeff8fff
 800ac20:	fffffcff 	.word	0xfffffcff
 800ac24:	ffffdfff 	.word	0xffffdfff
 800ac28:	40012c00 	.word	0x40012c00
 800ac2c:	40014000 	.word	0x40014000
 800ac30:	40014400 	.word	0x40014400
 800ac34:	40014800 	.word	0x40014800
 800ac38:	ffffbfff 	.word	0xffffbfff

0800ac3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b086      	sub	sp, #24
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6a1b      	ldr	r3, [r3, #32]
 800ac4a:	4a25      	ldr	r2, [pc, #148]	; (800ace0 <TIM_OC5_SetConfig+0xa4>)
 800ac4c:	401a      	ands	r2, r3
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6a1b      	ldr	r3, [r3, #32]
 800ac56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	4a1f      	ldr	r2, [pc, #124]	; (800ace4 <TIM_OC5_SetConfig+0xa8>)
 800ac68:	4013      	ands	r3, r2
 800ac6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	68fa      	ldr	r2, [r7, #12]
 800ac72:	4313      	orrs	r3, r2
 800ac74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	4a1b      	ldr	r2, [pc, #108]	; (800ace8 <TIM_OC5_SetConfig+0xac>)
 800ac7a:	4013      	ands	r3, r2
 800ac7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	689b      	ldr	r3, [r3, #8]
 800ac82:	041b      	lsls	r3, r3, #16
 800ac84:	693a      	ldr	r2, [r7, #16]
 800ac86:	4313      	orrs	r3, r2
 800ac88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	4a17      	ldr	r2, [pc, #92]	; (800acec <TIM_OC5_SetConfig+0xb0>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d00b      	beq.n	800acaa <TIM_OC5_SetConfig+0x6e>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	4a16      	ldr	r2, [pc, #88]	; (800acf0 <TIM_OC5_SetConfig+0xb4>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d007      	beq.n	800acaa <TIM_OC5_SetConfig+0x6e>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	4a15      	ldr	r2, [pc, #84]	; (800acf4 <TIM_OC5_SetConfig+0xb8>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d003      	beq.n	800acaa <TIM_OC5_SetConfig+0x6e>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	4a14      	ldr	r2, [pc, #80]	; (800acf8 <TIM_OC5_SetConfig+0xbc>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d109      	bne.n	800acbe <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	4a0c      	ldr	r2, [pc, #48]	; (800ace0 <TIM_OC5_SetConfig+0xa4>)
 800acae:	4013      	ands	r3, r2
 800acb0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	695b      	ldr	r3, [r3, #20]
 800acb6:	021b      	lsls	r3, r3, #8
 800acb8:	697a      	ldr	r2, [r7, #20]
 800acba:	4313      	orrs	r3, r2
 800acbc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	697a      	ldr	r2, [r7, #20]
 800acc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	685a      	ldr	r2, [r3, #4]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	693a      	ldr	r2, [r7, #16]
 800acd6:	621a      	str	r2, [r3, #32]
}
 800acd8:	46c0      	nop			; (mov r8, r8)
 800acda:	46bd      	mov	sp, r7
 800acdc:	b006      	add	sp, #24
 800acde:	bd80      	pop	{r7, pc}
 800ace0:	fffeffff 	.word	0xfffeffff
 800ace4:	fffeff8f 	.word	0xfffeff8f
 800ace8:	fffdffff 	.word	0xfffdffff
 800acec:	40012c00 	.word	0x40012c00
 800acf0:	40014000 	.word	0x40014000
 800acf4:	40014400 	.word	0x40014400
 800acf8:	40014800 	.word	0x40014800

0800acfc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b086      	sub	sp, #24
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6a1b      	ldr	r3, [r3, #32]
 800ad0a:	4a26      	ldr	r2, [pc, #152]	; (800ada4 <TIM_OC6_SetConfig+0xa8>)
 800ad0c:	401a      	ands	r2, r3
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6a1b      	ldr	r3, [r3, #32]
 800ad16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	4a20      	ldr	r2, [pc, #128]	; (800ada8 <TIM_OC6_SetConfig+0xac>)
 800ad28:	4013      	ands	r3, r2
 800ad2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	021b      	lsls	r3, r3, #8
 800ad32:	68fa      	ldr	r2, [r7, #12]
 800ad34:	4313      	orrs	r3, r2
 800ad36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	4a1c      	ldr	r2, [pc, #112]	; (800adac <TIM_OC6_SetConfig+0xb0>)
 800ad3c:	4013      	ands	r3, r2
 800ad3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	051b      	lsls	r3, r3, #20
 800ad46:	693a      	ldr	r2, [r7, #16]
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4a18      	ldr	r2, [pc, #96]	; (800adb0 <TIM_OC6_SetConfig+0xb4>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d00b      	beq.n	800ad6c <TIM_OC6_SetConfig+0x70>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	4a17      	ldr	r2, [pc, #92]	; (800adb4 <TIM_OC6_SetConfig+0xb8>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d007      	beq.n	800ad6c <TIM_OC6_SetConfig+0x70>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	4a16      	ldr	r2, [pc, #88]	; (800adb8 <TIM_OC6_SetConfig+0xbc>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d003      	beq.n	800ad6c <TIM_OC6_SetConfig+0x70>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	4a15      	ldr	r2, [pc, #84]	; (800adbc <TIM_OC6_SetConfig+0xc0>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d109      	bne.n	800ad80 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	4a14      	ldr	r2, [pc, #80]	; (800adc0 <TIM_OC6_SetConfig+0xc4>)
 800ad70:	4013      	ands	r3, r2
 800ad72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	695b      	ldr	r3, [r3, #20]
 800ad78:	029b      	lsls	r3, r3, #10
 800ad7a:	697a      	ldr	r2, [r7, #20]
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	697a      	ldr	r2, [r7, #20]
 800ad84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	685a      	ldr	r2, [r3, #4]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	693a      	ldr	r2, [r7, #16]
 800ad98:	621a      	str	r2, [r3, #32]
}
 800ad9a:	46c0      	nop			; (mov r8, r8)
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	b006      	add	sp, #24
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	46c0      	nop			; (mov r8, r8)
 800ada4:	ffefffff 	.word	0xffefffff
 800ada8:	feff8fff 	.word	0xfeff8fff
 800adac:	ffdfffff 	.word	0xffdfffff
 800adb0:	40012c00 	.word	0x40012c00
 800adb4:	40014000 	.word	0x40014000
 800adb8:	40014400 	.word	0x40014400
 800adbc:	40014800 	.word	0x40014800
 800adc0:	fffbffff 	.word	0xfffbffff

0800adc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b086      	sub	sp, #24
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	60b9      	str	r1, [r7, #8]
 800adce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	6a1b      	ldr	r3, [r3, #32]
 800add4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	6a1b      	ldr	r3, [r3, #32]
 800adda:	2201      	movs	r2, #1
 800addc:	4393      	bics	r3, r2
 800adde:	001a      	movs	r2, r3
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	699b      	ldr	r3, [r3, #24]
 800ade8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	22f0      	movs	r2, #240	; 0xf0
 800adee:	4393      	bics	r3, r2
 800adf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	011b      	lsls	r3, r3, #4
 800adf6:	693a      	ldr	r2, [r7, #16]
 800adf8:	4313      	orrs	r3, r2
 800adfa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	220a      	movs	r2, #10
 800ae00:	4393      	bics	r3, r2
 800ae02:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae04:	697a      	ldr	r2, [r7, #20]
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	693a      	ldr	r2, [r7, #16]
 800ae10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	697a      	ldr	r2, [r7, #20]
 800ae16:	621a      	str	r2, [r3, #32]
}
 800ae18:	46c0      	nop			; (mov r8, r8)
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	b006      	add	sp, #24
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b086      	sub	sp, #24
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	60f8      	str	r0, [r7, #12]
 800ae28:	60b9      	str	r1, [r7, #8]
 800ae2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	6a1b      	ldr	r3, [r3, #32]
 800ae30:	2210      	movs	r2, #16
 800ae32:	4393      	bics	r3, r2
 800ae34:	001a      	movs	r2, r3
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	699b      	ldr	r3, [r3, #24]
 800ae3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6a1b      	ldr	r3, [r3, #32]
 800ae44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	4a0d      	ldr	r2, [pc, #52]	; (800ae80 <TIM_TI2_ConfigInputStage+0x60>)
 800ae4a:	4013      	ands	r3, r2
 800ae4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	031b      	lsls	r3, r3, #12
 800ae52:	697a      	ldr	r2, [r7, #20]
 800ae54:	4313      	orrs	r3, r2
 800ae56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	22a0      	movs	r2, #160	; 0xa0
 800ae5c:	4393      	bics	r3, r2
 800ae5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	011b      	lsls	r3, r3, #4
 800ae64:	693a      	ldr	r2, [r7, #16]
 800ae66:	4313      	orrs	r3, r2
 800ae68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	697a      	ldr	r2, [r7, #20]
 800ae6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	693a      	ldr	r2, [r7, #16]
 800ae74:	621a      	str	r2, [r3, #32]
}
 800ae76:	46c0      	nop			; (mov r8, r8)
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	b006      	add	sp, #24
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	46c0      	nop			; (mov r8, r8)
 800ae80:	ffff0fff 	.word	0xffff0fff

0800ae84 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	689b      	ldr	r3, [r3, #8]
 800ae92:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	4a08      	ldr	r2, [pc, #32]	; (800aeb8 <TIM_ITRx_SetConfig+0x34>)
 800ae98:	4013      	ands	r3, r2
 800ae9a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae9c:	683a      	ldr	r2, [r7, #0]
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	4313      	orrs	r3, r2
 800aea2:	2207      	movs	r2, #7
 800aea4:	4313      	orrs	r3, r2
 800aea6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	68fa      	ldr	r2, [r7, #12]
 800aeac:	609a      	str	r2, [r3, #8]
}
 800aeae:	46c0      	nop			; (mov r8, r8)
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	b004      	add	sp, #16
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	46c0      	nop			; (mov r8, r8)
 800aeb8:	ffcfff8f 	.word	0xffcfff8f

0800aebc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b086      	sub	sp, #24
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	60f8      	str	r0, [r7, #12]
 800aec4:	60b9      	str	r1, [r7, #8]
 800aec6:	607a      	str	r2, [r7, #4]
 800aec8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	4a09      	ldr	r2, [pc, #36]	; (800aef8 <TIM_ETR_SetConfig+0x3c>)
 800aed4:	4013      	ands	r3, r2
 800aed6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	021a      	lsls	r2, r3, #8
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	431a      	orrs	r2, r3
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	4313      	orrs	r3, r2
 800aee4:	697a      	ldr	r2, [r7, #20]
 800aee6:	4313      	orrs	r3, r2
 800aee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	697a      	ldr	r2, [r7, #20]
 800aeee:	609a      	str	r2, [r3, #8]
}
 800aef0:	46c0      	nop			; (mov r8, r8)
 800aef2:	46bd      	mov	sp, r7
 800aef4:	b006      	add	sp, #24
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	ffff00ff 	.word	0xffff00ff

0800aefc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b086      	sub	sp, #24
 800af00:	af00      	add	r7, sp, #0
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	221f      	movs	r2, #31
 800af0c:	4013      	ands	r3, r2
 800af0e:	2201      	movs	r2, #1
 800af10:	409a      	lsls	r2, r3
 800af12:	0013      	movs	r3, r2
 800af14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	6a1b      	ldr	r3, [r3, #32]
 800af1a:	697a      	ldr	r2, [r7, #20]
 800af1c:	43d2      	mvns	r2, r2
 800af1e:	401a      	ands	r2, r3
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	6a1a      	ldr	r2, [r3, #32]
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	211f      	movs	r1, #31
 800af2c:	400b      	ands	r3, r1
 800af2e:	6879      	ldr	r1, [r7, #4]
 800af30:	4099      	lsls	r1, r3
 800af32:	000b      	movs	r3, r1
 800af34:	431a      	orrs	r2, r3
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	621a      	str	r2, [r3, #32]
}
 800af3a:	46c0      	nop			; (mov r8, r8)
 800af3c:	46bd      	mov	sp, r7
 800af3e:	b006      	add	sp, #24
 800af40:	bd80      	pop	{r7, pc}
	...

0800af44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	223c      	movs	r2, #60	; 0x3c
 800af52:	5c9b      	ldrb	r3, [r3, r2]
 800af54:	2b01      	cmp	r3, #1
 800af56:	d101      	bne.n	800af5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af58:	2302      	movs	r3, #2
 800af5a:	e055      	b.n	800b008 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	223c      	movs	r2, #60	; 0x3c
 800af60:	2101      	movs	r1, #1
 800af62:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	223d      	movs	r2, #61	; 0x3d
 800af68:	2102      	movs	r1, #2
 800af6a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	689b      	ldr	r3, [r3, #8]
 800af7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a23      	ldr	r2, [pc, #140]	; (800b010 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d108      	bne.n	800af98 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	4a22      	ldr	r2, [pc, #136]	; (800b014 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800af8a:	4013      	ands	r3, r2
 800af8c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	68fa      	ldr	r2, [r7, #12]
 800af94:	4313      	orrs	r3, r2
 800af96:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2270      	movs	r2, #112	; 0x70
 800af9c:	4393      	bics	r3, r2
 800af9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	68fa      	ldr	r2, [r7, #12]
 800afa6:	4313      	orrs	r3, r2
 800afa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	68fa      	ldr	r2, [r7, #12]
 800afb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a16      	ldr	r2, [pc, #88]	; (800b010 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d00f      	beq.n	800afdc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681a      	ldr	r2, [r3, #0]
 800afc0:	2380      	movs	r3, #128	; 0x80
 800afc2:	05db      	lsls	r3, r3, #23
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d009      	beq.n	800afdc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a12      	ldr	r2, [pc, #72]	; (800b018 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d004      	beq.n	800afdc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a11      	ldr	r2, [pc, #68]	; (800b01c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d10c      	bne.n	800aff6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	2280      	movs	r2, #128	; 0x80
 800afe0:	4393      	bics	r3, r2
 800afe2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	689b      	ldr	r3, [r3, #8]
 800afe8:	68ba      	ldr	r2, [r7, #8]
 800afea:	4313      	orrs	r3, r2
 800afec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	68ba      	ldr	r2, [r7, #8]
 800aff4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	223d      	movs	r2, #61	; 0x3d
 800affa:	2101      	movs	r1, #1
 800affc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	223c      	movs	r2, #60	; 0x3c
 800b002:	2100      	movs	r1, #0
 800b004:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b006:	2300      	movs	r3, #0
}
 800b008:	0018      	movs	r0, r3
 800b00a:	46bd      	mov	sp, r7
 800b00c:	b004      	add	sp, #16
 800b00e:	bd80      	pop	{r7, pc}
 800b010:	40012c00 	.word	0x40012c00
 800b014:	ff0fffff 	.word	0xff0fffff
 800b018:	40000400 	.word	0x40000400
 800b01c:	40014000 	.word	0x40014000

0800b020 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b02a:	2300      	movs	r3, #0
 800b02c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	223c      	movs	r2, #60	; 0x3c
 800b032:	5c9b      	ldrb	r3, [r3, r2]
 800b034:	2b01      	cmp	r3, #1
 800b036:	d101      	bne.n	800b03c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b038:	2302      	movs	r3, #2
 800b03a:	e079      	b.n	800b130 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	223c      	movs	r2, #60	; 0x3c
 800b040:	2101      	movs	r1, #1
 800b042:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	22ff      	movs	r2, #255	; 0xff
 800b048:	4393      	bics	r3, r2
 800b04a:	001a      	movs	r2, r3
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	68db      	ldr	r3, [r3, #12]
 800b050:	4313      	orrs	r3, r2
 800b052:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	4a38      	ldr	r2, [pc, #224]	; (800b138 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800b058:	401a      	ands	r2, r3
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	689b      	ldr	r3, [r3, #8]
 800b05e:	4313      	orrs	r3, r2
 800b060:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	4a35      	ldr	r2, [pc, #212]	; (800b13c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b066:	401a      	ands	r2, r3
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	4313      	orrs	r3, r2
 800b06e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	4a33      	ldr	r2, [pc, #204]	; (800b140 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b074:	401a      	ands	r2, r3
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	4a30      	ldr	r2, [pc, #192]	; (800b144 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b082:	401a      	ands	r2, r3
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	691b      	ldr	r3, [r3, #16]
 800b088:	4313      	orrs	r3, r2
 800b08a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	4a2e      	ldr	r2, [pc, #184]	; (800b148 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800b090:	401a      	ands	r2, r3
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	695b      	ldr	r3, [r3, #20]
 800b096:	4313      	orrs	r3, r2
 800b098:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	4a2b      	ldr	r2, [pc, #172]	; (800b14c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800b09e:	401a      	ands	r2, r3
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	4a29      	ldr	r2, [pc, #164]	; (800b150 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800b0ac:	401a      	ands	r2, r3
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	699b      	ldr	r3, [r3, #24]
 800b0b2:	041b      	lsls	r3, r3, #16
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4a25      	ldr	r2, [pc, #148]	; (800b154 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d106      	bne.n	800b0d0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	4a24      	ldr	r2, [pc, #144]	; (800b158 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b0c6:	401a      	ands	r2, r3
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	69db      	ldr	r3, [r3, #28]
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a1f      	ldr	r2, [pc, #124]	; (800b154 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d121      	bne.n	800b11e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	4a1f      	ldr	r2, [pc, #124]	; (800b15c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b0de:	401a      	ands	r2, r3
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0e4:	051b      	lsls	r3, r3, #20
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	4a1c      	ldr	r2, [pc, #112]	; (800b160 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800b0ee:	401a      	ands	r2, r3
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	6a1b      	ldr	r3, [r3, #32]
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	4a1a      	ldr	r2, [pc, #104]	; (800b164 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800b0fc:	401a      	ands	r2, r3
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b102:	4313      	orrs	r3, r2
 800b104:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4a12      	ldr	r2, [pc, #72]	; (800b154 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d106      	bne.n	800b11e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	4a15      	ldr	r2, [pc, #84]	; (800b168 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800b114:	401a      	ands	r2, r3
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b11a:	4313      	orrs	r3, r2
 800b11c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	68fa      	ldr	r2, [r7, #12]
 800b124:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	223c      	movs	r2, #60	; 0x3c
 800b12a:	2100      	movs	r1, #0
 800b12c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b12e:	2300      	movs	r3, #0
}
 800b130:	0018      	movs	r0, r3
 800b132:	46bd      	mov	sp, r7
 800b134:	b004      	add	sp, #16
 800b136:	bd80      	pop	{r7, pc}
 800b138:	fffffcff 	.word	0xfffffcff
 800b13c:	fffffbff 	.word	0xfffffbff
 800b140:	fffff7ff 	.word	0xfffff7ff
 800b144:	ffffefff 	.word	0xffffefff
 800b148:	ffffdfff 	.word	0xffffdfff
 800b14c:	ffffbfff 	.word	0xffffbfff
 800b150:	fff0ffff 	.word	0xfff0ffff
 800b154:	40012c00 	.word	0x40012c00
 800b158:	efffffff 	.word	0xefffffff
 800b15c:	ff0fffff 	.word	0xff0fffff
 800b160:	feffffff 	.word	0xfeffffff
 800b164:	fdffffff 	.word	0xfdffffff
 800b168:	dfffffff 	.word	0xdfffffff

0800b16c <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b08a      	sub	sp, #40	; 0x28
 800b170:	af00      	add	r7, sp, #0
 800b172:	60f8      	str	r0, [r7, #12]
 800b174:	60b9      	str	r1, [r7, #8]
 800b176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b178:	2327      	movs	r3, #39	; 0x27
 800b17a:	18fb      	adds	r3, r7, r3
 800b17c:	2200      	movs	r2, #0
 800b17e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	223c      	movs	r2, #60	; 0x3c
 800b184:	5c9b      	ldrb	r3, [r3, r2]
 800b186:	2b01      	cmp	r3, #1
 800b188:	d101      	bne.n	800b18e <HAL_TIMEx_ConfigBreakInput+0x22>
 800b18a:	2302      	movs	r3, #2
 800b18c:	e095      	b.n	800b2ba <HAL_TIMEx_ConfigBreakInput+0x14e>
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	223c      	movs	r2, #60	; 0x3c
 800b192:	2101      	movs	r1, #1
 800b194:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	2b04      	cmp	r3, #4
 800b19c:	d019      	beq.n	800b1d2 <HAL_TIMEx_ConfigBreakInput+0x66>
 800b19e:	d822      	bhi.n	800b1e6 <HAL_TIMEx_ConfigBreakInput+0x7a>
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d002      	beq.n	800b1aa <HAL_TIMEx_ConfigBreakInput+0x3e>
 800b1a4:	2b02      	cmp	r3, #2
 800b1a6:	d00a      	beq.n	800b1be <HAL_TIMEx_ConfigBreakInput+0x52>
 800b1a8:	e01d      	b.n	800b1e6 <HAL_TIMEx_ConfigBreakInput+0x7a>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800b1b2:	2380      	movs	r3, #128	; 0x80
 800b1b4:	009b      	lsls	r3, r3, #2
 800b1b6:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800b1b8:	2309      	movs	r3, #9
 800b1ba:	617b      	str	r3, [r7, #20]
      break;
 800b1bc:	e01c      	b.n	800b1f8 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800b1be:	2302      	movs	r3, #2
 800b1c0:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800b1c6:	2380      	movs	r3, #128	; 0x80
 800b1c8:	00db      	lsls	r3, r3, #3
 800b1ca:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800b1cc:	230a      	movs	r3, #10
 800b1ce:	617b      	str	r3, [r7, #20]
      break;
 800b1d0:	e012      	b.n	800b1f8 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800b1d2:	2304      	movs	r3, #4
 800b1d4:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800b1d6:	2302      	movs	r3, #2
 800b1d8:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800b1da:	2380      	movs	r3, #128	; 0x80
 800b1dc:	011b      	lsls	r3, r3, #4
 800b1de:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800b1e0:	230b      	movs	r3, #11
 800b1e2:	617b      	str	r3, [r7, #20]
      break;
 800b1e4:	e008      	b.n	800b1f8 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	617b      	str	r3, [r7, #20]
      break;
 800b1f6:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	d003      	beq.n	800b206 <HAL_TIMEx_ConfigBreakInput+0x9a>
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	2b02      	cmp	r3, #2
 800b202:	d027      	beq.n	800b254 <HAL_TIMEx_ConfigBreakInput+0xe8>
 800b204:	e04d      	b.n	800b2a2 <HAL_TIMEx_ConfigBreakInput+0x136>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b20c:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800b20e:	6a3b      	ldr	r3, [r7, #32]
 800b210:	43da      	mvns	r2, r3
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	4013      	ands	r3, r2
 800b216:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	685a      	ldr	r2, [r3, #4]
 800b21c:	69bb      	ldr	r3, [r7, #24]
 800b21e:	409a      	lsls	r2, r3
 800b220:	0013      	movs	r3, r2
 800b222:	6a3a      	ldr	r2, [r7, #32]
 800b224:	4013      	ands	r3, r2
 800b226:	693a      	ldr	r2, [r7, #16]
 800b228:	4313      	orrs	r3, r2
 800b22a:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800b22c:	69fb      	ldr	r3, [r7, #28]
 800b22e:	43da      	mvns	r2, r3
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	4013      	ands	r3, r2
 800b234:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	689a      	ldr	r2, [r3, #8]
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	409a      	lsls	r2, r3
 800b23e:	0013      	movs	r3, r2
 800b240:	69fa      	ldr	r2, [r7, #28]
 800b242:	4013      	ands	r3, r2
 800b244:	693a      	ldr	r2, [r7, #16]
 800b246:	4313      	orrs	r3, r2
 800b248:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	693a      	ldr	r2, [r7, #16]
 800b250:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800b252:	e02b      	b.n	800b2ac <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b25a:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800b25c:	6a3b      	ldr	r3, [r7, #32]
 800b25e:	43da      	mvns	r2, r3
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	4013      	ands	r3, r2
 800b264:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	685a      	ldr	r2, [r3, #4]
 800b26a:	69bb      	ldr	r3, [r7, #24]
 800b26c:	409a      	lsls	r2, r3
 800b26e:	0013      	movs	r3, r2
 800b270:	6a3a      	ldr	r2, [r7, #32]
 800b272:	4013      	ands	r3, r2
 800b274:	693a      	ldr	r2, [r7, #16]
 800b276:	4313      	orrs	r3, r2
 800b278:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	43da      	mvns	r2, r3
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	4013      	ands	r3, r2
 800b282:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	689a      	ldr	r2, [r3, #8]
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	409a      	lsls	r2, r3
 800b28c:	0013      	movs	r3, r2
 800b28e:	69fa      	ldr	r2, [r7, #28]
 800b290:	4013      	ands	r3, r2
 800b292:	693a      	ldr	r2, [r7, #16]
 800b294:	4313      	orrs	r3, r2
 800b296:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	693a      	ldr	r2, [r7, #16]
 800b29e:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800b2a0:	e004      	b.n	800b2ac <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    default:
      status = HAL_ERROR;
 800b2a2:	2327      	movs	r3, #39	; 0x27
 800b2a4:	18fb      	adds	r3, r7, r3
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	701a      	strb	r2, [r3, #0]
      break;
 800b2aa:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	223c      	movs	r2, #60	; 0x3c
 800b2b0:	2100      	movs	r1, #0
 800b2b2:	5499      	strb	r1, [r3, r2]

  return status;
 800b2b4:	2327      	movs	r3, #39	; 0x27
 800b2b6:	18fb      	adds	r3, r7, r3
 800b2b8:	781b      	ldrb	r3, [r3, #0]
}
 800b2ba:	0018      	movs	r0, r3
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	b00a      	add	sp, #40	; 0x28
 800b2c0:	bd80      	pop	{r7, pc}
	...

0800b2c4 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d101      	bne.n	800b2d6 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e03f      	b.n	800b356 <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2259      	movs	r2, #89	; 0x59
 800b2da:	5c9b      	ldrb	r3, [r3, r2]
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d107      	bne.n	800b2f2 <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2258      	movs	r2, #88	; 0x58
 800b2e6:	2100      	movs	r1, #0
 800b2e8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	0018      	movs	r0, r3
 800b2ee:	f7f9 f815 	bl	800431c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2259      	movs	r2, #89	; 0x59
 800b2f6:	2102      	movs	r1, #2
 800b2f8:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	2101      	movs	r1, #1
 800b306:	438a      	bics	r2, r1
 800b308:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	0018      	movs	r0, r3
 800b30e:	f000 fbef 	bl	800baf0 <USART_SetConfig>
 800b312:	0003      	movs	r3, r0
 800b314:	2b01      	cmp	r3, #1
 800b316:	d101      	bne.n	800b31c <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 800b318:	2301      	movs	r3, #1
 800b31a:	e01c      	b.n	800b356 <HAL_USART_Init+0x92>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	685a      	ldr	r2, [r3, #4]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	490e      	ldr	r1, [pc, #56]	; (800b360 <HAL_USART_Init+0x9c>)
 800b328:	400a      	ands	r2, r1
 800b32a:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	689a      	ldr	r2, [r3, #8]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	212a      	movs	r1, #42	; 0x2a
 800b338:	438a      	bics	r2, r1
 800b33a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	2101      	movs	r1, #1
 800b348:	430a      	orrs	r2, r1
 800b34a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	0018      	movs	r0, r3
 800b350:	f000 fe6a 	bl	800c028 <USART_CheckIdleState>
 800b354:	0003      	movs	r3, r0
}
 800b356:	0018      	movs	r0, r3
 800b358:	46bd      	mov	sp, r7
 800b35a:	b002      	add	sp, #8
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	46c0      	nop			; (mov r8, r8)
 800b360:	ffffbfff 	.word	0xffffbfff

0800b364 <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b08a      	sub	sp, #40	; 0x28
 800b368:	af02      	add	r7, sp, #8
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	603b      	str	r3, [r7, #0]
 800b370:	1dbb      	adds	r3, r7, #6
 800b372:	801a      	strh	r2, [r3, #0]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2259      	movs	r2, #89	; 0x59
 800b378:	5c9b      	ldrb	r3, [r3, r2]
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d000      	beq.n	800b382 <HAL_USART_Transmit+0x1e>
 800b380:	e0a9      	b.n	800b4d6 <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d003      	beq.n	800b390 <HAL_USART_Transmit+0x2c>
 800b388:	1dbb      	adds	r3, r7, #6
 800b38a:	881b      	ldrh	r3, [r3, #0]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d101      	bne.n	800b394 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b390:	2301      	movs	r3, #1
 800b392:	e0a1      	b.n	800b4d8 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	689a      	ldr	r2, [r3, #8]
 800b398:	2380      	movs	r3, #128	; 0x80
 800b39a:	015b      	lsls	r3, r3, #5
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d109      	bne.n	800b3b4 <HAL_USART_Transmit+0x50>
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	691b      	ldr	r3, [r3, #16]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d105      	bne.n	800b3b4 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	4013      	ands	r3, r2
 800b3ae:	d001      	beq.n	800b3b4 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	e091      	b.n	800b4d8 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2258      	movs	r2, #88	; 0x58
 800b3b8:	5c9b      	ldrb	r3, [r3, r2]
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	d101      	bne.n	800b3c2 <HAL_USART_Transmit+0x5e>
 800b3be:	2302      	movs	r3, #2
 800b3c0:	e08a      	b.n	800b4d8 <HAL_USART_Transmit+0x174>
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2258      	movs	r2, #88	; 0x58
 800b3c6:	2101      	movs	r1, #1
 800b3c8:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2259      	movs	r2, #89	; 0x59
 800b3d4:	2112      	movs	r1, #18
 800b3d6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b3d8:	f7f9 fa14 	bl	8004804 <HAL_GetTick>
 800b3dc:	0003      	movs	r3, r0
 800b3de:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	1dba      	adds	r2, r7, #6
 800b3e4:	8812      	ldrh	r2, [r2, #0]
 800b3e6:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	1dba      	adds	r2, r7, #6
 800b3ec:	8812      	ldrh	r2, [r2, #0]
 800b3ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	689a      	ldr	r2, [r3, #8]
 800b3f4:	2380      	movs	r3, #128	; 0x80
 800b3f6:	015b      	lsls	r3, r3, #5
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d108      	bne.n	800b40e <HAL_USART_Transmit+0xaa>
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	691b      	ldr	r3, [r3, #16]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d104      	bne.n	800b40e <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 800b404:	2300      	movs	r3, #0
 800b406:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	61bb      	str	r3, [r7, #24]
 800b40c:	e003      	b.n	800b416 <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800b412:	2300      	movs	r3, #0
 800b414:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800b416:	e02a      	b.n	800b46e <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b418:	697a      	ldr	r2, [r7, #20]
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	9300      	str	r3, [sp, #0]
 800b420:	0013      	movs	r3, r2
 800b422:	2200      	movs	r2, #0
 800b424:	2180      	movs	r1, #128	; 0x80
 800b426:	f000 fb2d 	bl	800ba84 <USART_WaitOnFlagUntilTimeout>
 800b42a:	1e03      	subs	r3, r0, #0
 800b42c:	d001      	beq.n	800b432 <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800b42e:	2303      	movs	r3, #3
 800b430:	e052      	b.n	800b4d8 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 800b432:	69fb      	ldr	r3, [r7, #28]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d10b      	bne.n	800b450 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 800b438:	69bb      	ldr	r3, [r7, #24]
 800b43a:	881b      	ldrh	r3, [r3, #0]
 800b43c:	001a      	movs	r2, r3
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	05d2      	lsls	r2, r2, #23
 800b444:	0dd2      	lsrs	r2, r2, #23
 800b446:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 800b448:	69bb      	ldr	r3, [r7, #24]
 800b44a:	3302      	adds	r3, #2
 800b44c:	61bb      	str	r3, [r7, #24]
 800b44e:	e007      	b.n	800b460 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800b450:	69fb      	ldr	r3, [r7, #28]
 800b452:	781a      	ldrb	r2, [r3, #0]
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 800b45a:	69fb      	ldr	r3, [r7, #28]
 800b45c:	3301      	adds	r3, #1
 800b45e:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b464:	b29b      	uxth	r3, r3
 800b466:	3b01      	subs	r3, #1
 800b468:	b29a      	uxth	r2, r3
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b472:	b29b      	uxth	r3, r3
 800b474:	2b00      	cmp	r3, #0
 800b476:	d1cf      	bne.n	800b418 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b478:	697a      	ldr	r2, [r7, #20]
 800b47a:	68f8      	ldr	r0, [r7, #12]
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	9300      	str	r3, [sp, #0]
 800b480:	0013      	movs	r3, r2
 800b482:	2200      	movs	r2, #0
 800b484:	2140      	movs	r1, #64	; 0x40
 800b486:	f000 fafd 	bl	800ba84 <USART_WaitOnFlagUntilTimeout>
 800b48a:	1e03      	subs	r3, r0, #0
 800b48c:	d001      	beq.n	800b492 <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 800b48e:	2303      	movs	r3, #3
 800b490:	e022      	b.n	800b4d8 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	2240      	movs	r2, #64	; 0x40
 800b498:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	2208      	movs	r2, #8
 800b4a0:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	699a      	ldr	r2, [r3, #24]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	2108      	movs	r1, #8
 800b4ae:	430a      	orrs	r2, r1
 800b4b0:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	699a      	ldr	r2, [r3, #24]
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2110      	movs	r1, #16
 800b4be:	430a      	orrs	r2, r1
 800b4c0:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2259      	movs	r2, #89	; 0x59
 800b4c6:	2101      	movs	r1, #1
 800b4c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2258      	movs	r2, #88	; 0x58
 800b4ce:	2100      	movs	r1, #0
 800b4d0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	e000      	b.n	800b4d8 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b4d6:	2302      	movs	r3, #2
  }
}
 800b4d8:	0018      	movs	r0, r3
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	b008      	add	sp, #32
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <HAL_USART_Transmit_DMA>:
  * @param  pTxData pointer to data buffer (u8 or u16 data elements).
  * @param  Size amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit_DMA(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size)
{
 800b4e0:	b590      	push	{r4, r7, lr}
 800b4e2:	b087      	sub	sp, #28
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	60f8      	str	r0, [r7, #12]
 800b4e8:	60b9      	str	r1, [r7, #8]
 800b4ea:	1dbb      	adds	r3, r7, #6
 800b4ec:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b4ee:	2317      	movs	r3, #23
 800b4f0:	18fb      	adds	r3, r7, r3
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	701a      	strb	r2, [r3, #0]
  const uint32_t *tmp;

  if (husart->State == HAL_USART_STATE_READY)
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2259      	movs	r2, #89	; 0x59
 800b4fa:	5c9b      	ldrb	r3, [r3, r2]
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d000      	beq.n	800b504 <HAL_USART_Transmit_DMA+0x24>
 800b502:	e07d      	b.n	800b600 <HAL_USART_Transmit_DMA+0x120>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d003      	beq.n	800b512 <HAL_USART_Transmit_DMA+0x32>
 800b50a:	1dbb      	adds	r3, r7, #6
 800b50c:	881b      	ldrh	r3, [r3, #0]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d101      	bne.n	800b516 <HAL_USART_Transmit_DMA+0x36>
    {
      return HAL_ERROR;
 800b512:	2301      	movs	r3, #1
 800b514:	e075      	b.n	800b602 <HAL_USART_Transmit_DMA+0x122>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	689a      	ldr	r2, [r3, #8]
 800b51a:	2380      	movs	r3, #128	; 0x80
 800b51c:	015b      	lsls	r3, r3, #5
 800b51e:	429a      	cmp	r2, r3
 800b520:	d10a      	bne.n	800b538 <HAL_USART_Transmit_DMA+0x58>
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	691b      	ldr	r3, [r3, #16]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d106      	bne.n	800b538 <HAL_USART_Transmit_DMA+0x58>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	001a      	movs	r2, r3
 800b52e:	2301      	movs	r3, #1
 800b530:	4013      	ands	r3, r2
 800b532:	d001      	beq.n	800b538 <HAL_USART_Transmit_DMA+0x58>
      {
        return  HAL_ERROR;
 800b534:	2301      	movs	r3, #1
 800b536:	e064      	b.n	800b602 <HAL_USART_Transmit_DMA+0x122>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2258      	movs	r2, #88	; 0x58
 800b53c:	5c9b      	ldrb	r3, [r3, r2]
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d101      	bne.n	800b546 <HAL_USART_Transmit_DMA+0x66>
 800b542:	2302      	movs	r3, #2
 800b544:	e05d      	b.n	800b602 <HAL_USART_Transmit_DMA+0x122>
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2258      	movs	r2, #88	; 0x58
 800b54a:	2101      	movs	r1, #1
 800b54c:	5499      	strb	r1, [r3, r2]

    husart->pTxBuffPtr = pTxData;
 800b54e:	68ba      	ldr	r2, [r7, #8]
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	629a      	str	r2, [r3, #40]	; 0x28
    husart->TxXferSize = Size;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	1dba      	adds	r2, r7, #6
 800b558:	8812      	ldrh	r2, [r2, #0]
 800b55a:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	1dba      	adds	r2, r7, #6
 800b560:	8812      	ldrh	r2, [r2, #0]
 800b562:	85da      	strh	r2, [r3, #46]	; 0x2e

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2200      	movs	r2, #0
 800b568:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2259      	movs	r2, #89	; 0x59
 800b56e:	2112      	movs	r1, #18
 800b570:	5499      	strb	r1, [r3, r2]

    if (husart->hdmatx != NULL)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b576:	2b00      	cmp	r3, #0
 800b578:	d01e      	beq.n	800b5b8 <HAL_USART_Transmit_DMA+0xd8>
    {
      /* Set the USART DMA transfer complete callback */
      husart->hdmatx->XferCpltCallback = USART_DMATransmitCplt;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b57e:	4a23      	ldr	r2, [pc, #140]	; (800b60c <HAL_USART_Transmit_DMA+0x12c>)
 800b580:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the USART DMA Half transfer complete callback */
      husart->hdmatx->XferHalfCpltCallback = USART_DMATxHalfCplt;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b586:	4a22      	ldr	r2, [pc, #136]	; (800b610 <HAL_USART_Transmit_DMA+0x130>)
 800b588:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      husart->hdmatx->XferErrorCallback = USART_DMAError;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b58e:	4a21      	ldr	r2, [pc, #132]	; (800b614 <HAL_USART_Transmit_DMA+0x134>)
 800b590:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the USART transmit DMA channel */
      tmp = (const uint32_t *)&pTxData;
 800b592:	2308      	movs	r3, #8
 800b594:	18fb      	adds	r3, r7, r3
 800b596:	613b      	str	r3, [r7, #16]
      status = HAL_DMA_Start_IT(husart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&husart->Instance->TDR, Size);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	6819      	ldr	r1, [r3, #0]
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	3328      	adds	r3, #40	; 0x28
 800b5a6:	001a      	movs	r2, r3
 800b5a8:	1dbb      	adds	r3, r7, #6
 800b5aa:	881b      	ldrh	r3, [r3, #0]
 800b5ac:	2417      	movs	r4, #23
 800b5ae:	193c      	adds	r4, r7, r4
 800b5b0:	f7f9 fd34 	bl	800501c <HAL_DMA_Start_IT>
 800b5b4:	0003      	movs	r3, r0
 800b5b6:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 800b5b8:	2317      	movs	r3, #23
 800b5ba:	18fb      	adds	r3, r7, r3
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d111      	bne.n	800b5e6 <HAL_USART_Transmit_DMA+0x106>
    {
      /* Clear the TC flag in the ICR register */
      __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	2240      	movs	r2, #64	; 0x40
 800b5c8:	621a      	str	r2, [r3, #32]

      /* Process Unlocked */
      __HAL_UNLOCK(husart);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2258      	movs	r2, #88	; 0x58
 800b5ce:	2100      	movs	r1, #0
 800b5d0:	5499      	strb	r1, [r3, r2]

      /* Enable the DMA transfer for transmit request by setting the DMAT bit
         in the USART CR3 register */
      SET_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	689a      	ldr	r2, [r3, #8]
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2180      	movs	r1, #128	; 0x80
 800b5de:	430a      	orrs	r2, r1
 800b5e0:	609a      	str	r2, [r3, #8]

      return HAL_OK;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	e00d      	b.n	800b602 <HAL_USART_Transmit_DMA+0x122>
    }
    else
    {
      /* Set error code to DMA */
      husart->ErrorCode = HAL_USART_ERROR_DMA;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2210      	movs	r2, #16
 800b5ea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process Unlocked */
      __HAL_UNLOCK(husart);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2258      	movs	r2, #88	; 0x58
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	5499      	strb	r1, [r3, r2]

      /* Restore husart->State to ready */
      husart->State = HAL_USART_STATE_READY;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2259      	movs	r2, #89	; 0x59
 800b5f8:	2101      	movs	r1, #1
 800b5fa:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	e000      	b.n	800b602 <HAL_USART_Transmit_DMA+0x122>
    }
  }
  else
  {
    return HAL_BUSY;
 800b600:	2302      	movs	r3, #2
  }
}
 800b602:	0018      	movs	r0, r3
 800b604:	46bd      	mov	sp, r7
 800b606:	b007      	add	sp, #28
 800b608:	bd90      	pop	{r4, r7, pc}
 800b60a:	46c0      	nop			; (mov r8, r8)
 800b60c:	0800b98d 	.word	0x0800b98d
 800b610:	0800b9f7 	.word	0x0800b9f7
 800b614:	0800ba15 	.word	0x0800ba15

0800b618 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b088      	sub	sp, #32
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	69db      	ldr	r3, [r3, #28]
 800b626:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
 800b638:	69fb      	ldr	r3, [r7, #28]
 800b63a:	4ab3      	ldr	r2, [pc, #716]	; (800b908 <HAL_USART_IRQHandler+0x2f0>)
 800b63c:	4013      	ands	r3, r2
 800b63e:	613b      	str	r3, [r7, #16]
                                      USART_ISR_UDR));
  if (errorflags == 0U)
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d117      	bne.n	800b676 <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b646:	69fb      	ldr	r3, [r7, #28]
 800b648:	2220      	movs	r2, #32
 800b64a:	4013      	ands	r3, r2
 800b64c:	d013      	beq.n	800b676 <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	2220      	movs	r2, #32
 800b652:	4013      	ands	r3, r2
 800b654:	d104      	bne.n	800b660 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b656:	697a      	ldr	r2, [r7, #20]
 800b658:	2380      	movs	r3, #128	; 0x80
 800b65a:	055b      	lsls	r3, r3, #21
 800b65c:	4013      	ands	r3, r2
 800b65e:	d00a      	beq.n	800b676 <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b664:	2b00      	cmp	r3, #0
 800b666:	d100      	bne.n	800b66a <HAL_USART_IRQHandler+0x52>
 800b668:	e14a      	b.n	800b900 <HAL_USART_IRQHandler+0x2e8>
      {
        husart->RxISR(husart);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b66e:	687a      	ldr	r2, [r7, #4]
 800b670:	0010      	movs	r0, r2
 800b672:	4798      	blx	r3
      }
      return;
 800b674:	e144      	b.n	800b900 <HAL_USART_IRQHandler+0x2e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d100      	bne.n	800b67e <HAL_USART_IRQHandler+0x66>
 800b67c:	e100      	b.n	800b880 <HAL_USART_IRQHandler+0x268>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	4aa2      	ldr	r2, [pc, #648]	; (800b90c <HAL_USART_IRQHandler+0x2f4>)
 800b682:	4013      	ands	r3, r2
 800b684:	d105      	bne.n	800b692 <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 800b686:	69ba      	ldr	r2, [r7, #24]
 800b688:	2390      	movs	r3, #144	; 0x90
 800b68a:	005b      	lsls	r3, r3, #1
 800b68c:	4013      	ands	r3, r2
 800b68e:	d100      	bne.n	800b692 <HAL_USART_IRQHandler+0x7a>
 800b690:	e0f6      	b.n	800b880 <HAL_USART_IRQHandler+0x268>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b692:	69fb      	ldr	r3, [r7, #28]
 800b694:	2201      	movs	r2, #1
 800b696:	4013      	ands	r3, r2
 800b698:	d00e      	beq.n	800b6b8 <HAL_USART_IRQHandler+0xa0>
 800b69a:	69ba      	ldr	r2, [r7, #24]
 800b69c:	2380      	movs	r3, #128	; 0x80
 800b69e:	005b      	lsls	r3, r3, #1
 800b6a0:	4013      	ands	r3, r2
 800b6a2:	d009      	beq.n	800b6b8 <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	431a      	orrs	r2, r3
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b6b8:	69fb      	ldr	r3, [r7, #28]
 800b6ba:	2202      	movs	r2, #2
 800b6bc:	4013      	ands	r3, r2
 800b6be:	d00d      	beq.n	800b6dc <HAL_USART_IRQHandler+0xc4>
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	4013      	ands	r3, r2
 800b6c6:	d009      	beq.n	800b6dc <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	2202      	movs	r2, #2
 800b6ce:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6d4:	2204      	movs	r2, #4
 800b6d6:	431a      	orrs	r2, r3
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b6dc:	69fb      	ldr	r3, [r7, #28]
 800b6de:	2204      	movs	r2, #4
 800b6e0:	4013      	ands	r3, r2
 800b6e2:	d00d      	beq.n	800b700 <HAL_USART_IRQHandler+0xe8>
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	4013      	ands	r3, r2
 800b6ea:	d009      	beq.n	800b700 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	2204      	movs	r2, #4
 800b6f2:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6f8:	2202      	movs	r2, #2
 800b6fa:	431a      	orrs	r2, r3
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b700:	69fb      	ldr	r3, [r7, #28]
 800b702:	2208      	movs	r2, #8
 800b704:	4013      	ands	r3, r2
 800b706:	d011      	beq.n	800b72c <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b708:	69bb      	ldr	r3, [r7, #24]
 800b70a:	2220      	movs	r2, #32
 800b70c:	4013      	ands	r3, r2
 800b70e:	d103      	bne.n	800b718 <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	4a7e      	ldr	r2, [pc, #504]	; (800b90c <HAL_USART_IRQHandler+0x2f4>)
 800b714:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b716:	d009      	beq.n	800b72c <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2208      	movs	r2, #8
 800b71e:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b724:	2208      	movs	r2, #8
 800b726:	431a      	orrs	r2, r3
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b72c:	69fa      	ldr	r2, [r7, #28]
 800b72e:	2380      	movs	r3, #128	; 0x80
 800b730:	011b      	lsls	r3, r3, #4
 800b732:	4013      	ands	r3, r2
 800b734:	d00f      	beq.n	800b756 <HAL_USART_IRQHandler+0x13e>
 800b736:	69ba      	ldr	r2, [r7, #24]
 800b738:	2380      	movs	r3, #128	; 0x80
 800b73a:	04db      	lsls	r3, r3, #19
 800b73c:	4013      	ands	r3, r2
 800b73e:	d00a      	beq.n	800b756 <HAL_USART_IRQHandler+0x13e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2280      	movs	r2, #128	; 0x80
 800b746:	0112      	lsls	r2, r2, #4
 800b748:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b74e:	2280      	movs	r2, #128	; 0x80
 800b750:	431a      	orrs	r2, r3
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b756:	69fa      	ldr	r2, [r7, #28]
 800b758:	2380      	movs	r3, #128	; 0x80
 800b75a:	019b      	lsls	r3, r3, #6
 800b75c:	4013      	ands	r3, r2
 800b75e:	d01a      	beq.n	800b796 <HAL_USART_IRQHandler+0x17e>
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	2201      	movs	r2, #1
 800b764:	4013      	ands	r3, r2
 800b766:	d016      	beq.n	800b796 <HAL_USART_IRQHandler+0x17e>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2259      	movs	r2, #89	; 0x59
 800b76c:	5c9b      	ldrb	r3, [r3, r2]
 800b76e:	b2db      	uxtb	r3, r3
 800b770:	2b22      	cmp	r3, #34	; 0x22
 800b772:	d105      	bne.n	800b780 <HAL_USART_IRQHandler+0x168>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	2280      	movs	r2, #128	; 0x80
 800b77a:	0192      	lsls	r2, r2, #6
 800b77c:	621a      	str	r2, [r3, #32]
        return;
 800b77e:	e0ca      	b.n	800b916 <HAL_USART_IRQHandler+0x2fe>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	2280      	movs	r2, #128	; 0x80
 800b786:	0192      	lsls	r2, r2, #6
 800b788:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b78e:	2220      	movs	r2, #32
 800b790:	431a      	orrs	r2, r3
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d100      	bne.n	800b7a0 <HAL_USART_IRQHandler+0x188>
 800b79e:	e0b1      	b.n	800b904 <HAL_USART_IRQHandler+0x2ec>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b7a0:	69fb      	ldr	r3, [r7, #28]
 800b7a2:	2220      	movs	r2, #32
 800b7a4:	4013      	ands	r3, r2
 800b7a6:	d011      	beq.n	800b7cc <HAL_USART_IRQHandler+0x1b4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b7a8:	69bb      	ldr	r3, [r7, #24]
 800b7aa:	2220      	movs	r2, #32
 800b7ac:	4013      	ands	r3, r2
 800b7ae:	d104      	bne.n	800b7ba <HAL_USART_IRQHandler+0x1a2>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b7b0:	697a      	ldr	r2, [r7, #20]
 800b7b2:	2380      	movs	r3, #128	; 0x80
 800b7b4:	055b      	lsls	r3, r3, #21
 800b7b6:	4013      	ands	r3, r2
 800b7b8:	d008      	beq.n	800b7cc <HAL_USART_IRQHandler+0x1b4>
      {
        if (husart->RxISR != NULL)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d004      	beq.n	800b7cc <HAL_USART_IRQHandler+0x1b4>
        {
          husart->RxISR(husart);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	0010      	movs	r0, r2
 800b7ca:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7d0:	2208      	movs	r2, #8
 800b7d2:	4013      	ands	r3, r2
 800b7d4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	2240      	movs	r2, #64	; 0x40
 800b7de:	4013      	ands	r3, r2
 800b7e0:	2b40      	cmp	r3, #64	; 0x40
 800b7e2:	d002      	beq.n	800b7ea <HAL_USART_IRQHandler+0x1d2>
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d040      	beq.n	800b86c <HAL_USART_IRQHandler+0x254>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	0018      	movs	r0, r3
 800b7ee:	f000 f8ad 	bl	800b94c <USART_EndTransfer>

        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	689b      	ldr	r3, [r3, #8]
 800b7f8:	2240      	movs	r2, #64	; 0x40
 800b7fa:	4013      	ands	r3, r2
 800b7fc:	2b40      	cmp	r3, #64	; 0x40
 800b7fe:	d130      	bne.n	800b862 <HAL_USART_IRQHandler+0x24a>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	689a      	ldr	r2, [r3, #8]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2140      	movs	r1, #64	; 0x40
 800b80c:	438a      	bics	r2, r1
 800b80e:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b814:	2b00      	cmp	r3, #0
 800b816:	d008      	beq.n	800b82a <HAL_USART_IRQHandler+0x212>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b81c:	2200      	movs	r2, #0
 800b81e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b824:	0018      	movs	r0, r3
 800b826:	f7f9 fce1 	bl	80051ec <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d012      	beq.n	800b858 <HAL_USART_IRQHandler+0x240>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b836:	4a36      	ldr	r2, [pc, #216]	; (800b910 <HAL_USART_IRQHandler+0x2f8>)
 800b838:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b83e:	0018      	movs	r0, r3
 800b840:	f7f9 fcd4 	bl	80051ec <HAL_DMA_Abort_IT>
 800b844:	1e03      	subs	r3, r0, #0
 800b846:	d019      	beq.n	800b87c <HAL_USART_IRQHandler+0x264>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b84c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b852:	0018      	movs	r0, r3
 800b854:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b856:	e011      	b.n	800b87c <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	0018      	movs	r0, r3
 800b85c:	f000 f86e 	bl	800b93c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b860:	e00c      	b.n	800b87c <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	0018      	movs	r0, r3
 800b866:	f000 f869 	bl	800b93c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b86a:	e007      	b.n	800b87c <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	0018      	movs	r0, r3
 800b870:	f000 f864 	bl	800b93c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2200      	movs	r2, #0
 800b878:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 800b87a:	e043      	b.n	800b904 <HAL_USART_IRQHandler+0x2ec>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b87c:	46c0      	nop			; (mov r8, r8)
    return;
 800b87e:	e041      	b.n	800b904 <HAL_USART_IRQHandler+0x2ec>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b880:	69fb      	ldr	r3, [r7, #28]
 800b882:	2280      	movs	r2, #128	; 0x80
 800b884:	4013      	ands	r3, r2
 800b886:	d012      	beq.n	800b8ae <HAL_USART_IRQHandler+0x296>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b888:	69bb      	ldr	r3, [r7, #24]
 800b88a:	2280      	movs	r2, #128	; 0x80
 800b88c:	4013      	ands	r3, r2
 800b88e:	d104      	bne.n	800b89a <HAL_USART_IRQHandler+0x282>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b890:	697a      	ldr	r2, [r7, #20]
 800b892:	2380      	movs	r3, #128	; 0x80
 800b894:	041b      	lsls	r3, r3, #16
 800b896:	4013      	ands	r3, r2
 800b898:	d009      	beq.n	800b8ae <HAL_USART_IRQHandler+0x296>
  {
    if (husart->TxISR != NULL)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d038      	beq.n	800b914 <HAL_USART_IRQHandler+0x2fc>
    {
      husart->TxISR(husart);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	0010      	movs	r0, r2
 800b8aa:	4798      	blx	r3
    }
    return;
 800b8ac:	e032      	b.n	800b914 <HAL_USART_IRQHandler+0x2fc>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b8ae:	69fb      	ldr	r3, [r7, #28]
 800b8b0:	2240      	movs	r2, #64	; 0x40
 800b8b2:	4013      	ands	r3, r2
 800b8b4:	d008      	beq.n	800b8c8 <HAL_USART_IRQHandler+0x2b0>
 800b8b6:	69bb      	ldr	r3, [r7, #24]
 800b8b8:	2240      	movs	r2, #64	; 0x40
 800b8ba:	4013      	ands	r3, r2
 800b8bc:	d004      	beq.n	800b8c8 <HAL_USART_IRQHandler+0x2b0>
  {
    USART_EndTransmit_IT(husart);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	0018      	movs	r0, r3
 800b8c2:	f000 fbf5 	bl	800c0b0 <USART_EndTransmit_IT>
    return;
 800b8c6:	e026      	b.n	800b916 <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b8c8:	69fa      	ldr	r2, [r7, #28]
 800b8ca:	2380      	movs	r3, #128	; 0x80
 800b8cc:	041b      	lsls	r3, r3, #16
 800b8ce:	4013      	ands	r3, r2
 800b8d0:	d009      	beq.n	800b8e6 <HAL_USART_IRQHandler+0x2ce>
 800b8d2:	69ba      	ldr	r2, [r7, #24]
 800b8d4:	2380      	movs	r3, #128	; 0x80
 800b8d6:	05db      	lsls	r3, r3, #23
 800b8d8:	4013      	ands	r3, r2
 800b8da:	d004      	beq.n	800b8e6 <HAL_USART_IRQHandler+0x2ce>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	0018      	movs	r0, r3
 800b8e0:	f000 fc31 	bl	800c146 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800b8e4:	e017      	b.n	800b916 <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b8e6:	69fa      	ldr	r2, [r7, #28]
 800b8e8:	2380      	movs	r3, #128	; 0x80
 800b8ea:	045b      	lsls	r3, r3, #17
 800b8ec:	4013      	ands	r3, r2
 800b8ee:	d012      	beq.n	800b916 <HAL_USART_IRQHandler+0x2fe>
 800b8f0:	69bb      	ldr	r3, [r7, #24]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	da0f      	bge.n	800b916 <HAL_USART_IRQHandler+0x2fe>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	0018      	movs	r0, r3
 800b8fa:	f000 fc1c 	bl	800c136 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800b8fe:	e00a      	b.n	800b916 <HAL_USART_IRQHandler+0x2fe>
      return;
 800b900:	46c0      	nop			; (mov r8, r8)
 800b902:	e008      	b.n	800b916 <HAL_USART_IRQHandler+0x2fe>
    return;
 800b904:	46c0      	nop			; (mov r8, r8)
 800b906:	e006      	b.n	800b916 <HAL_USART_IRQHandler+0x2fe>
 800b908:	0000280f 	.word	0x0000280f
 800b90c:	10000001 	.word	0x10000001
 800b910:	0800ba5b 	.word	0x0800ba5b
    return;
 800b914:	46c0      	nop			; (mov r8, r8)
  }
}
 800b916:	46bd      	mov	sp, r7
 800b918:	b008      	add	sp, #32
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <HAL_USART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b082      	sub	sp, #8
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b924:	46c0      	nop			; (mov r8, r8)
 800b926:	46bd      	mov	sp, r7
 800b928:	b002      	add	sp, #8
 800b92a:	bd80      	pop	{r7, pc}

0800b92c <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b082      	sub	sp, #8
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 800b934:	46c0      	nop			; (mov r8, r8)
 800b936:	46bd      	mov	sp, r7
 800b938:	b002      	add	sp, #8
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b082      	sub	sp, #8
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 800b944:	46c0      	nop			; (mov r8, r8)
 800b946:	46bd      	mov	sp, r7
 800b948:	b002      	add	sp, #8
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	681a      	ldr	r2, [r3, #0]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	4909      	ldr	r1, [pc, #36]	; (800b984 <USART_EndTransfer+0x38>)
 800b960:	400a      	ands	r2, r1
 800b962:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	689a      	ldr	r2, [r3, #8]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4906      	ldr	r1, [pc, #24]	; (800b988 <USART_EndTransfer+0x3c>)
 800b970:	400a      	ands	r2, r1
 800b972:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2259      	movs	r2, #89	; 0x59
 800b978:	2101      	movs	r1, #1
 800b97a:	5499      	strb	r1, [r3, r2]
}
 800b97c:	46c0      	nop			; (mov r8, r8)
 800b97e:	46bd      	mov	sp, r7
 800b980:	b002      	add	sp, #8
 800b982:	bd80      	pop	{r7, pc}
 800b984:	fffffe1f 	.word	0xfffffe1f
 800b988:	ef7ffffe 	.word	0xef7ffffe

0800b98c <USART_DMATransmitCplt>:
  * @brief DMA USART transmit process complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b998:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	2220      	movs	r2, #32
 800b9a2:	4013      	ands	r3, r2
 800b9a4:	d119      	bne.n	800b9da <USART_DMATransmitCplt+0x4e>
  {
    husart->TxXferCount = 0U;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    if (husart->State == HAL_USART_STATE_BUSY_TX)
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2259      	movs	r2, #89	; 0x59
 800b9b0:	5c9b      	ldrb	r3, [r3, r2]
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	2b12      	cmp	r3, #18
 800b9b6:	d11a      	bne.n	800b9ee <USART_DMATransmitCplt+0x62>
    {
      /* Disable the DMA transfer for transmit request by resetting the DMAT bit
         in the USART CR3 register */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	689a      	ldr	r2, [r3, #8]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	2180      	movs	r1, #128	; 0x80
 800b9c4:	438a      	bics	r2, r1
 800b9c6:	609a      	str	r2, [r3, #8]

      /* Enable the USART Transmit Complete Interrupt */
      __HAL_USART_ENABLE_IT(husart, USART_IT_TC);
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	681a      	ldr	r2, [r3, #0]
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	2140      	movs	r1, #64	; 0x40
 800b9d4:	430a      	orrs	r2, r1
 800b9d6:	601a      	str	r2, [r3, #0]
      /* Call legacy weak Tx Complete Callback */
      HAL_USART_TxCpltCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    }
  }
}
 800b9d8:	e009      	b.n	800b9ee <USART_DMATransmitCplt+0x62>
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2259      	movs	r2, #89	; 0x59
 800b9de:	5c9b      	ldrb	r3, [r3, r2]
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	2b12      	cmp	r3, #18
 800b9e4:	d103      	bne.n	800b9ee <USART_DMATransmitCplt+0x62>
      HAL_USART_TxCpltCallback(husart);
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	0018      	movs	r0, r3
 800b9ea:	f7f5 fbc3 	bl	8001174 <HAL_USART_TxCpltCallback>
}
 800b9ee:	46c0      	nop			; (mov r8, r8)
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	b004      	add	sp, #16
 800b9f4:	bd80      	pop	{r7, pc}

0800b9f6 <USART_DMATxHalfCplt>:
  * @brief DMA USART transmit process half complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b9f6:	b580      	push	{r7, lr}
 800b9f8:	b084      	sub	sp, #16
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba02:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Half Complete Callback */
  husart->TxHalfCpltCallback(husart);
#else
  /* Call legacy weak Tx Half Complete Callback */
  HAL_USART_TxHalfCpltCallback(husart);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	0018      	movs	r0, r3
 800ba08:	f7ff ff88 	bl	800b91c <HAL_USART_TxHalfCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800ba0c:	46c0      	nop			; (mov r8, r8)
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	b004      	add	sp, #16
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <USART_DMAError>:
  * @brief DMA USART communication error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba20:	60fb      	str	r3, [r7, #12]

  husart->RxXferCount = 0U;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2200      	movs	r2, #0
 800ba26:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	85da      	strh	r2, [r3, #46]	; 0x2e
  USART_EndTransfer(husart);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	0018      	movs	r0, r3
 800ba32:	f7ff ff8b 	bl	800b94c <USART_EndTransfer>

  husart->ErrorCode |= HAL_USART_ERROR_DMA;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba3a:	2210      	movs	r2, #16
 800ba3c:	431a      	orrs	r2, r3
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	65da      	str	r2, [r3, #92]	; 0x5c
  husart->State = HAL_USART_STATE_READY;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2259      	movs	r2, #89	; 0x59
 800ba46:	2101      	movs	r1, #1
 800ba48:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	0018      	movs	r0, r3
 800ba4e:	f7ff ff75 	bl	800b93c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800ba52:	46c0      	nop			; (mov r8, r8)
 800ba54:	46bd      	mov	sp, r7
 800ba56:	b004      	add	sp, #16
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b084      	sub	sp, #16
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba66:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2200      	movs	r2, #0
 800ba72:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	0018      	movs	r0, r3
 800ba78:	f7ff ff60 	bl	800b93c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800ba7c:	46c0      	nop			; (mov r8, r8)
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	b004      	add	sp, #16
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	603b      	str	r3, [r7, #0]
 800ba90:	1dfb      	adds	r3, r7, #7
 800ba92:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800ba94:	e017      	b.n	800bac6 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba96:	69bb      	ldr	r3, [r7, #24]
 800ba98:	3301      	adds	r3, #1
 800ba9a:	d014      	beq.n	800bac6 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba9c:	f7f8 feb2 	bl	8004804 <HAL_GetTick>
 800baa0:	0002      	movs	r2, r0
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	1ad3      	subs	r3, r2, r3
 800baa6:	69ba      	ldr	r2, [r7, #24]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d302      	bcc.n	800bab2 <USART_WaitOnFlagUntilTimeout+0x2e>
 800baac:	69bb      	ldr	r3, [r7, #24]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d109      	bne.n	800bac6 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2259      	movs	r2, #89	; 0x59
 800bab6:	2101      	movs	r1, #1
 800bab8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2258      	movs	r2, #88	; 0x58
 800babe:	2100      	movs	r1, #0
 800bac0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800bac2:	2303      	movs	r3, #3
 800bac4:	e00f      	b.n	800bae6 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	69db      	ldr	r3, [r3, #28]
 800bacc:	68ba      	ldr	r2, [r7, #8]
 800bace:	4013      	ands	r3, r2
 800bad0:	68ba      	ldr	r2, [r7, #8]
 800bad2:	1ad3      	subs	r3, r2, r3
 800bad4:	425a      	negs	r2, r3
 800bad6:	4153      	adcs	r3, r2
 800bad8:	b2db      	uxtb	r3, r3
 800bada:	001a      	movs	r2, r3
 800badc:	1dfb      	adds	r3, r7, #7
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d0d8      	beq.n	800ba96 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bae4:	2300      	movs	r3, #0
}
 800bae6:	0018      	movs	r0, r3
 800bae8:	46bd      	mov	sp, r7
 800baea:	b004      	add	sp, #16
 800baec:	bd80      	pop	{r7, pc}
	...

0800baf0 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b088      	sub	sp, #32
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800baf8:	231e      	movs	r3, #30
 800bafa:	18fb      	adds	r3, r7, r3
 800bafc:	2200      	movs	r2, #0
 800bafe:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800bb00:	2300      	movs	r3, #0
 800bb02:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	689a      	ldr	r2, [r3, #8]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	691b      	ldr	r3, [r3, #16]
 800bb0c:	431a      	orrs	r2, r3
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	695b      	ldr	r3, [r3, #20]
 800bb12:	4313      	orrs	r3, r2
 800bb14:	2280      	movs	r2, #128	; 0x80
 800bb16:	0212      	lsls	r2, r2, #8
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4ab1      	ldr	r2, [pc, #708]	; (800bde8 <USART_SetConfig+0x2f8>)
 800bb24:	4013      	ands	r3, r2
 800bb26:	0019      	movs	r1, r3
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	697a      	ldr	r2, [r7, #20]
 800bb2e:	430a      	orrs	r2, r1
 800bb30:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800bb32:	2380      	movs	r3, #128	; 0x80
 800bb34:	011b      	lsls	r3, r3, #4
 800bb36:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6a1b      	ldr	r3, [r3, #32]
 800bb3c:	697a      	ldr	r2, [r7, #20]
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	699a      	ldr	r2, [r3, #24]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	69db      	ldr	r3, [r3, #28]
 800bb4a:	4313      	orrs	r3, r2
 800bb4c:	697a      	ldr	r2, [r7, #20]
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	68db      	ldr	r3, [r3, #12]
 800bb56:	697a      	ldr	r2, [r7, #20]
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	4aa2      	ldr	r2, [pc, #648]	; (800bdec <USART_SetConfig+0x2fc>)
 800bb64:	4013      	ands	r3, r2
 800bb66:	0019      	movs	r1, r3
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	697a      	ldr	r2, [r7, #20]
 800bb6e:	430a      	orrs	r2, r1
 800bb70:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb78:	220f      	movs	r2, #15
 800bb7a:	4393      	bics	r3, r2
 800bb7c:	0019      	movs	r1, r3
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	430a      	orrs	r2, r1
 800bb88:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	4a98      	ldr	r2, [pc, #608]	; (800bdf0 <USART_SetConfig+0x300>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d127      	bne.n	800bbe4 <USART_SetConfig+0xf4>
 800bb94:	4b97      	ldr	r3, [pc, #604]	; (800bdf4 <USART_SetConfig+0x304>)
 800bb96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb98:	2203      	movs	r2, #3
 800bb9a:	4013      	ands	r3, r2
 800bb9c:	2b03      	cmp	r3, #3
 800bb9e:	d017      	beq.n	800bbd0 <USART_SetConfig+0xe0>
 800bba0:	d81b      	bhi.n	800bbda <USART_SetConfig+0xea>
 800bba2:	2b02      	cmp	r3, #2
 800bba4:	d00a      	beq.n	800bbbc <USART_SetConfig+0xcc>
 800bba6:	d818      	bhi.n	800bbda <USART_SetConfig+0xea>
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d002      	beq.n	800bbb2 <USART_SetConfig+0xc2>
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	d00a      	beq.n	800bbc6 <USART_SetConfig+0xd6>
 800bbb0:	e013      	b.n	800bbda <USART_SetConfig+0xea>
 800bbb2:	231f      	movs	r3, #31
 800bbb4:	18fb      	adds	r3, r7, r3
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	701a      	strb	r2, [r3, #0]
 800bbba:	e058      	b.n	800bc6e <USART_SetConfig+0x17e>
 800bbbc:	231f      	movs	r3, #31
 800bbbe:	18fb      	adds	r3, r7, r3
 800bbc0:	2202      	movs	r2, #2
 800bbc2:	701a      	strb	r2, [r3, #0]
 800bbc4:	e053      	b.n	800bc6e <USART_SetConfig+0x17e>
 800bbc6:	231f      	movs	r3, #31
 800bbc8:	18fb      	adds	r3, r7, r3
 800bbca:	2204      	movs	r2, #4
 800bbcc:	701a      	strb	r2, [r3, #0]
 800bbce:	e04e      	b.n	800bc6e <USART_SetConfig+0x17e>
 800bbd0:	231f      	movs	r3, #31
 800bbd2:	18fb      	adds	r3, r7, r3
 800bbd4:	2208      	movs	r2, #8
 800bbd6:	701a      	strb	r2, [r3, #0]
 800bbd8:	e049      	b.n	800bc6e <USART_SetConfig+0x17e>
 800bbda:	231f      	movs	r3, #31
 800bbdc:	18fb      	adds	r3, r7, r3
 800bbde:	2210      	movs	r2, #16
 800bbe0:	701a      	strb	r2, [r3, #0]
 800bbe2:	e044      	b.n	800bc6e <USART_SetConfig+0x17e>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	4a83      	ldr	r2, [pc, #524]	; (800bdf8 <USART_SetConfig+0x308>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d127      	bne.n	800bc3e <USART_SetConfig+0x14e>
 800bbee:	4b81      	ldr	r3, [pc, #516]	; (800bdf4 <USART_SetConfig+0x304>)
 800bbf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbf2:	220c      	movs	r2, #12
 800bbf4:	4013      	ands	r3, r2
 800bbf6:	2b0c      	cmp	r3, #12
 800bbf8:	d017      	beq.n	800bc2a <USART_SetConfig+0x13a>
 800bbfa:	d81b      	bhi.n	800bc34 <USART_SetConfig+0x144>
 800bbfc:	2b08      	cmp	r3, #8
 800bbfe:	d00a      	beq.n	800bc16 <USART_SetConfig+0x126>
 800bc00:	d818      	bhi.n	800bc34 <USART_SetConfig+0x144>
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d002      	beq.n	800bc0c <USART_SetConfig+0x11c>
 800bc06:	2b04      	cmp	r3, #4
 800bc08:	d00a      	beq.n	800bc20 <USART_SetConfig+0x130>
 800bc0a:	e013      	b.n	800bc34 <USART_SetConfig+0x144>
 800bc0c:	231f      	movs	r3, #31
 800bc0e:	18fb      	adds	r3, r7, r3
 800bc10:	2200      	movs	r2, #0
 800bc12:	701a      	strb	r2, [r3, #0]
 800bc14:	e02b      	b.n	800bc6e <USART_SetConfig+0x17e>
 800bc16:	231f      	movs	r3, #31
 800bc18:	18fb      	adds	r3, r7, r3
 800bc1a:	2202      	movs	r2, #2
 800bc1c:	701a      	strb	r2, [r3, #0]
 800bc1e:	e026      	b.n	800bc6e <USART_SetConfig+0x17e>
 800bc20:	231f      	movs	r3, #31
 800bc22:	18fb      	adds	r3, r7, r3
 800bc24:	2204      	movs	r2, #4
 800bc26:	701a      	strb	r2, [r3, #0]
 800bc28:	e021      	b.n	800bc6e <USART_SetConfig+0x17e>
 800bc2a:	231f      	movs	r3, #31
 800bc2c:	18fb      	adds	r3, r7, r3
 800bc2e:	2208      	movs	r2, #8
 800bc30:	701a      	strb	r2, [r3, #0]
 800bc32:	e01c      	b.n	800bc6e <USART_SetConfig+0x17e>
 800bc34:	231f      	movs	r3, #31
 800bc36:	18fb      	adds	r3, r7, r3
 800bc38:	2210      	movs	r2, #16
 800bc3a:	701a      	strb	r2, [r3, #0]
 800bc3c:	e017      	b.n	800bc6e <USART_SetConfig+0x17e>
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4a6e      	ldr	r2, [pc, #440]	; (800bdfc <USART_SetConfig+0x30c>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d104      	bne.n	800bc52 <USART_SetConfig+0x162>
 800bc48:	231f      	movs	r3, #31
 800bc4a:	18fb      	adds	r3, r7, r3
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	701a      	strb	r2, [r3, #0]
 800bc50:	e00d      	b.n	800bc6e <USART_SetConfig+0x17e>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	4a6a      	ldr	r2, [pc, #424]	; (800be00 <USART_SetConfig+0x310>)
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	d104      	bne.n	800bc66 <USART_SetConfig+0x176>
 800bc5c:	231f      	movs	r3, #31
 800bc5e:	18fb      	adds	r3, r7, r3
 800bc60:	2200      	movs	r2, #0
 800bc62:	701a      	strb	r2, [r3, #0]
 800bc64:	e003      	b.n	800bc6e <USART_SetConfig+0x17e>
 800bc66:	231f      	movs	r3, #31
 800bc68:	18fb      	adds	r3, r7, r3
 800bc6a:	2210      	movs	r2, #16
 800bc6c:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 800bc6e:	231f      	movs	r3, #31
 800bc70:	18fb      	adds	r3, r7, r3
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	2b08      	cmp	r3, #8
 800bc76:	d100      	bne.n	800bc7a <USART_SetConfig+0x18a>
 800bc78:	e139      	b.n	800beee <USART_SetConfig+0x3fe>
 800bc7a:	dd00      	ble.n	800bc7e <USART_SetConfig+0x18e>
 800bc7c:	e195      	b.n	800bfaa <USART_SetConfig+0x4ba>
 800bc7e:	2b04      	cmp	r3, #4
 800bc80:	d100      	bne.n	800bc84 <USART_SetConfig+0x194>
 800bc82:	e0d3      	b.n	800be2c <USART_SetConfig+0x33c>
 800bc84:	dd00      	ble.n	800bc88 <USART_SetConfig+0x198>
 800bc86:	e190      	b.n	800bfaa <USART_SetConfig+0x4ba>
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d003      	beq.n	800bc94 <USART_SetConfig+0x1a4>
 800bc8c:	2b02      	cmp	r3, #2
 800bc8e:	d100      	bne.n	800bc92 <USART_SetConfig+0x1a2>
 800bc90:	e061      	b.n	800bd56 <USART_SetConfig+0x266>
 800bc92:	e18a      	b.n	800bfaa <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800bc94:	f7fc f8c4 	bl	8007e20 <HAL_RCC_GetPCLK1Freq>
 800bc98:	0003      	movs	r3, r0
 800bc9a:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d044      	beq.n	800bd2e <USART_SetConfig+0x23e>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	d03e      	beq.n	800bd2a <USART_SetConfig+0x23a>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb0:	2b02      	cmp	r3, #2
 800bcb2:	d038      	beq.n	800bd26 <USART_SetConfig+0x236>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb8:	2b03      	cmp	r3, #3
 800bcba:	d032      	beq.n	800bd22 <USART_SetConfig+0x232>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc0:	2b04      	cmp	r3, #4
 800bcc2:	d02c      	beq.n	800bd1e <USART_SetConfig+0x22e>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc8:	2b05      	cmp	r3, #5
 800bcca:	d026      	beq.n	800bd1a <USART_SetConfig+0x22a>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd0:	2b06      	cmp	r3, #6
 800bcd2:	d020      	beq.n	800bd16 <USART_SetConfig+0x226>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd8:	2b07      	cmp	r3, #7
 800bcda:	d01a      	beq.n	800bd12 <USART_SetConfig+0x222>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce0:	2b08      	cmp	r3, #8
 800bce2:	d014      	beq.n	800bd0e <USART_SetConfig+0x21e>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce8:	2b09      	cmp	r3, #9
 800bcea:	d00e      	beq.n	800bd0a <USART_SetConfig+0x21a>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf0:	2b0a      	cmp	r3, #10
 800bcf2:	d008      	beq.n	800bd06 <USART_SetConfig+0x216>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf8:	2b0b      	cmp	r3, #11
 800bcfa:	d102      	bne.n	800bd02 <USART_SetConfig+0x212>
 800bcfc:	2380      	movs	r3, #128	; 0x80
 800bcfe:	005b      	lsls	r3, r3, #1
 800bd00:	e016      	b.n	800bd30 <USART_SetConfig+0x240>
 800bd02:	2301      	movs	r3, #1
 800bd04:	e014      	b.n	800bd30 <USART_SetConfig+0x240>
 800bd06:	2380      	movs	r3, #128	; 0x80
 800bd08:	e012      	b.n	800bd30 <USART_SetConfig+0x240>
 800bd0a:	2340      	movs	r3, #64	; 0x40
 800bd0c:	e010      	b.n	800bd30 <USART_SetConfig+0x240>
 800bd0e:	2320      	movs	r3, #32
 800bd10:	e00e      	b.n	800bd30 <USART_SetConfig+0x240>
 800bd12:	2310      	movs	r3, #16
 800bd14:	e00c      	b.n	800bd30 <USART_SetConfig+0x240>
 800bd16:	230c      	movs	r3, #12
 800bd18:	e00a      	b.n	800bd30 <USART_SetConfig+0x240>
 800bd1a:	230a      	movs	r3, #10
 800bd1c:	e008      	b.n	800bd30 <USART_SetConfig+0x240>
 800bd1e:	2308      	movs	r3, #8
 800bd20:	e006      	b.n	800bd30 <USART_SetConfig+0x240>
 800bd22:	2306      	movs	r3, #6
 800bd24:	e004      	b.n	800bd30 <USART_SetConfig+0x240>
 800bd26:	2304      	movs	r3, #4
 800bd28:	e002      	b.n	800bd30 <USART_SetConfig+0x240>
 800bd2a:	2302      	movs	r3, #2
 800bd2c:	e000      	b.n	800bd30 <USART_SetConfig+0x240>
 800bd2e:	2301      	movs	r3, #1
 800bd30:	0019      	movs	r1, r3
 800bd32:	6938      	ldr	r0, [r7, #16]
 800bd34:	f7f4 f9e6 	bl	8000104 <__udivsi3>
 800bd38:	0003      	movs	r3, r0
 800bd3a:	005a      	lsls	r2, r3, #1
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	085b      	lsrs	r3, r3, #1
 800bd42:	18d2      	adds	r2, r2, r3
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	0019      	movs	r1, r3
 800bd4a:	0010      	movs	r0, r2
 800bd4c:	f7f4 f9da 	bl	8000104 <__udivsi3>
 800bd50:	0003      	movs	r3, r0
 800bd52:	61bb      	str	r3, [r7, #24]
      break;
 800bd54:	e12e      	b.n	800bfb4 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d052      	beq.n	800be04 <USART_SetConfig+0x314>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd62:	2b01      	cmp	r3, #1
 800bd64:	d03e      	beq.n	800bde4 <USART_SetConfig+0x2f4>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd6a:	2b02      	cmp	r3, #2
 800bd6c:	d038      	beq.n	800bde0 <USART_SetConfig+0x2f0>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd72:	2b03      	cmp	r3, #3
 800bd74:	d032      	beq.n	800bddc <USART_SetConfig+0x2ec>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd7a:	2b04      	cmp	r3, #4
 800bd7c:	d02c      	beq.n	800bdd8 <USART_SetConfig+0x2e8>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd82:	2b05      	cmp	r3, #5
 800bd84:	d026      	beq.n	800bdd4 <USART_SetConfig+0x2e4>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd8a:	2b06      	cmp	r3, #6
 800bd8c:	d020      	beq.n	800bdd0 <USART_SetConfig+0x2e0>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd92:	2b07      	cmp	r3, #7
 800bd94:	d01a      	beq.n	800bdcc <USART_SetConfig+0x2dc>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd9a:	2b08      	cmp	r3, #8
 800bd9c:	d014      	beq.n	800bdc8 <USART_SetConfig+0x2d8>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda2:	2b09      	cmp	r3, #9
 800bda4:	d00e      	beq.n	800bdc4 <USART_SetConfig+0x2d4>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdaa:	2b0a      	cmp	r3, #10
 800bdac:	d008      	beq.n	800bdc0 <USART_SetConfig+0x2d0>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb2:	2b0b      	cmp	r3, #11
 800bdb4:	d102      	bne.n	800bdbc <USART_SetConfig+0x2cc>
 800bdb6:	2380      	movs	r3, #128	; 0x80
 800bdb8:	005b      	lsls	r3, r3, #1
 800bdba:	e024      	b.n	800be06 <USART_SetConfig+0x316>
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	e022      	b.n	800be06 <USART_SetConfig+0x316>
 800bdc0:	2380      	movs	r3, #128	; 0x80
 800bdc2:	e020      	b.n	800be06 <USART_SetConfig+0x316>
 800bdc4:	2340      	movs	r3, #64	; 0x40
 800bdc6:	e01e      	b.n	800be06 <USART_SetConfig+0x316>
 800bdc8:	2320      	movs	r3, #32
 800bdca:	e01c      	b.n	800be06 <USART_SetConfig+0x316>
 800bdcc:	2310      	movs	r3, #16
 800bdce:	e01a      	b.n	800be06 <USART_SetConfig+0x316>
 800bdd0:	230c      	movs	r3, #12
 800bdd2:	e018      	b.n	800be06 <USART_SetConfig+0x316>
 800bdd4:	230a      	movs	r3, #10
 800bdd6:	e016      	b.n	800be06 <USART_SetConfig+0x316>
 800bdd8:	2308      	movs	r3, #8
 800bdda:	e014      	b.n	800be06 <USART_SetConfig+0x316>
 800bddc:	2306      	movs	r3, #6
 800bdde:	e012      	b.n	800be06 <USART_SetConfig+0x316>
 800bde0:	2304      	movs	r3, #4
 800bde2:	e010      	b.n	800be06 <USART_SetConfig+0x316>
 800bde4:	2302      	movs	r3, #2
 800bde6:	e00e      	b.n	800be06 <USART_SetConfig+0x316>
 800bde8:	cfff69f3 	.word	0xcfff69f3
 800bdec:	ffffc0f6 	.word	0xffffc0f6
 800bdf0:	40013800 	.word	0x40013800
 800bdf4:	40021000 	.word	0x40021000
 800bdf8:	40004400 	.word	0x40004400
 800bdfc:	40004800 	.word	0x40004800
 800be00:	40004c00 	.word	0x40004c00
 800be04:	2301      	movs	r3, #1
 800be06:	0019      	movs	r1, r3
 800be08:	4886      	ldr	r0, [pc, #536]	; (800c024 <USART_SetConfig+0x534>)
 800be0a:	f7f4 f97b 	bl	8000104 <__udivsi3>
 800be0e:	0003      	movs	r3, r0
 800be10:	005a      	lsls	r2, r3, #1
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	085b      	lsrs	r3, r3, #1
 800be18:	18d2      	adds	r2, r2, r3
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	0019      	movs	r1, r3
 800be20:	0010      	movs	r0, r2
 800be22:	f7f4 f96f 	bl	8000104 <__udivsi3>
 800be26:	0003      	movs	r3, r0
 800be28:	61bb      	str	r3, [r7, #24]
      break;
 800be2a:	e0c3      	b.n	800bfb4 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800be2c:	f7fb ff6c 	bl	8007d08 <HAL_RCC_GetSysClockFreq>
 800be30:	0003      	movs	r3, r0
 800be32:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d044      	beq.n	800bec6 <USART_SetConfig+0x3d6>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be40:	2b01      	cmp	r3, #1
 800be42:	d03e      	beq.n	800bec2 <USART_SetConfig+0x3d2>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be48:	2b02      	cmp	r3, #2
 800be4a:	d038      	beq.n	800bebe <USART_SetConfig+0x3ce>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be50:	2b03      	cmp	r3, #3
 800be52:	d032      	beq.n	800beba <USART_SetConfig+0x3ca>
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be58:	2b04      	cmp	r3, #4
 800be5a:	d02c      	beq.n	800beb6 <USART_SetConfig+0x3c6>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be60:	2b05      	cmp	r3, #5
 800be62:	d026      	beq.n	800beb2 <USART_SetConfig+0x3c2>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be68:	2b06      	cmp	r3, #6
 800be6a:	d020      	beq.n	800beae <USART_SetConfig+0x3be>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be70:	2b07      	cmp	r3, #7
 800be72:	d01a      	beq.n	800beaa <USART_SetConfig+0x3ba>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be78:	2b08      	cmp	r3, #8
 800be7a:	d014      	beq.n	800bea6 <USART_SetConfig+0x3b6>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be80:	2b09      	cmp	r3, #9
 800be82:	d00e      	beq.n	800bea2 <USART_SetConfig+0x3b2>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be88:	2b0a      	cmp	r3, #10
 800be8a:	d008      	beq.n	800be9e <USART_SetConfig+0x3ae>
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be90:	2b0b      	cmp	r3, #11
 800be92:	d102      	bne.n	800be9a <USART_SetConfig+0x3aa>
 800be94:	2380      	movs	r3, #128	; 0x80
 800be96:	005b      	lsls	r3, r3, #1
 800be98:	e016      	b.n	800bec8 <USART_SetConfig+0x3d8>
 800be9a:	2301      	movs	r3, #1
 800be9c:	e014      	b.n	800bec8 <USART_SetConfig+0x3d8>
 800be9e:	2380      	movs	r3, #128	; 0x80
 800bea0:	e012      	b.n	800bec8 <USART_SetConfig+0x3d8>
 800bea2:	2340      	movs	r3, #64	; 0x40
 800bea4:	e010      	b.n	800bec8 <USART_SetConfig+0x3d8>
 800bea6:	2320      	movs	r3, #32
 800bea8:	e00e      	b.n	800bec8 <USART_SetConfig+0x3d8>
 800beaa:	2310      	movs	r3, #16
 800beac:	e00c      	b.n	800bec8 <USART_SetConfig+0x3d8>
 800beae:	230c      	movs	r3, #12
 800beb0:	e00a      	b.n	800bec8 <USART_SetConfig+0x3d8>
 800beb2:	230a      	movs	r3, #10
 800beb4:	e008      	b.n	800bec8 <USART_SetConfig+0x3d8>
 800beb6:	2308      	movs	r3, #8
 800beb8:	e006      	b.n	800bec8 <USART_SetConfig+0x3d8>
 800beba:	2306      	movs	r3, #6
 800bebc:	e004      	b.n	800bec8 <USART_SetConfig+0x3d8>
 800bebe:	2304      	movs	r3, #4
 800bec0:	e002      	b.n	800bec8 <USART_SetConfig+0x3d8>
 800bec2:	2302      	movs	r3, #2
 800bec4:	e000      	b.n	800bec8 <USART_SetConfig+0x3d8>
 800bec6:	2301      	movs	r3, #1
 800bec8:	0019      	movs	r1, r3
 800beca:	6938      	ldr	r0, [r7, #16]
 800becc:	f7f4 f91a 	bl	8000104 <__udivsi3>
 800bed0:	0003      	movs	r3, r0
 800bed2:	005a      	lsls	r2, r3, #1
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	085b      	lsrs	r3, r3, #1
 800beda:	18d2      	adds	r2, r2, r3
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	0019      	movs	r1, r3
 800bee2:	0010      	movs	r0, r2
 800bee4:	f7f4 f90e 	bl	8000104 <__udivsi3>
 800bee8:	0003      	movs	r3, r0
 800beea:	61bb      	str	r3, [r7, #24]
      break;
 800beec:	e062      	b.n	800bfb4 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d044      	beq.n	800bf80 <USART_SetConfig+0x490>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befa:	2b01      	cmp	r3, #1
 800befc:	d03e      	beq.n	800bf7c <USART_SetConfig+0x48c>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf02:	2b02      	cmp	r3, #2
 800bf04:	d038      	beq.n	800bf78 <USART_SetConfig+0x488>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf0a:	2b03      	cmp	r3, #3
 800bf0c:	d032      	beq.n	800bf74 <USART_SetConfig+0x484>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf12:	2b04      	cmp	r3, #4
 800bf14:	d02c      	beq.n	800bf70 <USART_SetConfig+0x480>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf1a:	2b05      	cmp	r3, #5
 800bf1c:	d026      	beq.n	800bf6c <USART_SetConfig+0x47c>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf22:	2b06      	cmp	r3, #6
 800bf24:	d020      	beq.n	800bf68 <USART_SetConfig+0x478>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf2a:	2b07      	cmp	r3, #7
 800bf2c:	d01a      	beq.n	800bf64 <USART_SetConfig+0x474>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf32:	2b08      	cmp	r3, #8
 800bf34:	d014      	beq.n	800bf60 <USART_SetConfig+0x470>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf3a:	2b09      	cmp	r3, #9
 800bf3c:	d00e      	beq.n	800bf5c <USART_SetConfig+0x46c>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf42:	2b0a      	cmp	r3, #10
 800bf44:	d008      	beq.n	800bf58 <USART_SetConfig+0x468>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf4a:	2b0b      	cmp	r3, #11
 800bf4c:	d102      	bne.n	800bf54 <USART_SetConfig+0x464>
 800bf4e:	2380      	movs	r3, #128	; 0x80
 800bf50:	005b      	lsls	r3, r3, #1
 800bf52:	e016      	b.n	800bf82 <USART_SetConfig+0x492>
 800bf54:	2301      	movs	r3, #1
 800bf56:	e014      	b.n	800bf82 <USART_SetConfig+0x492>
 800bf58:	2380      	movs	r3, #128	; 0x80
 800bf5a:	e012      	b.n	800bf82 <USART_SetConfig+0x492>
 800bf5c:	2340      	movs	r3, #64	; 0x40
 800bf5e:	e010      	b.n	800bf82 <USART_SetConfig+0x492>
 800bf60:	2320      	movs	r3, #32
 800bf62:	e00e      	b.n	800bf82 <USART_SetConfig+0x492>
 800bf64:	2310      	movs	r3, #16
 800bf66:	e00c      	b.n	800bf82 <USART_SetConfig+0x492>
 800bf68:	230c      	movs	r3, #12
 800bf6a:	e00a      	b.n	800bf82 <USART_SetConfig+0x492>
 800bf6c:	230a      	movs	r3, #10
 800bf6e:	e008      	b.n	800bf82 <USART_SetConfig+0x492>
 800bf70:	2308      	movs	r3, #8
 800bf72:	e006      	b.n	800bf82 <USART_SetConfig+0x492>
 800bf74:	2306      	movs	r3, #6
 800bf76:	e004      	b.n	800bf82 <USART_SetConfig+0x492>
 800bf78:	2304      	movs	r3, #4
 800bf7a:	e002      	b.n	800bf82 <USART_SetConfig+0x492>
 800bf7c:	2302      	movs	r3, #2
 800bf7e:	e000      	b.n	800bf82 <USART_SetConfig+0x492>
 800bf80:	2301      	movs	r3, #1
 800bf82:	0019      	movs	r1, r3
 800bf84:	2380      	movs	r3, #128	; 0x80
 800bf86:	0218      	lsls	r0, r3, #8
 800bf88:	f7f4 f8bc 	bl	8000104 <__udivsi3>
 800bf8c:	0003      	movs	r3, r0
 800bf8e:	005a      	lsls	r2, r3, #1
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	085b      	lsrs	r3, r3, #1
 800bf96:	18d2      	adds	r2, r2, r3
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	0019      	movs	r1, r3
 800bf9e:	0010      	movs	r0, r2
 800bfa0:	f7f4 f8b0 	bl	8000104 <__udivsi3>
 800bfa4:	0003      	movs	r3, r0
 800bfa6:	61bb      	str	r3, [r7, #24]
      break;
 800bfa8:	e004      	b.n	800bfb4 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 800bfaa:	231e      	movs	r3, #30
 800bfac:	18fb      	adds	r3, r7, r3
 800bfae:	2201      	movs	r2, #1
 800bfb0:	701a      	strb	r2, [r3, #0]
      break;
 800bfb2:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800bfb4:	69bb      	ldr	r3, [r7, #24]
 800bfb6:	2b0f      	cmp	r3, #15
 800bfb8:	d91c      	bls.n	800bff4 <USART_SetConfig+0x504>
 800bfba:	69ba      	ldr	r2, [r7, #24]
 800bfbc:	2380      	movs	r3, #128	; 0x80
 800bfbe:	025b      	lsls	r3, r3, #9
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d217      	bcs.n	800bff4 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	b29a      	uxth	r2, r3
 800bfc8:	200e      	movs	r0, #14
 800bfca:	183b      	adds	r3, r7, r0
 800bfcc:	210f      	movs	r1, #15
 800bfce:	438a      	bics	r2, r1
 800bfd0:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	085b      	lsrs	r3, r3, #1
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	2207      	movs	r2, #7
 800bfda:	4013      	ands	r3, r2
 800bfdc:	b299      	uxth	r1, r3
 800bfde:	183b      	adds	r3, r7, r0
 800bfe0:	183a      	adds	r2, r7, r0
 800bfe2:	8812      	ldrh	r2, [r2, #0]
 800bfe4:	430a      	orrs	r2, r1
 800bfe6:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	183a      	adds	r2, r7, r0
 800bfee:	8812      	ldrh	r2, [r2, #0]
 800bff0:	60da      	str	r2, [r3, #12]
 800bff2:	e003      	b.n	800bffc <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 800bff4:	231e      	movs	r3, #30
 800bff6:	18fb      	adds	r3, r7, r3
 800bff8:	2201      	movs	r2, #1
 800bffa:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2201      	movs	r2, #1
 800c000:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2201      	movs	r2, #1
 800c006:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2200      	movs	r2, #0
 800c00c:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2200      	movs	r2, #0
 800c012:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 800c014:	231e      	movs	r3, #30
 800c016:	18fb      	adds	r3, r7, r3
 800c018:	781b      	ldrb	r3, [r3, #0]
}
 800c01a:	0018      	movs	r0, r3
 800c01c:	46bd      	mov	sp, r7
 800c01e:	b008      	add	sp, #32
 800c020:	bd80      	pop	{r7, pc}
 800c022:	46c0      	nop			; (mov r8, r8)
 800c024:	00f42400 	.word	0x00f42400

0800c028 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b086      	sub	sp, #24
 800c02c:	af02      	add	r7, sp, #8
 800c02e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2200      	movs	r2, #0
 800c034:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c036:	f7f8 fbe5 	bl	8004804 <HAL_GetTick>
 800c03a:	0003      	movs	r3, r0
 800c03c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	2208      	movs	r2, #8
 800c046:	4013      	ands	r3, r2
 800c048:	2b08      	cmp	r3, #8
 800c04a:	d10e      	bne.n	800c06a <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800c04c:	68fa      	ldr	r2, [r7, #12]
 800c04e:	2380      	movs	r3, #128	; 0x80
 800c050:	0399      	lsls	r1, r3, #14
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	23fa      	movs	r3, #250	; 0xfa
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	9300      	str	r3, [sp, #0]
 800c05a:	0013      	movs	r3, r2
 800c05c:	2200      	movs	r2, #0
 800c05e:	f7ff fd11 	bl	800ba84 <USART_WaitOnFlagUntilTimeout>
 800c062:	1e03      	subs	r3, r0, #0
 800c064:	d001      	beq.n	800c06a <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c066:	2303      	movs	r3, #3
 800c068:	e01e      	b.n	800c0a8 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2204      	movs	r2, #4
 800c072:	4013      	ands	r3, r2
 800c074:	2b04      	cmp	r3, #4
 800c076:	d10e      	bne.n	800c096 <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800c078:	68fa      	ldr	r2, [r7, #12]
 800c07a:	2380      	movs	r3, #128	; 0x80
 800c07c:	03d9      	lsls	r1, r3, #15
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	23fa      	movs	r3, #250	; 0xfa
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	9300      	str	r3, [sp, #0]
 800c086:	0013      	movs	r3, r2
 800c088:	2200      	movs	r2, #0
 800c08a:	f7ff fcfb 	bl	800ba84 <USART_WaitOnFlagUntilTimeout>
 800c08e:	1e03      	subs	r3, r0, #0
 800c090:	d001      	beq.n	800c096 <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c092:	2303      	movs	r3, #3
 800c094:	e008      	b.n	800c0a8 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2259      	movs	r2, #89	; 0x59
 800c09a:	2101      	movs	r1, #1
 800c09c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2258      	movs	r2, #88	; 0x58
 800c0a2:	2100      	movs	r1, #0
 800c0a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c0a6:	2300      	movs	r3, #0
}
 800c0a8:	0018      	movs	r0, r3
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	b004      	add	sp, #16
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b082      	sub	sp, #8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	681a      	ldr	r2, [r3, #0]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	2140      	movs	r1, #64	; 0x40
 800c0c4:	438a      	bics	r2, r1
 800c0c6:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	689a      	ldr	r2, [r3, #8]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	2101      	movs	r1, #1
 800c0d4:	438a      	bics	r2, r1
 800c0d6:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2259      	movs	r2, #89	; 0x59
 800c0e2:	5c9b      	ldrb	r3, [r3, r2]
 800c0e4:	b2db      	uxtb	r3, r3
 800c0e6:	2b12      	cmp	r3, #18
 800c0e8:	d114      	bne.n	800c114 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	2208      	movs	r2, #8
 800c0f0:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	699a      	ldr	r2, [r3, #24]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2108      	movs	r1, #8
 800c0fe:	430a      	orrs	r2, r1
 800c100:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2259      	movs	r2, #89	; 0x59
 800c106:	2101      	movs	r1, #1
 800c108:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	0018      	movs	r0, r3
 800c10e:	f7f5 f831 	bl	8001174 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c112:	e00c      	b.n	800c12e <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c118:	b29b      	uxth	r3, r3
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d107      	bne.n	800c12e <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2259      	movs	r2, #89	; 0x59
 800c122:	2101      	movs	r1, #1
 800c124:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	0018      	movs	r0, r3
 800c12a:	f7ff fbff 	bl	800b92c <HAL_USART_TxRxCpltCallback>
}
 800c12e:	46c0      	nop			; (mov r8, r8)
 800c130:	46bd      	mov	sp, r7
 800c132:	b002      	add	sp, #8
 800c134:	bd80      	pop	{r7, pc}

0800c136 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 800c136:	b580      	push	{r7, lr}
 800c138:	b082      	sub	sp, #8
 800c13a:	af00      	add	r7, sp, #0
 800c13c:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c13e:	46c0      	nop			; (mov r8, r8)
 800c140:	46bd      	mov	sp, r7
 800c142:	b002      	add	sp, #8
 800c144:	bd80      	pop	{r7, pc}

0800c146 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 800c146:	b580      	push	{r7, lr}
 800c148:	b082      	sub	sp, #8
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c14e:	46c0      	nop			; (mov r8, r8)
 800c150:	46bd      	mov	sp, r7
 800c152:	b002      	add	sp, #8
 800c154:	bd80      	pop	{r7, pc}

0800c156 <LL_GPIO_SetPinMode>:
{
 800c156:	b580      	push	{r7, lr}
 800c158:	b084      	sub	sp, #16
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	60f8      	str	r0, [r7, #12]
 800c15e:	60b9      	str	r1, [r7, #8]
 800c160:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	6819      	ldr	r1, [r3, #0]
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	435b      	muls	r3, r3
 800c16a:	001a      	movs	r2, r3
 800c16c:	0013      	movs	r3, r2
 800c16e:	005b      	lsls	r3, r3, #1
 800c170:	189b      	adds	r3, r3, r2
 800c172:	43db      	mvns	r3, r3
 800c174:	400b      	ands	r3, r1
 800c176:	001a      	movs	r2, r3
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	435b      	muls	r3, r3
 800c17c:	6879      	ldr	r1, [r7, #4]
 800c17e:	434b      	muls	r3, r1
 800c180:	431a      	orrs	r2, r3
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	601a      	str	r2, [r3, #0]
}
 800c186:	46c0      	nop			; (mov r8, r8)
 800c188:	46bd      	mov	sp, r7
 800c18a:	b004      	add	sp, #16
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <LL_GPIO_SetPinOutputType>:
{
 800c18e:	b580      	push	{r7, lr}
 800c190:	b084      	sub	sp, #16
 800c192:	af00      	add	r7, sp, #0
 800c194:	60f8      	str	r0, [r7, #12]
 800c196:	60b9      	str	r1, [r7, #8]
 800c198:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	685b      	ldr	r3, [r3, #4]
 800c19e:	68ba      	ldr	r2, [r7, #8]
 800c1a0:	43d2      	mvns	r2, r2
 800c1a2:	401a      	ands	r2, r3
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	6879      	ldr	r1, [r7, #4]
 800c1a8:	434b      	muls	r3, r1
 800c1aa:	431a      	orrs	r2, r3
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	605a      	str	r2, [r3, #4]
}
 800c1b0:	46c0      	nop			; (mov r8, r8)
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	b004      	add	sp, #16
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <LL_GPIO_SetPinSpeed>:
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	60f8      	str	r0, [r7, #12]
 800c1c0:	60b9      	str	r1, [r7, #8]
 800c1c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	6899      	ldr	r1, [r3, #8]
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	435b      	muls	r3, r3
 800c1cc:	001a      	movs	r2, r3
 800c1ce:	0013      	movs	r3, r2
 800c1d0:	005b      	lsls	r3, r3, #1
 800c1d2:	189b      	adds	r3, r3, r2
 800c1d4:	43db      	mvns	r3, r3
 800c1d6:	400b      	ands	r3, r1
 800c1d8:	001a      	movs	r2, r3
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	435b      	muls	r3, r3
 800c1de:	6879      	ldr	r1, [r7, #4]
 800c1e0:	434b      	muls	r3, r1
 800c1e2:	431a      	orrs	r2, r3
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	609a      	str	r2, [r3, #8]
}
 800c1e8:	46c0      	nop			; (mov r8, r8)
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	b004      	add	sp, #16
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <LL_GPIO_SetPinPull>:
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b084      	sub	sp, #16
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	60f8      	str	r0, [r7, #12]
 800c1f8:	60b9      	str	r1, [r7, #8]
 800c1fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	68d9      	ldr	r1, [r3, #12]
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	435b      	muls	r3, r3
 800c204:	001a      	movs	r2, r3
 800c206:	0013      	movs	r3, r2
 800c208:	005b      	lsls	r3, r3, #1
 800c20a:	189b      	adds	r3, r3, r2
 800c20c:	43db      	mvns	r3, r3
 800c20e:	400b      	ands	r3, r1
 800c210:	001a      	movs	r2, r3
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	435b      	muls	r3, r3
 800c216:	6879      	ldr	r1, [r7, #4]
 800c218:	434b      	muls	r3, r1
 800c21a:	431a      	orrs	r2, r3
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	60da      	str	r2, [r3, #12]
}
 800c220:	46c0      	nop			; (mov r8, r8)
 800c222:	46bd      	mov	sp, r7
 800c224:	b004      	add	sp, #16
 800c226:	bd80      	pop	{r7, pc}

0800c228 <LL_GPIO_SetAFPin_0_7>:
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b084      	sub	sp, #16
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	60f8      	str	r0, [r7, #12]
 800c230:	60b9      	str	r1, [r7, #8]
 800c232:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	6a19      	ldr	r1, [r3, #32]
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	435b      	muls	r3, r3
 800c23c:	68ba      	ldr	r2, [r7, #8]
 800c23e:	4353      	muls	r3, r2
 800c240:	68ba      	ldr	r2, [r7, #8]
 800c242:	435a      	muls	r2, r3
 800c244:	0013      	movs	r3, r2
 800c246:	011b      	lsls	r3, r3, #4
 800c248:	1a9b      	subs	r3, r3, r2
 800c24a:	43db      	mvns	r3, r3
 800c24c:	400b      	ands	r3, r1
 800c24e:	001a      	movs	r2, r3
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	435b      	muls	r3, r3
 800c254:	68b9      	ldr	r1, [r7, #8]
 800c256:	434b      	muls	r3, r1
 800c258:	68b9      	ldr	r1, [r7, #8]
 800c25a:	434b      	muls	r3, r1
 800c25c:	6879      	ldr	r1, [r7, #4]
 800c25e:	434b      	muls	r3, r1
 800c260:	431a      	orrs	r2, r3
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	621a      	str	r2, [r3, #32]
}
 800c266:	46c0      	nop			; (mov r8, r8)
 800c268:	46bd      	mov	sp, r7
 800c26a:	b004      	add	sp, #16
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <LL_GPIO_SetAFPin_8_15>:
{
 800c26e:	b580      	push	{r7, lr}
 800c270:	b084      	sub	sp, #16
 800c272:	af00      	add	r7, sp, #0
 800c274:	60f8      	str	r0, [r7, #12]
 800c276:	60b9      	str	r1, [r7, #8]
 800c278:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	0a1b      	lsrs	r3, r3, #8
 800c282:	68ba      	ldr	r2, [r7, #8]
 800c284:	0a12      	lsrs	r2, r2, #8
 800c286:	4353      	muls	r3, r2
 800c288:	68ba      	ldr	r2, [r7, #8]
 800c28a:	0a12      	lsrs	r2, r2, #8
 800c28c:	4353      	muls	r3, r2
 800c28e:	68ba      	ldr	r2, [r7, #8]
 800c290:	0a12      	lsrs	r2, r2, #8
 800c292:	435a      	muls	r2, r3
 800c294:	0013      	movs	r3, r2
 800c296:	011b      	lsls	r3, r3, #4
 800c298:	1a9b      	subs	r3, r3, r2
 800c29a:	43db      	mvns	r3, r3
 800c29c:	400b      	ands	r3, r1
 800c29e:	001a      	movs	r2, r3
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	0a1b      	lsrs	r3, r3, #8
 800c2a4:	68b9      	ldr	r1, [r7, #8]
 800c2a6:	0a09      	lsrs	r1, r1, #8
 800c2a8:	434b      	muls	r3, r1
 800c2aa:	68b9      	ldr	r1, [r7, #8]
 800c2ac:	0a09      	lsrs	r1, r1, #8
 800c2ae:	434b      	muls	r3, r1
 800c2b0:	68b9      	ldr	r1, [r7, #8]
 800c2b2:	0a09      	lsrs	r1, r1, #8
 800c2b4:	434b      	muls	r3, r1
 800c2b6:	6879      	ldr	r1, [r7, #4]
 800c2b8:	434b      	muls	r3, r1
 800c2ba:	431a      	orrs	r2, r3
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c2c0:	46c0      	nop			; (mov r8, r8)
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	b004      	add	sp, #16
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b084      	sub	sp, #16
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800c2d6:	e047      	b.n	800c368 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	2101      	movs	r1, #1
 800c2de:	68fa      	ldr	r2, [r7, #12]
 800c2e0:	4091      	lsls	r1, r2
 800c2e2:	000a      	movs	r2, r1
 800c2e4:	4013      	ands	r3, r2
 800c2e6:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d039      	beq.n	800c362 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	2b01      	cmp	r3, #1
 800c2f4:	d003      	beq.n	800c2fe <LL_GPIO_Init+0x36>
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	2b02      	cmp	r3, #2
 800c2fc:	d10d      	bne.n	800c31a <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	689a      	ldr	r2, [r3, #8]
 800c302:	68b9      	ldr	r1, [r7, #8]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	0018      	movs	r0, r3
 800c308:	f7ff ff56 	bl	800c1b8 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	68da      	ldr	r2, [r3, #12]
 800c310:	68b9      	ldr	r1, [r7, #8]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	0018      	movs	r0, r3
 800c316:	f7ff ff3a 	bl	800c18e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	691a      	ldr	r2, [r3, #16]
 800c31e:	68b9      	ldr	r1, [r7, #8]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	0018      	movs	r0, r3
 800c324:	f7ff ff64 	bl	800c1f0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	2b02      	cmp	r3, #2
 800c32e:	d111      	bne.n	800c354 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	2bff      	cmp	r3, #255	; 0xff
 800c334:	d807      	bhi.n	800c346 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	695a      	ldr	r2, [r3, #20]
 800c33a:	68b9      	ldr	r1, [r7, #8]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	0018      	movs	r0, r3
 800c340:	f7ff ff72 	bl	800c228 <LL_GPIO_SetAFPin_0_7>
 800c344:	e006      	b.n	800c354 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	695a      	ldr	r2, [r3, #20]
 800c34a:	68b9      	ldr	r1, [r7, #8]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	0018      	movs	r0, r3
 800c350:	f7ff ff8d 	bl	800c26e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	685a      	ldr	r2, [r3, #4]
 800c358:	68b9      	ldr	r1, [r7, #8]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	0018      	movs	r0, r3
 800c35e:	f7ff fefa 	bl	800c156 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	3301      	adds	r3, #1
 800c366:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	681a      	ldr	r2, [r3, #0]
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	40da      	lsrs	r2, r3
 800c370:	1e13      	subs	r3, r2, #0
 800c372:	d1b1      	bne.n	800c2d8 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800c374:	2300      	movs	r3, #0
}
 800c376:	0018      	movs	r0, r3
 800c378:	46bd      	mov	sp, r7
 800c37a:	b004      	add	sp, #16
 800c37c:	bd80      	pop	{r7, pc}
	...

0800c380 <LL_RCC_HSI_IsReady>:
{
 800c380:	b580      	push	{r7, lr}
 800c382:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800c384:	4b07      	ldr	r3, [pc, #28]	; (800c3a4 <LL_RCC_HSI_IsReady+0x24>)
 800c386:	681a      	ldr	r2, [r3, #0]
 800c388:	2380      	movs	r3, #128	; 0x80
 800c38a:	00db      	lsls	r3, r3, #3
 800c38c:	401a      	ands	r2, r3
 800c38e:	2380      	movs	r3, #128	; 0x80
 800c390:	00db      	lsls	r3, r3, #3
 800c392:	429a      	cmp	r2, r3
 800c394:	d101      	bne.n	800c39a <LL_RCC_HSI_IsReady+0x1a>
 800c396:	2301      	movs	r3, #1
 800c398:	e000      	b.n	800c39c <LL_RCC_HSI_IsReady+0x1c>
 800c39a:	2300      	movs	r3, #0
}
 800c39c:	0018      	movs	r0, r3
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
 800c3a2:	46c0      	nop			; (mov r8, r8)
 800c3a4:	40021000 	.word	0x40021000

0800c3a8 <LL_RCC_LSE_IsReady>:
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c3ac:	4b05      	ldr	r3, [pc, #20]	; (800c3c4 <LL_RCC_LSE_IsReady+0x1c>)
 800c3ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3b0:	2202      	movs	r2, #2
 800c3b2:	4013      	ands	r3, r2
 800c3b4:	2b02      	cmp	r3, #2
 800c3b6:	d101      	bne.n	800c3bc <LL_RCC_LSE_IsReady+0x14>
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	e000      	b.n	800c3be <LL_RCC_LSE_IsReady+0x16>
 800c3bc:	2300      	movs	r3, #0
}
 800c3be:	0018      	movs	r0, r3
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	40021000 	.word	0x40021000

0800c3c8 <LL_RCC_GetSysClkSource>:
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c3cc:	4b03      	ldr	r3, [pc, #12]	; (800c3dc <LL_RCC_GetSysClkSource+0x14>)
 800c3ce:	689b      	ldr	r3, [r3, #8]
 800c3d0:	2238      	movs	r2, #56	; 0x38
 800c3d2:	4013      	ands	r3, r2
}
 800c3d4:	0018      	movs	r0, r3
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
 800c3da:	46c0      	nop			; (mov r8, r8)
 800c3dc:	40021000 	.word	0x40021000

0800c3e0 <LL_RCC_GetAHBPrescaler>:
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c3e4:	4b03      	ldr	r3, [pc, #12]	; (800c3f4 <LL_RCC_GetAHBPrescaler+0x14>)
 800c3e6:	689a      	ldr	r2, [r3, #8]
 800c3e8:	23f0      	movs	r3, #240	; 0xf0
 800c3ea:	011b      	lsls	r3, r3, #4
 800c3ec:	4013      	ands	r3, r2
}
 800c3ee:	0018      	movs	r0, r3
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}
 800c3f4:	40021000 	.word	0x40021000

0800c3f8 <LL_RCC_GetAPB1Prescaler>:
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800c3fc:	4b03      	ldr	r3, [pc, #12]	; (800c40c <LL_RCC_GetAPB1Prescaler+0x14>)
 800c3fe:	689a      	ldr	r2, [r3, #8]
 800c400:	23e0      	movs	r3, #224	; 0xe0
 800c402:	01db      	lsls	r3, r3, #7
 800c404:	4013      	ands	r3, r2
}
 800c406:	0018      	movs	r0, r3
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}
 800c40c:	40021000 	.word	0x40021000

0800c410 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b082      	sub	sp, #8
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800c418:	4b05      	ldr	r3, [pc, #20]	; (800c430 <LL_RCC_GetUSARTClockSource+0x20>)
 800c41a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	401a      	ands	r2, r3
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	041b      	lsls	r3, r3, #16
 800c424:	4313      	orrs	r3, r2
}
 800c426:	0018      	movs	r0, r3
 800c428:	46bd      	mov	sp, r7
 800c42a:	b002      	add	sp, #8
 800c42c:	bd80      	pop	{r7, pc}
 800c42e:	46c0      	nop			; (mov r8, r8)
 800c430:	40021000 	.word	0x40021000

0800c434 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800c438:	4b03      	ldr	r3, [pc, #12]	; (800c448 <LL_RCC_PLL_GetN+0x14>)
 800c43a:	68db      	ldr	r3, [r3, #12]
 800c43c:	0a1b      	lsrs	r3, r3, #8
 800c43e:	227f      	movs	r2, #127	; 0x7f
 800c440:	4013      	ands	r3, r2
}
 800c442:	0018      	movs	r0, r3
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}
 800c448:	40021000 	.word	0x40021000

0800c44c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800c450:	4b03      	ldr	r3, [pc, #12]	; (800c460 <LL_RCC_PLL_GetR+0x14>)
 800c452:	68db      	ldr	r3, [r3, #12]
 800c454:	0f5b      	lsrs	r3, r3, #29
 800c456:	075b      	lsls	r3, r3, #29
}
 800c458:	0018      	movs	r0, r3
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}
 800c45e:	46c0      	nop			; (mov r8, r8)
 800c460:	40021000 	.word	0x40021000

0800c464 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c468:	4b03      	ldr	r3, [pc, #12]	; (800c478 <LL_RCC_PLL_GetMainSource+0x14>)
 800c46a:	68db      	ldr	r3, [r3, #12]
 800c46c:	2203      	movs	r2, #3
 800c46e:	4013      	ands	r3, r2
}
 800c470:	0018      	movs	r0, r3
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
 800c476:	46c0      	nop			; (mov r8, r8)
 800c478:	40021000 	.word	0x40021000

0800c47c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800c480:	4b03      	ldr	r3, [pc, #12]	; (800c490 <LL_RCC_PLL_GetDivider+0x14>)
 800c482:	68db      	ldr	r3, [r3, #12]
 800c484:	2270      	movs	r2, #112	; 0x70
 800c486:	4013      	ands	r3, r2
}
 800c488:	0018      	movs	r0, r3
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	46c0      	nop			; (mov r8, r8)
 800c490:	40021000 	.word	0x40021000

0800c494 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b082      	sub	sp, #8
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800c49c:	f000 f8a8 	bl	800c5f0 <RCC_GetSystemClockFreq>
 800c4a0:	0002      	movs	r2, r0
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	0018      	movs	r0, r3
 800c4ac:	f000 f8ce 	bl	800c64c <RCC_GetHCLKClockFreq>
 800c4b0:	0002      	movs	r2, r0
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	0018      	movs	r0, r3
 800c4bc:	f000 f8de 	bl	800c67c <RCC_GetPCLK1ClockFreq>
 800c4c0:	0002      	movs	r2, r0
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	609a      	str	r2, [r3, #8]
}
 800c4c6:	46c0      	nop			; (mov r8, r8)
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	b002      	add	sp, #8
 800c4cc:	bd80      	pop	{r7, pc}
	...

0800c4d0 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b084      	sub	sp, #16
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800c4d8:	2300      	movs	r3, #0
 800c4da:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2b03      	cmp	r3, #3
 800c4e0:	d134      	bne.n	800c54c <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	0018      	movs	r0, r3
 800c4e6:	f7ff ff93 	bl	800c410 <LL_RCC_GetUSARTClockSource>
 800c4ea:	0003      	movs	r3, r0
 800c4ec:	4a39      	ldr	r2, [pc, #228]	; (800c5d4 <LL_RCC_GetUSARTClockFreq+0x104>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d016      	beq.n	800c520 <LL_RCC_GetUSARTClockFreq+0x50>
 800c4f2:	4a38      	ldr	r2, [pc, #224]	; (800c5d4 <LL_RCC_GetUSARTClockFreq+0x104>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d81c      	bhi.n	800c532 <LL_RCC_GetUSARTClockFreq+0x62>
 800c4f8:	4a37      	ldr	r2, [pc, #220]	; (800c5d8 <LL_RCC_GetUSARTClockFreq+0x108>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d003      	beq.n	800c506 <LL_RCC_GetUSARTClockFreq+0x36>
 800c4fe:	4a37      	ldr	r2, [pc, #220]	; (800c5dc <LL_RCC_GetUSARTClockFreq+0x10c>)
 800c500:	4293      	cmp	r3, r2
 800c502:	d005      	beq.n	800c510 <LL_RCC_GetUSARTClockFreq+0x40>
 800c504:	e015      	b.n	800c532 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800c506:	f000 f873 	bl	800c5f0 <RCC_GetSystemClockFreq>
 800c50a:	0003      	movs	r3, r0
 800c50c:	60fb      	str	r3, [r7, #12]
        break;
 800c50e:	e05c      	b.n	800c5ca <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800c510:	f7ff ff36 	bl	800c380 <LL_RCC_HSI_IsReady>
 800c514:	0003      	movs	r3, r0
 800c516:	2b01      	cmp	r3, #1
 800c518:	d150      	bne.n	800c5bc <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 800c51a:	4b31      	ldr	r3, [pc, #196]	; (800c5e0 <LL_RCC_GetUSARTClockFreq+0x110>)
 800c51c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c51e:	e04d      	b.n	800c5bc <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800c520:	f7ff ff42 	bl	800c3a8 <LL_RCC_LSE_IsReady>
 800c524:	0003      	movs	r3, r0
 800c526:	2b01      	cmp	r3, #1
 800c528:	d14a      	bne.n	800c5c0 <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 800c52a:	2380      	movs	r3, #128	; 0x80
 800c52c:	021b      	lsls	r3, r3, #8
 800c52e:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c530:	e046      	b.n	800c5c0 <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800c532:	f000 f85d 	bl	800c5f0 <RCC_GetSystemClockFreq>
 800c536:	0003      	movs	r3, r0
 800c538:	0018      	movs	r0, r3
 800c53a:	f000 f887 	bl	800c64c <RCC_GetHCLKClockFreq>
 800c53e:	0003      	movs	r3, r0
 800c540:	0018      	movs	r0, r3
 800c542:	f000 f89b 	bl	800c67c <RCC_GetPCLK1ClockFreq>
 800c546:	0003      	movs	r3, r0
 800c548:	60fb      	str	r3, [r7, #12]
        break;
 800c54a:	e03e      	b.n	800c5ca <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2b0c      	cmp	r3, #12
 800c550:	d13b      	bne.n	800c5ca <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	0018      	movs	r0, r3
 800c556:	f7ff ff5b 	bl	800c410 <LL_RCC_GetUSARTClockSource>
 800c55a:	0003      	movs	r3, r0
 800c55c:	4a21      	ldr	r2, [pc, #132]	; (800c5e4 <LL_RCC_GetUSARTClockFreq+0x114>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d016      	beq.n	800c590 <LL_RCC_GetUSARTClockFreq+0xc0>
 800c562:	4a20      	ldr	r2, [pc, #128]	; (800c5e4 <LL_RCC_GetUSARTClockFreq+0x114>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d81c      	bhi.n	800c5a2 <LL_RCC_GetUSARTClockFreq+0xd2>
 800c568:	4a1f      	ldr	r2, [pc, #124]	; (800c5e8 <LL_RCC_GetUSARTClockFreq+0x118>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d003      	beq.n	800c576 <LL_RCC_GetUSARTClockFreq+0xa6>
 800c56e:	4a1f      	ldr	r2, [pc, #124]	; (800c5ec <LL_RCC_GetUSARTClockFreq+0x11c>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d005      	beq.n	800c580 <LL_RCC_GetUSARTClockFreq+0xb0>
 800c574:	e015      	b.n	800c5a2 <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800c576:	f000 f83b 	bl	800c5f0 <RCC_GetSystemClockFreq>
 800c57a:	0003      	movs	r3, r0
 800c57c:	60fb      	str	r3, [r7, #12]
        break;
 800c57e:	e024      	b.n	800c5ca <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800c580:	f7ff fefe 	bl	800c380 <LL_RCC_HSI_IsReady>
 800c584:	0003      	movs	r3, r0
 800c586:	2b01      	cmp	r3, #1
 800c588:	d11c      	bne.n	800c5c4 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800c58a:	4b15      	ldr	r3, [pc, #84]	; (800c5e0 <LL_RCC_GetUSARTClockFreq+0x110>)
 800c58c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c58e:	e019      	b.n	800c5c4 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800c590:	f7ff ff0a 	bl	800c3a8 <LL_RCC_LSE_IsReady>
 800c594:	0003      	movs	r3, r0
 800c596:	2b01      	cmp	r3, #1
 800c598:	d116      	bne.n	800c5c8 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800c59a:	2380      	movs	r3, #128	; 0x80
 800c59c:	021b      	lsls	r3, r3, #8
 800c59e:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c5a0:	e012      	b.n	800c5c8 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800c5a2:	f000 f825 	bl	800c5f0 <RCC_GetSystemClockFreq>
 800c5a6:	0003      	movs	r3, r0
 800c5a8:	0018      	movs	r0, r3
 800c5aa:	f000 f84f 	bl	800c64c <RCC_GetHCLKClockFreq>
 800c5ae:	0003      	movs	r3, r0
 800c5b0:	0018      	movs	r0, r3
 800c5b2:	f000 f863 	bl	800c67c <RCC_GetPCLK1ClockFreq>
 800c5b6:	0003      	movs	r3, r0
 800c5b8:	60fb      	str	r3, [r7, #12]
        break;
 800c5ba:	e006      	b.n	800c5ca <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c5bc:	46c0      	nop			; (mov r8, r8)
 800c5be:	e004      	b.n	800c5ca <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c5c0:	46c0      	nop			; (mov r8, r8)
 800c5c2:	e002      	b.n	800c5ca <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c5c4:	46c0      	nop			; (mov r8, r8)
 800c5c6:	e000      	b.n	800c5ca <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c5c8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
}
 800c5cc:	0018      	movs	r0, r3
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	b004      	add	sp, #16
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	00030003 	.word	0x00030003
 800c5d8:	00030001 	.word	0x00030001
 800c5dc:	00030002 	.word	0x00030002
 800c5e0:	00f42400 	.word	0x00f42400
 800c5e4:	000c000c 	.word	0x000c000c
 800c5e8:	000c0004 	.word	0x000c0004
 800c5ec:	000c0008 	.word	0x000c0008

0800c5f0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b082      	sub	sp, #8
 800c5f4:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800c5f6:	f7ff fee7 	bl	800c3c8 <LL_RCC_GetSysClkSource>
 800c5fa:	0003      	movs	r3, r0
 800c5fc:	2b08      	cmp	r3, #8
 800c5fe:	d002      	beq.n	800c606 <RCC_GetSystemClockFreq+0x16>
 800c600:	2b10      	cmp	r3, #16
 800c602:	d003      	beq.n	800c60c <RCC_GetSystemClockFreq+0x1c>
 800c604:	e007      	b.n	800c616 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800c606:	4b0e      	ldr	r3, [pc, #56]	; (800c640 <RCC_GetSystemClockFreq+0x50>)
 800c608:	607b      	str	r3, [r7, #4]
      break;
 800c60a:	e014      	b.n	800c636 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800c60c:	f000 f84c 	bl	800c6a8 <RCC_PLL_GetFreqDomain_SYS>
 800c610:	0003      	movs	r3, r0
 800c612:	607b      	str	r3, [r7, #4]
      break;
 800c614:	e00f      	b.n	800c636 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800c616:	4b0b      	ldr	r3, [pc, #44]	; (800c644 <RCC_GetSystemClockFreq+0x54>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	0adb      	lsrs	r3, r3, #11
 800c61c:	2207      	movs	r2, #7
 800c61e:	4013      	ands	r3, r2
 800c620:	2201      	movs	r2, #1
 800c622:	409a      	lsls	r2, r3
 800c624:	0013      	movs	r3, r2
 800c626:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800c628:	6839      	ldr	r1, [r7, #0]
 800c62a:	4807      	ldr	r0, [pc, #28]	; (800c648 <RCC_GetSystemClockFreq+0x58>)
 800c62c:	f7f3 fd6a 	bl	8000104 <__udivsi3>
 800c630:	0003      	movs	r3, r0
 800c632:	607b      	str	r3, [r7, #4]
      break;
 800c634:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800c636:	687b      	ldr	r3, [r7, #4]
}
 800c638:	0018      	movs	r0, r3
 800c63a:	46bd      	mov	sp, r7
 800c63c:	b002      	add	sp, #8
 800c63e:	bd80      	pop	{r7, pc}
 800c640:	007a1200 	.word	0x007a1200
 800c644:	40021000 	.word	0x40021000
 800c648:	00f42400 	.word	0x00f42400

0800c64c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800c654:	f7ff fec4 	bl	800c3e0 <LL_RCC_GetAHBPrescaler>
 800c658:	0003      	movs	r3, r0
 800c65a:	0a1b      	lsrs	r3, r3, #8
 800c65c:	220f      	movs	r2, #15
 800c65e:	401a      	ands	r2, r3
 800c660:	4b05      	ldr	r3, [pc, #20]	; (800c678 <RCC_GetHCLKClockFreq+0x2c>)
 800c662:	0092      	lsls	r2, r2, #2
 800c664:	58d3      	ldr	r3, [r2, r3]
 800c666:	221f      	movs	r2, #31
 800c668:	4013      	ands	r3, r2
 800c66a:	687a      	ldr	r2, [r7, #4]
 800c66c:	40da      	lsrs	r2, r3
 800c66e:	0013      	movs	r3, r2
}
 800c670:	0018      	movs	r0, r3
 800c672:	46bd      	mov	sp, r7
 800c674:	b002      	add	sp, #8
 800c676:	bd80      	pop	{r7, pc}
 800c678:	080183f8 	.word	0x080183f8

0800c67c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800c684:	f7ff feb8 	bl	800c3f8 <LL_RCC_GetAPB1Prescaler>
 800c688:	0003      	movs	r3, r0
 800c68a:	0b1a      	lsrs	r2, r3, #12
 800c68c:	4b05      	ldr	r3, [pc, #20]	; (800c6a4 <RCC_GetPCLK1ClockFreq+0x28>)
 800c68e:	0092      	lsls	r2, r2, #2
 800c690:	58d3      	ldr	r3, [r2, r3]
 800c692:	221f      	movs	r2, #31
 800c694:	4013      	ands	r3, r2
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	40da      	lsrs	r2, r3
 800c69a:	0013      	movs	r3, r2
}
 800c69c:	0018      	movs	r0, r3
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	b002      	add	sp, #8
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	08018438 	.word	0x08018438

0800c6a8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800c6a8:	b590      	push	{r4, r7, lr}
 800c6aa:	b083      	sub	sp, #12
 800c6ac:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800c6ae:	f7ff fed9 	bl	800c464 <LL_RCC_PLL_GetMainSource>
 800c6b2:	0003      	movs	r3, r0
 800c6b4:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	2b02      	cmp	r3, #2
 800c6ba:	d003      	beq.n	800c6c4 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	2b03      	cmp	r3, #3
 800c6c0:	d003      	beq.n	800c6ca <RCC_PLL_GetFreqDomain_SYS+0x22>
 800c6c2:	e005      	b.n	800c6d0 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800c6c4:	4b13      	ldr	r3, [pc, #76]	; (800c714 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800c6c6:	607b      	str	r3, [r7, #4]
      break;
 800c6c8:	e005      	b.n	800c6d6 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800c6ca:	4b13      	ldr	r3, [pc, #76]	; (800c718 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800c6cc:	607b      	str	r3, [r7, #4]
      break;
 800c6ce:	e002      	b.n	800c6d6 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800c6d0:	4b10      	ldr	r3, [pc, #64]	; (800c714 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800c6d2:	607b      	str	r3, [r7, #4]
      break;
 800c6d4:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800c6d6:	f7ff fead 	bl	800c434 <LL_RCC_PLL_GetN>
 800c6da:	0002      	movs	r2, r0
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	4353      	muls	r3, r2
 800c6e0:	001c      	movs	r4, r3
 800c6e2:	f7ff fecb 	bl	800c47c <LL_RCC_PLL_GetDivider>
 800c6e6:	0003      	movs	r3, r0
 800c6e8:	091b      	lsrs	r3, r3, #4
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	0019      	movs	r1, r3
 800c6ee:	0020      	movs	r0, r4
 800c6f0:	f7f3 fd08 	bl	8000104 <__udivsi3>
 800c6f4:	0003      	movs	r3, r0
 800c6f6:	001c      	movs	r4, r3
 800c6f8:	f7ff fea8 	bl	800c44c <LL_RCC_PLL_GetR>
 800c6fc:	0003      	movs	r3, r0
 800c6fe:	0f5b      	lsrs	r3, r3, #29
 800c700:	3301      	adds	r3, #1
 800c702:	0019      	movs	r1, r3
 800c704:	0020      	movs	r0, r4
 800c706:	f7f3 fcfd 	bl	8000104 <__udivsi3>
 800c70a:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800c70c:	0018      	movs	r0, r3
 800c70e:	46bd      	mov	sp, r7
 800c710:	b003      	add	sp, #12
 800c712:	bd90      	pop	{r4, r7, pc}
 800c714:	00f42400 	.word	0x00f42400
 800c718:	007a1200 	.word	0x007a1200

0800c71c <LL_USART_IsEnabled>:
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b082      	sub	sp, #8
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	2201      	movs	r2, #1
 800c72a:	4013      	ands	r3, r2
 800c72c:	2b01      	cmp	r3, #1
 800c72e:	d101      	bne.n	800c734 <LL_USART_IsEnabled+0x18>
 800c730:	2301      	movs	r3, #1
 800c732:	e000      	b.n	800c736 <LL_USART_IsEnabled+0x1a>
 800c734:	2300      	movs	r3, #0
}
 800c736:	0018      	movs	r0, r3
 800c738:	46bd      	mov	sp, r7
 800c73a:	b002      	add	sp, #8
 800c73c:	bd80      	pop	{r7, pc}

0800c73e <LL_USART_SetPrescaler>:
{
 800c73e:	b580      	push	{r7, lr}
 800c740:	b082      	sub	sp, #8
 800c742:	af00      	add	r7, sp, #0
 800c744:	6078      	str	r0, [r7, #4]
 800c746:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c74c:	220f      	movs	r2, #15
 800c74e:	4393      	bics	r3, r2
 800c750:	683a      	ldr	r2, [r7, #0]
 800c752:	b292      	uxth	r2, r2
 800c754:	431a      	orrs	r2, r3
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800c75a:	46c0      	nop			; (mov r8, r8)
 800c75c:	46bd      	mov	sp, r7
 800c75e:	b002      	add	sp, #8
 800c760:	bd80      	pop	{r7, pc}
	...

0800c764 <LL_USART_SetStopBitsLength>:
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b082      	sub	sp, #8
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	4a05      	ldr	r2, [pc, #20]	; (800c788 <LL_USART_SetStopBitsLength+0x24>)
 800c774:	401a      	ands	r2, r3
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	431a      	orrs	r2, r3
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	605a      	str	r2, [r3, #4]
}
 800c77e:	46c0      	nop			; (mov r8, r8)
 800c780:	46bd      	mov	sp, r7
 800c782:	b002      	add	sp, #8
 800c784:	bd80      	pop	{r7, pc}
 800c786:	46c0      	nop			; (mov r8, r8)
 800c788:	ffffcfff 	.word	0xffffcfff

0800c78c <LL_USART_SetHWFlowCtrl>:
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
 800c794:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	689b      	ldr	r3, [r3, #8]
 800c79a:	4a05      	ldr	r2, [pc, #20]	; (800c7b0 <LL_USART_SetHWFlowCtrl+0x24>)
 800c79c:	401a      	ands	r2, r3
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	431a      	orrs	r2, r3
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	609a      	str	r2, [r3, #8]
}
 800c7a6:	46c0      	nop			; (mov r8, r8)
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	b002      	add	sp, #8
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	46c0      	nop			; (mov r8, r8)
 800c7b0:	fffffcff 	.word	0xfffffcff

0800c7b4 <LL_USART_SetBaudRate>:
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b086      	sub	sp, #24
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	60f8      	str	r0, [r7, #12]
 800c7bc:	60b9      	str	r1, [r7, #8]
 800c7be:	607a      	str	r2, [r7, #4]
 800c7c0:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2b0b      	cmp	r3, #11
 800c7c6:	d846      	bhi.n	800c856 <LL_USART_SetBaudRate+0xa2>
  else if (BaudRate == 0U)
 800c7c8:	6a3b      	ldr	r3, [r7, #32]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d043      	beq.n	800c856 <LL_USART_SetBaudRate+0xa2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800c7ce:	683a      	ldr	r2, [r7, #0]
 800c7d0:	2380      	movs	r3, #128	; 0x80
 800c7d2:	021b      	lsls	r3, r3, #8
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d126      	bne.n	800c826 <LL_USART_SetBaudRate+0x72>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	001a      	movs	r2, r3
 800c7de:	4b20      	ldr	r3, [pc, #128]	; (800c860 <LL_USART_SetBaudRate+0xac>)
 800c7e0:	0092      	lsls	r2, r2, #2
 800c7e2:	58d3      	ldr	r3, [r2, r3]
 800c7e4:	0019      	movs	r1, r3
 800c7e6:	68b8      	ldr	r0, [r7, #8]
 800c7e8:	f7f3 fc8c 	bl	8000104 <__udivsi3>
 800c7ec:	0003      	movs	r3, r0
 800c7ee:	005a      	lsls	r2, r3, #1
 800c7f0:	6a3b      	ldr	r3, [r7, #32]
 800c7f2:	085b      	lsrs	r3, r3, #1
 800c7f4:	18d3      	adds	r3, r2, r3
 800c7f6:	6a39      	ldr	r1, [r7, #32]
 800c7f8:	0018      	movs	r0, r3
 800c7fa:	f7f3 fc83 	bl	8000104 <__udivsi3>
 800c7fe:	0003      	movs	r3, r0
 800c800:	b29b      	uxth	r3, r3
 800c802:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	4a17      	ldr	r2, [pc, #92]	; (800c864 <LL_USART_SetBaudRate+0xb0>)
 800c808:	4013      	ands	r3, r2
 800c80a:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	085b      	lsrs	r3, r3, #1
 800c810:	b29b      	uxth	r3, r3
 800c812:	001a      	movs	r2, r3
 800c814:	2307      	movs	r3, #7
 800c816:	4013      	ands	r3, r2
 800c818:	693a      	ldr	r2, [r7, #16]
 800c81a:	4313      	orrs	r3, r2
 800c81c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	693a      	ldr	r2, [r7, #16]
 800c822:	60da      	str	r2, [r3, #12]
}
 800c824:	e017      	b.n	800c856 <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	b2db      	uxtb	r3, r3
 800c82a:	001a      	movs	r2, r3
 800c82c:	4b0c      	ldr	r3, [pc, #48]	; (800c860 <LL_USART_SetBaudRate+0xac>)
 800c82e:	0092      	lsls	r2, r2, #2
 800c830:	58d3      	ldr	r3, [r2, r3]
 800c832:	0019      	movs	r1, r3
 800c834:	68b8      	ldr	r0, [r7, #8]
 800c836:	f7f3 fc65 	bl	8000104 <__udivsi3>
 800c83a:	0003      	movs	r3, r0
 800c83c:	001a      	movs	r2, r3
 800c83e:	6a3b      	ldr	r3, [r7, #32]
 800c840:	085b      	lsrs	r3, r3, #1
 800c842:	18d3      	adds	r3, r2, r3
 800c844:	6a39      	ldr	r1, [r7, #32]
 800c846:	0018      	movs	r0, r3
 800c848:	f7f3 fc5c 	bl	8000104 <__udivsi3>
 800c84c:	0003      	movs	r3, r0
 800c84e:	b29b      	uxth	r3, r3
 800c850:	001a      	movs	r2, r3
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	60da      	str	r2, [r3, #12]
}
 800c856:	46c0      	nop			; (mov r8, r8)
 800c858:	46bd      	mov	sp, r7
 800c85a:	b006      	add	sp, #24
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	46c0      	nop			; (mov r8, r8)
 800c860:	080184ac 	.word	0x080184ac
 800c864:	0000fff0 	.word	0x0000fff0

0800c868 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800c868:	b590      	push	{r4, r7, lr}
 800c86a:	b08b      	sub	sp, #44	; 0x2c
 800c86c:	af02      	add	r7, sp, #8
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800c872:	231f      	movs	r3, #31
 800c874:	18fb      	adds	r3, r7, r3
 800c876:	2201      	movs	r2, #1
 800c878:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800c87a:	2300      	movs	r3, #0
 800c87c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	0018      	movs	r0, r3
 800c882:	f7ff ff4b 	bl	800c71c <LL_USART_IsEnabled>
 800c886:	1e03      	subs	r3, r0, #0
 800c888:	d16a      	bne.n	800c960 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	4a38      	ldr	r2, [pc, #224]	; (800c970 <LL_USART_Init+0x108>)
 800c890:	401a      	ands	r2, r3
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	6899      	ldr	r1, [r3, #8]
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	691b      	ldr	r3, [r3, #16]
 800c89a:	4319      	orrs	r1, r3
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	695b      	ldr	r3, [r3, #20]
 800c8a0:	4319      	orrs	r1, r3
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	69db      	ldr	r3, [r3, #28]
 800c8a6:	430b      	orrs	r3, r1
 800c8a8:	431a      	orrs	r2, r3
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	68da      	ldr	r2, [r3, #12]
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	0011      	movs	r1, r2
 800c8b6:	0018      	movs	r0, r3
 800c8b8:	f7ff ff54 	bl	800c764 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	699a      	ldr	r2, [r3, #24]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	0011      	movs	r1, r2
 800c8c4:	0018      	movs	r0, r3
 800c8c6:	f7ff ff61 	bl	800c78c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	4a29      	ldr	r2, [pc, #164]	; (800c974 <LL_USART_Init+0x10c>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d105      	bne.n	800c8de <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800c8d2:	2003      	movs	r0, #3
 800c8d4:	f7ff fdfc 	bl	800c4d0 <LL_RCC_GetUSARTClockFreq>
 800c8d8:	0003      	movs	r3, r0
 800c8da:	61bb      	str	r3, [r7, #24]
 800c8dc:	e022      	b.n	800c924 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	4a25      	ldr	r2, [pc, #148]	; (800c978 <LL_USART_Init+0x110>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d105      	bne.n	800c8f2 <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800c8e6:	200c      	movs	r0, #12
 800c8e8:	f7ff fdf2 	bl	800c4d0 <LL_RCC_GetUSARTClockFreq>
 800c8ec:	0003      	movs	r3, r0
 800c8ee:	61bb      	str	r3, [r7, #24]
 800c8f0:	e018      	b.n	800c924 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART2 Clock selector flag */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	4a21      	ldr	r2, [pc, #132]	; (800c97c <LL_USART_Init+0x114>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d108      	bne.n	800c90c <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800c8fa:	240c      	movs	r4, #12
 800c8fc:	193b      	adds	r3, r7, r4
 800c8fe:	0018      	movs	r0, r3
 800c900:	f7ff fdc8 	bl	800c494 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800c904:	193b      	adds	r3, r7, r4
 800c906:	689b      	ldr	r3, [r3, #8]
 800c908:	61bb      	str	r3, [r7, #24]
 800c90a:	e00b      	b.n	800c924 <LL_USART_Init+0xbc>
#endif /* USART3 Clock selector flag */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	4a1c      	ldr	r2, [pc, #112]	; (800c980 <LL_USART_Init+0x118>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d107      	bne.n	800c924 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800c914:	240c      	movs	r4, #12
 800c916:	193b      	adds	r3, r7, r4
 800c918:	0018      	movs	r0, r3
 800c91a:	f7ff fdbb 	bl	800c494 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800c91e:	193b      	adds	r3, r7, r4
 800c920:	689b      	ldr	r3, [r3, #8]
 800c922:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800c924:	69bb      	ldr	r3, [r7, #24]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d013      	beq.n	800c952 <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d00f      	beq.n	800c952 <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800c932:	231f      	movs	r3, #31
 800c934:	18fb      	adds	r3, r7, r3
 800c936:	2200      	movs	r2, #0
 800c938:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	681a      	ldr	r2, [r3, #0]
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	69dc      	ldr	r4, [r3, #28]
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	69b9      	ldr	r1, [r7, #24]
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	9300      	str	r3, [sp, #0]
 800c94c:	0023      	movs	r3, r4
 800c94e:	f7ff ff31 	bl	800c7b4 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	681a      	ldr	r2, [r3, #0]
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	0011      	movs	r1, r2
 800c95a:	0018      	movs	r0, r3
 800c95c:	f7ff feef 	bl	800c73e <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800c960:	231f      	movs	r3, #31
 800c962:	18fb      	adds	r3, r7, r3
 800c964:	781b      	ldrb	r3, [r3, #0]
}
 800c966:	0018      	movs	r0, r3
 800c968:	46bd      	mov	sp, r7
 800c96a:	b009      	add	sp, #36	; 0x24
 800c96c:	bd90      	pop	{r4, r7, pc}
 800c96e:	46c0      	nop			; (mov r8, r8)
 800c970:	efff69f3 	.word	0xefff69f3
 800c974:	40013800 	.word	0x40013800
 800c978:	40004400 	.word	0x40004400
 800c97c:	40004800 	.word	0x40004800
 800c980:	40004c00 	.word	0x40004c00

0800c984 <__libc_init_array>:
 800c984:	b570      	push	{r4, r5, r6, lr}
 800c986:	2600      	movs	r6, #0
 800c988:	4d0c      	ldr	r5, [pc, #48]	; (800c9bc <__libc_init_array+0x38>)
 800c98a:	4c0d      	ldr	r4, [pc, #52]	; (800c9c0 <__libc_init_array+0x3c>)
 800c98c:	1b64      	subs	r4, r4, r5
 800c98e:	10a4      	asrs	r4, r4, #2
 800c990:	42a6      	cmp	r6, r4
 800c992:	d109      	bne.n	800c9a8 <__libc_init_array+0x24>
 800c994:	2600      	movs	r6, #0
 800c996:	f000 f821 	bl	800c9dc <_init>
 800c99a:	4d0a      	ldr	r5, [pc, #40]	; (800c9c4 <__libc_init_array+0x40>)
 800c99c:	4c0a      	ldr	r4, [pc, #40]	; (800c9c8 <__libc_init_array+0x44>)
 800c99e:	1b64      	subs	r4, r4, r5
 800c9a0:	10a4      	asrs	r4, r4, #2
 800c9a2:	42a6      	cmp	r6, r4
 800c9a4:	d105      	bne.n	800c9b2 <__libc_init_array+0x2e>
 800c9a6:	bd70      	pop	{r4, r5, r6, pc}
 800c9a8:	00b3      	lsls	r3, r6, #2
 800c9aa:	58eb      	ldr	r3, [r5, r3]
 800c9ac:	4798      	blx	r3
 800c9ae:	3601      	adds	r6, #1
 800c9b0:	e7ee      	b.n	800c990 <__libc_init_array+0xc>
 800c9b2:	00b3      	lsls	r3, r6, #2
 800c9b4:	58eb      	ldr	r3, [r5, r3]
 800c9b6:	4798      	blx	r3
 800c9b8:	3601      	adds	r6, #1
 800c9ba:	e7f2      	b.n	800c9a2 <__libc_init_array+0x1e>
 800c9bc:	080184dc 	.word	0x080184dc
 800c9c0:	080184dc 	.word	0x080184dc
 800c9c4:	080184dc 	.word	0x080184dc
 800c9c8:	080184e0 	.word	0x080184e0

0800c9cc <memset>:
 800c9cc:	0003      	movs	r3, r0
 800c9ce:	1882      	adds	r2, r0, r2
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d100      	bne.n	800c9d6 <memset+0xa>
 800c9d4:	4770      	bx	lr
 800c9d6:	7019      	strb	r1, [r3, #0]
 800c9d8:	3301      	adds	r3, #1
 800c9da:	e7f9      	b.n	800c9d0 <memset+0x4>

0800c9dc <_init>:
 800c9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9de:	46c0      	nop			; (mov r8, r8)
 800c9e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9e2:	bc08      	pop	{r3}
 800c9e4:	469e      	mov	lr, r3
 800c9e6:	4770      	bx	lr

0800c9e8 <_fini>:
 800c9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ea:	46c0      	nop			; (mov r8, r8)
 800c9ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9ee:	bc08      	pop	{r3}
 800c9f0:	469e      	mov	lr, r3
 800c9f2:	4770      	bx	lr
